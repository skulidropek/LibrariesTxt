internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemSecurity;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class AssemblyVersionInfo : object {
    public static string VersionString;
    public static string VersionHelpKeywordPrefix;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal class Microsoft.Reporting.ControlPolicyManager : PolicyManager {
    private static StrongName[] m_baseFullTrustAssemblies;
    public virtual AppDomain CreateAppDomainWithPolicy(string appDomainName, Evidence evidence, AppDomainSetup setupInfo, SandboxCasPolicySettings casSettings);
    private static StrongName[] GetBaseFullTrustAssemblies();
    private static StrongName CreateStrongName(Assembly assembly);
}
internal class Microsoft.Reporting.ControlService : LocalService {
    private List`1<LocalRenderingExtensionInfo> m_renderingExtensions;
    public PolicyManager PolicyManager { get; }
    public Evidence SandboxEvidence { get; }
    public ControlService(PreviewStore previewStore);
    public sealed virtual void Dispose();
    public virtual IEnumerable`1<LocalRenderingExtensionInfo> ListRenderingExtensions();
    protected virtual ReportProcessing CreateReportProcessing();
    protected virtual void SetProcessingCulture();
    protected virtual SubreportCallbackHandler CreateSubreportCallbackHandler();
    protected virtual IRenderingExtension CreateRenderer(string format, bool allowInternal);
    public virtual PolicyManager get_PolicyManager();
    public virtual Evidence get_SandboxEvidence();
}
internal class Microsoft.Reporting.DataEnumerableReader : object {
    private IEnumerator m_dataEnumerator;
    private PropertyDescriptorCollection m_columns;
    private object m_row;
    private bool m_firstRow;
    public int FieldCount { get; }
    internal DataEnumerableReader(IEnumerable dataEnumerable);
    public sealed virtual int get_FieldCount();
    public sealed virtual string GetName(int fieldIndex);
    public sealed virtual int GetOrdinal(string fieldName);
    public sealed virtual Type GetFieldType(int fieldIndex);
    public sealed virtual bool Read();
    public sealed virtual object GetValue(int fieldIndex);
    public sealed virtual void Dispose();
}
internal class Microsoft.Reporting.DataSetProcessingCommand : object {
    private IDataReader m_dataReader;
    private IDbTransaction m_transaction;
    private DataSetProcessingParameters m_parameters;
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public IDbTransaction Transaction { get; public set; }
    internal DataSetProcessingCommand(IDataReader dataReader);
    public sealed virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public sealed virtual IDataParameter CreateParameter();
    public sealed virtual void Cancel();
    public sealed virtual string get_CommandText();
    public sealed virtual void set_CommandText(string value);
    public sealed virtual int get_CommandTimeout();
    public sealed virtual void set_CommandTimeout(int value);
    public sealed virtual CommandType get_CommandType();
    public sealed virtual void set_CommandType(CommandType value);
    public sealed virtual IDataParameterCollection get_Parameters();
    public sealed virtual IDbTransaction get_Transaction();
    public sealed virtual void set_Transaction(IDbTransaction value);
    public sealed virtual void Dispose();
}
internal class Microsoft.Reporting.DataSetProcessingExtension : object {
    private string m_dataSetName;
    private IDataReader m_dataReader;
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string LocalizedName { get; }
    public DataSetProcessingExtension(IEnumerable dataSources, string dataSetName);
    internal void CreateDataReaderFromObject(object dataSourceValue);
    public sealed virtual void Open();
    public sealed virtual void Close();
    public sealed virtual IDbCommand CreateCommand();
    public sealed virtual IDbTransaction BeginTransaction();
    public sealed virtual string get_ConnectionString();
    public sealed virtual void set_ConnectionString(string value);
    public sealed virtual int get_ConnectionTimeout();
    public sealed virtual void Dispose();
    public sealed virtual void SetConfiguration(string configuration);
    public sealed virtual string get_LocalizedName();
    public IDataReader GetReader();
}
internal class Microsoft.Reporting.DataSetProcessingParameter : object {
    public string ParameterName { get; public set; }
    public object Value { get; public set; }
    public Object[] Values { get; public set; }
    public sealed virtual string get_ParameterName();
    public sealed virtual void set_ParameterName(string value);
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public sealed virtual Object[] get_Values();
    public sealed virtual void set_Values(Object[] value);
}
internal class Microsoft.Reporting.DataSetProcessingParameters : object {
    private List`1<IDataParameter> m_list;
    public sealed virtual int Add(IDataParameter parameter);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class Microsoft.Reporting.DataSetProcessingTransaction : object {
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    public sealed virtual void Dispose();
}
internal class Microsoft.Reporting.DataTableReader : object {
    private int m_currentRowNumber;
    private DataTable m_dataTable;
    public int FieldCount { get; }
    internal DataTableReader(DataTable dataTable);
    public sealed virtual int get_FieldCount();
    public sealed virtual string GetName(int fieldIndex);
    public sealed virtual int GetOrdinal(string fieldName);
    public sealed virtual Type GetFieldType(int fieldIndex);
    public sealed virtual bool Read();
    public sealed virtual object GetValue(int fieldIndex);
    public sealed virtual void Dispose();
}
internal class Microsoft.Reporting.DefinitionInvalidException : RSException {
    public DefinitionInvalidException(string reportPath, Exception inner);
    private DefinitionInvalidException(SerializationInfo info, StreamingContext context);
}
internal enum Microsoft.Reporting.DefinitionSource : Enum {
    public int value__;
    public static DefinitionSource Unknown;
    public static DefinitionSource File;
    public static DefinitionSource EmbeddedResource;
    public static DefinitionSource Direct;
}
internal class Microsoft.Reporting.GetResourceForLocalService : object {
    private PreviewStore m_store;
    public GetResourceForLocalService(PreviewStore localStore);
    public sealed virtual void GetResource(ICatalogItemContext reportContext, string imageUrl, Byte[]& resource, String& mimeType, Boolean& registerWarning);
}
internal interface Microsoft.Reporting.IDataSource {
    public string Name { get; }
    public object Value { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
}
internal abstract class Microsoft.Reporting.LocalDataRetrieval : object {
    private LocalService m_service;
    public LocalService Service { get; public set; }
    public bool SupportsQueries { get; }
    [DebuggerStepThroughAttribute]
public LocalService get_Service();
    [DebuggerStepThroughAttribute]
public void set_Service(LocalService value);
    public abstract virtual bool get_SupportsQueries();
    public abstract virtual String[] GetDataSetNames(CatalogItemContextBase reportContext);
    public abstract virtual IEnumerable GetProcessingDataSetsFromAPICollection(IEnumerable apiCollection);
    public abstract virtual DataSourceInfoCollection GetDataSources(CatalogItemContextBase reportContext);
    public abstract virtual ProcessingContext CreateProcessingContext(CatalogItemContextBase itemContext, ParameterInfoCollection parameters, IEnumerable dataSources, DatasourceCredentialsCollection credentials, OnDemandSubReportCallback subReportCallback, IGetResource getResourceFunction, IChunkFactory chunkFactory, ReportRuntimeSetup runtimeSetup, CreateAndRegisterStream createStreamCallback);
}
internal class Microsoft.Reporting.LocalExecutionInfo : object {
    public EventInformation EventInfo;
    private bool m_hasDocMap;
    private int m_totalPages;
    private PaginationMode m_paginationMode;
    private int m_autoRefresh;
    private ControlSnapshot __ReportSnapshot;
    private ControlSnapshot __compiledReport;
    public ControlSnapshot Snapshot { get; public set; }
    public ControlSnapshot CompiledReport { get; public set; }
    public int TotalPages { get; }
    public PaginationMode PaginationMode { get; }
    public bool HasDocMap { get; }
    public int AutoRefreshInterval { get; }
    public ControlSnapshot get_Snapshot();
    public void set_Snapshot(ControlSnapshot value);
    public ControlSnapshot get_CompiledReport();
    public void set_CompiledReport(ControlSnapshot value);
    [DebuggerStepThroughAttribute]
public int get_TotalPages();
    [DebuggerStepThroughAttribute]
public PaginationMode get_PaginationMode();
    [DebuggerStepThroughAttribute]
public bool get_HasDocMap();
    [DebuggerStepThroughAttribute]
public int get_AutoRefreshInterval();
    public void ResetExecution(bool recompile);
    public void SaveProcessingResult(OnDemandProcessingResult result);
}
internal class Microsoft.Reporting.LocalRenderingExtensionInfo : object {
    private string m_name;
    private string m_localizedName;
    private bool m_isVisible;
    private Type m_type;
    private bool m_isExposedExternally;
    public string Name { get; }
    public string LocalizedName { get; }
    public bool IsVisible { get; }
    internal bool IsExposedExternally { get; }
    internal LocalRenderingExtensionInfo(string name, string localizedName, bool isVisible);
    internal LocalRenderingExtensionInfo(string name, string localizedName, bool isVisible, Type type, bool isExposedExternally);
    internal IRenderingExtension Instantiate();
    public string get_Name();
    public string get_LocalizedName();
    public bool get_IsVisible();
    internal bool get_IsExposedExternally();
}
internal abstract class Microsoft.Reporting.LocalService : object {
    private LocalDataRetrieval m_dataRetrieval;
    private PreviewStore m_previewStore;
    private bool m_showDetailedSubreportMessages;
    private LocalModeSecurityValidatorCallback m_securityValidator;
    private LocalExecutionInfo m_executionInfo;
    public PreviewStore Store { get; }
    public LocalDataRetrieval DataRetrieval { get; public set; }
    public bool ShowDetailedSubreportMessages { get; public set; }
    unknown LocalModeSecurityValidatorCallback SecurityValidator {public set; }
    public PolicyManager PolicyManager { get; }
    public Evidence SandboxEvidence { get; }
    public Assembly EmbeddedResourceAssembly { get; public set; }
    public LocalExecutionInfo ExecutionInfo { get; }
    protected LocalService(PreviewStore previewStore);
    [DebuggerStepThroughAttribute]
public PreviewStore get_Store();
    [DebuggerStepThroughAttribute]
public LocalDataRetrieval get_DataRetrieval();
    public void set_DataRetrieval(LocalDataRetrieval value);
    [DebuggerStepThroughAttribute]
public bool get_ShowDetailedSubreportMessages();
    public void set_ShowDetailedSubreportMessages(bool value);
    [DebuggerStepThroughAttribute]
public void set_SecurityValidator(LocalModeSecurityValidatorCallback value);
    public abstract virtual PolicyManager get_PolicyManager();
    public abstract virtual Evidence get_SandboxEvidence();
    public Assembly get_EmbeddedResourceAssembly();
    public void set_EmbeddedResourceAssembly(Assembly value);
    public ParameterInfoCollection GetReportParameters(CatalogItemContextBase reportContext, NameValueCollection userSpecifiedValues, ParameterInfoCollection baseLineParameters, DatasourceCredentialsCollection credentials, ReportRuntimeSetup reportRuntimeSetup, CreateAndRegisterStream createStreamCallback);
    private void ProcessReportParameters(CatalogItemContextBase reportContext, ControlSnapshot snapshotData, PublishingResult publishingResult, ParameterInfoCollection newParameters, DatasourceCredentialsCollection credentials, ReportRuntimeSetup reportRuntimeSetup, CreateAndRegisterStream createStreamCallback);
    protected ReportProcessing CreateAndConfigureReportProcessing();
    public int PerformSearch(CatalogItemContextBase itemContext, ParameterInfoCollection reportParameters, int startPage, int endPage, string searchText, ReportRuntimeSetup runtimeSetup);
    public void PerformToggle(string toggleId);
    public int PerformBookmarkNavigation(CatalogItemContextBase itemContext, ParameterInfoCollection reportParameters, string bookmarkId, ReportRuntimeSetup runtimeSetup, String& uniqueName);
    public int PerformDocumentMapNavigation(CatalogItemContextBase itemContext, ParameterInfoCollection reportParameters, string documentMapId, ReportRuntimeSetup runtimeSetup);
    public string PerformDrillthrough(string drillthroughId, NameValueCollection& reportParameters);
    public int PerformSort(CatalogItemContextBase itemContext, string sortId, SortOptions sortDirection, bool clearSort, ParameterInfoCollection reportParameters, ReportRuntimeSetup runtimeSetup, CreateAndRegisterStream createStreamCallback, String& uniqueName);
    public IDocumentMap GetDocumentMap(CatalogItemContextBase itemContext, ParameterInfoCollection reportParameters, ReportRuntimeSetup runtimeSetup);
    public abstract virtual IEnumerable`1<LocalRenderingExtensionInfo> ListRenderingExtensions();
    protected abstract virtual IRenderingExtension CreateRenderer(string format, bool allowInternal);
    public OnDemandProcessingResult Render(CatalogItemContextBase itemContext, bool allowInternalRenderers, ParameterInfoCollection reportParameters, IEnumerable dataSources, DatasourceCredentialsCollection credentials, CreateAndRegisterStream createStreamCallback, ReportRuntimeSetup runtimeSetup);
    public OnDemandProcessingResult RenderStream(string streamID, CatalogItemContextBase itemContext, bool allowInternalRenderers, ParameterInfoCollection reportParameters, IEnumerable dataSources, DatasourceCredentialsCollection credentials, CreateAndRegisterStream createStreamCallback, ReportRuntimeSetup runtimeSetup);
    protected virtual OnDemandProcessingResult CreateSnapshotAndRender(CatalogItemContextBase itemContext, ReportProcessing repProc, IRenderingExtension renderer, ProcessingContext pc, RenderingContext rc, SubreportCallbackHandler subreportHandler, ParameterInfoCollection parameters, DatasourceCredentialsCollection credentials);
    public Stream GetEmbeddedImage(string name, String& mimeType);
    private DataSourceInfoCollection ResolveSharedDataSources(DataSourceInfoCollection reportDataSources);
    protected virtual DataSourceInfo GetSharedDataSource(string dataSourcePath);
    public RuntimeDataSourceInfoCollection GetAllReportDataSources(CatalogItemContextBase reportContext);
    protected abstract virtual SubreportCallbackHandler CreateSubreportCallbackHandler();
    private void OnGetSubReportDefinition(ICatalogItemContext reportContext, string subreportPath, string newChunkName, NeedsUpgrade upgradeCheck, ParameterInfoCollection parentQueryParameters, ICatalogItemContext& subreportContext, String& description, IChunkFactory& chunkFactory, ParameterInfoCollection& parameters);
    private void OnGetSubReportDataSources(ICatalogItemContext itemContext, string subreportPath, NeedsUpgrade upgradeCheck, ICatalogItemContext& subreportContext, IChunkFactory& getCompiledDefinition, DataSourceInfoCollection& dataSources);
    private string NormalizeSubReportPath(string pathFromRdl);
    protected abstract virtual void SetProcessingCulture();
    protected abstract virtual ReportProcessing CreateReportProcessing();
    protected ProcessingContext CreateProcessingContext(CatalogItemContextBase itemContext, ParameterInfoCollection reportParameters, IEnumerable dataSources, DatasourceCredentialsCollection credentials, IChunkFactory chunkFactory, ReportRuntimeSetup runtimeSetup, CreateAndRegisterStream createStreamCallback);
    protected ProcessingContext CreateProcessingContext(CatalogItemContextBase itemContext, ParameterInfoCollection reportParameters, IEnumerable dataSources, DatasourceCredentialsCollection credentials, IChunkFactory chunkFactory, ReportRuntimeSetup runtimeSetup, CreateAndRegisterStream createStreamCallback, SubreportCallbackHandler& subreportHandler);
    private RenderingContext CreateRenderingContext(CatalogItemContextBase itemContext, ReportRuntimeSetup runtimeSetup);
    public PublishingResult GetCompiledReport(CatalogItemContextBase itemContext, bool rebuild, ControlSnapshot& snapshot);
    public PublishingResult CompileReport(CatalogItemContextBase itemContext, bool rebuild);
    public virtual void ResetExecution(bool recompile);
    [DebuggerStepThroughAttribute]
public LocalExecutionInfo get_ExecutionInfo();
    protected void ReinitializeSnapshot(ProcessingContext pc);
}
internal class Microsoft.Reporting.PreviewItemContext : CatalogItemContextBase {
    private DefinitionSource m_definitionSource;
    private string m_previewStorePath;
    private Assembly m_embeddedResourceAssembly;
    public DefinitionSource DefinitionSource { get; }
    public string PreviewStorePath { get; public set; }
    protected string RdlExtension { get; }
    public string HostRootUri { get; }
    public void SetPath(string path, string displayName, DefinitionSource definitionSource, Assembly embeddedResourceAssembly);
    public virtual bool SetPath(string path, bool validate, bool convert, bool translate);
    protected virtual CatalogItemContextBase CreateContext(IPathTranslator pathTranslator);
    public virtual ICatalogItemContext GetSubreportContext(string subreportPath);
    public virtual string MapUserProvidedPath(string path);
    public virtual bool IsReportServerPathOrUrl(string pathOrUrl, bool checkProtocol, Boolean& isRelative);
    public virtual bool IsSupportedProtocol(string path, bool protocolRestriction, Boolean& isRelative);
    private string FindEmbeddedResource(string path);
    public DefinitionSource get_DefinitionSource();
    public string get_PreviewStorePath();
    public void set_PreviewStorePath(string value);
    protected virtual string get_RdlExtension();
    public virtual string get_HostRootUri();
    protected virtual RSRequestParameters CreateRequestParametersInstance();
}
internal abstract class Microsoft.Reporting.PreviewStore : object {
    private Dictionary`2<ReportID, StoredReport> m_compiledReports;
    private bool m_generateExpressionHostWithRefusedPermissions;
    private Assembly m_embeddedResourceAssembly;
    public Assembly EmbeddedResourceAssembly { get; public set; }
    public bool GenerateExpressionHostWithRefusedPermissions { get; public set; }
    public abstract virtual bool GetResource(string resourcePath, Byte[]& contents, String& mimeType);
    public abstract virtual DataSourceInfo GetDataSource(string dataSourcePath);
    protected abstract virtual ReportID GetReportIDForItem(CatalogItemContextBase itemContext);
    protected abstract virtual Byte[] GetReportDefinition(ReportID reportId);
    protected abstract virtual void SetCredentialsForEmbeddedDataSource(ReportID reportId, DataSourceInfo dataSource);
    public sealed virtual void Dispose();
    public void SetReportDefinition(string reportName, Byte[] reportBytes);
    public bool HasDirectReportDefinition(string reportName);
    public Assembly get_EmbeddedResourceAssembly();
    public void set_EmbeddedResourceAssembly(Assembly value);
    public virtual bool get_GenerateExpressionHostWithRefusedPermissions();
    public virtual void set_GenerateExpressionHostWithRefusedPermissions(bool value);
    public virtual string GetDataFilePathForReport(CatalogItemContextBase itemContext);
    public bool IsDataFileOutOfDate(CatalogItemContextBase itemContext);
    public void UpdateDataFileStatus(CatalogItemContextBase itemContext, bool isOutOfDate);
    protected virtual void UpdateDataFileStatus(ReportID reportId, bool isOutOfDate);
    public PublishingResult GetCompiledReport(CatalogItemContextBase context, bool rebuild, ControlSnapshot& snapshot);
    public PublishingResult GetCompiledReport(CatalogItemContextBase context, bool rebuild, Byte[]& reportDefinition, ControlSnapshot& snapshot);
}
internal class Microsoft.Reporting.ProcessingConfiguration : object {
    private bool m_showSubReportErrorDetails;
    public bool ShowSubreportErrorDetails { get; public set; }
    public sealed virtual bool get_ShowSubreportErrorDetails();
    public void set_ShowSubreportErrorDetails(bool value);
}
internal class Microsoft.Reporting.ProcessingStreamHandler : object {
    private bool m_allowOnlyTemporaryStreams;
    private CreateAndRegisterStream m_createStreamCallback;
    private List`1<Stream> m_streams;
    public ProcessingStreamHandler(CreateAndRegisterStream createStreamCallback);
    public sealed virtual void Dispose();
    public Stream StreamCallback(string name, string extension, Encoding encoding, string mimeType, bool useChunking, StreamOper operation);
}
internal class Microsoft.Reporting.ProcessingStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string MainReport { get; }
    public static string RdlCompile_CouldNotWriteStateFile { get; }
    public static string RdlCompile_CouldNotOpenFile { get; }
    public static string DataSetExtensionName { get; }
    public static string MissingDataReader { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_MainReport();
    public static string get_RdlCompile_CouldNotWriteStateFile();
    public static string get_RdlCompile_CouldNotOpenFile();
    public static string get_DataSetExtensionName();
    public static string get_MissingDataReader();
    public static string MissingDefinition(string reportName);
    public static string pvInvalidDefinition(string reportPath);
}
internal static class Microsoft.Reporting.ReportCompiler : object {
    public static PublishingResult CompileReport(ICatalogItemContext context, Byte[] reportDefinition, bool generateExpressionHostWithRefusedPermissions, ControlSnapshot& snapshot);
    private static AppDomain CreateCompilationTempAppDomain();
}
internal class Microsoft.Reporting.ServerImpersonationContext : object {
    private WindowsIdentity m_oldUser;
    public ServerImpersonationContext(WindowsIdentity userToImpersonate);
    public sealed virtual void Dispose();
}
internal class Microsoft.Reporting.WinForms.CachedStream : object {
    private Stream m_stream;
    private Encoding m_encoding;
    private string m_mimeType;
    private string m_fileExtension;
    public Stream Stream { get; }
    public Encoding Encoding { get; }
    public string MimeType { get; }
    public string FileExtension { get; }
    public CachedStream(Stream stream, Encoding encoding, string mimeType, string fileExtension);
    public static Stream Extract(CachedStream cachedStream, String& encoding, String& mimeType, String& fileExtension);
    public sealed virtual void Dispose();
    public Stream get_Stream();
    public Encoding get_Encoding();
    public string get_MimeType();
    public string get_FileExtension();
}
internal class Microsoft.Reporting.WinForms.CreateStreamDelegate : MulticastDelegate {
    public CreateStreamDelegate(object object, IntPtr method);
    public virtual Stream Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Stream EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.StreamCache : object {
    private CachedStream m_mainStream;
    private bool m_mainStreamDetached;
    private Dictionary`2<string, CachedStream> m_secondaryStreams;
    private CreateStreamDelegate m_createMainStreamDelegate;
    public StreamCache(CreateStreamDelegate createMainStreamDelegate);
    public sealed virtual void Dispose();
    public void Clear();
    public Stream StreamCallback(string name, string extension, Encoding encoding, string mimeType, bool useChunking, StreamOper operation);
    public Stream GetMainStream(bool detach);
    public Stream GetMainStream(bool detach, String& encoding, String& mimeType, String& fileExtension);
    public Byte[] GetMainStream(String& encoding, String& mimeType, String& fileExtension);
    public Byte[] GetSecondaryStream(bool remove, string name, String& encoding, String& mimeType, String& fileExtension);
    public void MoveSecondaryStreamsTo(StreamCache other);
    private Byte[] StreamToBytes(Stream stream);
    private static Stream DefaultCreateStreamDelegate();
}
internal class Microsoft.ReportingServices.AppDomainPool : object {
    private Evidence m_evidence;
    private AppDomainSetup m_setupInfo;
    private bool m_policyChanged;
    private PolicyManager m_policyManager;
    private RefCountedAppDomain m_lastDispensedAppDomain;
    private SandboxCasPolicySettings m_settingsForLastDispensedAppDomain;
    private DateTime m_lastAppDomainCreationTime;
    private bool m_areAppDomainsReusable;
    public PolicyManager PolicyManager { get; }
    public AppDomainPool(bool allowAppDomainReuse, Evidence evidence, AppDomainSetup setupInfo, PolicyManager policyManager);
    public PolicyManager get_PolicyManager();
    public RefCountedAppDomain GetAppDomain(SandboxCasPolicySettings casSettings);
    private AppDomain CreateAppDomain(DateTime timeStamp, SandboxCasPolicySettings casSettings);
    private bool IsLastAppDomainReusable(SandboxCasPolicySettings casSettings);
    private void OnPolicyChanged(object sender, EventArgs e);
}
internal static class Microsoft.ReportingServices.Common.ArrayUtil : object {
    public static T[] ToArray(ICollection`1<T> items);
    public static Object[] ToObjectArray(ICollection`1<T> items);
    public static bool Contains(T[] array, T item);
}
internal class Microsoft.ReportingServices.Common.AsynchronousExceptionDetection : object {
    internal static bool IsStoppingException(Exception e);
}
internal static class Microsoft.ReportingServices.Common.AttributeUtil : object {
    public static T GetCustomAttribute(MemberInfo element);
    public static T GetCustomAttribute(MemberInfo element, bool inherit);
    public static T GetCustomAttribute(ParameterInfo element);
    public static T GetCustomAttribute(ParameterInfo element, bool inherit);
    public static T GetCustomAttribute(Assembly element);
    public static T GetCustomAttribute(Module element);
}
internal static class Microsoft.ReportingServices.Common.CollectionUtil : object {
    public static bool IsEmpty(IEnumerable`1<T> items);
    public static bool ElementsEqual(ICollection`1<T> items1, ICollection`1<T> items2);
    public static bool ElementsEqual(ICollection`1<T> items1, ICollection`1<T> items2, IEqualityComparer`1<T> comparer);
    public static bool ContainsAll(ICollection`1<T> items1, ICollection`1<T> items2);
    public static void RemoveDuplicates(IList`1<T> items);
    public static void RemoveDuplicates(IList`1<T> items, IEqualityComparer`1<T> comparer);
}
internal class Microsoft.ReportingServices.Common.CreatorGetter`1 : MulticastDelegate {
    public CreatorGetter`1(object object, IntPtr method);
    public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal static class Microsoft.ReportingServices.Common.DateTimeUtil : object {
    internal static bool TryParseDateTime(string strDateTime, IFormatProvider formatProvider, DateTimeOffset& dateTimeOffset, Boolean& hasTimeOffset);
}
internal static class Microsoft.ReportingServices.Common.EnumeratorMapping : object {
    public static IEnumerable`1<U> Map(IEnumerable`1<T> source, Converter`2<T, U> mapFunc);
}
internal static class Microsoft.ReportingServices.Common.EnumUtil : object {
    public static bool IsDefined(T value);
    public static bool TryParse(string value, T& enumValue);
}
internal static class Microsoft.ReportingServices.Common.Iterators : object {
    public static ReverseEnumerator`1<T> Reverse(IList`1<T> list);
    public static IEnumerable`1<T> FilterByType(IEnumerable`1<T> items, Type returnType);
    public static IEnumerable`1<T> Filter(IEnumerable`1<T> items, Predicate`1<T> match);
}
internal class Microsoft.ReportingServices.Common.ObjectReferenceComparer`1 : EqualityComparer`1<T> {
    private static ObjectReferenceComparer`1<T> m_instance;
    public static ObjectReferenceComparer`1<T> Instance { get; }
    private static ObjectReferenceComparer`1();
    public virtual bool Equals(T x, T y);
    public virtual int GetHashCode(T x);
    public static ObjectReferenceComparer`1<T> get_Instance();
}
internal class Microsoft.ReportingServices.Common.Operation : MulticastDelegate {
    public Operation(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.ReportingServices.Common.RdlCollations : object {
    private static Dictionary`2<string, UInt32> m_sqlCollations2LCID;
    internal static Dictionary`2<string, UInt32> Collations { get; }
    private static RdlCollations();
    internal static Dictionary`2<string, UInt32> get_Collations();
}
internal class Microsoft.ReportingServices.Common.RVUnit : ValueType {
    public static RVUnit Empty;
    private double m_value;
    private RVUnitType m_type;
    private static RVUnitType DefaultType;
    public bool IsEmpty { get; }
    public RVUnitType Type { get; }
    public double Value { get; }
    public RVUnit(double value, RVUnitType type);
    public RVUnit(string value);
    public RVUnit(string value, CultureInfo culture);
    public RVUnit(string value, CultureInfo culture, RVUnitType defaultType);
    private static RVUnit();
    private void Init(string value, CultureInfo culture, RVUnitType defaultType);
    public bool get_IsEmpty();
    public RVUnitType get_Type();
    public double get_Value();
    private static string GetStringFromType(RVUnitType type);
    public static RVUnitType GetTypeFromString(string value);
    internal static RVUnit Parse(string s);
    public static RVUnit Parse(string s, CultureInfo culture);
    public virtual string ToString();
    public string ToString(CultureInfo culture);
}
internal enum Microsoft.ReportingServices.Common.RVUnitType : Enum {
    public int value__;
    public static RVUnitType Cm;
    public static RVUnitType Em;
    public static RVUnitType Ex;
    public static RVUnitType Inch;
    public static RVUnitType Mm;
    public static RVUnitType Percentage;
    public static RVUnitType Pica;
    public static RVUnitType Pixel;
    public static RVUnitType Point;
}
internal static class Microsoft.ReportingServices.Common.StringUtil : object {
    private static string SuffixGroup;
    public static string ClsCompliantIdentifierPattern;
    private static Regex m_digitSuffixRegex;
    private static StringUtil();
    public static Nullable`1<int> GetDigitSuffix(string value);
    public static string SetDigitSuffix(string value, int suffix);
    public static string IncrementDigitSuffix(string value, int defaultSuffix);
    public static string IncrementDigitSuffix(string value);
    public static string TrimToMaxLength(string value, int maxLength);
    public static string RemoveAmpersandEllipsis(string text);
    public static string RemoveAmpersand(string text);
    public static string RemoveEllipsis(string text);
    public static string RemoveLastSubstring(string text, char separator);
    public static string GetLastSubstring(string text, char separator);
    public static string FormatInvariant(string format, Object[] args);
    public static string Join(string separator, IList`1<string> strings);
    public static string Join(string separator, IList`1<string> strings, int startIndex, int count);
    public static string NormalizeLineBreaks(string s);
    public static string BuildErrorMessage(Exception e);
    public static string MakeCLSNameFromFilename(string path);
    public static StringComparer GetClsCompliantComparer();
    public static int CompareClsCompliantIdentifiers(string s1, string s2);
    public static int CompareClsCompliantIdentifiers(string s1, string s2, bool ignoreCase);
    public static string GetClsCompliantIdentifier(string candidate, string defaultIdentifier);
    public static bool IsClsCompliantIdentifier(string s);
    public static bool IsClsCompliantIdentifierChar(char c, bool firstChar);
    public static string GenerateUniqueName(string candidate, string baseName, Predicate`1<string> nameExists);
    public static string SplitName(string name);
    public static IEqualityComparer`1<string> CreateComparer(CultureInfo culture, CompareOptions compareOptions);
}
internal static class Microsoft.ReportingServices.Common.ThreadingUtil : object {
    internal static T ReturnOnDemandValue(T& valueStorage, object valueLock, CreatorGetter`1<T> getValue);
}
internal static class Microsoft.ReportingServices.Common.UrlUtil : object {
    public static string UrlEncode(string input);
    public static string UrlDecode(string input);
}
internal abstract class Microsoft.ReportingServices.DataExtensions.BaseDataWrapper : object {
    private object m_underlyingObject;
    protected object UnderlyingObject { get; }
    protected BaseDataWrapper(object underlyingObject);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected object get_UnderlyingObject();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.DataExtensions.CollectionByPrompt : ArrayList {
    internal PromptBucket Item { get; }
    internal bool NeedPrompt { get; }
    internal PromptBucket get_Item(int index);
    internal CollectionByPrompt Clone();
    internal void CheckedAdd(DataSourceInfo dataSource);
    private PromptBucket GetBucketByLinkID(Guid linkID);
    internal PromptBucket GetBucketByOriginalName(string originalName);
    internal bool get_NeedPrompt();
    internal DataSourcePromptCollection GetPromptRepresentatives(ServerDataSourceSettings serverDatasourceSettings);
}
internal class Microsoft.ReportingServices.DataExtensions.CommandWrapper : BaseDataWrapper {
    private TransactionWrapper m_transactionWrapper;
    protected ParameterCollectionWrapper m_parameterCollection;
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public IDbTransaction Transaction { get; public set; }
    public IDbCommand UnderlyingCommand { get; }
    protected internal CommandWrapper(IDbCommand command);
    protected internal virtual void SaveCommandObject(ArrayList& sysParameters, Int32& sysParameterCount, String& sysCommandText);
    protected internal virtual void RestoreCommandObject(ArrayList sysParameters, int sysParameterCount, string sysCommandText);
    protected internal virtual bool RewriteMultiValueParameters(int sysParameterCount, ServerType serverType);
    public virtual IDataReader ExecuteReader(CommandBehavior behavior);
    protected CommandBehavior ConvertCommandBehavior(CommandBehavior behavior);
    private bool IsConnectedToAS2005OrLater();
    protected ArrayList GetStoredProcedureParameters();
    protected ArrayList GetStoredProcedureParameters(ArrayList& oracleParameters);
    public virtual IDataParameter CreateParameter();
    public virtual void Cancel();
    protected static string GenerateStringFromMultiValue(ParameterMultiValueWrapper parameter, bool isStoredProcedure, ServerType serverType);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public sealed virtual IDataParameterCollection get_Parameters();
    public virtual IDbTransaction get_Transaction();
    public virtual void set_Transaction(IDbTransaction value);
    protected virtual void Dispose(bool disposing);
    protected virtual ParameterCollectionWrapper CreateParameterCollection();
    public IDbCommand get_UnderlyingCommand();
}
internal class Microsoft.ReportingServices.DataExtensions.ConnectionWrapper : BaseDataWrapper {
    protected bool m_wrappedManagedProvider;
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public IDbConnection UnderlyingConnection { get; }
    public string LocalizedName { get; }
    public bool WrappedManagedProvider { get; internal set; }
    public ConnectionWrapper(IDbConnection underlyingConnection);
    public virtual void Open();
    public virtual void Close();
    public virtual IDbCommand CreateCommand();
    public virtual IDbTransaction BeginTransaction();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public IDbConnection get_UnderlyingConnection();
    public virtual string get_LocalizedName();
    public virtual void SetConfiguration(string configInfo);
    public bool get_WrappedManagedProvider();
    internal void set_WrappedManagedProvider(bool value);
}
internal class Microsoft.ReportingServices.DataExtensions.DataReaderWrapper : BaseDataWrapper {
    public int FieldCount { get; }
    protected IDataReader UnderlyingReader { get; }
    public DataReaderWrapper(IDataReader underlyingReader);
    public virtual string GetName(int fieldIndex);
    public virtual int GetOrdinal(string fieldName);
    public virtual int get_FieldCount();
    public virtual bool Read();
    public virtual Type GetFieldType(int fieldIndex);
    public virtual object GetValue(int fieldIndex);
    protected IDataReader get_UnderlyingReader();
}
internal class Microsoft.ReportingServices.DataExtensions.DataSourceHelper : object {
    private Byte[] m_encryptedDomainAndUserName;
    private Byte[] m_encryptedPassword;
    private IDataProtection m_dp;
    public DataSourceHelper(Byte[] encryptedDomainAndUserName, Byte[] encryptedPassword, IDataProtection dataProtection);
    public string GetPassword();
    public string GetUserName();
    public string GetDomainName();
}
internal class Microsoft.ReportingServices.DataExtensions.DataSourceInfo : object {
    private static DataSourceFlags DefaultFlags;
    internal static string ExtensionXmlTag;
    internal static string ConnectionStringXmlTag;
    internal static string UseOriginalConnectStringXmlTag;
    internal static string OriginalConnectStringExpressionBasedXmlTag;
    internal static string CredentialRetrievalXmlTag;
    internal static string ImpersonateUserXmlTag;
    internal static string PromptXmlTag;
    internal static string WindowsCredentialsXmlTag;
    internal static string UserNameXmlTag;
    internal static string PasswordXmlTag;
    internal static string EnabledXmlTag;
    internal static string NameXmlTag;
    internal static string DataSourcesXmlTag;
    internal static string DataSourceXmlTag;
    internal static string DataSourceDefinitionXmlTag;
    internal static string m_dataSourceReferenceXmlTag;
    internal static string InvalidDataSourceReferenceXmlTag;
    internal static string XmlNameSpace;
    private Guid m_id;
    private string m_name;
    private string m_originalName;
    private string m_extension;
    private Byte[] m_connectionStringEncrypted;
    private Byte[] m_originalConnectionStringEncrypted;
    private bool m_originalConnectStringExpressionBased;
    private string m_dataSourceReference;
    private Guid m_linkID;
    private Guid m_DataSourceWithCredentialsId;
    private Byte[] m_secDesc;
    private CredentialsRetrievalOption m_credentialsRetrieval;
    private string m_prompt;
    private Byte[] m_userNameEncrypted;
    private Byte[] m_passwordEncrypted;
    private DataSourceFlags m_flags;
    private Guid m_modelID;
    private bool m_isEmbeddedInModel;
    private bool m_isModelSecurityUsed;
    public Guid ID { get; public set; }
    public Guid DataSourceWithCredentialsID { get; public set; }
    public string Name { get; public set; }
    public string PromptIdentifier { get; }
    public string OriginalName { get; public set; }
    public string Extension { get; public set; }
    public Byte[] ConnectionStringEncrypted { get; }
    public bool UseOriginalConnectionString { get; }
    public Byte[] OriginalConnectionStringEncrypted { get; }
    public bool OriginalConnectStringExpressionBased { get; }
    public string DataSourceReference { get; public set; }
    public Guid LinkID { get; }
    public bool ReferenceByPath { get; }
    public bool IsReference { get; }
    public Byte[] SecurityDescriptor { get; }
    public CredentialsRetrievalOption CredentialsRetrieval { get; public set; }
    public bool ImpersonateUser { get; public set; }
    public string Prompt { get; public set; }
    public bool WindowsCredentials { get; public set; }
    public Byte[] UserNameEncrypted { get; }
    public Byte[] PasswordEncrypted { get; }
    public bool Enabled { get; public set; }
    public bool IsModel { get; public set; }
    public Guid ModelID { get; public set; }
    internal bool GoodForExecutionUnderServiceAccount { get; }
    internal bool GoodForUnattendedSurrogateExecution { get; }
    public bool ReferenceIsValid { get; public set; }
    public bool NeedPrompt { get; }
    public int FlagsForCatalogSerialization { get; }
    public DataSourceInfo(SerializationInfo info, StreamingContext context);
    public DataSourceInfo(string name, string originalName, string dataSourceDefinition, IDataProtection dataProtection);
    public DataSourceInfo(string name, string originalName, XmlNode root, IDataProtection dataProtection);
    public DataSourceInfo(string name, string linkPath, Guid linkId, DataSourceInfo standAloneDatasource);
    public DataSourceInfo(string name, string originalName);
    public DataSourceInfo(string originalName, string extension, string connectionString, bool integratedSecurity, string prompt, IDataProtection dataProtection);
    public DataSourceInfo(string originalName, string extension, string connectionString, bool originalConnectStringExpressionBased, bool integratedSecurity, string prompt, IDataProtection dataProtection);
    public DataSourceInfo(string originalName, string referenceName, Guid linkID);
    public DataSourceInfo(string originalName, string referenceName, Guid linkID, bool isEmbeddedInModel);
    public DataSourceInfo(string originalName);
    public DataSourceInfo(string originalName, bool isEmbeddedInModel);
    public DataSourceInfo(Guid id, Guid originalId, string name, string originalName, string extension, Byte[] connectionStringEncrypted, Byte[] originalConnectionStringEncypted, bool originalConnectStringExpressionBased, string dataSourceReference, Guid linkID, Byte[] secDesc, CredentialsRetrievalOption credentialsRetrieval, string prompt, Byte[] userNameEncrypted, Byte[] passwordEncrypted, int flags, bool isModelSecurityUsed);
    public void LinkToStandAlone(DataSourceInfo standAlone, string standAlonePath, Guid standAloneCatalogItemId);
    public void LinkModelToDataSource(DataSourceInfo standAlone, Guid modelID);
    public void InitializeAsEmbeddedInModel(Guid modelID);
    public void CopyFrom(DataSourceInfo copy, string referencePath, Guid linkToCatalogItemId, bool isEmbeddedInModel);
    public static DataSourceInfo ParseDataSourceNode(XmlNode node, bool clientLoad, IDataProtection dataProtection);
    public static DataSourceInfo ParseDataSourceNode(XmlNode node, bool clientLoad, bool allowNoName, IDataProtection dataProtection);
    public void ValidateDefinition(bool useOriginalConnectString);
    public static string GetDataSourceReferenceXmlTag();
    public static string GetUserNameXmlTag();
    public static string GetDataSourceDefinitionXmlTag();
    public static string GetXmlNamespace();
    public static string GetEnabledXmlTag();
    public Guid get_ID();
    public void set_ID(Guid value);
    public Guid get_DataSourceWithCredentialsID();
    public void set_DataSourceWithCredentialsID(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public string get_PromptIdentifier();
    public string get_OriginalName();
    public void set_OriginalName(string value);
    public string get_Extension();
    public void set_Extension(string value);
    public Byte[] get_ConnectionStringEncrypted();
    public bool get_UseOriginalConnectionString();
    public Byte[] get_OriginalConnectionStringEncrypted();
    public bool get_OriginalConnectStringExpressionBased();
    public string GetConnectionString(IDataProtection dataProtection);
    public string GetOriginalConnectionString(IDataProtection dataProtection);
    public void SetConnectionString(string connectionString, IDataProtection dataProtection);
    private void SetOriginalConnectionString(string connectionString, IDataProtection dataProtection);
    internal void SetOriginalConnectionString(Byte[] connectionStringEncrypted);
    internal void SetOriginalConnectStringExpressionBased(bool expressionBased);
    public string get_DataSourceReference();
    public void set_DataSourceReference(string value);
    public Guid get_LinkID();
    public bool get_ReferenceByPath();
    public bool get_IsReference();
    public Byte[] get_SecurityDescriptor();
    public CredentialsRetrievalOption get_CredentialsRetrieval();
    public void set_CredentialsRetrieval(CredentialsRetrievalOption value);
    public bool get_ImpersonateUser();
    public void set_ImpersonateUser(bool value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public bool get_WindowsCredentials();
    public void set_WindowsCredentials(bool value);
    public Byte[] get_UserNameEncrypted();
    public string GetUserName(IDataProtection dataProtection);
    public void SetUserName(string userName, IDataProtection dataProtection);
    public string GetUserNameOnly(IDataProtection dataProtection);
    public static string GetUserNameOnly(string domainAndUserName);
    public string GetDomainOnly(IDataProtection dataProtection);
    public static string GetDomainOnly(string domainAndUserName);
    public Byte[] get_PasswordEncrypted();
    public string GetPassword(IDataProtection dataProtection);
    public void SetPassword(string password, IDataProtection dataProtection);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_IsModel();
    public void set_IsModel(bool value);
    public static bool StaticIsModel(int flags);
    public Guid get_ModelID();
    public void set_ModelID(Guid value);
    public void ThrowIfNotUsable(ServerDataSourceSettings serverDatasourceSetting);
    public bool GoodForUnattendedExecution(bool isSurrogatePresent);
    public bool GoodForLiveExecution(bool isSurrogatePresent);
    internal bool get_GoodForExecutionUnderServiceAccount();
    internal bool get_GoodForUnattendedSurrogateExecution();
    public bool get_ReferenceIsValid();
    public void set_ReferenceIsValid(bool value);
    public bool get_NeedPrompt();
    public int get_FlagsForCatalogSerialization();
    public Byte[] GetXmlBytes(IDataProtection dataProtection);
    private bool ParseDefinitionXml(XmlNode root, IDataProtection dataProtection);
    private void ParseAndValidate(XmlNode root, IDataProtection dataProtection);
    private void InitDefaultsOnCreation();
}
internal class Microsoft.ReportingServices.DataExtensions.DataSourceInfoCollection : object {
    private Hashtable m_collection;
    public int Count { get; }
    public DataSourceInfoCollection(DataSourceInfoCollection other);
    public DataSourceInfoCollection(string dataSourcesXml, IDataProtection dataProtection);
    public DataSourceInfoCollection(string dataSourcesXml, bool clientLoad, IDataProtection dataProtection);
    private void ConstructFromXml(string dataSourcesXml, bool clientLoad, IDataProtection dataProtection);
    public DataSourceInfo GetTheOnlyDataSource();
    public DataSourceInfoCollection CombineOnSetDefinition(DataSourceInfoCollection newDataSources);
    public DataSourceInfoCollection CombineOnSetDataSources(DataSourceInfoCollection newDataSources);
    public void Add(DataSourceInfo dataSource);
    public DataSourceInfo GetByOriginalName(string name);
    public IEnumerator GetEnumerator();
    public int get_Count();
}
internal class Microsoft.ReportingServices.DataExtensions.DataSourcePromptCollection : object {
    private Hashtable m_collection;
    private bool m_needPrompt;
    public bool NeedPrompt { get; }
    public int Count { get; }
    public bool get_NeedPrompt();
    public int get_Count();
    public IEnumerator GetEnumerator();
    internal void Add(DataSourceInfo dataSource, ServerDataSourceSettings serverDatasourceSettings);
    public void AddSingleIfPrompt(DataSourceInfo dataSource, ServerDataSourceSettings serverDatasourceSettings);
}
internal class Microsoft.ReportingServices.DataExtensions.MappingDataReader : object {
    private string m_dataSetName;
    private IDataReader m_dataReader;
    private IDataReaderExtension m_dataReaderExtension;
    private IDataReaderFieldProperties m_dataFieldProperties;
    private Int32[] m_aliasIndexToFieldIndex;
    public bool ReaderExtensionsSupported { get; }
    public bool IsAggregateRow { get; }
    public int AggregationFieldCount { get; }
    public bool ReaderFieldProperties { get; }
    public MappingDataReader(string dataSetName, IDataReader sourceReader, String[] aliases, String[] fieldNames);
    public bool GetNextRow();
    private void GenerateFieldErrorException(Exception e);
    public object GetFieldValue(int aliasIndex);
    public bool IsAggregationField(int aliasIndex);
    public bool get_ReaderExtensionsSupported();
    public bool get_IsAggregateRow();
    public int get_AggregationFieldCount();
    public bool get_ReaderFieldProperties();
    public int GetPropertyCount(int aliasIndex);
    public string GetPropertyName(int aliasIndex, int propertyIndex);
    public object GetPropertyValue(int aliasIndex, int propertyIndex);
    private sealed virtual override void System.IDisposable.Dispose();
    private int GetFieldIndex(int aliasIndex);
}
internal class Microsoft.ReportingServices.DataExtensions.ParameterCollectionWrapper : BaseDataWrapper {
    private ArrayList m_parameters;
    protected IDataParameterCollection UnderlyingCollection { get; }
    protected ArrayList Parameters { get; }
    protected internal ParameterCollectionWrapper(IDataParameterCollection paramCollection);
    public virtual int Add(IDataParameter parameter);
    public virtual Enumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected IDataParameterCollection get_UnderlyingCollection();
    protected ArrayList get_Parameters();
}
internal class Microsoft.ReportingServices.DataExtensions.ParameterMultiValueWrapper : ParameterWrapper {
    private Object[] m_values;
    public Object[] Values { get; public set; }
    public ParameterMultiValueWrapper(IDataParameter param);
    public virtual Object[] get_Values();
    public virtual void set_Values(Object[] value);
}
internal class Microsoft.ReportingServices.DataExtensions.ParameterWrapper : BaseDataWrapper {
    public string ParameterName { get; public set; }
    public object Value { get; public set; }
    protected internal IDataParameter UnderlyingParameter { get; }
    protected internal ParameterWrapper(IDataParameter param);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected internal IDataParameter get_UnderlyingParameter();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.DataExtensions.PromptBucket : ArrayList {
    internal DataSourceInfo Item { get; }
    internal bool NeedPrompt { get; }
    internal DataSourceInfo get_Item(int index);
    internal DataSourceInfo GetRepresentative();
    internal bool get_NeedPrompt();
    internal bool HasItemWithLinkID(Guid linkID);
    internal bool HasItemWithOriginalName(string originalName);
    internal void SetCredentials(DatasourceCredentials credentials, IDataProtection dataProtection);
}
internal class Microsoft.ReportingServices.DataExtensions.ReportDataSource : object {
    private string m_dataSourceType;
    private Guid m_modelID;
    private CreateDataExtensionInstance m_createDataExtensionInstance;
    public ReportDataSource(string dataSourceType, Guid modelID, CreateDataExtensionInstance createDataExtensionInstance);
    public IDbConnection CreateConnection();
}
internal class Microsoft.ReportingServices.DataExtensions.RuntimeDataSourceInfoCollection : object {
    private Hashtable m_collectionByID;
    private Hashtable m_collectionByReport;
    private CollectionByPrompt m_collectionByPrompt;
    public bool NeedPrompt { get; }
    public RuntimeDataSourceInfoCollection(RuntimeDataSourceInfoCollection other);
    public RuntimeDataSourceInfoCollection(SerializationInfo info, StreamingContext context);
    public Byte[] Serialize();
    public static RuntimeDataSourceInfoCollection Deserialize(Byte[] data);
    public void SetCredentials(DatasourceCredentialsCollection allCredentials, IDataProtection dataProtection);
    private void SetCredentials(DatasourceCredentials credentials, IDataProtection dataProtection);
    public DataSourceInfo GetByOriginalName(string originalName);
    public bool CredentialsAreSame(DatasourceCredentialsCollection creds, bool noCredentialsMeansSame, IDataProtection dataProtection);
    public bool GoodForUnattendedExecution(bool isSurrogatePresent);
    internal void Add(DataSourceInfo dataSource, string reportPath);
    internal DataSourceInfo GetByID(Guid ID);
    internal DataSourceInfo GetByName(string name, string reportPath);
    public bool get_NeedPrompt();
    public DataSourcePromptCollection GetPromptRepresentatives(ServerDataSourceSettings serverDatasourceSettings);
    private void AddToCollectionByReport(DataSourceInfo dataSource, string reportPath);
    private void AddToCollectionByID(DataSourceInfo dataSource);
    private void CheckedAddByPrompt(DataSourceInfo dataSource);
}
internal class Microsoft.ReportingServices.DataExtensions.ServerDataSourceSettings : object {
    private bool m_allowIntegratedSecurity;
    private bool m_isSurrogatePresent;
    public bool IsSurrogatePresent { get; }
    public bool AllowIntegratedSecurity { get; }
    public ServerDataSourceSettings(bool isSurrogatePresent, bool allowIntegratedSecurity);
    public bool get_IsSurrogatePresent();
    public bool get_AllowIntegratedSecurity();
}
internal class Microsoft.ReportingServices.DataExtensions.TransactionWrapper : BaseDataWrapper {
    protected internal IDbTransaction UnderlyingTransaction { get; }
    protected internal TransactionWrapper(IDbTransaction underlyingTransaction);
    public virtual void Commit();
    public virtual void Rollback();
    protected internal IDbTransaction get_UnderlyingTransaction();
}
public enum Microsoft.ReportingServices.DataProcessing.CommandBehavior : Enum {
    public int value__;
    public static CommandBehavior SchemaOnly;
    public static CommandBehavior SingleResult;
}
public enum Microsoft.ReportingServices.DataProcessing.CommandType : Enum {
    public int value__;
    public static CommandType Text;
    public static CommandType StoredProcedure;
    public static CommandType TableDirect;
}
public interface Microsoft.ReportingServices.DataProcessing.IDataMultiValueParameter {
    public Object[] Values { get; public set; }
    public abstract virtual Object[] get_Values();
    public abstract virtual void set_Values(Object[] value);
}
public interface Microsoft.ReportingServices.DataProcessing.IDataParameter {
    public string ParameterName { get; public set; }
    public object Value { get; public set; }
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public interface Microsoft.ReportingServices.DataProcessing.IDataParameterCollection {
    public abstract virtual int Add(IDataParameter parameter);
}
public interface Microsoft.ReportingServices.DataProcessing.IDataReader {
    public int FieldCount { get; }
    public abstract virtual string GetName(int fieldIndex);
    public abstract virtual int GetOrdinal(string fieldName);
    public abstract virtual int get_FieldCount();
    public abstract virtual bool Read();
    public abstract virtual Type GetFieldType(int fieldIndex);
    public abstract virtual object GetValue(int fieldIndex);
}
public interface Microsoft.ReportingServices.DataProcessing.IDataReaderExtension {
    public bool IsAggregateRow { get; }
    public int AggregationFieldCount { get; }
    public abstract virtual bool IsAggregationField(int index);
    public abstract virtual bool get_IsAggregateRow();
    public abstract virtual int get_AggregationFieldCount();
}
public interface Microsoft.ReportingServices.DataProcessing.IDataReaderFieldProperties {
    public abstract virtual int GetPropertyCount(int fieldIndex);
    public abstract virtual string GetPropertyName(int fieldIndex, int propertyIndex);
    public abstract virtual object GetPropertyValue(int fieldIndex, int propertyIndex);
}
public interface Microsoft.ReportingServices.DataProcessing.IDbCollationProperties {
    public abstract virtual bool GetCollationProperties(String& cultureName, Boolean& caseSensitive, Boolean& accentSensitive, Boolean& kanatypeSensitive, Boolean& widthSensitive);
}
public interface Microsoft.ReportingServices.DataProcessing.IDbCommand {
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public IDbTransaction Transaction { get; public set; }
    public abstract virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public abstract virtual IDataParameter CreateParameter();
    public abstract virtual void Cancel();
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual IDataParameterCollection get_Parameters();
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
}
public interface Microsoft.ReportingServices.DataProcessing.IDbCommandAnalysis {
    public abstract virtual IDataParameterCollection GetParameters();
}
public interface Microsoft.ReportingServices.DataProcessing.IDbCommandRewriter {
    public string RewrittenCommandText { get; }
    public abstract virtual string get_RewrittenCommandText();
}
public interface Microsoft.ReportingServices.DataProcessing.IDbConnection {
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual IDbCommand CreateCommand();
    public abstract virtual IDbTransaction BeginTransaction();
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual int get_ConnectionTimeout();
}
public interface Microsoft.ReportingServices.DataProcessing.IDbConnectionExtension {
    unknown string Impersonate {public set; }
    unknown string UserName {public set; }
    unknown string Password {public set; }
    public bool IntegratedSecurity { get; public set; }
    public abstract virtual void set_Impersonate(string value);
    public abstract virtual void set_UserName(string value);
    public abstract virtual void set_Password(string value);
    public abstract virtual bool get_IntegratedSecurity();
    public abstract virtual void set_IntegratedSecurity(bool value);
}
public interface Microsoft.ReportingServices.DataProcessing.IDbConnectionWrapper {
    public IDbConnection Connection { get; }
    public abstract virtual IDbConnection get_Connection();
}
public interface Microsoft.ReportingServices.DataProcessing.IDbTransaction {
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
}
public interface Microsoft.ReportingServices.DataProcessing.IDbTransactionExtension {
    public bool AllowMultiConnection { get; }
    public abstract virtual bool get_AllowMultiConnection();
}
public interface Microsoft.ReportingServices.DataProcessing.ITokenDataExtension {
    public abstract virtual void SetUserToken(Byte[] UserToken);
}
internal class Microsoft.ReportingServices.Diagnostics.AssemblyLocationResolver : MarshalByRefObject {
    private bool m_fullLoad;
    private AssemblyLocationResolver(bool fullLoad);
    public static AssemblyLocationResolver CreateResolver(AppDomain tempAppDomain);
    public string LoadAssemblyAndResolveLocation(string name);
}
internal abstract class Microsoft.ReportingServices.Diagnostics.CatalogItemContextBase : object {
    private RSRequestParameters m_parsedParameters;
    protected string m_reportDefinitionPath;
    protected string m_OriginalItemPath;
    protected string m_ItemPath;
    protected string m_ItemName;
    protected string m_ParentPath;
    protected CatalogItemContextBase m_primaryContext;
    protected IPathTranslator m_PathTranslator;
    public RSRequestParameters RSRequestParameters { get; }
    public string ItemPath { get; public set; }
    public string ItemName { get; }
    public string ParentPath { get; }
    public string HostRootUri { get; }
    public string OriginalItemPath { get; protected set; }
    public string ReportDefinitionPath { get; public set; }
    public abstract virtual string MapUserProvidedPath(string path);
    public abstract virtual bool IsReportServerPathOrUrl(string pathOrUrl, bool checkProtocol, Boolean& isRelative);
    public abstract virtual bool IsSupportedProtocol(string path, bool checkProtocol, Boolean& isRelative);
    public virtual string AdjustSubreportOrDrillthroughReportPath(string reportPath);
    public virtual ICatalogItemContext GetSubreportContext(string subreportPath);
    private void InitSubreportContext(CatalogItemContextBase subreportContext, string subreportPath);
    public virtual string CombineUrl(string url, bool checkProtocol, NameValueCollection unparsedParameters, string rsServerRoot, ICatalogItemContext& newContext);
    public sealed virtual RSRequestParameters get_RSRequestParameters();
    protected abstract virtual RSRequestParameters CreateRequestParametersInstance();
    public sealed virtual string get_ItemPath();
    public void set_ItemPath(string value);
    public sealed virtual string get_ItemName();
    public sealed virtual string get_ParentPath();
    public abstract virtual string get_HostRootUri();
    public CatalogItemContextBase Combine(string url, bool externalFormat);
    public CatalogItemContextBase Combine(string url, bool checkProtocol, bool externalFormat);
    public abstract virtual bool SetPath(string path, bool validate, bool convert, bool translate);
    protected abstract virtual CatalogItemContextBase CreateContext(IPathTranslator pathTranslator);
    public string get_OriginalItemPath();
    protected void set_OriginalItemPath(string value);
    public string get_ReportDefinitionPath();
    public void set_ReportDefinitionPath(string value);
}
internal class Microsoft.ReportingServices.Diagnostics.CatalogItemNameUtility : object {
    public static char PathSeparatorChar;
    public static int MaxItemPathLength { get; }
    public static void SplitPath(string itemPath, String& itemName, String& parentPath);
    public static int get_MaxItemPathLength();
}
internal class Microsoft.ReportingServices.Diagnostics.CatalogItemUrlBuilder : object {
    private StringBuilder m_urlString;
    private IReportParameterLookup m_paramLookup;
    private static string EncodedParameterNullSuffix;
    private static string EncodedCatalogParameterPrefix;
    private static string EncodedRenderingParameterPrefix;
    private static string EncodedReportParameterPrefix;
    private static string EncodedUserNameParameterPrefix;
    public CatalogItemUrlBuilder(string urlString);
    public CatalogItemUrlBuilder(string path, string serverVirtualRoot);
    public CatalogItemUrlBuilder(string path, string serverVirtualRoot, IReportParameterLookup paramLookup);
    private static CatalogItemUrlBuilder();
    public static string NameValueCollectionToQueryString(NameValueCollection parameters);
    public static void ExtractFromUrl(string url, String& path, NameValueCollection& queryParameters);
    public static CatalogItemUrlBuilder CreateNonServerBuilder(string serverVirtualFolderUrl, string itemPath, bool alreadyEscaped, bool addItemPathAsQuery);
    private void Construct(string serverVirtualFolderUrl, string itemPath, bool alreadyEscaped, bool addItemPathAsQuery);
    public virtual string ToString();
    public void AppendUnparsedParameters(NameValueCollection parameters);
    public void AppendReportParameter(string name, string val);
    private void InternalAppendReportParameters(NameValueCollection parameters);
    public void AppendReportParameters(NameValueCollection parameters);
    private bool ReplaceParametersWithExecParameterId(NameValueCollection parameters);
    public void AppendRenderingParameter(string name, string val);
    public void AppendRenderingParameters(NameValueCollection parameters);
    public void AppendCatalogParameter(string name, string val);
    public void AppendCatalogParameters(NameValueCollection parameters);
    private void AppendParameterCollection(string encodedPrefix, NameValueCollection parameters);
    private void AppendOneParameter(string encodedPrefix, string name, string val);
    private void AppendOneParameter(string encodedPrefix, string name, string val, bool addNullSuffix);
    private static string EncodeUrlParameter(string param);
}
internal class Microsoft.ReportingServices.Diagnostics.ContextBody : MulticastDelegate {
    public ContextBody(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ReportingServices.Diagnostics.DataProtectionLocal : object {
    private static int m_dwProtectionFlags;
    private static IDataProtection m_dpInstance;
    unknown static ProtectionMode GlobalProtectionMode {public set; }
    public static IDataProtection Instance { get; }
    private static DataProtectionLocal();
    public static void set_GlobalProtectionMode(ProtectionMode value);
    public static string LocalProtectData(string data);
    public static string LocalUnprotectData(string data);
    public static Byte[] LocalProtectData(Byte[] data);
    public static Byte[] LocalUnprotectData(Byte[] data);
    private static Byte[] UnprotectData(Byte[] data, int dwFlags);
    private static Byte[] ProtectData(Byte[] data, int dwFlags);
    [DebuggerStepThroughAttribute]
public static IDataProtection get_Instance();
}
internal class Microsoft.ReportingServices.Diagnostics.DatasourceCredentials : object {
    private string m_userName;
    private string m_password;
    private string m_promptID;
    public string UserName { get; }
    public string Password { get; public set; }
    public string PromptID { get; }
    public DatasourceCredentials(string promptID, string userName, string password);
    public string get_UserName();
    public string get_Password();
    public void set_Password(string value);
    public string get_PromptID();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.Diagnostics.DatasourceCredentialsCollection : CollectionBase {
    public DatasourceCredentials Item { get; }
    public DatasourceCredentialsCollection(NameValueCollection userNameParams, NameValueCollection userPwdParams);
    public int Add(DatasourceCredentials datasourceCred);
    public DatasourceCredentials get_Item(int index);
}
internal static class Microsoft.ReportingServices.Diagnostics.EncryptionTags : object {
    public static string ConnectionString;
    public static string OriginalConnectionString;
    public static string UserName;
    public static string Password;
}
internal enum Microsoft.ReportingServices.Diagnostics.Event : Enum {
    public int value__;
    public static Event SqlAgentNotRunning;
    public static Event CouldNotCommunicateToCatalog;
    public static Event CouldNotLoadExtension;
    public static Event ConfigFileChanged;
    public static Event InvalidConfigEntry;
    public static Event CouldNotCreateTraceFile;
    public static Event DenialOfService;
    public static Event CantCreatePerfCounters;
    public static Event CantCommunicateToReportServer;
    public static Event ScheduleUpdated;
    public static Event InternalError;
    public static Event InvalidDBVersion;
    public static Event TraceNotDefaultLocation;
    public static Event NotActivated;
    public static Event IsDisabled;
    public static Event RPCFailedStart;
    public static Event InvalidSMTP;
    public static Event FailedTraceWrite;
    public static Event ActivationSuccessful;
    public static Event KeyExtractionSuccessful;
    public static Event KeyImportSuccessful;
    public static Event EncryptDataCleaned;
    public static Event SKUMismatch;
    public static Event FailedToDecryptDSN;
    public static Event ConfigFileNotFound;
    public static Event FailureToDecryptData;
    public static Event FailureToEncryptData;
    public static Event FailureToLoadConfigFile;
    public static Event FailureToEncryptConfigData;
    public static Event KeyDeleteSuccessful;
    public static Event EvaluationPeriodExpired;
    public static Event SetExtensionConfigFailed;
    public static Event WebFarmNodeActivated;
    public static Event AppDomainFailedToStart;
    public static Event AppDomainFailedToInitialize;
    public static Event AppDomainMaxMemoryLimitReached;
}
internal static class Microsoft.ReportingServices.Diagnostics.ExternalResourceLoader : object {
    public static Byte[] GetExternalResource(string resourceUrl, string surrogateUser, string surrogatePassword, string surrogateDomain, int webTimeout, String& mimeType);
    public static Byte[] GetExternalResource(string resourceUrl, bool impersonate, string surrogateUser, string surrogatePassword, string surrogateDomain, int webTimeout, String& mimeType);
    public static string GetMimeTypeByRegistryLookup(string extension);
}
internal interface Microsoft.ReportingServices.Diagnostics.IAbortHelper {
    public abstract virtual bool Abort(ProcessingStatus status);
}
internal interface Microsoft.ReportingServices.Diagnostics.ICatalogItemContext {
    public string ItemPath { get; }
    public string ItemName { get; }
    public string ParentPath { get; }
    public RSRequestParameters RSRequestParameters { get; }
    public string HostRootUri { get; }
    public abstract virtual string get_ItemPath();
    public abstract virtual string get_ItemName();
    public abstract virtual string get_ParentPath();
    public abstract virtual string MapUserProvidedPath(string path);
    public abstract virtual ICatalogItemContext GetSubreportContext(string subreportPath);
    public abstract virtual string AdjustSubreportOrDrillthroughReportPath(string reportPath);
    public abstract virtual string CombineUrl(string url, bool protocolRestriction, NameValueCollection unparsedParameters, string rsServerRoot, ICatalogItemContext& newContext);
    public abstract virtual bool IsReportServerPathOrUrl(string pathOrUrl, bool protocolRestriction, Boolean& isRelative);
    public abstract virtual bool IsSupportedProtocol(string path, bool protocolRestriction, Boolean& isRelative);
    public abstract virtual RSRequestParameters get_RSRequestParameters();
    public abstract virtual string get_HostRootUri();
}
internal interface Microsoft.ReportingServices.Diagnostics.IConfiguration {
    public bool ShowSubreportErrorDetails { get; }
    public abstract virtual bool get_ShowSubreportErrorDetails();
}
internal interface Microsoft.ReportingServices.Diagnostics.IDataProtection {
    public abstract virtual Byte[] ProtectData(string unprotectedData, string tag);
    public abstract virtual string UnprotectDataToString(Byte[] protectedData, string tag);
}
internal interface Microsoft.ReportingServices.Diagnostics.IExtensionFactory {
    public abstract virtual bool IsRegisteredCustomReportItemExtension(string extensionType);
    public abstract virtual object GetNewCustomReportItemProcessingInstanceClass(string reportItemName);
    public abstract virtual IExtension GetNewRendererExtensionClass(string format);
}
internal interface Microsoft.ReportingServices.Diagnostics.IJobContext {
    public object SyncRoot { get; }
    public TimeSpan TimeDataRetrieval { get; public set; }
    public TimeSpan TimeProcessing { get; public set; }
    public TimeSpan TimeRendering { get; public set; }
    public long RowCount { get; public set; }
    public string ExecutionId { get; }
    public abstract virtual object get_SyncRoot();
    public abstract virtual TimeSpan get_TimeDataRetrieval();
    public abstract virtual void set_TimeDataRetrieval(TimeSpan value);
    public abstract virtual TimeSpan get_TimeProcessing();
    public abstract virtual void set_TimeProcessing(TimeSpan value);
    public abstract virtual TimeSpan get_TimeRendering();
    public abstract virtual void set_TimeRendering(TimeSpan value);
    public abstract virtual long get_RowCount();
    public abstract virtual void set_RowCount(long value);
    public abstract virtual void SetAdditionalInfo(string name, string value);
    public abstract virtual void SetAdditionalInfo(string categoryName, string name, string value);
    public abstract virtual void AddAbortHelper(IAbortHelper abortHelper);
    public abstract virtual void RemoveAbortHelper();
    public abstract virtual void AddCommand(IDbCommand cmd);
    public abstract virtual void RemoveCommand(IDbCommand cmd);
    public abstract virtual void TryQueueWorkItem(WaitCallback callback, object state);
    public abstract virtual string get_ExecutionId();
}
internal interface Microsoft.ReportingServices.Diagnostics.IParametersTranslator {
    public abstract virtual void GetParamsInstance(string paramsInstanceId, String& itemPath, NameValueCollection& parameters);
}
internal interface Microsoft.ReportingServices.Diagnostics.IPathManager {
    public abstract virtual string RelativePathToAbsolutePath(string relativePath, string reportPath);
    public abstract virtual bool IsSupportedUrl(string path, bool checkProtocol, Boolean& isInternal);
    public abstract virtual string EnsureReportNamePath(string reportNamePath);
}
internal interface Microsoft.ReportingServices.Diagnostics.IPathTranslator {
    public abstract virtual string PathToInternal(string source);
    public abstract virtual string PathToExternal(string source);
}
internal interface Microsoft.ReportingServices.Diagnostics.IReportParameterLookup {
    public abstract virtual string GetReportParamsInstanceId(NameValueCollection reportParameters);
}
internal static class Microsoft.ReportingServices.Diagnostics.Localization : object {
    public static CultureInfo ClientPrimaryCulture { get; }
    public static CultureInfo SqlCulture { get; }
    public static CultureInfo DefaultReportServerSpecificCulture { get; }
    public static CultureInfo CatalogCulture { get; }
    public static CultureInfo get_ClientPrimaryCulture();
    public static CultureInfo get_SqlCulture();
    public static int CatalogCultureCompare(string a, string b);
    public static CultureInfo get_DefaultReportServerSpecificCulture();
    public static CultureInfo get_CatalogCulture();
}
internal class Microsoft.ReportingServices.Diagnostics.NativeMethods : object {
    public static int CurrentUser;
    public static int UIForbidden;
    public static int LocalMachine;
    internal static bool CryptProtectData(DATA_BLOB& dataIn, string szDataDescr, IntPtr optionalEntropy, IntPtr pvReserved, IntPtr pPromptStruct, int dwFlags, DATA_BLOB& pDataOut);
    internal static bool CryptUnprotectData(DATA_BLOB& dataIn, StringBuilder ppszDataDescr, IntPtr optionalEntropy, IntPtr pvReserved, IntPtr pPromptStruct, int dwFlags, DATA_BLOB& pDataOut);
    internal static IntPtr LocalFree(IntPtr hMem);
}
internal enum Microsoft.ReportingServices.Diagnostics.ProcessingStatus : Enum {
    public int value__;
    public static ProcessingStatus Success;
    public static ProcessingStatus CanceledByUser;
    public static ProcessingStatus AbnormalTermination;
    public static ProcessingStatus TimeoutExpired;
}
internal enum Microsoft.ReportingServices.Diagnostics.ProtectionMode : Enum {
    public int value__;
    public static ProtectionMode CurrentUserEncryption;
    public static ProtectionMode LocalSystemEncryption;
}
internal class Microsoft.ReportingServices.Diagnostics.ReportParameterCollection : NameValueCollection {
    internal ReportParameterCollection(NameValueCollection other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal abstract class Microsoft.ReportingServices.Diagnostics.ReportProcessingExceptionBase : RSException {
    protected ReportProcessingExceptionBase(ErrorCode errorCode, string localizedMessage, Exception innerException, RSTrace tracer, string additionalTraceMessage, Object[] exceptionData);
    protected ReportProcessingExceptionBase(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.ReturnValue : object {
    private object m_value;
    public object Value { get; }
    public ReturnValue(object value);
    public object get_Value();
}
internal static class Microsoft.ReportingServices.Diagnostics.RevertImpersonationContext : object {
    internal static int SkipStackFrames;
    public static void Run(ContextBody callback);
    public static void RunFromRestrictedCasContext(ContextBody callback);
}
internal class Microsoft.ReportingServices.Diagnostics.RSPathUtil : object {
    private sealed virtual override string Microsoft.ReportingServices.Diagnostics.IPathManager.RelativePathToAbsolutePath(string path, string reportPath);
    private sealed virtual override bool Microsoft.ReportingServices.Diagnostics.IPathManager.IsSupportedUrl(string path, bool checkProtocol, Boolean& isInternal);
    private sealed virtual override string Microsoft.ReportingServices.Diagnostics.IPathManager.EnsureReportNamePath(string reportNamePath);
    private static bool ContainsOtherProtocol(string path);
}
internal abstract class Microsoft.ReportingServices.Diagnostics.RSRequestParameters : object {
    public static string ReportParameterPrefix;
    public static string CatalogParameterPrefix;
    public static string RenderingParameterPrefix;
    public static string UserNameParameterPrefix;
    public static string PasswordParameterPrefix;
    public static string ParameterNullSuffix;
    public static string FormatParamName;
    public static string FullFeatureFormat;
    public static string LimitedFeatureFormat;
    public static string OWCFormat;
    public static string StreamRoot;
    public static string SessionIDParamName;
    public static string ImageIDParamName;
    public static string ShowHideToggleParamName;
    public static string SortIdParamName;
    public static string ClearSortParamName;
    public static string SortDirectionParamName;
    public static string SnapshotParamName;
    public static string ClearSessionParamName;
    public static string AllowNewSessionsParamName;
    public static string Ascending;
    public static string Descending;
    public static string CommandParamName;
    public static string RendererAccessCommand;
    public static string RunReportCommand;
    public static string ListChildrenCommand;
    public static string GetResourceContentsCommand;
    public static string GetDataSourceContentsCommand;
    public static string GetModelDefinitionCommand;
    public static string DrillthroughCommand;
    public static string ExecuteQueryCommand;
    public static string BlankCommand;
    public static string SortCommand;
    public static string StyleSheet;
    public static string StyleSheetImage;
    public static string ErrorResponseAsXml;
    public static string DBUserParamName;
    public static string DBPasswordParamName;
    public static string ParamLanguage;
    public static string PersistStreams;
    public static string GetNextStream;
    public static string EntityID;
    public static string DrillType;
    public static string DataSourceName;
    public static string CommandText;
    public static string Timeout;
    public static string GetUserModel;
    public static string PerspectiveID;
    public static string StyleSheetName;
    public static string StyleSheetImageName;
    public static string StoredParametersID;
    public static string PaginationMode;
    public static string ActualPageMode;
    public static string EstimatePageMode;
    private static string ParametersXmlElement;
    private static string ParameterXmlElement;
    private static string NameXmlElement;
    private static string ValueXmlElement;
    private static string BrowserCapabilitiesXmlElement;
    private static string DeviceInfoXmlElement;
    private Hashtable m_reverseLookupParameters;
    protected NameValueCollection m_renderingParameters;
    private NameValueCollection m_reportParameters;
    private NameValueCollection m_catalogParameters;
    private DatasourceCredentialsCollection m_datasourcesCred;
    private NameValueCollection m_browserCapabilities;
    private string m_ServerVirtualRoot;
    private string m_SessionId;
    public NameValueCollection RenderingParameters { get; }
    public NameValueCollection ReportParameters { get; }
    public string ReportParametersXml { get; }
    public NameValueCollection CatalogParameters { get; }
    public string FormatParamValue { get; public set; }
    public string SessionIDParamValue { get; public set; }
    public string ImageIDParamValue { get; public set; }
    public string SortIdParamValue { get; public set; }
    public string ShowHideToggleParamValue { get; public set; }
    public string SnapshotParamValue { get; public set; }
    public string ClearSessionParamValue { get; public set; }
    public string AllowNewSessionsParamValue { get; public set; }
    public string CommandParamValue { get; public set; }
    public string EntityIdValue { get; }
    public string DrillTypeValue { get; }
    public string PaginationModeValue { get; public set; }
    public DatasourceCredentialsCollection DatasourcesCred { get; public set; }
    public NameValueCollection BrowserCapabilities { get; }
    public string ServerVirtualRoot { get; public set; }
    public string SessionId { get; public set; }
    private sealed virtual override string Microsoft.ReportingServices.Diagnostics.IReportParameterLookup.GetReportParamsInstanceId(NameValueCollection reportParameters);
    public void ParseQueryString(NameValueCollection allParametersCollection, IParametersTranslator paramsTranslator, string itemPath);
    public string GetImageUrl(bool useSessionId, string imageId, string itemPath, string rsServerRoot);
    public static NameValueCollection ExtractReportParameters(NameValueCollection allParametersCollection, Boolean[]& whichParamsAreShared, NameValueCollection& otherParameters);
    public static NameValueCollection ShallowXmlToNameValueCollection(string xml, string topElementTag);
    public static NameValueCollection DeepXmlToNameValueCollection(string xml, string topElementTag, string eachElementTag, string nameElementTag, string valueElementTag);
    public static string NameValueCollectionToShallowXml(NameValueCollection parameters, string topElementTag);
    public static string NameValueCollectionToDeepXml(NameValueCollection parameters, string topElementTag, string eachElementTag, string nameElementTag, string valueElementTag);
    public NameValueCollection get_RenderingParameters();
    public void SetRenderingParameters(string renderingParametersXml);
    public void SetRenderingParameters(NameValueCollection otherParams);
    protected abstract virtual void ApplyDefaultRenderingParameters();
    public NameValueCollection get_ReportParameters();
    public string get_ReportParametersXml();
    public void SetReportParameters(string reportParametersXml);
    public void SetReportParameters(NameValueCollection allReportParameters);
    public NameValueCollection get_CatalogParameters();
    public void SetCatalogParameters(string catalogParametersXml);
    public void DetectFormatIfNotPresent();
    public string get_FormatParamValue();
    public void set_FormatParamValue(string value);
    public string get_SessionIDParamValue();
    public void set_SessionIDParamValue(string value);
    public string get_ImageIDParamValue();
    public void set_ImageIDParamValue(string value);
    public string get_SortIdParamValue();
    public void set_SortIdParamValue(string value);
    public string get_ShowHideToggleParamValue();
    public void set_ShowHideToggleParamValue(string value);
    public string get_SnapshotParamValue();
    public void set_SnapshotParamValue(string value);
    public string get_ClearSessionParamValue();
    public void set_ClearSessionParamValue(string value);
    public string get_AllowNewSessionsParamValue();
    public void set_AllowNewSessionsParamValue(string value);
    public string get_CommandParamValue();
    public void set_CommandParamValue(string value);
    public string get_EntityIdValue();
    public string get_DrillTypeValue();
    public string get_PaginationModeValue();
    public void set_PaginationModeValue(string value);
    public DatasourceCredentialsCollection get_DatasourcesCred();
    public void set_DatasourcesCred(DatasourceCredentialsCollection value);
    public NameValueCollection get_BrowserCapabilities();
    public void SetBrowserCapabilities(object request);
    public NameValueCollection GetAllParameters();
    public string get_ServerVirtualRoot();
    public void set_ServerVirtualRoot(string value);
    public string get_SessionId();
    public void set_SessionId(string value);
    private static void ResolveServerParameters(IParametersTranslator paramsTranslator, NameValueCollection allParametersCollection, NameValueCollection rsParameters, NameValueCollection rcParameters, NameValueCollection dsuParameters, NameValueCollection dspParameters, NameValueCollection reportParameters, Hashtable& reverseLookup, String& itemPath);
    private static void ParseQueryString(string itemPath, IParametersTranslator paramsTranslator, NameValueCollection allParametersCollection, NameValueCollection& rsParameters, NameValueCollection& rcParameters, NameValueCollection& reportParameters, DatasourceCredentialsCollection& dsParameters, Hashtable& reverseLookup);
    private static bool TryToAddToCollection(string name, String[] val, string prefix, bool allowMultiValue, NameValueCollection collection);
    private static void GuessFormatIfNotPresent(NameValueCollection catalogParameters);
}
internal enum Microsoft.ReportingServices.Diagnostics.SkuType : Enum {
    public int value__;
    public static SkuType None;
    public static SkuType Express;
    public static SkuType Workgroup;
    public static SkuType Standard;
    public static SkuType Enterprise;
    public static SkuType Developer;
    public static SkuType Evaluation;
    public static SkuType Web;
}
internal static class Microsoft.ReportingServices.Diagnostics.SkuUtil : object {
    public static SkuType GetSkuFromString(string edition);
    internal static bool IsWorkgroupOrHigher(SkuType sku);
    internal static bool IsStandardOrHigher(SkuType sku);
    internal static bool IsStandardOrEnterprise(SkuType sku);
    internal static bool IsEval(SkuType sku);
    public static bool IsEnterpriseDevOrEval(SkuType sku);
    public static SkuType GetSqlSku(SqlConnection sqlConn);
    public static SkuVerificationErrorCode EnsureCorrectEdition(SkuType rsSku, SkuType sqlSku, string connectionString, LocalDbServerVerifier localDbServerVerifier, bool checkRestrictedSkus);
    internal static List`1<SkuType> GetDatabaseSku(SkuType reportServerSku, List`1& restrictedSkus);
    public static SkuType SkuFromString(string edition);
    private static bool IsLocal(string sqlConnectionString, LocalDbServerVerifier localDbServerVerifier);
}
internal static class Microsoft.ReportingServices.Diagnostics.StreamSupport : object {
    private static int __MemoryBufferLimit;
    public static int MemoryBufferLimit { get; }
    private static StreamSupport();
    public static int get_MemoryBufferLimit();
    public static Byte[] ReadToEndNotUsingLength(Stream s, int initialBufferSize);
    public static Byte[] ReadToEndUsingLength(Stream s);
    public static long CopyStreamUsingBuffer(Stream from, Stream to, int bufferSize);
    public static long CopyFromStreamUsingBuffer(Stream from, Stream to, long bytesToCopy, int bufferSize);
    public static int ReadToCountOrEnd(Byte[] buffer, int offset, int count, StreamRead streamReadDelegate);
}
internal static class Microsoft.ReportingServices.Diagnostics.StringSupport : object {
    public static bool StartsWith(string str, string prefix, bool ignoreCase, CultureInfo culture);
    public static bool EndsWith(string str, string postfix, bool ignoreCase, CultureInfo culture);
    public static Byte[] ToUnicodeArray(string s);
    public static string FromUnicodeArray(Byte[] u);
}
internal class Microsoft.ReportingServices.Diagnostics.Timer : object {
    private static int m_valuesLessThanZero;
    private bool m_start;
    private long m_LastValue;
    private long Value { get; }
    private long Frequency { get; }
    private static Timer();
    private long get_Value();
    private long get_Frequency();
    public void StartTimer();
    public long ElapsedTimeMs();
    [SuppressUnmanagedCodeSecurityAttribute]
private static bool QueryPerformanceCounter(Int64& lpPerformanceCount);
    [SuppressUnmanagedCodeSecurityAttribute]
private static bool QueryPerformanceFrequency(Int64& lpFrequency);
}
internal class Microsoft.ReportingServices.Diagnostics.UserContext : object {
    private string m_userName;
    private object m_userToken;
    private AuthenticationType m_authType;
    private bool m_initialized;
    public string UserName { get; }
    public object UserToken { get; }
    public AuthenticationType AuthenticationType { get; }
    public bool IsInitialized { get; }
    public UserContext(string userName, object token, AuthenticationType authType);
    public UserContext(AuthenticationType authType);
    public string get_UserName();
    public object get_UserToken();
    public AuthenticationType get_AuthenticationType();
    public bool get_IsInitialized();
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.AccessDeniedException : ReportCatalogException {
    public AccessDeniedException(string userName);
    private AccessDeniedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.AccessDeniedToSecureDataException : ReportCatalogException {
    private AccessDeniedToSecureDataException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.AssemblyNotPermissioned : ReportCatalogException {
    public AssemblyNotPermissioned(string assemblyName);
    private AssemblyNotPermissioned(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.AuthenticationExtensionException : RSException {
    public AuthenticationExtensionException(Exception innerException, string parameterName);
    private AuthenticationExtensionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.BackupKeyPasswordInvalidException : ReportCatalogException {
    private BackupKeyPasswordInvalidException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.BatchNotFoundException : ReportCatalogException {
    public BatchNotFoundException(string batchId);
    private BatchNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.CannotActivateSubscriptionException : ReportCatalogException {
    private CannotActivateSubscriptionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.CannotDeleteRootPolicyException : ReportCatalogException {
    private CannotDeleteRootPolicyException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.CannotPrepareQueryException : ReportCatalogException {
    public CannotPrepareQueryException(Exception innerException);
    private CannotPrepareQueryException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.CannotSubscribeToEventException : ReportCatalogException {
    public CannotSubscribeToEventException(string eventType);
    private CannotSubscribeToEventException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.CannotValidateEncryptedDataException : ReportCatalogException {
    private CannotValidateEncryptedDataException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ContainerTypeNotSupportedException : ReportCatalogException {
    private ContainerTypeNotSupportedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.DataExtensionNotFoundException : ReportCatalogException {
    public DataExtensionNotFoundException(string extension);
    private DataExtensionNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.DataSourceDisabledException : ReportCatalogException {
    private DataSourceDisabledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.DataSourceNoPromptException : ReportCatalogException {
    public DataSourceNoPromptException(string dataSource);
    private DataSourceNoPromptException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.DataSourceNotFoundException : ReportCatalogException {
    public DataSourceNotFoundException(string dataSource);
    private DataSourceNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.DataSourceOpenException : ReportCatalogException {
    public DataSourceOpenException(string datasourceName, Exception innerException);
    private DataSourceOpenException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.DeliveryErrorException : ReportCatalogException {
    public DeliveryErrorException(Exception innerException);
    private DeliveryErrorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.DeliveryExtensionNotFoundException : ReportCatalogException {
    private DeliveryExtensionNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ElementTypeMismatchException : ReportCatalogException {
    public ElementTypeMismatchException(string elementName);
    public ElementTypeMismatchException(string elementName, Exception innerException);
    private ElementTypeMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.EmptyRoleException : ReportCatalogException {
    private EmptyRoleException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.EncryptedDataUnavailableException : ReportCatalogException {
    private EncryptedDataUnavailableException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.ReportingServices.Diagnostics.Utilities.ErrorCode : Enum {
    public int value__;
    public static ErrorCode rsSuccess;
    public static ErrorCode rsMissingParameter;
    public static ErrorCode rsInvalidParameter;
    public static ErrorCode rsParameterTypeMismatch;
    public static ErrorCode rsInvalidParameterCombination;
    public static ErrorCode rsMalformedXml;
    public static ErrorCode rsInvalidXml;
    public static ErrorCode rsMissingElement;
    public static ErrorCode rsInvalidElement;
    public static ErrorCode rsElementTypeMismatch;
    public static ErrorCode rsInvalidElementCombination;
    public static ErrorCode rsDataSourceNotFound;
    public static ErrorCode rsDataSourceNoPrompt;
    public static ErrorCode rsInvalidItemPath;
    public static ErrorCode rsItemPathLengthExceeded;
    public static ErrorCode rsInvalidItemName;
    public static ErrorCode rsItemNotFound;
    public static ErrorCode rsWrongItemType;
    public static ErrorCode rsItemAlreadyExists;
    public static ErrorCode rsInvalidMove;
    public static ErrorCode rsInvalidDestination;
    public static ErrorCode rsReservedItem;
    public static ErrorCode rsProcessingError;
    public static ErrorCode rsReadOnlyProperty;
    public static ErrorCode rsStreamNotFound;
    public static ErrorCode rsMissingSessionId;
    public static ErrorCode rsExecutionNotFound;
    public static ErrorCode rsQueryExecutionNotAllowed;
    public static ErrorCode rsReportNotReady;
    public static ErrorCode rsReportSnapshotEnabled;
    public static ErrorCode rsReportSnapshotNotEnabled;
    public static ErrorCode rsSubreportFromSnapshot;
    public static ErrorCode rsOperationPreventsUnattendedExecution;
    public static ErrorCode rsInvalidReportLink;
    public static ErrorCode rsSnapshotVersionMismatch;
    public static ErrorCode rsInvalidSearchOperator;
    public static ErrorCode rsDataSourceConnectStringProcessingError;
    public static ErrorCode rsQueryCommandTextProcessingError;
    public static ErrorCode rsReportParameterProcessingError;
    public static ErrorCode rsReportParameterQueryProcessingError;
    public static ErrorCode rsInvalidReportParameter;
    public static ErrorCode rsReadOnlyReportParameter;
    public static ErrorCode rsUnknownReportParameter;
    public static ErrorCode rsReportParameterValueNotSet;
    public static ErrorCode rsReportParameterTypeMismatch;
    public static ErrorCode rsQueryTimeout;
    public static ErrorCode rsReportHistoryNotFound;
    public static ErrorCode rsReportHistoryEnabled;
    public static ErrorCode rsSchedulerNotResponding;
    public static ErrorCode rsHasUserProfileDependencies;
    public static ErrorCode rsScheduleNotFound;
    public static ErrorCode rsScheduleAlreadyExists;
    public static ErrorCode rsScheduleDateTimeRangeException;
    public static ErrorCode rsDataSourceInUse;
    public static ErrorCode rsDataSourceDisabled;
    public static ErrorCode rsInvalidDataSourceReference;
    public static ErrorCode rsInvalidDataSourceCredentialSetting;
    public static ErrorCode rsWindowsIntegratedSecurityDisabled;
    public static ErrorCode rsCannotActivateSubscription;
    public static ErrorCode rsSubscriptionNotFound;
    public static ErrorCode rsDeliveryExtensionNotFound;
    public static ErrorCode rsDeliveryError;
    public static ErrorCode rsCannotPrepareQuery;
    public static ErrorCode rsInvalidExtensionParameter;
    public static ErrorCode rsUnknownEventType;
    public static ErrorCode rsCannotSubscribeToEvent;
    public static ErrorCode rsReservedRole;
    public static ErrorCode rsTaskNotFound;
    public static ErrorCode rsMixedTasks;
    public static ErrorCode rsEmptyRole;
    public static ErrorCode rsInheritedPolicy;
    public static ErrorCode rsInvalidPolicyDefinition;
    public static ErrorCode rsRoleAlreadyExists;
    public static ErrorCode rsRoleNotFound;
    public static ErrorCode rsUnknownUserName;
    public static ErrorCode rsCannotDeleteRootPolicy;
    public static ErrorCode rsAccessDenied;
    public static ErrorCode rsSecureConnectionRequired;
    public static ErrorCode rsAssemblyNotPermissioned;
    public static ErrorCode rsBatchNotFound;
    public static ErrorCode rsModelItemNotFound;
    public static ErrorCode rsModelRootPolicyRequired;
    public static ErrorCode rsModelingError;
    public static ErrorCode rsInvalidModelDrillthroughReport;
    public static ErrorCode rsModelIDMismatch;
    public static ErrorCode rsModelNotGenerated;
    public static ErrorCode rsModelGenerationNotSupported;
    public static ErrorCode rsModelGenerationError;
    public static ErrorCode rsSemanticQueryEngineError;
    public static ErrorCode rsSemanticQueryExtensionNotFound;
    public static ErrorCode rsXmlDataProviderError;
    public static ErrorCode rsReportServerDataProviderError;
    public static ErrorCode rsNotSupported;
    public static ErrorCode rsInternalError;
    public static ErrorCode rsRPCError;
    public static ErrorCode rsInvalidReportServerDatabase;
    public static ErrorCode rsReportServerDatabaseUnavailable;
    public static ErrorCode rsAccessDeniedToSecureData;
    public static ErrorCode rsReportTimeoutExpired;
    public static ErrorCode rsJobWasCanceled;
    public static ErrorCode rsReportServerDatabaseLogonFailed;
    public static ErrorCode rsEncryptedDataUnavailable;
    public static ErrorCode rsCannotValidateEncryptedData;
    public static ErrorCode rsRemotePublicKeyUnavailable;
    public static ErrorCode rsFailedToExportSymmetricKey;
    public static ErrorCode rsBackupKeyPasswordInvalid;
    public static ErrorCode rsReportServerDisabled;
    public static ErrorCode rsKeyStateNotValid;
    public static ErrorCode rsReportServerNotActivated;
    public static ErrorCode rsInvalidRSEditionConfiguration;
    public static ErrorCode rsReportServerServiceUnavailable;
    public static ErrorCode rsOperationNotSupported;
    public static ErrorCode rsEvaluationCopyExpired;
    public static ErrorCode rsServerBusy;
    public static ErrorCode rsServerConfigurationError;
    public static ErrorCode rsFailedToDecryptConfigInformation;
    public static ErrorCode rsEventLogSourceNotFound;
    public static ErrorCode rsLogonFailed;
    public static ErrorCode rsRenderingExtensionNotFound;
    public static ErrorCode rsInvalidChart;
    public static ErrorCode rsErrorDuringChartRendering;
    public static ErrorCode rsOWCNotInstalled;
    public static ErrorCode rsUnsupportedURLProtocol;
    public static ErrorCode rsMalformattedURL;
    public static ErrorCode rsFilterEvaluationError;
    public static ErrorCode rsFilterFieldError;
    public static ErrorCode rsParameterError;
    public static ErrorCode rsParametersNotSpecified;
    public static ErrorCode rsStoredParameterNotFound;
    public static ErrorCode rsCredentialsNotSpecified;
    public static ErrorCode rsDataSourceTypeNull;
    public static ErrorCode rsDataExtensionNotFound;
    public static ErrorCode rsNoFieldDataAtIndex;
    public static ErrorCode rsErrorOpeningConnection;
    public static ErrorCode rsErrorImpersonatingUser;
    public static ErrorCode rsDataExtensionWithoutConnectionExtension;
    public static ErrorCode rsManagedDataProviderWithoutConnectionExtension;
    public static ErrorCode rsErrorClosingConnection;
    public static ErrorCode rsErrorRollbackTransaction;
    public static ErrorCode rsErrorCommitTransaction;
    public static ErrorCode rsErrorCreatingCommand;
    public static ErrorCode rsErrorCreatingQueryParameter;
    public static ErrorCode rsErrorAddingMultiValueQueryParameter;
    public static ErrorCode rsErrorAddingQueryParameter;
    public static ErrorCode rsErrorSettingCommandText;
    public static ErrorCode rsErrorSettingCommandType;
    public static ErrorCode rsErrorSettingTransaction;
    public static ErrorCode rsErrorSettingQueryTimeout;
    public static ErrorCode rsErrorExecutingCommand;
    public static ErrorCode rsErrorCreatingDataReader;
    public static ErrorCode rsErrorReadingNextDataRow;
    public static ErrorCode rsErrorReadingDataField;
    public static ErrorCode rsErrorReadingDataAggregationField;
    public static ErrorCode rsProcessingAborted;
    public static ErrorCode rsUnexpectedError;
    public static ErrorCode rsInvalidSortItemID;
    public static ErrorCode rrRenderingError;
    public static ErrorCode rrInvalidPageNumber;
    public static ErrorCode rrRenderStyleError;
    public static ErrorCode rrRenderSectionInstanceError;
    public static ErrorCode rrRenderBeforeNewPageError;
    public static ErrorCode rrRenderAfterNewPageError;
    public static ErrorCode rrRenderResultNull;
    public static ErrorCode rrRenderStreamNull;
    public static ErrorCode rrRenderDeviceNull;
    public static ErrorCode rrRenderReportNull;
    public static ErrorCode rrRenderReportNameNull;
    public static ErrorCode rrRenderUnknownReportItem;
    public static ErrorCode rrRenderStyleName;
    public static ErrorCode rrRenderTextBox;
    public static ErrorCode rrUnexpectedError;
    public static ErrorCode rrControlInvalidTag;
    public static ErrorCode rrPageNamespaceInvalid;
    public static ErrorCode rrInvalidAttribute;
    public static ErrorCode rrInvalidProperty;
    public static ErrorCode rrInvalidStyleName;
    public static ErrorCode rrInvalidControl;
    public static ErrorCode rrInvalidDeviceInfo;
    public static ErrorCode rrReportNameNull;
    public static ErrorCode rrReportParamsNull;
    public static ErrorCode rrRendererParamsNull;
    public static ErrorCode rrMeasurementUnitError;
    public static ErrorCode rrInvalidOWCRequest;
    public static ErrorCode rrInvalidSize;
    public static ErrorCode rrInvalidMeasurementUnit;
    public static ErrorCode rrNegativeSize;
    public static ErrorCode rrOutOfRange;
    public static ErrorCode rrInvalidColor;
    public static ErrorCode pvInternalError;
    public static ErrorCode pvInvalidDefinition;
    public static ErrorCode pvInvalidUrl;
    public static ErrorCode rrInvalidBorderStyle;
    public static ErrorCode rrInvalidStyleArgumentType;
    public static ErrorCode rrInvalidUniqueName;
    public static ErrorCode rrInvalidActionLabel;
    public static ErrorCode rrInvalidMimeType;
    public static ErrorCode rsCRIProcessingError;
    public static ErrorCode rsSharePointError;
    public static ErrorCode rsStoredCredentialsOutOfSync;
    public static ErrorCode rsFileExtensionRequired;
    public static ErrorCode rsFileExtensionViolation;
    public static ErrorCode rsODCVersionNotSupported;
    public static ErrorCode rsOperationNotSupportedSharePointMode;
    public static ErrorCode rsOperationNotSupportedNativeMode;
    public static ErrorCode rsContainerNotSupported;
    public static ErrorCode rsSharePointObjectModelNotInstalled;
    public static ErrorCode rsInvalidRSDSSchema;
    public static ErrorCode rsPropertyDisabled;
    public static ErrorCode rsSecurityZoneNotSupported;
    public static ErrorCode rsAppDomainManagerError;
    public static ErrorCode rsHttpRuntimeError;
    public static ErrorCode rsHttpRuntimeInternalError;
    public static ErrorCode rsInternalRepublishingFailed;
    public static ErrorCode rsHttpRuntimeClientDisconnectionError;
    public static ErrorCode rsReportServerDatabaseError;
    public static ErrorCode rsReportBuilderFileTransmissionError;
    public static ErrorCode rsInternalResourceNotSpecifiedError;
    public static ErrorCode rsInternalResourceNotFoundError;
    public static ErrorCode rsAuthenticationExtensionError;
    public static ErrorCode rsRdceExtraElementError;
    public static ErrorCode rsRdceMismatchError;
    public static ErrorCode rsRdceInvalidRdlError;
    public static ErrorCode rsRdceInvalidConfigurationError;
    public static ErrorCode rsRdceInvalidItemTypeError;
    public static ErrorCode rsRdceInvalidExecutionOptionError;
    public static ErrorCode rsRdceInvalidCacheOptionError;
    public static ErrorCode rsRdceWrappedException;
    public static ErrorCode rsRdceMismatchRdlVersion;
    public static ErrorCode rsInvalidOperation;
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ErrorStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string InvalidKeyValue { get; }
    public static string EmptyExtensionName { get; }
    public static string UIServerLoopback { get; }
    public static string ProductName { get; }
    public static string UserNameUnknown { get; }
    public static string rsInvalidParameterCombination { get; }
    public static string rsInvalidXml { get; }
    public static string rsProcessingError { get; }
    public static string rsStreamNotFound { get; }
    public static string rsSnapshotVersionMismatch { get; }
    public static string rsMissingSessionId { get; }
    public static string rsQueryExecutionNotAllowed { get; }
    public static string rsReportNotReady { get; }
    public static string rsReportSnapshotEnabled { get; }
    public static string rsReportSnapshotNotEnabled { get; }
    public static string rsOperationPreventsUnattendedExecution { get; }
    public static string rsInvalidReportLink { get; }
    public static string rsSubreportFromSnapshot { get; }
    public static string rsQueryTimeout { get; }
    public static string rsSchedulerNotResponding { get; }
    public static string rsScheduleDateTimeRangeException { get; }
    public static string rsInvalidDataSourceCredentialSetting { get; }
    public static string rsWindowsIntegratedSecurityDisabled { get; }
    public static string rsDataSourceDisabled { get; }
    public static string rsInvalidDataSourceReference { get; }
    public static string rsCannotActivateSubscription { get; }
    public static string rsDeliveryExtensionNotFound { get; }
    public static string rsDeliverError { get; }
    public static string rsCannotPrepareQuery { get; }
    public static string rsMixedTasks { get; }
    public static string rsEmptyRole { get; }
    public static string rsCannotDeleteRootPolicy { get; }
    public static string rsSecureConnectionRequired { get; }
    public static string rsModelRootPolicyRequired { get; }
    public static string rsModelIDMismatch { get; }
    public static string rsModelNotGenerated { get; }
    public static string rsModelGenerationNotSupported { get; }
    public static string rsModelGenerationError { get; }
    public static string rsInternalError { get; }
    public static string rsNotSupported { get; }
    public static string rsReportServerDatabaseLogonFailed { get; }
    public static string rsReportServerDatabaseUnavailable { get; }
    public static string rsReportServerDatabaseError { get; }
    public static string rsReportTimeoutExpired { get; }
    public static string rsJobWasCanceled { get; }
    public static string rsEvaluationCopyExpired { get; }
    public static string rsServerBusy { get; }
    public static string rsReportServerDisabled { get; }
    public static string rsKeyStateNotValid { get; }
    public static string rsReportServerNotActivated { get; }
    public static string rsAccessDeniedToSecureData { get; }
    public static string rsLogonFailed { get; }
    public static string rsEncryptedDataUnavailable { get; }
    public static string rsCannotValidateEncryptedData { get; }
    public static string rsRemotePublicKeyUnavailable { get; }
    public static string rsFailedToExportSymmetricKey { get; }
    public static string rsBackupKeyPasswordInvalid { get; }
    public static string rsErrorNotVisibleToRemoteBrowsers { get; }
    public static string rsInternalResourceNotSpecifiedError { get; }
    public static string SkuNonSqlDataSources { get; }
    public static string SkuOtherSkuDatasources { get; }
    public static string SkuRemoteDataSources { get; }
    public static string SkuCaching { get; }
    public static string SkuExecutionSnapshots { get; }
    public static string SkuHistory { get; }
    public static string SkuDelivery { get; }
    public static string SkuScheduling { get; }
    public static string SkuExtensibility { get; }
    public static string SkuCustomAuth { get; }
    public static string SkuSharepoint { get; }
    public static string SkuScaleOut { get; }
    public static string SkuSubscriptions { get; }
    public static string SkuDataDrivenSubscriptions { get; }
    public static string SkuCustomRolesSecurity { get; }
    public static string SkuReportBuilder { get; }
    public static string SkuModelItemSecurity { get; }
    public static string SkuDynamicDrillthrough { get; }
    public static string SkuNoCpuThrottling { get; }
    public static string SkuNoMemoryThrottling { get; }
    public static string rsSharePointError { get; }
    public static string rsFileExtensionRequired { get; }
    public static string rsODCVersionNotSupported { get; }
    public static string rsOperationNotSupportedSharePointMode { get; }
    public static string rsOperationNotSupportedNativeMode { get; }
    public static string rsContainerNotSupported { get; }
    public static string rsPropertyDisabled { get; }
    public static string rsInvalidRSDSSchema { get; }
    public static string rsSecurityZoneNotSupported { get; }
    public static string rsRdceInvalidRdlError { get; }
    public static string rsRdceInvalidConfigurationError { get; }
    public static string rsRdceInvalidExecutionOptionError { get; }
    public static string rsRdceInvalidCacheOptionError { get; }
    public static string rsRdceWrappedException { get; }
    public static string rsInvalidOperation { get; }
    public static string rsRdceMismatchRdlVersion { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_InvalidKeyValue();
    public static string get_EmptyExtensionName();
    public static string get_UIServerLoopback();
    public static string get_ProductName();
    public static string get_UserNameUnknown();
    public static string get_rsInvalidParameterCombination();
    public static string get_rsInvalidXml();
    public static string get_rsProcessingError();
    public static string get_rsStreamNotFound();
    public static string get_rsSnapshotVersionMismatch();
    public static string get_rsMissingSessionId();
    public static string get_rsQueryExecutionNotAllowed();
    public static string get_rsReportNotReady();
    public static string get_rsReportSnapshotEnabled();
    public static string get_rsReportSnapshotNotEnabled();
    public static string get_rsOperationPreventsUnattendedExecution();
    public static string get_rsInvalidReportLink();
    public static string get_rsSubreportFromSnapshot();
    public static string get_rsQueryTimeout();
    public static string get_rsSchedulerNotResponding();
    public static string get_rsScheduleDateTimeRangeException();
    public static string get_rsInvalidDataSourceCredentialSetting();
    public static string get_rsWindowsIntegratedSecurityDisabled();
    public static string get_rsDataSourceDisabled();
    public static string get_rsInvalidDataSourceReference();
    public static string get_rsCannotActivateSubscription();
    public static string get_rsDeliveryExtensionNotFound();
    public static string get_rsDeliverError();
    public static string get_rsCannotPrepareQuery();
    public static string get_rsMixedTasks();
    public static string get_rsEmptyRole();
    public static string get_rsCannotDeleteRootPolicy();
    public static string get_rsSecureConnectionRequired();
    public static string get_rsModelRootPolicyRequired();
    public static string get_rsModelIDMismatch();
    public static string get_rsModelNotGenerated();
    public static string get_rsModelGenerationNotSupported();
    public static string get_rsModelGenerationError();
    public static string get_rsInternalError();
    public static string get_rsNotSupported();
    public static string get_rsReportServerDatabaseLogonFailed();
    public static string get_rsReportServerDatabaseUnavailable();
    public static string get_rsReportServerDatabaseError();
    public static string get_rsReportTimeoutExpired();
    public static string get_rsJobWasCanceled();
    public static string get_rsEvaluationCopyExpired();
    public static string get_rsServerBusy();
    public static string get_rsReportServerDisabled();
    public static string get_rsKeyStateNotValid();
    public static string get_rsReportServerNotActivated();
    public static string get_rsAccessDeniedToSecureData();
    public static string get_rsLogonFailed();
    public static string get_rsEncryptedDataUnavailable();
    public static string get_rsCannotValidateEncryptedData();
    public static string get_rsRemotePublicKeyUnavailable();
    public static string get_rsFailedToExportSymmetricKey();
    public static string get_rsBackupKeyPasswordInvalid();
    public static string get_rsErrorNotVisibleToRemoteBrowsers();
    public static string get_rsInternalResourceNotSpecifiedError();
    public static string get_SkuNonSqlDataSources();
    public static string get_SkuOtherSkuDatasources();
    public static string get_SkuRemoteDataSources();
    public static string get_SkuCaching();
    public static string get_SkuExecutionSnapshots();
    public static string get_SkuHistory();
    public static string get_SkuDelivery();
    public static string get_SkuScheduling();
    public static string get_SkuExtensibility();
    public static string get_SkuCustomAuth();
    public static string get_SkuSharepoint();
    public static string get_SkuScaleOut();
    public static string get_SkuSubscriptions();
    public static string get_SkuDataDrivenSubscriptions();
    public static string get_SkuCustomRolesSecurity();
    public static string get_SkuReportBuilder();
    public static string get_SkuModelItemSecurity();
    public static string get_SkuDynamicDrillthrough();
    public static string get_SkuNoCpuThrottling();
    public static string get_SkuNoMemoryThrottling();
    public static string get_rsSharePointError();
    public static string get_rsFileExtensionRequired();
    public static string get_rsODCVersionNotSupported();
    public static string get_rsOperationNotSupportedSharePointMode();
    public static string get_rsOperationNotSupportedNativeMode();
    public static string get_rsContainerNotSupported();
    public static string get_rsPropertyDisabled();
    public static string get_rsInvalidRSDSSchema();
    public static string get_rsSecurityZoneNotSupported();
    public static string get_rsRdceInvalidRdlError();
    public static string get_rsRdceInvalidConfigurationError();
    public static string get_rsRdceInvalidExecutionOptionError();
    public static string get_rsRdceInvalidCacheOptionError();
    public static string get_rsRdceWrappedException();
    public static string get_rsInvalidOperation();
    public static string get_rsRdceMismatchRdlVersion();
    public static string InvalidConfigElement(string element);
    public static string CouldNotFindElement(string element);
    public static string SameExtensionName(string name);
    public static string SameEventType(string type);
    public static string NoEventForEventProcessor(string name);
    public static string ProductNameAndVersion(string version);
    public static string rsMissingParameter(string parameterName);
    public static string rsInvalidParameter(string parameterName);
    public static string rsParameterTypeMismatch(string parameterName);
    public static string rsStoredParameterNotFound(string StoredParameterID);
    public static string rsMalformedXml(string error);
    public static string rsMissingElement(string elementName);
    public static string rsInvalidElement(string elementName);
    public static string rsElementTypeMismatch(string name);
    public static string rsInvalidElementCombination(string firstElementName, string secondElementName);
    public static string rsInvalidItemPath(string itemPath, int maxLength);
    public static string rsItemPathLengthExceeded(string itemPath, int maxLength);
    public static string rsInvalidItemName(string itemName, int maxLength);
    public static string rsItemNotFound(string itemPath);
    public static string rsWrongItemType(string itemPath);
    public static string rsItemAlreadyExists(string itemPath);
    public static string rsInvalidMove(string itemPath, string targetPath);
    public static string rsInvalidDestination(string sourcePath, string targetPath);
    public static string rsReservedItem(string itemPath);
    public static string rsReadOnlyProperty(string property);
    public static string rsExecutionNotFound(string executionID);
    public static string rsInvalidSearchOperator(string operation);
    public static string rsReadOnlyReportParameter(string parameterName);
    public static string rsUnknownReportParameter(string parameterName);
    public static string rsReportParameterValueNotSet(string parameterName);
    public static string rsReportParameterTypeMismatch(string parameterName);
    public static string rsInvalidReportParameter(string parameterName);
    public static string rsReportHistoryNotFound(string reportPath, string snapshotId);
    public static string rsHasUserProfileDependencies(string reportName);
    public static string rsScheduleNotFound(string name);
    public static string rsScheduleAlreadyExists(string name);
    public static string rsSharePoitScheduleAlreadyExists(string name, string path);
    public static string rsDataSourceNotFound(string dataSource);
    public static string rsDataSourceNoPromptException(string dataSource);
    public static string rsSubscriptionNotFound(string name);
    public static string rsInvalidExtensionParameter(string reason);
    public static string rsUnknownEventType(string eventType);
    public static string rsCannotSubscribeToEvent(string eventType);
    public static string rsReservedRole(string roleName);
    public static string rsTaskNotFound(string taskName);
    public static string rsInheritedPolicy(string itemPath);
    public static string rsInheritedPolicyModelItem(string itemPath, string modelItemID);
    public static string rsInvalidPolicyDefinition(string policyDefinition);
    public static string rsRoleAlreadyExists(string roleName);
    public static string rsRoleNotFound(string roleName);
    public static string rsUnknownUserName(string userName);
    public static string rsAccessDenied(string userName);
    public static string rsAssemblyNotPermissioned(string assemblyName);
    public static string rsBatchNotFound(string batchId);
    public static string rsModelItemNotFound(string modelPath, string modelItemID);
    public static string rsInvalidReportServerDatabase(string storedVersion, string expectedVersion);
    public static string rsSharePointObjectModelNotInstalled(string error);
    public static string rsDataExtensionNotFound(string extension);
    public static string rsSemanticQueryExtensionNotFound(string extension);
    public static string rsOperationNotSupported(string operation);
    public static string rsServerConfigurationError(string additionalMsg);
    public static string rsEventLogSourceNotFound(string source);
    public static string rsFailedToDecryptConfigInformation(string configElement);
    public static string rsReportServerServiceUnavailable(string serviceName);
    public static string rsInvalidModelDrillthroughReport(string reportName);
    public static string rsErrorOpeningConnection(string dataSourceName);
    public static string rsAppDomainManagerError(string appDomain);
    public static string rsHttpRuntimeError(string appDomain);
    public static string rsHttpRuntimeInternalError(string appDomain);
    public static string rsHttpRuntimeClientDisconnectionError(string appdomain, string hr);
    public static string rsReportBuilderFileTransmissionError(string fileName);
    public static string rsInternalResourceNotFoundError(string imageId);
    public static string rsStoredCredentialsOutOfSync(string path);
    public static string rsFileExtensionViolation(string target, string source);
    public static string rsAuthenticationExtensionError(string message);
    public static string rsRdceExtraElementError(string nodeName);
    public static string rsRdceMismatchError(string rdceSet, string rdceConfigured);
    public static string rsRdceInvalidItemTypeError(string type);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.EventLogSourceNotFound : ReportCatalogException {
    public EventLogSourceNotFound(string source);
    private EventLogSourceNotFound(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ExecutionNotFoundException : ReportCatalogException {
    public ExecutionNotFoundException(string ExecutionID);
    private ExecutionNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.FailedToExportSymmetricKeyException : ReportCatalogException {
    private FailedToExportSymmetricKeyException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.FileExtensionMissingException : ReportCatalogException {
    private FileExtensionMissingException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.FileExtensionViolationException : ReportCatalogException {
    public FileExtensionViolationException(string targetFileExtension, string sourceFileExtension);
    private FileExtensionViolationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.HasUserProfileDependenciesException : ReportCatalogException {
    public HasUserProfileDependenciesException(string reportName);
    private HasUserProfileDependenciesException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InheritedPolicyException : ReportCatalogException {
    public InheritedPolicyException(string itemPath);
    public InheritedPolicyException(string itemPath, string itemID);
    private InheritedPolicyException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InternalCatalogException : ReportCatalogException {
    public InternalCatalogException(Exception innerException, string additionalTraceMessage);
    public InternalCatalogException(string additionalTraceMessage);
    private InternalCatalogException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InternalRepublishingException : ReportCatalogException {
    public InternalRepublishingException(string itemPath, Exception innerException, Byte[] contents);
    private InternalRepublishingException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InternalResourceNotFoundException : RSException {
    public InternalResourceNotFoundException(string imageId);
    private InternalResourceNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidDataSourceCredentialSettingException : ReportCatalogException {
    private InvalidDataSourceCredentialSettingException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidDataSourceReferenceException : ReportCatalogException {
    private InvalidDataSourceReferenceException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidDataSourceSchemaException : ReportCatalogException {
    private InvalidDataSourceSchemaException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidDestinationException : ReportCatalogException {
    public InvalidDestinationException(string sourcePath, string targetPath);
    private InvalidDestinationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidElementCombinationException : ReportCatalogException {
    public InvalidElementCombinationException(string elementName1, string elementName2);
    private InvalidElementCombinationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidElementException : ReportCatalogException {
    public InvalidElementException(string elementName);
    private InvalidElementException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidExtensionParameter : ReportCatalogException {
    public InvalidExtensionParameter(string reason);
    private InvalidExtensionParameter(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidItemNameException : ReportCatalogException {
    public InvalidItemNameException(string invalidName, int maxItemNameLength);
    private InvalidItemNameException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidItemPathException : ReportCatalogException {
    public InvalidItemPathException(string invalidPath, string parameterName);
    public InvalidItemPathException(string invalidPath);
    private InvalidItemPathException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidModelDrillthroughReportException : ReportCatalogException {
    public InvalidModelDrillthroughReportException(string reportName);
    private InvalidModelDrillthroughReportException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidMoveException : ReportCatalogException {
    public InvalidMoveException(string itemPath, string targetPath);
    private InvalidMoveException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidParameterCombinationException : ReportCatalogException {
    private InvalidParameterCombinationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidParameterException : ReportCatalogException {
    public InvalidParameterException(string parameterName);
    public InvalidParameterException(string parameterName, Exception innnerException);
    private InvalidParameterException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidPolicyDefinitionException : ReportCatalogException {
    public InvalidPolicyDefinitionException(string policyDefinition);
    private InvalidPolicyDefinitionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidReportLinkException : ReportCatalogException {
    private InvalidReportLinkException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidReportParameterException : ReportCatalogException {
    public InvalidReportParameterException(string parameterName);
    private InvalidReportParameterException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidSearchOperatorException : ReportCatalogException {
    public InvalidSearchOperatorException(string operation);
    private InvalidSearchOperatorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.InvalidXmlException : ReportCatalogException {
    private InvalidXmlException(SerializationInfo info, StreamingContext context);
}
internal interface Microsoft.ReportingServices.Diagnostics.Utilities.IRSTraceInternal {
    public string TraceDirectory { get; }
    public string CurrentTraceFilePath { get; }
    public bool BufferOutput { get; public set; }
    public bool IsTraceInitialized { get; }
    public abstract virtual string get_TraceDirectory();
    public abstract virtual string get_CurrentTraceFilePath();
    public abstract virtual bool get_BufferOutput();
    public abstract virtual void set_BufferOutput(bool value);
    public abstract virtual bool get_IsTraceInitialized();
    public abstract virtual void ClearBuffer();
    public abstract virtual void WriteBuffer();
    public abstract virtual string GetDefaultTraceLevel();
    public abstract virtual void Trace(string componentName, string message);
    public abstract virtual void Trace(string componentName, string format, Object[] arg);
    public abstract virtual void Trace(TraceLevel traceLevel, string componentName, string message);
    public abstract virtual void Trace(TraceLevel traceLevel, string componentName, string format, Object[] arg);
    public abstract virtual void TraceException(TraceLevel traceLevel, string componentName, string message);
    public abstract virtual void TraceWithNoEventLog(TraceLevel traceLevel, string componentName, string format, Object[] arg);
    public abstract virtual void Assert(bool condition, string componentName);
    public abstract virtual void Assert(bool condition, string componentName, string message);
    public abstract virtual bool GetTraceLevel(string componentName, TraceLevel& componentTraceLevel);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ItemAlreadyExistsException : ReportCatalogException {
    public ItemAlreadyExistsException(string itemPath);
    private ItemAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ItemNotFoundException : ReportCatalogException {
    public ItemNotFoundException(string itemPath, string parameterName);
    public ItemNotFoundException(string itemPath);
    private ItemNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ItemPathLengthExceededException : ReportCatalogException {
    public ItemPathLengthExceededException(string itemPath);
    private ItemPathLengthExceededException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.JobCanceledException : ReportCatalogException {
    public JobCanceledException(Exception innerException);
    private JobCanceledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.LogonFailedException : ReportCatalogException {
    public LogonFailedException(Exception innerException);
    private LogonFailedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.MalformedXmlException : ReportCatalogException {
    public MalformedXmlException(XmlException ex);
    private MalformedXmlException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.MissingElementException : ReportCatalogException {
    private string m_elementName;
    public string MissingElementName { get; }
    public MissingElementException(string elementName);
    private MissingElementException(SerializationInfo info, StreamingContext context);
    public string get_MissingElementName();
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.MissingParameterException : ReportCatalogException {
    public MissingParameterException(string parameterName);
    private MissingParameterException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.MissingSessionIdException : ReportCatalogException {
    private MissingSessionIdException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.MixedTasksException : ReportCatalogException {
    private MixedTasksException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ModelGenerationErrorException : ReportCatalogException {
    public ModelGenerationErrorException(Exception innerException);
    private ModelGenerationErrorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ModelGenerationNotSupportedException : ReportCatalogException {
    private ModelGenerationNotSupportedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ModelIDMismatchException : ReportCatalogException {
    private ModelIDMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ModelItemNotFoundException : ReportCatalogException {
    public ModelItemNotFoundException(string modelPath, string modelItemID);
    private ModelItemNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ModelNotAutoGeneratedException : ReportCatalogException {
    public ModelNotAutoGeneratedException(string modelPath);
    private ModelNotAutoGeneratedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ModelRootPolicyRequiredException : ReportCatalogException {
    private ModelRootPolicyRequiredException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.NotYetSupportedException : ReportCatalogException {
    private NotYetSupportedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ODCVersionNotSupportedException : ReportCatalogException {
    private ODCVersionNotSupportedException(SerializationInfo info, StreamingContext context);
}
internal enum Microsoft.ReportingServices.Diagnostics.Utilities.OperatingSystem : Enum {
    public int value__;
    public static OperatingSystem OsIndependent;
    public static OperatingSystem Windows2000;
    public static OperatingSystem WindowsXP;
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.OperationNotSupportedException : ReportCatalogException {
    public OperationNotSupportedException(string operation);
    private OperationNotSupportedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.OperationNotSupportedNativeModeException : ReportCatalogException {
    private OperationNotSupportedNativeModeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.OperationNotSupportedSharePointModeException : ReportCatalogException {
    private OperationNotSupportedSharePointModeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.OperationPreventsUnattendedExecutionException : ReportCatalogException {
    private OperationPreventsUnattendedExecutionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ParameterTypeMismatchException : ReportCatalogException {
    public ParameterTypeMismatchException(string parameterName);
    public ParameterTypeMismatchException(string parameterName, Exception innerException);
    private ParameterTypeMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ProcessingErrorException : ReportCatalogException {
    public ProcessingErrorException(Exception innerException);
    private ProcessingErrorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.QueryExecutionNotAllowedException : ReportCatalogException {
    private QueryExecutionNotAllowedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.QueryTimeoutException : ReportCatalogException {
    private QueryTimeoutException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceExtraElementException : RSException {
    public RdceExtraElementException(string nodeName);
    private RdceExtraElementException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceInvalidCacheOptionException : RSException {
    private RdceInvalidCacheOptionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceInvalidConfigurationException : RSException {
    private RdceInvalidConfigurationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceInvalidExecutionOptionException : RSException {
    private RdceInvalidExecutionOptionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceInvalidItemTypeException : RSException {
    public RdceInvalidItemTypeException(string type);
    private RdceInvalidItemTypeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceInvalidRdlException : RSException {
    public RdceInvalidRdlException(Exception innerException);
    private RdceInvalidRdlException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceMismatchException : RSException {
    public RdceMismatchException(string rdceSet, string rdceConfigured);
    private RdceMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceMismatchRdlVersion : RSException {
    public RdceMismatchRdlVersion(string originalNamespace, string processedNamespace);
    private RdceMismatchRdlVersion(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RdceWrappedException : RSException {
    public RdceWrappedException(Exception innerException);
    public RdceWrappedException(Exception innerException, string additionalTraceMessage);
    private RdceWrappedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReadOnlyPropertyException : ReportCatalogException {
    public ReadOnlyPropertyException(string propertyName);
    private ReadOnlyPropertyException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReadOnlyReportParameterException : ReportCatalogException {
    public ReadOnlyReportParameterException(string parameterName);
    private ReadOnlyReportParameterException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RemotePublicKeyUnavailableException : ReportCatalogException {
    private RemotePublicKeyUnavailableException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportBuilderFileTransmissionException : RSException {
    public ReportBuilderFileTransmissionException(Exception innerException, string fileName);
    private ReportBuilderFileTransmissionException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.ReportingServices.Diagnostics.Utilities.ReportCatalogException : RSException {
    public ReportCatalogException(ErrorCode errorCode, string localizedMessage, Exception innerException, string additionalTraceMessage, Object[] exceptionData);
    public ReportCatalogException(ErrorCode errorCode, string localizedMessage, Exception innerException, string additionalTraceMessage, TraceLevel traceLevel, Object[] exceptionData);
    protected ReportCatalogException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportHistoryNotFoundException : ReportCatalogException {
    public ReportHistoryNotFoundException(string reportPath, string snapshotId);
    private ReportHistoryNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportNotReadyException : ReportCatalogException {
    private ReportNotReadyException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportParameterTypeMismatchException : ReportCatalogException {
    public ReportParameterTypeMismatchException(string parameterName);
    private ReportParameterTypeMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportParameterValueNotSetException : ReportCatalogException {
    public ReportParameterValueNotSetException(string parameterName);
    private ReportParameterValueNotSetException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportServerAppDomainManagerException : ReportCatalogException {
    public ReportServerAppDomainManagerException(Exception innerException, string appDomain, string additionalTraceMessage);
    public ReportServerAppDomainManagerException(string appDomain, string additionalTraceMessage);
    public ReportServerAppDomainManagerException(Exception innerException, string appDomain);
    private ReportServerAppDomainManagerException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportServerDatabaseLogonFailedException : ReportCatalogException {
    public ReportServerDatabaseLogonFailedException(Exception innerException);
    private ReportServerDatabaseLogonFailedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportServerHttpRuntimeClientDisconnectionException : RSException {
    public ReportServerHttpRuntimeClientDisconnectionException(Exception innerException, string appDomain, int hr);
    private ReportServerHttpRuntimeClientDisconnectionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportServerHttpRuntimeException : ReportCatalogException {
    public ReportServerHttpRuntimeException(Exception innerException, string appDomain, string additionalTraceMessage);
    public ReportServerHttpRuntimeException(string appDomain, string additionalTraceMessage);
    public ReportServerHttpRuntimeException(Exception innerException, string appDomain);
    private ReportServerHttpRuntimeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportServerHttpRuntimeInternalException : ReportCatalogException {
    public ReportServerHttpRuntimeInternalException(Exception innerException, string appDomain, string additionalTraceMessage);
    public ReportServerHttpRuntimeInternalException(string appDomain, string additionalTraceMessage);
    public ReportServerHttpRuntimeInternalException(Exception innerException, string appDomain);
    private ReportServerHttpRuntimeInternalException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportServerServiceUnavailableException : ReportCatalogException {
    public ReportServerServiceUnavailableException(string serviceName);
    private ReportServerServiceUnavailableException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportServerStorageException : ReportCatalogException {
    public bool IsSqlException { get; }
    public int SqlErrorNumber { get; }
    public string SqlErrorMessage { get; }
    public SqlErrorCollection SqlErrors { get; }
    protected bool TraceFullException { get; }
    public ReportServerStorageException(Exception innerException);
    public ReportServerStorageException(Exception innerException, string additionalTraceMessage);
    private ReportServerStorageException(SerializationInfo info, StreamingContext context);
    [DebuggerStepThroughAttribute]
public bool get_IsSqlException();
    public int get_SqlErrorNumber();
    public string get_SqlErrorMessage();
    public SqlErrorCollection get_SqlErrors();
    protected virtual bool get_TraceFullException();
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportSnapshotEnabledException : ReportCatalogException {
    private ReportSnapshotEnabledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportSnapshotNotEnabledException : ReportCatalogException {
    private ReportSnapshotNotEnabledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReportTimeoutExpiredException : ReportCatalogException {
    public ReportTimeoutExpiredException(Exception innerException);
    private ReportTimeoutExpiredException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReservedItemException : ReportCatalogException {
    public ReservedItemException(string itemPath);
    private ReservedItemException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ReservedRoleException : ReportCatalogException {
    public ReservedRoleException(string roleName);
    private ReservedRoleException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RoleAlreadyExistsException : ReportCatalogException {
    public RoleAlreadyExistsException(string roleName);
    private RoleAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RoleNotFoundException : ReportCatalogException {
    public RoleNotFoundException(string roleName);
    private RoleNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RPCException : ReportCatalogException {
    public RPCException(Exception exceptionFromRPC);
    private RPCException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RSException : Exception {
    public static string DefaultServerErrorNamespace;
    public static string DefaultNamespacePrefix;
    private static string HelpLinkFormat;
    private static string HelpLinkTag;
    protected static string XmlMoreInfoElement;
    protected static string XmlMoreInfoSource;
    protected static string XmlMoreInfoMessage;
    protected static string XmlErrorCode;
    protected static string XmlWarningsElement;
    protected static string XmlWarningElement;
    protected static string XmlWarningCodeElement;
    protected static string XmlWarningSeverityElement;
    protected static string XmlWarningObjectNameElement;
    protected static string XmlWarningObjectTypeElement;
    protected static string XmlWarningMessageElement;
    private string m_ActorUri;
    private ErrorCode m_ErrorCode;
    private string m_HttpStatusCode;
    private string m_ProductName;
    private string m_ProductVersion;
    private int m_ProductLocaleID;
    private int m_CountryLocaleID;
    private OperatingSystem m_OS;
    private string m_AdditionalTraceMessage;
    private RSTrace m_tracer;
    private TraceLevel m_traceLevel;
    private Object[] m_exceptionData;
    private static EventHandler`1<RSExceptionCreatedEventArgs> ExceptionCreated;
    public string ExceptionLevelHelpLink { get; }
    public bool SkipTopLevelMessage { get; }
    public ErrorCode Code { get; }
    protected bool TraceFullException { get; }
    public static string ErrorNotVisibleOnRemoteBrowsers { get; }
    public string AdditionalTraceMessage { get; }
    public Object[] ExceptionData { get; }
    public RSException(ErrorCode errorCode, string localizedMessage, Exception innerException, RSTrace tracer, string additionalTraceMessage, Object[] exceptionData);
    public RSException(ErrorCode errorCode, string localizedMessage, Exception innerException, RSTrace tracer, string additionalTraceMessage, TraceLevel traceLevel, Object[] exceptionData);
    public RSException(RSException inner);
    protected RSException(SerializationInfo info, StreamingContext context);
    private static bool IsClientLocal();
    public virtual string ToString();
    public void Trace();
    public void SetExceptionProperties(string actorUri, string productName, string productVersion);
    public string get_ExceptionLevelHelpLink();
    public bool get_SkipTopLevelMessage();
    public ErrorCode get_Code();
    protected XmlNode ToXml(XmlDocument doc, bool enableRemoteExceptions, string detailedMsg, StringBuilder errorMsgBuilder);
    protected virtual XmlNode AddMoreInformationForThis(XmlDocument doc, XmlNode parent, StringBuilder errorMsgBuilder);
    protected virtual void AddWarnings(XmlDocument doc, XmlNode parent);
    protected virtual bool get_TraceFullException();
    protected static XmlNode CreateMoreInfoNode(string source, XmlDocument doc, XmlNode parent);
    protected static string AddMessageToMoreInfoNode(XmlDocument doc, XmlNode moreInfoNode, string errCode, string message, string helpLink);
    protected static void AddWarningNode(XmlDocument doc, XmlNode parent, string code, string severity, string objectName, string objectType, string message);
    protected string CreateHelpLink(string messageSource, string id);
    public static string get_ErrorNotVisibleOnRemoteBrowsers();
    private void AddMoreInformation(XmlDocument doc, XmlNode parent, bool enableRemoteExceptions, StringBuilder errorMsgBuilder);
    public string get_AdditionalTraceMessage();
    public Object[] get_ExceptionData();
    private XmlNode AddMoreInformationForException(XmlDocument doc, XmlNode parent, Exception e, StringBuilder errorMsgBuilder);
    private static void BuildExceptionMessage(Exception e, string filteredMsg, StringBuilder errorMsgBuilder);
    private static string RemoveInvalidXmlChars(string origText);
    public static void add_ExceptionCreated(EventHandler`1<RSExceptionCreatedEventArgs> value);
    public static void remove_ExceptionCreated(EventHandler`1<RSExceptionCreatedEventArgs> value);
    private void OnExceptionCreated();
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RSExceptionCreatedEventArgs : EventArgs {
    private RSException m_e;
    public RSException Exception { get; }
    public RSExceptionCreatedEventArgs(RSException exception);
    [DebuggerStepThroughAttribute]
public RSException get_Exception();
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.RSTrace : object {
    private static string m_allComponents;
    private static RSTrace m_cryptoTrace;
    private static RSTrace m_resourceUtilTrace;
    private static RSTrace m_catalogTrace;
    private static RSTrace m_ConfigManagerTrace;
    private static RSTrace m_WebServerTrace;
    private static RSTrace m_NtServiceTrace;
    private static RSTrace m_sessionTrace;
    private static RSTrace m_bufRespTrace;
    private static RSTrace m_RunningRequestsTrace;
    private static RSTrace m_DbPollingTrace;
    private static RSTrace m_NotificationTrace;
    private static RSTrace m_ProviderTrace;
    private static RSTrace m_ScheduleTrace;
    private static RSTrace m_SubscriptionTrace;
    private static RSTrace m_SecurityTrace;
    private static RSTrace m_ServiceControllerTrace;
    private static RSTrace m_CleanupTrace;
    private static RSTrace m_CacheTrace;
    private static RSTrace m_ChunkTrace;
    private static RSTrace m_ExtTrace;
    private static RSTrace m_runningJobsTrace;
    private static RSTrace m_processingTrace;
    private static RSTrace m_RenderingTrace;
    private static RSTrace m_ViewerTrace;
    private static RSTrace m_DataExtTrace;
    private static RSTrace m_EmailExtensionTrace;
    private static RSTrace m_ImageRendererTrace;
    private static RSTrace m_ExcelRendererTrace;
    private static RSTrace m_PreviewServerTrace;
    private static RSTrace m_ReportPreviewTrace;
    private static RSTrace m_UITrace;
    private static RSTrace m_SMGTrace;
    private static RSTrace m_SQETrace;
    private static RSTrace m_AppDomainManagerTrace;
    private static RSTrace m_HttpRuntimeTrace;
    private string m_ComponentName;
    private TraceLevel m_componentTraceLevel;
    private static TraceSwitch m_rsTraceSwitch;
    private static IRSTraceInternal m_traceInternal;
    public static RSTrace CryptoTrace { get; }
    public static RSTrace ResourceUtilTrace { get; }
    public static RSTrace CatalogTrace { get; }
    public static RSTrace ConfigManagerTracer { get; }
    public static RSTrace WebServerTracer { get; }
    public static RSTrace NtServiceTracer { get; }
    public static RSTrace SessionTrace { get; }
    public static RSTrace BufferedResponseTracer { get; }
    public static RSTrace RunningRequestsTracer { get; }
    public static RSTrace DbPollingTracer { get; }
    public static RSTrace NotificationTracer { get; }
    public static RSTrace ProviderTracer { get; }
    public static RSTrace ScheduleTracer { get; }
    public static RSTrace SubscriptionTracer { get; }
    public static RSTrace SecurityTracer { get; }
    public static RSTrace ServiceControllerTracer { get; }
    public static RSTrace CleanupTracer { get; }
    public static RSTrace CacheTracer { get; }
    public static RSTrace ChunkTracer { get; }
    public static RSTrace ExtensionFactoryTracer { get; }
    public static RSTrace RunningJobsTrace { get; }
    public static RSTrace ProcessingTracer { get; }
    public static RSTrace RenderingTracer { get; }
    public static RSTrace ViewerTracer { get; }
    public static RSTrace DataExtensionTracer { get; }
    public static RSTrace EmailExtensionTracer { get; }
    public static RSTrace ImageRendererTracer { get; }
    public static RSTrace ExcelRendererTracer { get; }
    public static RSTrace PreviewServerTracer { get; }
    public static RSTrace ReportPreviewTracer { get; }
    public static RSTrace UITracer { get; }
    public static RSTrace SMGTracer { get; }
    public static RSTrace SQETracer { get; }
    public static RSTrace AppDomainManagerTracer { get; }
    public static RSTrace HttpRuntimeTracer { get; }
    public TraceSwitch RSTraceSwitch { get; public set; }
    public bool TraceInfo { get; }
    public bool TraceError { get; }
    public bool TraceWarning { get; }
    public bool TraceVerbose { get; }
    internal static bool IsTraceInitialized { get; }
    internal string TraceFileName { get; }
    public bool BufferOutput { get; public set; }
    public string TraceDirectory { get; }
    internal RSTrace(string componentName);
    private static RSTrace();
    public static RSTrace get_CryptoTrace();
    public static RSTrace get_ResourceUtilTrace();
    public static RSTrace get_CatalogTrace();
    public static RSTrace get_ConfigManagerTracer();
    public static RSTrace get_WebServerTracer();
    public static RSTrace get_NtServiceTracer();
    public static RSTrace get_SessionTrace();
    public static RSTrace get_BufferedResponseTracer();
    public static RSTrace get_RunningRequestsTracer();
    public static RSTrace get_DbPollingTracer();
    public static RSTrace get_NotificationTracer();
    public static RSTrace get_ProviderTracer();
    public static RSTrace get_ScheduleTracer();
    public static RSTrace get_SubscriptionTracer();
    public static RSTrace get_SecurityTracer();
    public static RSTrace get_ServiceControllerTracer();
    public static RSTrace get_CleanupTracer();
    public static RSTrace get_CacheTracer();
    public static RSTrace get_ChunkTracer();
    public static RSTrace get_ExtensionFactoryTracer();
    public static RSTrace get_RunningJobsTrace();
    public static RSTrace get_ProcessingTracer();
    public static RSTrace get_RenderingTracer();
    public static RSTrace get_ViewerTracer();
    public static RSTrace get_DataExtensionTracer();
    public static RSTrace get_EmailExtensionTracer();
    public static RSTrace get_ImageRendererTracer();
    public static RSTrace get_ExcelRendererTracer();
    public static RSTrace get_PreviewServerTracer();
    public static RSTrace get_ReportPreviewTracer();
    public static RSTrace get_UITracer();
    public static RSTrace get_SMGTracer();
    public static RSTrace get_SQETracer();
    public static RSTrace get_AppDomainManagerTracer();
    public static RSTrace get_HttpRuntimeTracer();
    public TraceSwitch get_RSTraceSwitch();
    public void set_RSTraceSwitch(TraceSwitch value);
    public bool get_TraceInfo();
    public bool get_TraceError();
    public bool get_TraceWarning();
    public bool get_TraceVerbose();
    internal static bool get_IsTraceInitialized();
    internal string get_TraceFileName();
    public void Trace(string message);
    public void Trace(TraceLevel traceLevel, string message);
    public void TraceException(TraceLevel traceLevel, string message);
    public void Trace(string format, Object[] arg);
    public void Trace(TraceLevel traceLevel, string format, Object[] arg);
    public void TraceException(TraceLevel traceLevel, string format, Object[] arg);
    public void TraceWithNoEventLog(TraceLevel traceLevel, string format, Object[] arg);
    public void Assert(bool condition);
    public void Assert(bool condition, string message);
    public void Assert(bool condition, string message, Object[] args);
    [ConditionalAttribute("DEBUG")]
public void DebugAssert(bool condition);
    [ConditionalAttribute("DEBUG")]
public void DebugAssert(bool condition, string message);
    private void SetTraceLevel(string componentName);
    public bool IsTraceLevelEnabled(TraceLevel level);
    public bool get_BufferOutput();
    public void set_BufferOutput(bool value);
    public void ClearBuffer();
    public string get_TraceDirectory();
    public void WriteBuffer();
    public static void SetTrace(IRSTraceInternal trace);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ScheduleAlreadyExists : ReportCatalogException {
    public ScheduleAlreadyExists(string name);
    private ScheduleAlreadyExists(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ScheduleDateTimeRangeException : ReportCatalogException {
    private ScheduleDateTimeRangeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ScheduleNotFoundException : ReportCatalogException {
    public ScheduleNotFoundException(string idOrData);
    private ScheduleNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SchedulerNotRespondingException : ReportCatalogException {
    private SchedulerNotRespondingException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SecureConnectionRequiredException : ReportCatalogException {
    private SecureConnectionRequiredException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SecurityZoneNotSupportedException : ReportCatalogException {
    private SecurityZoneNotSupportedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SemanticQueryExtensionNotFoundException : ReportCatalogException {
    public SemanticQueryExtensionNotFoundException(string extension);
    private SemanticQueryExtensionNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ServerBusyException : ReportCatalogException {
    private ServerBusyException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.ServerConfigurationErrorException : ReportCatalogException {
    public ServerConfigurationErrorException(Exception innerException, string additionalTraceMessage);
    public ServerConfigurationErrorException(Exception innerException, string additionalTraceMessage, string additionalMessage);
    public ServerConfigurationErrorException(string additionalTraceMessage);
    private ServerConfigurationErrorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SharePointException : ReportCatalogException {
    public SharePointException(Exception innerException);
    private SharePointException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SharePointObjectModelNotInstalled : ReportCatalogException {
    public SharePointObjectModelNotInstalled(Exception sharePointObjectModelLoadException);
    private SharePointObjectModelNotInstalled(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SharePointPropertyDisabledException : ReportCatalogException {
    private SharePointPropertyDisabledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SharePointScheduleAlreadyExists : ReportCatalogException {
    public SharePointScheduleAlreadyExists(string name, string path);
    private SharePointScheduleAlreadyExists(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.StoredCredentialsOutOfSyncException : ReportCatalogException {
    public StoredCredentialsOutOfSyncException(string path);
    private StoredCredentialsOutOfSyncException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.StoredParameterNotFoundException : ReportCatalogException {
    public StoredParameterNotFoundException(string storedParameterId);
    private StoredParameterNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.StreamNotFoundException : ReportCatalogException {
    public StreamNotFoundException(string streamId);
    private StreamNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SubreportFromSnapshotException : ReportCatalogException {
    private SubreportFromSnapshotException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.SubscriptionNotFoundException : ReportCatalogException {
    public SubscriptionNotFoundException(string idOrData);
    private SubscriptionNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.TaskNotFoundException : ReportCatalogException {
    public TaskNotFoundException(string taskID);
    private TaskNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.UnknownEventTypeException : ReportCatalogException {
    public UnknownEventTypeException(string eventType);
    private UnknownEventTypeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.UnknownReportParameterException : ReportCatalogException {
    public UnknownReportParameterException(string parameterName);
    private UnknownReportParameterException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.UnknownUserNameException : ReportCatalogException {
    public UnknownUserNameException(string userName);
    private UnknownUserNameException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.VersionMismatchException : ReportCatalogException {
    private Guid m_reportID;
    private bool m_isPermanentSnapshot;
    public Guid ReportID { get; }
    public bool IsPermanentSnapshot { get; }
    protected bool TraceFullException { get; }
    public VersionMismatchException(Guid reportID, bool isPermanentSnapshot);
    private VersionMismatchException(SerializationInfo info, StreamingContext context);
    public Guid get_ReportID();
    public bool get_IsPermanentSnapshot();
    protected virtual bool get_TraceFullException();
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.WindowsIntegratedSecurityDisabledException : ReportCatalogException {
    private WindowsIntegratedSecurityDisabledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.Diagnostics.Utilities.WrongItemTypeException : ReportCatalogException {
    public WrongItemTypeException(string itemPath, string actualItemType, string parameterName);
    public WrongItemTypeException(string itemPath, string actualItemType);
    private WrongItemTypeException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.ReportingServices.Diagnostics.WebUtil : object {
    internal static string NormalizedLocalServerName;
    internal static bool IsWellKnowLocalServer(string server);
    internal static bool IsSameServer(IPAddress[] server1IPAddresses, IPAddress[] server2IPAddresses);
    internal static string NormalizeWellKnownLocalServerName(string server);
}
internal static class Microsoft.ReportingServices.Diagnostics.XmlUtil : object {
    public static void SafeOpenXmlDocumentFile(XmlDocument doc, string pathToXmlFile);
    public static void SafeOpenXmlDocumentString(XmlDocument doc, string xmlContent);
    public static XmlTextReader SafeCreateXmlTextReader(string xmlContent);
    public static XmlTextReader SafeCreateXmlTextReader(Stream xmlStream);
    public static NameValueCollection ShallowXmlToNameValueCollection(string xml, string topElementTag);
    public static NameValueCollection DeepXmlToNameValueCollection(string xml, string topElementTag, string eachElementTag, string nameElementTag, string valueElementTag);
    public static string NameValueCollectionToShallowXml(NameValueCollection parameters, string topElementTag);
    public static string NameValueCollectionToDeepXml(NameValueCollection parameters, string topElementTag, string eachElementTag, string nameElementTag, string valueElementTag);
    public static string EncodePropertyName(string name);
    public static string DecodePropertyName(string name);
}
internal interface Microsoft.ReportingServices.Extensions.ICatalogQuery {
    public abstract virtual void ExecuteNonQuery(string query, Hashtable parameters, CommandType type);
    public abstract virtual IDataReader ExecuteReader(string query, Hashtable parameters, CommandType type);
    public abstract virtual void Commit();
}
internal interface Microsoft.ReportingServices.Extensions.IEventHandler {
    public abstract virtual bool CanSubscribe(ICatalogQuery catalogQuery, string reportName);
    public abstract virtual void ValidateSubscriptionData(Subscription subscription, string subscriptionData, UserContext userContext);
    public abstract virtual void HandleEvent(ICatalogQuery catalogQuery, string eventType, string eventData);
    public abstract virtual void CleanUp(Subscription subscription);
}
internal abstract class Microsoft.ReportingServices.Extensions.Subscription : object {
    public Guid ID { get; }
    public UserContext Owner { get; }
    public Guid ReportID { get; }
    public string SubscriptionData { get; }
    public string EventType { get; }
    public string ReportName { get; }
    public abstract virtual Guid get_ID();
    public abstract virtual UserContext get_Owner();
    public abstract virtual Guid get_ReportID();
    public abstract virtual string get_SubscriptionData();
    public abstract virtual string get_EventType();
    public abstract virtual string get_ReportName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.AceCollection : CollectionBase {
    public AceStruct Item { get; }
    public int Add(AceStruct ace);
    public AceStruct get_Item(int index);
}
public class Microsoft.ReportingServices.Interfaces.AceStruct : object {
    public string PrincipalName;
    public CatalogOperationsCollection CatalogOperations;
    public ReportOperationsCollection ReportOperations;
    public FolderOperationsCollection FolderOperations;
    public ResourceOperationsCollection ResourceOperations;
    public DatasourceOperationsCollection DatasourceOperations;
    public ModelOperationsCollection ModelOperations;
    public ModelItemOperationsCollection ModelItemOperations;
    public AceStruct(string name);
    public AceStruct(AceStruct other);
}
public enum Microsoft.ReportingServices.Interfaces.AuthenticationType : Enum {
    public int value__;
    public static AuthenticationType None;
    public static AuthenticationType Windows;
    public static AuthenticationType Passport;
    public static AuthenticationType Forms;
    public static AuthenticationType SharePointTrustedUser;
}
public enum Microsoft.ReportingServices.Interfaces.CatalogOperation : Enum {
    public int value__;
    public static CatalogOperation CreateRoles;
    public static CatalogOperation DeleteRoles;
    public static CatalogOperation ReadRoleProperties;
    public static CatalogOperation UpdateRoleProperties;
    public static CatalogOperation ReadSystemProperties;
    public static CatalogOperation UpdateSystemProperties;
    public static CatalogOperation GenerateEvents;
    public static CatalogOperation ReadSystemSecurityPolicy;
    public static CatalogOperation UpdateSystemSecurityPolicy;
    public static CatalogOperation CreateSchedules;
    public static CatalogOperation DeleteSchedules;
    public static CatalogOperation ReadSchedules;
    public static CatalogOperation UpdateSchedules;
    public static CatalogOperation ListJobs;
    public static CatalogOperation CancelJobs;
    public static CatalogOperation ExecuteReportDefinition;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.CatalogOperationsCollection : CollectionBase {
    public CatalogOperation Item { get; }
    public int Add(CatalogOperation operation);
    public CatalogOperation get_Item(int index);
}
public class Microsoft.ReportingServices.Interfaces.CreateAndRegisterStream : MulticastDelegate {
    public CreateAndRegisterStream(object object, IntPtr method);
    public virtual Stream Invoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek, StreamOper operation);
    public virtual IAsyncResult BeginInvoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek, StreamOper operation, AsyncCallback callback, object object);
    public virtual Stream EndInvoke(IAsyncResult result);
}
public enum Microsoft.ReportingServices.Interfaces.DatasourceOperation : Enum {
    public int value__;
    public static DatasourceOperation Delete;
    public static DatasourceOperation ReadProperties;
    public static DatasourceOperation UpdateProperties;
    public static DatasourceOperation ReadContent;
    public static DatasourceOperation UpdateContent;
    public static DatasourceOperation ReadAuthorizationPolicy;
    public static DatasourceOperation UpdateDeleteAuthorizationPolicy;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.DatasourceOperationsCollection : CollectionBase {
    public DatasourceOperation Item { get; }
    public int Add(DatasourceOperation operation);
    public DatasourceOperation get_Item(int index);
}
public class Microsoft.ReportingServices.Interfaces.Extension : object {
    private string m_name;
    private string m_localizedName;
    private bool m_visible;
    public string Name { get; }
    public string LocalizedName { get; }
    public bool Visible { get; }
    public Extension(string name, string localizedName, bool visible);
    public string get_Name();
    public string get_LocalizedName();
    public bool get_Visible();
}
public enum Microsoft.ReportingServices.Interfaces.FolderOperation : Enum {
    public int value__;
    public static FolderOperation CreateFolder;
    public static FolderOperation Delete;
    public static FolderOperation ReadProperties;
    public static FolderOperation UpdateProperties;
    public static FolderOperation CreateReport;
    public static FolderOperation CreateResource;
    public static FolderOperation ReadAuthorizationPolicy;
    public static FolderOperation UpdateDeleteAuthorizationPolicy;
    public static FolderOperation CreateDatasource;
    public static FolderOperation CreateModel;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.FolderOperationsCollection : CollectionBase {
    public FolderOperation Item { get; }
    public int Add(FolderOperation operation);
    public FolderOperation get_Item(int index);
}
public interface Microsoft.ReportingServices.Interfaces.IAuthenticationExtension {
    public abstract virtual void GetUserInfo(IIdentity& userIdentity, IntPtr& userId);
    public abstract virtual bool LogonUser(string userName, string password, string authority);
    public abstract virtual bool IsValidPrincipalName(string principalName);
}
[CLSCompliantAttribute("False")]
public interface Microsoft.ReportingServices.Interfaces.IAuthorizationExtension {
    public abstract virtual Byte[] CreateSecurityDescriptor(AceCollection acl, SecurityItemType itemType, String& stringSecDesc);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, CatalogOperation requiredOperation);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, CatalogOperation[] requiredOperations);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, ReportOperation requiredOperation);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, FolderOperation requiredOperation);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, FolderOperation[] requiredOperations);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, ResourceOperation requiredOperation);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, ResourceOperation[] requiredOperations);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, DatasourceOperation requiredOperation);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, ModelOperation requiredOperation);
    public abstract virtual bool CheckAccess(string userName, IntPtr userToken, Byte[] secDesc, ModelItemOperation requiredOperation);
    public abstract virtual StringCollection GetPermissions(string userName, IntPtr userToken, SecurityItemType itemType, Byte[] secDesc);
}
public interface Microsoft.ReportingServices.Interfaces.IDeliveryExtension {
    public Setting[] ExtensionSettings { get; }
    unknown IDeliveryReportServerInformation ReportServerInformation {public set; }
    unknown bool IsPrivilegedUser {public set; }
    public abstract virtual bool Deliver(Notification notification);
    public abstract virtual Setting[] ValidateUserData(Setting[] settings);
    public abstract virtual Setting[] get_ExtensionSettings();
    public abstract virtual void set_ReportServerInformation(IDeliveryReportServerInformation value);
    public abstract virtual void set_IsPrivilegedUser(bool value);
}
public interface Microsoft.ReportingServices.Interfaces.IDeliveryReportServerInformation {
    public Extension[] RenderingExtension { get; }
    public Setting[] ServerSettings { get; }
    public abstract virtual Extension[] get_RenderingExtension();
    public abstract virtual Setting[] get_ServerSettings();
}
public interface Microsoft.ReportingServices.Interfaces.IExtension {
    public string LocalizedName { get; }
    public abstract virtual void SetConfiguration(string configuration);
    public abstract virtual string get_LocalizedName();
}
public interface Microsoft.ReportingServices.Interfaces.IParameter {
    public string Name { get; }
    public bool IsMultiValue { get; }
    public Object[] Values { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsMultiValue();
    public abstract virtual Object[] get_Values();
}
public interface Microsoft.ReportingServices.Interfaces.IRenderStream {
    public abstract virtual void Finish();
}
public interface Microsoft.ReportingServices.Interfaces.IReportContext {
    public string ReportName { get; }
    public string ReportPath { get; }
    public bool IsLinkedReport { get; }
    public string LinkedReportTargetName { get; }
    public string LinkedReportTargetPath { get; }
    public bool IsSubreport { get; }
    public string ParentReportName { get; }
    public string ParentReportPath { get; }
    public IDictionary`2<string, IParameter> QueryParameters { get; }
    public abstract virtual string get_ReportName();
    public abstract virtual string get_ReportPath();
    public abstract virtual bool get_IsLinkedReport();
    public abstract virtual string get_LinkedReportTargetName();
    public abstract virtual string get_LinkedReportTargetPath();
    public abstract virtual bool get_IsSubreport();
    public abstract virtual string get_ParentReportName();
    public abstract virtual string get_ParentReportPath();
    public abstract virtual IDictionary`2<string, IParameter> get_QueryParameters();
}
public interface Microsoft.ReportingServices.Interfaces.IReportDefinitionCustomizationExtension {
    public abstract virtual bool ProcessReportDefinition(Byte[] reportDefinition, IReportContext reportContext, IUserContext userContext, Byte[]& reportDefinitionProcessed, IEnumerable`1& customizedElementIds);
}
public interface Microsoft.ReportingServices.Interfaces.ISemanticModelGenerator {
    public abstract virtual void Generate(IDbConnection connection, XmlWriter newModelWriter);
    public abstract virtual void ReGenerateModel(IDbConnection connection, XmlReader currentModelReader, XmlWriter newModelWriter);
}
public interface Microsoft.ReportingServices.Interfaces.ISubscriptionBaseUIUserControl {
    public Setting[] UserData { get; public set; }
    public string Description { get; }
    unknown IDeliveryReportServerInformation ReportServerInformation {public set; }
    unknown bool IsPrivilegedUser {public set; }
    public abstract virtual bool Validate();
    public abstract virtual Setting[] get_UserData();
    public abstract virtual void set_UserData(Setting[] value);
    public abstract virtual string get_Description();
    public abstract virtual void set_ReportServerInformation(IDeliveryReportServerInformation value);
    public abstract virtual void set_IsPrivilegedUser(bool value);
}
public interface Microsoft.ReportingServices.Interfaces.IUserContext {
    public string UserName { get; }
    public object Token { get; }
    public AuthenticationType AuthenticationType { get; }
    public abstract virtual string get_UserName();
    public abstract virtual object get_Token();
    public abstract virtual AuthenticationType get_AuthenticationType();
}
public interface Microsoft.ReportingServices.Interfaces.IWindowsAuthenticationExtension {
    public abstract virtual Byte[] PrincipalNameToSid(string name);
    public abstract virtual string SidToPrincipalName(Byte[] sid);
}
[AttributeUsageAttribute("32767")]
public class Microsoft.ReportingServices.Interfaces.LocalizedNameAttribute : Attribute {
    private string m_name;
    private bool m_localized;
    public string Name { get; }
    public LocalizedNameAttribute(string name);
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual string GetLocalizedString(string value);
}
public enum Microsoft.ReportingServices.Interfaces.ModelItemOperation : Enum {
    public int value__;
    public static ModelItemOperation ReadProperties;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.ModelItemOperationsCollection : CollectionBase {
    public ModelItemOperation Item { get; }
    public int Add(ModelItemOperation operation);
    public ModelItemOperation get_Item(int index);
}
public enum Microsoft.ReportingServices.Interfaces.ModelOperation : Enum {
    public int value__;
    public static ModelOperation Delete;
    public static ModelOperation ReadProperties;
    public static ModelOperation UpdateProperties;
    public static ModelOperation ReadDatasource;
    public static ModelOperation UpdateDatasource;
    public static ModelOperation ReadContent;
    public static ModelOperation UpdateContent;
    public static ModelOperation ReadAuthorizationPolicy;
    public static ModelOperation UpdateDeleteAuthorizationPolicy;
    public static ModelOperation ReadModelItemAuthorizationPolicies;
    public static ModelOperation UpdateModelItemAuthorizationPolicies;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.ModelOperationsCollection : CollectionBase {
    public ModelOperation Item { get; }
    public int Add(ModelOperation operation);
    public ModelOperation get_Item(int index);
}
public abstract class Microsoft.ReportingServices.Interfaces.Notification : object {
    public Report Report { get; }
    public string Owner { get; }
    public Setting[] UserData { get; }
    public int Attempt { get; }
    public int MaxNumberOfRetries { get; }
    unknown string Status {public set; }
    public bool Retry { get; public set; }
    public abstract virtual Report get_Report();
    public abstract virtual string get_Owner();
    public abstract virtual Setting[] get_UserData();
    public abstract virtual int get_Attempt();
    public abstract virtual int get_MaxNumberOfRetries();
    public abstract virtual void set_Status(string value);
    public abstract virtual void Save();
    public abstract virtual bool get_Retry();
    public abstract virtual void set_Retry(bool value);
}
public class Microsoft.ReportingServices.Interfaces.OperationNames : object {
    public static string OperManageSharedSchedules;
    public static string OperCreateRoles;
    public static string OperDeleteRoles;
    public static string OperReadRoleProperties;
    public static string OperUpdateRoleProperties;
    public static string OperReadSystemProperties;
    public static string OperUpdateSystemProperties;
    public static string OperGenerateEvents;
    public static string OperReadSystemSecurityPolicy;
    public static string OperUpdateSystemSecurityPolicy;
    public static string OperCreateSchedules;
    public static string OperDeleteSchedules;
    public static string OperReadSchedules;
    public static string OperUpdateSchedules;
    public static string OperListJobs;
    public static string OperCancelJobs;
    public static string ExecuteReportDefinition;
    public static string OperCreateFolder;
    public static string OperDelete;
    public static string OperReadProperties;
    public static string OperUpdateProperties;
    public static string OperCreateReport;
    public static string OperCreateResource;
    public static string OperReadAuthorizationPolicy;
    public static string OperUpdateDeleteAuthorizationPolicy;
    public static string OperCreateDatasource;
    public static string OperCreateModel;
    public static string OperReadParameters;
    public static string OperUpdateParameters;
    public static string OperReadDatasources;
    public static string OperUpdateDatasources;
    public static string OperReadReportDefinition;
    public static string OperUpdateReportDefinition;
    public static string OperCreateSubscription;
    public static string OperDeleteSubscription;
    public static string OperReadSubscription;
    public static string OperUpdateSubscription;
    public static string OperCreateAnySubscription;
    public static string OperDeleteAnySubscription;
    public static string OperReadAnySubscription;
    public static string OperUpdateAnySubscription;
    public static string OperUpdatePolicy;
    public static string OperReadPolicy;
    public static string OperDeleteHistory;
    public static string OperListHistory;
    public static string OperExecuteAndView;
    public static string OperCreateSnapshot;
    public static string OperExecute;
    public static string OperCreateLink;
    public static string OperReadContent;
    public static string OperUpdateContent;
    public static string OperReadModelItemSecurityPolicies;
    public static string OperUpdateModelItemSecurityPolicies;
}
public enum Microsoft.ReportingServices.Interfaces.RdceCustomizableElementId : Enum {
    public int value__;
    public static RdceCustomizableElementId Body;
    public static RdceCustomizableElementId PageHeader;
    public static RdceCustomizableElementId PageFooter;
    public static RdceCustomizableElementId Page;
    public static RdceCustomizableElementId DataSets;
}
public abstract class Microsoft.ReportingServices.Interfaces.RenderedOutputFile : object {
    public string FileName { get; }
    public string Type { get; }
    public Stream Data { get; }
    public string Extension { get; }
    public Encoding Encoding { get; }
    public abstract virtual string get_FileName();
    public abstract virtual string get_Type();
    public abstract virtual Stream get_Data();
    public abstract virtual string get_Extension();
    public abstract virtual Encoding get_Encoding();
}
public abstract class Microsoft.ReportingServices.Interfaces.Report : object {
    public string Name { get; }
    public string URL { get; }
    public DateTime Date { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_URL();
    public abstract virtual DateTime get_Date();
    public abstract virtual RenderedOutputFile[] Render(string renderFormat, string deviceInfo);
}
public enum Microsoft.ReportingServices.Interfaces.ReportOperation : Enum {
    public int value__;
    public static ReportOperation Delete;
    public static ReportOperation ExecuteAndView;
    public static ReportOperation ReadProperties;
    public static ReportOperation UpdateProperties;
    public static ReportOperation UpdateParameters;
    public static ReportOperation ReadDatasource;
    public static ReportOperation UpdateDatasource;
    public static ReportOperation ReadReportDefinition;
    public static ReportOperation UpdateReportDefinition;
    public static ReportOperation CreateSubscription;
    public static ReportOperation DeleteSubscription;
    public static ReportOperation ReadSubscription;
    public static ReportOperation ReadAuthorizationPolicy;
    public static ReportOperation UpdateDeleteAuthorizationPolicy;
    public static ReportOperation UpdateSubscription;
    public static ReportOperation CreateAnySubscription;
    public static ReportOperation DeleteAnySubscription;
    public static ReportOperation ReadAnySubscription;
    public static ReportOperation UpdateAnySubscription;
    public static ReportOperation UpdatePolicy;
    public static ReportOperation ReadPolicy;
    public static ReportOperation DeleteHistory;
    public static ReportOperation ListHistory;
    public static ReportOperation CreateResource;
    public static ReportOperation CreateSnapshot;
    public static ReportOperation Execute;
    public static ReportOperation CreateLink;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.ReportOperationsCollection : CollectionBase {
    public ReportOperation Item { get; }
    public int Add(ReportOperation operation);
    public ReportOperation get_Item(int index);
}
public enum Microsoft.ReportingServices.Interfaces.ResourceOperation : Enum {
    public int value__;
    public static ResourceOperation Delete;
    public static ResourceOperation ReadProperties;
    public static ResourceOperation UpdateProperties;
    public static ResourceOperation ReadContent;
    public static ResourceOperation UpdateContent;
    public static ResourceOperation ReadAuthorizationPolicy;
    public static ResourceOperation UpdateDeleteAuthorizationPolicy;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ReportingServices.Interfaces.ResourceOperationsCollection : CollectionBase {
    public ResourceOperation Item { get; }
    public int Add(ResourceOperation operation);
    public ResourceOperation get_Item(int index);
}
public enum Microsoft.ReportingServices.Interfaces.SecurityItemType : Enum {
    public int value__;
    public static SecurityItemType Unknown;
    public static SecurityItemType Catalog;
    public static SecurityItemType Folder;
    public static SecurityItemType Report;
    public static SecurityItemType Resource;
    public static SecurityItemType Datasource;
    public static SecurityItemType Model;
    public static SecurityItemType ModelItem;
}
public class Microsoft.ReportingServices.Interfaces.Setting : object {
    private string m_name;
    private string m_displayName;
    private string m_value;
    private bool m_required;
    private bool m_readOnly;
    private string m_field;
    private string m_error;
    private bool m_encrypted;
    private bool m_isPassword;
    private ArrayList m_validValues;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Value { get; public set; }
    public bool Required { get; public set; }
    public bool ReadOnly { get; public set; }
    public string Field { get; public set; }
    public string Error { get; public set; }
    public ValidValue[] ValidValues { get; public set; }
    public bool Encrypted { get; public set; }
    public bool IsPassword { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Value();
    public void set_Value(string value);
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_Field();
    public void set_Field(string value);
    public string get_Error();
    public void set_Error(string value);
    public ValidValue[] get_ValidValues();
    public void set_ValidValues(ValidValue[] value);
    public void AddValidValue(ValidValue val);
    public void AddValidValue(string label, string val);
    public bool get_Encrypted();
    public void set_Encrypted(bool value);
    public bool get_IsPassword();
    public void set_IsPassword(bool value);
}
public enum Microsoft.ReportingServices.Interfaces.StreamOper : Enum {
    public int value__;
    public static StreamOper CreateAndRegister;
    public static StreamOper CreateOnly;
    public static StreamOper RegisterOnly;
}
public class Microsoft.ReportingServices.Interfaces.ValidValue : object {
    private string m_value;
    private string m_label;
    public string Value { get; public set; }
    public string Label { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public string get_Label();
    public void set_Label(string value);
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.Library.ChunkFlags : Enum {
    public int value__;
    public static ChunkFlags None;
    public static ChunkFlags Compressed;
    public static ChunkFlags FileSystem;
    public static ChunkFlags CrossDatabaseSharing;
}
internal class Microsoft.ReportingServices.Library.ChunkHeader : object {
    internal static short MissingVersion;
    internal static short CurrentVersion;
    private ChunkFlags m_chunkFlags;
    private int m_chunkType;
    private string m_chunkName;
    private string m_mimeType;
    private long m_chunkSize;
    private short m_version;
    internal string MimeType { get; }
    internal string ChunkName { get; internal set; }
    internal int ChunkType { get; }
    internal ChunkFlags ChunkFlag { get; }
    internal long ChunkSize { get; }
    internal short Version { get; }
    internal ChunkHeader(string chunkName, int chunkType, ChunkFlags chunkFlag, string mimeType, short version, long chunkSize);
    internal ChunkHeader(ChunkHeader baseHeader);
    private static ChunkHeader();
    internal string get_MimeType();
    internal string get_ChunkName();
    internal void set_ChunkName(string value);
    internal int get_ChunkType();
    internal ChunkFlags get_ChunkFlag();
    internal long get_ChunkSize();
    internal short get_Version();
}
internal class Microsoft.ReportingServices.Library.ChunkMemoryStream : MemoryStream {
    public bool CanBeClosed;
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.ReportingServices.Library.ControlSnapshot : SnapshotBase {
    private IList`1<Chunk> m_allChunks;
    public ReportProcessingFlags ReportProcessingFlags { get; }
    public sealed virtual void Dispose();
    public virtual SnapshotBase Duplicate();
    private void CopyAllChunksTo(ControlSnapshot target);
    public virtual void PrepareExecutionSnapshot(SnapshotBase target, string compiledDefinitionChunkName);
    [ObsoleteAttribute("Use PrepareExecutionSnapshot instead")]
public virtual void CopyImageChunksTo(SnapshotBase target);
    public virtual void DeleteSnapshotAndChunks();
    public virtual Stream GetChunk(string name, ReportChunkTypes type, String& mimeType);
    public virtual string GetStreamMimeType(string name, ReportChunkTypes type);
    public virtual Stream CreateChunk(string name, ReportChunkTypes type, string mimeType);
    public sealed virtual Stream GetChunk(string chunkName, ReportChunkTypes chunkType, ChunkMode chunkMode, String& mimeType);
    public sealed virtual bool Erase(string chunkName, ReportChunkTypes type);
    public sealed virtual ReportProcessingFlags get_ReportProcessingFlags();
    private Chunk GetChunkImpl(string name, ReportChunkTypes type);
}
internal interface Microsoft.ReportingServices.Library.IHasMimeType {
    public string MimeType { get; }
    public abstract virtual string get_MimeType();
}
internal abstract class Microsoft.ReportingServices.Library.SnapshotBase : object {
    private Guid m_snapshotDataID;
    private bool m_isPermanentSnapshot;
    internal Guid SnapshotDataID { get; }
    internal bool IsPermanentSnapshot { get; }
    protected SnapshotBase(Guid snapshotDataID, bool isPermanentSnapshot);
    protected SnapshotBase(bool isPermanentSnapshot);
    protected SnapshotBase(SnapshotBase snapshotDataToCopy);
    public abstract virtual SnapshotBase Duplicate();
    [ObsoleteAttribute("Use PrepareExecutionSnapshot instead")]
public abstract virtual void CopyImageChunksTo(SnapshotBase target);
    public abstract virtual void PrepareExecutionSnapshot(SnapshotBase target, string compiledDefinitionChunkName);
    public abstract virtual Stream GetChunk(string name, ReportChunkTypes type, String& mimeType);
    public abstract virtual string GetStreamMimeType(string name, ReportChunkTypes type);
    public abstract virtual Stream CreateChunk(string name, ReportChunkTypes type, string mimeType);
    public abstract virtual void DeleteSnapshotAndChunks();
    internal virtual void UpdatePerfData(Stream chunk);
    internal virtual void WritePerfData();
    internal Guid get_SnapshotDataID();
    internal bool get_IsPermanentSnapshot();
}
internal enum Microsoft.ReportingServices.OnDemandProcessing.DataProcessingMode : Enum {
    public int value__;
    public static DataProcessingMode ParameterProcessing;
    public static DataProcessingMode ReportDataPreFetch;
    public static DataProcessingMode DepthFirstTablix;
    public static DataProcessingMode Progressive;
}
internal class Microsoft.ReportingServices.OnDemandProcessing.ExecutionLogContext : object {
    private static int RootScaleCacheInfoId;
    public static string ExecutionLogScaleTimeCategory;
    public static string ExecutionLogMemoryUsageCategory;
    private long m_dataProcessingDurationMs;
    private long m_onDemandProcessingDurationMs;
    private long m_processingScalabilityDurationMs;
    private long m_peakGroupTreeMemoryUsageKB;
    private long m_reportRenderingDurationMs;
    private Timer m_reportProcessingTimer;
    private Timer m_reportRenderingTimer;
    private Stack`1<ScaleCacheInfo> m_activeScaleCaches;
    internal Timer ReportProcessingTimer { get; internal set; }
    internal long DataProcessingDurationMs { get; internal set; }
    internal long OnDemandProcessingDurationMs { get; internal set; }
    internal long ProcessingScalabilityDurationMs { get; internal set; }
    internal long PeakTablixProcessingMemoryUsageKB { get; }
    internal long PeakGroupTreeMemoryUsageKB { get; internal set; }
    internal long ReportRenderingDurationMs { get; }
    internal Timer get_ReportProcessingTimer();
    internal void set_ReportProcessingTimer(Timer value);
    internal long get_DataProcessingDurationMs();
    internal void set_DataProcessingDurationMs(long value);
    internal long get_OnDemandProcessingDurationMs();
    internal void set_OnDemandProcessingDurationMs(long value);
    internal long get_ProcessingScalabilityDurationMs();
    internal void set_ProcessingScalabilityDurationMs(long value);
    internal long get_PeakTablixProcessingMemoryUsageKB();
    internal long get_PeakGroupTreeMemoryUsageKB();
    internal void set_PeakGroupTreeMemoryUsageKB(long value);
    internal long get_ReportRenderingDurationMs();
    internal void StartProcessingTimer(IJobContext jobContext);
    internal void StartRenderingTimer(IJobContext jobContext);
    internal void StopRenderingTimer();
    internal void RegisterTablixProcessingScaleCache(int reportId);
    internal void UnRegisterTablixProcessingScaleCache(int reportId, IScalabilityCache tablixProcessingCache);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Filters : object {
    private FilterTypes m_filterType;
    private IReference`1<IFilterOwner> m_owner;
    private IFilterOwner m_ownerObj;
    private List`1<Filter> m_filters;
    private ObjectType m_objectType;
    private string m_objectName;
    private OnDemandProcessingContext m_processingContext;
    private int m_startFilterIndex;
    private int m_currentSpecialFilterIndex;
    private FilterInfo m_filterInfo;
    private bool m_failFilters;
    private int m_scalabilityPriority;
    private int m_id;
    unknown bool FailFilters {internal set; }
    private int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.ID { get; }
    internal Filters(FilterTypes filterType, IReference`1<IFilterOwner> owner, List`1<Filter> filters, ObjectType objectType, string objectName, OnDemandProcessingContext processingContext, int scalabilityPriority);
    internal Filters(FilterTypes filterType, RuntimeParameterDataSet owner, List`1<Filter> filters, ObjectType objectType, string objectName, OnDemandProcessingContext processingContext, int scalabilityPriority);
    private Filters(FilterTypes filterType, List`1<Filter> filters, ObjectType objectType, string objectName, OnDemandProcessingContext processingContext, int scalabilityPriority);
    internal void set_FailFilters(bool value);
    internal bool PassFilters(object dataInstance);
    private void ThrowIfErrorOccurred(string propertyName, bool errorOccurred, DataFieldStatus fieldStatus);
    internal bool PassFilters(object dataInstance, Boolean& specialFilter);
    internal void FinishReadingRows();
    private ProcessingMessageList RegisterComparisonError();
    private ProcessingMessageList RegisterComparisonError(ReportProcessingException_ComparisonError e);
    private void TrimInstanceSet(FilterInfo filterInfo);
    private object EvaluateFilterValue(Filter filterDef);
    private Object[] EvaluateFilterValues(Filter filterDef);
    private void SortAndSave(object key, object dataInstance);
    private void InitFilterInfos(MySortedList dataInstanceList, int currentFilterIndex);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.get_ID();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.SetID(int id);
    private sealed virtual override ObjectType Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.GetObjectType();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.GroupTreePartition : object {
    private List`1<IReference`1<ScopeInstance>> m_topLevelScopeInstances;
    private static Declaration m_Declaration;
    internal bool IsEmpty { get; }
    internal List`1<IReference`1<ScopeInstance>> TopLevelScopeInstances { get; }
    private static GroupTreePartition();
    internal bool get_IsEmpty();
    internal List`1<IReference`1<ScopeInstance>> get_TopLevelScopeInstances();
    internal void AddTopLevelScopeInstance(IReference`1<ScopeInstance> instance);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.IInternalProcessingContext {
    public ErrorContext ErrorContext { get; }
    public bool SnapshotProcessing { get; public set; }
    public DateTime ExecutionTime { get; }
    public bool EnableDataBackedParameters { get; }
    public abstract virtual ErrorContext get_ErrorContext();
    public abstract virtual bool get_SnapshotProcessing();
    public abstract virtual void set_SnapshotProcessing(bool value);
    public abstract virtual DateTime get_ExecutionTime();
    public abstract virtual bool get_EnableDataBackedParameters();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.LegacyProcessReportParameters : ProcessReportParameters {
    private Report m_report;
    private RuntimeDataSourceNode m_runtimeDataSourceNode;
    internal LegacyProcessReportParameters(Report aReport, ReportProcessingContext aContext);
    internal ReportProcessingContext GetLegacyContext();
    internal virtual IParameterDef GetParameterDef(int aParamIndex);
    internal virtual void InitReportParametersContext(ParameterInfoCollection parameters);
    internal virtual void Cleanup();
    internal virtual void AddToRuntime(ParameterInfo aParamInfo);
    internal virtual void SetupExprHost(IParameterDef aParamDef);
    internal virtual string EvaluatePromptExpr(ParameterInfo aParamInfo, IParameterDef aParamDef);
    internal virtual object EvaluateDefaultValueExpr(IParameterDef aParamDef, int aIndex);
    internal virtual object EvaluateValidValueExpr(IParameterDef aParamDef, int aIndex);
    internal virtual object EvaluateValidValueLabelExpr(IParameterDef aParamDef, int aIndex);
    internal virtual bool NeedPrompt(IParameterDataSource paramDS);
    internal virtual void ThrowException(ReportProcessingException_FieldError aError, string aParamName, int aDataSourceIndex, int aDataSetIndex, int aFieldIndex);
    internal virtual ReportParameterDataSetCache ProcessReportParameterDataSet(ParameterInfo aParam, IParameterDef aParamDef, IParameterDataSource paramDS, bool aRetrieveValidValues, bool aRetrievalDefaultValues);
    private void AbortHandler(object sender, EventArgs e);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.LegacyReportParameterDataSetCache : ReportParameterDataSetCache {
    internal LegacyReportParameterDataSetCache(ProcessReportParameters aParamProcessor, ParameterInfo aParameter, ParameterDef aParamDef, bool aProcessValidValues, bool aProcessDefaultValues);
    internal virtual object GetFieldValue(object aRow, int col);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Merge : object {
    private Report m_report;
    private OnDemandProcessingContext m_odpContext;
    private RetrievalManager m_retrievalManager;
    private string m_reportLanguage;
    private bool m_initialized;
    private ParameterInfoCollection m_parameters;
    internal string ReportLanguage { get; }
    internal Merge(Report report, OnDemandProcessingContext odpContext);
    internal string get_ReportLanguage();
    internal void Init(bool includeParameters, bool parametersOnly);
    internal void Init(ParameterInfoCollection parameters);
    internal void EvaluateReportLanguage(ReportInstance reportInstance, string snapshotLanguage);
    private static CultureInfo GetSpecificCultureInfoFromLanguage(string language);
    internal void FetchData(ReportInstance reportInstance, bool mergeTransaction);
    internal ReportInstance PrepareReportInstance(IReportInstanceContainer reportInstanceContainer);
    internal void SetupReport(ReportInstance reportInstance);
    internal bool InitAndSetupSubReport(SubReport subReport);
    private bool InitSubReport(SubReport subReport, IReference`1<SubReportInstance> subReportInstanceRef);
    internal bool FetchSubReportData(SubReport subReport, SubReportInstance subReportInstance);
    internal static void TablixDataProcessing(OnDemandProcessingContext odpContext, DataSet specificDataSetOnly, DataProcessingMode mode);
    private static void InternalTablixDataProcessingOneDataset(OnDemandProcessingContext odpContext, DataSet specificDataSetOnly, DataProcessingMode mode);
    internal static void GenerateGroupTree(OnDemandProcessingContext odpContext, RuntimeOnDemandDataSet singleReportDataSetNode, DataProcessingMode mode);
    private static void CreateInstances(OnDemandProcessingContext odpContext, RuntimeOnDemandDataSet singleReportDataSetNode, DataProcessingMode mode);
    internal static bool PreProcessTablixes(Report report, OnDemandProcessingContext odpContext, bool onlyWithSubReports);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.NullRenderer : object {
    private OnDemandProcessingContext m_odpContext;
    private DocumentMapWriter m_docMapWriter;
    private Stream m_docMapStream;
    private bool m_generateDocMap;
    private bool m_createSnapshot;
    private Report m_report;
    internal Stream DocumentMapStream { get; }
    internal void Process(Report report, OnDemandProcessingContext odpContext, bool generateDocumentMap, bool createSnapshot);
    internal void Visit(ReportItemCollection itemCollection);
    internal void Visit(ReportItem item);
    private void GenerateSimpleReportItemDocumentMap(ReportItem item);
    private void VisitRectangle(Rectangle rectangleDef);
    private void VisitSubReport(SubReport subreportDef);
    private void VisitTablix(Tablix tablixDef);
    private void VisitTablixMemberCollection(TablixMemberCollection memberCollection, int rowMemberIndex, bool isTopLevel);
    private void VisitTablixMember(TablixMember memberDef, int rowMemberIndex, Stack`1<int> openRecursiveLevels);
    private void VisitStyle(Style style);
    private bool ProcessVisibilityAndContinue(Visibility aVisibility, VisibilityInstance aVisibilityInstance, TablixMember memberDef);
    private void InitWriter();
    private void WriteDocumentMapNode(string aLabel, string aId);
    private void WriteDocumentMapBeginContainer(string aLabel, string aId);
    private void WriteDocumentMapEndContainer();
    internal Stream get_DocumentMapStream();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.OnDemandMetadata : object {
    private Dictionary`2<string, SubReportInfo> m_subReportInfoMap;
    private Dictionary`2<string, CommonSubReportInfo> m_commonSubReportInfoMap;
    private ReportSnapshot m_reportSnapshot;
    private List`1<long> m_groupTreePartitionOffsets;
    private Dictionary`2<string, DataSetInstance> m_dataChunkMap;
    private Dictionary`2<string, Boolean[]> m_tablixProcessingComplete;
    private Dictionary`2<string, ImageInfo> m_cachedExternalImages;
    private string m_transparentImageChunkName;
    private long m_groupTreeRootOffset;
    private IReference`1<ReportInstance> m_reportInstance;
    private OnDemandProcessingManager m_odpChunkManager;
    private Report m_report;
    private bool m_isInitialProcessingRequest;
    private bool m_groupTreeChanged;
    private bool m_metaDataChanged;
    private List`1<OnDemandProcessingContext> m_odpContexts;
    private GroupTreeScalabilityCache m_groupTreeScalabilityCache;
    private GlobalIDOwnerCollection m_globalIDOwnerCollection;
    private static long EmptyGroupTreePartitionOffset;
    private static Declaration m_Declaration;
    internal bool IsInitialProcessingRequest { get; }
    internal bool GroupTreeHasChanged { get; internal set; }
    internal bool SnapshotHasChanged { get; }
    internal bool MetadataHasChanged { get; internal set; }
    internal Report Report { get; internal set; }
    public IReference`1<ReportInstance> ReportInstance { get; public set; }
    internal ReportSnapshot ReportSnapshot { get; internal set; }
    internal Dictionary`2<string, DataSetInstance> DataChunkMap { get; }
    internal OnDemandProcessingManager OdpChunkManager { get; internal set; }
    internal List`1<OnDemandProcessingContext> OdpContexts { get; }
    internal string TransparentImageChunkName { get; internal set; }
    internal GroupTreeScalabilityCache GroupTreeScalabilityCache { get; internal set; }
    internal GlobalIDOwnerCollection GlobalIDOwnerCollection { get; internal set; }
    internal long GroupTreeRootOffset { get; internal set; }
    internal OnDemandMetadata(Report report);
    internal OnDemandMetadata(OnDemandMetadata metadataFromOldSnapshot, Report report);
    private static OnDemandMetadata();
    internal bool get_IsInitialProcessingRequest();
    internal bool get_GroupTreeHasChanged();
    internal void set_GroupTreeHasChanged(bool value);
    internal bool get_SnapshotHasChanged();
    internal bool get_MetadataHasChanged();
    internal void set_MetadataHasChanged(bool value);
    internal Report get_Report();
    internal void set_Report(Report value);
    public sealed virtual IReference`1<ReportInstance> get_ReportInstance();
    public void set_ReportInstance(IReference`1<ReportInstance> value);
    public sealed virtual IReference`1<ReportInstance> SetReportInstance(ReportInstance reportInstance, OnDemandMetadata odpMetadata);
    internal ReportSnapshot get_ReportSnapshot();
    internal void set_ReportSnapshot(ReportSnapshot value);
    internal Dictionary`2<string, DataSetInstance> get_DataChunkMap();
    internal OnDemandProcessingManager get_OdpChunkManager();
    internal void set_OdpChunkManager(OnDemandProcessingManager value);
    internal List`1<OnDemandProcessingContext> get_OdpContexts();
    internal string get_TransparentImageChunkName();
    internal void set_TransparentImageChunkName(string value);
    internal GroupTreeScalabilityCache get_GroupTreeScalabilityCache();
    internal void set_GroupTreeScalabilityCache(GroupTreeScalabilityCache value);
    internal GlobalIDOwnerCollection get_GlobalIDOwnerCollection();
    internal void set_GlobalIDOwnerCollection(GlobalIDOwnerCollection value);
    internal long get_GroupTreeRootOffset();
    internal void set_GroupTreeRootOffset(long value);
    private void CommonPrepareForReprocessing();
    internal void PrepareForCachedDataProcessing(OnDemandMetadata odpMetadata);
    internal bool IsTablixProcessingComplete(OnDemandProcessingContext odpContext, int dataSetIndexInCollection);
    internal void SetTablixProcessingComplete(OnDemandProcessingContext odpContext, int dataSetIndexInCollection, bool value);
    private string GetUniqueIdFromContext(OnDemandProcessingContext odpContext);
    internal void DisposeGroupTreeScalability();
    internal ReferenceID AllocateNewGroupTreePartition();
    internal void UpdateGroupTreePartitionOffset(ReferenceID id, long offset);
    internal long GetGroupTreePartitionOffset(ReferenceID id);
    private int GetPartitionIndex(ReferenceID id);
    internal SubReportInfo AddSubReportInfo(bool isTopLevelSubreport, string definitionPath, string reportPath, string originalCatalogReportPath);
    private CommonSubReportInfo GetOrCreateCommonSubReportInfo(string reportPath, Boolean& created);
    internal bool TryGetSubReportInfo(bool isTopLevelSubreport, string definitionPath, string reportPath, SubReportInfo& subReportInfo);
    internal SubReportInfo GetSubReportInfo(bool isTopLevelSubreport, string definitionPath, string reportPath);
    internal void AddDataChunk(string dataSetChunkName, DataSetInstance dataSetInstance);
    internal void AddExternalImage(string value, ImageInfo imageInfo);
    internal bool TryGetExternalImage(string value, ImageInfo& imageInfo);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.OnDemandProcessingContext : object {
    private OnDemandProcessingContext m_parentContext;
    private OnDemandProcessingContext m_topLevelContext;
    private CommonInfo m_commonInfo;
    private ICatalogItemContext m_reportContext;
    private ObjectModelImpl m_reportObjectModel;
    private bool m_reportItemsReferenced;
    private bool m_reportItemThisDotValueReferenced;
    private DataSourceInfoHashtable m_globalDataSourceInfo;
    private Dictionary`2<string, ImageInfo> m_embeddedImages;
    private ErrorContext m_errorContext;
    private bool m_processReportParameters;
    private ReportRuntime m_reportRuntime;
    private AbortHelper m_abortInfo;
    private ParameterInfoCollection m_reportParameters;
    private IJobContext m_jobContext;
    private IExtensionFactory m_extFactory;
    private IDataProtection m_dataProtection;
    private CultureInfo m_threadCulture;
    private UInt32 m_languageInstanceId;
    private string m_transparentImageGuid;
    private CompareInfo m_compareInfo;
    private CompareOptions m_clrCompareOptions;
    private bool m_inSubreport;
    private bool m_inSubreportInDataRegion;
    private bool m_isTablixProcessingMode;
    private Dictionary`2<string, DataAggregateInfo> m_reportAggregates;
    private RuntimeDataSourceInfoCollection m_dataSourceInfos;
    private IProcessingDataExtensionConnection m_createAndSetupDataExtensionFunction;
    private bool m_errorSavingSnapshotData;
    private IReportScopeInstance m_lastROMInstance;
    private IInstancePath m_lastRIFObject;
    private IRIFReportScope m_lastTablixProcessingReportScope;
    private List`1<InstancePathItem> m_lastInstancePath;
    private List`1<PairObj`2<string, object>> m_specialLastGroupingValues;
    private bool m_lastInScopeResult;
    private int m_lastRecursiveLevel;
    private Report m_reportDefinition;
    private OnDemandMetadata m_odpMetadata;
    private ReportInstance m_currentReportInstance;
    private DataSetInstance m_currentDataSetInstance;
    private int m_currentDataSetIndex;
    private List`1<object> m_groupExprValues;
    private bool m_peerOuterGroupProcessing;
    private string m_subReportInstanceUniqueName;
    private bool m_isSubReportInstanceShared;
    private string m_subReportDataChunkNameModifier;
    private SubReportInfo m_subReportInfo;
    private bool m_specialRecursiveAggregates;
    private SecondPassOperations m_secondPassOperation;
    private List`1<Filters> m_specialDataRegionFilters;
    private List`1<IReference`1<IDataRowSortOwner>> m_dataRowSortOwners;
    private UserSortFilterContext m_userSortFilterContext;
    private bool m_initializedRuntime;
    private bool m_isPageHeaderFooter;
    private DataChunkReader[] m_dataSetToDataReader;
    private Boolean[] m_dataSetRetrievalComplete;
    private bool m_multiThreadedDataRetrieval;
    private object m_hasUserProfileStateLock;
    private UserProfileState m_hasUserProfileState;
    private ExecutionLogContext m_executionLogContext;
    private IScalabilityCache m_tablixProcessingScalabilityCache;
    private bool m_dataCached;
    private int m_staticRefId;
    private IConfiguration m_configuration;
    internal UserProfileState HasUserProfileState { get; }
    internal ExecutionLogContext ExecutionLogContext { get; }
    internal bool DataCached { get; }
    internal IJobContext JobContext { get; }
    internal IExtensionFactory ExtFactory { get; }
    internal IDataProtection DataProtection { get; }
    public bool EnableDataBackedParameters { get; }
    internal String[] CachedDataChunkMapping { get; }
    internal DataSetInstance[] SharedDataSetInfo { get; }
    internal IChunkFactory ChunkFactory { get; }
    internal string RequestUserName { get; }
    public DateTime ExecutionTime { get; }
    internal CultureInfo UserLanguage { get; }
    internal OnDemandSubReportCallback SubReportCallback { get; }
    internal ExecutionType InteractiveExecution { get; }
    internal bool HasImageStreams { get; internal set; }
    internal bool HasDocumentMap { get; internal set; }
    internal bool HasBookmarks { get; internal set; }
    internal bool HasShowHide { get; internal set; }
    internal bool HasUserSortFilter { get; }
    internal UserProfileState AllowUserProfileState { get; }
    public bool SnapshotProcessing { get; public set; }
    public bool ReprocessSnapshot { get; }
    internal bool ProcessWithCachedData { get; }
    internal IChunkFactory CacheDataCallback { get; }
    internal ReportRuntimeSetup ReportRuntimeSetup { get; }
    internal StoreServerParameters StoreServerParameters { get; }
    internal bool CanShareDataSets { get; }
    internal bool HasPreviousAggregates { get; }
    internal EventInformation UserSortFilterInfo { get; internal set; }
    internal SortFilterEventInfoMap OldSortFilterEventInfo { get; internal set; }
    internal string UserSortFilterEventSourceUniqueName { get; internal set; }
    internal SortFilterEventInfoMap NewSortFilterEventInfo { get; internal set; }
    internal List`1<IReference`1<RuntimeSortFilterEventInfo>> ReportRuntimeUserSortFilterInfo { get; internal set; }
    internal CreateAndRegisterStream CreateStreamCallback { get; }
    internal bool IsPageHeaderFooter { get; }
    internal bool ErrorSavingSnapshotData { get; internal set; }
    internal OnDemandProcessingContext ParentContext { get; }
    internal OnDemandProcessingContext TopLevelContext { get; }
    internal RuntimeDataSourceInfoCollection DataSourceInfos { get; }
    internal IProcessingDataExtensionConnection CreateAndSetupDataExtensionFunction { get; }
    internal CultureInfo ThreadCulture { get; internal set; }
    internal UInt32 LanguageInstanceId { get; internal set; }
    internal ICatalogItemContext ReportContext { get; }
    internal ReportRuntime ReportRuntime { get; internal set; }
    internal ObjectModelImpl ReportObjectModel { get; internal set; }
    internal Report ReportDefinition { get; }
    internal OnDemandMetadata OdpMetadata { get; }
    internal ReportInstance CurrentReportInstance { get; internal set; }
    internal int CurrentDataSetIndex { get; internal set; }
    internal DataSetInstance CurrentOdpDataSetInstance { get; }
    internal IReportScope CurrentReportScope { get; }
    internal List`1<object> GroupExpressionValues { get; }
    internal bool PeerOuterGroupProcessing { get; internal set; }
    internal bool ReportItemsReferenced { get; }
    internal bool ReportItemThisDotValueReferenced { get; }
    internal DataSourceInfoHashtable GlobalDataSourceInfo { get; }
    internal Dictionary`2<string, ImageInfo> EmbeddedImages { get; }
    public ErrorContext ErrorContext { get; }
    internal bool ProcessReportParameters { get; internal set; }
    internal CompareInfo CompareInfo { get; internal set; }
    internal CompareOptions ClrCompareOptions { get; internal set; }
    internal string SubReportDataChunkNameModifier { get; }
    internal string DataRetrievalUniqueName { get; }
    internal bool IsSubReportInstanceShared { get; }
    internal string SubReportUniqueName { get; }
    internal bool InSubreport { get; }
    internal bool InSubreportInDataRegion { get; }
    internal AbortHelper AbortInfo { get; internal set; }
    internal SecondPassOperations SecondPassOperation { get; internal set; }
    internal bool SpecialRecursiveAggregates { get; }
    internal bool InitializedRuntime { get; internal set; }
    internal bool MultiThreadedDataRetrieval { get; internal set; }
    internal Boolean[] DataSetRetrievalComplete { get; }
    internal ParameterInfoCollection ReportParameters { get; internal set; }
    internal IScalabilityCache TablixProcessingScalabilityCache { get; }
    internal CustomReportItemControls CriProcessingControls { get; internal set; }
    internal IConfiguration Configuration { get; }
    internal bool IsTablixProcessingMode { get; internal set; }
    internal IInstancePath LastRIFObject { get; internal set; }
    internal IRIFReportScope LastTablixProcessingReportScope { get; internal set; }
    internal UserSortFilterContext UserSortFilterContext { get; }
    internal List`1<IReference`1<RuntimeSortFilterEventInfo>> RuntimeSortFilterInfo { get; }
    private int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.ID { get; }
    internal OnDemandProcessingContext(Report report, OnDemandMetadata odpMetadata, ICatalogItemContext reportContext, ErrorContext errorContext, IChunkFactory chunkFactory, OnDemandSubReportCallback subReportCallback, IGetResource getResourceCallback, IChunkFactory cacheDataCallback, ExecutionType interactiveExecution, ReportRuntimeSetup reportRuntimeSetup, UserProfileState allowUserProfileState, string requestUserName, CultureInfo userLanguage, DateTime executionTime, bool snapshotProcessing, bool reprocessSnapshot, bool processWithCachedData, RuntimeDataSourceInfoCollection dataSourceInfos, IProcessingDataExtensionConnection createAndSetupDataExtensionFunction, StoreServerParameters storeServerParameters, bool canShareDataSets, CreateAndRegisterStream createStreamCallback, UserProfileState userProfileState, ExecutionLogContext executionLogContext, bool enableDataBackedParameters, IJobContext jobContext, IExtensionFactory extFactory, IDataProtection dataProtection, IConfiguration configuration);
    internal OnDemandProcessingContext(OnDemandProcessingContext aContext, bool aReportItemsReferenced, Report aReport);
    internal OnDemandProcessingContext(Report report, ICatalogItemContext reportContext, ErrorContext errorContext, ExecutionType interactiveExecution, ReportRuntimeSetup reportRuntimeSetup, UserProfileState allowUserProfileState, string requestUserName, CultureInfo userLanguage, DateTime executionTime, bool snapshotProcessing, RuntimeDataSourceInfoCollection dataSourceInfos, IProcessingDataExtensionConnection createAndSetupDataExtensionFunction, bool canShareDataSets, CreateAndRegisterStream createStreamCallback, bool enableDataBackedParameters, IJobContext jobContext, IExtensionFactory extFactory, IDataProtection dataProtection, IConfiguration configuration);
    internal OnDemandProcessingContext(OnDemandProcessingContext aContext, ICatalogItemContext reportContext, SubReport subReport);
    internal UserProfileState get_HasUserProfileState();
    internal void MergeHasUserProfileState(UserProfileState newProfileStateFlags);
    internal ExecutionLogContext get_ExecutionLogContext();
    internal bool get_DataCached();
    internal void DisableDataCached();
    internal IJobContext get_JobContext();
    internal IExtensionFactory get_ExtFactory();
    internal IDataProtection get_DataProtection();
    public sealed virtual bool get_EnableDataBackedParameters();
    internal String[] get_CachedDataChunkMapping();
    internal DataSetInstance[] get_SharedDataSetInfo();
    internal IChunkFactory get_ChunkFactory();
    internal string get_RequestUserName();
    public sealed virtual DateTime get_ExecutionTime();
    internal CultureInfo get_UserLanguage();
    internal OnDemandSubReportCallback get_SubReportCallback();
    internal ExecutionType get_InteractiveExecution();
    internal bool get_HasImageStreams();
    internal void set_HasImageStreams(bool value);
    internal bool get_HasDocumentMap();
    internal void set_HasDocumentMap(bool value);
    internal bool get_HasBookmarks();
    internal void set_HasBookmarks(bool value);
    internal bool get_HasShowHide();
    internal void set_HasShowHide(bool value);
    internal bool get_HasUserSortFilter();
    internal UserProfileState get_AllowUserProfileState();
    public sealed virtual bool get_SnapshotProcessing();
    public sealed virtual void set_SnapshotProcessing(bool value);
    public bool get_ReprocessSnapshot();
    internal bool get_ProcessWithCachedData();
    internal IChunkFactory get_CacheDataCallback();
    internal ReportRuntimeSetup get_ReportRuntimeSetup();
    internal StoreServerParameters get_StoreServerParameters();
    internal bool get_CanShareDataSets();
    internal bool get_HasPreviousAggregates();
    internal EventInformation get_UserSortFilterInfo();
    internal void set_UserSortFilterInfo(EventInformation value);
    internal SortFilterEventInfoMap get_OldSortFilterEventInfo();
    internal void set_OldSortFilterEventInfo(SortFilterEventInfoMap value);
    internal string get_UserSortFilterEventSourceUniqueName();
    internal void set_UserSortFilterEventSourceUniqueName(string value);
    internal SortFilterEventInfoMap get_NewSortFilterEventInfo();
    internal void set_NewSortFilterEventInfo(SortFilterEventInfoMap value);
    internal List`1<IReference`1<RuntimeSortFilterEventInfo>> get_ReportRuntimeUserSortFilterInfo();
    internal void set_ReportRuntimeUserSortFilterInfo(List`1<IReference`1<RuntimeSortFilterEventInfo>> value);
    internal CreateAndRegisterStream get_CreateStreamCallback();
    internal bool get_IsPageHeaderFooter();
    internal bool get_ErrorSavingSnapshotData();
    internal void set_ErrorSavingSnapshotData(bool value);
    internal OnDemandProcessingContext get_ParentContext();
    internal OnDemandProcessingContext get_TopLevelContext();
    internal RuntimeDataSourceInfoCollection get_DataSourceInfos();
    internal IProcessingDataExtensionConnection get_CreateAndSetupDataExtensionFunction();
    internal CultureInfo get_ThreadCulture();
    internal void set_ThreadCulture(CultureInfo value);
    internal UInt32 get_LanguageInstanceId();
    internal void set_LanguageInstanceId(UInt32 value);
    internal ICatalogItemContext get_ReportContext();
    internal ReportRuntime get_ReportRuntime();
    internal void set_ReportRuntime(ReportRuntime value);
    internal ObjectModelImpl get_ReportObjectModel();
    internal void set_ReportObjectModel(ObjectModelImpl value);
    internal Report get_ReportDefinition();
    internal OnDemandMetadata get_OdpMetadata();
    internal ReportInstance get_CurrentReportInstance();
    internal void set_CurrentReportInstance(ReportInstance value);
    internal int get_CurrentDataSetIndex();
    internal void set_CurrentDataSetIndex(int value);
    internal DataSetInstance get_CurrentOdpDataSetInstance();
    internal IReportScope get_CurrentReportScope();
    internal List`1<object> get_GroupExpressionValues();
    internal bool get_PeerOuterGroupProcessing();
    internal void set_PeerOuterGroupProcessing(bool value);
    internal bool get_ReportItemsReferenced();
    internal bool get_ReportItemThisDotValueReferenced();
    internal DataSourceInfoHashtable get_GlobalDataSourceInfo();
    internal Dictionary`2<string, ImageInfo> get_EmbeddedImages();
    public sealed virtual ErrorContext get_ErrorContext();
    internal bool get_ProcessReportParameters();
    internal void set_ProcessReportParameters(bool value);
    internal CompareInfo get_CompareInfo();
    internal void set_CompareInfo(CompareInfo value);
    internal CompareOptions get_ClrCompareOptions();
    internal void set_ClrCompareOptions(CompareOptions value);
    internal string get_SubReportDataChunkNameModifier();
    internal string get_DataRetrievalUniqueName();
    internal bool get_IsSubReportInstanceShared();
    internal string get_SubReportUniqueName();
    internal bool get_InSubreport();
    internal bool get_InSubreportInDataRegion();
    internal AbortHelper get_AbortInfo();
    internal void set_AbortInfo(AbortHelper value);
    internal SecondPassOperations get_SecondPassOperation();
    internal void set_SecondPassOperation(SecondPassOperations value);
    internal bool get_SpecialRecursiveAggregates();
    internal bool get_InitializedRuntime();
    internal void set_InitializedRuntime(bool value);
    internal bool get_MultiThreadedDataRetrieval();
    internal void set_MultiThreadedDataRetrieval(bool value);
    internal Boolean[] get_DataSetRetrievalComplete();
    internal ParameterInfoCollection get_ReportParameters();
    internal void set_ReportParameters(ParameterInfoCollection value);
    internal IScalabilityCache get_TablixProcessingScalabilityCache();
    internal CustomReportItemControls get_CriProcessingControls();
    internal void set_CriProcessingControls(CustomReportItemControls value);
    internal IConfiguration get_Configuration();
    private void InitFlags(Report report);
    internal void InitializeDataSetMembers(int dataSetCount);
    internal void RuntimeInitializePageSectionVariables(Report report, Object[] reportVariableValues);
    internal void RuntimeInitializeVariables(Report report);
    private void AddVariablesToReportObjectModel(List`1<Variable> variableDef, IndexedExprHost variableValuesHost, ObjectType parentObjectType, string parentObjectName, Object[] variableValues);
    internal void RuntimeInitializeTextboxObjs(ReportItemCollection reportItems, bool setExprHost);
    internal void RuntimeInitializeTextboxObjs(ReportItem reportItem, bool setExprHost);
    private void RuntimeInitializeTextboxObjsInMemberTree(HierarchyNodeList memberNodes, bool setExprHost);
    internal void RuntimeInitializeReportItemObjs(ReportItemCollection reportItems, bool traverseDataRegions);
    internal void RuntimeInitializeReportItemObjs(ReportItem reportItem, bool traverseDataRegions);
    private void RuntimeInitializeMemberTree(HierarchyNodeList memberNodes, IList`1<IMemberNode> memberExprHosts, bool traverseDataRegions);
    internal void RuntimeInitializeAggregates(List`1<AggregateType> aggregates);
    private void ResetOnDemandState();
    internal bool get_IsTablixProcessingMode();
    internal void set_IsTablixProcessingMode(bool value);
    internal IInstancePath get_LastRIFObject();
    internal void set_LastRIFObject(IInstancePath value);
    internal IRIFReportScope get_LastTablixProcessingReportScope();
    internal void set_LastTablixProcessingReportScope(IRIFReportScope value);
    internal int RecursiveLevel(string scopeName);
    internal bool InScope(string scopeName);
    private bool InScopeCompare(string scope1, string scope2);
    internal Dictionary`2<string, object> GetCurrentSpecialGroupingValues();
    internal bool CalculateAggregate(string aggregateName);
    internal bool PrepareFieldsCollectionForDirectFields();
    internal void RestoreContext(IInstancePath originalObject);
    internal void SetupContext(IInstancePath rifObject, IReportScopeInstance romInstance);
    internal void SetupContext(IInstancePath rifObject, IReportScopeInstance romInstance, int moveNextInstanceIndex);
    private void SetupObjectModels(OnDemandMode mode, bool needDeepCopyPath, int moveNextInstanceIndex, string scopeName);
    private void PerformOnDemandTablixProcessing(DataSet dataSet);
    private void PerformOnDemandTablixProcessingWithContextRestore(DataSet dataSet);
    internal void AddSpecialDataRowSort(IReference`1<IDataRowSortOwner> sortOwner);
    internal void AddSpecialDataRegionFilters(Filters filters);
    private bool ProcessDataRegionsWithSpecialFiltersOrDataRowSorting();
    internal bool PopulateRuntimeSortFilterEventInfo(DataSet dataSet);
    internal bool IsSortFilterTarget(Boolean[] isSortFilterTarget, IReference`1<IScope> outerScope, IReference`1<IHierarchyObj> target, RuntimeUserSortTargetInfo& userSortTargetInfo);
    internal void ProcessUserSortForTarget(IReference`1<IHierarchyObj> target, ScalableList`1& dataRows, bool targetForNonDetailSort);
    internal void RegisterSortFilterExpressionScope(IReference`1<IScope> container, IReference`1<RuntimeDataRegionObj> scopeObj, Boolean[] isSortFilterExpressionScope);
    internal EventInformation GetUserSortFilterInformation(String& oldUniqueName);
    internal void MergeNewUserSortFilterInformation();
    internal void FirstPassPostProcess();
    internal List`1[] GetScopeValues(GroupingList containingScopes, IScope containingScope);
    internal ProcessingMessageList RegisterComparisonErrorForSortFilterEvent(string propertyName);
    internal UserSortFilterContext get_UserSortFilterContext();
    internal List`1<IReference`1<RuntimeSortFilterEventInfo>> get_RuntimeSortFilterInfo();
    internal void CheckAndThrowIfAborted();
    internal void AddDataChunkReader(int dataSetIndexInCollection, DataChunkReader dataReader);
    internal DataChunkReader GetDataChunkReader(OnDemandProcessingContext odpContext, int dataSetIndex);
    private DataChunkReader GetDataChunkReader(OnDemandProcessingContext odpContext, int dataSetIndex, DataSetInstance dataSetInstance);
    internal DataSetInstance GetDataSetInstance(DataSet dataSet);
    internal DataSetInstance GetDataSetInstance(DataSet dataSet, String& chunkName);
    internal Boolean[] GenerateDataSetExclusionList(Int32& unprocessedDataSetCount);
    internal void FreeAllResources();
    private void FreeResources();
    internal void CleanupAllTablixProcessingScalability();
    internal void EnsureScalabilitySetup();
    internal void EnsureScalabilityCleanup();
    internal bool IsTablixProcessingComplete(int dataSetIndexInCollection);
    internal void SetTablixProcessingComplete(int dataSetIndexInCollection, bool value);
    internal int CreateUniqueID();
    internal bool GetResource(string path, Byte[]& resource, String& mimeType);
    internal void SetSubReportDataChunkNameModifier(SubReportInstance subReportInstance);
    internal void SetSubReportNameModifierAndParameters(SubReportInstance subReportInstance, bool addEntry);
    internal void SetSubReportContext(SubReportInstance subReportInstance, bool setupReportOM);
    private void ResetDataSetToDataReader();
    internal static ParameterInfoCollection EvaluateSubReportParameters(OnDemandProcessingContext parentContext, SubReport subReport);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.get_ID();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.SetID(int id);
    private sealed virtual override ObjectType Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.GetObjectType();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.OnDemandProcessReportParameters : ProcessReportParameters {
    private Report m_report;
    internal OnDemandProcessReportParameters(Report aReport, OnDemandProcessingContext aContext);
    internal OnDemandProcessingContext GetOnDemandContext();
    internal virtual IParameterDef GetParameterDef(int aParamIndex);
    internal virtual void InitReportParametersContext(ParameterInfoCollection parameters);
    internal virtual void Cleanup();
    internal virtual void AddToRuntime(ParameterInfo aParamInfo);
    internal virtual void SetupExprHost(IParameterDef aParamDef);
    internal virtual object EvaluateDefaultValueExpr(IParameterDef aParamDef, int aIndex);
    internal virtual object EvaluateValidValueExpr(IParameterDef aParamDef, int aIndex);
    internal virtual object EvaluateValidValueLabelExpr(IParameterDef aParamDef, int aIndex);
    internal virtual string EvaluatePromptExpr(ParameterInfo aParamInfo, IParameterDef aParamDef);
    internal virtual bool NeedPrompt(IParameterDataSource paramDS);
    internal virtual void ThrowException(ReportProcessingException_FieldError aError, string aParamName, int aDataSourceIndex, int aDataSetIndex, int aFieldIndex);
    internal virtual ReportParameterDataSetCache ProcessReportParameterDataSet(ParameterInfo aParam, IParameterDef aParamDef, IParameterDataSource paramDS, bool aRetrieveValidValues, bool aRetrievalDefaultValues);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.OnDemandReportParameterDataSetCache : ReportParameterDataSetCache {
    internal OnDemandReportParameterDataSetCache(ProcessReportParameters aParamProcessor, ParameterInfo aParameter, ParameterDef aParamDef, bool aProcessValidValues, bool aProcessDefaultValues);
    internal virtual object GetFieldValue(object aRow, int col);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.ProcessingDataReader : object {
    private MappingDataReader m_dataSourceDataReader;
    private DataChunkReader m_dataSnapshotReader;
    internal bool ReaderExtensionsSupported { get; }
    internal bool ReaderFieldProperties { get; }
    public bool IsAggregateRow { get; }
    public int AggregationFieldCount { get; }
    internal ProcessingDataReader(string dataSetName, IDataReader sourceReader, String[] aliases, String[] names);
    internal ProcessingDataReader(DataSource dataSource, DataSet dataSet, OnDemandProcessingContext context);
    internal bool get_ReaderExtensionsSupported();
    internal bool get_ReaderFieldProperties();
    public bool get_IsAggregateRow();
    public int get_AggregationFieldCount();
    private sealed virtual override void System.IDisposable.Dispose();
    internal void OverrideDataCacheCompareOptions(OnDemandProcessingContext& context);
    internal bool GetNextRow();
    internal RecordRow GetUnderlyingRecordRowObject();
    internal object GetColumn(int aliasIndex);
    internal bool IsAggregationField(int aliasIndex);
    internal int GetPropertyCount(int aliasIndex);
    internal string GetPropertyName(int aliasIndex, int propertyIndex);
    internal object GetPropertyValue(int aliasIndex, int propertyIndex);
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.ProcessReportParameters : object {
    private IInternalProcessingContext m_processingContext;
    private ReportParameterDataSetCache m_paramDataSetCache;
    private Dictionary`2<string, bool> m_dependenciesSubmitted;
    private int m_lastDynamicParam;
    private ParameterInfoCollection m_parameters;
    internal IInternalProcessingContext ProcessingContext { get; }
    public ProcessReportParameters(IInternalProcessingContext aContext);
    private void ProcessParameter(ParameterInfoCollection aParameters, int aParamIndex);
    public ProcessingMessageList Process(ParameterInfoCollection aParameters);
    internal static Dictionary`2<string, bool> BuildSubmittedDependencyList(ParameterInfoCollection parameters);
    internal abstract virtual IParameterDef GetParameterDef(int aParamIndex);
    internal abstract virtual void InitReportParametersContext(ParameterInfoCollection parameters);
    internal abstract virtual void Cleanup();
    internal abstract virtual void AddToRuntime(ParameterInfo aParamInfo);
    internal abstract virtual void SetupExprHost(IParameterDef aParamDef);
    internal abstract virtual object EvaluateDefaultValueExpr(IParameterDef aParamDef, int aIndex);
    internal abstract virtual object EvaluateValidValueExpr(IParameterDef aParamDef, int aIndex);
    internal abstract virtual object EvaluateValidValueLabelExpr(IParameterDef aParamDef, int aIndex);
    internal abstract virtual bool NeedPrompt(IParameterDataSource paramDS);
    internal abstract virtual void ThrowException(ReportProcessingException_FieldError aError, string aParamName, int aDataSourceIndex, int aDataSetIndex, int aFieldIndex);
    internal abstract virtual string EvaluatePromptExpr(ParameterInfo aParamInfo, IParameterDef aParamDef);
    internal abstract virtual ReportParameterDataSetCache ProcessReportParameterDataSet(ParameterInfo aParam, IParameterDef aParamDef, IParameterDataSource paramDS, bool aRetrieveValidValues, bool aRetrievalDefaultValues);
    internal bool ValidateValue(object newValue, IParameterDef paramDef, string parameterValueProperty);
    internal object ConvertValue(object o, IParameterDef paramDef, bool isDefaultValue);
    internal void UpdateReportParametersContext(ParameterInfoCollection parameters, int lastIndex, int currentIndex);
    internal bool ProcessDefaultValue(ParameterInfo parameter, IParameterDef paramDef);
    internal bool ProcessValidValues(ParameterInfo parameter, IParameterDef paramDef, bool aEvaluateDefaultValues);
    internal void ConvertAndAddValidValue(ParameterInfo parameter, IParameterDef paramDef, object value, object label);
    internal IInternalProcessingContext get_ProcessingContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.ReportParameterDataSetCache : object {
    private ProcessReportParameters m_paramProcessor;
    private ParameterInfo m_parameter;
    private IParameterDef m_parameterDef;
    private List`1<object> m_defaultValues;
    private bool m_processValidValues;
    private bool m_processDefaultValues;
    internal List`1<object> DefaultValues { get; }
    internal ReportParameterDataSetCache(ProcessReportParameters aParamProcessor, ParameterInfo aParameter, IParameterDef aParamDef, bool aProcessValidValues, bool aProcessDefaultValues);
    internal void NextRow(object aRow);
    internal abstract virtual object GetFieldValue(object aRow, int col);
    internal List`1<object> get_DefaultValues();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.RetrievalManager : object {
    private Report m_report;
    private bool m_noRows;
    private OnDemandProcessingContext m_processingContext;
    private List`1<RuntimeDataSource> m_runtimeDataSources;
    internal bool NoRows { get; }
    internal RetrievalManager(Report report, OnDemandProcessingContext context);
    internal bool get_NoRows();
    internal void FetchParameterData(ReportParameterDataSetCache aCache, int aDataSourceIndex, int aDataSetIndex);
    internal bool PrefetchData(ReportInstance reportInstance, ParameterInfoCollection parameters, bool mergeTran);
    private bool FetchData(bool mergeTran);
    private void AbortHandler(object sender, EventArgs e);
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.RuntimeDataSet : object {
    protected DataSource m_dataSource;
    protected IDbConnection m_dataSourceConnection;
    protected TransactionInfo m_transInfo;
    protected Report m_report;
    protected DataSet m_dataSet;
    protected DataSetInstance m_dataSetInstance;
    protected IDbCommand m_command;
    protected ProcessingDataReader m_dataReader;
    protected OnDemandProcessingContext m_odpContext;
    protected int m_dataRowsRead;
    protected long m_dataProcessingDurationMs;
    protected bool m_foundExtendedProperties;
    protected bool m_hasSortFilterInfo;
    protected bool m_processRetrievedData;
    internal bool ProcessFromLiveDataReader { get; }
    internal bool NoRows { get; }
    internal int NumRowsRead { get; }
    internal long DataProcessingDurationMs { get; }
    internal bool ProcessRetrievedData { get; internal set; }
    internal bool UsedOnlyInParameters { get; }
    internal DataSet DataSet { get; }
    internal RuntimeDataSet(Report report, DataSet dataSet, DataSetInstance dataSetInstance, OnDemandProcessingContext processingContext);
    internal virtual bool get_ProcessFromLiveDataReader();
    internal bool get_NoRows();
    internal int get_NumRowsRead();
    internal long get_DataProcessingDurationMs();
    internal bool get_ProcessRetrievedData();
    internal void set_ProcessRetrievedData(bool value);
    internal bool get_UsedOnlyInParameters();
    internal DataSet get_DataSet();
    internal void Abort();
    internal void InitProcessingParams(DataSource dataSource, IDbConnection conn, TransactionInfo transInfo);
    internal void ProcessConcurrent(object threadSet);
    protected void InitRuntime();
    protected virtual void Process();
    protected void CloseConnectionWhenFinish(bool closeConnWhenFinish);
    protected void CleanupForException(bool closeConnWhenFinish);
    internal virtual void CleanupScalability();
    protected void DisposeDataReader();
    protected abstract virtual void InitProcess(bool aReaderExtensionsSupported);
    protected virtual void CleanupProcess(bool flushData);
    protected abstract virtual void ProcessRow(RecordRow aRow);
    protected abstract virtual void ProcessExtendedPropertyMappings();
    protected void ProcessRows();
    private void MapExtendedProperties();
    private RecordRow ReadRow();
    private void CloseCommand();
    private RecordField HandleFieldError(ReportProcessingException_FieldError aException, int aFieldIndex, string aFieldName);
    private FieldInfo GetFieldInfo(int aIndex);
    internal bool IsFieldMissing(int index);
    internal int GetFieldPropertyCount(int index);
    protected virtual bool RunDataSetQuery();
    internal virtual void EraseDataChunk();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.RuntimeDataSource : object {
    private bool m_noRows;
    private OnDemandProcessingContext m_processingContext;
    private Report m_report;
    private ReportInstance m_reportInstance;
    private DataSource m_dataSource;
    private DataProcessingMode m_mode;
    private List`1<RuntimeDataSet> m_runtimeDataSets;
    private bool m_canAbort;
    private long m_dataProcessingDurationMs;
    private bool m_mergeTran;
    private int m_parameterDataSetIndex;
    private ReportParameterDataSetCache m_paramDataCache;
    private int m_tablixDataSetIndex;
    internal long DataProcessingDurationMs { get; }
    internal bool NoRows { get; }
    internal List`1<RuntimeDataSet> RuntimeDataSets { get; }
    internal RuntimeDataSource(Report report, ReportInstance reportInstance, DataSource dataSource, OnDemandProcessingContext processingContext, DataProcessingMode mode);
    internal RuntimeDataSource(Report report, DataSource dataSource, OnDemandProcessingContext processingContext, int aParamDataSetIndex, ReportParameterDataSetCache aCache);
    private RuntimeDataSource(Report report, DataSource dataSource, OnDemandProcessingContext processingContext, DataProcessingMode mode);
    internal long get_DataProcessingDurationMs();
    internal bool get_NoRows();
    internal List`1<RuntimeDataSet> get_RuntimeDataSets();
    internal void SetTablixDataProcessingIndex(int dataSetIndex);
    internal void Abort();
    internal void ProcessConcurrent(object threadSet);
    internal void EraseDataChunk();
    internal void InitProcessingParams(bool mergeTran);
    private void Process();
    private bool NeedAutoDetectCollation(Int32& index);
    internal static IDbConnection OpenConnection(DataSource dataSourceObj, DataSet dataSetObj, OnDemandProcessingContext pc);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.RuntimeParameterDataSet : RuntimeDataSet {
    private ReportParameterDataSetCache m_parameterDataSetObj;
    private Filters m_filters;
    public RuntimeParameterDataSet(Report report, DataSet dataSet, DataSetInstance dataSetInstance, OnDemandProcessingContext processingContext, ReportParameterDataSetCache aCache);
    protected virtual void ProcessRow(RecordRow row);
    protected virtual void ProcessExtendedPropertyMappings();
    protected virtual void InitProcess(bool aReaderExtensionsSupported);
    protected virtual void CleanupProcess(bool flushData);
    protected virtual void Process();
    public sealed virtual void PostFilterNextRow();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.RuntimePrefetchDataSet : RuntimeDataSet {
    private DataChunkWriter m_dataChunkWriter;
    public RuntimePrefetchDataSet(Report report, DataSet dataSet, DataSetInstance dataSetInstance, OnDemandProcessingContext processingContext);
    protected virtual void ProcessRow(RecordRow aRow);
    protected virtual void ProcessExtendedPropertyMappings();
    protected virtual void InitProcess(bool aReaderExtensionsSupported);
    protected virtual void CleanupProcess(bool flushData);
    internal virtual void EraseDataChunk();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.AppendOnlySpaceManager : object {
    private long m_streamEnd;
    private long m_unuseableBytes;
    public long StreamEnd { get; public set; }
    public sealed virtual void Seek(long offset, SeekOrigin origin);
    public sealed virtual void Free(long offset, long size);
    public sealed virtual long AllocateSpace(long size);
    public sealed virtual long Resize(long offset, long oldSize, long newSize);
    public sealed virtual long get_StreamEnd();
    public sealed virtual void set_StreamEnd(long value);
    public sealed virtual void TraceStats();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.Scalability.BaseReference : object {
    private ReferenceID m_id;
    protected BaseScalabilityCache m_scalabilityCache;
    internal ItemHolder Item;
    private int m_pinCount;
    private static Declaration m_declaration;
    public ReferenceID Id { get; public set; }
    internal int PinCount { get; internal set; }
    internal BaseScalabilityCache ScalabilityCache { get; }
    internal InQueueState InQueue { get; internal set; }
    public int Size { get; }
    private static BaseReference();
    internal void Init(BaseScalabilityCache storageManager);
    internal void Init(BaseScalabilityCache storageManager, ReferenceID id);
    public sealed virtual ReferenceID get_Id();
    public void set_Id(ReferenceID value);
    internal int get_PinCount();
    internal void set_PinCount(int value);
    internal BaseScalabilityCache get_ScalabilityCache();
    internal InQueueState get_InQueue();
    internal void set_InQueue(InQueueState value);
    public sealed virtual IDisposable PinValue();
    public sealed virtual void UnPinValue();
    public sealed virtual void Free();
    public sealed virtual void UpdateSize(int sizeBytesDelta);
    internal IStorable InternalValue();
    private void SetScalabilityCache(BaseScalabilityCache cache);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public abstract virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual int get_Size();
    public static bool op_Equality(BaseReference reference, object obj);
    public static bool op_Inequality(BaseReference reference, object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.Scalability.BaseScalabilityCache : object {
    internal static long DefaultCacheExpansionMaxBytes;
    internal static long CacheExpansionMinBytes;
    protected bool m_disposed;
    protected long m_minReservedMemoryKB;
    protected long m_cacheSizeBytes;
    protected long m_cacheCapacityBytes;
    protected long m_totalAuditedBytes;
    protected long m_totalFreedBytes;
    protected int m_pendingNotificationCount;
    protected long m_inProgressFreeBytes;
    protected long m_pendingFreeBytes;
    protected bool m_freeingSpace;
    protected bool m_inStreamOper;
    protected IStorage m_storage;
    protected IReferenceCreator m_referenceCreator;
    protected ComponentType m_ownerComponent;
    protected Stopwatch m_serializationTimer;
    protected Stopwatch m_deserializationTimer;
    protected long m_totalBytesSerialized;
    protected long m_lastExpansionOrNotificationMs;
    protected long m_expansionIntervalMs;
    protected Stopwatch m_cacheLifetimeTimer;
    protected double m_cacheExpansionRatio;
    protected bool m_receivedShrinkRequest;
    protected long m_peakCacheSizeBytes;
    protected string m_executionId;
    protected static long DefaultCacheCapacityBytes;
    protected static long CacheExpansionMaxBytes;
    public IStorage Storage { get; }
    public ScalabilityCacheType CacheType { get; }
    public ComponentType OwnerComponent { get; }
    public long SerializationDurationMs { get; }
    public long DeserializationDurationMs { get; }
    public long ScalabilityDurationMs { get; }
    public long PeakMemoryUsageKBytes { get; }
    protected long MinReservedMemoryKB { get; }
    protected long InternalFreeableBytes { get; }
    internal long TotalSerializedHeapBytes { get; }
    internal BaseScalabilityCache(IStorage storage, long cacheExpansionIntervalMs, double cacheExpansionRatio, ComponentType ownerComponent, long minReservedMemoryBytes);
    private static BaseScalabilityCache();
    public abstract virtual IReference`1<T> Allocate(T obj, int priority);
    public abstract virtual IReference`1<T> AllocateAndPin(T obj, int priority);
    public abstract virtual IReference`1<T> GenerateFixedReference(T obj);
    public sealed virtual void Close();
    public abstract virtual int StoreStaticReference(object item);
    public abstract virtual object FetchStaticReference(int id);
    public abstract virtual IReference PoolReference(IReference reference);
    public sealed virtual IStorage get_Storage();
    public abstract virtual ScalabilityCacheType get_CacheType();
    public sealed virtual ComponentType get_OwnerComponent();
    public sealed virtual long get_SerializationDurationMs();
    public sealed virtual long get_DeserializationDurationMs();
    public sealed virtual long get_ScalabilityDurationMs();
    public sealed virtual long get_PeakMemoryUsageKBytes();
    public virtual void Dispose();
    internal abstract virtual void Free(BaseReference reference);
    internal abstract virtual IStorable Retrieve(BaseReference reference);
    internal virtual void ReferenceValueCallback(BaseReference reference);
    internal abstract virtual void UnPin(BaseReference reference);
    internal abstract virtual void Pin(BaseReference reference);
    internal abstract virtual void ReferenceSerializeCallback(BaseReference reference);
    internal abstract virtual void UpdateTargetSize(BaseReference reference, int sizeDeltaBytes);
    internal void PeriodicOperationCheck();
    protected long get_MinReservedMemoryKB();
    protected abstract virtual long get_InternalFreeableBytes();
    protected abstract virtual void FulfillInProgressFree();
    internal long get_TotalSerializedHeapBytes();
    protected BaseReference CreateReference(IStorable storable);
    [ConditionalAttribute("DEBUG")]
protected void CheckDisposed(string opName);
    protected void UpdatePeakCacheSize();
    protected void FreeCacheSpace(int count, long freeableBytes);
    private long ReadTime(Stopwatch timer);
    private void ResetExpansionOrNotificationInterval();
    private static void SetDefaultCacheCapacityBytes(long defaultCapacityBytes);
    internal static long ComputeMaxExpansionBytes(int processorCount);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.Block : object {
    private long m_offset;
    private long m_endOffset;
    private long m_size;
    public long Offset { get; public set; }
    public long EndOffset { get; public set; }
    public long Size { get; public set; }
    public Block(long offset, long size);
    public long get_Offset();
    public void set_Offset(long value);
    public long get_EndOffset();
    public void set_EndOffset(long value);
    public long get_Size();
    public void set_Size(long value);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ChunkFactoryStreamHandler : object {
    private string m_chunkName;
    private ReportChunkTypes m_chunkType;
    private IChunkFactory m_chunkFactory;
    private bool m_existingChunk;
    internal ChunkFactoryStreamHandler(string chunkName, ReportChunkTypes chunkType, IChunkFactory chunkFactory, bool existingChunk);
    public sealed virtual Stream OpenStream();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.CommonObjectCreator : object {
    private static List`1<Declaration> m_declarations;
    private static CommonObjectCreator m_instance;
    internal static CommonObjectCreator Instance { get; }
    private static CommonObjectCreator();
    public sealed virtual bool TryCreateObject(ObjectType objectType, IPersistable& persistObj);
    public sealed virtual List`1<Declaration> GetDeclarations();
    internal static CommonObjectCreator get_Instance();
    private static List`1<Declaration> BuildDeclarations();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.CommonReferenceCreator : object {
    private static CommonReferenceCreator m_instance;
    internal static CommonReferenceCreator Instance { get; }
    private static CommonReferenceCreator();
    public sealed virtual bool TryCreateReference(IStorable refTarget, BaseReference& newReference);
    public sealed virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& reference);
    internal static CommonReferenceCreator get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ComparerFromComparison`1 : object {
    private Comparison`1<T> m_comparison;
    internal ComparerFromComparison`1(Comparison`1<T> comparison);
    public sealed virtual int Compare(object x, object y);
}
internal enum Microsoft.ReportingServices.OnDemandProcessing.Scalability.ComponentType : Enum {
    public int value__;
    public static ComponentType Processing;
    public static ComponentType Pagination;
    public static ComponentType Rendering;
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.CreateAndRegisterStreamHandler : object {
    private string m_streamName;
    private CreateAndRegisterStream m_createStreamCallback;
    internal CreateAndRegisterStreamHandler(string streamName, CreateAndRegisterStream createStreamCallback);
    public sealed virtual Stream OpenStream();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.DataRegionInstanceReference : ScopeInstanceReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual DataRegionInstance Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.DynamicBucketedHeapSpaceManager : object {
    private static int DefaultSpacesPerBucket;
    private static int DefaultMaxBucketCount;
    private static int DefaultBucketSplitThreshold;
    private static int DefaultMinimumTrackedSize;
    private bool m_allowEndAllocation;
    private SortedBucket[] m_buckets;
    private int m_bucketCount;
    private long m_end;
    private long m_unuseableBytes;
    private int m_maxSpacesPerBucket;
    private int m_maxBucketCount;
    private int m_bucketSplitThreshold;
    private int m_minimumTrackedSize;
    public long StreamEnd { get; public set; }
    public bool AllowEndAllocation { get; public set; }
    public long UnuseableBytes { get; }
    internal SortedBucket[] Buckets { get; }
    internal int BucketCount { get; }
    internal DynamicBucketedHeapSpaceManager(int splitThreshold, int maxBucketCount, int maxSpacesPerBucket, int minTrackedSizeBytes);
    public sealed virtual void Seek(long offset, SeekOrigin origin);
    public sealed virtual void Free(long offset, long size);
    private void InsertSpace(Space space);
    private int GetBucketIndex(long size);
    public sealed virtual long AllocateSpace(long size);
    public sealed virtual long Resize(long offset, long oldSize, long newSize);
    public sealed virtual long get_StreamEnd();
    public sealed virtual void set_StreamEnd(long value);
    public bool get_AllowEndAllocation();
    public void set_AllowEndAllocation(bool value);
    public long get_UnuseableBytes();
    internal SortedBucket[] get_Buckets();
    internal int get_BucketCount();
    public sealed virtual void TraceStats();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.FileBlock : object {
    private DynamicBucketedHeapSpaceManager m_spaceManager;
    public void Free(long offset, long size);
    public long AllocateSpace(long size);
    public long Resize(long offset, long oldSize, long newSize);
    public void TraceStats(string desc);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.GroupTreeReferenceCreator : object {
    private static GroupTreeReferenceCreator m_instance;
    internal static GroupTreeReferenceCreator Instance { get; }
    private static GroupTreeReferenceCreator();
    public sealed virtual bool TryCreateReference(IStorable refTarget, BaseReference& newReference);
    public sealed virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& reference);
    private bool TryMapObjectTypeToReferenceType(ObjectType targetType, ObjectType& referenceType);
    internal static GroupTreeReferenceCreator get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.GroupTreeScalabilityCache : BaseScalabilityCache {
    private static long CacheExpansionIntervalMs;
    private static double CacheExpansionRatio;
    private static long MinReservedMemoryBytes;
    private long m_cacheFreeableBytes;
    private LinkedBucketedQueue`1<BaseReference> m_serializationQueue;
    private LinkedBucketedQueue`1<BaseReference> m_pinnedItems;
    private LinkedLRUCache`1<ItemHolder> m_cachePriority;
    private SegmentedDictionary`2<ReferenceID, BaseReference> m_cacheLookup;
    private long m_nextId;
    private OnDemandMetadata m_odpMetadata;
    private bool m_lockedDownForFlush;
    public ScalabilityCacheType CacheType { get; }
    protected long InternalFreeableBytes { get; }
    internal long CacheSizeBytes { get; }
    internal long CacheFreeableBytes { get; }
    internal long CacheCapacityBytes { get; internal set; }
    public GroupTreeScalabilityCache(OnDemandMetadata odpMetadata, IStorage storage);
    public virtual IReference`1<T> Allocate(T obj, int priority);
    public virtual IReference`1<T> AllocateAndPin(T obj, int priority);
    public virtual IReference`1<T> GenerateFixedReference(T obj);
    public virtual int StoreStaticReference(object item);
    public virtual object FetchStaticReference(int id);
    public virtual IReference PoolReference(IReference reference);
    public virtual ScalabilityCacheType get_CacheType();
    internal IReference`1<T> AllocateEmptyGroupTreePartition(ObjectType referenceObjectType);
    internal void SetGroupTreePartitionContentsAndPin(IReference`1<T> emptyPartitionRef, T contents);
    internal void Flush();
    internal void PrepareForFlush();
    public virtual void Dispose();
    internal virtual void Free(BaseReference reference);
    internal virtual IStorable Retrieve(BaseReference reference);
    internal virtual void ReferenceValueCallback(BaseReference reference);
    internal virtual void Pin(BaseReference reference);
    internal virtual void UnPin(BaseReference reference);
    internal virtual void ReferenceSerializeCallback(BaseReference reference);
    internal virtual void UpdateTargetSize(BaseReference reference, int sizeDeltaBytes);
    protected virtual long get_InternalFreeableBytes();
    internal bool CacheTryGetValue(ReferenceID id, BaseReference& item);
    internal bool CacheRemoveValue(ReferenceID id);
    internal void CacheSetValue(ReferenceID id, BaseReference value);
    private IStorable LoadItem(BaseReference reference);
    private void CacheItem(BaseReference reference, IStorable item, bool fromDeserialize);
    private void EnqueueItem(BaseReference itemRef);
    protected virtual void FulfillInProgressFree();
    private void UpdateStatsForRemovedItem(BaseReference itemRef, Int64& bytesToFree);
    private void WriteItem(BaseReference itemRef);
    internal long get_CacheSizeBytes();
    internal long get_CacheFreeableBytes();
    internal long get_CacheCapacityBytes();
    internal void set_CacheCapacityBytes(long value);
    private ReferenceID GenerateTempId();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.Heap`2 : object {
    private HeapEntry[] m_keys;
    private int m_count;
    private int m_insertIndex;
    private int m_maxCapacity;
    public int Count { get; }
    public int Capacity { get; }
    public Heap`2(int capacity);
    public Heap`2(int initialCapacity, int maxCapacity);
    public void Insert(K key, V value);
    public V ExtractMax();
    public V Peek();
    private void Heapify(int startIndex);
    private bool GreaterThan(int index1, int index2);
    private bool LessThan(int index1, int index2);
    private void Swap(int index1, int index2);
    public int get_Count();
    public int get_Capacity();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IDecumulator`1 {
    public abstract virtual void RemoveCurrent();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IIndexStrategy {
    public ReferenceID MaxId { get; }
    public abstract virtual ReferenceID GenerateId(ReferenceID tempId);
    public abstract virtual ReferenceID GenerateTempId();
    public abstract virtual long Retrieve(ReferenceID id);
    public abstract virtual void Update(ReferenceID id, long value);
    public abstract virtual void Close();
    public abstract virtual ReferenceID get_MaxId();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.IndexTable : object {
    private static int m_valueSize;
    private Dictionary`2<int, IndexTablePage> m_pageCache;
    private IndexTablePage m_queueFirstPage;
    private IndexTablePage m_queueLastPage;
    private long m_nextTempId;
    private int m_pageSize;
    private int m_cacheSize;
    private Stream m_stream;
    private IStreamHandler m_streamCreator;
    private long m_nextIdPageNum;
    private long m_nextIdPageSlot;
    private int m_slotsPerPage;
    private int m_idShift;
    public ReferenceID MaxId { get; }
    public IndexTable(IStreamHandler streamCreator, int pageSize, int cacheSize);
    public sealed virtual ReferenceID GenerateTempId();
    public sealed virtual ReferenceID GenerateId(ReferenceID tempId);
    public sealed virtual void Update(ReferenceID id, long value);
    public sealed virtual long Retrieve(ReferenceID id);
    public sealed virtual void Close();
    private IndexTablePage GetPage(long id);
    private long ReadValue(long id, IndexTablePage page);
    private void WriteValue(long id, IndexTablePage page, long value);
    private int CalcPageNum(long id);
    private long CalcPageOffset(long pageNum);
    private int CalcValueOffset(long id);
    public sealed virtual ReferenceID get_MaxId();
    private void QueueAppendPage(IndexTablePage page);
    private IndexTablePage QueueExtractFirst();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.IndexTablePage : object {
    internal Byte[] Buffer;
    internal bool Dirty;
    internal int PageNumber;
    internal IndexTablePage PreviousPage;
    internal IndexTablePage NextPage;
    public IndexTablePage(int size);
    public void Read(Stream stream);
    public void Write(Stream stream);
}
internal enum Microsoft.ReportingServices.OnDemandProcessing.Scalability.InQueueState : Enum {
    public byte value__;
    public static InQueueState None;
    public static InQueueState InQueue;
    public static InQueueState Exempt;
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference {
    public ReferenceID Id { get; }
    public abstract virtual IDisposable PinValue();
    public abstract virtual void UnPinValue();
    public abstract virtual void Free();
    public abstract virtual void UpdateSize(int sizeDeltaBytes);
    public abstract virtual ReferenceID get_Id();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference`1 {
    public abstract virtual T Value();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReferenceCreator {
    public abstract virtual bool TryCreateReference(IStorable refTarget, BaseReference& newReference);
    public abstract virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& newReference);
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IScalabilityCache {
    public long SerializationDurationMs { get; }
    public long DeserializationDurationMs { get; }
    public long ScalabilityDurationMs { get; }
    public long PeakMemoryUsageKBytes { get; }
    public ComponentType OwnerComponent { get; }
    public IStorage Storage { get; }
    public ScalabilityCacheType CacheType { get; }
    public abstract virtual IReference`1<T> Allocate(T obj, int priority);
    public abstract virtual IReference`1<T> AllocateAndPin(T obj, int priority);
    public abstract virtual IReference`1<T> GenerateFixedReference(T obj);
    public abstract virtual void Close();
    public abstract virtual int StoreStaticReference(object item);
    public abstract virtual object FetchStaticReference(int id);
    public abstract virtual IReference PoolReference(IReference reference);
    public abstract virtual long get_SerializationDurationMs();
    public abstract virtual long get_DeserializationDurationMs();
    public abstract virtual long get_ScalabilityDurationMs();
    public abstract virtual long get_PeakMemoryUsageKBytes();
    public abstract virtual ComponentType get_OwnerComponent();
    public abstract virtual IStorage get_Storage();
    public abstract virtual ScalabilityCacheType get_CacheType();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IScalabilityObjectCreator {
    public abstract virtual bool TryCreateObject(ObjectType objectType, IPersistable& newObject);
    public abstract virtual List`1<Declaration> GetDeclarations();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IScalableDictionaryEntry {
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.Scalability.IScopeReference : Reference`1<IScope> {
    public IScope Value();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.ISelfReferential {
    public abstract virtual void SetReference(IReference selfRef);
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.ISpaceManager {
    public long StreamEnd { get; public set; }
    public abstract virtual void Free(long offset, long size);
    public abstract virtual long AllocateSpace(long size);
    public abstract virtual long Resize(long offset, long oldSize, long newSize);
    public abstract virtual void Seek(long offset, SeekOrigin origin);
    public abstract virtual long get_StreamEnd();
    public abstract virtual void set_StreamEnd(long value);
    public abstract virtual void TraceStats();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable {
    public int ID { get; }
    public abstract virtual int get_ID();
    public abstract virtual void SetID(int id);
    public abstract virtual ObjectType GetObjectType();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStorable {
    public int Size { get; }
    public abstract virtual int get_Size();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStorage {
    public long StreamSize { get; }
    public IScalabilityCache ScalabilityCache { get; public set; }
    public IReferenceCreator ReferenceCreator { get; }
    public bool FreezeAllocations { get; public set; }
    public abstract virtual IPersistable Retrieve(long offset, Int64& persistedSize);
    public abstract virtual IPersistable Retrieve(long offset);
    public abstract virtual T Retrieve(long offset, Int64& persistedSize);
    public abstract virtual long Allocate(IPersistable obj);
    public abstract virtual void Free(long offset, int size);
    public abstract virtual long Update(IPersistable obj, long offset, long oldPersistedSize);
    public abstract virtual void Close();
    public abstract virtual void Flush();
    public abstract virtual long get_StreamSize();
    public abstract virtual IScalabilityCache get_ScalabilityCache();
    public abstract virtual void set_ScalabilityCache(IScalabilityCache value);
    public abstract virtual IReferenceCreator get_ReferenceCreator();
    public abstract virtual bool get_FreezeAllocations();
    public abstract virtual void set_FreezeAllocations(bool value);
    public abstract virtual void TraceStats();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStreamHandler {
    public abstract virtual Stream OpenStream();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ItemHolder : object {
    internal ItemHolder Previous;
    internal ItemHolder Next;
    internal IStorable Item;
    internal BaseReference Reference;
    internal InQueueState InQueue;
    internal virtual int ComputeSizeForReference();
    internal int BaseSize();
}
internal static class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ItemSizes : object {
    public static int BoolSize;
    public static int ByteSize;
    public static int SByteSize;
    public static int Int16Size;
    public static int UInt16Size;
    public static int Int32Size;
    public static int UInt32Size;
    public static int Int64Size;
    public static int UInt64Size;
    public static int CharSize;
    public static int DoubleSize;
    public static int SingleSize;
    public static int DecimalSize;
    public static int DateTimeSize;
    public static int TimeSpanSize;
    public static int DateTimeOffsetSize;
    public static int GuidSize;
    public static int Int32EnumSize;
    public static int NullableOverhead;
    public static int ListOverhead;
    public static int ArrayOverhead;
    public static int HashtableOverhead;
    public static int HashtableEntryOverhead;
    public static int ReferenceSize;
    public static int NullableBoolSize;
    public static int NullableByteSize;
    public static int NullableSByteSize;
    public static int NullableInt16Size;
    public static int NullableUInt16Size;
    public static int NullableInt32Size;
    public static int NullableUInt32Size;
    public static int NullableInt64Size;
    public static int NullableUInt64Size;
    public static int NullableCharSize;
    public static int NullableDoubleSize;
    public static int NullableSingleSize;
    public static int NullableDecimalSize;
    public static int NullableDateTimeSize;
    public static int NullableGuidSize;
    public static int NullableTimeSpanSize;
    public static int GdiColorSize;
    public static int ObjectOverhead;
    private static ItemSizes();
    public static int PointerAlign(int size);
    public static int SizeOf(IStorable obj);
    public static int SizeOf(ScalableList`1<T> obj);
    public static int SizeOf(List`1<T> list);
    public static int SizeOf(List`1<List`1<T>> listOfLists);
    public static int SizeOf(List`1<object> list);
    public static int SizeOf(T[] array);
    public static int SizeOf(Object[] array);
    public static int SizeOf(Int32[] obj);
    public static int SizeOf(Int64[] obj);
    public static int SizeOf(Double[] obj);
    public static int SizeOf(Boolean[] obj);
    public static int SizeOf(String[] obj);
    public static int SizeOf(Array arr);
    private static int TraverseArrayDim(Array arr, int dim, Int32[] indices);
    public static int SizeOf(List`1<string> obj);
    public static int SizeOf(List`1<int> obj);
    public static int SizeOf(List`1[] obj);
    public static int SizeOf(List`1[] obj);
    public static int SizeOf(List`1<T[]> obj);
    public static int SizeOf(Hashtable obj);
    public static int SizeOf(Dictionary`2<K, V> obj);
    public static int SizeOf(IList obj);
    public static int SizeOf(string str);
    public static int SizeOf(object obj);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.LinkedBucketedQueue`1 : object {
    private QueueBucket<T> m_firstBucket;
    private QueueBucket<T> m_lastBucket;
    private int m_count;
    private int m_bucketSize;
    private int m_insertIndex;
    private int m_removeIndex;
    internal int Count { get; }
    internal LinkedBucketedQueue`1(int bucketSize);
    internal int get_Count();
    internal void Enqueue(T item);
    internal T Dequeue();
    private void RemoveFirstBucket();
    internal void Clear();
    public IDecumulator`1<T> GetDecumulator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.LinkedLRUCache`1 : object {
    private int m_count;
    private ItemHolder m_sentinal;
    public int Count { get; }
    public void Add(ItemHolder item);
    public void Bump(ItemHolder item);
    public T ExtractLRU();
    public void Remove(ItemHolder item);
    public T Peek();
    public void Clear();
    public int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.LinkedPriorityQueue`1 : object {
    private static int QueueBucketSize;
    private SortedDictionary`2<int, PriorityLevel<T>> m_priorityLevels;
    private bool m_pendingDecumulatorCommit;
    internal int LevelCount { get; }
    internal void Enqueue(T item, int priority);
    internal T Dequeue();
    internal IDecumulator`1<T> GetDecumulator();
    internal void Clear();
    internal int get_LevelCount();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.PageBufferedStream : Stream {
    private int m_bytesPerPage;
    private int m_pageCacheCapacity;
    private Stream m_stream;
    private Dictionary`2<long, CachePage> m_pageCache;
    private CachePage m_firstPageToEvict;
    private CachePage m_lastPageToEvict;
    private long m_position;
    private long m_length;
    private bool m_freezePageAllocations;
    public bool FreezePageAllocations { get; public set; }
    internal int PageCount { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PageBufferedStream(Stream stream, int bytesPerPage, int cachePageCount);
    public bool get_FreezePageAllocations();
    public void set_FreezePageAllocations(bool value);
    internal int get_PageCount();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Close();
    private void UpdatePosition(long moveBy);
    private CachePage GetPage(long fileOffset);
    private void FlushPage(CachePage page, long pageNum);
    private long CalcPageNum(long fileOffset);
    private long CalcPageOffset(long pageNum);
    private int CalcOffsetWithinPage(long fileOffset);
}
internal static class Microsoft.ReportingServices.OnDemandProcessing.Scalability.PrimeHelper : object {
    private static Int32[] m_primes;
    private static Int32[0...,0...] m_hashInputs;
    private static PrimeHelper();
    internal static int GetPrime(int level);
    internal static int GetHashInputA(int level);
    internal static int GetHashInputB(int level);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.PromoteLocalitySpaceManager : object {
    private long m_blockSize;
    private long m_position;
    private long m_streamEnd;
    private List`1<FileBlock> m_blocks;
    public long StreamEnd { get; public set; }
    internal PromoteLocalitySpaceManager(long blockSize);
    public sealed virtual void Seek(long offset, SeekOrigin origin);
    private FileBlock GetBlock(long offset);
    private FileBlock GetOrCreateBlock(long offset);
    public sealed virtual void Free(long offset, long size);
    public sealed virtual long AllocateSpace(long size);
    private long SearchBlock(long offset, long size);
    public sealed virtual long Resize(long offset, long oldSize, long newSize);
    public sealed virtual long get_StreamEnd();
    public sealed virtual void set_StreamEnd(long value);
    public sealed virtual void TraceStats();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.Scalability.Reference`1 : BaseReference {
    private sealed virtual override T Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<T>.Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ReferenceID : ValueType {
    private static long IsTemporaryMask;
    private static ulong HasMultiPartMask;
    private static long PartitionIDMask;
    public static long MinimumValidTempID;
    public static long MaximumValidOffset;
    public static int SizeInBytes;
    private long m_value;
    internal long Value { get; internal set; }
    internal bool HasMultiPart { get; internal set; }
    internal bool IsTemporary { get; internal set; }
    internal int PartitionID { get; internal set; }
    internal ReferenceID(long value);
    internal long get_Value();
    internal void set_Value(long value);
    internal bool get_HasMultiPart();
    internal void set_HasMultiPart(bool value);
    internal bool get_IsTemporary();
    internal void set_IsTemporary(bool value);
    internal int get_PartitionID();
    internal void set_PartitionID(int value);
    public static bool op_Equality(ReferenceID id1, ReferenceID id2);
    public static bool op_Inequality(ReferenceID id1, ReferenceID id2);
    public static bool op_LessThan(ReferenceID id1, ReferenceID id2);
    public static bool op_GreaterThan(ReferenceID id1, ReferenceID id2);
    public static bool op_LessThanOrEqual(ReferenceID id1, ReferenceID id2);
    public static bool op_GreaterThanOrEqual(ReferenceID id1, ReferenceID id2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ReferenceIDEqualityComparer : object {
    internal static ReferenceIDEqualityComparer Instance;
    private static ReferenceIDEqualityComparer();
    public sealed virtual bool Equals(ReferenceID x, ReferenceID y);
    public sealed virtual int GetHashCode(ReferenceID obj);
    public sealed virtual int Compare(ReferenceID x, ReferenceID y);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ReportInstanceReference : ScopeInstanceReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual ReportInstance Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RIFAppendOnlyStorage : object {
    private Stream m_stream;
    private IntermediateFormatWriter m_writer;
    private IntermediateFormatReader m_reader;
    private IScalabilityCache m_scalabilityCache;
    private bool m_writerSetup;
    private IStreamHandler m_streamCreator;
    private IReferenceCreator m_referenceCreator;
    private UnifiedObjectCreator m_unifiedObjectCreator;
    private bool m_fromExistingStream;
    private GlobalIDOwnerCollection m_globalIdsFromOtherStream;
    private bool m_atEnd;
    private long m_streamLength;
    internal bool FromExistingStream { get; }
    public long StreamSize { get; }
    public IScalabilityCache ScalabilityCache { get; public set; }
    public IReferenceCreator ReferenceCreator { get; }
    public bool FreezeAllocations { get; public set; }
    internal RIFAppendOnlyStorage(IStreamHandler streamHandler, IScalabilityObjectCreator appObjectCreator, IReferenceCreator appReferenceCreator, GlobalIDOwnerCollection globalIdsFromOtherStream, bool fromExistingStream);
    private void SetupStorage();
    public sealed virtual IPersistable Retrieve(long offset, Int64& persistedSize);
    public sealed virtual IPersistable Retrieve(long offset);
    public sealed virtual T Retrieve(long offset, Int64& persistedSize);
    public sealed virtual long Allocate(IPersistable obj);
    public sealed virtual void Free(long offset, int size);
    public sealed virtual long Update(IPersistable obj, long offset, long oldPersistedSize);
    public sealed virtual void Close();
    public sealed virtual void Flush();
    internal bool get_FromExistingStream();
    internal void Reset(IStreamHandler streamHandler);
    public sealed virtual long get_StreamSize();
    public sealed virtual IScalabilityCache get_ScalabilityCache();
    public sealed virtual void set_ScalabilityCache(IScalabilityCache value);
    public sealed virtual IReferenceCreator get_ReferenceCreator();
    public sealed virtual bool get_FreezeAllocations();
    public sealed virtual void set_FreezeAllocations(bool value);
    public sealed virtual void TraceStats();
    public sealed virtual void Dispose();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RIFStorage : object {
    private PageBufferedStream m_stream;
    private MemoryStream m_memoryStream;
    private IntermediateFormatWriter m_writer;
    private IntermediateFormatReader m_reader;
    private int m_bufferPageSize;
    private int m_bufferPageCount;
    private int m_tempStreamSize;
    private IScalabilityCache m_scalabilityCache;
    private IStreamHandler m_streamCreator;
    private ISpaceManager m_spaceManager;
    private IReferenceCreator m_referenceCreator;
    private UnifiedObjectCreator m_unifiedObjectCreator;
    private bool m_fromExistingStream;
    private GlobalIDOwnerCollection m_globalIdsFromOtherStream;
    private bool m_freezeAllocations;
    public long StreamSize { get; }
    public IScalabilityCache ScalabilityCache { get; public set; }
    public IReferenceCreator ReferenceCreator { get; }
    public bool FreezeAllocations { get; public set; }
    public RIFStorage(IStreamHandler streamHandler, int bufferPageSize, int bufferPageCount, int tempStreamSize, ISpaceManager spaceManager, IScalabilityObjectCreator appObjectCreator, IReferenceCreator appReferenceCreator, GlobalIDOwnerCollection globalIdsFromOtherStream, bool fromExistingStream);
    private void SetupStorage();
    public sealed virtual IPersistable Retrieve(long offset);
    public sealed virtual IPersistable Retrieve(long offset, Int64& persistedSize);
    public sealed virtual T Retrieve(long offset, Int64& persistedSize);
    private long CalculatePersistedSize(IPersistable item, long offset);
    public sealed virtual long Allocate(IPersistable obj);
    private long SeekToFreeSpace(long size);
    public long ReserveSpace(int length);
    public sealed virtual long Update(IPersistable obj, long offset, long oldPersistedSize);
    private long WriteObject(IPersistable obj, long offset, long oldSize);
    public sealed virtual void Free(long offset, int size);
    public sealed virtual void Close();
    public sealed virtual void Flush();
    public sealed virtual void Dispose();
    private void Seek(long offset, SeekOrigin origin);
    public sealed virtual long get_StreamSize();
    public sealed virtual IScalabilityCache get_ScalabilityCache();
    public sealed virtual void set_ScalabilityCache(IScalabilityCache value);
    public sealed virtual IReferenceCreator get_ReferenceCreator();
    public sealed virtual bool get_FreezeAllocations();
    public sealed virtual void set_FreezeAllocations(bool value);
    public sealed virtual void TraceStats();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeCellReference : IScopeReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeCell Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeChartCriCellReference : RuntimeCellReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeChartCriCell Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeChartCriGroupLeafObjReference : RuntimeDataTablixGroupLeafObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeChartCriGroupLeafObj Value();
    private sealed virtual override ISortDataHolder Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder>.Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeChartCriObjReference : RuntimeDataTablixObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeChartCriObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeChartObjReference : RuntimeChartCriObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeChartObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeCriObjReference : RuntimeChartCriObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeCriObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeDataRegionObjReference : IScopeReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeDataRegionObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeDataTablixGroupLeafObjReference : RuntimeGroupLeafObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeDataTablixGroupLeafObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeDataTablixGroupRootObjReference : RuntimeGroupRootObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeDataTablixGroupRootObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeDataTablixMemberObjReference : RuntimeMemberObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeDataTablixMemberObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeDataTablixObjReference : RuntimeRDLDataRegionObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeDataTablixObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeDetailObjReference : RuntimeHierarchyObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeDetailObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeGaugePanelObjReference : RuntimeChartCriObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeGaugePanelObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeGroupLeafObjReference : RuntimeGroupObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeGroupLeafObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeGroupObjReference : RuntimeHierarchyObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeGroupObj Value();
    private sealed virtual override IFilterOwner Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.ReportProcessing.ReportProcessing.IFilterOwner>.Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeGroupRootObjReference : RuntimeGroupObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeGroupRootObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeHierarchyObjReference : RuntimeDataRegionObjReference {
    public virtual ObjectType GetObjectType();
    private sealed virtual override IHierarchyObj Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj>.Value();
    public sealed virtual RuntimeHierarchyObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeMemberObjReference : Reference`1<RuntimeMemberObj> {
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeOnDemandDataSetReference : IScopeReference {
    public virtual ObjectType GetObjectType();
    private sealed virtual override IHierarchyObj Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj>.Value();
    public sealed virtual RuntimeOnDemandDataSet Value();
    private sealed virtual override IFilterOwner Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.ReportProcessing.ReportProcessing.IFilterOwner>.Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeRDLDataRegionObjReference : RuntimeDataRegionObjReference {
    public virtual ObjectType GetObjectType();
    private sealed virtual override IHierarchyObj Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj>.Value();
    public sealed virtual RuntimeRDLDataRegionObj Value();
    private sealed virtual override IDataRowSortOwner Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IDataRowSortOwner>.Value();
    private sealed virtual override IFilterOwner Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.ReportProcessing.ReportProcessing.IFilterOwner>.Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeReferenceCreator : object {
    private static RuntimeReferenceCreator m_instance;
    internal static RuntimeReferenceCreator Instance { get; }
    private static RuntimeReferenceCreator();
    internal static RuntimeReferenceCreator get_Instance();
    public sealed virtual bool TryCreateReference(IStorable refTarget, BaseReference& newReference);
    public sealed virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& reference);
    private bool TryMapObjectTypeToReferenceType(ObjectType targetType, ObjectType& referenceType);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeSortDataHolderReference : Reference`1<RuntimeSortDataHolder> {
    public virtual ObjectType GetObjectType();
    private sealed virtual override ISortDataHolder Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder>.Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeSortHierarchyObjReference : Reference`1<IHierarchyObj> {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeSortHierarchyObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeTablixCellReference : RuntimeCellReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeTablixCell Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeTablixGroupLeafObjReference : RuntimeDataTablixGroupLeafObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeTablixGroupLeafObj Value();
    private sealed virtual override ISortDataHolder Microsoft.ReportingServices.OnDemandProcessing.Scalability.IReference<Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder>.Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeTablixMemberObjReference : RuntimeDataTablixMemberObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeTablixMemberObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.RuntimeTablixObjReference : RuntimeDataTablixObjReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual RuntimeTablixObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalabilityCache : BaseScalabilityCache {
    private static long CacheExpansionIntervalMs;
    private static double CacheExpansionRatio;
    private static int ID_NULL;
    public static int ID_NOREF;
    private LinkedLRUCache`1<StorageItem> m_cachePriority;
    private SegmentedDictionary`2<ReferenceID, StorageItem> m_cacheLookup;
    private IIndexStrategy m_offsetMap;
    private Dictionary`2<int, StaticReferenceHolder> m_staticReferences;
    private Dictionary`2<object, int> m_staticIdLookup;
    public ScalabilityCacheType CacheType { get; }
    protected long InternalFreeableBytes { get; }
    public ScalabilityCache(IStorage storage, IIndexStrategy indexStrategy, ComponentType ownerComponent, long minReservedMemoryBytes, string executionId);
    public virtual IReference`1<T> Allocate(T obj, int priority);
    public virtual IReference`1<T> AllocateAndPin(T obj, int priority);
    private IReference`1<T> InternalAllocate(T obj, int priority, bool startPinned);
    public virtual void Dispose();
    public virtual IReference`1<T> GenerateFixedReference(T obj);
    public virtual int StoreStaticReference(object item);
    private int InternalStoreStaticReference(int id, object item);
    public virtual object FetchStaticReference(int id);
    public virtual IReference PoolReference(IReference reference);
    internal virtual void UpdateTargetSize(BaseReference reference, int sizeDeltaBytes);
    public virtual ScalabilityCacheType get_CacheType();
    internal virtual void ReferenceSerializeCallback(BaseReference reference);
    internal virtual void Free(BaseReference reference);
    internal virtual IStorable Retrieve(BaseReference reference);
    internal virtual void Pin(BaseReference reference);
    internal virtual void UnPin(BaseReference reference);
    protected virtual long get_InternalFreeableBytes();
    internal bool CacheTryGetValue(ReferenceID id, StorageItem& item);
    internal bool CacheRemoveValue(ReferenceID id);
    internal void CacheSetValue(ReferenceID id, StorageItem value);
    private StorageItem LoadItem(BaseReference reference);
    private void CacheItem(BaseReference reference, StorageItem item, bool fromDeserialize);
    private void CacheItem(BaseReference reference, IStorable value, int priority);
    private void EnqueueItem(StorageItem item);
    protected virtual void FulfillInProgressFree();
}
internal enum Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalabilityCacheType : Enum {
    public int value__;
    public static ScalabilityCacheType Standard;
    public static ScalabilityCacheType GroupTree;
}
internal static class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalabilityConstants : object {
    public static int BytesPerMB;
    public static int BytesPerKB;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalableDictionary`2 : object {
    private int m_nodeCapacity;
    private int m_valuesCapacity;
    [StaticReferenceAttribute]
private IEqualityComparer`1<TKey> m_comparer;
    private int m_count;
    private int m_version;
    private ScalableDictionaryNodeReference m_root;
    private bool m_useFixedReferences;
    private int m_priority;
    private IScalabilityCache m_scalabilityCache;
    private ScalableDictionaryKeysCollection<TKey, TValue> m_keysCollection;
    private ScalableDictionaryValuesCollection<TKey, TValue> m_valuesCollection;
    private static Declaration m_declaration;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public IEqualityComparer`1<TKey> Comparer { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public int Size { get; }
    internal ScalableDictionary`2(int priority, IScalabilityCache cache);
    internal ScalableDictionary`2(int priority, IScalabilityCache cache, int nodeCapacity, int entryCapacity);
    internal ScalableDictionary`2(int priority, IScalabilityCache cache, int nodeCapacity, int entryCapacity, IEqualityComparer`1<TKey> comparer);
    internal ScalableDictionary`2(int priority, IScalabilityCache cache, int nodeCapacity, int entryCapacity, IEqualityComparer`1<TKey> comparer, bool useFixedReferences);
    private static ScalableDictionary`2();
    public sealed virtual void Add(TKey key, TValue value);
    public IDisposable AddAndPin(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public IEqualityComparer`1<TKey> get_Comparer();
    public bool ContainsValue(TValue value);
    public bool TryGetAndPin(TKey key, TValue& value, IDisposable& reference);
    public IDisposable GetAndPin(TKey key, TValue& value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void FreeChildren(ScalableDictionaryNodeReference nodeRef);
    private ScalableDictionaryNodeReference BuildNode(int level, int capacity);
    private bool Insert(ScalableDictionaryNodeReference nodeRef, int hashCode, TKey key, TValue value, bool add, int level, bool updateSize, IDisposable& cleanupRef);
    private int HashToSlot(ScalableDictionaryNode node, int hashCode, int level);
    private bool Find(ScalableDictionaryNodeReference nodeRef, int hashCode, TKey key, int level, TValue& value, IDisposable& containingNodeRef);
    private bool Remove(ScalableDictionaryNodeReference nodeRef, int hashCode, TKey key, int level, Int32& newCount);
    public sealed virtual int get_Size();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalableDictionaryNode : object {
    internal IScalableDictionaryEntry[] Entries;
    internal int Count;
    private static Declaration m_declaration;
    public int Size { get; }
    internal ScalableDictionaryNode(int capacity);
    private static ScalableDictionaryNode();
    public sealed virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalableDictionaryNodeReference : Reference`1<ScalableDictionaryNode> {
    public virtual ObjectType GetObjectType();
    public ScalableDictionaryNode Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalableDictionaryValues : object {
    private Object[] m_keys;
    private Object[] m_values;
    private int m_count;
    private static Declaration m_declaration;
    public Object[] Keys { get; }
    public Object[] Values { get; }
    public int Count { get; public set; }
    public int Capacity { get; }
    public int Size { get; }
    public ScalableDictionaryValues(int capacity);
    private static ScalableDictionaryValues();
    public Object[] get_Keys();
    public Object[] get_Values();
    public int get_Count();
    public void set_Count(int value);
    public int get_Capacity();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalableHybridList`1 : object {
    internal static int InvalidIndex;
    private int m_count;
    private ScalableList`1<ScalableHybridListEntry> m_entries;
    private int m_first;
    private int m_last;
    private int m_firstFree;
    private int m_version;
    internal int Count { get; }
    internal T Item { get; }
    internal int First { get; }
    internal int Last { get; }
    internal ScalableHybridList`1(int scalabilityPriority, IScalabilityCache cache, int segmentSize, int initialCapacity);
    internal int Add(T item);
    internal void Remove(int index);
    internal int get_Count();
    internal T get_Item(int index);
    internal int get_First();
    internal int get_Last();
    internal int Next(int index);
    internal int Previous(int index);
    public sealed virtual void Dispose();
    internal void Clear();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void SetupLastNode(ScalableHybridListEntry entry, T item);
    private ScalableHybridListEntry GetAndCheckEntry(int index);
    private void CheckNonFreeEntry(ScalableHybridListEntry entry, int index);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalableHybridListEntry : object {
    internal object Item;
    internal int Next;
    internal int Previous;
    private static Declaration m_declaration;
    public int Size { get; }
    private static ScalableHybridListEntry();
    public sealed virtual int get_Size();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScalableList`1 : object {
    private IScalabilityCache m_cache;
    private int m_bucketSize;
    private int m_count;
    private int m_capacity;
    private int m_priority;
    private ScalableList`1<IReference`1<StorableArray>> m_buckets;
    private IReference`1<StorableArray> m_array;
    private int m_version;
    private bool m_isReadOnly;
    private bool m_keepPinnedUntilFull;
    private static Declaration m_declaration;
    public T Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public int Capacity { get; }
    public bool IsReadOnly { get; }
    public int Size { get; }
    internal ScalableList`1(int priority, IScalabilityCache cache);
    internal ScalableList`1(int priority, IScalabilityCache cache, int segmentSize);
    internal ScalableList`1(int priority, IScalabilityCache cache, int segmentSize, int capacity);
    private static ScalableList`1();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T itemToInsert);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    private void SetValue(int index, T value, bool fromAdd);
    public IDisposable GetAndPin(int index, T& item);
    public IDisposable AddAndPin(T item);
    public IDisposable SetAndPin(int index, T item);
    private IDisposable SetAndPin(int index, T item, bool fromAdd);
    public void RemoveRange(int index, int count);
    public int BinarySearch(T value, IComparer comparer);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private void CheckIndex(int index, int inclusiveLimit);
    private void CheckReadOnly(string operation);
    private int GetBucketIndex(int index);
    private int GetIndexInBucket(int index);
    private void EnsureCapacity(int count);
    private void UnPinContainingBucket(int index);
    private void PinContainingBucket(int index, UnPinCascadeHolder cascadeHolder);
    private void InternalCopyTo(Array array, int arrayIndex);
    public sealed virtual void Add(T item);
    private void CheckFilledBucket();
    public void AddRange(IEnumerable`1<T> collection);
    public void AddRange(IList`1<T> list);
    public sealed virtual void Clear();
    public void UnPinAll();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public int get_Capacity();
    public sealed virtual bool get_IsReadOnly();
    public void SetReadOnly();
    public sealed virtual bool Remove(T item);
    private bool Remove(T item, int baseIndex, Object[] array, int limit, IEqualityComparer`1<T> comparer);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Dispose();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.ScopeInstanceReference : Reference`1<ScopeInstance> {
    public virtual ObjectType GetObjectType();
    public ScopeInstance Value();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.SegmentedDictionary`2 : object {
    private int m_nodeCapacity;
    private int m_valuesCapacity;
    private IEqualityComparer`1<TKey> m_comparer;
    private int m_count;
    private int m_version;
    private SegmentedDictionaryNode<TKey, TValue> m_root;
    private SegmentedDictionaryKeysCollection<TKey, TValue> m_keysCollection;
    private SegmentedDictionaryValuesCollection<TKey, TValue> m_valuesCollection;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public IEqualityComparer`1<TKey> Comparer { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal SegmentedDictionary`2(int priority, IScalabilityCache cache);
    internal SegmentedDictionary`2(int nodeCapacity, int entryCapacity);
    internal SegmentedDictionary`2(int nodeCapacity, int entryCapacity, IEqualityComparer`1<TKey> comparer);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public IEqualityComparer`1<TKey> get_Comparer();
    public bool ContainsValue(TValue value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private SegmentedDictionaryNode<TKey, TValue> BuildNode(int level, int capacity);
    private bool Insert(SegmentedDictionaryNode<TKey, TValue> node, int hashCode, TKey key, TValue value, bool add, int level);
    private int HashToSlot(SegmentedDictionaryNode<TKey, TValue> node, int hashCode, int level);
    private bool Find(SegmentedDictionaryNode<TKey, TValue> node, int hashCode, TKey key, int level, TValue& value);
    private bool Remove(SegmentedDictionaryNode<TKey, TValue> node, int hashCode, TKey key, int level, Int32& newCount);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.SimpleReference`1 : Reference`1<T> {
    private ObjectType m_objectType;
    internal SimpleReference`1(ObjectType referenceType);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.SortedBucket : object {
    internal int Limit;
    internal int Minimum;
    internal Heap`2<long, Space> m_spaces;
    internal int Count { get; }
    internal int Maximum { get; }
    internal SortedBucket(int maxSpacesPerBucket);
    internal SortedBucket Split(int maxSpacesPerBucket);
    internal void Insert(Space space);
    internal Space Peek();
    internal Space ExtractMax();
    internal int get_Count();
    internal int get_Maximum();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.SortExpressionScopeInstanceHolderReference : Reference`1<IHierarchyObj> {
    public virtual ObjectType GetObjectType();
    public sealed virtual SortExpressionScopeInstanceHolder Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.SortFilterExpressionScopeObjReference : Reference`1<IHierarchyObj> {
    public virtual ObjectType GetObjectType();
    public sealed virtual SortFilterExpressionScopeObj Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.Space : ValueType {
    internal long Offset;
    internal long Size;
    internal Space(long freeOffset, long freeSize);
}
[AttributeUsageAttribute("256")]
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.StaticReferenceAttribute : Attribute {
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.StaticReferenceHolder : object {
    public object Value;
    public int RefCount;
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.StorableArray : object {
    internal Object[] Array;
    private static Declaration m_declaration;
    public int Size { get; }
    private static StorableArray();
    public sealed virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.StorageItem : ItemHolder {
    internal int Priority;
    internal ReferenceID Id;
    internal long PersistedSize;
    private int m_size;
    internal int PinCount;
    internal bool HasBeenUnPinned;
    internal long Offset;
    private LinkedBucketedQueue`1<BaseReference> m_otherReferences;
    private static Declaration m_declaration;
    public int Size { get; }
    internal int ActiveReferenceCount { get; }
    public StorageItem(ReferenceID id, int priority, IStorable item);
    private static StorageItem();
    public void AddReference(BaseReference newReference);
    public sealed virtual int get_Size();
    internal int get_ActiveReferenceCount();
    public int UpdateSize();
    internal virtual int ComputeSizeForReference();
    public void UpdateSize(int sizeDeltaBytes);
    public void Flush(IStorage storage, IIndexStrategy indexStrategy);
    internal void UnlinkReferences(bool updateId);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    [SkipMemberStaticValidationAttribute("716")]
internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.StorageObjectCreator : object {
    private static List`1<Declaration> m_declarations;
    private static StorageObjectCreator m_instance;
    internal static StorageObjectCreator Instance { get; }
    private static StorageObjectCreator();
    public sealed virtual bool TryCreateObject(ObjectType objectType, IPersistable& persistObj);
    public sealed virtual List`1<Declaration> GetDeclarations();
    internal static StorageObjectCreator get_Instance();
    private static List`1<Declaration> BuildDeclarations();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.SubReportInstanceReference : ScopeInstanceReference {
    public virtual ObjectType GetObjectType();
    public sealed virtual SubReportInstance Value();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.UnifiedObjectCreator : object {
    private IScalabilityObjectCreator[] m_objectCreators;
    private IReferenceCreator[] m_referenceCreators;
    private IScalabilityCache m_scalabilityCache;
    internal IScalabilityCache ScalabilityCache { get; internal set; }
    internal UnifiedObjectCreator(IScalabilityObjectCreator appObjectCreator, IReferenceCreator appReferenceCreator);
    public sealed virtual IPersistable CreateRIFObject(ObjectType objectType, IntermediateFormatReader& context);
    internal List`1<Declaration> GetDeclarations();
    internal IScalabilityCache get_ScalabilityCache();
    internal void set_ScalabilityCache(IScalabilityCache value);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.UnifiedReferenceCreator : object {
    private IReferenceCreator[] m_referenceCreators;
    internal UnifiedReferenceCreator(IReferenceCreator appReferenceCreator);
    public sealed virtual bool TryCreateReference(IStorable refTarget, BaseReference& newReference);
    public sealed virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& newReference);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.Scalability.UnPinCascadeHolder : object {
    private List`1<IDisposable> m_cleanupRefs;
    internal void AddCleanupRef(IDisposable cleanupRef);
    public sealed virtual void Dispose();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.SubReportInitializer : object {
    internal static void InitializeSubReportOdpContext(Report report, OnDemandProcessingContext parentOdpContext);
    internal static bool InitializeSubReports(Report report, ReportInstance reportInstance, OnDemandProcessingContext odpContext, bool inDataRegion, bool fromCreateSubReportInstance);
    internal static bool InitializeSubReport(SubReport subReport);
    private static OnDemandProcessingContext InitializeSubReport(OnDemandProcessingContext parentOdpContext, SubReport subReport, ReportInstance reportInstance, bool inDataRegion, bool fromCreateSubReportInstance, Boolean& prefetchSuccess);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.AggregateRow : DataFieldRow {
    private bool m_isAggregateRow;
    private int m_aggregationFieldCount;
    private bool m_validAggregateRow;
    private static Declaration m_declaration;
    public int Size { get; }
    internal AggregateRow(FieldsImpl fields, bool getAndSave);
    private static AggregateRow();
    internal virtual void SetFields(FieldsImpl fields);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.AggregateRowInfo : object {
    private Boolean[] m_aggregationFieldChecked;
    private int m_aggregationFieldCount;
    private bool m_validAggregateRow;
    internal void SaveAggregateInfo(OnDemandProcessingContext odpContext);
    internal void RestoreAggregateInfo(OnDemandProcessingContext odpContext);
    internal void CombineAggregateInfo(OnDemandProcessingContext odpContext, AggregateRowInfo updated);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.BTree : object {
    private BTreeNode m_root;
    private ScalableList`1<BTreeNode> m_nodes;
    private IReference`1<IHierarchyObj> m_owner;
    private static Declaration m_declaration;
    public int Size { get; }
    internal BTree(IReference`1<IHierarchyObj> owner, OnDemandProcessingContext odpContext, int level);
    private static BTree();
    internal void NextRow(object keyValue);
    internal void Traverse(ProcessingStages operation, bool ascending, ITraversalContext traversalContext);
    public sealed virtual void Dispose();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    internal static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.BTreeNode : object {
    private static int BTreeOrder;
    private BTreeNodeTupleList m_tuples;
    private int m_indexInParent;
    private static Declaration m_declaration;
    unknown int IndexInParent {internal set; }
    internal BTreeNodeTupleList Tuples { get; }
    public int Size { get; }
    internal BTreeNode(IReference`1<IHierarchyObj> owner);
    private static BTreeNode();
    internal void set_IndexInParent(int value);
    internal BTreeNodeTupleList get_Tuples();
    internal void Traverse(ProcessingStages operation, bool ascending, ScalableList`1<BTreeNode> nodes, ITraversalContext traversalContext);
    internal void SetFirstChild(ScalableList`1<BTreeNode> nodes, int childIndex);
    private BTreeNodeValue CreateBTreeNode(object key, IReference`1<IHierarchyObj> ownerRef);
    internal bool SearchAndInsert(object keyValue, ScalableList`1<BTreeNode> nodes, IReference`1<IHierarchyObj> ownerRef, BTreeNodeValue& newSiblingValue, Int32& newSiblingIndex, Int32& globalNewSiblingIndex);
    private bool InsertBTreeNode(ScalableList`1<BTreeNode> nodes, BTreeNodeValue nodeValueToInsert, int nodeIndexToInsert, int globalNodeIndexToInsert, IReference`1<IHierarchyObj> ownerRef, BTreeNodeValue& newSiblingValue, Int32& newSiblingIndex, Int32& globalNewSibingIndex);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    internal static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.BTreeNodeDataRow : BTreeNodeValue {
    private object m_key;
    private DataFieldRow m_firstRow;
    private ScalableList`1<DataFieldRow> m_dataRows;
    private static Declaration m_declaration;
    protected object Key { get; }
    public int Size { get; }
    internal BTreeNodeDataRow(object key, IReference`1<IHierarchyObj> ownerRef);
    private static BTreeNodeDataRow();
    protected virtual object get_Key();
    internal virtual void AddRow(IReference`1<IHierarchyObj> ownerRef);
    internal virtual void Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    private void Traverse(DataFieldRow dataRow, DataRowSortOwnerTraversalContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.BTreeNodeHierarchyObj : BTreeNodeValue {
    private object m_key;
    private IReference`1<IHierarchyObj> m_hierarchyNode;
    private static Declaration m_declaration;
    protected object Key { get; }
    public int Size { get; }
    internal BTreeNodeHierarchyObj(object key, IReference`1<IHierarchyObj> owner);
    private static BTreeNodeHierarchyObj();
    protected virtual object get_Key();
    internal virtual void AddRow(IReference`1<IHierarchyObj> owner);
    internal virtual void Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.BTreeNodeTuple : object {
    private BTreeNodeValue m_value;
    private int m_childIndex;
    private static Declaration m_declaration;
    internal BTreeNodeValue Value { get; }
    internal int ChildIndex { get; internal set; }
    public int Size { get; }
    internal BTreeNodeTuple(BTreeNodeValue value, int childIndex);
    private static BTreeNodeTuple();
    internal BTreeNodeValue get_Value();
    internal int get_ChildIndex();
    internal void set_ChildIndex(int value);
    internal void Traverse(ProcessingStages operation, bool ascending, ScalableList`1<BTreeNode> nodeList, ITraversalContext traversalContext);
    internal void VisitChild(ProcessingStages operation, bool ascending, ScalableList`1<BTreeNode> nodeList, ITraversalContext traversalContext);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    internal static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.BTreeNodeTupleList : object {
    private List`1<BTreeNodeTuple> m_list;
    private int m_capacity;
    private static Declaration m_declaration;
    internal BTreeNodeTuple Item { get; }
    internal int Count { get; }
    public int Size { get; }
    internal BTreeNodeTupleList(int capacity);
    private static BTreeNodeTupleList();
    internal BTreeNodeTuple get_Item(int index);
    internal int get_Count();
    internal void Add(BTreeNodeTuple tuple, ScalableList`1<BTreeNode> nodes);
    internal void Insert(int index, BTreeNodeTuple tuple, ScalableList`1<BTreeNode> nodes);
    internal void RemoveAtEnd();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.BTreeNodeValue : object {
    protected object Key { get; }
    public int Size { get; }
    internal abstract virtual void AddRow(IReference`1<IHierarchyObj> ownerRef);
    internal abstract virtual void Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    internal int CompareTo(object keyValue, OnDemandProcessingContext odpContext);
    protected abstract virtual object get_Key();
    public abstract virtual void Serialize(IntermediateFormatWriter writer);
    public abstract virtual void Deserialize(IntermediateFormatReader reader);
    public abstract virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public abstract virtual ObjectType GetObjectType();
    public abstract virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ChildLeafInfo : List`1<RuntimeGroupLeafObjReference> {
    private static Declaration m_declaration;
    public int Size { get; }
    private static ChildLeafInfo();
    public sealed virtual int get_Size();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.CreateInstancesTraversalContext : object {
    private ScopeInstance m_parentInstance;
    private IReference`1[] m_innerMembers;
    private IReference`1<RuntimeDataTablixGroupLeafObj> m_innerGroupLeafRef;
    internal ScopeInstance ParentInstance { get; }
    internal IReference`1[] InnerMembers { get; }
    internal IReference`1<RuntimeDataTablixGroupLeafObj> InnerGroupLeafRef { get; }
    internal CreateInstancesTraversalContext(ScopeInstance parentInstance, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeafRef);
    internal ScopeInstance get_ParentInstance();
    internal IReference`1[] get_InnerMembers();
    internal IReference`1<RuntimeDataTablixGroupLeafObj> get_InnerGroupLeafRef();
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.DataActions : Enum {
    public int value__;
    public static DataActions None;
    public static DataActions RecursiveAggregates;
    public static DataActions PostSortAggregates;
    public static DataActions UserSort;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.DataFieldRow : object {
    protected FieldImpl[] m_fields;
    protected long m_streamOffset;
    private static Declaration m_declaration;
    internal static long UnInitializedStreamOffset;
    internal FieldImpl Item { get; }
    internal long StreamOffset { get; }
    public int Size { get; }
    internal DataFieldRow(FieldsImpl fields, bool getAndSave);
    private static DataFieldRow();
    internal virtual void SetFields(FieldsImpl fields);
    internal FieldImpl get_Item(int index);
    internal long get_StreamOffset();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.DataRowSortOwnerTraversalContext : object {
    private IDataRowSortOwner m_sortOwner;
    internal IDataRowSortOwner SortOwner { get; }
    internal DataRowSortOwnerTraversalContext(IDataRowSortOwner sortOwner);
    internal IDataRowSortOwner get_SortOwner();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IDataRowSortOwner {
    public OnDemandProcessingContext OdpContext { get; }
    public abstract virtual void PostDataRowSortNextRow();
    public abstract virtual void DataRowSortTraverse();
    public abstract virtual OnDemandProcessingContext get_OdpContext();
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj {
    public IReference`1<IHierarchyObj> HierarchyRoot { get; }
    public OnDemandProcessingContext OdpContext { get; }
    public BTree SortTree { get; public set; }
    public int ExpressionIndex { get; }
    public int Depth { get; }
    public List`1<int> SortFilterInfoIndices { get; }
    public bool IsDetail { get; }
    public bool InDataRowSortPhase { get; }
    public IReference`1<IHierarchyObj> SelfReference { get; }
    public abstract virtual IReference`1<IHierarchyObj> get_HierarchyRoot();
    public abstract virtual OnDemandProcessingContext get_OdpContext();
    public abstract virtual BTree get_SortTree();
    public abstract virtual void set_SortTree(BTree value);
    public abstract virtual int get_ExpressionIndex();
    public abstract virtual int get_Depth();
    public abstract virtual List`1<int> get_SortFilterInfoIndices();
    public abstract virtual bool get_IsDetail();
    public abstract virtual bool get_InDataRowSortPhase();
    public abstract virtual IReference`1<IHierarchyObj> get_SelfReference();
    public abstract virtual IReference`1<IHierarchyObj> CreateHierarchyObj();
    public abstract virtual ProcessingMessageList RegisterComparisonError(string propertyName);
    public abstract virtual void NextRow();
    public abstract virtual void Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    public abstract virtual void ReadRow();
    public abstract virtual void ProcessUserSort();
    public abstract virtual void MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    public abstract virtual void AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope {
    public bool TargetForNonDetailSort { get; }
    public Int32[] SortFilterExpressionScopeInfoIndices { get; }
    public int Depth { get; }
    public IRIFReportScope RIFReportScope { get; }
    public abstract virtual bool get_TargetForNonDetailSort();
    public abstract virtual Int32[] get_SortFilterExpressionScopeInfoIndices();
    public abstract virtual int get_Depth();
    public abstract virtual IRIFReportScope get_RIFReportScope();
    public abstract virtual bool IsTargetForSort(int index, bool detailSort);
    public abstract virtual bool TargetScopeMatched(int index, bool detailSort);
    public abstract virtual void GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    public abstract virtual void CalculatePreviousAggregates();
    public abstract virtual void ReadRow(DataActions dataAction);
    public abstract virtual bool InScope(string scope);
    public abstract virtual IReference`1<IScope> GetOuterScope(bool includeSubReportContainingScope);
    public abstract virtual string GetScopeName();
    public abstract virtual int RecursiveLevel(string scope);
    public abstract virtual void GetGroupNameValuePairs(Dictionary`2<string, object> pairs);
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder {
    public abstract virtual void NextRow();
    public abstract virtual void Traverse(ProcessingStages operation, ITraversalContext traversalContext);
}
internal interface Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ITraversalContext {
}
internal enum Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ProcessingStages : Enum {
    public int value__;
    public static ProcessingStages Grouping;
    public static ProcessingStages SortAndFilter;
    public static ProcessingStages PreparePeerGroupRunningValues;
    public static ProcessingStages RunningValues;
    public static ProcessingStages UserSortFilter;
    public static ProcessingStages CreateGroupTree;
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeCell : object {
    protected RuntimeDataTablixGroupLeafObjReference m_owner;
    protected int m_cellLevel;
    protected List`1<int> m_rowIndexes;
    protected List`1<int> m_colIndexes;
    protected List`1<DataAggregateObj> m_cellNonCustomAggObjs;
    protected List`1<DataAggregateObj> m_cellCustomAggObjs;
    protected DataAggregateObjResult[] m_cellAggValueList;
    protected DataAggregateObjResult[][0...,0...] m_runningValueValues;
    protected ScalableList`1<DataFieldRow> m_dataRows;
    protected bool m_innermost;
    protected DataFieldRow m_firstRow;
    protected bool m_firstRowIsAggregate;
    private int m_nextCell;
    protected Int32[] m_sortFilterExpressionScopeInfoIndices;
    protected RuntimeCellReference m_selfReference;
    private static Declaration m_declaration;
    internal int NextCell { get; internal set; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.TargetForNonDetailSort { get; }
    private Int32[] Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.SortFilterExpressionScopeInfoIndices { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.RIFReportScope { get; }
    private int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.Depth { get; }
    internal RuntimeCellReference SelfReference { get; }
    public int Size { get; }
    internal RuntimeCell(RuntimeDataTablixGroupLeafObjReference owner, int cellLevel, ReportHierarchyNode outerGroupingMember, ReportHierarchyNode innerGroupingMember, bool innermost);
    private static RuntimeCell();
    internal int get_NextCell();
    internal void set_NextCell(int value);
    protected abstract virtual void ConstructCellContents(Cell cell, DataActions& dataAction);
    protected abstract virtual void CreateInstanceCellContents(Cell cell, DataCellInstance cellInstance);
    internal virtual void NextRow();
    private void NextNonAggregateRow();
    private void NextAggregateRow();
    internal virtual void SortAndFilter();
    protected void HandleSortFilterEvent();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal void DoneReadingRows();
    protected virtual void CalculateInnerRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    private void CalculatePreviousAggregates();
    private void ReadRows();
    protected void SetupAggregates(List`1<DataAggregateObj> aggregates, DataAggregateObjResult[] aggValues);
    protected void SetupEnvironment();
    internal virtual void CreateInstance(IMemberHierarchy dataRegionOrRowMemberInstance, int columnMemberSequenceId);
    private Dictionary`2<string, Grouping> GetOuterScopes();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_TargetForNonDetailSort();
    private sealed virtual override Int32[] Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_SortFilterExpressionScopeInfoIndices();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_RIFReportScope();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.IsTargetForSort(int index, bool detailSort);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetScopeName();
    private sealed virtual override IReference`1<IScope> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetOuterScope(bool includeSubReportContainingScope);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.ReadRow(DataActions dataAction);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.CalculatePreviousAggregates();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.InScope(string scope);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.RecursiveLevel(string scope);
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.TargetScopeMatched(int index, bool detailSort);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_Depth();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetGroupNameValuePairs(Dictionary`2<string, object> pairs);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    internal RuntimeCellReference get_SelfReference();
    public sealed virtual void SetReference(IReference selfRef);
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeCells : object {
    private int m_firstCellKey;
    private int m_lastCellKey;
    private Dictionary`2<int, IStorable> m_collection;
    private static Declaration m_declaration;
    public int Count { get; }
    public int Size { get; }
    internal RuntimeCells(int priority, IScalabilityCache cache);
    private static RuntimeCells();
    internal void AddCell(int key, RuntimeCell cell);
    internal void AddCell(int key, IReference`1<RuntimeCell> cellRef);
    private void InternalAdd(int key, IStorable cell);
    public int get_Count();
    internal RuntimeCell GetCell(int key, IDisposable& cleanupRef);
    internal RuntimeCell GetOrCreateCell(DataRegion dataRegionDef, IReference`1<RuntimeDataTablixGroupLeafObj> ownerRef, IReference`1<RuntimeDataTablixGroupRootObj> currOuterGroupRootRef, IDisposable& cleanupRef);
    internal void SortAndFilter();
    internal void CalculateRunningValues(DataRegion dataRegionDef, Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup, IReference`1<RuntimeDataTablixGroupLeafObj> owner);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeChartCriCell : RuntimeCell {
    private static Declaration m_declaration;
    internal RuntimeChartCriCell(RuntimeChartCriGroupLeafObjReference owner, int cellLevel, ReportHierarchyNode outerGroupingMember, ReportHierarchyNode innerGroupingMember, bool innermost);
    private static RuntimeChartCriCell();
    protected virtual void ConstructCellContents(Cell cell, DataActions& dataAction);
    protected virtual void CreateInstanceCellContents(Cell cell, DataCellInstance cellInstance);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeChartCriGroupLeafObj : RuntimeDataTablixGroupLeafObj {
    private static Declaration m_declaration;
    internal RuntimeChartCriGroupLeafObj(RuntimeDataTablixGroupRootObjReference groupRootRef, ObjectType objectType);
    private static RuntimeChartCriGroupLeafObj();
    protected virtual void ConstructOutermostCellContents(Cell cell);
    protected virtual void SendToInner();
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues();
    protected virtual IReference`1<RuntimeMemberObj> CreateRuntimeMemberObject(IReference`1<IScope> owner, ReportHierarchyNode dynamicMemberDef, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    internal virtual void CreateCell(RuntimeCells cellsCollection, int collectionKey, int index, ReportHierarchyNode outerGroupingMember, ReportHierarchyNode innerGroupingMember, DataRegion dataRegionDef);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeChartCriObj : RuntimeDataTablixObj {
    private static Declaration m_declaration;
    internal RuntimeChartCriObj(IReference`1<IScope> outerScope, DataRegion dataRegionDef, DataActions& dataAction, OnDemandProcessingContext odpContext, bool onePassProcess, ObjectType objectType);
    private static RuntimeChartCriObj();
    protected virtual void SendToInner();
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeChartObj : RuntimeChartCriObj {
    private static Declaration m_declaration;
    internal RuntimeChartObj(IReference`1<IScope> outerScope, Chart chartDef, DataActions& dataAction, OnDemandProcessingContext odpContext, bool onePassProcess);
    private static RuntimeChartObj();
    protected virtual IReference`1<RuntimeMemberObj> CreateRuntimeMemberObject(IReference`1<IScope> owner, ReportHierarchyNode dynamicMemberDef, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeCriObj : RuntimeChartCriObj {
    private static Declaration m_declaration;
    internal RuntimeCriObj(IReference`1<IScope> outerScope, CustomReportItem criDef, DataActions& dataAction, OnDemandProcessingContext odpContext, bool onePassProcess);
    private static RuntimeCriObj();
    protected virtual IReference`1<RuntimeMemberObj> CreateRuntimeMemberObject(IReference`1<IScope> owner, ReportHierarchyNode dynamicMemberDef, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeDataRegionObj : object {
    [StaticReferenceAttribute]
protected OnDemandProcessingContext m_odpContext;
    protected bool m_processedPreviousAggregates;
    protected ObjectType m_objectType;
    protected RuntimeDataRegionObjReference m_selfReference;
    protected int m_depth;
    private static Declaration m_declaration;
    public RuntimeDataRegionObjReference SelfReference { get; }
    internal OnDemandProcessingContext OdpContext { get; }
    protected IReference`1<IScope> OuterScope { get; }
    protected string ScopeName { get; }
    internal bool TargetForNonDetailSort { get; }
    protected Int32[] SortFilterExpressionScopeInfoIndices { get; }
    internal ObjectType ObjectType { get; }
    public int Depth { get; }
    internal IRIFReportScope RIFReportScope { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.TargetForNonDetailSort { get; }
    private Int32[] Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.SortFilterExpressionScopeInfoIndices { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.RIFReportScope { get; }
    public int Size { get; }
    protected RuntimeDataRegionObj(OnDemandProcessingContext odpContext, ObjectType objectType, int depth);
    protected RuntimeDataRegionObj(RuntimeDataRegionObjReference outerDataRegion, ObjectType objectType, int depth);
    private static RuntimeDataRegionObj();
    public RuntimeDataRegionObjReference get_SelfReference();
    internal OnDemandProcessingContext get_OdpContext();
    protected abstract virtual IReference`1<IScope> get_OuterScope();
    protected virtual string get_ScopeName();
    internal virtual bool get_TargetForNonDetailSort();
    protected virtual Int32[] get_SortFilterExpressionScopeInfoIndices();
    internal virtual bool IsTargetForSort(int index, bool detailSort);
    internal ObjectType get_ObjectType();
    public sealed virtual int get_Depth();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal abstract virtual void NextRow();
    internal abstract virtual bool SortAndFilter();
    internal abstract virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal abstract virtual void SetupEnvironment();
    internal abstract virtual void CalculatePreviousAggregates();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_TargetForNonDetailSort();
    private sealed virtual override Int32[] Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_SortFilterExpressionScopeInfoIndices();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_RIFReportScope();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.IsTargetForSort(int index, bool detailSort);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.ReadRow(DataActions dataAction);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.CalculatePreviousAggregates();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.InScope(string scope);
    private sealed virtual override IReference`1<IScope> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetOuterScope(bool includeSubReportContainingScope);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetScopeName();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.RecursiveLevel(string scope);
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.TargetScopeMatched(int index, bool detailSort);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetGroupNameValuePairs(Dictionary`2<string, object> pairs);
    internal static void AddAggregate(List`1& aggregates, DataAggregateObj aggregate);
    internal static void CreateAggregates(OnDemandProcessingContext odpContext, List`1<DataAggregateInfo> aggDefs, List`1& nonCustomAggregates, List`1& customAggregates);
    internal static void CreateAggregates(OnDemandProcessingContext odpContext, List`1<DataAggregateInfo> aggDefs, List`1<int> aggregateIndexes, List`1& nonCustomAggregates, List`1& customAggregates);
    internal static void CreateAggregates(OnDemandProcessingContext odpContext, List`1<AggregateType> aggDefs, List`1& aggregates);
    internal static void CreateAggregates(OnDemandProcessingContext odpContext, List`1<AggregateType> aggDefs, List`1<int> aggregateIndexes, List`1& aggregates);
    internal static void UpdateAggregates(OnDemandProcessingContext odpContext, List`1<DataAggregateObj> aggregates, bool updateAndSetup);
    protected void SetupAggregates(List`1<DataAggregateObj> aggregates);
    protected void SetupEnvironment(List`1<DataAggregateObj> nonCustomAggregates, List`1<DataAggregateObj> customAggregates, DataFieldRow dataRow);
    protected void SetupFields(DataFieldRow dataRow);
    protected void SetupRunningValues(List`1<RunningValueInfo> rvDefs, DataAggregateObjResult[] rvValues);
    private static void SetupRunningValues(OnDemandProcessingContext odpContext, Int32& startIndex, List`1<RunningValueInfo> rvDefs, DataAggregateObjResult[] rvValues);
    internal abstract virtual void ReadRow(DataActions dataAction);
    internal abstract virtual bool InScope(string scope);
    protected Hashtable GetScopeNames(RuntimeDataRegionObjReference currentScope, string targetScope, Boolean& inScope);
    protected Hashtable GetScopeNames(RuntimeDataRegionObjReference currentScope, string targetScope, Int32& level);
    protected Hashtable GetScopeNames(RuntimeDataRegionObjReference currentScope, Dictionary`2<string, object> nameValuePairs);
    internal static void AddGroupNameValuePair(OnDemandProcessingContext odpContext, Grouping grouping, Dictionary`2<string, object> nameValuePairs);
    protected bool DataRegionInScope(DataRegion dataRegionDef, string scope);
    protected virtual int GetRecursiveLevel(string scope);
    protected virtual IReference`1<RuntimeMemberObj> CreateRuntimeMemberObject(IReference`1<IScope> owner, ReportHierarchyNode dynamicMemberDef, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    protected int DataRegionRecursiveLevel(DataRegion dataRegionDef, string scope);
    protected void DataRegionGetGroupNameValuePairs(DataRegion dataRegionDef, Dictionary`2<string, object> nameValuePairs);
    protected void ScopeNextNonAggregateRow(List`1<DataAggregateObj> aggregates, ScalableList`1<DataFieldRow> dataRows);
    internal static void CommonFirstRow(OnDemandProcessingContext odpContext, Boolean& firstRowIsAggregate, DataFieldRow& firstRow);
    protected void CommonNextRow(ScalableList`1<DataFieldRow> dataRows);
    protected virtual void SendToInner();
    protected void ScopeNextAggregateRow(RuntimeUserSortTargetInfo sortTargetInfo);
    protected void ScopeFinishSorting(DataFieldRow& firstRow, RuntimeUserSortTargetInfo sortTargetInfo);
    internal virtual bool TargetScopeMatched(int index, bool detailSort);
    internal virtual void GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    protected void ReleaseDataRows(DataActions finishedDataAction, DataActions& dataAction, ScalableList`1& dataRows);
    protected void DetailHandleSortFilterEvent(DataRegion dataRegionDef, IReference`1<IScope> outerScope, bool isColumnAxis, int rowIndex);
    protected void DetailGetScopeValues(IReference`1<IScope> outerScope, IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    protected bool DetailTargetScopeMatched(DataRegion dataRegionDef, IReference`1<IScope> outerScope, bool isColumnAxis, int index);
    protected virtual void GetGroupNameValuePairs(Dictionary`2<string, object> pairs);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
    public virtual void SetReference(IReference selfRef);
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeDataTablixGroupLeafObj : RuntimeGroupLeafObj {
    protected IReference`1[] m_memberObjs;
    protected bool m_hasInnerHierarchy;
    protected List`1<DataAggregateObj> m_firstPassCellNonCustomAggs;
    protected List`1<DataAggregateObj> m_firstPassCellCustomAggs;
    protected RuntimeCells[] m_cellsList;
    protected List`1<DataAggregateObj> m_cellPostSortAggregates;
    protected int m_groupLeafIndex;
    protected bool m_processHeading;
    protected DataRegionMemberInstance m_memberInstance;
    protected int m_sequentialMemberIndexWithinScopeLevel;
    protected List`1<int> m_outermostColumnIndexes;
    protected List`1<int> m_outermostRowIndexes;
    protected DataAggregateObjResult[] m_runningValueValues;
    protected DataAggregateObjResult[] m_cellRunningValueValues;
    protected int m_instanceIndex;
    private static Declaration m_declaration;
    internal List`1<DataAggregateObj> CellPostSortAggregates { get; }
    internal DataRegion DataRegionDef { get; }
    internal int HeadingLevel { get; }
    internal int InstanceIndex { get; }
    protected bool HasInnerStaticMembersInSameScope { get; }
    public int Size { get; }
    internal RuntimeDataTablixGroupLeafObj(RuntimeDataTablixGroupRootObjReference groupRoot, ObjectType objectType);
    private static RuntimeDataTablixGroupLeafObj();
    internal List`1<DataAggregateObj> get_CellPostSortAggregates();
    internal DataRegion get_DataRegionDef();
    internal int get_HeadingLevel();
    internal int get_InstanceIndex();
    protected bool get_HasInnerStaticMembersInSameScope();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder.NextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder.Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    private void CalculateDetailSortRunningValues();
    private void UpdateSortFilterInfo(RuntimeGroupRootObj detailRoot, bool isColumnAxis, int rootRowCount);
    protected void ConstructorHelper(RuntimeDataTablixGroupRootObj groupRoot, DataRegion dataRegionDef, Boolean& handleMyDataAction, DataActions& innerDataAction);
    private bool CreateCellAggregates(DataRegion dataRegionDef, int rowIndex, int colIndex);
    protected abstract virtual void ConstructOutermostCellContents(Cell cell);
    protected virtual void ConstructRuntimeStructure(Boolean& handleMyDataAction, DataActions& innerDataAction);
    private void CreateRuntimeCells(RuntimeDataTablixGroupRootObj outerGroupRoot);
    internal abstract virtual void CreateCell(RuntimeCells cellsCollection, int collectionKey, int index, ReportHierarchyNode outerGroupingMember, ReportHierarchyNode innerGroupingMember, DataRegion dataRegionDef);
    internal virtual void NextRow();
    internal void PeerOuterGroupProcessCells();
    protected virtual void SendToInner();
    private void ProcessCells();
    internal virtual void GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    internal virtual bool TargetScopeMatched(int index, bool detailSort);
    internal virtual bool SortAndFilter();
    protected static void CalculateInnerRunningValues(IReference`1[] memberObjs, Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    protected virtual void PrepareCalculateRunningValues();
    internal virtual void CalculateRunningValues();
    protected void StoreCalculatedRunningValues();
    protected virtual void ResetScopedRunningValues();
    internal virtual void ReadRow(DataActions dataAction);
    internal virtual void SetupEnvironment();
    private void SetupAggregateValues(List`1<DataAggregateObj> nonCustomAggCollection, List`1<DataAggregateObj> customAggCollection);
    protected virtual void CreateInstanceHeadingContents();
    internal virtual void CreateInstance(CreateInstancesTraversalContext traversalContext);
    internal void CreateInnerGroupingsOrCells(DataRegionInstance dataRegionInstance, ScopeInstance parentInstance, IReference`1<RuntimeDataTablixGroupRootObj> currOuterGroupRoot, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeafRef);
    protected virtual void CreateCellInstance(DataRegionInstance dataRegionInstance, IReference`1<RuntimeDataTablixGroupRootObj> currOuterGroupRoot);
    internal virtual void CreateStaticCells(DataRegionInstance dataRegionInstance, ScopeInstance parentInstance, IReference`1<RuntimeDataTablixGroupRootObj> currOuterGroupRoot, bool outerGroupings, List`1<int> staticLeafCellIndexes, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeafRef);
    protected virtual void CreateOutermostStatics(IMemberHierarchy dataRegionOrRowMemberInstance, int columnMemberSequenceId);
    protected virtual void CreateOutermostStaticCellContents(Cell cell, DataCellInstance cellInstance);
    private void SetupAggregateValues();
    private void SetupEnvironmentForOuterGroupings();
    internal bool GetCellTargetForNonDetailSort();
    internal bool GetCellTargetForSort(int index, bool detailSort);
    internal bool NeedHandleCellSortFilterEvent();
    internal IReference`1<RuntimeDataTablixObj> GetOwnerDataTablix();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeDataTablixGroupRootObj : RuntimeGroupRootObj {
    private List`1<int> m_recursiveParentIndexes;
    private IReference`1[] m_innerGroupings;
    private List`1<string> m_cellRVs;
    private List`1<string> m_staticCellRVs;
    private List`1<string> m_cellPreviousValues;
    private List`1<string> m_staticCellPreviousValues;
    private int m_headingLevel;
    private bool m_outermostStatics;
    private bool m_hasLeafCells;
    private bool m_processOutermostStaticCells;
    private bool m_processStaticCellsForRVs;
    private int m_currentMemberIndexWithinScopeLevel;
    private DataRegionMemberInstance m_currentMemberInstance;
    private static Declaration m_declaration;
    internal IReference`1[] InnerGroupings { get; }
    internal int HeadingLevel { get; }
    internal bool OutermostStatics { get; }
    internal bool ProcessOutermostStaticCells { get; }
    internal bool HasLeafCells { get; }
    internal object CurrentGroupExpressionValue { get; }
    internal int CurrentMemberIndexWithinScopeLevel { get; internal set; }
    internal DataRegionMemberInstance CurrentMemberInstance { get; internal set; }
    public int Size { get; }
    internal RuntimeDataTablixGroupRootObj(IReference`1<IScope> outerScope, ReportHierarchyNode dynamicMember, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, bool outermostStatics, int headingLevel, ObjectType objectType);
    private static RuntimeDataTablixGroupRootObj();
    internal IReference`1[] get_InnerGroupings();
    internal int get_HeadingLevel();
    internal bool get_OutermostStatics();
    internal bool get_ProcessOutermostStaticCells();
    internal bool get_HasLeafCells();
    internal object get_CurrentGroupExpressionValue();
    internal int get_CurrentMemberIndexWithinScopeLevel();
    internal void set_CurrentMemberIndexWithinScopeLevel(int value);
    internal DataRegionMemberInstance get_CurrentMemberInstance();
    internal void set_CurrentMemberInstance(DataRegionMemberInstance value);
    private void NeedProcessDataActions(HierarchyNodeList members);
    private void NeedProcessDataActions(ReportHierarchyNode memberDefinition);
    private void NeedProcessDataActions(List`1<RunningValueInfo> runningValues);
    protected virtual void UpdateDataRegionGroupRootInfo();
    internal virtual bool SortAndFilter();
    internal virtual void PrepareCalculateRunningValues();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    private void AddCellRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, List`1& runningValues, List`1& previousValues, bool outermostStatics);
    internal virtual void CalculatePreviousAggregates();
    internal virtual void ReadRow(DataActions dataAction);
    internal void DoneReadingRows(DataAggregateObjResult[]& runningValueValues, DataAggregateObjResult[]& cellRunningValueValues);
    internal void SetupCellRunningValues(DataAggregateObjResult[] cellRunningValueValues);
    internal bool GetCellTargetForNonDetailSort();
    internal bool GetCellTargetForSort(int index, bool detailSort);
    internal int GetRecursiveParentIndex(int recursiveLevel);
    internal void SetRecursiveParentIndex(int instanceIndex, int recursiveLevel);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeDataTablixMemberObj : RuntimeMemberObj {
    private bool m_hasStaticMembers;
    private List`1<int> m_staticLeafCellIndexes;
    private static Declaration m_declaration;
    public int Size { get; }
    internal RuntimeDataTablixMemberObj(IReference`1<IScope> owner, ReportHierarchyNode dynamicMember, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel, ObjectType objectType);
    private static RuntimeDataTablixMemberObj();
    protected virtual void InitializeStaticHeading(ReportHierarchyNode staticMember, OnDemandProcessingContext odpContext, DataActions& dataAction);
    protected virtual void SetupEnvironment(OnDemandProcessingContext odpContext);
    protected virtual void CreateStaticHeadingInstances(ScopeInstance parentInstance);
    internal virtual void CreateInstances(IReference`1<RuntimeDataRegionObj> containingScopeRef, OnDemandProcessingContext odpContext, DataRegionInstance dataRegionInstance, bool isOuterGrouping, IReference`1<RuntimeDataTablixGroupRootObj> currOuterGroupRoot, ScopeInstance parentInstance, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeaf);
    private void CreateCells(IReference`1<RuntimeDataRegionObj> containingScopeRef, OnDemandProcessingContext odpContext, DataRegionInstance dataRegionInstance, bool isOuterGroup, IReference`1<RuntimeDataTablixGroupRootObj> currOuterGroupRoot, ScopeInstance parentInstance, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeafRef);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeDataTablixObj : RuntimeRDLDataRegionObj {
    protected Int32[] m_outerGroupingCounters;
    protected IReference`1[] m_outerGroupings;
    protected IReference`1[] m_innerGroupings;
    protected List`1<IReference`1<RuntimeDataTablixGroupLeafObj>> m_innerGroupsWithCellsForOuterPeerGroupProcessing;
    protected bool m_staticCorner;
    [ReferenceAttribute]
protected List`1<Cell> m_staticCornerCells;
    private static Declaration m_declaration;
    internal Int32[] OuterGroupingCounters { get; }
    internal List`1<IReference`1<RuntimeDataTablixGroupLeafObj>> InnerGroupsWithCellsForOuterPeerGroupProcessing { get; }
    public int Size { get; }
    internal RuntimeDataTablixObj(IReference`1<IScope> outerScope, DataRegion dataTablixDef, DataActions& dataAction, OnDemandProcessingContext odpContext, bool onePassProcess, ObjectType objectType);
    private static RuntimeDataTablixObj();
    internal Int32[] get_OuterGroupingCounters();
    internal List`1<IReference`1<RuntimeDataTablixGroupLeafObj>> get_InnerGroupsWithCellsForOuterPeerGroupProcessing();
    protected void ConstructorHelper(DataActions& dataAction, bool onePassProcess, Boolean& handleMyDataAction, DataActions& innerDataAction);
    protected virtual void ConstructRuntimeStructure(DataActions& innerDataAction, bool onePassProcess);
    protected virtual void ConstructTopLevelStaticCellRuntimeMemberObjects(Cell topLevelStaticCell, DataActions& innerDataAction);
    protected void CreateRuntimeMemberObjects(HierarchyNodeList outerMembers, HierarchyNodeList innerMembers, HierarchyNodeList& outerTopLevelStaticMembers, HierarchyNodeList& innerTopLevelStaticMembers, DataActions& innerDataAction);
    private void CreateTopLevelRuntimeGroupings(DataActions& groupingDataAction, IReference`1[]& groupings, HierarchyNodeList topLevelStaticMembers, HierarchyNodeList topLevelDynamicMembers, IReference`1[] innerGroupings, bool hasOppositeStaticLeafMembers);
    protected void HandleDataAction(bool handleMyDataAction, DataActions innerDataAction, DataActions userSortDataAction);
    protected virtual void SendToInner();
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal static void AddRunningValues(OnDemandProcessingContext odpContext, List`1<RunningValueInfo> runningValues, List`1& runningValuesInGroup, List`1& previousValuesInGroup, Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCollection, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal static void SaveData(ScalableList`1<DataFieldRow> dataRows, OnDemandProcessingContext odpContext);
    internal virtual void CalculatePreviousAggregates();
    private void CalculateDRPreviousAggregates();
    internal virtual void ReadRow(DataActions dataAction);
    internal virtual void SetupEnvironment();
    internal virtual bool InScope(string scope);
    protected virtual int GetRecursiveLevel(string scope);
    internal void CreateOutermostStaticCells(DataRegionInstance dataRegionInstance, bool outerGroupings, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeafRef);
    protected virtual void CreateTopLevelStaticCellContents(DataRegionInstance dataRegionInstance);
    private bool OutermostSTCellTargetScopeMatched(int index, IReference`1<RuntimeSortFilterEventInfo> sortFilterInfo);
    internal virtual bool TargetScopeMatched(int index, bool detailSort);
    internal virtual void GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    internal void CreateInstances(DataRegionInstance dataRegionInstance);
    protected virtual void CreateCornerInstance(DataRegionInstance dataRegionInstance);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeDetailObj : RuntimeHierarchyObj {
    protected IReference`1<IScope> m_outerScope;
    [StaticReferenceAttribute]
protected DataRegion m_dataRegionDef;
    protected ScalableList`1<DataFieldRow> m_dataRows;
    protected List`1<DataAggregateObjResult[]> m_rvValueList;
    protected List`1<string> m_runningValuesInGroup;
    protected List`1<string> m_previousValuesInGroup;
    protected Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> m_groupCollection;
    protected DataActions m_outerDataAction;
    private static Declaration m_declaration;
    public int Size { get; }
    protected RuntimeDetailObj(IReference`1<IScope> outerScope, DataRegion dataRegionDef, DataActions dataAction, OnDemandProcessingContext odpContext, ObjectType objectType);
    internal RuntimeDetailObj(RuntimeDetailObj detailRoot, ObjectType objectType);
    private static RuntimeDetailObj();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeDRCollection : object {
    private List`1<RuntimeDataRegionObjReference> m_dataRegionObjs;
    private OnDemandProcessingContext m_odpContext;
    internal RuntimeDRCollection(IReference`1<IScope> outerScope, List`1<DataRegion> dataRegionDefs, OnDemandProcessingContext odpContext, bool onePass);
    private void CreateDataRegions(IReference`1<IScope> outerScope, List`1<DataRegion> dataRegionDefs, bool onePass);
    internal void FirstPassNextDataRow();
    internal void SortAndFilter();
    internal void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCollection);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeGaugePanelObj : RuntimeChartCriObj {
    private static Declaration m_declaration;
    internal RuntimeGaugePanelObj(IReference`1<IScope> outerScope, GaugePanel gaugePanelDef, DataActions& dataAction, OnDemandProcessingContext odpContext, bool onePassProcess);
    private static RuntimeGaugePanelObj();
    protected virtual IReference`1<RuntimeMemberObj> CreateRuntimeMemberObject(IReference`1<IScope> owner, ReportHierarchyNode dynamicMemberDef, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeGroupingObj : object {
    private RuntimeHierarchyObj m_owner;
    private GroupingTypes m_type;
    private ScalableDictionary`2<object, IReference`1<RuntimeHierarchyObj>> m_hashtable;
    private BTree m_tree;
    private ScalableDictionary`2<object, ChildLeafInfo> m_parentInfo;
    private ObjectType m_objectType;
    private static Declaration m_declaration;
    internal BTree Tree { get; internal set; }
    unknown GroupingTypes GroupingType {internal set; }
    public int Size { get; }
    internal RuntimeGroupingObj(RuntimeHierarchyObj owner, GroupingTypes type, ObjectType objectType);
    private static RuntimeGroupingObj();
    internal BTree get_Tree();
    internal void set_Tree(BTree value);
    internal void set_GroupingType(GroupingTypes value);
    internal void NextRow(object keyValue);
    internal void NextRow(object keyValue, bool hasParent, object parentKey);
    internal void Traverse(ProcessingStages operation, bool ascending, ITraversalContext traversalContext);
    private void ProcessParent(object parentKey, IReference`1<RuntimeGroupLeafObj> parentObj, RuntimeGroupLeafObjReference childObj, bool addToWaitList);
    private ScalableDictionary`2<object, ChildLeafInfo> CreateParentInfo();
    private void ProcessChildren(object thisKey, IReference`1<RuntimeGroupLeafObj> parentObj, IReference`1<RuntimeGroupLeafObj> thisObj);
    internal void SetOwner(RuntimeHierarchyObj owner);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeGroupLeafObj : RuntimeGroupObj {
    protected List`1<DataAggregateObj> m_nonCustomAggregates;
    protected List`1<DataAggregateObj> m_customAggregates;
    protected DataFieldRow m_firstRow;
    protected bool m_firstRowIsAggregate;
    protected RuntimeGroupLeafObjReference m_nextLeaf;
    protected RuntimeGroupLeafObjReference m_prevLeaf;
    protected ScalableList`1<DataFieldRow> m_dataRows;
    protected IReference`1<RuntimeGroupObj> m_parent;
    protected List`1<DataAggregateObj> m_recursiveAggregates;
    protected List`1<DataAggregateObj> m_postSortAggregates;
    protected int m_recursiveLevel;
    protected List`1<object> m_groupExprValues;
    protected Boolean[] m_targetScopeMatched;
    protected DataActions m_dataAction;
    protected RuntimeUserSortTargetInfo m_userSortTargetInfo;
    protected Int32[] m_sortFilterExpressionScopeInfoIndices;
    protected Object[] m_variableValues;
    protected int m_detailRowCounter;
    protected List`1<IReference`1<IHierarchyObj>> m_detailSortAdditionalGroupLeafs;
    protected ReportHierarchyNode m_hierarchyDef;
    protected bool m_isOuterGrouping;
    private static Declaration m_declaration;
    internal bool IsOuterGrouping { get; }
    unknown RuntimeGroupLeafObjReference NextLeaf {internal set; }
    unknown RuntimeGroupLeafObjReference PrevLeaf {internal set; }
    internal IReference`1<RuntimeGroupObj> Parent { get; internal set; }
    protected IReference`1<IScope> OuterScope { get; }
    internal int RecursiveLevel { get; }
    internal ReportHierarchyNode MemberDef { get; }
    internal Grouping GroupingDef { get; }
    protected string ScopeName { get; }
    protected IReference`1<IHierarchyObj> HierarchyRoot { get; }
    protected BTree SortTree { get; protected set; }
    protected int ExpressionIndex { get; }
    protected List`1<int> SortFilterInfoIndices { get; }
    protected RuntimeGroupRootObjReference GroupRoot { get; }
    internal bool TargetForNonDetailSort { get; }
    protected Int32[] SortFilterExpressionScopeInfoIndices { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal int DetailSortRowCounter { get; }
    public int Size { get; }
    protected RuntimeGroupLeafObj(RuntimeGroupRootObjReference groupRootRef, ObjectType objectType);
    private static RuntimeGroupLeafObj();
    internal bool get_IsOuterGrouping();
    internal void set_NextLeaf(RuntimeGroupLeafObjReference value);
    internal void set_PrevLeaf(RuntimeGroupLeafObjReference value);
    internal IReference`1<RuntimeGroupObj> get_Parent();
    internal void set_Parent(IReference`1<RuntimeGroupObj> value);
    protected virtual IReference`1<IScope> get_OuterScope();
    internal virtual int get_RecursiveLevel();
    internal ReportHierarchyNode get_MemberDef();
    internal Grouping get_GroupingDef();
    protected virtual string get_ScopeName();
    protected virtual IReference`1<IHierarchyObj> get_HierarchyRoot();
    protected virtual BTree get_SortTree();
    protected virtual void set_SortTree(BTree value);
    protected virtual int get_ExpressionIndex();
    protected virtual List`1<int> get_SortFilterInfoIndices();
    protected RuntimeGroupRootObjReference get_GroupRoot();
    internal virtual bool get_TargetForNonDetailSort();
    protected virtual Int32[] get_SortFilterExpressionScopeInfoIndices();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal int get_DetailSortRowCounter();
    internal virtual bool IsTargetForSort(int index, bool detailSort);
    protected virtual void ConstructRuntimeStructure(Boolean& handleMyDataAction, DataActions& innerDataAction);
    protected bool HandleSortFilterEvent(bool isColumnAxis);
    internal virtual void GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    internal virtual bool TargetScopeMatched(int index, bool detailSort);
    internal virtual void NextRow();
    protected void UpdateAggregateInfo();
    protected void InternalNextRow();
    protected virtual void SendToInner();
    internal void RemoveFromParent(RuntimeGroupObjReference parentRef);
    private IReference`1<RuntimeGroupLeafObj> Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    internal void TraverseAllLeafNodes(ProcessingStages operation, ITraversalContext traversalContext);
    protected void TablixProcessingMoveNext(ProcessingStages operation);
    private void ProcessChildren(ProcessingStages operation, ITraversalContext traversalContext);
    private bool IsSpecialFilteringPass(ProcessingStages operation);
    internal virtual bool SortAndFilter();
    internal void FailFilter();
    internal void PostFilterNextRow();
    protected abstract virtual void PrepareCalculateRunningValues();
    internal virtual void CalculateRunningValues();
    internal virtual void ReadRow(DataActions dataAction);
    private void ReadRow(bool sendToParent);
    internal virtual void SetupEnvironment();
    internal void SetupGroupVariables();
    internal void CalculatePreviousAggregates(bool setupEnvironment);
    internal virtual void CalculatePreviousAggregates();
    protected void ReadRows(DataActions action);
    private void ReadRows(bool sendToParent);
    protected virtual void ResetScopedRunningValues();
    internal virtual bool InScope(string scope);
    protected virtual int GetRecursiveLevel(string scope);
    protected virtual void ProcessUserSort();
    protected virtual void MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    protected virtual void AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    protected virtual IReference`1<IHierarchyObj> CreateHierarchyObj();
    protected virtual void GetGroupNameValuePairs(Dictionary`2<string, object> pairs);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeGroupObj : RuntimeHierarchyObj {
    protected RuntimeGroupLeafObjReference m_lastChild;
    protected RuntimeGroupLeafObjReference m_firstChild;
    private static Declaration m_declaration;
    internal RuntimeGroupLeafObjReference LastChild { get; internal set; }
    internal RuntimeGroupLeafObjReference FirstChild { get; internal set; }
    internal int RecursiveLevel { get; }
    public int Size { get; }
    protected RuntimeGroupObj(OnDemandProcessingContext odpContext, ObjectType objectType, int level);
    private static RuntimeGroupObj();
    internal RuntimeGroupLeafObjReference get_LastChild();
    internal void set_LastChild(RuntimeGroupLeafObjReference value);
    internal RuntimeGroupLeafObjReference get_FirstChild();
    internal void set_FirstChild(RuntimeGroupLeafObjReference value);
    internal virtual int get_RecursiveLevel();
    internal void AddChild(RuntimeGroupLeafObjReference child);
    internal void InsertToSortTree(RuntimeGroupLeafObjReference groupLeaf);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeGroupRootObj : RuntimeGroupObj {
    protected ReportHierarchyNode m_hierarchyDef;
    protected IReference`1<IScope> m_outerScope;
    private ProcessingStages m_processingStage;
    protected List`1<string> m_scopedRunningValues;
    protected List`1<string> m_runningValuesInGroup;
    protected List`1<string> m_previousValuesInGroup;
    protected Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> m_groupCollection;
    protected DataActions m_dataAction;
    protected DataActions m_outerDataAction;
    protected GroupingTypes m_groupingType;
    [ReferenceAttribute]
protected Filters m_groupFilters;
    protected RuntimeExpressionInfo m_parentExpression;
    protected object m_currentGroupExprValue;
    protected bool m_saveGroupExprValues;
    protected Int32[] m_sortFilterExpressionScopeInfoIndices;
    private Boolean[] m_builtinSortOverridden;
    protected bool m_isDetailGroup;
    protected RuntimeUserSortTargetInfo m_detailUserSortTargetInfo;
    protected ScalableList`1<DataFieldRow> m_detailDataRows;
    private static Declaration m_declaration;
    internal ReportHierarchyNode HierarchyDef { get; }
    internal List`1<ExpressionInfo> GroupExpressions { get; }
    internal GroupExprHost GroupExpressionHost { get; }
    internal List`1<ExpressionInfo> SortExpressions { get; }
    internal SortExprHost SortExpressionHost { get; }
    internal List`1<bool> GroupDirections { get; }
    internal List`1<bool> SortDirections { get; }
    internal RuntimeExpressionInfo Expression { get; }
    internal List`1<string> ScopedRunningValues { get; }
    internal Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> GroupCollection { get; }
    internal DataActions DataAction { get; }
    internal ProcessingStages ProcessingStage { get; internal set; }
    internal DataRegionInstance DataRegionInstance { get; }
    internal GroupingTypes GroupingType { get; }
    internal Filters GroupFilters { get; }
    internal bool HasParent { get; }
    protected IReference`1<IScope> OuterScope { get; }
    internal IReference`1<IScope> GroupRootOuterScope { get; }
    internal bool SaveGroupExprValues { get; }
    internal bool IsDetailGroup { get; }
    protected bool IsDetail { get; }
    protected int ExpressionIndex { get; }
    protected List`1<int> SortFilterInfoIndices { get; }
    internal BTree GroupOrDetailSortTree { get; }
    protected BTree SortTree { get; protected set; }
    protected Int32[] SortFilterExpressionScopeInfoIndices { get; }
    internal IRIFReportScope RIFReportScope { get; }
    private bool BuiltinSortOverridden { get; }
    internal bool ProcessSecondPassSorting { get; }
    internal ScalableList`1<DataFieldRow> DetailDataRows { get; internal set; }
    public int Size { get; }
    protected RuntimeGroupRootObj(IReference`1<IScope> outerScope, ReportHierarchyNode hierarchyDef, DataActions dataAction, OnDemandProcessingContext odpContext, ObjectType objectType);
    private static RuntimeGroupRootObj();
    internal ReportHierarchyNode get_HierarchyDef();
    internal List`1<ExpressionInfo> get_GroupExpressions();
    internal GroupExprHost get_GroupExpressionHost();
    internal List`1<ExpressionInfo> get_SortExpressions();
    internal SortExprHost get_SortExpressionHost();
    internal List`1<bool> get_GroupDirections();
    internal List`1<bool> get_SortDirections();
    internal RuntimeExpressionInfo get_Expression();
    internal List`1<string> get_ScopedRunningValues();
    internal Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> get_GroupCollection();
    internal DataActions get_DataAction();
    internal ProcessingStages get_ProcessingStage();
    internal void set_ProcessingStage(ProcessingStages value);
    internal DataRegionInstance get_DataRegionInstance();
    internal GroupingTypes get_GroupingType();
    internal Filters get_GroupFilters();
    internal bool get_HasParent();
    protected virtual IReference`1<IScope> get_OuterScope();
    internal IReference`1<IScope> get_GroupRootOuterScope();
    internal bool get_SaveGroupExprValues();
    internal bool get_IsDetailGroup();
    protected virtual bool get_IsDetail();
    protected virtual int get_ExpressionIndex();
    protected virtual List`1<int> get_SortFilterInfoIndices();
    internal BTree get_GroupOrDetailSortTree();
    protected virtual BTree get_SortTree();
    protected virtual void set_SortTree(BTree value);
    protected virtual Int32[] get_SortFilterExpressionScopeInfoIndices();
    internal virtual IRIFReportScope get_RIFReportScope();
    private bool get_BuiltinSortOverridden();
    internal bool get_ProcessSecondPassSorting();
    internal ScalableList`1<DataFieldRow> get_DetailDataRows();
    internal void set_DetailDataRows(ScalableList`1<DataFieldRow> value);
    internal virtual void GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    internal virtual bool TargetScopeMatched(int index, bool detailSort);
    protected abstract virtual void UpdateDataRegionGroupRootInfo();
    internal virtual void NextRow();
    protected void ProcessDetailSort();
    internal IReference`1<IHierarchyObj> CreateDetailSortHierarchyObj(RuntimeGroupLeafObj rootSortDetailLeafObj);
    protected virtual IReference`1<IHierarchyObj> CreateHierarchyObj();
    protected virtual void ProcessUserSort();
    protected virtual void MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    protected virtual void AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    protected object EvaluateGroupExpression(RuntimeExpressionInfo expression, string propertyName);
    protected bool ProcessThisRow();
    internal void AddChildWithNoParent(RuntimeGroupLeafObjReference child);
    internal virtual bool SortAndFilter();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ReportProcessing.IFilterOwner.PostFilterNextRow();
    internal virtual void AddScopedRunningValue(DataAggregateObj runningValueObj);
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    protected void SetupRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol);
    protected void AddRunningValues(List`1<RunningValueInfo> runningValues);
    protected bool AddRunningValues(List`1<RunningValueInfo> runningValues, List`1& runningValuesInGroup, List`1& previousValuesInGroup, Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCollection, bool cellRunningValues, bool outermostStatics);
    private void AddRunningValue(RunningValueInfo runningValue, List`1<string> runningValuesInGroup, List`1<string> previousValuesInGroup, Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCollection);
    internal virtual void CalculatePreviousAggregates();
    internal virtual void ReadRow(DataActions dataAction);
    internal void CreateInstances(ScopeInstance parentInstance, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeafRef);
    protected void TraverseGroupOrSortTree(ProcessingStages operation, ITraversalContext traversalContext);
    private bool GetDetailSortDirection();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual void SetReference(IReference selfRef);
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeHierarchyObj : RuntimeDataRegionObj {
    protected bool m_isFirstRow;
    protected RuntimeGroupingObj m_grouping;
    protected RuntimeExpressionInfo m_expression;
    protected RuntimeHierarchyObjReference m_hierarchyRoot;
    protected List`1<IReference`1<RuntimeHierarchyObj>> m_hierarchyObjs;
    private static Declaration m_declaration;
    internal List`1<IReference`1<RuntimeHierarchyObj>> HierarchyObjs { get; }
    protected IReference`1<IScope> OuterScope { get; }
    protected IReference`1<IHierarchyObj> HierarchyRoot { get; }
    internal bool IsFirstRow { get; internal set; }
    protected BTree SortTree { get; protected set; }
    protected int ExpressionIndex { get; }
    protected List`1<DataFieldRow> SortDataRows { get; }
    protected List`1<int> SortFilterInfoIndices { get; }
    protected bool IsDetail { get; }
    private IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.HierarchyRoot { get; }
    private OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.OdpContext { get; }
    private BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortTree { get; private set; }
    private int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ExpressionIndex { get; }
    private List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortFilterInfoIndices { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.IsDetail { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.InDataRowSortPhase { get; }
    private IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SelfReference { get; }
    public int Size { get; }
    protected RuntimeHierarchyObj(OnDemandProcessingContext odpContext, ObjectType objectType, int level);
    internal RuntimeHierarchyObj(RuntimeHierarchyObjReference outerHierarchy, ObjectType objectType, int level);
    private static RuntimeHierarchyObj();
    internal List`1<IReference`1<RuntimeHierarchyObj>> get_HierarchyObjs();
    protected virtual IReference`1<IScope> get_OuterScope();
    protected virtual IReference`1<IHierarchyObj> get_HierarchyRoot();
    internal bool get_IsFirstRow();
    internal void set_IsFirstRow(bool value);
    protected virtual BTree get_SortTree();
    protected virtual void set_SortTree(BTree value);
    protected virtual int get_ExpressionIndex();
    protected virtual List`1<DataFieldRow> get_SortDataRows();
    protected virtual List`1<int> get_SortFilterInfoIndices();
    protected virtual bool get_IsDetail();
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_HierarchyRoot();
    private sealed virtual override OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_OdpContext();
    private sealed virtual override BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortTree();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.set_SortTree(BTree value);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_ExpressionIndex();
    private sealed virtual override List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortFilterInfoIndices();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_IsDetail();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_InDataRowSortPhase();
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.CreateHierarchyObj();
    private sealed virtual override ProcessingMessageList Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.RegisterComparisonError(string propertyName);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.NextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ReadRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ProcessUserSort();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SelfReference();
    private void ConstructorHelper(int exprIndex, RuntimeHierarchyObjReference hierarchyRoot);
    internal ProcessingMessageList RegisterComparisonError(string propertyName);
    internal ProcessingMessageList RegisterComparisonError(string propertyName, ReportProcessingException_ComparisonError e);
    internal virtual void NextRow();
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal virtual void CalculatePreviousAggregates();
    internal void CreateInstances(CreateInstancesTraversalContext traversalContext);
    internal virtual void CreateInstance(CreateInstancesTraversalContext traversalContext);
    internal virtual void SetupEnvironment();
    internal virtual void ReadRow(DataActions dataAction);
    internal virtual bool InScope(string scope);
    protected virtual IReference`1<IHierarchyObj> CreateHierarchyObj();
    protected void MatchSortFilterScope(IReference`1<IScope> outerScope, Grouping groupDef, object groupExprValue, int groupExprIndex);
    protected virtual void ProcessUserSort();
    protected virtual void MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    protected virtual void AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeMemberObj : object {
    protected IReference`1<IScope> m_owner;
    protected RuntimeDataTablixGroupRootObjReference m_groupRoot;
    private static Declaration m_declaration;
    internal RuntimeDataTablixGroupRootObjReference GroupRoot { get; }
    public int Size { get; }
    internal RuntimeMemberObj(IReference`1<IScope> owner, ReportHierarchyNode dynamicMember);
    private static RuntimeMemberObj();
    internal RuntimeDataTablixGroupRootObjReference get_GroupRoot();
    internal virtual void NextRow(bool isOuterGrouping, bool peerOuterGroupProcessing);
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal virtual void PrepareCalculateRunningValues();
    internal abstract virtual void CreateInstances(IReference`1<RuntimeDataRegionObj> outerGroupRef, OnDemandProcessingContext odpContext, DataRegionInstance dataRegionInstance, bool outerGroupings, IReference`1<RuntimeDataTablixGroupRootObj> currOuterGroupRoot, ScopeInstance parentInstance, IReference`1[] innerMembers, IReference`1<RuntimeDataTablixGroupLeafObj> innerGroupLeafRef);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeOnDemandDataSet : RuntimePrefetchDataSet {
    private bool m_processFromLiveDataReader;
    private bool m_firstNonAggregateRow;
    private Filters m_filters;
    private RuntimeDRCollection m_runtimeDataRegions;
    private List`1<DataAggregateObj> m_nonCustomAggregates;
    private List`1<DataAggregateObj> m_customAggregates;
    private ScalableList`1<DataFieldRow> m_dataRows;
    private RuntimeUserSortTargetInfo m_userSortTargetInfo;
    private Int32[] m_sortFilterExpressionScopeInfoIndices;
    private RuntimeOnDemandDataSetReference m_selfReference;
    private IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.HierarchyRoot { get; }
    private OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.OdpContext { get; }
    private BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortTree { get; private set; }
    private int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ExpressionIndex { get; }
    private List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortFilterInfoIndices { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.IsDetail { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.InDataRowSortPhase { get; }
    private int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStorable.Size { get; }
    public IReference`1<IHierarchyObj> SelfReference { get; }
    public int Depth { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.TargetForNonDetailSort { get; }
    private Int32[] Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.SortFilterExpressionScopeInfoIndices { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.RIFReportScope { get; }
    internal bool ProcessFromLiveDataReader { get; }
    internal bool HasSortFilterInfo { get; }
    public RuntimeOnDemandDataSet(Report report, DataSet dataSet, DataSetInstance dataSetInstance, OnDemandProcessingContext odpContext, bool processFromLiveDataReader);
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_HierarchyRoot();
    private sealed virtual override OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_OdpContext();
    private sealed virtual override BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortTree();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.set_SortTree(BTree value);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_ExpressionIndex();
    private sealed virtual override List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortFilterInfoIndices();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_IsDetail();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_InDataRowSortPhase();
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.CreateHierarchyObj();
    private sealed virtual override ProcessingMessageList Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.RegisterComparisonError(string propertyName);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.NextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ReadRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ProcessUserSort();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStorable.get_Size();
    public sealed virtual IReference`1<IHierarchyObj> get_SelfReference();
    public sealed virtual int get_Depth();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_TargetForNonDetailSort();
    private sealed virtual override Int32[] Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_SortFilterExpressionScopeInfoIndices();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.get_RIFReportScope();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.IsTargetForSort(int index, bool detailSort);
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.InScope(string scope);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.ReadRow(DataActions dataAction);
    private sealed virtual override IReference`1<IScope> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetOuterScope(bool includeSubReportContainingScope);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.CalculatePreviousAggregates();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetScopeName();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.RecursiveLevel(string scope);
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.TargetScopeMatched(int index, bool detailSort);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IScope.GetGroupNameValuePairs(Dictionary`2<string, object> pairs);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ReportProcessing.IFilterOwner.PostFilterNextRow();
    internal virtual bool get_ProcessFromLiveDataReader();
    internal bool get_HasSortFilterInfo();
    internal virtual void CleanupScalability();
    protected virtual void InitProcess(bool aReaderExtensionsSupported);
    private void FirstPassInit();
    protected virtual void Process();
    protected virtual void ProcessRow(RecordRow row);
    protected virtual void ProcessExtendedPropertyMappings();
    protected virtual void CleanupProcess(bool flushData);
    internal virtual void EraseDataChunk();
    private void RuntimeInitializeReportItemObjs();
    private void RegisterAggregates();
    private void CreateAggregates(List`1<DataAggregateInfo> aggDefs);
    private void NextAggregateRow();
    private void NextNonAggregateRow();
    private void SortAndFilter();
    private void PostSortOperations();
    private void SendToInner();
    private void StoreDataSetLevelAggregates();
    public sealed virtual void SetReference(IReference selfRef);
}
internal abstract class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeRDLDataRegionObj : RuntimeDataRegionObj {
    [StaticReferenceAttribute]
protected DataRegion m_dataRegionDef;
    protected IReference`1<IScope> m_outerScope;
    protected DataFieldRow m_firstRow;
    protected bool m_firstRowIsAggregate;
    [StaticReferenceAttribute]
protected Filters m_filters;
    protected List`1<DataAggregateObj> m_nonCustomAggregates;
    protected List`1<DataAggregateObj> m_customAggregates;
    protected DataActions m_dataAction;
    protected DataActions m_outerDataAction;
    protected List`1<string> m_runningValues;
    protected List`1<string> m_previousValues;
    protected DataAggregateObjResult[] m_runningValueValues;
    protected List`1<DataAggregateObj> m_postSortAggregates;
    protected ScalableList`1<DataFieldRow> m_dataRows;
    protected DataActions m_innerDataAction;
    protected RuntimeUserSortTargetInfo m_userSortTargetInfo;
    protected Int32[] m_sortFilterExpressionScopeInfoIndices;
    protected bool m_inDataRowSortPhase;
    protected BTree m_sortedDataRowTree;
    protected RuntimeExpressionInfo m_dataRowSortExpression;
    private static Declaration m_declaration;
    protected IReference`1<IScope> OuterScope { get; }
    protected DataRegion DataRegionDef { get; }
    protected string ScopeName { get; }
    internal bool TargetForNonDetailSort { get; }
    protected Int32[] SortFilterExpressionScopeInfoIndices { get; }
    internal IRIFReportScope RIFReportScope { get; }
    private IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.HierarchyRoot { get; }
    private OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.OdpContext { get; }
    private BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortTree { get; private set; }
    private int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ExpressionIndex { get; }
    private List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortFilterInfoIndices { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.IsDetail { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.InDataRowSortPhase { get; }
    private IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SelfReference { get; }
    private OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IDataRowSortOwner.OdpContext { get; }
    public int Size { get; }
    internal RuntimeRDLDataRegionObj(IReference`1<IScope> outerScope, DataRegion dataRegionDef, DataActions& dataAction, OnDemandProcessingContext odpContext, bool onePassProcess, List`1<RunningValueInfo> runningValues, ObjectType objectType, int level);
    private static RuntimeRDLDataRegionObj();
    protected virtual IReference`1<IScope> get_OuterScope();
    protected DataRegion get_DataRegionDef();
    protected virtual string get_ScopeName();
    internal virtual bool get_TargetForNonDetailSort();
    protected virtual Int32[] get_SortFilterExpressionScopeInfoIndices();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal virtual bool IsTargetForSort(int index, bool detailSort);
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_HierarchyRoot();
    private sealed virtual override OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_OdpContext();
    private sealed virtual override BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortTree();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.set_SortTree(BTree value);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_ExpressionIndex();
    private sealed virtual override List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortFilterInfoIndices();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_IsDetail();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_InDataRowSortPhase();
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.CreateHierarchyObj();
    private sealed virtual override ProcessingMessageList Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.RegisterComparisonError(string propertyName);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.NextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ReadRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ProcessUserSort();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SelfReference();
    protected abstract virtual void ConstructRuntimeStructure(DataActions& innerDataAction, bool onePassProcess);
    protected DataActions HandleSortFilterEvent();
    internal virtual bool TargetScopeMatched(int index, bool detailSort);
    internal virtual void GetScopeValues(IReference`1<IHierarchyObj> targetScopeObj, List`1[] scopeValues, Int32& index);
    internal virtual void NextRow();
    private void NextNonAggregateRow();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ReportProcessing.IFilterOwner.PostFilterNextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IDataRowSortOwner.PostDataRowSortNextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IDataRowSortOwner.DataRowSortTraverse();
    private sealed virtual override OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IDataRowSortOwner.get_OdpContext();
    internal virtual bool SortAndFilter();
    protected void ReadRows(DataActions action);
    protected void SetupEnvironment(List`1<RunningValueInfo> runningValues);
    internal virtual bool InScope(string scope);
    protected virtual int GetRecursiveLevel(string scope);
    protected virtual void GetGroupNameValuePairs(Dictionary`2<string, object> pairs);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeRICollection : object {
    private IReference`1<IScope> m_owner;
    [StaticReferenceAttribute]
private ReportItemCollection m_reportItemsDef;
    [StaticReferenceAttribute]
private ReportItem m_cellReportItemDef;
    [StaticReferenceAttribute]
private ReportItem m_cellAltReportItemDef;
    [StaticReferenceAttribute]
private OnDemandProcessingContext m_odpContext;
    private List`1<RuntimeDataRegionObjReference> m_dataRegionObjs;
    private int m_currDataRegion;
    private bool m_processSubreports;
    private static Declaration m_declaration;
    internal ReportItemCollection ReportItemsDef { get; }
    public int Size { get; }
    internal RuntimeRICollection(IReference`1<IScope> owner, ReportItem cellContents, ReportItem altCellContents, DataActions& dataAction, OnDemandProcessingContext odpContext, bool createDataRegions);
    internal RuntimeRICollection(IReference`1<IScope> owner, ReportItemCollection RIColDef, OnDemandProcessingContext odpContext, bool createDataRegions);
    private static RuntimeRICollection();
    internal ReportItemCollection get_ReportItemsDef();
    private void CreateDataRegions(IReference`1<IScope> owner, List`1<ReportItem> computedRIs, DataActions& dataAction);
    internal void FirstPassNextDataRow();
    internal void SortAndFilter();
    internal void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCollection, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal void CalculateInnerRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCollection, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal static void DoneReadingRows(AggregatesImpl globalRVCol, List`1<RunningValueInfo> runningValues, DataAggregateObjResult[]& runningValueValues);
    private void SetupEnvironment();
    private void SetupEnvironment(ReportItemCollection reportItemsDef);
    internal void CreateInstances();
    private void CreateInstances(ScopeInstance parentInstance, ReportItemCollection reportItemsDef);
    internal void CreateCellInstance(ScopeInstance parentInstance, bool setupEnvironment);
    private void CreateInstance(ScopeInstance parentInstance, ReportItem reportItem, bool setupEnvironment);
    private void CreateSubReportInstance(SubReport subReport, ScopeInstance parentInstance);
    internal void ResetReportItemObjs();
    internal static void ResetReportItemObjs(ReportItemCollection reportItems, OnDemandProcessingContext odpContext);
    internal void SetReportItemObjScope();
    private static void TraverseReportItemObjs(ReportItemCollection reportItems, OnDemandProcessingContext odpContext, bool reset, IReference`1<IScope> scope);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeSortDataHolder : object {
    private IReference`1<IHierarchyObj> m_owner;
    private ScalableList`1<DataFieldRow> m_dataRows;
    private static Declaration m_declaration;
    public int Size { get; }
    internal RuntimeSortDataHolder(IReference`1<IHierarchyObj> owner);
    private static RuntimeSortDataHolder();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder.NextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.ISortDataHolder.Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeSortFilterEventInfo : object {
    [StaticReferenceAttribute]
private IInScopeEventSource m_eventSource;
    private string m_oldUniqueName;
    private List`1[] m_sortSourceScopeInfo;
    private bool m_sortDirection;
    private IReference`1<IScope> m_eventSourceRowScope;
    private IReference`1<IScope> m_eventSourceColScope;
    private int m_eventSourceColDetailIndex;
    private int m_eventSourceRowDetailIndex;
    private List`1<IReference`1<RuntimeDataRegionObj>> m_detailRowScopes;
    private List`1<IReference`1<RuntimeDataRegionObj>> m_detailColScopes;
    private List`1<int> m_detailRowScopeIndices;
    private List`1<int> m_detailColScopeIndices;
    private IReference`1<IHierarchyObj> m_eventTarget;
    private bool m_targetSortFilterInfoAdded;
    private List`1<RuntimeExpressionInfo> m_groupExpressionsInSortTarget;
    private List`1<IReference`1<SortFilterExpressionScopeObj>> m_sortFilterExpressionScopeObjects;
    private int m_currentSortIndex;
    private int m_currentInstanceIndex;
    private ScopeLookupTable m_sortOrders;
    private bool m_processed;
    private int m_nullScopeCount;
    private string m_newUniqueName;
    private int m_depth;
    private Hashtable m_peerSortFilters;
    private IReference`1<RuntimeSortFilterEventInfo> m_selfReference;
    private static Declaration m_declaration;
    internal IInScopeEventSource EventSource { get; }
    internal bool HasEventSourceScope { get; }
    internal bool HasDetailScopeInfo { get; }
    internal int EventSourceColDetailIndex { get; internal set; }
    internal int EventSourceRowDetailIndex { get; internal set; }
    internal List`1<IReference`1<RuntimeDataRegionObj>> DetailRowScopes { get; internal set; }
    internal List`1<IReference`1<RuntimeDataRegionObj>> DetailColScopes { get; internal set; }
    internal List`1<int> DetailRowScopeIndices { get; internal set; }
    internal List`1<int> DetailColScopeIndices { get; internal set; }
    internal bool SortDirection { get; internal set; }
    internal List`1[] SortSourceScopeInfo { get; }
    internal IReference`1<IHierarchyObj> EventTarget { get; internal set; }
    internal bool TargetSortFilterInfoAdded { get; internal set; }
    internal bool Processed { get; internal set; }
    internal string OldUniqueName { get; }
    internal string NewUniqueName { get; internal set; }
    internal Hashtable PeerSortFilters { get; internal set; }
    internal IReference`1<RuntimeSortFilterEventInfo> SelfReference { get; }
    public int Size { get; }
    internal RuntimeSortFilterEventInfo(IInScopeEventSource eventSource, string oldUniqueName, bool sortDirection, List`1[] sortSourceScopeInfo, OnDemandProcessingContext odpContext, int depth);
    private static RuntimeSortFilterEventInfo();
    internal IInScopeEventSource get_EventSource();
    internal IReference`1<IScope> GetEventSourceScope(bool isColumnAxis);
    internal void SetEventSourceScope(bool isColumnAxis, IReference`1<IScope> eventSourceScope, int rowIndex);
    internal void UpdateEventSourceScope(bool isColumnAxis, IReference`1<IScope> eventSourceScope, int rootRowCount);
    internal void AddDetailScopeInfo(bool isColumnAxis, RuntimeDataRegionObjReference dataRegionReference, int detailRowIndex);
    internal void UpdateDetailScopeInfo(RuntimeGroupRootObj detailRoot, bool isColumnAxis, int rootRowCount, RuntimeDataRegionObjReference selfReference);
    internal bool get_HasEventSourceScope();
    internal bool get_HasDetailScopeInfo();
    internal int get_EventSourceColDetailIndex();
    internal void set_EventSourceColDetailIndex(int value);
    internal int get_EventSourceRowDetailIndex();
    internal void set_EventSourceRowDetailIndex(int value);
    internal List`1<IReference`1<RuntimeDataRegionObj>> get_DetailRowScopes();
    internal void set_DetailRowScopes(List`1<IReference`1<RuntimeDataRegionObj>> value);
    internal List`1<IReference`1<RuntimeDataRegionObj>> get_DetailColScopes();
    internal void set_DetailColScopes(List`1<IReference`1<RuntimeDataRegionObj>> value);
    internal List`1<int> get_DetailRowScopeIndices();
    internal void set_DetailRowScopeIndices(List`1<int> value);
    internal List`1<int> get_DetailColScopeIndices();
    internal void set_DetailColScopeIndices(List`1<int> value);
    internal bool get_SortDirection();
    internal void set_SortDirection(bool value);
    internal List`1[] get_SortSourceScopeInfo();
    internal IReference`1<IHierarchyObj> get_EventTarget();
    internal void set_EventTarget(IReference`1<IHierarchyObj> value);
    internal bool get_TargetSortFilterInfoAdded();
    internal void set_TargetSortFilterInfoAdded(bool value);
    internal bool get_Processed();
    internal void set_Processed(bool value);
    internal string get_OldUniqueName();
    internal string get_NewUniqueName();
    internal void set_NewUniqueName(string value);
    internal Hashtable get_PeerSortFilters();
    internal void set_PeerSortFilters(Hashtable value);
    internal void RegisterSortFilterExpressionScope(Int32& containerSortFilterExprScopeIndex, IReference`1<RuntimeDataRegionObj> scopeObj, List`1[] scopeValues, int sortFilterInfoIndex);
    internal void PrepareForSorting(OnDemandProcessingContext odpContext);
    private void CollectSortOrders();
    internal bool ProcessSorting(OnDemandProcessingContext odpContext);
    private void AddSortOrder(List`1[] scopeValues, bool incrementCounter);
    internal object GetSortOrder(ReportRuntime runtime);
    internal void MatchEventSource(IInScopeEventSource eventSource, string eventSourceUniqueNameString, IScope containingScope, OnDemandProcessingContext odpContext);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual void SetReference(IReference selfRef);
    internal IReference`1<RuntimeSortFilterEventInfo> get_SelfReference();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeSortHierarchyObj : object {
    private IReference`1<IHierarchyObj> m_hierarchyRoot;
    private OnDemandProcessingContext m_odpContext;
    private SortHierarchyStructure m_sortHierarchyStruct;
    private IReference`1<ISortDataHolder> m_dataHolder;
    private RuntimeSortHierarchyObjReference m_selfReference;
    private int m_depth;
    private static Declaration m_declaration;
    public int Depth { get; }
    private IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.HierarchyRoot { get; }
    private OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.OdpContext { get; }
    private BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortTree { get; private set; }
    private int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ExpressionIndex { get; }
    private List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.SortFilterInfoIndices { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.IsDetail { get; }
    private bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.InDataRowSortPhase { get; }
    public IReference`1<IHierarchyObj> SelfReference { get; }
    public int Size { get; }
    internal RuntimeSortHierarchyObj(IReference`1<IHierarchyObj> outerHierarchy, int depth);
    private static RuntimeSortHierarchyObj();
    public sealed virtual int get_Depth();
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_HierarchyRoot();
    private sealed virtual override OnDemandProcessingContext Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_OdpContext();
    private sealed virtual override BTree Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortTree();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.set_SortTree(BTree value);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_ExpressionIndex();
    private sealed virtual override List`1<int> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_SortFilterInfoIndices();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_IsDetail();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.get_InDataRowSortPhase();
    private sealed virtual override IReference`1<IHierarchyObj> Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.CreateHierarchyObj();
    private sealed virtual override ProcessingMessageList Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.RegisterComparisonError(string propertyName);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.NextRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.Traverse(ProcessingStages operation, ITraversalContext traversalContext);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ReadRow();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.ProcessUserSort();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.IHierarchyObj.AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    public sealed virtual IReference`1<IHierarchyObj> get_SelfReference();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    internal static Declaration GetDeclaration();
    public sealed virtual void SetReference(IReference selfRef);
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeTablixCell : RuntimeCell {
    private List`1<RuntimeRICollection> m_cellsWithSameScope;
    private int m_reportItemCollectionIndex;
    private static Declaration m_declaration;
    public int Size { get; }
    internal RuntimeTablixCell(RuntimeTablixGroupLeafObjReference owner, int cellLevel, TablixMember outerGroupingMember, TablixMember innerGroupingMember, bool innermost);
    private static RuntimeTablixCell();
    protected virtual void ConstructCellContents(Cell cell, DataActions& dataAction);
    internal virtual void NextRow();
    internal virtual void SortAndFilter();
    protected virtual void CalculateInnerRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal virtual void CreateInstance(IMemberHierarchy dataRegionOrRowMemberInstance, int columnMemberSequenceId);
    protected virtual void CreateInstanceCellContents(Cell cell, DataCellInstance cellInstance);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeTablixGroupLeafObj : RuntimeDataTablixGroupLeafObj {
    private RuntimeRICollection m_headingReportItemCol;
    private List`1<RuntimeRICollection> m_firstPassCells;
    private int m_reportItemCollectionIndex;
    private static Declaration m_declaration;
    public int Size { get; }
    internal RuntimeTablixGroupLeafObj(RuntimeDataTablixGroupRootObjReference groupRootRef, ObjectType objectType);
    private static RuntimeTablixGroupLeafObj();
    protected virtual IReference`1<RuntimeMemberObj> CreateRuntimeMemberObject(IReference`1<IScope> owner, ReportHierarchyNode dynamicMemberDef, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    protected virtual void ConstructOutermostCellContents(Cell cell);
    internal virtual void CreateCell(RuntimeCells cellsCollection, int collectionKey, int index, ReportHierarchyNode outerGroupingMember, ReportHierarchyNode innerGroupingMember, DataRegion dataRegionDef);
    protected virtual void SendToInner();
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues();
    protected virtual void CreateInstanceHeadingContents();
    protected virtual void CreateOutermostStatics(IMemberHierarchy dataRegionOrRowMemberInstance, int columnMemberSequenceId);
    protected virtual void CreateOutermostStaticCellContents(Cell cell, DataCellInstance cellInstance);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeTablixMemberObj : RuntimeDataTablixMemberObj {
    private List`1<RuntimeRICollection> m_staticHeadings;
    private static Declaration m_declaration;
    public int Size { get; }
    internal RuntimeTablixMemberObj(IReference`1<IScope> owner, TablixMember dynamicMember, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    private static RuntimeTablixMemberObj();
    protected virtual void InitializeStaticHeading(ReportHierarchyNode staticMember, OnDemandProcessingContext odpContext, DataActions& dataAction);
    protected virtual void CreateStaticHeadingInstances(ScopeInstance parentInstance);
    protected virtual void SetupEnvironment(OnDemandProcessingContext odpContext);
    internal virtual void NextRow(bool isOuterGrouping, bool peerOuterGroupProcessing);
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    internal void ResetReportItemObjs(OnDemandProcessingContext odpContext);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeTablixObj : RuntimeDataTablixObj {
    private List`1<RuntimeRICollection> m_tablixCorner;
    private List`1<RuntimeRICollection> m_topLevelStaticCellContents;
    private static Declaration m_declaration;
    private Tablix TablixDef { get; }
    public int Size { get; }
    internal RuntimeTablixObj(IReference`1<IScope> outerScope, Tablix tablixDef, DataActions& dataAction, OnDemandProcessingContext odpContext, bool onePassProcess);
    private static RuntimeTablixObj();
    private Tablix get_TablixDef();
    protected virtual void ConstructRuntimeStructure(DataActions& innerDataAction, bool onePassProcess);
    protected virtual void ConstructTopLevelStaticCellRuntimeMemberObjects(Cell topLevelStaticCell, DataActions& innerDataAction);
    protected virtual IReference`1<RuntimeMemberObj> CreateRuntimeMemberObject(IReference`1<IScope> owner, ReportHierarchyNode dynamicMemberDef, DataActions& dataAction, OnDemandProcessingContext odpContext, IReference`1[] innerGroupings, HierarchyNodeList staticMembers, bool outerMostStatics, int headingLevel);
    protected virtual void SendToInner();
    internal virtual bool SortAndFilter();
    internal virtual void CalculateRunningValues(Dictionary`2<string, IReference`1<RuntimeGroupRootObj>> groupCol, IReference`1<RuntimeGroupRootObj> lastGroup);
    protected virtual void CreateCornerInstance(DataRegionInstance dataRegionInstance);
    protected virtual void CreateTopLevelStaticCellContents(DataRegionInstance dataRegionInstance);
    internal void ResetReportItems();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.RuntimeUserSortTargetInfo : object {
    private BTree m_sortTree;
    private List`1<AggregateRow> m_aggregateRows;
    private List`1<int> m_sortFilterInfoIndices;
    private Hashtable m_targetForNonDetailSort;
    private Hashtable m_targetForDetailSort;
    private static Declaration m_declaration;
    internal BTree SortTree { get; internal set; }
    internal List`1<AggregateRow> AggregateRows { get; internal set; }
    internal List`1<int> SortFilterInfoIndices { get; internal set; }
    internal bool TargetForNonDetailSort { get; }
    public int Size { get; }
    internal RuntimeUserSortTargetInfo(IReference`1<IHierarchyObj> owner, int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    private static RuntimeUserSortTargetInfo();
    internal BTree get_SortTree();
    internal void set_SortTree(BTree value);
    internal List`1<AggregateRow> get_AggregateRows();
    internal void set_AggregateRows(List`1<AggregateRow> value);
    internal List`1<int> get_SortFilterInfoIndices();
    internal void set_SortFilterInfoIndices(List`1<int> value);
    internal bool get_TargetForNonDetailSort();
    internal void AddSortInfo(IReference`1<IHierarchyObj> owner, int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfo);
    internal void AddSortInfoIndex(int sortInfoIndex, IReference`1<RuntimeSortFilterEventInfo> sortInfoRef);
    internal void ResetTargetForNonDetailSort();
    internal bool IsTargetForSort(int index, bool detailSort);
    internal void MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo, IReference`1<IHierarchyObj> sortTarget);
    private void MarkSortInfoProcessed(List`1<IReference`1<RuntimeSortFilterEventInfo>> runtimeSortFilterInfo, IReference`1<IHierarchyObj> sortTarget, ICollection indices);
    internal void EnterProcessUserSortPhase(OnDemandProcessingContext odpContext);
    internal void LeaveProcessUserSortPhase(OnDemandProcessingContext odpContext);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.SecondPassOperations : Enum {
    public int value__;
    public static SecondPassOperations Variables;
    public static SecondPassOperations Sorting;
    public static SecondPassOperations Filtering;
}
internal class Microsoft.ReportingServices.OnDemandProcessing.TablixProcessing.UserSortFilterContext : object {
    private IInScopeEventSource m_currentSortFilterEventSource;
    private List`1<IReference`1<RuntimeSortFilterEventInfo>> m_runtimeSortFilterInfo;
    private IReference`1<IScope> m_currentContainingScope;
    private GroupingList m_containingScopes;
    private int m_dataSetGlobalID;
    private List`1<SubReport> m_detailScopeSubReports;
    private Int32[] m_inProcessUserSortPhase;
    internal IInScopeEventSource CurrentSortFilterEventSource { get; internal set; }
    internal List`1<IReference`1<RuntimeSortFilterEventInfo>> RuntimeSortFilterInfo { get; }
    internal int DataSetGlobalId { get; internal set; }
    internal IReference`1<IScope> CurrentContainingScope { get; internal set; }
    internal GroupingList ContainingScopes { get; internal set; }
    internal List`1<SubReport> DetailScopeSubReports { get; internal set; }
    internal UserSortFilterContext(UserSortFilterContext parentContext, SubReport subReport);
    internal IInScopeEventSource get_CurrentSortFilterEventSource();
    internal void set_CurrentSortFilterEventSource(IInScopeEventSource value);
    internal List`1<IReference`1<RuntimeSortFilterEventInfo>> get_RuntimeSortFilterInfo();
    internal int get_DataSetGlobalId();
    internal void set_DataSetGlobalId(int value);
    internal IReference`1<IScope> get_CurrentContainingScope();
    internal void set_CurrentContainingScope(IReference`1<IScope> value);
    internal GroupingList get_ContainingScopes();
    internal void set_ContainingScopes(GroupingList value);
    internal List`1<SubReport> get_DetailScopeSubReports();
    internal void set_DetailScopeSubReports(List`1<SubReport> value);
    internal List`1<SubReport> CloneDetailScopeSubReports();
    internal void ResetContextForTopLevelDataSet();
    internal void UpdateContextForFirstSubreportInstance(UserSortFilterContext parentContext);
    internal static void ProcessEventSources(OnDemandProcessingContext odpContext, IScope containingScope, List`1<IInScopeEventSource> inScopeEventSources);
    internal bool PopulateRuntimeSortFilterEventInfo(OnDemandProcessingContext odpContext, DataSet myDataSet);
    private Boolean[] SetSortFilterInfo(Boolean[] source, int count, int index);
    internal bool IsSortFilterTarget(Boolean[] isSortFilterTarget, IReference`1<IScope> outerScope, IReference`1<IHierarchyObj> target, RuntimeUserSortTargetInfo& userSortTargetInfo);
    internal void RegisterSortFilterExpressionScope(IReference`1<IScope> containerRef, IReference`1<RuntimeDataRegionObj> scopeRef, Boolean[] isSortFilterExpressionScope);
    internal bool ProcessUserSort(OnDemandProcessingContext odpContext);
    private void ProcessUserSort(OnDemandProcessingContext odpContext, Boolean& processed, Boolean& canStop, Boolean& processedAny);
    internal void ProcessUserSortForTarget(ObjectModelImpl reportObjectModel, ReportRuntime reportRuntime, IReference`1<IHierarchyObj> target, ScalableList`1& dataRows, bool targetForNonDetailSort);
    internal void EnterProcessUserSortPhase(int index);
    internal void LeaveProcessUserSortPhase(int index);
    internal bool InProcessUserSortPhase(int index);
}
internal class Microsoft.ReportingServices.OnDemandProcessing.ThreadSet : object {
    private int m_threadsRemaining;
    private ManualResetEvent m_allThreadsDone;
    internal ThreadSet(int threadCount);
    internal void ThreadCompleted();
    internal void WaitForCompletion();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Action : object {
    private ReportStringProperty m_label;
    private ReportStringProperty m_bookmark;
    private ReportUrlProperty m_hyperlink;
    private ActionInstance m_instance;
    private ActionDrillthrough m_drillthrough;
    private Action m_renderAction;
    private ActionInfo m_owner;
    private ActionItem m_actionItemDef;
    private int m_index;
    public ReportStringProperty Label { get; }
    public ReportStringProperty BookmarkLink { get; }
    public ReportUrlProperty Hyperlink { get; }
    public ActionDrillthrough Drillthrough { get; }
    private bool IsOldSnapshot { get; }
    public ActionInstance Instance { get; }
    internal ActionItem ActionItemDef { get; }
    internal ActionInfo Owner { get; }
    internal Action(ActionInfo owner, ActionItem actionItemDef, int index);
    internal Action(ActionInfo owner, Action renderAction);
    public ReportStringProperty get_Label();
    public ReportStringProperty get_BookmarkLink();
    public ReportUrlProperty get_Hyperlink();
    public ActionDrillthrough get_Drillthrough();
    private bool get_IsOldSnapshot();
    public ActionInstance get_Instance();
    internal ActionItem get_ActionItemDef();
    internal ActionInfo get_Owner();
    internal void Update(Action newAction);
    internal void SetNewContext();
    internal void ConstructActionDefinition();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ActionCollection : ReportElementCollectionBase`1<Action> {
    private List`1<Action> m_list;
    public Action Item { get; }
    public int Count { get; }
    internal ActionCollection(ActionInfo actionInfo, List`1<ActionItem> actions);
    internal ActionCollection(ActionInfo actionInfo, ActionCollection actions);
    public virtual Action get_Item(int index);
    public virtual int get_Count();
    internal Action Add(ActionInfo owner, ActionItem actionItem);
    internal void Update(ActionInfo newCollection);
    internal void SetNewContext();
    internal void ConstructActionDefinitions();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ActionDrillthrough : object {
    private ReportStringProperty m_reportName;
    private ParameterCollection m_parameters;
    private ActionDrillthroughInstance m_instance;
    private Action m_renderAction;
    private ActionItem m_actionItemDef;
    private ActionInfo m_owner;
    private int m_index;
    public ReportStringProperty ReportName { get; }
    public ParameterCollection Parameters { get; }
    private bool IsOldSnapshot { get; }
    public ActionDrillthroughInstance Instance { get; }
    internal ActionItem ActionItemDef { get; }
    internal ActionInfo Owner { get; }
    internal ICatalogItemContext PathResolutionContext { get; }
    internal ActionDrillthrough(ActionInfo owner, ActionItem actionItemDef, int index);
    internal ActionDrillthrough(ActionInfo owner, Action renderAction);
    public ReportStringProperty get_ReportName();
    public ParameterCollection get_Parameters();
    private bool get_IsOldSnapshot();
    public ActionDrillthroughInstance get_Instance();
    internal ActionItem get_ActionItemDef();
    internal ActionInfo get_Owner();
    internal ICatalogItemContext get_PathResolutionContext();
    public void RegisterDrillthroughAction();
    public Parameter CreateParameter(string name);
    internal void Update(Action newAction);
    internal void SetNewContext();
    internal void ConstructDrillthoughDefinition();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ActionDrillthroughInstance : BaseInstance {
    private bool m_isOldSnapshot;
    private Action m_renderAction;
    private string m_reportName;
    private string m_drillthroughID;
    private string m_drillthroughUrl;
    private bool m_drillthroughUrlEvaluated;
    private ActionDrillthrough m_actionDef;
    private int m_index;
    public string ReportName { get; public set; }
    public string DrillthroughID { get; }
    public string DrillthroughUrl { get; }
    internal ActionDrillthroughInstance(IReportScope reportScope, ActionDrillthrough actionDef, int index);
    internal ActionDrillthroughInstance(Action renderAction);
    public string get_ReportName();
    public void set_ReportName(string value);
    public string get_DrillthroughID();
    public string get_DrillthroughUrl();
    internal void Update(Action newAction);
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ActionInfo : object {
    private ActionCollection m_collection;
    private ActionInfo m_renderAction;
    private Action m_actionDef;
    private bool m_isOldSnapshot;
    private IReportScope m_reportScope;
    private IInstancePath m_instancePath;
    private ReportElement m_reportElementOwner;
    private ObjectType m_objectType;
    private string m_objectName;
    private bool m_dynamic;
    protected bool m_chartConstruction;
    private RenderingContext m_renderingContext;
    private IROMActionOwner m_romActionOwner;
    public ActionCollection Actions { get; }
    internal bool IsOldSnapshot { get; }
    internal IReportScope ReportScope { get; }
    internal RenderingContext RenderingContext { get; }
    internal IInstancePath InstancePath { get; }
    internal ReportElement ReportElementOwner { get; }
    internal ObjectType ObjectType { get; }
    internal string ObjectName { get; }
    internal bool IsDynamic { get; internal set; }
    internal bool IsChartConstruction { get; }
    internal Action ActionDef { get; internal set; }
    internal IROMActionOwner ROMActionOwner { get; }
    internal ActionInfo(RenderingContext renderingContext, IReportScope reportScope, Action actionDef, IInstancePath instancePath, ReportElement reportElementOwner, ObjectType objectType, string objectName, IROMActionOwner romActionOwner);
    internal ActionInfo(RenderingContext renderingContext, ActionInfo renderAction);
    public ActionCollection get_Actions();
    internal bool get_IsOldSnapshot();
    internal IReportScope get_ReportScope();
    internal RenderingContext get_RenderingContext();
    internal IInstancePath get_InstancePath();
    internal ReportElement get_ReportElementOwner();
    internal ObjectType get_ObjectType();
    internal string get_ObjectName();
    internal bool get_IsDynamic();
    internal void set_IsDynamic(bool value);
    internal bool get_IsChartConstruction();
    internal Action get_ActionDef();
    internal void set_ActionDef(Action value);
    internal IROMActionOwner get_ROMActionOwner();
    public Action CreateHyperlinkAction();
    public Action CreateBookmarkLinkAction();
    public Action CreateDrillthroughAction();
    private void AssertValidCreateActionContext();
    internal void Update(ActionInfo newActionInfo);
    internal virtual void SetNewContext();
    internal bool ConstructActionDefinition();
    private void InitActions();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ActionInfoWithDynamicImageMap : ActionInfo {
    private ImageMapAreaInstanceCollection m_imageMapAreas;
    private static Declaration m_Declaration;
    public ImageMapAreaInstanceCollection ImageMapAreaInstances { get; }
    internal ActionInfoWithDynamicImageMap(RenderingContext renderingContext, ReportItem owner, IROMActionOwner romActionOwner);
    internal ActionInfoWithDynamicImageMap(RenderingContext renderingContext, ReportItem owner, IReportScope reportScope, IInstancePath instancePath, IROMActionOwner romActionOwner, bool chartConstructor);
    internal ActionInfoWithDynamicImageMap(RenderingContext renderingContext, Action actionDef, ReportItem owner, IROMActionOwner romActionOwner);
    internal ActionInfoWithDynamicImageMap(RenderingContext renderingContext, IReportScope reportScope, Action actionDef, IInstancePath instancePath, ReportItem owner, IROMActionOwner romActionOwner);
    internal ActionInfoWithDynamicImageMap(RenderingContext renderingContext, ActionInfo renderAction, ImageMapAreasCollection renderImageMap);
    private static ActionInfoWithDynamicImageMap();
    public ImageMapAreaInstanceCollection get_ImageMapAreaInstances();
    public ImageMapAreaInstance CreateImageMapAreaInstance(ImageMapAreaShape shape, Single[] coordinates);
    public ImageMapAreaInstance CreateImageMapAreaInstance(ImageMapAreaShape shape, Single[] coordinates, string toolTip);
    [ObsoleteAttribute("ActionInfoWithDynamicImageMap objects are completely volatile, so there is no reason to reuse the same instance of this class. Hence there is no need to support Update and SetNewContext methods.")]
internal void Update(ActionInfo newActionInfo);
    [ObsoleteAttribute("ActionInfoWithDynamicImageMap objects are completely volatile, so there is no reason to reuse the same instance of this class. Hence there is no need to support Update and SetNewContext methods.")]
internal virtual void SetNewContext();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    [SkipMemberStaticValidationAttribute("649")]
[SkipMemberStaticValidationAttribute("648")]
private static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ActionInfoWithDynamicImageMapCollection : ReportElementCollectionBase`1<ActionInfoWithDynamicImageMap> {
    private List`1<ActionInfoWithDynamicImageMap> m_list;
    public ActionInfoWithDynamicImageMap Item { get; }
    public int Count { get; }
    internal List`1<ActionInfoWithDynamicImageMap> InternalList { get; }
    internal ActionInfoWithDynamicImageMapCollection(RenderingContext renderingContext, ImageMapAreasCollection imageMaps);
    public virtual ActionInfoWithDynamicImageMap get_Item(int index);
    public virtual int get_Count();
    internal List`1<ActionInfoWithDynamicImageMap> get_InternalList();
    internal ActionInfoWithDynamicImageMap Add(RenderingContext renderingContext, ReportItem owner, IROMActionOwner romActionOwner);
    internal void ConstructDefinitions();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ActionInstance : BaseInstance {
    private bool m_isOldSnapshot;
    private Action m_renderAction;
    private Action m_actionDef;
    private ReportUrl m_hyperlink;
    private string m_label;
    private string m_bookmark;
    private string m_hyperlinkText;
    private static Declaration m_Declaration;
    public string Label { get; public set; }
    public string BookmarkLink { get; public set; }
    public ReportUrl Hyperlink { get; }
    public string HyperlinkText { get; public set; }
    internal ActionInstance(IReportScope reportScope, Action actionDef);
    internal ActionInstance(Action renderAction);
    private static ActionInstance();
    public string get_Label();
    public void set_Label(string value);
    public string get_BookmarkLink();
    public void set_BookmarkLink(string value);
    public ReportUrl get_Hyperlink();
    public sealed virtual string get_HyperlinkText();
    public void set_HyperlinkText(string value);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IActionInstance.SetHyperlinkText(string hyperlinkText);
    internal void Update(Action newAction);
    protected virtual void ResetInstanceCache();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    [SkipMemberStaticValidationAttribute("371")]
[SkipMemberStaticValidationAttribute("370")]
private static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.BackFrame : object {
    private GaugePanel m_gaugePanel;
    private BackFrame m_defObject;
    private BackFrameInstance m_instance;
    private Style m_style;
    private ReportEnumProperty`1<GaugeFrameStyles> m_frameStyle;
    private ReportEnumProperty`1<GaugeFrameShapes> m_frameShape;
    private ReportDoubleProperty m_frameWidth;
    private ReportEnumProperty`1<GaugeGlassEffects> m_glassEffect;
    private FrameBackground m_frameBackground;
    private FrameImage m_frameImage;
    public Style Style { get; }
    public ReportEnumProperty`1<GaugeFrameStyles> FrameStyle { get; }
    public ReportEnumProperty`1<GaugeFrameShapes> FrameShape { get; }
    public ReportDoubleProperty FrameWidth { get; }
    public ReportEnumProperty`1<GaugeGlassEffects> GlassEffect { get; }
    public FrameBackground FrameBackground { get; }
    public FrameImage FrameImage { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal BackFrame BackFrameDef { get; }
    public BackFrameInstance Instance { get; }
    internal BackFrame(BackFrame defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public ReportEnumProperty`1<GaugeFrameStyles> get_FrameStyle();
    public ReportEnumProperty`1<GaugeFrameShapes> get_FrameShape();
    public ReportDoubleProperty get_FrameWidth();
    public ReportEnumProperty`1<GaugeGlassEffects> get_GlassEffect();
    public FrameBackground get_FrameBackground();
    public FrameImage get_FrameImage();
    internal GaugePanel get_GaugePanelDef();
    internal BackFrame get_BackFrameDef();
    public BackFrameInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.BackFrameInstance : BaseInstance {
    private BackFrame m_defObject;
    private StyleInstance m_style;
    private Nullable`1<GaugeFrameStyles> m_frameStyle;
    private Nullable`1<GaugeFrameShapes> m_frameShape;
    private Nullable`1<double> m_frameWidth;
    private Nullable`1<GaugeGlassEffects> m_glassEffect;
    public StyleInstance Style { get; }
    public GaugeFrameStyles FrameStyle { get; }
    public GaugeFrameShapes FrameShape { get; }
    public double FrameWidth { get; }
    public GaugeGlassEffects GlassEffect { get; }
    internal BackFrameInstance(BackFrame defObject);
    public StyleInstance get_Style();
    public GaugeFrameStyles get_FrameStyle();
    public GaugeFrameShapes get_FrameShape();
    public double get_FrameWidth();
    public GaugeGlassEffects get_GlassEffect();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.BackgroundGradients : Enum {
    public int value__;
    public static BackgroundGradients Default;
    public static BackgroundGradients None;
    public static BackgroundGradients LeftRight;
    public static BackgroundGradients TopBottom;
    public static BackgroundGradients Center;
    public static BackgroundGradients DiagonalLeft;
    public static BackgroundGradients DiagonalRight;
    public static BackgroundGradients HorizontalCenter;
    public static BackgroundGradients VerticalCenter;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.BackgroundGradientTypes : Enum {
    public int value__;
    public static BackgroundGradientTypes StartToEnd;
    public static BackgroundGradientTypes None;
    public static BackgroundGradientTypes LeftRight;
    public static BackgroundGradientTypes TopBottom;
    public static BackgroundGradientTypes Center;
    public static BackgroundGradientTypes DiagonalLeft;
    public static BackgroundGradientTypes DiagonalRight;
    public static BackgroundGradientTypes HorizontalCenter;
    public static BackgroundGradientTypes VerticalCenter;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.BackgroundHatchTypes : Enum {
    public int value__;
    public static BackgroundHatchTypes Default;
    public static BackgroundHatchTypes None;
    public static BackgroundHatchTypes BackwardDiagonal;
    public static BackgroundHatchTypes Cross;
    public static BackgroundHatchTypes DarkDownwardDiagonal;
    public static BackgroundHatchTypes DarkHorizontal;
    public static BackgroundHatchTypes DarkUpwardDiagonal;
    public static BackgroundHatchTypes DarkVertical;
    public static BackgroundHatchTypes DashedDownwardDiagonal;
    public static BackgroundHatchTypes DashedHorizontal;
    public static BackgroundHatchTypes DashedUpwardDiagonal;
    public static BackgroundHatchTypes DashedVertical;
    public static BackgroundHatchTypes DiagonalBrick;
    public static BackgroundHatchTypes DiagonalCross;
    public static BackgroundHatchTypes Divot;
    public static BackgroundHatchTypes DottedDiamond;
    public static BackgroundHatchTypes DottedGrid;
    public static BackgroundHatchTypes ForwardDiagonal;
    public static BackgroundHatchTypes Horizontal;
    public static BackgroundHatchTypes HorizontalBrick;
    public static BackgroundHatchTypes LargeCheckerBoard;
    public static BackgroundHatchTypes LargeConfetti;
    public static BackgroundHatchTypes LargeGrid;
    public static BackgroundHatchTypes LightDownwardDiagonal;
    public static BackgroundHatchTypes LightHorizontal;
    public static BackgroundHatchTypes LightUpwardDiagonal;
    public static BackgroundHatchTypes LightVertical;
    public static BackgroundHatchTypes NarrowHorizontal;
    public static BackgroundHatchTypes NarrowVertical;
    public static BackgroundHatchTypes OutlinedDiamond;
    public static BackgroundHatchTypes Percent05;
    public static BackgroundHatchTypes Percent10;
    public static BackgroundHatchTypes Percent20;
    public static BackgroundHatchTypes Percent25;
    public static BackgroundHatchTypes Percent30;
    public static BackgroundHatchTypes Percent40;
    public static BackgroundHatchTypes Percent50;
    public static BackgroundHatchTypes Percent60;
    public static BackgroundHatchTypes Percent70;
    public static BackgroundHatchTypes Percent75;
    public static BackgroundHatchTypes Percent80;
    public static BackgroundHatchTypes Percent90;
    public static BackgroundHatchTypes Plaid;
    public static BackgroundHatchTypes Shingle;
    public static BackgroundHatchTypes SmallCheckerBoard;
    public static BackgroundHatchTypes SmallConfetti;
    public static BackgroundHatchTypes SmallGrid;
    public static BackgroundHatchTypes SolidDiamond;
    public static BackgroundHatchTypes Sphere;
    public static BackgroundHatchTypes Trellis;
    public static BackgroundHatchTypes Vertical;
    public static BackgroundHatchTypes Wave;
    public static BackgroundHatchTypes Weave;
    public static BackgroundHatchTypes WideDownwardDiagonal;
    public static BackgroundHatchTypes WideUpwardDiagonal;
    public static BackgroundHatchTypes ZigZag;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.BackgroundImage : ReportProperty {
    private bool m_isOldSnapshot;
    private Style m_renderStyle;
    private Style m_styleDef;
    private ReportStringProperty m_value;
    private ReportStringProperty m_mimeType;
    private ReportEnumProperty`1<BackgroundRepeatTypes> m_repeat;
    private BackgroundImageInstance m_instance;
    private Nullable`1<SourceType> m_imageSource;
    private ReportEnumProperty`1<Positions> m_position;
    private ReportColorProperty m_transparentColor;
    public SourceType Source { get; }
    public ReportStringProperty Value { get; }
    public ReportStringProperty MIMEType { get; }
    public ReportEnumProperty`1<BackgroundRepeatTypes> BackgroundRepeat { get; }
    public ReportEnumProperty`1<Positions> Position { get; }
    public ReportColorProperty TransparentColor { get; }
    public BackgroundImageInstance Instance { get; }
    internal Style StyleDef { get; }
    private ReportProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.Value { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.ImageDataPropertyName { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.ImageValuePropertyName { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.MIMETypePropertyName { get; }
    internal BackgroundImage(bool isExpression, string expressionString, Style styleDef);
    internal BackgroundImage(bool isExpression, string expressionString, Style renderStyle, Style styleDef);
    public sealed virtual SourceType get_Source();
    public sealed virtual ReportStringProperty get_Value();
    public sealed virtual ReportStringProperty get_MIMEType();
    public ReportEnumProperty`1<BackgroundRepeatTypes> get_BackgroundRepeat();
    public ReportEnumProperty`1<Positions> get_Position();
    public ReportColorProperty get_TransparentColor();
    public BackgroundImageInstance get_Instance();
    internal Style get_StyleDef();
    private sealed virtual override ReportProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_Value();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_ImageDataPropertyName();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_ImageValuePropertyName();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_MIMETypePropertyName();
    private sealed virtual override Byte[] Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetImageData(List`1& fieldsUsedInValue, Boolean& errorOccurred);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetMIMETypeValue();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetValueAsString(List`1& fieldsUsedInValue, Boolean& errOccurred);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetTransparentImageProperties(String& mimeType, Byte[]& imageData);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.BackgroundImageInstance : BaseInstance {
    private bool m_isOldSnapshot;
    private bool m_backgroundRepeatEvaluated;
    private BackgroundImage m_renderImage;
    private BackgroundImage m_backgroundImageDef;
    private bool m_calculatedPropertiesCached;
    private string m_streamName;
    private Byte[] m_imageData;
    private string m_imageDataId;
    private string m_mimeType;
    private BackgroundRepeatTypes m_backgroundRepeat;
    private bool m_positionEvaluated;
    private bool m_transparentColorEvaluated;
    private Positions m_position;
    private ReportColor m_transparentColor;
    public Byte[] ImageData { get; }
    public string StreamName { get; }
    public string MIMEType { get; }
    public BackgroundRepeatTypes BackgroundRepeat { get; }
    public Positions Position { get; }
    public ReportColor TransparentColor { get; }
    internal BackgroundImageInstance(BackgroundImage backgroundImageDef, BackgroundImage renderImage, string backgroundRepeat);
    internal BackgroundImageInstance(BackgroundImage backgroundImageDef);
    public sealed virtual Byte[] get_ImageData();
    public sealed virtual string get_StreamName();
    public sealed virtual string get_MIMEType();
    public BackgroundRepeatTypes get_BackgroundRepeat();
    public Positions get_Position();
    public ReportColor get_TransparentColor();
    protected virtual void ResetInstanceCache();
    private void CacheImageProperties();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.BackgroundRepeatTypes : Enum {
    public int value__;
    public static BackgroundRepeatTypes Default;
    public static BackgroundRepeatTypes Repeat;
    public static BackgroundRepeatTypes Clip;
    public static BackgroundRepeatTypes RepeatX;
    public static BackgroundRepeatTypes RepeatY;
    public static BackgroundRepeatTypes Fit;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.BaseGaugeImage : object {
    internal GaugePanel m_gaugePanel;
    internal BaseGaugeImage m_defObject;
    internal BaseGaugeImageInstance m_instance;
    private ReportEnumProperty`1<SourceType> m_source;
    private ReportVariantProperty m_value;
    private ReportStringProperty m_MIMEType;
    private ReportColorProperty m_transparentColor;
    private SourceType Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.Source { get; }
    private ReportProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.Value { get; }
    private ReportStringProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.MIMEType { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.ImageDataPropertyName { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.ImageValuePropertyName { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.MIMETypePropertyName { get; }
    public ReportEnumProperty`1<SourceType> Source { get; }
    public ReportVariantProperty Value { get; }
    public ReportStringProperty MIMEType { get; }
    public ReportColorProperty TransparentColor { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal BaseGaugeImage BaseGaugeImageDef { get; }
    internal BaseGaugeImageInstance Instance { get; }
    internal BaseGaugeImage(BaseGaugeImage defObject, GaugePanel gaugePanel);
    private sealed virtual override SourceType Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_Source();
    private sealed virtual override ReportProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_Value();
    private sealed virtual override ReportStringProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_MIMEType();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_ImageDataPropertyName();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_ImageValuePropertyName();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_MIMETypePropertyName();
    private sealed virtual override Byte[] Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetImageData(List`1& fieldsUsedInValue, Boolean& errorOccurred);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetMIMETypeValue();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetValueAsString(List`1& fieldsUsedInValue, Boolean& errOccurred);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetTransparentImageProperties(String& mimeType, Byte[]& imageData);
    public ReportEnumProperty`1<SourceType> get_Source();
    public ReportVariantProperty get_Value();
    public ReportStringProperty get_MIMEType();
    public ReportColorProperty get_TransparentColor();
    internal GaugePanel get_GaugePanelDef();
    internal BaseGaugeImage get_BaseGaugeImageDef();
    internal BaseGaugeImageInstance get_Instance();
    internal abstract virtual BaseGaugeImageInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.BaseGaugeImageInstance : BaseInstance {
    protected BaseGaugeImage m_defObject;
    private Nullable`1<SourceType> m_source;
    private string m_MIMEType;
    private ReportColor m_transparentColor;
    private bool m_calculatedPropertiesCached;
    private string m_streamName;
    private Byte[] m_imageData;
    private string m_imageDataId;
    public SourceType Source { get; }
    public string MIMEType { get; }
    public ReportColor TransparentColor { get; }
    public Byte[] ImageData { get; }
    internal BaseGaugeImageInstance(BaseGaugeImage defObject);
    public SourceType get_Source();
    public string get_MIMEType();
    public ReportColor get_TransparentColor();
    public Byte[] get_ImageData();
    protected virtual void ResetInstanceCache();
    private void CacheImageProperties();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.BaseInstance : object {
    internal IReportScope m_reportScope;
    internal IReportScopeInstance ReportScopeInstance { get; }
    internal BaseInstance(IReportScope reportScope);
    internal virtual IReportScopeInstance get_ReportScopeInstance();
    internal virtual void SetNewContext();
    protected abstract virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Body : ReportElement {
    private Report m_renderReport;
    private ReportItemCollection m_reportItems;
    private BodyInstance m_instance;
    private bool m_subreportInSubtotal;
    internal bool UseRenderStyle { get; }
    public string ID { get; }
    public string DefinitionPath { get; }
    public ReportItemCollection ReportItemCollection { get; }
    public ReportSize Height { get; }
    internal ReportItem RenderReportItem { get; }
    internal Report RenderReport { get; }
    internal Report ReportDef { get; }
    internal string InstanceUniqueName { get; }
    internal ReportElementInstance ReportElementInstance { get; }
    public BodyInstance Instance { get; }
    internal Body(IReportScope reportScope, IDefinitionPath parentDefinitionPath, Report reportDef, RenderingContext renderingContext);
    internal Body(IDefinitionPath parentDefinitionPath, bool subreportInSubtotal, Report renderReport, RenderingContext renderingContext);
    internal virtual bool get_UseRenderStyle();
    public virtual string get_ID();
    public virtual string get_DefinitionPath();
    public ReportItemCollection get_ReportItemCollection();
    public ReportSize get_Height();
    internal virtual ReportItem get_RenderReportItem();
    internal Report get_RenderReport();
    internal Report get_ReportDef();
    internal virtual string get_InstanceUniqueName();
    internal virtual ReportElementInstance get_ReportElementInstance();
    public BodyInstance get_Instance();
    internal void UpdateSubReportContents(Report newRenderSubreport);
    internal virtual void SetNewContext();
    internal virtual void SetNewContextChildren();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.BodyInstance : ReportElementInstance {
    public string UniqueName { get; }
    internal Body BodyDefinition { get; }
    internal BodyInstance(Body bodyDef);
    public string get_UniqueName();
    internal Body get_BodyDefinition();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Border : object {
    private Style m_owner;
    private Position m_position;
    private bool m_defaultSolidBorderStyle;
    private BorderInstance m_instance;
    public ReportColorProperty Color { get; }
    public ReportEnumProperty`1<BorderStyles> Style { get; }
    public ReportSizeProperty Width { get; }
    public BorderInstance Instance { get; }
    internal Style Owner { get; }
    internal Position BorderPosition { get; }
    internal StyleAttributeNames ColorAttrName { get; }
    internal StyleAttributeNames StyleAttrName { get; }
    internal StyleAttributeNames WidthAttrName { get; }
    internal Border(Style owner, Position position, bool defaultSolidBorderStyle);
    public ReportColorProperty get_Color();
    public ReportEnumProperty`1<BorderStyles> get_Style();
    public ReportSizeProperty get_Width();
    public BorderInstance get_Instance();
    internal BorderInstance GetInstance();
    internal Style get_Owner();
    internal Position get_BorderPosition();
    internal StyleAttributeNames get_ColorAttrName();
    internal StyleAttributeNames get_StyleAttrName();
    internal StyleAttributeNames get_WidthAttrName();
    internal void ConstructBorderDefinition();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.BorderInstance : BaseInstance {
    private Border m_owner;
    private BorderStyles m_defaultStyleValueIfExpressionNull;
    private ReportColor m_color;
    private BorderStyles m_style;
    private ReportSize m_width;
    private bool m_colorEvaluated;
    private bool m_colorAssigned;
    private bool m_styleEvaluated;
    private bool m_styleAssigned;
    private bool m_widthEvaluated;
    private bool m_widthAssigned;
    public ReportColor Color { get; public set; }
    internal bool IsColorAssigned { get; }
    public BorderStyles Style { get; public set; }
    internal bool IsStyleAssigned { get; }
    public ReportSize Width { get; public set; }
    internal bool IsWidthAssigned { get; }
    internal BorderInstance(Border owner, IReportScope reportScope, BorderStyles defaultStyleValueIfExpressionNull);
    public ReportColor get_Color();
    public void set_Color(ReportColor value);
    internal bool get_IsColorAssigned();
    public BorderStyles get_Style();
    public void set_Style(BorderStyles value);
    internal bool get_IsStyleAssigned();
    public ReportSize get_Width();
    public void set_Width(ReportSize value);
    internal bool get_IsWidthAssigned();
    protected virtual void ResetInstanceCache();
    internal void GetAssignedDynamicValues(List`1<int> styles, List`1<AttributeInfo> values);
    internal void SetAssignedDynamicValue(BorderStyleProperty prop, AttributeInfo value, bool allowTransparency);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.BorderStyles : Enum {
    public int value__;
    public static BorderStyles Default;
    public static BorderStyles None;
    public static BorderStyles Dotted;
    public static BorderStyles Dashed;
    public static BorderStyles Solid;
    public static BorderStyles Double;
    public static BorderStyles DashDot;
    public static BorderStyles DashDotDot;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.Calendars : Enum {
    public int value__;
    public static Calendars Default;
    public static Calendars Gregorian;
    public static Calendars GregorianArabic;
    public static Calendars GregorianMiddleEastFrench;
    public static Calendars GregorianTransliteratedEnglish;
    public static Calendars GregorianTransliteratedFrench;
    public static Calendars GregorianUSEnglish;
    public static Calendars Hebrew;
    public static Calendars Hijri;
    public static Calendars Japanese;
    public static Calendars Korean;
    public static Calendars Julian;
    public static Calendars Taiwan;
    public static Calendars ThaiBuddhist;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CapImage : BaseGaugeImage {
    private ReportColorProperty m_hueColor;
    private ReportSizeProperty m_offsetX;
    private ReportSizeProperty m_offsetY;
    public ReportColorProperty HueColor { get; }
    public ReportSizeProperty OffsetX { get; }
    public ReportSizeProperty OffsetY { get; }
    internal CapImage CapImageDef { get; }
    public CapImageInstance Instance { get; }
    internal CapImage(CapImage defObject, GaugePanel gaugePanel);
    public ReportColorProperty get_HueColor();
    public ReportSizeProperty get_OffsetX();
    public ReportSizeProperty get_OffsetY();
    internal CapImage get_CapImageDef();
    public CapImageInstance get_Instance();
    internal virtual BaseGaugeImageInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CapImageInstance : BaseGaugeImageInstance {
    private ReportColor m_hueColor;
    private ReportSize m_offsetX;
    private ReportSize m_offsetY;
    public ReportColor HueColor { get; }
    public ReportSize OffsetX { get; }
    public ReportSize OffsetY { get; }
    internal CapImageInstance(CapImage defObject);
    public ReportColor get_HueColor();
    public ReportSize get_OffsetX();
    public ReportSize get_OffsetY();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CellContents : object {
    private IDefinitionPath m_ownerPath;
    private bool m_isOldSnapshot;
    private bool m_inSubtotal;
    private RenderingContext m_renderingContext;
    private ReportItem m_cellReportItem;
    private ReportItem m_renderReportItem;
    private ReportItem m_reportItem;
    private int m_colSpan;
    private int m_rowSpan;
    private IReportScope m_reportScope;
    private double m_sizeDelta;
    private bool m_isColumn;
    public ReportItem ReportItem { get; }
    public int ColSpan { get; }
    public int RowSpan { get; }
    internal CellContents(IReportScope reportScope, IDefinitionPath ownerPath, ReportItem cellReportItem, int rowSpan, int colSpan, RenderingContext renderingContext);
    internal CellContents(IDefinitionPath ownerPath, bool inSubtotal, ReportItem renderReportItem, int rowSpan, int colSpan, RenderingContext renderingContext);
    internal CellContents(IDefinitionPath ownerPath, bool inSubtotal, ReportItem renderReportItem, int rowSpan, int colSpan, RenderingContext renderingContext, double sizeDelta, bool isColumn);
    internal CellContents(Rectangle rectangle, int rowSpan, int colSpan, RenderingContext renderingContext);
    public ReportItem get_ReportItem();
    public int get_ColSpan();
    public int get_RowSpan();
    internal void SetNewContext();
    internal void UpdateRenderReportItem(ReportItem renderReportItem);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Chart : DataRegion {
    private int m_memberCellDefinitionIndex;
    private ChartHierarchy m_categories;
    private ChartHierarchy m_series;
    private ChartData m_chartData;
    private ReportSizeProperty m_dynamicHeight;
    private ReportSizeProperty m_dynamicWidth;
    private ChartAreaCollection m_chartAreas;
    private ChartTitleCollection m_titles;
    private ChartLegendCollection m_legends;
    private ChartBorderSkin m_borderSkin;
    private ChartCustomPaletteColorCollection m_customPaletteColors;
    private ReportEnumProperty`1<ChartPalette> m_palette;
    private ReportEnumProperty`1<PaletteHatchBehavior> m_paletteHatchBehavior;
    private ChartTitle m_noDataMessage;
    public bool DataValueSequenceRendering { get; }
    public ChartHierarchy CategoryHierarchy { get; }
    public ChartHierarchy SeriesHierarchy { get; }
    public ChartData ChartData { get; }
    public int Categories { get; }
    public int Series { get; }
    public ChartTitleCollection Titles { get; }
    public ChartCustomPaletteColorCollection CustomPaletteColors { get; }
    public ChartBorderSkin BorderSkin { get; }
    internal Chart ChartDef { get; }
    internal bool HasDataCells { get; }
    internal IDataRegionRowCollection RowCollection { get; }
    public ChartAreaCollection ChartAreas { get; }
    public ChartLegendCollection Legends { get; }
    public ReportEnumProperty`1<ChartPalette> Palette { get; }
    public ReportEnumProperty`1<PaletteHatchBehavior> PaletteHatchBehavior { get; }
    public ReportSizeProperty DynamicHeight { get; }
    public ReportSizeProperty DynamicWidth { get; }
    public ChartTitle NoDataMessage { get; }
    public bool SpecialBorderHandling { get; }
    internal ChartInstanceInfo ChartInstanceInfo { get; }
    internal Chart RenderChartDef { get; }
    internal Chart RenderChart { get; }
    internal Chart(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, Chart reportItemDef, RenderingContext renderingContext);
    internal Chart(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, Chart renderChart, RenderingContext renderingContext);
    public bool get_DataValueSequenceRendering();
    public ChartHierarchy get_CategoryHierarchy();
    public ChartHierarchy get_SeriesHierarchy();
    public ChartData get_ChartData();
    public int get_Categories();
    public int get_Series();
    public ChartTitleCollection get_Titles();
    public ChartCustomPaletteColorCollection get_CustomPaletteColors();
    public ChartBorderSkin get_BorderSkin();
    internal Chart get_ChartDef();
    internal virtual bool get_HasDataCells();
    internal virtual IDataRegionRowCollection get_RowCollection();
    public ChartAreaCollection get_ChartAreas();
    public ChartLegendCollection get_Legends();
    public ReportEnumProperty`1<ChartPalette> get_Palette();
    public ReportEnumProperty`1<PaletteHatchBehavior> get_PaletteHatchBehavior();
    public ReportSizeProperty get_DynamicHeight();
    public ReportSizeProperty get_DynamicWidth();
    public ChartTitle get_NoDataMessage();
    public bool get_SpecialBorderHandling();
    internal ChartInstanceInfo get_ChartInstanceInfo();
    internal Chart get_RenderChartDef();
    internal virtual ReportItemInstance GetOrCreateInstance();
    internal virtual void SetNewContextChildren();
    internal Chart get_RenderChart();
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
    internal int GetCurrentMemberCellDefinitionIndex();
    internal int GetAndIncrementMemberCellDefinitionIndex();
    internal void ResetMemberCellDefinitionIndex(int startIndex);
    internal ChartMember GetChartMember(ChartSeries chartSeries);
    private int GetSeriesIndex(ChartSeries series);
    internal ChartMember GetChartMember(ChartMemberCollection chartMemberCollection, int memberCellIndex);
    internal List`1<ChartDerivedSeries> GetChildrenDerivedSeries(string chartSeriesName);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAlignType : object {
    private Chart m_chart;
    private ChartAlignType m_chartAlignTypeDef;
    private ChartAlignTypeInstance m_instance;
    private ReportBoolProperty m_axesView;
    private ReportBoolProperty m_cursor;
    private ReportBoolProperty m_position;
    private ReportBoolProperty m_innerPlotPosition;
    public ReportBoolProperty AxesView { get; }
    public ReportBoolProperty Cursor { get; }
    public ReportBoolProperty Position { get; }
    public ReportBoolProperty InnerPlotPosition { get; }
    internal Chart ChartDef { get; }
    internal ChartAlignType ChartAlignTypeDef { get; }
    public ChartAlignTypeInstance Instance { get; }
    internal ChartAlignType(ChartAlignType chartAlignTypeDef, Chart chart);
    public ReportBoolProperty get_AxesView();
    public ReportBoolProperty get_Cursor();
    public ReportBoolProperty get_Position();
    public ReportBoolProperty get_InnerPlotPosition();
    internal Chart get_ChartDef();
    internal ChartAlignType get_ChartAlignTypeDef();
    public ChartAlignTypeInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAlignTypeInstance : BaseInstance {
    private ChartAlignType m_chartAlignTypeDef;
    private Nullable`1<bool> m_axesView;
    private Nullable`1<bool> m_cursor;
    private Nullable`1<bool> m_position;
    private Nullable`1<bool> m_innerPlotPosition;
    public bool AxesView { get; }
    public bool Cursor { get; }
    public bool Position { get; }
    public bool InnerPlotPosition { get; }
    internal ChartAlignTypeInstance(ChartAlignType chartAlignTypeDef);
    public bool get_AxesView();
    public bool get_Cursor();
    public bool get_Position();
    public bool get_InnerPlotPosition();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartAllowOutsideChartArea : Enum {
    public int value__;
    public static ChartAllowOutsideChartArea Partial;
    public static ChartAllowOutsideChartArea True;
    public static ChartAllowOutsideChartArea False;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartArea : ChartObjectCollectionItem`1<ChartAreaInstance> {
    private Chart m_chart;
    private ChartArea m_chartAreaDef;
    private Style m_style;
    private ChartAxisCollection m_categoryAxes;
    private ChartAxisCollection m_valueAxes;
    private ChartThreeDProperties m_threeDProperties;
    private ReportBoolProperty m_hidden;
    private ReportEnumProperty`1<ChartAreaAlignOrientations> m_alignOrientation;
    private ChartAlignType m_chartAlignType;
    private ReportBoolProperty m_equallySizedAxesFont;
    private ChartElementPosition m_chartElementPosition;
    private ChartElementPosition m_chartInnerPlotPosition;
    public string Name { get; }
    public Style Style { get; }
    public ChartThreeDProperties ThreeDProperties { get; }
    public ChartAxisCollection CategoryAxes { get; }
    public ChartAxisCollection ValueAxes { get; }
    public ReportBoolProperty Hidden { get; }
    public ReportEnumProperty`1<ChartAreaAlignOrientations> AlignOrientation { get; }
    public ChartAlignType ChartAlignType { get; }
    public string AlignWithChartArea { get; }
    public ReportBoolProperty EquallySizedAxesFont { get; }
    public ChartElementPosition ChartElementPosition { get; }
    public ChartElementPosition ChartInnerPlotPosition { get; }
    internal ChartArea ChartAreaDef { get; }
    internal Chart ChartDef { get; }
    public ChartAreaInstance Instance { get; }
    internal ChartArea(ChartArea chartAreaDef, Chart chart);
    internal ChartArea(Chart chart);
    public string get_Name();
    public sealed virtual Style get_Style();
    public ChartThreeDProperties get_ThreeDProperties();
    public ChartAxisCollection get_CategoryAxes();
    public ChartAxisCollection get_ValueAxes();
    public ReportBoolProperty get_Hidden();
    public ReportEnumProperty`1<ChartAreaAlignOrientations> get_AlignOrientation();
    public ChartAlignType get_ChartAlignType();
    public string get_AlignWithChartArea();
    public ReportBoolProperty get_EquallySizedAxesFont();
    public ChartElementPosition get_ChartElementPosition();
    public ChartElementPosition get_ChartInnerPlotPosition();
    internal ChartArea get_ChartAreaDef();
    internal Chart get_ChartDef();
    public ChartAreaInstance get_Instance();
    internal virtual void SetNewContext();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartAreaAlignOrientations : Enum {
    public int value__;
    public static ChartAreaAlignOrientations None;
    public static ChartAreaAlignOrientations Vertical;
    public static ChartAreaAlignOrientations Horizontal;
    public static ChartAreaAlignOrientations All;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAreaCollection : ChartObjectCollectionBase`2<ChartArea, ChartAreaInstance> {
    private Chart m_chart;
    public int Count { get; }
    internal ChartAreaCollection(Chart chart);
    protected virtual ChartArea CreateChartObject(int index);
    public virtual int get_Count();
    internal ChartArea GetByName(string areaName);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAreaInstance : BaseInstance {
    private ChartArea m_chartAreaDef;
    private StyleInstance m_style;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<ChartAreaAlignOrientations> m_alignOrientation;
    private Nullable`1<bool> m_equallySizedAxesFont;
    public StyleInstance Style { get; }
    public bool Hidden { get; }
    public ChartAreaAlignOrientations AlignOrientation { get; }
    public bool EquallySizedAxesFont { get; }
    internal ChartAreaInstance(ChartArea chartAreaDef);
    public StyleInstance get_Style();
    public bool get_Hidden();
    public ChartAreaAlignOrientations get_AlignOrientation();
    public bool get_EquallySizedAxesFont();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartAutoBool : Enum {
    public int value__;
    public static ChartAutoBool Auto;
    public static ChartAutoBool True;
    public static ChartAutoBool False;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAxis : ChartObjectCollectionItem`1<ChartAxisInstance> {
    private ChartGridLines m_majorGridlines;
    private ChartGridLines m_minorGridlines;
    private ReportVariantProperty m_crossAt;
    private ReportVariantProperty m_min;
    private ReportVariantProperty m_max;
    private ChartAxisTitle m_title;
    private Style m_style;
    private bool m_isCategory;
    private Chart m_chart;
    private AxisInstance m_renderAxisInstance;
    private Axis m_renderAxisDef;
    private ChartAxis m_axisDef;
    private CustomPropertyCollection m_customProperties;
    private bool m_customPropertiesReady;
    private ChartStripLineCollection m_chartStripLines;
    private ReportEnumProperty`1<ChartAutoBool> m_visible;
    private ReportEnumProperty`1<ChartAutoBool> m_margin;
    private ReportDoubleProperty m_interval;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalType;
    private ReportDoubleProperty m_intervalOffset;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalOffsetType;
    private ReportDoubleProperty m_labelInterval;
    private ReportEnumProperty`1<ChartIntervalType> m_labelIntervalType;
    private ReportDoubleProperty m_labelIntervalOffset;
    private ReportEnumProperty`1<ChartIntervalType> m_labelIntervalOffsetType;
    private ReportBoolProperty m_variableAutoInterval;
    private ChartTickMarks m_majorTickMarks;
    private ChartTickMarks m_minorTickMarks;
    private ReportBoolProperty m_marksAlwaysAtPlotEdge;
    private ReportBoolProperty m_reverse;
    private ReportEnumProperty`1<ChartAxisLocation> m_location;
    private ReportBoolProperty m_interlaced;
    private ReportColorProperty m_interlacedColor;
    private ReportBoolProperty m_logScale;
    private ReportDoubleProperty m_logBase;
    private ReportBoolProperty m_hideLabels;
    private ReportDoubleProperty m_angle;
    private ReportBoolProperty m_preventFontShrink;
    private ReportBoolProperty m_preventFontGrow;
    private ReportBoolProperty m_preventLabelOffset;
    private ReportBoolProperty m_preventWordWrap;
    private ReportEnumProperty`1<ChartAxisLabelRotation> m_allowLabelRotation;
    private ReportBoolProperty m_includeZero;
    private ReportBoolProperty m_labelsAutoFitDisabled;
    private ReportSizeProperty m_minFontSize;
    private ReportSizeProperty m_maxFontSize;
    private ReportBoolProperty m_offsetLabels;
    private ReportBoolProperty m_hideEndLabels;
    private ReportEnumProperty`1<ChartAxisArrow> m_arrows;
    private ChartAxisScaleBreak m_axisScaleBreak;
    public Style Style { get; }
    public ChartAxisTitle Title { get; }
    public string Name { get; }
    public ChartGridLines MajorGridLines { get; }
    public ChartGridLines MinorGridLines { get; }
    public ReportVariantProperty CrossAt { get; }
    public ChartStripLineCollection StripLines { get; }
    public bool Scalar { get; }
    public ReportVariantProperty Minimum { get; }
    public ReportVariantProperty Maximum { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ReportEnumProperty`1<ChartAutoBool> Visible { get; }
    public ReportEnumProperty`1<ChartAutoBool> Margin { get; }
    public ReportDoubleProperty Interval { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalType { get; }
    public ReportDoubleProperty IntervalOffset { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalOffsetType { get; }
    public ReportDoubleProperty LabelInterval { get; }
    public ReportEnumProperty`1<ChartIntervalType> LabelIntervalType { get; }
    public ReportDoubleProperty LabelIntervalOffset { get; }
    public ReportEnumProperty`1<ChartIntervalType> LabelIntervalOffsetType { get; }
    public ReportBoolProperty VariableAutoInterval { get; }
    public ChartTickMarks MajorTickMarks { get; }
    public ChartTickMarks MinorTickMarks { get; }
    public ReportBoolProperty MarksAlwaysAtPlotEdge { get; }
    public ReportBoolProperty Reverse { get; }
    public ReportEnumProperty`1<ChartAxisLocation> Location { get; }
    public ReportBoolProperty Interlaced { get; }
    public ReportColorProperty InterlacedColor { get; }
    public ReportBoolProperty LogScale { get; }
    public ReportDoubleProperty LogBase { get; }
    public ReportBoolProperty HideLabels { get; }
    public ReportDoubleProperty Angle { get; }
    public ReportEnumProperty`1<ChartAxisArrow> Arrows { get; }
    public ReportBoolProperty PreventFontShrink { get; }
    public ReportBoolProperty PreventFontGrow { get; }
    public ReportBoolProperty PreventLabelOffset { get; }
    public ReportBoolProperty PreventWordWrap { get; }
    public ReportEnumProperty`1<ChartAxisLabelRotation> AllowLabelRotation { get; }
    public ReportBoolProperty IncludeZero { get; }
    public ReportBoolProperty LabelsAutoFitDisabled { get; }
    public ReportSizeProperty MinFontSize { get; }
    public ReportSizeProperty MaxFontSize { get; }
    public ReportBoolProperty OffsetLabels { get; }
    public ReportBoolProperty HideEndLabels { get; }
    public ChartAxisScaleBreak AxisScaleBreak { get; }
    internal Chart ChartDef { get; }
    internal ChartAxis AxisDef { get; }
    internal AxisInstance RenderAxisInstance { get; }
    public ChartAxisInstance Instance { get; }
    internal ChartAxis(ChartAxis axisDef, Chart chart);
    internal ChartAxis(Axis renderAxisDef, AxisInstance renderAxisInstance, Chart chart, bool isCategory);
    public sealed virtual Style get_Style();
    public ChartAxisTitle get_Title();
    public string get_Name();
    public ChartGridLines get_MajorGridLines();
    public ChartGridLines get_MinorGridLines();
    public ReportVariantProperty get_CrossAt();
    public ChartStripLineCollection get_StripLines();
    public bool get_Scalar();
    public ReportVariantProperty get_Minimum();
    public ReportVariantProperty get_Maximum();
    public CustomPropertyCollection get_CustomProperties();
    public ReportEnumProperty`1<ChartAutoBool> get_Visible();
    public ReportEnumProperty`1<ChartAutoBool> get_Margin();
    public ReportDoubleProperty get_Interval();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalType();
    public ReportDoubleProperty get_IntervalOffset();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalOffsetType();
    public ReportDoubleProperty get_LabelInterval();
    public ReportEnumProperty`1<ChartIntervalType> get_LabelIntervalType();
    public ReportDoubleProperty get_LabelIntervalOffset();
    public ReportEnumProperty`1<ChartIntervalType> get_LabelIntervalOffsetType();
    public ReportBoolProperty get_VariableAutoInterval();
    public ChartTickMarks get_MajorTickMarks();
    public ChartTickMarks get_MinorTickMarks();
    public ReportBoolProperty get_MarksAlwaysAtPlotEdge();
    public ReportBoolProperty get_Reverse();
    public ReportEnumProperty`1<ChartAxisLocation> get_Location();
    public ReportBoolProperty get_Interlaced();
    public ReportColorProperty get_InterlacedColor();
    public ReportBoolProperty get_LogScale();
    public ReportDoubleProperty get_LogBase();
    public ReportBoolProperty get_HideLabels();
    public ReportDoubleProperty get_Angle();
    public ReportEnumProperty`1<ChartAxisArrow> get_Arrows();
    public ReportBoolProperty get_PreventFontShrink();
    public ReportBoolProperty get_PreventFontGrow();
    public ReportBoolProperty get_PreventLabelOffset();
    public ReportBoolProperty get_PreventWordWrap();
    public ReportEnumProperty`1<ChartAxisLabelRotation> get_AllowLabelRotation();
    public ReportBoolProperty get_IncludeZero();
    public ReportBoolProperty get_LabelsAutoFitDisabled();
    public ReportSizeProperty get_MinFontSize();
    public ReportSizeProperty get_MaxFontSize();
    public ReportBoolProperty get_OffsetLabels();
    public ReportBoolProperty get_HideEndLabels();
    public ChartAxisScaleBreak get_AxisScaleBreak();
    internal Chart get_ChartDef();
    internal ChartAxis get_AxisDef();
    internal AxisInstance get_RenderAxisInstance();
    public ChartAxisInstance get_Instance();
    internal virtual void SetNewContext();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisArrow : Enum {
    public int value__;
    public static ChartAxisArrow None;
    public static ChartAxisArrow Triangle;
    public static ChartAxisArrow SharpTriangle;
    public static ChartAxisArrow Lines;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisCollection : ChartObjectCollectionBase`2<ChartAxis, ChartAxisInstance> {
    private Chart m_chart;
    private ChartArea m_chartArea;
    private bool m_isCategory;
    public int Count { get; }
    internal ChartAxisCollection(ChartArea chartArea, Chart chart, bool isCategory);
    protected virtual ChartAxis CreateChartObject(int index);
    public virtual int get_Count();
    internal ChartAxis GetByName(string axisName);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisInstance : BaseInstance {
    private ChartAxis m_axisDef;
    private StyleInstance m_style;
    private object m_min;
    private object m_max;
    private object m_crossAt;
    private Nullable`1<ChartAutoBool> m_visible;
    private Nullable`1<ChartAutoBool> m_margin;
    private Nullable`1<double> m_interval;
    private Nullable`1<ChartIntervalType> m_intervalType;
    private Nullable`1<double> m_intervalOffset;
    private Nullable`1<ChartIntervalType> m_intervalOffsetType;
    private Nullable`1<double> m_labelInterval;
    private Nullable`1<ChartIntervalType> m_labelIntervalType;
    private Nullable`1<double> m_labelIntervalOffset;
    private Nullable`1<ChartIntervalType> m_labelIntervalOffsetType;
    private Nullable`1<bool> m_variableAutoInterval;
    private Nullable`1<bool> m_marksAlwaysAtPlotEdge;
    private Nullable`1<bool> m_reverse;
    private Nullable`1<ChartAxisLocation> m_location;
    private Nullable`1<bool> m_interlaced;
    private ReportColor m_interlacedColor;
    private Nullable`1<bool> m_logScale;
    private Nullable`1<double> m_logBase;
    private Nullable`1<bool> m_hideLabels;
    private Nullable`1<double> m_angle;
    private Nullable`1<bool> m_preventFontShrink;
    private Nullable`1<bool> m_preventFontGrow;
    private Nullable`1<bool> m_preventLabelOffset;
    private Nullable`1<bool> m_preventWordWrap;
    private Nullable`1<ChartAxisLabelRotation> m_allowLabelRotation;
    private Nullable`1<bool> m_includeZero;
    private Nullable`1<bool> m_labelsAutoFitDisabled;
    private ReportSize m_minFontSize;
    private ReportSize m_maxFontSize;
    private Nullable`1<bool> m_offsetLabels;
    private Nullable`1<bool> m_hideEndLabels;
    private Nullable`1<ChartAxisArrow> m_arrows;
    public StyleInstance Style { get; }
    public object CrossAt { get; }
    public object Minimum { get; }
    public object Maximum { get; }
    public ChartAutoBool Visible { get; }
    public ChartAutoBool Margin { get; }
    public double Interval { get; }
    public ChartIntervalType IntervalType { get; }
    public double IntervalOffset { get; }
    public ChartIntervalType IntervalOffsetType { get; }
    public double LabelInterval { get; }
    public ChartIntervalType LabelIntervalType { get; }
    public double LabelIntervalOffset { get; }
    public ChartIntervalType LabelIntervalOffsetType { get; }
    public bool VariableAutoInterval { get; }
    public bool MarksAlwaysAtPlotEdge { get; }
    public bool Reverse { get; }
    public ChartAxisLocation Location { get; }
    public bool Interlaced { get; }
    public ReportColor InterlacedColor { get; }
    public bool LogScale { get; }
    public double LogBase { get; }
    public bool HideLabels { get; }
    public double Angle { get; }
    public ChartAxisArrow Arrows { get; }
    public bool PreventFontShrink { get; }
    public bool PreventFontGrow { get; }
    public bool PreventLabelOffset { get; }
    public bool PreventWordWrap { get; }
    public ChartAxisLabelRotation AllowLabelRotation { get; }
    public bool IncludeZero { get; }
    public bool LabelsAutoFitDisabled { get; }
    public ReportSize MinFontSize { get; }
    public ReportSize MaxFontSize { get; }
    public bool OffsetLabels { get; }
    public bool HideEndLabels { get; }
    internal ChartAxisInstance(ChartAxis axisDef);
    public StyleInstance get_Style();
    public object get_CrossAt();
    public object get_Minimum();
    public object get_Maximum();
    public ChartAutoBool get_Visible();
    public ChartAutoBool get_Margin();
    public double get_Interval();
    public ChartIntervalType get_IntervalType();
    public double get_IntervalOffset();
    public ChartIntervalType get_IntervalOffsetType();
    public double get_LabelInterval();
    public ChartIntervalType get_LabelIntervalType();
    public double get_LabelIntervalOffset();
    public ChartIntervalType get_LabelIntervalOffsetType();
    public bool get_VariableAutoInterval();
    public bool get_MarksAlwaysAtPlotEdge();
    public bool get_Reverse();
    public ChartAxisLocation get_Location();
    public bool get_Interlaced();
    public ReportColor get_InterlacedColor();
    public bool get_LogScale();
    public double get_LogBase();
    public bool get_HideLabels();
    public double get_Angle();
    public ChartAxisArrow get_Arrows();
    public bool get_PreventFontShrink();
    public bool get_PreventFontGrow();
    public bool get_PreventLabelOffset();
    public bool get_PreventWordWrap();
    public ChartAxisLabelRotation get_AllowLabelRotation();
    public bool get_IncludeZero();
    public bool get_LabelsAutoFitDisabled();
    public ReportSize get_MinFontSize();
    public ReportSize get_MaxFontSize();
    public bool get_OffsetLabels();
    public bool get_HideEndLabels();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisLabelRotation : Enum {
    public int value__;
    public static ChartAxisLabelRotation None;
    public static ChartAxisLabelRotation Rotate30;
    public static ChartAxisLabelRotation Rotate45;
    public static ChartAxisLabelRotation Rotate90;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisLocation : Enum {
    public int value__;
    public static ChartAxisLocation Default;
    public static ChartAxisLocation Opposite;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisScaleBreak : object {
    private Chart m_chart;
    private ChartAxisScaleBreak m_chartAxisScaleBreakDef;
    private ChartAxisScaleBreakInstance m_instance;
    private Style m_style;
    private ReportBoolProperty m_enabled;
    private ReportEnumProperty`1<ChartBreakLineType> m_breakLineType;
    private ReportIntProperty m_collapsibleSpaceThreshold;
    private ReportIntProperty m_maxNumberOfBreaks;
    private ReportDoubleProperty m_spacing;
    private ReportEnumProperty`1<ChartAutoBool> m_includeZero;
    public Style Style { get; }
    public ReportBoolProperty Enabled { get; }
    public ReportEnumProperty`1<ChartBreakLineType> BreakLineType { get; }
    public ReportIntProperty CollapsibleSpaceThreshold { get; }
    public ReportIntProperty MaxNumberOfBreaks { get; }
    public ReportDoubleProperty Spacing { get; }
    public ReportEnumProperty`1<ChartAutoBool> IncludeZero { get; }
    internal Chart ChartDef { get; }
    internal ChartAxisScaleBreak ChartAxisScaleBreakDef { get; }
    public ChartAxisScaleBreakInstance Instance { get; }
    internal ChartAxisScaleBreak(ChartAxisScaleBreak chartAxisScaleBreakDef, Chart chart);
    public sealed virtual Style get_Style();
    public ReportBoolProperty get_Enabled();
    public ReportEnumProperty`1<ChartBreakLineType> get_BreakLineType();
    public ReportIntProperty get_CollapsibleSpaceThreshold();
    public ReportIntProperty get_MaxNumberOfBreaks();
    public ReportDoubleProperty get_Spacing();
    public ReportEnumProperty`1<ChartAutoBool> get_IncludeZero();
    internal Chart get_ChartDef();
    internal ChartAxisScaleBreak get_ChartAxisScaleBreakDef();
    public ChartAxisScaleBreakInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisScaleBreakInstance : BaseInstance {
    private ChartAxisScaleBreak m_chartAxisScaleBreakDef;
    private StyleInstance m_style;
    private Nullable`1<bool> m_enabled;
    private Nullable`1<ChartBreakLineType> m_breakLineType;
    private Nullable`1<int> m_collapsibleSpaceThreshold;
    private Nullable`1<int> m_maxNumberOfBreaks;
    private Nullable`1<double> m_spacing;
    private Nullable`1<ChartAutoBool> m_includeZero;
    public StyleInstance Style { get; }
    public bool Enabled { get; }
    public ChartBreakLineType BreakLineType { get; }
    public int CollapsibleSpaceThreshold { get; }
    public int MaxNumberOfBreaks { get; }
    public double Spacing { get; }
    public ChartAutoBool IncludeZero { get; }
    internal ChartAxisScaleBreakInstance(ChartAxisScaleBreak chartAxisScaleBreakDef);
    public StyleInstance get_Style();
    public bool get_Enabled();
    public ChartBreakLineType get_BreakLineType();
    public int get_CollapsibleSpaceThreshold();
    public int get_MaxNumberOfBreaks();
    public double get_Spacing();
    public ChartAutoBool get_IncludeZero();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisTitle : ChartObjectCollectionItem`1<ChartAxisTitleInstance> {
    private Chart m_chart;
    private ChartAxisTitle m_chartAxisTitleDef;
    private Style m_style;
    private ReportStringProperty m_caption;
    private ChartTitle m_renderChartTitleDef;
    private ChartTitleInstance m_renderChartTitleInstance;
    private ReportEnumProperty`1<ChartAxisTitlePositions> m_position;
    private ReportEnumProperty`1<TextOrientations> m_textOrientation;
    public ReportStringProperty Caption { get; }
    public Style Style { get; }
    public ReportEnumProperty`1<ChartAxisTitlePositions> Position { get; }
    public ReportEnumProperty`1<TextOrientations> TextOrientation { get; }
    internal Chart ChartDef { get; }
    internal ChartAxisTitle ChartAxisTitleDef { get; }
    internal ChartTitleInstance RenderChartTitleInstance { get; }
    public ChartAxisTitleInstance Instance { get; }
    internal ChartAxisTitle(ChartAxisTitle chartAxisTitleDef, Chart chart);
    internal ChartAxisTitle(ChartTitle renderChartTitleDef, ChartTitleInstance renderChartTitleInstance, Chart chart);
    public ReportStringProperty get_Caption();
    public sealed virtual Style get_Style();
    public ReportEnumProperty`1<ChartAxisTitlePositions> get_Position();
    public ReportEnumProperty`1<TextOrientations> get_TextOrientation();
    internal Chart get_ChartDef();
    internal ChartAxisTitle get_ChartAxisTitleDef();
    internal ChartTitleInstance get_RenderChartTitleInstance();
    public ChartAxisTitleInstance get_Instance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisTitleInstance : BaseInstance {
    private ChartAxisTitle m_chartAxisTitleDef;
    private StyleInstance m_style;
    private bool m_captionEvaluated;
    private string m_caption;
    private Nullable`1<ChartAxisTitlePositions> m_position;
    private Nullable`1<TextOrientations> m_textOrientation;
    public string Caption { get; }
    public StyleInstance Style { get; }
    public ChartAxisTitlePositions Position { get; }
    public TextOrientations TextOrientation { get; }
    internal ChartAxisTitleInstance(ChartAxisTitle chartAxisTitleDef);
    public string get_Caption();
    public StyleInstance get_Style();
    public ChartAxisTitlePositions get_Position();
    public TextOrientations get_TextOrientation();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartAxisTitlePositions : Enum {
    public int value__;
    public static ChartAxisTitlePositions Center;
    public static ChartAxisTitlePositions Near;
    public static ChartAxisTitlePositions Far;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartBorderSkin : object {
    private Chart m_chart;
    private ChartBorderSkin m_chartBorderSkinDef;
    private ChartBorderSkinInstance m_instance;
    private Style m_style;
    private ReportEnumProperty`1<ChartBorderSkinType> m_borderSkinType;
    public Style Style { get; }
    public ReportEnumProperty`1<ChartBorderSkinType> BorderSkinType { get; }
    internal Chart ChartDef { get; }
    internal ChartBorderSkin ChartBorderSkinDef { get; }
    public ChartBorderSkinInstance Instance { get; }
    internal ChartBorderSkin(ChartBorderSkin chartBorderSkinDef, Chart chart);
    public sealed virtual Style get_Style();
    public ReportEnumProperty`1<ChartBorderSkinType> get_BorderSkinType();
    internal Chart get_ChartDef();
    internal ChartBorderSkin get_ChartBorderSkinDef();
    public ChartBorderSkinInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartBorderSkinInstance : BaseInstance {
    private ChartBorderSkin m_chartBorderSkinDef;
    private StyleInstance m_style;
    private Nullable`1<ChartBorderSkinType> m_borderSkinType;
    public StyleInstance Style { get; }
    public ChartBorderSkinType BorderSkinType { get; }
    internal ChartBorderSkinInstance(ChartBorderSkin chartBorderSkinDef);
    public StyleInstance get_Style();
    public ChartBorderSkinType get_BorderSkinType();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartBorderSkinType : Enum {
    public int value__;
    public static ChartBorderSkinType None;
    public static ChartBorderSkinType Emboss;
    public static ChartBorderSkinType Raised;
    public static ChartBorderSkinType Sunken;
    public static ChartBorderSkinType FrameThin1;
    public static ChartBorderSkinType FrameThin2;
    public static ChartBorderSkinType FrameThin3;
    public static ChartBorderSkinType FrameThin4;
    public static ChartBorderSkinType FrameThin5;
    public static ChartBorderSkinType FrameThin6;
    public static ChartBorderSkinType FrameTitle1;
    public static ChartBorderSkinType FrameTitle2;
    public static ChartBorderSkinType FrameTitle3;
    public static ChartBorderSkinType FrameTitle4;
    public static ChartBorderSkinType FrameTitle5;
    public static ChartBorderSkinType FrameTitle6;
    public static ChartBorderSkinType FrameTitle7;
    public static ChartBorderSkinType FrameTitle8;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartBreakLineType : Enum {
    public int value__;
    public static ChartBreakLineType Ragged;
    public static ChartBreakLineType None;
    public static ChartBreakLineType Straight;
    public static ChartBreakLineType Wave;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartCalloutLineAnchor : Enum {
    public int value__;
    public static ChartCalloutLineAnchor Arrow;
    public static ChartCalloutLineAnchor Diamond;
    public static ChartCalloutLineAnchor Square;
    public static ChartCalloutLineAnchor Round;
    public static ChartCalloutLineAnchor None;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartCalloutLineStyle : Enum {
    public int value__;
    public static ChartCalloutLineStyle Solid;
    public static ChartCalloutLineStyle Dotted;
    public static ChartCalloutLineStyle Dashed;
    public static ChartCalloutLineStyle Double;
    public static ChartCalloutLineStyle DashDot;
    public static ChartCalloutLineStyle DashDotDot;
    public static ChartCalloutLineStyle None;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartCalloutStyle : Enum {
    public int value__;
    public static ChartCalloutStyle Underline;
    public static ChartCalloutStyle Box;
    public static ChartCalloutStyle None;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartCellAlignment : Enum {
    public int value__;
    public static ChartCellAlignment Center;
    public static ChartCellAlignment Top;
    public static ChartCellAlignment TopLeft;
    public static ChartCellAlignment TopRight;
    public static ChartCellAlignment Left;
    public static ChartCellAlignment Right;
    public static ChartCellAlignment BottomRight;
    public static ChartCellAlignment Bottom;
    public static ChartCellAlignment BottomLeft;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartCellType : Enum {
    public int value__;
    public static ChartCellType Text;
    public static ChartCellType SeriesSymbol;
    public static ChartCellType Image;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartColumnType : Enum {
    public int value__;
    public static ChartColumnType Text;
    public static ChartColumnType SeriesSymbol;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartCustomPaletteColor : ChartObjectCollectionItem`1<ChartCustomPaletteColorInstance> {
    private Chart m_chart;
    private ReportColorProperty m_color;
    private ChartCustomPaletteColor m_chartCustomPaletteColorDef;
    public ReportColorProperty Color { get; }
    internal Chart ChartDef { get; }
    internal ChartCustomPaletteColor ChartCustomPaletteColorDef { get; }
    public ChartCustomPaletteColorInstance Instance { get; }
    internal ChartCustomPaletteColor(ChartCustomPaletteColor chartCustomPaletteColorDef, Chart chart);
    public ReportColorProperty get_Color();
    internal Chart get_ChartDef();
    internal ChartCustomPaletteColor get_ChartCustomPaletteColorDef();
    public ChartCustomPaletteColorInstance get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartCustomPaletteColorCollection : ChartObjectCollectionBase`2<ChartCustomPaletteColor, ChartCustomPaletteColorInstance> {
    private Chart m_chart;
    public int Count { get; }
    internal ChartCustomPaletteColorCollection(Chart chart);
    protected virtual ChartCustomPaletteColor CreateChartObject(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartCustomPaletteColorInstance : BaseInstance {
    private ChartCustomPaletteColor m_chartCustomPaletteColorDef;
    private bool m_colorEvaluated;
    private ReportColor m_color;
    public ReportColor Color { get; }
    internal ChartCustomPaletteColorInstance(ChartCustomPaletteColor chartCustomPaletteColorDef);
    public ReportColor get_Color();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartData : object {
    private Chart m_owner;
    private ChartSeriesCollection m_seriesCollection;
    private ChartDerivedSeriesCollection m_chartDerivedSeriesCollection;
    internal bool HasSeriesCollection { get; }
    public ChartSeriesCollection SeriesCollection { get; }
    public ChartDerivedSeriesCollection DerivedSeriesCollection { get; }
    internal ChartData(Chart owner);
    internal bool get_HasSeriesCollection();
    public ChartSeriesCollection get_SeriesCollection();
    public ChartDerivedSeriesCollection get_DerivedSeriesCollection();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartDataLabel : object {
    private ChartDataLabel m_chartDataLabelDef;
    private Chart m_chart;
    private ChartDataLabelInstance m_instance;
    private Style m_style;
    private ReportStringProperty m_value;
    private ChartDataPoint m_dataPoint;
    private InternalChartSeries m_chartSeries;
    private ReportBoolProperty m_visible;
    private ReportEnumProperty`1<ChartDataLabelPositions> m_position;
    private ReportIntProperty m_rotation;
    private ActionInfo m_actionInfo;
    private ReportBoolProperty m_useValueAsLabel;
    private ReportStringProperty m_toolTip;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ReportStringProperty Label { get; }
    public ReportBoolProperty UseValueAsLabel { get; }
    public ReportBoolProperty Visible { get; }
    public ReportIntProperty Rotation { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportEnumProperty`1<ChartDataLabelPositions> Position { get; }
    internal IReportScope ReportScope { get; }
    private IInstancePath InstancePath { get; }
    internal Chart ChartDef { get; }
    internal ChartDataPoint ChartDataPoint { get; }
    internal ChartDataLabel ChartDataLabelDef { get; }
    public ChartDataLabelInstance Instance { get; }
    internal ChartDataLabel(ChartDataPoint dataPoint, ChartDataLabel chartDataLabelDef, Chart chart);
    internal ChartDataLabel(InternalChartSeries series, ChartDataLabel chartDataLabelDef, Chart chart);
    internal ChartDataLabel(ChartDataPoint dataPoint, Chart chart);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ReportStringProperty get_Label();
    public ReportBoolProperty get_UseValueAsLabel();
    public ReportBoolProperty get_Visible();
    public ReportIntProperty get_Rotation();
    public ReportStringProperty get_ToolTip();
    public ReportEnumProperty`1<ChartDataLabelPositions> get_Position();
    internal IReportScope get_ReportScope();
    private IInstancePath get_InstancePath();
    internal Chart get_ChartDef();
    internal ChartDataPoint get_ChartDataPoint();
    internal ChartDataLabel get_ChartDataLabelDef();
    public ChartDataLabelInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartDataLabelInstance : BaseInstance {
    private ChartDataLabel m_chartDataLabelDef;
    private StyleInstance m_style;
    private string m_formattedValue;
    private Nullable`1<VariantResult> m_originalValue;
    private Nullable`1<bool> m_useValueAsLabel;
    private Nullable`1<ChartDataLabelPositions> m_position;
    private Nullable`1<int> m_rotation;
    private Nullable`1<bool> m_visible;
    private string m_toolTip;
    public StyleInstance Style { get; }
    public object OriginalValue { get; }
    public string Label { get; }
    public bool UseValueAsLabel { get; }
    public string ToolTip { get; }
    public ChartDataLabelPositions Position { get; }
    public int Rotation { get; }
    public bool Visible { get; }
    internal ChartDataLabelInstance(ChartDataLabel chartDataLabelDef);
    public StyleInstance get_Style();
    public object get_OriginalValue();
    public string get_Label();
    public bool get_UseValueAsLabel();
    public string get_ToolTip();
    public ChartDataLabelPositions get_Position();
    public int get_Rotation();
    public bool get_Visible();
    private VariantResult GetOriginalValue();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartDataLabelPositions : Enum {
    public int value__;
    public static ChartDataLabelPositions Auto;
    public static ChartDataLabelPositions Top;
    public static ChartDataLabelPositions TopLeft;
    public static ChartDataLabelPositions TopRight;
    public static ChartDataLabelPositions Left;
    public static ChartDataLabelPositions Center;
    public static ChartDataLabelPositions Right;
    public static ChartDataLabelPositions BottomRight;
    public static ChartDataLabelPositions Bottom;
    public static ChartDataLabelPositions BottomLeft;
    public static ChartDataLabelPositions Outside;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartDataPoint : object {
    protected Chart m_owner;
    protected int m_rowIndex;
    protected int m_columnIndex;
    protected ChartDataPointValues m_dataPointValues;
    protected ActionInfo m_actionInfo;
    protected CustomPropertyCollection m_customProperties;
    protected bool m_customPropertiesReady;
    protected ChartDataPointInstance m_instance;
    protected Style m_style;
    protected ChartMarker m_marker;
    protected ChartDataLabel m_dataLabel;
    public DataElementOutputTypes DataElementOutput { get; }
    public string DataElementName { get; }
    public ChartDataPointValues DataPointValues { get; }
    public ChartItemInLegend ItemInLegend { get; }
    public ActionInfo ActionInfo { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public Style Style { get; }
    public ChartMarker Marker { get; }
    public ChartDataLabel DataLabel { get; }
    public ReportVariantProperty AxisLabel { get; }
    public ReportStringProperty ToolTip { get; }
    internal ChartDataPoint DataPointDef { get; }
    internal ChartDataPoint RenderItem { get; }
    internal ChartDataPoint RenderDataPointDef { get; }
    internal Chart ChartDef { get; }
    public ChartDataPointInstance Instance { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal ChartDataPoint(Chart owner, int rowIndex, int colIndex);
    public abstract virtual DataElementOutputTypes get_DataElementOutput();
    public abstract virtual string get_DataElementName();
    public abstract virtual ChartDataPointValues get_DataPointValues();
    public abstract virtual ChartItemInLegend get_ItemInLegend();
    public abstract virtual ActionInfo get_ActionInfo();
    public abstract virtual CustomPropertyCollection get_CustomProperties();
    public abstract virtual Style get_Style();
    public abstract virtual ChartMarker get_Marker();
    public abstract virtual ChartDataLabel get_DataLabel();
    public abstract virtual ReportVariantProperty get_AxisLabel();
    public abstract virtual ReportStringProperty get_ToolTip();
    internal abstract virtual ChartDataPoint get_DataPointDef();
    internal abstract virtual ChartDataPoint get_RenderItem();
    internal abstract virtual ChartDataPoint get_RenderDataPointDef();
    internal Chart get_ChartDef();
    public ChartDataPointInstance get_Instance();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    internal virtual IRIFReportScope get_RIFReportScope();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionCell.SetNewContext();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartDataPointInstance : BaseInstance {
    private ChartDataPoint m_chartDataPointDef;
    private StyleInstance m_style;
    private object m_axisLabel;
    private bool m_isNewContext;
    private string m_toolTip;
    public StyleInstance Style { get; }
    public object AxisLabel { get; }
    public string ToolTip { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal ChartDataPointInstance(ChartDataPoint chartDataPointDef);
    public StyleInstance get_Style();
    public object get_AxisLabel();
    public string get_ToolTip();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    internal virtual void SetNewContext();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartDataPointValues : object {
    private ChartDataPointValues m_chartDataPointValuesDef;
    private Chart m_chart;
    private ChartDataPointValuesInstance m_instance;
    private ReportVariantProperty m_x;
    private ReportVariantProperty m_y;
    private ReportVariantProperty m_size;
    private ReportVariantProperty m_high;
    private ReportVariantProperty m_low;
    private ReportVariantProperty m_start;
    private ReportVariantProperty m_end;
    private ReportVariantProperty m_mean;
    private ReportVariantProperty m_median;
    private ChartDataPoint m_dataPoint;
    public ReportVariantProperty X { get; }
    public ReportVariantProperty Y { get; }
    public ReportVariantProperty Size { get; }
    public ReportVariantProperty High { get; }
    public ReportVariantProperty Low { get; }
    public ReportVariantProperty Start { get; }
    public ReportVariantProperty End { get; }
    public ReportVariantProperty Mean { get; }
    public ReportVariantProperty Median { get; }
    internal Chart ChartDef { get; }
    internal ChartDataPoint ChartDataPoint { get; }
    internal ChartDataPointValues ChartDataPointValuesDef { get; }
    public ChartDataPointValuesInstance Instance { get; }
    internal ChartDataPointValues(ChartDataPoint dataPoint, ChartDataPointValues chartDataPointValuesDef, Chart chart);
    internal ChartDataPointValues(ChartDataPoint dataPoint, Chart chart);
    public ReportVariantProperty get_X();
    public ReportVariantProperty get_Y();
    public ReportVariantProperty get_Size();
    public ReportVariantProperty get_High();
    public ReportVariantProperty get_Low();
    public ReportVariantProperty get_Start();
    public ReportVariantProperty get_End();
    public ReportVariantProperty get_Mean();
    public ReportVariantProperty get_Median();
    internal Chart get_ChartDef();
    internal ChartDataPoint get_ChartDataPoint();
    internal ChartDataPointValues get_ChartDataPointValuesDef();
    public ChartDataPointValuesInstance get_Instance();
    internal DataValue GetDataValue(string propertyName);
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartDataPointValuesInstance : BaseInstance {
    private ChartDataPointValues m_chartDataPointValuesDef;
    private object m_x;
    private object m_y;
    private object m_size;
    private object m_high;
    private object m_low;
    private object m_start;
    private object m_end;
    private object m_mean;
    private object m_median;
    private List`1<string> m_fieldsUsedInValues;
    private bool m_fieldsUsedInValuesEvaluated;
    public object X { get; }
    public object Y { get; }
    public object Size { get; }
    public object High { get; }
    public object Low { get; }
    public object Start { get; }
    public object End { get; }
    public object Mean { get; }
    public object Median { get; }
    internal ChartDataPointValuesInstance(ChartDataPointValues chartDataPointValuesDef);
    public object get_X();
    public object get_Y();
    public object get_Size();
    public object get_High();
    public object get_Low();
    public object get_Start();
    public object get_End();
    public object get_Mean();
    public object get_Median();
    protected virtual void ResetInstanceCache();
    internal List`1<string> GetFieldsUsedInValues();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartDerivedSeries : ChartObjectCollectionItem`1<BaseInstance> {
    private Chart m_chart;
    private ChartDerivedSeries m_chartDerivedSeriesDef;
    private ChartSeries m_series;
    private ChartFormulaParameterCollection m_chartFormulaParameters;
    private InternalChartSeries m_sourceSeries;
    public ChartSeries Series { get; }
    public ChartFormulaParameterCollection FormulaParameters { get; }
    public string SourceChartSeriesName { get; }
    internal InternalChartSeries SourceSeries { get; }
    public ChartSeriesFormula DerivedSeriesFormula { get; }
    internal IReportScope ReportScope { get; }
    internal Chart ChartDef { get; }
    internal ChartDerivedSeries ChartDerivedSeriesDef { get; }
    internal ChartDerivedSeries(ChartDerivedSeries chartDerivedSeriesDef, Chart chart);
    public ChartSeries get_Series();
    public ChartFormulaParameterCollection get_FormulaParameters();
    public string get_SourceChartSeriesName();
    internal InternalChartSeries get_SourceSeries();
    public ChartSeriesFormula get_DerivedSeriesFormula();
    internal IReportScope get_ReportScope();
    internal Chart get_ChartDef();
    internal ChartDerivedSeries get_ChartDerivedSeriesDef();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartDerivedSeriesCollection : ChartObjectCollectionBase`2<ChartDerivedSeries, BaseInstance> {
    private Chart m_chart;
    public int Count { get; }
    internal ChartDerivedSeriesCollection(Chart chart);
    protected virtual ChartDerivedSeries CreateChartObject(int index);
    public virtual int get_Count();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartDynamicMemberInstance : ChartMemberInstance {
    protected int m_currentContext;
    protected bool m_isNewContext;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal ChartDynamicMemberInstance(Chart owner, ChartMember memberDef);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.ResetContext();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.MoveNext();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.GetInstanceIndex();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.SetInstanceIndex(int index);
    public virtual void ResetContext();
    public abstract virtual bool MoveNext();
    public int GetInstanceIndex();
    public abstract virtual bool SetInstanceIndex(int index);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartElementPosition : object {
    private Chart m_chart;
    private ChartElementPosition m_defObject;
    private ChartElementPositionInstance m_instance;
    private ReportDoubleProperty m_top;
    private ReportDoubleProperty m_left;
    private ReportDoubleProperty m_height;
    private ReportDoubleProperty m_width;
    public ReportDoubleProperty Top { get; }
    public ReportDoubleProperty Left { get; }
    public ReportDoubleProperty Height { get; }
    public ReportDoubleProperty Width { get; }
    internal Chart ChartDef { get; }
    internal ChartElementPosition ChartElementPositionDef { get; }
    public ChartElementPositionInstance Instance { get; }
    internal ChartElementPosition(ChartElementPosition defObject, Chart chart);
    public ReportDoubleProperty get_Top();
    public ReportDoubleProperty get_Left();
    public ReportDoubleProperty get_Height();
    public ReportDoubleProperty get_Width();
    internal Chart get_ChartDef();
    internal ChartElementPosition get_ChartElementPositionDef();
    public ChartElementPositionInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartElementPositionInstance : BaseInstance {
    private ChartElementPosition m_defObject;
    private Nullable`1<double> m_top;
    private Nullable`1<double> m_left;
    private Nullable`1<double> m_height;
    private Nullable`1<double> m_width;
    public double Top { get; }
    public double Left { get; }
    public double Height { get; }
    public double Width { get; }
    internal ChartElementPositionInstance(ChartElementPosition defObject);
    public double get_Top();
    public double get_Left();
    public double get_Height();
    public double get_Width();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartEmptyPoints : object {
    private Chart m_chart;
    private InternalChartSeries m_chartSeries;
    private ChartEmptyPoints m_chartEmptyPointsDef;
    private ChartEmptyPointsInstance m_instance;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ChartMarker m_marker;
    private ChartDataLabel m_dataLabel;
    private ReportVariantProperty m_axisLabel;
    private CustomPropertyCollection m_customProperties;
    private bool m_customPropertiesReady;
    private ReportStringProperty m_toolTip;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ChartMarker Marker { get; }
    public ChartDataLabel DataLabel { get; }
    public ReportVariantProperty AxisLabel { get; }
    public ReportStringProperty ToolTip { get; }
    public CustomPropertyCollection CustomProperties { get; }
    internal IReportScope ReportScope { get; }
    internal Chart ChartDef { get; }
    internal ChartEmptyPoints ChartEmptyPointsDef { get; }
    public ChartEmptyPointsInstance Instance { get; }
    internal ChartEmptyPoints(InternalChartSeries chartSeries, ChartEmptyPoints chartEmptyPointsDef, Chart chart);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ChartMarker get_Marker();
    public ChartDataLabel get_DataLabel();
    public ReportVariantProperty get_AxisLabel();
    public ReportStringProperty get_ToolTip();
    public CustomPropertyCollection get_CustomProperties();
    internal IReportScope get_ReportScope();
    internal Chart get_ChartDef();
    internal ChartEmptyPoints get_ChartEmptyPointsDef();
    public ChartEmptyPointsInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartEmptyPointsInstance : BaseInstance {
    private ChartEmptyPoints m_chartEmptyPointsDef;
    private StyleInstance m_style;
    private object m_axisLabel;
    private string m_toolTip;
    public StyleInstance Style { get; }
    public object AxisLabel { get; }
    public string ToolTip { get; }
    internal ChartEmptyPointsInstance(ChartEmptyPoints chartEmptyPointsDef);
    public StyleInstance get_Style();
    public object get_AxisLabel();
    public string get_ToolTip();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartFormulaParameter : ChartObjectCollectionItem`1<ChartFormulaParameterInstance> {
    private Chart m_chart;
    private ChartFormulaParameter m_chartFormulaParameterDef;
    private ReportVariantProperty m_value;
    private ChartDerivedSeries m_chartDerivedSeries;
    public string Name { get; }
    public ReportVariantProperty Value { get; }
    public string Source { get; }
    internal IReportScope ReportScope { get; }
    internal Chart ChartDef { get; }
    internal ChartFormulaParameter ChartFormulaParameterDef { get; }
    public ChartFormulaParameterInstance Instance { get; }
    internal ChartFormulaParameter(ChartDerivedSeries chartDerivedSeries, ChartFormulaParameter chartFormulaParameterDef, Chart chart);
    public string get_Name();
    public ReportVariantProperty get_Value();
    public string get_Source();
    internal IReportScope get_ReportScope();
    internal Chart get_ChartDef();
    internal ChartFormulaParameter get_ChartFormulaParameterDef();
    public ChartFormulaParameterInstance get_Instance();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartFormulaParameterCollection : ChartObjectCollectionBase`2<ChartFormulaParameter, ChartFormulaParameterInstance> {
    private Chart m_chart;
    private ChartDerivedSeries m_derivedSeries;
    public ChartFormulaParameter Item { get; }
    public int Count { get; }
    internal ChartFormulaParameterCollection(ChartDerivedSeries derivedSeries, Chart chart);
    protected virtual ChartFormulaParameter CreateChartObject(int index);
    public ChartFormulaParameter get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartFormulaParameterInstance : BaseInstance {
    private ChartFormulaParameter m_chartFormulaParameterDef;
    private object m_value;
    public object Value { get; }
    internal ChartFormulaParameterInstance(ChartFormulaParameter chartFormulaParameterDef);
    public object get_Value();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartGridLines : object {
    private Chart m_chart;
    private ChartGridLines m_gridLinesDef;
    private GridLines m_renderGridLinesDef;
    private Object[] m_styleValues;
    private Style m_style;
    private ChartGridLinesInstance m_instance;
    private ReportEnumProperty`1<ChartAutoBool> m_enabled;
    private ReportDoubleProperty m_interval;
    private ReportDoubleProperty m_intervalOffset;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalType;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalOffsetType;
    public ReportEnumProperty`1<ChartAutoBool> Enabled { get; }
    public Style Style { get; }
    public ReportDoubleProperty Interval { get; }
    public ReportDoubleProperty IntervalOffset { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalType { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalOffsetType { get; }
    internal Chart ChartDef { get; }
    internal ChartGridLines ChartGridLinesDef { get; }
    public ChartGridLinesInstance Instance { get; }
    internal ChartGridLines(ChartGridLines gridLinesDef, Chart chart);
    internal ChartGridLines(GridLines renderGridLinesDef, Object[] styleValues, Chart chart);
    public ReportEnumProperty`1<ChartAutoBool> get_Enabled();
    public sealed virtual Style get_Style();
    public ReportDoubleProperty get_Interval();
    public ReportDoubleProperty get_IntervalOffset();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalType();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalOffsetType();
    internal Chart get_ChartDef();
    internal ChartGridLines get_ChartGridLinesDef();
    public ChartGridLinesInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartGridLinesInstance : BaseInstance {
    private ChartGridLines m_gridLinesDef;
    private StyleInstance m_style;
    private Nullable`1<ChartAutoBool> m_enabled;
    private Nullable`1<double> m_interval;
    private Nullable`1<double> m_intervalOffset;
    private Nullable`1<ChartIntervalType> m_intervalType;
    private Nullable`1<ChartIntervalType> m_intervalOffsetType;
    public StyleInstance Style { get; }
    public ChartAutoBool Enabled { get; }
    public double Interval { get; }
    public double IntervalOffset { get; }
    public ChartIntervalType IntervalType { get; }
    public ChartIntervalType IntervalOffsetType { get; }
    internal ChartGridLinesInstance(ChartGridLines gridlinesDef);
    public StyleInstance get_Style();
    public ChartAutoBool get_Enabled();
    public double get_Interval();
    public double get_IntervalOffset();
    public ChartIntervalType get_IntervalType();
    public ChartIntervalType get_IntervalOffsetType();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartHierarchy : MemberHierarchy`1<ChartMember> {
    private Chart OwnerChart { get; }
    public ChartMemberCollection MemberCollection { get; }
    internal ChartHierarchy(Chart owner, bool isColumn);
    private Chart get_OwnerChart();
    public ChartMemberCollection get_MemberCollection();
    internal virtual void ResetContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartInstance : DynamicImageInstance {
    private ReportSize m_dynamicHeight;
    private ReportSize m_dynamicWidth;
    private Nullable`1<ChartPalette> m_palette;
    private Nullable`1<PaletteHatchBehavior> m_paletteHatchBehavior;
    protected int WidthInPixels { get; }
    protected int HeightInPixels { get; }
    public ReportSize DynamicHeight { get; }
    public ReportSize DynamicWidth { get; }
    public ChartPalette Palette { get; }
    public PaletteHatchBehavior PaletteHatchBehavior { get; }
    internal ChartInstance(Chart reportItemDef);
    public virtual void SetDpi(int xDpi, int yDpi);
    protected virtual Stream GetImage(ImageType type, Boolean& hasImageMap);
    public virtual Stream GetImage(ImageType type, ActionInfoWithDynamicImageMapCollection& actionImageMaps);
    public Stream GetCoreXml();
    protected virtual void GetImage(ImageType type, ActionInfoWithDynamicImageMapCollection& actionImageMaps, Stream& image);
    protected virtual int get_WidthInPixels();
    protected virtual int get_HeightInPixels();
    public ReportSize get_DynamicHeight();
    public ReportSize get_DynamicWidth();
    public ChartPalette get_Palette();
    public PaletteHatchBehavior get_PaletteHatchBehavior();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartIntervalType : Enum {
    public int value__;
    public static ChartIntervalType Default;
    public static ChartIntervalType Auto;
    public static ChartIntervalType Number;
    public static ChartIntervalType Years;
    public static ChartIntervalType Months;
    public static ChartIntervalType Weeks;
    public static ChartIntervalType Days;
    public static ChartIntervalType Hours;
    public static ChartIntervalType Minutes;
    public static ChartIntervalType Seconds;
    public static ChartIntervalType Milliseconds;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartItemInLegend : object {
    private Chart m_chart;
    private ChartItemInLegend m_chartItemInLegendDef;
    private ChartItemInLegendInstance m_instance;
    private ActionInfo m_actionInfo;
    private ReportStringProperty m_legendText;
    private ChartDataPoint m_dataPoint;
    private InternalChartSeries m_chartSeries;
    private ReportStringProperty m_toolTip;
    private ReportBoolProperty m_hidden;
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ReportStringProperty LegendText { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportBoolProperty Hidden { get; }
    internal IReportScope ReportScope { get; }
    private IInstancePath InstancePath { get; }
    internal Chart ChartDef { get; }
    internal ChartItemInLegend ChartItemInLegendDef { get; }
    public ChartItemInLegendInstance Instance { get; }
    internal ChartItemInLegend(InternalChartSeries chartSeries, ChartItemInLegend chartItemInLegendDef, Chart chart);
    internal ChartItemInLegend(InternalChartDataPoint chartDataPoint, ChartItemInLegend chartItemInLegendDef, Chart chart);
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ReportStringProperty get_LegendText();
    public ReportStringProperty get_ToolTip();
    public ReportBoolProperty get_Hidden();
    internal IReportScope get_ReportScope();
    private IInstancePath get_InstancePath();
    internal Chart get_ChartDef();
    internal ChartItemInLegend get_ChartItemInLegendDef();
    public ChartItemInLegendInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartItemInLegendInstance : BaseInstance {
    private ChartItemInLegend m_chartItemInLegendDef;
    private string m_legendText;
    private string m_toolTip;
    private Nullable`1<bool> m_hidden;
    public string LegendText { get; }
    public string ToolTip { get; }
    public bool Hidden { get; }
    internal ChartItemInLegendInstance(ChartItemInLegend chartItemInLegendDef);
    public string get_LegendText();
    public string get_ToolTip();
    public bool get_Hidden();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegend : ChartObjectCollectionItem`1<ChartLegendInstance> {
    private Chart m_chart;
    private Legend m_renderLegendDef;
    private Object[] m_styleValues;
    private ChartLegend m_legendDef;
    private Style m_style;
    private ChartLegendCustomItemCollection m_chartLegendCustomItems;
    private ChartLegendColumnCollection m_chartLegendColumns;
    private ChartLegendTitle m_legendTitle;
    private ReportEnumProperty`1<ChartLegendLayouts> m_layout;
    private ReportEnumProperty`1<ChartLegendPositions> m_position;
    private ReportBoolProperty m_hidden;
    private ReportBoolProperty m_dockOutsideChartArea;
    private ReportBoolProperty m_autoFitTextDisabled;
    private ReportSizeProperty m_minFontSize;
    private ReportEnumProperty`1<ChartSeparators> m_headerSeparator;
    private ReportColorProperty m_headerSeparatorColor;
    private ReportEnumProperty`1<ChartSeparators> m_columnSeparator;
    private ReportColorProperty m_columnSeparatorColor;
    private ReportIntProperty m_columnSpacing;
    private ReportBoolProperty m_interlacedRows;
    private ReportColorProperty m_interlacedRowsColor;
    private ReportBoolProperty m_equallySpacedItems;
    private ReportEnumProperty`1<ChartAutoBool> m_reversed;
    private ReportIntProperty m_maxAutoSize;
    private ReportIntProperty m_textWrapThreshold;
    private ChartElementPosition m_chartElementPosition;
    public string Name { get; }
    public ReportBoolProperty Hidden { get; }
    public Style Style { get; }
    public ReportEnumProperty`1<ChartLegendPositions> Position { get; }
    public ReportEnumProperty`1<ChartLegendLayouts> Layout { get; }
    public ReportBoolProperty DockOutsideChartArea { get; }
    public ChartLegendCustomItemCollection LegendCustomItems { get; }
    public ChartLegendColumnCollection LegendColumns { get; }
    public ChartLegendTitle LegendTitle { get; }
    public string DockToChartArea { get; }
    public ChartElementPosition ChartElementPosition { get; }
    public ReportBoolProperty AutoFitTextDisabled { get; }
    public ReportSizeProperty MinFontSize { get; }
    public ReportEnumProperty`1<ChartSeparators> HeaderSeparator { get; }
    public ReportColorProperty HeaderSeparatorColor { get; }
    public ReportEnumProperty`1<ChartSeparators> ColumnSeparator { get; }
    public ReportColorProperty ColumnSeparatorColor { get; }
    public ReportIntProperty ColumnSpacing { get; }
    public ReportBoolProperty InterlacedRows { get; }
    public ReportColorProperty InterlacedRowsColor { get; }
    public ReportBoolProperty EquallySpacedItems { get; }
    public ReportEnumProperty`1<ChartAutoBool> Reversed { get; }
    public ReportIntProperty MaxAutoSize { get; }
    public ReportIntProperty TextWrapThreshold { get; }
    internal ChartLegend ChartLegendDef { get; }
    internal Chart ChartDef { get; }
    public ChartLegendInstance Instance { get; }
    internal ChartLegend(ChartLegend legendDef, Chart chart);
    internal ChartLegend(Legend renderLegendDef, Object[] styleValues, Chart chart);
    public string get_Name();
    public ReportBoolProperty get_Hidden();
    public sealed virtual Style get_Style();
    public ReportEnumProperty`1<ChartLegendPositions> get_Position();
    public ReportEnumProperty`1<ChartLegendLayouts> get_Layout();
    public ReportBoolProperty get_DockOutsideChartArea();
    public ChartLegendCustomItemCollection get_LegendCustomItems();
    public ChartLegendColumnCollection get_LegendColumns();
    public ChartLegendTitle get_LegendTitle();
    public string get_DockToChartArea();
    public ChartElementPosition get_ChartElementPosition();
    public ReportBoolProperty get_AutoFitTextDisabled();
    public ReportSizeProperty get_MinFontSize();
    public ReportEnumProperty`1<ChartSeparators> get_HeaderSeparator();
    public ReportColorProperty get_HeaderSeparatorColor();
    public ReportEnumProperty`1<ChartSeparators> get_ColumnSeparator();
    public ReportColorProperty get_ColumnSeparatorColor();
    public ReportIntProperty get_ColumnSpacing();
    public ReportBoolProperty get_InterlacedRows();
    public ReportColorProperty get_InterlacedRowsColor();
    public ReportBoolProperty get_EquallySpacedItems();
    public ReportEnumProperty`1<ChartAutoBool> get_Reversed();
    public ReportIntProperty get_MaxAutoSize();
    public ReportIntProperty get_TextWrapThreshold();
    internal ChartLegend get_ChartLegendDef();
    internal Chart get_ChartDef();
    public ChartLegendInstance get_Instance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendCollection : ChartObjectCollectionBase`2<ChartLegend, ChartLegendInstance> {
    private Chart m_chart;
    public int Count { get; }
    internal ChartLegendCollection(Chart chart);
    protected virtual ChartLegend CreateChartObject(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendColumn : ChartObjectCollectionItem`1<ChartLegendColumnInstance> {
    private Chart m_chart;
    private ChartLegendColumn m_chartLegendColumnDef;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ReportEnumProperty`1<ChartColumnType> m_columnType;
    private ReportStringProperty m_value;
    private ReportStringProperty m_toolTip;
    private ReportSizeProperty m_minimumWidth;
    private ReportSizeProperty m_maximumWidth;
    private ReportIntProperty m_seriesSymbolWidth;
    private ReportIntProperty m_seriesSymbolHeight;
    private ChartLegendColumnHeader m_header;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ReportEnumProperty`1<ChartColumnType> ColumnType { get; }
    public ReportStringProperty Value { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportSizeProperty MinimumWidth { get; }
    public ReportSizeProperty MaximumWidth { get; }
    public ReportIntProperty SeriesSymbolWidth { get; }
    public ReportIntProperty SeriesSymbolHeight { get; }
    public ChartLegendColumnHeader Header { get; }
    internal Chart ChartDef { get; }
    internal ChartLegendColumn ChartLegendColumnDef { get; }
    public ChartLegendColumnInstance Instance { get; }
    internal ChartLegendColumn(ChartLegendColumn chartLegendColumnDef, Chart chart);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ReportEnumProperty`1<ChartColumnType> get_ColumnType();
    public ReportStringProperty get_Value();
    public ReportStringProperty get_ToolTip();
    public ReportSizeProperty get_MinimumWidth();
    public ReportSizeProperty get_MaximumWidth();
    public ReportIntProperty get_SeriesSymbolWidth();
    public ReportIntProperty get_SeriesSymbolHeight();
    public ChartLegendColumnHeader get_Header();
    internal Chart get_ChartDef();
    internal ChartLegendColumn get_ChartLegendColumnDef();
    public ChartLegendColumnInstance get_Instance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendColumnCollection : ChartObjectCollectionBase`2<ChartLegendColumn, ChartLegendColumnInstance> {
    private Chart m_chart;
    private ChartLegend m_legend;
    public int Count { get; }
    internal ChartLegendColumnCollection(ChartLegend legend, Chart chart);
    protected virtual ChartLegendColumn CreateChartObject(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendColumnHeader : object {
    private Chart m_chart;
    private ChartLegendColumnHeader m_chartLegendColumnHeaderDef;
    private ChartLegendColumnHeaderInstance m_instance;
    private Style m_style;
    private ReportStringProperty m_value;
    public Style Style { get; }
    public ReportStringProperty Value { get; }
    internal Chart ChartDef { get; }
    internal ChartLegendColumnHeader ChartLegendColumnHeaderDef { get; }
    public ChartLegendColumnHeaderInstance Instance { get; }
    internal ChartLegendColumnHeader(ChartLegendColumnHeader chartLegendColumnHeaderDef, Chart chart);
    public sealed virtual Style get_Style();
    public ReportStringProperty get_Value();
    internal Chart get_ChartDef();
    internal ChartLegendColumnHeader get_ChartLegendColumnHeaderDef();
    public ChartLegendColumnHeaderInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendColumnHeaderInstance : BaseInstance {
    private ChartLegendColumnHeader m_chartLegendColumnHeaderDef;
    private StyleInstance m_style;
    private string m_value;
    public StyleInstance Style { get; }
    public string Value { get; }
    internal ChartLegendColumnHeaderInstance(ChartLegendColumnHeader chartLegendColumnHeaderDef);
    public StyleInstance get_Style();
    public string get_Value();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendColumnInstance : BaseInstance {
    private ChartLegendColumn m_chartLegendColumnDef;
    private StyleInstance m_style;
    private Nullable`1<ChartColumnType> m_columnType;
    private string m_value;
    private string m_toolTip;
    private ReportSize m_minimumWidth;
    private ReportSize m_maximumWidth;
    private Nullable`1<int> m_seriesSymbolWidth;
    private Nullable`1<int> m_seriesSymbolHeight;
    public StyleInstance Style { get; }
    public ChartColumnType ColumnType { get; }
    public string Value { get; }
    public string ToolTip { get; }
    public ReportSize MinimumWidth { get; }
    public ReportSize MaximumWidth { get; }
    public int SeriesSymbolWidth { get; }
    public int SeriesSymbolHeight { get; }
    internal ChartLegendColumnInstance(ChartLegendColumn chartLegendColumnDef);
    public StyleInstance get_Style();
    public ChartColumnType get_ColumnType();
    public string get_Value();
    public string get_ToolTip();
    public ReportSize get_MinimumWidth();
    public ReportSize get_MaximumWidth();
    public int get_SeriesSymbolWidth();
    public int get_SeriesSymbolHeight();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendCustomItem : ChartObjectCollectionItem`1<ChartLegendCustomItemInstance> {
    private Chart m_chart;
    private ChartLegendCustomItem m_chartLegendCustomItemDef;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ChartMarker m_marker;
    private ReportEnumProperty`1<ChartSeparators> m_separator;
    private ReportColorProperty m_separatorColor;
    private ReportStringProperty m_toolTip;
    private ChartLegendCustomItemCellCollection m_chartLegendCustomItemCells;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ChartMarker Marker { get; }
    public ReportEnumProperty`1<ChartSeparators> Separator { get; }
    public ReportColorProperty SeparatorColor { get; }
    public ReportStringProperty ToolTip { get; }
    public ChartLegendCustomItemCellCollection LegendCustomItemCells { get; }
    internal Chart ChartDef { get; }
    internal ChartLegendCustomItem ChartLegendCustomItemDef { get; }
    public ChartLegendCustomItemInstance Instance { get; }
    internal ChartLegendCustomItem(ChartLegendCustomItem chartLegendCustomItemDef, Chart chart);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ChartMarker get_Marker();
    public ReportEnumProperty`1<ChartSeparators> get_Separator();
    public ReportColorProperty get_SeparatorColor();
    public ReportStringProperty get_ToolTip();
    public ChartLegendCustomItemCellCollection get_LegendCustomItemCells();
    internal Chart get_ChartDef();
    internal ChartLegendCustomItem get_ChartLegendCustomItemDef();
    public ChartLegendCustomItemInstance get_Instance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendCustomItemCell : ChartObjectCollectionItem`1<ChartLegendCustomItemCellInstance> {
    private Chart m_chart;
    private ChartLegendCustomItemCell m_chartLegendCustomItemCellDef;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ReportEnumProperty`1<ChartCellType> m_cellType;
    private ReportStringProperty m_text;
    private ReportIntProperty m_cellSpan;
    private ReportStringProperty m_toolTip;
    private ReportIntProperty m_imageWidth;
    private ReportIntProperty m_imageHeight;
    private ReportIntProperty m_symbolHeight;
    private ReportIntProperty m_symbolWidth;
    private ReportEnumProperty`1<ChartCellAlignment> m_alignment;
    private ReportIntProperty m_topMargin;
    private ReportIntProperty m_bottomMargin;
    private ReportIntProperty m_leftMargin;
    private ReportIntProperty m_rightMargin;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ReportEnumProperty`1<ChartCellType> CellType { get; }
    public ReportStringProperty Text { get; }
    public ReportIntProperty CellSpan { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportIntProperty ImageWidth { get; }
    public ReportIntProperty ImageHeight { get; }
    public ReportIntProperty SymbolHeight { get; }
    public ReportIntProperty SymbolWidth { get; }
    public ReportEnumProperty`1<ChartCellAlignment> Alignment { get; }
    public ReportIntProperty TopMargin { get; }
    public ReportIntProperty BottomMargin { get; }
    public ReportIntProperty LeftMargin { get; }
    public ReportIntProperty RightMargin { get; }
    internal Chart ChartDef { get; }
    internal ChartLegendCustomItemCell ChartLegendCustomItemCellDef { get; }
    public ChartLegendCustomItemCellInstance Instance { get; }
    internal ChartLegendCustomItemCell(ChartLegendCustomItemCell chartLegendCustomItemCellDef, Chart chart);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ReportEnumProperty`1<ChartCellType> get_CellType();
    public ReportStringProperty get_Text();
    public ReportIntProperty get_CellSpan();
    public ReportStringProperty get_ToolTip();
    public ReportIntProperty get_ImageWidth();
    public ReportIntProperty get_ImageHeight();
    public ReportIntProperty get_SymbolHeight();
    public ReportIntProperty get_SymbolWidth();
    public ReportEnumProperty`1<ChartCellAlignment> get_Alignment();
    public ReportIntProperty get_TopMargin();
    public ReportIntProperty get_BottomMargin();
    public ReportIntProperty get_LeftMargin();
    public ReportIntProperty get_RightMargin();
    internal Chart get_ChartDef();
    internal ChartLegendCustomItemCell get_ChartLegendCustomItemCellDef();
    public ChartLegendCustomItemCellInstance get_Instance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendCustomItemCellCollection : ChartObjectCollectionBase`2<ChartLegendCustomItemCell, ChartLegendCustomItemCellInstance> {
    private Chart m_chart;
    private ChartLegendCustomItem m_legendCustomItem;
    public int Count { get; }
    internal ChartLegendCustomItemCellCollection(ChartLegendCustomItem legendCustomItem, Chart chart);
    protected virtual ChartLegendCustomItemCell CreateChartObject(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendCustomItemCellInstance : BaseInstance {
    private ChartLegendCustomItemCell m_chartLegendCustomItemCellDef;
    private StyleInstance m_style;
    private Nullable`1<ChartCellType> m_cellType;
    private string m_text;
    private Nullable`1<int> m_cellSpan;
    private string m_toolTip;
    private Nullable`1<int> m_imageWidth;
    private Nullable`1<int> m_imageHeight;
    private Nullable`1<int> m_symbolHeight;
    private Nullable`1<int> m_symbolWidth;
    private Nullable`1<ChartCellAlignment> m_alignment;
    private Nullable`1<int> m_topMargin;
    private Nullable`1<int> m_bottomMargin;
    private Nullable`1<int> m_leftMargin;
    private Nullable`1<int> m_rightMargin;
    public StyleInstance Style { get; }
    public ChartCellType CellType { get; }
    public string Text { get; }
    public int CellSpan { get; }
    public string ToolTip { get; }
    public int ImageWidth { get; }
    public int ImageHeight { get; }
    public int SymbolHeight { get; }
    public int SymbolWidth { get; }
    public ChartCellAlignment Alignment { get; }
    public int TopMargin { get; }
    public int BottomMargin { get; }
    public int LeftMargin { get; }
    public int RightMargin { get; }
    internal ChartLegendCustomItemCellInstance(ChartLegendCustomItemCell chartLegendCustomItemCellDef);
    public StyleInstance get_Style();
    public ChartCellType get_CellType();
    public string get_Text();
    public int get_CellSpan();
    public string get_ToolTip();
    public int get_ImageWidth();
    public int get_ImageHeight();
    public int get_SymbolHeight();
    public int get_SymbolWidth();
    public ChartCellAlignment get_Alignment();
    public int get_TopMargin();
    public int get_BottomMargin();
    public int get_LeftMargin();
    public int get_RightMargin();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendCustomItemCollection : ChartObjectCollectionBase`2<ChartLegendCustomItem, ChartLegendCustomItemInstance> {
    private Chart m_chart;
    private ChartLegend m_legend;
    public int Count { get; }
    internal ChartLegendCustomItemCollection(ChartLegend legend, Chart chart);
    protected virtual ChartLegendCustomItem CreateChartObject(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendCustomItemInstance : BaseInstance {
    private ChartLegendCustomItem m_chartLegendCustomItemDef;
    private StyleInstance m_style;
    private Nullable`1<ChartSeparators> m_separator;
    private ReportColor m_separatorColor;
    private string m_toolTip;
    public StyleInstance Style { get; }
    public ChartSeparators Separator { get; }
    public ReportColor SeparatorColor { get; }
    public string ToolTip { get; }
    internal ChartLegendCustomItemInstance(ChartLegendCustomItem chartLegendCustomItemDef);
    public StyleInstance get_Style();
    public ChartSeparators get_Separator();
    public ReportColor get_SeparatorColor();
    public string get_ToolTip();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendInstance : BaseInstance {
    private ChartLegend m_legendDef;
    private StyleInstance m_style;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<ChartLegendPositions> m_position;
    private Nullable`1<ChartLegendLayouts> m_layout;
    private Nullable`1<bool> m_dockOutsideChartArea;
    private Nullable`1<bool> m_autoFitTextDisabled;
    private ReportSize m_minFontSize;
    private Nullable`1<ChartSeparators> m_headerSeparator;
    private ReportColor m_headerSeparatorColor;
    private Nullable`1<ChartSeparators> m_columnSeparator;
    private ReportColor m_columnSeparatorColor;
    private Nullable`1<int> m_columnSpacing;
    private Nullable`1<bool> m_interlacedRows;
    private ReportColor m_interlacedRowsColor;
    private Nullable`1<bool> m_equallySpacedItems;
    private Nullable`1<ChartAutoBool> m_reversed;
    private Nullable`1<int> m_maxAutoSize;
    private Nullable`1<int> m_textWrapThreshold;
    public StyleInstance Style { get; }
    public bool Hidden { get; }
    public ChartLegendPositions Position { get; }
    public ChartLegendLayouts Layout { get; }
    public bool DockOutsideChartArea { get; }
    public bool AutoFitTextDisabled { get; }
    public ReportSize MinFontSize { get; }
    public ChartSeparators HeaderSeparator { get; }
    public ReportColor HeaderSeparatorColor { get; }
    public ChartSeparators ColumnSeparator { get; }
    public ReportColor ColumnSeparatorColor { get; }
    public int ColumnSpacing { get; }
    public bool InterlacedRows { get; }
    public ReportColor InterlacedRowsColor { get; }
    public bool EquallySpacedItems { get; }
    public ChartAutoBool Reversed { get; }
    public int MaxAutoSize { get; }
    public int TextWrapThreshold { get; }
    internal ChartLegendInstance(ChartLegend legendDef);
    public StyleInstance get_Style();
    public bool get_Hidden();
    public ChartLegendPositions get_Position();
    public ChartLegendLayouts get_Layout();
    public bool get_DockOutsideChartArea();
    public bool get_AutoFitTextDisabled();
    public ReportSize get_MinFontSize();
    public ChartSeparators get_HeaderSeparator();
    public ReportColor get_HeaderSeparatorColor();
    public ChartSeparators get_ColumnSeparator();
    public ReportColor get_ColumnSeparatorColor();
    public int get_ColumnSpacing();
    public bool get_InterlacedRows();
    public ReportColor get_InterlacedRowsColor();
    public bool get_EquallySpacedItems();
    public ChartAutoBool get_Reversed();
    public int get_MaxAutoSize();
    public int get_TextWrapThreshold();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendLayouts : Enum {
    public int value__;
    public static ChartLegendLayouts AutoTable;
    public static ChartLegendLayouts Column;
    public static ChartLegendLayouts Row;
    public static ChartLegendLayouts WideTable;
    public static ChartLegendLayouts TallTable;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendPositions : Enum {
    public int value__;
    public static ChartLegendPositions RightTop;
    public static ChartLegendPositions TopLeft;
    public static ChartLegendPositions TopCenter;
    public static ChartLegendPositions TopRight;
    public static ChartLegendPositions LeftTop;
    public static ChartLegendPositions LeftCenter;
    public static ChartLegendPositions LeftBottom;
    public static ChartLegendPositions RightCenter;
    public static ChartLegendPositions RightBottom;
    public static ChartLegendPositions BottomLeft;
    public static ChartLegendPositions BottomCenter;
    public static ChartLegendPositions BottomRight;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendTitle : object {
    private Chart m_chart;
    private ChartLegendTitle m_chartLegendTitleDef;
    private ChartLegendTitleInstance m_instance;
    private Style m_style;
    private ReportStringProperty m_caption;
    private ReportEnumProperty`1<ChartSeparators> m_titleSeparator;
    public Style Style { get; }
    public ReportStringProperty Caption { get; }
    public ReportEnumProperty`1<ChartSeparators> TitleSeparator { get; }
    internal Chart ChartDef { get; }
    internal ChartLegendTitle ChartLegendTitleDef { get; }
    public ChartLegendTitleInstance Instance { get; }
    internal ChartLegendTitle(ChartLegendTitle chartLegendTitleDef, Chart chart);
    public sealed virtual Style get_Style();
    public ReportStringProperty get_Caption();
    public ReportEnumProperty`1<ChartSeparators> get_TitleSeparator();
    internal Chart get_ChartDef();
    internal ChartLegendTitle get_ChartLegendTitleDef();
    public ChartLegendTitleInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartLegendTitleInstance : BaseInstance {
    private ChartLegendTitle m_chartLegendTitleDef;
    private StyleInstance m_style;
    private string m_caption;
    private Nullable`1<ChartSeparators> m_titleSeparator;
    public StyleInstance Style { get; }
    public string Caption { get; }
    public ChartSeparators TitleSeparator { get; }
    internal ChartLegendTitleInstance(ChartLegendTitle chartLegendTitleDef);
    public StyleInstance get_Style();
    public string get_Caption();
    public ChartSeparators get_TitleSeparator();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartMapper : object {
    private Chart m_chart;
    private ActionInfoWithDynamicImageMapCollection m_actions;
    private Chart m_coreChart;
    private bool m_multiColumn;
    private bool m_multiRow;
    private float m_dpiX;
    private float m_dpiY;
    private Formatter m_formatter;
    private Dictionary`2<string, ChartAreaInfo> m_chartAreaInfoDictionary;
    private Hatcher m_hatcher;
    private AutoMarker m_autoMarker;
    private static string m_legendTextSeparator;
    private static string m_defaulChartAreaName;
    private static string m_imagePrefix;
    private static string m_pieAutoAxisLabelsName;
    private static string m_defaultFontFamily;
    private static float m_defaultFontSize;
    private static string m_defaultMarkerSizeString;
    private static string m_defaultCalloutLineWidthString;
    private static string m_defaultMaxMovingDistanceString;
    private static ReportSize m_defaultMarkerSize;
    private static ReportSize m_defaultCalloutLineWidth;
    private static ReportSize m_defaultMaxMovingDistance;
    private static LabelsAutoFitStyles m_defaultLabelsAngleStep;
    private static ChartDashStyle m_defaultCoreDataPointBorderStyle;
    private static int m_defaultCoreDataPointBorderWidth;
    unknown float DpiX {internal set; }
    unknown float DpiY {internal set; }
    public ChartMapper(Chart chart);
    private static ChartMapper();
    internal void RenderChart();
    internal Stream GetCoreXml();
    internal Stream GetImage(ImageType imageType);
    private string FormatNumber(object sender, double value, string format, ChartValueTypes valueType, int elementId, ChartElementType elementType);
    private TypeCode GetTypeCode(ChartValueTypes chartValueType);
    private ImageMapAreaShape GetMapAreaShape(MapAreaShape shape);
    internal ActionInfoWithDynamicImageMapCollection GetImageMaps();
    internal IEnumerable`1<MapAreaInfo> GetMapAreaInfoList();
    internal void set_DpiX(float value);
    internal void set_DpiY(float value);
    private void InitializeChart();
    private void SetChartProperties();
    private void RenderNoDataMessage();
    private void RenderPalettes();
    private void RenderStandardPalettes();
    private void RenderPaletteHatchBehavior();
    private void RenderCustomPalette();
    private void RenderChartStyle();
    private void RenderBorderSkin();
    private void RenderBorderSkinType(ChartBorderSkin borderSkin);
    private void RenderBorderSkinStyle(ChartBorderSkin chartBorderSkin);
    private void RenderChartAreas();
    private void RenderChartArea(ChartArea chartArea);
    private void SetChartAreaProperties(ChartArea chartArea, ChartArea area);
    private AreaAlignOrientations GetAreaAlignOrientation(ChartAreaAlignOrientations chartAreaOrientation);
    private void RenderAlignType(ChartAlignType chartAlignType, ChartArea area);
    private void RenderChartAreaStyle(ChartArea chartArea, ChartArea area);
    private void RenderAxes(ChartArea chartArea, ChartArea area);
    private void RenderCategoryAxes(ChartAxisCollection categoryAxes, ChartArea area);
    private void RenderValueAxes(ChartAxisCollection valueAxes, ChartArea area);
    private void Render3DProperties(ChartThreeDProperties chartThreeDProperties, ChartArea3DStyle threeDProperties);
    private LightStyle GetThreeDLight(ChartThreeDShadingTypes shading);
    private void RenderAxis(ChartAxis chartAxis, Axis axis, ChartArea area, bool isCategory);
    private void SetAxisProperties(ChartAxis chartAxis, Axis axis, ChartArea area, bool isCategory);
    private void SetAxisLabelsProperties(ChartAxis chartAxis, Axis axis);
    private void RenderAxisLabelFont(ChartAxis chartAxis, Axis axis);
    private void SetAxisCrossing(ChartAxis chartAxis, Axis axis);
    private void SetAxisLabelAutoFitStyle(ChartAxis chartAxis, Axis axis);
    private void SetAxisArrow(ChartAxis chartAxis, Axis axis);
    private void RenderAxisStripLines(ChartAxis chartAxis, Axis axis);
    private void RenderStripLine(ChartStripLine chartStripLine, StripLine stripLine);
    private void SetStripLineProperties(ChartStripLine chartStripLine, StripLine stripLine);
    private void RenderStripLineStyle(ChartStripLine chartStripLine, StripLine stripLine);
    private void RenderAxisTitle(ChartAxisTitle chartAxisTitle, Axis axis);
    private void SetAxisTitleProperties(ChartAxisTitle chartAxisTitle, Axis axis);
    private StringAlignment GetAlignment(ChartAxisTitlePositions position);
    private void RenderAxisTitleStyle(ChartAxisTitle axisTitle, Axis axis);
    private void RenderAxisTitleFont(ChartAxisTitle axisTitle, Axis axis);
    private void RenderAxisStyle(ChartAxis chartAxis, Axis axis);
    private void RenderAxisBorder(Border border, Axis axis);
    private void RenderAxisGridLines(ChartGridLines chartGridLines, Grid gridLines, bool isMajor);
    private void RenderAxisGridLinesBorder(Border border, Grid gridLines);
    private void SetAxisGridLinesProperties(ChartGridLines chartGridLines, Grid gridLines, bool isMajor);
    private void RenderAxisTickMarks(ChartTickMarks chartTickMarks, TickMark tickMarks, bool isMajor);
    private void SetAxisTickMarkProperties(ChartTickMarks chartTickMarks, TickMark tickMarks, bool isMajor);
    private bool GetChartTickMarksEnabled(ChartAutoBool enabled, bool isMajor);
    private void RenderTickMarkStyle(ChartTickMarks chartTickMarks, TickMark tickMarks);
    private void RenderTickMarkBorder(Border border, TickMark tickMark);
    private void RenderAxisScaleBreak(ChartAxisScaleBreak chartAxisScaleBreak, AxisScaleBreakStyle axisScaleBreak);
    private void RenderCustomProperties(CustomPropertyCollection customProperties, Axis axis);
    private void RenderLegends();
    private void RenderLegend(ChartLegend chartLegend, Legend legend);
    private void SetLegendProperties(ChartLegend chartLegend, Legend legend);
    private void RenderLegendTitle(ChartLegendTitle chartLegendTitle, Legend legend);
    private LegendSeparatorType GetLegendSeparatorStyle(ChartSeparators chartLegendSeparator);
    private void RenderLegendTitleStyle(ChartLegendTitle chartLegendTitle, Legend legend);
    private void RenderLegendTitleBorder(Border border, Legend legend);
    private void SetLegendLayout(ChartLegendLayouts layout, Legend legend);
    private void GetChartTitlePosition(ChartTitlePositions position, ContentAlignment& alignment, Docking& docking);
    private TextOrientation GetTextOrientation(TextOrientations textOrientations);
    private StringAlignment GetLegendAlignment(ChartLegendPositions position);
    private StringAlignment GetLegendTitleAlign(TextAlignments textAlignment);
    private LegendDocking GetLegendDocking(ChartLegendPositions position);
    private void RenderLegendStyle(ChartLegend chartLegend, Legend legend);
    private void RenderLegendColumns(ChartLegendColumnCollection chartLegendColumns, LegendCellColumnCollection legendColumns);
    private void RenderLegendCustomItems(ChartLegendCustomItemCollection chartLegendCustomItems, LegendItemsCollection legendCustomItems);
    private void RenderElementPosition(ChartElementPosition chartElementPosition, ElementPosition elementPosition);
    private void RenderTitles();
    private void RenderTitle(ChartTitle chartTitle, Title title);
    private void SetTitleProperties(ChartTitle chartTitle, Title title);
    private void RenderTitleStyle(ChartTitle chartTitle, Title title);
    private TextStyle GetTextStyle(TextEffects textEffects);
    private void RenderDataLabel(ChartDataLabel chartDataLabel, DataPointAttributes dataPointAttributes, bool isDataPoint);
    private void SetDataLabelProperties(ChartDataLabel chartDataLabel, DataPointAttributes dataPointAttributes, bool isDataPoint);
    private ChartDataLabelPositions GetDataLabelPositionValue(ChartDataLabel chartDataLabel);
    private string GetDataLabelPosition(ChartDataLabelPositions position);
    private void RenderDataLabelStyle(ChartDataLabel chartDataLabel, DataPointAttributes dataPointAttributes, bool isDataPoint);
    private void RenderDataLabelBorder(Border border, DataPointAttributes dataPointAttributes);
    private void RenderDataLabelActionInfo(ActionInfo actionInfo, string toolTip, DataPointAttributes dataPointAttributes);
    private void RenderDataPointMarker(ChartMarker chartMarker, DataPoint dataPoint, BackgroundImageInfo backgroundImageInfo);
    private void RenderSeriesMarker(ChartMarker chartMarker, Series series);
    private void RenderEmptyPointMarker(ChartMarker chartMarker, DataPointAttributes dataPointAttributes);
    private void SetMarkerProperties(ChartMarker chartMarker, DataPointAttributes dataPointAttributes);
    private MarkerStyle GetMarkerStyle(ChartMarkerTypes chartMarkerType);
    private void RenderDataPointMarkerStyle(ChartMarker chartMarker, DataPoint dataPoint, BackgroundImageInfo backgroundImageInfo);
    private void RenderSeriesMarkerStyle(ChartMarker chartMarker, Series series);
    private void RenderEmptyPointMarkerStyle(ChartMarker chartMarker, DataPointAttributes emptyPoint);
    private void RenderMarkerStyle(ChartMarker chartMarker, DataPointAttributes dataPointAttributes);
    private void RenderMarkerBorder(Border border, DataPointAttributes dataPointAttributes);
    private void RenderMarkerBackgroundImage(BackgroundImage backgroundImage, DataPointAttributes dataPointAttributes, BackgroundImageInfo backgroundImageInfo);
    private void RenderSmartLabels(ChartSmartLabel chartSmartLabels, SmartLabelsStyle smartLabels);
    private void SetSmartLabelsProperties(ChartSmartLabel chartSmartLabels, SmartLabelsStyle smartLabels);
    private LineAnchorCap GetCalloutLineAnchor(ChartCalloutLineAnchor chartCalloutLineAnchor);
    private ChartDashStyle GetCalloutLineStyle(ChartCalloutLineStyle chartCalloutLineStyle);
    private LabelCalloutStyle GetCalloutStyle(ChartCalloutStyle chartCalloutStyle);
    private void RenderNoMoveDirections(ChartNoMoveDirections chartNoMoveDirections, SmartLabelsStyle smartLabelsStyle);
    private void RenderAnnotations();
    private void RenderData();
    private void RenderSeriesGroupings();
    private void RenderSeriesGroupingCollection(ChartMemberCollection seriesGroupingCollection);
    private void RenderSeriesGrouping(ChartMember seriesGrouping);
    private void RenderCategoryGroupings(ChartSeries chartSeries, ChartMember seriesGrouping, SeriesInfo seriesInfo);
    private void RenderCategoryGrouping(ChartSeries chartSeries, ChartMember seriesGrouping, ChartMember categoryGrouping, SeriesInfo seriesInfo);
    private void RenderCategoryGroupingCollection(ChartSeries chartSeries, ChartMember seriesGrouping, ChartMemberCollection categoryGroupingCollection, SeriesInfo seriesInfo);
    private void RenderCategoryGroupingLabels();
    private void RenderChartAreaCategoryGroupingsLabels(KeyValuePair`2<string, ChartAreaInfo> seriesInfoList);
    private void RenderCategoryGroupingLabel(ChartMember categoryGrouping, KeyValuePair`2<string, ChartAreaInfo> seriesInfoList, Int32& numberOfPoints);
    private bool IsDynamicOrHasDynamicParentMember(ChartMember member);
    private bool HasDynamicMember(ChartMemberCollection members);
    private void RenderCategoryGroupingChildrenLabel(ChartMember categoryGrouping, KeyValuePair`2<string, ChartAreaInfo> seriesInfoList, Int32& numberOfPoints);
    private void SetDataPointsCategoryGroupingLabel(ChartMember categoryGrouping, KeyValuePair`2<string, ChartAreaInfo> seriesInfoList, int index);
    private void SetDataPointGroupingLabel(ChartMember categoryGrouping, KeyValuePair`2<string, ChartAreaInfo> seriesInfoList, DataPoint dataPoint, SeriesInfo seriesInfo);
    private void AddAxisGroupingLabel(ChartMember categoryGrouping, KeyValuePair`2<string, ChartAreaInfo> seriesInfoList, double startPointIndex, double endPointIndex);
    private void RenderSeries(ChartMember seriesGrouping);
    private void AdjustNonShapeSeriesAppearance(SeriesInfo seriesInfo);
    private void RenderSpecialChartTypes();
    private bool ChartAreaHasMultipleSeries(Series series);
    private bool IsCategoryHierarchyValidForHistogramAndPareto(SeriesInfo seriesInfo);
    private void MakeParetoChart(Series series);
    private void MakeHistogramChart(Series series);
    private void ShowPieAsCollected(Series series);
    private SeriesInfo GetShapeSeriesOnSameChartArea(ChartSeries chartSeries);
    private SeriesInfo CreateSeries(ChartMember seriesGrouping, ChartSeries chartSeries);
    private void RenderSeries(ChartMember seriesGrouping, ChartSeries chartSeries, Series series, bool isLine);
    private Axis GetCategoryAxis(ChartArea area, AxisType axisType);
    private string GetSeriesChartAreaName(ChartSeries chartSeries);
    private string GetSeriesCategoryAxisName(ChartSeries chartSeries);
    private void SetSeriesProperties(ChartSeries chartSeries, ChartMember seriesGrouping, Series series);
    private void RenderDataPointStyle(Style style, StyleInstance styleInstance, DataPoint dataPoint, SeriesInfo seriesInfo, int cellIndex);
    private bool CheckGradientSupport(Style style, StyleInstance styleInstance, DataPoint dataPoint, SeriesInfo seriesInfo);
    private string GetImageName(BackgroundImage backgroundImage, BackgroundImageInfo backgroundImageInfo);
    private void RenderDataPointBackgroundImage(BackgroundImage backgroundImage, DataPoint dataPoint, BackgroundImageInfo backgroundImageInfo);
    private void RenderSeriesStyle(Style style, StyleInstance styleInstance, Series series, bool isSeriesLine);
    private void RenderEmptyPointStyle(Style style, StyleInstance styleInstance, DataPointAttributes dataPointAttributes, bool isSeriesLine);
    private void RenderDataPointAttributesGradient(Style style, StyleInstance styleInstance, DataPointAttributes dataPointAttributes);
    private void RenderDataPointAttributesStyle(Style style, StyleInstance styleInstance, DataPointAttributes dataPointAttributes, bool isSeriesLine);
    private void RenderDataLabelFont(ChartDataLabel chartDataLabel, DataPointAttributes dataPointAttributes, bool dataPoint);
    private bool IsDefaultFontStyle(FontStyles style, FontWeights weight, TextDecorations textDecoration);
    private bool IsDefaultFont(string fontFamily, float fontSize);
    private void RenderTitleFont(ChartTitle chartTitle, Title title);
    private void RenderLegendTitleFont(ChartLegendTitle chartLegendTitle, Legend legend);
    private void RenderLegendFont(ChartLegend chartLegend, Legend legend);
    private void RenderStripLineFont(ChartStripLine chartStripLine, StripLine stripLine);
    private void RenderAxisScaleBreakBorder(Border border, AxisScaleBreakStyle axisScaleBreak);
    private void RenderChartBorder(Border border);
    private void RenderDataPointAttributesBorder(Border border, DataPointAttributes dataPointAttributes, bool isLine);
    private void RenderTitleBorder(Border border, Title title);
    private void RenderChartAreaBorder(Border border, ChartArea area);
    private void RenderStripLineBorder(Border border, StripLine stripLine);
    private void RenderBorderSkinBorder(Border border, BorderSkinAttributes borderSkin);
    private void RenderLegendBorder(Border border, Legend legend);
    private void RenderChartBackgroundImage(BackgroundImage backgroundImage);
    private void RenderDataPointAttributesBackgroundImage(BackgroundImage backgroundImage, DataPointAttributes dataPointAttributes);
    private void RenderTitleBackgroundImage(BackgroundImage backgroundImage, Title title);
    private void RenderChartAreaBackgroundImage(BackgroundImage backgroundImage, ChartArea chartArea);
    private void RenderLegendBackgroundImage(BackgroundImage backgroundImage, Legend legend);
    private void RenderBackgroundImage(BackgroundImage backgroundImage, String& backImage, ChartImageWrapMode& backImageMode, ChartImageAlign& backImageAlign, Color& backImageTransparentColor);
    private void GetBackgroundImageProperties(BackgroundImage backgroundImage, ChartImageWrapMode& backImageMode, ChartImageAlign& backImageAlign, Color& backImageTransparentColor);
    private string CreateImage(BackgroundImage backgroundImage);
    private void RenderStripLineBackgroundImage(BackgroundImage backgroundImage, StripLine stripLine);
    private Image GetImageFromStream(BackgroundImage backgroundImage);
    private void RenderActionInfo(ActionInfo actionInfo, string toolTip, IMapAreaAttributes mapAreaAttributes);
    private void RenderEmptyPoint(ChartEmptyPoints chartEmptyPoint, DataPointAttributes emptyPoint, bool isSeriesLine);
    private void SetEmptyPointProperties(ChartEmptyPoints chartEmptyPoint, DataPointAttributes emptyPoint);
    private void RenderItemInLegend(ChartItemInLegend chartItemInLegend, DataPointAttributes dataPointAttributes, bool isSeriesShape);
    private void RenderItemInLegendActionInfo(ActionInfo actionInfo, string toolTip, DataPointAttributes dataPointAttributes);
    private bool GetCustomProperty(CustomProperty customProperty, String& name, String& value);
    private void RenderCustomProperties(CustomPropertyCollection customProperties, DataPointAttributes dataPointAttributes);
    private void SetSeriesType(ChartSeries chartSeries, Series series);
    private ChartSeriesType GetSeriesType(ChartSeries chartSeries);
    private ChartSeriesSubtype GetSeriesSubType(ChartSeries chartSeries);
    private ChartSeriesSubtype GetValidSeriesSubType(ChartSeriesType type, ChartSeriesSubtype subtype);
    private void SetSeriesTypeArea(Series series, ChartSeriesSubtype subtype);
    private void SetSeriesTypeBar(Series series, ChartSeriesSubtype subtype);
    private void SetSeriesTypeColumn(Series series, ChartSeriesSubtype subtype);
    private void SetSeriesTypeLine(Series series, ChartSeriesSubtype subtype);
    private void SetSeriesTypePolar(Series series, ChartSeriesSubtype subtype);
    private void SetSeriesTypeRange(Series series, ChartSeriesSubtype subtype);
    private void SetSeriesTypeScatter(Series series, ChartSeriesSubtype subtype);
    private void SetSeriesTypeShape(Series series, ChartSeriesSubtype subtype);
    private void RenderDataPoint(ChartSeries chartSeries, ChartMember seriesGrouping, ChartMember categoryGrouping, SeriesInfo seriesInfo, bool isSeriesShape);
    private void RenderDefaultDataPointStyle(Style style, StyleInstance styleInstance, DataPoint dataPoint, SeriesInfo seriesInfo, int cellIndex);
    public static int GetYValuesCount(SeriesChartType seriesType);
    private void SetDataPointProperties(ChartDataPoint chartDataPoint, DataPoint dataPoint);
    private void RenderDataPointValues(ChartDataPoint chartDataPoint, DataPoint dataPoint, SeriesInfo seriesInfo, ChartMember categoryGrouping);
    private void SetDataPointYValue(DataPoint dataPoint, int index, object value, Nullable`1& dateTimeType);
    private void SetDataPointYValues(ChartDataPoint chartDataPoint, DataPoint dataPoint, SeriesInfo seriesInfo);
    private int GetStartYValueIndex(SeriesInfo seriesInfo);
    private int GetEndYValueIndex(SeriesInfo seriesInfo);
    private int GetHighYValueIndex(SeriesInfo seriesInfo);
    private int GetLowYValueIndex(SeriesInfo seriesInfo);
    private bool IsSeriesAttachedToScalarAxis(SeriesInfo seriesInfo);
    private bool IsAxisAutoMargin(ChartAreaInfo chartAreaInfo, Axis axis);
    private void SetDataPointXValue(ChartDataPoint chartDataPoint, DataPoint dataPoint, SeriesInfo seriesInfo, ChartMember categoryGrouping);
    private void RenderDerivedSeriesCollecion();
    private void RenderDerivedSeries(ChartDerivedSeries chartDerivedSeries);
    private void RenderDerivedSeriesProperties(ChartDerivedSeries chartDerivedSeries, string derivedSeriesName, string sourceSeriesName, ChartSeriesFormula formula);
    private void AdjustSeriesInLegend(object sender, CustomizeLegendEventArgs e);
    private void AdjustSeriesAppearanceInLegend(SeriesInfo seriesInfo, LegendItem seriesLegendItem);
    private DataPoint GetFirstNonEmptyDataPoint(Series series);
    private void AdjustDerivedSeriesInLegend(SeriesInfo seriesInfo, LegendItem seriesLegendItem, LegendItemsCollection legendItems);
    private LegendItem GetSeriesLegendItem(Series series, LegendItemsCollection legendItemCollection);
    private Series GetSeries(string seriesName);
    private SeriesInfo GetSeriesInfo(string seriesName);
    private ChartArea GetChartArea(string chartAreaName);
    private ChartArea CreateNewChartArea(ChartArea originalChartArea, bool copyYAxisProperties);
    private void CopyAxisRootProperties(Axis source, Axis target);
    private void ApplyFormula(ChartSeriesFormula formula, string formulaParameters, string inputValues, string outputValues, bool startFromFirst);
    private FinancialFormula GetFinancialFormula(ChartSeriesFormula formula);
    private void PostProcessData();
    private void AdjustAxesMargin(KeyValuePair`2<string, ChartAreaInfo> chartAreaInfoKeyPair);
    private void AdjustChartAreaData(KeyValuePair`2<string, ChartAreaInfo> chartAreaInfo);
    private void AddSeriesToDictionary(SeriesInfo seriesInfo);
    private void ClearNullXValues(SeriesInfo seriesInfo);
    private void ClearSeriesXValues(Series series);
    private void OnPostInitialize();
    private void OnPostApplySeriesPointData(Series series, int index);
    private void OnPostApplySeriesData(Series series);
    private void OnPostApplyData();
    private double ConvertToDouble(object value);
    private double ConvertToDouble(object value, bool checkForMaxMinValue);
    private double ConvertToDouble(object value, Nullable`1& dateTimeType);
    private double ConvertToDouble(object value, bool checkForMaxMinValue, Nullable`1& dateTimeType);
    private static double ConvertDateTimeToDouble(DateTime dateTime);
    private string GetFormattedValue(object value, string format);
    private BreakLineType GetScaleBreakLineType(ChartBreakLineType chartBreakLineType);
    private AutoBool GetAutoBool(ChartAutoBool autoBool);
    private AxisEnabled GetAxisEnabled(ChartAutoBool autoBool);
    private bool GetMargin(ChartAutoBool autoBool);
    private bool DoesSeriesRequireMargin(ChartSeries chartSeries);
    private StringAlignment GetStringAlignmentFromTextAlignments(TextAlignments value);
    private StringAlignment GetStringAlignmentFromVericalAlignments(VerticalAlignments value);
    private string GetSeriesLegendText(ChartMember seriesGrouping);
    private string GetDataPointLegendText(ChartMember categoryGrouping, ChartMember seriesGrouping);
    private string GetGroupingLegendText(ChartMember grouping);
    private string GetGroupingLabel(ChartMember grouping);
    private string GetFormattedGroupingLabel(ChartMember categoryGrouping, string chartAreaName, ChartAxis categoryAxis);
    private int GetGroupingLevel(ChartMember grouping);
    private bool IsChartEmpty();
    private bool IsSeriesShape(ChartSeries chartSeries);
    private bool IsSeriesCollectedPie(Series series);
    private bool IsSeriesPareto(Series series);
    private bool IsSeriesHistogram(Series series);
    private bool IsGradientPerDataPointSupported(ChartSeries chartSeries);
    private bool IsSeriesStacked(ChartSeries chartSeries);
    private bool IsSeriesLine(ChartSeries chartSeries);
    private bool IsSeriesRange(ChartSeries chartSeries);
    private bool IsSeriesBubble(ChartSeries chartSeries);
    private bool IsSeriesExploded(ChartSeries chartSeries);
    private bool CanSetCategoryGroupingLabels(ChartAreaInfo seriesInfoList);
    private bool CanSetPieDataPointLegendText(Series series, DataPoint dataPoint);
    private bool CanSetDataPointAxisLabel(Series series, DataPoint dataPoint);
    private bool IsXValueSet(ChartAreaInfo seriesInfoList);
    private bool IsXValueSetFailed(ChartAreaInfo seriesInfoList);
    private bool HasStackedSeries(ChartAreaInfo seriesInfoList);
    private GradientType GetGradientType(BackgroundGradients chartGradientType);
    private ChartHatchStyle GetHatchType(BackgroundHatchTypes chartHatchType);
    private ChartDashStyle GetBorderStyle(BorderStyles chartBorderStyle, bool isLine);
    private ChartImageWrapMode GetBackImageMode(BackgroundRepeatTypes backgroundImageRepeatType);
    private ChartImageAlign GetBackImageAlign(Positions position);
    private LabelOutsidePlotAreaStyle GetLabelOutsidePlotAreaStyle(ChartAllowOutsideChartArea chartAllowOutsideChartArea);
    private DateTimeIntervalType GetDateTimeIntervalType(ChartIntervalType chartIntervalType);
    private IntervalAutoMode GetIntervalAutoMode(bool variableAutoInterval);
    private TickMarkStyle GetTickMarkStyle(ChartTickMarksType chartTickMarksType);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartMarker : object {
    private ChartMarker m_markerDef;
    private Chart m_chart;
    private ChartMarkerInstance m_instance;
    private Style m_style;
    private ReportSizeProperty m_size;
    private ReportEnumProperty`1<ChartMarkerTypes> m_type;
    private ChartDataPoint m_dataPoint;
    private InternalChartSeries m_chartSeries;
    public Style Style { get; }
    public ReportEnumProperty`1<ChartMarkerTypes> Type { get; }
    public ReportSizeProperty Size { get; }
    internal Chart ChartDef { get; }
    internal ChartMarker MarkerDef { get; }
    internal IReportScope ReportScope { get; }
    public ChartMarkerInstance Instance { get; }
    internal ChartMarker(ChartDataPoint dataPoint, ChartMarker markerDef, Chart chart);
    internal ChartMarker(InternalChartSeries chartSeries, ChartMarker markerDef, Chart chart);
    internal ChartMarker(ChartMarker markerDef, Chart chart);
    internal ChartMarker(ChartDataPoint dataPoint, Chart chart);
    public sealed virtual Style get_Style();
    public ReportEnumProperty`1<ChartMarkerTypes> get_Type();
    public ReportSizeProperty get_Size();
    internal Chart get_ChartDef();
    internal ChartMarker get_MarkerDef();
    internal IReportScope get_ReportScope();
    public ChartMarkerInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartMarkerInstance : BaseInstance {
    private ChartMarker m_markerDef;
    private StyleInstance m_style;
    private ReportSize m_size;
    private Nullable`1<ChartMarkerTypes> m_type;
    public StyleInstance Style { get; }
    public ReportSize Size { get; }
    public ChartMarkerTypes Type { get; }
    internal ChartMarkerInstance(ChartMarker markerDef);
    public StyleInstance get_Style();
    public ReportSize get_Size();
    public ChartMarkerTypes get_Type();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartMarkerTypes : Enum {
    public int value__;
    public static ChartMarkerTypes None;
    public static ChartMarkerTypes Square;
    public static ChartMarkerTypes Circle;
    public static ChartMarkerTypes Diamond;
    public static ChartMarkerTypes Triangle;
    public static ChartMarkerTypes Cross;
    public static ChartMarkerTypes Star4;
    public static ChartMarkerTypes Star5;
    public static ChartMarkerTypes Star6;
    public static ChartMarkerTypes Star10;
    public static ChartMarkerTypes Auto;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartMember : DataRegionMember {
    protected ChartMemberCollection m_children;
    protected ChartMemberInstance m_instance;
    protected ReportStringProperty m_label;
    protected ChartSeries m_chartSeries;
    public ChartMember Parent { get; }
    public ReportStringProperty Label { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public ChartMemberCollection Children { get; }
    public bool IsCategory { get; }
    public int SeriesSpan { get; }
    public int CategorySpan { get; }
    public bool IsTotal { get; }
    internal ChartMember MemberDefinition { get; }
    internal Chart OwnerChart { get; }
    public ChartMemberInstance Instance { get; }
    internal IDataRegionMemberCollection SubMembers { get; }
    private ChartSeries ChartSeries { get; }
    internal ChartMember(IDefinitionPath parentDefinitionPath, Chart owner, ChartMember parent, int parentCollectionIndex);
    public ChartMember get_Parent();
    public abstract virtual ReportStringProperty get_Label();
    public abstract virtual string get_DataElementName();
    public abstract virtual DataElementOutputTypes get_DataElementOutput();
    public abstract virtual ChartMemberCollection get_Children();
    public abstract virtual bool get_IsCategory();
    public abstract virtual int get_SeriesSpan();
    public abstract virtual int get_CategorySpan();
    public abstract virtual bool get_IsTotal();
    internal abstract virtual ChartMember get_MemberDefinition();
    internal Chart get_OwnerChart();
    public abstract virtual ChartMemberInstance get_Instance();
    internal virtual IDataRegionMemberCollection get_SubMembers();
    internal virtual bool GetIsColumn();
    private ChartSeries get_ChartSeries();
    internal virtual void SetNewContext(bool fromMoveNext);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartMemberCollection : DataRegionMemberCollection`1<ChartMember> {
    public string DefinitionPath { get; }
    internal Chart OwnerChart { get; }
    internal ChartMemberCollection(IDefinitionPath parentDefinitionPath, Chart owner);
    public virtual string get_DefinitionPath();
    internal Chart get_OwnerChart();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartMemberInstance : BaseInstance {
    protected Chart m_owner;
    protected ChartMember m_memberDef;
    protected bool m_labelEvaluated;
    protected string m_label;
    protected StyleInstance m_style;
    private Nullable`1<VariantResult> m_labelObject;
    public object LabelObject { get; }
    public string Label { get; }
    internal ChartMemberInstance(Chart owner, ChartMember memberDef);
    public object get_LabelObject();
    public string get_Label();
    private VariantResult GetLabelObject();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartNoMoveDirections : object {
    private Chart m_chart;
    private ChartNoMoveDirections m_chartNoMoveDirectionsDef;
    private ChartNoMoveDirectionsInstance m_instance;
    private ReportBoolProperty m_up;
    private ReportBoolProperty m_down;
    private ReportBoolProperty m_left;
    private ReportBoolProperty m_right;
    private ReportBoolProperty m_upLeft;
    private ReportBoolProperty m_upRight;
    private ReportBoolProperty m_downLeft;
    private ReportBoolProperty m_downRight;
    private InternalChartSeries m_chartSeries;
    public ReportBoolProperty Up { get; }
    public ReportBoolProperty Down { get; }
    public ReportBoolProperty Left { get; }
    public ReportBoolProperty Right { get; }
    public ReportBoolProperty UpLeft { get; }
    public ReportBoolProperty UpRight { get; }
    public ReportBoolProperty DownLeft { get; }
    public ReportBoolProperty DownRight { get; }
    internal IReportScope ReportScope { get; }
    internal Chart ChartDef { get; }
    internal ChartNoMoveDirections ChartNoMoveDirectionsDef { get; }
    public ChartNoMoveDirectionsInstance Instance { get; }
    internal ChartNoMoveDirections(InternalChartSeries chartSeries, ChartNoMoveDirections chartNoMoveDirectionsDef, Chart chart);
    public ReportBoolProperty get_Up();
    public ReportBoolProperty get_Down();
    public ReportBoolProperty get_Left();
    public ReportBoolProperty get_Right();
    public ReportBoolProperty get_UpLeft();
    public ReportBoolProperty get_UpRight();
    public ReportBoolProperty get_DownLeft();
    public ReportBoolProperty get_DownRight();
    internal IReportScope get_ReportScope();
    internal Chart get_ChartDef();
    internal ChartNoMoveDirections get_ChartNoMoveDirectionsDef();
    public ChartNoMoveDirectionsInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartNoMoveDirectionsInstance : BaseInstance {
    private ChartNoMoveDirections m_chartNoMoveDirectionsDef;
    private Nullable`1<bool> m_up;
    private Nullable`1<bool> m_down;
    private Nullable`1<bool> m_left;
    private Nullable`1<bool> m_right;
    private Nullable`1<bool> m_upLeft;
    private Nullable`1<bool> m_upRight;
    private Nullable`1<bool> m_downLeft;
    private Nullable`1<bool> m_downRight;
    public bool Up { get; }
    public bool Down { get; }
    public bool Left { get; }
    public bool Right { get; }
    public bool UpLeft { get; }
    public bool UpRight { get; }
    public bool DownLeft { get; }
    public bool DownRight { get; }
    internal ChartNoMoveDirectionsInstance(ChartNoMoveDirections chartNoMoveDirectionsDef);
    public bool get_Up();
    public bool get_Down();
    public bool get_Left();
    public bool get_Right();
    public bool get_UpLeft();
    public bool get_UpRight();
    public bool get_DownLeft();
    public bool get_DownRight();
    protected virtual void ResetInstanceCache();
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartObjectCollectionBase`2 : object {
    private T[] m_collection;
    public T Item { get; }
    public int Count { get; }
    public T get_Item(int index);
    public abstract virtual int get_Count();
    protected abstract virtual T CreateChartObject(int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartObjectCollectionItem`1 : object {
    protected T m_instance;
    internal virtual void SetNewContext();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartPalette : Enum {
    public int value__;
    public static ChartPalette Default;
    public static ChartPalette EarthTones;
    public static ChartPalette Excel;
    public static ChartPalette GrayScale;
    public static ChartPalette Light;
    public static ChartPalette Pastel;
    public static ChartPalette SemiTransparent;
    public static ChartPalette Berry;
    public static ChartPalette Chocolate;
    public static ChartPalette Fire;
    public static ChartPalette SeaGreen;
    public static ChartPalette BrightPastel;
    public static ChartPalette Custom;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartSeparators : Enum {
    public int value__;
    public static ChartSeparators None;
    public static ChartSeparators Line;
    public static ChartSeparators ThickLine;
    public static ChartSeparators DoubleLine;
    public static ChartSeparators DashLine;
    public static ChartSeparators DotLine;
    public static ChartSeparators GradientLine;
    public static ChartSeparators ThickGradientLine;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartSeries : ReportElementCollectionBase`1<ChartDataPoint> {
    protected Chart m_chart;
    protected int m_seriesIndex;
    protected ChartDataPoint[] m_chartDataPoints;
    public string Name { get; }
    public Style Style { get; }
    internal ActionInfo ActionInfo { get; }
    public ReportEnumProperty`1<ChartSeriesType> Type { get; }
    public ReportEnumProperty`1<ChartSeriesSubtype> Subtype { get; }
    public ChartEmptyPoints EmptyPoints { get; }
    public ChartSmartLabel SmartLabel { get; }
    public ReportStringProperty LegendName { get; }
    internal ReportStringProperty LegendText { get; }
    internal ReportBoolProperty HideInLegend { get; }
    public ReportStringProperty ChartAreaName { get; }
    public ReportStringProperty ValueAxisName { get; }
    public ReportStringProperty CategoryAxisName { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ChartDataLabel DataLabel { get; }
    public ChartMarker Marker { get; }
    internal ReportStringProperty ToolTip { get; }
    public ReportBoolProperty Hidden { get; }
    public ChartItemInLegend ChartItemInLegend { get; }
    public ChartSeriesInstance Instance { get; }
    internal ChartSeries(Chart chart, int seriesIndex);
    public abstract virtual string get_Name();
    public abstract virtual Style get_Style();
    internal abstract virtual ActionInfo get_ActionInfo();
    public abstract virtual ReportEnumProperty`1<ChartSeriesType> get_Type();
    public abstract virtual ReportEnumProperty`1<ChartSeriesSubtype> get_Subtype();
    public abstract virtual ChartEmptyPoints get_EmptyPoints();
    public abstract virtual ChartSmartLabel get_SmartLabel();
    public abstract virtual ReportStringProperty get_LegendName();
    internal abstract virtual ReportStringProperty get_LegendText();
    internal abstract virtual ReportBoolProperty get_HideInLegend();
    public abstract virtual ReportStringProperty get_ChartAreaName();
    public abstract virtual ReportStringProperty get_ValueAxisName();
    public abstract virtual ReportStringProperty get_CategoryAxisName();
    public abstract virtual CustomPropertyCollection get_CustomProperties();
    public abstract virtual ChartDataLabel get_DataLabel();
    public abstract virtual ChartMarker get_Marker();
    internal abstract virtual ReportStringProperty get_ToolTip();
    public abstract virtual ReportBoolProperty get_Hidden();
    public abstract virtual ChartItemInLegend get_ChartItemInLegend();
    public abstract virtual ChartSeriesInstance get_Instance();
    private sealed virtual override IDataRegionCell Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRow.GetIfExists(int categoryIndex);
    internal abstract virtual void SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ChartSeriesCollection : ReportElementCollectionBase`1<ChartSeries> {
    protected Chart m_owner;
    protected ChartSeries[] m_chartSeriesCollection;
    internal ChartSeriesCollection(Chart owner);
    private sealed virtual override IDataRegionRow Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRowCollection.GetIfExists(int seriesIndex);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartSeriesFormula : Enum {
    public int value__;
    public static ChartSeriesFormula BollingerBands;
    public static ChartSeriesFormula MovingAverage;
    public static ChartSeriesFormula ExponentialMovingAverage;
    public static ChartSeriesFormula TriangularMovingAverage;
    public static ChartSeriesFormula WeightedMovingAverage;
    public static ChartSeriesFormula MACD;
    public static ChartSeriesFormula DetrendedPriceOscillator;
    public static ChartSeriesFormula Envelopes;
    public static ChartSeriesFormula Performance;
    public static ChartSeriesFormula RateOfChange;
    public static ChartSeriesFormula RelativeStrengthIndex;
    public static ChartSeriesFormula StandardDeviation;
    public static ChartSeriesFormula TRIX;
    public static ChartSeriesFormula Mean;
    public static ChartSeriesFormula Median;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartSeriesInstance : BaseInstance {
    private InternalChartSeries m_chartSeriesDef;
    private StyleInstance m_style;
    private Nullable`1<ChartSeriesType> m_type;
    private Nullable`1<ChartSeriesSubtype> m_subtype;
    private string m_legendName;
    private string m_legendText;
    private Nullable`1<bool> m_hideInLegend;
    private string m_chartAreaName;
    private string m_valueAxisName;
    private string m_categoryAxisName;
    private string m_toolTip;
    private Nullable`1<bool> m_hidden;
    public StyleInstance Style { get; }
    public ChartSeriesType Type { get; }
    public ChartSeriesSubtype Subtype { get; }
    public string LegendName { get; }
    internal string LegendText { get; }
    internal bool HideInLegend { get; }
    public string ChartAreaName { get; }
    public string ValueAxisName { get; }
    public string CategoryAxisName { get; }
    internal string ToolTip { get; }
    public bool Hidden { get; }
    internal ChartSeriesInstance(InternalChartSeries chartSeriesDef);
    public StyleInstance get_Style();
    public ChartSeriesType get_Type();
    public ChartSeriesSubtype get_Subtype();
    public string get_LegendName();
    internal string get_LegendText();
    internal bool get_HideInLegend();
    public string get_ChartAreaName();
    public string get_ValueAxisName();
    public string get_CategoryAxisName();
    internal string get_ToolTip();
    public bool get_Hidden();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartSeriesSubtype : Enum {
    public int value__;
    public static ChartSeriesSubtype Plain;
    public static ChartSeriesSubtype Stacked;
    public static ChartSeriesSubtype PercentStacked;
    public static ChartSeriesSubtype Smooth;
    public static ChartSeriesSubtype Stepped;
    public static ChartSeriesSubtype Pie;
    public static ChartSeriesSubtype ExplodedPie;
    public static ChartSeriesSubtype Doughnut;
    public static ChartSeriesSubtype ExplodedDoughnut;
    public static ChartSeriesSubtype Funnel;
    public static ChartSeriesSubtype Pyramid;
    public static ChartSeriesSubtype Bubble;
    public static ChartSeriesSubtype Candlestick;
    public static ChartSeriesSubtype Stock;
    public static ChartSeriesSubtype Bar;
    public static ChartSeriesSubtype Column;
    public static ChartSeriesSubtype BoxPlot;
    public static ChartSeriesSubtype ErrorBar;
    public static ChartSeriesSubtype Radar;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartSeriesType : Enum {
    public int value__;
    public static ChartSeriesType Column;
    public static ChartSeriesType Bar;
    public static ChartSeriesType Line;
    public static ChartSeriesType Shape;
    public static ChartSeriesType Scatter;
    public static ChartSeriesType Area;
    public static ChartSeriesType Range;
    public static ChartSeriesType Polar;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartSmartLabel : object {
    private Chart m_chart;
    private ChartSmartLabel m_chartSmartLabelDef;
    private ChartSmartLabelInstance m_instance;
    private ReportEnumProperty`1<ChartAllowOutsideChartArea> m_allowOutSidePlotArea;
    private ReportColorProperty m_calloutBackColor;
    private ReportEnumProperty`1<ChartCalloutLineAnchor> m_calloutLineAnchor;
    private ReportColorProperty m_calloutLineColor;
    private ReportEnumProperty`1<ChartCalloutLineStyle> m_calloutLineStyle;
    private ReportSizeProperty m_calloutLineWidth;
    private ReportEnumProperty`1<ChartCalloutStyle> m_calloutStyle;
    private ReportBoolProperty m_showOverlapped;
    private ReportBoolProperty m_markerOverlapping;
    private ReportSizeProperty m_maxMovingDistance;
    private ReportSizeProperty m_minMovingDistance;
    private ChartNoMoveDirections m_noMoveDirections;
    private ReportBoolProperty m_disabled;
    private InternalChartSeries m_chartSeries;
    public ReportEnumProperty`1<ChartAllowOutsideChartArea> AllowOutSidePlotArea { get; }
    public ReportColorProperty CalloutBackColor { get; }
    public ReportEnumProperty`1<ChartCalloutLineAnchor> CalloutLineAnchor { get; }
    public ReportColorProperty CalloutLineColor { get; }
    public ReportEnumProperty`1<ChartCalloutLineStyle> CalloutLineStyle { get; }
    public ReportSizeProperty CalloutLineWidth { get; }
    public ReportEnumProperty`1<ChartCalloutStyle> CalloutStyle { get; }
    public ReportBoolProperty ShowOverlapped { get; }
    public ReportBoolProperty MarkerOverlapping { get; }
    public ReportSizeProperty MaxMovingDistance { get; }
    public ReportSizeProperty MinMovingDistance { get; }
    public ChartNoMoveDirections NoMoveDirections { get; }
    public ReportBoolProperty Disabled { get; }
    internal IReportScope ReportScope { get; }
    internal Chart ChartDef { get; }
    internal ChartSmartLabel ChartSmartLabelDef { get; }
    public ChartSmartLabelInstance Instance { get; }
    internal ChartSmartLabel(InternalChartSeries chartSeries, ChartSmartLabel chartSmartLabelDef, Chart chart);
    public ReportEnumProperty`1<ChartAllowOutsideChartArea> get_AllowOutSidePlotArea();
    public ReportColorProperty get_CalloutBackColor();
    public ReportEnumProperty`1<ChartCalloutLineAnchor> get_CalloutLineAnchor();
    public ReportColorProperty get_CalloutLineColor();
    public ReportEnumProperty`1<ChartCalloutLineStyle> get_CalloutLineStyle();
    public ReportSizeProperty get_CalloutLineWidth();
    public ReportEnumProperty`1<ChartCalloutStyle> get_CalloutStyle();
    public ReportBoolProperty get_ShowOverlapped();
    public ReportBoolProperty get_MarkerOverlapping();
    public ReportSizeProperty get_MaxMovingDistance();
    public ReportSizeProperty get_MinMovingDistance();
    public ChartNoMoveDirections get_NoMoveDirections();
    public ReportBoolProperty get_Disabled();
    internal IReportScope get_ReportScope();
    internal Chart get_ChartDef();
    internal ChartSmartLabel get_ChartSmartLabelDef();
    public ChartSmartLabelInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartSmartLabelInstance : BaseInstance {
    private ChartSmartLabel m_chartSmartLabelDef;
    private Nullable`1<ChartAllowOutsideChartArea> m_allowOutSidePlotArea;
    private ReportColor m_calloutBackColor;
    private Nullable`1<ChartCalloutLineAnchor> m_calloutLineAnchor;
    private ReportColor m_calloutLineColor;
    private Nullable`1<ChartCalloutLineStyle> m_calloutLineStyle;
    private ReportSize m_calloutLineWidth;
    private Nullable`1<ChartCalloutStyle> m_calloutStyle;
    private Nullable`1<bool> m_showOverlapped;
    private Nullable`1<bool> m_markerOverlapping;
    private ReportSize m_maxMovingDistance;
    private ReportSize m_minMovingDistance;
    private Nullable`1<bool> m_disabled;
    public ChartAllowOutsideChartArea AllowOutSidePlotArea { get; }
    public ReportColor CalloutBackColor { get; }
    public ChartCalloutLineAnchor CalloutLineAnchor { get; }
    public ReportColor CalloutLineColor { get; }
    public ChartCalloutLineStyle CalloutLineStyle { get; }
    public ReportSize CalloutLineWidth { get; }
    public ChartCalloutStyle CalloutStyle { get; }
    public bool ShowOverlapped { get; }
    public bool MarkerOverlapping { get; }
    public bool Disabled { get; }
    public ReportSize MaxMovingDistance { get; }
    public ReportSize MinMovingDistance { get; }
    internal ChartSmartLabelInstance(ChartSmartLabel chartSmartLabelDef);
    public ChartAllowOutsideChartArea get_AllowOutSidePlotArea();
    public ReportColor get_CalloutBackColor();
    public ChartCalloutLineAnchor get_CalloutLineAnchor();
    public ReportColor get_CalloutLineColor();
    public ChartCalloutLineStyle get_CalloutLineStyle();
    public ReportSize get_CalloutLineWidth();
    public ChartCalloutStyle get_CalloutStyle();
    public bool get_ShowOverlapped();
    public bool get_MarkerOverlapping();
    public bool get_Disabled();
    public ReportSize get_MaxMovingDistance();
    public ReportSize get_MinMovingDistance();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartStripLine : ChartObjectCollectionItem`1<ChartStripLineInstance> {
    private Chart m_chart;
    private ChartStripLine m_chartStripLineDef;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ReportStringProperty m_title;
    private ReportEnumProperty`1<TextOrientations> m_textOrientation;
    private ReportIntProperty m_titleAngle;
    private ReportStringProperty m_toolTip;
    private ReportDoubleProperty m_interval;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalType;
    private ReportDoubleProperty m_intervalOffset;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalOffsetType;
    private ReportDoubleProperty m_stripWidth;
    private ReportEnumProperty`1<ChartIntervalType> m_stripWidthType;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ReportStringProperty Title { get; }
    public ReportIntProperty TitleAngle { get; }
    public ReportEnumProperty`1<TextOrientations> TextOrientation { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportDoubleProperty Interval { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalType { get; }
    public ReportDoubleProperty IntervalOffset { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalOffsetType { get; }
    public ReportDoubleProperty StripWidth { get; }
    public ReportEnumProperty`1<ChartIntervalType> StripWidthType { get; }
    internal Chart ChartDef { get; }
    internal ChartStripLine ChartStripLineDef { get; }
    public ChartStripLineInstance Instance { get; }
    internal ChartStripLine(ChartStripLine chartStripLineDef, Chart chart);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ReportStringProperty get_Title();
    public ReportIntProperty get_TitleAngle();
    public ReportEnumProperty`1<TextOrientations> get_TextOrientation();
    public ReportStringProperty get_ToolTip();
    public ReportDoubleProperty get_Interval();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalType();
    public ReportDoubleProperty get_IntervalOffset();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalOffsetType();
    public ReportDoubleProperty get_StripWidth();
    public ReportEnumProperty`1<ChartIntervalType> get_StripWidthType();
    internal Chart get_ChartDef();
    internal ChartStripLine get_ChartStripLineDef();
    public ChartStripLineInstance get_Instance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartStripLineCollection : ChartObjectCollectionBase`2<ChartStripLine, ChartStripLineInstance> {
    private Chart m_chart;
    private ChartAxis m_axis;
    public int Count { get; }
    internal ChartStripLineCollection(ChartAxis axis, Chart chart);
    protected virtual ChartStripLine CreateChartObject(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartStripLineInstance : BaseInstance {
    private ChartStripLine m_chartStripLineDef;
    private StyleInstance m_style;
    private string m_title;
    private Nullable`1<int> m_titleAngle;
    private Nullable`1<TextOrientations> m_textOrientation;
    private string m_toolTip;
    private Nullable`1<double> m_interval;
    private Nullable`1<ChartIntervalType> m_intervalType;
    private Nullable`1<double> m_intervalOffset;
    private Nullable`1<ChartIntervalType> m_intervalOffsetType;
    private Nullable`1<double> m_stripWidth;
    private Nullable`1<ChartIntervalType> m_stripWidthType;
    public StyleInstance Style { get; }
    public string Title { get; }
    public int TitleAngle { get; }
    public TextOrientations TextOrientation { get; }
    public string ToolTip { get; }
    public double Interval { get; }
    public ChartIntervalType IntervalType { get; }
    public double IntervalOffset { get; }
    public ChartIntervalType IntervalOffsetType { get; }
    public double StripWidth { get; }
    public ChartIntervalType StripWidthType { get; }
    internal ChartStripLineInstance(ChartStripLine chartStripLineDef);
    public StyleInstance get_Style();
    public string get_Title();
    public int get_TitleAngle();
    public TextOrientations get_TextOrientation();
    public string get_ToolTip();
    public double get_Interval();
    public ChartIntervalType get_IntervalType();
    public double get_IntervalOffset();
    public ChartIntervalType get_IntervalOffsetType();
    public double get_StripWidth();
    public ChartIntervalType get_StripWidthType();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartThreeDProjectionModes : Enum {
    public int value__;
    public static ChartThreeDProjectionModes Oblique;
    public static ChartThreeDProjectionModes Perspective;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartThreeDProperties : object {
    private Chart m_chart;
    private ThreeDProperties m_renderThreeDPropertiesDef;
    private ChartThreeDProperties m_chartThreeDPropertiesDef;
    private ChartThreeDPropertiesInstance m_instance;
    private ReportBoolProperty m_clustered;
    private ReportIntProperty m_wallThickness;
    private ReportIntProperty m_gapDepth;
    private ReportEnumProperty`1<ChartThreeDShadingTypes> m_shading;
    private ReportIntProperty m_depthRatio;
    private ReportIntProperty m_rotation;
    private ReportIntProperty m_inclination;
    private ReportIntProperty m_perspective;
    private ReportEnumProperty`1<ChartThreeDProjectionModes> m_projectionMode;
    private ReportBoolProperty m_enabled;
    public ReportBoolProperty Enabled { get; }
    public ReportEnumProperty`1<ChartThreeDProjectionModes> ProjectionMode { get; }
    public ReportIntProperty Perspective { get; }
    public ReportIntProperty Rotation { get; }
    public ReportIntProperty Inclination { get; }
    public ReportIntProperty DepthRatio { get; }
    public ReportEnumProperty`1<ChartThreeDShadingTypes> Shading { get; }
    public ReportIntProperty GapDepth { get; }
    public ReportIntProperty WallThickness { get; }
    public ReportBoolProperty Clustered { get; }
    internal Chart ChartDef { get; }
    internal ChartThreeDProperties ChartThreeDPropertiesDef { get; }
    public ChartThreeDPropertiesInstance Instance { get; }
    internal ChartThreeDProperties(ChartThreeDProperties threeDPropertiesDef, Chart chart);
    internal ChartThreeDProperties(ThreeDProperties renderThreeDPropertiesDef, Chart chart);
    public ReportBoolProperty get_Enabled();
    public ReportEnumProperty`1<ChartThreeDProjectionModes> get_ProjectionMode();
    public ReportIntProperty get_Perspective();
    public ReportIntProperty get_Rotation();
    public ReportIntProperty get_Inclination();
    public ReportIntProperty get_DepthRatio();
    public ReportEnumProperty`1<ChartThreeDShadingTypes> get_Shading();
    public ReportIntProperty get_GapDepth();
    public ReportIntProperty get_WallThickness();
    public ReportBoolProperty get_Clustered();
    internal Chart get_ChartDef();
    internal ChartThreeDProperties get_ChartThreeDPropertiesDef();
    public ChartThreeDPropertiesInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartThreeDPropertiesInstance : BaseInstance {
    private ChartThreeDProperties m_chartThreeDPropertiesDef;
    private Nullable`1<bool> m_enabled;
    private Nullable`1<ChartThreeDProjectionModes> m_projectionMode;
    private Nullable`1<int> m_perspective;
    private Nullable`1<int> m_rotation;
    private Nullable`1<int> m_inclination;
    private Nullable`1<int> m_depthRatio;
    private Nullable`1<ChartThreeDShadingTypes> m_shading;
    private Nullable`1<int> m_gapDepth;
    private Nullable`1<int> m_wallThickness;
    private Nullable`1<bool> m_clustered;
    public bool Enabled { get; }
    public ChartThreeDProjectionModes ProjectionMode { get; }
    public int Perspective { get; }
    public int Rotation { get; }
    public int Inclination { get; }
    public int DepthRatio { get; }
    public ChartThreeDShadingTypes Shading { get; }
    public int GapDepth { get; }
    public int WallThickness { get; }
    public bool Clustered { get; }
    internal ChartThreeDPropertiesInstance(ChartThreeDProperties chartThreeDPropertiesDef);
    public bool get_Enabled();
    public ChartThreeDProjectionModes get_ProjectionMode();
    public int get_Perspective();
    public int get_Rotation();
    public int get_Inclination();
    public int get_DepthRatio();
    public ChartThreeDShadingTypes get_Shading();
    public int get_GapDepth();
    public int get_WallThickness();
    public bool get_Clustered();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartThreeDShadingTypes : Enum {
    public int value__;
    public static ChartThreeDShadingTypes Real;
    public static ChartThreeDShadingTypes Simple;
    public static ChartThreeDShadingTypes None;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartTickMarks : object {
    private Chart m_chart;
    private ChartTickMarks m_chartTickMarksDef;
    private ChartTickMarksInstance m_instance;
    private Style m_style;
    private ReportEnumProperty`1<ChartAutoBool> m_enabled;
    private ReportEnumProperty`1<ChartTickMarksType> m_type;
    private ReportDoubleProperty m_length;
    private ReportDoubleProperty m_interval;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalType;
    private ReportDoubleProperty m_intervalOffset;
    private ReportEnumProperty`1<ChartIntervalType> m_intervalOffsetType;
    public Style Style { get; }
    public ReportEnumProperty`1<ChartAutoBool> Enabled { get; }
    public ReportEnumProperty`1<ChartTickMarksType> Type { get; }
    public ReportDoubleProperty Length { get; }
    public ReportDoubleProperty Interval { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalType { get; }
    public ReportDoubleProperty IntervalOffset { get; }
    public ReportEnumProperty`1<ChartIntervalType> IntervalOffsetType { get; }
    internal Chart ChartDef { get; }
    internal ChartTickMarks ChartTickMarksDef { get; }
    public ChartTickMarksInstance Instance { get; }
    internal ChartTickMarks(TickMarks type, Chart chart);
    internal ChartTickMarks(ChartTickMarks chartTickMarksDef, Chart chart);
    public sealed virtual Style get_Style();
    public ReportEnumProperty`1<ChartAutoBool> get_Enabled();
    public ReportEnumProperty`1<ChartTickMarksType> get_Type();
    public ReportDoubleProperty get_Length();
    public ReportDoubleProperty get_Interval();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalType();
    public ReportDoubleProperty get_IntervalOffset();
    public ReportEnumProperty`1<ChartIntervalType> get_IntervalOffsetType();
    internal Chart get_ChartDef();
    internal ChartTickMarks get_ChartTickMarksDef();
    public ChartTickMarksInstance get_Instance();
    private ChartTickMarksType GetTickMarksType(TickMarks tickMarks);
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartTickMarksInstance : BaseInstance {
    private ChartTickMarks m_chartTickMarksDef;
    private StyleInstance m_style;
    private Nullable`1<ChartAutoBool> m_enabled;
    private Nullable`1<ChartTickMarksType> m_type;
    private Nullable`1<double> m_length;
    private Nullable`1<double> m_interval;
    private Nullable`1<ChartIntervalType> m_intervalType;
    private Nullable`1<double> m_intervalOffset;
    private Nullable`1<ChartIntervalType> m_intervalOffsetType;
    public StyleInstance Style { get; }
    public ChartAutoBool Enabled { get; }
    public ChartTickMarksType Type { get; }
    public double Length { get; }
    public double Interval { get; }
    public ChartIntervalType IntervalType { get; }
    public double IntervalOffset { get; }
    public ChartIntervalType IntervalOffsetType { get; }
    internal ChartTickMarksInstance(ChartTickMarks chartTickMarksDef);
    public StyleInstance get_Style();
    public ChartAutoBool get_Enabled();
    public ChartTickMarksType get_Type();
    public double get_Length();
    public double get_Interval();
    public ChartIntervalType get_IntervalType();
    public double get_IntervalOffset();
    public ChartIntervalType get_IntervalOffsetType();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartTickMarksType : Enum {
    public int value__;
    public static ChartTickMarksType None;
    public static ChartTickMarksType Inside;
    public static ChartTickMarksType Outside;
    public static ChartTickMarksType Cross;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartTitle : ChartObjectCollectionItem`1<ChartTitleInstance> {
    private Chart m_chart;
    private ChartTitle m_chartTitleDef;
    private Style m_style;
    private ReportStringProperty m_caption;
    private ChartTitle m_renderChartTitleDef;
    private ChartTitleInstance m_renderChartTitleInstance;
    private ReportEnumProperty`1<ChartTitlePositions> m_position;
    private ActionInfo m_actionInfo;
    private ReportBoolProperty m_hidden;
    private ReportIntProperty m_dockOffset;
    private ReportBoolProperty m_dockOutsideChartArea;
    private ReportStringProperty m_toolTip;
    private ReportEnumProperty`1<TextOrientations> m_textOrientation;
    private ChartElementPosition m_chartElementPosition;
    public string Name { get; }
    public ReportStringProperty Caption { get; }
    public Style Style { get; }
    public ReportEnumProperty`1<ChartTitlePositions> Position { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public ReportBoolProperty Hidden { get; }
    public string DockToChartArea { get; }
    public ReportIntProperty DockOffset { get; }
    public ReportBoolProperty DockOutsideChartArea { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportEnumProperty`1<TextOrientations> TextOrientation { get; }
    public ChartElementPosition ChartElementPosition { get; }
    internal Chart ChartDef { get; }
    internal ChartTitle ChartTitleDef { get; }
    internal ChartTitleInstance RenderChartTitleInstance { get; }
    public ChartTitleInstance Instance { get; }
    internal ChartTitle(ChartTitle chartTitleDef, Chart chart);
    internal ChartTitle(ChartTitle renderChartTitleDef, ChartTitleInstance renderChartTitleInstance, Chart chart);
    public string get_Name();
    public ReportStringProperty get_Caption();
    public sealed virtual Style get_Style();
    public ReportEnumProperty`1<ChartTitlePositions> get_Position();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public ReportBoolProperty get_Hidden();
    public string get_DockToChartArea();
    public ReportIntProperty get_DockOffset();
    public ReportBoolProperty get_DockOutsideChartArea();
    public ReportStringProperty get_ToolTip();
    public ReportEnumProperty`1<TextOrientations> get_TextOrientation();
    public ChartElementPosition get_ChartElementPosition();
    internal Chart get_ChartDef();
    internal ChartTitle get_ChartTitleDef();
    internal ChartTitleInstance get_RenderChartTitleInstance();
    public ChartTitleInstance get_Instance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartTitleCollection : ChartObjectCollectionBase`2<ChartTitle, ChartTitleInstance> {
    private Chart m_chart;
    public int Count { get; }
    internal ChartTitleCollection(Chart chart);
    protected virtual ChartTitle CreateChartObject(int index);
    public virtual int get_Count();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartTitleDockings : Enum {
    public int value__;
    public static ChartTitleDockings Top;
    public static ChartTitleDockings Right;
    public static ChartTitleDockings Bottom;
    public static ChartTitleDockings Left;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ChartTitleInstance : BaseInstance {
    private ChartTitle m_chartTitleDef;
    private StyleInstance m_style;
    private bool m_captionEvaluated;
    private string m_caption;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<int> m_dockOffset;
    private Nullable`1<bool> m_dockOutsideChartArea;
    private string m_toolTip;
    private Nullable`1<ChartTitlePositions> m_position;
    private Nullable`1<TextOrientations> m_textOrientation;
    public string Caption { get; }
    public StyleInstance Style { get; }
    public ChartTitlePositions Position { get; }
    public bool Hidden { get; }
    public int DockOffset { get; }
    public bool DockOutsideChartArea { get; }
    public string ToolTip { get; }
    public TextOrientations TextOrientation { get; }
    internal ChartTitleInstance(ChartTitle chartTitleDef);
    public string get_Caption();
    public StyleInstance get_Style();
    public ChartTitlePositions get_Position();
    public bool get_Hidden();
    public int get_DockOffset();
    public bool get_DockOutsideChartArea();
    public string get_ToolTip();
    public TextOrientations get_TextOrientation();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ChartTitlePositions : Enum {
    public int value__;
    public static ChartTitlePositions TopCenter;
    public static ChartTitlePositions TopLeft;
    public static ChartTitlePositions TopRight;
    public static ChartTitlePositions LeftTop;
    public static ChartTitlePositions LeftCenter;
    public static ChartTitlePositions LeftBottom;
    public static ChartTitlePositions RightTop;
    public static ChartTitlePositions RightCenter;
    public static ChartTitlePositions RightBottom;
    public static ChartTitlePositions BottomRight;
    public static ChartTitlePositions BottomCenter;
    public static ChartTitlePositions BottomLeft;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledGaugeInputValueInstance : object {
    private object m_value;
    public object Value { get; }
    internal CompiledGaugeInputValueInstance(object value);
    public object get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledGaugePointerInstance : object {
    private CompiledGaugeInputValueInstance m_gaugeInputValue;
    public CompiledGaugeInputValueInstance GaugeInputValue { get; internal set; }
    public CompiledGaugeInputValueInstance get_GaugeInputValue();
    internal void set_GaugeInputValue(CompiledGaugeInputValueInstance value);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledParagraphInfo : object {
    private HtmlElementType m_elementType;
    private CompiledParagraphInfo m_parentParagraph;
    private CompiledParagraphInfo m_childParagraph;
    private ReportSize m_leftIndent;
    private ReportSize m_rightIndent;
    private ReportSize m_hangingIndent;
    private ReportSize m_spaceAfter;
    private ReportSize m_marginBottom;
    private bool m_hasSpaceBefore;
    private bool m_marginBottomSet;
    private bool m_leftIndentSet;
    private bool m_rightIndentSet;
    private bool m_hangingIndentSet;
    private bool m_spaceAfterSet;
    private FlattenedPropertyStore m_flatStore;
    private ICompiledParagraphInstance m_lastParagraph;
    internal HtmlElementType ElementType { get; internal set; }
    internal int ListLevel { get; internal set; }
    internal ListStyle ListStyle { get; internal set; }
    internal ReportSize LeftIndent { get; }
    internal ReportSize RightIndent { get; }
    internal ReportSize HangingIndent { get; internal set; }
    internal ReportSize MarginTop { get; }
    internal ReportSize MarginBottom { get; }
    internal ReportSize SpaceBefore { get; }
    internal ReportSize SpaceAfter { get; }
    internal HtmlElementType get_ElementType();
    internal void set_ElementType(HtmlElementType value);
    internal int get_ListLevel();
    internal void set_ListLevel(int value);
    internal ListStyle get_ListStyle();
    internal void set_ListStyle(ListStyle value);
    internal ReportSize get_LeftIndent();
    internal void AddLeftIndent(ReportSize size);
    internal ReportSize get_RightIndent();
    internal void AddRightIndent(ReportSize size);
    internal ReportSize get_HangingIndent();
    internal void set_HangingIndent(ReportSize value);
    internal ReportSize get_MarginTop();
    internal void UpdateMarginTop(ReportSize value);
    internal ReportSize get_MarginBottom();
    internal void AddMarginBottom(ReportSize size);
    internal ReportSize get_SpaceBefore();
    internal void AddSpaceBefore(ReportSize size);
    internal ReportSize get_SpaceAfter();
    internal void AddSpaceAfter(ReportSize size);
    internal CompiledParagraphInfo CreateChildParagraph(HtmlElementType elementType);
    internal CompiledParagraphInfo RemoveAll();
    internal CompiledParagraphInfo RemoveParagraph(HtmlElementType elementType);
    internal void InternalRemoveParagraph(HtmlElementType elementType);
    private void ApplySpaceAfter();
    private void ApplyPendingMargins();
    private void AddToParagraphSpaceAfter(ICompiledParagraphInstance paragraphInstance, ReportSize additionalSpace);
    private bool IsNonEmptySize(ReportSize size);
    private void ResetParagraph();
    internal void PopulateParagraph(ICompiledParagraphInstance paragraphInstance);
    private void StoreLastParagraph(ICompiledParagraphInstance paragraphInstance);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledParagraphInstance : ParagraphInstance {
    private CompiledRichTextInstance m_compiledRichTextInstance;
    private CompiledTextRunInstanceCollection m_compiledTextRunInstances;
    private ReportSize m_leftIndent;
    private ReportSize m_rightIndent;
    private ReportSize m_hangingIndent;
    private Nullable`1<ListStyle> m_listStyle;
    private int m_listLevel;
    private ReportSize m_spaceBefore;
    private ReportSize m_spaceAfter;
    private InternalParagraphInstance NativeParagraphInstance { get; }
    public string UniqueName { get; }
    public StyleInstance Style { get; }
    public ReportSize LeftIndent { get; }
    public ReportSize RightIndent { get; }
    public ReportSize HangingIndent { get; }
    public ListStyle ListStyle { get; }
    public int ListLevel { get; }
    public ReportSize SpaceBefore { get; }
    public ReportSize SpaceAfter { get; }
    public CompiledTextRunInstanceCollection CompiledTextRunInstances { get; internal set; }
    internal TextRun TextRunDefinition { get; }
    public bool IsCompiled { get; }
    private IList`1<ICompiledTextRunInstance> Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.CompiledTextRunInstances { get; private set; }
    private ICompiledStyleInstance Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.Style { get; private set; }
    private ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.LeftIndent { get; private set; }
    private ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.RightIndent { get; private set; }
    private ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.HangingIndent { get; private set; }
    private ListStyle Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.ListStyle { get; private set; }
    private int Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.ListLevel { get; private set; }
    private ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.SpaceBefore { get; private set; }
    private ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.SpaceAfter { get; private set; }
    internal CompiledParagraphInstance(CompiledRichTextInstance compiledRichTextInstance);
    private InternalParagraphInstance get_NativeParagraphInstance();
    public virtual string get_UniqueName();
    public virtual StyleInstance get_Style();
    public virtual ReportSize get_LeftIndent();
    public virtual ReportSize get_RightIndent();
    public virtual ReportSize get_HangingIndent();
    public virtual ListStyle get_ListStyle();
    public virtual int get_ListLevel();
    public virtual ReportSize get_SpaceBefore();
    public virtual ReportSize get_SpaceAfter();
    public CompiledTextRunInstanceCollection get_CompiledTextRunInstances();
    internal void set_CompiledTextRunInstances(CompiledTextRunInstanceCollection value);
    internal TextRun get_TextRunDefinition();
    public virtual bool get_IsCompiled();
    private sealed virtual override IList`1<ICompiledTextRunInstance> Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_CompiledTextRunInstances();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_CompiledTextRunInstances(IList`1<ICompiledTextRunInstance> value);
    private sealed virtual override ICompiledStyleInstance Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_Style();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_Style(ICompiledStyleInstance value);
    private sealed virtual override ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_LeftIndent();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_LeftIndent(ReportSize value);
    private sealed virtual override ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_RightIndent();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_RightIndent(ReportSize value);
    private sealed virtual override ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_HangingIndent();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_HangingIndent(ReportSize value);
    private sealed virtual override ListStyle Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_ListStyle();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_ListStyle(ListStyle value);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_ListLevel();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_ListLevel(int value);
    private sealed virtual override ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_SpaceBefore();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_SpaceBefore(ReportSize value);
    private sealed virtual override ReportSize Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.get_SpaceAfter();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance.set_SpaceAfter(ReportSize value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledParagraphInstanceCollection : ReportElementInstanceCollectionBase`1<CompiledParagraphInstance> {
    private CompiledRichTextInstance m_compiledRichTextInstance;
    private List`1<CompiledParagraphInstance> m_compiledParagraphInstances;
    public CompiledParagraphInstance Item { get; }
    public int Count { get; }
    private ICompiledParagraphInstance System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.Count { get; }
    private bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.IsReadOnly { get; }
    internal CompiledParagraphInstanceCollection(CompiledRichTextInstance compiledRichTextInstance);
    public virtual CompiledParagraphInstance get_Item(int i);
    public virtual int get_Count();
    private sealed virtual override int System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.IndexOf(ICompiledParagraphInstance item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.Insert(int index, ICompiledParagraphInstance item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.RemoveAt(int index);
    private sealed virtual override ICompiledParagraphInstance System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.set_Item(int index, ICompiledParagraphInstance value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.Add(ICompiledParagraphInstance item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.Contains(ICompiledParagraphInstance item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.CopyTo(ICompiledParagraphInstance[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.Remove(ICompiledParagraphInstance item);
    private sealed virtual override IEnumerator`1<ICompiledParagraphInstance> System.Collections.Generic.IEnumerable<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledRichTextInstance : BaseInstance {
    private bool m_multipleParagraphsAllowed;
    private TextRun m_textRunDef;
    private Paragraph m_paragraphDef;
    private CompiledParagraphInstanceCollection m_compiledParagraphCollection;
    private bool m_parseErrorOccured;
    private bool m_parsed;
    private string m_uniqueName;
    private int m_objectCount;
    private IErrorContext m_errorContext;
    public string UniqueName { get; }
    public CompiledParagraphInstanceCollection CompiledParagraphInstances { get; }
    internal TextRun TextRunDefinition { get; }
    internal Paragraph ParagraphDefinition { get; }
    public bool ParseErrorOccured { get; }
    private RSTrace Microsoft.ReportingServices.OnDemandReportRendering.IRichTextLogger.Tracer { get; }
    internal CompiledRichTextInstance(IReportScope reportScope, TextRun textRunDef, Paragraph paragraphDef, bool multipleParagraphsAllowed);
    public string get_UniqueName();
    public CompiledParagraphInstanceCollection get_CompiledParagraphInstances();
    internal TextRun get_TextRunDefinition();
    internal Paragraph get_ParagraphDefinition();
    public bool get_ParseErrorOccured();
    private void Parse();
    private ICompiledTextRunInstance CreateSingleTextRun();
    protected virtual void ResetInstanceCache();
    internal int GenerateID();
    private sealed virtual override IList`1<ICompiledParagraphInstance> Microsoft.ReportingServices.OnDemandReportRendering.IRichTextInstanceCreator.CreateParagraphInstanceCollection();
    private sealed virtual override ICompiledParagraphInstance Microsoft.ReportingServices.OnDemandReportRendering.IRichTextInstanceCreator.CreateParagraphInstance();
    private sealed virtual override ICompiledTextRunInstance Microsoft.ReportingServices.OnDemandReportRendering.IRichTextInstanceCreator.CreateTextRunInstance();
    private sealed virtual override IList`1<ICompiledTextRunInstance> Microsoft.ReportingServices.OnDemandReportRendering.IRichTextInstanceCreator.CreateTextRunInstanceCollection();
    private sealed virtual override ICompiledStyleInstance Microsoft.ReportingServices.OnDemandReportRendering.IRichTextInstanceCreator.CreateStyleInstance(bool isParagraphStyle);
    private sealed virtual override IActionInstance Microsoft.ReportingServices.OnDemandReportRendering.IRichTextInstanceCreator.CreateActionInstance();
    private sealed virtual override RSTrace Microsoft.ReportingServices.OnDemandReportRendering.IRichTextLogger.get_Tracer();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IRichTextLogger.RegisterOutOfRangeSizeWarning(string propertyName, string value, string minVal, string maxVal);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IRichTextLogger.RegisterInvalidValueWarning(string propertyName, string value, int charPosition);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IRichTextLogger.RegisterInvalidColorWarning(string propertyName, string value, int charPosition);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IRichTextLogger.RegisterInvalidSizeWarning(string propertyName, string value, int charPosition);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledRichTextStyleInstance : StyleInstance {
    private List`1<StyleAttributeNames> m_nonSharedStyles;
    public List`1<StyleAttributeNames> StyleAttributes { get; }
    internal CompiledRichTextStyleInstance(IROMStyleDefinitionContainer styleDefinitionContainer, IReportScope reportScope, RenderingContext context);
    public virtual List`1<StyleAttributeNames> get_StyleAttributes();
    private void CompleteStyle();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledStyleInfo : object {
    private HtmlElementType m_elementType;
    private ReportColor m_color;
    private FontStyles m_fontStyle;
    private string m_fontFamily;
    private ReportSize m_fontSize;
    private TextAlignments m_textAlign;
    private TextDecorations m_textDecoration;
    private FontWeights m_fontWeight;
    private bool m_colorSet;
    private bool m_fontStyleSet;
    private bool m_fontFamilySet;
    private bool m_fontSizeSet;
    private bool m_textAlignSet;
    private bool m_textDecorationSet;
    private bool m_fontWeightSet;
    private CompiledStyleInfo m_parentStyle;
    private CompiledStyleInfo m_childStyle;
    internal HtmlElementType ElementType { get; internal set; }
    internal ReportColor Color { get; internal set; }
    internal FontStyles FontStyle { get; internal set; }
    internal string FontFamily { get; internal set; }
    internal ReportSize FontSize { get; internal set; }
    internal TextAlignments TextAlign { get; internal set; }
    internal FontWeights FontWeight { get; internal set; }
    internal TextDecorations TextDecoration { get; internal set; }
    internal HtmlElementType get_ElementType();
    internal void set_ElementType(HtmlElementType value);
    internal ReportColor get_Color();
    internal void set_Color(ReportColor value);
    internal FontStyles get_FontStyle();
    internal void set_FontStyle(FontStyles value);
    internal string get_FontFamily();
    internal void set_FontFamily(string value);
    internal ReportSize get_FontSize();
    internal void set_FontSize(ReportSize value);
    internal TextAlignments get_TextAlign();
    internal void set_TextAlign(TextAlignments value);
    internal FontWeights get_FontWeight();
    internal void set_FontWeight(FontWeights value);
    internal TextDecorations get_TextDecoration();
    internal void set_TextDecoration(TextDecorations value);
    internal CompiledStyleInfo CreateChildStyle(HtmlElementType elementType);
    internal CompiledStyleInfo RemoveStyle(HtmlElementType elementType);
    internal void InternalRemoveStyle(HtmlElementType elementType);
    private void ResetStyle();
    internal void PopulateStyleInstance(ICompiledStyleInstance styleInstance, bool isParagraphStyle);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledTextRunInstance : TextRunInstance {
    private CompiledRichTextInstance m_compiledRichTextInstance;
    private MarkupType m_markupType;
    private string m_toolTip;
    private string m_label;
    private string m_value;
    private ActionInstance m_actionInstance;
    public string UniqueName { get; }
    public StyleInstance Style { get; }
    public string Value { get; }
    public object OriginalValue { get; }
    public string ToolTip { get; }
    public MarkupType MarkupType { get; }
    public ActionInstance ActionInstance { get; }
    public TypeCode TypeCode { get; }
    public bool IsCompiled { get; }
    public bool ProcessedWithError { get; }
    private ICompiledStyleInstance Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.Style { get; private set; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.Label { get; private set; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.Value { get; private set; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.ToolTip { get; private set; }
    private MarkupType Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.MarkupType { get; private set; }
    private IActionInstance Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.ActionInstance { get; private set; }
    internal CompiledTextRunInstance(CompiledRichTextInstance compiledRichTextInstance);
    public virtual string get_UniqueName();
    public virtual StyleInstance get_Style();
    public virtual string get_Value();
    public virtual object get_OriginalValue();
    public virtual string get_ToolTip();
    public virtual MarkupType get_MarkupType();
    public ActionInstance get_ActionInstance();
    public virtual TypeCode get_TypeCode();
    public virtual bool get_IsCompiled();
    public virtual bool get_ProcessedWithError();
    private sealed virtual override ICompiledStyleInstance Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.get_Style();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.set_Style(ICompiledStyleInstance value);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.get_Label();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.set_Label(string value);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.get_Value();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.set_Value(string value);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.get_ToolTip();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.set_ToolTip(string value);
    private sealed virtual override MarkupType Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.get_MarkupType();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.set_MarkupType(MarkupType value);
    private sealed virtual override IActionInstance Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.get_ActionInstance();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance.set_ActionInstance(IActionInstance value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.CompiledTextRunInstanceCollection : ReportElementInstanceCollectionBase`1<CompiledTextRunInstance> {
    private CompiledRichTextInstance m_compiledRichTextInstance;
    private List`1<CompiledTextRunInstance> m_compiledTextRunInstances;
    public CompiledTextRunInstance Item { get; }
    public int Count { get; }
    private ICompiledTextRunInstance System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.Count { get; }
    private bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.IsReadOnly { get; }
    internal CompiledTextRunInstanceCollection(CompiledRichTextInstance compiledRichTextInstance);
    public virtual CompiledTextRunInstance get_Item(int i);
    public virtual int get_Count();
    private sealed virtual override int System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.IndexOf(ICompiledTextRunInstance item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.Insert(int index, ICompiledTextRunInstance item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.RemoveAt(int index);
    private sealed virtual override ICompiledTextRunInstance System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.set_Item(int index, ICompiledTextRunInstance value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.Add(ICompiledTextRunInstance item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.Contains(ICompiledTextRunInstance item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.CopyTo(ICompiledTextRunInstance[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.Remove(ICompiledTextRunInstance item);
    private sealed virtual override IEnumerator`1<ICompiledTextRunInstance> System.Collections.Generic.IEnumerable<Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomData : object {
    private CustomReportItem m_owner;
    private DataHierarchy m_columns;
    private DataHierarchy m_rows;
    private DataRowCollection m_rowCollection;
    private bool m_isNewContext;
    public string DataSetName { get; }
    public DataHierarchy DataColumnHierarchy { get; }
    public DataHierarchy DataRowHierarchy { get; }
    internal bool HasDataRowCollection { get; }
    public DataRowCollection RowCollection { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal CustomData(CustomReportItem owner);
    public string get_DataSetName();
    public DataHierarchy get_DataColumnHierarchy();
    public DataHierarchy get_DataRowHierarchy();
    internal bool get_HasDataRowCollection();
    public DataRowCollection get_RowCollection();
    internal void SetNewContext();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomLabel : GaugePanelObjectCollectionItem {
    private GaugePanel m_gaugePanel;
    private CustomLabel m_defObject;
    private Style m_style;
    private ReportStringProperty m_text;
    private ReportBoolProperty m_allowUpsideDown;
    private ReportDoubleProperty m_distanceFromScale;
    private ReportDoubleProperty m_fontAngle;
    private ReportEnumProperty`1<GaugeLabelPlacements> m_placement;
    private ReportBoolProperty m_rotateLabel;
    private TickMarkStyle m_tickMarkStyle;
    private ReportDoubleProperty m_value;
    private ReportBoolProperty m_hidden;
    private ReportBoolProperty m_useFontPercent;
    public Style Style { get; }
    public string Name { get; }
    public ReportStringProperty Text { get; }
    public ReportBoolProperty AllowUpsideDown { get; }
    public ReportDoubleProperty DistanceFromScale { get; }
    public ReportDoubleProperty FontAngle { get; }
    public ReportEnumProperty`1<GaugeLabelPlacements> Placement { get; }
    public ReportBoolProperty RotateLabel { get; }
    public TickMarkStyle TickMarkStyle { get; }
    public ReportDoubleProperty Value { get; }
    public ReportBoolProperty Hidden { get; }
    public ReportBoolProperty UseFontPercent { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal CustomLabel CustomLabelDef { get; }
    public CustomLabelInstance Instance { get; }
    internal CustomLabel(CustomLabel defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public string get_Name();
    public ReportStringProperty get_Text();
    public ReportBoolProperty get_AllowUpsideDown();
    public ReportDoubleProperty get_DistanceFromScale();
    public ReportDoubleProperty get_FontAngle();
    public ReportEnumProperty`1<GaugeLabelPlacements> get_Placement();
    public ReportBoolProperty get_RotateLabel();
    public TickMarkStyle get_TickMarkStyle();
    public ReportDoubleProperty get_Value();
    public ReportBoolProperty get_Hidden();
    public ReportBoolProperty get_UseFontPercent();
    internal GaugePanel get_GaugePanelDef();
    internal CustomLabel get_CustomLabelDef();
    public CustomLabelInstance get_Instance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomLabelCollection : GaugePanelObjectCollectionBase`1<CustomLabel> {
    private GaugePanel m_gaugePanel;
    private GaugeScale m_gaugeScale;
    public CustomLabel Item { get; }
    public int Count { get; }
    internal CustomLabelCollection(GaugeScale gaugeScale, GaugePanel gaugePanel);
    protected virtual CustomLabel CreateGaugePanelObject(int index);
    public CustomLabel get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomLabelInstance : BaseInstance {
    private CustomLabel m_defObject;
    private StyleInstance m_style;
    private string m_text;
    private Nullable`1<bool> m_allowUpsideDown;
    private Nullable`1<double> m_distanceFromScale;
    private Nullable`1<double> m_fontAngle;
    private Nullable`1<GaugeLabelPlacements> m_placement;
    private Nullable`1<bool> m_rotateLabel;
    private Nullable`1<double> m_value;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<bool> m_useFontPercent;
    public StyleInstance Style { get; }
    public string Text { get; }
    public bool AllowUpsideDown { get; }
    public double DistanceFromScale { get; }
    public double FontAngle { get; }
    public GaugeLabelPlacements Placement { get; }
    public bool RotateLabel { get; }
    public double Value { get; }
    public bool Hidden { get; }
    public bool UseFontPercent { get; }
    internal CustomLabelInstance(CustomLabel defObject);
    public StyleInstance get_Style();
    public string get_Text();
    public bool get_AllowUpsideDown();
    public double get_DistanceFromScale();
    public double get_FontAngle();
    public GaugeLabelPlacements get_Placement();
    public bool get_RotateLabel();
    public double get_Value();
    public bool get_Hidden();
    public bool get_UseFontPercent();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomProperty : object {
    private ReportStringProperty m_name;
    private ReportVariantProperty m_value;
    private CustomPropertyInstance m_instance;
    private RenderingContext m_renderingContext;
    private ReportElement m_reportElementOwner;
    public ReportStringProperty Name { get; }
    public ReportVariantProperty Value { get; }
    internal ReportElement ReportElementOwner { get; }
    public CustomPropertyInstance Instance { get; }
    internal CustomProperty(ReportElement reportElementOwner, RenderingContext renderingContext, ExpressionInfo nameExpr, ExpressionInfo valueExpr, string name, object value);
    internal CustomProperty(RenderingContext renderingContext, ExpressionInfo nameExpr, ExpressionInfo valueExpr, string name, object value);
    public ReportStringProperty get_Name();
    public ReportVariantProperty get_Value();
    internal ReportElement get_ReportElementOwner();
    public CustomPropertyInstance get_Instance();
    private void Init(ExpressionInfo nameExpr, ExpressionInfo valueExpr, string name, object value);
    internal void Update(string name, object value);
    internal void ConstructCustomPropertyDefinition(DataValue dataValueDef);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomPropertyCollection : ReportElementCollectionBase`1<CustomProperty> {
    private List`1<CustomProperty> m_list;
    private Dictionary`2<string, CustomProperty> m_lookupTable;
    private ReportElement m_reportElementOwner;
    public CustomProperty Item { get; }
    public CustomProperty Item { get; }
    public int Count { get; }
    internal CustomPropertyCollection(IReportScopeInstance romInstance, RenderingContext renderingContext, ReportElement reportElementOwner, ICustomPropertiesHolder customPropertiesHolder, ObjectType objectType, string objectName);
    internal CustomPropertyCollection(RenderingContext renderingContext, CustomPropertyCollection collection);
    public CustomProperty get_Item(string name);
    public virtual CustomProperty get_Item(int index);
    public virtual int get_Count();
    internal CustomProperty Add(RenderingContext renderingContext, ExpressionInfo nameExpr, ExpressionInfo valueExpr);
    internal void UpdateCustomProperties(CustomPropertyCollection collection);
    internal void UpdateCustomProperties(IReportScopeInstance romInstance, ICustomPropertiesHolder customPropertiesHolder, OnDemandProcessingContext context, ObjectType objectType, string objectName);
    private void AddPropToLookupTable(string name, CustomProperty property);
    internal void ConstructCustomPropertyDefinitions(DataValueList dataValueDefs);
    internal void GetDynamicValues(List`1& customPropertyNames, List`1& customPropertyValues);
    internal void SetDynamicValues(List`1<string> customPropertyNames, List`1<object> customPropertyValues);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomPropertyInstance : object {
    private CustomProperty m_customPropertyDef;
    private string m_name;
    private object m_value;
    public string Name { get; public set; }
    public object Value { get; public set; }
    internal CustomPropertyInstance(CustomProperty customPropertyDef, string name, object value);
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
    internal void Update(string name, object value);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomReportItem : ReportItem {
    private static ReportChunkTypes ChunkType;
    private int m_indexIntoParentCollectionDef;
    private int m_memberCellDefinitionIndex;
    private CustomData m_data;
    private ReportItem m_altReportItem;
    private ReportItem m_generatedReportItem;
    private ReportItem m_exposeAs;
    public string Type { get; }
    internal bool HasCustomData { get; }
    public CustomData CustomData { get; }
    public ReportItem AltReportItem { get; }
    public ReportItem GeneratedReportItem { get; }
    internal CustomReportItem RenderCri { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    internal IReportScope ReportScope { get; }
    private IReportScope ParentScope { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.HasDataCells { get; }
    private IDataRegionRowCollection Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.RowCollection { get; }
    internal CustomReportItem CriDef { get; }
    internal CustomReportItem(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, CustomReportItem reportItemDef, RenderingContext renderingContext);
    internal CustomReportItem(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, CustomReportItem renderCri, RenderingContext renderingContext);
    internal bool Initialize(RenderingContext renderingContext);
    internal virtual ReportItem ExposeAs(RenderingContext renderingContext);
    private bool LoadGeneratedReportItemDefinition();
    private static string CreateChunkName();
    private void GenerateReportItemDefinition();
    internal void EvaluateGeneratedReportItemInstance();
    private string GetGeneratedDefinitionChunkKey();
    private string GetGeneratedInstanceChunkKey();
    private bool LoadGeneratedReportItemInstance();
    public void CreateCriImageDefinition();
    public string get_Type();
    internal bool get_HasCustomData();
    public CustomData get_CustomData();
    public ReportItem get_AltReportItem();
    public ReportItem get_GeneratedReportItem();
    internal CustomReportItem get_RenderCri();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    internal virtual IReportScope get_ReportScope();
    private IReportScope get_ParentScope();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.get_HasDataCells();
    private sealed virtual override IDataRegionRowCollection Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.get_RowCollection();
    internal CustomReportItem get_CriDef();
    internal virtual ReportItemInstance GetOrCreateInstance();
    internal virtual void SetNewContextChildren();
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
    internal int GetCurrentMemberCellDefinitionIndex();
    internal int GetAndIncrementMemberCellDefinitionIndex();
    internal void ResetMemberCellDefinitionIndex(int startIndex);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.CustomReportItemInstance : ReportItemInstance {
    public bool NoRows { get; }
    internal CustomReportItemInstance(CustomReportItem reportItemDef);
    public bool get_NoRows();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataCell : object {
    protected int m_rowIndex;
    protected int m_columnIndex;
    protected CustomReportItem m_owner;
    protected DataValueCollection m_dataValues;
    protected DataCellInstance m_instance;
    public DataValueCollection DataValues { get; }
    internal DataCell DataCellDef { get; }
    internal DataCell RenderItem { get; }
    internal CustomReportItem CriDef { get; }
    public DataCellInstance Instance { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal DataCell(CustomReportItem owner, int rowIndex, int colIndex);
    public abstract virtual DataValueCollection get_DataValues();
    internal abstract virtual DataCell get_DataCellDef();
    internal abstract virtual DataCell get_RenderItem();
    internal CustomReportItem get_CriDef();
    public DataCellInstance get_Instance();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    internal virtual IRIFReportScope get_RIFReportScope();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionCell.SetNewContext();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.DataCellInstance : BaseInstance {
    private DataCell m_dataCellDef;
    private bool m_isNewContext;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal DataCellInstance(DataCell dataCellDef);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    internal virtual void SetNewContext();
    protected virtual void ResetInstanceCache();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataDynamicMemberInstance : DataMemberInstance {
    protected int m_currentContext;
    protected bool m_isNewContext;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal DataDynamicMemberInstance(CustomReportItem owner, DataMember memberDef);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.ResetContext();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.MoveNext();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.GetInstanceIndex();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.SetInstanceIndex(int index);
    public virtual void ResetContext();
    public abstract virtual bool MoveNext();
    public int GetInstanceIndex();
    public abstract virtual bool SetInstanceIndex(int index);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.DataElementOutputTypes : Enum {
    public int value__;
    public static DataElementOutputTypes Output;
    public static DataElementOutputTypes NoOutput;
    public static DataElementOutputTypes ContentsOnly;
    public static DataElementOutputTypes Auto;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.DataHierarchy : MemberHierarchy`1<DataMember> {
    private CustomReportItem OwnerCri { get; }
    public DataMemberCollection MemberCollection { get; }
    internal DataHierarchy(CustomReportItem owner, bool isColumn);
    private CustomReportItem get_OwnerCri();
    public DataMemberCollection get_MemberCollection();
    internal virtual void ResetContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataMember : DataRegionMember {
    protected DataMemberCollection m_children;
    protected DataMemberInstance m_instance;
    public DataMember Parent { get; }
    public DataMemberCollection Children { get; }
    public bool IsColumn { get; }
    public int RowSpan { get; }
    public int ColSpan { get; }
    internal DataMember MemberDefinition { get; }
    internal CustomReportItem OwnerCri { get; }
    public DataMemberInstance Instance { get; }
    internal IDataRegionMemberCollection SubMembers { get; }
    internal DataMember(IDefinitionPath parentDefinitionPath, CustomReportItem owner, DataMember parent, int parentCollectionIndex);
    public DataMember get_Parent();
    public virtual DataMemberCollection get_Children();
    public abstract virtual bool get_IsColumn();
    public abstract virtual int get_RowSpan();
    public abstract virtual int get_ColSpan();
    internal abstract virtual DataMember get_MemberDefinition();
    internal CustomReportItem get_OwnerCri();
    public abstract virtual DataMemberInstance get_Instance();
    internal virtual IDataRegionMemberCollection get_SubMembers();
    internal virtual bool GetIsColumn();
    internal virtual void SetNewContext(bool fromMoveNext);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataMemberCollection : DataRegionMemberCollection`1<DataMember> {
    public string DefinitionPath { get; }
    internal CustomReportItem OwnerCri { get; }
    internal DataMemberCollection(IDefinitionPath parentDefinitionPath, CustomReportItem owner);
    public virtual string get_DefinitionPath();
    internal CustomReportItem get_OwnerCri();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.DataMemberInstance : BaseInstance {
    protected CustomReportItem m_owner;
    protected DataMember m_memberDef;
    internal DataMemberInstance(CustomReportItem owner, DataMember memberDef);
    protected virtual void ResetInstanceCache();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataRegion : ReportItem {
    private ReportStringProperty m_noRowsMessage;
    private PageBreak m_pageBreak;
    internal Type m_snapshotDataRegionType;
    public PageBreak PageBreak { get; }
    public ReportStringProperty NoRowsMessage { get; }
    public string DataSetName { get; }
    public Visibility Visibility { get; }
    private PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.PageBreakLocation { get; }
    internal Type DataRegionType { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    internal IReportScope ReportScope { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.HasDataCells { get; }
    internal bool HasDataCells { get; }
    private IDataRegionRowCollection Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.RowCollection { get; }
    internal IDataRegionRowCollection RowCollection { get; }
    internal DataRegion(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, ReportItem reportItemDef, RenderingContext renderingContext);
    internal DataRegion(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, ReportItem renderDataRegion, RenderingContext renderingContext);
    public PageBreak get_PageBreak();
    public ReportStringProperty get_NoRowsMessage();
    public string get_DataSetName();
    public virtual Visibility get_Visibility();
    private sealed virtual override PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.get_PageBreakLocation();
    internal Type get_DataRegionType();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    internal virtual IReportScope get_ReportScope();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.get_HasDataCells();
    internal abstract virtual bool get_HasDataCells();
    private sealed virtual override IDataRegionRowCollection Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion.get_RowCollection();
    internal abstract virtual IDataRegionRowCollection get_RowCollection();
    public Int32[] GetRepeatSiblings();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataRegionInstance : ReportItemInstance {
    private string m_noRowsMessage;
    private bool m_isNewContext;
    private Nullable`1<bool> m_noRows;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    public string NoRowsMessage { get; }
    public bool NoRows { get; }
    public VisibilityInstance Visibility { get; }
    internal DataRegionInstance(DataRegion reportItemDef);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    public string get_NoRowsMessage();
    public bool get_NoRows();
    public virtual VisibilityInstance get_Visibility();
    internal virtual void SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataRegionMember : object {
    protected IDefinitionPath m_parentDefinitionPath;
    protected int m_parentCollectionIndex;
    protected string m_definitionPath;
    protected ReportItem m_owner;
    protected Group m_group;
    protected DataRegionMember m_parent;
    protected CustomPropertyCollection m_customPropertyCollection;
    internal string UniqueName { get; }
    public string ID { get; }
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    public Group Group { get; }
    public bool IsStatic { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public int MemberCellIndex { get; }
    internal IReportScope ReportScope { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal IReportScopeInstance ReportScopeInstance { get; }
    internal IDataRegion OwnerDataRegion { get; }
    internal IDataRegionMemberCollection SubMembers { get; }
    internal DataRegionMember(IDefinitionPath parentDefinitionPath, ReportItem owner, DataRegionMember parent, int parentCollectionIndex);
    internal abstract virtual string get_UniqueName();
    public abstract virtual string get_ID();
    public sealed virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    public Group get_Group();
    public abstract virtual bool get_IsStatic();
    public virtual CustomPropertyCollection get_CustomProperties();
    public abstract virtual int get_MemberCellIndex();
    internal virtual IReportScope get_ReportScope();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal virtual IReportScopeInstance get_ReportScopeInstance();
    internal IDataRegion get_OwnerDataRegion();
    internal abstract virtual IDataRegionMemberCollection get_SubMembers();
    internal abstract virtual bool GetIsColumn();
    internal virtual void ResetContext();
    internal virtual void SetNewContext(bool fromMoveNext);
    private void SetCellsNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataRegionMemberCollection`1 : ReportElementCollectionBase`1<T> {
    protected DataRegionMember[] m_children;
    protected IDefinitionPath m_parentDefinitionPath;
    protected ReportItem m_owner;
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    internal DataRegionMemberCollection`1(IDefinitionPath parentDefinitionPath, ReportItem owner);
    public abstract virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionMemberCollection.SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataRow : ReportElementCollectionBase`1<DataCell> {
    protected CustomReportItem m_owner;
    protected int m_rowIndex;
    protected DataCell[] m_cachedDataCells;
    internal DataRow(CustomReportItem owner, int rowIndex);
    private sealed virtual override IDataRegionCell Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRow.GetIfExists(int cellIndex);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataRowCollection : ReportElementCollectionBase`1<DataRow> {
    protected CustomReportItem m_owner;
    protected DataRow[] m_cachedDataRows;
    internal DataRowCollection(CustomReportItem owner);
    private sealed virtual override IDataRegionRow Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRowCollection.GetIfExists(int rowIndex);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.DataValue : object {
    private bool m_isChartValue;
    private DataValue m_dataValue;
    private ReportStringProperty m_name;
    private ReportVariantProperty m_value;
    private DataValueInstance m_instance;
    private IInstancePath m_instancePath;
    private RenderingContext m_renderingContext;
    private string m_objectName;
    public ReportStringProperty Name { get; }
    public ReportVariantProperty Value { get; }
    internal DataValue DataValueDef { get; }
    internal RenderingContext RenderingContext { get; }
    internal bool IsChart { get; }
    internal IInstancePath InstancePath { get; }
    internal string ObjectName { get; }
    public DataValueInstance Instance { get; }
    internal DataValue(RenderingContext renderingContext, object chartDataValue);
    internal DataValue(RenderingContext renderingContext, DataValue dataValue);
    internal DataValue(IReportScope reportScope, RenderingContext renderingContext, DataValue dataValue, bool isChart, IInstancePath instancePath, string objectName);
    public ReportStringProperty get_Name();
    public ReportVariantProperty get_Value();
    internal DataValue get_DataValueDef();
    internal RenderingContext get_RenderingContext();
    internal bool get_IsChart();
    internal IInstancePath get_InstancePath();
    internal string get_ObjectName();
    public DataValueInstance get_Instance();
    internal void UpdateChartDataValue(object dataValue);
    internal void UpdateDataCellValue(DataValue dataValue);
    internal void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.DataValueCollection : ReportElementCollectionBase`1<DataValue> {
    private bool m_isChartValues;
    private DataValue[] m_cachedDataValues;
    private IList`1<DataValue> m_dataValues;
    private IReportScope m_reportScope;
    private Cell m_cell;
    private RenderingContext m_renderingContext;
    private string m_objectName;
    public DataValue Item { get; }
    public DataValue Item { get; }
    public int Count { get; }
    internal DataValueCollection(RenderingContext renderingContext, ChartDataPoint dataPoint);
    internal DataValueCollection(RenderingContext renderingContext, DataCell dataCell);
    internal DataValueCollection(Cell cell, IReportScope reportScope, RenderingContext renderingContext, IList`1<DataValue> dataValues, string objectName, bool isChart);
    public DataValue get_Item(string name);
    public virtual DataValue get_Item(int index);
    public virtual int get_Count();
    internal void UpdateChartDataValues(Object[] datavalues);
    internal void UpdateDataCellValues(DataCell dataCell);
    internal void SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DataValueInstance : BaseInstance {
    public string Name { get; }
    public object Value { get; }
    internal DataValueInstance(IReportScope repotScope);
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
}
internal static class Microsoft.ReportingServices.OnDemandReportRendering.DefinitionPathConstants : object {
    public static string TablixCorner;
    public static string TablixRowHierarchy;
    public static string TablixColHierarchy;
    public static string TablixBody;
    public static string TablixHeader;
    public static string TablixSubMembers;
    public static string Report;
    public static string ReportBody;
    public static string SubReportBody;
    public static string Page;
    public static string PageHeader;
    public static string PageFooter;
    public static string TextRun;
    public static string Paragraph;
    public static char DefinitionPathDelimiter;
    internal static string GetCollectionDefinitionPath(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef);
    internal static string GetTablixHierarchyDefinitionPath(IDefinitionPath parentDefinitionPath, bool isColumn);
    internal static string GetTablixCellDefinitionPath(IDefinitionPath parentDefinitionPath, int rowIndex, int colIndex, bool isTablixBodyCell);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.Directions : Enum {
    public int value__;
    public static Directions Default;
    public static Directions LTR;
    public static Directions RTL;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DocumentMap : object {
    protected bool m_isClosed;
    internal bool IsClosed { get; }
    public DocumentMapNode Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public abstract virtual void Close();
    internal bool get_IsClosed();
    public abstract virtual DocumentMapNode get_Current();
    public abstract virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public abstract virtual bool MoveNext();
    public abstract virtual void Reset();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.DocumentMapNode : OnDemandDocumentMapNode {
    internal DocumentMapNode(string aLabel, string aId, int aLevel);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.DynamicImageInstance : DataRegionInstance {
    protected float m_dpiX;
    protected float m_dpiY;
    protected int WidthInPixels { get; }
    protected int HeightInPixels { get; }
    internal DynamicImageInstance(DataRegion reportItemDef);
    public virtual void SetDpi(int xDpi, int yDpi);
    public Stream GetImage();
    public Stream GetImage(ImageType type);
    public Stream GetImage(ActionInfoWithDynamicImageMapCollection& actionImageMaps);
    public virtual Stream GetImage(ImageType type, ActionInfoWithDynamicImageMapCollection& actionImageMaps);
    protected virtual Stream GetImage(ImageType type, Boolean& hasImageMap);
    protected MemoryStream CreateExceptionImage(Exception exception);
    protected abstract virtual void GetImage(ImageType type, ActionInfoWithDynamicImageMapCollection& actionImageMaps, Stream& image);
    protected virtual int get_WidthInPixels();
    protected virtual int get_HeightInPixels();
    private Exception GetInnerMostException(Exception exception);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.EnumTranslator : object {
    internal static ChartBreakLineType TranslateChartBreakLineType(string val, IErrorContext errorContext);
    internal static ChartIntervalType TranslateChartIntervalType(string val, IErrorContext errorContext);
    internal static ChartAutoBool TranslateChartAutoBool(string val, IErrorContext errorContext);
    internal static ChartAxisLabelRotation TranslateChartAxisLabelRotation(string val, IErrorContext errorContext);
    internal static ChartAxisLocation TranslateChartAxisLocation(string val, IErrorContext errorContext);
    internal static ChartAxisArrow TranslateChartAxisArrow(string val, IErrorContext errorContext);
    internal static ChartTickMarksType TranslateChartTickMarksType(string val, IErrorContext errorContext);
    internal static ChartColumnType TranslateChartColumnType(string val, IErrorContext errorContext);
    internal static ChartCellType TranslateChartCellType(string val, IErrorContext errorContext);
    internal static ChartCellAlignment TranslateChartCellAlignment(string val, IErrorContext errorContext);
    internal static ChartAllowOutsideChartArea TranslateChartAllowOutsideChartArea(string val, IErrorContext errorContext);
    internal static ChartCalloutLineAnchor TranslateChartCalloutLineAnchor(string val, IErrorContext errorContext);
    internal static ChartCalloutLineStyle TranslateChartCalloutLineStyle(string val, IErrorContext errorContext);
    internal static ChartCalloutStyle TranslateChartCalloutStyle(string val, IErrorContext errorContext);
    internal static ChartSeriesFormula TranslateChartSeriesFormula(string val);
    internal static ChartTitlePositions TranslateChartTitlePosition(string val, IErrorContext errorContext);
    internal static ChartTitleDockings TranslateChartTitleDocking(string val, IErrorContext errorContext);
    internal static ChartAxisTitlePositions TranslateChartAxisTitlePosition(string val, IErrorContext errorContext);
    internal static ChartSeparators TranslateChartSeparator(string val, IErrorContext errorContext);
    internal static ChartLegendLayouts TranslateChartLegendLayout(string val, IErrorContext errorContext);
    internal static ChartLegendPositions TranslateChartLegendPositions(string val, IErrorContext errorContext);
    internal static ChartAreaAlignOrientations TranslateChartAreaAlignOrientation(string val, IErrorContext errorContext);
    internal static ChartThreeDProjectionModes TranslateChartThreeDProjectionMode(string val, IErrorContext errorContext);
    internal static ChartThreeDShadingTypes TranslateChartThreeDShading(string val, IErrorContext errorContext);
    internal static ChartBorderSkinType TranslateChartBorderSkinType(string val, IErrorContext errorContext);
    internal static ChartSeriesType TranslateChartSeriesType(string val, IErrorContext errorContext);
    internal static ChartSeriesSubtype TranslateChartSeriesSubtype(string val, IErrorContext errorContext);
    internal static ChartDataLabelPositions TranslateChartDataLabelPosition(string val, IErrorContext errorContext);
    internal static ChartMarkerTypes TranslateChartMarkerType(string val, IErrorContext errorContext);
    internal static ChartPalette TranslateChartPalette(string val, IErrorContext errorContext);
    internal static PaletteHatchBehavior TranslatePaletteHatchBehavior(string val, IErrorContext errorContext);
    internal static SourceType TranslateImageSourceType(string val, IErrorContext errorContext);
    internal static TextOrientations TranslateTextOrientations(string val, IErrorContext errorContext);
    internal static GaugeFrameShapes TranslateGaugeFrameShapes(string val, IErrorContext errorContext);
    internal static GaugeFrameStyles TranslateGaugeFrameStyles(string val, IErrorContext errorContext);
    internal static GaugeAntiAliasings TranslateGaugeAntiAliasings(string val, IErrorContext errorContext);
    internal static GaugeGlassEffects TranslateGaugeGlassEffects(string val, IErrorContext errorContext);
    internal static GaugeBarStarts TranslateGaugeBarStarts(string val, IErrorContext errorContext);
    internal static GaugeCapStyles TranslateGaugeCapStyles(string val, IErrorContext errorContext);
    internal static GaugeInputValueFormulas TranslateGaugeInputValueFormulas(string val, IErrorContext errorContext);
    internal static GaugeLabelPlacements TranslateGaugeLabelPlacements(string val, IErrorContext errorContext);
    internal static GaugeMarkerStyles TranslateGaugeMarkerStyles(string val, IErrorContext errorContext);
    internal static GaugeOrientations TranslateGaugeOrientations(string val, IErrorContext errorContext);
    internal static GaugePointerPlacements TranslateGaugePointerPlacements(string val, IErrorContext errorContext);
    internal static GaugeThermometerStyles TranslateGaugeThermometerStyles(string val, IErrorContext errorContext);
    internal static GaugeTickMarkShapes TranslateGaugeTickMarkShapes(string val, IErrorContext errorContext);
    internal static LinearPointerTypes TranslateLinearPointerTypes(string val, IErrorContext errorContext);
    internal static RadialPointerNeedleStyles TranslateRadialPointerNeedleStyles(string val, IErrorContext errorContext);
    internal static RadialPointerTypes TranslateRadialPointerTypes(string val, IErrorContext errorContext);
    internal static ScaleRangePlacements TranslateScaleRangePlacements(string val, IErrorContext errorContext);
    internal static BackgroundGradientTypes TranslateBackgroundGradientTypes(string val, IErrorContext errorContext);
    internal static TextAntiAliasingQualities TranslateTextAntiAliasingQualities(string val, IErrorContext errorContext);
    internal static GaugeResizeModes TranslateGaugeResizeModes(string val, IErrorContext errorContext);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.FontStyles : Enum {
    public int value__;
    public static FontStyles Default;
    public static FontStyles Normal;
    public static FontStyles Italic;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.FontWeights : Enum {
    public int value__;
    public static FontWeights Default;
    public static FontWeights Normal;
    public static FontWeights Thin;
    public static FontWeights ExtraLight;
    public static FontWeights Light;
    public static FontWeights Medium;
    public static FontWeights SemiBold;
    public static FontWeights Bold;
    public static FontWeights ExtraBold;
    public static FontWeights Heavy;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.FrameBackground : object {
    private GaugePanel m_gaugePanel;
    private FrameBackground m_defObject;
    private FrameBackgroundInstance m_instance;
    private Style m_style;
    public Style Style { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal FrameBackground FrameBackgroundDef { get; }
    public FrameBackgroundInstance Instance { get; }
    internal FrameBackground(FrameBackground defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    internal GaugePanel get_GaugePanelDef();
    internal FrameBackground get_FrameBackgroundDef();
    public FrameBackgroundInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.FrameBackgroundInstance : BaseInstance {
    private FrameBackground m_defObject;
    private StyleInstance m_style;
    public StyleInstance Style { get; }
    internal FrameBackgroundInstance(FrameBackground defObject);
    public StyleInstance get_Style();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.FrameImage : BaseGaugeImage {
    private ReportColorProperty m_hueColor;
    private ReportDoubleProperty m_transparency;
    private ReportBoolProperty m_clipImage;
    public ReportColorProperty HueColor { get; }
    public ReportDoubleProperty Transparency { get; }
    public ReportBoolProperty ClipImage { get; }
    internal FrameImage FrameImageDef { get; }
    public FrameImageInstance Instance { get; }
    internal FrameImage(FrameImage defObject, GaugePanel gaugePanel);
    public ReportColorProperty get_HueColor();
    public ReportDoubleProperty get_Transparency();
    public ReportBoolProperty get_ClipImage();
    internal FrameImage get_FrameImageDef();
    public FrameImageInstance get_Instance();
    internal virtual BaseGaugeImageInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.FrameImageInstance : BaseGaugeImageInstance {
    private ReportColor m_hueColor;
    private Nullable`1<double> m_transparency;
    private Nullable`1<bool> m_clipImage;
    public ReportColor HueColor { get; }
    public double Transparency { get; }
    public bool ClipImage { get; }
    internal FrameImageInstance(FrameImage defObject);
    public ReportColor get_HueColor();
    public double get_Transparency();
    public bool get_ClipImage();
    protected virtual void ResetInstanceCache();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.Gauge : GaugePanelItem {
    private BackFrame m_backFrame;
    private ReportBoolProperty m_clipContent;
    private TopImage m_topImage;
    private ReportDoubleProperty m_aspectRatio;
    public BackFrame BackFrame { get; }
    public ReportBoolProperty ClipContent { get; }
    public TopImage TopImage { get; }
    public ReportDoubleProperty AspectRatio { get; }
    internal Gauge GaugeDef { get; }
    public GaugeInstance Instance { get; }
    internal Gauge(Gauge defObject, GaugePanel gaugePanel);
    public BackFrame get_BackFrame();
    public ReportBoolProperty get_ClipContent();
    public TopImage get_TopImage();
    public ReportDoubleProperty get_AspectRatio();
    internal Gauge get_GaugeDef();
    public GaugeInstance get_Instance();
    internal virtual void SetNewContext();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeAntiAliasings : Enum {
    public int value__;
    public static GaugeAntiAliasings All;
    public static GaugeAntiAliasings None;
    public static GaugeAntiAliasings Text;
    public static GaugeAntiAliasings Graphics;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeBarStarts : Enum {
    public int value__;
    public static GaugeBarStarts ScaleStart;
    public static GaugeBarStarts Zero;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeCapStyles : Enum {
    public int value__;
    public static GaugeCapStyles RoundedDark;
    public static GaugeCapStyles Rounded;
    public static GaugeCapStyles RoundedLight;
    public static GaugeCapStyles RoundedWithAdditionalTop;
    public static GaugeCapStyles RoundedWithWideIndentation;
    public static GaugeCapStyles FlattenedWithIndentation;
    public static GaugeCapStyles FlattenedWithWideIndentation;
    public static GaugeCapStyles RoundedGlossyWithIndentation;
    public static GaugeCapStyles RoundedWithIndentation;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeCell : object {
    private GaugePanel m_owner;
    private GaugeCell m_gaugeCellDef;
    private GaugeCellInstance m_instance;
    private List`1<GaugeInputValue> m_gaugeInputValues;
    internal GaugeCell GaugeCellDef { get; }
    internal GaugePanel GaugePanelDef { get; }
    public GaugeCellInstance Instance { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    internal GaugeCell(GaugePanel owner, GaugeCell gaugeCellDef);
    internal GaugeCell(GaugePanel owner);
    internal GaugeCell get_GaugeCellDef();
    internal GaugePanel get_GaugePanelDef();
    public GaugeCellInstance get_Instance();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionCell.SetNewContext();
    internal void SetNewContext();
    private List`1<GaugeInputValue> GetGaugeInputValues();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeCellInstance : BaseInstance {
    private GaugeCell m_gaugeCellDef;
    private bool m_isNewContext;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal GaugeCellInstance(GaugeCell gaugeCellDef);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    protected virtual void ResetInstanceCache();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeDynamicMemberInstance : GaugeMemberInstance {
    protected int m_currentContext;
    protected bool m_isNewContext;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal GaugeDynamicMemberInstance(GaugePanel owner, GaugeMember memberDef);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    public bool MoveNext();
    public bool SetInstanceIndex(int index);
    public void ResetContext();
    private bool IsContextValid(int context);
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.ResetContext();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.MoveNext();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.GetInstanceIndex();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.SetInstanceIndex(int index);
    public int GetInstanceIndex();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeFrameShapes : Enum {
    public int value__;
    public static GaugeFrameShapes Default;
    public static GaugeFrameShapes Circular;
    public static GaugeFrameShapes Rectangular;
    public static GaugeFrameShapes RoundedRectangular;
    public static GaugeFrameShapes AutoShape;
    public static GaugeFrameShapes CustomCircular1;
    public static GaugeFrameShapes CustomCircular2;
    public static GaugeFrameShapes CustomCircular3;
    public static GaugeFrameShapes CustomCircular4;
    public static GaugeFrameShapes CustomCircular5;
    public static GaugeFrameShapes CustomCircular6;
    public static GaugeFrameShapes CustomCircular7;
    public static GaugeFrameShapes CustomCircular8;
    public static GaugeFrameShapes CustomCircular9;
    public static GaugeFrameShapes CustomCircular10;
    public static GaugeFrameShapes CustomCircular11;
    public static GaugeFrameShapes CustomCircular12;
    public static GaugeFrameShapes CustomCircular13;
    public static GaugeFrameShapes CustomCircular14;
    public static GaugeFrameShapes CustomCircular15;
    public static GaugeFrameShapes CustomSemiCircularN1;
    public static GaugeFrameShapes CustomSemiCircularN2;
    public static GaugeFrameShapes CustomSemiCircularN3;
    public static GaugeFrameShapes CustomSemiCircularN4;
    public static GaugeFrameShapes CustomSemiCircularS1;
    public static GaugeFrameShapes CustomSemiCircularS2;
    public static GaugeFrameShapes CustomSemiCircularS3;
    public static GaugeFrameShapes CustomSemiCircularS4;
    public static GaugeFrameShapes CustomSemiCircularE1;
    public static GaugeFrameShapes CustomSemiCircularE2;
    public static GaugeFrameShapes CustomSemiCircularE3;
    public static GaugeFrameShapes CustomSemiCircularE4;
    public static GaugeFrameShapes CustomSemiCircularW1;
    public static GaugeFrameShapes CustomSemiCircularW2;
    public static GaugeFrameShapes CustomSemiCircularW3;
    public static GaugeFrameShapes CustomSemiCircularW4;
    public static GaugeFrameShapes CustomQuarterCircularNE1;
    public static GaugeFrameShapes CustomQuarterCircularNE2;
    public static GaugeFrameShapes CustomQuarterCircularNE3;
    public static GaugeFrameShapes CustomQuarterCircularNE4;
    public static GaugeFrameShapes CustomQuarterCircularNW1;
    public static GaugeFrameShapes CustomQuarterCircularNW2;
    public static GaugeFrameShapes CustomQuarterCircularNW3;
    public static GaugeFrameShapes CustomQuarterCircularNW4;
    public static GaugeFrameShapes CustomQuarterCircularSE1;
    public static GaugeFrameShapes CustomQuarterCircularSE2;
    public static GaugeFrameShapes CustomQuarterCircularSE3;
    public static GaugeFrameShapes CustomQuarterCircularSE4;
    public static GaugeFrameShapes CustomQuarterCircularSW1;
    public static GaugeFrameShapes CustomQuarterCircularSW2;
    public static GaugeFrameShapes CustomQuarterCircularSW3;
    public static GaugeFrameShapes CustomQuarterCircularSW4;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeFrameStyles : Enum {
    public int value__;
    public static GaugeFrameStyles None;
    public static GaugeFrameStyles Simple;
    public static GaugeFrameStyles Edged;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeGlassEffects : Enum {
    public int value__;
    public static GaugeGlassEffects None;
    public static GaugeGlassEffects Simple;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeImage : GaugePanelItem {
    internal GaugeImage GaugeImageDef { get; }
    public GaugeImageInstance Instance { get; }
    internal GaugeImage(GaugeImage defObject, GaugePanel gaugePanel);
    internal GaugeImage get_GaugeImageDef();
    public GaugeImageInstance get_Instance();
    internal virtual BaseInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeImageCollection : GaugePanelObjectCollectionBase`1<GaugeImage> {
    private GaugePanel m_gaugePanel;
    public GaugeImage Item { get; }
    public int Count { get; }
    internal GaugeImageCollection(GaugePanel gaugePanel);
    protected virtual GaugeImage CreateGaugePanelObject(int index);
    public GaugeImage get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeImageInstance : GaugePanelItemInstance {
    internal GaugeImageInstance(GaugeImage defObject);
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeInputValue : object {
    private GaugePanel m_gaugePanel;
    private GaugeInputValue m_defObject;
    private GaugeInputValueInstance m_instance;
    private CompiledGaugeInputValueInstance m_compiledInstance;
    private ReportVariantProperty m_value;
    private ReportEnumProperty`1<GaugeInputValueFormulas> m_formula;
    private ReportDoubleProperty m_minPercent;
    private ReportDoubleProperty m_maxPercent;
    private ReportDoubleProperty m_multiplier;
    private ReportDoubleProperty m_addConstant;
    public ReportVariantProperty Value { get; }
    public ReportEnumProperty`1<GaugeInputValueFormulas> Formula { get; }
    public ReportDoubleProperty MinPercent { get; }
    public ReportDoubleProperty MaxPercent { get; }
    public ReportDoubleProperty Multiplier { get; }
    public ReportDoubleProperty AddConstant { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal GaugeInputValue GaugeInputValueDef { get; }
    public GaugeInputValueInstance Instance { get; }
    public CompiledGaugeInputValueInstance CompiledInstance { get; internal set; }
    internal GaugeInputValue(GaugeInputValue defObject, GaugePanel gaugePanel);
    public ReportVariantProperty get_Value();
    public ReportEnumProperty`1<GaugeInputValueFormulas> get_Formula();
    public ReportDoubleProperty get_MinPercent();
    public ReportDoubleProperty get_MaxPercent();
    public ReportDoubleProperty get_Multiplier();
    public ReportDoubleProperty get_AddConstant();
    public string get_DataElementName();
    public DataElementOutputTypes get_DataElementOutput();
    internal GaugePanel get_GaugePanelDef();
    internal GaugeInputValue get_GaugeInputValueDef();
    public GaugeInputValueInstance get_Instance();
    public CompiledGaugeInputValueInstance get_CompiledInstance();
    internal void set_CompiledInstance(CompiledGaugeInputValueInstance value);
    internal void SetNewContext();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeInputValueFormulas : Enum {
    public int value__;
    public static GaugeInputValueFormulas None;
    public static GaugeInputValueFormulas Average;
    public static GaugeInputValueFormulas Linear;
    public static GaugeInputValueFormulas Max;
    public static GaugeInputValueFormulas Min;
    public static GaugeInputValueFormulas Median;
    public static GaugeInputValueFormulas OpenClose;
    public static GaugeInputValueFormulas Percentile;
    public static GaugeInputValueFormulas Variance;
    public static GaugeInputValueFormulas RateOfChange;
    public static GaugeInputValueFormulas Integral;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeInputValueInstance : BaseInstance {
    private GaugeInputValue m_defObject;
    private object m_value;
    private bool m_errorOccured;
    private Nullable`1<GaugeInputValueFormulas> m_formula;
    private Nullable`1<double> m_minPercent;
    private Nullable`1<double> m_maxPercent;
    private Nullable`1<double> m_multiplier;
    private Nullable`1<double> m_addConstant;
    public object Value { get; }
    internal bool ErrorOccured { get; }
    public GaugeInputValueFormulas Formula { get; }
    public double MinPercent { get; }
    public double MaxPercent { get; }
    public double Multiplier { get; }
    public double AddConstant { get; }
    internal GaugeInputValueInstance(GaugeInputValue defObject);
    public object get_Value();
    internal bool get_ErrorOccured();
    public GaugeInputValueFormulas get_Formula();
    public double get_MinPercent();
    public double get_MaxPercent();
    public double get_Multiplier();
    public double get_AddConstant();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeInstance : GaugePanelItemInstance {
    private Gauge m_defObject;
    private Nullable`1<bool> m_clipContent;
    private Nullable`1<double> m_aspectRatio;
    public bool ClipContent { get; }
    public double AspectRatio { get; }
    internal GaugeInstance(Gauge defObject);
    public bool get_ClipContent();
    public double get_AspectRatio();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeLabel : GaugePanelItem {
    private ReportStringProperty m_text;
    private ReportDoubleProperty m_angle;
    private ReportEnumProperty`1<GaugeResizeModes> m_resizeMode;
    private ReportSizeProperty m_textShadowOffset;
    private ReportBoolProperty m_useFontPercent;
    public ReportStringProperty Text { get; }
    public ReportDoubleProperty Angle { get; }
    public ReportEnumProperty`1<GaugeResizeModes> ResizeMode { get; }
    public ReportSizeProperty TextShadowOffset { get; }
    public ReportBoolProperty UseFontPercent { get; }
    internal GaugeLabel GaugeLabelDef { get; }
    public GaugeLabelInstance Instance { get; }
    internal GaugeLabel(GaugeLabel defObject, GaugePanel gaugePanel);
    public ReportStringProperty get_Text();
    public ReportDoubleProperty get_Angle();
    public ReportEnumProperty`1<GaugeResizeModes> get_ResizeMode();
    public ReportSizeProperty get_TextShadowOffset();
    public ReportBoolProperty get_UseFontPercent();
    internal GaugeLabel get_GaugeLabelDef();
    public GaugeLabelInstance get_Instance();
    internal virtual BaseInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeLabelCollection : GaugePanelObjectCollectionBase`1<GaugeLabel> {
    private GaugePanel m_gaugePanel;
    public GaugeLabel Item { get; }
    public int Count { get; }
    internal GaugeLabelCollection(GaugePanel gaugePanel);
    protected virtual GaugeLabel CreateGaugePanelObject(int index);
    public GaugeLabel get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeLabelInstance : GaugePanelItemInstance {
    private GaugeLabel m_defObject;
    private string m_text;
    private Nullable`1<double> m_angle;
    private Nullable`1<GaugeResizeModes> m_resizeMode;
    private ReportSize m_textShadowOffset;
    private Nullable`1<bool> m_useFontPercent;
    public string Text { get; }
    public double Angle { get; }
    public GaugeResizeModes ResizeMode { get; }
    public ReportSize TextShadowOffset { get; }
    public bool UseFontPercent { get; }
    internal GaugeLabelInstance(GaugeLabel defObject);
    public string get_Text();
    public double get_Angle();
    public GaugeResizeModes get_ResizeMode();
    public ReportSize get_TextShadowOffset();
    public bool get_UseFontPercent();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeLabelPlacements : Enum {
    public int value__;
    public static GaugeLabelPlacements Inside;
    public static GaugeLabelPlacements Outside;
    public static GaugeLabelPlacements Cross;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeMapper : object {
    private GaugePanel m_gaugePanel;
    private GaugeContainer m_coreGaugeContainer;
    private ActionInfoWithDynamicImageMapCollection m_actions;
    private Formatter m_formatter;
    private float m_dpiX;
    private float m_dpiY;
    private static string m_CircularGaugesName;
    private static string m_RadialGaugesName;
    private List`1<InputValueOwnerInfo> m_inputValueOwnerInfoList;
    unknown float DpiX {internal set; }
    unknown float DpiY {internal set; }
    private List`1<InputValueOwnerInfo> InputValueOwnerInfoList { get; }
    public GaugeMapper(GaugePanel gaugePanel);
    private static GaugeMapper();
    internal void RenderGaugePanel();
    internal void RenderDataGaugePanel();
    internal Stream GetCoreXml();
    internal Stream GetImage(ImageType imageType);
    internal ActionInfoWithDynamicImageMapCollection GetImageMaps();
    internal IEnumerable`1<MapAreaInfo> GetMapAreaInfoList();
    internal void set_DpiX(float value);
    internal void set_DpiY(float value);
    private void InitializeGaugePanel();
    private void RenderRadialGauges();
    private void RenderLinearGauges();
    private void RenderGaugeLabels();
    private void RenderRadialScales(RadialScaleCollection scaleCollection, CircularGauge circularGauge);
    private void RenderRadialPointers(RadialPointerCollection pointers, CircularScale circularScale, CircularGauge circularGauge);
    private void RenderRadialScaleRanges(ScaleRangeCollection ranges, CircularScale circularScale, CircularGauge circularGauge);
    private void RenderLinearScales(LinearScaleCollection scaleCollection, LinearGauge linearGauge);
    private void RenderLinearPointers(LinearPointerCollection pointers, LinearScale linearScale, LinearGauge linearGauge);
    private void RenderLinearScaleRanges(ScaleRangeCollection ranges, LinearScale linearScale, LinearGauge linearGauge);
    private void RenderCustomLabels(CustomLabelCollection customLabels, ScaleBase scaleBase);
    private void RenderRadialGauge(RadialGauge radialGauge);
    private void RenderLinearGauge(LinearGauge linearGauge);
    private void RenderGauge(Gauge gauge, GaugeBase gaugeBase);
    private void RenderGaugeLabel(GaugeLabel gaugeLabel);
    private void RenderRadialScale(RadialScale radialScale, CircularGauge circularGauge);
    private void RenderLinearScale(LinearScale linearScale, LinearGauge linearGauge);
    private void RenderGaugeScale(GaugeScale gaugeScale, ScaleBase scaleBase);
    private void RenderRadialPointer(RadialPointer radialPointer, CircularScale circularScale, CircularGauge circularGauge);
    private void RenderRadialRange(ScaleRange scaleRange, CircularScale circularScale, CircularGauge circularGauge);
    private void RenderLinearPointer(LinearPointer linearPointer, LinearScale linearScale, LinearGauge linearGauge);
    private void RenderThermometer(Thermometer thermometer, LinearPointer coreLinearPointer);
    private void RenderLinearRange(ScaleRange scaleRange, LinearScale linearScale, LinearGauge linearGauge);
    private void RenderCustomLabel(CustomLabel customLabel, ScaleBase scaleBase);
    private void RenderGaugePointer(GaugePointer gaugePointer, PointerBase pointerBase, ScaleBase parentScale);
    private void RenderScaleRange(ScaleRange scaleRange, RangeBase rangeBase, ScaleBase parentScale);
    private void RenderBackFrame(BackFrame backFrame, BackFrame coreBackFrame, object parent);
    private void RenderRadialScalePin(ScalePin scalePin, CircularSpecialPosition circularSpecialPosition);
    private void RenderRadialPinLabel(PinLabel pinLabel, CircularPinLabel circularPinLabel);
    private void RenderLinearScalePin(ScalePin scalePin, LinearSpecialPosition linearSpecialPosition);
    private void RenderLinearPinLabel(PinLabel pinLabel, LinearPinLabel linearPinLabel);
    private void RenderTickMarkStyle(TickMarkStyle tickMarkStyle, CustomTickMark customTickMark);
    private void RenderPinLabel(PinLabel pinLabel, LinearPinLabel corePinLabel);
    private void RenderTickMarks(GaugeTickMarks tickMarks, TickMark coreTickMarks);
    private void RenderRadialScaleLabels(ScaleLabels scaleLabels, CircularLabelStyle labelStyle);
    private void RenderLinearScaleLabels(ScaleLabels scaleLabels, LinearLabelStyle labelStyle);
    private void RenderScaleLabels(ScaleLabels scaleLabels, LinearLabelStyle labelStyle);
    private void RenderPointerCap(PointerCap pointerCap, CircularPointer circularPointer);
    private void SetGaugePanelProperties();
    private void SetGaugeProperties(Gauge gauge, GaugeBase gaugeBase);
    private void SetRadialGaugeProperties(RadialGauge radialGauge, CircularGauge circularGauge);
    private void SetLinearGaugeProperties(LinearGauge linearGauge, LinearGauge coreLinearGauge);
    private void SetGaugeLabelProperties(GaugeLabel gaugeLabel, GaugeLabel coreGaugeLabel);
    private void SetScaleProperties(GaugeScale gaugeScale, ScaleBase scaleBase);
    private InputValueOwnerInfo CreateInputValueOwnerInfo(int index);
    private void SetRadialScaleProperties(RadialScale radialScale, CircularScale circularScale);
    private void SetLinearScaleProperties(LinearScale linearScale, LinearScale coreLinearScale);
    private void SetGaugePointerProperties(GaugePointer gaugePointer, PointerBase pointerBase, ScaleBase parentScale);
    private void SetRadialPointerProperties(RadialPointer radialPointer, CircularPointer circularPointer);
    private void SetLinearPointerProperties(LinearPointer linearPointer, LinearPointer coreLinearPointer);
    private void SetScaleRangeProperties(ScaleRange scaleRange, RangeBase rangeBase, ScaleBase scaleBase);
    private void SetBackFramePropreties(BackFrame backFrame, BackFrame coreBackFrame);
    private void SetScaleLabelsProperties(ScaleLabels scaleLabels, LinearLabelStyle labelStyle);
    private void SetRadialScaleLabelsProperties(ScaleLabels scaleLabels, CircularLabelStyle labelStyle);
    private void SetPointerCapProperties(PointerCap pointerCap, CircularPointer circularPointer);
    private void SetTickMarkStyleProperties(TickMarkStyle tickMarkStyle, CustomTickMark customTickMark);
    private void SetScalePinProperties(ScalePin scalePin, SpecialPosition specialPosition);
    private void SetGaugeTickMarksProperties(GaugeTickMarks tickMarks, TickMark coreTickMarks);
    private void SetPinLabelProperties(PinLabel pinLabel, LinearPinLabel corePinLabel);
    private void SetRadialPinLabelProperties(PinLabel pinLabel, CircularPinLabel circularPinLabel);
    private void SetCustomLabelProperties(CustomLabel customLabel, CustomLabel coreCustomLabel);
    private void SetThermometerProperties(Thermometer thermometer, LinearPointer linearPointer);
    private void RenderGaugePanelStyle();
    private void RenderBackFrameStyle(BackFrame backFrame, BackFrame coreBackFrame);
    private void RenderFrameBackGroundStyle(FrameBackground frameBackground, BackFrame coreBackFrame);
    private void RenderGaugeLabelStyle(GaugeLabel gaugeLabel, GaugeLabel coreGaugeLabel);
    private void RenderScaleStyle(GaugeScale scale, ScaleBase scaleBase);
    private void RenderGaugePointerStyle(GaugePointer gaugePointer, PointerBase pointerBase);
    private void RenderPointerCapStyle(PointerCap pointerCap, CircularPointer circularPointer);
    private void RenderScaleRangeStyle(ScaleRange scaleRange, RangeBase rangeBase);
    private void RenderScaleLabelsStyle(ScaleLabels scaleLabels, LinearLabelStyle labelStyle);
    private void RenderCustomLabelStyle(CustomLabel customLabel, CustomLabel coreCustomLabel);
    private void RenderPinLabelStyle(PinLabel pinLabel, LinearPinLabel corePinLabel);
    private void RenderTickMarkStyleStyle(TickMarkStyle tickMarkStyle, CustomTickMark customTickMark);
    private void RenderThermometerStyle(Thermometer thermometer, LinearPointer linearPointer);
    private void RenderActionInfo(ActionInfo actionInfo, string toolTip, IImageMapProvider imageMapProvider);
    private ImageMapAreaShape GetMapAreaShape(MapAreaShape shape);
    private void RenderGaugePanelTopImage();
    private void RenderPointerCapImage(CapImage capImage, CircularPointer circularPointer);
    private void RenderGaugeTopImage(TopImage topImage, GaugeBase gaugeBase);
    private void RenderGaugePointerImage(PointerImage pointerImage, PointerBase pointerBase);
    private void RenderFrameImage(FrameImage frameImage, BackFrame coreBackFrame);
    private void RenderTickMarkImage(TopImage tickMarkImage, CustomTickMark customTickMark);
    private bool GetBaseGaugeImageTransparentColor(BaseGaugeImage baseImage, Color& color);
    private void RenderData();
    private void RenderGrouping(GaugeMember gaugeMember, DateTime& timeStamp);
    private void RenderCell(DateTime& timeStamp);
    private GaugeInputValueFormulas GetFormula(GaugeInputValue gaugeInputValue);
    private double GetAddConstant(GaugeInputValue gaugeInputValue);
    private double GetMultiplier(GaugeInputValue gaugeInputValue);
    private bool GetMinPercent(GaugeInputValue gaugeInputValue, Double& minPercent);
    private bool IsSampleVariance(GaugeInputValue gaugeInputValue);
    private bool GetMaxPercent(GaugeInputValue gaugeInputValue, Double& maxPercent);
    private void AssignGaugeElementValues();
    private void AssignGaugeElementValuesToInputValues(InputValueOwnerInfo inputValueOwnerInfo);
    private void AssignPointerElementValue(InputValueOwnerInfo inputValueOwnerInfo);
    private void AssignScaleElementValues(InputValueOwnerInfo inputValueOwnerInfo);
    private void AssignRangeElementValues(InputValueOwnerInfo inputValueOwnerInfo);
    private void AssignCoreElementValue(GaugeInputValue gaugeInputValue, double gaugeElementValue);
    private void AssignCoreElementValue(GaugeInputValue gaugeInputValue, double gaugeElementValue, string valueSource);
    private void AssignInputValues();
    private void AssignInputValuesToGaugeElement(InputValueOwnerInfo inputValueOwnerInfo);
    private void AssignRangeValues(InputValueOwnerInfo inputValueOwnerInfo);
    private void AssignScaleValues(InputValueOwnerInfo inputValueOwnerInfo);
    private void AssignPointerValue(InputValueOwnerInfo inputValueOwnerInfo);
    private bool IsBuiltInFormula(GaugeInputValueFormulas formula);
    private void AssignPointerToCustomFormula(InputValueOwnerInfo inputValueOwnerInfo, GaugeInputValueFormulas formula);
    private PointerBase[] CreateMultiplePointers(PointerBase pointer, Double[] values);
    private Image GetImageFromStream(BaseGaugeImage baseGaugeImage);
    private string GetBuiltInFormulaValueSourceName(InputValue inputValue, GaugeInputValue gaugeInputValue, GaugeInputValueFormulas formula);
    private double GetBuiltInFormulaValue(InputValue inputValue, GaugeInputValue gaugeInputValue, GaugeInputValueFormulas formula);
    private double GetInputValueValue(InputValue inputValue);
    private void CreateBuiltInFormula(InputValue inputValue, GaugeInputValue gaugeInputValue, GaugeInputValueFormulas formula);
    private double GetValue(InputValue inputValue, GaugeInputValue gaugeInputValue);
    private Double[] GetPercentileParameters(GaugeInputValue gaugeInputValue);
    private Double[] GetValues(HistoryCollection historyColletion);
    private float GetPanelItemLeft(GaugePanelItem gaugePanelItem);
    private float GetPanelItemTop(GaugePanelItem gaugePanelItem);
    private float GetPanelItemWidth(GaugePanelItem gaugePanelItem);
    private float GetPanelItemHeight(GaugePanelItem gaugePanelItem);
    private bool GetPanelItemHidden(GaugePanelItem gaugePanelItem);
    private bool GetPanelItemZIndex(GaugePanelItem gaugePanelItem, Int32& zIndex);
    private bool GetPanelItemToolTip(GaugePanelItem gaugePanelItem, String& toolTip);
    private List`1<InputValueOwnerInfo> get_InputValueOwnerInfoList();
    private AntiAliasing GetAntiAliasing(GaugeAntiAliasings gaugeAntiAliasing);
    private TextAntiAliasingQuality GetTextAntiAliasingQuality(TextAntiAliasingQualities textAntiAliasingQuality);
    private BarStart GetBarStart(GaugeBarStarts barStart);
    private MarkerStyle GetMarkerStyle(GaugeMarkerStyles markerStyle);
    private Placement GetPlacement(GaugePointerPlacements placement);
    private Placement GetPlacement(ScaleRangePlacements placement);
    private Placement GetPlacement(GaugeLabelPlacements placement);
    private CircularPointerType GetCircularPointerType(RadialPointerTypes pointerType);
    private NeedleStyle GetNeedleStyle(RadialPointerNeedleStyles needleStyle);
    private BackFrameStyle GetFrameStyle(GaugeFrameStyles gaugeFrameStyles);
    private BackFrameShape GetFrameShape(GaugeFrameShapes gaugeFrameShapes);
    private GlassEffect GetGlassEffect(GaugeGlassEffects gaugeGlassEffects);
    private FontUnit GetFontUnit(bool useFontAsPercent);
    private CapStyle GetCapStyle(GaugeCapStyles capStyle);
    private MarkerStyle GetMarkerStyle(GaugeTickMarkShapes shape);
    private GaugeDashStyle GetDashStyle(Border border);
    private GaugeHatchStyle GetHatchStyle(Style style, StyleInstance styleInstance);
    private GradientType GetGradientType(Style style, StyleInstance styleInstance);
    private RangeGradientType GetRangeGradientType(BackgroundGradientTypes gradient);
    private GaugeOrientation GetGaugeOrientation(GaugeOrientations gaugeOrientation);
    private LinearPointerType GetLinearPointerType(LinearPointerTypes type);
    private ThermometerStyle GetThermometerStyle(GaugeThermometerStyles thermometerStyle);
    private ResizeMode GetResizeMode(GaugeResizeModes resizeMode);
    private string GetParentName(string parentItemName);
    private string AddNamedImage(BaseGaugeImage topImage);
    private int GetValidShadowOffset(int shadowOffset);
    private string FormatNumber(object sender, double value, string format);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeMarkerStyles : Enum {
    public int value__;
    public static GaugeMarkerStyles Triangle;
    public static GaugeMarkerStyles None;
    public static GaugeMarkerStyles Rectangle;
    public static GaugeMarkerStyles Circle;
    public static GaugeMarkerStyles Diamond;
    public static GaugeMarkerStyles Trapezoid;
    public static GaugeMarkerStyles Star;
    public static GaugeMarkerStyles Wedge;
    public static GaugeMarkerStyles Pentagon;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeMember : DataRegionMember {
    private GaugeMemberCollection m_children;
    private GaugeMemberInstance m_instance;
    private GaugeMember m_memberDef;
    private IReportScope m_reportScope;
    private string m_uniqueName;
    public GaugeMember Parent { get; }
    internal string UniqueName { get; }
    public string ID { get; }
    public bool IsStatic { get; }
    public bool IsColumn { get; }
    public int RowSpan { get; }
    public int ColumnSpan { get; }
    public int MemberCellIndex { get; }
    internal GaugeMember MemberDefinition { get; }
    internal IReportScope ReportScope { get; }
    internal IReportScopeInstance ReportScopeInstance { get; }
    internal GaugePanel OwnerGaugePanel { get; }
    public GaugeMemberInstance Instance { get; }
    public GaugeMember ChildGaugeMember { get; }
    internal IDataRegionMemberCollection SubMembers { get; }
    internal GaugeMember(IReportScope reportScope, IDefinitionPath parentDefinitionPath, GaugePanel owner, GaugeMember parent, GaugeMember memberDef);
    internal GaugeMember(IDefinitionPath parentDefinitionPath, GaugePanel owner, GaugeMember parent);
    public GaugeMember get_Parent();
    internal virtual string get_UniqueName();
    public virtual string get_ID();
    public virtual bool get_IsStatic();
    public bool get_IsColumn();
    public int get_RowSpan();
    public int get_ColumnSpan();
    public virtual int get_MemberCellIndex();
    internal GaugeMember get_MemberDefinition();
    internal virtual IReportScope get_ReportScope();
    internal virtual IReportScopeInstance get_ReportScopeInstance();
    internal GaugePanel get_OwnerGaugePanel();
    public GaugeMemberInstance get_Instance();
    public GaugeMember get_ChildGaugeMember();
    internal virtual IDataRegionMemberCollection get_SubMembers();
    internal virtual bool GetIsColumn();
    internal virtual void SetNewContext(bool fromMoveNext);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeMemberCollection : DataRegionMemberCollection`1<GaugeMember> {
    private GaugeMember m_parent;
    private GaugeMemberList m_memberDefs;
    public string DefinitionPath { get; }
    internal GaugePanel OwnerGaugePanel { get; }
    public GaugeMember Item { get; }
    public int Count { get; }
    internal GaugeMemberCollection(IDefinitionPath parentDefinitionPath, GaugePanel owner);
    internal GaugeMemberCollection(IDefinitionPath parentDefinitionPath, GaugePanel owner, GaugeMember parent, GaugeMemberList memberDefs);
    public virtual string get_DefinitionPath();
    internal GaugePanel get_OwnerGaugePanel();
    public virtual GaugeMember get_Item(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeMemberInstance : BaseInstance {
    protected GaugePanel m_owner;
    protected GaugeMember m_memberDef;
    internal GaugeMemberInstance(GaugePanel owner, GaugeMember memberDef);
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeOrientations : Enum {
    public int value__;
    public static GaugeOrientations Auto;
    public static GaugeOrientations Horizontal;
    public static GaugeOrientations Vertical;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugePanel : DataRegion {
    private GaugeMember m_gaugeMember;
    private GaugeMember m_gaugeRowMember;
    private GaugeRowCollection m_gaugeRowCollection;
    private LinearGaugeCollection m_linearGauges;
    private RadialGaugeCollection m_radialGauges;
    private NumericIndicatorCollection m_numericIndicators;
    private StateIndicatorCollection m_stateIndicators;
    private GaugeImageCollection m_gaugeImages;
    private GaugeLabelCollection m_gaugeLabels;
    private ReportEnumProperty`1<GaugeAntiAliasings> m_antiAliasing;
    private ReportBoolProperty m_autoLayout;
    private BackFrame m_backFrame;
    private ReportDoubleProperty m_shadowIntensity;
    private ReportEnumProperty`1<TextAntiAliasingQualities> m_textAntiAliasingQuality;
    private TopImage m_topImage;
    private CompilationState m_compilationState;
    public GaugeMember GaugeMember { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal bool HasDataCells { get; }
    internal IDataRegionRowCollection RowCollection { get; }
    public LinearGaugeCollection LinearGauges { get; }
    public RadialGaugeCollection RadialGauges { get; }
    public NumericIndicatorCollection NumericIndicators { get; }
    public StateIndicatorCollection StateIndicators { get; }
    public GaugeImageCollection GaugeImages { get; }
    public GaugeLabelCollection GaugeLabels { get; }
    public ReportEnumProperty`1<GaugeAntiAliasings> AntiAliasing { get; }
    public ReportBoolProperty AutoLayout { get; }
    public BackFrame BackFrame { get; }
    public ReportDoubleProperty ShadowIntensity { get; }
    public ReportEnumProperty`1<TextAntiAliasingQualities> TextAntiAliasingQuality { get; }
    public TopImage TopImage { get; }
    public GaugePanelInstance Instance { get; }
    internal GaugePanel(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, GaugePanel reportItemDef, RenderingContext renderingContext);
    public GaugeMember get_GaugeMember();
    internal GaugePanel get_GaugePanelDef();
    internal virtual bool get_HasDataCells();
    internal virtual IDataRegionRowCollection get_RowCollection();
    public LinearGaugeCollection get_LinearGauges();
    public RadialGaugeCollection get_RadialGauges();
    public NumericIndicatorCollection get_NumericIndicators();
    public StateIndicatorCollection get_StateIndicators();
    public GaugeImageCollection get_GaugeImages();
    public GaugeLabelCollection get_GaugeLabels();
    public ReportEnumProperty`1<GaugeAntiAliasings> get_AntiAliasing();
    public ReportBoolProperty get_AutoLayout();
    public BackFrame get_BackFrame();
    public ReportDoubleProperty get_ShadowIntensity();
    public ReportEnumProperty`1<TextAntiAliasingQualities> get_TextAntiAliasingQuality();
    public TopImage get_TopImage();
    public GaugePanelInstance get_Instance();
    internal virtual ReportItemInstance GetOrCreateInstance();
    internal virtual void SetNewContextChildren();
    internal List`1<GaugeInputValue> GetGaugeInputValues();
    internal void ProcessCompiledInstances();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugePanelInstance : DynamicImageInstance {
    private Nullable`1<GaugeAntiAliasings> m_antiAliasing;
    private Nullable`1<bool> m_autoLayout;
    private Nullable`1<double> m_shadowIntensity;
    private Nullable`1<TextAntiAliasingQualities> m_textAntiAliasingQuality;
    public GaugeAntiAliasings AntiAliasing { get; }
    public bool AutoLayout { get; }
    public double ShadowIntensity { get; }
    public TextAntiAliasingQualities TextAntiAliasingQuality { get; }
    internal GaugePanelInstance(GaugePanel reportItemDef);
    public GaugeAntiAliasings get_AntiAliasing();
    public bool get_AutoLayout();
    public double get_ShadowIntensity();
    public TextAntiAliasingQualities get_TextAntiAliasingQuality();
    protected virtual void GetImage(ImageType type, ActionInfoWithDynamicImageMapCollection& actionImageMaps, Stream& image);
    protected virtual void ResetInstanceCache();
    public Stream GetCoreXml();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.GaugePanelItem : GaugePanelObjectCollectionItem {
    internal GaugePanel m_gaugePanel;
    internal GaugePanelItem m_defObject;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ReportDoubleProperty m_top;
    private ReportDoubleProperty m_left;
    private ReportDoubleProperty m_height;
    private ReportDoubleProperty m_width;
    private ReportIntProperty m_zIndex;
    private ReportBoolProperty m_hidden;
    private ReportStringProperty m_toolTip;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.UniqueName { get; }
    public Style Style { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public string Name { get; }
    public ReportDoubleProperty Top { get; }
    public ReportDoubleProperty Left { get; }
    public ReportDoubleProperty Height { get; }
    public ReportDoubleProperty Width { get; }
    public ReportIntProperty ZIndex { get; }
    public ReportBoolProperty Hidden { get; }
    public ReportStringProperty ToolTip { get; }
    public string ParentItem { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal GaugePanelItem GaugePanelItemDef { get; }
    public GaugePanelItemInstance Instance { get; }
    internal GaugePanelItem(GaugePanelItem defObject, GaugePanel gaugePanel);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.get_UniqueName();
    public sealed virtual Style get_Style();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public string get_Name();
    public ReportDoubleProperty get_Top();
    public ReportDoubleProperty get_Left();
    public ReportDoubleProperty get_Height();
    public ReportDoubleProperty get_Width();
    public ReportIntProperty get_ZIndex();
    public ReportBoolProperty get_Hidden();
    public ReportStringProperty get_ToolTip();
    public string get_ParentItem();
    internal GaugePanel get_GaugePanelDef();
    internal GaugePanelItem get_GaugePanelItemDef();
    public GaugePanelItemInstance get_Instance();
    internal abstract virtual BaseInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugePanelItemInstance : BaseInstance {
    private GaugePanelItem m_defObject;
    private StyleInstance m_style;
    private Nullable`1<double> m_top;
    private Nullable`1<double> m_left;
    private Nullable`1<double> m_height;
    private Nullable`1<double> m_width;
    private Nullable`1<int> m_zIndex;
    private Nullable`1<bool> m_hidden;
    private string m_toolTip;
    public StyleInstance Style { get; }
    public double Top { get; }
    public double Left { get; }
    public double Height { get; }
    public double Width { get; }
    public int ZIndex { get; }
    public bool Hidden { get; }
    public string ToolTip { get; }
    internal GaugePanelItemInstance(GaugePanelItem defObject);
    public StyleInstance get_Style();
    public double get_Top();
    public double get_Left();
    public double get_Height();
    public double get_Width();
    public int get_ZIndex();
    public bool get_Hidden();
    public string get_ToolTip();
    protected virtual void ResetInstanceCache();
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.GaugePanelObjectCollectionBase`1 : object {
    private T[] m_collection;
    public T Item { get; }
    public int Count { get; }
    public T get_Item(int index);
    public abstract virtual int get_Count();
    protected abstract virtual T CreateGaugePanelObject(int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.GaugePanelObjectCollectionItem : object {
    protected BaseInstance m_instance;
    internal virtual void SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.GaugePointer : GaugePanelObjectCollectionItem {
    internal GaugePanel m_gaugePanel;
    internal GaugePointer m_defObject;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private GaugeInputValue m_gaugeInputValue;
    private ReportEnumProperty`1<GaugeBarStarts> m_barStart;
    private ReportDoubleProperty m_distanceFromScale;
    private PointerImage m_pointerImage;
    private ReportDoubleProperty m_markerLength;
    private ReportEnumProperty`1<GaugeMarkerStyles> m_markerStyle;
    private ReportEnumProperty`1<GaugePointerPlacements> m_placement;
    private ReportBoolProperty m_snappingEnabled;
    private ReportDoubleProperty m_snappingInterval;
    private ReportStringProperty m_toolTip;
    private ReportBoolProperty m_hidden;
    private ReportDoubleProperty m_width;
    private CompiledGaugePointerInstance[] m_compiledInstances;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public string Name { get; }
    public GaugeInputValue GaugeInputValue { get; }
    public ReportEnumProperty`1<GaugeBarStarts> BarStart { get; }
    public ReportDoubleProperty DistanceFromScale { get; }
    public PointerImage PointerImage { get; }
    public ReportDoubleProperty MarkerLength { get; }
    public ReportEnumProperty`1<GaugeMarkerStyles> MarkerStyle { get; }
    public ReportEnumProperty`1<GaugePointerPlacements> Placement { get; }
    public ReportBoolProperty SnappingEnabled { get; }
    public ReportDoubleProperty SnappingInterval { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportBoolProperty Hidden { get; }
    public ReportDoubleProperty Width { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal GaugePointer GaugePointerDef { get; }
    public GaugePointerInstance Instance { get; }
    public CompiledGaugePointerInstance[] CompiledInstances { get; internal set; }
    internal GaugePointer(GaugePointer defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public string get_Name();
    public GaugeInputValue get_GaugeInputValue();
    public ReportEnumProperty`1<GaugeBarStarts> get_BarStart();
    public ReportDoubleProperty get_DistanceFromScale();
    public PointerImage get_PointerImage();
    public ReportDoubleProperty get_MarkerLength();
    public ReportEnumProperty`1<GaugeMarkerStyles> get_MarkerStyle();
    public ReportEnumProperty`1<GaugePointerPlacements> get_Placement();
    public ReportBoolProperty get_SnappingEnabled();
    public ReportDoubleProperty get_SnappingInterval();
    public ReportStringProperty get_ToolTip();
    public ReportBoolProperty get_Hidden();
    public ReportDoubleProperty get_Width();
    internal GaugePanel get_GaugePanelDef();
    internal GaugePointer get_GaugePointerDef();
    public GaugePointerInstance get_Instance();
    public CompiledGaugePointerInstance[] get_CompiledInstances();
    internal void set_CompiledInstances(CompiledGaugePointerInstance[] value);
    internal abstract virtual GaugePointerInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugePointerInstance : BaseInstance {
    private GaugePointer m_defObject;
    private StyleInstance m_style;
    private Nullable`1<GaugeBarStarts> m_barStart;
    private Nullable`1<double> m_distanceFromScale;
    private Nullable`1<double> m_markerLength;
    private Nullable`1<GaugeMarkerStyles> m_markerStyle;
    private Nullable`1<GaugePointerPlacements> m_placement;
    private Nullable`1<bool> m_snappingEnabled;
    private Nullable`1<double> m_snappingInterval;
    private string m_toolTip;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<double> m_width;
    public StyleInstance Style { get; }
    public GaugeBarStarts BarStart { get; }
    public double DistanceFromScale { get; }
    public double MarkerLength { get; }
    public GaugeMarkerStyles MarkerStyle { get; }
    public GaugePointerPlacements Placement { get; }
    public bool SnappingEnabled { get; }
    public double SnappingInterval { get; }
    public string ToolTip { get; }
    public bool Hidden { get; }
    public double Width { get; }
    internal GaugePointerInstance(GaugePointer defObject);
    public StyleInstance get_Style();
    public GaugeBarStarts get_BarStart();
    public double get_DistanceFromScale();
    public double get_MarkerLength();
    public GaugeMarkerStyles get_MarkerStyle();
    public GaugePointerPlacements get_Placement();
    public bool get_SnappingEnabled();
    public double get_SnappingInterval();
    public string get_ToolTip();
    public bool get_Hidden();
    public double get_Width();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugePointerPlacements : Enum {
    public int value__;
    public static GaugePointerPlacements Cross;
    public static GaugePointerPlacements Outside;
    public static GaugePointerPlacements Inside;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeResizeModes : Enum {
    public int value__;
    public static GaugeResizeModes AutoFit;
    public static GaugeResizeModes None;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeRow : object {
    private GaugePanel m_gaugePanel;
    private GaugeCell m_cell;
    private GaugeRow m_rowDef;
    public GaugeCell GaugeCell { get; }
    private int Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRow.Count { get; }
    internal GaugeRow GaugeRowDef { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal GaugeRow(GaugePanel gaugePanel);
    internal GaugeRow(GaugePanel gaugePanel, GaugeRow rowDef);
    public GaugeCell get_GaugeCell();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRow.get_Count();
    internal GaugeRow get_GaugeRowDef();
    internal GaugePanel get_GaugePanelDef();
    private sealed virtual override IDataRegionCell Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRow.GetIfExists(int columnIndex);
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeRowCollection : object {
    private GaugePanel m_owner;
    private GaugeRow m_gaugeRow;
    private GaugeRowList m_gaugeRowCollectionDefs;
    public GaugeRow GaugeRow { get; }
    public int Count { get; }
    internal GaugeRowCollection(GaugePanel owner, GaugeRowList gaugeRowCollectionDefs);
    internal GaugeRowCollection(GaugePanel owner);
    public GaugeRow get_GaugeRow();
    public sealed virtual int get_Count();
    internal void SetNewContext();
    private sealed virtual override IDataRegionRow Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRowCollection.GetIfExists(int rowIndex);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.GaugeScale : GaugePanelObjectCollectionItem {
    internal GaugePanel m_gaugePanel;
    internal GaugeScale m_defObject;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ScaleRangeCollection m_scaleRanges;
    private CustomLabelCollection m_customLabels;
    private ReportDoubleProperty m_interval;
    private ReportDoubleProperty m_intervalOffset;
    private ReportBoolProperty m_logarithmic;
    private ReportDoubleProperty m_logarithmicBase;
    private GaugeInputValue m_maximumValue;
    private GaugeInputValue m_minimumValue;
    private ReportDoubleProperty m_multiplier;
    private ReportBoolProperty m_reversed;
    private GaugeTickMarks m_gaugeMajorTickMarks;
    private GaugeTickMarks m_gaugeMinorTickMarks;
    private ScalePin m_maximumPin;
    private ScalePin m_minimumPin;
    private ScaleLabels m_scaleLabels;
    private ReportBoolProperty m_tickMarksOnTop;
    private ReportStringProperty m_toolTip;
    private ReportBoolProperty m_hidden;
    private ReportDoubleProperty m_width;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public string Name { get; }
    public ScaleRangeCollection ScaleRanges { get; }
    public CustomLabelCollection CustomLabels { get; }
    public ReportDoubleProperty Interval { get; }
    public ReportDoubleProperty IntervalOffset { get; }
    public ReportBoolProperty Logarithmic { get; }
    public ReportDoubleProperty LogarithmicBase { get; }
    public GaugeInputValue MaximumValue { get; }
    public GaugeInputValue MinimumValue { get; }
    public ReportDoubleProperty Multiplier { get; }
    public ReportBoolProperty Reversed { get; }
    public GaugeTickMarks GaugeMajorTickMarks { get; }
    public GaugeTickMarks GaugeMinorTickMarks { get; }
    public ScalePin MaximumPin { get; }
    public ScalePin MinimumPin { get; }
    public ScaleLabels ScaleLabels { get; }
    public ReportBoolProperty TickMarksOnTop { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportBoolProperty Hidden { get; }
    public ReportDoubleProperty Width { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal GaugeScale GaugeScaleDef { get; }
    public GaugeScaleInstance Instance { get; }
    internal GaugeScale(GaugeScale defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public string get_Name();
    public ScaleRangeCollection get_ScaleRanges();
    public CustomLabelCollection get_CustomLabels();
    public ReportDoubleProperty get_Interval();
    public ReportDoubleProperty get_IntervalOffset();
    public ReportBoolProperty get_Logarithmic();
    public ReportDoubleProperty get_LogarithmicBase();
    public GaugeInputValue get_MaximumValue();
    public GaugeInputValue get_MinimumValue();
    public ReportDoubleProperty get_Multiplier();
    public ReportBoolProperty get_Reversed();
    public GaugeTickMarks get_GaugeMajorTickMarks();
    public GaugeTickMarks get_GaugeMinorTickMarks();
    public ScalePin get_MaximumPin();
    public ScalePin get_MinimumPin();
    public ScaleLabels get_ScaleLabels();
    public ReportBoolProperty get_TickMarksOnTop();
    public ReportStringProperty get_ToolTip();
    public ReportBoolProperty get_Hidden();
    public ReportDoubleProperty get_Width();
    internal GaugePanel get_GaugePanelDef();
    internal GaugeScale get_GaugeScaleDef();
    public GaugeScaleInstance get_Instance();
    internal abstract virtual GaugeScaleInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeScaleInstance : BaseInstance {
    private GaugeScale m_defObject;
    private StyleInstance m_style;
    private Nullable`1<double> m_interval;
    private Nullable`1<double> m_intervalOffset;
    private Nullable`1<bool> m_logarithmic;
    private Nullable`1<double> m_logarithmicBase;
    private Nullable`1<double> m_multiplier;
    private Nullable`1<bool> m_reversed;
    private Nullable`1<bool> m_tickMarksOnTop;
    private string m_toolTip;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<double> m_width;
    public StyleInstance Style { get; }
    public double Interval { get; }
    public double IntervalOffset { get; }
    public bool Logarithmic { get; }
    public double LogarithmicBase { get; }
    public double Multiplier { get; }
    public bool Reversed { get; }
    public bool TickMarksOnTop { get; }
    public string ToolTip { get; }
    public bool Hidden { get; }
    public double Width { get; }
    internal GaugeScaleInstance(GaugeScale defObject);
    public StyleInstance get_Style();
    public double get_Interval();
    public double get_IntervalOffset();
    public bool get_Logarithmic();
    public double get_LogarithmicBase();
    public double get_Multiplier();
    public bool get_Reversed();
    public bool get_TickMarksOnTop();
    public string get_ToolTip();
    public bool get_Hidden();
    public double get_Width();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeThermometerStyles : Enum {
    public int value__;
    public static GaugeThermometerStyles Standard;
    public static GaugeThermometerStyles Flask;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeTickMarks : TickMarkStyle {
    private ReportDoubleProperty m_interval;
    private ReportDoubleProperty m_intervalOffset;
    public ReportDoubleProperty Interval { get; }
    public ReportDoubleProperty IntervalOffset { get; }
    internal GaugeTickMarks GaugeTickMarksDef { get; }
    public GaugeTickMarksInstance Instance { get; }
    internal GaugeTickMarks(GaugeTickMarks defObject, GaugePanel gaugePanel);
    public ReportDoubleProperty get_Interval();
    public ReportDoubleProperty get_IntervalOffset();
    internal GaugeTickMarks get_GaugeTickMarksDef();
    public GaugeTickMarksInstance get_Instance();
    internal virtual void SetNewContext();
    protected virtual TickMarkStyleInstance GetInstance();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.GaugeTickMarkShapes : Enum {
    public int value__;
    public static GaugeTickMarkShapes Rectangle;
    public static GaugeTickMarkShapes None;
    public static GaugeTickMarkShapes Triangle;
    public static GaugeTickMarkShapes Circle;
    public static GaugeTickMarkShapes Diamond;
    public static GaugeTickMarkShapes Trapezoid;
    public static GaugeTickMarkShapes Star;
    public static GaugeTickMarkShapes Wedge;
    public static GaugeTickMarkShapes Pentagon;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GaugeTickMarksInstance : TickMarkStyleInstance {
    private Nullable`1<double> m_interval;
    private Nullable`1<double> m_intervalOffset;
    public double Interval { get; }
    public double IntervalOffset { get; }
    internal GaugeTickMarksInstance(GaugeTickMarks defObject);
    public double get_Interval();
    public double get_IntervalOffset();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Group : object {
    private bool m_isOldSnapshot;
    private bool m_isDetailGroup;
    private DataRegion m_ownerItem;
    private ReportHierarchyNode m_memberDef;
    private PageBreak m_pageBreak;
    private GroupExpressionCollection m_groupExpressions;
    private CustomPropertyCollection m_customProperties;
    private ReportStringProperty m_documentMapLabel;
    private GroupInstance m_instance;
    private DataRegionMember m_dataMember;
    private ShimTablixMember m_dynamicMember;
    private ShimTableMember m_tableDetailMember;
    private CustomReportItem m_criOwner;
    private ShimRenderGroups m_renderGroups;
    private Group m_currentRenderGroupCache;
    private int m_currentRenderGroupIndex;
    public string ID { get; }
    public string Name { get; }
    public ReportStringProperty DocumentMapLabel { get; }
    public PageBreak PageBreak { get; }
    public GroupExpressionCollection GroupExpressions { get; }
    internal CustomPropertyCollection CustomProperties { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal DataRegion OwnerDataRegion { get; }
    private PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.PageBreakLocation { get; }
    internal ShimRenderGroups RenderGroups { get; internal set; }
    internal int CurrentRenderGroupIndex { get; internal set; }
    internal Group CurrentShimRenderGroup { get; }
    internal bool IsOldSnapshot { get; }
    internal bool IsDetailGroup { get; }
    internal ShimTableMember TableDetailMember { get; }
    internal ReportHierarchyNode MemberDefinition { get; }
    public GroupInstance Instance { get; }
    internal Group(DataRegion owner, ReportHierarchyNode memberDef, DataRegionMember dataMember);
    internal Group(CustomReportItem owner, ReportHierarchyNode memberDef, DataRegionMember dataMember);
    internal Group(DataRegion owner, ShimRenderGroups renderGroups, ShimTablixMember dynamicMember);
    internal Group(DataRegion owner, ShimRenderGroups renderGroups);
    internal Group(DataRegion owner, ShimTableMember tableDetailMember);
    internal Group(CustomReportItem owner, ShimRenderGroups renderGroups);
    internal void SetNewContext();
    public string get_ID();
    public string get_Name();
    public ReportStringProperty get_DocumentMapLabel();
    public PageBreak get_PageBreak();
    public GroupExpressionCollection get_GroupExpressions();
    internal CustomPropertyCollection get_CustomProperties();
    public string get_DataElementName();
    public DataElementOutputTypes get_DataElementOutput();
    internal DataRegion get_OwnerDataRegion();
    private sealed virtual override PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.get_PageBreakLocation();
    internal ShimRenderGroups get_RenderGroups();
    internal void set_RenderGroups(ShimRenderGroups value);
    internal int get_CurrentRenderGroupIndex();
    internal void set_CurrentRenderGroupIndex(int value);
    internal Group get_CurrentShimRenderGroup();
    internal bool get_IsOldSnapshot();
    internal bool get_IsDetailGroup();
    internal ShimTableMember get_TableDetailMember();
    internal ReportHierarchyNode get_MemberDefinition();
    public GroupInstance get_Instance();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.GroupExpressionCollection : ReportElementCollectionBase`1<ReportVariantProperty> {
    private List`1<ReportVariantProperty> m_list;
    public ReportVariantProperty Item { get; }
    public int Count { get; }
    internal GroupExpressionCollection(Grouping grouping);
    internal GroupExpressionCollection(Grouping grouping);
    public virtual ReportVariantProperty get_Item(int index);
    public virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.GroupExpressionValueCollection : object {
    private Object[] m_values;
    public object Item { get; }
    public int Count { get; }
    internal void UpdateValues(object exprValue);
    internal void UpdateValues(Object[] exprValues);
    public object get_Item(int index);
    public int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.GroupInstance : BaseInstance {
    private string m_uniqueName;
    private bool m_documentMapLabelEvaluated;
    private string m_documentMapLabel;
    private GroupExpressionValueCollection m_groupExpressions;
    private Group m_owner;
    private int m_recursiveLevel;
    public string UniqueName { get; }
    public string DocumentMapLabel { get; }
    public GroupExpressionValueCollection GroupExpressions { get; }
    public int RecursiveLevel { get; }
    internal GroupInstance(Group owner);
    internal GroupInstance(Group owner, IReportScope reportScope);
    public string get_UniqueName();
    public string get_DocumentMapLabel();
    public GroupExpressionValueCollection get_GroupExpressions();
    public int get_RecursiveLevel();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.HtmlElement : object {
    private string m_value;
    private bool m_isEmptyElement;
    private HtmlNodeType m_nodeType;
    private HtmlElementType m_elementType;
    private string m_attributesAsString;
    private Dictionary`2<string, string> m_parsedAttributes;
    private Dictionary`2<string, string> m_parsedCssStyleValues;
    private int m_characterPosition;
    private static Regex m_AttributeRegEx;
    internal bool IsEmptyElement { get; }
    internal HtmlNodeType NodeType { get; }
    internal HtmlElementType ElementType { get; }
    internal Dictionary`2<string, string> Attributes { get; }
    internal Dictionary`2<string, string> CssStyle { get; }
    internal bool HasAttributes { get; }
    internal string Value { get; }
    internal int CharacterPosition { get; }
    internal HtmlElement(HtmlNodeType nodeType, HtmlElementType elemntType, int characterPosition);
    internal HtmlElement(HtmlNodeType nodeType, HtmlElementType elemntType, string value, int characterPosition);
    internal HtmlElement(HtmlNodeType nodeType, HtmlElementType type, string attributesAsString, bool isEmpty, int characterPosition);
    private static HtmlElement();
    internal bool get_IsEmptyElement();
    internal HtmlNodeType get_NodeType();
    internal HtmlElementType get_ElementType();
    internal Dictionary`2<string, string> get_Attributes();
    internal Dictionary`2<string, string> get_CssStyle();
    internal bool get_HasAttributes();
    internal string get_Value();
    internal int get_CharacterPosition();
    private void ParseCssStyle(string cssStyles);
    private void ParseAttributes();
    public virtual string ToString();
    private void GetDictionaryAsString(string name, Dictionary`2<string, string> dict, StringBuilder sb);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.HtmlEntityResolver : object {
    private static Dictionary`2<string, char> m_entityLookupTable;
    private static HtmlEntityResolver();
    internal static string ResolveEntities(string html);
    internal static void ResolveEntities(StringBuilder sb);
    private static bool GetEntity(StringBuilder sb, int index, String& entity, String& entityName);
    internal static string ResolveEntity(string entity);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.HtmlLexer : object {
    private StringBuilder m_sb;
    private HtmlElement m_currentElement;
    private bool m_readWhiteSpace;
    private HtmlStringReader m_htmlReader;
    private Stack`1<HtmlElement> m_elementStack;
    internal HtmlElement CurrentElement { get; }
    internal HtmlLexer(string html);
    internal HtmlElement get_CurrentElement();
    private static HtmlElementType GetElementType(string elementName);
    internal bool Read();
    private void ReadStartElement();
    private void ReadScriptOrStyleContents(HtmlElementType aElementType);
    private void ReadBangElement();
    private void AdvanceToEndOfElement();
    private HtmlElementType ReadElementType(bool isEndElement);
    private string GetAttributesAsString(Boolean& isEmpty);
    private void ConsumeAndAppend(char c);
    private StringBuilder ReadTextContent(bool inComment, Boolean& hasEntity);
    private void ReadTextElement();
    private void ReadEndElement();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.HtmlParser : RichTextParser {
    private HtmlElement m_currentHtmlElement;
    private string m_currentHyperlinkText;
    private HtmlLexer m_htmlLexer;
    internal HtmlParser(bool multipleParagraphsAllowed, IRichTextInstanceCreator iRichTextInstanceCreator, IRichTextLogger richTextLogger);
    protected virtual void InternalParse(string richText);
    private ListStyle GetListStyleForElement(HtmlElementType elementType);
    private void ParseParagraphElement(HtmlElementType elementType, FunctionalList`1<ListStyle> listStyles);
    private void FlushPendingLI();
    private void SetMarginTopAndBottom(ReportSize marginValue);
    private void ParseTextRunElement(HtmlElementType elementType);
    private void RevertActionElement(HtmlElementType elementType);
    private void ParseActionElement(int listLevel);
    protected virtual ICompiledTextRunInstance CreateTextRunInstance();
    private void SetStyleValues(bool isParagraph);
    private bool HasPaddingValue(string attrName, ReportSize generalPadding, ReportSize& effectivePadding);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IActionInstance {
    public string HyperlinkText { get; }
    public abstract virtual string get_HyperlinkText();
    public abstract virtual void SetHyperlinkText(string value);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage {
    public SourceType Source { get; }
    public ReportProperty Value { get; }
    public ReportStringProperty MIMEType { get; }
    public string ImageDataPropertyName { get; }
    public string ImageValuePropertyName { get; }
    public string MIMETypePropertyName { get; }
    public abstract virtual SourceType get_Source();
    public abstract virtual ReportProperty get_Value();
    public abstract virtual ReportStringProperty get_MIMEType();
    public abstract virtual string get_ImageDataPropertyName();
    public abstract virtual string get_ImageValuePropertyName();
    public abstract virtual string get_MIMETypePropertyName();
    public abstract virtual Byte[] GetImageData(List`1& fieldsUsedInValue, Boolean& errorOccurred);
    public abstract virtual string GetMIMETypeValue();
    public abstract virtual string GetValueAsString(List`1& fieldsUsedInValue, Boolean& errorOccured);
    public abstract virtual string GetTransparentImageProperties(String& mimeType, Byte[]& imageData);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.ICompiledParagraphInstance {
    public IList`1<ICompiledTextRunInstance> CompiledTextRunInstances { get; public set; }
    public ICompiledStyleInstance Style { get; public set; }
    public ListStyle ListStyle { get; public set; }
    public int ListLevel { get; public set; }
    public ReportSize LeftIndent { get; public set; }
    public ReportSize RightIndent { get; public set; }
    public ReportSize HangingIndent { get; public set; }
    public ReportSize SpaceBefore { get; public set; }
    public ReportSize SpaceAfter { get; public set; }
    public abstract virtual IList`1<ICompiledTextRunInstance> get_CompiledTextRunInstances();
    public abstract virtual void set_CompiledTextRunInstances(IList`1<ICompiledTextRunInstance> value);
    public abstract virtual ICompiledStyleInstance get_Style();
    public abstract virtual void set_Style(ICompiledStyleInstance value);
    public abstract virtual ListStyle get_ListStyle();
    public abstract virtual void set_ListStyle(ListStyle value);
    public abstract virtual int get_ListLevel();
    public abstract virtual void set_ListLevel(int value);
    public abstract virtual ReportSize get_LeftIndent();
    public abstract virtual void set_LeftIndent(ReportSize value);
    public abstract virtual ReportSize get_RightIndent();
    public abstract virtual void set_RightIndent(ReportSize value);
    public abstract virtual ReportSize get_HangingIndent();
    public abstract virtual void set_HangingIndent(ReportSize value);
    public abstract virtual ReportSize get_SpaceBefore();
    public abstract virtual void set_SpaceBefore(ReportSize value);
    public abstract virtual ReportSize get_SpaceAfter();
    public abstract virtual void set_SpaceAfter(ReportSize value);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.ICompiledStyleInstance {
    public ReportColor BackgroundGradientEndColor { get; public set; }
    public ReportColor BackgroundColor { get; public set; }
    public ReportColor Color { get; public set; }
    public FontStyles FontStyle { get; public set; }
    public string FontFamily { get; public set; }
    public FontWeights FontWeight { get; public set; }
    public string Format { get; public set; }
    public TextDecorations TextDecoration { get; public set; }
    public TextAlignments TextAlign { get; public set; }
    public VerticalAlignments VerticalAlign { get; public set; }
    public Directions Direction { get; public set; }
    public WritingModes WritingMode { get; public set; }
    public string Language { get; public set; }
    public UnicodeBiDiTypes UnicodeBiDi { get; public set; }
    public Calendars Calendar { get; public set; }
    public string NumeralLanguage { get; public set; }
    public BackgroundGradients BackgroundGradientType { get; public set; }
    public ReportSize FontSize { get; public set; }
    public ReportSize PaddingLeft { get; public set; }
    public ReportSize PaddingRight { get; public set; }
    public ReportSize PaddingTop { get; public set; }
    public ReportSize PaddingBottom { get; public set; }
    public ReportSize LineHeight { get; public set; }
    public int NumeralVariant { get; public set; }
    public TextEffects TextEffect { get; public set; }
    public BackgroundHatchTypes BackgroundHatchType { get; public set; }
    public ReportColor ShadowColor { get; public set; }
    public ReportSize ShadowOffset { get; public set; }
    public abstract virtual ReportColor get_BackgroundGradientEndColor();
    public abstract virtual void set_BackgroundGradientEndColor(ReportColor value);
    public abstract virtual ReportColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(ReportColor value);
    public abstract virtual ReportColor get_Color();
    public abstract virtual void set_Color(ReportColor value);
    public abstract virtual FontStyles get_FontStyle();
    public abstract virtual void set_FontStyle(FontStyles value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual FontWeights get_FontWeight();
    public abstract virtual void set_FontWeight(FontWeights value);
    public abstract virtual string get_Format();
    public abstract virtual void set_Format(string value);
    public abstract virtual TextDecorations get_TextDecoration();
    public abstract virtual void set_TextDecoration(TextDecorations value);
    public abstract virtual TextAlignments get_TextAlign();
    public abstract virtual void set_TextAlign(TextAlignments value);
    public abstract virtual VerticalAlignments get_VerticalAlign();
    public abstract virtual void set_VerticalAlign(VerticalAlignments value);
    public abstract virtual Directions get_Direction();
    public abstract virtual void set_Direction(Directions value);
    public abstract virtual WritingModes get_WritingMode();
    public abstract virtual void set_WritingMode(WritingModes value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual UnicodeBiDiTypes get_UnicodeBiDi();
    public abstract virtual void set_UnicodeBiDi(UnicodeBiDiTypes value);
    public abstract virtual Calendars get_Calendar();
    public abstract virtual void set_Calendar(Calendars value);
    public abstract virtual string get_NumeralLanguage();
    public abstract virtual void set_NumeralLanguage(string value);
    public abstract virtual BackgroundGradients get_BackgroundGradientType();
    public abstract virtual void set_BackgroundGradientType(BackgroundGradients value);
    public abstract virtual ReportSize get_FontSize();
    public abstract virtual void set_FontSize(ReportSize value);
    public abstract virtual ReportSize get_PaddingLeft();
    public abstract virtual void set_PaddingLeft(ReportSize value);
    public abstract virtual ReportSize get_PaddingRight();
    public abstract virtual void set_PaddingRight(ReportSize value);
    public abstract virtual ReportSize get_PaddingTop();
    public abstract virtual void set_PaddingTop(ReportSize value);
    public abstract virtual ReportSize get_PaddingBottom();
    public abstract virtual void set_PaddingBottom(ReportSize value);
    public abstract virtual ReportSize get_LineHeight();
    public abstract virtual void set_LineHeight(ReportSize value);
    public abstract virtual int get_NumeralVariant();
    public abstract virtual void set_NumeralVariant(int value);
    public abstract virtual TextEffects get_TextEffect();
    public abstract virtual void set_TextEffect(TextEffects value);
    public abstract virtual BackgroundHatchTypes get_BackgroundHatchType();
    public abstract virtual void set_BackgroundHatchType(BackgroundHatchTypes value);
    public abstract virtual ReportColor get_ShadowColor();
    public abstract virtual void set_ShadowColor(ReportColor value);
    public abstract virtual ReportSize get_ShadowOffset();
    public abstract virtual void set_ShadowOffset(ReportSize value);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.ICompiledTextRunInstance {
    public ICompiledStyleInstance Style { get; public set; }
    public string Value { get; public set; }
    public string Label { get; public set; }
    public string ToolTip { get; public set; }
    public MarkupType MarkupType { get; public set; }
    public IActionInstance ActionInstance { get; public set; }
    public abstract virtual ICompiledStyleInstance get_Style();
    public abstract virtual void set_Style(ICompiledStyleInstance value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual string get_ToolTip();
    public abstract virtual void set_ToolTip(string value);
    public abstract virtual MarkupType get_MarkupType();
    public abstract virtual void set_MarkupType(MarkupType value);
    public abstract virtual IActionInstance get_ActionInstance();
    public abstract virtual void set_ActionInstance(IActionInstance value);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.ICustomReportItem {
    public abstract virtual void GenerateReportItemDefinition(CustomReportItem cri);
    public abstract virtual void EvaluateReportItemInstance(CustomReportItem cri);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IDataRegion {
    public bool HasDataCells { get; }
    public IDataRegionRowCollection RowCollection { get; }
    public abstract virtual bool get_HasDataCells();
    public abstract virtual IDataRegionRowCollection get_RowCollection();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionCell {
    public abstract virtual void SetNewContext();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionMemberCollection {
    public abstract virtual void SetNewContext();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRow {
    public int Count { get; }
    public abstract virtual IDataRegionCell GetIfExists(int index);
    public abstract virtual int get_Count();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRowCollection {
    public int Count { get; }
    public abstract virtual IDataRegionRow GetIfExists(int index);
    public abstract virtual int get_Count();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IDefinitionPath {
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    public abstract virtual string get_DefinitionPath();
    public abstract virtual IDefinitionPath get_ParentDefinitionPath();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance {
    public abstract virtual void ResetContext();
    public abstract virtual bool MoveNext();
    public abstract virtual int GetInstanceIndex();
    public abstract virtual bool SetInstanceIndex(int index);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IImage {
    public SourceType Source { get; }
    public ReportStringProperty Value { get; }
    public ReportStringProperty MIMEType { get; }
    public abstract virtual SourceType get_Source();
    public abstract virtual ReportStringProperty get_Value();
    public abstract virtual ReportStringProperty get_MIMEType();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IImageInstance {
    public Byte[] ImageData { get; }
    public string StreamName { get; }
    public string MIMEType { get; }
    public abstract virtual Byte[] get_ImageData();
    public abstract virtual string get_StreamName();
    public abstract virtual string get_MIMEType();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Image : ReportItem {
    private Image m_renderImage;
    private ReportStringProperty m_value;
    private ReportStringProperty m_mimeType;
    private ActionInfo m_actionInfo;
    public SourceType Source { get; }
    public ReportStringProperty Value { get; }
    public ReportStringProperty MIMEType { get; }
    public Sizings Sizing { get; public set; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public ImageInstance ImageInstance { get; }
    internal Image ImageDef { get; }
    private List`1<string> Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.FieldsUsedInValueExpression { get; }
    private ReportProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.Value { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.ImageDataPropertyName { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.ImageValuePropertyName { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.MIMETypePropertyName { get; }
    internal Image(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, Image reportItemDef, RenderingContext renderingContext);
    internal Image(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, Image renderImage, RenderingContext renderingContext);
    public sealed virtual SourceType get_Source();
    public sealed virtual ReportStringProperty get_Value();
    public sealed virtual ReportStringProperty get_MIMEType();
    public Sizings get_Sizing();
    public void set_Sizing(Sizings value);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.get_UniqueName();
    public ActionInfo get_ActionInfo();
    public ImageInstance get_ImageInstance();
    internal virtual ReportItemInstance GetOrCreateInstance();
    internal Image get_ImageDef();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override ReportProperty Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_Value();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_ImageDataPropertyName();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_ImageValuePropertyName();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.get_MIMETypePropertyName();
    private sealed virtual override Byte[] Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetImageData(List`1& fieldsUsedInValue, Boolean& errorOccurred);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetMIMETypeValue();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetValueAsString(List`1& fieldsUsedInValue, Boolean& errOccurred);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IBaseImage.GetTransparentImageProperties(String& mimeType, Byte[]& imageData);
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
    internal virtual void SetNewContextChildren();
    internal virtual void ConstructReportItemDefinition();
    internal virtual void CompleteCriGeneratedInstanceEvaluation();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ImageInstance : ReportItemInstance {
    private Byte[] m_imageData;
    private string m_mimeType;
    private ActionInfoWithDynamicImageMapCollection m_actionInfoImageMapAreas;
    private string m_imageDataId;
    private bool m_streamNameEvaluated;
    private string m_streamName;
    private bool m_imageDataEvaluated;
    private bool m_mimeTypeEvaluated;
    private bool m_fieldsUsedInValueEvaluated;
    private List`1<string> m_fieldsUsedInValue;
    private static Declaration m_Declaration;
    public Byte[] ImageData { get; public set; }
    public string StreamName { get; }
    public string MIMEType { get; public set; }
    public ActionInfoWithDynamicImageMapCollection ActionInfoWithDynamicImageMapAreas { get; }
    internal Image ImageDef { get; }
    internal ImageInstance(Image reportItemDef);
    private static ImageInstance();
    public sealed virtual Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    public sealed virtual string get_StreamName();
    public sealed virtual string get_MIMEType();
    public void set_MIMEType(string value);
    public ActionInfoWithDynamicImageMapCollection get_ActionInfoWithDynamicImageMapAreas();
    internal Image get_ImageDef();
    private void CacheImageProperties();
    internal List`1<string> GetFieldsUsedInValueExpression();
    public ActionInfoWithDynamicImageMap CreateActionInfoWithDynamicImageMap();
    protected virtual void ResetInstanceCache();
    internal virtual void Serialize(IntermediateFormatWriter writer);
    internal virtual void Deserialize(IntermediateFormatReader reader);
    internal virtual ObjectType GetObjectType();
    [SkipMemberStaticValidationAttribute("648")]
private static Declaration GetDeclaration();
}
internal static class Microsoft.ReportingServices.OnDemandReportRendering.ImageMapArea : object {
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ImageMapAreaInstance : object {
    private ImageMapAreaShape m_shape;
    private Single[] m_coordinates;
    private string m_toolTip;
    private static Declaration m_Declaration;
    public ImageMapAreaShape Shape { get; }
    public Single[] Coordinates { get; }
    public string ToolTip { get; }
    internal ImageMapAreaInstance(ImageMapAreaShape shape, Single[] coordinates);
    internal ImageMapAreaInstance(ImageMapAreaShape shape, Single[] coordinates, string toolTip);
    internal ImageMapAreaInstance(ImageMapArea renderImageMapArea);
    private static ImageMapAreaInstance();
    public ImageMapAreaShape get_Shape();
    public Single[] get_Coordinates();
    public string get_ToolTip();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    private static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ImageMapAreaInstanceCollection : ReportElementCollectionBase`1<ImageMapAreaInstance> {
    private List`1<ImageMapAreaInstance> m_list;
    public ImageMapAreaInstance Item { get; }
    public int Count { get; }
    internal List`1<ImageMapAreaInstance> InternalList { get; }
    internal ImageMapAreaInstanceCollection(ImageMapAreasCollection imageMaps);
    public virtual ImageMapAreaInstance get_Item(int index);
    public virtual int get_Count();
    internal List`1<ImageMapAreaInstance> get_InternalList();
    internal ImageMapAreaInstance Add(ImageMapAreaShape shape, Single[] coordinates);
    internal ImageMapAreaInstance Add(ImageMapAreaShape shape, Single[] coordinates, string toolTip);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalChartDataPoint : ChartDataPoint {
    private ChartDataPoint m_dataPointDef;
    private ReportVariantProperty m_axisLabel;
    private ChartItemInLegend m_itemInLegend;
    private ReportStringProperty m_toolTip;
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public ChartDataPointValues DataPointValues { get; }
    public ChartItemInLegend ItemInLegend { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public Style Style { get; }
    public ChartMarker Marker { get; }
    public ChartDataLabel DataLabel { get; }
    public ReportVariantProperty AxisLabel { get; }
    public ReportStringProperty ToolTip { get; }
    internal ChartDataPoint DataPointDef { get; }
    internal ChartDataPoint RenderItem { get; }
    internal ChartDataPoint RenderDataPointDef { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal InternalChartDataPoint(Chart owner, int rowIndex, int colIndex, ChartDataPoint dataPointDef);
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual ChartDataPointValues get_DataPointValues();
    public virtual ChartItemInLegend get_ItemInLegend();
    public sealed virtual string get_UniqueName();
    public virtual ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual Style get_Style();
    public virtual ChartMarker get_Marker();
    public virtual ChartDataLabel get_DataLabel();
    public virtual ReportVariantProperty get_AxisLabel();
    public virtual ReportStringProperty get_ToolTip();
    internal virtual ChartDataPoint get_DataPointDef();
    internal virtual ChartDataPoint get_RenderItem();
    internal virtual ChartDataPoint get_RenderDataPointDef();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalChartDynamicMemberInstance : ChartDynamicMemberInstance {
    internal InternalChartDynamicMemberInstance(Chart owner, ChartMember memberDef);
    public virtual bool MoveNext();
    public virtual bool SetInstanceIndex(int index);
    public virtual void ResetContext();
    private bool IsContextValid(int context);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalChartMember : ChartMember {
    private ChartMember m_memberDef;
    private IReportScope m_reportScope;
    private bool m_customPropertyCollectionReady;
    private string m_uniqueName;
    internal string UniqueName { get; }
    public string ID { get; }
    public ReportStringProperty Label { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public ChartMemberCollection Children { get; }
    public bool IsStatic { get; }
    public bool IsCategory { get; }
    public int SeriesSpan { get; }
    public int CategorySpan { get; }
    public int MemberCellIndex { get; }
    public bool IsTotal { get; }
    internal ChartMember MemberDefinition { get; }
    internal IReportScope ReportScope { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal IReportScopeInstance ReportScopeInstance { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ChartMemberInstance Instance { get; }
    internal InternalChartMember(IReportScope reportScope, IDefinitionPath parentDefinitionPath, Chart owner, ChartMember parent, ChartMember memberDef, int parentCollectionIndex);
    internal virtual string get_UniqueName();
    public virtual string get_ID();
    public virtual ReportStringProperty get_Label();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual ChartMemberCollection get_Children();
    public virtual bool get_IsStatic();
    public virtual bool get_IsCategory();
    public virtual int get_SeriesSpan();
    public virtual int get_CategorySpan();
    public virtual int get_MemberCellIndex();
    public virtual bool get_IsTotal();
    internal virtual ChartMember get_MemberDefinition();
    internal virtual IReportScope get_ReportScope();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal virtual IReportScopeInstance get_ReportScopeInstance();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual ChartMemberInstance get_Instance();
    internal virtual void SetNewContext(bool fromMoveNext);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalChartMemberCollection : ChartMemberCollection {
    private ChartMember m_parent;
    private ChartMemberList m_memberDefs;
    public ChartMember Item { get; }
    public int Count { get; }
    internal InternalChartMemberCollection(IDefinitionPath parentDefinitionPath, Chart owner, ChartMember parent, ChartMemberList memberDefs);
    public virtual ChartMember get_Item(int index);
    public virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalChartSeries : ChartSeries {
    private ChartSeries m_chartSeriesDef;
    private ChartSeriesInstance m_instance;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ReportEnumProperty`1<ChartSeriesType> m_type;
    private ReportEnumProperty`1<ChartSeriesSubtype> m_subtype;
    private ChartSmartLabel m_smartLabel;
    private ChartEmptyPoints m_emptyPoints;
    private ReportStringProperty m_legendName;
    private ReportStringProperty m_legendText;
    private ReportBoolProperty m_hideInLegend;
    private ReportStringProperty m_chartAreaName;
    private ReportStringProperty m_valueAxisName;
    private ReportStringProperty m_categoryAxisName;
    private CustomPropertyCollection m_customProperties;
    private bool m_customPropertiesReady;
    private ChartDataLabel m_dataLabel;
    private ChartMarker m_marker;
    private IReportScope m_reportScope;
    private ChartDerivedSeries m_parentDerivedSeries;
    private List`1<ChartDerivedSeries> m_childrenDerivedSeries;
    private ReportStringProperty m_toolTip;
    private ReportBoolProperty m_hidden;
    private ChartItemInLegend m_chartItemInLegend;
    public ChartDataPoint Item { get; }
    public int Count { get; }
    public string Name { get; }
    public string UniqueName { get; }
    public Style Style { get; }
    internal ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ReportEnumProperty`1<ChartSeriesType> Type { get; }
    public ReportEnumProperty`1<ChartSeriesSubtype> Subtype { get; }
    public ChartSmartLabel SmartLabel { get; }
    public ChartEmptyPoints EmptyPoints { get; }
    public ReportStringProperty LegendName { get; }
    internal ReportStringProperty LegendText { get; }
    internal ReportBoolProperty HideInLegend { get; }
    public ReportStringProperty ChartAreaName { get; }
    public ReportStringProperty ValueAxisName { get; }
    public ReportStringProperty CategoryAxisName { get; }
    public ChartDataLabel DataLabel { get; }
    public ChartMarker Marker { get; }
    internal ReportStringProperty ToolTip { get; }
    public ReportBoolProperty Hidden { get; }
    public ChartItemInLegend ChartItemInLegend { get; }
    internal ChartSeries ChartSeriesDef { get; }
    internal Chart ChartDef { get; }
    internal IReportScope ReportScope { get; }
    public ChartSeriesInstance Instance { get; }
    internal List`1<ChartDerivedSeries> ChildrenDerivedSeries { get; }
    internal InternalChartSeries(ChartDerivedSeries parentDerivedSeries);
    internal InternalChartSeries(Chart chart, int seriesIndex, ChartSeries seriesDef);
    public virtual ChartDataPoint get_Item(int index);
    public virtual int get_Count();
    public virtual string get_Name();
    public sealed virtual string get_UniqueName();
    public virtual Style get_Style();
    internal virtual ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual ReportEnumProperty`1<ChartSeriesType> get_Type();
    public virtual ReportEnumProperty`1<ChartSeriesSubtype> get_Subtype();
    public virtual ChartSmartLabel get_SmartLabel();
    public virtual ChartEmptyPoints get_EmptyPoints();
    public virtual ReportStringProperty get_LegendName();
    internal virtual ReportStringProperty get_LegendText();
    internal virtual ReportBoolProperty get_HideInLegend();
    public virtual ReportStringProperty get_ChartAreaName();
    public virtual ReportStringProperty get_ValueAxisName();
    public virtual ReportStringProperty get_CategoryAxisName();
    public virtual ChartDataLabel get_DataLabel();
    public virtual ChartMarker get_Marker();
    internal virtual ReportStringProperty get_ToolTip();
    public virtual ReportBoolProperty get_Hidden();
    public virtual ChartItemInLegend get_ChartItemInLegend();
    internal ChartSeries get_ChartSeriesDef();
    internal Chart get_ChartDef();
    internal IReportScope get_ReportScope();
    public virtual ChartSeriesInstance get_Instance();
    internal List`1<ChartDerivedSeries> get_ChildrenDerivedSeries();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalChartSeriesCollection : ChartSeriesCollection {
    private ChartSeriesList m_seriesDefs;
    public ChartSeries Item { get; }
    public int Count { get; }
    internal InternalChartSeriesCollection(Chart owner, ChartSeriesList seriesDefs);
    public virtual ChartSeries get_Item(int index);
    public virtual int get_Count();
    internal InternalChartSeries GetByName(string seriesName);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDataCell : DataCell {
    private DataCell m_dataCellDef;
    public DataValueCollection DataValues { get; }
    internal DataCell DataCellDef { get; }
    internal DataCell RenderItem { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal InternalDataCell(CustomReportItem owner, int rowIndex, int colIndex, DataCell dataCellDef);
    public virtual DataValueCollection get_DataValues();
    internal virtual DataCell get_DataCellDef();
    internal virtual DataCell get_RenderItem();
    internal virtual IRIFReportScope get_RIFReportScope();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDataMember : DataMember {
    private DataMember m_memberDef;
    private IReportScope m_reportScope;
    private string m_uniqueName;
    private bool m_customPropertyCollectionReady;
    internal string UniqueName { get; }
    public int ColSpan { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public string ID { get; }
    public bool IsColumn { get; }
    public bool IsStatic { get; }
    public int MemberCellIndex { get; }
    internal IReportScope ReportScope { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal IReportScopeInstance ReportScopeInstance { get; }
    public int RowSpan { get; }
    public DataMemberInstance Instance { get; }
    internal DataMember MemberDefinition { get; }
    public DataMemberCollection Children { get; }
    internal InternalDataMember(IReportScope reportScope, IDefinitionPath parentDefinitionPath, CustomReportItem owner, DataMember parent, DataMember memberDef, int parentCollectionIndex);
    internal virtual string get_UniqueName();
    public virtual int get_ColSpan();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual string get_ID();
    public virtual bool get_IsColumn();
    public virtual bool get_IsStatic();
    public virtual int get_MemberCellIndex();
    internal virtual IReportScope get_ReportScope();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal virtual IReportScopeInstance get_ReportScopeInstance();
    public virtual int get_RowSpan();
    public virtual DataMemberInstance get_Instance();
    internal virtual DataMember get_MemberDefinition();
    internal virtual void SetNewContext(bool fromMoveNext);
    public virtual DataMemberCollection get_Children();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDataMemberCollection : DataMemberCollection {
    private DataMember m_parent;
    private DataMemberList m_memberDefs;
    public DataMember Item { get; }
    public int Count { get; }
    internal InternalDataMemberCollection(IDefinitionPath parentDefinitionPath, CustomReportItem owner, DataMember parent, DataMemberList memberDefs);
    public virtual DataMember get_Item(int index);
    public virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDataRow : DataRow {
    private CustomDataRow m_rowDef;
    public DataCell Item { get; }
    public int Count { get; }
    internal InternalDataRow(CustomReportItem owner, int rowIndex, CustomDataRow rowDef);
    public virtual DataCell get_Item(int index);
    public virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDataRowCollection : DataRowCollection {
    private CustomDataRowList m_dataRowDefs;
    public DataRow Item { get; }
    public int Count { get; }
    internal InternalDataRowCollection(CustomReportItem owner, CustomDataRowList dataRowDefs);
    public virtual DataRow get_Item(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDataValueInstance : DataValueInstance {
    private DataValue m_dataValueDef;
    private string m_name;
    private object m_value;
    public string Name { get; }
    public object Value { get; }
    internal InternalDataValueInstance(IReportScope reportScope, DataValue dataValueDef);
    public virtual string get_Name();
    public virtual object get_Value();
    private void EvaluateNameAndValue();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDocumentMap : DocumentMap {
    private DocumentMapReader m_reader;
    private OnDemandDocumentMapNode System.Collections.Generic.IEnumerator<Microsoft.ReportingServices.ReportProcessing.OnDemandDocumentMapNode>.Current { get; }
    public DocumentMapNode Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal InternalDocumentMap(DocumentMapReader aReader);
    public virtual void Close();
    private sealed virtual override OnDemandDocumentMapNode System.Collections.Generic.IEnumerator<Microsoft.ReportingServices.ReportProcessing.OnDemandDocumentMapNode>.get_Current();
    public virtual DocumentMapNode get_Current();
    public virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalDynamicDataMemberInstance : DataDynamicMemberInstance {
    internal InternalDynamicDataMemberInstance(CustomReportItem owner, DataMember memberDef);
    public virtual void ResetContext();
    public virtual bool MoveNext();
    public virtual bool SetInstanceIndex(int index);
    private bool IsContextValid(int context);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalParagraph : Paragraph {
    private ReportSizeProperty m_leftIndent;
    private ReportSizeProperty m_rightIndent;
    private ReportSizeProperty m_hangingIndent;
    private ReportSizeProperty m_spaceBefore;
    private ReportSizeProperty m_spaceAfter;
    private Paragraph m_paragraphDef;
    internal IStyleContainer StyleContainer { get; }
    public string ID { get; }
    public ReportSizeProperty LeftIndent { get; }
    public ReportSizeProperty RightIndent { get; }
    public ReportSizeProperty HangingIndent { get; }
    public ReportEnumProperty`1<ListStyle> ListStyle { get; }
    public ReportIntProperty ListLevel { get; }
    public ReportSizeProperty SpaceBefore { get; }
    public ReportSizeProperty SpaceAfter { get; }
    internal Paragraph ParagraphDef { get; }
    public ParagraphInstance Instance { get; }
    internal InternalParagraph(TextBox textBox, int indexIntoParentCollectionDef, Paragraph paragraph, RenderingContext renderingContext);
    internal virtual IStyleContainer get_StyleContainer();
    public virtual string get_ID();
    public virtual ReportSizeProperty get_LeftIndent();
    public virtual ReportSizeProperty get_RightIndent();
    public virtual ReportSizeProperty get_HangingIndent();
    public virtual ReportEnumProperty`1<ListStyle> get_ListStyle();
    public virtual ReportIntProperty get_ListLevel();
    public virtual ReportSizeProperty get_SpaceBefore();
    public virtual ReportSizeProperty get_SpaceAfter();
    internal Paragraph get_ParagraphDef();
    public virtual ParagraphInstance get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalParagraphInstance : ParagraphInstance {
    private ReportSize m_leftIndent;
    private ReportSize m_rightIndent;
    private ReportSize m_hangingIndent;
    private ReportSize m_spaceBefore;
    private ReportSize m_spaceAfter;
    private Nullable`1<ListStyle> m_listStyle;
    private Nullable`1<int> m_listLevel;
    public string UniqueName { get; }
    public ReportSize LeftIndent { get; }
    public ReportSize RightIndent { get; }
    public ReportSize HangingIndent { get; }
    public ListStyle ListStyle { get; }
    public int ListLevel { get; }
    public ReportSize SpaceBefore { get; }
    public ReportSize SpaceAfter { get; }
    internal Paragraph ParagraphDef { get; }
    public bool IsCompiled { get; }
    internal InternalParagraphInstance(Paragraph paragraphDef);
    internal InternalParagraphInstance(ReportElement reportElementDef);
    public virtual string get_UniqueName();
    public virtual ReportSize get_LeftIndent();
    internal ReportSize GetLeftIndent(bool constantUsable);
    public virtual ReportSize get_RightIndent();
    internal ReportSize GetRightIndent(bool constantUsable);
    public virtual ReportSize get_HangingIndent();
    internal ReportSize GetHangingIndent(bool constantUsable);
    public virtual ListStyle get_ListStyle();
    public virtual int get_ListLevel();
    public virtual ReportSize get_SpaceBefore();
    internal ReportSize GetSpaceBefore(bool constantUsable);
    public virtual ReportSize get_SpaceAfter();
    internal ReportSize GetSpaceAfter(bool constantUsable);
    internal Paragraph get_ParagraphDef();
    public virtual bool get_IsCompiled();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixCell : TablixCell {
    private TablixCell m_cellDef;
    public string ID { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public CellContents CellContents { get; }
    internal InternalTablixCell(Tablix owner, int rowIndex, int colIndex, TablixCell cellDef);
    public virtual string get_ID();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual CellContents get_CellContents();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixDynamicMemberInstance : TablixDynamicMemberInstance {
    internal InternalTablixDynamicMemberInstance(Tablix owner, TablixMember memberDef);
    public virtual void ResetContext();
    public virtual bool MoveNext();
    public virtual bool SetInstanceIndex(int index);
    private bool IsContextValid(int context);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixMember : TablixMember {
    private TablixMember m_memberDef;
    private bool m_customPropertyCollectionReady;
    private IReportScope m_reportScope;
    internal string UniqueName { get; }
    public string ID { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public TablixHeader TablixHeader { get; }
    public TablixMemberCollection Children { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public bool IsStatic { get; }
    public bool IsColumn { get; }
    internal int RowSpan { get; }
    internal int ColSpan { get; }
    public int MemberCellIndex { get; }
    public bool IsTotal { get; }
    internal PageBreakLocation PropagatedGroupBreak { get; }
    public Visibility Visibility { get; }
    public bool HideIfNoRows { get; }
    public bool KeepTogether { get; }
    internal TablixMember MemberDefinition { get; }
    public bool FixedData { get; }
    public KeepWithGroup KeepWithGroup { get; }
    public bool RepeatOnNewPage { get; }
    internal IReportScope ReportScope { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal IReportScopeInstance ReportScopeInstance { get; }
    public TablixMemberInstance Instance { get; }
    internal InternalTablixMember(IReportScope reportScope, IDefinitionPath parentDefinitionPath, Tablix owner, TablixMember parent, TablixMember memberDef, int index);
    internal virtual string get_UniqueName();
    public virtual string get_ID();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual TablixHeader get_TablixHeader();
    public virtual TablixMemberCollection get_Children();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual bool get_IsStatic();
    public virtual bool get_IsColumn();
    internal virtual int get_RowSpan();
    internal virtual int get_ColSpan();
    public virtual int get_MemberCellIndex();
    public virtual bool get_IsTotal();
    internal virtual PageBreakLocation get_PropagatedGroupBreak();
    public virtual Visibility get_Visibility();
    public virtual bool get_HideIfNoRows();
    public virtual bool get_KeepTogether();
    internal virtual TablixMember get_MemberDefinition();
    public virtual bool get_FixedData();
    public virtual KeepWithGroup get_KeepWithGroup();
    public virtual bool get_RepeatOnNewPage();
    internal virtual IReportScope get_ReportScope();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal virtual IReportScopeInstance get_ReportScopeInstance();
    public virtual TablixMemberInstance get_Instance();
    internal virtual void SetNewContext(bool fromMoveNext);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixMemberCollection : TablixMemberCollection {
    private TablixMember m_parent;
    private TablixMemberList m_memberDefs;
    public TablixMember Item { get; }
    public int Count { get; }
    internal TablixMemberList MemberDefs { get; }
    internal InternalTablixMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner, TablixMember parent, TablixMemberList memberDefs);
    public virtual TablixMember get_Item(int index);
    public virtual int get_Count();
    internal TablixMemberList get_MemberDefs();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixMemberVisibility : Visibility {
    private InternalTablixMember m_owner;
    public ReportBoolProperty Hidden { get; }
    public string ToggleItem { get; }
    public SharedHiddenState HiddenState { get; }
    public bool RecursiveToggleReceiver { get; }
    public InternalTablixMemberVisibility(InternalTablixMember owner);
    public virtual ReportBoolProperty get_Hidden();
    public virtual string get_ToggleItem();
    public virtual SharedHiddenState get_HiddenState();
    public virtual bool get_RecursiveToggleReceiver();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixMemberVisibilityInstance : VisibilityInstance {
    private InternalTablixMember m_owner;
    public bool CurrentlyHidden { get; }
    public bool StartHidden { get; }
    internal InternalTablixMemberVisibilityInstance(InternalTablixMember owner);
    public virtual bool get_CurrentlyHidden();
    public virtual bool get_StartHidden();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixRow : TablixRow {
    private TablixRow m_rowDef;
    private ReportSize m_height;
    private TablixCell[] m_cellROMDefs;
    public TablixCell Item { get; }
    public int Count { get; }
    public ReportSize Height { get; }
    internal InternalTablixRow(Tablix owner, int rowIndex, TablixRow rowDef);
    public virtual TablixCell get_Item(int index);
    internal virtual IDataRegionCell GetIfExists(int index);
    public virtual int get_Count();
    public virtual ReportSize get_Height();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTablixRowCollection : TablixRowCollection {
    private TablixRowList m_rowDefs;
    private TablixRow[] m_rowROMDefs;
    public TablixRow Item { get; }
    public int Count { get; }
    internal InternalTablixRowCollection(Tablix owner, TablixRowList rowDefs);
    public virtual TablixRow get_Item(int index);
    internal IDataRegionRow GetIfExists(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTextRun : TextRun {
    private ReportStringProperty m_toolTip;
    private ActionInfo m_actionInfo;
    private CompiledRichTextInstance m_compiledRichTextInstance;
    private TextRun m_textRunDef;
    internal IStyleContainer StyleContainer { get; }
    public string ID { get; }
    public string Label { get; }
    public ReportStringProperty Value { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportEnumProperty`1<MarkupType> MarkupType { get; }
    public TypeCode SharedTypeCode { get; }
    internal TextRun TextRunDef { get; }
    public bool FormattedValueExpressionBased { get; }
    public TextRunInstance Instance { get; }
    internal List`1<string> FieldsUsedInValueExpression { get; }
    public CompiledRichTextInstance CompiledInstance { get; }
    internal InternalTextRun(Paragraph paragraph, int indexIntoParentCollectionDef, TextRun textRun, RenderingContext renderingContext);
    internal virtual IStyleContainer get_StyleContainer();
    public virtual string get_ID();
    public virtual string get_Label();
    public virtual ReportStringProperty get_Value();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.get_UniqueName();
    public virtual ActionInfo get_ActionInfo();
    public virtual ReportStringProperty get_ToolTip();
    public virtual ReportEnumProperty`1<MarkupType> get_MarkupType();
    public virtual TypeCode get_SharedTypeCode();
    internal TextRun get_TextRunDef();
    public virtual bool get_FormattedValueExpressionBased();
    public virtual TextRunInstance get_Instance();
    internal virtual List`1<string> get_FieldsUsedInValueExpression();
    public virtual CompiledRichTextInstance get_CompiledInstance();
    internal virtual void SetNewContext();
    internal virtual void SetNewContextChildren();
    private bool StyleAttributeExpressionBased(Style style, string styleName);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.InternalTextRunInstance : TextRunInstance {
    private string m_toolTip;
    private Nullable`1<MarkupType> m_markupType;
    private bool m_formattedValueEvaluated;
    private string m_formattedValue;
    private VariantResult m_originalValue;
    private bool m_originalValueEvaluated;
    private bool m_originalValueNeedsReset;
    public string UniqueName { get; }
    public string Value { get; }
    public object OriginalValue { get; }
    public string ToolTip { get; }
    public MarkupType MarkupType { get; }
    public TypeCode TypeCode { get; }
    internal TextRun TextRunDef { get; }
    public bool IsCompiled { get; }
    public bool ProcessedWithError { get; }
    internal InternalTextRunInstance(InternalTextRun textRunDef);
    public virtual string get_UniqueName();
    public virtual string get_Value();
    internal VariantResult GetOriginalValue();
    private void EvaluateOriginalValue();
    public virtual object get_OriginalValue();
    public virtual string get_ToolTip();
    public virtual MarkupType get_MarkupType();
    public virtual TypeCode get_TypeCode();
    internal TextRun get_TextRunDef();
    public virtual bool get_IsCompiled();
    public virtual bool get_ProcessedWithError();
    private bool IsDateTimeOffsetOrTimeSpan();
    protected virtual void ResetInstanceCache();
    internal List`1<string> GetFieldsUsedInValueExpression();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem {
    public PageBreakLocation PageBreakLocation { get; }
    public abstract virtual PageBreakLocation get_PageBreakLocation();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IRenderingExtension {
    public abstract virtual bool Render(Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public abstract virtual void GetRenderingResource(CreateAndRegisterStream createAndRegisterStreamCallback, NameValueCollection deviceInfo);
    public abstract virtual bool RenderStream(string streamName, Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IReportScope {
    public IReportScopeInstance ReportScopeInstance { get; }
    public IRIFReportScope RIFReportScope { get; }
    public abstract virtual IReportScopeInstance get_ReportScopeInstance();
    public abstract virtual IRIFReportScope get_RIFReportScope();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance {
    public IReportScope ReportScope { get; }
    public string UniqueName { get; }
    public bool IsNewContext { get; public set; }
    public abstract virtual IReportScope get_ReportScope();
    public abstract virtual string get_UniqueName();
    public abstract virtual bool get_IsNewContext();
    public abstract virtual void set_IsNewContext(bool value);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IRichTextInstanceCreator {
    public abstract virtual IList`1<ICompiledParagraphInstance> CreateParagraphInstanceCollection();
    public abstract virtual ICompiledParagraphInstance CreateParagraphInstance();
    public abstract virtual ICompiledTextRunInstance CreateTextRunInstance();
    public abstract virtual IList`1<ICompiledTextRunInstance> CreateTextRunInstanceCollection();
    public abstract virtual ICompiledStyleInstance CreateStyleInstance(bool isParagraph);
    public abstract virtual IActionInstance CreateActionInstance();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IRichTextLogger {
    public RSTrace Tracer { get; }
    public abstract virtual RSTrace get_Tracer();
    public abstract virtual void RegisterOutOfRangeSizeWarning(string propertyName, string value, string minVal, string maxVal);
    public abstract virtual void RegisterInvalidValueWarning(string propertyName, string value, int charPosition);
    public abstract virtual void RegisterInvalidColorWarning(string propertyName, string value, int charPosition);
    public abstract virtual void RegisterInvalidSizeWarning(string propertyName, string value, int charPosition);
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner {
    public string UniqueName { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public abstract virtual string get_UniqueName();
    public abstract virtual List`1<string> get_FieldsUsedInValueExpression();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.IROMStyleDefinitionContainer {
    public Style Style { get; }
    public abstract virtual Style get_Style();
}
internal interface Microsoft.ReportingServices.OnDemandReportRendering.ITotalPages {
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.KeepWithGroup : Enum {
    public int value__;
    public static KeepWithGroup None;
    public static KeepWithGroup Before;
    public static KeepWithGroup After;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Line : ReportItem {
    public bool Slant { get; }
    internal Line(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, Line reportItemDef, RenderingContext renderingContext);
    internal Line(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, Line renderLine, RenderingContext renderingContext);
    public bool get_Slant();
    internal virtual ReportItemInstance GetOrCreateInstance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearGauge : Gauge {
    private LinearScaleCollection m_gaugeScales;
    private ReportEnumProperty`1<GaugeOrientations> m_orientation;
    public LinearScaleCollection GaugeScales { get; }
    public ReportEnumProperty`1<GaugeOrientations> Orientation { get; }
    internal LinearGauge LinearGaugeDef { get; }
    public LinearGaugeInstance Instance { get; }
    internal LinearGauge(LinearGauge defObject, GaugePanel gaugePanel);
    public LinearScaleCollection get_GaugeScales();
    public ReportEnumProperty`1<GaugeOrientations> get_Orientation();
    internal LinearGauge get_LinearGaugeDef();
    public LinearGaugeInstance get_Instance();
    internal virtual BaseInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearGaugeCollection : GaugePanelObjectCollectionBase`1<LinearGauge> {
    private GaugePanel m_gaugePanel;
    public LinearGauge Item { get; }
    public int Count { get; }
    internal LinearGaugeCollection(GaugePanel gaugePanel);
    protected virtual LinearGauge CreateGaugePanelObject(int index);
    public LinearGauge get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearGaugeInstance : GaugeInstance {
    private LinearGauge m_defObject;
    private Nullable`1<GaugeOrientations> m_orientation;
    public GaugeOrientations Orientation { get; }
    internal LinearGaugeInstance(LinearGauge defObject);
    public GaugeOrientations get_Orientation();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearPointer : GaugePointer {
    private ReportEnumProperty`1<LinearPointerTypes> m_type;
    private Thermometer m_thermometer;
    public ReportEnumProperty`1<LinearPointerTypes> Type { get; }
    public Thermometer Thermometer { get; }
    internal LinearPointer LinearPointerDef { get; }
    public LinearPointerInstance Instance { get; }
    internal LinearPointer(LinearPointer defObject, GaugePanel gaugePanel);
    public ReportEnumProperty`1<LinearPointerTypes> get_Type();
    public Thermometer get_Thermometer();
    internal LinearPointer get_LinearPointerDef();
    public LinearPointerInstance get_Instance();
    internal virtual GaugePointerInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearPointerCollection : GaugePanelObjectCollectionBase`1<LinearPointer> {
    private GaugePanel m_gaugePanel;
    private LinearScale m_linearScale;
    public LinearPointer Item { get; }
    public int Count { get; }
    internal LinearPointerCollection(LinearScale linearScale, GaugePanel gaugePanel);
    protected virtual LinearPointer CreateGaugePanelObject(int index);
    public LinearPointer get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearPointerInstance : GaugePointerInstance {
    private LinearPointer m_defObject;
    private Nullable`1<LinearPointerTypes> m_type;
    public LinearPointerTypes Type { get; }
    internal LinearPointerInstance(LinearPointer defObject);
    public LinearPointerTypes get_Type();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.LinearPointerTypes : Enum {
    public int value__;
    public static LinearPointerTypes Marker;
    public static LinearPointerTypes Bar;
    public static LinearPointerTypes Thermometer;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearScale : GaugeScale {
    private LinearPointerCollection m_gaugePointers;
    private ReportDoubleProperty m_startMargin;
    private ReportDoubleProperty m_endMargin;
    private ReportDoubleProperty m_position;
    public LinearPointerCollection GaugePointers { get; }
    public ReportDoubleProperty StartMargin { get; }
    public ReportDoubleProperty EndMargin { get; }
    public ReportDoubleProperty Position { get; }
    internal LinearScale LinearScaleDef { get; }
    public LinearScaleInstance Instance { get; }
    internal LinearScale(LinearScale defObject, GaugePanel gaugePanel);
    public LinearPointerCollection get_GaugePointers();
    public ReportDoubleProperty get_StartMargin();
    public ReportDoubleProperty get_EndMargin();
    public ReportDoubleProperty get_Position();
    internal LinearScale get_LinearScaleDef();
    public LinearScaleInstance get_Instance();
    internal virtual GaugeScaleInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearScaleCollection : GaugePanelObjectCollectionBase`1<LinearScale> {
    private GaugePanel m_gaugePanel;
    private LinearGauge m_linearGauge;
    public LinearScale Item { get; }
    public int Count { get; }
    internal LinearScaleCollection(LinearGauge linearGauge, GaugePanel gaugePanel);
    protected virtual LinearScale CreateGaugePanelObject(int index);
    public LinearScale get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.LinearScaleInstance : GaugeScaleInstance {
    private LinearScale m_defObject;
    private Nullable`1<double> m_startMargin;
    private Nullable`1<double> m_endMargin;
    private Nullable`1<double> m_position;
    public double StartMargin { get; }
    public double EndMargin { get; }
    public double Position { get; }
    internal LinearScaleInstance(LinearScale defObject);
    public double get_StartMargin();
    public double get_EndMargin();
    public double get_Position();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.LineInstance : ReportItemInstance {
    internal LineInstance(Line reportItemDef);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ListStyle : Enum {
    public int value__;
    public static ListStyle None;
    public static ListStyle Numbered;
    public static ListStyle Bulleted;
}
internal static class Microsoft.ReportingServices.OnDemandReportRendering.MappingHelper : object {
    private static string m_defaultFontFamily;
    private static float m_defaultFontSize;
    private static Color m_defaultShadowColor;
    private static MappingHelper();
    internal static double ConvertToDouble(object value, bool checkForMaxMinValue, bool checkForStringDate);
    internal static double ConvertToDouble(object value, bool checkForMaxMinValue, bool checkForStringDate, Boolean& isDateTime);
    internal static Single[] ConvertCoordinatesToRelative(Single[] pixelCoordinates, float width, float height);
    private static Action GetActionFromActionInfo(ActionInfo actionInfo);
    private static string EvaluateHref(Action action);
    private static void EvaluateActionParameters(ActionDrillthrough actionDrillthroughSource, ActionDrillthrough actionDrillthroughDestination);
    internal static ActionInfoWithDynamicImageMap CreateActionInfoDynamic(ReportItem reportItem, ActionInfo actionInfo, string toolTip, String& href);
    internal static ActionInfoWithDynamicImageMapCollection GetImageMaps(IEnumerable`1<MapAreaInfo> mapAreaInfoList, ActionInfoWithDynamicImageMapCollection actions, ReportItem reportItem);
    private static int AddMapArea(MapAreaInfo mapAreaInfo, ActionInfoWithDynamicImageMapCollection actions, ReportItem reportItem);
    internal static Color GetStyleColor(Style style, StyleInstance styleInstance);
    internal static Color GetStyleBackgroundColor(Style style, StyleInstance styleInstance);
    internal static Color GetStyleBackGradientEndColor(Style style, StyleInstance styleInstance);
    internal static Color GetStyleShadowColor(Style style, StyleInstance styleInstance);
    internal static BackgroundGradients GetStyleBackGradientType(Style style, StyleInstance styleInstance);
    internal static BackgroundHatchTypes GetStyleBackgroundHatchType(Style style, StyleInstance styleInstance);
    internal static int GetStyleShadowOffset(Style style, StyleInstance styleInstance, float dpi);
    internal static Font GetDefaultFont();
    internal static Font GetStyleFont(Style style, StyleInstance styleInstance);
    internal static TextDecorations GetStyleFontTextDecoration(Style style, StyleInstance styleInstance);
    internal static FontWeights GetStyleFontWeight(Style style, StyleInstance styleInstance);
    internal static FontStyles GetStyleFontStyle(Style style, StyleInstance styleInstance);
    internal static float GetStyleFontSize(Style style, StyleInstance styleInstance);
    internal static string GetStyleFontFamily(Style style, StyleInstance styleInstance);
    internal static FontStyle GetStyleFontStyle(FontStyles style, FontWeights weight, TextDecorations textDecoration);
    internal static Color GetStyleBorderColor(Border border);
    internal static int GetStyleBorderWidth(Border border, float dpi);
    internal static BorderStyles GetStyleBorderStyle(Border border);
    internal static TextAlignments GetStyleTextAlign(Style style, StyleInstance styleInstance);
    internal static VerticalAlignments GetStyleVerticalAlignment(Style style, StyleInstance styleInstance);
    internal static TextEffects GetStyleTextEffect(Style style, StyleInstance styleInstance);
    internal static string GetStyleFormat(Style style, StyleInstance styleInstance);
    internal static ContentAlignment GetStyleContentAlignment(Style style, StyleInstance styleInstance);
    internal static bool IsStylePropertyDefined(ReportProperty property);
    internal static bool GetColorFromReportColorProperty(ReportColorProperty reportColorProperty, Color& color);
    internal static RightToLeft GetStyleDirection(Style style, StyleInstance styleInstance);
    internal static double ToPixels(ReportSize size, float dpi);
    internal static int ToIntPixels(ReportSize size, float dpi);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.MarkupType : Enum {
    public int value__;
    public static MarkupType None;
    public static MarkupType HTML;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.MatrixMemberInfoCache : object {
    private int m_startIndex;
    private Int32[] m_cellIndexes;
    private MatrixMemberInfoCache[] m_children;
    internal bool IsOptimizedNode { get; }
    internal MatrixMemberInfoCache[] Children { get; }
    internal MatrixMemberInfoCache(int startIndex, int length);
    internal bool get_IsOptimizedNode();
    internal int GetCellIndex(ShimMatrixMember member);
    internal MatrixMemberInfoCache[] get_Children();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.MemberHierarchy`1 : object {
    protected DataRegionMemberCollection`1<T> m_members;
    protected bool m_isColumn;
    protected ReportItem m_owner;
    protected string m_definitionPath;
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    internal MemberHierarchy`1(ReportItem owner, bool isColumn);
    public sealed virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    internal void SetNewContext();
    internal abstract virtual void ResetContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.NumericIndicator : GaugePanelItem {
    internal NumericIndicator NumericIndicatorDef { get; }
    public NumericIndicatorInstance Instance { get; }
    internal NumericIndicator(NumericIndicator defObject, GaugePanel gaugePanel);
    internal NumericIndicator get_NumericIndicatorDef();
    public NumericIndicatorInstance get_Instance();
    internal virtual BaseInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.NumericIndicatorCollection : GaugePanelObjectCollectionBase`1<NumericIndicator> {
    private GaugePanel m_gaugePanel;
    public NumericIndicator Item { get; }
    public int Count { get; }
    internal NumericIndicatorCollection(GaugePanel gaugePanel);
    protected virtual NumericIndicator CreateGaugePanelObject(int index);
    public NumericIndicator get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.NumericIndicatorInstance : GaugePanelItemInstance {
    private NumericIndicator m_defObject;
    internal NumericIndicatorInstance(NumericIndicator defObject);
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.OnDemandPageEvaluation : PageEvaluation {
    private OnDemandProcessingContext m_processingContext;
    private Dictionary`2<string, AggregatesImpl> m_aggregatesOverReportItems;
    private ReportItemsImpl m_bodyItems;
    private ReportItemsImpl m_headFootItems;
    internal OnDemandPageEvaluation(Report report);
    internal virtual void Add(string textboxName, object textboxValue);
    internal virtual void UpdatePageSections(Page page);
    internal virtual void Reset(int newPageNumber, int newTotalPages);
    private void InitializeEnvironment();
    private void PageInit();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Page : ReportElement {
    private PageInstance m_instance;
    private Report m_reportDef;
    private Report m_renderReport;
    private RenderingContext m_headerFooterRenderingContext;
    private PageSection m_pageHeader;
    private PageSection m_pageFooter;
    public string ID { get; }
    public string DefinitionPath { get; }
    public PageSection PageHeader { get; }
    public PageSection PageFooter { get; }
    internal RenderingContext HeaderFooterRenderingContext { get; }
    public ReportSize PageHeight { get; }
    public ReportSize PageWidth { get; }
    public ReportSize InteractiveHeight { get; }
    public ReportSize InteractiveWidth { get; }
    public ReportSize LeftMargin { get; }
    public ReportSize RightMargin { get; }
    public ReportSize TopMargin { get; }
    public ReportSize BottomMargin { get; }
    internal bool UseRenderStyle { get; }
    internal IStyleContainer StyleContainer { get; }
    public int Columns { get; }
    public ReportSize ColumnSpacing { get; }
    internal Report RenderReport { get; }
    internal ReportItem RenderReportItem { get; }
    internal string InstanceUniqueName { get; }
    internal ReportElementInstance ReportElementInstance { get; }
    public PageInstance Instance { get; }
    internal Page(IReportScope reportScope, IDefinitionPath parentDefinitionPath, Report reportDef, RenderingContext renderingContext);
    internal Page(IDefinitionPath parentDefinitionPath, Report renderReport, RenderingContext renderingContext);
    internal void UpdateWithCurrentPageSections(PageSection header, PageSection footer);
    internal void UpdateSubReportContents(Report newRenderSubreport);
    public virtual string get_ID();
    public virtual string get_DefinitionPath();
    public PageSection get_PageHeader();
    public PageSection get_PageFooter();
    internal RenderingContext get_HeaderFooterRenderingContext();
    public ReportSize get_PageHeight();
    public ReportSize get_PageWidth();
    public ReportSize get_InteractiveHeight();
    public ReportSize get_InteractiveWidth();
    public ReportSize get_LeftMargin();
    public ReportSize get_RightMargin();
    public ReportSize get_TopMargin();
    public ReportSize get_BottomMargin();
    internal virtual bool get_UseRenderStyle();
    internal virtual IStyleContainer get_StyleContainer();
    public int get_Columns();
    public ReportSize get_ColumnSpacing();
    internal Report get_RenderReport();
    internal virtual ReportItem get_RenderReportItem();
    internal virtual string get_InstanceUniqueName();
    internal virtual ReportElementInstance get_ReportElementInstance();
    public PageInstance get_Instance();
    internal virtual void SetNewContextChildren();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PageBreak : object {
    private IPageBreakItem m_pageBreakItem;
    public PageBreakLocation BreakLocation { get; }
    internal PageBreak(IPageBreakItem pageBreakItem);
    public PageBreakLocation get_BreakLocation();
    internal static PageBreakLocation GetPageBreakLocation(bool pageBreakAtStart, bool pageBreakAtEnd);
    internal static PageBreakLocation MergePageBreakLocations(PageBreakLocation outer, PageBreakLocation inner);
    internal static bool HasPageBreakAtStart(PageBreakLocation pageBreakLoc);
    internal static bool HasPageBreakAtEnd(PageBreakLocation pageBreakLoc);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.PageBreakLocation : Enum {
    public int value__;
    public static PageBreakLocation None;
    public static PageBreakLocation Start;
    public static PageBreakLocation End;
    public static PageBreakLocation StartAndEnd;
    public static PageBreakLocation Between;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.PageEvaluation : object {
    protected int m_currentPageNumber;
    protected int m_totalPages;
    protected Report m_romReport;
    protected PageEvaluation(Report report);
    internal virtual void Reset(int newPageNumber, int newTotalPages);
    internal abstract virtual void Add(string textboxName, object textboxValue);
    internal abstract virtual void UpdatePageSections(Page page);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PageInstance : ReportElementInstance {
    public string UniqueName { get; }
    internal Page PageDefinition { get; }
    internal PageInstance(Page pageDef);
    public string get_UniqueName();
    internal Page get_PageDefinition();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PageSection : ReportElement {
    internal static string PageHeaderUniqueNamePrefix;
    internal static string PageFooterUniqueNamePrefix;
    private bool m_isHeader;
    private ReportSize m_height;
    private ReportItemCollection m_reportItems;
    private PageSectionInstance m_instance;
    public string ID { get; }
    public string DefinitionPath { get; }
    internal Page PageDefinition { get; }
    internal bool IsHeader { get; }
    public ReportSize Height { get; }
    public bool PrintOnFirstPage { get; }
    public bool PrintOnLastPage { get; }
    public ReportItemCollection ReportItemCollection { get; }
    internal string InstanceUniqueName { get; }
    internal ReportElementInstance ReportElementInstance { get; }
    public PageSectionInstance Instance { get; }
    internal PageSection(IReportScope reportScope, IDefinitionPath parentDefinitionPath, bool isHeader, PageSection pageSectionDef, RenderingContext renderingContext);
    internal PageSection(IDefinitionPath parentDefinitionPath, bool isHeader, PageSection renderPageSection, RenderingContext renderingContext);
    public virtual string get_ID();
    public virtual string get_DefinitionPath();
    internal Page get_PageDefinition();
    internal bool get_IsHeader();
    public ReportSize get_Height();
    public bool get_PrintOnFirstPage();
    public bool get_PrintOnLastPage();
    public ReportItemCollection get_ReportItemCollection();
    internal void UpdatePageSection(PageSection renderPageSection);
    internal virtual void SetNewContext();
    internal virtual void SetNewContextChildren();
    internal virtual string get_InstanceUniqueName();
    internal virtual ReportElementInstance get_ReportElementInstance();
    public PageSectionInstance get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PageSectionInstance : ReportElementInstance {
    public string UniqueName { get; }
    internal PageSection PageSectionDefinition { get; }
    internal PageSectionInstance(PageSection pageSectionDef);
    public string get_UniqueName();
    internal PageSection get_PageSectionDefinition();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.PaletteHatchBehavior : Enum {
    public int value__;
    public static PaletteHatchBehavior Default;
    public static PaletteHatchBehavior None;
    public static PaletteHatchBehavior Always;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.Paragraph : ReportElement {
    protected ReportIntProperty m_listLevel;
    protected ReportEnumProperty`1<ListStyle> m_listStyle;
    private string m_definitionPath;
    protected int m_indexIntoParentCollectionDef;
    protected ParagraphInstance m_instance;
    protected TextRunCollection m_textRunCollection;
    protected TextBox m_textBox;
    public string DefinitionPath { get; }
    internal string InstanceUniqueName { get; }
    public TextRunCollection TextRuns { get; }
    public ReportSizeProperty LeftIndent { get; }
    public ReportSizeProperty RightIndent { get; }
    public ReportSizeProperty HangingIndent { get; }
    public ReportEnumProperty`1<ListStyle> ListStyle { get; }
    public ReportIntProperty ListLevel { get; }
    public ReportSizeProperty SpaceBefore { get; }
    public ReportSizeProperty SpaceAfter { get; }
    internal TextBox TextBox { get; }
    internal ReportElementInstance ReportElementInstance { get; }
    public ParagraphInstance Instance { get; }
    internal Paragraph(TextBox textBox, int indexIntoParentCollectionDef, RenderingContext renderingContext);
    internal Paragraph(TextBox textBox, RenderingContext renderingContext);
    public virtual string get_DefinitionPath();
    internal virtual string get_InstanceUniqueName();
    public TextRunCollection get_TextRuns();
    public virtual ReportSizeProperty get_LeftIndent();
    public virtual ReportSizeProperty get_RightIndent();
    public virtual ReportSizeProperty get_HangingIndent();
    public abstract virtual ReportEnumProperty`1<ListStyle> get_ListStyle();
    public abstract virtual ReportIntProperty get_ListLevel();
    public virtual ReportSizeProperty get_SpaceBefore();
    public virtual ReportSizeProperty get_SpaceAfter();
    internal TextBox get_TextBox();
    internal virtual ReportElementInstance get_ReportElementInstance();
    public abstract virtual ParagraphInstance get_Instance();
    internal virtual void SetNewContext();
    internal virtual void SetNewContextChildren();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ParagraphCollection : ReportElementCollectionBase`1<Paragraph> {
    private TextBox m_textBox;
    private Paragraph[] m_paragraphs;
    public Paragraph Item { get; }
    public int Count { get; }
    internal ParagraphCollection(TextBox textBox);
    public virtual Paragraph get_Item(int i);
    public virtual int get_Count();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ParagraphFilteredStyle : Style {
    internal ParagraphFilteredStyle(ReportItem renderReportItem, RenderingContext renderingContext, bool useRenderStyle);
    protected virtual bool IsAvailableStyle(StyleAttributeNames styleName);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ParagraphInstance : ReportElementInstance {
    protected TextRunInstanceCollection m_textRunInstances;
    protected string m_uniqueName;
    public string UniqueName { get; }
    public ReportSize LeftIndent { get; }
    public ReportSize RightIndent { get; }
    public ReportSize HangingIndent { get; }
    public ListStyle ListStyle { get; }
    public int ListLevel { get; }
    public ReportSize SpaceBefore { get; }
    public ReportSize SpaceAfter { get; }
    public Paragraph Definition { get; }
    public TextRunInstanceCollection TextRunInstances { get; }
    public bool IsCompiled { get; }
    internal ParagraphInstance(Paragraph paragraphDef);
    protected ParagraphInstance(ReportElement reportElementDef);
    public abstract virtual string get_UniqueName();
    public virtual ReportSize get_LeftIndent();
    public virtual ReportSize get_RightIndent();
    public virtual ReportSize get_HangingIndent();
    public virtual ListStyle get_ListStyle();
    public virtual int get_ListLevel();
    public virtual ReportSize get_SpaceBefore();
    public virtual ReportSize get_SpaceAfter();
    public Paragraph get_Definition();
    public TextRunInstanceCollection get_TextRunInstances();
    public abstract virtual bool get_IsCompiled();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ParagraphInstanceCollection : object {
    private TextBox m_textbox;
    internal ParagraphInstanceCollection(TextBox textbox);
    public sealed virtual IEnumerator`1<ParagraphInstance> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ParagraphInstanceEnumerator : object {
    private TextBox m_textbox;
    private ParagraphInstance m_currentParagraphInstance;
    private int m_currentCompiledIndex;
    private int m_currentIndex;
    private CompiledParagraphInstanceCollection m_paragraphs;
    public ParagraphInstance Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal ParagraphInstanceEnumerator(TextBox textbox);
    public sealed virtual ParagraphInstance get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Parameter : object {
    private string m_name;
    private ReportVariantProperty m_value;
    private ReportBoolProperty m_omit;
    private ParameterInstance m_instance;
    private ActionDrillthrough m_actionDef;
    private ParameterValue m_parameterDef;
    public string Name { get; }
    public ReportVariantProperty Value { get; }
    public ReportBoolProperty Omit { get; }
    internal ParameterValue ParameterDef { get; }
    internal ActionDrillthrough ActionDef { get; }
    public ParameterInstance Instance { get; }
    internal Parameter(ActionDrillthrough actionDef, ParameterValue parameterDef);
    internal Parameter(ActionDrillthrough actionDef, ParameterValue parameterDef, ActionItemInstance actionInstance, int index);
    public string get_Name();
    public ReportVariantProperty get_Value();
    public ReportBoolProperty get_Omit();
    internal ParameterValue get_ParameterDef();
    internal ActionDrillthrough get_ActionDef();
    public ParameterInstance get_Instance();
    internal void Update(ActionItemInstance actionInstance, int index);
    internal void SetNewContext();
    internal void ConstructParameterDefinition();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ParameterCollection : ReportElementCollectionBase`1<Parameter> {
    private bool m_isOldSnapshot;
    private List`1<Parameter> m_list;
    private NameValueCollection m_drillthroughParameters;
    private DrillthroughParameters m_parametersNameObjectCollection;
    private ActionDrillthrough m_actionDef;
    public NameValueCollection ToNameValueCollection { get; }
    public Parameter Item { get; }
    public int Count { get; }
    internal DrillthroughParameters ParametersNameObjectCollection { get; }
    internal ParameterCollection(ActionDrillthrough actionDef, List`1<ParameterValue> parameters);
    internal ParameterCollection(ActionDrillthrough actionDef, NameValueCollection drillthroughParameters, DrillthroughParameters parametersNameObjectCollection, ParameterValueList parameters, ActionItemInstance actionInstance);
    public NameValueCollection get_ToNameValueCollection();
    public virtual Parameter get_Item(int index);
    public virtual int get_Count();
    internal DrillthroughParameters get_ParametersNameObjectCollection();
    internal Parameter Add(ActionDrillthrough owner, ParameterValue paramDef);
    internal void Update(NameValueCollection drillthroughParameters, DrillthroughParameters nameObjectCollection, ActionItemInstance actionInstance);
    internal void SetNewContext();
    internal void ConstructParameterDefinitions();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ParameterInstance : BaseInstance {
    private bool m_omit;
    private object m_value;
    private bool m_isOldSnapshot;
    private bool m_valueReady;
    private bool m_omitReady;
    private bool m_omitAssigned;
    private Parameter m_parameterDef;
    private static Declaration m_Declaration;
    public object Value { get; public set; }
    public bool Omit { get; public set; }
    internal bool IsOmitAssined { get; }
    internal ParameterInstance(ActionItemInstance actionInstance, int index);
    internal ParameterInstance(Parameter parameterDef);
    private static ParameterInstance();
    public object get_Value();
    public void set_Value(object value);
    public bool get_Omit();
    public void set_Omit(bool value);
    internal bool get_IsOmitAssined();
    private void SetMembers(ActionItemInstance actionInstance, int index);
    internal void Update(ActionItemInstance actionInstance, int index);
    internal virtual void SetNewContext();
    protected virtual void ResetInstanceCache();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    private static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PinLabel : object {
    private GaugePanel m_gaugePanel;
    private PinLabel m_defObject;
    private PinLabelInstance m_instance;
    private Style m_style;
    private ReportStringProperty m_text;
    private ReportBoolProperty m_allowUpsideDown;
    private ReportDoubleProperty m_distanceFromScale;
    private ReportDoubleProperty m_fontAngle;
    private ReportEnumProperty`1<GaugeLabelPlacements> m_placement;
    private ReportBoolProperty m_rotateLabel;
    private ReportBoolProperty m_useFontPercent;
    public Style Style { get; }
    public ReportStringProperty Text { get; }
    public ReportBoolProperty AllowUpsideDown { get; }
    public ReportDoubleProperty DistanceFromScale { get; }
    public ReportDoubleProperty FontAngle { get; }
    public ReportEnumProperty`1<GaugeLabelPlacements> Placement { get; }
    public ReportBoolProperty RotateLabel { get; }
    public ReportBoolProperty UseFontPercent { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal PinLabel PinLabelDef { get; }
    public PinLabelInstance Instance { get; }
    internal PinLabel(PinLabel defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public ReportStringProperty get_Text();
    public ReportBoolProperty get_AllowUpsideDown();
    public ReportDoubleProperty get_DistanceFromScale();
    public ReportDoubleProperty get_FontAngle();
    public ReportEnumProperty`1<GaugeLabelPlacements> get_Placement();
    public ReportBoolProperty get_RotateLabel();
    public ReportBoolProperty get_UseFontPercent();
    internal GaugePanel get_GaugePanelDef();
    internal PinLabel get_PinLabelDef();
    public PinLabelInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PinLabelInstance : BaseInstance {
    private PinLabel m_defObject;
    private StyleInstance m_style;
    private string m_text;
    private Nullable`1<bool> m_allowUpsideDown;
    private Nullable`1<double> m_distanceFromScale;
    private Nullable`1<double> m_fontAngle;
    private Nullable`1<GaugeLabelPlacements> m_placement;
    private Nullable`1<bool> m_rotateLabel;
    private Nullable`1<bool> m_useFontPercent;
    public StyleInstance Style { get; }
    public string Text { get; }
    public bool AllowUpsideDown { get; }
    public double DistanceFromScale { get; }
    public double FontAngle { get; }
    public GaugeLabelPlacements Placement { get; }
    public bool RotateLabel { get; }
    public bool UseFontPercent { get; }
    internal PinLabelInstance(PinLabel defObject);
    public StyleInstance get_Style();
    public string get_Text();
    public bool get_AllowUpsideDown();
    public double get_DistanceFromScale();
    public double get_FontAngle();
    public GaugeLabelPlacements get_Placement();
    public bool get_RotateLabel();
    public bool get_UseFontPercent();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PointerCap : object {
    private GaugePanel m_gaugePanel;
    private PointerCap m_defObject;
    private PointerCapInstance m_instance;
    private Style m_style;
    private CapImage m_capImage;
    private ReportBoolProperty m_onTop;
    private ReportBoolProperty m_reflection;
    private ReportEnumProperty`1<GaugeCapStyles> m_capStyle;
    private ReportBoolProperty m_hidden;
    private ReportDoubleProperty m_width;
    public Style Style { get; }
    public CapImage CapImage { get; }
    public ReportBoolProperty OnTop { get; }
    public ReportBoolProperty Reflection { get; }
    public ReportEnumProperty`1<GaugeCapStyles> CapStyle { get; }
    public ReportBoolProperty Hidden { get; }
    public ReportDoubleProperty Width { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal PointerCap PointerCapDef { get; }
    public PointerCapInstance Instance { get; }
    internal PointerCap(PointerCap defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public CapImage get_CapImage();
    public ReportBoolProperty get_OnTop();
    public ReportBoolProperty get_Reflection();
    public ReportEnumProperty`1<GaugeCapStyles> get_CapStyle();
    public ReportBoolProperty get_Hidden();
    public ReportDoubleProperty get_Width();
    internal GaugePanel get_GaugePanelDef();
    internal PointerCap get_PointerCapDef();
    public PointerCapInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PointerCapInstance : BaseInstance {
    private PointerCap m_defObject;
    private StyleInstance m_style;
    private Nullable`1<bool> m_onTop;
    private Nullable`1<bool> m_reflection;
    private Nullable`1<GaugeCapStyles> m_capStyle;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<double> m_width;
    public StyleInstance Style { get; }
    public bool OnTop { get; }
    public bool Reflection { get; }
    public GaugeCapStyles CapStyle { get; }
    public bool Hidden { get; }
    public double Width { get; }
    internal PointerCapInstance(PointerCap defObject);
    public StyleInstance get_Style();
    public bool get_OnTop();
    public bool get_Reflection();
    public GaugeCapStyles get_CapStyle();
    public bool get_Hidden();
    public double get_Width();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PointerImage : BaseGaugeImage {
    private ReportColorProperty m_hueColor;
    private ReportDoubleProperty m_transparency;
    private ReportSizeProperty m_offsetX;
    private ReportSizeProperty m_offsetY;
    public ReportColorProperty HueColor { get; }
    public ReportDoubleProperty Transparency { get; }
    public ReportSizeProperty OffsetX { get; }
    public ReportSizeProperty OffsetY { get; }
    internal PointerImage PointerImageDef { get; }
    public PointerImageInstance Instance { get; }
    internal PointerImage(PointerImage defObject, GaugePanel gaugePanel);
    public ReportColorProperty get_HueColor();
    public ReportDoubleProperty get_Transparency();
    public ReportSizeProperty get_OffsetX();
    public ReportSizeProperty get_OffsetY();
    internal PointerImage get_PointerImageDef();
    public PointerImageInstance get_Instance();
    internal virtual BaseGaugeImageInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.PointerImageInstance : BaseGaugeImageInstance {
    private ReportColor m_hueColor;
    private Nullable`1<double> m_transparency;
    private ReportSize m_offsetX;
    private ReportSize m_offsetY;
    public ReportColor HueColor { get; }
    public double Transparency { get; }
    public ReportSize OffsetX { get; }
    public ReportSize OffsetY { get; }
    internal PointerImageInstance(PointerImage defObject);
    public ReportColor get_HueColor();
    public double get_Transparency();
    public ReportSize get_OffsetX();
    public ReportSize get_OffsetY();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.Positions : Enum {
    public int value__;
    public static Positions Default;
    public static Positions Top;
    public static Positions TopLeft;
    public static Positions TopRight;
    public static Positions Left;
    public static Positions Center;
    public static Positions Right;
    public static Positions BottomRight;
    public static Positions Bottom;
    public static Positions BottomLeft;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialGauge : Gauge {
    private RadialScaleCollection m_gaugeScales;
    private ReportDoubleProperty m_pivotX;
    private ReportDoubleProperty m_pivotY;
    public RadialScaleCollection GaugeScales { get; }
    public ReportDoubleProperty PivotX { get; }
    public ReportDoubleProperty PivotY { get; }
    internal RadialGauge RadialGaugeDef { get; }
    public RadialGaugeInstance Instance { get; }
    internal RadialGauge(RadialGauge defObject, GaugePanel gaugePanel);
    public RadialScaleCollection get_GaugeScales();
    public ReportDoubleProperty get_PivotX();
    public ReportDoubleProperty get_PivotY();
    internal RadialGauge get_RadialGaugeDef();
    public RadialGaugeInstance get_Instance();
    internal virtual BaseInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialGaugeCollection : GaugePanelObjectCollectionBase`1<RadialGauge> {
    private GaugePanel m_gaugePanel;
    public RadialGauge Item { get; }
    public int Count { get; }
    internal RadialGaugeCollection(GaugePanel gaugePanel);
    protected virtual RadialGauge CreateGaugePanelObject(int index);
    public RadialGauge get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialGaugeInstance : GaugeInstance {
    private RadialGauge m_defObject;
    private Nullable`1<double> m_pivotX;
    private Nullable`1<double> m_pivotY;
    public double PivotX { get; }
    public double PivotY { get; }
    internal RadialGaugeInstance(RadialGauge defObject);
    public double get_PivotX();
    public double get_PivotY();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialPointer : GaugePointer {
    private ReportEnumProperty`1<RadialPointerTypes> m_type;
    private PointerCap m_pointerCap;
    private ReportEnumProperty`1<RadialPointerNeedleStyles> m_needleStyle;
    public ReportEnumProperty`1<RadialPointerTypes> Type { get; }
    public PointerCap PointerCap { get; }
    public ReportEnumProperty`1<RadialPointerNeedleStyles> NeedleStyle { get; }
    internal RadialPointer RadialPointerDef { get; }
    public RadialPointerInstance Instance { get; }
    internal RadialPointer(RadialPointer defObject, GaugePanel gaugePanel);
    public ReportEnumProperty`1<RadialPointerTypes> get_Type();
    public PointerCap get_PointerCap();
    public ReportEnumProperty`1<RadialPointerNeedleStyles> get_NeedleStyle();
    internal RadialPointer get_RadialPointerDef();
    public RadialPointerInstance get_Instance();
    internal virtual GaugePointerInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialPointerCollection : GaugePanelObjectCollectionBase`1<RadialPointer> {
    private GaugePanel m_gaugePanel;
    private RadialScale m_radialScale;
    public RadialPointer Item { get; }
    public int Count { get; }
    internal RadialPointerCollection(RadialScale radialScale, GaugePanel gaugePanel);
    protected virtual RadialPointer CreateGaugePanelObject(int index);
    public RadialPointer get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialPointerInstance : GaugePointerInstance {
    private RadialPointer m_defObject;
    private Nullable`1<RadialPointerTypes> m_type;
    private Nullable`1<RadialPointerNeedleStyles> m_needleStyle;
    public RadialPointerTypes Type { get; }
    public RadialPointerNeedleStyles NeedleStyle { get; }
    internal RadialPointerInstance(RadialPointer defObject);
    public RadialPointerTypes get_Type();
    public RadialPointerNeedleStyles get_NeedleStyle();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.RadialPointerNeedleStyles : Enum {
    public int value__;
    public static RadialPointerNeedleStyles Triangular;
    public static RadialPointerNeedleStyles Rectangular;
    public static RadialPointerNeedleStyles TaperedWithTail;
    public static RadialPointerNeedleStyles Tapered;
    public static RadialPointerNeedleStyles ArrowWithTail;
    public static RadialPointerNeedleStyles Arrow;
    public static RadialPointerNeedleStyles StealthArrowWithTail;
    public static RadialPointerNeedleStyles StealthArrow;
    public static RadialPointerNeedleStyles TaperedWithStealthArrow;
    public static RadialPointerNeedleStyles StealthArrowWithWideTail;
    public static RadialPointerNeedleStyles TaperedWithRoundedPoint;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.RadialPointerTypes : Enum {
    public int value__;
    public static RadialPointerTypes Needle;
    public static RadialPointerTypes Marker;
    public static RadialPointerTypes Bar;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialScale : GaugeScale {
    private RadialPointerCollection m_gaugePointers;
    private ReportDoubleProperty m_radius;
    private ReportDoubleProperty m_startAngle;
    private ReportDoubleProperty m_sweepAngle;
    public RadialPointerCollection GaugePointers { get; }
    public ReportDoubleProperty Radius { get; }
    public ReportDoubleProperty StartAngle { get; }
    public ReportDoubleProperty SweepAngle { get; }
    internal RadialScale RadialScaleDef { get; }
    public RadialScaleInstance Instance { get; }
    internal RadialScale(RadialScale defObject, GaugePanel gaugePanel);
    public RadialPointerCollection get_GaugePointers();
    public ReportDoubleProperty get_Radius();
    public ReportDoubleProperty get_StartAngle();
    public ReportDoubleProperty get_SweepAngle();
    internal RadialScale get_RadialScaleDef();
    public RadialScaleInstance get_Instance();
    internal virtual GaugeScaleInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialScaleCollection : GaugePanelObjectCollectionBase`1<RadialScale> {
    private GaugePanel m_gaugePanel;
    private RadialGauge m_radialGauge;
    public RadialScale Item { get; }
    public int Count { get; }
    internal RadialScaleCollection(RadialGauge radialGauge, GaugePanel gaugePanel);
    protected virtual RadialScale CreateGaugePanelObject(int index);
    public RadialScale get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RadialScaleInstance : GaugeScaleInstance {
    private RadialScale m_defObject;
    private Nullable`1<double> m_radius;
    private Nullable`1<double> m_startAngle;
    private Nullable`1<double> m_sweepAngle;
    public double Radius { get; }
    public double StartAngle { get; }
    public double SweepAngle { get; }
    internal RadialScaleInstance(RadialScale defObject);
    public double get_Radius();
    public double get_StartAngle();
    public double get_SweepAngle();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Rectangle : ReportItem {
    private Rectangle m_renderRectangle;
    private ListContent m_listContents;
    private ReportItemCollection m_reportItems;
    private PageBreak m_pageBreak;
    public string Name { get; }
    public int LinkToChild { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public ReportSize Top { get; }
    public ReportSize Left { get; }
    public bool IsSimple { get; }
    public ReportItemCollection ReportItemCollection { get; }
    public PageBreak PageBreak { get; }
    public bool KeepTogether { get; }
    public bool OmitBorderOnPageBreak { get; }
    private PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.PageBreakLocation { get; }
    internal ReportItem RenderReportItem { get; }
    public Visibility Visibility { get; }
    internal bool IsListContentsRectangle { get; }
    internal Rectangle(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, ReportItem reportItemDef, RenderingContext renderingContext);
    internal Rectangle(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, Rectangle renderRectangle, RenderingContext renderingContext);
    internal Rectangle(IDefinitionPath parentDefinitionPath, bool inSubtotal, ListContent renderContents, RenderingContext renderingContext);
    public virtual string get_Name();
    public virtual int get_LinkToChild();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual ReportSize get_Top();
    public virtual ReportSize get_Left();
    public bool get_IsSimple();
    public ReportItemCollection get_ReportItemCollection();
    public PageBreak get_PageBreak();
    public bool get_KeepTogether();
    public bool get_OmitBorderOnPageBreak();
    private sealed virtual override PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.get_PageBreakLocation();
    internal virtual ReportItem get_RenderReportItem();
    public virtual Visibility get_Visibility();
    internal bool get_IsListContentsRectangle();
    internal virtual ReportItemInstance GetOrCreateInstance();
    internal virtual void SetNewContextChildren();
    internal void UpdateListContents(ListContent listContents);
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RectangleInstance : ReportItemInstance {
    public VisibilityInstance Visibility { get; }
    internal RectangleInstance(Rectangle reportItemDef);
    public virtual VisibilityInstance get_Visibility();
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.OnDemandReportRendering.RenderErrors : object {
    public static CultureInfo Culture { get; public set; }
    public static string rrRenderStyleError { get; }
    public static string rrRenderSectionInstanceError { get; }
    public static string rrRenderResultNull { get; }
    public static string rrRenderStreamNull { get; }
    public static string rrRenderDeviceNull { get; }
    public static string rrRenderReportNull { get; }
    public static string rrRenderReportNameNull { get; }
    public static string rrRenderUnknownReportItem { get; }
    public static string rrRenderStyleName { get; }
    public static string rrRenderTextBox { get; }
    public static string rrRenderingError { get; }
    public static string rrUnexpectedError { get; }
    public static string rrControlInvalidTag { get; }
    public static string rrPageNamespaceInvalid { get; }
    public static string rrInvalidAttribute { get; }
    public static string rrInvalidProperty { get; }
    public static string rrInvalidStyleName { get; }
    public static string rrInvalidControl { get; }
    public static string rrParameterExpected { get; }
    public static string rrReportNameNull { get; }
    public static string rrReportParamsNull { get; }
    public static string rrRendererParamsNull { get; }
    public static string rrMeasurementUnitError { get; }
    public static string rrInvalidOWCRequest { get; }
    public static string rrInvalidUniqueName { get; }
    public static string rrInvalidActionLabel { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_rrRenderStyleError();
    public static string get_rrRenderSectionInstanceError();
    public static string get_rrRenderResultNull();
    public static string get_rrRenderStreamNull();
    public static string get_rrRenderDeviceNull();
    public static string get_rrRenderReportNull();
    public static string get_rrRenderReportNameNull();
    public static string get_rrRenderUnknownReportItem();
    public static string get_rrRenderStyleName();
    public static string get_rrRenderTextBox();
    public static string get_rrRenderingError();
    public static string get_rrUnexpectedError();
    public static string get_rrControlInvalidTag();
    public static string get_rrPageNamespaceInvalid();
    public static string get_rrInvalidAttribute();
    public static string get_rrInvalidProperty();
    public static string get_rrInvalidStyleName();
    public static string get_rrInvalidControl();
    public static string get_rrParameterExpected();
    public static string get_rrReportNameNull();
    public static string get_rrReportParamsNull();
    public static string get_rrRendererParamsNull();
    public static string get_rrMeasurementUnitError();
    public static string get_rrInvalidOWCRequest();
    public static string get_rrInvalidUniqueName();
    public static string get_rrInvalidActionLabel();
    public static string rrInvalidPageNumber(int totalNumPages);
    public static string rrExpectedTopLevelElement(string elementName);
    public static string rrInvalidDeviceInfo(string detail);
    public static string rrInvalidParamValue(string paramName);
    public static string rrExpectedEndElement(string elementName);
    public static string rrInvalidColor(string color);
    public static string rrInvalidSize(string size);
    public static string rrInvalidMeasurementUnit(string size);
    public static string rrNegativeSize(string size);
    public static string rrOutOfRange(string size);
    public static string rrInvalidStyleArgumentType(string argumentType);
    public static string rrInvalidBorderStyle(string style);
    public static string rrInvalidMimeType(string mimeType);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RenderingChunkManager : object {
    private string m_rendererID;
    private IChunkFactory m_chunkFactory;
    private Dictionary`2<string, Stream> m_chunks;
    internal RenderingChunkManager(string rendererID, IChunkFactory chunkFactory);
    internal Stream GetOrCreateChunk(ReportChunkTypes type, string chunkName, bool createChunkIfNotExists, Boolean& isNewChunk);
    internal void CloseAllChunks();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RenderingContext : object {
    private bool m_isSubReportContext;
    private bool m_subReportProcessedWithError;
    private ReportSnapshot m_reportSnapshot;
    private ReportSnapshot m_oldReportSnapshot;
    private EventInformation m_eventInfo;
    private OnDemandProcessingContext m_odpContext;
    private List`1<IDynamicInstance> m_dynamicInstances;
    private PageEvaluation m_pageEvaluation;
    private bool m_nativeAllCRITypes;
    private Hashtable m_nativeCRITypes;
    private RenderingChunkManager m_chunkManager;
    private string m_rendererID;
    internal bool IsSubReportContext { get; }
    internal bool SubReportProcessedWithError { get; internal set; }
    internal OnDemandProcessingContext OdpContext { get; }
    internal IErrorContext ErrorContext { get; }
    internal EventInformation EventInfo { get; }
    internal bool EventInfoChanged { get; }
    internal ReportSnapshot ReportSnapshot { get; }
    internal bool NativeAllCRITypes { get; internal set; }
    internal Hashtable NativeCRITypes { get; internal set; }
    internal RenderingContext(string rendererID, ReportSnapshot reportSnapshot, EventInformation eventInfo, OnDemandProcessingContext processingContext);
    internal RenderingContext(string rendererID, ReportSnapshot reportSnapshot, IChunkFactory chunkFactory, EventInformation eventInfo);
    internal RenderingContext(RenderingContext parentContext);
    internal RenderingContext(RenderingContext parentContext, OnDemandProcessingContext onDemandProcessingContext);
    private void InitEventInfo(EventInformation eventInfo);
    internal bool get_IsSubReportContext();
    internal bool get_SubReportProcessedWithError();
    internal void set_SubReportProcessedWithError(bool value);
    internal OnDemandProcessingContext get_OdpContext();
    internal IErrorContext get_ErrorContext();
    internal EventInformation get_EventInfo();
    internal bool get_EventInfoChanged();
    internal ReportSnapshot get_ReportSnapshot();
    internal bool get_NativeAllCRITypes();
    internal void set_NativeAllCRITypes(bool value);
    internal Hashtable get_NativeCRITypes();
    internal void set_NativeCRITypes(Hashtable value);
    internal void AddDynamicInstance(IDynamicInstance instance);
    internal void ResetContext();
    internal void SetPageEvaluation(PageEvaluation pageEvaluation);
    internal void AddToCurrentPage(string textboxName, object textboxValue);
    internal void AddDrillthroughAction(string drillthroughId, string reportName, DrillthroughParameters reportParameters);
    private void CheckResetEventInfo();
    internal void AddValidToggleSender(string senderUniqueName);
    internal bool IsSenderToggled(string uniqueName);
    internal SortOptions GetSortState(string eventSourceUniqueName);
    internal string GenerateShimUniqueName(string baseUniqueName);
    internal Stream GetOrCreateChunk(ReportChunkTypes type, string chunkName, bool createChunkIfNotExists, Boolean& isNewChunk);
    internal void CloseRenderingChunkManager();
    internal bool IsRenderAsNativeCri(CustomReportItem criDef);
}
internal static class Microsoft.ReportingServices.OnDemandReportRendering.RenderPropertyConstants : object {
    public static string PreviousTotalPages;
    public static string ClientPaginationMode;
    public static string UpdatedPaginationMode;
    public static string TotalPages;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Report : object {
    private static int m_bytesPerPage;
    private bool m_isOldSnapshot;
    private bool m_subreportInSubtotal;
    private IDefinitionPath m_parentDefinitionPath;
    private Report m_reportDef;
    private Report m_renderReport;
    private RenderingContext m_renderingContext;
    private string m_name;
    private string m_description;
    private Body m_body;
    private Page m_page;
    private ReportParameterCollection m_parameters;
    private ReportInstance m_reportInstance;
    private ReportInstance m_instance;
    private CustomPropertyCollection m_customProperties;
    private PageEvaluation m_pageEvaluation;
    private ReportUrl m_location;
    private ReportStringProperty m_language;
    private DocumentMap m_cachedDocumentMap;
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    public string ID { get; }
    public string Name { get; }
    public string Description { get; }
    public string Author { get; }
    public string DataSetName { get; }
    public bool NeedsHeaderFooterEvaluation { get; }
    public int AutoRefresh { get; }
    public ReportSize Width { get; }
    public Body Body { get; }
    public Page Page { get; }
    public ReportParameterCollection Parameters { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public string DataTransform { get; }
    public string DataSchema { get; }
    public string DataElementName { get; }
    public DataElementStyles DataElementStyle { get; }
    public bool HasDocumentMap { get; }
    public DocumentMap DocumentMap { get; }
    public bool HasBookmarks { get; }
    public ReportUrl Location { get; }
    public DateTime ExecutionTime { get; }
    public ReportStringProperty Language { get; }
    public bool ConsumeContainerWhitespace { get; }
    public string ShowHideToggle { get; }
    public string SortItem { get; }
    public SnapshotPageSize SnapshotPageSizeInfo { get; }
    internal IJobContext JobContext { get; }
    internal Report ReportDef { get; }
    internal RenderingContext RenderingContext { get; }
    internal bool IsOldSnapshot { get; }
    internal Report RenderReport { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    public ReportInstance Instance { get; }
    internal Report(Report reportDef, ReportInstance reportInstance, RenderingContext renderingContext, string reportName, string description);
    internal Report(Report reportDef, ReportInstance reportInstance, RenderingContext oldRenderingContext, RenderingContext renderingContext, string reportName, string description);
    internal Report(IDefinitionPath parentDefinitionPath, Report reportDef, ReportInstance reportInstance, RenderingContext renderingContext, string reportName, string description, bool subreportInSubtotal);
    internal Report(IDefinitionPath parentDefinitionPath, bool subreportInSubtotal, SubReport subReport, RenderingContext renderingContext);
    public sealed virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    public void SetPage(int pageNumber, int totalPages);
    public void GetPageSections();
    public void AddToCurrentPage(string textboxDefinitionName, object textboxInstanceOriginalValue);
    public void EnableNativeCustomReportItem();
    public void EnableNativeCustomReportItem(string type);
    public Stream GetOrCreateChunk(ChunkTypes type, string chunkName, Boolean& isNewChunk);
    public Stream GetChunk(ChunkTypes type, string chunkName);
    public string get_ID();
    public string get_Name();
    public string get_Description();
    public string get_Author();
    public string get_DataSetName();
    public bool get_NeedsHeaderFooterEvaluation();
    public int get_AutoRefresh();
    public ReportSize get_Width();
    public Body get_Body();
    public Page get_Page();
    public ReportParameterCollection get_Parameters();
    public CustomPropertyCollection get_CustomProperties();
    public string get_DataTransform();
    public string get_DataSchema();
    public string get_DataElementName();
    public DataElementStyles get_DataElementStyle();
    public bool get_HasDocumentMap();
    public DocumentMap get_DocumentMap();
    public bool get_HasBookmarks();
    public ReportUrl get_Location();
    public DateTime get_ExecutionTime();
    public ReportStringProperty get_Language();
    public bool get_ConsumeContainerWhitespace();
    public string GetReportUrl(bool addReportParameters);
    public string GetStreamUrl(bool useSessionId, string streamName);
    public bool GetResource(string resourcePath, Byte[]& resource, String& mimeType);
    public string get_ShowHideToggle();
    public string get_SortItem();
    public SnapshotPageSize get_SnapshotPageSizeInfo();
    internal IJobContext get_JobContext();
    internal Report get_ReportDef();
    internal RenderingContext get_RenderingContext();
    internal bool get_IsOldSnapshot();
    internal Report get_RenderReport();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    internal void UpdateSubReportContents(SubReport subReport, SubReport renderSubreport);
    internal void SetNewContext(ReportInstance reportInstance);
    internal void SetNewContext();
    public ReportInstance get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportBoolProperty : ReportProperty {
    private bool m_value;
    public bool Value { get; }
    internal ReportBoolProperty(bool value);
    internal ReportBoolProperty(ExpressionInfo expression);
    internal ReportBoolProperty(ExpressionInfo expression);
    internal ReportBoolProperty(ExpressionInfo expression, bool value);
    public bool get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportColor : object {
    private string m_color;
    private Color m_GDIColor;
    private bool m_parsed;
    public ReportColor(string color);
    public ReportColor(string color, bool allowTransparency);
    internal ReportColor(string color, Color gdiColor, bool parsed);
    internal ReportColor(ReportColor oldColor);
    public virtual string ToString();
    public Color ToColor();
    internal void Validate(bool allowTransparency);
    public static bool TryParse(string value, ReportColor& reportColor);
    public static bool TryParse(string value, bool allowTransparency, ReportColor& reportColor);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportColorProperty : ReportProperty {
    private ReportColor m_value;
    public ReportColor Value { get; }
    internal ReportColorProperty(bool isExpression, string expressionString, ReportColor value, ReportColor defaultValue);
    public ReportColor get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportDoubleProperty : ReportProperty {
    private double m_value;
    public double Value { get; }
    internal ReportDoubleProperty(ExpressionInfo expressionInfo);
    internal ReportDoubleProperty(ExpressionInfo expressionInfo);
    public double get_Value();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ReportElement : object {
    protected bool m_isOldSnapshot;
    internal ReportItem m_reportItemDef;
    internal RenderingContext m_renderingContext;
    internal ReportItem m_renderReportItem;
    protected IDefinitionPath m_parentDefinitionPath;
    protected Style m_style;
    private IReportScope m_reportScope;
    private CustomReportItem __criOwner;
    private CriGenerationPhases __criGenerationPhase;
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    internal string InstanceUniqueName { get; }
    public ReportElementInstance Instance { get; }
    internal ReportElementInstance ReportElementInstance { get; }
    public Style Style { get; }
    public string ID { get; }
    internal bool UseRenderStyle { get; }
    internal IStyleContainer StyleContainer { get; }
    internal ReportItem ReportItemDef { get; }
    internal RenderingContext RenderingContext { get; }
    internal bool IsOldSnapshot { get; }
    internal ReportItem RenderReportItem { get; }
    internal IReportScope ReportScope { get; }
    internal CustomReportItem CriOwner { get; internal set; }
    internal CriGenerationPhases CriGenerationPhase { get; internal set; }
    internal ReportElement(IDefinitionPath parentDefinitionPath);
    internal ReportElement(IReportScope reportScope, IDefinitionPath parentDefinitionPath, ReportItem reportItemDef, RenderingContext renderingContext);
    internal ReportElement(IDefinitionPath parentDefinitionPath, ReportItem renderReportItem, RenderingContext renderingContext);
    internal ReportElement(IDefinitionPath parentDefinitionPath, RenderingContext renderingContext);
    public abstract virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    internal abstract virtual string get_InstanceUniqueName();
    public ReportElementInstance get_Instance();
    internal abstract virtual ReportElementInstance get_ReportElementInstance();
    public virtual Style get_Style();
    public abstract virtual string get_ID();
    internal virtual bool get_UseRenderStyle();
    internal virtual IStyleContainer get_StyleContainer();
    internal ReportItem get_ReportItemDef();
    internal RenderingContext get_RenderingContext();
    internal bool get_IsOldSnapshot();
    internal virtual ReportItem get_RenderReportItem();
    internal virtual IReportScope get_ReportScope();
    internal CustomReportItem get_CriOwner();
    internal void set_CriOwner(CustomReportItem value);
    internal CriGenerationPhases get_CriGenerationPhase();
    internal void set_CriGenerationPhase(CriGenerationPhases value);
    internal virtual void SetNewContext();
    internal abstract virtual void SetNewContextChildren();
    internal void ConstructReportElementDefinitionImpl();
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ReportElementCollectionBase`1 : object {
    public T Item { get; public set; }
    public int Count { get; }
    public virtual T get_Item(int i);
    public virtual void set_Item(int i, T value);
    public abstract virtual int get_Count();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ReportElementInstance : BaseInstance {
    protected ReportElement m_reportElementDef;
    protected StyleInstance m_style;
    private static Declaration m_Declaration;
    public StyleInstance Style { get; }
    internal ReportElement ReportElementDef { get; }
    internal ReportElementInstance(ReportElement reportElementDef);
    private static ReportElementInstance();
    public virtual StyleInstance get_Style();
    internal ReportElement get_ReportElementDef();
    internal virtual void SetNewContext();
    protected virtual void ResetInstanceCache();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    internal virtual void Serialize(IntermediateFormatWriter writer);
    internal virtual void Deserialize(IntermediateFormatReader reader);
    internal virtual ObjectType GetObjectType();
    private static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ReportElementInstanceCollectionBase`1 : ReportElementCollectionBase`1<T> {
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportEnumProperty`1 : ReportProperty {
    private EnumType m_value;
    public EnumType Value { get; }
    internal ReportEnumProperty`1(EnumType value);
    internal ReportEnumProperty`1(bool isExpression, string expressionString, EnumType value);
    internal ReportEnumProperty`1(bool isExpression, string expressionString, EnumType value, EnumType defaultValue);
    public EnumType get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportInstance : BaseInstance {
    private Report m_reportDef;
    private ReportInstance m_reportInstance;
    private string m_language;
    private bool m_isNewContext;
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    public string UniqueName { get; }
    public string Language { get; }
    internal Report ReportDef { get; }
    internal ReportInstance(Report reportDef, ReportInstance reportInstance);
    internal ReportInstance(Report reportDef);
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    public sealed virtual string get_UniqueName();
    public string get_Language();
    internal Report get_ReportDef();
    protected virtual void ResetInstanceCache();
    public void ResetContext();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportIntProperty : ReportProperty {
    private int m_value;
    public int Value { get; }
    internal ReportIntProperty(int value);
    internal ReportIntProperty(bool isExpression, string expressionString, int value, int defaultValue);
    internal ReportIntProperty(ExpressionInfo expression);
    public int get_Value();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ReportItem : ReportElement {
    protected bool m_isListContentsRectangle;
    protected bool m_inSubtotal;
    protected string m_definitionPath;
    protected ReportStringProperty m_toolTip;
    protected ReportStringProperty m_bookmark;
    protected ReportStringProperty m_documentMapLabel;
    protected ReportItemInstance m_instance;
    private bool m_criGeneratedInstanceEvaluated;
    protected ReportBoolProperty m_startHidden;
    private Visibility m_visibility;
    private CustomPropertyCollection m_customProperties;
    private bool m_customPropertiesReady;
    private ReportSize m_cachedTop;
    private ReportSize m_cachedLeft;
    protected ReportSize m_cachedHeight;
    protected ReportSize m_cachedWidth;
    public string DefinitionPath { get; }
    public string Name { get; }
    public string ID { get; }
    public Style Style { get; }
    public int LinkToChild { get; }
    public ReportSize Height { get; }
    public ReportSize Width { get; }
    public ReportSize Top { get; }
    public ReportSize Left { get; }
    public int ZIndex { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportStringProperty Bookmark { get; }
    public ReportStringProperty DocumentMapLabel { get; }
    public string RepeatWith { get; }
    public bool RepeatedSibling { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public Visibility Visibility { get; }
    internal bool InSubtotal { get; }
    internal ReportElementInstance ReportElementInstance { get; }
    public ReportItemInstance Instance { get; }
    internal string InstanceUniqueName { get; }
    internal ReportItem(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, ReportItem reportItemDef, RenderingContext renderingContext);
    internal ReportItem(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, ReportItem renderReportItem, RenderingContext renderingContext);
    internal ReportItem(IDefinitionPath parentDefinitionPath, bool inSubtotal, RenderingContext renderingContext);
    public virtual string get_DefinitionPath();
    public virtual string get_Name();
    public virtual string get_ID();
    public virtual Style get_Style();
    public virtual int get_LinkToChild();
    public virtual ReportSize get_Height();
    public virtual ReportSize get_Width();
    public virtual ReportSize get_Top();
    public virtual ReportSize get_Left();
    public int get_ZIndex();
    public ReportStringProperty get_ToolTip();
    public ReportStringProperty get_Bookmark();
    public ReportStringProperty get_DocumentMapLabel();
    public string get_RepeatWith();
    public bool get_RepeatedSibling();
    public CustomPropertyCollection get_CustomProperties();
    public string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual Visibility get_Visibility();
    internal bool get_InSubtotal();
    internal abstract virtual ReportItemInstance GetOrCreateInstance();
    internal virtual ReportElementInstance get_ReportElementInstance();
    public ReportItemInstance get_Instance();
    internal virtual string get_InstanceUniqueName();
    internal void SetCachedWidth(double sizeDelta);
    internal void SetCachedHeight(double sizeDelta);
    internal virtual void SetNewContext();
    internal virtual void SetNewContextChildren();
    internal void CriEvaluateInstance();
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
    public CustomProperty CreateCustomProperty();
    internal virtual ReportItem ExposeAs(RenderingContext renderingContext);
    internal virtual void ConstructReportItemDefinition();
    internal virtual void CompleteCriGeneratedInstanceEvaluation();
    internal void ConstructReportItemDefinitionImpl();
    private void PrepareCustomProperties();
    internal static int StringToInt(string intAsString);
    internal static ReportItem CreateItem(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, ReportItem reportItemDef, RenderingContext renderingContext);
    internal static ReportItem CreateShim(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, ReportItem renderReportItem, RenderingContext renderingContext);
    private static void ProcessAlternateCustomReportItem(CustomReportItem criDef, ReportItem reportItem, RenderingContext renderingContext);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportItemCollection : ReportElementCollectionBase`1<ReportItem> {
    private IDefinitionPath m_parentDefinitionPath;
    private bool m_isOldSnapshot;
    private bool m_inSubtotal;
    private ReportItem[] m_reportItems;
    private ReportItemCollection m_reportItemColDef;
    private ReportItemCollection m_renderReportItemCollection;
    private RenderingContext m_renderingContext;
    private IReportScope m_reportScope;
    public ReportItem Item { get; }
    public int Count { get; }
    internal bool IsOldSnapshot { get; }
    internal ReportItemCollection RenderReportItemCollection { get; }
    internal ReportItemCollection(IReportScope reportScope, IDefinitionPath parentDefinitionPath, ReportItemCollection reportItemColDef, RenderingContext renderingContext);
    internal ReportItemCollection(IDefinitionPath parentDefinitionPath, bool inSubtotal, ReportItemCollection renderReportItemCollection, RenderingContext renderingContext);
    public virtual ReportItem get_Item(int index);
    public virtual int get_Count();
    internal bool get_IsOldSnapshot();
    internal ReportItemCollection get_RenderReportItemCollection();
    internal void UpdateRenderReportItem(ReportItemCollection renderReportItemCollection);
    internal void SetNewContext();
    private ReportItem GetItem(int index);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ReportItemInstance : ReportElementInstance {
    protected string m_uniqueName;
    private string m_toolTip;
    private string m_bookmark;
    private string m_documentMapLabel;
    private bool m_toolTipEvaluated;
    private bool m_bookmarkEvaluated;
    private bool m_documentMapLabelEvaluated;
    protected VisibilityInstance m_visibility;
    private static Declaration m_Declaration;
    public string UniqueName { get; }
    public string ToolTip { get; public set; }
    public string Bookmark { get; public set; }
    public string DocumentMapLabel { get; public set; }
    public VisibilityInstance Visibility { get; }
    internal RenderingContext RenderingContext { get; }
    internal ReportItemInstance(ReportItem reportItemDef);
    private static ReportItemInstance();
    public virtual string get_UniqueName();
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Bookmark();
    public void set_Bookmark(string value);
    public string get_DocumentMapLabel();
    public void set_DocumentMapLabel(string value);
    public virtual VisibilityInstance get_Visibility();
    internal RenderingContext get_RenderingContext();
    protected virtual void ResetInstanceCache();
    internal virtual void Serialize(IntermediateFormatWriter writer);
    internal virtual void Deserialize(IntermediateFormatReader reader);
    internal virtual ObjectType GetObjectType();
    [SkipMemberStaticValidationAttribute("654")]
[SkipMemberStaticValidationAttribute("655")]
private static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportItemVisibility : Visibility {
    private ReportItem m_owner;
    public ReportBoolProperty Hidden { get; }
    public string ToggleItem { get; }
    public SharedHiddenState HiddenState { get; }
    public bool RecursiveToggleReceiver { get; }
    public ReportItemVisibility(ReportItem owner);
    public virtual ReportBoolProperty get_Hidden();
    public virtual string get_ToggleItem();
    public virtual SharedHiddenState get_HiddenState();
    public virtual bool get_RecursiveToggleReceiver();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportItemVisibilityInstance : VisibilityInstance {
    private ReportItem m_reportItem;
    public bool CurrentlyHidden { get; }
    public bool StartHidden { get; }
    internal ReportItemVisibilityInstance(ReportItem reportitem);
    public virtual bool get_CurrentlyHidden();
    public virtual bool get_StartHidden();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportParameter : object {
    private ParameterDef m_renderParam;
    private ParameterDef m_paramDef;
    private ReportParameterInstance m_paramInstance;
    private ReportStringProperty m_prompt;
    private bool m_validInstance;
    private OnDemandProcessingContext m_odpContext;
    public string Name { get; }
    public TypeCode DataType { get; }
    public bool Nullable { get; }
    public bool MultiValue { get; }
    public bool AllowBlank { get; }
    public ReportStringProperty Prompt { get; }
    public bool UsedInQuery { get; }
    public ReportParameterInstance Instance { get; }
    internal bool IsOldSnapshot { get; }
    internal OnDemandProcessingContext OdpContext { get; }
    internal ReportParameter(ParameterDef renderParam);
    internal ReportParameter(OnDemandProcessingContext odpContext, ParameterDef paramDef);
    public string get_Name();
    public TypeCode get_DataType();
    public bool get_Nullable();
    public bool get_MultiValue();
    public bool get_AllowBlank();
    public ReportStringProperty get_Prompt();
    public bool get_UsedInQuery();
    public ReportParameterInstance get_Instance();
    internal bool get_IsOldSnapshot();
    internal OnDemandProcessingContext get_OdpContext();
    internal void SetNewContext(bool validInstance);
    internal void UpdateRenderReportItem(ReportParameter paramValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportParameterCollection : ReportElementCollectionBase`1<ReportParameter> {
    private List`1<ReportParameter> m_parameters;
    private Dictionary`2<string, ReportParameter> m_parametersByName;
    public ReportParameter Item { get; }
    public ReportParameter Item { get; }
    public int Count { get; }
    internal ReportParameterCollection(ParameterDefList parameterDefs, ReportParameterCollection paramValues);
    internal ReportParameterCollection(OnDemandProcessingContext odpContext, List`1<ParameterDef> parameterDefs, bool validInstance);
    public ReportParameter get_Item(string name);
    public virtual ReportParameter get_Item(int index);
    public virtual int get_Count();
    internal void SetNewContext(bool validInstance);
    internal void UpdateRenderReportItem(ReportParameterCollection paramValues);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportParameterInstance : object {
    private ReportParameter m_paramDef;
    private ReportParameter m_renderParamValue;
    private ParameterImpl m_paramValue;
    public string Prompt { get; }
    public object Value { get; }
    public ReadOnlyCollection`1<object> Values { get; }
    public string Label { get; }
    public ReadOnlyCollection`1<string> Labels { get; }
    internal bool IsOldSnapshot { get; }
    internal ParameterImpl ReportOMParam { get; }
    internal ReportParameterInstance(ReportParameter paramDef);
    internal ReportParameterInstance(ReportParameter paramDef, ReportParameter paramValue);
    public string get_Prompt();
    public object get_Value();
    public ReadOnlyCollection`1<object> get_Values();
    public string get_Label();
    public ReadOnlyCollection`1<string> get_Labels();
    internal void SetNewContext();
    internal void UpdateRenderReportItem(ReportParameter paramValue);
    internal bool get_IsOldSnapshot();
    internal ParameterImpl get_ReportOMParam();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ReportProperty : object {
    private bool m_isExpression;
    private string m_expressionString;
    public bool IsExpression { get; }
    public string ExpressionString { get; }
    internal ReportProperty(bool isExpression, string expressionString);
    public bool get_IsExpression();
    public string get_ExpressionString();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportRenderingException : Exception {
    private ErrorCode m_ErrorCode;
    private bool m_Unexpected;
    public ErrorCode ErrorCode { get; }
    public bool Unexpected { get; }
    protected ReportRenderingException(SerializationInfo info, StreamingContext context);
    public ReportRenderingException(ErrorCode errCode);
    public ReportRenderingException(string message);
    public ReportRenderingException(string message, bool unexpected);
    public ReportRenderingException(ErrorCode errCode, string message, bool unexpected);
    public ReportRenderingException(Exception innerException);
    public ReportRenderingException(Exception innerException, bool unexpected);
    public ReportRenderingException(ErrorCode errCode, Exception innerException);
    public ReportRenderingException(ErrorCode errCode, Exception innerException, bool unexpected);
    public ReportRenderingException(string message, Exception innerException);
    public ReportRenderingException(string message, Exception innerException, bool unexpected);
    public ReportRenderingException(ErrorCode errCode, string message, Exception innerException, bool unexpected);
    public ReportRenderingException(ErrorCode errCode, Object[] arguments);
    public ErrorCode get_ErrorCode();
    public bool get_Unexpected();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportSize : object {
    private static string m_zeroMM;
    private string m_size;
    private double m_sizeInMM;
    private bool m_parsed;
    private bool m_allowNegative;
    public ReportSize(string size);
    public ReportSize(string size, bool allowNegative);
    internal ReportSize(string size, bool validate, bool allowNegative);
    internal ReportSize(string size, double sizeInMM);
    internal ReportSize(ReportSize oldSize);
    public virtual string ToString();
    public double ToMillimeters();
    public double ToInches();
    public double ToPoints();
    public double ToCentimeters();
    public static ReportSize SumSizes(ReportSize size1, ReportSize size2);
    public static ReportSize FromMillimeters(double millimeters);
    private static string ConvertToMM(double millimeters);
    internal void ParseSize();
    internal void Validate();
    internal ReportSize DeepClone();
    public static bool TryParse(string value, ReportSize& reportSize);
    public static bool TryParse(string value, bool allowNegative, ReportSize& reportSize);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportSizeCollection : ReportElementCollectionBase`1<ReportSize> {
    private ReportSize[] m_reportSizeCollection;
    public ReportSize Item { get; public set; }
    public int Count { get; }
    internal ReportSizeCollection(int count);
    public virtual ReportSize get_Item(int index);
    public virtual void set_Item(int index, ReportSize value);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportSizeProperty : ReportProperty {
    private ReportSize m_value;
    public ReportSize Value { get; }
    internal ReportSizeProperty(bool isExpression, string expressionString, ReportSize value);
    internal ReportSizeProperty(bool isExpression, string expressionString, ReportSize value, ReportSize defaultValue);
    internal ReportSizeProperty(ExpressionInfo expressionInfo);
    internal ReportSizeProperty(ExpressionInfo expressionInfo, bool allowNegative);
    internal ReportSizeProperty(ExpressionInfo expressionInfo, ReportSize defaultValue);
    public ReportSize get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportStringProperty : ReportProperty {
    private string m_value;
    public string Value { get; }
    internal ReportStringProperty(bool isExpression, string expressionString, string value);
    internal ReportStringProperty(bool isExpression, string expressionString, string value, string defaultValue);
    internal ReportStringProperty(ExpressionInfo expression);
    internal ReportStringProperty(ExpressionInfo expression, string formulaText);
    internal ReportStringProperty(ExpressionInfo expression);
    public string get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportUrl : object {
    private ReportUrl m_renderUrl;
    private Uri m_pathUri;
    private bool IsOldSnapshot { get; }
    internal ReportUrl(ReportUrl renderUrl);
    internal ReportUrl(ICatalogItemContext itemContext, string initialUrl);
    internal ReportUrl(ICatalogItemContext itemContext, string initialUrl, bool addParameters);
    internal ReportUrl(ICatalogItemContext itemContext, string initialUrl, bool checkProtocol, NameValueCollection unparsedParameters);
    internal static string BuildPathUri(ICatalogItemContext currentICatalogItemContext, string initialUrl, NameValueCollection unparsedParameters);
    internal static string BuildPathUri(ICatalogItemContext currentICatalogItemContext, bool checkProtocol, string initialUrl, NameValueCollection unparsedParameters, ICatalogItemContext& newContext);
    internal static string BuildDrillthroughUrl(ICatalogItemContext currentCatalogItemContext, string initialUrl, NameValueCollection parameters);
    internal static ReportUrl BuildHyperlinkUrl(RenderingContext renderingContext, ObjectType objectType, string objectName, string propertyName, ICatalogItemContext itemContext, string initialUrl);
    internal static ReportUrl BuildUrl(RenderingContext renderingContext, ObjectType objectType, string objectName, string propertyName, ICatalogItemContext itemContext, string initialUrl);
    internal static ReportUrl BuildUrl(RenderingContext renderingContext, ObjectType objectType, string objectName, string propertyName, ICatalogItemContext itemContext, string initialUrl, bool addParameters);
    private static ReportUrl InternalBuildUrl(RenderingContext renderingContext, ObjectType objectType, string objectName, string propertyName, ICatalogItemContext itemContext, string initialUrl, bool addParameters);
    private bool get_IsOldSnapshot();
    public Uri ToUri();
    public virtual string ToString();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportUrlProperty : ReportProperty {
    private ReportUrl m_reportUrl;
    public ReportUrl Value { get; }
    internal ReportUrlProperty(bool isExpression, string expressionString, ReportUrl reportUrl);
    public ReportUrl get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ReportVariantProperty : ReportProperty {
    private object m_value;
    public object Value { get; }
    internal ReportVariantProperty(bool isExpression);
    internal ReportVariantProperty(ExpressionInfo expression);
    internal ReportVariantProperty(ExpressionInfo expression);
    public object get_Value();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RichTextHelpers : object {
    internal static MarkupType TranslateMarkupType(string value);
    internal static ListStyle TranslateListStyle(string value);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RichTextParseException : Exception {
    internal RichTextParseException(string message);
    protected RichTextParseException(SerializationInfo serializationInfo, StreamingContext context);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.RichTextParser : object {
    internal static int ParagraphListLevelMin;
    internal static int ParagraphListLevelMax;
    private static string m_propertyListLevel;
    protected CompiledStyleInfo m_currentStyle;
    protected CompiledParagraphInfo m_currentParagraph;
    protected static ReportSize DefaultParagraphSpacing;
    protected bool m_allowMultipleParagraphs;
    protected ICompiledParagraphInstance m_currentParagraphInstance;
    protected ICompiledTextRunInstance m_currentTextRunInstance;
    protected IRichTextInstanceCreator m_IRichTextInstanceCreator;
    protected IList`1<ICompiledParagraphInstance> m_paragraphInstanceCollection;
    protected ICompiledParagraphInstance m_onlyParagraphInstance;
    protected IRichTextLogger m_richTextLogger;
    private bool m_loggedListLevelWarning;
    internal RichTextParser(bool allowMultipleParagraphs, IRichTextInstanceCreator iRichTextInstanceCreator, IRichTextLogger richTextLogger);
    private static RichTextParser();
    internal virtual IList`1<ICompiledParagraphInstance> Parse(string richText);
    protected abstract virtual void InternalParse(string richText);
    protected virtual bool AppendText(string value);
    protected virtual bool AppendText(string value, bool onlyIfValueExists);
    protected virtual void SetTextRunValue(string value);
    protected virtual ICompiledParagraphInstance CreateParagraphInstance();
    protected virtual ICompiledTextRunInstance CreateTextRunInstance();
    protected virtual void CloseParagraph();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.RichTextStyleTranslator : object {
    internal static bool CompareWithInvariantCulture(string str1, string str2);
    internal static bool TranslateHtmlFontSize(string value, String& translatedSize);
    internal static string TranslateHtmlColor(string value);
    internal static bool TranslateFontWeight(string styleString, FontWeights& fontWieght);
    internal static bool TranslateTextAlign(string styleString, TextAlignments& textAlignment);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ROMInstanceObjectCreator : object {
    private ReportItemInstance m_reportItemInstance;
    private ProcessingRIFObjectCreator __processingRIFObjectCreator;
    private ActionInfo m_currentActionInfo;
    private int m_currentActionIndex;
    private ParameterCollection m_currentParameterCollection;
    private int m_currentParameterIndex;
    private IRIFObjectCreator ProcessingRIFObjectCreator { get; }
    internal ROMInstanceObjectCreator(ReportItemInstance reportItemInstance);
    internal void StartActionInfoInstancesDeserialization(ActionInfo actionInfo);
    internal void CompleteActionInfoInstancesDeserialization();
    internal void StartParameterInstancesDeserialization(ParameterCollection paramCollection);
    internal void CompleteParameterInstancesDeserialization();
    public sealed virtual IPersistable CreateRIFObject(ObjectType objectType, IntermediateFormatReader& context);
    private IRIFObjectCreator get_ProcessingRIFObjectCreator();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ScaleLabels : object {
    private GaugePanel m_gaugePanel;
    private ScaleLabels m_defObject;
    private ScaleLabelsInstance m_instance;
    private Style m_style;
    private ReportDoubleProperty m_interval;
    private ReportDoubleProperty m_intervalOffset;
    private ReportBoolProperty m_allowUpsideDown;
    private ReportDoubleProperty m_distanceFromScale;
    private ReportDoubleProperty m_fontAngle;
    private ReportEnumProperty`1<GaugeLabelPlacements> m_placement;
    private ReportBoolProperty m_rotateLabels;
    private ReportBoolProperty m_showEndLabels;
    private ReportBoolProperty m_hidden;
    private ReportBoolProperty m_useFontPercent;
    public Style Style { get; }
    public ReportDoubleProperty Interval { get; }
    public ReportDoubleProperty IntervalOffset { get; }
    public ReportBoolProperty AllowUpsideDown { get; }
    public ReportDoubleProperty DistanceFromScale { get; }
    public ReportDoubleProperty FontAngle { get; }
    public ReportEnumProperty`1<GaugeLabelPlacements> Placement { get; }
    public ReportBoolProperty RotateLabels { get; }
    public ReportBoolProperty ShowEndLabels { get; }
    public ReportBoolProperty Hidden { get; }
    public ReportBoolProperty UseFontPercent { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal ScaleLabels ScaleLabelsDef { get; }
    public ScaleLabelsInstance Instance { get; }
    internal ScaleLabels(ScaleLabels defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public ReportDoubleProperty get_Interval();
    public ReportDoubleProperty get_IntervalOffset();
    public ReportBoolProperty get_AllowUpsideDown();
    public ReportDoubleProperty get_DistanceFromScale();
    public ReportDoubleProperty get_FontAngle();
    public ReportEnumProperty`1<GaugeLabelPlacements> get_Placement();
    public ReportBoolProperty get_RotateLabels();
    public ReportBoolProperty get_ShowEndLabels();
    public ReportBoolProperty get_Hidden();
    public ReportBoolProperty get_UseFontPercent();
    internal GaugePanel get_GaugePanelDef();
    internal ScaleLabels get_ScaleLabelsDef();
    public ScaleLabelsInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ScaleLabelsInstance : BaseInstance {
    private ScaleLabels m_defObject;
    private StyleInstance m_style;
    private Nullable`1<double> m_interval;
    private Nullable`1<double> m_intervalOffset;
    private Nullable`1<bool> m_allowUpsideDown;
    private Nullable`1<double> m_distanceFromScale;
    private Nullable`1<double> m_fontAngle;
    private Nullable`1<GaugeLabelPlacements> m_placement;
    private Nullable`1<bool> m_rotateLabels;
    private Nullable`1<bool> m_showEndLabels;
    private Nullable`1<bool> m_hidden;
    private Nullable`1<bool> m_useFontPercent;
    public StyleInstance Style { get; }
    public double Interval { get; }
    public double IntervalOffset { get; }
    public bool AllowUpsideDown { get; }
    public double DistanceFromScale { get; }
    public double FontAngle { get; }
    public GaugeLabelPlacements Placement { get; }
    public bool RotateLabels { get; }
    public bool ShowEndLabels { get; }
    public bool Hidden { get; }
    public bool UseFontPercent { get; }
    internal ScaleLabelsInstance(ScaleLabels defObject);
    public StyleInstance get_Style();
    public double get_Interval();
    public double get_IntervalOffset();
    public bool get_AllowUpsideDown();
    public double get_DistanceFromScale();
    public double get_FontAngle();
    public GaugeLabelPlacements get_Placement();
    public bool get_RotateLabels();
    public bool get_ShowEndLabels();
    public bool get_Hidden();
    public bool get_UseFontPercent();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ScalePin : TickMarkStyle {
    private ReportDoubleProperty m_location;
    private ReportBoolProperty m_enable;
    private PinLabel m_pinLabel;
    public ReportDoubleProperty Location { get; }
    public ReportBoolProperty Enable { get; }
    public PinLabel PinLabel { get; }
    internal ScalePin ScalePinDef { get; }
    public ScalePinInstance Instance { get; }
    internal ScalePin(ScalePin defObject, GaugePanel gaugePanel);
    public ReportDoubleProperty get_Location();
    public ReportBoolProperty get_Enable();
    public PinLabel get_PinLabel();
    internal ScalePin get_ScalePinDef();
    public ScalePinInstance get_Instance();
    internal virtual void SetNewContext();
    protected virtual TickMarkStyleInstance GetInstance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ScalePinInstance : TickMarkStyleInstance {
    private Nullable`1<double> m_location;
    private Nullable`1<bool> m_enable;
    public double Location { get; }
    public bool Enable { get; }
    internal ScalePinInstance(ScalePin defObject);
    public double get_Location();
    public bool get_Enable();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ScaleRange : GaugePanelObjectCollectionItem {
    private GaugePanel m_gaugePanel;
    private ScaleRange m_defObject;
    private Style m_style;
    private ActionInfo m_actionInfo;
    private ReportDoubleProperty m_distanceFromScale;
    private GaugeInputValue m_startValue;
    private GaugeInputValue m_endValue;
    private ReportDoubleProperty m_startWidth;
    private ReportDoubleProperty m_endWidth;
    private ReportColorProperty m_inRangeBarPointerColor;
    private ReportColorProperty m_inRangeLabelColor;
    private ReportColorProperty m_inRangeTickMarksColor;
    private ReportEnumProperty`1<ScaleRangePlacements> m_placement;
    private ReportStringProperty m_toolTip;
    private ReportBoolProperty m_hidden;
    private ReportEnumProperty`1<BackgroundGradientTypes> m_backgroundGradientType;
    public Style Style { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public List`1<string> FieldsUsedInValueExpression { get; }
    public string Name { get; }
    public ReportDoubleProperty DistanceFromScale { get; }
    public GaugeInputValue StartValue { get; }
    public GaugeInputValue EndValue { get; }
    public ReportDoubleProperty StartWidth { get; }
    public ReportDoubleProperty EndWidth { get; }
    public ReportColorProperty InRangeBarPointerColor { get; }
    public ReportColorProperty InRangeLabelColor { get; }
    public ReportColorProperty InRangeTickMarksColor { get; }
    public ReportEnumProperty`1<BackgroundGradientTypes> BackgroundGradientType { get; }
    public ReportEnumProperty`1<ScaleRangePlacements> Placement { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportBoolProperty Hidden { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal ScaleRange ScaleRangeDef { get; }
    public ScaleRangeInstance Instance { get; }
    internal ScaleRange(ScaleRange defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public sealed virtual List`1<string> get_FieldsUsedInValueExpression();
    public string get_Name();
    public ReportDoubleProperty get_DistanceFromScale();
    public GaugeInputValue get_StartValue();
    public GaugeInputValue get_EndValue();
    public ReportDoubleProperty get_StartWidth();
    public ReportDoubleProperty get_EndWidth();
    public ReportColorProperty get_InRangeBarPointerColor();
    public ReportColorProperty get_InRangeLabelColor();
    public ReportColorProperty get_InRangeTickMarksColor();
    public ReportEnumProperty`1<BackgroundGradientTypes> get_BackgroundGradientType();
    public ReportEnumProperty`1<ScaleRangePlacements> get_Placement();
    public ReportStringProperty get_ToolTip();
    public ReportBoolProperty get_Hidden();
    internal GaugePanel get_GaugePanelDef();
    internal ScaleRange get_ScaleRangeDef();
    public ScaleRangeInstance get_Instance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ScaleRangeCollection : GaugePanelObjectCollectionBase`1<ScaleRange> {
    private GaugePanel m_gaugePanel;
    private GaugeScale m_gaugeScale;
    public ScaleRange Item { get; }
    public int Count { get; }
    internal ScaleRangeCollection(GaugeScale gaugeScale, GaugePanel gaugePanel);
    protected virtual ScaleRange CreateGaugePanelObject(int index);
    public ScaleRange get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ScaleRangeInstance : BaseInstance {
    private ScaleRange m_defObject;
    private StyleInstance m_style;
    private Nullable`1<double> m_distanceFromScale;
    private Nullable`1<double> m_startWidth;
    private Nullable`1<double> m_endWidth;
    private ReportColor m_inRangeBarPointerColor;
    private ReportColor m_inRangeLabelColor;
    private ReportColor m_inRangeTickMarksColor;
    private Nullable`1<BackgroundGradientTypes> m_backgroundGradientType;
    private Nullable`1<ScaleRangePlacements> m_placement;
    private string m_toolTip;
    private Nullable`1<bool> m_hidden;
    public StyleInstance Style { get; }
    public double DistanceFromScale { get; }
    public double StartWidth { get; }
    public double EndWidth { get; }
    public ReportColor InRangeBarPointerColor { get; }
    public ReportColor InRangeLabelColor { get; }
    public ReportColor InRangeTickMarksColor { get; }
    public BackgroundGradientTypes BackgroundGradientType { get; }
    public ScaleRangePlacements Placement { get; }
    public string ToolTip { get; }
    public bool Hidden { get; }
    internal ScaleRangeInstance(ScaleRange defObject);
    public StyleInstance get_Style();
    public double get_DistanceFromScale();
    public double get_StartWidth();
    public double get_EndWidth();
    public ReportColor get_InRangeBarPointerColor();
    public ReportColor get_InRangeLabelColor();
    public ReportColor get_InRangeTickMarksColor();
    public BackgroundGradientTypes get_BackgroundGradientType();
    public ScaleRangePlacements get_Placement();
    public string get_ToolTip();
    public bool get_Hidden();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.ScaleRangePlacements : Enum {
    public int value__;
    public static ScaleRangePlacements Inside;
    public static ScaleRangePlacements Outside;
    public static ScaleRangePlacements Cross;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.SharedHiddenState : Enum {
    public int value__;
    public static SharedHiddenState Always;
    public static SharedHiddenState Never;
    public static SharedHiddenState Sometimes;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ShimCell : TablixCell {
    protected bool m_inSubtotal;
    protected string m_shimID;
    public string ID { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal ShimCell(Tablix owner, int rowIndex, int colIndex, bool inSubtotal);
    public virtual string get_ID();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimChartDataPoint : ChartDataPoint {
    private ChartDataPoint m_renderDataPoint;
    private bool m_dataValueUpdateNeeded;
    private DataValueCollection m_dataValues;
    private ShimChartMember m_seriesParentMember;
    private ShimChartMember m_categoryParentMember;
    private ChartDataPoint m_cachedDataPoint;
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal DataValueCollection DataValues { get; }
    public ChartDataPointValues DataPointValues { get; }
    public ChartItemInLegend ItemInLegend { get; }
    public ActionInfo ActionInfo { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public Style Style { get; }
    public ChartMarker Marker { get; }
    public ChartDataLabel DataLabel { get; }
    public ReportVariantProperty AxisLabel { get; }
    public ReportStringProperty ToolTip { get; }
    internal ChartDataPoint DataPointDef { get; }
    internal ChartDataPoint RenderItem { get; }
    internal ChartDataPoint RenderDataPointDef { get; }
    private ChartDataPoint CachedRenderDataPoint { get; }
    private ChartDataPoint CachedDataPoint { get; }
    internal ShimChartDataPoint(Chart owner, int rowIndex, int colIndex, ShimChartMember seriesParentMember, ShimChartMember categoryParentMember);
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    internal DataValueCollection get_DataValues();
    public virtual ChartDataPointValues get_DataPointValues();
    public virtual ChartItemInLegend get_ItemInLegend();
    public virtual ActionInfo get_ActionInfo();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual Style get_Style();
    public virtual ChartMarker get_Marker();
    public virtual ChartDataLabel get_DataLabel();
    public virtual ReportVariantProperty get_AxisLabel();
    public virtual ReportStringProperty get_ToolTip();
    internal virtual ChartDataPoint get_DataPointDef();
    internal virtual ChartDataPoint get_RenderItem();
    internal virtual ChartDataPoint get_RenderDataPointDef();
    private ChartDataPoint get_CachedRenderDataPoint();
    private ChartDataPoint get_CachedDataPoint();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimChartDynamicMemberInstance : ChartDynamicMemberInstance {
    internal ShimChartDynamicMemberInstance(Chart owner, ChartMember memberDef);
    public virtual bool MoveNext();
    public virtual void ResetContext();
    public virtual bool SetInstanceIndex(int index);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimChartMember : ChartMember {
    private bool m_isCategory;
    private int m_definitionStartIndex;
    private int m_definitionEndIndex;
    private ChartMember m_staticOrSubtotal;
    internal string UniqueName { get; }
    public string ID { get; }
    public ReportStringProperty Label { get; }
    internal object LabelInstanceValue { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public ChartMemberCollection Children { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public bool IsStatic { get; }
    public bool IsCategory { get; }
    public int SeriesSpan { get; }
    public int CategorySpan { get; }
    public int MemberCellIndex { get; }
    public bool IsTotal { get; }
    internal ChartMember MemberDefinition { get; }
    public ChartMemberInstance Instance { get; }
    internal int DefinitionStartIndex { get; }
    internal int DefinitionEndIndex { get; }
    internal ChartMember CurrentRenderChartMember { get; }
    internal ShimChartMember(IDefinitionPath parentDefinitionPath, Chart owner, ShimChartMember parent, int parentCollectionIndex, bool isCategory, ChartMember staticOrSubtotal);
    internal ShimChartMember(IDefinitionPath parentDefinitionPath, Chart owner, ShimChartMember parent, int parentCollectionIndex, bool isCategory, ShimRenderGroups renderGroups);
    private void GenerateInnerHierarchy(Chart owner, ShimChartMember parent, bool isCategory, ChartMemberCollection children);
    internal virtual string get_UniqueName();
    public virtual string get_ID();
    public virtual ReportStringProperty get_Label();
    internal object get_LabelInstanceValue();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual ChartMemberCollection get_Children();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual bool get_IsStatic();
    public virtual bool get_IsCategory();
    public virtual int get_SeriesSpan();
    public virtual int get_CategorySpan();
    public virtual int get_MemberCellIndex();
    public virtual bool get_IsTotal();
    internal virtual ChartMember get_MemberDefinition();
    public virtual ChartMemberInstance get_Instance();
    internal int get_DefinitionStartIndex();
    internal int get_DefinitionEndIndex();
    internal ChartMember get_CurrentRenderChartMember();
    internal bool SetNewContext(int index);
    internal virtual void ResetContext();
    internal void ResetContext(ChartMember staticOrSubtotal, ShimRenderGroups renderGroups);
    private void UpdateInnerContext(ChartMember currentRenderGroup);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimChartMemberCollection : ChartMemberCollection {
    private bool m_isDynamic;
    private bool m_isCategoryGroup;
    private int m_definitionStartIndex;
    private int m_definitionEndIndex;
    public ChartMember Item { get; }
    public int Count { get; }
    internal ShimChartMemberCollection(IDefinitionPath parentDefinitionPath, Chart owner, bool isCategoryGroup, ShimChartMember parent, ChartMemberCollection renderMemberCollection);
    public virtual ChartMember get_Item(int index);
    public virtual int get_Count();
    internal void UpdateContext();
    internal void ResetContext(ChartMemberCollection newRenderMemberCollection);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimChartSeries : ChartSeries {
    private List`1<ShimChartDataPoint> m_cells;
    private bool m_plotAsLine;
    private ReportEnumProperty`1<ChartSeriesType> m_chartSeriesType;
    private ReportEnumProperty`1<ChartSeriesSubtype> m_chartSeriesSubtype;
    public ChartDataPoint Item { get; }
    public int Count { get; }
    public string Name { get; }
    public Style Style { get; }
    internal ActionInfo ActionInfo { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ReportEnumProperty`1<ChartSeriesType> Type { get; }
    public ReportEnumProperty`1<ChartSeriesSubtype> Subtype { get; }
    public ChartSmartLabel SmartLabel { get; }
    public ChartEmptyPoints EmptyPoints { get; }
    public ReportStringProperty LegendName { get; }
    internal ReportStringProperty LegendText { get; }
    internal ReportBoolProperty HideInLegend { get; }
    public ReportStringProperty ChartAreaName { get; }
    public ReportStringProperty ValueAxisName { get; }
    public ReportStringProperty CategoryAxisName { get; }
    public ChartDataLabel DataLabel { get; }
    public ChartMarker Marker { get; }
    internal ReportStringProperty ToolTip { get; }
    public ReportBoolProperty Hidden { get; }
    public ChartItemInLegend ChartItemInLegend { get; }
    public ChartSeriesInstance Instance { get; }
    internal ShimChartSeries(Chart owner, int seriesIndex, ShimChartMember seriesParentMember);
    private void GenerateChartDataPoints(ShimChartMember seriesParentMember, ShimChartMember categoryParentMember, ShimChartMemberCollection categoryMembers);
    public virtual ChartDataPoint get_Item(int index);
    public virtual int get_Count();
    public virtual string get_Name();
    public virtual Style get_Style();
    internal virtual ActionInfo get_ActionInfo();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual ReportEnumProperty`1<ChartSeriesType> get_Type();
    public virtual ReportEnumProperty`1<ChartSeriesSubtype> get_Subtype();
    public virtual ChartSmartLabel get_SmartLabel();
    public virtual ChartEmptyPoints get_EmptyPoints();
    public virtual ReportStringProperty get_LegendName();
    internal virtual ReportStringProperty get_LegendText();
    internal virtual ReportBoolProperty get_HideInLegend();
    public virtual ReportStringProperty get_ChartAreaName();
    public virtual ReportStringProperty get_ValueAxisName();
    public virtual ReportStringProperty get_CategoryAxisName();
    public virtual ChartDataLabel get_DataLabel();
    public virtual ChartMarker get_Marker();
    internal virtual ReportStringProperty get_ToolTip();
    public virtual ReportBoolProperty get_Hidden();
    public virtual ChartItemInLegend get_ChartItemInLegend();
    public virtual ChartSeriesInstance get_Instance();
    private void TranslateChartType(ChartTypes chartType, ChartSubTypes chartSubType);
    private ChartSeriesSubtype TranslateChartSubType(ChartSubTypes chartSubTypes);
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimChartSeriesCollection : ChartSeriesCollection {
    private List`1<ShimChartSeries> m_series;
    public ChartSeries Item { get; }
    public int Count { get; }
    internal ShimChartSeriesCollection(Chart owner);
    private void AppendChartSeries(ShimChartMember seriesParentMember, ShimChartMemberCollection seriesMembers);
    public virtual ChartSeries get_Item(int index);
    public virtual int get_Count();
    internal void UpdateCells(ShimChartMember innermostMember);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDataCell : DataCell {
    private DataCell m_renderDataCell;
    private ShimDataMember m_rowParentMember;
    private ShimDataMember m_columnParentMember;
    public DataValueCollection DataValues { get; }
    internal DataCell DataCellDef { get; }
    internal DataCell RenderItem { get; }
    private DataCell CachedRenderDataCell { get; }
    internal ShimDataCell(CustomReportItem owner, int rowIndex, int colIndex, ShimDataMember rowParentMember, ShimDataMember columnParentMember);
    public virtual DataValueCollection get_DataValues();
    internal virtual DataCell get_DataCellDef();
    internal virtual DataCell get_RenderItem();
    private DataCell get_CachedRenderDataCell();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDataMember : DataMember {
    private bool m_isColumn;
    private bool m_isStatic;
    private int m_staticIndex;
    private int m_definitionStartIndex;
    private int m_definitionEndIndex;
    private DataMemberCollection m_renderMembers;
    internal string UniqueName { get; }
    public string ID { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public bool IsStatic { get; }
    public bool IsColumn { get; }
    public int RowSpan { get; }
    public int ColSpan { get; }
    public int MemberCellIndex { get; }
    internal DataMember MemberDefinition { get; }
    public DataMemberInstance Instance { get; }
    internal int DefinitionStartIndex { get; }
    internal int DefinitionEndIndex { get; }
    internal DataMember CurrentRenderDataMember { get; }
    internal ShimDataMember(IDefinitionPath parentDefinitionPath, CustomReportItem owner, ShimDataMember parent, int parentCollectionIndex, bool isColumn, bool isStatic, DataMemberCollection renderMembers, int staticIndex);
    internal virtual string get_UniqueName();
    public virtual string get_ID();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual bool get_IsStatic();
    public virtual bool get_IsColumn();
    public virtual int get_RowSpan();
    public virtual int get_ColSpan();
    public virtual int get_MemberCellIndex();
    internal virtual DataMember get_MemberDefinition();
    public virtual DataMemberInstance get_Instance();
    internal int get_DefinitionStartIndex();
    internal int get_DefinitionEndIndex();
    internal DataMember get_CurrentRenderDataMember();
    internal bool SetNewContext(int index);
    internal virtual void ResetContext();
    internal void ResetContext(DataMemberCollection renderMembers);
    private void UpdateInnerContext(DataMember currentRenderMember);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDataMemberCollection : DataMemberCollection {
    private bool m_isStatic;
    private bool m_isColumnMember;
    private int m_definitionStartIndex;
    private int m_definitionEndIndex;
    private DataGroupingCollection m_definitionGroups;
    public DataMember Item { get; }
    public int Count { get; }
    internal ShimDataMemberCollection(IDefinitionPath parentDefinitionPath, CustomReportItem owner, bool isColumnMember, ShimDataMember parent, DataGroupingCollection definitionGroups);
    public virtual DataMember get_Item(int index);
    public virtual int get_Count();
    internal void UpdateContext();
    internal void ResetContext(DataGroupingCollection definitionGroups);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDataRow : DataRow {
    private List`1<ShimDataCell> m_cells;
    public DataCell Item { get; }
    public int Count { get; }
    internal ShimDataRow(CustomReportItem owner, int rowIndex, ShimDataMember parentDataMember);
    private void GenerateDataCells(ShimDataMember rowParentMember, ShimDataMember columnParentMember, ShimDataMemberCollection columnMembers);
    public virtual DataCell get_Item(int index);
    public virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDataRowCollection : DataRowCollection {
    private List`1<ShimDataRow> m_dataRows;
    public DataRow Item { get; }
    public int Count { get; }
    internal ShimDataRowCollection(CustomReportItem owner);
    private void AppendDataRows(ShimDataMember rowParentMember, ShimDataMemberCollection rowMembers);
    public virtual DataRow get_Item(int index);
    public virtual int get_Count();
    internal void UpdateCells(ShimDataMember innermostMember);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDataValueInstance : DataValueInstance {
    private string m_name;
    private object m_value;
    public string Name { get; }
    public object Value { get; }
    internal ShimDataValueInstance(string name, object value);
    public virtual string get_Name();
    public virtual object get_Value();
    internal void Update(string name, object value);
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDocumentMap : DocumentMap {
    private DocumentMapNode m_oldDocMap;
    private DocumentMapNode m_current;
    private Stack`1<IEnumerator`1<DocumentMapNode>> m_nodeInfoStack;
    private OnDemandDocumentMapNode System.Collections.Generic.IEnumerator<Microsoft.ReportingServices.ReportProcessing.OnDemandDocumentMapNode>.Current { get; }
    public DocumentMapNode Current { get; }
    internal ShimDocumentMap(DocumentMapNode aOldDocMap);
    public virtual void Close();
    private sealed virtual override OnDemandDocumentMapNode System.Collections.Generic.IEnumerator<Microsoft.ReportingServices.ReportProcessing.OnDemandDocumentMapNode>.get_Current();
    public virtual DocumentMapNode get_Current();
    public virtual void Dispose();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDynamicDataMemberInstance : DataDynamicMemberInstance {
    internal ShimDynamicDataMemberInstance(CustomReportItem owner, DataMember memberDef);
    public virtual bool MoveNext();
    public virtual void ResetContext();
    public virtual bool SetInstanceIndex(int index);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimDynamicMemberInstance : TablixDynamicMemberInstance {
    internal ShimDynamicMemberInstance(Tablix owner, TablixMember memberDef);
    public virtual bool MoveNext();
    public virtual void ResetContext();
    public virtual bool SetInstanceIndex(int index);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimListCell : ShimCell {
    private ListContent m_currentListContents;
    private Rectangle m_shimContainer;
    public CellContents CellContents { get; }
    internal ShimListCell(Tablix owner);
    public virtual CellContents get_CellContents();
    internal void SetCellContents(ListContent renderContents);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimListMember : ShimTablixMember {
    public string ID { get; }
    public TablixMemberCollection Children { get; }
    public bool IsStatic { get; }
    internal int RowSpan { get; }
    internal int ColSpan { get; }
    public int MemberCellIndex { get; }
    public bool KeepTogether { get; }
    public bool IsTotal { get; }
    public TablixHeader TablixHeader { get; }
    public Visibility Visibility { get; }
    internal PageBreakLocation PropagatedGroupBreak { get; }
    public TablixMemberInstance Instance { get; }
    internal ShimListMember(IDefinitionPath parentDefinitionPath, Tablix owner, ShimRenderGroups renderGroups, int parentCollectionIndex, bool isColumn);
    public virtual string get_ID();
    public virtual TablixMemberCollection get_Children();
    public virtual bool get_IsStatic();
    internal virtual int get_RowSpan();
    internal virtual int get_ColSpan();
    public virtual int get_MemberCellIndex();
    public virtual bool get_KeepTogether();
    public virtual bool get_IsTotal();
    public virtual TablixHeader get_TablixHeader();
    public virtual Visibility get_Visibility();
    internal virtual PageBreakLocation get_PropagatedGroupBreak();
    public virtual TablixMemberInstance get_Instance();
    internal virtual bool SetNewContext(int index);
    internal virtual void ResetContext();
    internal void ResetContext(ShimRenderGroups renderGroups);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimListMemberCollection : ShimMemberCollection {
    private ShimRenderGroups m_renderGroups;
    public TablixMember Item { get; }
    public int Count { get; }
    internal ShimListMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner);
    internal ShimListMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner, ListContentCollection renderListContents);
    public virtual TablixMember get_Item(int index);
    public virtual int get_Count();
    internal void UpdateContext(ListContentCollection renderListContents);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimListMemberVisibility : ShimMemberVisibility {
    private ShimListMember m_owner;
    public ReportBoolProperty Hidden { get; }
    public string ToggleItem { get; }
    public bool RecursiveToggleReceiver { get; }
    public SharedHiddenState HiddenState { get; }
    public ShimListMemberVisibility(ShimListMember owner);
    public virtual ReportBoolProperty get_Hidden();
    public virtual string get_ToggleItem();
    public virtual bool get_RecursiveToggleReceiver();
    public virtual SharedHiddenState get_HiddenState();
    internal virtual bool GetInstanceHidden();
    internal virtual bool GetInstanceStartHidden();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimListRow : TablixRow {
    private ReportSize m_height;
    private ShimListCell m_cell;
    public TablixCell Item { get; }
    public int Count { get; }
    public ReportSize Height { get; }
    internal ShimListRow(Tablix owner);
    public virtual TablixCell get_Item(int index);
    public virtual int get_Count();
    public virtual ReportSize get_Height();
    internal void UpdateCells(ListContent renderContents);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimListRowCollection : TablixRowCollection {
    private ShimListRow m_row;
    public TablixRow Item { get; }
    public int Count { get; }
    internal ShimListRowCollection(Tablix owner);
    public virtual TablixRow get_Item(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimMatrixCell : ShimCell {
    private ReportItem m_renderReportItem;
    private ShimMatrixMember m_rowParentMember;
    private ShimMatrixMember m_colParentMember;
    public CellContents CellContents { get; }
    private ReportItem CachedRenderReportItem { get; }
    internal ShimMatrixCell(Tablix owner, int rowIndex, int colIndex, ShimMatrixMember rowParentMember, ShimMatrixMember colParentMember, bool inSubtotal);
    public virtual CellContents get_CellContents();
    private ReportItem get_CachedRenderReportItem();
    internal void ResetCellContents();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimMatrixMember : ShimTablixMember {
    private int m_definitionStartIndex;
    private int m_definitionEndIndex;
    private int m_renderCollectionIndex;
    private bool m_isAfterSubtotal;
    internal MatrixMember m_staticOrSubtotal;
    private MatrixMemberInfoCache m_currentMatrixMemberCellIndexes;
    internal double SizeDelta { get; }
    public bool HideIfNoRows { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public TablixHeader TablixHeader { get; }
    public TablixMemberCollection Children { get; }
    public bool FixedData { get; }
    public bool IsStatic { get; }
    internal int RowSpan { get; }
    internal int ColSpan { get; }
    public int MemberCellIndex { get; }
    public bool IsTotal { get; }
    public Visibility Visibility { get; }
    internal PageBreakLocation PropagatedGroupBreak { get; }
    public bool KeepTogether { get; }
    public TablixMemberInstance Instance { get; }
    internal int DefinitionStartIndex { get; }
    internal int DefinitionEndIndex { get; }
    internal int AdjustedRenderCollectionIndex { get; }
    internal MatrixMemberInfoCache CurrentMatrixMemberCellIndexes { get; }
    internal MatrixMember CurrentRenderMatrixMember { get; }
    internal ShimMatrixMember(IDefinitionPath parentDefinitionPath, Tablix owner, ShimMatrixMember parent, int parentCollectionIndex, bool isColumn, int renderCollectionIndex, MatrixMember staticOrSubtotal, bool isAfterSubtotal, MatrixMemberInfoCache matrixMemberCellIndexes);
    internal ShimMatrixMember(IDefinitionPath parentDefinitionPath, Tablix owner, ShimMatrixMember parent, int parentCollectionIndex, bool isColumn, int renderCollectionIndex, ShimRenderGroups renderGroups, MatrixMemberInfoCache matrixMemberCellIndexes);
    private void GenerateInnerHierarchy(Tablix owner, ShimMatrixMember parent, bool isColumn, MatrixMemberCollection children);
    internal double get_SizeDelta();
    public virtual bool get_HideIfNoRows();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual TablixHeader get_TablixHeader();
    public virtual TablixMemberCollection get_Children();
    public virtual bool get_FixedData();
    public virtual bool get_IsStatic();
    internal virtual int get_RowSpan();
    internal virtual int get_ColSpan();
    public virtual int get_MemberCellIndex();
    public virtual bool get_IsTotal();
    public virtual Visibility get_Visibility();
    internal virtual PageBreakLocation get_PropagatedGroupBreak();
    public virtual bool get_KeepTogether();
    public virtual TablixMemberInstance get_Instance();
    internal int get_DefinitionStartIndex();
    internal int get_DefinitionEndIndex();
    internal int get_AdjustedRenderCollectionIndex();
    internal MatrixMemberInfoCache get_CurrentMatrixMemberCellIndexes();
    internal MatrixMember get_CurrentRenderMatrixMember();
    internal virtual bool SetNewContext(int index);
    internal virtual void ResetContext();
    internal void ResetContext(MatrixMember staticOrSubtotal, int newAfterSubtotalCollectionIndex, ShimRenderGroups renderGroups, MatrixMemberInfoCache newMatrixMemberCellIndexes);
    private void UpdateContext(MatrixMember currentRenderGroup);
    private void UpdateMatrixMemberInfoCache(int currentAllocationSize, MatrixMemberInfoCache newMatrixMemberCellIndexes);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimMatrixMemberCollection : ShimMemberCollection {
    private int m_definitionStartIndex;
    private int m_definitionEndIndex;
    private int m_dynamicSubgroupChildIndex;
    private int m_subtotalChildIndex;
    private double m_sizeDelta;
    public TablixMember Item { get; }
    internal double SizeDelta { get; }
    public int Count { get; }
    internal PageBreakLocation PropagatedGroupBreakLocation { get; }
    internal ShimMatrixMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner, bool isColumnGroup, ShimMatrixMember parent, MatrixMemberCollection renderMemberCollection, MatrixMemberInfoCache matrixMemberCellIndexes);
    public virtual TablixMember get_Item(int index);
    internal virtual double get_SizeDelta();
    public virtual int get_Count();
    internal PageBreakLocation get_PropagatedGroupBreakLocation();
    internal void UpdateContext(MatrixMemberInfoCache matrixMemberCellIndexes);
    internal void ResetContext(MatrixMemberCollection newRenderMemberCollection);
    internal void ResetContext(MatrixMemberCollection newRenderMemberCollection, MatrixMemberInfoCache matrixMemberCellIndexes);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimMatrixMemberVisibility : ShimMemberVisibility {
    private ShimMatrixMember m_owner;
    public ReportBoolProperty Hidden { get; }
    public string ToggleItem { get; }
    public bool RecursiveToggleReceiver { get; }
    public SharedHiddenState HiddenState { get; }
    public ShimMatrixMemberVisibility(ShimMatrixMember owner);
    public virtual ReportBoolProperty get_Hidden();
    public virtual string get_ToggleItem();
    public virtual bool get_RecursiveToggleReceiver();
    public virtual SharedHiddenState get_HiddenState();
    internal virtual bool GetInstanceHidden();
    internal virtual bool GetInstanceStartHidden();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimMatrixRow : TablixRow {
    private List`1<ShimMatrixCell> m_cells;
    private ReportSize m_height;
    public TablixCell Item { get; }
    public int Count { get; }
    public ReportSize Height { get; }
    internal ShimMatrixRow(Tablix owner, int rowIndex, ShimMatrixMember rowParentMember, bool inSubtotalRow);
    private void GenerateMatrixCells(ShimMatrixMember rowParentMember, ShimMatrixMember colParentMember, ShimMatrixMemberCollection columnMembers, bool inSubtotalRow, bool inSubtotalColumn);
    public virtual TablixCell get_Item(int index);
    public virtual int get_Count();
    public virtual ReportSize get_Height();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimMatrixRowCollection : TablixRowCollection {
    private List`1<ShimMatrixRow> m_rows;
    public TablixRow Item { get; }
    public int Count { get; }
    internal ShimMatrixRowCollection(Tablix owner);
    private void AppendMatrixRows(ShimMatrixMember rowParentMember, ShimMatrixMemberCollection rowMembers, bool inSubtotalRow);
    public virtual TablixRow get_Item(int index);
    public virtual int get_Count();
    internal void UpdateCells(ShimMatrixMember innermostMember);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ShimMemberCollection : TablixMemberCollection {
    protected bool m_isColumnGroup;
    internal ShimMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner, bool isColumnGroup);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ShimMemberVisibility : Visibility {
    internal abstract virtual bool GetInstanceHidden();
    internal abstract virtual bool GetInstanceStartHidden();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimMemberVisibilityInstance : VisibilityInstance {
    private ShimMemberVisibility m_owner;
    public bool CurrentlyHidden { get; }
    public bool StartHidden { get; }
    internal ShimMemberVisibilityInstance(ShimMemberVisibility owner);
    public virtual bool get_CurrentlyHidden();
    public virtual bool get_StartHidden();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimPageEvaluation : PageEvaluation {
    private Report m_report;
    private CultureInfo m_reportCulture;
    private Hashtable m_aggregatesOverReportItems;
    private AggregatesImpl m_aggregates;
    private ProcessingContext m_processingContext;
    internal ShimPageEvaluation(Report report);
    internal virtual void Reset(int newPageNumber, int newTotalPages);
    internal virtual void Add(string textboxName, object textboxValue);
    internal virtual void UpdatePageSections(Page page);
    private PageSection GenerateRenderPageSection(PageSection pageSection, string uniqueNamePrefix);
    private void InitializeEnvironment();
    private void PageInit();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimParagraph : Paragraph {
    private ParagraphFilteredStyle m_filteredStyle;
    public string ID { get; }
    public Style Style { get; }
    public ReportEnumProperty`1<ListStyle> ListStyle { get; }
    public ReportIntProperty ListLevel { get; }
    public ParagraphInstance Instance { get; }
    internal ShimParagraph(TextBox textBox, RenderingContext renderingContext);
    public virtual string get_ID();
    public virtual Style get_Style();
    public virtual ReportEnumProperty`1<ListStyle> get_ListStyle();
    public virtual ReportIntProperty get_ListLevel();
    public virtual ParagraphInstance get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimParagraphInstance : ParagraphInstance {
    public string UniqueName { get; }
    public bool IsCompiled { get; }
    internal ShimParagraphInstance(Paragraph paragraphDef);
    public virtual string get_UniqueName();
    public virtual bool get_IsCompiled();
    protected virtual void ResetInstanceCache();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimRenderGroups : object {
    private Type m_type;
    private bool m_beforeSubtotal;
    private bool m_afterSubtotal;
    private ListContentCollection m_renderListContents;
    private TableGroupCollection m_renderTableGroups;
    private MatrixMemberCollection m_renderMatrixMembers;
    private ChartMemberCollection m_renderChartMembers;
    private DataMemberCollection m_renderDataMembers;
    internal int Count { get; }
    internal int MatrixMemberCollectionCount { get; }
    internal Group Item { get; }
    internal ShimRenderGroups(ListContentCollection renderGroups);
    internal ShimRenderGroups(TableGroupCollection renderGroups);
    internal ShimRenderGroups(MatrixMemberCollection renderGroups, bool beforeSubtotal, bool afterSubtotal);
    internal ShimRenderGroups(ChartMemberCollection renderGroups);
    internal ShimRenderGroups(DataMemberCollection renderGroups);
    internal int get_Count();
    internal int get_MatrixMemberCollectionCount();
    internal Group get_Item(int index);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTableCell : ShimCell {
    private int m_colSpan;
    private TableCell m_renderCellContents;
    private ReportItem m_renderReportItem;
    public CellContents CellContents { get; }
    internal ShimTableCell(Tablix owner, int rowIndex, int colIndex, int colSpan, ReportItem renderReportItem);
    public virtual CellContents get_CellContents();
    internal void SetCellContents(TableCell renderCellContents);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTableMember : ShimTablixMember {
    private bool m_isDetailGroup;
    private bool m_isFixedHeader;
    private KeepWithGroup m_keepWithGroup;
    private int m_rowDefinitionStartIndex;
    private int m_rowDefinitionEndIndex;
    private TableColumn m_column;
    private TableRowsCollection m_renderDetails;
    private TableRow m_innerStaticRow;
    public KeepWithGroup KeepWithGroup { get; }
    public bool RepeatOnNewPage { get; }
    public string DataElementName { get; }
    public TablixMemberCollection Children { get; }
    public bool FixedData { get; }
    public bool IsStatic { get; }
    public bool IsColumn { get; }
    internal int RowSpan { get; }
    internal int ColSpan { get; }
    public int MemberCellIndex { get; }
    public TablixHeader TablixHeader { get; }
    public bool IsTotal { get; }
    public Visibility Visibility { get; }
    internal PageBreakLocation PropagatedGroupBreak { get; }
    public bool HideIfNoRows { get; }
    public TablixMemberInstance Instance { get; }
    internal int RowDefinitionEndIndex { get; }
    internal string DetailInstanceUniqueName { get; }
    internal TableRowsCollection RenderTableDetails { get; }
    internal TableGroup RenderTableGroup { get; }
    internal TableRow RenderTableRow { get; }
    internal TableColumn RenderTableColumn { get; }
    internal ShimTableMember(IDefinitionPath parentDefinitionPath, Tablix owner, ShimTableMember parent, int parentCollectionIndex, TableRow staticRow, KeepWithGroup keepWithGroup, bool isFixedTableHeader);
    internal ShimTableMember(IDefinitionPath parentDefinitionPath, Tablix owner, ShimTableMember parent, int parentCollectionIndex, ShimRenderGroups renderGroups);
    internal ShimTableMember(IDefinitionPath parentDefinitionPath, Tablix owner, ShimTableMember parent, int parentCollectionIndex, TableRowsCollection renderRows);
    internal ShimTableMember(IDefinitionPath parentDefinitionPath, Tablix owner, int columnIndex, TableColumnCollection columns);
    public virtual KeepWithGroup get_KeepWithGroup();
    public virtual bool get_RepeatOnNewPage();
    public virtual string get_DataElementName();
    public virtual TablixMemberCollection get_Children();
    public virtual bool get_FixedData();
    public virtual bool get_IsStatic();
    public virtual bool get_IsColumn();
    internal virtual int get_RowSpan();
    internal virtual int get_ColSpan();
    public virtual int get_MemberCellIndex();
    public virtual TablixHeader get_TablixHeader();
    public virtual bool get_IsTotal();
    public virtual Visibility get_Visibility();
    internal virtual PageBreakLocation get_PropagatedGroupBreak();
    public virtual bool get_HideIfNoRows();
    public virtual TablixMemberInstance get_Instance();
    internal virtual bool SetNewContext(int index);
    internal void UpdateRow(TableRow newTableRow);
    internal virtual void ResetContext();
    internal void ResetContext(TableGroupCollection newRenderSubGroups, TableRowsCollection newRenderDetails);
    internal int get_RowDefinitionEndIndex();
    internal string get_DetailInstanceUniqueName();
    internal TableRowsCollection get_RenderTableDetails();
    internal TableGroup get_RenderTableGroup();
    internal TableRow get_RenderTableRow();
    internal TableColumn get_RenderTableColumn();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTableMemberCollection : ShimMemberCollection {
    private int m_rowDefinitionStartIndex;
    private int m_rowDefinitionEndIndex;
    private int m_dynamicSubgroupChildIndex;
    public TablixMember Item { get; }
    public int Count { get; }
    internal PageBreakLocation PropagatedGroupBreakLocation { get; }
    internal ShimTableMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner, bool isColumnGroup);
    internal ShimTableMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner, ShimTableMember parent, TableGroup tableGroup);
    internal ShimTableMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner, ShimTableMember parent, TableDetailRowCollection detailRows);
    private TablixMember[] CreateInnerHierarchy(Tablix owner, ShimTableMember parent, TableHeaderFooterRows headerRows, TableHeaderFooterRows footerRows, TableGroupCollection subGroups, TableRowsCollection detailRows, Int32& dynamicSubgroupChildIndex);
    private static KeepWithGroup DetermineKeepWithGroup(bool isHeader, TableHeaderFooterRows rows, bool noKeepWith);
    private void CreateHeaderFooter(List`1<ShimTableMember> rowGroups, TableHeaderFooterRows headerFooterRows, KeepWithGroup keepWithGroup, Tablix owner, ShimTableMember parent, bool isFixedTableHeader);
    private void CreateInnerDynamicGroups(List`1<ShimTableMember> rowGroups, TableGroupCollection renderGroupCollection, Tablix owner, ShimTableMember parent);
    public virtual TablixMember get_Item(int index);
    public virtual int get_Count();
    internal void UpdateContext();
    internal void UpdateHeaderFooter(TableHeaderFooterRows headerRows, TableHeaderFooterRows footerRows);
    internal void UpdateDetails(TableDetailRowCollection newRenderDetails);
    internal void ResetContext(TableGroup newRenderGroup);
    internal PageBreakLocation get_PropagatedGroupBreakLocation();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTableMemberVisibility : ShimMemberVisibility {
    private ShimTableMember m_owner;
    private Mode m_mode;
    public ReportBoolProperty Hidden { get; }
    public string ToggleItem { get; }
    public bool RecursiveToggleReceiver { get; }
    public SharedHiddenState HiddenState { get; }
    public ShimTableMemberVisibility(ShimTableMember owner, Mode mode);
    public virtual ReportBoolProperty get_Hidden();
    public virtual string get_ToggleItem();
    public virtual bool get_RecursiveToggleReceiver();
    public virtual SharedHiddenState get_HiddenState();
    private Visibility GetVisibilityDefinition();
    internal virtual bool GetInstanceHidden();
    internal virtual bool GetInstanceStartHidden();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTableRow : TablixRow {
    private List`1<ShimTableCell> m_cells;
    private ReportSize m_height;
    private Int32[] m_rowCellDefinitionMapping;
    public TablixCell Item { get; }
    public int Count { get; }
    public ReportSize Height { get; }
    internal ShimTableRow(Tablix owner, int rowIndex, TableRow renderRow);
    public virtual TablixCell get_Item(int index);
    public virtual int get_Count();
    public virtual ReportSize get_Height();
    internal void UpdateCells(TableRow renderRow);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTableRowCollection : TablixRowCollection {
    private List`1<TablixRow> m_rows;
    public TablixRow Item { get; }
    public int Count { get; }
    internal ShimTableRowCollection(Tablix owner);
    public virtual TablixRow get_Item(int index);
    public virtual int get_Count();
    private void AppendTableGroups(TableGroup renderGroup);
    private void AppendTableRows(TableRowCollection renderRows);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.ShimTablixMember : TablixMember {
    protected bool m_isColumn;
    protected PageBreakLocation m_propagatedPageBreak;
    internal string UniqueName { get; }
    public string ID { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public TablixHeader TablixHeader { get; }
    public bool IsColumn { get; }
    public bool HideIfNoRows { get; }
    internal TablixMember MemberDefinition { get; }
    public bool FixedData { get; }
    public KeepWithGroup KeepWithGroup { get; }
    public bool RepeatOnNewPage { get; }
    internal ShimTablixMember(IDefinitionPath parentDefinitionPath, Tablix owner, TablixMember parent, int parentCollectionIndex, bool isColumn);
    internal virtual string get_UniqueName();
    public virtual string get_ID();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual TablixHeader get_TablixHeader();
    public virtual bool get_IsColumn();
    public virtual bool get_HideIfNoRows();
    internal virtual TablixMember get_MemberDefinition();
    internal virtual void ResetContext();
    public virtual bool get_FixedData();
    public virtual KeepWithGroup get_KeepWithGroup();
    public virtual bool get_RepeatOnNewPage();
    internal virtual void SetPropagatedPageBreak(PageBreakLocation pageBreakLocation);
    internal abstract virtual bool SetNewContext(int index);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTextRun : TextRun {
    private TextRunFilteredStyle m_filteredStyle;
    public string ID { get; }
    public Style Style { get; }
    public ReportStringProperty Value { get; }
    public TypeCode SharedTypeCode { get; }
    public ReportEnumProperty`1<MarkupType> MarkupType { get; }
    public bool FormattedValueExpressionBased { get; }
    public TextRunInstance Instance { get; }
    internal ShimTextRun(Paragraph paragraph, RenderingContext renderingContext);
    public virtual string get_ID();
    public virtual Style get_Style();
    public virtual ReportStringProperty get_Value();
    public virtual TypeCode get_SharedTypeCode();
    public virtual ReportEnumProperty`1<MarkupType> get_MarkupType();
    public virtual bool get_FormattedValueExpressionBased();
    public virtual TextRunInstance get_Instance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ShimTextRunInstance : TextRunInstance {
    private TextBoxInstance m_textBoxInstance;
    public string UniqueName { get; }
    public MarkupType MarkupType { get; }
    public string Value { get; }
    public object OriginalValue { get; }
    public TypeCode TypeCode { get; }
    public bool IsCompiled { get; }
    public bool ProcessedWithError { get; }
    internal ShimTextRunInstance(TextRun textRunDef, TextBoxInstance textBoxInstance);
    public virtual string get_UniqueName();
    public virtual MarkupType get_MarkupType();
    public virtual string get_Value();
    public virtual object get_OriginalValue();
    public virtual TypeCode get_TypeCode();
    public virtual bool get_IsCompiled();
    public virtual bool get_ProcessedWithError();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.SortOptions : Enum {
    public int value__;
    public static SortOptions None;
    public static SortOptions Ascending;
    public static SortOptions Descending;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.StateImage : BaseGaugeImage {
    internal StateImage StateImageDef { get; }
    public StateImageInstance Instance { get; }
    internal StateImage(StateImage defObject, GaugePanel gaugePanel);
    internal StateImage get_StateImageDef();
    public StateImageInstance get_Instance();
    internal virtual BaseGaugeImageInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.StateImageInstance : BaseGaugeImageInstance {
    internal StateImageInstance(StateImage defObject);
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.StateIndicator : GaugePanelItem {
    internal StateIndicator StateIndicatorDef { get; }
    public StateIndicatorInstance Instance { get; }
    internal StateIndicator(StateIndicator defObject, GaugePanel gaugePanel);
    internal StateIndicator get_StateIndicatorDef();
    public StateIndicatorInstance get_Instance();
    internal virtual BaseInstance GetInstance();
    internal virtual void SetNewContext();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.StateIndicatorCollection : GaugePanelObjectCollectionBase`1<StateIndicator> {
    private GaugePanel m_gaugePanel;
    public StateIndicator Item { get; }
    public int Count { get; }
    internal StateIndicatorCollection(GaugePanel gaugePanel);
    protected virtual StateIndicator CreateGaugePanelObject(int index);
    public StateIndicator get_Item(string name);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.StateIndicatorInstance : GaugePanelItemInstance {
    private StateIndicator m_defObject;
    internal StateIndicatorInstance(StateIndicator defObject);
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.StringEqualityComparer : object {
    internal static IEqualityComparer`1<string> Instance;
    private static StringEqualityComparer();
    public sealed virtual bool Equals(string str1, string str2);
    public sealed virtual int GetHashCode(string str);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.Style : StyleBase {
    private bool m_isOldSnapshot;
    private IStyleContainer m_iStyleContainer;
    private ReportItem m_renderReportItem;
    private Style m_cachedRenderStyle;
    private bool m_isLineBorderStyle;
    private StyleDefaults m_styleDefaults;
    private BackgroundImage m_backgroundImage;
    private Border m_border;
    private Border m_topBorder;
    private Border m_rightBorder;
    private Border m_bottomBorder;
    private Border m_leftBorder;
    internal static StyleDefaults NormalStyleDefaults;
    internal static StyleDefaults LineStyleDefaults;
    private IReportScope m_reportScope;
    private ReportElement m_reportElement;
    private Style m_styleDef;
    private bool m_isChartStyle;
    private Object[] m_styleValues;
    private ReportProperty[] m_cachedReportProperties;
    private bool m_disallowBorderTransparencyOnChart;
    internal static FontStyles DefaultEnumFontStyle;
    internal static FontWeights DefaultEnumFontWeight;
    internal static TextDecorations DefaultEnumTextDecoration;
    internal static TextAlignments DefaultEnumTextAlignment;
    internal static VerticalAlignments DefaultEnumVerticalAlignment;
    internal static Directions DefaultEnumDirection;
    internal static WritingModes DefaultEnumWritingMode;
    internal static UnicodeBiDiTypes DefaultEnumUnicodeBiDiType;
    internal static Calendars DefaultEnumCalendar;
    internal static BackgroundGradients DefaultEnumBackgroundGradient;
    internal static BackgroundRepeatTypes DefaultEnumBackgroundRepeatType;
    internal IReportScope ReportScope { get; }
    internal ReportElement ReportElement { get; }
    public ReportProperty Item { get; }
    public List`1<StyleAttributeNames> SharedStyleAttributes { get; }
    public List`1<StyleAttributeNames> NonSharedStyleAttributes { get; }
    public BackgroundImage BackgroundImage { get; }
    public Border Border { get; }
    public Border TopBorder { get; }
    public Border RightBorder { get; }
    public Border BottomBorder { get; }
    public Border LeftBorder { get; }
    public ReportColorProperty BackgroundGradientEndColor { get; }
    public ReportColorProperty BackgroundColor { get; }
    public ReportColorProperty Color { get; }
    public ReportEnumProperty`1<FontStyles> FontStyle { get; }
    public ReportStringProperty FontFamily { get; }
    public ReportEnumProperty`1<FontWeights> FontWeight { get; }
    public ReportStringProperty Format { get; }
    public ReportEnumProperty`1<TextDecorations> TextDecoration { get; }
    public ReportEnumProperty`1<TextAlignments> TextAlign { get; }
    public ReportEnumProperty`1<VerticalAlignments> VerticalAlign { get; }
    public ReportEnumProperty`1<Directions> Direction { get; }
    public ReportEnumProperty`1<WritingModes> WritingMode { get; }
    public ReportStringProperty Language { get; }
    public ReportEnumProperty`1<UnicodeBiDiTypes> UnicodeBiDi { get; }
    public ReportEnumProperty`1<Calendars> Calendar { get; }
    public ReportStringProperty NumeralLanguage { get; }
    public ReportEnumProperty`1<BackgroundGradients> BackgroundGradientType { get; }
    public ReportSizeProperty FontSize { get; }
    public ReportSizeProperty PaddingLeft { get; }
    public ReportSizeProperty PaddingRight { get; }
    public ReportSizeProperty PaddingTop { get; }
    public ReportSizeProperty PaddingBottom { get; }
    public ReportSizeProperty LineHeight { get; }
    public ReportIntProperty NumeralVariant { get; }
    public ReportEnumProperty`1<TextEffects> TextEffect { get; }
    public ReportEnumProperty`1<BackgroundHatchTypes> BackgroundHatchType { get; }
    public ReportColorProperty ShadowColor { get; }
    public ReportSizeProperty ShadowOffset { get; }
    internal bool IsOldSnapshot { get; }
    internal bool IsChartStyle { get; }
    internal Style CachedRenderStyle { get; }
    internal IStyleContainer StyleContainer { get; }
    internal Style(ReportElement reportElement, IReportScope reportScope, IStyleContainer styleContainer, RenderingContext renderingContext);
    internal Style(ReportItem renderReportItem, RenderingContext renderingContext, bool useRenderStyle);
    internal Style(Style styleDefinition, Object[] styleValues, RenderingContext renderingContext);
    internal Style(ReportElement reportElement, RenderingContext renderingContext);
    private static Style();
    internal IReportScope get_ReportScope();
    internal ReportElement get_ReportElement();
    public virtual ReportProperty get_Item(StyleAttributeNames style);
    public virtual List`1<StyleAttributeNames> get_SharedStyleAttributes();
    public virtual List`1<StyleAttributeNames> get_NonSharedStyleAttributes();
    public virtual BackgroundImage get_BackgroundImage();
    public virtual Border get_Border();
    public virtual Border get_TopBorder();
    public virtual Border get_RightBorder();
    public virtual Border get_BottomBorder();
    public virtual Border get_LeftBorder();
    public virtual ReportColorProperty get_BackgroundGradientEndColor();
    public virtual ReportColorProperty get_BackgroundColor();
    public virtual ReportColorProperty get_Color();
    public virtual ReportEnumProperty`1<FontStyles> get_FontStyle();
    public virtual ReportStringProperty get_FontFamily();
    public virtual ReportEnumProperty`1<FontWeights> get_FontWeight();
    public virtual ReportStringProperty get_Format();
    public virtual ReportEnumProperty`1<TextDecorations> get_TextDecoration();
    public virtual ReportEnumProperty`1<TextAlignments> get_TextAlign();
    public virtual ReportEnumProperty`1<VerticalAlignments> get_VerticalAlign();
    public virtual ReportEnumProperty`1<Directions> get_Direction();
    public virtual ReportEnumProperty`1<WritingModes> get_WritingMode();
    public virtual ReportStringProperty get_Language();
    public virtual ReportEnumProperty`1<UnicodeBiDiTypes> get_UnicodeBiDi();
    public virtual ReportEnumProperty`1<Calendars> get_Calendar();
    public virtual ReportStringProperty get_NumeralLanguage();
    public virtual ReportEnumProperty`1<BackgroundGradients> get_BackgroundGradientType();
    public virtual ReportSizeProperty get_FontSize();
    public virtual ReportSizeProperty get_PaddingLeft();
    public virtual ReportSizeProperty get_PaddingRight();
    public virtual ReportSizeProperty get_PaddingTop();
    public virtual ReportSizeProperty get_PaddingBottom();
    public virtual ReportSizeProperty get_LineHeight();
    public virtual ReportIntProperty get_NumeralVariant();
    public virtual ReportEnumProperty`1<TextEffects> get_TextEffect();
    public virtual ReportEnumProperty`1<BackgroundHatchTypes> get_BackgroundHatchType();
    public virtual ReportColorProperty get_ShadowColor();
    public virtual ReportSizeProperty get_ShadowOffset();
    internal bool get_IsOldSnapshot();
    internal bool get_IsChartStyle();
    internal Style get_CachedRenderStyle();
    internal IStyleContainer get_StyleContainer();
    internal void UpdateStyleCache(ReportItem renderReportItem);
    internal void UpdateStyleCache(Object[] styleValues);
    internal void SetNewContext();
    internal ReportColor EvaluateInstanceReportColor(StyleAttributeNames style);
    internal ReportSize EvaluateInstanceReportSize(StyleAttributeNames style);
    internal string EvaluateInstanceStyleString(StyleAttributeNames style);
    internal string EvaluateInstanceStyleString(StyleId style);
    internal int EvaluateInstanceStyleInt(StyleAttributeNames style, int defaultValue);
    private object EvaluateInstanceStyleInt(StyleId style);
    internal int EvaluateInstanceStyleEnum(StyleAttributeNames style);
    internal int EvaluateInstanceStyleEnum(StyleAttributeNames style, int styleDefaultValueIfNull);
    internal Nullable`1<int> EvaluateInstanceStyleEnum(StyleId style);
    internal object EvaluateInstanceStyleVariant(StyleId style);
    internal void ConstructStyleDefinition();
    private bool HasBorderProperties(Position position);
    private void PopulateCollections();
    internal string GetStyleStringFromEnum(StyleAttributeNames style);
    private ReportProperty GetReportProperty(StyleAttributeNames styleName);
    internal AttributeInfo GetAttributeInfo(string styleNameString, String& expressionString);
    private ReportProperty GetOdpReportProperty(StyleAttributeNames styleName);
    private ReportProperty GetOldSnapshotReportProperty(StyleAttributeNames styleName, Style style);
    private ReportProperty GetOldSnapshotReportProperty(StyleAttributeNames styleName, Style style);
    private ReportProperty GetOldSnapshotReportProperty(AttributeInfo styleDefinition, string expressionString, StyleAttributeNames styleName, string styleNameString, Style style);
    protected virtual bool IsAvailableStyle(StyleAttributeNames styleName);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.StyleAttributeNames : Enum {
    public int value__;
    public static StyleAttributeNames BorderColor;
    public static StyleAttributeNames BorderColorTop;
    public static StyleAttributeNames BorderColorLeft;
    public static StyleAttributeNames BorderColorRight;
    public static StyleAttributeNames BorderColorBottom;
    public static StyleAttributeNames BorderStyle;
    public static StyleAttributeNames BorderStyleTop;
    public static StyleAttributeNames BorderStyleLeft;
    public static StyleAttributeNames BorderStyleRight;
    public static StyleAttributeNames BorderStyleBottom;
    public static StyleAttributeNames BorderWidth;
    public static StyleAttributeNames BorderWidthTop;
    public static StyleAttributeNames BorderWidthLeft;
    public static StyleAttributeNames BorderWidthRight;
    public static StyleAttributeNames BorderWidthBottom;
    public static StyleAttributeNames BackgroundColor;
    public static StyleAttributeNames FontStyle;
    public static StyleAttributeNames FontFamily;
    public static StyleAttributeNames FontSize;
    public static StyleAttributeNames FontWeight;
    public static StyleAttributeNames Format;
    public static StyleAttributeNames TextDecoration;
    public static StyleAttributeNames TextAlign;
    public static StyleAttributeNames VerticalAlign;
    public static StyleAttributeNames Color;
    public static StyleAttributeNames PaddingLeft;
    public static StyleAttributeNames PaddingRight;
    public static StyleAttributeNames PaddingTop;
    public static StyleAttributeNames PaddingBottom;
    public static StyleAttributeNames LineHeight;
    public static StyleAttributeNames Direction;
    public static StyleAttributeNames WritingMode;
    public static StyleAttributeNames Language;
    public static StyleAttributeNames UnicodeBiDi;
    public static StyleAttributeNames Calendar;
    public static StyleAttributeNames NumeralLanguage;
    public static StyleAttributeNames NumeralVariant;
    public static StyleAttributeNames BackgroundGradientType;
    public static StyleAttributeNames BackgroundGradientEndColor;
    public static StyleAttributeNames BackgroundHatchType;
    public static StyleAttributeNames TransparentColor;
    public static StyleAttributeNames ShadowColor;
    public static StyleAttributeNames ShadowOffset;
    public static StyleAttributeNames Position;
    public static StyleAttributeNames TextEffect;
    public static StyleAttributeNames BackgroundImage;
    public static StyleAttributeNames BackgroundImageRepeat;
    public static StyleAttributeNames Count;
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.StyleBase : object {
    public static int StyleAttributeCount;
    protected static string cBorderColor;
    protected static string cBorderColorLeft;
    protected static string cBorderColorRight;
    protected static string cBorderColorTop;
    protected static string cBorderColorBottom;
    protected static string cBorderStyle;
    protected static string cBorderStyleLeft;
    protected static string cBorderStyleRight;
    protected static string cBorderStyleTop;
    protected static string cBorderStyleBottom;
    protected static string cBorderWidth;
    protected static string cBorderWidthLeft;
    protected static string cBorderWidthRight;
    protected static string cBorderWidthTop;
    protected static string cBorderWidthBottom;
    protected static string cBackgroundImage;
    protected static string cBackgroundImageSource;
    protected static string cBackgroundImageValue;
    protected static string cBackgroundImageMIMEType;
    protected static string cBackgroundColor;
    protected static string cBackgroundGradientEndColor;
    protected static string cBackgroundGradientType;
    protected static string cBackgroundRepeat;
    protected static string cFontStyle;
    protected static string cFontFamily;
    protected static string cFontSize;
    protected static string cFontWeight;
    protected static string cFormat;
    protected static string cTextDecoration;
    protected static string cTextAlign;
    protected static string cVerticalAlign;
    protected static string cColor;
    protected static string cPaddingLeft;
    protected static string cPaddingRight;
    protected static string cPaddingTop;
    protected static string cPaddingBottom;
    protected static string cLineHeight;
    protected static string cDirection;
    protected static string cWritingMode;
    protected static string cLanguage;
    protected static string cUnicodeBiDi;
    protected static string cCalendar;
    protected static string cNumeralLanguage;
    protected static string cNumeralVariant;
    protected static string cTextEffect;
    protected static string cBackgroundHatchType;
    protected static string cShadowColor;
    protected static string cShadowOffset;
    protected static string cPosition;
    protected static string cTransparentColor;
    internal RenderingContext m_renderingContext;
    protected List`1<StyleAttributeNames> m_sharedStyles;
    protected List`1<StyleAttributeNames> m_nonSharedStyles;
    internal static IEnumerable`1<StyleAttributeNames> StyleNames { get; }
    public ReportProperty Item { get; }
    public List`1<StyleAttributeNames> SharedStyleAttributes { get; }
    public List`1<StyleAttributeNames> NonSharedStyleAttributes { get; }
    public BackgroundImage BackgroundImage { get; }
    public Border Border { get; }
    public Border TopBorder { get; }
    public Border LeftBorder { get; }
    public Border RightBorder { get; }
    public Border BottomBorder { get; }
    public ReportColorProperty BackgroundGradientEndColor { get; }
    public ReportColorProperty BackgroundColor { get; }
    public ReportColorProperty Color { get; }
    public ReportEnumProperty`1<FontStyles> FontStyle { get; }
    public ReportStringProperty FontFamily { get; }
    public ReportEnumProperty`1<FontWeights> FontWeight { get; }
    public ReportStringProperty Format { get; }
    public ReportEnumProperty`1<TextDecorations> TextDecoration { get; }
    public ReportEnumProperty`1<TextAlignments> TextAlign { get; }
    public ReportEnumProperty`1<VerticalAlignments> VerticalAlign { get; }
    public ReportEnumProperty`1<Directions> Direction { get; }
    public ReportEnumProperty`1<WritingModes> WritingMode { get; }
    public ReportStringProperty Language { get; }
    public ReportEnumProperty`1<UnicodeBiDiTypes> UnicodeBiDi { get; }
    public ReportEnumProperty`1<Calendars> Calendar { get; }
    public ReportStringProperty NumeralLanguage { get; }
    public ReportEnumProperty`1<BackgroundGradients> BackgroundGradientType { get; }
    public ReportSizeProperty FontSize { get; }
    public ReportSizeProperty PaddingLeft { get; }
    public ReportSizeProperty PaddingRight { get; }
    public ReportSizeProperty PaddingTop { get; }
    public ReportSizeProperty PaddingBottom { get; }
    public ReportSizeProperty LineHeight { get; }
    public ReportIntProperty NumeralVariant { get; }
    public ReportEnumProperty`1<TextEffects> TextEffect { get; }
    public ReportEnumProperty`1<BackgroundHatchTypes> BackgroundHatchType { get; }
    public ReportColorProperty ShadowColor { get; }
    public ReportSizeProperty ShadowOffset { get; }
    internal RenderingContext RenderingContext { get; }
    internal StyleBase(RenderingContext context);
    internal static IEnumerable`1<StyleAttributeNames> get_StyleNames();
    public abstract virtual ReportProperty get_Item(StyleAttributeNames style);
    public abstract virtual List`1<StyleAttributeNames> get_SharedStyleAttributes();
    public abstract virtual List`1<StyleAttributeNames> get_NonSharedStyleAttributes();
    public abstract virtual BackgroundImage get_BackgroundImage();
    public abstract virtual Border get_Border();
    public abstract virtual Border get_TopBorder();
    public abstract virtual Border get_LeftBorder();
    public abstract virtual Border get_RightBorder();
    public abstract virtual Border get_BottomBorder();
    public abstract virtual ReportColorProperty get_BackgroundGradientEndColor();
    public abstract virtual ReportColorProperty get_BackgroundColor();
    public abstract virtual ReportColorProperty get_Color();
    public abstract virtual ReportEnumProperty`1<FontStyles> get_FontStyle();
    public abstract virtual ReportStringProperty get_FontFamily();
    public abstract virtual ReportEnumProperty`1<FontWeights> get_FontWeight();
    public abstract virtual ReportStringProperty get_Format();
    public abstract virtual ReportEnumProperty`1<TextDecorations> get_TextDecoration();
    public abstract virtual ReportEnumProperty`1<TextAlignments> get_TextAlign();
    public abstract virtual ReportEnumProperty`1<VerticalAlignments> get_VerticalAlign();
    public abstract virtual ReportEnumProperty`1<Directions> get_Direction();
    public abstract virtual ReportEnumProperty`1<WritingModes> get_WritingMode();
    public abstract virtual ReportStringProperty get_Language();
    public abstract virtual ReportEnumProperty`1<UnicodeBiDiTypes> get_UnicodeBiDi();
    public abstract virtual ReportEnumProperty`1<Calendars> get_Calendar();
    public abstract virtual ReportStringProperty get_NumeralLanguage();
    public abstract virtual ReportEnumProperty`1<BackgroundGradients> get_BackgroundGradientType();
    public abstract virtual ReportSizeProperty get_FontSize();
    public abstract virtual ReportSizeProperty get_PaddingLeft();
    public abstract virtual ReportSizeProperty get_PaddingRight();
    public abstract virtual ReportSizeProperty get_PaddingTop();
    public abstract virtual ReportSizeProperty get_PaddingBottom();
    public abstract virtual ReportSizeProperty get_LineHeight();
    public abstract virtual ReportIntProperty get_NumeralVariant();
    public abstract virtual ReportEnumProperty`1<TextEffects> get_TextEffect();
    public abstract virtual ReportEnumProperty`1<BackgroundHatchTypes> get_BackgroundHatchType();
    public abstract virtual ReportColorProperty get_ShadowColor();
    public abstract virtual ReportSizeProperty get_ShadowOffset();
    internal RenderingContext get_RenderingContext();
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.StyleBaseInstance : BaseInstance {
    internal RenderingContext m_renderingContext;
    public List`1<StyleAttributeNames> StyleAttributes { get; }
    public object Item { get; }
    public ReportColor BackgroundGradientEndColor { get; public set; }
    public ReportColor BackgroundColor { get; public set; }
    public ReportColor Color { get; public set; }
    public FontStyles FontStyle { get; public set; }
    public string FontFamily { get; public set; }
    public FontWeights FontWeight { get; public set; }
    public string Format { get; public set; }
    public TextDecorations TextDecoration { get; public set; }
    public TextAlignments TextAlign { get; public set; }
    public VerticalAlignments VerticalAlign { get; public set; }
    public Directions Direction { get; public set; }
    public WritingModes WritingMode { get; public set; }
    public string Language { get; public set; }
    public UnicodeBiDiTypes UnicodeBiDi { get; public set; }
    public Calendars Calendar { get; public set; }
    public string NumeralLanguage { get; public set; }
    public BackgroundGradients BackgroundGradientType { get; public set; }
    public ReportSize FontSize { get; public set; }
    public ReportSize PaddingLeft { get; public set; }
    public ReportSize PaddingRight { get; public set; }
    public ReportSize PaddingTop { get; public set; }
    public ReportSize PaddingBottom { get; public set; }
    public ReportSize LineHeight { get; public set; }
    public int NumeralVariant { get; public set; }
    public TextEffects TextEffect { get; public set; }
    public BackgroundHatchTypes BackgroundHatchType { get; public set; }
    public ReportColor ShadowColor { get; public set; }
    public ReportSize ShadowOffset { get; public set; }
    internal StyleBaseInstance(RenderingContext context, IReportScope reportScope);
    public abstract virtual List`1<StyleAttributeNames> get_StyleAttributes();
    public abstract virtual object get_Item(StyleAttributeNames style);
    public abstract virtual ReportColor get_BackgroundGradientEndColor();
    public abstract virtual void set_BackgroundGradientEndColor(ReportColor value);
    public abstract virtual ReportColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(ReportColor value);
    public abstract virtual ReportColor get_Color();
    public abstract virtual void set_Color(ReportColor value);
    public abstract virtual FontStyles get_FontStyle();
    public abstract virtual void set_FontStyle(FontStyles value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual FontWeights get_FontWeight();
    public abstract virtual void set_FontWeight(FontWeights value);
    public abstract virtual string get_Format();
    public abstract virtual void set_Format(string value);
    public abstract virtual TextDecorations get_TextDecoration();
    public abstract virtual void set_TextDecoration(TextDecorations value);
    public abstract virtual TextAlignments get_TextAlign();
    public abstract virtual void set_TextAlign(TextAlignments value);
    public abstract virtual VerticalAlignments get_VerticalAlign();
    public abstract virtual void set_VerticalAlign(VerticalAlignments value);
    public abstract virtual Directions get_Direction();
    public abstract virtual void set_Direction(Directions value);
    public abstract virtual WritingModes get_WritingMode();
    public abstract virtual void set_WritingMode(WritingModes value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual UnicodeBiDiTypes get_UnicodeBiDi();
    public abstract virtual void set_UnicodeBiDi(UnicodeBiDiTypes value);
    public abstract virtual Calendars get_Calendar();
    public abstract virtual void set_Calendar(Calendars value);
    public abstract virtual string get_NumeralLanguage();
    public abstract virtual void set_NumeralLanguage(string value);
    public abstract virtual BackgroundGradients get_BackgroundGradientType();
    public abstract virtual void set_BackgroundGradientType(BackgroundGradients value);
    public abstract virtual ReportSize get_FontSize();
    public abstract virtual void set_FontSize(ReportSize value);
    public abstract virtual ReportSize get_PaddingLeft();
    public abstract virtual void set_PaddingLeft(ReportSize value);
    public abstract virtual ReportSize get_PaddingRight();
    public abstract virtual void set_PaddingRight(ReportSize value);
    public abstract virtual ReportSize get_PaddingTop();
    public abstract virtual void set_PaddingTop(ReportSize value);
    public abstract virtual ReportSize get_PaddingBottom();
    public abstract virtual void set_PaddingBottom(ReportSize value);
    public abstract virtual ReportSize get_LineHeight();
    public abstract virtual void set_LineHeight(ReportSize value);
    public abstract virtual int get_NumeralVariant();
    public abstract virtual void set_NumeralVariant(int value);
    public abstract virtual TextEffects get_TextEffect();
    public abstract virtual void set_TextEffect(TextEffects value);
    public abstract virtual BackgroundHatchTypes get_BackgroundHatchType();
    public abstract virtual void set_BackgroundHatchType(BackgroundHatchTypes value);
    public abstract virtual ReportColor get_ShadowColor();
    public abstract virtual void set_ShadowColor(ReportColor value);
    public abstract virtual ReportSize get_ShadowOffset();
    public abstract virtual void set_ShadowOffset(ReportSize value);
}
[SkipStaticValidationAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.StyleInstance : StyleBaseInstance {
    private Style m_styleDefinition;
    protected ReportColor m_backgroundColor;
    protected ReportColor m_backgroundGradientEndColor;
    protected ReportColor m_color;
    protected Nullable`1<FontStyles> m_fontStyle;
    protected string m_fontFamily;
    protected Nullable`1<FontWeights> m_fontWeight;
    protected string m_format;
    protected Nullable`1<TextDecorations> m_textDecoration;
    protected Nullable`1<TextAlignments> m_textAlign;
    protected Nullable`1<VerticalAlignments> m_verticalAlign;
    protected Nullable`1<Directions> m_direction;
    protected Nullable`1<WritingModes> m_writingMode;
    protected string m_language;
    protected Nullable`1<UnicodeBiDiTypes> m_unicodeBiDi;
    protected Nullable`1<Calendars> m_calendar;
    protected string m_numeralLanguage;
    protected Nullable`1<BackgroundGradients> m_backgroundGradientType;
    protected ReportSize m_fontSize;
    protected ReportSize m_paddingLeft;
    protected ReportSize m_paddingRight;
    protected ReportSize m_paddingTop;
    protected ReportSize m_paddingBottom;
    protected ReportSize m_lineHeight;
    protected int m_numeralVariant;
    protected Nullable`1<TextEffects> m_textEffect;
    protected Nullable`1<BackgroundHatchTypes> m_backgroundHatchType;
    protected ReportColor m_shadowColor;
    protected ReportSize m_shadowOffset;
    protected Dictionary`2<StyleAttributeNames, bool> m_assignedValues;
    private static Declaration m_Declaration;
    public List`1<StyleAttributeNames> StyleAttributes { get; }
    public object Item { get; }
    public ReportColor BackgroundGradientEndColor { get; public set; }
    internal bool IsBackgroundGradientEndColorAssigned { get; }
    public ReportColor Color { get; public set; }
    internal bool IsColorAssigned { get; }
    public ReportColor BackgroundColor { get; public set; }
    internal bool IsBackgroundColorAssigned { get; }
    public FontStyles FontStyle { get; public set; }
    internal bool IsFontStyleAssigned { get; }
    public string FontFamily { get; public set; }
    internal bool IsFontFamilyAssigned { get; }
    public FontWeights FontWeight { get; public set; }
    internal bool IsFontWeightAssigned { get; }
    public string Format { get; public set; }
    internal bool IsFormatAssigned { get; }
    public TextDecorations TextDecoration { get; public set; }
    internal bool IsTextDecorationAssigned { get; }
    public TextAlignments TextAlign { get; public set; }
    internal bool IsTextAlignAssigned { get; }
    public VerticalAlignments VerticalAlign { get; public set; }
    internal bool IsVerticalAlignAssigned { get; }
    public Directions Direction { get; public set; }
    internal bool IsDirectionAssigned { get; }
    public WritingModes WritingMode { get; public set; }
    internal bool IsWritingModeAssigned { get; }
    public string Language { get; public set; }
    internal bool IsLanguageAssigned { get; }
    public UnicodeBiDiTypes UnicodeBiDi { get; public set; }
    internal bool IsUnicodeBiDiAssigned { get; }
    public Calendars Calendar { get; public set; }
    internal bool IsCalendarAssigned { get; }
    public string NumeralLanguage { get; public set; }
    internal bool IsNumeralLanguageAssigned { get; }
    public BackgroundGradients BackgroundGradientType { get; public set; }
    internal bool IsBackgroundGradientTypeAssigned { get; }
    public ReportSize FontSize { get; public set; }
    internal bool IsFontSizeAssigned { get; }
    public ReportSize PaddingLeft { get; public set; }
    internal bool IsPaddingLeftAssigned { get; }
    public ReportSize PaddingRight { get; public set; }
    internal bool IsPaddingRightAssigned { get; }
    public ReportSize PaddingTop { get; public set; }
    internal bool IsPaddingTopAssigned { get; }
    public ReportSize PaddingBottom { get; public set; }
    internal bool IsPaddingBottomAssigned { get; }
    public ReportSize LineHeight { get; public set; }
    internal bool IsLineHeightAssigned { get; }
    public int NumeralVariant { get; public set; }
    internal bool IsNumeralVariantAssigned { get; }
    public TextEffects TextEffect { get; public set; }
    internal bool IsTextEffectAssigned { get; }
    public BackgroundHatchTypes BackgroundHatchType { get; public set; }
    internal bool IsBackgroundHatchTypeAssigned { get; }
    public ReportColor ShadowColor { get; public set; }
    internal bool IsShadowColorAssigned { get; }
    public ReportSize ShadowOffset { get; public set; }
    internal bool IsShadowOffsetAssigned { get; }
    internal StyleInstance(IROMStyleDefinitionContainer styleDefinitionContainer, IReportScope reportScope, RenderingContext context);
    private static StyleInstance();
    public virtual List`1<StyleAttributeNames> get_StyleAttributes();
    public virtual object get_Item(StyleAttributeNames style);
    public virtual ReportColor get_BackgroundGradientEndColor();
    public virtual void set_BackgroundGradientEndColor(ReportColor value);
    internal bool get_IsBackgroundGradientEndColorAssigned();
    public virtual ReportColor get_Color();
    public virtual void set_Color(ReportColor value);
    internal bool get_IsColorAssigned();
    public virtual ReportColor get_BackgroundColor();
    public virtual void set_BackgroundColor(ReportColor value);
    internal bool get_IsBackgroundColorAssigned();
    public virtual FontStyles get_FontStyle();
    public virtual void set_FontStyle(FontStyles value);
    internal bool get_IsFontStyleAssigned();
    public virtual string get_FontFamily();
    public virtual void set_FontFamily(string value);
    internal bool get_IsFontFamilyAssigned();
    public virtual FontWeights get_FontWeight();
    public virtual void set_FontWeight(FontWeights value);
    internal bool get_IsFontWeightAssigned();
    public virtual string get_Format();
    public virtual void set_Format(string value);
    internal bool get_IsFormatAssigned();
    public virtual TextDecorations get_TextDecoration();
    public virtual void set_TextDecoration(TextDecorations value);
    internal bool get_IsTextDecorationAssigned();
    public virtual TextAlignments get_TextAlign();
    public virtual void set_TextAlign(TextAlignments value);
    internal bool get_IsTextAlignAssigned();
    public virtual VerticalAlignments get_VerticalAlign();
    public virtual void set_VerticalAlign(VerticalAlignments value);
    internal bool get_IsVerticalAlignAssigned();
    public virtual Directions get_Direction();
    public virtual void set_Direction(Directions value);
    internal bool get_IsDirectionAssigned();
    public virtual WritingModes get_WritingMode();
    public virtual void set_WritingMode(WritingModes value);
    internal bool get_IsWritingModeAssigned();
    public virtual string get_Language();
    public virtual void set_Language(string value);
    internal bool get_IsLanguageAssigned();
    public virtual UnicodeBiDiTypes get_UnicodeBiDi();
    public virtual void set_UnicodeBiDi(UnicodeBiDiTypes value);
    internal bool get_IsUnicodeBiDiAssigned();
    public virtual Calendars get_Calendar();
    public virtual void set_Calendar(Calendars value);
    internal bool get_IsCalendarAssigned();
    public virtual string get_NumeralLanguage();
    public virtual void set_NumeralLanguage(string value);
    internal bool get_IsNumeralLanguageAssigned();
    public virtual BackgroundGradients get_BackgroundGradientType();
    public virtual void set_BackgroundGradientType(BackgroundGradients value);
    internal bool get_IsBackgroundGradientTypeAssigned();
    public virtual ReportSize get_FontSize();
    public virtual void set_FontSize(ReportSize value);
    internal bool get_IsFontSizeAssigned();
    public virtual ReportSize get_PaddingLeft();
    public virtual void set_PaddingLeft(ReportSize value);
    internal bool get_IsPaddingLeftAssigned();
    public virtual ReportSize get_PaddingRight();
    public virtual void set_PaddingRight(ReportSize value);
    internal bool get_IsPaddingRightAssigned();
    public virtual ReportSize get_PaddingTop();
    public virtual void set_PaddingTop(ReportSize value);
    internal bool get_IsPaddingTopAssigned();
    public virtual ReportSize get_PaddingBottom();
    public virtual void set_PaddingBottom(ReportSize value);
    internal bool get_IsPaddingBottomAssigned();
    public virtual ReportSize get_LineHeight();
    public virtual void set_LineHeight(ReportSize value);
    internal bool get_IsLineHeightAssigned();
    public virtual int get_NumeralVariant();
    public virtual void set_NumeralVariant(int value);
    internal bool get_IsNumeralVariantAssigned();
    public virtual TextEffects get_TextEffect();
    public virtual void set_TextEffect(TextEffects value);
    internal bool get_IsTextEffectAssigned();
    public virtual BackgroundHatchTypes get_BackgroundHatchType();
    public virtual void set_BackgroundHatchType(BackgroundHatchTypes value);
    internal bool get_IsBackgroundHatchTypeAssigned();
    public virtual ReportColor get_ShadowColor();
    public virtual void set_ShadowColor(ReportColor value);
    internal bool get_IsShadowColorAssigned();
    public virtual ReportSize get_ShadowOffset();
    public virtual void set_ShadowOffset(ReportSize value);
    internal bool get_IsShadowOffsetAssigned();
    protected virtual void ResetInstanceCache();
    private void AssignedValueTo(StyleAttributeNames styleName);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    private static Declaration GetDeclaration();
    private void GetStyleDynamicValues(List`1& styles, List`1& values);
    internal static AttributeInfo CreateAttrInfo(ReportColor reportColor);
    internal static AttributeInfo CreateAttrInfo(ReportSize reportSize);
    internal static AttributeInfo CreateAttrInfo(string strValue);
    internal static AttributeInfo CreateAttrInfo(int intValue);
    private void SetStyleDynamicValues(List`1<int> styles, List`1<AttributeInfo> values);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.SubReport : ReportItem {
    private Report m_report;
    private ReportStringProperty m_noRowsMessage;
    private bool m_processedWithError;
    private SubReportErrorCodes m_errorCode;
    private string m_errorMessage;
    private bool m_noRows;
    private bool m_isNewContext;
    public string ReportName { get; }
    public Report Report { get; }
    public ReportStringProperty NoRowsMessage { get; }
    public bool OmitBorderOnPageBreak { get; }
    public bool KeepTogether { get; }
    internal bool ProcessedWithError { get; }
    internal SubReportErrorCodes ErrorCode { get; }
    internal string ErrorMessage { get; }
    internal bool NoRows { get; }
    internal SubReport(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, SubReport reportItemDef, RenderingContext renderingContext);
    internal SubReport(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, SubReport renderSubReport, RenderingContext renderingContext);
    public string get_ReportName();
    public Report get_Report();
    public ReportStringProperty get_NoRowsMessage();
    public bool get_OmitBorderOnPageBreak();
    public bool get_KeepTogether();
    internal bool get_ProcessedWithError();
    internal SubReportErrorCodes get_ErrorCode();
    internal string get_ErrorMessage();
    internal bool get_NoRows();
    internal virtual ReportItemInstance GetOrCreateInstance();
    internal void RetrieveSubreport();
    private RenderingContext GetOrCreateRenderingContext(SubReport subReport, ReportInstance reportInstance);
    private void CheckRetrievalStatus(Status status);
    private void FinalizeErrorMessageAndThrow();
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
    internal virtual void SetNewContext();
    internal virtual void SetNewContextChildren();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.SubReportErrorCodes : Enum {
    public int value__;
    public static SubReportErrorCodes Success;
    public static SubReportErrorCodes ProcessingError;
    public static SubReportErrorCodes ParametersNotSpecified;
    public static SubReportErrorCodes ExceededMaxRecursionLevel;
    public static SubReportErrorCodes MissingSubReport;
    public static SubReportErrorCodes DataRetrievalFailed;
    public static SubReportErrorCodes DataNotRetrieved;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.SubReportInstance : ReportItemInstance {
    private string m_noRowsMessageExpressionResult;
    public bool ProcessedWithError { get; }
    public SubReportErrorCodes ErrorCode { get; }
    public string ErrorMessage { get; }
    public string NoRowsMessage { get; }
    public bool NoRows { get; }
    private SubReport SubReportDefinition { get; }
    internal SubReportInstance(SubReport reportItemDef);
    public bool get_ProcessedWithError();
    public SubReportErrorCodes get_ErrorCode();
    public string get_ErrorMessage();
    public string get_NoRowsMessage();
    public bool get_NoRows();
    private SubReport get_SubReportDefinition();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Tablix : DataRegion {
    private TablixCorner m_corner;
    private TablixHierarchy m_columns;
    private TablixHierarchy m_rows;
    private TablixBody m_body;
    private Int32[] m_matrixRowDefinitionMapping;
    private Int32[] m_matrixColDefinitionMapping;
    private int m_memberCellDefinitionIndex;
    private MatrixMemberInfoCache m_matrixMemberColIndexes;
    private Nullable`1<PageBreakLocation> m_propagatedPageBreak;
    public DataElementOutputTypes DataElementOutput { get; }
    public bool KeepTogether { get; }
    public TablixLayoutDirection LayoutDirection { get; }
    public TablixCorner Corner { get; }
    public TablixHierarchy ColumnHierarchy { get; }
    public TablixHierarchy RowHierarchy { get; }
    public TablixBody Body { get; }
    public int Columns { get; }
    public int Rows { get; }
    public int GroupsBeforeRowHeaders { get; }
    public bool RepeatRowHeaders { get; }
    public bool RepeatColumnHeaders { get; }
    public bool FixedRowHeaders { get; }
    public bool FixedColumnHeaders { get; }
    public bool OmitBorderOnPageBreak { get; }
    private PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.PageBreakLocation { get; }
    public bool HideStaticsIfNoRows { get; }
    public ReportSize Width { get; }
    public ReportSize Height { get; }
    internal Tablix TablixDef { get; }
    internal bool HasDataCells { get; }
    internal IDataRegionRowCollection RowCollection { get; }
    internal Type SnapshotTablixType { get; }
    internal List RenderList { get; }
    internal Table RenderTable { get; }
    internal Matrix RenderMatrix { get; }
    internal Int32[] MatrixRowDefinitionMapping { get; }
    internal Int32[] MatrixColDefinitionMapping { get; }
    internal MatrixMemberInfoCache MatrixMemberColIndexes { get; internal set; }
    internal Tablix(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, Tablix reportItemDef, RenderingContext renderingContext);
    internal Tablix(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, List renderList, RenderingContext renderingContext);
    internal Tablix(IDefinitionPath parentDefinitionPath, int indexIntoParentCollection, bool inSubtotal, Table renderTable, RenderingContext renderingContext);
    internal Tablix(IDefinitionPath parentDefinitionPath, int indexIntoParentCollection, bool inSubtotal, Matrix renderMatrix, RenderingContext renderingContext);
    public virtual DataElementOutputTypes get_DataElementOutput();
    public bool get_KeepTogether();
    public TablixLayoutDirection get_LayoutDirection();
    public TablixCorner get_Corner();
    public TablixHierarchy get_ColumnHierarchy();
    public TablixHierarchy get_RowHierarchy();
    public TablixBody get_Body();
    public int get_Columns();
    public int get_Rows();
    public int get_GroupsBeforeRowHeaders();
    public bool get_RepeatRowHeaders();
    public bool get_RepeatColumnHeaders();
    public bool get_FixedRowHeaders();
    public bool get_FixedColumnHeaders();
    public bool get_OmitBorderOnPageBreak();
    internal void SetPageBreakLocation(PageBreakLocation pageBreakLocation);
    private sealed virtual override PageBreakLocation Microsoft.ReportingServices.OnDemandReportRendering.IPageBreakItem.get_PageBreakLocation();
    public bool get_HideStaticsIfNoRows();
    public virtual ReportSize get_Width();
    public virtual ReportSize get_Height();
    internal Tablix get_TablixDef();
    internal virtual bool get_HasDataCells();
    internal virtual IDataRegionRowCollection get_RowCollection();
    internal virtual ReportItemInstance GetOrCreateInstance();
    internal Type get_SnapshotTablixType();
    internal List get_RenderList();
    internal Table get_RenderTable();
    internal Matrix get_RenderMatrix();
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
    internal int GetCurrentMemberCellDefinitionIndex();
    internal int GetAndIncrementMemberCellDefinitionIndex();
    internal void ResetMemberCellDefinitionIndex(int startIndex);
    internal Int32[] get_MatrixRowDefinitionMapping();
    internal Int32[] get_MatrixColDefinitionMapping();
    private Int32[] CalculateMatrixDefinitionMapping(MatrixHeading heading);
    private void AddInnerHierarchy(MatrixHeading heading, List`1<int> mapping, Int32& definitionIndex);
    private void AddInnerStatics(MatrixHeading heading, List`1<int> mapping, Int32& definitionIndex);
    internal MatrixMemberInfoCache get_MatrixMemberColIndexes();
    internal void set_MatrixMemberColIndexes(MatrixMemberInfoCache value);
    internal virtual void SetNewContextChildren();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixBody : object {
    private Tablix m_owner;
    private TablixRowCollection m_rowCollection;
    private TablixColumnCollection m_columnCollection;
    private Nullable`1<bool> m_ignoreCellPageBreaks;
    internal bool HasRowCollection { get; }
    public TablixRowCollection RowCollection { get; }
    public TablixColumnCollection ColumnCollection { get; }
    public bool IgnoreCellPageBreaks { get; }
    internal TablixBody(Tablix owner);
    internal bool get_HasRowCollection();
    public TablixRowCollection get_RowCollection();
    public TablixColumnCollection get_ColumnCollection();
    public bool get_IgnoreCellPageBreaks();
    private bool HasHeader(TablixMemberList members);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TablixCell : object {
    private Cell m_cell;
    protected Tablix m_owner;
    protected int m_rowIndex;
    protected int m_columnIndex;
    protected CellContents m_cellContents;
    protected TablixCellInstance m_instance;
    protected string m_definitionPath;
    public string ID { get; }
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    public CellContents CellContents { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public string DataElementName { get; }
    private IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.ReportScopeInstance { get; }
    private IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.RIFReportScope { get; }
    internal Cell Cell { get; }
    public TablixCellInstance Instance { get; }
    internal TablixCell(Cell cell, Tablix owner, int rowIndex, int colIndex);
    public abstract virtual string get_ID();
    public sealed virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    public abstract virtual CellContents get_CellContents();
    public abstract virtual DataElementOutputTypes get_DataElementOutput();
    public abstract virtual string get_DataElementName();
    private sealed virtual override IReportScopeInstance Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_ReportScopeInstance();
    private sealed virtual override IRIFReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScope.get_RIFReportScope();
    internal Cell get_Cell();
    public virtual TablixCellInstance get_Instance();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionCell.SetNewContext();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixCellInstance : BaseInstance {
    private TablixCell m_cellDef;
    private Tablix m_owner;
    private int m_rowIndex;
    private int m_columnIndex;
    private bool m_isNewContext;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal TablixCellInstance(TablixCell cellDef, Tablix owner, int rowIndex, int colIndex);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    internal virtual void SetNewContext();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixColumn : object {
    private Tablix m_owner;
    private int m_columnIndex;
    private ReportSize m_width;
    public ReportSize Width { get; }
    internal TablixColumn(Tablix owner, int columnIndex);
    public ReportSize get_Width();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixColumnCollection : ReportElementCollectionBase`1<TablixColumn> {
    private Tablix m_owner;
    private TablixColumn[] m_columns;
    public TablixColumn Item { get; }
    public int Count { get; }
    internal TablixColumnCollection(Tablix owner);
    public virtual TablixColumn get_Item(int index);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixCorner : object {
    private Tablix m_owner;
    private TablixCornerRowCollection m_rowCollection;
    public TablixCornerRowCollection RowCollection { get; }
    internal TablixCorner(Tablix owner);
    public TablixCornerRowCollection get_RowCollection();
    internal void ResetContext();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixCornerCell : object {
    private Tablix m_owner;
    private int m_rowIndex;
    private int m_columnIndex;
    private string m_definitionPath;
    private TablixCornerCell m_cellDef;
    private ReportItem m_cornerReportItem;
    private CellContents m_cellContents;
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    public CellContents CellContents { get; }
    internal TablixCornerCell(Tablix owner, int rowIndex, int colIndex, TablixCornerCell cellDef);
    internal TablixCornerCell(Tablix owner, int rowIndex, int colIndex, ReportItem cornerReportItem);
    public sealed virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    public CellContents get_CellContents();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixCornerRow : ReportElementCollectionBase`1<TablixCornerCell> {
    private Tablix m_owner;
    private int m_rowIndex;
    private List`1<TablixCornerCell> m_rowDef;
    private ReportItem m_cornerDef;
    private TablixCornerCell[] m_cellROMDefs;
    public TablixCornerCell Item { get; }
    public int Count { get; }
    internal TablixCornerRow(Tablix owner, int rowIndex, List`1<TablixCornerCell> rowDef);
    internal TablixCornerRow(Tablix owner, int rowIndex, ReportItem cornerDef);
    public virtual TablixCornerCell get_Item(int index);
    internal void SetNewContext();
    public virtual int get_Count();
    internal void UpdateRenderReportItem(ReportItem cornerDef);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixCornerRowCollection : ReportElementCollectionBase`1<TablixCornerRow> {
    private Tablix m_owner;
    private TablixCornerRow[] m_cornerRows;
    public TablixCornerRow Item { get; }
    public int Count { get; }
    internal TablixCornerRowCollection(Tablix owner);
    public virtual TablixCornerRow get_Item(int index);
    public virtual int get_Count();
    internal void ResetContext();
    internal void SetNewContext();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TablixDynamicMemberInstance : TablixMemberInstance {
    protected int m_currentContext;
    protected bool m_isNewContext;
    private string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.UniqueName { get; }
    private bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.IsNewContext { get; private set; }
    private IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.ReportScope { get; }
    internal TablixDynamicMemberInstance(Tablix owner, TablixMember memberDef);
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_UniqueName();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_IsNewContext();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.set_IsNewContext(bool value);
    private sealed virtual override IReportScope Microsoft.ReportingServices.OnDemandReportRendering.IReportScopeInstance.get_ReportScope();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.ResetContext();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.MoveNext();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.GetInstanceIndex();
    private sealed virtual override bool Microsoft.ReportingServices.OnDemandReportRendering.IDynamicInstance.SetInstanceIndex(int index);
    public virtual void ResetContext();
    public abstract virtual bool MoveNext();
    public int GetInstanceIndex();
    public abstract virtual bool SetInstanceIndex(int index);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixHeader : object {
    private Tablix m_owner;
    private TablixMember m_tablixMember;
    private string m_definitionPath;
    private CellContents m_cellContents;
    private ReportItem m_cacheRenderReportItem;
    public string DefinitionPath { get; }
    public IDefinitionPath ParentDefinitionPath { get; }
    public ReportSize Size { get; }
    public CellContents CellContents { get; }
    internal TablixHeader(Tablix owner, TablixMember tablixMember);
    public sealed virtual string get_DefinitionPath();
    public sealed virtual IDefinitionPath get_ParentDefinitionPath();
    public ReportSize get_Size();
    public CellContents get_CellContents();
    internal void SetNewContext();
    internal void ResetCellContents();
    private void OnDemandUpdateCellContents();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixHierarchy : MemberHierarchy`1<TablixMember> {
    private Tablix OwnerTablix { get; }
    public TablixMemberCollection MemberCollection { get; }
    internal TablixHierarchy(Tablix owner, bool isColumn);
    private Tablix get_OwnerTablix();
    public TablixMemberCollection get_MemberCollection();
    private void CalculatePropagatedPageBreak();
    private PageBreakLocation CalculatePropagatedPageBreak(DataRegionMemberCollection`1<TablixMember> members, bool thisOrAnscestorHasToggle, bool isTable);
    internal virtual void ResetContext();
    internal void ResetContext(bool clearCache);
    private MatrixMemberInfoCache CreateMatrixMemberCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixInstance : DataRegionInstance {
    internal TablixInstance(Tablix reportItemDef);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.TablixLayoutDirection : Enum {
    public int value__;
    public static TablixLayoutDirection LTR;
    public static TablixLayoutDirection RTL;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TablixMember : DataRegionMember {
    protected TablixMemberCollection m_children;
    protected Visibility m_visibility;
    protected TablixMemberInstance m_instance;
    protected TablixHeader m_header;
    public TablixMember Parent { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public TablixHeader TablixHeader { get; }
    public TablixMemberCollection Children { get; }
    public bool FixedData { get; }
    public KeepWithGroup KeepWithGroup { get; }
    public bool RepeatOnNewPage { get; }
    public bool KeepTogether { get; }
    public bool IsColumn { get; }
    internal int RowSpan { get; }
    internal int ColSpan { get; }
    public bool IsTotal { get; }
    internal PageBreakLocation PropagatedGroupBreak { get; }
    public Visibility Visibility { get; }
    public bool HideIfNoRows { get; }
    internal TablixMember MemberDefinition { get; }
    internal Tablix OwnerTablix { get; }
    public TablixMemberInstance Instance { get; }
    internal IDataRegionMemberCollection SubMembers { get; }
    internal TablixMember(IDefinitionPath parentDefinitionPath, Tablix owner, TablixMember parent, int parentCollectionIndex);
    public TablixMember get_Parent();
    public abstract virtual string get_DataElementName();
    public abstract virtual DataElementOutputTypes get_DataElementOutput();
    public abstract virtual TablixHeader get_TablixHeader();
    public abstract virtual TablixMemberCollection get_Children();
    public abstract virtual bool get_FixedData();
    public abstract virtual KeepWithGroup get_KeepWithGroup();
    public abstract virtual bool get_RepeatOnNewPage();
    public virtual bool get_KeepTogether();
    public abstract virtual bool get_IsColumn();
    internal abstract virtual int get_RowSpan();
    internal abstract virtual int get_ColSpan();
    public abstract virtual bool get_IsTotal();
    internal abstract virtual PageBreakLocation get_PropagatedGroupBreak();
    public abstract virtual Visibility get_Visibility();
    public abstract virtual bool get_HideIfNoRows();
    internal abstract virtual TablixMember get_MemberDefinition();
    internal Tablix get_OwnerTablix();
    public abstract virtual TablixMemberInstance get_Instance();
    internal virtual IDataRegionMemberCollection get_SubMembers();
    internal virtual bool GetIsColumn();
    internal virtual void SetNewContext(bool fromMoveNext);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TablixMemberCollection : DataRegionMemberCollection`1<TablixMember> {
    public string DefinitionPath { get; }
    internal Tablix OwnerTablix { get; }
    internal double SizeDelta { get; }
    internal TablixMemberCollection(IDefinitionPath parentDefinitionPath, Tablix owner);
    public virtual string get_DefinitionPath();
    internal Tablix get_OwnerTablix();
    internal virtual double get_SizeDelta();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TablixMemberInstance : BaseInstance {
    protected Tablix m_owner;
    protected TablixMember m_memberDef;
    protected VisibilityInstance m_visibility;
    public VisibilityInstance Visibility { get; }
    internal TablixMemberInstance(Tablix owner, TablixMember memberDef);
    public virtual VisibilityInstance get_Visibility();
    protected virtual void ResetInstanceCache();
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TablixRow : ReportElementCollectionBase`1<TablixCell> {
    protected Tablix m_owner;
    protected int m_rowIndex;
    public ReportSize Height { get; }
    internal TablixRow(Tablix owner, int rowIndex);
    public abstract virtual ReportSize get_Height();
    private sealed virtual override IDataRegionCell Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRow.GetIfExists(int index);
    internal virtual IDataRegionCell GetIfExists(int index);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TablixRowCollection : ReportElementCollectionBase`1<TablixRow> {
    protected Tablix m_owner;
    internal TablixRowCollection(Tablix owner);
    private sealed virtual override IDataRegionRow Microsoft.ReportingServices.OnDemandReportRendering.IDataRegionRowCollection.GetIfExists(int index);
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.TextAlignments : Enum {
    public int value__;
    public static TextAlignments Default;
    public static TextAlignments General;
    public static TextAlignments Left;
    public static TextAlignments Center;
    public static TextAlignments Right;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.TextAntiAliasingQualities : Enum {
    public int value__;
    public static TextAntiAliasingQualities High;
    public static TextAntiAliasingQualities Normal;
    public static TextAntiAliasingQualities SystemDefault;
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TextBox : ReportItem {
    private ActionInfo m_actionInfo;
    private TextBox m_renderTextBox;
    private ParagraphCollection m_paragraphCollection;
    private TextBoxFilteredStyle m_filteredStyle;
    private TextBox m_textBoxDef;
    public Style Style { get; }
    public bool CanGrow { get; }
    public bool CanShrink { get; }
    public bool HideDuplicates { get; }
    public string UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public TypeCode SharedTypeCode { get; }
    public bool IsToggleParent { get; }
    public bool CanSort { get; }
    public DataElementStyles DataElementStyle { get; }
    public bool KeepTogether { get; }
    public ParagraphCollection Paragraphs { get; }
    public bool IsSimple { get; }
    public bool FormattedValueExpressionBased { get; }
    internal TextBox TexBoxDef { get; }
    private List`1<string> Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.FieldsUsedInValueExpression { get; }
    internal TextBox(IReportScope reportScope, IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, TextBox reportItemDef, RenderingContext renderingContext);
    internal TextBox(IDefinitionPath parentDefinitionPath, int indexIntoParentCollectionDef, bool inSubtotal, TextBox renderTextBox, RenderingContext renderingContext);
    public virtual Style get_Style();
    public bool get_CanGrow();
    public bool get_CanShrink();
    public bool get_HideDuplicates();
    public sealed virtual string get_UniqueName();
    public ActionInfo get_ActionInfo();
    public TypeCode get_SharedTypeCode();
    public bool get_IsToggleParent();
    public bool get_CanSort();
    public DataElementStyles get_DataElementStyle();
    public bool get_KeepTogether();
    public ParagraphCollection get_Paragraphs();
    public bool get_IsSimple();
    public bool get_FormattedValueExpressionBased();
    internal TextBox get_TexBoxDef();
    internal virtual ReportItemInstance GetOrCreateInstance();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.get_FieldsUsedInValueExpression();
    internal virtual void UpdateRenderReportItem(ReportItem renderReportItem);
    internal virtual void SetNewContextChildren();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TextBoxFilteredStyle : Style {
    internal TextBoxFilteredStyle(ReportItem renderReportItem, RenderingContext renderingContext, bool useRenderStyle);
    protected virtual bool IsAvailableStyle(StyleAttributeNames styleName);
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TextBoxInstance : ReportItemInstance {
    private ParagraphInstanceCollection m_paragraphInstances;
    private bool m_formattedValueEvaluated;
    private string m_formattedValue;
    private bool m_originalValueEvaluated;
    private VariantResult m_originalValue;
    private bool m_toggleState;
    private bool m_toggleStateEvaluated;
    private Nullable`1<bool> m_duplicate;
    private Nullable`1<TypeCode> m_typeCode;
    private TextBox m_textBoxDef;
    private Nullable`1<bool> m_isToggleParent;
    public ParagraphInstanceCollection ParagraphInstances { get; }
    public string Value { get; }
    public object OriginalValue { get; }
    public bool IsToggleParent { get; }
    public bool ToggleState { get; }
    public SortOptions SortState { get; }
    public bool Duplicate { get; }
    public TypeCode TypeCode { get; }
    public bool ProcessedWithError { get; }
    internal TextBoxInstance(TextBox reportItemDef);
    public void AddToCurrentPage();
    public void RegisterToggleSender();
    public ParagraphInstanceCollection get_ParagraphInstances();
    public string get_Value();
    public object get_OriginalValue();
    public bool get_IsToggleParent();
    public bool get_ToggleState();
    public SortOptions get_SortState();
    public bool get_Duplicate();
    public TypeCode get_TypeCode();
    public bool get_ProcessedWithError();
    protected virtual void ResetInstanceCache();
    private void EvaluateOriginalValue();
    internal List`1<string> GetFieldsUsedInValueExpression();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.TextDecorations : Enum {
    public int value__;
    public static TextDecorations Default;
    public static TextDecorations None;
    public static TextDecorations Underline;
    public static TextDecorations Overline;
    public static TextDecorations LineThrough;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.TextEffects : Enum {
    public int value__;
    public static TextEffects Default;
    public static TextEffects None;
    public static TextEffects Shadow;
    public static TextEffects Emboss;
    public static TextEffects Embed;
    public static TextEffects Frame;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.TextOrientations : Enum {
    public int value__;
    public static TextOrientations Auto;
    public static TextOrientations Horizontal;
    public static TextOrientations Rotated90;
    public static TextOrientations Rotated270;
    public static TextOrientations Stacked;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TextRun : ReportElement {
    protected ReportStringProperty m_value;
    protected ReportEnumProperty`1<MarkupType> m_markupType;
    private string m_definitionPath;
    protected int m_indexIntoParentCollectionDef;
    protected TextRunInstance m_instance;
    protected Paragraph m_paragraph;
    protected Nullable`1<bool> m_formattedValueExpressionBased;
    public string DefinitionPath { get; }
    internal string InstanceUniqueName { get; }
    public string Label { get; }
    public ReportStringProperty Value { get; }
    private string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.UniqueName { get; }
    public ActionInfo ActionInfo { get; }
    public ReportStringProperty ToolTip { get; }
    public ReportEnumProperty`1<MarkupType> MarkupType { get; }
    public TypeCode SharedTypeCode { get; }
    internal TextBox TextBox { get; }
    public bool FormattedValueExpressionBased { get; }
    internal ReportElementInstance ReportElementInstance { get; }
    public TextRunInstance Instance { get; }
    public CompiledRichTextInstance CompiledInstance { get; }
    private List`1<string> Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.FieldsUsedInValueExpression { get; }
    internal List`1<string> FieldsUsedInValueExpression { get; }
    internal TextRun(Paragraph paragraph, int indexIntoParentCollectionDef, RenderingContext renderingContext);
    internal TextRun(Paragraph paragraph, RenderingContext renderingContext);
    public virtual string get_DefinitionPath();
    internal virtual string get_InstanceUniqueName();
    public virtual string get_Label();
    public abstract virtual ReportStringProperty get_Value();
    private sealed virtual override string Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.get_UniqueName();
    public virtual ActionInfo get_ActionInfo();
    public virtual ReportStringProperty get_ToolTip();
    public abstract virtual ReportEnumProperty`1<MarkupType> get_MarkupType();
    public abstract virtual TypeCode get_SharedTypeCode();
    internal TextBox get_TextBox();
    public abstract virtual bool get_FormattedValueExpressionBased();
    internal virtual ReportElementInstance get_ReportElementInstance();
    public abstract virtual TextRunInstance get_Instance();
    public virtual CompiledRichTextInstance get_CompiledInstance();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.OnDemandReportRendering.IROMActionOwner.get_FieldsUsedInValueExpression();
    internal virtual List`1<string> get_FieldsUsedInValueExpression();
    internal virtual void SetNewContext();
    internal virtual void SetNewContextChildren();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.OnDemandReportRendering.TextRunCollection : ReportElementCollectionBase`1<TextRun> {
    private Paragraph m_paragraph;
    private TextRun[] m_textRuns;
    public TextRun Item { get; }
    public int Count { get; }
    internal TextRunCollection(Paragraph paragraph);
    public virtual TextRun get_Item(int i);
    public virtual int get_Count();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TextRunFilteredStyle : Style {
    internal TextRunFilteredStyle(ReportItem renderReportItem, RenderingContext renderingContext, bool useRenderStyle);
    protected virtual bool IsAvailableStyle(StyleAttributeNames styleName);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.TextRunInstance : ReportElementInstance {
    protected string m_uniqueName;
    public string UniqueName { get; }
    public string Value { get; }
    public object OriginalValue { get; }
    public string ToolTip { get; }
    public TextRun Definition { get; }
    public MarkupType MarkupType { get; }
    public TypeCode TypeCode { get; }
    public bool IsCompiled { get; }
    public bool ProcessedWithError { get; }
    internal TextRunInstance(TextRun textRunDef);
    public abstract virtual string get_UniqueName();
    public abstract virtual string get_Value();
    public abstract virtual object get_OriginalValue();
    public virtual string get_ToolTip();
    public TextRun get_Definition();
    public abstract virtual MarkupType get_MarkupType();
    public abstract virtual TypeCode get_TypeCode();
    public abstract virtual bool get_IsCompiled();
    public abstract virtual bool get_ProcessedWithError();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TextRunInstanceCollection : object {
    private ParagraphInstance m_paragraphInstance;
    internal TextRunInstanceCollection(ParagraphInstance paragraphInstance);
    public sealed virtual IEnumerator`1<TextRunInstance> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TextRunInstanceEnumerator : object {
    private ParagraphInstance m_paragraphInstance;
    private TextRunInstance m_textRunInstance;
    private int m_currentIndex;
    private int m_currentCompiledIndex;
    private CompiledTextRunInstanceCollection m_textRunInstances;
    public TextRunInstance Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal TextRunInstanceEnumerator(ParagraphInstance paragraphInstance);
    public sealed virtual TextRunInstance get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.Thermometer : object {
    private GaugePanel m_gaugePanel;
    private Thermometer m_defObject;
    private ThermometerInstance m_instance;
    private Style m_style;
    private ReportDoubleProperty m_bulbOffset;
    private ReportDoubleProperty m_bulbSize;
    private ReportEnumProperty`1<GaugeThermometerStyles> m_thermometerStyle;
    public Style Style { get; }
    public ReportDoubleProperty BulbOffset { get; }
    public ReportDoubleProperty BulbSize { get; }
    public ReportEnumProperty`1<GaugeThermometerStyles> ThermometerStyle { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal Thermometer ThermometerDef { get; }
    public ThermometerInstance Instance { get; }
    internal Thermometer(Thermometer defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public ReportDoubleProperty get_BulbOffset();
    public ReportDoubleProperty get_BulbSize();
    public ReportEnumProperty`1<GaugeThermometerStyles> get_ThermometerStyle();
    internal GaugePanel get_GaugePanelDef();
    internal Thermometer get_ThermometerDef();
    public ThermometerInstance get_Instance();
    internal void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.ThermometerInstance : BaseInstance {
    private Thermometer m_defObject;
    private StyleInstance m_style;
    private Nullable`1<double> m_bulbOffset;
    private Nullable`1<double> m_bulbSize;
    private Nullable`1<GaugeThermometerStyles> m_thermometerStyle;
    public StyleInstance Style { get; }
    public double BulbOffset { get; }
    public double BulbSize { get; }
    public GaugeThermometerStyles ThermometerStyle { get; }
    internal ThermometerInstance(Thermometer defObject);
    public StyleInstance get_Style();
    public double get_BulbOffset();
    public double get_BulbSize();
    public GaugeThermometerStyles get_ThermometerStyle();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TickMarkStyle : object {
    internal GaugePanel m_gaugePanel;
    internal TickMarkStyle m_defObject;
    protected TickMarkStyleInstance m_instance;
    private Style m_style;
    private ReportDoubleProperty m_distanceFromScale;
    private ReportEnumProperty`1<GaugeLabelPlacements> m_placement;
    private ReportBoolProperty m_enableGradient;
    private ReportDoubleProperty m_gradientDensity;
    private TopImage m_tickMarkImage;
    private ReportDoubleProperty m_length;
    private ReportDoubleProperty m_width;
    private ReportEnumProperty`1<GaugeTickMarkShapes> m_shape;
    private ReportBoolProperty m_hidden;
    public Style Style { get; }
    public ReportDoubleProperty DistanceFromScale { get; }
    public ReportEnumProperty`1<GaugeLabelPlacements> Placement { get; }
    public ReportBoolProperty EnableGradient { get; }
    public ReportDoubleProperty GradientDensity { get; }
    public TopImage TickMarkImage { get; }
    public ReportDoubleProperty Length { get; }
    public ReportDoubleProperty Width { get; }
    public ReportEnumProperty`1<GaugeTickMarkShapes> Shape { get; }
    public ReportBoolProperty Hidden { get; }
    internal GaugePanel GaugePanelDef { get; }
    internal TickMarkStyle TickMarkStyleDef { get; }
    public TickMarkStyleInstance Instance { get; }
    internal TickMarkStyle(TickMarkStyle defObject, GaugePanel gaugePanel);
    public sealed virtual Style get_Style();
    public ReportDoubleProperty get_DistanceFromScale();
    public ReportEnumProperty`1<GaugeLabelPlacements> get_Placement();
    public ReportBoolProperty get_EnableGradient();
    public ReportDoubleProperty get_GradientDensity();
    public TopImage get_TickMarkImage();
    public ReportDoubleProperty get_Length();
    public ReportDoubleProperty get_Width();
    public ReportEnumProperty`1<GaugeTickMarkShapes> get_Shape();
    public ReportBoolProperty get_Hidden();
    internal GaugePanel get_GaugePanelDef();
    internal TickMarkStyle get_TickMarkStyleDef();
    public TickMarkStyleInstance get_Instance();
    internal virtual void SetNewContext();
    protected virtual TickMarkStyleInstance GetInstance();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TickMarkStyleInstance : BaseInstance {
    protected TickMarkStyle m_defObject;
    private StyleInstance m_style;
    private Nullable`1<double> m_distanceFromScale;
    private Nullable`1<GaugeLabelPlacements> m_placement;
    private Nullable`1<bool> m_enableGradient;
    private Nullable`1<double> m_gradientDensity;
    private Nullable`1<double> m_length;
    private Nullable`1<double> m_width;
    private Nullable`1<GaugeTickMarkShapes> m_shape;
    private Nullable`1<bool> m_hidden;
    public StyleInstance Style { get; }
    public double DistanceFromScale { get; }
    public GaugeLabelPlacements Placement { get; }
    public bool EnableGradient { get; }
    public double GradientDensity { get; }
    public double Length { get; }
    public double Width { get; }
    public GaugeTickMarkShapes Shape { get; }
    public bool Hidden { get; }
    internal TickMarkStyleInstance(TickMarkStyle defObject);
    public StyleInstance get_Style();
    public double get_DistanceFromScale();
    public GaugeLabelPlacements get_Placement();
    public bool get_EnableGradient();
    public double get_GradientDensity();
    public double get_Length();
    public double get_Width();
    public GaugeTickMarkShapes get_Shape();
    public bool get_Hidden();
    protected virtual void ResetInstanceCache();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TopImage : BaseGaugeImage {
    private ReportColorProperty m_hueColor;
    public ReportColorProperty HueColor { get; }
    internal TopImage TopImageDef { get; }
    public TopImageInstance Instance { get; }
    internal TopImage(TopImage defObject, GaugePanel gaugePanel);
    public ReportColorProperty get_HueColor();
    internal TopImage get_TopImageDef();
    public TopImageInstance get_Instance();
    internal virtual BaseGaugeImageInstance GetInstance();
    internal virtual void SetNewContext();
}
internal class Microsoft.ReportingServices.OnDemandReportRendering.TopImageInstance : BaseGaugeImageInstance {
    private ReportColor m_hueColor;
    public ReportColor HueColor { get; }
    internal TopImageInstance(TopImage defObject);
    public ReportColor get_HueColor();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.UnicodeBiDiTypes : Enum {
    public int value__;
    public static UnicodeBiDiTypes Default;
    public static UnicodeBiDiTypes Normal;
    public static UnicodeBiDiTypes Embed;
    public static UnicodeBiDiTypes BiDiOverride;
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.VerticalAlignments : Enum {
    public int value__;
    public static VerticalAlignments Default;
    public static VerticalAlignments Top;
    public static VerticalAlignments Middle;
    public static VerticalAlignments Bottom;
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.Visibility : object {
    protected ReportBoolProperty m_startHidden;
    public ReportBoolProperty Hidden { get; }
    public string ToggleItem { get; }
    public SharedHiddenState HiddenState { get; }
    public bool RecursiveToggleReceiver { get; }
    public abstract virtual ReportBoolProperty get_Hidden();
    public abstract virtual string get_ToggleItem();
    public abstract virtual SharedHiddenState get_HiddenState();
    public abstract virtual bool get_RecursiveToggleReceiver();
    internal static ReportBoolProperty GetStartHidden(Visibility visibility);
    internal static ReportBoolProperty GetStartHidden(Visibility visibility);
    internal static SharedHiddenState GetHiddenState(Visibility visibility);
    internal static SharedHiddenState GetHiddenState(Visibility visibility);
}
internal abstract class Microsoft.ReportingServices.OnDemandReportRendering.VisibilityInstance : BaseInstance {
    protected bool m_cachedStartHidden;
    protected bool m_startHiddenValue;
    protected bool m_cachedCurrentlyHidden;
    protected bool m_currentlyHiddenValue;
    public bool CurrentlyHidden { get; }
    public bool StartHidden { get; }
    internal VisibilityInstance(IReportScope reportScope);
    public abstract virtual bool get_CurrentlyHidden();
    public abstract virtual bool get_StartHidden();
    protected virtual void ResetInstanceCache();
}
internal enum Microsoft.ReportingServices.OnDemandReportRendering.WritingModes : Enum {
    public int value__;
    public static WritingModes Default;
    public static WritingModes Horizontal;
    public static WritingModes Vertical;
}
internal abstract class Microsoft.ReportingServices.PolicyManager : object {
    private EventHandler PolicyChanged;
    public void add_PolicyChanged(EventHandler value);
    public void remove_PolicyChanged(EventHandler value);
    public abstract virtual AppDomain CreateAppDomainWithPolicy(string appDomainName, Evidence evidence, AppDomainSetup setupInfo, SandboxCasPolicySettings casSettings);
    protected void OnPolicyChanged();
}
internal static class Microsoft.ReportingServices.PublicKeyConstants : object {
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyVersion;
    internal static string AssemblyQualifier;
}
internal class Microsoft.ReportingServices.RdlExpressions.BinaryResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal Byte[] Value;
}
internal class Microsoft.ReportingServices.RdlExpressions.BooleanResult : ValueType {
    internal bool ErrorOccurred;
    internal bool Value;
}
internal abstract class Microsoft.ReportingServices.RdlExpressions.ExpressionParser : object {
    protected ErrorContext m_errorContext;
    private bool m_valueReferenced;
    private bool m_valueReferencedGlobal;
    internal bool BodyRefersToReportItems { get; }
    internal bool PageSectionRefersToReportItems { get; }
    internal int NumberOfAggregates { get; }
    internal int LastID { get; }
    internal bool PreviousAggregateUsed { get; }
    internal bool ValueReferenced { get; }
    internal bool ValueReferencedGlobal { get; }
    internal ExpressionParser(ErrorContext errorContext);
    internal abstract virtual CodeDomProvider GetCodeCompiler();
    internal abstract virtual string GetCompilerArguments();
    internal abstract virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, EvaluationMode evaluationMode);
    internal abstract virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, DetectionFlags flag, EvaluationMode evaluationMode, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    internal abstract virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, EvaluationMode evaluationMode, Boolean& userCollectionReferenced);
    internal abstract virtual void ConvertField2ComplexExpr(ExpressionInfo& expression);
    internal void ResetValueReferencedFlag();
    internal abstract virtual bool get_BodyRefersToReportItems();
    internal abstract virtual bool get_PageSectionRefersToReportItems();
    internal abstract virtual int get_NumberOfAggregates();
    internal abstract virtual int get_LastID();
    internal abstract virtual bool get_PreviousAggregateUsed();
    internal bool get_ValueReferenced();
    internal bool get_ValueReferencedGlobal();
    protected static Restrictions ExpressionType2Restrictions(ExpressionType expressionType);
    protected void SetValueReferenced();
}
internal class Microsoft.ReportingServices.RdlExpressions.ExprHostBuilder : object {
    internal static string RootType;
    private static string EndSrcMarker;
    private static string ExprSrcMarker;
    private static string CustomCodeSrcMarker;
    private static string CodeModuleClassInstanceDeclSrcMarker;
    private RootTypeDecl m_rootTypeDecl;
    private TypeDecl m_currentTypeDecl;
    private bool m_setCode;
    private static Regex m_findExprNumber;
    private static Regex m_findCodeModuleClassInstanceDeclNumber;
    internal bool HasExpressions { get; }
    internal bool CustomCode { get; }
    private static ExprHostBuilder();
    internal bool get_HasExpressions();
    internal bool get_CustomCode();
    internal void SetCustomCode();
    internal CodeCompileUnit GetExprHost(ProcessingIntermediateFormatVersion version, bool refusePermissions);
    internal ErrorSource ParseErrorSource(CompilerError error, Int32& id);
    internal void ReportStart();
    internal void ReportEnd();
    internal void ReportLanguage(ExpressionInfo expression);
    internal void GenericLabel(ExpressionInfo expression);
    internal void GenericValue(ExpressionInfo expression);
    internal void GenericNoRows(ExpressionInfo expression);
    internal void GenericVisibilityHidden(ExpressionInfo expression);
    internal void AggregateParamExprAdd(ExpressionInfo expression);
    internal void CustomCodeProxyStart();
    internal void CustomCodeProxyEnd();
    internal void CustomCodeClassInstance(string className, string instanceName, int id);
    internal void ReportCode(string code);
    internal void ReportParameterStart(string name);
    internal int ReportParameterEnd();
    internal void ReportParameterValidationExpression(ExpressionInfo expression);
    internal void ReportParameterPromptExpression(ExpressionInfo expression);
    internal void ReportParameterDefaultValue(ExpressionInfo expression);
    internal void ReportParameterValidValuesStart();
    internal void ReportParameterValidValuesEnd();
    internal void ReportParameterValidValue(ExpressionInfo expression);
    internal void ReportParameterValidValueLabelsStart();
    internal void ReportParameterValidValueLabelsEnd();
    internal void ReportParameterValidValueLabel(ExpressionInfo expression);
    internal void CalcFieldStart(string name);
    internal int CalcFieldEnd();
    internal void QueryParametersStart();
    internal void QueryParametersEnd();
    internal void QueryParameterValue(ExpressionInfo expression);
    internal void DataSourceStart(string name);
    internal int DataSourceEnd();
    internal void DataSourceConnectString(ExpressionInfo expression);
    internal void DataSetStart(string name);
    internal int DataSetEnd();
    internal void DataSetQueryCommandText(ExpressionInfo expression);
    internal void PageSectionStart();
    internal int PageSectionEnd();
    internal void PageStart();
    internal void PageEnd();
    internal void ParameterOmit(ExpressionInfo expression);
    internal void StyleAttribute(string name, ExpressionInfo expression);
    internal void ActionInfoStart();
    internal void ActionInfoEnd();
    internal void ActionStart();
    internal int ActionEnd();
    internal void ActionHyperlink(ExpressionInfo expression);
    internal void ActionDrillThroughReportName(ExpressionInfo expression);
    internal void ActionDrillThroughBookmarkLink(ExpressionInfo expression);
    internal void ActionBookmarkLink(ExpressionInfo expression);
    internal void ActionDrillThroughParameterStart();
    internal int ActionDrillThroughParameterEnd();
    internal void ReportItemBookmark(ExpressionInfo expression);
    internal void ReportItemToolTip(ExpressionInfo expression);
    internal void LineStart(string name);
    internal int LineEnd();
    internal void RectangleStart(string name);
    internal int RectangleEnd();
    internal void TextBoxStart(string name);
    internal int TextBoxEnd();
    internal void TextBoxToggleImageInitialState(ExpressionInfo expression);
    internal void UserSortExpressionsStart();
    internal void UserSortExpressionsEnd();
    internal void UserSortExpression(ExpressionInfo expression);
    internal void ImageStart(string name);
    internal int ImageEnd();
    internal void ImageMIMEType(ExpressionInfo expression);
    internal void SubreportStart(string name);
    internal int SubreportEnd();
    internal void SubreportParameterStart();
    internal int SubreportParameterEnd();
    internal void SortStart();
    internal void SortEnd();
    internal void SortExpression(ExpressionInfo expression);
    internal void SortDirectionsStart();
    internal void SortDirectionsEnd();
    internal void SortDirection(ExpressionInfo expression);
    internal void FilterStart();
    internal int FilterEnd();
    internal void FilterExpression(ExpressionInfo expression);
    internal void FilterValue(ExpressionInfo expression);
    internal void GroupStart(string typeName);
    internal void GroupEnd();
    internal void GroupExpression(ExpressionInfo expression);
    internal void GroupParentExpressionsStart();
    internal void GroupParentExpressionsEnd();
    internal void GroupParentExpression(ExpressionInfo expression);
    internal void ReGroupExpressionsStart();
    internal void ReGroupExpressionsEnd();
    internal void ReGroupExpression(ExpressionInfo expression);
    internal void VariableValuesStart();
    internal void VariableValuesEnd();
    internal void VariableValueExpression(ExpressionInfo expression);
    internal void DataRegionStart(DataRegionMode mode, string dataregionName);
    internal int DataRegionEnd(DataRegionMode mode);
    internal void DataGroupStart(DataRegionMode mode, bool column);
    internal int DataGroupEnd(DataRegionMode mode, bool column);
    internal void DataCellStart(DataRegionMode mode);
    internal int DataCellEnd(DataRegionMode mode);
    internal void ChartTitleStart(string titleName);
    internal void ChartTitlePosition(ExpressionInfo expression);
    internal void ChartTitleHidden(ExpressionInfo expression);
    internal void ChartTitleDocking(ExpressionInfo expression);
    internal void ChartTitleDockOffset(ExpressionInfo expression);
    internal void ChartTitleDockOutsideChartArea(ExpressionInfo expression);
    internal void ChartTitleToolTip(ExpressionInfo expression);
    internal void ChartTitleTextOrientation(ExpressionInfo expression);
    internal int ChartTitleEnd();
    internal void ChartNoDataMessageStart();
    internal void ChartNoDataMessageEnd();
    internal void ChartCaption(ExpressionInfo expression);
    internal void ChartAxisTitleStart();
    internal void ChartAxisTitleTextOrientation(ExpressionInfo expression);
    internal void ChartAxisTitleEnd();
    internal void ChartLegendTitleStart();
    internal void ChartLegendTitleSeparator(ExpressionInfo expression);
    internal void ChartLegendTitleEnd();
    internal void AxisMin(ExpressionInfo expression);
    internal void AxisMax(ExpressionInfo expression);
    internal void AxisCrossAt(ExpressionInfo expression);
    internal void AxisMajorInterval(ExpressionInfo expression);
    internal void AxisMinorInterval(ExpressionInfo expression);
    internal void ChartPalette(ExpressionInfo expression);
    internal void ChartPaletteHatchBehavior(ExpressionInfo expression);
    internal void DynamicWidth(ExpressionInfo expression);
    internal void DynamicHeight(ExpressionInfo expression);
    internal void ChartAxisStart(string axisName, bool isValueAxis);
    internal void ChartAxisVisible(ExpressionInfo expression);
    internal void ChartAxisMargin(ExpressionInfo expression);
    internal void ChartAxisInterval(ExpressionInfo expression);
    internal void ChartAxisIntervalType(ExpressionInfo expression);
    internal void ChartAxisIntervalOffset(ExpressionInfo expression);
    internal void ChartAxisIntervalOffsetType(ExpressionInfo expression);
    internal void ChartAxisMarksAlwaysAtPlotEdge(ExpressionInfo expression);
    internal void ChartAxisReverse(ExpressionInfo expression);
    internal void ChartAxisLocation(ExpressionInfo expression);
    internal void ChartAxisInterlaced(ExpressionInfo expression);
    internal void ChartAxisInterlacedColor(ExpressionInfo expression);
    internal void ChartAxisLogScale(ExpressionInfo expression);
    internal void ChartAxisLogBase(ExpressionInfo expression);
    internal void ChartAxisHideLabels(ExpressionInfo expression);
    internal void ChartAxisAngle(ExpressionInfo expression);
    internal void ChartAxisArrows(ExpressionInfo expression);
    internal void ChartAxisPreventFontShrink(ExpressionInfo expression);
    internal void ChartAxisPreventFontGrow(ExpressionInfo expression);
    internal void ChartAxisPreventLabelOffset(ExpressionInfo expression);
    internal void ChartAxisPreventWordWrap(ExpressionInfo expression);
    internal void ChartAxisAllowLabelRotation(ExpressionInfo expression);
    internal void ChartAxisIncludeZero(ExpressionInfo expression);
    internal void ChartAxisLabelsAutoFitDisabled(ExpressionInfo expression);
    internal void ChartAxisMinFontSize(ExpressionInfo expression);
    internal void ChartAxisMaxFontSize(ExpressionInfo expression);
    internal void ChartAxisOffsetLabels(ExpressionInfo expression);
    internal void ChartAxisHideEndLabels(ExpressionInfo expression);
    internal void ChartAxisVariableAutoInterval(ExpressionInfo expression);
    internal void ChartAxisLabelInterval(ExpressionInfo expression);
    internal void ChartAxisLabelIntervalType(ExpressionInfo expression);
    internal void ChartAxisLabelIntervalOffset(ExpressionInfo expression);
    internal void ChartAxisLabelIntervalOffsetType(ExpressionInfo expression);
    internal int ChartAxisEnd(bool isValueAxis);
    internal void ChartGridLinesStart(bool isMajor);
    internal void ChartGridLinesEnd(bool isMajor);
    internal void ChartGridLinesIntervalOffsetType(ExpressionInfo expression);
    internal void ChartGridLinesIntervalOffset(ExpressionInfo expression);
    internal void ChartGridLinesEnabledIntervalType(ExpressionInfo expression);
    internal void ChartGridLinesInterval(ExpressionInfo expression);
    internal void ChartGridLinesEnabled(ExpressionInfo expression);
    internal void ChartLegendStart(string legendName);
    internal void ChartLegendHidden(ExpressionInfo expression);
    internal void ChartLegendPosition(ExpressionInfo expression);
    internal void ChartLegendLayout(ExpressionInfo expression);
    internal void ChartLegendDockOutsideChartArea(ExpressionInfo expression);
    internal void ChartLegendAutoFitTextDisabled(ExpressionInfo expression);
    internal void ChartLegendMinFontSize(ExpressionInfo expression);
    internal void ChartLegendHeaderSeparator(ExpressionInfo expression);
    internal void ChartLegendHeaderSeparatorColor(ExpressionInfo expression);
    internal void ChartLegendColumnSeparator(ExpressionInfo expression);
    internal void ChartLegendColumnSeparatorColor(ExpressionInfo expression);
    internal void ChartLegendColumnSpacing(ExpressionInfo expression);
    internal void ChartLegendInterlacedRows(ExpressionInfo expression);
    internal void ChartLegendInterlacedRowsColor(ExpressionInfo expression);
    internal void ChartLegendEquallySpacedItems(ExpressionInfo expression);
    internal void ChartLegendReversed(ExpressionInfo expression);
    internal void ChartLegendMaxAutoSize(ExpressionInfo expression);
    internal void ChartLegendTextWrapThreshold(ExpressionInfo expression);
    internal int ChartLegendEnd();
    internal void ChartSeriesStart();
    internal void ChartSeriesType(ExpressionInfo expression);
    internal void ChartSeriesSubtype(ExpressionInfo expression);
    internal void ChartSeriesLegendName(ExpressionInfo expression);
    internal void ChartSeriesLegendText(ExpressionInfo expression);
    internal void ChartSeriesChartAreaName(ExpressionInfo expression);
    internal void ChartSeriesValueAxisName(ExpressionInfo expression);
    internal void ChartSeriesCategoryAxisName(ExpressionInfo expression);
    internal void ChartSeriesHidden(ExpressionInfo expression);
    internal void ChartSeriesHideInLegend(ExpressionInfo expression);
    internal void ChartSeriesToolTip(ExpressionInfo expression);
    internal void ChartSeriesEnd();
    internal void ChartNoMoveDirectionsStart();
    internal void ChartNoMoveDirectionsUp(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsDown(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsLeft(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsRight(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsUpLeft(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsUpRight(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsDownLeft(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsDownRight(ExpressionInfo expression);
    internal void ChartNoMoveDirectionsEnd();
    internal void ChartElementPositionStart();
    internal void ChartElementPositionEnd();
    internal void ChartElementPositionTop(ExpressionInfo expression);
    internal void ChartElementPositionLeft(ExpressionInfo expression);
    internal void ChartElementPositionHeight(ExpressionInfo expression);
    internal void ChartElementPositionWidth(ExpressionInfo expression);
    internal void ChartSmartLabelStart();
    internal void ChartSmartLabelAllowOutSidePlotArea(ExpressionInfo expression);
    internal void ChartSmartLabelCalloutBackColor(ExpressionInfo expression);
    internal void ChartSmartLabelCalloutLineAnchor(ExpressionInfo expression);
    internal void ChartSmartLabelCalloutLineColor(ExpressionInfo expression);
    internal void ChartSmartLabelCalloutLineStyle(ExpressionInfo expression);
    internal void ChartSmartLabelCalloutLineWidth(ExpressionInfo expression);
    internal void ChartSmartLabelCalloutStyle(ExpressionInfo expression);
    internal void ChartSmartLabelShowOverlapped(ExpressionInfo expression);
    internal void ChartSmartLabelMarkerOverlapping(ExpressionInfo expression);
    internal void ChartSmartLabelDisabled(ExpressionInfo expression);
    internal void ChartSmartLabelMaxMovingDistance(ExpressionInfo expression);
    internal void ChartSmartLabelMinMovingDistance(ExpressionInfo expression);
    internal void ChartSmartLabelEnd();
    internal void ChartAxisScaleBreakStart();
    internal void ChartAxisScaleBreakEnabled(ExpressionInfo expression);
    internal void ChartAxisScaleBreakBreakLineType(ExpressionInfo expression);
    internal void ChartAxisScaleBreakCollapsibleSpaceThreshold(ExpressionInfo expression);
    internal void ChartAxisScaleBreakMaxNumberOfBreaks(ExpressionInfo expression);
    internal void ChartAxisScaleBreakSpacing(ExpressionInfo expression);
    internal void ChartAxisScaleBreakIncludeZero(ExpressionInfo expression);
    internal void ChartAxisScaleBreakEnd();
    internal void ChartBorderSkinStart();
    internal void ChartBorderSkinBorderSkinType(ExpressionInfo expression);
    internal void ChartBorderSkinEnd();
    internal void ChartItemInLegendStart();
    internal void ChartItemInLegendLegendText(ExpressionInfo expression);
    internal void ChartItemInLegendToolTip(ExpressionInfo expression);
    internal void ChartItemInLegendHidden(ExpressionInfo expression);
    internal void ChartItemInLegendEnd();
    internal void ChartTickMarksStart(bool isMajor);
    internal void ChartTickMarksEnd(bool isMajor);
    internal void ChartTickMarksEnabled(ExpressionInfo expression);
    internal void ChartTickMarksType(ExpressionInfo expression);
    internal void ChartTickMarksLength(ExpressionInfo expression);
    internal void ChartTickMarksInterval(ExpressionInfo expression);
    internal void ChartTickMarksIntervalType(ExpressionInfo expression);
    internal void ChartTickMarksIntervalOffset(ExpressionInfo expression);
    internal void ChartTickMarksIntervalOffsetType(ExpressionInfo expression);
    internal void ChartEmptyPointsStart();
    internal void ChartEmptyPointsAxisLabel(ExpressionInfo expression);
    internal void ChartEmptyPointsToolTip(ExpressionInfo expression);
    internal void ChartEmptyPointsEnd();
    internal void ChartLegendColumnHeaderStart();
    internal void ChartLegendColumnHeaderValue(ExpressionInfo expression);
    internal void ChartLegendColumnHeaderEnd();
    internal void ChartCustomPaletteColorStart(int index);
    internal int ChartCustomPaletteColorEnd();
    internal void ChartCustomPaletteColor(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellStart(string name);
    internal void ChartLegendCustomItemCellCellType(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellText(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellCellSpan(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellToolTip(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellImageWidth(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellImageHeight(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellSymbolHeight(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellSymbolWidth(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellAlignment(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellTopMargin(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellBottomMargin(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellLeftMargin(ExpressionInfo expression);
    internal void ChartLegendCustomItemCellRightMargin(ExpressionInfo expression);
    internal int ChartLegendCustomItemCellEnd();
    internal void ChartDerivedSeriesStart(int index);
    internal void ChartDerivedSeriesSourceChartSeriesName(ExpressionInfo expression);
    internal void ChartDerivedSeriesDerivedSeriesFormula(ExpressionInfo expression);
    internal int ChartDerivedSeriesEnd();
    internal void ChartStripLineStart(int index);
    internal void ChartStripLineTitle(ExpressionInfo expression);
    internal void ChartStripLineTitleAngle(ExpressionInfo expression);
    internal void ChartStripLineTextOrientation(ExpressionInfo expression);
    internal void ChartStripLineToolTip(ExpressionInfo expression);
    internal void ChartStripLineInterval(ExpressionInfo expression);
    internal void ChartStripLineIntervalType(ExpressionInfo expression);
    internal void ChartStripLineIntervalOffset(ExpressionInfo expression);
    internal void ChartStripLineIntervalOffsetType(ExpressionInfo expression);
    internal void ChartStripLineStripWidth(ExpressionInfo expression);
    internal void ChartStripLineStripWidthType(ExpressionInfo expression);
    internal int ChartStripLineEnd();
    internal void ChartFormulaParameterStart(string name);
    internal void ChartFormulaParameterValue(ExpressionInfo expression);
    internal int ChartFormulaParameterEnd();
    internal void ChartLegendColumnStart(string name);
    internal void ChartLegendColumnColumnType(ExpressionInfo expression);
    internal void ChartLegendColumnValue(ExpressionInfo expression);
    internal void ChartLegendColumnToolTip(ExpressionInfo expression);
    internal void ChartLegendColumnMinimumWidth(ExpressionInfo expression);
    internal void ChartLegendColumnMaximumWidth(ExpressionInfo expression);
    internal void ChartLegendColumnSeriesSymbolWidth(ExpressionInfo expression);
    internal void ChartLegendColumnSeriesSymbolHeight(ExpressionInfo expression);
    internal int ChartLegendColumnEnd();
    internal void ChartLegendCustomItemStart(string name);
    internal void ChartLegendCustomItemSeparator(ExpressionInfo expression);
    internal void ChartLegendCustomItemSeparatorColor(ExpressionInfo expression);
    internal void ChartLegendCustomItemToolTip(ExpressionInfo expression);
    internal int ChartLegendCustomItemEnd();
    internal void ChartAreaStart(string chartAreaName);
    internal void Chart3DPropertiesStart();
    internal void Chart3DPropertiesEnabled(ExpressionInfo expression);
    internal void Chart3DPropertiesRotation(ExpressionInfo expression);
    internal void Chart3DPropertiesProjectionMode(ExpressionInfo expression);
    internal void Chart3DPropertiesInclination(ExpressionInfo expression);
    internal void Chart3DPropertiesPerspective(ExpressionInfo expression);
    internal void Chart3DPropertiesDepthRatio(ExpressionInfo expression);
    internal void Chart3DPropertiesShading(ExpressionInfo expression);
    internal void Chart3DPropertiesGapDepth(ExpressionInfo expression);
    internal void Chart3DPropertiesWallThickness(ExpressionInfo expression);
    internal void Chart3DPropertiesClustered(ExpressionInfo expression);
    internal void Chart3DPropertiesEnd();
    internal void ChartAreaHidden(ExpressionInfo expression);
    internal void ChartAreaAlignOrientation(ExpressionInfo expression);
    internal void ChartAreaEquallySizedAxesFont(ExpressionInfo expression);
    internal void ChartAlignTypePosition(ExpressionInfo expression);
    internal void ChartAlignTypeInnerPlotPosition(ExpressionInfo expression);
    internal void ChartAlignTypCursor(ExpressionInfo expression);
    internal void ChartAlignTypeAxesView(ExpressionInfo expression);
    internal int ChartAreaEnd();
    internal void ChartDataPointValueX(ExpressionInfo expression);
    internal void ChartDataPointValueY(ExpressionInfo expression);
    internal void ChartDataPointValueSize(ExpressionInfo expression);
    internal void ChartDataPointValueHigh(ExpressionInfo expression);
    internal void ChartDataPointValueLow(ExpressionInfo expression);
    internal void ChartDataPointValueStart(ExpressionInfo expression);
    internal void ChartDataPointValueEnd(ExpressionInfo expression);
    internal void ChartDataPointValueMean(ExpressionInfo expression);
    internal void ChartDataPointValueMedian(ExpressionInfo expression);
    internal void ChartDataPointAxisLabel(ExpressionInfo expression);
    internal void ChartDataPointToolTip(ExpressionInfo expression);
    internal void DataLabelStart();
    internal void DataLabelLabel(ExpressionInfo expression);
    internal void DataLabelVisible(ExpressionInfo expression);
    internal void DataLabelPosition(ExpressionInfo expression);
    internal void DataLabelRotation(ExpressionInfo expression);
    internal void DataLabelUseValueAsLabel(ExpressionInfo expression);
    internal void ChartDataLabelToolTip(ExpressionInfo expression);
    internal void DataLabelEnd();
    internal void DataPointStyleStart();
    internal void DataPointStyleEnd();
    internal void DataPointMarkerStart();
    internal void DataPointMarkerSize(ExpressionInfo expression);
    internal void DataPointMarkerType(ExpressionInfo expression);
    internal void DataPointMarkerEnd();
    internal void ChartMemberLabel(ExpressionInfo expression);
    internal void ChartMemberStyleStart();
    internal void ChartMemberStyleEnd();
    internal void DataValueStart();
    internal int DataValueEnd(bool isCustomProperty);
    internal void DataValueName(ExpressionInfo expression);
    internal void DataValueValue(ExpressionInfo expression);
    internal void BaseGaugeImageSource(ExpressionInfo expression);
    internal void BaseGaugeImageValue(ExpressionInfo expression);
    internal void BaseGaugeImageMIMEType(ExpressionInfo expression);
    internal void BaseGaugeImageTransparentColor(ExpressionInfo expression);
    internal void CapImageStart();
    internal void CapImageEnd();
    internal void CapImageHueColor(ExpressionInfo expression);
    internal void CapImageOffsetX(ExpressionInfo expression);
    internal void CapImageOffsetY(ExpressionInfo expression);
    internal void FrameImageStart();
    internal void FrameImageEnd();
    internal void FrameImageHueColor(ExpressionInfo expression);
    internal void FrameImageTransparency(ExpressionInfo expression);
    internal void FrameImageClipImage(ExpressionInfo expression);
    internal void PointerImageStart();
    internal void PointerImageEnd();
    internal void PointerImageHueColor(ExpressionInfo expression);
    internal void PointerImageTransparency(ExpressionInfo expression);
    internal void PointerImageOffsetX(ExpressionInfo expression);
    internal void PointerImageOffsetY(ExpressionInfo expression);
    internal void TopImageStart();
    internal void TopImageEnd();
    internal void TopImageHueColor(ExpressionInfo expression);
    internal void BackFrameStart();
    internal void BackFrameEnd();
    internal void BackFrameFrameStyle(ExpressionInfo expression);
    internal void BackFrameFrameShape(ExpressionInfo expression);
    internal void BackFrameFrameWidth(ExpressionInfo expression);
    internal void BackFrameGlassEffect(ExpressionInfo expression);
    internal void FrameBackgroundStart();
    internal void FrameBackgroundEnd();
    internal void CustomLabelStart(string name);
    internal int CustomLabelEnd();
    internal void CustomLabelText(ExpressionInfo expression);
    internal void CustomLabelAllowUpsideDown(ExpressionInfo expression);
    internal void CustomLabelDistanceFromScale(ExpressionInfo expression);
    internal void CustomLabelFontAngle(ExpressionInfo expression);
    internal void CustomLabelPlacement(ExpressionInfo expression);
    internal void CustomLabelRotateLabel(ExpressionInfo expression);
    internal void CustomLabelValue(ExpressionInfo expression);
    internal void CustomLabelHidden(ExpressionInfo expression);
    internal void CustomLabelUseFontPercent(ExpressionInfo expression);
    internal void GaugeClipContent(ExpressionInfo expression);
    internal void GaugeImageStart(string name);
    internal int GaugeImageEnd();
    internal void GaugeAspectRatio(ExpressionInfo expression);
    internal void GaugeInputValueStart(int index);
    internal int GaugeInputValueEnd();
    internal void GaugeInputValueValue(ExpressionInfo expression);
    internal void GaugeInputValueFormula(ExpressionInfo expression);
    internal void GaugeInputValueMinPercent(ExpressionInfo expression);
    internal void GaugeInputValueMaxPercent(ExpressionInfo expression);
    internal void GaugeInputValueMultiplier(ExpressionInfo expression);
    internal void GaugeInputValueAddConstant(ExpressionInfo expression);
    internal void GaugeLabelStart(string name);
    internal int GaugeLabelEnd();
    internal void GaugeLabelText(ExpressionInfo expression);
    internal void GaugeLabelAngle(ExpressionInfo expression);
    internal void GaugeLabelResizeMode(ExpressionInfo expression);
    internal void GaugeLabelTextShadowOffset(ExpressionInfo expression);
    internal void GaugeLabelUseFontPercent(ExpressionInfo expression);
    internal void GaugePanelAntiAliasing(ExpressionInfo expression);
    internal void GaugePanelAutoLayout(ExpressionInfo expression);
    internal void GaugePanelShadowIntensity(ExpressionInfo expression);
    internal void GaugePanelTextAntiAliasingQuality(ExpressionInfo expression);
    internal void GaugePanelItemTop(ExpressionInfo expression);
    internal void GaugePanelItemLeft(ExpressionInfo expression);
    internal void GaugePanelItemHeight(ExpressionInfo expression);
    internal void GaugePanelItemWidth(ExpressionInfo expression);
    internal void GaugePanelItemZIndex(ExpressionInfo expression);
    internal void GaugePanelItemHidden(ExpressionInfo expression);
    internal void GaugePanelItemToolTip(ExpressionInfo expression);
    internal void GaugePointerBarStart(ExpressionInfo expression);
    internal void GaugePointerDistanceFromScale(ExpressionInfo expression);
    internal void GaugePointerMarkerLength(ExpressionInfo expression);
    internal void GaugePointerMarkerStyle(ExpressionInfo expression);
    internal void GaugePointerPlacement(ExpressionInfo expression);
    internal void GaugePointerSnappingEnabled(ExpressionInfo expression);
    internal void GaugePointerSnappingInterval(ExpressionInfo expression);
    internal void GaugePointerToolTip(ExpressionInfo expression);
    internal void GaugePointerHidden(ExpressionInfo expression);
    internal void GaugePointerWidth(ExpressionInfo expression);
    internal void GaugeScaleInterval(ExpressionInfo expression);
    internal void GaugeScaleIntervalOffset(ExpressionInfo expression);
    internal void GaugeScaleLogarithmic(ExpressionInfo expression);
    internal void GaugeScaleLogarithmicBase(ExpressionInfo expression);
    internal void GaugeScaleMultiplier(ExpressionInfo expression);
    internal void GaugeScaleReversed(ExpressionInfo expression);
    internal void GaugeScaleTickMarksOnTop(ExpressionInfo expression);
    internal void GaugeScaleToolTip(ExpressionInfo expression);
    internal void GaugeScaleHidden(ExpressionInfo expression);
    internal void GaugeScaleWidth(ExpressionInfo expression);
    internal void GaugeTickMarksStart(bool isMajor);
    internal void GaugeTickMarksEnd(bool isMajor);
    internal void TickMarkStyleStart();
    internal void TickMarkStyleEnd();
    internal void GaugeTickMarksInterval(ExpressionInfo expression);
    internal void GaugeTickMarksIntervalOffset(ExpressionInfo expression);
    internal void LinearGaugeStart(string name);
    internal int LinearGaugeEnd();
    internal void LinearGaugeOrientation(ExpressionInfo expression);
    internal void LinearPointerStart(string name);
    internal int LinearPointerEnd();
    internal void LinearPointerType(ExpressionInfo expression);
    internal void LinearScaleStart(string name);
    internal int LinearScaleEnd();
    internal void LinearScaleStartMargin(ExpressionInfo expression);
    internal void LinearScaleEndMargin(ExpressionInfo expression);
    internal void LinearScalePosition(ExpressionInfo expression);
    internal void NumericIndicatorStart(string name);
    internal int NumericIndicatorEnd();
    internal void PinLabelStart();
    internal void PinLabelEnd();
    internal void PinLabelText(ExpressionInfo expression);
    internal void PinLabelAllowUpsideDown(ExpressionInfo expression);
    internal void PinLabelDistanceFromScale(ExpressionInfo expression);
    internal void PinLabelFontAngle(ExpressionInfo expression);
    internal void PinLabelPlacement(ExpressionInfo expression);
    internal void PinLabelRotateLabel(ExpressionInfo expression);
    internal void PinLabelUseFontPercent(ExpressionInfo expression);
    internal void PointerCapStart();
    internal void PointerCapEnd();
    internal void PointerCapOnTop(ExpressionInfo expression);
    internal void PointerCapReflection(ExpressionInfo expression);
    internal void PointerCapCapStyle(ExpressionInfo expression);
    internal void PointerCapHidden(ExpressionInfo expression);
    internal void PointerCapWidth(ExpressionInfo expression);
    internal void RadialGaugeStart(string name);
    internal int RadialGaugeEnd();
    internal void RadialGaugePivotX(ExpressionInfo expression);
    internal void RadialGaugePivotY(ExpressionInfo expression);
    internal void RadialPointerStart(string name);
    internal int RadialPointerEnd();
    internal void RadialPointerType(ExpressionInfo expression);
    internal void RadialPointerNeedleStyle(ExpressionInfo expression);
    internal void RadialScaleStart(string name);
    internal int RadialScaleEnd();
    internal void RadialScaleRadius(ExpressionInfo expression);
    internal void RadialScaleStartAngle(ExpressionInfo expression);
    internal void RadialScaleSweepAngle(ExpressionInfo expression);
    internal void ScaleLabelsStart();
    internal void ScaleLabelsEnd();
    internal void ScaleLabelsInterval(ExpressionInfo expression);
    internal void ScaleLabelsIntervalOffset(ExpressionInfo expression);
    internal void ScaleLabelsAllowUpsideDown(ExpressionInfo expression);
    internal void ScaleLabelsDistanceFromScale(ExpressionInfo expression);
    internal void ScaleLabelsFontAngle(ExpressionInfo expression);
    internal void ScaleLabelsPlacement(ExpressionInfo expression);
    internal void ScaleLabelsRotateLabels(ExpressionInfo expression);
    internal void ScaleLabelsShowEndLabels(ExpressionInfo expression);
    internal void ScaleLabelsHidden(ExpressionInfo expression);
    internal void ScaleLabelsUseFontPercent(ExpressionInfo expression);
    internal void ScalePinStart(bool isMaximum);
    internal void ScalePinEnd(bool isMaximum);
    internal void ScalePinLocation(ExpressionInfo expression);
    internal void ScalePinEnable(ExpressionInfo expression);
    internal void ScaleRangeStart(string name);
    internal int ScaleRangeEnd();
    internal void ScaleRangeDistanceFromScale(ExpressionInfo expression);
    internal void ScaleRangeStartWidth(ExpressionInfo expression);
    internal void ScaleRangeEndWidth(ExpressionInfo expression);
    internal void ScaleRangeInRangeBarPointerColor(ExpressionInfo expression);
    internal void ScaleRangeInRangeLabelColor(ExpressionInfo expression);
    internal void ScaleRangeInRangeTickMarksColor(ExpressionInfo expression);
    internal void ScaleRangeBackgroundGradientType(ExpressionInfo expression);
    internal void ScaleRangePlacement(ExpressionInfo expression);
    internal void ScaleRangeToolTip(ExpressionInfo expression);
    internal void ScaleRangeHidden(ExpressionInfo expression);
    internal void StateImageStart();
    internal void StateImageEnd();
    internal void StateIndicatorStart(string name);
    internal int StateIndicatorEnd();
    internal void ThermometerStart();
    internal void ThermometerEnd();
    internal void ThermometerBulbOffset(ExpressionInfo expression);
    internal void ThermometerBulbSize(ExpressionInfo expression);
    internal void ThermometerThermometerStyle(ExpressionInfo expression);
    internal void TickMarkStyleDistanceFromScale(ExpressionInfo expression);
    internal void TickMarkStylePlacement(ExpressionInfo expression);
    internal void TickMarkStyleEnableGradient(ExpressionInfo expression);
    internal void TickMarkStyleGradientDensity(ExpressionInfo expression);
    internal void TickMarkStyleLength(ExpressionInfo expression);
    internal void TickMarkStyleWidth(ExpressionInfo expression);
    internal void TickMarkStyleShape(ExpressionInfo expression);
    internal void TickMarkStyleHidden(ExpressionInfo expression);
    internal void ParagraphStart(int index);
    internal int ParagraphEnd();
    internal void ParagraphLeftIndent(ExpressionInfo expression);
    internal void ParagraphRightIndent(ExpressionInfo expression);
    internal void ParagraphHangingIndent(ExpressionInfo expression);
    internal void ParagraphSpaceBefore(ExpressionInfo expression);
    internal void ParagraphSpaceAfter(ExpressionInfo expression);
    internal void ParagraphListStyle(ExpressionInfo expression);
    internal void ParagraphListLevel(ExpressionInfo expression);
    internal void TextRunStart(int index);
    internal int TextRunEnd();
    internal void TextRunToolTip(ExpressionInfo expression);
    internal void TextRunValue(ExpressionInfo expression);
    internal void TextRunMarkupType(ExpressionInfo expression);
    private void TypeStart(string typeName, string baseType);
    private int TypeEnd(TypeDecl container, string name, CodeExpressionCollection& initializers);
    private bool TypeEnd(TypeDecl container, string name);
    private void TypeEnd(TypeDecl container);
    private int ReportItemEnd(string name, CodeExpressionCollection& initializers);
    private void ParameterStart();
    private int ParameterEnd(string propName);
    private void StyleStart(string typeName);
    private void StyleEnd(string propName);
    private void AggregateStart();
    private int AggregateEnd();
    private string CreateTypeName(string template, CodeExpressionCollection initializers);
    private void ExprIndexerCreate();
    private CodeStatement ExprIndexerTree(ReturnStatementList indexedExpressions, int leftIndex, int rightIndex);
    private void IndexedExpressionAdd(ExpressionInfo expression);
    private void ExpressionAdd(string name, ExpressionInfo expression);
    private CodeMethodReturnStatement CreateExprReturnStatement(ExpressionInfo expression);
}
internal class Microsoft.ReportingServices.RdlExpressions.ExprHostCompiler : object {
    private ExpressionParser m_langParser;
    private ErrorContext m_errorContext;
    private ExprHostBuilder m_builder;
    private ExprCompileTimeInfoList m_ctExprList;
    private CodeModuleClassInstanceDeclCompileTimeInfoList m_ctClassInstDeclList;
    private int m_customCodeNumErrors;
    private int m_customCodeNumWarnings;
    private ArrayList m_reportLevelFieldReferences;
    internal ExprHostBuilder Builder { get; }
    internal bool BodyRefersToReportItems { get; }
    internal bool PageSectionRefersToReportItems { get; }
    internal int NumberOfAggregates { get; }
    internal int LastAggregateID { get; }
    internal bool PreviousAggregateUsed { get; }
    internal bool ValueReferenced { get; }
    internal bool ValueReferencedGlobal { get; }
    internal ExprHostCompiler(ExpressionParser langParser, ErrorContext errorContext);
    internal ExprHostBuilder get_Builder();
    internal bool get_BodyRefersToReportItems();
    internal bool get_PageSectionRefersToReportItems();
    internal int get_NumberOfAggregates();
    internal int get_LastAggregateID();
    internal bool get_PreviousAggregateUsed();
    internal bool get_ValueReferenced();
    internal bool get_ValueReferencedGlobal();
    internal ExpressionInfo ParseExpression(string expression, EvaluationMode evaluationMode, ExpressionContext context);
    internal ExpressionInfo ParseExpression(string expression, ExpressionContext context, DetectionFlags flag, EvaluationMode evaluationMode, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    internal ExpressionInfo ParseExpression(string expression, ExpressionContext context, EvaluationMode evaluationMode, Boolean& userCollectionReferenced);
    internal void ConvertFields2ComplexExpr();
    internal void ResetValueReferencedFlag();
    internal Byte[] Compile(Report report, AppDomain compilationTempAppDomain, bool refusePermissions);
    private void ProcessExpression(ExpressionInfo expression, ExpressionContext context);
    private void RegisterExpression(ExprCompileTimeInfo exprCTInfo);
    private void ProcessAggregateParams(ExpressionInfo expression, ExpressionContext context);
    private void ProcessAggregateParam(DataAggregateInfo aggregate, ExpressionContext context);
    private void ProcessAggregateParam(ExpressionInfo expression, ExpressionContext context);
    private Byte[] InternalCompile(Report report, AppDomain compilationTempAppDomain, bool refusePermissions);
    private void ResolveAssemblylocations(List`1<string> codeModules, CompilerParameters options, ErrorContext errorContext, AppDomain compilationTempAppDomain);
    private void ParseErrors(CompilerResults results, List`1<CodeClass> codeClassInstDecls);
    private void RegisterError(CompilerError error, Int32& numErrors, Int32& numWarnings, ObjectType objectType, string objectName, string propertyName, ProcessingErrorCode errorCode);
    private string FormatError(CompilerError error);
}
internal class Microsoft.ReportingServices.RdlExpressions.FloatResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal double Value;
}
internal class Microsoft.ReportingServices.RdlExpressions.IntegerResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal int Value;
}
internal class Microsoft.ReportingServices.RdlExpressions.ParameterValueResult : ValueType {
    internal bool ErrorOccurred;
    internal object Value;
    internal DataType Type;
}
internal class Microsoft.ReportingServices.RdlExpressions.ReportRuntime : object {
    private bool m_exprHostInSandboxAppDomain;
    private ReportExprHost m_reportExprHost;
    private ObjectType m_objectType;
    private string m_objectName;
    private string m_propertyName;
    private ObjectModelImpl m_reportObjectModel;
    private ErrorContext m_errorContext;
    private bool m_contextUpdated;
    private IScope m_currentScope;
    private bool m_variableReferenceMode;
    private bool m_unfulfilledDependency;
    private ReportRuntime m_topLevelReportRuntime;
    private List`1<string> m_fieldsUsedInCurrentActionOwnerValue;
    private int m_id;
    internal ReportExprHost ReportExprHost { get; }
    internal bool VariableReferenceMode { get; internal set; }
    internal bool UnfulfilledDependency { get; internal set; }
    internal bool ContextUpdated { get; internal set; }
    internal IScope CurrentScope { get; internal set; }
    internal ObjectType ObjectType { get; internal set; }
    internal string ObjectName { get; internal set; }
    internal string PropertyName { get; internal set; }
    internal ObjectModelImpl ReportObjectModel { get; }
    internal ErrorContext RuntimeErrorContext { get; }
    internal List`1<string> FieldsUsedInCurrentActionOwnerValue { get; internal set; }
    public int ID { get; }
    internal ReportRuntime(ObjectModelImpl reportObjectModel, ErrorContext errorContext);
    internal ReportRuntime(ObjectModelImpl reportObjectModel, ErrorContext errorContext, ReportExprHost copyReportExprHost, ReportRuntime topLevelReportRuntime);
    internal ReportExprHost get_ReportExprHost();
    internal bool get_VariableReferenceMode();
    internal void set_VariableReferenceMode(bool value);
    internal bool get_UnfulfilledDependency();
    internal void set_UnfulfilledDependency(bool value);
    internal bool get_ContextUpdated();
    internal void set_ContextUpdated(bool value);
    internal IScope get_CurrentScope();
    internal void set_CurrentScope(IScope value);
    internal ObjectType get_ObjectType();
    internal void set_ObjectType(ObjectType value);
    internal string get_ObjectName();
    internal void set_ObjectName(string value);
    internal string get_PropertyName();
    internal void set_PropertyName(string value);
    internal ObjectModelImpl get_ReportObjectModel();
    internal ErrorContext get_RuntimeErrorContext();
    internal List`1<string> get_FieldsUsedInCurrentActionOwnerValue();
    internal void set_FieldsUsedInCurrentActionOwnerValue(List`1<string> value);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, String[] arguments);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
    internal static string GetErrorName(DataFieldStatus status, string exceptionMessage);
    internal string EvaluateReportLanguageExpression(Report report, CultureInfo& language);
    internal string EvaluateParamPrompt(ParameterDef paramDef);
    internal VariantResult EvaluateParamDefaultValue(ParameterDef paramDef, int index);
    internal VariantResult EvaluateParamValidValue(ParameterDef paramDef, int index);
    internal VariantResult EvaluateParamValidValueLabel(ParameterDef paramDef, int index);
    internal object EvaluateDataValueValueExpression(DataValue value, ObjectType objectType, string objectName, string propertyName);
    internal string EvaluateDataValueNameExpression(DataValue value, ObjectType objectType, string objectName, string propertyName);
    internal VariantResult EvaluateFilterVariantExpression(Filter filter, ObjectType objectType, string objectName);
    internal StringResult EvaluateFilterStringExpression(Filter filter, ObjectType objectType, string objectName);
    internal VariantResult EvaluateFilterVariantValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal FloatResult EvaluateFilterIntegerOrFloatValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal IntegerResult EvaluateFilterIntegerValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal StringResult EvaluateFilterStringValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal object EvaluateQueryParamValue(ExpressionInfo paramValue, IndexedExprHost queryParamsExprHost, ObjectType objectType, string objectName);
    internal StringResult EvaluateConnectString(DataSource dataSource);
    internal StringResult EvaluateCommandText(DataSet dataSet);
    internal VariantResult EvaluateFieldValueExpression(Field field);
    internal VariantResult EvaluateAggregateVariantOrBinaryParamExpr(DataAggregateInfo aggregateInfo, int index, IErrorContext errorContext);
    internal bool EvaluateParamValueOmitExpression(ParameterValue paramVal, ObjectType objectType, string objectName);
    internal ParameterValueResult EvaluateParameterValueExpression(ParameterValue paramVal, ObjectType objectType, string objectName, string propertyName);
    internal bool EvaluateStartHiddenExpression(Visibility visibility, IVisibilityHiddenExprHost hiddenExprHostRI, ObjectType objectType, string objectName);
    internal bool EvaluateStartHiddenExpression(Visibility visibility, IndexedExprHost hiddenExprHostIdx, ObjectType objectType, string objectName);
    internal string EvaluateReportItemDocumentMapLabelExpression(ReportItem reportItem);
    internal string EvaluateReportItemBookmarkExpression(ReportItem reportItem);
    internal string EvaluateReportItemToolTipExpression(ReportItem reportItem);
    internal string EvaluateActionLabelExpression(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateReportItemHyperlinkURLExpression(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateReportItemDrillthroughReportName(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateReportItemBookmarkLinkExpression(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateImageStringValueExpression(Image image, Boolean& errorOccurred);
    internal Byte[] EvaluateImageBinaryValueExpression(Image image, Boolean& errorOccurred);
    internal string EvaluateImageMIMETypeExpression(Image image);
    internal bool EvaluateTextBoxInitialToggleStateExpression(TextBox textBox);
    internal object EvaluateUserSortExpression(IInScopeEventSource eventSource);
    internal string EvaluateGroupingLabelExpression(Grouping grouping, ObjectType objectType, string objectName);
    internal object EvaluateRuntimeExpression(RuntimeExpressionInfo runtimeExpression, ObjectType objectType, string objectName, string propertyName);
    internal VariantResult EvaluateVariableValueExpression(Variable variable, IndexedExprHost variableValuesHost, ObjectType parentObjectType, string parentObjectName);
    internal string EvaluateSubReportNoRowsExpression(SubReport subReport, string objectName, string propertyName);
    internal string EvaluateDataRegionNoRowsExpression(DataRegion region, ObjectType objectType, string objectName, string propertyName);
    internal string EvaluateChartDynamicSizeExpression(Chart chart, ExpressionInfo expr, string propertyName, bool isDynamicWidth);
    internal VariantResult EvaluateChartDynamicMemberLabelExpression(ChartMember chartMember, ExpressionInfo expression, string objectName);
    internal string EvaluateChartPaletteExpression(Chart chart, string objectName);
    internal string EvaluateChartPaletteHatchBehaviorExpression(Chart chart, string objectName);
    internal VariantResult EvaluateChartTitleCaptionExpression(ChartTitleBase title, string objectName, string propertyName);
    internal bool EvaluateEvaluateChartTitleHiddenExpression(ChartTitle title, string objectName, string propertyName);
    internal string EvaluateChartTitleDockingExpression(ChartTitle title, string objectName, string propertyName);
    internal string EvaluateChartTitlePositionExpression(ChartTitle title, string objectName, string propertyName);
    internal string EvaluateChartTitlePositionExpression(ChartAxisTitle title, string objectName, string propertyName);
    internal bool EvaluateChartTitleDockOutsideChartAreaExpression(ChartTitle title, string objectName, string propertyName);
    internal int EvaluateChartTitleDockOffsetExpression(ChartTitle title, string objectName, string propertyName);
    internal string EvaluateChartTitleToolTipExpression(ChartTitle title, string objectName, string propertyName);
    internal string EvaluateChartTitleTextOrientationExpression(ChartTitle chartTitle, string objectName);
    internal string EvaluateChartAxisTitlePositionExpression(ChartAxisTitle title, string objectName, string propertyName);
    internal string EvaluateChartAxisTitleTextOrientationExpression(ChartAxisTitle chartAxisTitle, string objectName);
    internal string EvaluateChartLegendTitleTitleSeparatorExpression(ChartLegendTitle chartLegendTitle, string objectName);
    internal VariantResult EvaluateChartDataLabelLabelExpression(ChartDataLabel chartDataLabel, string objectName);
    internal string EvaluateChartDataLabePositionExpression(ChartDataLabel chartDataLabel, string objectName);
    internal int EvaluateChartDataLabelRotationExpression(ChartDataLabel chartDataLabel, string objectName);
    internal bool EvaluateChartDataLabelUseValueAsLabelExpression(ChartDataLabel chartDataLabel, string objectName);
    internal bool EvaluateChartDataLabelVisibleExpression(ChartDataLabel chartDataLabel, string objectName);
    internal VariantResult EvaluateChartDataLabelToolTipExpression(ChartDataLabel chartDataLabel, string objectName);
    internal VariantResult EvaluateChartDataPointValuesXExpression(ChartDataPoint dataPoint, string objectName);
    internal string EvaluateChartTickMarksEnabledExpression(ChartTickMarks chartTickMarks, string objectName);
    internal string EvaluateChartTickMarksTypeExpression(ChartTickMarks chartTickMarks, string objectName);
    internal double EvaluateChartTickMarksLengthExpression(ChartTickMarks chartTickMarks, string objectName);
    internal double EvaluateChartTickMarksIntervalExpression(ChartTickMarks chartTickMarks, string objectName);
    internal string EvaluateChartTickMarksIntervalTypeExpression(ChartTickMarks chartTickMarks, string objectName);
    internal double EvaluateChartTickMarksIntervalOffsetExpression(ChartTickMarks chartTickMarks, string objectName);
    internal string EvaluateChartTickMarksIntervalOffsetTypeExpression(ChartTickMarks chartTickMarks, string objectName);
    internal string EvaluateChartItemInLegendLegendTextExpression(ChartItemInLegend chartItemInLegend, string objectName);
    internal VariantResult EvaluateChartItemInLegendToolTipExpression(ChartItemInLegend chartItemInLegend, string objectName);
    internal bool EvaluateChartItemInLegendHiddenExpression(ChartItemInLegend chartItemInLegend, string objectName);
    internal VariantResult EvaluateChartEmptyPointsAxisLabelExpression(ChartEmptyPoints chartEmptyPoints, string objectName);
    internal VariantResult EvaluateChartEmptyPointsToolTipExpression(ChartEmptyPoints chartEmptyPoints, string objectName);
    internal VariantResult EvaluateChartFormulaParameterValueExpression(ChartFormulaParameter chartFormulaParameter, string objectName);
    internal double EvaluateChartElementPositionExpression(ExpressionInfo expressionInfo, string propertyName, ChartElementPositionExprHost exprHost, Position position, string objectName);
    internal string EvaluateChartSmartLabelAllowOutSidePlotAreaExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelCalloutBackColorExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelCalloutLineAnchorExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelCalloutLineColorExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelCalloutLineStyleExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelCalloutLineWidthExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelCalloutStyleExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal bool EvaluateChartSmartLabelShowOverlappedExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal bool EvaluateChartSmartLabelMarkerOverlappingExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal bool EvaluateChartSmartLabelDisabledExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelMaxMovingDistanceExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal string EvaluateChartSmartLabelMinMovingDistanceExpression(ChartSmartLabel chartSmartLabel, string objectName);
    internal bool EvaluateChartLegendHiddenExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendPositionExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendLayoutExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal bool EvaluateChartLegendDockOutsideChartAreaExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal bool EvaluateChartLegendAutoFitTextDisabledExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendMinFontSizeExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendHeaderSeparatorExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendHeaderSeparatorColorExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendColumnSeparatorExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendColumnSeparatorColorExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal int EvaluateChartLegendColumnSpacingExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal bool EvaluateChartLegendInterlacedRowsExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendInterlacedRowsColorExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal bool EvaluateChartLegendEquallySpacedItemsExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendReversedExpression(ChartLegend chartLegend, string objectName);
    internal int EvaluateChartLegendMaxAutoSizeExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal int EvaluateChartLegendTextWrapThresholdExpression(ChartLegend chartLegend, string objectName, string propertyName);
    internal string EvaluateChartLegendColumnHeaderValueExpression(ChartLegendColumnHeader chartLegendColumnHeader, string objectName);
    internal string EvaluateChartLegendColumnColumnTypeExpression(ChartLegendColumn chartLegendColumn, string objectName);
    internal string EvaluateChartLegendColumnValueExpression(ChartLegendColumn chartLegendColumn, string objectName);
    internal string EvaluateChartLegendColumnToolTipExpression(ChartLegendColumn chartLegendColumn, string objectName);
    internal string EvaluateChartLegendColumnMinimumWidthExpression(ChartLegendColumn chartLegendColumn, string objectName);
    internal string EvaluateChartLegendColumnMaximumWidthExpression(ChartLegendColumn chartLegendColumn, string objectName);
    internal int EvaluateChartLegendColumnSeriesSymbolWidthExpression(ChartLegendColumn chartLegendColumn, string objectName);
    internal int EvaluateChartLegendColumnSeriesSymbolHeightExpression(ChartLegendColumn chartLegendColumn, string objectName);
    internal string EvaluateChartLegendCustomItemCellCellTypeExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal string EvaluateChartLegendCustomItemCellTextExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellCellSpanExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal string EvaluateChartLegendCustomItemCellToolTipExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellImageWidthExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellImageHeightExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellSymbolHeightExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellSymbolWidthExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal string EvaluateChartLegendCustomItemCellAlignmentExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellTopMarginExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellBottomMarginExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellLeftMarginExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal int EvaluateChartLegendCustomItemCellRightMarginExpression(ChartLegendCustomItemCell chartLegendCustomItemCell, string objectName);
    internal bool EvaluateChartNoMoveDirectionsUpExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal bool EvaluateChartNoMoveDirectionsDownExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal bool EvaluateChartNoMoveDirectionsLeftExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal bool EvaluateChartNoMoveDirectionsRightExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal bool EvaluateChartNoMoveDirectionsUpLeftExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal bool EvaluateChartNoMoveDirectionsUpRightExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal bool EvaluateChartNoMoveDirectionsDownLeftExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal bool EvaluateChartNoMoveDirectionsDownRightExpression(ChartNoMoveDirections chartNoMoveDirections, string objectName);
    internal string EvaluateChartStripLineTitleExpression(ChartStripLine chartStripLine, string objectName);
    internal int EvaluateChartStripLineTitleAngleExpression(ChartStripLine chartStripLine, string objectName);
    internal string EvaluateChartStripLineTextOrientationExpression(ChartStripLine chartStripLine, string objectName);
    internal string EvaluateChartStripLineToolTipExpression(ChartStripLine chartStripLine, string objectName);
    internal double EvaluateChartStripLineIntervalExpression(ChartStripLine chartStripLine, string objectName);
    internal string EvaluateChartStripLineIntervalTypeExpression(ChartStripLine chartStripLine, string objectName);
    internal double EvaluateChartStripLineIntervalOffsetExpression(ChartStripLine chartStripLine, string objectName);
    internal string EvaluateChartStripLineIntervalOffsetTypeExpression(ChartStripLine chartStripLine, string objectName);
    internal double EvaluateChartStripLineStripWidthExpression(ChartStripLine chartStripLine, string objectName);
    internal string EvaluateChartStripLineStripWidthTypeExpression(ChartStripLine chartStripLine, string objectName);
    internal string EvaluateChartLegendCustomItemSeparatorExpression(ChartLegendCustomItem chartLegendCustomItem, string objectName);
    internal string EvaluateChartLegendCustomItemSeparatorColorExpression(ChartLegendCustomItem chartLegendCustomItem, string objectName);
    internal string EvaluateChartLegendCustomItemToolTipExpression(ChartLegendCustomItem chartLegendCustomItem, string objectName);
    internal string EvaluateChartSeriesTypeExpression(ChartSeries chartSeries, string objectName);
    internal string EvaluateChartSeriesSubtypeExpression(ChartSeries chartSeries, string objectName);
    internal string EvaluateChartSeriesLegendNameExpression(ChartSeries chartSeries, string objectName);
    internal VariantResult EvaluateChartSeriesLegendTextExpression(ChartSeries chartSeries, string objectName);
    internal string EvaluateChartSeriesChartAreaNameExpression(ChartSeries chartSeries, string objectName);
    internal string EvaluateChartSeriesValueAxisNameExpression(ChartSeries chartSeries, string objectName);
    internal VariantResult EvaluateChartSeriesToolTipExpression(ChartSeries chartSeries, string objectName);
    internal string EvaluateChartSeriesCategoryAxisNameExpression(ChartSeries chartSeries, string objectName);
    internal bool EvaluateChartSeriesHiddenExpression(ChartSeries chartSeries, string objectName);
    internal bool EvaluateChartSeriesHideInLegendExpression(ChartSeries chartSeries, string objectName);
    internal string EvaluateChartBorderSkinBorderSkinTypeExpression(ChartBorderSkin chartBorderSkin, string objectName);
    internal bool EvaluateChartAxisScaleBreakEnabledExpression(ChartAxisScaleBreak chartAxisScaleBreak, string objectName);
    internal string EvaluateChartAxisScaleBreakBreakLineTypeExpression(ChartAxisScaleBreak chartAxisScaleBreak, string objectName);
    internal int EvaluateChartAxisScaleBreakCollapsibleSpaceThresholdExpression(ChartAxisScaleBreak chartAxisScaleBreak, string objectName);
    internal int EvaluateChartAxisScaleBreakMaxNumberOfBreaksExpression(ChartAxisScaleBreak chartAxisScaleBreak, string objectName);
    internal double EvaluateChartAxisScaleBreakSpacingExpression(ChartAxisScaleBreak chartAxisScaleBreak, string objectName);
    internal string EvaluateChartAxisScaleBreakIncludeZeroExpression(ChartAxisScaleBreak chartAxisScaleBreak, string objectName);
    internal string EvaluateChartCustomPaletteColorExpression(ChartCustomPaletteColor customPaletteColor, string objectName);
    internal VariantResult EvaluateChartDataPointAxisLabelExpression(ChartDataPoint chartDataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointToolTipExpression(ChartDataPoint chartDataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValuesYExpression(ChartDataPoint dataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValueSizesExpression(ChartDataPoint dataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValuesHighExpression(ChartDataPoint dataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValuesLowExpression(ChartDataPoint dataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValuesStartExpression(ChartDataPoint dataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValuesEndExpression(ChartDataPoint dataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValuesMeanExpression(ChartDataPoint dataPoint, string objectName);
    internal VariantResult EvaluateChartDataPointValuesMedianExpression(ChartDataPoint dataPoint, string objectName);
    internal string EvaluateChartMarkerSize(ChartMarker chartMarker, string objectName);
    internal string EvaluateChartMarkerType(ChartMarker chartMarker, string objectName);
    internal string EvaluateChartAxisVisibleExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisMarginExpression(ChartAxis chartAxis, string objectName);
    internal double EvaluateChartAxisIntervalExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisIntervalTypeExpression(ChartAxis chartAxis, string objectName);
    internal double EvaluateChartAxisIntervalOffsetExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisIntervalOffsetTypeExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisMarksAlwaysAtPlotEdgeExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisReverseExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisLocationExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisInterlacedExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisInterlacedColorExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisLogScaleExpression(ChartAxis chartAxis, string objectName);
    internal double EvaluateChartAxisLogBaseExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisHideLabelsExpression(ChartAxis chartAxis, string objectName);
    internal double EvaluateChartAxisAngleExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisArrowsExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisPreventFontShrinkExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisPreventFontGrowExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisPreventLabelOffsetExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisPreventWordWrapExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisAllowLabelRotationExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisIncludeZeroExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisLabelsAutoFitDisabledExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisMinFontSizeExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisMaxFontSizeExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisOffsetLabelsExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisHideEndLabelsExpression(ChartAxis chartAxis, string objectName);
    internal bool EvaluateChartAxisVariableAutoIntervalExpression(ChartAxis chartAxis, string objectName);
    internal double EvaluateChartAxisLabelIntervalExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisLabelIntervalTypeExpression(ChartAxis chartAxis, string objectName);
    internal double EvaluateChartAxisLabelIntervalOffsetsExpression(ChartAxis chartAxis, string objectName);
    internal string EvaluateChartAxisLabelIntervalOffsetTypeExpression(ChartAxis chartAxis, string objectName);
    internal object EvaluateChartAxisValueExpression(ChartAxisExprHost exprHost, ExpressionInfo expression, string objectName, string propertyName, ExpressionType type);
    internal bool EvaluateChartAreaEquallySizedAxesFontExpression(ChartArea chartArea, string objectName, string propertyName);
    internal string EvaluateChartAreaAlignOrientationExpression(ChartArea chartArea, string objectName, string propertyName);
    internal bool EvaluateChartAreaHiddenExpression(ChartArea chartArea, string objectName, string propertyName);
    internal bool EvaluateChartAlignTypeAxesViewExpression(ChartAlignType chartAlignType, string objectName, string propertyName);
    internal bool EvaluateChartAlignTypeCursorExpression(ChartAlignType chartAlignType, string objectName, string propertyName);
    internal bool EvaluateChartAlignTypePositionExpression(ChartAlignType chartAlignType, string objectName, string propertyName);
    internal bool EvaluateChartAlignTypeInnerPlotPositionExpression(ChartAlignType chartAlignType, string objectName, string propertyName);
    internal string EvaluateChartGridLinesEnabledExpression(ChartGridLines chartGridLines, string objectName);
    internal double EvaluateChartGridLinesIntervalExpression(ChartGridLines chartGridLines, string objectName, string propertyName);
    internal string EvaluateChartGridLinesIntervalTypeExpression(ChartGridLines chartGridLines, string objectName, string propertyName);
    internal double EvaluateChartGridLinesIntervalOffsetExpression(ChartGridLines chartGridLines, string objectName, string propertyName);
    internal string EvaluateChartGridLinesIntervalOffsetTypeExpression(ChartGridLines chartGridLines, string objectName, string propertyName);
    internal bool EvaluateChartThreeDPropertiesEnabledExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal string EvaluateChartThreeDPropertiesProjectionModeExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal int EvaluateChartThreeDPropertiesRotationExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal int EvaluateChartThreeDPropertiesInclinationExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal int EvaluateChartThreeDPropertiesPerspectiveExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal int EvaluateChartThreeDPropertiesDepthRatioExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal string EvaluateChartThreeDPropertiesShadingExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal int EvaluateChartThreeDPropertiesGapDepthExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal int EvaluateChartThreeDPropertiesWallThicknessExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal bool EvaluateChartThreeDPropertiesClusteredExpression(ChartThreeDProperties chartThreeDProperties, string objectName, string propertyName);
    internal string EvaluateStyleBorderColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal BorderStyles EvaluateStyleBorderStyle(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal BorderStyles EvaluateStyleBorderStyleLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal BorderStyles EvaluateStyleBorderStyleRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal BorderStyles EvaluateStyleBorderStyleTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal BorderStyles EvaluateStyleBorderStyleBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidth(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundGradientEndColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal BackgroundGradients EvaluateStyleBackgroundGradientType(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal BackgroundRepeatTypes EvaluateStyleBackgroundRepeat(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal FontStyles EvaluateStyleFontStyle(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFontFamily(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFontSize(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal FontWeights EvaluateStyleFontWeight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFormat(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal TextDecorations EvaluateStyleTextDecoration(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal TextAlignments EvaluateStyleTextAlign(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal VerticalAlignments EvaluateStyleVerticalAlign(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleLineHeight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal Directions EvaluateStyleDirection(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal WritingModes EvaluateStyleWritingMode(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleLanguage(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal UnicodeBiDiTypes EvaluateStyleUnicodeBiDi(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal Calendars EvaluateStyleCalendar(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleNumeralLanguage(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal object EvaluateStyleNumeralVariant(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal object EvaluateTransparentColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal object EvaluatePosition(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundUrlImageValue(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundEmbeddedImageValue(Style style, ExpressionInfo expression, Dictionary`2<string, ImageInfo> embeddedImages, ObjectType objectType, string objectName);
    internal Byte[] EvaluateStyleBackgroundDatabaseImageValue(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundImageMIMEType(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleTextEffect(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleShadowColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleShadowOffset(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundHatchType(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateParagraphLeftIndentExpression(Paragraph paragraph);
    internal string EvaluateParagraphRightIndentExpression(Paragraph paragraph);
    internal string EvaluateParagraphHangingIndentExpression(Paragraph paragraph);
    internal string EvaluateParagraphSpaceBeforeExpression(Paragraph paragraph);
    internal string EvaluateParagraphSpaceAfterExpression(Paragraph paragraph);
    internal Nullable`1<int> EvaluateParagraphListLevelExpression(Paragraph paragraph);
    internal string EvaluateParagraphListStyleExpression(Paragraph paragraph);
    internal string EvaluateTextRunToolTipExpression(TextRun textRun);
    internal string EvaluateTextRunMarkupTypeExpression(TextRun textRun);
    internal VariantResult EvaluateTextRunValueExpression(TextRun textRun);
    private bool EvaluateSimpleExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private bool EvaluateSimpleExpression(ExpressionInfo expression, VariantResult& result);
    private bool EvaluateComplexExpression(ExpressionInfo expression, VariantResult& result, ReportObjectModelProxy exprHost);
    private void RegisterRuntimeWarning(Exception e, IErrorContext iErrorContext);
    private void RegisterRuntimeErrorInExpressionAndStop(VariantResult& result, Exception e);
    private void RegisterRuntimeErrorInExpression(VariantResult& result, Exception e);
    private void RegisterRuntimeErrorInExpression(VariantResult& result, Exception e, IErrorContext iErrorContext, bool isError);
    private bool EvaluateBooleanExpression(ExpressionInfo expression, bool canBeConstant, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private BooleanResult ProcessBooleanResult(VariantResult result);
    private BooleanResult ProcessBooleanResult(VariantResult result, bool stopOnError, ObjectType objectType, string objectName);
    private bool EvaluateBinaryExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private BinaryResult ProcessBinaryResult(VariantResult result);
    private StringResult ProcessAutocastStringResult(VariantResult result);
    private StringResult ProcessStringResult(VariantResult result);
    private StringResult ProcessStringResult(VariantResult result, bool autocast);
    private void ProcessLabelResult(VariantResult& result);
    private string ProcessVariantResultToString(VariantResult result, bool autocast, Boolean& errorOccured);
    internal static bool ProcessObjectToString(object value, bool autocast, String& output);
    private bool EvaluateIntegerExpression(ExpressionInfo expression, bool canBeConstant, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private IntegerResult ProcessIntegerResult(VariantResult result);
    private bool EvaluateIntegerOrFloatExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private FloatResult ProcessIntegerOrFloatResult(VariantResult result);
    private void ProcessVariantResult(ExpressionInfo expression, VariantResult& result);
    private void ProcessVariantResult(ExpressionInfo expression, VariantResult& result, bool isArrayAllowed);
    private void ProcessVariantOrBinaryResult(ExpressionInfo expression, VariantResult& result, IErrorContext iErrorContext, bool isAggregate);
    private ParameterValueResult ProcessParameterValueResult(ExpressionInfo expression, VariantResult result);
    private static Object[] GetAsObjectArray(VariantResult& result);
    private DataType GetDataType(object obj);
    private bool EvaluateNoConstantExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    internal static bool SetVariantType(VariantResult& result);
    internal static string ConvertToStringFallBack(object value);
    private void RegisterInvalidExpressionDataTypeWarning();
    internal int RecursiveLevel(string scope);
    internal void LoadCompiledCode(Report report, bool includeParameters, bool parametersOnly, ObjectModelImpl reportObjectModel, ReportRuntimeSetup runtimeSetup);
    internal void CustomCodeOnInit(Report report);
    private void ProcessLoadingExprHostException(Exception e, ProcessingErrorCode errorCode);
    internal void Close();
    public sealed virtual int get_ID();
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual void SetID(int id);
    internal string EvaluateBaseGaugeImageSourceExpression(BaseGaugeImage baseGaugeImage, string objectName);
    internal string EvaluateBaseGaugeImageStringValueExpression(BaseGaugeImage baseGaugeImage, string objectName, Boolean& errorOccurred);
    internal Byte[] EvaluateBaseGaugeImageBinaryValueExpression(BaseGaugeImage baseGaugeImage, string objectName, Boolean& errorOccurred);
    internal string EvaluateBaseGaugeImageMIMETypeExpression(BaseGaugeImage baseGaugeImage, string objectName);
    internal string EvaluateBaseGaugeImageTransparentColorExpression(BaseGaugeImage baseGaugeImage, string objectName);
    internal string EvaluateGaugeImageSourceExpression(GaugeImage gaugeImage, string objectName);
    internal VariantResult EvaluateGaugeImageValueExpression(GaugeImage gaugeImage, string objectName);
    internal string EvaluateGaugeImageTransparentColorExpression(GaugeImage gaugeImage, string objectName);
    internal string EvaluateCapImageHueColorExpression(CapImage capImage, string objectName);
    internal string EvaluateCapImageOffsetXExpression(CapImage capImage, string objectName);
    internal string EvaluateCapImageOffsetYExpression(CapImage capImage, string objectName);
    internal string EvaluateFrameImageHueColorExpression(FrameImage frameImage, string objectName);
    internal double EvaluateFrameImageTransparencyExpression(FrameImage frameImage, string objectName);
    internal bool EvaluateFrameImageClipImageExpression(FrameImage frameImage, string objectName);
    internal string EvaluateTopImageHueColorExpression(TopImage topImage, string objectName);
    internal string EvaluateBackFrameFrameStyleExpression(BackFrame backFrame, string objectName);
    internal string EvaluateBackFrameFrameShapeExpression(BackFrame backFrame, string objectName);
    internal double EvaluateBackFrameFrameWidthExpression(BackFrame backFrame, string objectName);
    internal string EvaluateBackFrameGlassEffectExpression(BackFrame backFrame, string objectName);
    internal string EvaluateGaugePanelAntiAliasingExpression(GaugePanel gaugePanel, string objectName);
    internal bool EvaluateGaugePanelAutoLayoutExpression(GaugePanel gaugePanel, string objectName);
    internal double EvaluateGaugePanelShadowIntensityExpression(GaugePanel gaugePanel, string objectName);
    internal string EvaluateGaugePanelTextAntiAliasingQualityExpression(GaugePanel gaugePanel, string objectName);
    internal double EvaluateGaugePanelItemTopExpression(GaugePanelItem gaugePanelItem, string objectName);
    internal double EvaluateGaugePanelItemLeftExpression(GaugePanelItem gaugePanelItem, string objectName);
    internal double EvaluateGaugePanelItemHeightExpression(GaugePanelItem gaugePanelItem, string objectName);
    internal double EvaluateGaugePanelItemWidthExpression(GaugePanelItem gaugePanelItem, string objectName);
    internal int EvaluateGaugePanelItemZIndexExpression(GaugePanelItem gaugePanelItem, string objectName);
    internal bool EvaluateGaugePanelItemHiddenExpression(GaugePanelItem gaugePanelItem, string objectName);
    internal string EvaluateGaugePanelItemToolTipExpression(GaugePanelItem gaugePanelItem, string objectName);
    internal string EvaluateGaugePointerBarStartExpression(GaugePointer gaugePointer, string objectName);
    internal double EvaluateGaugePointerDistanceFromScaleExpression(GaugePointer gaugePointer, string objectName);
    internal double EvaluateGaugePointerMarkerLengthExpression(GaugePointer gaugePointer, string objectName);
    internal string EvaluateGaugePointerMarkerStyleExpression(GaugePointer gaugePointer, string objectName);
    internal string EvaluateGaugePointerPlacementExpression(GaugePointer gaugePointer, string objectName);
    internal bool EvaluateGaugePointerSnappingEnabledExpression(GaugePointer gaugePointer, string objectName);
    internal double EvaluateGaugePointerSnappingIntervalExpression(GaugePointer gaugePointer, string objectName);
    internal string EvaluateGaugePointerToolTipExpression(GaugePointer gaugePointer, string objectName);
    internal bool EvaluateGaugePointerHiddenExpression(GaugePointer gaugePointer, string objectName);
    internal double EvaluateGaugePointerWidthExpression(GaugePointer gaugePointer, string objectName);
    internal double EvaluateGaugeScaleIntervalExpression(GaugeScale gaugeScale, string objectName);
    internal double EvaluateGaugeScaleIntervalOffsetExpression(GaugeScale gaugeScale, string objectName);
    internal bool EvaluateGaugeScaleLogarithmicExpression(GaugeScale gaugeScale, string objectName);
    internal double EvaluateGaugeScaleLogarithmicBaseExpression(GaugeScale gaugeScale, string objectName);
    internal double EvaluateGaugeScaleMultiplierExpression(GaugeScale gaugeScale, string objectName);
    internal bool EvaluateGaugeScaleReversedExpression(GaugeScale gaugeScale, string objectName);
    internal bool EvaluateGaugeScaleTickMarksOnTopExpression(GaugeScale gaugeScale, string objectName);
    internal string EvaluateGaugeScaleToolTipExpression(GaugeScale gaugeScale, string objectName);
    internal bool EvaluateGaugeScaleHiddenExpression(GaugeScale gaugeScale, string objectName);
    internal double EvaluateGaugeScaleWidthExpression(GaugeScale gaugeScale, string objectName);
    internal double EvaluateGaugeTickMarksIntervalExpression(GaugeTickMarks gaugeTickMarks, string objectName);
    internal double EvaluateGaugeTickMarksIntervalOffsetExpression(GaugeTickMarks gaugeTickMarks, string objectName);
    internal string EvaluateLinearGaugeOrientationExpression(LinearGauge linearGauge, string objectName);
    internal string EvaluateLinearPointerTypeExpression(LinearPointer linearPointer, string objectName);
    internal double EvaluateLinearScaleStartMarginExpression(LinearScale linearScale, string objectName);
    internal double EvaluateLinearScaleEndMarginExpression(LinearScale linearScale, string objectName);
    internal double EvaluateLinearScalePositionExpression(LinearScale linearScale, string objectName);
    internal string EvaluatePinLabelTextExpression(PinLabel pinLabel, string objectName);
    internal bool EvaluatePinLabelAllowUpsideDownExpression(PinLabel pinLabel, string objectName);
    internal double EvaluatePinLabelDistanceFromScaleExpression(PinLabel pinLabel, string objectName);
    internal double EvaluatePinLabelFontAngleExpression(PinLabel pinLabel, string objectName);
    internal string EvaluatePinLabelPlacementExpression(PinLabel pinLabel, string objectName);
    internal bool EvaluatePinLabelRotateLabelExpression(PinLabel pinLabel, string objectName);
    internal bool EvaluatePinLabelUseFontPercentExpression(PinLabel pinLabel, string objectName);
    internal bool EvaluatePointerCapOnTopExpression(PointerCap pointerCap, string objectName);
    internal bool EvaluatePointerCapReflectionExpression(PointerCap pointerCap, string objectName);
    internal string EvaluatePointerCapCapStyleExpression(PointerCap pointerCap, string objectName);
    internal bool EvaluatePointerCapHiddenExpression(PointerCap pointerCap, string objectName);
    internal double EvaluatePointerCapWidthExpression(PointerCap pointerCap, string objectName);
    internal string EvaluatePointerImageHueColorExpression(PointerImage pointerImage, string objectName);
    internal double EvaluatePointerImageTransparencyExpression(PointerImage pointerImage, string objectName);
    internal string EvaluatePointerImageOffsetXExpression(PointerImage pointerImage, string objectName);
    internal string EvaluatePointerImageOffsetYExpression(PointerImage pointerImage, string objectName);
    internal double EvaluateRadialGaugePivotXExpression(RadialGauge radialGauge, string objectName);
    internal double EvaluateRadialGaugePivotYExpression(RadialGauge radialGauge, string objectName);
    internal string EvaluateRadialPointerTypeExpression(RadialPointer radialPointer, string objectName);
    internal string EvaluateRadialPointerNeedleStyleExpression(RadialPointer radialPointer, string objectName);
    internal double EvaluateRadialScaleRadiusExpression(RadialScale radialScale, string objectName);
    internal double EvaluateRadialScaleStartAngleExpression(RadialScale radialScale, string objectName);
    internal double EvaluateRadialScaleSweepAngleExpression(RadialScale radialScale, string objectName);
    internal double EvaluateScaleLabelsIntervalExpression(ScaleLabels scaleLabels, string objectName);
    internal double EvaluateScaleLabelsIntervalOffsetExpression(ScaleLabels scaleLabels, string objectName);
    internal bool EvaluateScaleLabelsAllowUpsideDownExpression(ScaleLabels scaleLabels, string objectName);
    internal double EvaluateScaleLabelsDistanceFromScaleExpression(ScaleLabels scaleLabels, string objectName);
    internal double EvaluateScaleLabelsFontAngleExpression(ScaleLabels scaleLabels, string objectName);
    internal string EvaluateScaleLabelsPlacementExpression(ScaleLabels scaleLabels, string objectName);
    internal bool EvaluateScaleLabelsRotateLabelsExpression(ScaleLabels scaleLabels, string objectName);
    internal bool EvaluateScaleLabelsShowEndLabelsExpression(ScaleLabels scaleLabels, string objectName);
    internal bool EvaluateScaleLabelsHiddenExpression(ScaleLabels scaleLabels, string objectName);
    internal bool EvaluateScaleLabelsUseFontPercentExpression(ScaleLabels scaleLabels, string objectName);
    internal double EvaluateScalePinLocationExpression(ScalePin scalePin, string objectName);
    internal bool EvaluateScalePinEnableExpression(ScalePin scalePin, string objectName);
    internal double EvaluateScaleRangeDistanceFromScaleExpression(ScaleRange scaleRange, string objectName);
    internal double EvaluateScaleRangeStartWidthExpression(ScaleRange scaleRange, string objectName);
    internal double EvaluateScaleRangeEndWidthExpression(ScaleRange scaleRange, string objectName);
    internal string EvaluateScaleRangeInRangeBarPointerColorExpression(ScaleRange scaleRange, string objectName);
    internal string EvaluateScaleRangeInRangeLabelColorExpression(ScaleRange scaleRange, string objectName);
    internal string EvaluateScaleRangeInRangeTickMarksColorExpression(ScaleRange scaleRange, string objectName);
    internal string EvaluateScaleRangePlacementExpression(ScaleRange scaleRange, string objectName);
    internal string EvaluateScaleRangeToolTipExpression(ScaleRange scaleRange, string objectName);
    internal bool EvaluateScaleRangeHiddenExpression(ScaleRange scaleRange, string objectName);
    internal string EvaluateScaleRangeBackgroundGradientTypeExpression(ScaleRange scaleRange, string objectName);
    internal double EvaluateThermometerBulbOffsetExpression(Thermometer thermometer, string objectName);
    internal double EvaluateThermometerBulbSizeExpression(Thermometer thermometer, string objectName);
    internal string EvaluateThermometerThermometerStyleExpression(Thermometer thermometer, string objectName);
    internal double EvaluateTickMarkStyleDistanceFromScaleExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal string EvaluateTickMarkStylePlacementExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal bool EvaluateTickMarkStyleEnableGradientExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal double EvaluateTickMarkStyleGradientDensityExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal double EvaluateTickMarkStyleLengthExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal double EvaluateTickMarkStyleWidthExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal string EvaluateTickMarkStyleShapeExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal bool EvaluateTickMarkStyleHiddenExpression(TickMarkStyle tickMarkStyle, string objectName);
    internal VariantResult EvaluateCustomLabelTextExpression(CustomLabel customLabel, string objectName);
    internal bool EvaluateCustomLabelAllowUpsideDownExpression(CustomLabel customLabel, string objectName);
    internal double EvaluateCustomLabelDistanceFromScaleExpression(CustomLabel customLabel, string objectName);
    internal double EvaluateCustomLabelFontAngleExpression(CustomLabel customLabel, string objectName);
    internal string EvaluateCustomLabelPlacementExpression(CustomLabel customLabel, string objectName);
    internal bool EvaluateCustomLabelRotateLabelExpression(CustomLabel customLabel, string objectName);
    internal double EvaluateCustomLabelValueExpression(CustomLabel customLabel, string objectName);
    internal bool EvaluateCustomLabelHiddenExpression(CustomLabel customLabel, string objectName);
    internal bool EvaluateCustomLabelUseFontPercentExpression(CustomLabel customLabel, string objectName);
    internal bool EvaluateGaugeClipContentExpression(Gauge gauge, string objectName);
    internal double EvaluateGaugeAspectRatioExpression(Gauge gauge, string objectName);
    internal VariantResult EvaluateGaugeInputValueValueExpression(GaugeInputValue gaugeInputValue, string objectName);
    internal string EvaluateGaugeInputValueFormulaExpression(GaugeInputValue gaugeInputValue, string objectName);
    internal double EvaluateGaugeInputValueMinPercentExpression(GaugeInputValue gaugeInputValue, string objectName);
    internal double EvaluateGaugeInputValueMaxPercentExpression(GaugeInputValue gaugeInputValue, string objectName);
    internal double EvaluateGaugeInputValueMultiplierExpression(GaugeInputValue gaugeInputValue, string objectName);
    internal double EvaluateGaugeInputValueAddConstantExpression(GaugeInputValue gaugeInputValue, string objectName);
    internal VariantResult EvaluateGaugeLabelTextExpression(GaugeLabel gaugeLabel, string objectName);
    internal double EvaluateGaugeLabelAngleExpression(GaugeLabel gaugeLabel, string objectName);
    internal string EvaluateGaugeLabelResizeModeExpression(GaugeLabel gaugeLabel, string objectName);
    internal string EvaluateGaugeLabelTextShadowOffsetExpression(GaugeLabel gaugeLabel, string objectName);
    internal bool EvaluateGaugeLabelUseFontPercentExpression(GaugeLabel gaugeLabel, string objectName);
}
internal class Microsoft.ReportingServices.RdlExpressions.StringResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal string Value;
}
internal class Microsoft.ReportingServices.RdlExpressions.VariantResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal string ExceptionMessage;
    internal object Value;
    internal TypeCode TypeCode;
    internal VariantResult(bool errorOccurred, object v);
}
internal class Microsoft.ReportingServices.RdlExpressions.VBExpressionParser : ExpressionParser {
    private static string RunningValue;
    private static string RowNumber;
    private static string Previous;
    private static string Star;
    private ReportRegularExpressions m_regexes;
    private int m_numberOfAggregates;
    private int m_numberOfRunningValues;
    private bool m_bodyRefersToReportItems;
    private bool m_pageSectionRefersToReportItems;
    private ExpressionContext m_context;
    private bool m_previousAggregateUsed;
    internal bool BodyRefersToReportItems { get; }
    internal bool PageSectionRefersToReportItems { get; }
    internal int NumberOfAggregates { get; }
    internal int LastID { get; }
    internal bool PreviousAggregateUsed { get; }
    internal VBExpressionParser(ErrorContext errorContext);
    internal virtual CodeDomProvider GetCodeCompiler();
    internal virtual string GetCompilerArguments();
    internal virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, EvaluationMode evaluationMode);
    internal virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, DetectionFlags flag, EvaluationMode evaluationMode, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    internal virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, EvaluationMode evaluationMode, Boolean& userCollectionReferenced);
    internal virtual void ConvertField2ComplexExpr(ExpressionInfo& info);
    internal virtual bool get_BodyRefersToReportItems();
    internal virtual bool get_PageSectionRefersToReportItems();
    internal virtual int get_NumberOfAggregates();
    internal virtual int get_LastID();
    internal virtual bool get_PreviousAggregateUsed();
    private ExpressionInfo Lex(string expression, ExpressionContext context, EvaluationMode evaluationMode, String& vbExpression);
    private string GetReferencedReportParameters(string expression);
    private bool DetectUserReference(string expression);
    private void VBLex(string expression, bool isParameter, GrammarFlags grammarFlags, ExpressionInfo expressionInfo);
    private void EnforceRestrictions(String& expression, bool isParameter, GrammarFlags grammarFlags, ExpressionInfo expressionInfo);
    private void GetMeDotValueReferences(string strTransformedExpression, ExpressionInfo expressionInfo);
    private void GetMeDotValueReferences(ExpressionInfo expressionInfo);
    private void GetMeDotValueReferences(string expression, ExpressionInfo expressionInfo, bool inTransformedExpression);
    private void GetReferencedReportItemNames(ExpressionInfo expressionInfo);
    private void GetReferencedReportItemNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedReportItemNames(string expression, ExpressionInfo expressionInfo, bool inTransformedExpression);
    private void GetReferencedVariableNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedFieldNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedParameterNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedDataSetNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedDataSourceNames(string expression, ExpressionInfo expressionInfo);
    private bool Detected(string expression, Regex detectionRegex);
    private int NumberOfTimesDetected(string expression, Regex detectionRegex);
    private void RemoveLineTerminators(String& expression, Regex detectionRegex);
    private void GetRunningValue(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, RunningValueInfo& runningValue);
    private void GetPreviousAggregate(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, RunningValueInfo& runningValue);
    private bool HasInScopeOrLevel(string expression);
    private void GetRowNumber(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, RunningValueInfo& rowNumber);
    private string GetScope(string expression, bool allowNothing);
    private bool IsRecursive(string flag);
    private void GetAggregate(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, DataAggregateInfo& aggregate);
    private ExpressionInfo GetParameterExpression(string parameterExpression, GrammarFlags grammarFlags);
    private void GetArguments(int currentPos, string expression, Int32& newPos, List`1& arguments);
    private string CreateAggregateID();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.AccentSensitivities : Enum {
    public int value__;
    public static AccentSensitivities Auto;
    public static AccentSensitivities True;
    public static AccentSensitivities False;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Action : ReportObject {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Hyperlink { get; public set; }
    public Drillthrough Drillthrough { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression BookmarkLink { get; public set; }
    public Action(IPropertyStore propertyStore);
    public ReportExpression get_Hyperlink();
    public void set_Hyperlink(ReportExpression value);
    public Drillthrough get_Drillthrough();
    public void set_Drillthrough(Drillthrough value);
    public ReportExpression get_BookmarkLink();
    public void set_BookmarkLink(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ActionInfo : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Action>")]
public IList`1<Action> Actions { get; public set; }
    public ActionInfo(IPropertyStore propertyStore);
    public IList`1<Action> get_Actions();
    public void set_Actions(IList`1<Action> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.AltReportItem : ReportObject {
    public ReportItem ReportItem { get; public set; }
    public AltReportItem(IPropertyStore propertyStore);
    public ReportItem get_ReportItem();
    public void set_ReportItem(ReportItem value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.AntiAliasingTypes : Enum {
    public int value__;
    public static AntiAliasingTypes All;
    public static AntiAliasingTypes None;
    public static AntiAliasingTypes Text;
    public static AntiAliasingTypes Graphics;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ArgumentConstraintException : ArgumentException {
    private object m_component;
    private string m_property;
    private object m_value;
    private object m_constraint;
    public object Component { get; }
    public string Property { get; }
    public object Value { get; }
    public object Constraint { get; }
    public ArgumentConstraintException(object component, string property, object value, object constraint, string message);
    protected ArgumentConstraintException(SerializationInfo info, StreamingContext context);
    public object get_Component();
    public string get_Property();
    public object get_Value();
    public object get_Constraint();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ArgumentTooLargeException : ArgumentConstraintException {
    public ArgumentTooLargeException(object component, string property, object value, object maximum);
    protected ArgumentTooLargeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ArgumentTooSmallException : ArgumentConstraintException {
    public ArgumentTooSmallException(object component, string property, object value, object minimum);
    protected ArgumentTooSmallException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.RdlObjectModel.BackFrame : ReportObject {
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.FrameStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<FrameStyles> FrameStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.FrameShapes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<FrameShapes> FrameShape { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
[ValidValuesAttribute("0", "50")]
public ReportExpression`1<double> FrameWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.GlassEffects", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<GlassEffects> GlassEffect { get; public set; }
    public FrameBackground FrameBackground { get; public set; }
    public FrameImage FrameImage { get; public set; }
    public BackFrame(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<FrameStyles> get_FrameStyle();
    public void set_FrameStyle(ReportExpression`1<FrameStyles> value);
    public ReportExpression`1<FrameShapes> get_FrameShape();
    public void set_FrameShape(ReportExpression`1<FrameShapes> value);
    public ReportExpression`1<double> get_FrameWidth();
    public void set_FrameWidth(ReportExpression`1<double> value);
    public ReportExpression`1<GlassEffects> get_GlassEffect();
    public void set_GlassEffect(ReportExpression`1<GlassEffects> value);
    public FrameBackground get_FrameBackground();
    public void set_FrameBackground(FrameBackground value);
    public FrameImage get_FrameImage();
    public void set_FrameImage(FrameImage value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.BackgroundGradients : Enum {
    public int value__;
    public static BackgroundGradients Default;
    public static BackgroundGradients None;
    public static BackgroundGradients LeftRight;
    public static BackgroundGradients TopBottom;
    public static BackgroundGradients Center;
    public static BackgroundGradients DiagonalLeft;
    public static BackgroundGradients DiagonalRight;
    public static BackgroundGradients HorizontalCenter;
    public static BackgroundGradients VerticalCenter;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.BackgroundHatchTypes : Enum {
    public int value__;
    public static BackgroundHatchTypes Default;
    public static BackgroundHatchTypes None;
    public static BackgroundHatchTypes BackwardDiagonal;
    public static BackgroundHatchTypes Cross;
    public static BackgroundHatchTypes DarkDownwardDiagonal;
    public static BackgroundHatchTypes DarkHorizontal;
    public static BackgroundHatchTypes DarkUpwardDiagonal;
    public static BackgroundHatchTypes DarkVertical;
    public static BackgroundHatchTypes DashedDownwardDiagonal;
    public static BackgroundHatchTypes DashedHorizontal;
    public static BackgroundHatchTypes DashedUpwardDiagonal;
    public static BackgroundHatchTypes DashedVertical;
    public static BackgroundHatchTypes DiagonalBrick;
    public static BackgroundHatchTypes DiagonalCross;
    public static BackgroundHatchTypes Divot;
    public static BackgroundHatchTypes DottedDiamond;
    public static BackgroundHatchTypes DottedGrid;
    public static BackgroundHatchTypes ForwardDiagonal;
    public static BackgroundHatchTypes Horizontal;
    public static BackgroundHatchTypes HorizontalBrick;
    public static BackgroundHatchTypes LargeCheckerBoard;
    public static BackgroundHatchTypes LargeConfetti;
    public static BackgroundHatchTypes LargeGrid;
    public static BackgroundHatchTypes LightDownwardDiagonal;
    public static BackgroundHatchTypes LightHorizontal;
    public static BackgroundHatchTypes LightUpwardDiagonal;
    public static BackgroundHatchTypes LightVertical;
    public static BackgroundHatchTypes NarrowHorizontal;
    public static BackgroundHatchTypes NarrowVertical;
    public static BackgroundHatchTypes OutlinedDiamond;
    public static BackgroundHatchTypes Percent05;
    public static BackgroundHatchTypes Percent10;
    public static BackgroundHatchTypes Percent20;
    public static BackgroundHatchTypes Percent25;
    public static BackgroundHatchTypes Percent30;
    public static BackgroundHatchTypes Percent40;
    public static BackgroundHatchTypes Percent50;
    public static BackgroundHatchTypes Percent60;
    public static BackgroundHatchTypes Percent70;
    public static BackgroundHatchTypes Percent75;
    public static BackgroundHatchTypes Percent80;
    public static BackgroundHatchTypes Percent90;
    public static BackgroundHatchTypes Plaid;
    public static BackgroundHatchTypes Shingle;
    public static BackgroundHatchTypes SmallCheckerBoard;
    public static BackgroundHatchTypes SmallConfetti;
    public static BackgroundHatchTypes SmallGrid;
    public static BackgroundHatchTypes SolidDiamond;
    public static BackgroundHatchTypes Sphere;
    public static BackgroundHatchTypes Trellis;
    public static BackgroundHatchTypes Vertical;
    public static BackgroundHatchTypes Wave;
    public static BackgroundHatchTypes Weave;
    public static BackgroundHatchTypes WideDownwardDiagonal;
    public static BackgroundHatchTypes WideUpwardDiagonal;
    public static BackgroundHatchTypes ZigZag;
}
internal class Microsoft.ReportingServices.RdlObjectModel.BackgroundImage : ReportObject {
    public SourceType Source { get; public set; }
    public ReportExpression Value { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression MIMEType { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.BackgroundRepeatTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<BackgroundRepeatTypes> BackgroundRepeat { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> TransparentColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.BackgroundPositions", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<BackgroundPositions> Position { get; public set; }
    public BackgroundImage(IPropertyStore propertyStore);
    public SourceType get_Source();
    public void set_Source(SourceType value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ReportExpression get_MIMEType();
    public void set_MIMEType(ReportExpression value);
    public ReportExpression`1<BackgroundRepeatTypes> get_BackgroundRepeat();
    public void set_BackgroundRepeat(ReportExpression`1<BackgroundRepeatTypes> value);
    public ReportExpression`1<ReportColor> get_TransparentColor();
    public void set_TransparentColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<BackgroundPositions> get_Position();
    public void set_Position(ReportExpression`1<BackgroundPositions> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.BackgroundPositions : Enum {
    public int value__;
    public static BackgroundPositions Default;
    public static BackgroundPositions Top;
    public static BackgroundPositions TopLeft;
    public static BackgroundPositions TopRight;
    public static BackgroundPositions Left;
    public static BackgroundPositions Center;
    public static BackgroundPositions Right;
    public static BackgroundPositions BottomRight;
    public static BackgroundPositions Bottom;
    public static BackgroundPositions BottomLeft;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.BackgroundRepeatTypes : Enum {
    public int value__;
    public static BackgroundRepeatTypes Default;
    public static BackgroundRepeatTypes Repeat;
    public static BackgroundRepeatTypes RepeatX;
    public static BackgroundRepeatTypes RepeatY;
    public static BackgroundRepeatTypes Fit;
    public static BackgroundRepeatTypes Clip;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.BarStartTypes : Enum {
    public int value__;
    public static BarStartTypes ScaleStart;
    public static BarStartTypes Zero;
}
internal class Microsoft.ReportingServices.RdlObjectModel.BaseGaugeImage : ReportObject {
    public ReportExpression`1<SourceType> Source { get; public set; }
    public ReportExpression Value { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression MIMEType { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> TransparentColor { get; public set; }
    public BaseGaugeImage(IPropertyStore propertyStore);
    public ReportExpression`1<SourceType> get_Source();
    public void set_Source(ReportExpression`1<SourceType> value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ReportExpression get_MIMEType();
    public void set_MIMEType(ReportExpression value);
    public ReportExpression`1<ReportColor> get_TransparentColor();
    public void set_TransparentColor(ReportExpression`1<ReportColor> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Body : ReportElement {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public ReportSize Height { get; public set; }
    public Body(IPropertyStore propertyStore);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Border : ReportObject {
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor", "DefaultBorderColor")]
public ReportExpression`1<ReportColor> Color { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.BorderStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<BorderStyles> Style { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultBorderWidth")]
public ReportExpression`1<ReportSize> Width { get; public set; }
    public Border(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_Color();
    public void set_Color(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<BorderStyles> get_Style();
    public void set_Style(ReportExpression`1<BorderStyles> value);
    public ReportExpression`1<ReportSize> get_Width();
    public void set_Width(ReportExpression`1<ReportSize> value);
    private sealed virtual override bool Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeThis();
    private sealed virtual override SerializationMethod Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeProperty(string property);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.BorderStyles : Enum {
    public int value__;
    public static BorderStyles Default;
    public static BorderStyles None;
    public static BorderStyles Dotted;
    public static BorderStyles Dashed;
    public static BorderStyles Solid;
    public static BorderStyles Double;
    public static BorderStyles DashDot;
    public static BorderStyles DashDotDot;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.BreakLocations : Enum {
    public int value__;
    public static BreakLocations Start;
    public static BreakLocations End;
    public static BreakLocations StartAndEnd;
    public static BreakLocations Between;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.Calendars : Enum {
    public int value__;
    public static Calendars Default;
    public static Calendars Gregorian;
    public static Calendars GregorianArabic;
    public static Calendars GregorianMiddleEastFrench;
    public static Calendars GregorianTransliteratedEnglish;
    public static Calendars GregorianTransliteratedFrench;
    public static Calendars GregorianUSEnglish;
    public static Calendars Hebrew;
    public static Calendars Hijri;
    public static Calendars Japanese;
    public static Calendars Korean;
    public static Calendars Taiwan;
    public static Calendars ThaiBuddhist;
}
internal class Microsoft.ReportingServices.RdlObjectModel.CapImage : BaseGaugeImage {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> HueColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> OffsetX { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> OffsetY { get; public set; }
    public CapImage(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_HueColor();
    public void set_HueColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportSize> get_OffsetX();
    public void set_OffsetX(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_OffsetY();
    public void set_OffsetY(ReportExpression`1<ReportSize> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.CapStyles : Enum {
    public int value__;
    public static CapStyles RoundedDark;
    public static CapStyles Rounded;
    public static CapStyles RoundedLight;
    public static CapStyles RoundedWithAdditionalTop;
    public static CapStyles RoundedWithWideIndentation;
    public static CapStyles FlattenedWithIndentation;
    public static CapStyles FlattenedWithWideIndentation;
    public static CapStyles RoundedGlossyWithIndentation;
    public static CapStyles RoundedWithIndentation;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.CaseSensitivities : Enum {
    public int value__;
    public static CaseSensitivities Auto;
    public static CaseSensitivities True;
    public static CaseSensitivities False;
}
internal class Microsoft.ReportingServices.RdlObjectModel.CellContents : ReportObject {
    public ReportItem ReportItem { get; public set; }
    [DefaultValueAttribute("1")]
[ValidValuesAttribute("1", "2147483647")]
public int ColSpan { get; public set; }
    [DefaultValueAttribute("1")]
[ValidValuesAttribute("1", "2147483647")]
public int RowSpan { get; public set; }
    public CellContents(IPropertyStore propertyStore);
    public ReportItem get_ReportItem();
    public void set_ReportItem(ReportItem value);
    public int get_ColSpan();
    public void set_ColSpan(int value);
    public int get_RowSpan();
    public void set_RowSpan(int value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Chart : DataRegion {
    public ChartCategoryHierarchy ChartCategoryHierarchy { get; public set; }
    public ChartSeriesHierarchy ChartSeriesHierarchy { get; public set; }
    public ChartData ChartData { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartArea>")]
public IList`1<ChartArea> ChartAreas { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartLegend>")]
public IList`1<ChartLegend> ChartLegends { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartTitle>")]
public IList`1<ChartTitle> ChartTitles { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartPalettes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartPalettes> Palette { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportExpression`1<Microsoft.ReportingServices.RdlObjectModel.ReportColor>>")]
[XmlArrayItemAttribute("ChartCustomPaletteColor", "Microsoft.ReportingServices.RdlObjectModel.ReportExpression`1<Microsoft.ReportingServices.RdlObjectModel.ReportColor>")]
public IList`1<ReportExpression`1<ReportColor>> ChartCustomPaletteColors { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartPaletteHatchBehaviorTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartPaletteHatchBehaviorTypes> PaletteHatchBehavior { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> DynamicHeight { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> DynamicWidth { get; public set; }
    public ChartBorderSkin ChartBorderSkin { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartCodeParameter>")]
public IList`1<ChartCodeParameter> ChartCodeParameters { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartAnnotation>")]
public IList`1<ChartAnnotation> ChartAnnotations { get; public set; }
    public ChartTitle ChartNoDataMessage { get; public set; }
    public Chart(IPropertyStore propertyStore);
    public ChartCategoryHierarchy get_ChartCategoryHierarchy();
    public void set_ChartCategoryHierarchy(ChartCategoryHierarchy value);
    public ChartSeriesHierarchy get_ChartSeriesHierarchy();
    public void set_ChartSeriesHierarchy(ChartSeriesHierarchy value);
    public ChartData get_ChartData();
    public void set_ChartData(ChartData value);
    public IList`1<ChartArea> get_ChartAreas();
    public void set_ChartAreas(IList`1<ChartArea> value);
    public IList`1<ChartLegend> get_ChartLegends();
    public void set_ChartLegends(IList`1<ChartLegend> value);
    public IList`1<ChartTitle> get_ChartTitles();
    public void set_ChartTitles(IList`1<ChartTitle> value);
    public ReportExpression`1<ChartPalettes> get_Palette();
    public void set_Palette(ReportExpression`1<ChartPalettes> value);
    public IList`1<ReportExpression`1<ReportColor>> get_ChartCustomPaletteColors();
    public void set_ChartCustomPaletteColors(IList`1<ReportExpression`1<ReportColor>> value);
    public ReportExpression`1<ChartPaletteHatchBehaviorTypes> get_PaletteHatchBehavior();
    public void set_PaletteHatchBehavior(ReportExpression`1<ChartPaletteHatchBehaviorTypes> value);
    public ReportExpression`1<ReportSize> get_DynamicHeight();
    public void set_DynamicHeight(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_DynamicWidth();
    public void set_DynamicWidth(ReportExpression`1<ReportSize> value);
    public ChartBorderSkin get_ChartBorderSkin();
    public void set_ChartBorderSkin(ChartBorderSkin value);
    public IList`1<ChartCodeParameter> get_ChartCodeParameters();
    public void set_ChartCodeParameters(IList`1<ChartCodeParameter> value);
    public IList`1<ChartAnnotation> get_ChartAnnotations();
    public void set_ChartAnnotations(IList`1<ChartAnnotation> value);
    public ChartTitle get_ChartNoDataMessage();
    public void set_ChartNoDataMessage(ChartTitle value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartAlignOrientations : Enum {
    public int value__;
    public static ChartAlignOrientations None;
    public static ChartAlignOrientations Vertical;
    public static ChartAlignOrientations Horizontal;
    public static ChartAlignOrientations All;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartAlignType : ReportObject {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> AxesView { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Cursor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Position { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> InnerPlotPosition { get; public set; }
    public ChartAlignType(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_AxesView();
    public void set_AxesView(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Cursor();
    public void set_Cursor(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Position();
    public void set_Position(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_InnerPlotPosition();
    public void set_InnerPlotPosition(ReportExpression`1<bool> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartAllowOutSidePlotAreaTypes : Enum {
    public int value__;
    public static ChartAllowOutSidePlotAreaTypes Partial;
    public static ChartAllowOutSidePlotAreaTypes True;
    public static ChartAllowOutSidePlotAreaTypes False;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartAnchorAlignments : Enum {
    public int value__;
    public static ChartAnchorAlignments Center;
    public static ChartAnchorAlignments Top;
    public static ChartAnchorAlignments TopLeft;
    public static ChartAnchorAlignments TopRight;
    public static ChartAnchorAlignments Left;
    public static ChartAnchorAlignments Right;
    public static ChartAnchorAlignments BottomRight;
    public static ChartAnchorAlignments Bottom;
    public static ChartAnchorAlignments BottomLeft;
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.ChartAnnotation : ReportObject {
    public string Name { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartAnnotationAlignments", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartAnnotationAlignments> Alignment { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartAnchorAlignments", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartAnchorAlignments> AnchorAlignment { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> AnchorOffsetX { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> AnchorOffsetY { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> AnchorX { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> AnchorY { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression CategoryAxisName { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ValueAxisName { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ClipToChartArea { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> Height { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> RelativeSize { get; public set; }
    public ChartSmartLabel ChartSmartLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Visible { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> Width { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> X { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> Y { get; public set; }
    public ChartAnnotation(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<ChartAnnotationAlignments> get_Alignment();
    public void set_Alignment(ReportExpression`1<ChartAnnotationAlignments> value);
    public ReportExpression`1<ChartAnchorAlignments> get_AnchorAlignment();
    public void set_AnchorAlignment(ReportExpression`1<ChartAnchorAlignments> value);
    public ReportExpression`1<ReportSize> get_AnchorOffsetX();
    public void set_AnchorOffsetX(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_AnchorOffsetY();
    public void set_AnchorOffsetY(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_AnchorX();
    public void set_AnchorX(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_AnchorY();
    public void set_AnchorY(ReportExpression`1<ReportSize> value);
    public ReportExpression get_CategoryAxisName();
    public void set_CategoryAxisName(ReportExpression value);
    public ReportExpression get_ValueAxisName();
    public void set_ValueAxisName(ReportExpression value);
    public ReportExpression get_ClipToChartArea();
    public void set_ClipToChartArea(ReportExpression value);
    public ReportExpression`1<ReportSize> get_Height();
    public void set_Height(ReportExpression`1<ReportSize> value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression`1<bool> get_RelativeSize();
    public void set_RelativeSize(ReportExpression`1<bool> value);
    public ChartSmartLabel get_ChartSmartLabel();
    public void set_ChartSmartLabel(ChartSmartLabel value);
    public ReportExpression`1<bool> get_Visible();
    public void set_Visible(ReportExpression`1<bool> value);
    public ReportExpression`1<ReportSize> get_Width();
    public void set_Width(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_X();
    public void set_X(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_Y();
    public void set_Y(ReportExpression`1<ReportSize> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartAnnotationAlignments : Enum {
    public int value__;
    public static ChartAnnotationAlignments Center;
    public static ChartAnnotationAlignments Top;
    public static ChartAnnotationAlignments TopLeft;
    public static ChartAnnotationAlignments TopRight;
    public static ChartAnnotationAlignments Left;
    public static ChartAnnotationAlignments Right;
    public static ChartAnnotationAlignments BottomRight;
    public static ChartAnnotationAlignments Bottom;
    public static ChartAnnotationAlignments BottomLeft;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartAnnotationGroup : ChartAnnotation {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartAnnotation>")]
public IList`1<ChartAnnotation> ChartAnnotations { get; public set; }
    public ChartAnnotationGroup(IPropertyStore propertyStore);
    public IList`1<ChartAnnotation> get_ChartAnnotations();
    public void set_ChartAnnotations(IList`1<ChartAnnotation> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartArea : ReportObject {
    public string Name { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartAxis>")]
public IList`1<ChartAxis> ChartCategoryAxes { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartAxis>")]
public IList`1<ChartAxis> ChartValueAxes { get; public set; }
    public ChartThreeDProperties ChartThreeDProperties { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartAlignOrientations", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartAlignOrientations> AlignOrientation { get; public set; }
    public ChartAlignType ChartAlignType { get; public set; }
    [DefaultValueAttribute("")]
public string AlignWithChartArea { get; public set; }
    public ChartElementPosition ChartElementPosition { get; public set; }
    public ChartElementPosition ChartInnerPlotPosition { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> EquallySizedAxesFont { get; public set; }
    public ChartArea(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public IList`1<ChartAxis> get_ChartCategoryAxes();
    public void set_ChartCategoryAxes(IList`1<ChartAxis> value);
    public IList`1<ChartAxis> get_ChartValueAxes();
    public void set_ChartValueAxes(IList`1<ChartAxis> value);
    public ChartThreeDProperties get_ChartThreeDProperties();
    public void set_ChartThreeDProperties(ChartThreeDProperties value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<ChartAlignOrientations> get_AlignOrientation();
    public void set_AlignOrientation(ReportExpression`1<ChartAlignOrientations> value);
    public ChartAlignType get_ChartAlignType();
    public void set_ChartAlignType(ChartAlignType value);
    public string get_AlignWithChartArea();
    public void set_AlignWithChartArea(string value);
    public ChartElementPosition get_ChartElementPosition();
    public void set_ChartElementPosition(ChartElementPosition value);
    public ChartElementPosition get_ChartInnerPlotPosition();
    public void set_ChartInnerPlotPosition(ChartElementPosition value);
    public ReportExpression`1<bool> get_EquallySizedAxesFont();
    public void set_EquallySizedAxesFont(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartArrowsTypes : Enum {
    public int value__;
    public static ChartArrowsTypes None;
    public static ChartArrowsTypes Triangle;
    public static ChartArrowsTypes SharpTriangle;
    public static ChartArrowsTypes Lines;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartAxis : ReportObject {
    public string Name { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartVisibleTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartVisibleTypes> Visible { get; public set; }
    public Style Style { get; public set; }
    public ChartAxisTitle ChartAxisTitle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartAxisMarginVisibleTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartAxisMarginVisibleTypes> Margin { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Interval { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalTypes> IntervalType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> IntervalOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalOffsetTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalOffsetTypes> IntervalOffsetType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> VariableAutoInterval { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> LabelInterval { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalTypes> LabelIntervalType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> LabelIntervalOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalOffsetTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalOffsetTypes> LabelIntervalOffsetType { get; public set; }
    public ChartGridLines ChartMajorGridLines { get; public set; }
    public ChartGridLines ChartMinorGridLines { get; public set; }
    public ChartTickMarks ChartMajorTickMarks { get; public set; }
    public ChartTickMarks ChartMinorTickMarks { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> MarksAlwaysAtPlotEdge { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Reverse { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression CrossAt { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartAxisLocations", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartAxisLocations> Location { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Interlaced { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> InterlacedColor { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartStripLine>")]
public IList`1<ChartStripLine> ChartStripLines { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartArrowsTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartArrowsTypes> Arrows { get; public set; }
    [DefaultValueAttribute("False")]
public bool Scalar { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Minimum { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Maximum { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> LogScale { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> LogBase { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> HideLabels { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Angle { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> PreventFontShrink { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> PreventFontGrow { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> PreventLabelOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> PreventWordWrap { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartLabelRotationTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartLabelRotationTypes> AllowLabelRotation { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> IncludeZero { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> LabelsAutoFitDisabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ReportSize> MinFontSize { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ReportSize> MaxFontSize { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> OffsetLabels { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> HideEndLabels { get; public set; }
    public ChartAxisScaleBreak ChartAxisScaleBreak { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    public ChartAxis(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression`1<ChartVisibleTypes> get_Visible();
    public void set_Visible(ReportExpression`1<ChartVisibleTypes> value);
    public Style get_Style();
    public void set_Style(Style value);
    public ChartAxisTitle get_ChartAxisTitle();
    public void set_ChartAxisTitle(ChartAxisTitle value);
    public ReportExpression`1<ChartAxisMarginVisibleTypes> get_Margin();
    public void set_Margin(ReportExpression`1<ChartAxisMarginVisibleTypes> value);
    public ReportExpression`1<double> get_Interval();
    public void set_Interval(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalTypes> get_IntervalType();
    public void set_IntervalType(ReportExpression`1<ChartIntervalTypes> value);
    public ReportExpression`1<double> get_IntervalOffset();
    public void set_IntervalOffset(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalOffsetTypes> get_IntervalOffsetType();
    public void set_IntervalOffsetType(ReportExpression`1<ChartIntervalOffsetTypes> value);
    public ReportExpression`1<bool> get_VariableAutoInterval();
    public void set_VariableAutoInterval(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_LabelInterval();
    public void set_LabelInterval(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalTypes> get_LabelIntervalType();
    public void set_LabelIntervalType(ReportExpression`1<ChartIntervalTypes> value);
    public ReportExpression`1<double> get_LabelIntervalOffset();
    public void set_LabelIntervalOffset(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalOffsetTypes> get_LabelIntervalOffsetType();
    public void set_LabelIntervalOffsetType(ReportExpression`1<ChartIntervalOffsetTypes> value);
    public ChartGridLines get_ChartMajorGridLines();
    public void set_ChartMajorGridLines(ChartGridLines value);
    public ChartGridLines get_ChartMinorGridLines();
    public void set_ChartMinorGridLines(ChartGridLines value);
    public ChartTickMarks get_ChartMajorTickMarks();
    public void set_ChartMajorTickMarks(ChartTickMarks value);
    public ChartTickMarks get_ChartMinorTickMarks();
    public void set_ChartMinorTickMarks(ChartTickMarks value);
    public ReportExpression`1<bool> get_MarksAlwaysAtPlotEdge();
    public void set_MarksAlwaysAtPlotEdge(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Reverse();
    public void set_Reverse(ReportExpression`1<bool> value);
    public ReportExpression get_CrossAt();
    public void set_CrossAt(ReportExpression value);
    public ReportExpression`1<ChartAxisLocations> get_Location();
    public void set_Location(ReportExpression`1<ChartAxisLocations> value);
    public ReportExpression`1<bool> get_Interlaced();
    public void set_Interlaced(ReportExpression`1<bool> value);
    public ReportExpression`1<ReportColor> get_InterlacedColor();
    public void set_InterlacedColor(ReportExpression`1<ReportColor> value);
    public IList`1<ChartStripLine> get_ChartStripLines();
    public void set_ChartStripLines(IList`1<ChartStripLine> value);
    public ReportExpression`1<ChartArrowsTypes> get_Arrows();
    public void set_Arrows(ReportExpression`1<ChartArrowsTypes> value);
    public bool get_Scalar();
    public void set_Scalar(bool value);
    public ReportExpression get_Minimum();
    public void set_Minimum(ReportExpression value);
    public ReportExpression get_Maximum();
    public void set_Maximum(ReportExpression value);
    public ReportExpression`1<bool> get_LogScale();
    public void set_LogScale(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_LogBase();
    public void set_LogBase(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_HideLabels();
    public void set_HideLabels(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_Angle();
    public void set_Angle(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_PreventFontShrink();
    public void set_PreventFontShrink(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_PreventFontGrow();
    public void set_PreventFontGrow(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_PreventLabelOffset();
    public void set_PreventLabelOffset(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_PreventWordWrap();
    public void set_PreventWordWrap(ReportExpression`1<bool> value);
    public ReportExpression`1<ChartLabelRotationTypes> get_AllowLabelRotation();
    public void set_AllowLabelRotation(ReportExpression`1<ChartLabelRotationTypes> value);
    public ReportExpression`1<bool> get_IncludeZero();
    public void set_IncludeZero(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_LabelsAutoFitDisabled();
    public void set_LabelsAutoFitDisabled(ReportExpression`1<bool> value);
    public ReportExpression`1<ReportSize> get_MinFontSize();
    public void set_MinFontSize(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_MaxFontSize();
    public void set_MaxFontSize(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<bool> get_OffsetLabels();
    public void set_OffsetLabels(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_HideEndLabels();
    public void set_HideEndLabels(ReportExpression`1<bool> value);
    public ChartAxisScaleBreak get_ChartAxisScaleBreak();
    public void set_ChartAxisScaleBreak(ChartAxisScaleBreak value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartAxisLocations : Enum {
    public int value__;
    public static ChartAxisLocations Default;
    public static ChartAxisLocations Opposite;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartAxisMarginVisibleTypes : Enum {
    public int value__;
    public static ChartAxisMarginVisibleTypes Auto;
    public static ChartAxisMarginVisibleTypes True;
    public static ChartAxisMarginVisibleTypes False;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartAxisScaleBreak : ReportObject {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Enabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartBreakLineTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartBreakLineTypes> BreakLineType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> CollapsibleSpaceThreshold { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> MaxNumberOfBreaks { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Spacing { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIncludeZeroTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIncludeZeroTypes> IncludeZero { get; public set; }
    public Style Style { get; public set; }
    public ChartAxisScaleBreak(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_Enabled();
    public void set_Enabled(ReportExpression`1<bool> value);
    public ReportExpression`1<ChartBreakLineTypes> get_BreakLineType();
    public void set_BreakLineType(ReportExpression`1<ChartBreakLineTypes> value);
    public ReportExpression`1<int> get_CollapsibleSpaceThreshold();
    public void set_CollapsibleSpaceThreshold(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_MaxNumberOfBreaks();
    public void set_MaxNumberOfBreaks(ReportExpression`1<int> value);
    public ReportExpression`1<double> get_Spacing();
    public void set_Spacing(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIncludeZeroTypes> get_IncludeZero();
    public void set_IncludeZero(ReportExpression`1<ChartIncludeZeroTypes> value);
    public Style get_Style();
    public void set_Style(Style value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartAxisTitle : ReportObject {
    public ReportExpression Caption { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartAxisTitlePositions", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartAxisTitlePositions> Position { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextOrientations", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextOrientations> TextOrientation { get; public set; }
    public ChartAxisTitle(IPropertyStore propertyStore);
    public ReportExpression get_Caption();
    public void set_Caption(ReportExpression value);
    public ReportExpression`1<ChartAxisTitlePositions> get_Position();
    public void set_Position(ReportExpression`1<ChartAxisTitlePositions> value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<TextOrientations> get_TextOrientation();
    public void set_TextOrientation(ReportExpression`1<TextOrientations> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartAxisTitlePositions : Enum {
    public int value__;
    public static ChartAxisTitlePositions Center;
    public static ChartAxisTitlePositions Near;
    public static ChartAxisTitlePositions Far;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartBorder3DAnnotation : ChartAnnotation {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartBorderSkinTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartBorderSkinTypes> ChartBorderSkinType { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> PageColor { get; public set; }
    public ChartBorder3DAnnotation(IPropertyStore propertyStore);
    public ReportExpression`1<ChartBorderSkinTypes> get_ChartBorderSkinType();
    public void set_ChartBorderSkinType(ReportExpression`1<ChartBorderSkinTypes> value);
    public ReportExpression`1<ReportColor> get_PageColor();
    public void set_PageColor(ReportExpression`1<ReportColor> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartBorderSkin : ReportObject {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartBorderSkinTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartBorderSkinTypes> ChartBorderSkinType { get; public set; }
    public Style Style { get; public set; }
    public ChartBorderSkin(IPropertyStore propertyStore);
    public ReportExpression`1<ChartBorderSkinTypes> get_ChartBorderSkinType();
    public void set_ChartBorderSkinType(ReportExpression`1<ChartBorderSkinTypes> value);
    public Style get_Style();
    public void set_Style(Style value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartBorderSkinTypes : Enum {
    public int value__;
    public static ChartBorderSkinTypes None;
    public static ChartBorderSkinTypes Emboss;
    public static ChartBorderSkinTypes Raised;
    public static ChartBorderSkinTypes Sunken;
    public static ChartBorderSkinTypes FrameThin1;
    public static ChartBorderSkinTypes FrameThin2;
    public static ChartBorderSkinTypes FrameThin3;
    public static ChartBorderSkinTypes FrameThin4;
    public static ChartBorderSkinTypes FrameThin5;
    public static ChartBorderSkinTypes FrameThin6;
    public static ChartBorderSkinTypes FrameTitle1;
    public static ChartBorderSkinTypes FrameTitle2;
    public static ChartBorderSkinTypes FrameTitle3;
    public static ChartBorderSkinTypes FrameTitle4;
    public static ChartBorderSkinTypes FrameTitle5;
    public static ChartBorderSkinTypes FrameTitle6;
    public static ChartBorderSkinTypes FrameTitle7;
    public static ChartBorderSkinTypes FrameTitle8;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartBreakLineTypes : Enum {
    public int value__;
    public static ChartBreakLineTypes Ragged;
    public static ChartBreakLineTypes Wave;
    public static ChartBreakLineTypes Straight;
    public static ChartBreakLineTypes None;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartCalloutAnchorCapTypes : Enum {
    public int value__;
    public static ChartCalloutAnchorCapTypes None;
    public static ChartCalloutAnchorCapTypes Arrow;
    public static ChartCalloutAnchorCapTypes Diamond;
    public static ChartCalloutAnchorCapTypes Square;
    public static ChartCalloutAnchorCapTypes Round;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartCalloutAnnotation : ChartAnnotation {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartCalloutAnchorCapTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartCalloutAnchorCapTypes> CalloutAnchorCap { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Multiline { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    public ChartCalloutAnnotation(IPropertyStore propertyStore);
    public ReportExpression`1<ChartCalloutAnchorCapTypes> get_CalloutAnchorCap();
    public void set_CalloutAnchorCap(ReportExpression`1<ChartCalloutAnchorCapTypes> value);
    public ReportExpression`1<bool> get_Multiline();
    public void set_Multiline(ReportExpression`1<bool> value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartCalloutLineAnchorTypes : Enum {
    public int value__;
    public static ChartCalloutLineAnchorTypes Arrow;
    public static ChartCalloutLineAnchorTypes Diamond;
    public static ChartCalloutLineAnchorTypes Square;
    public static ChartCalloutLineAnchorTypes Round;
    public static ChartCalloutLineAnchorTypes None;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartCalloutLineStyles : Enum {
    public int value__;
    public static ChartCalloutLineStyles Solid;
    public static ChartCalloutLineStyles Dotted;
    public static ChartCalloutLineStyles Dashed;
    public static ChartCalloutLineStyles Double;
    public static ChartCalloutLineStyles DashDot;
    public static ChartCalloutLineStyles DashDotDot;
    public static ChartCalloutLineStyles None;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartCalloutStyles : Enum {
    public int value__;
    public static ChartCalloutStyles Underline;
    public static ChartCalloutStyles Box;
    public static ChartCalloutStyles None;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartCategoryHierarchy : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartMember>")]
public IList`1<ChartMember> ChartMembers { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.Members { get; }
    public ChartCategoryHierarchy(IPropertyStore propertyStore);
    public IList`1<ChartMember> get_ChartMembers();
    public void set_ChartMembers(IList`1<ChartMember> value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.get_Members();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartCodeParameter : ReportObject {
    public string Name { get; public set; }
    public ReportExpression Value { get; public set; }
    public ChartCodeParameter(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartColumnSeparatorTypes : Enum {
    public int value__;
    public static ChartColumnSeparatorTypes None;
    public static ChartColumnSeparatorTypes Line;
    public static ChartColumnSeparatorTypes ThickLine;
    public static ChartColumnSeparatorTypes DoubleLine;
    public static ChartColumnSeparatorTypes DashLine;
    public static ChartColumnSeparatorTypes DotLine;
    public static ChartColumnSeparatorTypes GradientLine;
    public static ChartColumnSeparatorTypes ThickGradientLine;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartData : DataRegionBody {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartSeries>")]
public IList`1<ChartSeries> ChartSeriesCollection { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartDerivedSeries>")]
public IList`1<ChartDerivedSeries> ChartDerivedSeriesCollection { get; public set; }
    public ChartData(IPropertyStore propertyStore);
    public IList`1<ChartSeries> get_ChartSeriesCollection();
    public void set_ChartSeriesCollection(IList`1<ChartSeries> value);
    public IList`1<ChartDerivedSeries> get_ChartDerivedSeriesCollection();
    public void set_ChartDerivedSeriesCollection(IList`1<ChartDerivedSeries> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartDataLabel : ReportObject {
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UseValueAsLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Visible { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartDataLabelPositions", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartDataLabelPositions> Position { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> Rotation { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    public ChartDataLabel(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public ReportExpression`1<bool> get_UseValueAsLabel();
    public void set_UseValueAsLabel(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Visible();
    public void set_Visible(ReportExpression`1<bool> value);
    public ReportExpression`1<ChartDataLabelPositions> get_Position();
    public void set_Position(ReportExpression`1<ChartDataLabelPositions> value);
    public ReportExpression`1<int> get_Rotation();
    public void set_Rotation(ReportExpression`1<int> value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartDataLabelPositions : Enum {
    public int value__;
    public static ChartDataLabelPositions Auto;
    public static ChartDataLabelPositions Top;
    public static ChartDataLabelPositions TopLeft;
    public static ChartDataLabelPositions TopRight;
    public static ChartDataLabelPositions Left;
    public static ChartDataLabelPositions Center;
    public static ChartDataLabelPositions Right;
    public static ChartDataLabelPositions BottomRight;
    public static ChartDataLabelPositions Bottom;
    public static ChartDataLabelPositions BottomLeft;
    public static ChartDataLabelPositions Outside;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartDataPoint : DataRegionCell {
    public ChartDataPointValues ChartDataPointValues { get; public set; }
    public ChartDataLabel ChartDataLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression AxisLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    public EmptyColorStyle Style { get; public set; }
    public ChartMarker ChartMarker { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("DataPointDataElementOutputTypes")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    public ChartItemInLegend ChartItemInLegend { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    public ChartDataPoint(IPropertyStore propertyStore);
    public ChartDataPointValues get_ChartDataPointValues();
    public void set_ChartDataPointValues(ChartDataPointValues value);
    public ChartDataLabel get_ChartDataLabel();
    public void set_ChartDataLabel(ChartDataLabel value);
    public ReportExpression get_AxisLabel();
    public void set_AxisLabel(ReportExpression value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public EmptyColorStyle get_Style();
    public void set_Style(EmptyColorStyle value);
    public ChartMarker get_ChartMarker();
    public void set_ChartMarker(ChartMarker value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public ChartItemInLegend get_ChartItemInLegend();
    public void set_ChartItemInLegend(ChartItemInLegend value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartDataPointValues : ReportObject {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression X { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Y { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Size { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression High { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Low { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Start { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression End { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Mean { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Median { get; public set; }
    public ChartDataPointValues(IPropertyStore propertyStore);
    public ReportExpression get_X();
    public void set_X(ReportExpression value);
    public ReportExpression get_Y();
    public void set_Y(ReportExpression value);
    public ReportExpression get_Size();
    public void set_Size(ReportExpression value);
    public ReportExpression get_High();
    public void set_High(ReportExpression value);
    public ReportExpression get_Low();
    public void set_Low(ReportExpression value);
    public ReportExpression get_Start();
    public void set_Start(ReportExpression value);
    public ReportExpression get_End();
    public void set_End(ReportExpression value);
    public ReportExpression get_Mean();
    public void set_Mean(ReportExpression value);
    public ReportExpression get_Median();
    public void set_Median(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartDerivedSeries : ReportObject {
    public ChartSeries ChartSeries { get; public set; }
    public string SourceChartSeriesName { get; public set; }
    public ChartFormulas DerivedSeriesFormula { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartFormulaParameter>")]
public IList`1<ChartFormulaParameter> ChartFormulaParameters { get; public set; }
    public ChartDerivedSeries(IPropertyStore propertyStore);
    public ChartSeries get_ChartSeries();
    public void set_ChartSeries(ChartSeries value);
    public string get_SourceChartSeriesName();
    public void set_SourceChartSeriesName(string value);
    public ChartFormulas get_DerivedSeriesFormula();
    public void set_DerivedSeriesFormula(ChartFormulas value);
    public IList`1<ChartFormulaParameter> get_ChartFormulaParameters();
    public void set_ChartFormulaParameters(IList`1<ChartFormulaParameter> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartElementPosition : ReportObject {
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Top { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Left { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Height { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Width { get; public set; }
    public ChartElementPosition(IPropertyStore propertyStore);
    public ReportExpression`1<double> get_Top();
    public void set_Top(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Left();
    public void set_Left(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Height();
    public void set_Height(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Width();
    public void set_Width(ReportExpression`1<double> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartEllipseAnnotation : ChartAnnotation {
    public ChartEllipseAnnotation(IPropertyStore propertyStore);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartEmptyPoints : ReportObject {
    public EmptyColorStyle Style { get; public set; }
    public ChartMarker ChartMarker { get; public set; }
    public ChartDataLabel ChartDataLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression AxisLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    public ChartEmptyPoints(IPropertyStore propertyStore);
    public EmptyColorStyle get_Style();
    public void set_Style(EmptyColorStyle value);
    public ChartMarker get_ChartMarker();
    public void set_ChartMarker(ChartMarker value);
    public ChartDataLabel get_ChartDataLabel();
    public void set_ChartDataLabel(ChartDataLabel value);
    public ReportExpression get_AxisLabel();
    public void set_AxisLabel(ReportExpression value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartEndCapTypes : Enum {
    public int value__;
    public static ChartEndCapTypes None;
    public static ChartEndCapTypes Arrow;
    public static ChartEndCapTypes Diamond;
    public static ChartEndCapTypes Square;
    public static ChartEndCapTypes Round;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartFormulaParameter : ReportObject {
    public string Name { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    [DefaultValueAttribute("")]
public string Source { get; public set; }
    public ChartFormulaParameter(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public string get_Source();
    public void set_Source(string value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartFormulas : Enum {
    public int value__;
    public static ChartFormulas RuningTotal;
    public static ChartFormulas RuningAverage;
    public static ChartFormulas MoneyFlow;
    public static ChartFormulas OnBalanceVolume;
    public static ChartFormulas NegativeVoluneIndex;
    public static ChartFormulas PositiveVolumeIndex;
    public static ChartFormulas PriceVolumeTrend;
    public static ChartFormulas AccumulationDistribution;
    public static ChartFormulas Forecasting;
    public static ChartFormulas StandardDeviation;
    public static ChartFormulas AverageTruerance;
    public static ChartFormulas EaseOfMovement;
    public static ChartFormulas MassIndex;
    public static ChartFormulas Performance;
    public static ChartFormulas RateOfChange;
    public static ChartFormulas RelativeStrengthIndex;
    public static ChartFormulas TRIX;
    public static ChartFormulas MACD;
    public static ChartFormulas CommodityChannelIndex;
    public static ChartFormulas TTestEqualVariances;
    public static ChartFormulas TTestUnequalVariances;
    public static ChartFormulas TTestPaired;
    public static ChartFormulas ZTest;
    public static ChartFormulas FTest;
    public static ChartFormulas Covariance;
    public static ChartFormulas Correlation;
    public static ChartFormulas Anova;
    public static ChartFormulas TDistribution;
    public static ChartFormulas FDistribution;
    public static ChartFormulas NormalDistribution;
    public static ChartFormulas InverseTDistribution;
    public static ChartFormulas InverseFDistribution;
    public static ChartFormulas InverseNormalDistribution;
    public static ChartFormulas Mean;
    public static ChartFormulas Variance;
    public static ChartFormulas Median;
    public static ChartFormulas BetaFunction;
    public static ChartFormulas GammaFunction;
    public static ChartFormulas MovingAverage;
    public static ChartFormulas ExponentialMovingAverage;
    public static ChartFormulas TriangularMovingAverage;
    public static ChartFormulas WeightedMovingAverage;
    public static ChartFormulas BollingerBands;
    public static ChartFormulas MedianPrice;
    public static ChartFormulas TypicalPrice;
    public static ChartFormulas WeightedClose;
    public static ChartFormulas Envelopes;
    public static ChartFormulas StochasticIndicator;
    public static ChartFormulas ChaikinOscillator;
    public static ChartFormulas DetrendedPriceOscillator;
    public static ChartFormulas VolatilityChankins;
    public static ChartFormulas VolumeOscillator;
    public static ChartFormulas WilliansR;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartGridLines : ReportObject {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartGridLinesEnabledTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartGridLinesEnabledTypes> Enabled { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Interval { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalTypes> IntervalType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> IntervalOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalOffsetTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalOffsetTypes> IntervalOffsetType { get; public set; }
    public ChartGridLines(IPropertyStore propertyStore);
    public ReportExpression`1<ChartGridLinesEnabledTypes> get_Enabled();
    public void set_Enabled(ReportExpression`1<ChartGridLinesEnabledTypes> value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<double> get_Interval();
    public void set_Interval(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalTypes> get_IntervalType();
    public void set_IntervalType(ReportExpression`1<ChartIntervalTypes> value);
    public ReportExpression`1<double> get_IntervalOffset();
    public void set_IntervalOffset(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalOffsetTypes> get_IntervalOffsetType();
    public void set_IntervalOffsetType(ReportExpression`1<ChartIntervalOffsetTypes> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartGridLinesEnabledTypes : Enum {
    public int value__;
    public static ChartGridLinesEnabledTypes Auto;
    public static ChartGridLinesEnabledTypes True;
    public static ChartGridLinesEnabledTypes False;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartHeaderSeparatorTypes : Enum {
    public int value__;
    public static ChartHeaderSeparatorTypes None;
    public static ChartHeaderSeparatorTypes Line;
    public static ChartHeaderSeparatorTypes ThickLine;
    public static ChartHeaderSeparatorTypes DoubleLine;
    public static ChartHeaderSeparatorTypes DashLine;
    public static ChartHeaderSeparatorTypes DotLine;
    public static ChartHeaderSeparatorTypes GradientLine;
    public static ChartHeaderSeparatorTypes ThickGradientLine;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartImageAnnotation : ChartAnnotation {
    public ChartImageAnnotation(IPropertyStore propertyStore);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartIncludeZeroTypes : Enum {
    public int value__;
    public static ChartIncludeZeroTypes Auto;
    public static ChartIncludeZeroTypes True;
    public static ChartIncludeZeroTypes False;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartIntervalOffsetTypes : Enum {
    public int value__;
    public static ChartIntervalOffsetTypes Default;
    public static ChartIntervalOffsetTypes Auto;
    public static ChartIntervalOffsetTypes Number;
    public static ChartIntervalOffsetTypes Years;
    public static ChartIntervalOffsetTypes Months;
    public static ChartIntervalOffsetTypes Weeks;
    public static ChartIntervalOffsetTypes Days;
    public static ChartIntervalOffsetTypes Hours;
    public static ChartIntervalOffsetTypes Minutes;
    public static ChartIntervalOffsetTypes Seconds;
    public static ChartIntervalOffsetTypes Milliseconds;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartIntervalTypes : Enum {
    public int value__;
    public static ChartIntervalTypes Default;
    public static ChartIntervalTypes Auto;
    public static ChartIntervalTypes Number;
    public static ChartIntervalTypes Years;
    public static ChartIntervalTypes Months;
    public static ChartIntervalTypes Weeks;
    public static ChartIntervalTypes Days;
    public static ChartIntervalTypes Hours;
    public static ChartIntervalTypes Minutes;
    public static ChartIntervalTypes Seconds;
    public static ChartIntervalTypes Milliseconds;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartItemInLegend : ReportObject {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression LegendText { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    public ChartItemInLegend(IPropertyStore propertyStore);
    public ReportExpression get_LegendText();
    public void set_LegendText(ReportExpression value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartLabelRotationTypes : Enum {
    public int value__;
    public static ChartLabelRotationTypes Rotate90;
    public static ChartLabelRotationTypes Rotate45;
    public static ChartLabelRotationTypes Rotate30;
    public static ChartLabelRotationTypes Rotate15;
    public static ChartLabelRotationTypes None;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartLegend : ReportObject {
    public string Name { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartPositions", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartPositions> Position { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartLegendLayouts", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartLegendLayouts> Layout { get; public set; }
    [DefaultValueAttribute("")]
public string DockToChartArea { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> DockOutsideChartArea { get; public set; }
    public ChartElementPosition ChartElementPosition { get; public set; }
    public ChartLegendTitle ChartLegendTitle { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> AutoFitTextDisabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ReportSize> MinFontSize { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartLegendColumn>")]
public IList`1<ChartLegendColumn> ChartLegendColumns { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartHeaderSeparatorTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartHeaderSeparatorTypes> HeaderSeparator { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> HeaderSeparatorColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartColumnSeparatorTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartColumnSeparatorTypes> ColumnSeparator { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> ColumnSeparatorColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> ColumnSpacing { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> InterlacedRows { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> InterlacedRowsColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> EquallySpacedItems { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartLegendReversedTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartLegendReversedTypes> Reversed { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> MaxAutoSize { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> TextWrapThreshold { get; public set; }
    public ChartLegend(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<ChartPositions> get_Position();
    public void set_Position(ReportExpression`1<ChartPositions> value);
    public ReportExpression`1<ChartLegendLayouts> get_Layout();
    public void set_Layout(ReportExpression`1<ChartLegendLayouts> value);
    public string get_DockToChartArea();
    public void set_DockToChartArea(string value);
    public ReportExpression`1<bool> get_DockOutsideChartArea();
    public void set_DockOutsideChartArea(ReportExpression`1<bool> value);
    public ChartElementPosition get_ChartElementPosition();
    public void set_ChartElementPosition(ChartElementPosition value);
    public ChartLegendTitle get_ChartLegendTitle();
    public void set_ChartLegendTitle(ChartLegendTitle value);
    public ReportExpression`1<bool> get_AutoFitTextDisabled();
    public void set_AutoFitTextDisabled(ReportExpression`1<bool> value);
    public ReportExpression`1<ReportSize> get_MinFontSize();
    public void set_MinFontSize(ReportExpression`1<ReportSize> value);
    public IList`1<ChartLegendColumn> get_ChartLegendColumns();
    public void set_ChartLegendColumns(IList`1<ChartLegendColumn> value);
    public ReportExpression`1<ChartHeaderSeparatorTypes> get_HeaderSeparator();
    public void set_HeaderSeparator(ReportExpression`1<ChartHeaderSeparatorTypes> value);
    public ReportExpression`1<ReportColor> get_HeaderSeparatorColor();
    public void set_HeaderSeparatorColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ChartColumnSeparatorTypes> get_ColumnSeparator();
    public void set_ColumnSeparator(ReportExpression`1<ChartColumnSeparatorTypes> value);
    public ReportExpression`1<ReportColor> get_ColumnSeparatorColor();
    public void set_ColumnSeparatorColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<int> get_ColumnSpacing();
    public void set_ColumnSpacing(ReportExpression`1<int> value);
    public ReportExpression`1<bool> get_InterlacedRows();
    public void set_InterlacedRows(ReportExpression`1<bool> value);
    public ReportExpression`1<ReportColor> get_InterlacedRowsColor();
    public void set_InterlacedRowsColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<bool> get_EquallySpacedItems();
    public void set_EquallySpacedItems(ReportExpression`1<bool> value);
    public ReportExpression`1<ChartLegendReversedTypes> get_Reversed();
    public void set_Reversed(ReportExpression`1<ChartLegendReversedTypes> value);
    public ReportExpression`1<int> get_MaxAutoSize();
    public void set_MaxAutoSize(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_TextWrapThreshold();
    public void set_TextWrapThreshold(ReportExpression`1<int> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartLegendColumn : ReportObject {
    public string Name { get; public set; }
    public ChartLegendColumnTypes ColumnType { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    public Style Style { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> MinimumWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> MaximumWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> SeriesSymbolWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> SeriesSymbolHeight { get; public set; }
    public ChartLegendColumn(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ChartLegendColumnTypes get_ColumnType();
    public void set_ColumnType(ChartLegendColumnTypes value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public Style get_Style();
    public void set_Style(Style value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ReportExpression`1<ReportSize> get_MinimumWidth();
    public void set_MinimumWidth(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_MaximumWidth();
    public void set_MaximumWidth(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<int> get_SeriesSymbolWidth();
    public void set_SeriesSymbolWidth(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_SeriesSymbolHeight();
    public void set_SeriesSymbolHeight(ReportExpression`1<int> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartLegendColumnHeader : ReportObject {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    public Style Style { get; public set; }
    public ChartLegendColumnHeader(IPropertyStore propertyStore);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public Style get_Style();
    public void set_Style(Style value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartLegendColumnTypes : Enum {
    public int value__;
    public static ChartLegendColumnTypes Text;
    public static ChartLegendColumnTypes SeriesSymbol;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartLegendCustomItem : ReportObject {
    public string Name { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartLegendCustomItemCell>")]
public IList`1<ChartLegendCustomItemCell> ChartLegendCustomItemCells { get; public set; }
    public Style Style { get; public set; }
    public ChartMarker ChartMarker { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartLegendItemSeparatorTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartLegendItemSeparatorTypes> Separator { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> SeparatorColor { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    public ChartLegendCustomItem(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public IList`1<ChartLegendCustomItemCell> get_ChartLegendCustomItemCells();
    public void set_ChartLegendCustomItemCells(IList`1<ChartLegendCustomItemCell> value);
    public Style get_Style();
    public void set_Style(Style value);
    public ChartMarker get_ChartMarker();
    public void set_ChartMarker(ChartMarker value);
    public ReportExpression`1<ChartLegendItemSeparatorTypes> get_Separator();
    public void set_Separator(ReportExpression`1<ChartLegendItemSeparatorTypes> value);
    public ReportExpression`1<ReportColor> get_SeparatorColor();
    public void set_SeparatorColor(ReportExpression`1<ReportColor> value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartLegendCustomItemCell : ReportObject {
    public string Name { get; public set; }
    public ChartLegendItemCellTypes CellType { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Text { get; public set; }
    [ValidValuesAttribute("0", "2147483647")]
[DefaultValueAttribute("1")]
public int CellSpan { get; public set; }
    public Style Style { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> ImageHeight { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> ImageWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> SymbolHeight { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> SymbolWidth { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartLegendItemAlignmentTypes Alignment { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> TopMargin { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> BottomMargin { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> LeftMargin { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> RightMargin { get; public set; }
    public ChartLegendCustomItemCell(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ChartLegendItemCellTypes get_CellType();
    public void set_CellType(ChartLegendItemCellTypes value);
    public ReportExpression get_Text();
    public void set_Text(ReportExpression value);
    public int get_CellSpan();
    public void set_CellSpan(int value);
    public Style get_Style();
    public void set_Style(Style value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ReportExpression`1<int> get_ImageHeight();
    public void set_ImageHeight(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_ImageWidth();
    public void set_ImageWidth(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_SymbolHeight();
    public void set_SymbolHeight(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_SymbolWidth();
    public void set_SymbolWidth(ReportExpression`1<int> value);
    public ChartLegendItemAlignmentTypes get_Alignment();
    public void set_Alignment(ChartLegendItemAlignmentTypes value);
    public ReportExpression`1<int> get_TopMargin();
    public void set_TopMargin(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_BottomMargin();
    public void set_BottomMargin(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_LeftMargin();
    public void set_LeftMargin(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_RightMargin();
    public void set_RightMargin(ReportExpression`1<int> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartLegendItemAlignmentTypes : Enum {
    public int value__;
    public static ChartLegendItemAlignmentTypes Center;
    public static ChartLegendItemAlignmentTypes Top;
    public static ChartLegendItemAlignmentTypes TopLeft;
    public static ChartLegendItemAlignmentTypes TopRight;
    public static ChartLegendItemAlignmentTypes Left;
    public static ChartLegendItemAlignmentTypes Right;
    public static ChartLegendItemAlignmentTypes BottomRight;
    public static ChartLegendItemAlignmentTypes Bottom;
    public static ChartLegendItemAlignmentTypes BottomLeft;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartLegendItemCellTypes : Enum {
    public int value__;
    public static ChartLegendItemCellTypes Text;
    public static ChartLegendItemCellTypes SeriesSymbol;
    public static ChartLegendItemCellTypes Image;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartLegendItemSeparatorTypes : Enum {
    public int value__;
    public static ChartLegendItemSeparatorTypes None;
    public static ChartLegendItemSeparatorTypes Line;
    public static ChartLegendItemSeparatorTypes ThickLine;
    public static ChartLegendItemSeparatorTypes DoubleLine;
    public static ChartLegendItemSeparatorTypes DashLine;
    public static ChartLegendItemSeparatorTypes DotLine;
    public static ChartLegendItemSeparatorTypes GradientLine;
    public static ChartLegendItemSeparatorTypes ThickGradientLine;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartLegendLayouts : Enum {
    public int value__;
    public static ChartLegendLayouts Column;
    public static ChartLegendLayouts Row;
    public static ChartLegendLayouts AutoTable;
    public static ChartLegendLayouts WideTable;
    public static ChartLegendLayouts TallTable;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartLegendReversedTypes : Enum {
    public int value__;
    public static ChartLegendReversedTypes Auto;
    public static ChartLegendReversedTypes True;
    public static ChartLegendReversedTypes False;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartLegendTitle : ReportObject {
    public ReportExpression Caption { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartTitleSeparatorTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartTitleSeparatorTypes> TitleSeparator { get; public set; }
    public Style Style { get; public set; }
    public ChartLegendTitle(IPropertyStore propertyStore);
    public ReportExpression get_Caption();
    public void set_Caption(ReportExpression value);
    public ReportExpression`1<ChartTitleSeparatorTypes> get_TitleSeparator();
    public void set_TitleSeparator(ReportExpression`1<ChartTitleSeparatorTypes> value);
    public Style get_Style();
    public void set_Style(Style value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartLineAnnotation : ChartAnnotation {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> DrawInfinitive { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartStartCapTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartStartCapTypes> StartCap { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartEndCapTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartEndCapTypes> EndCap { get; public set; }
    public ChartLineAnnotation(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_DrawInfinitive();
    public void set_DrawInfinitive(ReportExpression`1<bool> value);
    public ReportExpression`1<ChartStartCapTypes> get_StartCap();
    public void set_StartCap(ReportExpression`1<ChartStartCapTypes> value);
    public ReportExpression`1<ChartEndCapTypes> get_EndCap();
    public void set_EndCap(ReportExpression`1<ChartEndCapTypes> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartMarker : ReportObject {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartMarkerTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartMarkerTypes> Type { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ReportSize> Size { get; public set; }
    public EmptyColorStyle Style { get; public set; }
    public ChartMarker(IPropertyStore propertyStore);
    public ReportExpression`1<ChartMarkerTypes> get_Type();
    public void set_Type(ReportExpression`1<ChartMarkerTypes> value);
    public ReportExpression`1<ReportSize> get_Size();
    public void set_Size(ReportExpression`1<ReportSize> value);
    public EmptyColorStyle get_Style();
    public void set_Style(EmptyColorStyle value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartMarkerTypes : Enum {
    public int value__;
    public static ChartMarkerTypes None;
    public static ChartMarkerTypes Square;
    public static ChartMarkerTypes Circle;
    public static ChartMarkerTypes Diamond;
    public static ChartMarkerTypes Triangle;
    public static ChartMarkerTypes Cross;
    public static ChartMarkerTypes Star4;
    public static ChartMarkerTypes Star5;
    public static ChartMarkerTypes Star6;
    public static ChartMarkerTypes Star10;
    public static ChartMarkerTypes Auto;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartMember : HierarchyMember {
    public Group Group { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> SortExpressions { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartMember>")]
public IList`1<ChartMember> ChartMembers { get; public set; }
    public ReportExpression Label { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [ValidEnumValuesAttribute("ChartMemberDataElementOutputTypes")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.Members { get; }
    public ChartMember(IPropertyStore propertyStore);
    public virtual Group get_Group();
    public virtual void set_Group(Group value);
    public sealed virtual IList`1<SortExpression> get_SortExpressions();
    public sealed virtual void set_SortExpressions(IList`1<SortExpression> value);
    public IList`1<ChartMember> get_ChartMembers();
    public void set_ChartMembers(IList`1<ChartMember> value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.get_Members();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartNoMoveDirections : ReportObject {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Up { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Left { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Right { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Down { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UpLeft { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UpRight { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> DownLeft { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> DownRight { get; public set; }
    public ChartNoMoveDirections(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_Up();
    public void set_Up(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Left();
    public void set_Left(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Right();
    public void set_Right(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Down();
    public void set_Down(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_UpLeft();
    public void set_UpLeft(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_UpRight();
    public void set_UpRight(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_DownLeft();
    public void set_DownLeft(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_DownRight();
    public void set_DownRight(ReportExpression`1<bool> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartPaletteHatchBehaviorTypes : Enum {
    public int value__;
    public static ChartPaletteHatchBehaviorTypes Default;
    public static ChartPaletteHatchBehaviorTypes None;
    public static ChartPaletteHatchBehaviorTypes Always;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartPalettes : Enum {
    public int value__;
    public static ChartPalettes Default;
    public static ChartPalettes EarthTones;
    public static ChartPalettes Excel;
    public static ChartPalettes GrayScale;
    public static ChartPalettes Light;
    public static ChartPalettes Pastel;
    public static ChartPalettes SemiTransparent;
    public static ChartPalettes Berry;
    public static ChartPalettes Chocolate;
    public static ChartPalettes Fire;
    public static ChartPalettes SeaGreen;
    public static ChartPalettes BrightPastel;
    public static ChartPalettes Custom;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartPathPoint : ReportObject {
    public ReportExpression`1<ReportSize> X { get; public set; }
    public ReportExpression`1<ReportSize> Y { get; public set; }
    public ChartPathPoint(IPropertyStore propertyStore);
    public ReportExpression`1<ReportSize> get_X();
    public void set_X(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_Y();
    public void set_Y(ReportExpression`1<ReportSize> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartPolygonAnnotation : ChartAnnotation {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartStartCapTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartStartCapTypes> StartCap { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartEndCapTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartEndCapTypes> EndCap { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> FreeDraw { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartPathPoint>")]
public IList`1<ChartPathPoint> ChartPathPoints { get; public set; }
    public ChartPolygonAnnotation(IPropertyStore propertyStore);
    public ReportExpression`1<ChartStartCapTypes> get_StartCap();
    public void set_StartCap(ReportExpression`1<ChartStartCapTypes> value);
    public ReportExpression`1<ChartEndCapTypes> get_EndCap();
    public void set_EndCap(ReportExpression`1<ChartEndCapTypes> value);
    public ReportExpression`1<bool> get_FreeDraw();
    public void set_FreeDraw(ReportExpression`1<bool> value);
    public IList`1<ChartPathPoint> get_ChartPathPoints();
    public void set_ChartPathPoints(IList`1<ChartPathPoint> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartPolylineAnnotation : ChartAnnotation {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartStartCapTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartStartCapTypes> StartCap { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartEndCapTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartEndCapTypes> EndCap { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> FreeDraw { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartPathPoint>")]
public IList`1<ChartPathPoint> ChartPathPoints { get; public set; }
    public ChartPolylineAnnotation(IPropertyStore propertyStore);
    public ReportExpression`1<ChartStartCapTypes> get_StartCap();
    public void set_StartCap(ReportExpression`1<ChartStartCapTypes> value);
    public ReportExpression`1<ChartEndCapTypes> get_EndCap();
    public void set_EndCap(ReportExpression`1<ChartEndCapTypes> value);
    public ReportExpression`1<bool> get_FreeDraw();
    public void set_FreeDraw(ReportExpression`1<bool> value);
    public IList`1<ChartPathPoint> get_ChartPathPoints();
    public void set_ChartPathPoints(IList`1<ChartPathPoint> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartPositions : Enum {
    public int value__;
    public static ChartPositions TopLeft;
    public static ChartPositions TopCenter;
    public static ChartPositions TopRight;
    public static ChartPositions LeftTop;
    public static ChartPositions LeftCenter;
    public static ChartPositions LeftBottom;
    public static ChartPositions RightTop;
    public static ChartPositions RightCenter;
    public static ChartPositions RightBottom;
    public static ChartPositions BottomRight;
    public static ChartPositions BottomCenter;
    public static ChartPositions BottomLeft;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartProjectionModes : Enum {
    public int value__;
    public static ChartProjectionModes Oblique;
    public static ChartProjectionModes Perspective;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartRectangleAnnotation : ChartAnnotation {
    public ChartRectangleAnnotation(IPropertyStore propertyStore);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartSeries : ReportObject {
    public string Name { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartDataPoint>")]
public IList`1<ChartDataPoint> ChartDataPoints { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartTypes> Type { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartSubtypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartSubtypes> Subtype { get; public set; }
    public EmptyColorStyle Style { get; public set; }
    public ChartMarker ChartMarker { get; public set; }
    public ChartDataLabel ChartDataLabel { get; public set; }
    public ChartEmptyPoints ChartEmptyPoints { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    [DefaultValueAttribute("")]
public string LegendName { get; public set; }
    public ChartItemInLegend ChartItemInLegend { get; public set; }
    [DefaultValueAttribute("")]
public string ChartAreaName { get; public set; }
    [DefaultValueAttribute("")]
public string ValueAxisName { get; public set; }
    [DefaultValueAttribute("")]
public string CategoryAxisName { get; public set; }
    public ChartSmartLabel ChartSmartLabel { get; public set; }
    public ChartSeries(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public IList`1<ChartDataPoint> get_ChartDataPoints();
    public void set_ChartDataPoints(IList`1<ChartDataPoint> value);
    public ReportExpression`1<ChartTypes> get_Type();
    public void set_Type(ReportExpression`1<ChartTypes> value);
    public ReportExpression`1<ChartSubtypes> get_Subtype();
    public void set_Subtype(ReportExpression`1<ChartSubtypes> value);
    public EmptyColorStyle get_Style();
    public void set_Style(EmptyColorStyle value);
    public ChartMarker get_ChartMarker();
    public void set_ChartMarker(ChartMarker value);
    public ChartDataLabel get_ChartDataLabel();
    public void set_ChartDataLabel(ChartDataLabel value);
    public ChartEmptyPoints get_ChartEmptyPoints();
    public void set_ChartEmptyPoints(ChartEmptyPoints value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public string get_LegendName();
    public void set_LegendName(string value);
    public ChartItemInLegend get_ChartItemInLegend();
    public void set_ChartItemInLegend(ChartItemInLegend value);
    public string get_ChartAreaName();
    public void set_ChartAreaName(string value);
    public string get_ValueAxisName();
    public void set_ValueAxisName(string value);
    public string get_CategoryAxisName();
    public void set_CategoryAxisName(string value);
    public ChartSmartLabel get_ChartSmartLabel();
    public void set_ChartSmartLabel(ChartSmartLabel value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartSeriesDrawingStyle : Enum {
    public int value__;
    public static ChartSeriesDrawingStyle Default;
    public static ChartSeriesDrawingStyle Cylinder;
    public static ChartSeriesDrawingStyle Emboss;
    public static ChartSeriesDrawingStyle LightToDark;
    public static ChartSeriesDrawingStyle Wedge;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartSeriesHierarchy : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ChartMember>")]
public IList`1<ChartMember> ChartMembers { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.Members { get; }
    public ChartSeriesHierarchy(IPropertyStore propertyStore);
    public IList`1<ChartMember> get_ChartMembers();
    public void set_ChartMembers(IList`1<ChartMember> value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.get_Members();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartShadings : Enum {
    public int value__;
    public static ChartShadings Real;
    public static ChartShadings Simple;
    public static ChartShadings None;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartSmartLabel : ReportObject {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Disabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartAllowOutSidePlotAreaTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartAllowOutSidePlotAreaTypes> AllowOutSidePlotArea { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> CalloutBackColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartCalloutLineAnchorTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartCalloutLineAnchorTypes> CalloutLineAnchor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> CalloutLineColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartCalloutLineStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartCalloutLineStyles> CalloutLineStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ReportSize> CalloutLineWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartCalloutStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartCalloutStyles> CalloutStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> ShowOverlapped { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> MarkerOverlapping { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ReportSize> MaxMovingDistance { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> MinMovingDistance { get; public set; }
    public ChartNoMoveDirections ChartNoMoveDirections { get; public set; }
    public ChartSmartLabel(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_Disabled();
    public void set_Disabled(ReportExpression`1<bool> value);
    public ReportExpression`1<ChartAllowOutSidePlotAreaTypes> get_AllowOutSidePlotArea();
    public void set_AllowOutSidePlotArea(ReportExpression`1<ChartAllowOutSidePlotAreaTypes> value);
    public ReportExpression`1<ReportColor> get_CalloutBackColor();
    public void set_CalloutBackColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ChartCalloutLineAnchorTypes> get_CalloutLineAnchor();
    public void set_CalloutLineAnchor(ReportExpression`1<ChartCalloutLineAnchorTypes> value);
    public ReportExpression`1<ReportColor> get_CalloutLineColor();
    public void set_CalloutLineColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ChartCalloutLineStyles> get_CalloutLineStyle();
    public void set_CalloutLineStyle(ReportExpression`1<ChartCalloutLineStyles> value);
    public ReportExpression`1<ReportSize> get_CalloutLineWidth();
    public void set_CalloutLineWidth(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ChartCalloutStyles> get_CalloutStyle();
    public void set_CalloutStyle(ReportExpression`1<ChartCalloutStyles> value);
    public ReportExpression`1<bool> get_ShowOverlapped();
    public void set_ShowOverlapped(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_MarkerOverlapping();
    public void set_MarkerOverlapping(ReportExpression`1<bool> value);
    public ReportExpression`1<ReportSize> get_MaxMovingDistance();
    public void set_MaxMovingDistance(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_MinMovingDistance();
    public void set_MinMovingDistance(ReportExpression`1<ReportSize> value);
    public ChartNoMoveDirections get_ChartNoMoveDirections();
    public void set_ChartNoMoveDirections(ChartNoMoveDirections value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartStartCapTypes : Enum {
    public int value__;
    public static ChartStartCapTypes None;
    public static ChartStartCapTypes Arrow;
    public static ChartStartCapTypes Diamond;
    public static ChartStartCapTypes Square;
    public static ChartStartCapTypes Round;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartStripLine : ReportObject {
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Title { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextOrientations", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextOrientations> TextOrientation { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Interval { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalTypes> IntervalType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> IntervalOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalOffsetTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalOffsetTypes> IntervalOffsetType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> StripWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartStripWidthTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartStripWidthTypes> StripWidthType { get; public set; }
    public ChartStripLine(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression get_Title();
    public void set_Title(ReportExpression value);
    public ReportExpression`1<TextOrientations> get_TextOrientation();
    public void set_TextOrientation(ReportExpression`1<TextOrientations> value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ReportExpression`1<double> get_Interval();
    public void set_Interval(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalTypes> get_IntervalType();
    public void set_IntervalType(ReportExpression`1<ChartIntervalTypes> value);
    public ReportExpression`1<double> get_IntervalOffset();
    public void set_IntervalOffset(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalOffsetTypes> get_IntervalOffsetType();
    public void set_IntervalOffsetType(ReportExpression`1<ChartIntervalOffsetTypes> value);
    public ReportExpression`1<double> get_StripWidth();
    public void set_StripWidth(ReportExpression`1<double> value);
    public ReportExpression`1<ChartStripWidthTypes> get_StripWidthType();
    public void set_StripWidthType(ReportExpression`1<ChartStripWidthTypes> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartStripWidthTypes : Enum {
    public int value__;
    public static ChartStripWidthTypes Auto;
    public static ChartStripWidthTypes Number;
    public static ChartStripWidthTypes Years;
    public static ChartStripWidthTypes Months;
    public static ChartStripWidthTypes Weeks;
    public static ChartStripWidthTypes Days;
    public static ChartStripWidthTypes Hours;
    public static ChartStripWidthTypes Minutes;
    public static ChartStripWidthTypes Seconds;
    public static ChartStripWidthTypes Milliseconds;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartSubtypes : Enum {
    public int value__;
    public static ChartSubtypes Plain;
    public static ChartSubtypes Stacked;
    public static ChartSubtypes PercentStacked;
    public static ChartSubtypes Smooth;
    public static ChartSubtypes Stepped;
    public static ChartSubtypes Pie;
    public static ChartSubtypes ExplodedPie;
    public static ChartSubtypes CalloutPie;
    public static ChartSubtypes Doughnut;
    public static ChartSubtypes ExplodedDoughnut;
    public static ChartSubtypes Funnel;
    public static ChartSubtypes Pyramid;
    public static ChartSubtypes Bubble;
    public static ChartSubtypes Candlestick;
    public static ChartSubtypes Stock;
    public static ChartSubtypes Bar;
    public static ChartSubtypes Column;
    public static ChartSubtypes BoxPlot;
    public static ChartSubtypes ErrorBar;
    public static ChartSubtypes Radar;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartTextAnnotation : ChartAnnotation {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Multiline { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    public ChartTextAnnotation(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_Multiline();
    public void set_Multiline(ReportExpression`1<bool> value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartThreeDProperties : ReportObject {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Enabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartProjectionModes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartProjectionModes> ProjectionMode { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> Perspective { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> Rotation { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> Inclination { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> DepthRatio { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartShadings", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartShadings> Shading { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> GapDepth { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> WallThickness { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Clustered { get; public set; }
    public ChartThreeDProperties(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_Enabled();
    public void set_Enabled(ReportExpression`1<bool> value);
    public ReportExpression`1<ChartProjectionModes> get_ProjectionMode();
    public void set_ProjectionMode(ReportExpression`1<ChartProjectionModes> value);
    public ReportExpression`1<int> get_Perspective();
    public void set_Perspective(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_Rotation();
    public void set_Rotation(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_Inclination();
    public void set_Inclination(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_DepthRatio();
    public void set_DepthRatio(ReportExpression`1<int> value);
    public ReportExpression`1<ChartShadings> get_Shading();
    public void set_Shading(ReportExpression`1<ChartShadings> value);
    public ReportExpression`1<int> get_GapDepth();
    public void set_GapDepth(ReportExpression`1<int> value);
    public ReportExpression`1<int> get_WallThickness();
    public void set_WallThickness(ReportExpression`1<int> value);
    public ReportExpression`1<bool> get_Clustered();
    public void set_Clustered(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartTickMarks : ReportObject {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartTickMarksEnabledTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartTickMarksEnabledTypes> Enabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartTickMarkTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartTickMarkTypes> Type { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Length { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Interval { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalTypes> IntervalType { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> IntervalOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartIntervalOffsetTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartIntervalOffsetTypes> IntervalOffsetType { get; public set; }
    public ChartTickMarks(IPropertyStore propertyStore);
    public ReportExpression`1<ChartTickMarksEnabledTypes> get_Enabled();
    public void set_Enabled(ReportExpression`1<ChartTickMarksEnabledTypes> value);
    public ReportExpression`1<ChartTickMarkTypes> get_Type();
    public void set_Type(ReportExpression`1<ChartTickMarkTypes> value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<double> get_Length();
    public void set_Length(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Interval();
    public void set_Interval(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalTypes> get_IntervalType();
    public void set_IntervalType(ReportExpression`1<ChartIntervalTypes> value);
    public ReportExpression`1<double> get_IntervalOffset();
    public void set_IntervalOffset(ReportExpression`1<double> value);
    public ReportExpression`1<ChartIntervalOffsetTypes> get_IntervalOffsetType();
    public void set_IntervalOffsetType(ReportExpression`1<ChartIntervalOffsetTypes> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartTickMarksEnabledTypes : Enum {
    public int value__;
    public static ChartTickMarksEnabledTypes Auto;
    public static ChartTickMarksEnabledTypes True;
    public static ChartTickMarksEnabledTypes False;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartTickMarkTypes : Enum {
    public int value__;
    public static ChartTickMarkTypes Outside;
    public static ChartTickMarkTypes Inside;
    public static ChartTickMarkTypes Cross;
    public static ChartTickMarkTypes None;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ChartTitle : ReportObject {
    public string Name { get; public set; }
    public ReportExpression Caption { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ChartPositions", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ChartPositions> Position { get; public set; }
    [DefaultValueAttribute("")]
public string DockToChartArea { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> DockOutsideChartArea { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> DockOffset { get; public set; }
    public ChartElementPosition ChartElementPosition { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextOrientations", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextOrientations> TextOrientation { get; public set; }
    public ChartTitle(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression get_Caption();
    public void set_Caption(ReportExpression value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<ChartPositions> get_Position();
    public void set_Position(ReportExpression`1<ChartPositions> value);
    public string get_DockToChartArea();
    public void set_DockToChartArea(string value);
    public ReportExpression`1<bool> get_DockOutsideChartArea();
    public void set_DockOutsideChartArea(ReportExpression`1<bool> value);
    public ReportExpression`1<int> get_DockOffset();
    public void set_DockOffset(ReportExpression`1<int> value);
    public ChartElementPosition get_ChartElementPosition();
    public void set_ChartElementPosition(ChartElementPosition value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression`1<TextOrientations> get_TextOrientation();
    public void set_TextOrientation(ReportExpression`1<TextOrientations> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartTitleSeparatorTypes : Enum {
    public int value__;
    public static ChartTitleSeparatorTypes None;
    public static ChartTitleSeparatorTypes Line;
    public static ChartTitleSeparatorTypes ThickLine;
    public static ChartTitleSeparatorTypes DoubleLine;
    public static ChartTitleSeparatorTypes DashLine;
    public static ChartTitleSeparatorTypes DotLine;
    public static ChartTitleSeparatorTypes GradientLine;
    public static ChartTitleSeparatorTypes ThickGradientLine;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartTypes : Enum {
    public int value__;
    public static ChartTypes Column;
    public static ChartTypes Bar;
    public static ChartTypes Line;
    public static ChartTypes Shape;
    public static ChartTypes Scatter;
    public static ChartTypes Area;
    public static ChartTypes Range;
    public static ChartTypes Polar;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ChartVisibleTypes : Enum {
    public int value__;
    public static ChartVisibleTypes Auto;
    public static ChartVisibleTypes True;
    public static ChartVisibleTypes False;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Class : ReportObject {
    public string ClassName { get; public set; }
    public string InstanceName { get; public set; }
    public Class(IPropertyStore propertyStore);
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ColorProperty : PropertyDefinition`1<ReportColor> {
    public ColorProperty(string name, Nullable`1<ReportColor> defaultValue);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.CommandTypes : Enum {
    public int value__;
    public static CommandTypes Text;
    public static CommandTypes StoredProcedure;
    public static CommandTypes TableDirect;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ComparablePropertyDefinition`1 : PropertyDefinition`1<T> {
    private Nullable`1<T> m_minimum;
    private Nullable`1<T> m_maximum;
    public Nullable`1<T> Minimum { get; }
    public Nullable`1<T> Maximum { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Default { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Minimum { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Maximum { get; }
    public ComparablePropertyDefinition`1(string name, Nullable`1<T> defaultValue);
    public ComparablePropertyDefinition`1(string name, Nullable`1<T> defaultValue, Nullable`1<T> minimum, Nullable`1<T> maximum);
    public Nullable`1<T> get_Minimum();
    public Nullable`1<T> get_Maximum();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Default();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Minimum();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Maximum();
    private sealed virtual override void Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Validate(object component, object value);
    public void Constrain(T& value);
    public void Validate(object component, T value);
    public void Validate(object component, ReportExpression`1<T> value);
    public void Validate(object component, string value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ConnectionProperties : ReportObject {
    public string DataProvider { get; public set; }
    public ReportExpression ConnectString { get; public set; }
    [DefaultValueAttribute("False")]
public bool IntegratedSecurity { get; public set; }
    [DefaultValueAttribute("")]
public string Prompt { get; public set; }
    public ConnectionProperties(IPropertyStore propertyStore);
    public string get_DataProvider();
    public void set_DataProvider(string value);
    public ReportExpression get_ConnectString();
    public void set_ConnectString(ReportExpression value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public string get_Prompt();
    public void set_Prompt(string value);
}
internal static class Microsoft.ReportingServices.RdlObjectModel.Constants : object {
    public static string DesignerNamespace;
    public static string DefinitionNamespace;
    public static char ExpressionPrefix;
    public static string DefaultFontFamily;
    public static string DefaultGaugeIndicatorOffString;
    public static string DefaultGaugeIndicatorOutOfRangeString;
    public static ReportSize DefaultPageHeight;
    public static ReportSize DefaultPageWidth;
    public static ReportSize DefaultColumnSpacing;
    public static ReportSize DefaultEmptySize;
    public static ReportSize DefaultZeroSize;
    public static ReportColor DefaultEmptyColor;
    public static ReportSize DefaultFontSize;
    public static ReportSize MinimumFontSize;
    public static ReportSize MaximumFontSize;
    public static ReportSize MinimumPadding;
    public static ReportSize MaximumPadding;
    public static ReportSize MinimumLineHeight;
    public static ReportSize MaximumLineHeight;
    public static ReportColor DefaultColor;
    public static ReportColor DefaultBorderColor;
    public static ReportColor DefaultDigitColor;
    public static ReportColor DefaultDecimalDigitColor;
    public static ReportColor DefaultSeparatorColor;
    public static ReportSize DefaultBorderWidth;
    public static ReportSize MinimumBorderWidth;
    public static ReportSize MaximumBorderWidth;
    public static ReportSize MaximumMargin;
    public static ReportSize MinimumMargin;
    public static ReportSize MinimumItemSize;
    public static ReportSize MaximumItemSize;
    private static Constants();
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.ContainedObject : object {
    private IContainedObject m_parent;
    [XmlIgnoreAttribute]
public IContainedObject Parent { get; public set; }
    public sealed virtual IContainedObject get_Parent();
    public sealed virtual void set_Parent(IContainedObject value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.CustomData : DataRegionBody {
    public string DataSetName { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Filter>")]
public IList`1<Filter> Filters { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> SortExpressions { get; public set; }
    public DataHierarchy DataColumnHierarchy { get; public set; }
    public DataHierarchy DataRowHierarchy { get; public set; }
    [XmlArrayItemAttribute("DataCell", "Microsoft.ReportingServices.RdlObjectModel.DataCell")]
[XmlArrayItemAttribute("DataRow", "Microsoft.ReportingServices.RdlObjectModel.DataRow")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<System.Collections.Generic.IList`1<System.Collections.Generic.IList`1<Microsoft.ReportingServices.RdlObjectModel.DataValue>>>")]
public IList`1<IList`1<IList`1<DataValue>>> DataRows { get; public set; }
    public CustomData(IPropertyStore propertyStore);
    public string get_DataSetName();
    public void set_DataSetName(string value);
    public IList`1<Filter> get_Filters();
    public void set_Filters(IList`1<Filter> value);
    public IList`1<SortExpression> get_SortExpressions();
    public void set_SortExpressions(IList`1<SortExpression> value);
    public DataHierarchy get_DataColumnHierarchy();
    public void set_DataColumnHierarchy(DataHierarchy value);
    public DataHierarchy get_DataRowHierarchy();
    public void set_DataRowHierarchy(DataHierarchy value);
    public IList`1<IList`1<IList`1<DataValue>>> get_DataRows();
    public void set_DataRows(IList`1<IList`1<IList`1<DataValue>>> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.CustomLabel : ReportObject {
    public string Name { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Text { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> AllowUpsideDown { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> DistanceFromScale { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> FontAngle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.Placements", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<Placements> Placement { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> RotateLabel { get; public set; }
    public TickMarkStyle TickMarkStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UseFontPercent { get; public set; }
    public CustomLabel(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression get_Text();
    public void set_Text(ReportExpression value);
    public ReportExpression`1<bool> get_AllowUpsideDown();
    public void set_AllowUpsideDown(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_DistanceFromScale();
    public void set_DistanceFromScale(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_FontAngle();
    public void set_FontAngle(ReportExpression`1<double> value);
    public ReportExpression`1<Placements> get_Placement();
    public void set_Placement(ReportExpression`1<Placements> value);
    public ReportExpression`1<bool> get_RotateLabel();
    public void set_RotateLabel(ReportExpression`1<bool> value);
    public TickMarkStyle get_TickMarkStyle();
    public void set_TickMarkStyle(TickMarkStyle value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_UseFontPercent();
    public void set_UseFontPercent(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.CustomProperty : ReportObject {
    public ReportExpression Name { get; public set; }
    public ReportExpression Value { get; public set; }
    public CustomProperty(IPropertyStore propertyStore);
    public ReportExpression get_Name();
    public void set_Name(ReportExpression value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.CustomReportItem : ReportItem {
    public string Type { get; public set; }
    public AltReportItem AltReportItem { get; public set; }
    public CustomData CustomData { get; public set; }
    public CustomReportItem(IPropertyStore propertyStore);
    public string get_Type();
    public void set_Type(string value);
    public AltReportItem get_AltReportItem();
    public void set_AltReportItem(AltReportItem value);
    public CustomData get_CustomData();
    public void set_CustomData(CustomData value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataCell : RdlCollection`1<DataValue> {
}
internal enum Microsoft.ReportingServices.RdlObjectModel.DataElementOutputTypes : Enum {
    public int value__;
    public static DataElementOutputTypes Auto;
    public static DataElementOutputTypes Output;
    public static DataElementOutputTypes NoOutput;
    public static DataElementOutputTypes ContentsOnly;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.DataElementStyles : Enum {
    public int value__;
    public static DataElementStyles Auto;
    public static DataElementStyles Attribute;
    public static DataElementStyles Element;
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataHierarchy : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.DataMember>")]
public IList`1<DataMember> DataMembers { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.Members { get; }
    public DataHierarchy(IPropertyStore propertyStore);
    public IList`1<DataMember> get_DataMembers();
    public void set_DataMembers(IList`1<DataMember> value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.get_Members();
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataMember : HierarchyMember {
    public Group Group { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> SortExpressions { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.DataMember>")]
public IList`1<DataMember> DataMembers { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.Members { get; }
    public DataMember(IPropertyStore propertyStore);
    public virtual Group get_Group();
    public virtual void set_Group(Group value);
    public sealed virtual IList`1<SortExpression> get_SortExpressions();
    public sealed virtual void set_SortExpressions(IList`1<SortExpression> value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public IList`1<DataMember> get_DataMembers();
    public void set_DataMembers(IList`1<DataMember> value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.get_Members();
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.DataRegion : ReportItem {
    [DefaultValueAttribute("False")]
public bool KeepTogether { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NoRowsMessage { get; public set; }
    [DefaultValueAttribute("")]
public string DataSetName { get; public set; }
    public PageBreak PageBreak { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Filter>")]
public IList`1<Filter> Filters { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> SortExpressions { get; public set; }
    public DataRegion(IPropertyStore propertyStore);
    public bool get_KeepTogether();
    public void set_KeepTogether(bool value);
    public ReportExpression get_NoRowsMessage();
    public void set_NoRowsMessage(ReportExpression value);
    public string get_DataSetName();
    public void set_DataSetName(string value);
    public sealed virtual PageBreak get_PageBreak();
    public sealed virtual void set_PageBreak(PageBreak value);
    public IList`1<Filter> get_Filters();
    public void set_Filters(IList`1<Filter> value);
    public IList`1<SortExpression> get_SortExpressions();
    public void set_SortExpressions(IList`1<SortExpression> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataRegionBody : ReportObject {
    public DataRegionBody(IPropertyStore propertyStore);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.DataRegionCell : ReportObject {
    public DataRegionCell(IPropertyStore propertyStore);
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataRow : RdlCollection`1<IList`1<DataValue>> {
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataSet : ReportObject {
    public string Name { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Field>")]
public IList`1<Field> Fields { get; public set; }
    public Query Query { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CaseSensitivities CaseSensitivity { get; public set; }
    [DefaultValueAttribute("")]
public string Collation { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AccentSensitivities AccentSensitivity { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public KanatypeSensitivities KanatypeSensitivity { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public WidthSensitivities WidthSensitivity { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public InterpretSubtotalsAsDetailsTypes InterpretSubtotalsAsDetails { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Filter>")]
public IList`1<Filter> Filters { get; public set; }
    public DataSet(IPropertyStore propertyStore);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IList`1<Field> get_Fields();
    public void set_Fields(IList`1<Field> value);
    public Query get_Query();
    public void set_Query(Query value);
    public CaseSensitivities get_CaseSensitivity();
    public void set_CaseSensitivity(CaseSensitivities value);
    public string get_Collation();
    public void set_Collation(string value);
    public AccentSensitivities get_AccentSensitivity();
    public void set_AccentSensitivity(AccentSensitivities value);
    public KanatypeSensitivities get_KanatypeSensitivity();
    public void set_KanatypeSensitivity(KanatypeSensitivities value);
    public WidthSensitivities get_WidthSensitivity();
    public void set_WidthSensitivity(WidthSensitivities value);
    public InterpretSubtotalsAsDetailsTypes get_InterpretSubtotalsAsDetails();
    public void set_InterpretSubtotalsAsDetails(InterpretSubtotalsAsDetailsTypes value);
    public IList`1<Filter> get_Filters();
    public void set_Filters(IList`1<Filter> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataSetReference : ReportObject {
    public string DataSetName { get; public set; }
    public string ValueField { get; public set; }
    [DefaultValueAttribute("")]
public string LabelField { get; public set; }
    public DataSetReference(IPropertyStore propertyStore);
    public string get_DataSetName();
    public void set_DataSetName(string value);
    public string get_ValueField();
    public void set_ValueField(string value);
    public string get_LabelField();
    public void set_LabelField(string value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataSource : ReportObject {
    public string Name { get; public set; }
    [DefaultValueAttribute("False")]
public bool Transaction { get; public set; }
    public ConnectionProperties ConnectionProperties { get; public set; }
    [DefaultValueAttribute("")]
public string DataSourceReference { get; public set; }
    public DataSource(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public bool get_Transaction();
    public void set_Transaction(bool value);
    public ConnectionProperties get_ConnectionProperties();
    public void set_ConnectionProperties(ConnectionProperties value);
    public string get_DataSourceReference();
    public void set_DataSourceReference(string value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.DataTypes : Enum {
    public int value__;
    public static DataTypes String;
    public static DataTypes Boolean;
    public static DataTypes DateTime;
    public static DataTypes Integer;
    public static DataTypes Float;
}
internal class Microsoft.ReportingServices.RdlObjectModel.DataValue : ReportObject {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Name { get; public set; }
    public ReportExpression Value { get; public set; }
    public DataValue(IPropertyStore propertyStore);
    public ReportExpression get_Name();
    public void set_Name(ReportExpression value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.DefaultValue : ReportObject {
    public DataSetReference DataSetReference { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<System.Nullable`1<Microsoft.ReportingServices.RdlObjectModel.ReportExpression>>")]
[XmlArrayItemAttribute("Value", "Microsoft.ReportingServices.RdlObjectModel.ReportExpression")]
public IList`1<Nullable`1<ReportExpression>> Values { get; public set; }
    public DefaultValue(IPropertyStore propertyStore);
    public DataSetReference get_DataSetReference();
    public void set_DataSetReference(DataSetReference value);
    public IList`1<Nullable`1<ReportExpression>> get_Values();
    public void set_Values(IList`1<Nullable`1<ReportExpression>> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.DefaultValueConstantAttribute : DefaultValueAttribute {
    public DefaultValueConstantAttribute(string field);
    internal static object GetConstant(string field);
}
internal class Microsoft.ReportingServices.RdlObjectModel.DefinitionStore`2 : object {
    private static PropertyStore m_propertyDefinitions;
    private static ReaderWriterLock m_lock;
    private static DefinitionStore`2();
    public static IPropertyDefinition GetProperty(int index);
}
internal class Microsoft.ReportingServices.RdlObjectModel.DoubleProperty : ComparablePropertyDefinition`1<double> {
    public DoubleProperty(string name, Nullable`1<double> defaultValue);
    public DoubleProperty(string name, Nullable`1<double> defaultValue, Nullable`1<double> minimum, Nullable`1<double> maximum);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Drillthrough : ReportObject {
    public ReportExpression ReportName { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Parameter>")]
public IList`1<Parameter> Parameters { get; public set; }
    public Drillthrough(IPropertyStore propertyStore);
    public ReportExpression get_ReportName();
    public void set_ReportName(ReportExpression value);
    public IList`1<Parameter> get_Parameters();
    public void set_Parameters(IList`1<Parameter> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.EmbeddedImage : ReportObject {
    public string Name { get; public set; }
    public string MIMEType { get; public set; }
    public ImageData ImageData { get; public set; }
    public EmbeddedImage(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public string get_MIMEType();
    public void set_MIMEType(string value);
    public ImageData get_ImageData();
    public void set_ImageData(ImageData value);
}
[XmlElementClassAttribute("Border")]
internal class Microsoft.ReportingServices.RdlObjectModel.EmptyBorder : Border {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> Color { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.BorderStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<BorderStyles> Style { get; public set; }
    public EmptyBorder(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_Color();
    public void set_Color(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<BorderStyles> get_Style();
    public void set_Style(ReportExpression`1<BorderStyles> value);
    public virtual void Initialize();
    private sealed virtual override bool Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeThis();
    private sealed virtual override SerializationMethod Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeProperty(string property);
}
[XmlElementClassAttribute("Style")]
internal class Microsoft.ReportingServices.RdlObjectModel.EmptyColorStyle : Style {
    public EmptyBorder Border { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> Color { get; public set; }
    public EmptyColorStyle(IPropertyStore propertyStore);
    public EmptyBorder get_Border();
    public void set_Border(EmptyBorder value);
    public ReportExpression`1<ReportColor> get_Color();
    public void set_Color(ReportExpression`1<ReportColor> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.EnumNamesAttribute : Attribute {
    private IList`1<string> m_names;
    public IList`1<string> Names { get; }
    public EnumNamesAttribute(Type type, string field);
    public IList`1<string> get_Names();
}
internal class Microsoft.ReportingServices.RdlObjectModel.EnumProperty : PropertyDefinition {
    private object m_default;
    private IList`1<int> m_validIntValues;
    private IList`1<object> m_validValues;
    private Type m_type;
    public object Default { get; }
    public IList`1<object> ValidValues { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Minimum { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Maximum { get; }
    public EnumProperty(string name, Type enumType, object defaultValue, IList`1<int> validValues);
    public sealed virtual object get_Default();
    public IList`1<object> get_ValidValues();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Minimum();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Maximum();
    private sealed virtual override void Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Validate(object component, object value);
    public void Validate(object component, int value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.EvaluationMode : Enum {
    public int value__;
    public static EvaluationMode Auto;
    public static EvaluationMode Constant;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Field : ReportObject {
    public string Name { get; public set; }
    public string DataField { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    public Field(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public string get_DataField();
    public void set_DataField(string value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Filter : ReportObject {
    public ReportExpression FilterExpression { get; public set; }
    public Operators Operator { get; public set; }
    [XmlArrayItemAttribute("FilterValue", "Microsoft.ReportingServices.RdlObjectModel.ReportExpression")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportExpression>")]
public IList`1<ReportExpression> FilterValues { get; public set; }
    public Filter(IPropertyStore propertyStore);
    public ReportExpression get_FilterExpression();
    public void set_FilterExpression(ReportExpression value);
    public Operators get_Operator();
    public void set_Operator(Operators value);
    public IList`1<ReportExpression> get_FilterValues();
    public void set_FilterValues(IList`1<ReportExpression> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.FontStyles : Enum {
    public int value__;
    public static FontStyles Default;
    public static FontStyles Normal;
    public static FontStyles Italic;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.FontWeights : Enum {
    public int value__;
    public static FontWeights Default;
    public static FontWeights Normal;
    public static FontWeights Thin;
    public static FontWeights ExtraLight;
    public static FontWeights Light;
    public static FontWeights Medium;
    public static FontWeights SemiBold;
    public static FontWeights Bold;
    public static FontWeights ExtraBold;
    public static FontWeights Heavy;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.FormulaTypes : Enum {
    public int value__;
    public static FormulaTypes None;
    public static FormulaTypes Average;
    public static FormulaTypes Linear;
    public static FormulaTypes Max;
    public static FormulaTypes Min;
    public static FormulaTypes Median;
    public static FormulaTypes OpenClose;
    public static FormulaTypes Percentile;
    public static FormulaTypes Variance;
    public static FormulaTypes RateOfChange;
    public static FormulaTypes Integral;
}
internal class Microsoft.ReportingServices.RdlObjectModel.FrameBackground : ReportObject {
    public Style Style { get; public set; }
    public FrameBackground(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.FrameImage : BaseGaugeImage {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> HueColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Transparency { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> ClipImage { get; public set; }
    public FrameImage(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_HueColor();
    public void set_HueColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<double> get_Transparency();
    public void set_Transparency(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_ClipImage();
    public void set_ClipImage(ReportExpression`1<bool> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.FrameShapes : Enum {
    public int value__;
    public static FrameShapes Default;
    public static FrameShapes Circular;
    public static FrameShapes Rectangular;
    public static FrameShapes RoundedRectangular;
    public static FrameShapes AutoShape;
    public static FrameShapes CustomCircular1;
    public static FrameShapes CustomCircular2;
    public static FrameShapes CustomCircular3;
    public static FrameShapes CustomCircular4;
    public static FrameShapes CustomCircular5;
    public static FrameShapes CustomCircular6;
    public static FrameShapes CustomCircular7;
    public static FrameShapes CustomCircular8;
    public static FrameShapes CustomCircular9;
    public static FrameShapes CustomCircular10;
    public static FrameShapes CustomCircular11;
    public static FrameShapes CustomCircular12;
    public static FrameShapes CustomCircular13;
    public static FrameShapes CustomCircular14;
    public static FrameShapes CustomCircular15;
    public static FrameShapes CustomSemiCircularN1;
    public static FrameShapes CustomSemiCircularN2;
    public static FrameShapes CustomSemiCircularN3;
    public static FrameShapes CustomSemiCircularN4;
    public static FrameShapes CustomSemiCircularS1;
    public static FrameShapes CustomSemiCircularS2;
    public static FrameShapes CustomSemiCircularS3;
    public static FrameShapes CustomSemiCircularS4;
    public static FrameShapes CustomSemiCircularE1;
    public static FrameShapes CustomSemiCircularE2;
    public static FrameShapes CustomSemiCircularE3;
    public static FrameShapes CustomSemiCircularE4;
    public static FrameShapes CustomSemiCircularW1;
    public static FrameShapes CustomSemiCircularW2;
    public static FrameShapes CustomSemiCircularW3;
    public static FrameShapes CustomSemiCircularW4;
    public static FrameShapes CustomQuarterCircularNE1;
    public static FrameShapes CustomQuarterCircularNE2;
    public static FrameShapes CustomQuarterCircularNE3;
    public static FrameShapes CustomQuarterCircularNE4;
    public static FrameShapes CustomQuarterCircularNW1;
    public static FrameShapes CustomQuarterCircularNW2;
    public static FrameShapes CustomQuarterCircularNW3;
    public static FrameShapes CustomQuarterCircularNW4;
    public static FrameShapes CustomQuarterCircularSE1;
    public static FrameShapes CustomQuarterCircularSE2;
    public static FrameShapes CustomQuarterCircularSE3;
    public static FrameShapes CustomQuarterCircularSE4;
    public static FrameShapes CustomQuarterCircularSW1;
    public static FrameShapes CustomQuarterCircularSW2;
    public static FrameShapes CustomQuarterCircularSW3;
    public static FrameShapes CustomQuarterCircularSW4;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.FrameStyles : Enum {
    public int value__;
    public static FrameStyles None;
    public static FrameStyles Simple;
    public static FrameStyles Edged;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Gauge : GaugePanelItem {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.GaugeScale>")]
public IList`1<GaugeScale> GaugeScales { get; public set; }
    public BackFrame BackFrame { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> ClipContent { get; public set; }
    public TopImage TopImage { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> AspectRatio { get; public set; }
    public Gauge(IPropertyStore propertyStore);
    public IList`1<GaugeScale> get_GaugeScales();
    public void set_GaugeScales(IList`1<GaugeScale> value);
    public BackFrame get_BackFrame();
    public void set_BackFrame(BackFrame value);
    public ReportExpression`1<bool> get_ClipContent();
    public void set_ClipContent(ReportExpression`1<bool> value);
    public TopImage get_TopImage();
    public void set_TopImage(TopImage value);
    public ReportExpression`1<double> get_AspectRatio();
    public void set_AspectRatio(ReportExpression`1<double> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.GaugeBackgroundGradients : Enum {
    public int value__;
    public static GaugeBackgroundGradients StartToEnd;
    public static GaugeBackgroundGradients None;
    public static GaugeBackgroundGradients LeftRight;
    public static GaugeBackgroundGradients TopBottom;
    public static GaugeBackgroundGradients Center;
    public static GaugeBackgroundGradients DiagonalLeft;
    public static GaugeBackgroundGradients DiagonalRight;
    public static GaugeBackgroundGradients HorizontalCenter;
    public static GaugeBackgroundGradients VerticalCenter;
}
internal class Microsoft.ReportingServices.RdlObjectModel.GaugeImage : GaugePanelItem {
    public ReportExpression`1<SourceType> Source { get; public set; }
    public ReportExpression Value { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression MIMEType { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> TransparentColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Angle { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Transparency { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ResizeModes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ResizeModes> ResizeMode { get; public set; }
    public GaugeImage(IPropertyStore propertyStore);
    public ReportExpression`1<SourceType> get_Source();
    public void set_Source(ReportExpression`1<SourceType> value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ReportExpression get_MIMEType();
    public void set_MIMEType(ReportExpression value);
    public ReportExpression`1<ReportColor> get_TransparentColor();
    public void set_TransparentColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<double> get_Angle();
    public void set_Angle(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Transparency();
    public void set_Transparency(ReportExpression`1<double> value);
    public ReportExpression`1<ResizeModes> get_ResizeMode();
    public void set_ResizeMode(ReportExpression`1<ResizeModes> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.GaugeInputValue : ReportObject {
    public ReportExpression Value { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.FormulaTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<FormulaTypes> Formula { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> MinPercent { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> MaxPercent { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Multiplier { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> AddConstant { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("GaugeInputValueDataElementOutputTypes")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    public GaugeInputValue(IPropertyStore propertyStore);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ReportExpression`1<FormulaTypes> get_Formula();
    public void set_Formula(ReportExpression`1<FormulaTypes> value);
    public ReportExpression`1<double> get_MinPercent();
    public void set_MinPercent(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_MaxPercent();
    public void set_MaxPercent(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Multiplier();
    public void set_Multiplier(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_AddConstant();
    public void set_AddConstant(ReportExpression`1<double> value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.GaugeLabel : GaugePanelItem {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Text { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Angle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ResizeModes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ResizeModes> ResizeMode { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> TextShadowOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UseFontPercent { get; public set; }
    public GaugeLabel(IPropertyStore propertyStore);
    public ReportExpression get_Text();
    public void set_Text(ReportExpression value);
    public ReportExpression`1<double> get_Angle();
    public void set_Angle(ReportExpression`1<double> value);
    public ReportExpression`1<ResizeModes> get_ResizeMode();
    public void set_ResizeMode(ReportExpression`1<ResizeModes> value);
    public ReportExpression`1<ReportSize> get_TextShadowOffset();
    public void set_TextShadowOffset(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<bool> get_UseFontPercent();
    public void set_UseFontPercent(ReportExpression`1<bool> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.GaugeMember : HierarchyMember {
    public Group Group { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> SortExpressions { get; public set; }
    [XmlElementAttribute("GaugeMember")]
public GaugeMember ChildGaugeMember { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.Members { get; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.Members { get; }
    public GaugeMember(IPropertyStore propertyStore);
    public virtual Group get_Group();
    public virtual void set_Group(Group value);
    public sealed virtual IList`1<SortExpression> get_SortExpressions();
    public sealed virtual void set_SortExpressions(IList`1<SortExpression> value);
    public GaugeMember get_ChildGaugeMember();
    public void set_ChildGaugeMember(GaugeMember value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.get_Members();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.get_Members();
}
internal class Microsoft.ReportingServices.RdlObjectModel.GaugePanel : DataRegion {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.LinearGauge>")]
public IList`1<LinearGauge> LinearGauges { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.RadialGauge>")]
public IList`1<RadialGauge> RadialGauges { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.NumericIndicator>")]
public IList`1<NumericIndicator> NumericIndicators { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.StateIndicator>")]
public IList`1<StateIndicator> StateIndicators { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.GaugeImage>")]
public IList`1<GaugeImage> GaugeImages { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.GaugeLabel>")]
public IList`1<GaugeLabel> GaugeLabels { get; public set; }
    public GaugeMember GaugeMember { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.AntiAliasingTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<AntiAliasingTypes> AntiAliasing { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> AutoLayout { get; public set; }
    public BackFrame BackFrame { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
[ValidValuesAttribute("0", "100")]
public ReportExpression`1<double> ShadowIntensity { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextAntiAliasingQualityTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextAntiAliasingQualityTypes> TextAntiAliasingQuality { get; public set; }
    public TopImage TopImage { get; public set; }
    public GaugePanel(IPropertyStore propertyStore);
    public IList`1<LinearGauge> get_LinearGauges();
    public void set_LinearGauges(IList`1<LinearGauge> value);
    public IList`1<RadialGauge> get_RadialGauges();
    public void set_RadialGauges(IList`1<RadialGauge> value);
    public IList`1<NumericIndicator> get_NumericIndicators();
    public void set_NumericIndicators(IList`1<NumericIndicator> value);
    public IList`1<StateIndicator> get_StateIndicators();
    public void set_StateIndicators(IList`1<StateIndicator> value);
    public IList`1<GaugeImage> get_GaugeImages();
    public void set_GaugeImages(IList`1<GaugeImage> value);
    public IList`1<GaugeLabel> get_GaugeLabels();
    public void set_GaugeLabels(IList`1<GaugeLabel> value);
    public GaugeMember get_GaugeMember();
    public void set_GaugeMember(GaugeMember value);
    public ReportExpression`1<AntiAliasingTypes> get_AntiAliasing();
    public void set_AntiAliasing(ReportExpression`1<AntiAliasingTypes> value);
    public ReportExpression`1<bool> get_AutoLayout();
    public void set_AutoLayout(ReportExpression`1<bool> value);
    public BackFrame get_BackFrame();
    public void set_BackFrame(BackFrame value);
    public ReportExpression`1<double> get_ShadowIntensity();
    public void set_ShadowIntensity(ReportExpression`1<double> value);
    public ReportExpression`1<TextAntiAliasingQualityTypes> get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(ReportExpression`1<TextAntiAliasingQualityTypes> value);
    public TopImage get_TopImage();
    public void set_TopImage(TopImage value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.GaugePanelItem : ReportObject {
    public string Name { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Top { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Left { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Height { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Width { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> ZIndex { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [DefaultValueAttribute("")]
public string ParentItem { get; public set; }
    public GaugePanelItem(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<double> get_Top();
    public void set_Top(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Left();
    public void set_Left(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Height();
    public void set_Height(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Width();
    public void set_Width(ReportExpression`1<double> value);
    public ReportExpression`1<int> get_ZIndex();
    public void set_ZIndex(ReportExpression`1<int> value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public string get_ParentItem();
    public void set_ParentItem(string value);
}
[XmlElementClassAttribute("RadialPointer", "Microsoft.ReportingServices.RdlObjectModel.RadialPointer")]
[XmlElementClassAttribute("LinearPointer", "Microsoft.ReportingServices.RdlObjectModel.LinearPointer")]
internal class Microsoft.ReportingServices.RdlObjectModel.GaugePointer : ReportObject {
    public string Name { get; public set; }
    public Style Style { get; public set; }
    public GaugeInputValue GaugeInputValue { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.BarStartTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<BarStartTypes> BarStart { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> DistanceFromScale { get; public set; }
    public PointerImage PointerImage { get; public set; }
    public ReportExpression`1<double> MarkerLength { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.MarkerStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<MarkerStyles> MarkerStyle { get; public set; }
    public ReportExpression`1<Placements> Placement { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> SnappingEnabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> SnappingInterval { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    public ReportExpression`1<double> Width { get; public set; }
    public GaugePointer(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public Style get_Style();
    public void set_Style(Style value);
    public GaugeInputValue get_GaugeInputValue();
    public void set_GaugeInputValue(GaugeInputValue value);
    public ReportExpression`1<BarStartTypes> get_BarStart();
    public void set_BarStart(ReportExpression`1<BarStartTypes> value);
    public ReportExpression`1<double> get_DistanceFromScale();
    public void set_DistanceFromScale(ReportExpression`1<double> value);
    public PointerImage get_PointerImage();
    public void set_PointerImage(PointerImage value);
    public ReportExpression`1<double> get_MarkerLength();
    public void set_MarkerLength(ReportExpression`1<double> value);
    public ReportExpression`1<MarkerStyles> get_MarkerStyle();
    public void set_MarkerStyle(ReportExpression`1<MarkerStyles> value);
    public ReportExpression`1<Placements> get_Placement();
    public void set_Placement(ReportExpression`1<Placements> value);
    public ReportExpression`1<bool> get_SnappingEnabled();
    public void set_SnappingEnabled(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_SnappingInterval();
    public void set_SnappingInterval(ReportExpression`1<double> value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_Width();
    public void set_Width(ReportExpression`1<double> value);
    public virtual void Initialize();
}
[XmlElementClassAttribute("RadialScale", "Microsoft.ReportingServices.RdlObjectModel.RadialScale")]
[XmlElementClassAttribute("LinearScale", "Microsoft.ReportingServices.RdlObjectModel.LinearScale")]
internal class Microsoft.ReportingServices.RdlObjectModel.GaugeScale : ReportObject {
    public string Name { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.GaugePointer>")]
public IList`1<GaugePointer> GaugePointers { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ScaleRange>")]
public IList`1<ScaleRange> ScaleRanges { get; public set; }
    public Style Style { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomLabel>")]
public IList`1<CustomLabel> CustomLabels { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Interval { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> IntervalOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Logarithmic { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> LogarithmicBase { get; public set; }
    public GaugeInputValue MaximumValue { get; public set; }
    public GaugeInputValue MinimumValue { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Multiplier { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Reversed { get; public set; }
    public GaugeTickMarks GaugeMajorTickMarks { get; public set; }
    public GaugeTickMarks GaugeMinorTickMarks { get; public set; }
    public ScalePin MaximumPin { get; public set; }
    public ScalePin MinimumPin { get; public set; }
    public ScaleLabels ScaleLabels { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> TickMarksOnTop { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Width { get; public set; }
    public GaugeScale(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public IList`1<GaugePointer> get_GaugePointers();
    public void set_GaugePointers(IList`1<GaugePointer> value);
    public IList`1<ScaleRange> get_ScaleRanges();
    public void set_ScaleRanges(IList`1<ScaleRange> value);
    public Style get_Style();
    public void set_Style(Style value);
    public IList`1<CustomLabel> get_CustomLabels();
    public void set_CustomLabels(IList`1<CustomLabel> value);
    public ReportExpression`1<double> get_Interval();
    public void set_Interval(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_IntervalOffset();
    public void set_IntervalOffset(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_Logarithmic();
    public void set_Logarithmic(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_LogarithmicBase();
    public void set_LogarithmicBase(ReportExpression`1<double> value);
    public GaugeInputValue get_MaximumValue();
    public void set_MaximumValue(GaugeInputValue value);
    public GaugeInputValue get_MinimumValue();
    public void set_MinimumValue(GaugeInputValue value);
    public ReportExpression`1<double> get_Multiplier();
    public void set_Multiplier(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_Reversed();
    public void set_Reversed(ReportExpression`1<bool> value);
    public GaugeTickMarks get_GaugeMajorTickMarks();
    public void set_GaugeMajorTickMarks(GaugeTickMarks value);
    public GaugeTickMarks get_GaugeMinorTickMarks();
    public void set_GaugeMinorTickMarks(GaugeTickMarks value);
    public ScalePin get_MaximumPin();
    public void set_MaximumPin(ScalePin value);
    public ScalePin get_MinimumPin();
    public void set_MinimumPin(ScalePin value);
    public ScaleLabels get_ScaleLabels();
    public void set_ScaleLabels(ScaleLabels value);
    public ReportExpression`1<bool> get_TickMarksOnTop();
    public void set_TickMarksOnTop(ReportExpression`1<bool> value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_Width();
    public void set_Width(ReportExpression`1<double> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.GaugeTickMarks : TickMarkStyle {
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Interval { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> IntervalOffset { get; public set; }
    public GaugeTickMarks(IPropertyStore propertyStore);
    public ReportExpression`1<double> get_Interval();
    public void set_Interval(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_IntervalOffset();
    public void set_IntervalOffset(ReportExpression`1<double> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.GlassEffects : Enum {
    public int value__;
    public static GlassEffects None;
    public static GlassEffects Simple;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Group : ReportObject {
    public string Name { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression DocumentMapLabel { get; public set; }
    [XmlArrayItemAttribute("GroupExpression", "Microsoft.ReportingServices.RdlObjectModel.ReportExpression")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportExpression>")]
public IList`1<ReportExpression> GroupExpressions { get; public set; }
    [XmlArrayItemAttribute("GroupExpression", "Microsoft.ReportingServices.RdlObjectModel.ReportExpression")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportExpression>")]
public IList`1<ReportExpression> ReGroupExpressions { get; public set; }
    public PageBreak PageBreak { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Filter>")]
public IList`1<Filter> Filters { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Parent { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("GroupDataElementOutputTypes")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Variable>")]
public IList`1<Variable> Variables { get; public set; }
    public Group(IPropertyStore propertyStore);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public ReportExpression get_DocumentMapLabel();
    public void set_DocumentMapLabel(ReportExpression value);
    public IList`1<ReportExpression> get_GroupExpressions();
    public void set_GroupExpressions(IList`1<ReportExpression> value);
    public IList`1<ReportExpression> get_ReGroupExpressions();
    public void set_ReGroupExpressions(IList`1<ReportExpression> value);
    public sealed virtual PageBreak get_PageBreak();
    public sealed virtual void set_PageBreak(PageBreak value);
    public IList`1<Filter> get_Filters();
    public void set_Filters(IList`1<Filter> value);
    public ReportExpression get_Parent();
    public void set_Parent(ReportExpression value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public IList`1<Variable> get_Variables();
    public void set_Variables(IList`1<Variable> value);
    public virtual void Initialize();
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.HierarchyMember : ReportObject {
    public Group Group { get; public set; }
    public HierarchyMember(IPropertyStore propertyStore);
    public abstract virtual Group get_Group();
    public abstract virtual void set_Group(Group value);
}
internal interface Microsoft.ReportingServices.RdlObjectModel.IContainedObject {
    public IContainedObject Parent { get; public set; }
    public abstract virtual IContainedObject get_Parent();
    public abstract virtual void set_Parent(IContainedObject value);
}
internal interface Microsoft.ReportingServices.RdlObjectModel.IExpression {
    public object Value { get; public set; }
    public string Expression { get; public set; }
    public bool IsExpression { get; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual string get_Expression();
    public abstract virtual void set_Expression(string value);
    public abstract virtual bool get_IsExpression();
}
internal interface Microsoft.ReportingServices.RdlObjectModel.IGlobalNamedObject {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
internal interface Microsoft.ReportingServices.RdlObjectModel.IHierarchy {
    public IEnumerable`1<IHierarchyMember> Members { get; }
    public abstract virtual IEnumerable`1<IHierarchyMember> get_Members();
}
internal interface Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember {
    public Group Group { get; public set; }
    public IList`1<SortExpression> SortExpressions { get; public set; }
    public IEnumerable`1<IHierarchyMember> Members { get; }
    public abstract virtual Group get_Group();
    public abstract virtual void set_Group(Group value);
    public abstract virtual IList`1<SortExpression> get_SortExpressions();
    public abstract virtual void set_SortExpressions(IList`1<SortExpression> value);
    public abstract virtual IEnumerable`1<IHierarchyMember> get_Members();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Image : ReportItem {
    public SourceType Source { get; public set; }
    public ReportExpression Value { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression MIMEType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Sizings Sizing { get; public set; }
    public Image(IPropertyStore propertyStore);
    public SourceType get_Source();
    public void set_Source(SourceType value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ReportExpression get_MIMEType();
    public void set_MIMEType(ReportExpression value);
    public Sizings get_Sizing();
    public void set_Sizing(Sizings value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ImageData : ValueType {
    private Byte[] m_data;
    public Byte[] Bytes { get; public set; }
    public ImageData(Byte[] bytes);
    public Byte[] get_Bytes();
    public void set_Bytes(Byte[] value);
    public static ImageData op_Implicit(Byte[] bytes);
    public static Byte[] op_Explicit(ImageData value);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
internal class Microsoft.ReportingServices.RdlObjectModel.IndicatorState : ReportObject {
    public string Name { get; public set; }
    public Style Style { get; public set; }
    public GaugeInputValue StartValue { get; public set; }
    public GaugeInputValue EndValue { get; public set; }
    public StateImage StateImage { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Text { get; public set; }
    public IndicatorState(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public Style get_Style();
    public void set_Style(Style value);
    public GaugeInputValue get_StartValue();
    public void set_StartValue(GaugeInputValue value);
    public GaugeInputValue get_EndValue();
    public void set_EndValue(GaugeInputValue value);
    public StateImage get_StateImage();
    public void set_StateImage(StateImage value);
    public ReportExpression get_Text();
    public void set_Text(ReportExpression value);
}
internal static class Microsoft.ReportingServices.RdlObjectModel.InternalConstants : object {
    public static Int32[] ChartMemberDataElementOutputTypes;
    public static Int32[] GaugeMemberDataElementOutputTypes;
    public static Int32[] GaugeInputValueDataElementOutputTypes;
    public static Int32[] DataPointDataElementOutputTypes;
    public static Int32[] ReportDataElementOutputTypes;
    public static Int32[] TablixMemberDataElementOutputTypes;
    public static Int32[] ReportItemDataElementOutputTypes;
    public static Int32[] RectangleDataElementOutputTypes;
    public static Int32[] TablixCellDataElementOutputTypes;
    public static Int32[] GroupDataElementOutputTypes;
    private static InternalConstants();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.InterpretSubtotalsAsDetailsTypes : Enum {
    public int value__;
    public static InterpretSubtotalsAsDetailsTypes Auto;
    public static InterpretSubtotalsAsDetailsTypes True;
    public static InterpretSubtotalsAsDetailsTypes False;
}
internal class Microsoft.ReportingServices.RdlObjectModel.IntProperty : ComparablePropertyDefinition`1<int> {
    public IntProperty(string name, Nullable`1<int> defaultValue);
    public IntProperty(string name, Nullable`1<int> defaultValue, Nullable`1<int> minimum, Nullable`1<int> maximum);
}
internal interface Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition {
    public string Name { get; }
    public object Default { get; }
    public object Maximum { get; }
    public object Minimum { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Default();
    public abstract virtual object get_Maximum();
    public abstract virtual object get_Minimum();
    public abstract virtual void Validate(object component, object value);
}
internal interface Microsoft.ReportingServices.RdlObjectModel.IPropertyStore {
    public ReportObject Owner { get; }
    public IContainedObject Parent { get; public set; }
    public abstract virtual ReportObject get_Owner();
    public abstract virtual IContainedObject get_Parent();
    public abstract virtual void set_Parent(IContainedObject value);
    public abstract virtual void RemoveProperty(int propertyIndex);
    public abstract virtual object GetObject(int propertyIndex);
    public abstract virtual T GetObject(int propertyIndex);
    public abstract virtual void SetObject(int propertyIndex, object value);
    public abstract virtual void RemoveObject(int propertyIndex);
    public abstract virtual bool ContainsObject(int propertyIndex);
    public abstract virtual int GetInteger(int propertyIndex);
    public abstract virtual void SetInteger(int propertyIndex, int value);
    public abstract virtual void RemoveInteger(int propertyIndex);
    public abstract virtual bool ContainsInteger(int propertyIndex);
    public abstract virtual bool GetBoolean(int propertyIndex);
    public abstract virtual void SetBoolean(int propertyIndex, bool value);
    public abstract virtual void RemoveBoolean(int propertyIndex);
    public abstract virtual bool ContainsBoolean(int propertyIndex);
    public abstract virtual ReportSize GetSize(int propertyIndex);
    public abstract virtual void SetSize(int propertyIndex, ReportSize value);
    public abstract virtual void RemoveSize(int propertyIndex);
    public abstract virtual bool ContainsSize(int propertyIndex);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.KanatypeSensitivities : Enum {
    public int value__;
    public static KanatypeSensitivities Auto;
    public static KanatypeSensitivities True;
    public static KanatypeSensitivities False;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.KeepWithGroupTypes : Enum {
    public int value__;
    public static KeepWithGroupTypes None;
    public static KeepWithGroupTypes Before;
    public static KeepWithGroupTypes After;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.LayoutDirections : Enum {
    public int value__;
    public static LayoutDirections LTR;
    public static LayoutDirections RTL;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Line : ReportItem {
    public Line(IPropertyStore propertyStore);
}
internal class Microsoft.ReportingServices.RdlObjectModel.LinearGauge : Gauge {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.Orientations", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<Orientations> Orientation { get; public set; }
    public LinearGauge(IPropertyStore propertyStore);
    public ReportExpression`1<Orientations> get_Orientation();
    public void set_Orientation(ReportExpression`1<Orientations> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.LinearPointer : GaugePointer {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.LinearPointerTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<LinearPointerTypes> Type { get; public set; }
    public Thermometer Thermometer { get; public set; }
    public LinearPointer(IPropertyStore propertyStore);
    public ReportExpression`1<LinearPointerTypes> get_Type();
    public void set_Type(ReportExpression`1<LinearPointerTypes> value);
    public Thermometer get_Thermometer();
    public void set_Thermometer(Thermometer value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.LinearPointerTypes : Enum {
    public int value__;
    public static LinearPointerTypes Marker;
    public static LinearPointerTypes Bar;
    public static LinearPointerTypes Thermometer;
}
internal class Microsoft.ReportingServices.RdlObjectModel.LinearScale : GaugeScale {
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> StartMargin { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> EndMargin { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Position { get; public set; }
    public LinearScale(IPropertyStore propertyStore);
    public ReportExpression`1<double> get_StartMargin();
    public void set_StartMargin(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_EndMargin();
    public void set_EndMargin(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Position();
    public void set_Position(ReportExpression`1<double> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ListStyle : Enum {
    public int value__;
    public static ListStyle None;
    public static ListStyle Numbered;
    public static ListStyle Bulleted;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.MarkerStyles : Enum {
    public int value__;
    public static MarkerStyles None;
    public static MarkerStyles Rectangle;
    public static MarkerStyles Triangle;
    public static MarkerStyles Circle;
    public static MarkerStyles Diamond;
    public static MarkerStyles Trapezoid;
    public static MarkerStyles Star;
    public static MarkerStyles Wedge;
    public static MarkerStyles Pentagon;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.MarkupType : Enum {
    public int value__;
    public static MarkupType None;
    public static MarkupType HTML;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.NeedleStyles : Enum {
    public int value__;
    public static NeedleStyles Triangular;
    public static NeedleStyles Rectangular;
    public static NeedleStyles TaperedWithTail;
    public static NeedleStyles Tapered;
    public static NeedleStyles ArrowWithTail;
    public static NeedleStyles Arrow;
    public static NeedleStyles StealthArrowWithTail;
    public static NeedleStyles StealthArrow;
    public static NeedleStyles TaperedWithStealthArrow;
    public static NeedleStyles StealthArrowWithWideTail;
    public static NeedleStyles TaperedWithRoundedPoint;
}
internal class Microsoft.ReportingServices.RdlObjectModel.NumericIndicator : GaugePanelItem {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ResizeModes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ResizeModes> ResizeMode { get; public set; }
    public GaugeInputValue GaugeInputValue { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor", "DefaultDecimalDigitColor")]
public ReportExpression`1<ReportColor> DecimalDigitColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> DecimalDigits { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor", "DefaultDigitColor")]
public ReportExpression`1<ReportColor> DigitColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> Digits { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.NumericIndicatorStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<NumericIndicatorStyles> IndicatorStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> LedDimColor { get; public set; }
    public GaugeInputValue MaximumValue { get; public set; }
    public GaugeInputValue MinimumValue { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Multiplier { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("DefaultGaugeIndicatorOffString")]
public ReportExpression OffString { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("DefaultGaugeIndicatorOutOfRangeString")]
public ReportExpression OutOfRangeString { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.NumericIndicatorRange>")]
public IList`1<NumericIndicatorRange> NumericIndicatorRanges { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor", "DefaultSeparatorColor")]
public ReportExpression`1<ReportColor> SeparatorColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> SeparatorWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> ShowDecimalPoint { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> ShowLeadingZeros { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> ShowSign { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> SnappingEnabled { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> SnappingInterval { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UseFontPercent { get; public set; }
    public NumericIndicator(IPropertyStore propertyStore);
    public ReportExpression`1<ResizeModes> get_ResizeMode();
    public void set_ResizeMode(ReportExpression`1<ResizeModes> value);
    public GaugeInputValue get_GaugeInputValue();
    public void set_GaugeInputValue(GaugeInputValue value);
    public ReportExpression`1<ReportColor> get_DecimalDigitColor();
    public void set_DecimalDigitColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<int> get_DecimalDigits();
    public void set_DecimalDigits(ReportExpression`1<int> value);
    public ReportExpression`1<ReportColor> get_DigitColor();
    public void set_DigitColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<int> get_Digits();
    public void set_Digits(ReportExpression`1<int> value);
    public ReportExpression`1<NumericIndicatorStyles> get_IndicatorStyle();
    public void set_IndicatorStyle(ReportExpression`1<NumericIndicatorStyles> value);
    public ReportExpression`1<ReportColor> get_LedDimColor();
    public void set_LedDimColor(ReportExpression`1<ReportColor> value);
    public GaugeInputValue get_MaximumValue();
    public void set_MaximumValue(GaugeInputValue value);
    public GaugeInputValue get_MinimumValue();
    public void set_MinimumValue(GaugeInputValue value);
    public ReportExpression`1<double> get_Multiplier();
    public void set_Multiplier(ReportExpression`1<double> value);
    public ReportExpression get_OffString();
    public void set_OffString(ReportExpression value);
    public ReportExpression get_OutOfRangeString();
    public void set_OutOfRangeString(ReportExpression value);
    public IList`1<NumericIndicatorRange> get_NumericIndicatorRanges();
    public void set_NumericIndicatorRanges(IList`1<NumericIndicatorRange> value);
    public ReportExpression`1<ReportColor> get_SeparatorColor();
    public void set_SeparatorColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<double> get_SeparatorWidth();
    public void set_SeparatorWidth(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_ShowDecimalPoint();
    public void set_ShowDecimalPoint(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_ShowLeadingZeros();
    public void set_ShowLeadingZeros(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_ShowSign();
    public void set_ShowSign(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_SnappingEnabled();
    public void set_SnappingEnabled(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_SnappingInterval();
    public void set_SnappingInterval(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_UseFontPercent();
    public void set_UseFontPercent(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.NumericIndicatorRange : ReportObject {
    public string Name { get; public set; }
    public GaugeInputValue StartValue { get; public set; }
    public GaugeInputValue EndValue { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> DecimalDigitColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> DigitColor { get; public set; }
    public NumericIndicatorRange(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public GaugeInputValue get_StartValue();
    public void set_StartValue(GaugeInputValue value);
    public GaugeInputValue get_EndValue();
    public void set_EndValue(GaugeInputValue value);
    public ReportExpression`1<ReportColor> get_DecimalDigitColor();
    public void set_DecimalDigitColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportColor> get_DigitColor();
    public void set_DigitColor(ReportExpression`1<ReportColor> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.NumericIndicatorStyles : Enum {
    public int value__;
    public static NumericIndicatorStyles Mechanical;
    public static NumericIndicatorStyles Digital7Segment;
    public static NumericIndicatorStyles Digital14Segment;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.Operators : Enum {
    public int value__;
    public static Operators Equal;
    public static Operators Like;
    public static Operators NotEqual;
    public static Operators GreaterThan;
    public static Operators GreaterThanOrEqual;
    public static Operators LessThan;
    public static Operators LessThanOrEqual;
    public static Operators TopN;
    public static Operators BottomN;
    public static Operators TopPercent;
    public static Operators BottomPercent;
    public static Operators In;
    public static Operators Between;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.Orientations : Enum {
    public int value__;
    public static Orientations Auto;
    public static Orientations Horizontal;
    public static Orientations Vertical;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Page : ReportObject {
    public PageSection PageHeader { get; public set; }
    public PageSection PageFooter { get; public set; }
    [DefaultValueConstantAttribute("DefaultPageHeight")]
public ReportSize PageHeight { get; public set; }
    [DefaultValueConstantAttribute("DefaultPageWidth")]
public ReportSize PageWidth { get; public set; }
    public ReportSize InteractiveHeight { get; public set; }
    public ReportSize InteractiveWidth { get; public set; }
    [DefaultValueConstantAttribute("DefaultZeroSize")]
public ReportSize LeftMargin { get; public set; }
    [DefaultValueConstantAttribute("DefaultZeroSize")]
public ReportSize RightMargin { get; public set; }
    [DefaultValueConstantAttribute("DefaultZeroSize")]
public ReportSize TopMargin { get; public set; }
    [DefaultValueConstantAttribute("DefaultZeroSize")]
public ReportSize BottomMargin { get; public set; }
    [DefaultValueAttribute("1")]
[ValidValuesAttribute("1", "100")]
public int Columns { get; public set; }
    [DefaultValueConstantAttribute("DefaultColumnSpacing")]
public ReportSize ColumnSpacing { get; public set; }
    public Style Style { get; public set; }
    public Page(IPropertyStore propertyStore);
    public PageSection get_PageHeader();
    public void set_PageHeader(PageSection value);
    public PageSection get_PageFooter();
    public void set_PageFooter(PageSection value);
    public ReportSize get_PageHeight();
    public void set_PageHeight(ReportSize value);
    public ReportSize get_PageWidth();
    public void set_PageWidth(ReportSize value);
    public ReportSize get_InteractiveHeight();
    public void set_InteractiveHeight(ReportSize value);
    public ReportSize get_InteractiveWidth();
    public void set_InteractiveWidth(ReportSize value);
    public ReportSize get_LeftMargin();
    public void set_LeftMargin(ReportSize value);
    public ReportSize get_RightMargin();
    public void set_RightMargin(ReportSize value);
    public ReportSize get_TopMargin();
    public void set_TopMargin(ReportSize value);
    public ReportSize get_BottomMargin();
    public void set_BottomMargin(ReportSize value);
    public int get_Columns();
    public void set_Columns(int value);
    public ReportSize get_ColumnSpacing();
    public void set_ColumnSpacing(ReportSize value);
    public Style get_Style();
    public void set_Style(Style value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.PageBreak : ReportObject {
    public BreakLocations BreakLocation { get; public set; }
    public PageBreak(IPropertyStore propertyStore);
    public BreakLocations get_BreakLocation();
    public void set_BreakLocation(BreakLocations value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.PageSection : ReportElement {
    public ReportSize Height { get; public set; }
    [DefaultValueAttribute("False")]
public bool PrintOnFirstPage { get; public set; }
    [DefaultValueAttribute("False")]
public bool PrintOnLastPage { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public PageSection(IPropertyStore propertyStore);
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public bool get_PrintOnFirstPage();
    public void set_PrintOnFirstPage(bool value);
    public bool get_PrintOnLastPage();
    public void set_PrintOnLastPage(bool value);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Paragraph : ReportElement {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.TextRun>")]
public IList`1<TextRun> TextRuns { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> LeftIndent { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> RightIndent { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> HangingIndent { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ListStyle ListStyle { get; public set; }
    [DefaultValueAttribute("0")]
public int ListLevel { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> SpaceBefore { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> SpaceAfter { get; public set; }
    public Paragraph(IPropertyStore propertyStore);
    public IList`1<TextRun> get_TextRuns();
    public void set_TextRuns(IList`1<TextRun> value);
    public ReportExpression`1<ReportSize> get_LeftIndent();
    public void set_LeftIndent(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_RightIndent();
    public void set_RightIndent(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_HangingIndent();
    public void set_HangingIndent(ReportExpression`1<ReportSize> value);
    public ListStyle get_ListStyle();
    public void set_ListStyle(ListStyle value);
    public int get_ListLevel();
    public void set_ListLevel(int value);
    public ReportExpression`1<ReportSize> get_SpaceBefore();
    public void set_SpaceBefore(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_SpaceAfter();
    public void set_SpaceAfter(ReportExpression`1<ReportSize> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Parameter : ReportObject {
    public string Name { get; public set; }
    public ReportExpression Value { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Omit { get; public set; }
    public Parameter(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ReportExpression`1<bool> get_Omit();
    public void set_Omit(ReportExpression`1<bool> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ParameterValue : ReportObject {
    [DefaultValueAttribute("")]
public Nullable`1<ReportExpression> Value { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    public ParameterValue(IPropertyStore propertyStore);
    public Nullable`1<ReportExpression> get_Value();
    public void set_Value(Nullable`1<ReportExpression> value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.PinLabel : ReportObject {
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Text { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> AllowUpsideDown { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> DistanceFromScale { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> FontAngle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.Placements", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<Placements> Placement { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> RotateLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UseFontPercent { get; public set; }
    public PinLabel(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression get_Text();
    public void set_Text(ReportExpression value);
    public ReportExpression`1<bool> get_AllowUpsideDown();
    public void set_AllowUpsideDown(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_DistanceFromScale();
    public void set_DistanceFromScale(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_FontAngle();
    public void set_FontAngle(ReportExpression`1<double> value);
    public ReportExpression`1<Placements> get_Placement();
    public void set_Placement(ReportExpression`1<Placements> value);
    public ReportExpression`1<bool> get_RotateLabel();
    public void set_RotateLabel(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_UseFontPercent();
    public void set_UseFontPercent(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.Placements : Enum {
    public int value__;
    public static Placements Inside;
    public static Placements Outside;
    public static Placements Cross;
}
internal class Microsoft.ReportingServices.RdlObjectModel.PointerCap : ReportObject {
    public Style Style { get; public set; }
    public CapImage CapImage { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> OnTop { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Reflection { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.CapStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<CapStyles> CapStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Width { get; public set; }
    public PointerCap(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public CapImage get_CapImage();
    public void set_CapImage(CapImage value);
    public ReportExpression`1<bool> get_OnTop();
    public void set_OnTop(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Reflection();
    public void set_Reflection(ReportExpression`1<bool> value);
    public ReportExpression`1<CapStyles> get_CapStyle();
    public void set_CapStyle(ReportExpression`1<CapStyles> value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_Width();
    public void set_Width(ReportExpression`1<double> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.PointerImage : BaseGaugeImage {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> HueColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Transparency { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> OffsetX { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> OffsetY { get; public set; }
    public PointerImage(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_HueColor();
    public void set_HueColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<double> get_Transparency();
    public void set_Transparency(ReportExpression`1<double> value);
    public ReportExpression`1<ReportSize> get_OffsetX();
    public void set_OffsetX(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_OffsetY();
    public void set_OffsetY(ReportExpression`1<ReportSize> value);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.PropertyDefinition : object {
    private string m_name;
    public string Name { get; }
    protected PropertyDefinition(string name);
    public sealed virtual string get_Name();
    public static IPropertyDefinition Create(Type componentType, string propertyName);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.PropertyDefinition`1 : PropertyDefinition {
    private Nullable`1<T> m_default;
    public Nullable`1<T> Default { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Default { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Minimum { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Maximum { get; }
    protected PropertyDefinition`1(string name, Nullable`1<T> defaultValue);
    public Nullable`1<T> get_Default();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Default();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Minimum();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Maximum();
    private sealed virtual override void Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Validate(object component, object value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.PropertyStore : object {
    private ReportObject m_owner;
    private IContainedObject m_parent;
    private Dictionary`2<int, object> m_objEntries;
    private Dictionary`2<int, int> m_intEntries;
    private Dictionary`2<int, bool> m_boolEntries;
    private Dictionary`2<int, ReportSize> m_sizeEntries;
    public ReportObject Owner { get; }
    public IContainedObject Parent { get; public set; }
    public PropertyStore(ReportObject owner);
    public sealed virtual ReportObject get_Owner();
    public sealed virtual IContainedObject get_Parent();
    public sealed virtual void set_Parent(IContainedObject value);
    internal void SetOwner(ReportObject owner);
    public sealed virtual void RemoveProperty(int propertyIndex);
    public sealed virtual object GetObject(int propertyIndex);
    public sealed virtual T GetObject(int propertyIndex);
    public sealed virtual void SetObject(int propertyIndex, object value);
    public sealed virtual void RemoveObject(int propertyIndex);
    public sealed virtual bool ContainsObject(int propertyIndex);
    public sealed virtual int GetInteger(int propertyIndex);
    public sealed virtual void SetInteger(int propertyIndex, int value);
    public sealed virtual void RemoveInteger(int propertyIndex);
    public sealed virtual bool ContainsInteger(int propertyIndex);
    public sealed virtual bool GetBoolean(int propertyIndex);
    public sealed virtual void SetBoolean(int propertyIndex, bool value);
    public sealed virtual void RemoveBoolean(int propertyIndex);
    public sealed virtual bool ContainsBoolean(int propertyIndex);
    public sealed virtual ReportSize GetSize(int propertyIndex);
    public sealed virtual void SetSize(int propertyIndex, ReportSize value);
    public sealed virtual void RemoveSize(int propertyIndex);
    public sealed virtual bool ContainsSize(int propertyIndex);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Query : ReportObject {
    public string DataSourceName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandTypes CommandType { get; public set; }
    public ReportExpression CommandText { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.QueryParameter>")]
public IList`1<QueryParameter> QueryParameters { get; public set; }
    [DefaultValueAttribute("0")]
[ValidValuesAttribute("0", "2147483647")]
public int Timeout { get; public set; }
    public Query(IPropertyStore propertyStore);
    public string get_DataSourceName();
    public void set_DataSourceName(string value);
    public CommandTypes get_CommandType();
    public void set_CommandType(CommandTypes value);
    public ReportExpression get_CommandText();
    public void set_CommandText(ReportExpression value);
    public IList`1<QueryParameter> get_QueryParameters();
    public void set_QueryParameters(IList`1<QueryParameter> value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.QueryParameter : ReportObject {
    public string Name { get; public set; }
    public ReportExpression Value { get; public set; }
    public QueryParameter(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.RadialGauge : Gauge {
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> PivotX { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> PivotY { get; public set; }
    public RadialGauge(IPropertyStore propertyStore);
    public ReportExpression`1<double> get_PivotX();
    public void set_PivotX(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_PivotY();
    public void set_PivotY(ReportExpression`1<double> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.RadialPointer : GaugePointer {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.RadialPointerTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<RadialPointerTypes> Type { get; public set; }
    public PointerCap PointerCap { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.NeedleStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<NeedleStyles> NeedleStyle { get; public set; }
    public RadialPointer(IPropertyStore propertyStore);
    public ReportExpression`1<RadialPointerTypes> get_Type();
    public void set_Type(ReportExpression`1<RadialPointerTypes> value);
    public PointerCap get_PointerCap();
    public void set_PointerCap(PointerCap value);
    public ReportExpression`1<NeedleStyles> get_NeedleStyle();
    public void set_NeedleStyle(ReportExpression`1<NeedleStyles> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.RadialPointerTypes : Enum {
    public int value__;
    public static RadialPointerTypes Needle;
    public static RadialPointerTypes Marker;
    public static RadialPointerTypes Bar;
}
internal class Microsoft.ReportingServices.RdlObjectModel.RadialScale : GaugeScale {
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
[ValidValuesAttribute("0", "1,7976931348623157E+308")]
public ReportExpression`1<double> Radius { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
[ValidValuesAttribute("0", "360")]
public ReportExpression`1<double> StartAngle { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
[ValidValuesAttribute("0", "360")]
public ReportExpression`1<double> SweepAngle { get; public set; }
    public RadialScale(IPropertyStore propertyStore);
    public ReportExpression`1<double> get_Radius();
    public void set_Radius(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_StartAngle();
    public void set_StartAngle(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_SweepAngle();
    public void set_SweepAngle(ReportExpression`1<double> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1 : RdlCollectionBase`1<T> {
    public RdlCollection`1(IContainedObject parent);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.RdlCollectionBase`1 : Collection`1<T> {
    private IContainedObject m_parent;
    [XmlIgnoreAttribute]
public IContainedObject Parent { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    protected RdlCollectionBase`1(IContainedObject parent);
    public sealed virtual IContainedObject get_Parent();
    public sealed virtual void set_Parent(IContainedObject value);
    protected virtual void InsertItem(int index, T item);
    protected virtual void SetItem(int index, T item);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object item);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Rectangle : ReportItem {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public PageBreak PageBreak { get; public set; }
    [DefaultValueAttribute("False")]
public bool KeepTogether { get; public set; }
    [DefaultValueAttribute("False")]
public bool OmitBorderOnPageBreak { get; public set; }
    [DefaultValueAttribute("")]
public string LinkToChild { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("RectangleDataElementOutputTypes")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    public Rectangle(IPropertyStore propertyStore);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public sealed virtual PageBreak get_PageBreak();
    public sealed virtual void set_PageBreak(PageBreak value);
    public bool get_KeepTogether();
    public void set_KeepTogether(bool value);
    public bool get_OmitBorderOnPageBreak();
    public void set_OmitBorderOnPageBreak(bool value);
    public string get_LinkToChild();
    public void set_LinkToChild(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Report : ReportObject {
    [DefaultValueAttribute("")]
public string Description { get; public set; }
    [DefaultValueAttribute("")]
public string Author { get; public set; }
    [DefaultValueAttribute("0")]
[ValidValuesAttribute("0", "2147483647")]
public int AutoRefresh { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.DataSource>")]
public IList`1<DataSource> DataSources { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.DataSet>")]
public IList`1<DataSet> DataSets { get; public set; }
    public Body Body { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportParameter>")]
public IList`1<ReportParameter> ReportParameters { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    [DefaultValueAttribute("")]
public string Code { get; public set; }
    public ReportSize Width { get; public set; }
    public Page Page { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.EmbeddedImage>")]
public IList`1<EmbeddedImage> EmbeddedImages { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Language { get; public set; }
    [XmlArrayItemAttribute("CodeModule", "System.String")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<System.String>")]
public IList`1<string> CodeModules { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Class>")]
public IList`1<Class> Classes { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Variable>")]
public IList`1<Variable> Variables { get; public set; }
    [DefaultValueAttribute("False")]
public bool DeferVariableEvaluation { get; public set; }
    [DefaultValueAttribute("False")]
public bool ConsumeContainerWhitespace { get; public set; }
    [DefaultValueAttribute("")]
public string DataTransform { get; public set; }
    [DefaultValueAttribute("")]
public string DataSchema { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [ValidEnumValuesAttribute("ReportDataElementOutputTypes")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataElementStyles DataElementStyle { get; public set; }
    public Report(IPropertyStore propertyStore);
    public string get_Description();
    public void set_Description(string value);
    public string get_Author();
    public void set_Author(string value);
    public int get_AutoRefresh();
    public void set_AutoRefresh(int value);
    public IList`1<DataSource> get_DataSources();
    public void set_DataSources(IList`1<DataSource> value);
    public IList`1<DataSet> get_DataSets();
    public void set_DataSets(IList`1<DataSet> value);
    public Body get_Body();
    public void set_Body(Body value);
    public IList`1<ReportParameter> get_ReportParameters();
    public void set_ReportParameters(IList`1<ReportParameter> value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public string get_Code();
    public void set_Code(string value);
    public ReportSize get_Width();
    public void set_Width(ReportSize value);
    public Page get_Page();
    public void set_Page(Page value);
    public IList`1<EmbeddedImage> get_EmbeddedImages();
    public void set_EmbeddedImages(IList`1<EmbeddedImage> value);
    public ReportExpression get_Language();
    public void set_Language(ReportExpression value);
    public IList`1<string> get_CodeModules();
    public void set_CodeModules(IList`1<string> value);
    public IList`1<Class> get_Classes();
    public void set_Classes(IList`1<Class> value);
    public IList`1<Variable> get_Variables();
    public void set_Variables(IList`1<Variable> value);
    public bool get_DeferVariableEvaluation();
    public void set_DeferVariableEvaluation(bool value);
    public bool get_ConsumeContainerWhitespace();
    public void set_ConsumeContainerWhitespace(bool value);
    public string get_DataTransform();
    public void set_DataTransform(string value);
    public string get_DataSchema();
    public void set_DataSchema(string value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementStyles get_DataElementStyle();
    public void set_DataElementStyle(DataElementStyles value);
    public virtual void Initialize();
}
[TypeConverterAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColorConverter")]
internal class Microsoft.ReportingServices.RdlObjectModel.ReportColor : ValueType {
    private Color m_color;
    private static ReportColor m_empty;
    public static ReportColor Empty { get; }
    public Color Color { get; public set; }
    public bool IsEmpty { get; }
    public ReportColor(Color color);
    public ReportColor(string value);
    private static ReportColor();
    public static ReportColor get_Empty();
    public Color get_Color();
    public void set_Color(Color value);
    private void Init(string value);
    internal static Color RdlStringToColor(string value);
    private static Color RgbStringToColor(string value);
    public static string ColorToRdlString(Color c);
    public bool get_IsEmpty();
    public static ReportColor Parse(string s, IFormatProvider provider);
    public void SetEmpty();
    internal static Color FromName(string name);
    internal static string ToName(Color color);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(ReportColor left, ReportColor right);
    public static bool op_Inequality(ReportColor left, ReportColor right);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    private sealed virtual override bool Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeThis();
    private sealed virtual override SerializationMethod Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeProperty(string name);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportColorConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.ReportElement : ReportObject {
    public Style Style { get; public set; }
    public ReportElement(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportEnum`1 : ValueType {
    private T m_value;
    private static IList`1<string> m_names;
    public T Value { get; public set; }
    private static ReportEnum`1();
    public ReportEnum`1(T value);
    public ReportEnum`1(string value);
    public T get_Value();
    public void set_Value(T value);
    public static IList`1<string> GetNames();
    private void Init(string value);
    public static ReportEnum`1<T> Parse(string value, IFormatProvider provider);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public virtual bool Equals(object value);
    public static bool op_Equality(ReportEnum`1<T> left, ReportEnum`1<T> right);
    public static bool op_Inequality(ReportEnum`1<T> left, ReportEnum`1<T> right);
    public virtual int GetHashCode();
    public static T op_Implicit(ReportEnum`1<T> value);
    public static ReportEnum`1<T> op_Implicit(T value);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportExpression : ValueType {
    private string m_value;
    private DataTypes m_dataType;
    private EvaluationMode m_evaluationMode;
    private static Regex m_nonConstantRegex;
    public string Value { get; public set; }
    public DataTypes DataType { get; public set; }
    private object Microsoft.ReportingServices.RdlObjectModel.IExpression.Value { get; private set; }
    public string Expression { get; public set; }
    public EvaluationMode EvaluationMode { get; public set; }
    public bool IsExpression { get; }
    public ReportExpression(string value);
    public ReportExpression(string value, EvaluationMode evaluationMode);
    private static ReportExpression();
    public string get_Value();
    public void set_Value(string value);
    public DataTypes get_DataType();
    public void set_DataType(DataTypes value);
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IExpression.get_Value();
    private sealed virtual override void Microsoft.ReportingServices.RdlObjectModel.IExpression.set_Value(object value);
    public sealed virtual string get_Expression();
    public sealed virtual void set_Expression(string value);
    public EvaluationMode get_EvaluationMode();
    public void set_EvaluationMode(EvaluationMode value);
    public sealed virtual bool get_IsExpression();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public static bool IsExpressionString(string value);
    public virtual bool Equals(object value);
    public static bool op_Equality(ReportExpression left, ReportExpression right);
    public static bool op_Equality(ReportExpression left, string right);
    public static bool op_Equality(string left, ReportExpression right);
    public static bool op_Inequality(ReportExpression left, ReportExpression right);
    public static bool op_Inequality(ReportExpression left, string right);
    public static bool op_Inequality(string left, ReportExpression right);
    public virtual int GetHashCode();
    public static string op_Explicit(ReportExpression value);
    public static ReportExpression op_Implicit(string value);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    internal static object ParseEnum(Type type, string value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportExpression`1 : ValueType {
    private T m_value;
    private string m_expression;
    private static MethodInfo m_parseMethod;
    private static int m_parseMethodArgs;
    public T Value { get; public set; }
    private object Microsoft.ReportingServices.RdlObjectModel.IExpression.Value { get; private set; }
    public string Expression { get; public set; }
    public bool IsExpression { get; }
    public ReportExpression`1(T value);
    public ReportExpression`1(string value);
    public ReportExpression`1(string value, IFormatProvider provider);
    public T get_Value();
    public void set_Value(T value);
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IExpression.get_Value();
    private sealed virtual override void Microsoft.ReportingServices.RdlObjectModel.IExpression.set_Value(object value);
    public sealed virtual string get_Expression();
    public sealed virtual void set_Expression(string value);
    public sealed virtual bool get_IsExpression();
    private void Init(string value, IFormatProvider provider);
    public static ReportExpression`1<T> Parse(string value, IFormatProvider provider);
    private MethodInfo GetParseMethod();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static bool op_Equality(ReportExpression`1<T> left, ReportExpression`1<T> right);
    public static bool op_Equality(ReportExpression`1<T> left, T right);
    public static bool op_Equality(T left, ReportExpression`1<T> right);
    public static bool op_Equality(ReportExpression`1<T> left, string right);
    public static bool op_Equality(string left, ReportExpression`1<T> right);
    public static bool op_Inequality(ReportExpression`1<T> left, ReportExpression`1<T> right);
    public static bool op_Inequality(ReportExpression`1<T> left, T right);
    public static bool op_Inequality(T left, ReportExpression`1<T> right);
    public static bool op_Inequality(ReportExpression`1<T> left, string right);
    public static bool op_Inequality(string left, ReportExpression`1<T> right);
    public static T op_Explicit(ReportExpression`1<T> value);
    public static ReportExpression`1<T> op_Implicit(T value);
    public static ReportExpression`1<T> op_Implicit(Nullable`1<T> value);
    public static string op_Explicit(ReportExpression`1<T> value);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    private sealed virtual override bool Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeThis();
    private sealed virtual override SerializationMethod Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeProperty(string name);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportExpressionDefaultValueAttribute : DefaultValueAttribute {
    public ReportExpressionDefaultValueAttribute(string value);
    public ReportExpressionDefaultValueAttribute(Type type);
    public ReportExpressionDefaultValueAttribute(Type type, object value);
    internal static Type ConstructGenericType(Type type);
    internal static object CreateInstance(Type type, object value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportExpressionDefaultValueConstantAttribute : DefaultValueAttribute {
    public ReportExpressionDefaultValueConstantAttribute(string field);
    public ReportExpressionDefaultValueConstantAttribute(Type type, string field);
}
[XmlElementClassAttribute("Line", "Microsoft.ReportingServices.RdlObjectModel.Line")]
[XmlElementClassAttribute("Tablix", "Microsoft.ReportingServices.RdlObjectModel.Tablix")]
[XmlElementClassAttribute("CustomReportItem", "Microsoft.ReportingServices.RdlObjectModel.CustomReportItem")]
[XmlElementClassAttribute("Rectangle", "Microsoft.ReportingServices.RdlObjectModel.Rectangle")]
[XmlElementClassAttribute("GaugePanel", "Microsoft.ReportingServices.RdlObjectModel.GaugePanel")]
[XmlElementClassAttribute("Chart", "Microsoft.ReportingServices.RdlObjectModel.Chart")]
[XmlElementClassAttribute("Textbox", "Microsoft.ReportingServices.RdlObjectModel.Textbox")]
[XmlElementClassAttribute("Image", "Microsoft.ReportingServices.RdlObjectModel.Image")]
[XmlElementClassAttribute("Subreport", "Microsoft.ReportingServices.RdlObjectModel.Subreport")]
internal abstract class Microsoft.ReportingServices.RdlObjectModel.ReportItem : ReportElement {
    public string Name { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [DefaultValueConstantAttribute("DefaultZeroSize")]
public ReportSize Top { get; public set; }
    [DefaultValueConstantAttribute("DefaultZeroSize")]
public ReportSize Left { get; public set; }
    public ReportSize Height { get; public set; }
    public ReportSize Width { get; public set; }
    [DefaultValueAttribute("0")]
[ValidValuesAttribute("0", "2147483647")]
public int ZIndex { get; public set; }
    public Visibility Visibility { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression DocumentMapLabel { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Bookmark { get; public set; }
    [DefaultValueAttribute("")]
public string RepeatWith { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("ReportItemDataElementOutputTypes")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    protected ReportItem(IPropertyStore propertyStore);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportSize get_Top();
    public void set_Top(ReportSize value);
    public ReportSize get_Left();
    public void set_Left(ReportSize value);
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public ReportSize get_Width();
    public void set_Width(ReportSize value);
    public int get_ZIndex();
    public void set_ZIndex(int value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ReportExpression get_DocumentMapLabel();
    public void set_DocumentMapLabel(ReportExpression value);
    public ReportExpression get_Bookmark();
    public void set_Bookmark(ReportExpression value);
    public string get_RepeatWith();
    public void set_RepeatWith(string value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public virtual void Initialize();
    private sealed virtual override bool Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeThis();
    private sealed virtual override SerializationMethod Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeProperty(string name);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.ReportObject : ReportObjectBase {
    protected ReportObject(IPropertyStore propertyStore);
    public virtual object DeepClone();
    private void CopyTo(ReportObject clone, ICollection`1<string> membersToExclude);
    private static object CloneObject(object obj);
    private static object CloneList(IList obj);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.ReportObjectBase : object {
    private IPropertyStore m_propertyStore;
    [XmlIgnoreAttribute]
public IPropertyStore PropertyStore { get; }
    [XmlIgnoreAttribute]
public IContainedObject Parent { get; public set; }
    protected ReportObjectBase(IPropertyStore propertyStore);
    public IPropertyStore get_PropertyStore();
    public sealed virtual IContainedObject get_Parent();
    public sealed virtual void set_Parent(IContainedObject value);
    public virtual void Initialize();
    protected virtual IPropertyStore WrapPropertyStore(IPropertyStore propertyStore);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportParameter : ReportObject {
    public string Name { get; public set; }
    public DataTypes DataType { get; public set; }
    [DefaultValueAttribute("False")]
public bool Nullable { get; public set; }
    public DefaultValue DefaultValue { get; public set; }
    [DefaultValueAttribute("False")]
public bool AllowBlank { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Prompt { get; public set; }
    [DefaultValueAttribute("False")]
public bool Hidden { get; public set; }
    public ValidValues ValidValues { get; public set; }
    [DefaultValueAttribute("False")]
public bool MultiValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UsedInQueryTypes UsedInQuery { get; public set; }
    public ReportParameter(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public DataTypes get_DataType();
    public void set_DataType(DataTypes value);
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public DefaultValue get_DefaultValue();
    public void set_DefaultValue(DefaultValue value);
    public bool get_AllowBlank();
    public void set_AllowBlank(bool value);
    public ReportExpression get_Prompt();
    public void set_Prompt(ReportExpression value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public ValidValues get_ValidValues();
    public void set_ValidValues(ValidValues value);
    public bool get_MultiValue();
    public void set_MultiValue(bool value);
    public UsedInQueryTypes get_UsedInQuery();
    public void set_UsedInQuery(UsedInQueryTypes value);
}
[TypeConverterAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSizeConverter")]
internal class Microsoft.ReportingServices.RdlObjectModel.ReportSize : ValueType {
    internal static double CentimetersPerInch;
    internal static double MillimetersPerInch;
    internal static double PicasPerInch;
    internal static double PointsPerInch;
    internal static int DefaultDecimalDigits;
    private static float m_dotsPerInch;
    private static ReportSize m_empty;
    private static string m_serializationFormat;
    private static int m_serializedDecimalDigits;
    private static SizeTypes m_defaultType;
    private SizeTypes m_type;
    private double m_value;
    public static SizeTypes DefaultType { get; public set; }
    public static int SerializedDecimalDigits { get; public set; }
    public static float DotsPerInch { get; }
    public static ReportSize Empty { get; }
    public SizeTypes Type { get; }
    public double Value { get; }
    public double SerializedValue { get; }
    public bool IsEmpty { get; }
    private static ReportSize();
    public ReportSize(double value, SizeTypes type);
    public ReportSize(string value);
    public ReportSize(double value);
    public ReportSize(string value, IFormatProvider provider);
    public ReportSize(string value, IFormatProvider provider, SizeTypes defaultType);
    public static SizeTypes get_DefaultType();
    public static void set_DefaultType(SizeTypes value);
    public static int get_SerializedDecimalDigits();
    public static void set_SerializedDecimalDigits(int value);
    public static float get_DotsPerInch();
    private void Init(string value, IFormatProvider provider, SizeTypes defaultType);
    public static ReportSize Parse(string s, IFormatProvider provider);
    public static ReportSize get_Empty();
    public SizeTypes get_Type();
    public double get_Value();
    public double get_SerializedValue();
    public bool get_IsEmpty();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(ReportSize left, ReportSize right);
    public static bool op_Inequality(ReportSize left, ReportSize right);
    public static bool op_LessThan(ReportSize left, ReportSize right);
    public static bool op_GreaterThan(ReportSize left, ReportSize right);
    public static ReportSize op_Addition(ReportSize size1, ReportSize size2);
    public static ReportSize op_Subtraction(ReportSize size1, ReportSize size2);
    private static string GetStringFromType(SizeTypes type);
    internal static SizeTypes GetTypeFromString(string value);
    public int ToIntPixels();
    public double ToPixels();
    public void SetPixels(double pixels);
    public static ReportSize FromPixels(double pixels, SizeTypes type);
    public double ToMillimeters();
    public double ToCentimeters();
    public double ToInches();
    public double ToPoints();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider provider);
    internal ReportSize ChangeType(SizeTypes type);
    internal double ConvertToPixels(double value, SizeTypes type);
    internal double ConvertToMillimeters(double value, SizeTypes type);
    internal static double ConvertToUnits(double pixels, SizeTypes type);
    private sealed virtual override int System.IComparable.CompareTo(object value);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    private sealed virtual override bool Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeThis();
    private sealed virtual override SerializationMethod Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize.ShouldSerializeProperty(string name);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ReportSizeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ResizeModes : Enum {
    public int value__;
    public static ResizeModes AutoFit;
    public static ResizeModes None;
}
internal class Microsoft.ReportingServices.RdlObjectModel.ScaleLabels : ReportObject {
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Interval { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> IntervalOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> AllowUpsideDown { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> DistanceFromScale { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> FontAngle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.Placements", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<Placements> Placement { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> RotateLabels { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> ShowEndLabels { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UseFontPercent { get; public set; }
    public ScaleLabels(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<double> get_Interval();
    public void set_Interval(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_IntervalOffset();
    public void set_IntervalOffset(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_AllowUpsideDown();
    public void set_AllowUpsideDown(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_DistanceFromScale();
    public void set_DistanceFromScale(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_FontAngle();
    public void set_FontAngle(ReportExpression`1<double> value);
    public ReportExpression`1<Placements> get_Placement();
    public void set_Placement(ReportExpression`1<Placements> value);
    public ReportExpression`1<bool> get_RotateLabels();
    public void set_RotateLabels(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_ShowEndLabels();
    public void set_ShowEndLabels(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public ReportExpression`1<bool> get_UseFontPercent();
    public void set_UseFontPercent(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ScalePin : TickMarkStyle {
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Location { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Enable { get; public set; }
    public PinLabel PinLabel { get; public set; }
    public ScalePin(IPropertyStore propertyStore);
    public ReportExpression`1<double> get_Location();
    public void set_Location(ReportExpression`1<double> value);
    public ReportExpression`1<bool> get_Enable();
    public void set_Enable(ReportExpression`1<bool> value);
    public PinLabel get_PinLabel();
    public void set_PinLabel(PinLabel value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ScaleRange : ReportObject {
    public string Name { get; public set; }
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.GaugeBackgroundGradients", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<GaugeBackgroundGradients> BackgroundGradientType { get; public set; }
    public ReportExpression`1<double> DistanceFromScale { get; public set; }
    public GaugeInputValue StartValue { get; public set; }
    public GaugeInputValue EndValue { get; public set; }
    public ReportExpression`1<double> StartWidth { get; public set; }
    public ReportExpression`1<double> EndWidth { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> InRangeBarPointerColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> InRangeLabelColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> InRangeTickMarksColor { get; public set; }
    public ReportExpression`1<Placements> Placement { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ToolTip { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    public ScaleRange(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<GaugeBackgroundGradients> get_BackgroundGradientType();
    public void set_BackgroundGradientType(ReportExpression`1<GaugeBackgroundGradients> value);
    public ReportExpression`1<double> get_DistanceFromScale();
    public void set_DistanceFromScale(ReportExpression`1<double> value);
    public GaugeInputValue get_StartValue();
    public void set_StartValue(GaugeInputValue value);
    public GaugeInputValue get_EndValue();
    public void set_EndValue(GaugeInputValue value);
    public ReportExpression`1<double> get_StartWidth();
    public void set_StartWidth(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_EndWidth();
    public void set_EndWidth(ReportExpression`1<double> value);
    public ReportExpression`1<ReportColor> get_InRangeBarPointerColor();
    public void set_InRangeBarPointerColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportColor> get_InRangeLabelColor();
    public void set_InRangeLabelColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportColor> get_InRangeTickMarksColor();
    public void set_InRangeTickMarksColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<Placements> get_Placement();
    public void set_Placement(ReportExpression`1<Placements> value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.ArrayMapping : TypeMapping {
    public Dictionary`2<string, Type> ElementTypes;
    public Type ItemType;
    public ArrayMapping(Type type);
}
internal interface Microsoft.ReportingServices.RdlObjectModel.Serialization.ISerializerHost {
    public abstract virtual Type GetSubstituteType(Type type);
    public abstract virtual void OnDeserialization(object value);
    public abstract virtual void GetExtensionNamespace(String& ns, String& prefix);
}
internal interface Microsoft.ReportingServices.RdlObjectModel.Serialization.IShouldSerialize {
    public abstract virtual bool ShouldSerializeThis();
    public abstract virtual SerializationMethod ShouldSerializeProperty(string name);
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.Serialization.MemberMapping : TypeMapping {
    public bool IsReadOnly;
    public XmlAttributes XmlAttributes;
    public MemberMapping(Type type, string name, string ns, bool isReadOnly);
    public abstract virtual void SetValue(object obj, object value);
    public abstract virtual object GetValue(object obj);
    public abstract virtual bool HasValue(object obj);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.NameKey : object {
    internal string ns;
    internal string name;
    public string Name { get; }
    public string Namespace { get; }
    internal NameKey(string name, string ns);
    public string get_Name();
    public string get_Namespace();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(NameKey a, NameKey b);
    public static bool op_Inequality(NameKey a, NameKey b);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.NameTable : object {
    private Hashtable table;
    public object Item { get; public set; }
    public void Add(string name, string ns, object value);
    public object get_Item(string name, string ns);
    public void set_Item(string name, string ns, object value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.PrimitiveMapping : TypeMapping {
    public PrimitiveMapping(Type type);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.PropertyMapping : MemberMapping {
    private PropertyInfo m_property;
    private int m_index;
    private PropertyTypeCode m_typeCode;
    private IPropertyDefinition m_definition;
    public PropertyInfo Property { get; }
    public int Index { get; public set; }
    public PropertyTypeCode TypeCode { get; public set; }
    public IPropertyDefinition Definition { get; public set; }
    public PropertyMapping(Type propertyType, string name, string ns, PropertyInfo property);
    public PropertyInfo get_Property();
    public int get_Index();
    public void set_Index(int value);
    public PropertyTypeCode get_TypeCode();
    public void set_TypeCode(PropertyTypeCode value);
    public IPropertyDefinition get_Definition();
    public void set_Definition(IPropertyDefinition value);
    public virtual void SetValue(object obj, object value);
    public virtual object GetValue(object obj);
    public virtual bool HasValue(object obj);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.RdlReader : RdlReaderWriterBase {
    private static string m_xsdResourceId;
    private XmlReader m_reader;
    private RdlValidator m_validator;
    private XmlSchema m_schema;
    public RdlReader(RdlSerializerSettings settings);
    public object Deserialize(Stream stream, Type rootType);
    public object Deserialize(TextReader textReader, Type rootType);
    public object Deserialize(XmlReader xmlReader, Type rootType);
    private object Deserialize(Type rootType);
    private XmlReaderSettings GetXmlReaderSettings();
    private object ReadRoot(Type type);
    private object ReadObject(Type type, MemberMapping member, int nestingLevel);
    private object ReadObjectContent(object value, MemberMapping member, int nestingLevel);
    private object ReadPrimitive(Type type);
    private object ReadClassObject(Type type, MemberMapping member, int nestingLevel);
    private object ReadSpecialContent(object obj);
    private object ReadArrayContent(object array, ArrayMapping mapping, MemberMapping member, int nestingLevel);
    private object ReadStructContent(object obj, StructMapping mapping);
    private void ReadAttribute(object obj, StructMapping mapping, MemberMapping childMapping);
    private void ValidateStartElement();
    private void ValidateEndElement();
}
internal abstract class Microsoft.ReportingServices.RdlObjectModel.Serialization.RdlReaderWriterBase : object {
    private RdlSerializerSettings m_settings;
    private ISerializerHost m_host;
    private XmlAttributeOverrides m_xmlOverrides;
    protected RdlSerializerSettings Settings { get; }
    protected ISerializerHost Host { get; }
    protected XmlAttributeOverrides XmlOverrides { get; }
    protected RdlReaderWriterBase(RdlSerializerSettings settings);
    protected RdlSerializerSettings get_Settings();
    protected ISerializerHost get_Host();
    protected XmlAttributeOverrides get_XmlOverrides();
    protected Type GetSerializationType(object obj);
    protected Type GetSerializationType(Type type);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.RdlSerializer : object {
    private RdlSerializerSettings m_settings;
    public RdlSerializerSettings Settings { get; }
    public RdlSerializer(RdlSerializerSettings settings);
    public RdlSerializerSettings get_Settings();
    public Report Deserialize(Stream stream);
    public Report Deserialize(TextReader textReader);
    public Report Deserialize(XmlReader xmlReader);
    public object Deserialize(Stream stream, Type objectType);
    public object Deserialize(TextReader textReader, Type objectType);
    public object Deserialize(XmlReader xmlReader, Type objectType);
    public void Serialize(Stream stream, object o);
    public void Serialize(TextWriter textWriter, object o);
    public void Serialize(XmlWriter xmlWriter, object o);
    private XmlWriterSettings GetXmlWriterSettings();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.RdlSerializerSettings : object {
    private ISerializerHost m_serializerHost;
    private XmlAttributeOverrides m_xmlOverrides;
    private XmlSchema m_xmlSchema;
    private bool m_validate;
    private ValidationEventHandler m_validationEventHandler;
    private bool m_normalize;
    internal ISerializerHost Host { get; internal set; }
    internal XmlAttributeOverrides XmlAttributeOverrides { get; internal set; }
    internal XmlSchema XmlSchema { get; internal set; }
    internal bool ValidateXml { get; internal set; }
    internal ValidationEventHandler XmlValidationEventHandler { get; internal set; }
    internal bool Normalize { get; internal set; }
    internal ISerializerHost get_Host();
    internal void set_Host(ISerializerHost value);
    internal XmlAttributeOverrides get_XmlAttributeOverrides();
    internal void set_XmlAttributeOverrides(XmlAttributeOverrides value);
    internal XmlSchema get_XmlSchema();
    internal void set_XmlSchema(XmlSchema value);
    internal bool get_ValidateXml();
    internal void set_ValidateXml(bool value);
    internal ValidationEventHandler get_XmlValidationEventHandler();
    internal void set_XmlValidationEventHandler(ValidationEventHandler value);
    internal bool get_Normalize();
    internal void set_Normalize(bool value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.RdlWriter : RdlReaderWriterBase {
    private XmlWriter m_writer;
    private bool m_isWritingRoot;
    public RdlWriter(XmlWriter writer, RdlSerializerSettings settings);
    public void Serialize(object root);
    private void WriteObject(object obj, string name, string ns, MemberMapping member, int nestingLevel);
    private void WriteObjectContent(object component, object obj, string name, string ns, MemberMapping member, int nestingLevel);
    private void WriteStartElement(object component, string name, string ns, MemberMapping member);
    private void WriteSpecialContent(object obj);
    private void WriteSpecialMapping(object component, object obj, string name, string ns, MemberMapping member);
    private void WritePrimitiveContent(TypeMapping mapping, object obj);
    private void WritePrimitive(object component, object obj, string name, string ns, MemberMapping member, TypeMapping mapping);
    private void WriteArrayContent(object array, ArrayMapping mapping, MemberMapping member, int nestingLevel, string ns);
    private bool ShouldSerializeArray(object array);
    private void WriteArray(object component, object array, string name, string ns, MemberMapping member, ArrayMapping mapping, int nestingLevel);
    private bool ShouldSerializeValue(object component, object obj, MemberMapping memberMapping);
    private void WriteMember(object component, object obj, MemberMapping memberMapping, string name, string ns);
    private void WriteStructContent(object obj, StructMapping mapping, string ns);
    private void WriteStructure(object component, object obj, string name, string ns, MemberMapping member, StructMapping mapping);
    private void WriteNilElement(string name, string ns);
    private void WriteAttribute(object obj, MemberMapping mapping);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.Serialization.SerializationMethod : Enum {
    public int value__;
    public static SerializationMethod Auto;
    public static SerializationMethod Never;
    public static SerializationMethod Always;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.SpecialMapping : TypeMapping {
    public SpecialMapping(Type type);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.StructMapping : TypeMapping {
    public NameTable Elements;
    public NameTable Attributes;
    private List`1<MemberMapping> m_members;
    private string m_useTypeName;
    private string m_useTypeNameSpace;
    public string UseTypeName { get; public set; }
    public string UseTypeNameSpace { get; public set; }
    public List`1<MemberMapping> Members { get; }
    public StructMapping(Type type);
    public string get_UseTypeName();
    public void set_UseTypeName(string value);
    public string get_UseTypeNameSpace();
    public void set_UseTypeNameSpace(string value);
    public MemberMapping GetElement(string name, string ns);
    public MemberMapping GetTypeNameElement();
    public List`1<MemberMapping> get_Members();
    internal void ResolveChildAttributes();
}
internal static class Microsoft.ReportingServices.RdlObjectModel.Serialization.TypeMapper : object {
    private static Dictionary`2<Type, TypeMapping> m_mappings;
    private static ReaderWriterLock m_lock;
    private static TypeMapper();
    public static TypeMapping GetTypeMapping(Type type);
    public static bool IsPrimitiveType(Type type);
    private static SpecialMapping ImportSpecialMapping(Type type);
    private static PrimitiveMapping ImportPrimitiveMapping(Type type);
    private static ArrayMapping ImportArrayMapping(Type type);
    private static void GetCollectionElementTypes(Type type, ArrayMapping mapping);
    private static void GetMemberName(XmlAttributes attributes, String& tagName, String& ns);
    private static void ImportTypeMembers(StructMapping mapping, Type type);
    private static void ImportPropertyInfo(StructMapping mapping, PropertyInfo prop);
    private static StructMapping ImportStructMapping(Type type);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.TypeMapping : object {
    public Type Type;
    public string Name;
    public string Namespace;
    public List`1<MemberMapping> ChildAttributes;
    public TypeMapping(Type type);
    internal void AddChildAttribute(MemberMapping mapping);
}
[AttributeUsageAttribute("384")]
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.XmlChildAttributeAttribute : XmlAttributeAttribute {
    private string m_elementName;
    public string ElementName { get; }
    public XmlChildAttributeAttribute(string elementName, string attributeName);
    public XmlChildAttributeAttribute(string elementName, string attributeName, string namespaceUri);
    public string get_ElementName();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.XmlCustomFormatter : object {
    private static String[] allDateTimeFormats;
    private static String[] allDateFormats;
    private static String[] allTimeFormats;
    private static XmlCustomFormatter();
    internal static string FromDate(DateTime value);
    internal static string FromTime(DateTime value);
    internal static string FromDateTime(DateTime value);
    internal static string FromChar(char value);
    internal static string FromXmlNmToken(string nmToken);
    internal static string FromByteArrayBase64(Byte[] value);
    internal static string FromEnum(long val, String[] vals, Int64[] ids);
    internal static DateTime ToDateTime(string value);
    internal static DateTime ToDateTime(string value, String[] formats);
    internal static DateTime ToDate(string value);
    internal static DateTime ToTime(string value);
    internal static char ToChar(string value);
    internal static string ToXmlNmToken(string value);
    internal static Byte[] ToByteArrayBase64(string value);
    internal static long ToEnum(string val, Hashtable vals, string typeName);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.ReportingServices.RdlObjectModel.Serialization.XmlElementClassAttribute : XmlElementAttribute {
    public XmlElementClassAttribute(string elementName);
    public XmlElementClassAttribute(string elementName, Type type);
}
internal class Microsoft.ReportingServices.RdlObjectModel.SizeProperty : ComparablePropertyDefinition`1<ReportSize> {
    public SizeProperty(string name, Nullable`1<ReportSize> defaultValue);
    public SizeProperty(string name, Nullable`1<ReportSize> defaultValue, Nullable`1<ReportSize> minimum, Nullable`1<ReportSize> maximum);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.SizeTypes : Enum {
    public int value__;
    public static SizeTypes Invalid;
    public static SizeTypes Inch;
    public static SizeTypes Cm;
    public static SizeTypes Mm;
    public static SizeTypes Point;
    public static SizeTypes Pica;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.Sizings : Enum {
    public int value__;
    public static Sizings AutoSize;
    public static Sizings Fit;
    public static Sizings FitProportional;
    public static Sizings Clip;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.SortDirections : Enum {
    public int value__;
    public static SortDirections Ascending;
    public static SortDirections Descending;
}
internal class Microsoft.ReportingServices.RdlObjectModel.SortExpression : ReportObject {
    public ReportExpression Value { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SortDirections Direction { get; public set; }
    public SortExpression(IPropertyStore propertyStore);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public SortDirections get_Direction();
    public void set_Direction(SortDirections value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.SourceType : Enum {
    public int value__;
    public static SourceType External;
    public static SourceType Embedded;
    public static SourceType Database;
}
internal class Microsoft.ReportingServices.RdlObjectModel.SR : object {
    public static CultureInfo Culture { get; public set; }
    public static string Language_bn { get; }
    public static string Language_or { get; }
    public static string Language_lo { get; }
    public static string Language_bo { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Language_bn();
    public static string get_Language_or();
    public static string get_Language_lo();
    public static string get_Language_bo();
}
internal class Microsoft.ReportingServices.RdlObjectModel.SRErrors : object {
    public static CultureInfo Culture { get; public set; }
    public static string NoRootElement { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_NoRootElement();
    public static string InvalidParamGreaterThan(string name, object min);
    public static string InvalidParamLessThan(string name, object max);
    public static string InvalidParamBetween(string name, object min, object max);
    public static string InvalidParam(string name, object value);
    public static string InvalidIdentifier(string name);
    public static string UnitParseNumericPart(string value, string numericPart, string type);
    public static string UnitParseNoDigits(string value);
    public static string UnitParseNoUnit(string value);
    public static string TextParseFailedFormat(string text, string format);
    public static string InvalidColor(string value);
    public static string InvalidUnitType(string value);
    public static string InvalidValue(string value);
    public static string DeserializationFailedMethod(string methodName);
    public static string DeserializationFailed(string message);
}
internal class Microsoft.ReportingServices.RdlObjectModel.StateImage : BaseGaugeImage {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> HueColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Transparency { get; public set; }
    public StateImage(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_HueColor();
    public void set_HueColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<double> get_Transparency();
    public void set_Transparency(ReportExpression`1<double> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.StateIndicator : GaugePanelItem {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ResizeModes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ResizeModes> ResizeMode { get; public set; }
    public GaugeInputValue GaugeInputValue { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.IndicatorState>")]
public IList`1<IndicatorState> IndicatorStates { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> Angle { get; public set; }
    public StateImage StateImage { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.StateIndicatorStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<StateIndicatorStyles> IndicatorStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Text { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> UseFontPercent { get; public set; }
    public StateIndicator(IPropertyStore propertyStore);
    public ReportExpression`1<ResizeModes> get_ResizeMode();
    public void set_ResizeMode(ReportExpression`1<ResizeModes> value);
    public GaugeInputValue get_GaugeInputValue();
    public void set_GaugeInputValue(GaugeInputValue value);
    public IList`1<IndicatorState> get_IndicatorStates();
    public void set_IndicatorStates(IList`1<IndicatorState> value);
    public ReportExpression`1<double> get_Angle();
    public void set_Angle(ReportExpression`1<double> value);
    public StateImage get_StateImage();
    public void set_StateImage(StateImage value);
    public ReportExpression`1<StateIndicatorStyles> get_IndicatorStyle();
    public void set_IndicatorStyle(ReportExpression`1<StateIndicatorStyles> value);
    public ReportExpression get_Text();
    public void set_Text(ReportExpression value);
    public ReportExpression`1<bool> get_UseFontPercent();
    public void set_UseFontPercent(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.StateIndicatorStyles : Enum {
    public int value__;
    public static StateIndicatorStyles CircularLed;
    public static StateIndicatorStyles RectangularLed;
    public static StateIndicatorStyles RoundedRectangularLed;
    public static StateIndicatorStyles Text;
}
internal class Microsoft.ReportingServices.RdlObjectModel.StringProperty : PropertyDefinition {
    private string m_default;
    public object Default { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Minimum { get; }
    private object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Maximum { get; }
    public StringProperty(string name, string defaultValue);
    public sealed virtual object get_Default();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Minimum();
    private sealed virtual override object Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.get_Maximum();
    private sealed virtual override void Microsoft.ReportingServices.RdlObjectModel.IPropertyDefinition.Validate(object component, object value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Style : ReportObject {
    public Border Border { get; public set; }
    public Border TopBorder { get; public set; }
    public Border BottomBorder { get; public set; }
    public Border LeftBorder { get; public set; }
    public Border RightBorder { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> BackgroundColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.BackgroundGradients", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<BackgroundGradients> BackgroundGradientType { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> BackgroundGradientEndColor { get; public set; }
    public BackgroundImage BackgroundImage { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.FontStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<FontStyles> FontStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute("Arial")]
public ReportExpression FontFamily { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultFontSize")]
public ReportExpression`1<ReportSize> FontSize { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.FontWeights", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<FontWeights> FontWeight { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Format { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextDecorations", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextDecorations> TextDecoration { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextAlignments", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextAlignments> TextAlign { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.VerticalAlignments", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<VerticalAlignments> VerticalAlign { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor", "DefaultColor")]
public ReportExpression`1<ReportColor> Color { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> PaddingLeft { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> PaddingRight { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> PaddingTop { get; public set; }
    [ReportExpressionDefaultValueConstantAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize", "DefaultZeroSize")]
public ReportExpression`1<ReportSize> PaddingBottom { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> LineHeight { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextDirections", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextDirections> Direction { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.WritingModes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<WritingModes> WritingMode { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Language { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.UnicodeBiDiTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<UnicodeBiDiTypes> UnicodeBiDi { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.Calendars", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<Calendars> Calendar { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NumeralLanguage { get; public set; }
    [ValidValuesAttribute("1", "7")]
[ReportExpressionDefaultValueAttribute("System.Int32", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<int> NumeralVariant { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.TextEffects", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<TextEffects> TextEffect { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.BackgroundHatchTypes", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<BackgroundHatchTypes> BackgroundHatchType { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> ShadowColor { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportSize")]
public ReportExpression`1<ReportSize> ShadowOffset { get; public set; }
    public Style(IPropertyStore propertyStore);
    public Border get_Border();
    public void set_Border(Border value);
    public Border get_TopBorder();
    public void set_TopBorder(Border value);
    public Border get_BottomBorder();
    public void set_BottomBorder(Border value);
    public Border get_LeftBorder();
    public void set_LeftBorder(Border value);
    public Border get_RightBorder();
    public void set_RightBorder(Border value);
    public ReportExpression`1<ReportColor> get_BackgroundColor();
    public void set_BackgroundColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<BackgroundGradients> get_BackgroundGradientType();
    public void set_BackgroundGradientType(ReportExpression`1<BackgroundGradients> value);
    public ReportExpression`1<ReportColor> get_BackgroundGradientEndColor();
    public void set_BackgroundGradientEndColor(ReportExpression`1<ReportColor> value);
    public BackgroundImage get_BackgroundImage();
    public void set_BackgroundImage(BackgroundImage value);
    public ReportExpression`1<FontStyles> get_FontStyle();
    public void set_FontStyle(ReportExpression`1<FontStyles> value);
    public ReportExpression get_FontFamily();
    public void set_FontFamily(ReportExpression value);
    public ReportExpression`1<ReportSize> get_FontSize();
    public void set_FontSize(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<FontWeights> get_FontWeight();
    public void set_FontWeight(ReportExpression`1<FontWeights> value);
    public ReportExpression get_Format();
    public void set_Format(ReportExpression value);
    public ReportExpression`1<TextDecorations> get_TextDecoration();
    public void set_TextDecoration(ReportExpression`1<TextDecorations> value);
    public ReportExpression`1<TextAlignments> get_TextAlign();
    public void set_TextAlign(ReportExpression`1<TextAlignments> value);
    public ReportExpression`1<VerticalAlignments> get_VerticalAlign();
    public void set_VerticalAlign(ReportExpression`1<VerticalAlignments> value);
    public ReportExpression`1<ReportColor> get_Color();
    public void set_Color(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportSize> get_PaddingLeft();
    public void set_PaddingLeft(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_PaddingRight();
    public void set_PaddingRight(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_PaddingTop();
    public void set_PaddingTop(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_PaddingBottom();
    public void set_PaddingBottom(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_LineHeight();
    public void set_LineHeight(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<TextDirections> get_Direction();
    public void set_Direction(ReportExpression`1<TextDirections> value);
    public ReportExpression`1<WritingModes> get_WritingMode();
    public void set_WritingMode(ReportExpression`1<WritingModes> value);
    public ReportExpression get_Language();
    public void set_Language(ReportExpression value);
    public ReportExpression`1<UnicodeBiDiTypes> get_UnicodeBiDi();
    public void set_UnicodeBiDi(ReportExpression`1<UnicodeBiDiTypes> value);
    public ReportExpression`1<Calendars> get_Calendar();
    public void set_Calendar(ReportExpression`1<Calendars> value);
    public ReportExpression get_NumeralLanguage();
    public void set_NumeralLanguage(ReportExpression value);
    public ReportExpression`1<int> get_NumeralVariant();
    public void set_NumeralVariant(ReportExpression`1<int> value);
    public ReportExpression`1<TextEffects> get_TextEffect();
    public void set_TextEffect(ReportExpression`1<TextEffects> value);
    public ReportExpression`1<BackgroundHatchTypes> get_BackgroundHatchType();
    public void set_BackgroundHatchType(ReportExpression`1<BackgroundHatchTypes> value);
    public ReportExpression`1<ReportColor> get_ShadowColor();
    public void set_ShadowColor(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportSize> get_ShadowOffset();
    public void set_ShadowOffset(ReportExpression`1<ReportSize> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Subreport : ReportItem {
    public string ReportName { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Parameter>")]
public IList`1<Parameter> Parameters { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NoRowsMessage { get; public set; }
    [DefaultValueAttribute("False")]
public bool MergeTransactions { get; public set; }
    [DefaultValueAttribute("False")]
public bool KeepTogether { get; public set; }
    [DefaultValueAttribute("False")]
public bool OmitBorderOnPageBreak { get; public set; }
    public Subreport(IPropertyStore propertyStore);
    public string get_ReportName();
    public void set_ReportName(string value);
    public IList`1<Parameter> get_Parameters();
    public void set_Parameters(IList`1<Parameter> value);
    public ReportExpression get_NoRowsMessage();
    public void set_NoRowsMessage(ReportExpression value);
    public bool get_MergeTransactions();
    public void set_MergeTransactions(bool value);
    public bool get_KeepTogether();
    public void set_KeepTogether(bool value);
    public bool get_OmitBorderOnPageBreak();
    public void set_OmitBorderOnPageBreak(bool value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Tablix : DataRegion {
    public TablixCorner TablixCorner { get; public set; }
    public TablixBody TablixBody { get; public set; }
    public TablixHierarchy TablixColumnHierarchy { get; public set; }
    public TablixHierarchy TablixRowHierarchy { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LayoutDirections LayoutDirection { get; public set; }
    [DefaultValueAttribute("0")]
[ValidValuesAttribute("0", "2147483647")]
public int GroupsBeforeRowHeaders { get; public set; }
    [DefaultValueAttribute("False")]
public bool RepeatColumnHeaders { get; public set; }
    [DefaultValueAttribute("False")]
public bool RepeatRowHeaders { get; public set; }
    [DefaultValueAttribute("False")]
public bool FixedColumnHeaders { get; public set; }
    [DefaultValueAttribute("False")]
public bool FixedRowHeaders { get; public set; }
    [DefaultValueAttribute("False")]
public bool OmitBorderOnPageBreak { get; public set; }
    public Tablix(IPropertyStore propertyStore);
    public TablixCorner get_TablixCorner();
    public void set_TablixCorner(TablixCorner value);
    public TablixBody get_TablixBody();
    public void set_TablixBody(TablixBody value);
    public TablixHierarchy get_TablixColumnHierarchy();
    public void set_TablixColumnHierarchy(TablixHierarchy value);
    public TablixHierarchy get_TablixRowHierarchy();
    public void set_TablixRowHierarchy(TablixHierarchy value);
    public LayoutDirections get_LayoutDirection();
    public void set_LayoutDirection(LayoutDirections value);
    public int get_GroupsBeforeRowHeaders();
    public void set_GroupsBeforeRowHeaders(int value);
    public bool get_RepeatColumnHeaders();
    public void set_RepeatColumnHeaders(bool value);
    public bool get_RepeatRowHeaders();
    public void set_RepeatRowHeaders(bool value);
    public bool get_FixedColumnHeaders();
    public void set_FixedColumnHeaders(bool value);
    public bool get_FixedRowHeaders();
    public void set_FixedRowHeaders(bool value);
    public bool get_OmitBorderOnPageBreak();
    public void set_OmitBorderOnPageBreak(bool value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixBody : DataRegionBody {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.TablixColumn>")]
public IList`1<TablixColumn> TablixColumns { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.TablixRow>")]
public IList`1<TablixRow> TablixRows { get; public set; }
    public TablixBody(IPropertyStore propertyStore);
    public IList`1<TablixColumn> get_TablixColumns();
    public void set_TablixColumns(IList`1<TablixColumn> value);
    public IList`1<TablixRow> get_TablixRows();
    public void set_TablixRows(IList`1<TablixRow> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixCell : DataRegionCell {
    public CellContents CellContents { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("TablixCellDataElementOutputTypes")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    public TablixCell(IPropertyStore propertyStore);
    public CellContents get_CellContents();
    public void set_CellContents(CellContents value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixColumn : ReportObject {
    public ReportSize Width { get; public set; }
    public TablixColumn(IPropertyStore propertyStore);
    public ReportSize get_Width();
    public void set_Width(ReportSize value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixCorner : ReportObject {
    [XmlArrayItemAttribute("TablixCornerRow", "Microsoft.ReportingServices.RdlObjectModel.TablixCornerRow")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<System.Collections.Generic.IList`1<Microsoft.ReportingServices.RdlObjectModel.TablixCornerCell>>")]
public IList`1<IList`1<TablixCornerCell>> TablixCornerRows { get; public set; }
    public TablixCorner(IPropertyStore propertyStore);
    public IList`1<IList`1<TablixCornerCell>> get_TablixCornerRows();
    public void set_TablixCornerRows(IList`1<IList`1<TablixCornerCell>> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixCornerCell : ReportObject {
    public CellContents CellContents { get; public set; }
    public TablixCornerCell(IPropertyStore propertyStore);
    public CellContents get_CellContents();
    public void set_CellContents(CellContents value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixCornerRow : RdlCollection`1<TablixCornerCell> {
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixHeader : ReportObject {
    public ReportSize Size { get; public set; }
    public CellContents CellContents { get; public set; }
    public TablixHeader(IPropertyStore propertyStore);
    public ReportSize get_Size();
    public void set_Size(ReportSize value);
    public CellContents get_CellContents();
    public void set_CellContents(CellContents value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixHierarchy : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.TablixMember>")]
public IList`1<TablixMember> TablixMembers { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.Members { get; }
    public TablixHierarchy(IPropertyStore propertyStore);
    public IList`1<TablixMember> get_TablixMembers();
    public void set_TablixMembers(IList`1<TablixMember> value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchy.get_Members();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixMember : HierarchyMember {
    public Group Group { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> SortExpressions { get; public set; }
    public TablixHeader TablixHeader { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.TablixMember>")]
public IList`1<TablixMember> TablixMembers { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    [DefaultValueAttribute("False")]
public bool FixedData { get; public set; }
    public Visibility Visibility { get; public set; }
    [DefaultValueAttribute("False")]
public bool HideIfNoRows { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public KeepWithGroupTypes KeepWithGroup { get; public set; }
    [DefaultValueAttribute("False")]
public bool RepeatOnNewPage { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("TablixMemberDataElementOutputTypes")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    [DefaultValueAttribute("False")]
public bool KeepTogether { get; public set; }
    private IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.Members { get; }
    public TablixMember(IPropertyStore propertyStore);
    public virtual Group get_Group();
    public virtual void set_Group(Group value);
    public sealed virtual IList`1<SortExpression> get_SortExpressions();
    public sealed virtual void set_SortExpressions(IList`1<SortExpression> value);
    public TablixHeader get_TablixHeader();
    public void set_TablixHeader(TablixHeader value);
    public IList`1<TablixMember> get_TablixMembers();
    public void set_TablixMembers(IList`1<TablixMember> value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public bool get_FixedData();
    public void set_FixedData(bool value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public bool get_HideIfNoRows();
    public void set_HideIfNoRows(bool value);
    public KeepWithGroupTypes get_KeepWithGroup();
    public void set_KeepWithGroup(KeepWithGroupTypes value);
    public bool get_RepeatOnNewPage();
    public void set_RepeatOnNewPage(bool value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public bool get_KeepTogether();
    public void set_KeepTogether(bool value);
    public virtual void Initialize();
    private sealed virtual override IEnumerable`1<IHierarchyMember> Microsoft.ReportingServices.RdlObjectModel.IHierarchyMember.get_Members();
}
internal class Microsoft.ReportingServices.RdlObjectModel.TablixRow : ReportObject {
    public ReportSize Height { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.TablixCell>")]
public IList`1<TablixCell> TablixCells { get; public set; }
    public TablixRow(IPropertyStore propertyStore);
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public IList`1<TablixCell> get_TablixCells();
    public void set_TablixCells(IList`1<TablixCell> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.TextAlignments : Enum {
    public int value__;
    public static TextAlignments Default;
    public static TextAlignments General;
    public static TextAlignments Left;
    public static TextAlignments Center;
    public static TextAlignments Right;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.TextAntiAliasingQualityTypes : Enum {
    public int value__;
    public static TextAntiAliasingQualityTypes High;
    public static TextAntiAliasingQualityTypes Normal;
    public static TextAntiAliasingQualityTypes SystemDefault;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Textbox : ReportItem {
    [DefaultValueAttribute("False")]
public bool CanGrow { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanShrink { get; public set; }
    [DefaultValueAttribute("")]
public string HideDuplicates { get; public set; }
    public ToggleImage ToggleImage { get; public set; }
    public UserSort UserSort { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataElementStyles DataElementStyle { get; public set; }
    [DefaultValueAttribute("False")]
public bool KeepTogether { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.Paragraph>")]
public IList`1<Paragraph> Paragraphs { get; public set; }
    public Textbox(IPropertyStore propertyStore);
    public bool get_CanGrow();
    public void set_CanGrow(bool value);
    public bool get_CanShrink();
    public void set_CanShrink(bool value);
    public string get_HideDuplicates();
    public void set_HideDuplicates(string value);
    public ToggleImage get_ToggleImage();
    public void set_ToggleImage(ToggleImage value);
    public UserSort get_UserSort();
    public void set_UserSort(UserSort value);
    public DataElementStyles get_DataElementStyle();
    public void set_DataElementStyle(DataElementStyles value);
    public bool get_KeepTogether();
    public void set_KeepTogether(bool value);
    public IList`1<Paragraph> get_Paragraphs();
    public void set_Paragraphs(IList`1<Paragraph> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.TextDecorations : Enum {
    public int value__;
    public static TextDecorations Default;
    public static TextDecorations None;
    public static TextDecorations Underline;
    public static TextDecorations Overline;
    public static TextDecorations LineThrough;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.TextDirections : Enum {
    public int value__;
    public static TextDirections Default;
    public static TextDirections LTR;
    public static TextDirections RTL;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.TextEffects : Enum {
    public int value__;
    public static TextEffects Default;
    public static TextEffects None;
    public static TextEffects Shadow;
    public static TextEffects Emboss;
    public static TextEffects Embed;
    public static TextEffects Frame;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.TextOrientations : Enum {
    public int value__;
    public static TextOrientations Auto;
    public static TextOrientations Horizontal;
    public static TextOrientations Rotated90;
    public static TextOrientations Rotated270;
    public static TextOrientations Stacked;
}
internal class Microsoft.ReportingServices.RdlObjectModel.TextRun : ReportElement {
    [DefaultValueAttribute("")]
public string Label { get; public set; }
    public ReportExpression Value { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    [ReportExpressionDefaultValueAttribute("")]
public ReportExpression ToolTip { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.MarkupType", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<MarkupType> MarkupType { get; public set; }
    public TextRun(IPropertyStore propertyStore);
    public string get_Label();
    public void set_Label(string value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ReportExpression get_ToolTip();
    public void set_ToolTip(ReportExpression value);
    public ReportExpression`1<MarkupType> get_MarkupType();
    public void set_MarkupType(ReportExpression`1<MarkupType> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.Thermometer : ReportObject {
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> BulbOffset { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> BulbSize { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ThermometerStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<ThermometerStyles> ThermometerStyle { get; public set; }
    public Thermometer(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<double> get_BulbOffset();
    public void set_BulbOffset(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_BulbSize();
    public void set_BulbSize(ReportExpression`1<double> value);
    public ReportExpression`1<ThermometerStyles> get_ThermometerStyle();
    public void set_ThermometerStyle(ReportExpression`1<ThermometerStyles> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel.ThermometerStyles : Enum {
    public int value__;
    public static ThermometerStyles Standard;
    public static ThermometerStyles Flask;
}
internal class Microsoft.ReportingServices.RdlObjectModel.TickMarkImage : BaseGaugeImage {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> HueColor { get; public set; }
    public TickMarkImage(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_HueColor();
    public void set_HueColor(ReportExpression`1<ReportColor> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.TickMarkStyle : ReportObject {
    public Style Style { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> DistanceFromScale { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.Placements", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<Placements> Placement { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> EnableGradient { get; public set; }
    [ValidValuesAttribute("0", "100")]
[ReportExpressionDefaultValueAttribute("System.Double", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<double> GradientDensity { get; public set; }
    public TickMarkImage TickMarkImage { get; public set; }
    public ReportExpression`1<double> Length { get; public set; }
    public ReportExpression`1<double> Width { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.MarkerStyles", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<MarkerStyles> Shape { get; public set; }
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    public TickMarkStyle(IPropertyStore propertyStore);
    public Style get_Style();
    public void set_Style(Style value);
    public ReportExpression`1<double> get_DistanceFromScale();
    public void set_DistanceFromScale(ReportExpression`1<double> value);
    public ReportExpression`1<Placements> get_Placement();
    public void set_Placement(ReportExpression`1<Placements> value);
    public ReportExpression`1<bool> get_EnableGradient();
    public void set_EnableGradient(ReportExpression`1<bool> value);
    public ReportExpression`1<double> get_GradientDensity();
    public void set_GradientDensity(ReportExpression`1<double> value);
    public TickMarkImage get_TickMarkImage();
    public void set_TickMarkImage(TickMarkImage value);
    public ReportExpression`1<double> get_Length();
    public void set_Length(ReportExpression`1<double> value);
    public ReportExpression`1<double> get_Width();
    public void set_Width(ReportExpression`1<double> value);
    public ReportExpression`1<MarkerStyles> get_Shape();
    public void set_Shape(ReportExpression`1<MarkerStyles> value);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel.ToggleImage : ReportObject {
    public ReportExpression`1<bool> InitialState { get; public set; }
    public ToggleImage(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_InitialState();
    public void set_InitialState(ReportExpression`1<bool> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.TopImage : BaseGaugeImage {
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> HueColor { get; public set; }
    public TopImage(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_HueColor();
    public void set_HueColor(ReportExpression`1<ReportColor> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.UnicodeBiDiTypes : Enum {
    public int value__;
    public static UnicodeBiDiTypes Normal;
    public static UnicodeBiDiTypes Embed;
    public static UnicodeBiDiTypes BiDiOverride;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.UsedInQueryTypes : Enum {
    public int value__;
    public static UsedInQueryTypes Auto;
    public static UsedInQueryTypes True;
    public static UsedInQueryTypes False;
}
internal class Microsoft.ReportingServices.RdlObjectModel.UserSort : ReportObject {
    public ReportExpression SortExpression { get; public set; }
    [DefaultValueAttribute("")]
public string SortExpressionScope { get; public set; }
    [DefaultValueAttribute("")]
public string SortTarget { get; public set; }
    public UserSort(IPropertyStore propertyStore);
    public ReportExpression get_SortExpression();
    public void set_SortExpression(ReportExpression value);
    public string get_SortExpressionScope();
    public void set_SortExpressionScope(string value);
    public string get_SortTarget();
    public void set_SortTarget(string value);
}
[AttributeUsageAttribute("128")]
internal class Microsoft.ReportingServices.RdlObjectModel.ValidEnumValuesAttribute : Attribute {
    private IList`1<int> m_validValues;
    public IList`1<int> ValidValues { get; public set; }
    public ValidEnumValuesAttribute(string field);
    public ValidEnumValuesAttribute(Type type, string field);
    public IList`1<int> get_ValidValues();
    public void set_ValidValues(IList`1<int> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.ValidValues : ReportObject {
    public DataSetReference DataSetReference { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ParameterValue>")]
public IList`1<ParameterValue> ParameterValues { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression ValidationExpression { get; public set; }
    public ValidValues(IPropertyStore propertyStore);
    public DataSetReference get_DataSetReference();
    public void set_DataSetReference(DataSetReference value);
    public IList`1<ParameterValue> get_ParameterValues();
    public void set_ParameterValues(IList`1<ParameterValue> value);
    public ReportExpression get_ValidationExpression();
    public void set_ValidationExpression(ReportExpression value);
    public virtual void Initialize();
}
[AttributeUsageAttribute("128")]
internal class Microsoft.ReportingServices.RdlObjectModel.ValidValuesAttribute : Attribute {
    private object m_minimum;
    private object m_maximum;
    public object Minimum { get; public set; }
    public object Maximum { get; public set; }
    public ValidValuesAttribute(int minimum, int maximum);
    public ValidValuesAttribute(double minimum, double maximum);
    public ValidValuesAttribute(string minimumField, string maximumField);
    public object get_Minimum();
    public void set_Minimum(object value);
    public object get_Maximum();
    public void set_Maximum(object value);
}
internal class Microsoft.ReportingServices.RdlObjectModel.Variable : ReportObject {
    public string Name { get; public set; }
    public ReportExpression Value { get; public set; }
    public Variable(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.VerticalAlignments : Enum {
    public int value__;
    public static VerticalAlignments Default;
    public static VerticalAlignments Top;
    public static VerticalAlignments Middle;
    public static VerticalAlignments Bottom;
}
internal class Microsoft.ReportingServices.RdlObjectModel.Visibility : ReportObject {
    [ReportExpressionDefaultValueAttribute("System.Boolean", "Mono.Cecil.CustomAttributeArgument")]
public ReportExpression`1<bool> Hidden { get; public set; }
    [DefaultValueAttribute("")]
public string ToggleItem { get; public set; }
    public Visibility(IPropertyStore propertyStore);
    public ReportExpression`1<bool> get_Hidden();
    public void set_Hidden(ReportExpression`1<bool> value);
    public string get_ToggleItem();
    public void set_ToggleItem(string value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel.WidthSensitivities : Enum {
    public int value__;
    public static WidthSensitivities Auto;
    public static WidthSensitivities True;
    public static WidthSensitivities False;
}
internal enum Microsoft.ReportingServices.RdlObjectModel.WritingModes : Enum {
    public int value__;
    public static WritingModes Default;
    public static WritingModes Horizontal;
    public static WritingModes Vertical;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Axis2005 : ChartAxis {
    [DefaultValueAttribute("False")]
public bool Visible { get; public set; }
    public Style2005 Style { get; public set; }
    public Title2005 Title { get; public set; }
    [DefaultValueAttribute("False")]
public bool Margin { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TickMarks2005 MajorTickMarks { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TickMarks2005 MinorTickMarks { get; public set; }
    public GridLines2005 MajorGridLines { get; public set; }
    public GridLines2005 MinorGridLines { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression MajorInterval { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression MinorInterval { get; public set; }
    [DefaultValueAttribute("False")]
public bool Reverse { get; public set; }
    [DefaultValueAttribute("False")]
public bool Interlaced { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Min { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Max { get; public set; }
    [DefaultValueAttribute("False")]
public bool LogScale { get; public set; }
    [DefaultValueAttribute("")]
public string Angle { get; public set; }
    public Axis2005(IPropertyStore propertyStore);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public Title2005 get_Title();
    public void set_Title(Title2005 value);
    public bool get_Margin();
    public void set_Margin(bool value);
    public TickMarks2005 get_MajorTickMarks();
    public void set_MajorTickMarks(TickMarks2005 value);
    public TickMarks2005 get_MinorTickMarks();
    public void set_MinorTickMarks(TickMarks2005 value);
    public GridLines2005 get_MajorGridLines();
    public void set_MajorGridLines(GridLines2005 value);
    public GridLines2005 get_MinorGridLines();
    public void set_MinorGridLines(GridLines2005 value);
    public ReportExpression get_MajorInterval();
    public void set_MajorInterval(ReportExpression value);
    public ReportExpression get_MinorInterval();
    public void set_MinorInterval(ReportExpression value);
    public bool get_Reverse();
    public void set_Reverse(bool value);
    public bool get_Interlaced();
    public void set_Interlaced(bool value);
    public ReportExpression get_Min();
    public void set_Min(ReportExpression value);
    public ReportExpression get_Max();
    public void set_Max(ReportExpression value);
    public bool get_LogScale();
    public void set_LogScale(bool value);
    public string get_Angle();
    public void set_Angle(string value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.BackgroundImage2005 : BackgroundImage {
    public ReportExpression`1<BackgroundRepeatTypes2005> BackgroundRepeat { get; public set; }
    public BackgroundImage2005(IPropertyStore propertyStore);
    public ReportExpression`1<BackgroundRepeatTypes2005> get_BackgroundRepeat();
    public void set_BackgroundRepeat(ReportExpression`1<BackgroundRepeatTypes2005> value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.BackgroundRepeatTypes2005 : Enum {
    public int value__;
    public static BackgroundRepeatTypes2005 Repeat;
    public static BackgroundRepeatTypes2005 RepeatX;
    public static BackgroundRepeatTypes2005 RepeatY;
    public static BackgroundRepeatTypes2005 NoRepeat;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Body2005 : Body {
    [DefaultValueAttribute("1")]
[ValidValuesAttribute("1", "100")]
public int Columns { get; public set; }
    public ReportSize ColumnSpacing { get; public set; }
    public Body2005(IPropertyStore propertyStore);
    public int get_Columns();
    public void set_Columns(int value);
    public ReportSize get_ColumnSpacing();
    public void set_ColumnSpacing(ReportSize value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.BorderColor2005 : ReportObject {
    public ReportExpression`1<ReportColor> Default { get; public set; }
    public ReportExpression`1<ReportColor> Left { get; public set; }
    public ReportExpression`1<ReportColor> Right { get; public set; }
    public ReportExpression`1<ReportColor> Top { get; public set; }
    public ReportExpression`1<ReportColor> Bottom { get; public set; }
    public BorderColor2005(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_Default();
    public void set_Default(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportColor> get_Left();
    public void set_Left(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportColor> get_Right();
    public void set_Right(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportColor> get_Top();
    public void set_Top(ReportExpression`1<ReportColor> value);
    public ReportExpression`1<ReportColor> get_Bottom();
    public void set_Bottom(ReportExpression`1<ReportColor> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.BorderStyle2005 : ReportObject {
    public ReportExpression`1<BorderStyles2005> Default { get; public set; }
    public ReportExpression`1<BorderStyles2005> Left { get; public set; }
    public ReportExpression`1<BorderStyles2005> Right { get; public set; }
    public ReportExpression`1<BorderStyles2005> Top { get; public set; }
    public ReportExpression`1<BorderStyles2005> Bottom { get; public set; }
    public BorderStyle2005(IPropertyStore propertyStore);
    public ReportExpression`1<BorderStyles2005> get_Default();
    public void set_Default(ReportExpression`1<BorderStyles2005> value);
    public ReportExpression`1<BorderStyles2005> get_Left();
    public void set_Left(ReportExpression`1<BorderStyles2005> value);
    public ReportExpression`1<BorderStyles2005> get_Right();
    public void set_Right(ReportExpression`1<BorderStyles2005> value);
    public ReportExpression`1<BorderStyles2005> get_Top();
    public void set_Top(ReportExpression`1<BorderStyles2005> value);
    public ReportExpression`1<BorderStyles2005> get_Bottom();
    public void set_Bottom(ReportExpression`1<BorderStyles2005> value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.BorderStyles2005 : Enum {
    public int value__;
    public static BorderStyles2005 Default;
    public static BorderStyles2005 None;
    public static BorderStyles2005 Dotted;
    public static BorderStyles2005 Dashed;
    public static BorderStyles2005 Solid;
    public static BorderStyles2005 Double;
    public static BorderStyles2005 Groove;
    public static BorderStyles2005 Ridge;
    public static BorderStyles2005 Inset;
    public static BorderStyles2005 WindowInset;
    public static BorderStyles2005 Outset;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.BorderWidth2005 : ReportObject {
    public ReportExpression`1<ReportSize> Default { get; public set; }
    public ReportExpression`1<ReportSize> Left { get; public set; }
    public ReportExpression`1<ReportSize> Right { get; public set; }
    public ReportExpression`1<ReportSize> Top { get; public set; }
    public ReportExpression`1<ReportSize> Bottom { get; public set; }
    public BorderWidth2005(IPropertyStore propertyStore);
    public ReportExpression`1<ReportSize> get_Default();
    public void set_Default(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_Left();
    public void set_Left(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_Right();
    public void set_Right(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_Top();
    public void set_Top(ReportExpression`1<ReportSize> value);
    public ReportExpression`1<ReportSize> get_Bottom();
    public void set_Bottom(ReportExpression`1<ReportSize> value);
    public virtual void Initialize();
}
[EnumNamesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Calendar")]
internal enum Microsoft.ReportingServices.RdlObjectModel2005.Calendar2005 : Enum {
    public int value__;
    public static Calendar2005 Gregorian;
    public static Calendar2005 GregorianArabic;
    public static Calendar2005 GregorianMiddleEastFrench;
    public static Calendar2005 GregorianTransliteratedEnglish;
    public static Calendar2005 GregorianTransliteratedFrench;
    public static Calendar2005 GregorianUSEnglish;
    public static Calendar2005 Hebrew;
    public static Calendar2005 Hijri;
    public static Calendar2005 Japanese;
    public static Calendar2005 Korea;
    public static Calendar2005 Taiwan;
    public static Calendar2005 ThaiBuddhist;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.CategoryAxis2005 : ReportObject {
    public Axis2005 Axis { get; public set; }
    public CategoryAxis2005(IPropertyStore propertyStore);
    public Axis2005 get_Axis();
    public void set_Axis(Axis2005 value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.CategoryGrouping2005 : ReportObject {
    public DynamicSeries2005 DynamicCategories { get; public set; }
    [XmlArrayItemAttribute("StaticMember", "Microsoft.ReportingServices.RdlObjectModel2005.StaticMember2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.StaticMember2005>")]
public IList`1<StaticMember2005> StaticCategories { get; public set; }
    public CategoryGrouping2005(IPropertyStore propertyStore);
    public DynamicSeries2005 get_DynamicCategories();
    public void set_DynamicCategories(DynamicSeries2005 value);
    public IList`1<StaticMember2005> get_StaticCategories();
    public void set_StaticCategories(IList`1<StaticMember2005> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Chart2005 : Chart {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartTypes2005 Type { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartSubtypes2005 Subtype { get; public set; }
    [XmlArrayItemAttribute("SeriesGrouping", "Microsoft.ReportingServices.RdlObjectModel2005.SeriesGrouping2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.SeriesGrouping2005>")]
public IList`1<SeriesGrouping2005> SeriesGroupings { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.CategoryGrouping2005>")]
[XmlArrayItemAttribute("CategoryGrouping", "Microsoft.ReportingServices.RdlObjectModel2005.CategoryGrouping2005")]
public IList`1<CategoryGrouping2005> CategoryGroupings { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.ChartSeries2005>")]
[XmlArrayItemAttribute("ChartSeries", "Microsoft.ReportingServices.RdlObjectModel2005.ChartSeries2005")]
public IList`1<ChartSeries2005> ChartData { get; public set; }
    public Legend2005 Legend { get; public set; }
    public CategoryAxis2005 CategoryAxis { get; public set; }
    public ValueAxis2005 ValueAxis { get; public set; }
    public Title2005 Title { get; public set; }
    [DefaultValueAttribute("0")]
public int PointWidth { get; public set; }
    public ThreeDProperties2005 ThreeDProperties { get; public set; }
    public PlotArea2005 PlotArea { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtStart { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NoRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtEnd { get; public set; }
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public Chart2005(IPropertyStore propertyStore);
    public ChartTypes2005 get_Type();
    public void set_Type(ChartTypes2005 value);
    public ChartSubtypes2005 get_Subtype();
    public void set_Subtype(ChartSubtypes2005 value);
    public IList`1<SeriesGrouping2005> get_SeriesGroupings();
    public void set_SeriesGroupings(IList`1<SeriesGrouping2005> value);
    public IList`1<CategoryGrouping2005> get_CategoryGroupings();
    public void set_CategoryGroupings(IList`1<CategoryGrouping2005> value);
    public IList`1<ChartSeries2005> get_ChartData();
    public void set_ChartData(IList`1<ChartSeries2005> value);
    public Legend2005 get_Legend();
    public void set_Legend(Legend2005 value);
    public CategoryAxis2005 get_CategoryAxis();
    public void set_CategoryAxis(CategoryAxis2005 value);
    public ValueAxis2005 get_ValueAxis();
    public void set_ValueAxis(ValueAxis2005 value);
    public Title2005 get_Title();
    public void set_Title(Title2005 value);
    public int get_PointWidth();
    public void set_PointWidth(int value);
    public ThreeDProperties2005 get_ThreeDProperties();
    public void set_ThreeDProperties(ThreeDProperties2005 value);
    public PlotArea2005 get_PlotArea();
    public void set_PlotArea(PlotArea2005 value);
    public sealed virtual bool get_PageBreakAtStart();
    public sealed virtual void set_PageBreakAtStart(bool value);
    public ReportExpression get_NoRows();
    public void set_NoRows(ReportExpression value);
    public sealed virtual bool get_PageBreakAtEnd();
    public sealed virtual void set_PageBreakAtEnd(bool value);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public virtual void Initialize();
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.ChartSeries2005 : ChartSeries {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.DataPoint2005>")]
[XmlArrayItemAttribute("DataPoint", "Microsoft.ReportingServices.RdlObjectModel2005.DataPoint2005")]
public IList`1<DataPoint2005> DataPoints { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PlotTypes2005 PlotType { get; public set; }
    public ChartSeries2005(IPropertyStore propertyStore);
    public IList`1<DataPoint2005> get_DataPoints();
    public void set_DataPoints(IList`1<DataPoint2005> value);
    public PlotTypes2005 get_PlotType();
    public void set_PlotType(PlotTypes2005 value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.ChartSubtypes2005 : Enum {
    public int value__;
    public static ChartSubtypes2005 Plain;
    public static ChartSubtypes2005 Stacked;
    public static ChartSubtypes2005 PercentStacked;
    public static ChartSubtypes2005 Smooth;
    public static ChartSubtypes2005 OpenHighLowClose;
    public static ChartSubtypes2005 Candlestick;
    public static ChartSubtypes2005 Exploded;
    public static ChartSubtypes2005 Line;
    public static ChartSubtypes2005 SmoothLine;
    public static ChartSubtypes2005 HighLowClose;
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.ChartTypes2005 : Enum {
    public int value__;
    public static ChartTypes2005 Column;
    public static ChartTypes2005 Bar;
    public static ChartTypes2005 Line;
    public static ChartTypes2005 Scatter;
    public static ChartTypes2005 Area;
    public static ChartTypes2005 Pie;
    public static ChartTypes2005 Bubble;
    public static ChartTypes2005 Doughnut;
    public static ChartTypes2005 Stock;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.ColumnGrouping2005 : ReportObject {
    public ReportSize Height { get; public set; }
    public DynamicColumns2005 DynamicColumns { get; public set; }
    [XmlArrayItemAttribute("StaticColumn", "Microsoft.ReportingServices.RdlObjectModel2005.StaticColumn2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.StaticColumn2005>")]
public IList`1<StaticColumn2005> StaticColumns { get; public set; }
    [DefaultValueAttribute("False")]
public bool FixedHeader { get; public set; }
    public ColumnGrouping2005(IPropertyStore propertyStore);
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public DynamicColumns2005 get_DynamicColumns();
    public void set_DynamicColumns(DynamicColumns2005 value);
    public IList`1<StaticColumn2005> get_StaticColumns();
    public void set_StaticColumns(IList`1<StaticColumn2005> value);
    public bool get_FixedHeader();
    public void set_FixedHeader(bool value);
    public virtual void Initialize();
}
internal static class Microsoft.ReportingServices.RdlObjectModel2005.Constants2005 : object {
    public static String[] FontWeight;
    public static String[] WritingMode;
    public static String[] UnicodeBiDi;
    public static String[] Calendar;
    public static Int32[] DataPoint2005DataElementOutputTypes;
    public static Int32[] List2005DataInstanceElementOutputTypes;
    public static Int32[] Matrix2005CellDataElementOutputTypes;
    public static Int32[] Subtotal2005DataElementOutputTypes;
    public static Int32[] Table2005DetailDataElementOutputTypes;
    public static Int32[] Style2005FontStyles;
    public static Int32[] Style2005TextDecorations;
    public static Int32[] Style2005TextAlignments;
    public static Int32[] Style2005VerticalAlignments;
    public static Int32[] Style2005TextDirections;
    private static Constants2005();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Corner2005 : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public Corner2005(IPropertyStore propertyStore);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.CustomData2005 : CustomData {
    public DataHierarchy DataColumnGroupings { get; public set; }
    public DataHierarchy DataRowGroupings { get; public set; }
    public CustomData2005(IPropertyStore propertyStore);
    public DataHierarchy get_DataColumnGroupings();
    public void set_DataColumnGroupings(DataHierarchy value);
    public DataHierarchy get_DataRowGroupings();
    public void set_DataRowGroupings(DataHierarchy value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.CustomReportItem2005 : CustomReportItem {
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public CustomReportItem2005(IPropertyStore propertyStore);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.DataElementStyles2005 : Enum {
    public int value__;
    public static DataElementStyles2005 Auto;
    public static DataElementStyles2005 AttributeNormal;
    public static DataElementStyles2005 ElementNormal;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DataGrouping2005 : DataMember {
    [DefaultValueAttribute("False")]
public bool Static { get; public set; }
    public Grouping2005 Grouping { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> Sorting { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.DataMember>")]
[XmlArrayItemAttribute("DataGrouping", "Microsoft.ReportingServices.RdlObjectModel2005.DataGrouping2005")]
public IList`1<DataMember> DataGroupings { get; public set; }
    public DataGrouping2005(IPropertyStore propertyStore);
    public bool get_Static();
    public void set_Static(bool value);
    public Grouping2005 get_Grouping();
    public void set_Grouping(Grouping2005 value);
    public IList`1<SortExpression> get_Sorting();
    public void set_Sorting(IList`1<SortExpression> value);
    public IList`1<DataMember> get_DataGroupings();
    public void set_DataGroupings(IList`1<DataMember> value);
    public virtual void Initialize();
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DataGroupings2005 : DataHierarchy {
    [XmlArrayItemAttribute("DataGrouping", "Microsoft.ReportingServices.RdlObjectModel2005.DataGrouping2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.DataMember>")]
public IList`1<DataMember> DataGroupings { get; public set; }
    public DataGroupings2005(IPropertyStore propertyStore);
    public IList`1<DataMember> get_DataGroupings();
    public void set_DataGroupings(IList`1<DataMember> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DataLabel2005 : ChartDataLabel {
    public Style2005 Style { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Value { get; public set; }
    [DefaultValueAttribute("False")]
public bool Visible { get; public set; }
    [DefaultValueAttribute("0")]
public int Rotation { get; public set; }
    [XmlChildAttributeAttribute("Value", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string ValueLocID { get; public set; }
    public DataLabel2005(IPropertyStore propertyStore);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public int get_Rotation();
    public void set_Rotation(int value);
    public string get_ValueLocID();
    public void set_ValueLocID(string value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DataPoint2005 : ChartDataPoint {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.DataValue2005>")]
[XmlArrayItemAttribute("DataValue", "Microsoft.ReportingServices.RdlObjectModel2005.DataValue2005")]
public IList`1<DataValue2005> DataValues { get; public set; }
    public DataLabel2005 DataLabel { get; public set; }
    public Action Action { get; public set; }
    public EmptyColorStyle2005 Style { get; public set; }
    public Marker2005 Marker { get; public set; }
    public DataPoint2005(IPropertyStore propertyStore);
    public IList`1<DataValue2005> get_DataValues();
    public void set_DataValues(IList`1<DataValue2005> value);
    public DataLabel2005 get_DataLabel();
    public void set_DataLabel(DataLabel2005 value);
    public Action get_Action();
    public void set_Action(Action value);
    public EmptyColorStyle2005 get_Style();
    public void set_Style(EmptyColorStyle2005 value);
    public Marker2005 get_Marker();
    public void set_Marker(Marker2005 value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DataSource2005 : DataSource {
    public DataSource2005(IPropertyStore propertyStore);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DataValue2005 : ChartDataPointValues {
    public string Name { get; public set; }
    public string Value { get; public set; }
    public DataValue2005(IPropertyStore propertyStore);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Details2005 : ReportObject {
    [XmlArrayItemAttribute("TableRow", "Microsoft.ReportingServices.RdlObjectModel2005.TableRow2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.TableRow2005>")]
public IList`1<TableRow2005> TableRows { get; public set; }
    public Group Grouping { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> Sorting { get; public set; }
    public Visibility Visibility { get; public set; }
    public Details2005(IPropertyStore propertyStore);
    public IList`1<TableRow2005> get_TableRows();
    public void set_TableRows(IList`1<TableRow2005> value);
    public Group get_Grouping();
    public void set_Grouping(Group value);
    public IList`1<SortExpression> get_Sorting();
    public void set_Sorting(IList`1<SortExpression> value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.DrawingStyleTypes2005 : Enum {
    public int value__;
    public static DrawingStyleTypes2005 Cube;
    public static DrawingStyleTypes2005 Cylinder;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DynamicColumns2005 : ReportObject {
    public Grouping2005 Grouping { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> Sorting { get; public set; }
    public Subtotal2005 Subtotal { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public Visibility Visibility { get; public set; }
    public DynamicColumns2005(IPropertyStore propertyStore);
    public Grouping2005 get_Grouping();
    public void set_Grouping(Grouping2005 value);
    public IList`1<SortExpression> get_Sorting();
    public void set_Sorting(IList`1<SortExpression> value);
    public Subtotal2005 get_Subtotal();
    public void set_Subtotal(Subtotal2005 value);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DynamicRows2005 : ReportObject {
    public Grouping2005 Grouping { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> Sorting { get; public set; }
    public Subtotal2005 Subtotal { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public Visibility Visibility { get; public set; }
    public DynamicRows2005(IPropertyStore propertyStore);
    public Grouping2005 get_Grouping();
    public void set_Grouping(Grouping2005 value);
    public IList`1<SortExpression> get_Sorting();
    public void set_Sorting(IList`1<SortExpression> value);
    public Subtotal2005 get_Subtotal();
    public void set_Subtotal(Subtotal2005 value);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.DynamicSeries2005 : ReportObject {
    public Grouping2005 Grouping { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> Sorting { get; public set; }
    public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public DynamicSeries2005(IPropertyStore propertyStore);
    public Grouping2005 get_Grouping();
    public void set_Grouping(Grouping2005 value);
    public IList`1<SortExpression> get_Sorting();
    public void set_Sorting(IList`1<SortExpression> value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.EmptyBorderColor2005 : BorderColor2005 {
    public ReportExpression`1<ReportColor> Default { get; public set; }
    public EmptyBorderColor2005(IPropertyStore propertyStore);
    public ReportExpression`1<ReportColor> get_Default();
    public void set_Default(ReportExpression`1<ReportColor> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.EmptyColorStyle2005 : EmptyColorStyle {
    public EmptyBorderColor2005 BorderColor { get; public set; }
    public BorderStyle2005 BorderStyle { get; public set; }
    public BorderWidth2005 BorderWidth { get; public set; }
    public ReportExpression`1<ReportEnum`1<FontWeight2005>> FontWeight { get; public set; }
    public ReportExpression`1<ReportEnum`1<WritingMode2005>> WritingMode { get; public set; }
    public ReportExpression`1<ReportEnum`1<UnicodeBiDi2005>> UnicodeBiDi { get; public set; }
    public ReportExpression`1<ReportEnum`1<Calendar2005>> Calendar { get; public set; }
    [ReportExpressionDefaultValueAttribute("Microsoft.ReportingServices.RdlObjectModel.ReportColor")]
public ReportExpression`1<ReportColor> Color { get; public set; }
    public EmptyColorStyle2005(IPropertyStore propertyStore);
    public EmptyBorderColor2005 get_BorderColor();
    public void set_BorderColor(EmptyBorderColor2005 value);
    public BorderStyle2005 get_BorderStyle();
    public void set_BorderStyle(BorderStyle2005 value);
    public BorderWidth2005 get_BorderWidth();
    public void set_BorderWidth(BorderWidth2005 value);
    public ReportExpression`1<ReportEnum`1<FontWeight2005>> get_FontWeight();
    public void set_FontWeight(ReportExpression`1<ReportEnum`1<FontWeight2005>> value);
    public ReportExpression`1<ReportEnum`1<WritingMode2005>> get_WritingMode();
    public void set_WritingMode(ReportExpression`1<ReportEnum`1<WritingMode2005>> value);
    public ReportExpression`1<ReportEnum`1<UnicodeBiDi2005>> get_UnicodeBiDi();
    public void set_UnicodeBiDi(ReportExpression`1<ReportEnum`1<UnicodeBiDi2005>> value);
    public ReportExpression`1<ReportEnum`1<Calendar2005>> get_Calendar();
    public void set_Calendar(ReportExpression`1<ReportEnum`1<Calendar2005>> value);
    public ReportExpression`1<ReportColor> get_Color();
    public void set_Color(ReportExpression`1<ReportColor> value);
    public virtual void Initialize();
    public virtual void Upgrade(UpgradeImpl upgrader);
}
[XmlElementClassAttribute("Field")]
internal class Microsoft.ReportingServices.RdlObjectModel2005.FieldEx : Field {
    private string m_typeName;
    [XmlElementAttribute]
public string TypeName { get; public set; }
    public string get_TypeName();
    public void set_TypeName(string value);
}
[EnumNamesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "FontWeight")]
internal enum Microsoft.ReportingServices.RdlObjectModel2005.FontWeight2005 : Enum {
    public int value__;
    public static FontWeight2005 Normal400;
    public static FontWeight2005 Thin100;
    public static FontWeight2005 ExtraLight200;
    public static FontWeight2005 Light300;
    public static FontWeight2005 Medium500;
    public static FontWeight2005 SemiBold600;
    public static FontWeight2005 Bold700;
    public static FontWeight2005 ExtraBold800;
    public static FontWeight2005 Heavy900;
    public static FontWeight2005 Lighter;
    public static FontWeight2005 Normal;
    public static FontWeight2005 Bold;
    public static FontWeight2005 Bolder;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Footer2005 : ReportObject {
    [XmlArrayItemAttribute("TableRow", "Microsoft.ReportingServices.RdlObjectModel2005.TableRow2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.TableRow2005>")]
public IList`1<TableRow2005> TableRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool RepeatOnNewPage { get; public set; }
    public Footer2005(IPropertyStore propertyStore);
    public IList`1<TableRow2005> get_TableRows();
    public void set_TableRows(IList`1<TableRow2005> value);
    public bool get_RepeatOnNewPage();
    public void set_RepeatOnNewPage(bool value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.GridLines2005 : ChartGridLines {
    [DefaultValueAttribute("False")]
public bool ShowGridLines { get; public set; }
    public Style2005 Style { get; public set; }
    public GridLines2005(IPropertyStore propertyStore);
    public bool get_ShowGridLines();
    public void set_ShowGridLines(bool value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Grouping2005 : Group {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtStart { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtEnd { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.CustomProperty>")]
public IList`1<CustomProperty> CustomProperties { get; public set; }
    [DefaultValueAttribute("")]
public string DataCollectionName { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Grouping2005(IPropertyStore propertyStore);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public sealed virtual bool get_PageBreakAtStart();
    public sealed virtual void set_PageBreakAtStart(bool value);
    public sealed virtual bool get_PageBreakAtEnd();
    public sealed virtual void set_PageBreakAtEnd(bool value);
    public IList`1<CustomProperty> get_CustomProperties();
    public void set_CustomProperties(IList`1<CustomProperty> value);
    public string get_DataCollectionName();
    public void set_DataCollectionName(string value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public virtual void Initialize();
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Header2005 : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.TableRow2005>")]
[XmlArrayItemAttribute("TableRow", "Microsoft.ReportingServices.RdlObjectModel2005.TableRow2005")]
public IList`1<TableRow2005> TableRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool RepeatOnNewPage { get; public set; }
    [DefaultValueAttribute("False")]
public bool FixedHeader { get; public set; }
    public Header2005(IPropertyStore propertyStore);
    public IList`1<TableRow2005> get_TableRows();
    public void set_TableRows(IList`1<TableRow2005> value);
    public bool get_RepeatOnNewPage();
    public void set_RepeatOnNewPage(bool value);
    public bool get_FixedHeader();
    public void set_FixedHeader(bool value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Image2005 : Image {
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public Image2005(IPropertyStore propertyStore);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal interface Microsoft.ReportingServices.RdlObjectModel2005.IPageBreakLocation2005 {
    public bool PageBreakAtStart { get; public set; }
    public bool PageBreakAtEnd { get; public set; }
    public PageBreak PageBreak { get; public set; }
    public abstract virtual bool get_PageBreakAtStart();
    public abstract virtual void set_PageBreakAtStart(bool value);
    public abstract virtual bool get_PageBreakAtEnd();
    public abstract virtual void set_PageBreakAtEnd(bool value);
    public abstract virtual PageBreak get_PageBreak();
    public abstract virtual void set_PageBreak(PageBreak value);
}
internal interface Microsoft.ReportingServices.RdlObjectModel2005.IReportItem2005 {
    public Action Action { get; public set; }
    public abstract virtual Action get_Action();
    public abstract virtual void set_Action(Action value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Legend2005 : ChartLegend {
    [DefaultValueAttribute("False")]
public bool Visible { get; public set; }
    public Style2005 Style { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LegendLayouts2005 Layout { get; public set; }
    [DefaultValueAttribute("False")]
public bool InsidePlotArea { get; public set; }
    public Legend2005(IPropertyStore propertyStore);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public LegendLayouts2005 get_Layout();
    public void set_Layout(LegendLayouts2005 value);
    public bool get_InsidePlotArea();
    public void set_InsidePlotArea(bool value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.LegendLayouts2005 : Enum {
    public int value__;
    public static LegendLayouts2005 Column;
    public static LegendLayouts2005 Row;
    public static LegendLayouts2005 Table;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Line2005 : Line {
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public Line2005(IPropertyStore propertyStore);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.List2005 : Tablix {
    public Group Grouping { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> Sorting { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public string DataInstanceName { get; public set; }
    [ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "List2005DataInstanceElementOutputTypes")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataElementOutputTypes DataInstanceElementOutput { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtStart { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NoRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtEnd { get; public set; }
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public List2005(IPropertyStore propertyStore);
    public Group get_Grouping();
    public void set_Grouping(Group value);
    public IList`1<SortExpression> get_Sorting();
    public void set_Sorting(IList`1<SortExpression> value);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public string get_DataInstanceName();
    public void set_DataInstanceName(string value);
    public DataElementOutputTypes get_DataInstanceElementOutput();
    public void set_DataInstanceElementOutput(DataElementOutputTypes value);
    public sealed virtual bool get_PageBreakAtStart();
    public sealed virtual void set_PageBreakAtStart(bool value);
    public ReportExpression get_NoRows();
    public void set_NoRows(ReportExpression value);
    public sealed virtual bool get_PageBreakAtEnd();
    public sealed virtual void set_PageBreakAtEnd(bool value);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public virtual void Initialize();
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Marker2005 : ChartMarker {
    [DefaultValueConstantAttribute("DefaultZeroSize")]
public ReportSize Size { get; public set; }
    public EmptyColorStyle2005 Style { get; public set; }
    public Marker2005(IPropertyStore propertyStore);
    public ReportSize get_Size();
    public void set_Size(ReportSize value);
    public EmptyColorStyle2005 get_Style();
    public void set_Style(EmptyColorStyle2005 value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Matrix2005 : Tablix {
    public Corner2005 Corner { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.ColumnGrouping2005>")]
[XmlArrayItemAttribute("ColumnGrouping", "Microsoft.ReportingServices.RdlObjectModel2005.ColumnGrouping2005")]
public IList`1<ColumnGrouping2005> ColumnGroupings { get; public set; }
    [XmlArrayItemAttribute("RowGrouping", "Microsoft.ReportingServices.RdlObjectModel2005.RowGrouping2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.RowGrouping2005>")]
public IList`1<RowGrouping2005> RowGroupings { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.MatrixRow2005>")]
[XmlArrayItemAttribute("MatrixRow", "Microsoft.ReportingServices.RdlObjectModel2005.MatrixRow2005")]
public IList`1<MatrixRow2005> MatrixRows { get; public set; }
    [XmlArrayItemAttribute("MatrixColumn", "Microsoft.ReportingServices.RdlObjectModel.TablixColumn")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.TablixColumn>")]
public IList`1<TablixColumn> MatrixColumns { get; public set; }
    [DefaultValueAttribute("")]
public string CellDataElementName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Matrix2005CellDataElementOutputTypes")]
public DataElementOutputTypes CellDataElementOutput { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtStart { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NoRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtEnd { get; public set; }
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public Matrix2005(IPropertyStore propertyStore);
    public Corner2005 get_Corner();
    public void set_Corner(Corner2005 value);
    public IList`1<ColumnGrouping2005> get_ColumnGroupings();
    public void set_ColumnGroupings(IList`1<ColumnGrouping2005> value);
    public IList`1<RowGrouping2005> get_RowGroupings();
    public void set_RowGroupings(IList`1<RowGrouping2005> value);
    public IList`1<MatrixRow2005> get_MatrixRows();
    public void set_MatrixRows(IList`1<MatrixRow2005> value);
    public IList`1<TablixColumn> get_MatrixColumns();
    public void set_MatrixColumns(IList`1<TablixColumn> value);
    public string get_CellDataElementName();
    public void set_CellDataElementName(string value);
    public DataElementOutputTypes get_CellDataElementOutput();
    public void set_CellDataElementOutput(DataElementOutputTypes value);
    public sealed virtual bool get_PageBreakAtStart();
    public sealed virtual void set_PageBreakAtStart(bool value);
    public ReportExpression get_NoRows();
    public void set_NoRows(ReportExpression value);
    public sealed virtual bool get_PageBreakAtEnd();
    public sealed virtual void set_PageBreakAtEnd(bool value);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public virtual void Initialize();
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.MatrixCell2005 : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public MatrixCell2005(IPropertyStore propertyStore);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.MatrixRow2005 : ReportObject {
    public ReportSize Height { get; public set; }
    [XmlArrayItemAttribute("MatrixCell", "Microsoft.ReportingServices.RdlObjectModel2005.MatrixCell2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.MatrixCell2005>")]
public IList`1<MatrixCell2005> MatrixCells { get; public set; }
    public MatrixRow2005(IPropertyStore propertyStore);
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public IList`1<MatrixCell2005> get_MatrixCells();
    public void set_MatrixCells(IList`1<MatrixCell2005> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.PlotArea2005 : ReportObject {
    public Style2005 Style { get; public set; }
    public PlotArea2005(IPropertyStore propertyStore);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.PlotTypes2005 : Enum {
    public int value__;
    public static PlotTypes2005 Auto;
    public static PlotTypes2005 Line;
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.ProjectionModes2005 : Enum {
    public int value__;
    public static ProjectionModes2005 Orthographic;
    public static ProjectionModes2005 Perspective;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Query2005 : Query {
    public Query2005(IPropertyStore propertyStore);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Rectangle2005 : Rectangle {
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtStart { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtEnd { get; public set; }
    public Rectangle2005(IPropertyStore propertyStore);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public sealed virtual bool get_PageBreakAtStart();
    public sealed virtual void set_PageBreakAtStart(bool value);
    public sealed virtual bool get_PageBreakAtEnd();
    public sealed virtual void set_PageBreakAtEnd(bool value);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
[XmlElementClassAttribute("Report")]
internal class Microsoft.ReportingServices.RdlObjectModel2005.Report2005 : Report {
    public static string DesignerNamespace;
    public PageSection PageHeader { get; public set; }
    public PageSection PageFooter { get; public set; }
    public ReportSize PageHeight { get; public set; }
    public ReportSize PageWidth { get; public set; }
    public ReportSize InteractiveHeight { get; public set; }
    public ReportSize InteractiveWidth { get; public set; }
    public ReportSize LeftMargin { get; public set; }
    public ReportSize RightMargin { get; public set; }
    public ReportSize TopMargin { get; public set; }
    public ReportSize BottomMargin { get; public set; }
    public DataElementStyles2005 DataElementStyle { get; public set; }
    public Report2005(IPropertyStore propertyStore);
    public PageSection get_PageHeader();
    public void set_PageHeader(PageSection value);
    public PageSection get_PageFooter();
    public void set_PageFooter(PageSection value);
    public ReportSize get_PageHeight();
    public void set_PageHeight(ReportSize value);
    public ReportSize get_PageWidth();
    public void set_PageWidth(ReportSize value);
    public ReportSize get_InteractiveHeight();
    public void set_InteractiveHeight(ReportSize value);
    public ReportSize get_InteractiveWidth();
    public void set_InteractiveWidth(ReportSize value);
    public ReportSize get_LeftMargin();
    public void set_LeftMargin(ReportSize value);
    public ReportSize get_RightMargin();
    public void set_RightMargin(ReportSize value);
    public ReportSize get_TopMargin();
    public void set_TopMargin(ReportSize value);
    public ReportSize get_BottomMargin();
    public void set_BottomMargin(ReportSize value);
    public DataElementStyles2005 get_DataElementStyle();
    public void set_DataElementStyle(DataElementStyles2005 value);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.ReportParameter2005 : ReportParameter {
    public Nullable`1<ReportExpression> Prompt { get; public set; }
    public Nullable`1<ReportExpression> get_Prompt();
    public void set_Prompt(Nullable`1<ReportExpression> value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.RowGrouping2005 : ReportObject {
    public ReportSize Width { get; public set; }
    public DynamicRows2005 DynamicRows { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.StaticColumn2005>")]
[XmlArrayItemAttribute("StaticRow", "Microsoft.ReportingServices.RdlObjectModel2005.StaticColumn2005")]
public IList`1<StaticColumn2005> StaticRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool FixedHeader { get; public set; }
    public RowGrouping2005(IPropertyStore propertyStore);
    public ReportSize get_Width();
    public void set_Width(ReportSize value);
    public DynamicRows2005 get_DynamicRows();
    public void set_DynamicRows(DynamicRows2005 value);
    public IList`1<StaticColumn2005> get_StaticRows();
    public void set_StaticRows(IList`1<StaticColumn2005> value);
    public bool get_FixedHeader();
    public void set_FixedHeader(bool value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.SeriesGrouping2005 : ReportObject {
    public DynamicSeries2005 DynamicSeries { get; public set; }
    [XmlArrayItemAttribute("StaticMember", "Microsoft.ReportingServices.RdlObjectModel2005.StaticMember2005")]
[XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.StaticMember2005>")]
public IList`1<StaticMember2005> StaticSeries { get; public set; }
    public Style2005 Style { get; public set; }
    public SeriesGrouping2005(IPropertyStore propertyStore);
    public DynamicSeries2005 get_DynamicSeries();
    public void set_DynamicSeries(DynamicSeries2005 value);
    public IList`1<StaticMember2005> get_StaticSeries();
    public void set_StaticSeries(IList`1<StaticMember2005> value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.SortBy2005 : SortExpression {
    public ReportExpression SortExpression { get; public set; }
    public SortBy2005(IPropertyStore propertyStore);
    public ReportExpression get_SortExpression();
    public void set_SortExpression(ReportExpression value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.StaticColumn2005 : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public StaticColumn2005(IPropertyStore propertyStore);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.StaticMember2005 : ReportObject {
    public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public StaticMember2005(IPropertyStore propertyStore);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Style2005 : Style {
    public BorderColor2005 BorderColor { get; public set; }
    public BorderStyle2005 BorderStyle { get; public set; }
    public BorderWidth2005 BorderWidth { get; public set; }
    public BackgroundImage2005 BackgroundImage { get; public set; }
    [ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Style2005FontStyles")]
public ReportExpression`1<FontStyles> FontStyle { get; public set; }
    public ReportExpression`1<ReportEnum`1<FontWeight2005>> FontWeight { get; public set; }
    [ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Style2005TextDecorations")]
public ReportExpression`1<TextDecorations> TextDecoration { get; public set; }
    [ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Style2005TextAlignments")]
public ReportExpression`1<TextAlignments> TextAlign { get; public set; }
    [ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Style2005VerticalAlignments")]
public ReportExpression`1<VerticalAlignments> VerticalAlign { get; public set; }
    [ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Style2005TextDirections")]
public ReportExpression`1<TextDirections> Direction { get; public set; }
    public ReportExpression`1<ReportEnum`1<WritingMode2005>> WritingMode { get; public set; }
    public ReportExpression`1<ReportEnum`1<UnicodeBiDi2005>> UnicodeBiDi { get; public set; }
    public ReportExpression`1<ReportEnum`1<Calendar2005>> Calendar { get; public set; }
    public Style2005(IPropertyStore propertyStore);
    public BorderColor2005 get_BorderColor();
    public void set_BorderColor(BorderColor2005 value);
    public BorderStyle2005 get_BorderStyle();
    public void set_BorderStyle(BorderStyle2005 value);
    public BorderWidth2005 get_BorderWidth();
    public void set_BorderWidth(BorderWidth2005 value);
    public BackgroundImage2005 get_BackgroundImage();
    public void set_BackgroundImage(BackgroundImage2005 value);
    public ReportExpression`1<FontStyles> get_FontStyle();
    public void set_FontStyle(ReportExpression`1<FontStyles> value);
    public ReportExpression`1<ReportEnum`1<FontWeight2005>> get_FontWeight();
    public void set_FontWeight(ReportExpression`1<ReportEnum`1<FontWeight2005>> value);
    public ReportExpression`1<TextDecorations> get_TextDecoration();
    public void set_TextDecoration(ReportExpression`1<TextDecorations> value);
    public ReportExpression`1<TextAlignments> get_TextAlign();
    public void set_TextAlign(ReportExpression`1<TextAlignments> value);
    public ReportExpression`1<VerticalAlignments> get_VerticalAlign();
    public void set_VerticalAlign(ReportExpression`1<VerticalAlignments> value);
    public ReportExpression`1<TextDirections> get_Direction();
    public void set_Direction(ReportExpression`1<TextDirections> value);
    public ReportExpression`1<ReportEnum`1<WritingMode2005>> get_WritingMode();
    public void set_WritingMode(ReportExpression`1<ReportEnum`1<WritingMode2005>> value);
    public ReportExpression`1<ReportEnum`1<UnicodeBiDi2005>> get_UnicodeBiDi();
    public void set_UnicodeBiDi(ReportExpression`1<ReportEnum`1<UnicodeBiDi2005>> value);
    public ReportExpression`1<ReportEnum`1<Calendar2005>> get_Calendar();
    public void set_Calendar(ReportExpression`1<ReportEnum`1<Calendar2005>> value);
    public virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Subreport2005 : Subreport {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NoRows { get; public set; }
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public Subreport2005(IPropertyStore propertyStore);
    public ReportExpression get_NoRows();
    public void set_NoRows(ReportExpression value);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Subtotal2005 : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    public Style Style { get; public set; }
    public SubtotalPositions Position { get; public set; }
    [DefaultValueAttribute("")]
public string DataElementName { get; public set; }
    [ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Subtotal2005DataElementOutputTypes")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataElementOutputTypes DataElementOutput { get; public set; }
    public Subtotal2005(IPropertyStore propertyStore);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public Style get_Style();
    public void set_Style(Style value);
    public SubtotalPositions get_Position();
    public void set_Position(SubtotalPositions value);
    public string get_DataElementName();
    public void set_DataElementName(string value);
    public DataElementOutputTypes get_DataElementOutput();
    public void set_DataElementOutput(DataElementOutputTypes value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.SubtotalPositions : Enum {
    public int value__;
    public static SubtotalPositions After;
    public static SubtotalPositions Before;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Table2005 : Tablix {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.TableColumn2005>")]
[XmlArrayItemAttribute("TableColumn", "Microsoft.ReportingServices.RdlObjectModel2005.TableColumn2005")]
public IList`1<TableColumn2005> TableColumns { get; public set; }
    public Header2005 Header { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.TableGroup2005>")]
[XmlArrayItemAttribute("TableGroup", "Microsoft.ReportingServices.RdlObjectModel2005.TableGroup2005")]
public IList`1<TableGroup2005> TableGroups { get; public set; }
    public Details2005 Details { get; public set; }
    public Footer2005 Footer { get; public set; }
    [DefaultValueAttribute("")]
public string DetailDataElementName { get; public set; }
    [DefaultValueAttribute("")]
public string DetailDataCollectionName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ValidEnumValuesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "Table2005DetailDataElementOutputTypes")]
public DataElementOutputTypes DetailDataElementOutput { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtStart { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression NoRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool PageBreakAtEnd { get; public set; }
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public Table2005(IPropertyStore propertyStore);
    public IList`1<TableColumn2005> get_TableColumns();
    public void set_TableColumns(IList`1<TableColumn2005> value);
    public Header2005 get_Header();
    public void set_Header(Header2005 value);
    public IList`1<TableGroup2005> get_TableGroups();
    public void set_TableGroups(IList`1<TableGroup2005> value);
    public Details2005 get_Details();
    public void set_Details(Details2005 value);
    public Footer2005 get_Footer();
    public void set_Footer(Footer2005 value);
    public string get_DetailDataElementName();
    public void set_DetailDataElementName(string value);
    public string get_DetailDataCollectionName();
    public void set_DetailDataCollectionName(string value);
    public DataElementOutputTypes get_DetailDataElementOutput();
    public void set_DetailDataElementOutput(DataElementOutputTypes value);
    public sealed virtual bool get_PageBreakAtStart();
    public sealed virtual void set_PageBreakAtStart(bool value);
    public ReportExpression get_NoRows();
    public void set_NoRows(ReportExpression value);
    public sealed virtual bool get_PageBreakAtEnd();
    public sealed virtual void set_PageBreakAtEnd(bool value);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public virtual void Initialize();
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.TableCell2005 : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.ReportItem>")]
public IList`1<ReportItem> ReportItems { get; public set; }
    [ValidValuesAttribute("1", "2147483647")]
[DefaultValueAttribute("1")]
public int ColSpan { get; public set; }
    public TableCell2005(IPropertyStore propertyStore);
    public IList`1<ReportItem> get_ReportItems();
    public void set_ReportItems(IList`1<ReportItem> value);
    public int get_ColSpan();
    public void set_ColSpan(int value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.TableColumn2005 : ReportObject {
    public ReportSize Width { get; public set; }
    public Visibility Visibility { get; public set; }
    [DefaultValueAttribute("False")]
public bool FixedHeader { get; public set; }
    public TableColumn2005(IPropertyStore propertyStore);
    public ReportSize get_Width();
    public void set_Width(ReportSize value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public bool get_FixedHeader();
    public void set_FixedHeader(bool value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.TableGroup2005 : ReportObject {
    public Group Grouping { get; public set; }
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel.SortExpression>")]
public IList`1<SortExpression> Sorting { get; public set; }
    public Header2005 Header { get; public set; }
    public Footer2005 Footer { get; public set; }
    public Visibility Visibility { get; public set; }
    public TableGroup2005(IPropertyStore propertyStore);
    public Group get_Grouping();
    public void set_Grouping(Group value);
    public IList`1<SortExpression> get_Sorting();
    public void set_Sorting(IList`1<SortExpression> value);
    public Header2005 get_Header();
    public void set_Header(Header2005 value);
    public Footer2005 get_Footer();
    public void set_Footer(Footer2005 value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.TableRow2005 : ReportObject {
    [XmlElementAttribute("Microsoft.ReportingServices.RdlObjectModel.RdlCollection`1<Microsoft.ReportingServices.RdlObjectModel2005.TableCell2005>")]
[XmlArrayItemAttribute("TableCell", "Microsoft.ReportingServices.RdlObjectModel2005.TableCell2005")]
public IList`1<TableCell2005> TableCells { get; public set; }
    public ReportSize Height { get; public set; }
    public Visibility Visibility { get; public set; }
    public TableRow2005(IPropertyStore propertyStore);
    public IList`1<TableCell2005> get_TableCells();
    public void set_TableCells(IList`1<TableCell2005> value);
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public virtual void Initialize();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Textbox2005 : Textbox {
    public Action Action { get; public set; }
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Label { get; public set; }
    [XmlChildAttributeAttribute("Label", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string LabelLocID { get; public set; }
    public Style2005 Style { get; public set; }
    public DataElementStyles2005 DataElementStyle { get; public set; }
    [ReportExpressionDefaultValueAttribute("")]
public ReportExpression Value { get; public set; }
    [XmlChildAttributeAttribute("Value", "LocID", "http://schemas.microsoft.com/SQLServer/reporting/reportdesigner")]
public string ValueLocID { get; public set; }
    public Textbox2005(IPropertyStore propertyStore);
    public sealed virtual Action get_Action();
    public sealed virtual void set_Action(Action value);
    public ReportExpression get_Label();
    public void set_Label(ReportExpression value);
    public string get_LabelLocID();
    public void set_LabelLocID(string value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public DataElementStyles2005 get_DataElementStyle();
    public void set_DataElementStyle(DataElementStyles2005 value);
    public ReportExpression get_Value();
    public void set_Value(ReportExpression value);
    public string get_ValueLocID();
    public void set_ValueLocID(string value);
    public sealed virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.ThreeDProperties2005 : ChartThreeDProperties {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DrawingStyleTypes2005 DrawingStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ProjectionModes2005 ProjectionMode { get; public set; }
    [DefaultValueAttribute("0")]
public int Rotation { get; public set; }
    [DefaultValueAttribute("0")]
public int Inclination { get; public set; }
    [DefaultValueAttribute("0")]
public int WallThickness { get; public set; }
    public ThreeDProperties2005(IPropertyStore propertyStore);
    public DrawingStyleTypes2005 get_DrawingStyle();
    public void set_DrawingStyle(DrawingStyleTypes2005 value);
    public ProjectionModes2005 get_ProjectionMode();
    public void set_ProjectionMode(ProjectionModes2005 value);
    public int get_Rotation();
    public void set_Rotation(int value);
    public int get_Inclination();
    public void set_Inclination(int value);
    public int get_WallThickness();
    public void set_WallThickness(int value);
    public virtual void Initialize();
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.TickMarks2005 : Enum {
    public int value__;
    public static TickMarks2005 None;
    public static TickMarks2005 Inside;
    public static TickMarks2005 Outside;
    public static TickMarks2005 Cross;
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Title2005 : ChartTitle {
    [ReportExpressionDefaultValueAttribute]
public ReportExpression Caption { get; public set; }
    public Style2005 Style { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TitlePositions2005 Position { get; public set; }
    public Title2005(IPropertyStore propertyStore);
    public ReportExpression get_Caption();
    public void set_Caption(ReportExpression value);
    public Style2005 get_Style();
    public void set_Style(Style2005 value);
    public TitlePositions2005 get_Position();
    public void set_Position(TitlePositions2005 value);
}
internal enum Microsoft.ReportingServices.RdlObjectModel2005.TitlePositions2005 : Enum {
    public int value__;
    public static TitlePositions2005 Center;
    public static TitlePositions2005 Near;
    public static TitlePositions2005 Far;
}
[EnumNamesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "UnicodeBiDi")]
internal enum Microsoft.ReportingServices.RdlObjectModel2005.UnicodeBiDi2005 : Enum {
    public int value__;
    public static UnicodeBiDi2005 Normal;
    public static UnicodeBiDi2005 Embed;
    public static UnicodeBiDi2005 BiDiOverride;
}
internal interface Microsoft.ReportingServices.RdlObjectModel2005.Upgrade.IUpgradeable {
    public abstract virtual void Upgrade(UpgradeImpl upgrader);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Upgrade.ReportRegularExpressions : object {
    private static string m_identifierStart;
    private static string m_identifierExtend;
    internal static string ClsReplacerPattern;
    internal Regex Whitespace;
    internal Regex NonConstant;
    internal Regex FieldDetection;
    internal Regex ReportItemsDetection;
    internal Regex ParametersDetection;
    internal Regex PageGlobalsDetection;
    internal Regex AggregatesDetection;
    internal Regex UserDetection;
    internal Regex DataSetsDetection;
    internal Regex DataSourcesDetection;
    internal Regex VariablesDetection;
    internal Regex MeDotValueExpression;
    internal Regex MeDotValueDetection;
    internal Regex IllegalCharacterDetection;
    internal Regex LineTerminatorDetection;
    internal Regex FieldOnly;
    internal Regex ParameterOnly;
    internal Regex StringLiteralOnly;
    internal Regex NothingOnly;
    internal Regex ReportItemName;
    internal Regex FieldName;
    internal Regex ParameterName;
    internal Regex DataSetName;
    internal Regex DataSourceName;
    internal Regex SpecialFunction;
    internal Regex PSAFunction;
    internal Regex Arguments;
    internal Regex DynamicFieldReference;
    internal Regex DynamicFieldPropertyReference;
    internal Regex StaticFieldPropertyReference;
    internal Regex RewrittenCommandText;
    internal Regex SimpleDynamicFieldReference;
    internal Regex SimpleDynamicReportItemReference;
    internal Regex SimpleDynamicVariableReference;
    internal Regex ReportItemValueReference;
    internal Regex VariableName;
    internal Regex ClsIdentifierRegex;
    internal static ReportRegularExpressions Value;
    private static ReportRegularExpressions();
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Upgrade.SerializerHost : object {
    private bool m_serializing;
    private List`1<IUpgradeable> m_upgradeable;
    private List`1<DataSource2005> m_dataSources;
    private Hashtable m_nameTable;
    private string m_extraStringData;
    private static Type[0...,0...] m_substituteTypes;
    public List`1<IUpgradeable> Upgradeable { get; public set; }
    public List`1<DataSource2005> DataSources { get; public set; }
    public Hashtable NameTable { get; public set; }
    public string ExtraStringData { get; public set; }
    public SerializerHost(bool serializing);
    private static SerializerHost();
    public List`1<IUpgradeable> get_Upgradeable();
    public void set_Upgradeable(List`1<IUpgradeable> value);
    public List`1<DataSource2005> get_DataSources();
    public void set_DataSources(List`1<DataSource2005> value);
    public Hashtable get_NameTable();
    public void set_NameTable(Hashtable value);
    public string get_ExtraStringData();
    public void set_ExtraStringData(string value);
    public sealed virtual Type GetSubstituteType(Type type);
    public static Type GetSubstituteType(Type type, bool serializing);
    public sealed virtual void OnDeserialization(object value);
    public sealed virtual void GetExtensionNamespace(String& ns, String& prefix);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Upgrade.UpgradeImpl : object {
    private static string DundasChartControl;
    private static string DundasGaugeControl;
    private static string UpgradedYukonChart;
    private static double YukonDefaultPointWidth;
    private static double YukonDefaultBarAndColumnPointWidth;
    private static double YukonDefaultLineWidthInPoints;
    private static double YukonDefaultBorderWidthInPoints;
    private static double YukonBorderWidthFactor;
    private static double KatmaiMinimumVisibleBorderWidth;
    private static double KatmaiMinimumBorderWidth;
    private static double PointsPerPixel;
    private static string DundasCRIExpressionPrefixLowerCase;
    private static string DundasCRIDefaultFont;
    private static string DundasCRIDefaultBoldFont;
    private static string DundasCRIDefaultCollectedPieStyle;
    private static string DundasCRISizeExpressionWrapper;
    private static string EmptySeriesName;
    private static string EmptyNamePrefix;
    private static string ChartElementDefaultName;
    private static string ChartPrimaryAxisName;
    private static string ChartSecondaryAxisName;
    private static string NewChartAreaName;
    private static string NewChartSeriesName;
    private static string NewChartTitleName;
    private static string ChartNoDataMessageTitleName;
    private static string NewChartLegendName;
    private static string ChartFormulaNamePostfix;
    private static string NewChartAreaNameForFormulaSeries;
    private static string PointWidthAttributeName;
    private static string DrawingStyleAttributeName;
    private static string PieLabelStyleAttributeName;
    private static string PieLabelStyleAttributeDefaultValueForYukon;
    private static double DefaultSmartLabelMaxMovingDistance;
    private static double DefaultBorderLineWidthInPixels;
    private static string GaugeElementDefaultName;
    private static string DefaultRadialGaugeCollectionPrefix;
    private static string DefaultLinearGaugeCollectionPrefix;
    private static string DefaultGaugeLabelCollectionPrefix;
    private static string GaugeFontUnitPercentValue;
    private static string GaugeFontUnitDefaultValue;
    private static string DefaultDundasCircularGaugeCollectionPrefix;
    private static string DefaultDundasLinearGaugeCollectionPrefix;
    private static string DefaultDundasGaugeLabelCollectionPrefix;
    private static string DefaultGaugeScaleLabelFont;
    private static string DefaultGaugeScalePinFont;
    private static string DefaultGaugeLabelFont;
    private static string DefaultGaugeScaleName;
    private static string DefaultGaugeTextPropertyValue;
    private static double DefaultLinearScaleRangeStartWidth;
    private static double DefaultRadialScaleRangeStartWidth;
    private static double DefaultLinearScaleRangeEndWidth;
    private static double DefaultRadialScaleRangeEndWidth;
    private static double DefaultLinearScaleRangeDistanceFromScale;
    private static double DefaultRadialScaleRangeDistanceFromScale;
    private static double DefaultGaugeTickMarkWidth;
    private static double DefaultLinearScaleMajorTickMarkWidth;
    private static double DefaultLinearScaleMinorTickMarkWidth;
    private static double DefaultRadialScaleMajorTickMarkWidth;
    private static double DefaultRadialScaleMinorTickMarkWidth;
    private static double DefaultLinearScaleMajorTickMarkLength;
    private static double DefaultLinearScaleMinorTickMarkLength;
    private static double DefaultRadialScaleMajorTickMarkLength;
    private static double DefaultRadialScaleMinorTickMarkLength;
    private static double DefaultLinearGaugePointerWidth;
    private static double DefaultRadialGaugePointerWidth;
    private static double DefaultLinearGaugePointerMarkerLength;
    private static double DefaultRadialGaugePointerMarkerLength;
    private static double DefaultDefaultScalePinWidth;
    private static double DefaultDefaultScalePinLength;
    private static int DefaultGaugeScaleShadowOffset;
    private static int DefaultGaugePointerShadowOffset;
    private Hashtable m_nameTable;
    private Hashtable m_dataSourceNameTable;
    private Hashtable m_dataSourceCaseSensitiveNameTable;
    private List`1<DataSource2005> m_dataSources;
    private List`1<IUpgradeable> m_upgradeable;
    private ReportRegularExpressions m_regexes;
    private RDLUpgradeResult m_upgradeResults;
    private bool m_throwUpgradeException;
    private bool m_upgradeDundasCRIToNative;
    private static String[] m_scatterChartDataPointNames;
    private static String[] m_bubbleChartDataPointNames;
    private static String[] m_highLowCloseDataPointNames;
    private static String[] m_openHighLowCloseDataPointNames;
    private static Properties[] m_ParagraphAvailableStyles;
    private static Properties[] m_TextRunAvailableStyles;
    internal RDLUpgradeResult UpgradeResults { get; }
    public UpgradeImpl(bool throwUpgradeException);
    public UpgradeImpl(bool throwUpgradeException, bool upgradeDundasCRIToNative);
    private static UpgradeImpl();
    internal void UpgradeMatrix(Matrix2005 matrix);
    private void CloneTablixHierarchy(Tablix tablix, TablixMember staticMember, bool cloneRows);
    private IList`1<TablixMember> GetSiblingTablixMembers(TablixMember tablixMember);
    private void CloneTablixSubtotal(Tablix tablix, TablixMember dynamicMember, Subtotal2005 subtotal, int outerStaticMembers, int originalCount, bool rowSubtotal);
    private void CloneSubtotalTablixMembers(Cloner cloner, TablixMember tablixMember, IList`1<TablixMember> tablixMembers, string parentScope);
    private void ProcessClonedDynamicTablixMember(TablixMember dynamicMember, Cloner cloner, string parentScope);
    private void CollectInScopeTextboxValues(ReportItem reportItem, Dictionary`2<string, string> nameValueExprTable);
    private void CollectInScopeTextboxValues(TablixHierarchy hierarchy, Dictionary`2<string, string> nameValueExprTable);
    private void CollectInScopeTextboxValues(IList`1<TablixMember> tablixMembers, Dictionary`2<string, string> nameValueExprTable);
    private void CollectInScopeTextboxValues(IList`1<ReportItem> reportItems, Dictionary`2<string, string> nameValueExprTable);
    private string ReplaceReference(string expression, string oldValue, string newValue);
    private string ReplaceReportItemReferenceWithValue(string expression, Dictionary`2<string, string> nameValueExprTable);
    private void FixupMutualReferences(Dictionary`2<string, string> nameValueExprTable);
    private int GetScopeArgumentIndex(string function);
    private bool FindArgument(int currentPos, string expression, Int32& newPos, int argumentIndex, Int32& argumentPos, Int32& argumentLength);
    public void Upgrade(Stream inStream, Stream outStream);
    public void Upgrade(XmlReader xmlReader, Stream outStream);
    internal RDLUpgradeResult get_UpgradeResults();
    private RdlSerializer CreateRdlSerializer();
    private void ChangeReportItem(object parentObject, object oldReportItem, object newReportItem);
    private void UpgradeReport(Report2005 report, Stream outStream);
    private static void AdjustBodyWhitespace(Report2005 report);
    internal static Group TablixMemberGroupAccessor(object member);
    internal static IList`1<CustomProperty> TablixMemberCustomPropertiesAccessor(object member);
    internal static Group ChartMemberGroupAccessor(object member);
    internal static IList`1<CustomProperty> ChartMemberCustomPropertiesAccessor(object member);
    internal static Group DataMemberGroupAccessor(object member);
    internal static IList`1<CustomProperty> DataMemberCustomPropertiesAccessor(object member);
    internal static string SplitName(string name);
    internal void UpgradeReport(Report2005 report);
    internal void UpgradeReportItem(ReportItem item);
    internal void UpgradeDataElementOutput(ReportItem reportItem);
    internal void UpgradePageBreak(IPageBreakLocation2005 item);
    internal void UpgradeRectangle(Rectangle2005 rectangle);
    internal void UpgradeCustomReportItem(CustomReportItem2005 cri);
    internal void UpgradeDataGrouping(DataGrouping2005 dataGrouping);
    internal void UpgradeList(List2005 list);
    private bool IsUpgradedListDetailMember(TablixMember rowMember);
    private bool TextBoxExistsInCollection(IList`1<ReportItem> reportItems, string name);
    private bool TextBoxExistsInCollection(IList`1<TableRow2005> rows, string name);
    internal void UpgradeTable(Table2005 table);
    private bool SortingContainsAggregate(IList`1<SortExpression> sortExpressions);
    private bool SortExpressionContainsAggregate(SortExpression sortExpression);
    private bool ContainsRegexMatch(string expression, Regex regex, string pattern);
    private static bool IsToggleable(Visibility visibility);
    private void MergePageBreakLocation(BreakLocations breakLocation, PageBreak pageBreak);
    private void UpgradePageBreaks(Tablix tablix, bool isTable);
    private Nullable`1<BreakLocations> UpgradePageBreaks(IList`1<TablixMember> members, bool thisOrAnscestorHasToggle, bool isTable);
    private ReportSize GetReportItemWidth(ReportItem reportItem);
    private ReportSize GetReportItemHeight(ReportItem reportItem);
    private Table2005 GetParentTable(TableRow2005 row);
    private void FixAggregateFunction(object obj);
    private void FixAggregateFunction(object obj, Boolean& containsPostSortAggregate);
    private void FixAggregateFunction(object obj, string defaultScope, string dataRegion, bool fixPreviousAggregate, Boolean& containsPostSortAggregate);
    private IExpression FixAggregateFunction(IExpression value, string defaultScope, string dataRegion, bool fixPreviousAggregates, Boolean& containsPostSortAggregate);
    private string FixPreviousAggregate(string expr, int currentOffset, int specialFunctionPos, int argumentsPos, Int32& offset);
    private bool IsNotPartOfReference(char c);
    private string FixAggregateFunctions(string expression, AggregateFunctionFixup fixup);
    private TablixRow UpgradeTableRow(TableRow2005 tableRow, Tablix tablix, int rowIndex, TablixMember tablixMember);
    internal void UpgradeChart(Chart2005 chart2005);
    private ChartAxis UpgradeChartAxis(Axis2005 axis2005, bool categoryAxis, ChartTypes2005 charType);
    private double ConvertToDouble(string value);
    private void SetChartDataPointNames(DataPoint2005 dataPoint, String[] names);
    private void SetChartTypes(Chart2005 oldChart, PlotTypes2005 plotType, ChartSeries newSeries);
    private void FixYukonChartBorderWidth(Style style, bool roundValue);
    private Style FixYukonEmptyBorderStyle(Style2005 style2005);
    internal void UpgradeTextbox(Textbox2005 textbox);
    private Style CreateAndMoveStyleProperties(Style srcStyle, Properties[] availableStyles);
    private Style CreateAndMoveStyleProperties(Style srcStyle, Properties[] availableStyles, bool convertMeDotValue, string textboxName);
    private string ConvertMeDotValue(string expression, string textboxName);
    internal void UpgradeQuery(Query2005 query);
    internal void UpgradeDataSource(DataSource2005 dataSource);
    internal void UpgradeSubreport(Subreport2005 subreport);
    internal void UpgradeStyle(Style2005 style2005);
    internal void UpgradeEmptyColorStyle(EmptyColorStyle2005 emptyColorStyle2005);
    private ReportExpression`1<T> UpgradeStyleEnum(ReportExpression`1<ReportEnum`1<T2005>> value2005);
    private ReportExpression`1<T> UpgradeStyleEnum(ReportExpression`1<T2005> value2005);
    private void SetBorderColor(ReportExpression`1<ReportColor> color, Border& border, ReportColor defaultColor);
    private void SetEmptyBorderColor(ReportExpression`1<ReportColor> color, EmptyBorder& border, ReportColor defaultColor);
    private void SetBorderStyle(ReportExpression`1<BorderStyles2005> style, Border& border, BorderStyles2005 defaultStyle);
    private void SetEmptyBorderStyle(ReportExpression`1<BorderStyles2005> style, EmptyBorder& border, BorderStyles2005 defaultStyle);
    private void SetBorderWidth(ReportExpression`1<ReportSize> width, Border& border, ReportSize defaultWidth);
    private void SetEmptyBorderWidth(ReportExpression`1<ReportSize> width, EmptyBorder& border, ReportSize defaultWidth);
    private void TransferGroupingCustomProperties(object member, GroupAccessor groupAccessor, CustomPropertiesAccessor propertiesAccessor);
    private string UniqueName(string baseName, object obj);
    private string UniqueName(string baseName, object obj, bool allowBaseName);
    private string CreateUniqueDataSourceName(string oldName);
    private string GetDataSourceName(string dataSourceName);
    private string GetParentReportItemName(IContainedObject obj);
    private void UpgradeDundasCRIChart(CustomReportItem cri, Chart chart);
    private void UpgradeDundasCRIChartAxis(ChartAxis axis, Hashtable axisProperties, string propertyPrefix);
    private void UpgradeDundasCRIChartSeries(ChartSeries series, IList`1<ChartDerivedSeries> derivedSeriesCollection, Hashtable seriesProperties, List`1<Hashtable> dataPointCustomProperties);
    private bool UpgradeDundasCRIChartTitle(ChartTitle title, Hashtable titleProperties, string propertyPrefix);
    private void UpgradeDundasCRIChartLegend(ChartLegend legend, Hashtable legendProperties, string propertyPrefix);
    private bool UpgradeDundasCRIChartGridLines(ChartGridLines gridLines, Hashtable properties, string propertyPrefix, bool isMajor);
    private bool UpgradeDundasCRIChartTickMarks(ChartTickMarks tickMarks, Hashtable properties, string propertyPrefix, bool isMajor);
    private ActionInfo UpgradeDundasCRIChartActionInfo(Hashtable properties);
    private ChartPositions ConvertDundasCRIPosition(string docking, string alignment);
    private void SetChartSeriesType(ChartSeries series, string dundasSeriesType);
    private BackgroundImage ConvertDundasCRIChartBackgroundImageProperty(object imageReference, object transparentColor, object align, object mode, Int32& counter);
    private void FixChartAxisStriplineTitleAngle(Chart chart);
    private void UpgradeDundasCRIGaugePanel(CustomReportItem cri, GaugePanel gaugePanel);
    private bool UpgradeDundasCRIGaugeBackFrame(BackFrame backFrame, Hashtable backFrameProperties, string propertyPrefix);
    private void UpgradeDundasCRIGaugeLabel(GaugeLabel label, Hashtable labelProperties, string propertyPrefix);
    private void UpgradeDundasCRIGauge(Gauge gauge, Hashtable gaugeProperties, string propertyPrefix, Hashtable formulaProperties, Hashtable dataValueProperties);
    private void UpgradeDundasCRIGaugeRadial(RadialGauge gauge, Hashtable gaugeProperties, string propertyPrefix, Hashtable formulaProperties, Hashtable dataValueProperties);
    private void UpgradeDundasCRIGaugeLinear(LinearGauge gauge, Hashtable gaugeProperties, string propertyPrefix, Hashtable formulaCustomProperties, Hashtable dataValueCustomProperties);
    private void UpgradeDundasCRIGaugeScale(GaugeScale scale, Hashtable scaleProperties, string propertyPrefix, Hashtable formulaProperties, Hashtable dataValueProperties);
    private void UpgradeDundasCRIGaugeScaleRadial(RadialScale scale, Hashtable scaleProperties, string propertyPrefix, Hashtable formulaProperties, Hashtable dataValueProperties);
    private void UpgradeDundasCRIGaugeScaleLinear(LinearScale scale, Hashtable scaleProperties, string propertyPrefix, Hashtable formulaProperties, Hashtable dataValueProperties);
    private void UpgradeDundasCRIGaugeScaleRange(ScaleRange range, Hashtable rangeProperties, string propertyPrefix, bool isLinear, Hashtable formulaProperties, Hashtable dataValueProperties);
    private bool UpgradeDundasCRIGaugeTickMarkStyle(TickMarkStyle tickMarkStyle, Hashtable properties, string propertyPrefix, ReportExpression`1<double> defaultWidth, ReportExpression`1<double> defaultLength, Nullable`1<MarkerStyles> defaultShape);
    private bool UpgradeDundasCRIGaugeTickMarks(GaugeTickMarks tickMarks, Hashtable properties, string propertyPrefix, ReportExpression`1<double> defaultWidth, ReportExpression`1<double> defaultLength, MarkerStyles defaultShape);
    private bool UpgradeDundasCRIGaugeScalePin(ScalePin pin, Hashtable properties, string propertyPrefix, ReportExpression`1<double> defaultWidth, ReportExpression`1<double> defaultLength);
    private void UpgradeDundasCRIGaugeCustomLabel(CustomLabel customLabel, Hashtable properties, string propertyPrefix);
    private void UpgradeDundasCRIGaugePointer(GaugePointer pointer, Hashtable properties, string propertyPrefix, ReportExpression`1<double> defaultWidth, ReportExpression`1<double> defaultMarkerLength, Hashtable formulaProperties, Hashtable dataValueProperties);
    private void UpgradeDundasCRIGaugePointerLinear(LinearPointer pointer, Hashtable properties, string propertyPrefix, Hashtable formulaProperties, Hashtable dataValueProperties);
    private void UpgradeDundasCRIGaugePointerRadial(RadialPointer pointer, Hashtable properties, string propertyPrefix, Hashtable formulaProperties, Hashtable dataValueProperties);
    private GaugeInputValue UpgradeDundasCRIGaugeInputValue(Hashtable formulaProperties, Hashtable dataValueProperties, string dataValuePropertyKey, Hashtable customProperties, string customPropertyKey);
    private ActionInfo UpgradeDundasCRIGaugeActionInfo(Hashtable formulaProperties, string propertyPrefix);
    private ActionInfo UpgradeDundasCRIActionInfo(Hashtable properties, string propertyPrefix, string hyperLinkKey);
    private void FixGaugeElementNames(GaugePanel gaugePanel);
    private void FixGaugeSubElementNames(Gauge gauge);
    private void FixGaugeElementParentItemNames(GaugePanelItem gaugeElement, OrderedDictionary radialGaugeNameMapping, OrderedDictionary linearGaugeNameMapping, OrderedDictionary gaugeLabelNameMapping);
    private CapStyles ConvertDundasCRIGaugeCapStyle(string capStyle);
    private NeedleStyles ConvertDundasCRIGaugeNeedleStyles(string needleStyle);
    private string GetNewName(OrderedDictionary oldAndNewNameMapping, string oldName);
    private string CreateNewName(StringCollection newNamesCollection, string oldName, string defaultNewName);
    private Font FontFromString(string fontString);
    private bool AddToPropertyList(List`1<Hashtable> propertyList, string counterPrefix, string key, ReportExpression value);
    private bool IsZero(object value);
    private void ConvertDundasCRICustomProperties(IList`1<CustomProperty> customProperties, object property);
    private void ConvertDundasCRICustomProperties(IList`1<CustomProperty> customProperties, object property, Int32& counter);
    private ReportExpression`1<ReportColor> ConvertDundasCRIColorProperty(string defaultValue, object color);
    private ReportExpression`1<ReportColor> ConvertDundasCRIColorProperty(ReportExpression`1<ReportColor> defaultValue, object color);
    private ReportExpression`1<ReportColor> ConvertDundasCRIColorProperty(ReportExpression`1<ReportColor> defaultValue, object color, Int32& counter);
    private Nullable`1<bool> ConvertDundasCRIBoolProperty(object property);
    private Nullable`1<bool> ConvertDundasCRIBoolProperty(object property, Int32& counter);
    private string ConvertDundasCRIStringProperty(object property);
    private string ConvertDundasCRIStringProperty(string defaultValue, object property);
    private string ConvertDundasCRIStringProperty(object property, Int32& counter);
    private string ConvertDundasCRIStringProperty(string defaultValue, object property, Int32& counter);
    private ReportExpression`1<int> ConvertDundasCRIIntegerReportExpressionProperty(object property);
    private ReportExpression`1<int> ConvertDundasCRIIntegerReportExpressionProperty(object property, Int32& counter);
    private ReportExpression`1<int> ConvertDundasCRIIntegerReportExpressionProperty(ReportExpression`1<int> defaultValue, object property);
    private ReportExpression`1<int> ConvertDundasCRIIntegerReportExpressionProperty(ReportExpression`1<int> defaultValue, object property, Int32& counter);
    private ReportExpression`1<double> ConvertDundasCRIDoubleReportExpressionProperty(object property);
    private ReportExpression`1<double> ConvertDundasCRIDoubleReportExpressionProperty(ReportExpression`1<double> defaultValue, object property);
    private ReportExpression`1<double> ConvertDundasCRIDoubleReportExpressionProperty(object property, Int32& counter);
    private ReportExpression`1<double> ConvertDundasCRIDoubleReportExpressionProperty(ReportExpression`1<double> defaultValue, object property, Int32& counter);
    private ReportExpression`1<ReportSize> ConvertDundasCRIPointReportSizeProperty(ReportExpression`1<ReportSize> defaultValue, object property, Int32& counter);
    private ReportExpression`1<ReportSize> ConvertDundasCRIPointReportSizeProperty(ReportExpression`1<ReportSize> defaultValue, object property);
    private ReportExpression`1<ReportSize> ConvertDundasCRIPixelReportSizeProperty(Nullable`1<double> defaultValue, object property, Int32& counter);
    private ReportExpression`1<ReportSize> ConvertDundasCRIPixelReportSizeProperty(object property, Int32& counter);
    private ReportExpression`1<ReportSize> ConvertDundasCRIPixelReportSizeProperty(object property);
    private ActionInfo ConvertDundasCRIActionInfoProperty(object hyperlink);
    private ActionInfo ConvertDundasCRIActionInfoProperty(object hyperlink, Int32& counter);
    private ChartElementPosition ConvertDundasCRIChartElementPosition(object top, object left, object height, object width);
    private ChartElementPosition ConvertDundasCRIChartElementPosition(object top, object left, object height, object width, Int32& counter);
    private Style ConvertDundasCRIStyleProperty(object color, object backgroundColor, object backgroundGradientType, object backgroundGradientEndColor, object backgroundHatchType, object shadowOffset, object borderColor, object borderStyle, object borderWidth, object font, object format, object textAlign, object textVerticalAlign);
    private Style ConvertDundasCRIStyleProperty(object color, object backgroundColor, object backgroundGradientType, object backgroundGradientEndColor, object backgroundHatchType, object shadowOffset, object borderColor, object borderStyle, object borderWidth, object font, object format, object textAlign, object textVerticalAlign, Int32& counter);
    private Style ConvertDundasCRIStyleProperty(object color, object backgroundColor, object backgroundGradientType, object backgroundGradientEndColor, object backgroundHatchType, object shadowColor, object shadowOffset, object borderColor, object borderStyle, object borderWidth, object imageReference, object imageTransColor, object imageAlign, object imageMode, object font, object format, object textEffect, object textAlign, object textVerticalAlign);
    private Style ConvertDundasCRIStyleProperty(object color, object backgroundColor, object backgroundGradientType, object backgroundGradientEndColor, object backgroundHatchType, object shadowColor, object shadowOffset, object borderColor, object borderStyle, object borderWidth, object imageReference, object imageTransColor, object imageAlign, object imageMode, object font, object format, object textEffect, object textAlign, object textVerticalAlign, Int32& counter);
    private EmptyColorStyle ConvertDundasCRIEmptyColorStyleProperty(object color, object backgroundColor, object backgroundGradientType, object backgroundGradientEndColor, object backgroundHatchType, object borderColor, object borderStyle, object borderWidth, object imageReference, object imageTransColor, object imageAlign, object imageMode, object font, object format, Int32& counter);
    private object ConvertDundasCRIStyleProperty(object color, object backgroundColor, object backgroundGradientType, object backgroundGradientEndColor, object backgroundHatchType, object shadowColor, object shadowOffset, object borderColor, object borderStyle, object borderWidth, object imageReference, object imageTransColor, object imageAlign, object imageMode, object font, object format, object textEffect, object textAlign, object textVerticalAlign, Int32& counter, Style style, Border border);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Upgrade.UpgradeMethod : MulticastDelegate {
    public UpgradeMethod(object object, IntPtr method);
    public virtual void Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Upgrade.Upgrader : object {
    public static void Upgrade(string inputFile, string outputFile, bool throwUpgradeException);
    public static void Upgrade(Stream inStream, Stream outStream, bool throwUpgradeException);
    public static void Upgrade(XmlReader xmlReader, Stream outStream, bool throwUpgradeException);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.Upgrade.UpgradeSerializerSettings : RdlSerializerSettings {
    private static string m_xsdResourceId;
    private bool m_skippingInvalidElements;
    private SerializerHost m_host;
    private static XmlElementAttribute[] m_deserializingReportItems;
    public SerializerHost SerializerHost { get; }
    private UpgradeSerializerSettings(bool serializing);
    private static UpgradeSerializerSettings();
    public SerializerHost get_SerializerHost();
    public static UpgradeSerializerSettings CreateReaderSettings();
    public static UpgradeSerializerSettings CreateWriterSettings();
    private void ValidationEventHandler(object sender, ValidationEventArgs e);
}
internal class Microsoft.ReportingServices.RdlObjectModel2005.ValueAxis2005 : ReportObject {
    public Axis2005 Axis { get; public set; }
    public ValueAxis2005(IPropertyStore propertyStore);
    public Axis2005 get_Axis();
    public void set_Axis(Axis2005 value);
    public virtual void Initialize();
}
[EnumNamesAttribute("Microsoft.ReportingServices.RdlObjectModel2005.Constants2005", "WritingMode")]
internal enum Microsoft.ReportingServices.RdlObjectModel2005.WritingMode2005 : Enum {
    public int value__;
    public static WritingMode2005 lrtb;
    public static WritingMode2005 tbrl;
}
internal class Microsoft.ReportingServices.RefCountedAppDomain : object {
    private AppDomainRefCount m_refCount;
    private AppDomain m_appDomain;
    public AppDomain AppDomain { get; }
    public RefCountedAppDomain(AppDomain appDomain);
    private RefCountedAppDomain(AppDomain appDomain, AppDomainRefCount refCount);
    public AppDomain get_AppDomain();
    public RefCountedAppDomain CreateNewReference();
    public sealed virtual void Dispose();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.AreaInfo : object {
    private ushort m_FirstRow;
    private ushort m_LastRow;
    private ushort m_FirstColumn;
    private ushort m_LastColumn;
    internal AreaInfo(ushort firstRow, ushort lastRow, ushort firstCol, ushort lastCol);
    internal AreaInfo(int firstRow, int lastRow, int firstCol, int lastCol);
    internal void WriteToStream(BinaryWriter output);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BIFF8Color : object {
    private Color m_color;
    private int m_paletteIndex;
    internal int PaletteIndex { get; }
    public byte Red { get; }
    public byte Green { get; }
    public byte Blue { get; }
    internal BIFF8Color(Color color, int paletteIndex);
    internal int get_PaletteIndex();
    public virtual int GetHashCode();
    public virtual bool Equals(object val);
    public sealed virtual byte get_Red();
    public sealed virtual byte get_Green();
    public sealed virtual byte get_Blue();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BIFF8Font : object {
    private static short GRBIT_fItalic;
    private static short GRBIT_fStrikeout;
    private static short GRBIT_fOutline;
    private static short GRBIT_fShadow;
    private static Byte[] DEFAULT_DATA;
    private int m_hash;
    private Byte[] m_data;
    private string m_fontName;
    internal Byte[] RecordData { get; }
    public int Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Strikethrough { get; public set; }
    public ScriptStyle ScriptStyle { get; public set; }
    public int Color { get; public set; }
    unknown IColor Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.IFont.Color {private set; }
    public Underline Underline { get; public set; }
    public CharSet CharSet { get; public set; }
    public string Name { get; public set; }
    public double Size { get; public set; }
    internal BIFF8Font(StyleProperties props);
    private static BIFF8Font();
    internal Byte[] get_RecordData();
    private void WriteMaskedValue(int offset, short mask, short value);
    public virtual bool Equals(object target);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
    public sealed virtual void set_Bold(int value);
    public int get_Bold();
    public sealed virtual void set_Italic(bool value);
    public bool get_Italic();
    public sealed virtual void set_Strikethrough(bool value);
    public bool get_Strikethrough();
    public sealed virtual void set_ScriptStyle(ScriptStyle value);
    public ScriptStyle get_ScriptStyle();
    public void set_Color(int value);
    public int get_Color();
    private sealed virtual override void Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.IFont.set_Color(IColor value);
    public sealed virtual void set_Underline(Underline value);
    public Underline get_Underline();
    public void set_CharSet(CharSet value);
    public CharSet get_CharSet();
    public sealed virtual void set_Name(string value);
    public string get_Name();
    public sealed virtual void set_Size(double value);
    public double get_Size();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BIFF8Format : ValueType {
    private int m_ifmt;
    private string m_string;
    internal int Index { get; internal set; }
    internal string String { get; internal set; }
    internal BIFF8Format(string builtInFormat, int ifmt);
    internal int get_Index();
    internal void set_Index(int value);
    internal string get_String();
    internal void set_String(string value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BIFF8Generator : object {
    private CreateTempStream m_createTempStream;
    private List`1<BIFF8Color> m_colors;
    private Dictionary`2<string, BIFF8Color> m_colorLookup;
    private DrawingGroupContainer m_drawingGroupContainer;
    private SSTHandler m_stringTable;
    private WorksheetInfo m_worksheet;
    private BinaryWriter m_worksheetOut;
    private int m_numRowsThisBlock;
    private RowHandler m_rowHandler;
    private int m_column;
    private object m_cellValue;
    private TypeCode m_cellValueType;
    private ExcelErrorCode m_cellErrorCode;
    private StyleContainer m_styleContainer;
    private bool m_checkForRotatedEastAsianChars;
    private int m_rowIndexStartOfBlock;
    private long m_startOfBlock;
    private long m_startOfFirstCellData;
    private long m_lastDataCheckPoint;
    private List`1<WorksheetInfo> m_worksheets;
    private Dictionary`2<string, string> m_bookmarks;
    public int MaxRows { get; }
    public int MaxColumns { get; }
    public int RowBlockSize { get; }
    internal BIFF8Generator(CreateTempStream createTempStream);
    private void RenderCell();
    private void FinishRow();
    private void CalcAndWriteDBCells();
    private void AddNewWorksheet();
    private void CompleteCurrentWorksheet();
    private List`1<long> WriteGlobalStream(BinaryWriter writer);
    private void AdjustWorksheetName(string reportName, WorksheetInfo workSheet);
    public sealed virtual int get_MaxRows();
    public sealed virtual int get_MaxColumns();
    public sealed virtual int get_RowBlockSize();
    public sealed virtual void NextWorksheet();
    public sealed virtual void SetCurrentSheetName(string name);
    public sealed virtual void AdjustFirstWorksheetName(string reportName, bool addedDocMap);
    public sealed virtual void SetSummaryRowAfter(bool after);
    public sealed virtual void SetSummaryColumnToRight(bool after);
    public sealed virtual void SetColumnProperties(int columnIndex, double widthInPoints, byte outlineLevel, bool collapsed);
    public sealed virtual void SetColumnExtents(int min, int max);
    public sealed virtual void AddRow(int rowIndex);
    public sealed virtual void SetRowProperties(int rowIndex, int heightIn20thPoints, byte rowOutlineLevel, bool collapsed, bool autoSize);
    public sealed virtual void SetRowContext(int row);
    public sealed virtual void SetColumnContext(int column);
    public sealed virtual void SetCellValue(object value, TypeCode type);
    public sealed virtual void SetModifiedRotationForEastAsianChars(bool value);
    public sealed virtual IRichTextInfo GetCellRichTextInfo();
    public sealed virtual void SetCellError(ExcelErrorCode errorCode);
    public sealed virtual void AddMergeCell(int rowStart, int columnStart, int rowStop, int columnStop);
    public sealed virtual IColor AddColor(string color);
    public sealed virtual IStyle GetCellStyle();
    public sealed virtual TypeCode GetCellValueType();
    public sealed virtual void AddImage(string imageName, Stream imageData, ImageFormat format, int rowStart, double rowStartPercentage, int columnStart, double columnStartPercentage, int rowEnd, double rowEndPercentage, int columnEnd, double columnEndPercentage, string hyperlinkURL, bool isBookmarkLink);
    public sealed virtual void AddBackgroundImage(Byte[] data, string imageName, Stream& backgroundImage, UInt16& backgroundImageWidth, UInt16& backgroundImageHeight);
    public sealed virtual void AddHeader(string left, string center, string right);
    public sealed virtual void AddFooter(string left, string center, string right);
    public sealed virtual void AddFreezePane(int row, int column);
    public sealed virtual void AddHyperlink(string label, string url);
    public sealed virtual void AddBookmarkLink(string label, string bookmark);
    public sealed virtual void AddBookmarkTarget(string targetName);
    public sealed virtual void SetPageContraints(int paperSize, bool isPortrait, double headerMargin, double footerMargin);
    public sealed virtual void SetMargins(double topMargin, double bottomMargin, double leftMargin, double rightMargin);
    public sealed virtual void SaveSpreadsheet(Stream outputStream, Stream backgroundImage, ushort backgroundImageWidth, ushort backgroundImageHeight);
    public sealed virtual bool UseCachedStyle(string id);
    public sealed virtual void DefineCachedStyle(string id);
    public sealed virtual void EndCachedStyle();
    public sealed virtual Stream CreateStream(string name);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BIFF8Style : object {
    private static int BLOCK1_Offset;
    private static short BLOCK1_fLocked;
    private static short BLOCK1_fHidden;
    private static short BLOCK1_fStyle;
    private static short BLOCK1_f123Prefix;
    private static short BLOCK1_ixfParent;
    private static int BLOCK2_Offset;
    private static short BLOCK2_alc;
    private static short BLOCK2_fWrap;
    private static short BLOCK2_alcV;
    private static short BLOCK2_fJustLast;
    private static short BLOCK2_trot;
    private static int BLOCK3_Offset;
    private static short BLOCK3_cIndent;
    private static short BLOCK3_fShrinkToFit;
    private static short BLOCK3_fMergeCell;
    private static short BLOCK3_iReadingOrder;
    private static short BLOCK3_fAtrNum;
    private static short BLOCK3_fAtrFnt;
    private static short BLOCK3_fAtrAlc;
    private static short BLOCK3_fAtrBdr;
    private static short BLOCK3_fAtrPat;
    private static short BLOCK3_fAtrProt;
    private static int BLOCK4_Offset;
    private static short BLOCK4_dgLeft;
    private static short BLOCK4_dgRight;
    private static short BLOCK4_dgTop;
    private static short BLOCK4_dgBottom;
    private static int BLOCK5_Offset;
    private static short BLOCK5_icvLeft;
    private static short BLOCK5_icvRight;
    private static short BLOCK5_grbitDiag;
    private static int BLOCK6_Offset;
    private static int BLOCK6_icvTop;
    private static int BLOCK6_icvBottom;
    private static int BLOCK6_icvDiag;
    private static int BLOCK6_dgDiag;
    private static int BLOCK6_fls;
    private static int BLOCK7_Offset;
    private static short BLOCK7_icvFore;
    private static short BLOCK7_icvBack;
    private static short BLOCK7_fSxButton;
    private Byte[] m_xfData;
    private int m_hash;
    internal Byte[] RecordData { get; }
    internal int Ifnt { get; internal set; }
    internal int Ifmt { get; internal set; }
    unknown ExcelBorderStyle BorderLeftStyle {internal set; }
    unknown ExcelBorderStyle BorderRightStyle {internal set; }
    unknown ExcelBorderStyle BorderTopStyle {internal set; }
    unknown ExcelBorderStyle BorderBottomStyle {internal set; }
    unknown ExcelBorderStyle BorderOutlineStyle {internal set; }
    unknown ExcelBorderStyle BorderDiagStyle {internal set; }
    unknown IColor BorderLeftColor {internal set; }
    unknown IColor BorderRightColor {internal set; }
    unknown IColor BorderTopColor {internal set; }
    unknown IColor BorderBottomColor {internal set; }
    unknown IColor BorderOutlineColor {internal set; }
    unknown IColor BorderDiagColor {internal set; }
    unknown ExcelBorderPart BorderDiagPart {internal set; }
    unknown IColor BackgroundColor {internal set; }
    unknown int IndentLevel {internal set; }
    unknown bool WrapText {internal set; }
    unknown int Orientation {internal set; }
    unknown HorizontalAlignment HorizontalAlignment {internal set; }
    unknown VerticalAlignment VerticalAlignment {internal set; }
    unknown TextDirection TextDirection {internal set; }
    internal BIFF8Style(StyleProperties props);
    private void SetValue16(int offset, short mask, int value);
    private void SetValue32(int offset, int mask, int value);
    internal Byte[] get_RecordData();
    internal int get_Ifnt();
    internal void set_Ifnt(int value);
    internal int get_Ifmt();
    internal void set_Ifmt(int value);
    public virtual bool Equals(object target);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
    internal void set_BorderLeftStyle(ExcelBorderStyle value);
    internal void set_BorderRightStyle(ExcelBorderStyle value);
    internal void set_BorderTopStyle(ExcelBorderStyle value);
    internal void set_BorderBottomStyle(ExcelBorderStyle value);
    internal void set_BorderOutlineStyle(ExcelBorderStyle value);
    internal void set_BorderDiagStyle(ExcelBorderStyle value);
    internal void set_BorderLeftColor(IColor value);
    internal void set_BorderRightColor(IColor value);
    internal void set_BorderTopColor(IColor value);
    internal void set_BorderBottomColor(IColor value);
    internal void set_BorderOutlineColor(IColor value);
    internal void set_BorderDiagColor(IColor value);
    internal void set_BorderDiagPart(ExcelBorderPart value);
    internal void set_BackgroundColor(IColor value);
    internal void set_IndentLevel(int value);
    internal void set_WrapText(bool value);
    internal void set_Orientation(int value);
    internal void set_HorizontalAlignment(HorizontalAlignment value);
    internal void set_VerticalAlignment(VerticalAlignment value);
    internal void set_TextDirection(TextDirection value);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BitField16 : object {
    internal static short GetValue(short aValue, short aMask);
    internal static short PutValue(short aDst, short aMask, short aValue);
    internal static ushort GetValue(ushort aValue, ushort aMask);
    internal static ushort PutValue(ushort aDst, ushort aMask, ushort aValue);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BitField32 : object {
    internal static int GetValue(int aValue, int aMask);
    internal static int PutValue(int aDst, int aMask, int aValue);
    internal static UInt32 GetValue(UInt32 aValue, UInt32 aMask);
    internal static UInt32 PutValue(UInt32 aDst, UInt32 aMask, UInt32 aValue);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BitField8 : object {
    internal static byte GetValue(byte aValue, int aMask);
    internal static byte PutValue(byte aDst, byte aMask, byte aValue);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.BookmarkInfo : HyperlinkInfo {
    internal bool IsBookmark { get; }
    internal BookmarkInfo(string url, string label, int firstRow, int lastRow, int firstCol, int lastCol);
    internal virtual bool get_IsBookmark();
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.CellReference : object {
    internal static string CreateExcelReference(string sheetName, int row, int column);
    private static string ConvertToLetter(int val);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.CellRenderingDetails : ValueType {
    private BinaryWriter m_Writer;
    private int m_row;
    private short m_col;
    private ushort m_ixfe;
    internal BinaryWriter Output { get; }
    internal int Row { get; }
    internal short Column { get; }
    internal ushort Ixfe { get; }
    internal void Initialize(BinaryWriter writer, int row, short col, ushort ixfe);
    internal BinaryWriter get_Output();
    internal int get_Row();
    internal short get_Column();
    internal ushort get_Ixfe();
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.Constants : object {
    internal static string WORKBOOK95_STREAM;
    internal static string WORKBOOK97_STREAM;
    internal static string VBA_STREAM;
    internal static string VBA_STORAGE;
    internal static string VBA_STORAGE2;
    internal static string VBA_COMP_OBJ;
    internal static string SUMMARY_INFORMATION_STREAM;
    internal static string DOCUMENT_SUMMARY_INFORMATION_STREAM;
    internal static string PIVOT_CACHE_STORAGE;
    internal static int DEFAULT_XF;
    internal static double STANDARD_COLUMN_WIDTH;
    internal static double DEFAULT_COLUMN_WIDTH_MM;
    internal static double STANDARD_ROW_HEIGHT;
    internal static int STANDARD_ROW_HEIGHT_TWIPS;
    internal static double PIXEL_TO_POshort_RATION;
    internal static int MAX_RECORD_SIZE;
    internal static int MAX_STRING_PER_BUCKET;
    internal static int MAX_MERGED_CELLS_PER_RECORD;
    internal static int MAX_ROWS_PER_DBCELL_GROUP;
    internal static int MAX_STRING_LENGTH;
    internal static int MAX_COLUMN_NUMBER;
    internal static int MIN_COLUMN_NUMBER;
    internal static int MAX_ROW_NUMBER;
    internal static int MIN_ROW_NUMBER;
    internal static int MAX_ROW_HEIGHT_POINTS;
    internal static int MIN_COL_WIDTH_CHARS;
    internal static int MAX_COL_WIDTH_CHARS;
    internal static int FIRST_CUSTOM_FORMAT_INDEX;
    internal static int INVALID_INDEX;
    internal static int XF_TROT_VERTICAL;
    internal static short xlrec1904;
    internal static short xlrecADDIN;
    internal static short xlrecADDMENU;
    internal static short xlrecARRAY;
    internal static short xlrecAUTOFILTER;
    internal static short xlrecAUTOFILTERINFO;
    internal static short xlrecBACKUP;
    internal static short xlrecBACKGROUNDIMAGE;
    internal static short xlrecBLANK;
    internal static short xlrecBOF;
    internal static short xlrecBOOKBOOL;
    internal static short xlrecBOOLERR;
    internal static short xlrecBOTTOMMARGIN;
    internal static short xlrecBOUNDSHEET;
    internal static short xlrecCALCCOUNT;
    internal static short xlrecCALCMODE;
    internal static short xlrecCF;
    internal static short xlrecCHART3DDATAFORM;
    internal static short xlrecCLRTCLIENT;
    internal static short xlrecCODENAME;
    internal static short xlrecCODEPAGE;
    internal static short xlrecCOLINFO;
    internal static short xlrecCONDFMT;
    internal static short xlrecCONTINUE;
    internal static short xlrecCONTINUEFRT;
    internal static short xlrecCOORDLIST;
    internal static short xlrecCOUNTRY;
    internal static short xlrecCRN;
    internal static short xlrecDBCELL;
    internal static short xlrecDBQUERYEXT;
    internal static short xlrecDCON;
    internal static short xlrecDCONBIN;
    internal static short xlrecDCONNAME;
    internal static short xlrecDCONREF;
    internal static short xlrecDEFAULTROWHEIGHT;
    internal static short xlrecDEFCOLWIDTH;
    internal static short xlrecDELMENU;
    internal static short xlrecDELTA;
    internal static short xlrecDIMENSIONS;
    internal static short xlrecDOCROUTE;
    internal static short xlrecDSF;
    internal static short xlrecDV;
    internal static short xlrecDVAL;
    internal static short xlrecEDG;
    internal static short xlrecEOF;
    internal static short xlrecEXCELLABEL;
    internal static short xlrecEXCEL9FILE;
    internal static short xlrecEXTERNCOUNT;
    internal static short xlrecEXTERNNAME;
    internal static short xlrecEXTERNSHEET;
    internal static short xlrecEXTSST;
    internal static short xlrecEXTSTRING;
    internal static short xlrecFILEPASS;
    internal static short xlrecFILESHARING;
    internal static short xlrecFILESHARING2;
    internal static short xlrecFILTERMODE;
    internal static short xlrecFNGROUPCOUNT;
    internal static short xlrecFNGROUPNAME;
    internal static short xlrecFONT;
    internal static short xlrecFOOTER;
    internal static short xlrecFORMAT;
    internal static short xlrecFORMULA;
    internal static short xlrecGCW;
    internal static short xlrecGRIDSET;
    internal static short xlrecGUTS;
    internal static short xlrecHCENTER;
    internal static short xlrecHEADER;
    internal static short xlrecHIDEOBJ;
    internal static short xlrecHLINK;
    internal static short xlrecHLINKTOOLTIP;
    internal static short xlrecHORIZONTALPAGEBREAKS;
    internal static short xlrecIMDATA;
    internal static short xlrecINDEX;
    internal static short xlrecINTERFACEEND;
    internal static short xlrecINTERFACEHDR;
    internal static short xlrecITERATION;
    internal static short xlrecLABEL;
    internal static short xlrecLABELSST;
    internal static short xlrecLEFTMARGIN;
    internal static short xlrecLHNGRAPH;
    internal static short xlrecLHRECORD;
    internal static short xlrecLPR;
    internal static short xlrecMERGECELLS;
    internal static short xlrecMMS;
    internal static short xlrecMSODRAWING;
    internal static short xlrecMSODRAWINGGROUP;
    internal static short xlrecMSODRAWINGSELECTION;
    internal static short xlrecMULBLANK;
    internal static short xlrecMULRK;
    internal static short xlrecNAME;
    internal static short xlrecNOTE;
    internal static short xlrecNUMBER;
    internal static short xlrecOBJ;
    internal static short xlrecOBJPROTECT;
    internal static short xlrecOBPROJ;
    internal static short xlrecOLEDBCONN;
    internal static short xlrecOLESIZE;
    internal static short xlrecPALETTE;
    internal static short xlrecPANE;
    internal static short xlrecPARAMQRY;
    internal static short xlrecPASSWORD;
    internal static short xlrecPHONETIC;
    internal static short xlrecPLS;
    internal static short xlrecPRECISION;
    internal static short xlrecPRINTGRIDLINES;
    internal static short xlrecPRINTHEADERS;
    internal static short xlrecPROTECT;
    internal static short xlrecPROT4REV;
    internal static short xlrecPROT4REVPASS;
    internal static short xlrecQSI;
    internal static short xlrecQSIF;
    internal static short xlrecQSIR;
    internal static short xlrecQSISXTAG;
    internal static short xlrecRECALCID;
    internal static short xlrecRECIPNAME;
    internal static short xlrecREFMODE;
    internal static short xlrecREFRESHALL;
    internal static short xlrecRIGHTMARGIN;
    internal static short xlrecRK;
    internal static short xlrecROW;
    internal static short xlrecRSTRING;
    internal static short xlrecSAVERECALC;
    internal static short xlrecSCENARIO;
    internal static short xlrecSCENMAN;
    internal static short xlrecSCENPROTECT;
    internal static short xlrecSCL;
    internal static short xlrecSELECTION;
    internal static short xlrecSETUP;
    internal static short xlrecSHRFMLA;
    internal static short xlrecSORT;
    internal static short xlrecSOUND;
    internal static short xlrecSST;
    internal static short xlrecSTANDARDWIDTH;
    internal static short xlrecSTRING;
    internal static short xlrecSTYLE;
    internal static short xlrecSUB;
    internal static short xlrecSUPBOOK;
    internal static short xlrecSXDB;
    internal static short xlrecSXDBEX;
    internal static short xlrecSXDI;
    internal static short xlrecSXEX;
    internal static short xlrecSXFDBTYPE;
    internal static short xlrecSXFILT;
    internal static short xlrecSXFORMAT;
    internal static short xlrecSXFORMULA;
    internal static short xlrecSXFMLA;
    internal static short xlrecSXIDSTM;
    internal static short xlrecSXIVD;
    internal static short xlrecSXLI;
    internal static short xlrecSXNAME;
    internal static short xlrecSXPAIR;
    internal static short xlrecSXPI;
    internal static short xlrecSXPIEX;
    internal static short xlrecSXRULE;
    internal static short xlrecSXSTRING;
    internal static short xlrecSXSELECT;
    internal static short xlrecSXTBL;
    internal static short xlrecSXTBPG;
    internal static short xlrecSXTBRGIITM;
    internal static short xlrecSXTH;
    internal static short xlrecSXVD;
    internal static short xlrecSXVDEX;
    internal static short xlrecSXVDTEX;
    internal static short xlrecSXVI;
    internal static short xlrecSXVIEW;
    internal static short xlrecSXVIEWEX;
    internal static short xlrecSXVIEWEX9;
    internal static short xlrecSXVS;
    internal static short xlrecTABID;
    internal static short xlrecTABIDCONF;
    internal static short xlrecTABLE;
    internal static short xlrecTEMPLATE;
    internal static short xlrecTOPMARGIN;
    internal static short xlrecTXO;
    internal static short xlrecUDDESC;
    internal static short xlrecUNCALCED;
    internal static short xlrecUSERBVIEW;
    internal static short xlrecUSERSVIEWBEGIN;
    internal static short xlrecUSERSVIEWEND;
    internal static short xlrecUSESELFS;
    internal static short xlrecVCENTER;
    internal static short xlrecVERTICALPAGEBREAKS;
    internal static short xlrecWINDOW1;
    internal static short xlrecWINDOW2;
    internal static short xlrecWINDOWPROTECT;
    internal static short xlrecWOPT;
    internal static short xlrecWRITEACCESS;
    internal static short xlrecWRITEPROT;
    internal static short xlrecWSBOOL;
    internal static short xlrecXCT;
    internal static short xlrecXF;
    internal static short xlrecXL5MODIFY;
    internal static short xlrec0862;
    internal static short xlrecRECORD01BA;
    internal static short xlrecRECORD01BD;
    internal static short xlrecRECORD0853;
    internal static short xlrecRECORD10C2;
    internal static short xlrecPRINTEDCHARTSIZE;
    internal static short xlrec3D;
    internal static short xlrecAI;
    internal static short xlrecALRUNS;
    internal static short xlrecAREA;
    internal static short xlrecAREAFORMAT;
    internal static short xlrecATTACHEDLABEL;
    internal static short xlrecAXCEXT;
    internal static short xlrecAXESUSED;
    internal static short xlrecAXIS;
    internal static short xlrecAXISLINEFORMAT;
    internal static short xlrecAXISPARENT;
    internal static short xlrecBAR;
    internal static short xlrecBEGIN;
    internal static short xlrecBOPPOP;
    internal static short xlrecBOPPOPCUSTOM;
    internal static short xlrecCATSERRANGE;
    internal static short xlrecCHART;
    internal static short xlrecCHARTFORMAT;
    internal static short xlrecCHARTFORMATLINK;
    internal static short xlrecCHARTLINE;
    internal static short xlrecDAT;
    internal static short xlrecDATAFORMAT;
    internal static short xlrecDEFAULTTEXT;
    internal static short xlrecDROPBAR;
    internal static short xlrecEND;
    internal static short xlrecFBI;
    internal static short xlrecFONTX;
    internal static short xlrecFRAME;
    internal static short xlrecGELFRAME;
    internal static short xlrecIFMT;
    internal static short xlrecLEGEND;
    internal static short xlrecLEGENDXN;
    internal static short xlrecLINE;
    internal static short xlrecLINEFORMAT;
    internal static short xlrecMARKERFORMAT;
    internal static short xlrecOBJECTLINK;
    internal static short xlrecPICF;
    internal static short xlrecPIE;
    internal static short xlrecPIEFORMAT;
    internal static short xlrecPLOTAREA;
    internal static short xlrecPLOTGROWTH;
    internal static short xlrecPOS;
    internal static short xlrecRADAR;
    internal static short xlrecRADARAREA;
    internal static short xlrecSBASEREF;
    internal static short xlrecSCATTER;
    internal static short xlrecSERAUXERRBAR;
    internal static short xlrecSERAUXTREND;
    internal static short xlrecSERFMT;
    internal static short xlrecSERIES;
    internal static short xlrecSERIESLIST;
    internal static short xlrecSERIESTEXT;
    internal static short xlrecSERPARENT;
    internal static short xlrecSERTOCRT;
    internal static short xlrecSHTPROPS;
    internal static short xlrecSIINDEX;
    internal static short xlrecSURFACE;
    internal static short xlrecTEXT;
    internal static short xlrecTICK;
    internal static short xlrecUNITS;
    internal static short xlrecVALUERANGE;
    internal static short xlrecBOOKEXT;
    internal static short xlrecCRASHRECERR;
    internal static short xlrecDATALABEXT;
    internal static short xlrecDATALABEXTCONTENTS;
    internal static short xlrecCELLWATCH;
    internal static short xlrecHFPICTURE;
    internal static short xlrecREALTIMEDATA;
    internal static short xlrecSHEETEXT;
    internal static short xlrecSXADDL;
    internal static short xlrecFEAT;
    internal static short xlrecFEATHEADR;
    internal static short xlrecFEATINFO;
    internal static short xlrecCONTINUEFRT11;
    internal static short xlrecDROPDOWNOBJIDS;
    internal static short xlrecFEAT11;
    internal static short xlrecFEATHEADR11;
    internal static short xlrecFEATINFO11;
    internal static short xlrecLNEXT;
    internal static short xlrecMKREXT;
    internal static short xlrecCRTCOOPT;
    internal static short xlrecAUTOWEBPUB;
    internal static short xlrecLISTOBJ;
    internal static short xlrecLISTFIELD;
    internal static short xlrecLISTDV;
    internal static short xlrecLISTCONDFMT;
    internal static short xlrecLISTCF;
    internal static short xlrecFMQURY;
    internal static short xlrecFMSQRY;
    internal static short xlrecPLV;
    internal static short xlmiscBOF_BIFF7Ver;
    internal static short xlmiscBOF_BIFF8Ver;
    internal static short xlmiscBOF_DT_WORKBOOK;
    internal static short xlmiscBOF_DT_VBMODULE;
    internal static short xlmiscBOF_DT_WORKSHEET;
    internal static short xlmiscBOF_DT_CHART;
    internal static short xlmiscBOF_DT_EXCEL4MACRO;
    internal static short xlmiscBOF_DT_WORKSPACE;
    internal static short xlstyleNormal;
    internal static short xlstyleRowLevel;
    internal static short xlstyleColLevel;
    internal static short xlstyleComma;
    internal static short xlstyleCurrency;
    internal static short xlstylePercent;
    internal static short xlstyleComma0;
    internal static short xlstyleCurrency0;
    internal static short xlstyleHyperlink;
    internal static short xlstyleFollowedHyperlink;
    internal static string HLINK_GUID_STDLINK;
    internal static string HLINK_GUID_URL;
    internal static string HLINK_GUID_FILEMONIKER;
    internal static int Ifmt_CUSTOM_START;
    internal static int IFNT_CUSTOM_START;
    internal static int IXFE_CUSTOM_START;
    internal static int IXFE_DEFAULT_INDEX;
    internal static int MAX_COLORS_IN_PALETTE;
    internal static int PALETTE_INDEX_START;
    internal static int MAX_ROWS_IN_WORKSHEET_BIFF8;
    internal static int MAX_BIFF8_RECORD_SIZE;
    internal static int MAX_COLUMNS_IN_WORKSHEET_BIFF8;
    internal static int MAX_LENGTH_SPREADSHEET_NAME;
    internal static string DEFAULT_DATE_FORMAT;
    internal static string GENERAL_0;
    internal static string DECIMAL_1;
    internal static string DECIMAL_2;
    internal static string DECIMAL_3;
    internal static string DECIMAL_4;
    internal static string CURRENCY_5;
    internal static string CURRENCY_6;
    internal static string CURRENCY_7;
    internal static string CURRENCY_8;
    internal static string PERCENT_9;
    internal static string PERCENT_10;
    internal static string SCIENTIFIC_11;
    internal static string FRACTION_12;
    internal static string FRACTION_13;
    internal static string DATE_14;
    internal static string DATE_15;
    internal static string DATE_16;
    internal static string DATE_17;
    internal static string TIME_18;
    internal static string TIME_19;
    internal static string TIME_20;
    internal static string TIME_21;
    internal static string DATETIME_22;
    internal static string ACCOUNT_37;
    internal static string ACCOUNT_38;
    internal static string ACCOUNT_39;
    internal static string ACCOUNT_40;
    internal static string CURRENCY_41;
    internal static string CURRENCY_42;
    internal static string CURRENCY_43;
    internal static string CURRENCY_44;
    internal static string TIME_45;
    internal static string TIME_46;
    internal static string TIME_47;
    internal static string SCIENTIFIC_48;
    internal static string TEXT_50;
    internal static char NUMBER_FORMAT_ESCAPE_CHAR;
    internal static ushort GENERAL_INDEX;
    internal static ushort DECIMAL_1_INDEX;
    internal static ushort DECIMAL_2_INDEX;
    internal static ushort DECIMAL_3_INDEX;
    internal static ushort DECIMAL_4_INDEX;
    internal static ushort CURRENCY_5_INDEX;
    internal static ushort CURRENCY_6_INDEX;
    internal static ushort CURRENCY_7_INDEX;
    internal static ushort CURRENCY_8_INDEX;
    internal static ushort PERCENT_9_INDEX;
    internal static ushort PERCENT_10_INDEX;
    internal static ushort SCIENTIFIC_11_INDEX;
    internal static ushort FRACTION_12_INDEX;
    internal static ushort FRACTION_13_INDEX;
    internal static ushort DATE_14_INDEX;
    internal static ushort DATE_15_INDEX;
    internal static ushort DATE_16_INDEX;
    internal static ushort DATE_17_INDEX;
    internal static ushort TIME_18_INDEX;
    internal static ushort TIME_19_INDEX;
    internal static ushort TIME_20_INDEX;
    internal static ushort TIME_21_INDEX;
    internal static ushort DATETIME_22_INDEX;
    internal static ushort ACCOUNT_37_INDEX;
    internal static ushort ACCOUNT_38_INDEX;
    internal static ushort ACCOUNT_39_INDEX;
    internal static ushort ACCOUNT_40_INDEX;
    internal static ushort CURRENCY_41_INDEX;
    internal static ushort CURRENCY_42_INDEX;
    internal static ushort CURRENCY_43_INDEX;
    internal static ushort CURRENCY_44_INDEX;
    internal static ushort TIME_45_INDEX;
    internal static ushort TIME_46_INDEX;
    internal static ushort TIME_47_INDEX;
    internal static ushort SCIENTIFIC_48_INDEX;
    internal static ushort TEXT_50_INDEX;
    internal static string GLOBALS_PAGENUMBER;
    internal static string GLOBALS_TOTALPAGES;
    internal static string GLOBALS_REPORTNAME;
    internal static string FORMULA_REPORTITEMS;
    internal static string FORMULA_PREFIX;
    internal static string BOOKMARKPREFIX;
    internal static int EASTASIACHAR_RANGE1_START;
    internal static int EASTASIACHAR_RANGE1_END;
    internal static int EASTASIACHAR_RANGE2_START;
    internal static int EASTASIACHAR_RANGE2_END;
    internal static int EASTASIACHAR_RANGE3_START;
    internal static int EASTASIACHAR_RANGE3_END;
    internal static int EASTASIACHAR_RANGE4_START;
    internal static int EASTASIACHAR_RANGE4_END;
    internal static Byte[] GLOBAL1;
    internal static Byte[] GLOBAL2;
    internal static Byte[] GLOBAL3;
    internal static Byte[] GLOBAL4;
    internal static Byte[] WORKSHEET1;
    internal static Byte[] WORKSHEET2;
    internal static Byte[] WORKSHEET3;
    internal static Byte[] WORKSHEET4;
    internal static Byte[] xlsHyperlink1;
    internal static Byte[] xlsHyperlink2;
    internal static int MAX_ROWS_IN_WORKSHEET;
    private static Constants();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.DefineSharedStyle : StyleState {
    private StyleProperties m_styleProps;
    private string m_id;
    unknown ExcelBorderStyle BorderLeftStyle {public set; }
    unknown ExcelBorderStyle BorderRightStyle {public set; }
    unknown ExcelBorderStyle BorderTopStyle {public set; }
    unknown ExcelBorderStyle BorderBottomStyle {public set; }
    unknown ExcelBorderStyle BorderDiagStyle {public set; }
    unknown IColor BorderLeftColor {public set; }
    unknown IColor BorderRightColor {public set; }
    unknown IColor BorderTopColor {public set; }
    unknown IColor BorderBottomColor {public set; }
    unknown IColor BorderDiagColor {public set; }
    unknown ExcelBorderPart BorderDiagPart {public set; }
    unknown IColor BackgroundColor {public set; }
    unknown int IndentLevel {public set; }
    unknown bool WrapText {public set; }
    unknown int Orientation {public set; }
    public string NumberFormat { get; public set; }
    unknown HorizontalAlignment HorizontalAlignment {public set; }
    unknown VerticalAlignment VerticalAlignment {public set; }
    unknown TextDirection TextDirection {public set; }
    unknown int Bold {public set; }
    unknown bool Italic {public set; }
    unknown bool Strikethrough {public set; }
    unknown ScriptStyle ScriptStyle {public set; }
    unknown IColor Color {public set; }
    unknown Underline Underline {public set; }
    unknown string Name {public set; }
    unknown double Size {public set; }
    internal DefineSharedStyle(StyleContainer parent, string id);
    internal virtual void Finished();
    public virtual void set_BorderLeftStyle(ExcelBorderStyle value);
    public virtual void set_BorderRightStyle(ExcelBorderStyle value);
    public virtual void set_BorderTopStyle(ExcelBorderStyle value);
    public virtual void set_BorderBottomStyle(ExcelBorderStyle value);
    public virtual void set_BorderDiagStyle(ExcelBorderStyle value);
    public virtual void set_BorderLeftColor(IColor value);
    public virtual void set_BorderRightColor(IColor value);
    public virtual void set_BorderTopColor(IColor value);
    public virtual void set_BorderBottomColor(IColor value);
    public virtual void set_BorderDiagColor(IColor value);
    public virtual void set_BorderDiagPart(ExcelBorderPart value);
    public virtual void set_BackgroundColor(IColor value);
    public virtual void set_IndentLevel(int value);
    public virtual void set_WrapText(bool value);
    public virtual void set_Orientation(int value);
    public virtual void set_NumberFormat(string value);
    public virtual string get_NumberFormat();
    public virtual void set_HorizontalAlignment(HorizontalAlignment value);
    public virtual void set_VerticalAlignment(VerticalAlignment value);
    public virtual void set_TextDirection(TextDirection value);
    public virtual void set_Bold(int value);
    public virtual void set_Italic(bool value);
    public virtual void set_Strikethrough(bool value);
    public virtual void set_ScriptStyle(ScriptStyle value);
    public virtual void set_Color(IColor value);
    public virtual void set_Underline(Underline value);
    public virtual void set_Name(string value);
    public virtual void set_Size(double value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.HyperlinkInfo : AreaInfo {
    private string m_url;
    private string m_label;
    internal string URL { get; internal set; }
    internal string Label { get; }
    internal bool IsBookmark { get; }
    internal HyperlinkInfo(string url, string label, int firstRow, int lastRow, int firstCol, int lastCol);
    internal string get_URL();
    internal void set_URL(string value);
    internal string get_Label();
    internal virtual bool get_IsBookmark();
    public virtual string ToString();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.InstanceStyle : StyleState {
    private BIFF8Style m_xf;
    private BIFF8Font m_font;
    private string m_format;
    private bool m_fontModified;
    unknown ExcelBorderStyle BorderLeftStyle {public set; }
    unknown ExcelBorderStyle BorderRightStyle {public set; }
    unknown ExcelBorderStyle BorderTopStyle {public set; }
    unknown ExcelBorderStyle BorderBottomStyle {public set; }
    unknown ExcelBorderStyle BorderDiagStyle {public set; }
    unknown IColor BorderLeftColor {public set; }
    unknown IColor BorderRightColor {public set; }
    unknown IColor BorderTopColor {public set; }
    unknown IColor BorderBottomColor {public set; }
    unknown IColor BorderDiagColor {public set; }
    unknown ExcelBorderPart BorderDiagPart {public set; }
    unknown IColor BackgroundColor {public set; }
    unknown int IndentLevel {public set; }
    unknown bool WrapText {public set; }
    unknown int Orientation {public set; }
    public string NumberFormat { get; public set; }
    unknown HorizontalAlignment HorizontalAlignment {public set; }
    unknown VerticalAlignment VerticalAlignment {public set; }
    unknown TextDirection TextDirection {public set; }
    unknown int Bold {public set; }
    unknown bool Italic {public set; }
    unknown bool Strikethrough {public set; }
    unknown ScriptStyle ScriptStyle {public set; }
    unknown IColor Color {public set; }
    unknown Underline Underline {public set; }
    unknown string Name {public set; }
    unknown double Size {public set; }
    internal InstanceStyle(StyleContainer parent, StyleProperties props);
    internal InstanceStyle(StyleContainer aParent);
    internal virtual void Finished();
    private BIFF8Font GetFont();
    private void CloneFont();
    public virtual void set_BorderLeftStyle(ExcelBorderStyle value);
    public virtual void set_BorderRightStyle(ExcelBorderStyle value);
    public virtual void set_BorderTopStyle(ExcelBorderStyle value);
    public virtual void set_BorderBottomStyle(ExcelBorderStyle value);
    public virtual void set_BorderDiagStyle(ExcelBorderStyle value);
    public virtual void set_BorderLeftColor(IColor value);
    public virtual void set_BorderRightColor(IColor value);
    public virtual void set_BorderTopColor(IColor value);
    public virtual void set_BorderBottomColor(IColor value);
    public virtual void set_BorderDiagColor(IColor value);
    public virtual void set_BorderDiagPart(ExcelBorderPart value);
    public virtual void set_BackgroundColor(IColor value);
    public virtual void set_IndentLevel(int value);
    public virtual void set_WrapText(bool value);
    public virtual void set_Orientation(int value);
    private void InitFormat();
    public virtual void set_NumberFormat(string value);
    public virtual string get_NumberFormat();
    public virtual void set_HorizontalAlignment(HorizontalAlignment value);
    public virtual void set_VerticalAlignment(VerticalAlignment value);
    public virtual void set_TextDirection(TextDirection value);
    public virtual void set_Bold(int value);
    public virtual void set_Italic(bool value);
    public virtual void set_Strikethrough(bool value);
    public virtual void set_ScriptStyle(ScriptStyle value);
    public virtual void set_Color(IColor value);
    public virtual void set_Underline(Underline value);
    public virtual void set_Name(string value);
    public virtual void set_Size(double value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.LittleEndianHelper : object {
    internal static int BYTE_SIZE;
    internal static int SHORT_SIZE;
    internal static int CHAR_SIZE;
    internal static int INT_SIZE;
    internal static int LONG_SIZE;
    internal static int FLOAT_SIZE;
    internal static int DOUBLE_SIZE;
    internal static short UBYTE_MAX;
    internal static int USHORT_MAX;
    internal static long UINT_MAX;
    private static LittleEndianHelper();
    internal static short ReadShort(Byte[] aBuf, int aOff);
    internal static char readChar(Byte[] aBuf, int aOff);
    internal static int ReadInt(Byte[] aBuf, int aOff);
    internal static long ReadLong(Byte[] aBuf, int aOff);
    internal static float ReadFloat(Byte[] aBuf, int aOff);
    internal static double ReadDouble(Byte[] aBuf, int aOff);
    internal static short ReadByteU(Byte[] aBuf, int aOff);
    internal static int ReadShortU(Byte[] aBuf, int aOff);
    internal static long ReadIntU(Byte[] aBuf, int aOff);
    internal static double ReadFixed32(Byte[] aBuff, int aOff);
    internal static double ReadFixed32U(Byte[] aBuff, int aOff);
    internal static void WriteShort(short aVal, Byte[] aBuf, int aOff);
    internal static void WriteShort(ushort aVal, Byte[] aBuf, int aOff);
    internal static void WriteInt(int aVal, Byte[] aBuf, int aOff);
    internal static void WriteLong(long aVal, Byte[] aBuf, int aOff);
    internal static void WriteFloat(float aVal, Byte[] aBuf, int aOff);
    internal static void WriteDouble(double aVal, Byte[] aBuf, int aOff);
    internal static void writeByteU(short aVal, Byte[] aBuf, int aOff);
    internal static void WriteShortU(int aVal, Byte[] aBuf, int aOff);
    internal static void WriteIntU(long aVal, Byte[] aBuf, int aOff);
    internal static void WriteFixed32(double aVal, Byte[] aBuff, int aOff);
    internal static void WriteFixed32U(double aVal, Byte[] aBuff, int aOff);
    internal static void WriteShortU(Stream aOut, int aVal);
    internal static void WriteIntU(Stream aOut, long aVal);
    internal static int URShift(int number, int bits);
    internal static int URShift(int number, long bits);
    internal static long URShift(long number, int bits);
    internal static long URShift(long number, long bits);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.RichTextInfo : object {
    private List`1<Pair`2<int, int>> m_fontList;
    private BIFF8Font m_font;
    private StyleContainer m_styleContainer;
    private StringBuilder m_stringBuilder;
    private int m_startIndex;
    private int m_maxFontIndex;
    private bool m_firstRun;
    private bool m_checkForRotatedFarEastChars;
    private bool m_foundRotatedFarEastChar;
    internal int MaxFontIndex { get; }
    internal bool FoundRotatedFarEastChar { get; }
    unknown bool CheckForRotatedFarEastChars {public set; }
    internal RichTextInfo(StyleContainer styleContainer);
    internal int get_MaxFontIndex();
    internal bool get_FoundRotatedFarEastChar();
    public sealed virtual void set_CheckForRotatedFarEastChars(bool value);
    public sealed virtual IFont AppendTextRun(string value);
    public sealed virtual IFont AppendTextRun(string value, bool replaceInvalidWhiteSpace);
    public sealed virtual void AppendText(string value);
    public sealed virtual void AppendText(string value, bool replaceInvalidWhiteSpace);
    public sealed virtual void AppendText(char value);
    private void AppendWithChecking(string value);
    internal StringWrapperBIFF8 CompleteRun();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.RowHandler : object {
    private BinaryWriter m_stream;
    private int m_row;
    private byte m_counter;
    private UInt16[] m_xfs;
    private UInt32[] m_rks;
    private short m_recType;
    private short m_valueCol1;
    private short m_valueCol2;
    private CellRenderingDetails m_details;
    private static DateTime Epoch;
    private SSTHandler m_stringHandler;
    internal int Row { get; internal set; }
    internal RowHandler(BinaryWriter output, int firstRow, SSTHandler sst);
    private static RowHandler();
    internal int get_Row();
    internal void set_Row(int value);
    internal bool Add(object value, RichTextInfo richTextInfo, TypeCode type, ExcelDataType excelType, ExcelErrorCode errorCode, short column, ushort ixfe);
    private TransformResult CreateRichStringRecord(RichTextInfo richTextInfo, CellRenderingDetails details);
    internal TransformResult CreateStringRecord(string input, CellRenderingDetails details);
    internal TransformResult CreateBoolRecord(object val, CellRenderingDetails details);
    internal TransformResult CreateErrorRecord(ExcelErrorCode errorCode, CellRenderingDetails details);
    private TransformResult CreateBoolErrRecord(byte val, bool isError, CellRenderingDetails details);
    internal TransformResult CreateRKorNumberRecord(ValueType val, CellRenderingDetails details, Nullable`1& rkValue);
    private TransformResult CreateBlankRecord(CellRenderingDetails details);
    private TransformResult CreateRKRecord(UInt32 value, CellRenderingDetails details);
    internal void FlushRow();
    private void OnCellBegin(short recType, int col);
    private void FlushMultiRecord();
    internal static double DateToDays(DateTime dateTime);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.SSTHandler : object {
    private List`1<int> m_recordSize;
    internal int m_count;
    private Dictionary`2<StringWrapperBIFF8, int> m_stringTable;
    private List`1<StringWrapperBIFF8> m_stringOrder;
    private int m_offset;
    private int m_totalStrings;
    private int m_baseUniqueStrings;
    internal int TotalStrings { get; }
    internal int UniqueStrings { get; }
    private int CalcSize();
    private int InternalAddString(StringWrapperBIFF8 aWrapper);
    private void StartRecord(Stream aOut, short aRecordType);
    internal int get_TotalStrings();
    internal int get_UniqueStrings();
    internal string GetString(int aOffset);
    internal StringWrapperBIFF8 GetStringWrapper(int aOffset);
    internal int AddString(string aStr);
    internal int AddString(StringWrapperBIFF8 aWrapper);
    internal void Write(Stream aOut);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.StringChunkInfo : object {
    private bool mCompressed;
    private Byte[] mData;
    private int mCharPos;
    private int mCharsTotal;
    private static Byte[] EMPTYARRAY;
    internal Byte[] Bytes { get; }
    internal int CharPos { get; internal set; }
    internal int CharsTotal { get; internal set; }
    internal Byte[] Data { get; internal set; }
    internal bool Compressed { get; internal set; }
    internal bool HasMore { get; }
    private static StringChunkInfo();
    internal Byte[] get_Bytes();
    internal int get_CharPos();
    internal void set_CharPos(int value);
    internal int get_CharsTotal();
    internal void set_CharsTotal(int value);
    internal Byte[] get_Data();
    internal void set_Data(Byte[] value);
    internal bool get_Compressed();
    internal void set_Compressed(bool value);
    internal bool get_HasMore();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.StringWrapperBIFF8 : object {
    private static byte m_fHighByte;
    private static byte m_fExtSt;
    private static byte m_fRichSt;
    private byte m_grbit;
    private string m_rgb;
    private List`1<Pair`2<int, int>> m_runsList;
    private int m_hash;
    internal int DataSize { get; }
    internal int CharacterSize { get; }
    internal int FinalDataSize { get; }
    internal int FormatRunsDataSize { get; }
    internal int Size { get; }
    internal int HeaderSize { get; }
    internal Byte[] FinalData { get; }
    internal Byte[] FormatRunsData { get; }
    internal string String { get; }
    internal StringChunkInfo ChunkInfo { get; }
    internal bool FirstChunkCompressed { get; }
    internal int RunCount { get; }
    internal int Cch { get; }
    internal StringWrapperBIFF8(string aStr);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public virtual string ToString();
    internal int get_DataSize();
    internal int get_CharacterSize();
    internal int get_FinalDataSize();
    internal int get_FormatRunsDataSize();
    internal int get_Size();
    internal int get_HeaderSize();
    internal Byte[] get_FinalData();
    internal Byte[] get_FormatRunsData();
    internal string get_String();
    internal StringChunkInfo get_ChunkInfo();
    internal bool get_FirstChunkCompressed();
    internal void SetRunsList(List`1<Pair`2<int, int>> value);
    internal int get_RunCount();
    internal void WriteHeaderData(Stream aOut, bool aCompressed);
    internal int get_Cch();
    internal Byte[] GetCharacterData(StringChunkInfo aChunkInfo, int aBytesAvailable);
    internal void PrepareWriteCharacterData(StringChunkInfo aChunkInfo, int aBytesAvailable);
    internal int WriteCharacterData(Stream aOut, StringChunkInfo aChunkInfo, int aBytesAvailable);
    internal int GetCharacterDataSize(StringChunkInfo aChunkInfo, int aBytesAvailable);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.StyleContainer : object {
    private StyleState m_context;
    private Dictionary`2<string, StyleProperties> m_cache;
    private List`1<BIFF8Font> m_fonts;
    private Dictionary`2<BIFF8Font, int> m_fontMap;
    private List`1<BIFF8Style> m_styles;
    private Dictionary`2<BIFF8Style, int> m_styleMap;
    private List`1<BIFF8Format> m_formats;
    private Dictionary`2<string, int> m_formatStringMap;
    private Dictionary`2<int, int> m_formatIntMap;
    private int m_currentCustomFormatIndex;
    private ushort m_cellIxfe;
    internal int CellIxfe { get; internal set; }
    unknown ExcelBorderStyle BorderLeftStyle {public set; }
    unknown ExcelBorderStyle BorderRightStyle {public set; }
    unknown ExcelBorderStyle BorderTopStyle {public set; }
    unknown ExcelBorderStyle BorderBottomStyle {public set; }
    unknown ExcelBorderStyle BorderDiagStyle {public set; }
    unknown IColor BorderLeftColor {public set; }
    unknown IColor BorderRightColor {public set; }
    unknown IColor BorderTopColor {public set; }
    unknown IColor BorderBottomColor {public set; }
    unknown IColor BorderDiagColor {public set; }
    unknown ExcelBorderPart BorderDiagPart {public set; }
    unknown IColor BackgroundColor {public set; }
    unknown int IndentLevel {public set; }
    unknown bool WrapText {public set; }
    unknown int Orientation {public set; }
    public string NumberFormat { get; public set; }
    unknown HorizontalAlignment HorizontalAlignment {public set; }
    unknown VerticalAlignment VerticalAlignment {public set; }
    unknown TextDirection TextDirection {public set; }
    unknown int Bold {public set; }
    unknown bool Italic {public set; }
    unknown bool Strikethrough {public set; }
    unknown ScriptStyle ScriptStyle {public set; }
    unknown IColor Color {public set; }
    unknown Underline Underline {public set; }
    unknown string Name {public set; }
    unknown double Size {public set; }
    internal void Finish();
    internal void Reset();
    internal void DefineSharedStyle(string id);
    internal bool UseSharedStyle(string id);
    internal void SetContext(StyleState state);
    internal BIFF8Style GetStyle(int ixfe);
    internal string GetFormat(int ifmt);
    internal BIFF8Font GetFont(int ifnt);
    internal int AddStyle(BIFF8Style style);
    internal int AddStyle(StyleProperties props);
    internal int AddFormat(string format);
    internal int AddFont(BIFF8Font font);
    internal void set_CellIxfe(int value);
    internal int get_CellIxfe();
    internal void AddSharedStyle(string id, StyleProperties style);
    internal StyleProperties GetSharedStyle(string id);
    internal void Write(BinaryWriter writer);
    private void AddBuiltInFormats();
    private void CheckContext();
    public sealed virtual void set_BorderLeftStyle(ExcelBorderStyle value);
    public sealed virtual void set_BorderRightStyle(ExcelBorderStyle value);
    public sealed virtual void set_BorderTopStyle(ExcelBorderStyle value);
    public sealed virtual void set_BorderBottomStyle(ExcelBorderStyle value);
    public sealed virtual void set_BorderDiagStyle(ExcelBorderStyle value);
    public sealed virtual void set_BorderLeftColor(IColor value);
    public sealed virtual void set_BorderRightColor(IColor value);
    public sealed virtual void set_BorderTopColor(IColor value);
    public sealed virtual void set_BorderBottomColor(IColor value);
    public sealed virtual void set_BorderDiagColor(IColor value);
    public sealed virtual void set_BorderDiagPart(ExcelBorderPart value);
    public sealed virtual void set_BackgroundColor(IColor value);
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual void set_Orientation(int value);
    public sealed virtual void set_NumberFormat(string value);
    public string get_NumberFormat();
    public sealed virtual void set_HorizontalAlignment(HorizontalAlignment value);
    public sealed virtual void set_VerticalAlignment(VerticalAlignment value);
    public sealed virtual void set_TextDirection(TextDirection value);
    public sealed virtual void set_Bold(int value);
    public sealed virtual void set_Italic(bool value);
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual void set_ScriptStyle(ScriptStyle value);
    public sealed virtual void set_Color(IColor value);
    public sealed virtual void set_Underline(Underline value);
    public sealed virtual void set_Name(string value);
    public sealed virtual void set_Size(double value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.StyleProperties : object {
    private static float DEFAULT_FONT_SIZE;
    private static Dictionary`2<string, CharSet> m_charSetLookup;
    private static object m_charSetLookupLock;
    private IColor m_backgroundColor;
    private int m_indentLevel;
    private bool m_wrapText;
    private int m_orientation;
    private string m_format;
    private HorizontalAlignment m_horizAlign;
    private VerticalAlignment m_vertAlign;
    private TextDirection m_textDir;
    private ExcelBorderStyle m_borderLeftStyle;
    private ExcelBorderStyle m_borderRightStyle;
    private ExcelBorderStyle m_borderTopStyle;
    private ExcelBorderStyle m_borderBottomStyle;
    private ExcelBorderStyle m_borderDiagStyle;
    private IColor m_borderLeftColor;
    private IColor m_borderRightColor;
    private IColor m_borderTopColor;
    private IColor m_borderBottomColor;
    private IColor m_borderDiagColor;
    private ExcelBorderPart m_borderDiagPart;
    private int m_bold;
    private bool m_italic;
    private bool m_strikethrough;
    private Underline m_underline;
    private ScriptStyle m_scriptStyle;
    private IColor m_fontColor;
    private string m_fontName;
    private double m_fontSize;
    private int m_ixfe;
    internal IColor BackgroundColor { get; internal set; }
    internal int IndentLevel { get; internal set; }
    internal bool WrapText { get; internal set; }
    internal int Orientation { get; internal set; }
    internal int Bold { get; internal set; }
    internal bool Italic { get; internal set; }
    internal bool Strikethrough { get; internal set; }
    internal Underline Underline { get; internal set; }
    internal ScriptStyle ScriptStyle { get; internal set; }
    internal IColor Color { get; internal set; }
    internal string Name { get; internal set; }
    internal double Size { get; internal set; }
    internal CharSet CharSet { get; }
    internal string NumberFormat { get; internal set; }
    internal HorizontalAlignment HorizontalAlignment { get; internal set; }
    internal VerticalAlignment VerticalAlignment { get; internal set; }
    internal TextDirection TextDirection { get; internal set; }
    internal ExcelBorderStyle BorderLeftStyle { get; internal set; }
    internal ExcelBorderStyle BorderRightStyle { get; internal set; }
    internal ExcelBorderStyle BorderTopStyle { get; internal set; }
    internal ExcelBorderStyle BorderBottomStyle { get; internal set; }
    internal ExcelBorderStyle BorderDiagStyle { get; internal set; }
    internal IColor BorderLeftColor { get; internal set; }
    internal IColor BorderRightColor { get; internal set; }
    internal IColor BorderTopColor { get; internal set; }
    internal IColor BorderBottomColor { get; internal set; }
    internal IColor BorderDiagColor { get; internal set; }
    internal ExcelBorderPart BorderDiagPart { get; internal set; }
    internal int Ixfe { get; internal set; }
    private static StyleProperties();
    internal IColor get_BackgroundColor();
    internal void set_BackgroundColor(IColor value);
    internal int get_IndentLevel();
    internal void set_IndentLevel(int value);
    internal bool get_WrapText();
    internal void set_WrapText(bool value);
    internal int get_Orientation();
    internal void set_Orientation(int value);
    internal int get_Bold();
    internal void set_Bold(int value);
    internal bool get_Italic();
    internal void set_Italic(bool value);
    internal bool get_Strikethrough();
    internal void set_Strikethrough(bool value);
    internal Underline get_Underline();
    internal void set_Underline(Underline value);
    internal ScriptStyle get_ScriptStyle();
    internal void set_ScriptStyle(ScriptStyle value);
    internal IColor get_Color();
    internal void set_Color(IColor value);
    internal string get_Name();
    internal void set_Name(string value);
    internal double get_Size();
    internal void set_Size(double value);
    internal CharSet get_CharSet();
    internal string get_NumberFormat();
    internal void set_NumberFormat(string value);
    internal HorizontalAlignment get_HorizontalAlignment();
    internal void set_HorizontalAlignment(HorizontalAlignment value);
    internal VerticalAlignment get_VerticalAlignment();
    internal void set_VerticalAlignment(VerticalAlignment value);
    internal TextDirection get_TextDirection();
    internal void set_TextDirection(TextDirection value);
    internal ExcelBorderStyle get_BorderLeftStyle();
    internal void set_BorderLeftStyle(ExcelBorderStyle value);
    internal ExcelBorderStyle get_BorderRightStyle();
    internal void set_BorderRightStyle(ExcelBorderStyle value);
    internal ExcelBorderStyle get_BorderTopStyle();
    internal void set_BorderTopStyle(ExcelBorderStyle value);
    internal ExcelBorderStyle get_BorderBottomStyle();
    internal void set_BorderBottomStyle(ExcelBorderStyle value);
    internal ExcelBorderStyle get_BorderDiagStyle();
    internal void set_BorderDiagStyle(ExcelBorderStyle value);
    internal IColor get_BorderLeftColor();
    internal void set_BorderLeftColor(IColor value);
    internal IColor get_BorderRightColor();
    internal void set_BorderRightColor(IColor value);
    internal IColor get_BorderTopColor();
    internal void set_BorderTopColor(IColor value);
    internal IColor get_BorderBottomColor();
    internal void set_BorderBottomColor(IColor value);
    internal IColor get_BorderDiagColor();
    internal void set_BorderDiagColor(IColor value);
    internal ExcelBorderPart get_BorderDiagPart();
    internal void set_BorderDiagPart(ExcelBorderPart value);
    internal void set_Ixfe(int value);
    internal int get_Ixfe();
    private static void AddCharSet(string fontName);
    private static CharSet GetCharSet(string fontName);
}
internal abstract class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.StyleState : object {
    protected StyleContainer m_context;
    unknown ExcelBorderStyle BorderLeftStyle {public set; }
    unknown ExcelBorderStyle BorderRightStyle {public set; }
    unknown ExcelBorderStyle BorderTopStyle {public set; }
    unknown ExcelBorderStyle BorderBottomStyle {public set; }
    unknown ExcelBorderStyle BorderDiagStyle {public set; }
    unknown IColor BorderLeftColor {public set; }
    unknown IColor BorderRightColor {public set; }
    unknown IColor BorderTopColor {public set; }
    unknown IColor BorderBottomColor {public set; }
    unknown IColor BorderDiagColor {public set; }
    unknown ExcelBorderPart BorderDiagPart {public set; }
    unknown IColor BackgroundColor {public set; }
    unknown int IndentLevel {public set; }
    unknown bool WrapText {public set; }
    unknown int Orientation {public set; }
    public string NumberFormat { get; public set; }
    unknown HorizontalAlignment HorizontalAlignment {public set; }
    unknown VerticalAlignment VerticalAlignment {public set; }
    unknown TextDirection TextDirection {public set; }
    unknown int Bold {public set; }
    unknown bool Italic {public set; }
    unknown bool Strikethrough {public set; }
    unknown ScriptStyle ScriptStyle {public set; }
    unknown IColor Color {public set; }
    unknown Underline Underline {public set; }
    unknown string Name {public set; }
    unknown double Size {public set; }
    protected StyleState(StyleContainer parent);
    internal abstract virtual void Finished();
    public abstract virtual void set_BorderLeftStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderRightStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderTopStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderBottomStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderDiagStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderLeftColor(IColor value);
    public abstract virtual void set_BorderRightColor(IColor value);
    public abstract virtual void set_BorderTopColor(IColor value);
    public abstract virtual void set_BorderBottomColor(IColor value);
    public abstract virtual void set_BorderDiagColor(IColor value);
    public abstract virtual void set_BorderDiagPart(ExcelBorderPart value);
    public abstract virtual void set_BackgroundColor(IColor value);
    public abstract virtual void set_IndentLevel(int value);
    public abstract virtual void set_WrapText(bool value);
    public abstract virtual void set_Orientation(int value);
    public abstract virtual void set_NumberFormat(string value);
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_HorizontalAlignment(HorizontalAlignment value);
    public abstract virtual void set_VerticalAlignment(VerticalAlignment value);
    public abstract virtual void set_TextDirection(TextDirection value);
    public abstract virtual void set_Bold(int value);
    public abstract virtual void set_Italic(bool value);
    public abstract virtual void set_Strikethrough(bool value);
    public abstract virtual void set_ScriptStyle(ScriptStyle value);
    public abstract virtual void set_Color(IColor value);
    public abstract virtual void set_Underline(Underline value);
    public abstract virtual void set_Name(string value);
    public abstract virtual void set_Size(double value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.UseSharedStyle : StyleState {
    private StyleProperties m_styleProps;
    unknown ExcelBorderStyle BorderLeftStyle {public set; }
    unknown ExcelBorderStyle BorderRightStyle {public set; }
    unknown ExcelBorderStyle BorderTopStyle {public set; }
    unknown ExcelBorderStyle BorderBottomStyle {public set; }
    unknown ExcelBorderStyle BorderDiagStyle {public set; }
    unknown IColor BorderLeftColor {public set; }
    unknown IColor BorderRightColor {public set; }
    unknown IColor BorderTopColor {public set; }
    unknown IColor BorderBottomColor {public set; }
    unknown IColor BorderDiagColor {public set; }
    unknown ExcelBorderPart BorderDiagPart {public set; }
    unknown IColor BackgroundColor {public set; }
    unknown int IndentLevel {public set; }
    unknown bool WrapText {public set; }
    unknown int Orientation {public set; }
    public string NumberFormat { get; public set; }
    unknown HorizontalAlignment HorizontalAlignment {public set; }
    unknown VerticalAlignment VerticalAlignment {public set; }
    unknown TextDirection TextDirection {public set; }
    unknown int Bold {public set; }
    unknown bool Italic {public set; }
    unknown bool Strikethrough {public set; }
    unknown ScriptStyle ScriptStyle {public set; }
    unknown IColor Color {public set; }
    unknown Underline Underline {public set; }
    unknown string Name {public set; }
    unknown double Size {public set; }
    internal UseSharedStyle(StyleContainer parent, StyleProperties props);
    internal virtual void Finished();
    public virtual void set_BorderLeftStyle(ExcelBorderStyle value);
    public virtual void set_BorderRightStyle(ExcelBorderStyle value);
    public virtual void set_BorderTopStyle(ExcelBorderStyle value);
    public virtual void set_BorderBottomStyle(ExcelBorderStyle value);
    public virtual void set_BorderDiagStyle(ExcelBorderStyle value);
    public virtual void set_BorderLeftColor(IColor value);
    public virtual void set_BorderRightColor(IColor value);
    public virtual void set_BorderTopColor(IColor value);
    public virtual void set_BorderBottomColor(IColor value);
    public virtual void set_BorderDiagColor(IColor value);
    public virtual void set_BorderDiagPart(ExcelBorderPart value);
    public virtual void set_BackgroundColor(IColor value);
    public virtual void set_IndentLevel(int value);
    public virtual void set_WrapText(bool value);
    public virtual void set_Orientation(int value);
    public virtual void set_NumberFormat(string value);
    public virtual string get_NumberFormat();
    public virtual void set_HorizontalAlignment(HorizontalAlignment value);
    public virtual void set_VerticalAlignment(VerticalAlignment value);
    public virtual void set_TextDirection(TextDirection value);
    public virtual void set_Bold(int value);
    public virtual void set_Italic(bool value);
    public virtual void set_Strikethrough(bool value);
    public virtual void set_ScriptStyle(ScriptStyle value);
    public virtual void set_Color(IColor value);
    public virtual void set_Underline(Underline value);
    public virtual void set_Name(string value);
    public virtual void set_Size(double value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.BIFF8.WorksheetInfo : object {
    private ushort m_rowFirst;
    private ushort m_rowLast;
    private ushort m_colFirst;
    private ushort m_colLast;
    private ColumnInfo[] m_columns;
    private Stream m_cellData;
    private string m_sheetName;
    private long m_BOFStartOffset;
    private List`1<UInt32> m_DBCellOffsets;
    private List`1<ushort> m_sizeOfCellData;
    private List`1<AreaInfo> m_mergeCellAreas;
    private List`1<HyperlinkInfo> m_hyperlinks;
    private DrawingContainer m_drawingContainer;
    private List`1<ImageCache> m_images;
    private UInt32 m_currentShapeID;
    private string m_headerString;
    private string m_footerString;
    private ushort m_rowSplit;
    private ushort m_columnSplit;
    private int m_paperSize;
    private bool m_isPortrait;
    private double m_headerMargin;
    private double m_footerMargin;
    private double m_topMargin;
    private double m_bottomMargin;
    private double m_leftMargin;
    private double m_rightMargin;
    private bool m_summaryRowBelow;
    private bool m_summaryColumnToRight;
    private byte m_maxRowOutline;
    private byte m_maxColOutline;
    internal ushort RowFirst { get; internal set; }
    internal ushort RowLast { get; internal set; }
    internal ushort ColFirst { get; internal set; }
    internal ushort ColLast { get; internal set; }
    internal Stream CellData { get; internal set; }
    internal string SheetName { get; internal set; }
    internal long BOFStartOffset { get; internal set; }
    internal List`1<UInt32> DBCellOffsets { get; }
    internal List`1<ushort> SizeOfCellData { get; }
    internal ColumnInfo[] Columns { get; }
    internal List`1<AreaInfo> MergeCellAreas { get; }
    internal string HeaderString { get; internal set; }
    internal string FooterString { get; internal set; }
    internal bool SummaryRowAfter { get; internal set; }
    internal bool SummaryColumnToRight { get; internal set; }
    internal byte MaxRowOutline { get; internal set; }
    internal byte MaxColumnOutline { get; internal set; }
    internal WorksheetInfo(Stream cellDataStream, string name);
    internal ushort get_RowFirst();
    internal void set_RowFirst(ushort value);
    internal ushort get_RowLast();
    internal void set_RowLast(ushort value);
    internal ushort get_ColFirst();
    internal void set_ColFirst(ushort value);
    internal ushort get_ColLast();
    internal void set_ColLast(ushort value);
    internal Stream get_CellData();
    internal void set_CellData(Stream value);
    internal string get_SheetName();
    internal void set_SheetName(string value);
    internal long get_BOFStartOffset();
    internal void set_BOFStartOffset(long value);
    internal List`1<UInt32> get_DBCellOffsets();
    internal List`1<ushort> get_SizeOfCellData();
    internal ColumnInfo[] get_Columns();
    internal List`1<AreaInfo> get_MergeCellAreas();
    internal string get_HeaderString();
    internal void set_HeaderString(string value);
    internal string get_FooterString();
    internal void set_FooterString(string value);
    internal void set_SummaryRowAfter(bool value);
    internal bool get_SummaryRowAfter();
    internal void set_SummaryColumnToRight(bool value);
    internal bool get_SummaryColumnToRight();
    internal void set_MaxRowOutline(byte value);
    internal byte get_MaxRowOutline();
    internal void set_MaxColumnOutline(byte value);
    internal byte get_MaxColumnOutline();
    internal void ResolveCellReferences(Dictionary`2<string, string> lookup);
    internal void Write(BinaryWriter writer, bool isFirstPage, CreateTempStream createTempStream, Stream backgroundImage, ushort backgroundImageWidth, ushort backgroundImageHeight);
    internal void AddImage(ushort drawingID, UInt32 starterShapeID, string name, SPRC clientAnchor, UInt32 referenceIndex, string hyperlinkURL, bool isBookmark);
    internal void AddFreezePane(int row, int column);
    internal void AddHyperlink(int row, int column, string url, string label);
    internal void AddBookmark(int row, int column, string bookmark, string label);
    internal void SetPageContraints(int paperSize, bool isPortrait, double headerMargin, double footerMargin);
    internal void SetMargins(double topMargin, double bottomMargin, double leftMargin, double rightMargin);
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.CharSet : Enum {
    public byte value__;
    public static CharSet ANSI_CHARSET;
    public static CharSet DEFAULT_CHARSET;
    public static CharSet SYMBOL_CHARSET;
    public static CharSet MAC_CHARSET;
    public static CharSet SHIFTJIS_CHARSET;
    public static CharSet HANGEUL_CHARSET;
    public static CharSet HANGUL_CHARSET;
    public static CharSet JOHAB_CHARSET;
    public static CharSet GB2312_CHARSET;
    public static CharSet CHINESEBIG5_CHARSET;
    public static CharSet GREEK_CHARSET;
    public static CharSet TURKISH_CHARSET;
    public static CharSet VIETNAMESE_CHARSET;
    public static CharSet HEBREW_CHARSET;
    public static CharSet ARABIC_CHARSET;
    public static CharSet BALTIC_CHARSET;
    public static CharSet RUSSIAN_CHARSET;
    public static CharSet THAI_CHARSET;
    public static CharSet EASTEUROPE_CHARSET;
    public static CharSet OEM_CHARSET;
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.ExcelBorderPart : Enum {
    public int value__;
    public static ExcelBorderPart Left;
    public static ExcelBorderPart Top;
    public static ExcelBorderPart Right;
    public static ExcelBorderPart Bottom;
    public static ExcelBorderPart Outline;
    public static ExcelBorderPart DiagonalDown;
    public static ExcelBorderPart DiagonalUp;
    public static ExcelBorderPart DiagonalBoth;
    public static ExcelBorderPart All;
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.ExcelBorderStyle : Enum {
    public int value__;
    public static ExcelBorderStyle None;
    public static ExcelBorderStyle Thin;
    public static ExcelBorderStyle Medium;
    public static ExcelBorderStyle Dashed;
    public static ExcelBorderStyle Dotted;
    public static ExcelBorderStyle Thick;
    public static ExcelBorderStyle Double;
    public static ExcelBorderStyle Hair;
    public static ExcelBorderStyle MedDashed;
    public static ExcelBorderStyle DashDot;
    public static ExcelBorderStyle MedDashDot;
    public static ExcelBorderStyle DashDotDot;
    public static ExcelBorderStyle MedDashDotDot;
    public static ExcelBorderStyle SlantedDashDot;
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.ExcelErrorCode : Enum {
    public byte value__;
    public static ExcelErrorCode None;
    public static ExcelErrorCode NullError;
    public static ExcelErrorCode DivByZeroError;
    public static ExcelErrorCode ValueError;
    public static ExcelErrorCode RefError;
    public static ExcelErrorCode NameError;
    public static ExcelErrorCode NumError;
    public static ExcelErrorCode NAError;
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment General;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Center;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Fill;
    public static HorizontalAlignment Justify;
    public static HorizontalAlignment CenterAcrossSelection;
    public static HorizontalAlignment Distributed;
}
internal interface Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.IColor {
    public byte Red { get; }
    public byte Green { get; }
    public byte Blue { get; }
    public abstract virtual byte get_Red();
    public abstract virtual byte get_Green();
    public abstract virtual byte get_Blue();
}
internal interface Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.IExcelGenerator {
    public int MaxRows { get; }
    public int MaxColumns { get; }
    public int RowBlockSize { get; }
    public abstract virtual int get_MaxRows();
    public abstract virtual int get_MaxColumns();
    public abstract virtual int get_RowBlockSize();
    public abstract virtual void NextWorksheet();
    public abstract virtual void SetCurrentSheetName(string name);
    public abstract virtual void AdjustFirstWorksheetName(string reportName, bool addedDocMap);
    public abstract virtual void SetSummaryRowAfter(bool after);
    public abstract virtual void SetSummaryColumnToRight(bool after);
    public abstract virtual void SetColumnProperties(int columnIndex, double widthInPoints, byte columnOutlineLevel, bool collapsed);
    public abstract virtual void AddRow(int rowIndex);
    public abstract virtual void SetRowProperties(int rowIndex, int heightIn20thPoints, byte rowOutlineLevel, bool collapsed, bool autoSize);
    public abstract virtual void SetRowContext(int rowIndex);
    public abstract virtual void SetColumnExtents(int min, int max);
    public abstract virtual void SetColumnContext(int columnIndex);
    public abstract virtual void SetCellValue(object value, TypeCode type);
    public abstract virtual void SetCellError(ExcelErrorCode errorCode);
    public abstract virtual void SetModifiedRotationForEastAsianChars(bool value);
    public abstract virtual IRichTextInfo GetCellRichTextInfo();
    public abstract virtual IStyle GetCellStyle();
    public abstract virtual TypeCode GetCellValueType();
    public abstract virtual void AddImage(string imageName, Stream imageData, ImageFormat format, int rowStart, double rowStartPercentage, int columnStart, double columnStartPercentage, int rowEnd, double rowEndPercentage, int columnEnd, double colEndPercentage, string hyperlinkURL, bool isBookmarkLink);
    public abstract virtual void AddMergeCell(int rowStart, int columnStart, int rowStop, int columnStop);
    public abstract virtual void AddHyperlink(string label, string reportURL);
    public abstract virtual void AddHeader(string left, string center, string right);
    public abstract virtual void AddFooter(string left, string center, string right);
    public abstract virtual void AddFreezePane(int aRow, int aColumn);
    public abstract virtual void AddBookmarkTarget(string value);
    public abstract virtual void AddBookmarkLink(string label, string link);
    public abstract virtual void AddBackgroundImage(Byte[] data, string imageName, Stream& backgroundImage, UInt16& backgroundImageWidth, UInt16& backgroundImageHeight);
    public abstract virtual void SetPageContraints(int paperSize, bool isPortrait, double headerMargin, double footerMargin);
    public abstract virtual void SetMargins(double topMargin, double bottomMargin, double leftMargin, double rightMargin);
    public abstract virtual IColor AddColor(string colorString);
    public abstract virtual void SaveSpreadsheet(Stream outputStream, Stream backgroundImage, ushort backgroundImageWidth, ushort backgroundImageHeight);
    public abstract virtual Stream CreateStream(string name);
    public abstract virtual bool UseCachedStyle(string id);
    public abstract virtual void DefineCachedStyle(string id);
    public abstract virtual void EndCachedStyle();
}
internal interface Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.IFont {
    unknown int Bold {public set; }
    unknown bool Italic {public set; }
    unknown bool Strikethrough {public set; }
    unknown ScriptStyle ScriptStyle {public set; }
    unknown IColor Color {public set; }
    unknown Underline Underline {public set; }
    unknown string Name {public set; }
    unknown double Size {public set; }
    public abstract virtual void set_Bold(int value);
    public abstract virtual void set_Italic(bool value);
    public abstract virtual void set_Strikethrough(bool value);
    public abstract virtual void set_ScriptStyle(ScriptStyle value);
    public abstract virtual void set_Color(IColor value);
    public abstract virtual void set_Underline(Underline value);
    public abstract virtual void set_Name(string value);
    public abstract virtual void set_Size(double value);
}
internal interface Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.IRichTextInfo {
    unknown bool CheckForRotatedFarEastChars {public set; }
    public abstract virtual IFont AppendTextRun(string value);
    public abstract virtual IFont AppendTextRun(string value, bool replaceInvalidWhitespace);
    public abstract virtual void AppendText(string value);
    public abstract virtual void AppendText(string value, bool replaceInvalidWhiteSpace);
    public abstract virtual void AppendText(char value);
    public abstract virtual void set_CheckForRotatedFarEastChars(bool value);
}
internal interface Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.IStyle {
    unknown ExcelBorderStyle BorderLeftStyle {public set; }
    unknown ExcelBorderStyle BorderRightStyle {public set; }
    unknown ExcelBorderStyle BorderTopStyle {public set; }
    unknown ExcelBorderStyle BorderBottomStyle {public set; }
    unknown ExcelBorderStyle BorderDiagStyle {public set; }
    unknown IColor BorderLeftColor {public set; }
    unknown IColor BorderRightColor {public set; }
    unknown IColor BorderTopColor {public set; }
    unknown IColor BorderBottomColor {public set; }
    unknown IColor BorderDiagColor {public set; }
    unknown ExcelBorderPart BorderDiagPart {public set; }
    unknown IColor BackgroundColor {public set; }
    unknown int IndentLevel {public set; }
    unknown bool WrapText {public set; }
    unknown int Orientation {public set; }
    unknown string NumberFormat {public set; }
    unknown HorizontalAlignment HorizontalAlignment {public set; }
    unknown VerticalAlignment VerticalAlignment {public set; }
    unknown TextDirection TextDirection {public set; }
    public abstract virtual void set_BorderLeftStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderRightStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderTopStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderBottomStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderDiagStyle(ExcelBorderStyle value);
    public abstract virtual void set_BorderLeftColor(IColor value);
    public abstract virtual void set_BorderRightColor(IColor value);
    public abstract virtual void set_BorderTopColor(IColor value);
    public abstract virtual void set_BorderBottomColor(IColor value);
    public abstract virtual void set_BorderDiagColor(IColor value);
    public abstract virtual void set_BorderDiagPart(ExcelBorderPart value);
    public abstract virtual void set_BackgroundColor(IColor value);
    public abstract virtual void set_IndentLevel(int value);
    public abstract virtual void set_WrapText(bool value);
    public abstract virtual void set_Orientation(int value);
    public abstract virtual void set_NumberFormat(string value);
    public abstract virtual void set_HorizontalAlignment(HorizontalAlignment value);
    public abstract virtual void set_VerticalAlignment(VerticalAlignment value);
    public abstract virtual void set_TextDirection(TextDirection value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.LOGFONT : object {
    public int lfHeight;
    public int lfWidth;
    public int lfEscapement;
    public int lfOrientation;
    public int lfWeight;
    public byte lfItalic;
    public byte lfUnderline;
    public byte lfStrikeOut;
    public byte lfCharSet;
    public byte lfOutPrecision;
    public byte lfClipPrecision;
    public byte lfQuality;
    public byte lfPitchAndFamily;
    public string lfFaceName;
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.Orientation : object {
    public static int Horizontal;
    public static int Rotate90CounterClockWise;
    public static int Rotate90ClockWise;
    public static int Vertical;
    private static Orientation();
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.ScriptStyle : Enum {
    public int value__;
    public static ScriptStyle None;
    public static ScriptStyle Superscript;
    public static ScriptStyle Subscript;
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.TextDirection : Enum {
    public int value__;
    public static TextDirection Context;
    public static TextDirection LeftToRight;
    public static TextDirection RightToLeft;
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.Underline : Enum {
    public int value__;
    public static Underline None;
    public static Underline Single;
    public static Underline Double;
    public static Underline Accounting;
    public static Underline DoubleAccounting;
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Excel.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Center;
    public static VerticalAlignment Bottom;
    public static VerticalAlignment Justify;
    public static VerticalAlignment Distributed;
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelGenerator.BIFF8.Records.Escher : object {
    internal static ushort RecordHeaderLength;
    private static int ClusterSize;
    private static ushort ContainerVersion;
    internal static Byte[] CheckSum(Stream imageBits);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelGenerator.BIFF8.Records.MsoDrawingGroup : object {
    private static int MaxRecordLength;
    private static int BSEBlipLength;
    private static int ShapePropertyLength;
    private static int BSELength;
    private static Byte[] FillRecordWithBlips(DrawingGroupContainer dggContainer, ArrayList blipList, Hashtable bseList, Stream stream, Int32& currentBlip, Int32& currentLength, Stream& currentImageStream);
    private static void WriteDGHeader(BinaryWriter output, Byte[] buffer, Int32& currentLength, Int32& numberOfContinues, UInt32 lastContinueLength);
    internal static void WriteToStream(BinaryWriter output, DrawingGroupContainer dggContainer);
    private static void WriteShapeProperties(DrawingGroupContainer aDggContainer, Stream stream, Int32& shapePropertiesIndex, int currentLength);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelGenerator.BIFF8.Records.Pair`2 : ValueType {
    private T m_first;
    private U m_second;
    internal T First { get; }
    internal U Second { get; }
    internal Pair`2(T first, U second);
    internal T get_First();
    internal U get_Second();
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelGenerator.BIFF8.Records.RecordFactory : object {
    private static double ARIAL10ZEROWIDTH;
    private static double POINTS_PER_INCH;
    private static double PIXELS_PER_INCH;
    private static UnicodeEncoding m_uniEncoding;
    private static RecordFactory();
    internal static void WriteHeader(BinaryWriter output, short type, int size);
    private static void WriteCellHeader(BinaryWriter output, short type, int size, ushort row, ushort col, ushort ixfe);
    private static int ToColumnWidth(double valueInPoints);
    private static int PointsToPixels(double points);
    internal static long BOF(BinaryWriter output, BOFSubstreamType type);
    internal static long BOUNDSHEET(BinaryWriter output, UInt32 offsetToBOF, string sheetName);
    internal static long COLINFO(BinaryWriter output, ushort column, double colWidth, ushort outlineLevel, bool collapsed);
    internal static long DIMENSIONS(BinaryWriter output, UInt32 rowStart, UInt32 rowStop, ushort colStart, ushort colStop);
    internal static long INDEX(BinaryWriter output, UInt32 firstRow, UInt32 lastRow, List`1<UInt32> dbCellOffsets);
    internal static long DBCELL(BinaryWriter output, UInt32 startRowOffset, List`1<ushort> streamOffsets);
    internal static long ROW(BinaryWriter output, ushort rowIndex, ushort colMin, ushort colMax, ushort rowHeight, ushort outlineLevel, bool collapsed, bool autoSize);
    internal static long BLANK(BinaryWriter output, ushort row, ushort col, ushort ixfe);
    internal static long MULBLANK(BinaryWriter output, ushort row, ushort colFirst, ushort colLast, UInt16[] xfIndexes, int numValues);
    internal static long BOOLERR(BinaryWriter output, ushort row, ushort column, ushort ixfe, byte valOrErrorCode, bool isError);
    internal static long LABEL(BinaryWriter output, ushort rowIndex, ushort colIndex, ushort ixfe, string rgch);
    internal static long LABELSST(BinaryWriter output, ushort rowIndex, ushort colIndex, ushort ixfe, UInt32 isst);
    internal static long RK(BinaryWriter output, ushort rowIndex, ushort colIndex, ushort ixfe, UInt32 rkValue);
    internal static long MULRK(BinaryWriter output, ushort rowIndex, ushort colFirst, ushort colLast, UInt16[] xfIndexes, UInt32[] rkValues, int numValues);
    internal static long NUMBER(BinaryWriter output, ushort rowIndex, ushort colIndex, ushort ixfe, double value);
    internal static long MERGECELLS(BinaryWriter output, List`1<AreaInfo> mergeAreas);
    internal static long FONT(BinaryWriter output, BIFF8Font font);
    internal static long FORMAT(BinaryWriter output, string format, int ifmt);
    internal static long XF(BinaryWriter output, Byte[] styleData);
    internal static long PALETTE(BinaryWriter output, List`1<BIFF8Color> colors);
    internal static long OBJ(BinaryWriter output, ushort objId);
    internal static long HEADER(BinaryWriter output, string headerString);
    internal static long FOOTER(BinaryWriter output, string footerString);
    internal static long PANE(BinaryWriter output, ushort verticalSplit, ushort horizontalSplit, ushort topVisible, ushort leftVisible, ushort activePane);
    internal static long WINDOW2(BinaryWriter output, bool frozen, bool selected);
    internal static long WSBOOL(BinaryWriter output, bool rowSummaryBelow, bool colSummaryToRight);
    internal static long HLINK(BinaryWriter output, HyperlinkInfo link);
    internal static long BACKGROUNDIMAGE(BinaryWriter output, Stream imageStream, ushort pictureWidth, ushort pictureHeight);
    internal static long SETUP(BinaryWriter output, ushort paperSize, bool isPortrait, double headerMargin, double footerMargin);
    internal static long GUTS(BinaryWriter output, byte maxRowOutline, byte maxColOutline);
    internal static long MARGINS(BinaryWriter output, double topMargin, double bottomMargin, double leftMargin, double rightMargin);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelGenerator.BIFF8.Records.RKEncoder : object {
    private static double MAXRKVALUE;
    private static RKEncoder();
    internal static Nullable`1<UInt32> EncodeRK(double aRKValue);
    internal static double DecodeRK(int aBytes);
    private static Nullable`1<UInt32> double2RK(double aRKValue, UInt32 aTypeMask);
    private static Nullable`1<UInt32> longint2RK(double aRKValue, long aTypeMask);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelGenerator.BIFF8.Records.StringUtil : object {
    internal static void WriteBIFF8String(BinaryWriter aOut, string aString, bool compressed);
    internal static void WriteBIFF8String(BinaryWriter output, string str, bool writeLength, bool compressed);
    internal static int CalcBIFF8StringSize(string str, bool tryToCompress, Boolean& compressed);
    internal static int CalcBIFF8StringSize(string aString, Boolean& compressed);
    internal static void ConvertWhitespaceAppendString(string value, StringBuilder stringBuilder, bool checkEastAsianChars, Boolean& foundEastAsianChar);
    internal static Byte[] DecodeTo1Byte(string aStr);
    internal static void DecodeTo1Byte(BinaryWriter aOut, string aStr);
    internal static void DecodeTo1Byte(Stream aOut, string aStr, int aOffset, int aLength);
    internal static Byte[] DecodeTo2ByteLE(string aStr);
    internal static void DecodeTo2ByteLE(BinaryWriter aOut, string aStr);
    internal static void DecodeTo2ByteLE(Stream aOut, string aStr, int aOffset, int aLength);
    internal static bool CanCompress(string aStr);
    internal static bool CanCompress(Char[] aChars, int aOffset, int aLength);
    internal static bool CanCompress(string aStr, int aOffset, int aLength);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelGenerator.BIFF8.StructuredStorage : object {
    private static int BUFFERSIZE;
    public static bool CreateSingleStreamFile(Stream source, string streamName, Stream output, bool forceInMemory);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelReferenceCreator : object {
    private static ExcelReferenceCreator m_instance;
    internal static ExcelReferenceCreator Instance { get; }
    private static ExcelReferenceCreator();
    internal static ExcelReferenceCreator get_Instance();
    public sealed virtual bool TryCreateReference(IStorable refTarget, BaseReference& reference);
    public sealed virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& reference);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelRenderer : object {
    internal static ResourceManager ExcelResourceManager;
    private bool m_omitFormula;
    private bool m_simplePageHeaders;
    private bool m_omitDocumentMap;
    private double m_removeSpace;
    private bool m_suppressOutlines;
    private bool m_addedDocMap;
    public string LocalizedName { get; }
    private static ExcelRenderer();
    private Stream CreateMemoryStream(string aName, string aExtension, Encoding aEncoding, string aMimeType, bool aWillSeek, StreamOper aOper);
    public sealed virtual void GetRenderingResource(CreateAndRegisterStream createAndRegisterStreamCallback, NameValueCollection deviceInfo);
    public sealed virtual bool Render(Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual bool RenderStream(string streamName, Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual string get_LocalizedName();
    public sealed virtual void SetConfiguration(string configuration);
    private void ParseDeviceinfo(NameValueCollection deviceInfo);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.ExcelRenderRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string ExcelLocalizedName { get; }
    public static string DocumentMap { get; }
    public static string SheetName { get; }
    public static string ArgumentNullException { get; }
    public static string ArgumentInvalid { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ExcelLocalizedName();
    public static string get_DocumentMap();
    public static string get_SheetName();
    public static string get_ArgumentNullException();
    public static string get_ArgumentInvalid();
    public static string InvalidIndexException(string index);
    public static string MaxValueExceeded(string max);
    public static string ValueOutOfRange(string min, string max, string value);
    public static string MaxRowExceededInSheet(string rows, string maxRows);
    public static string MaxColExceededInSheet(string cols, string maxCols);
    public static string UnknownImageFormat(string format);
    public static string MaxStringLengthExceeded(string row, string col);
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.BlockOutlines : Enum {
    public byte value__;
    public static BlockOutlines None;
    public static BlockOutlines Columns;
    public static BlockOutlines Rows;
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.BorderInfo : object {
    private IColor m_backgroundColor;
    private BorderProperties m_leftBorder;
    private BorderProperties m_topBorder;
    private BorderProperties m_rightBorder;
    private BorderProperties m_bottomBorder;
    private BorderProperties m_diagonal;
    private bool m_omitBorderTop;
    private bool m_omitBorderBottom;
    internal BorderProperties RightBorder { get; }
    internal BorderProperties BottomBorder { get; }
    internal IColor BackgroundColor { get; }
    internal BorderProperties LeftBorder { get; }
    internal BorderProperties TopBorder { get; }
    internal BorderProperties Diagonal { get; }
    internal bool OmitBorderTop { get; internal set; }
    internal bool OmitBorderBottom { get; internal set; }
    internal BorderInfo(RPLStyleProps style, bool omitBorderTop, bool omitBorderBottom, IExcelGenerator excel);
    internal BorderInfo(RPLElementStyle style, int width, int height, bool slant, bool omitBorderTop, bool omitBorderBottom, bool defaultLine, IExcelGenerator excel);
    internal static void FillAllBorders(RPLStyleProps style, BorderProperties& leftBorder, BorderProperties& rightBorder, BorderProperties& topBorder, BorderProperties& bottomBorder, IColor& backgroundColor, IExcelGenerator excel);
    private static void FillLeftBorderProperties(RPLStyleProps style, IExcelGenerator excel, BorderProperties& leftBorder);
    private static void FillRightBorderProperties(RPLStyleProps style, IExcelGenerator excel, BorderProperties& rightBorder);
    private static void FillTopBorderProperties(RPLStyleProps style, IExcelGenerator excel, BorderProperties& topBorder);
    private static void FillBottomBorderProperties(RPLStyleProps style, IExcelGenerator excel, BorderProperties& bottomBorder);
    private static BorderProperties FillBorderProperties(IExcelGenerator excel, BorderProperties currBorder, BorderProperties border, ExcelBorderPart part, object style, object width, object color);
    private void FillBorderProperties(IExcelGenerator excel, BorderProperties border, object style, object width, object color);
    internal void RenderBorders(IExcelGenerator excel);
    internal BorderProperties get_RightBorder();
    internal BorderProperties get_BottomBorder();
    internal IColor get_BackgroundColor();
    internal BorderProperties get_LeftBorder();
    internal BorderProperties get_TopBorder();
    internal BorderProperties get_Diagonal();
    internal bool get_OmitBorderTop();
    internal void set_OmitBorderTop(bool value);
    internal bool get_OmitBorderBottom();
    internal void set_OmitBorderBottom(bool value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.BorderProperties : object {
    private IColor m_color;
    private ExcelBorderStyle m_style;
    private ExcelBorderPart m_part;
    private double m_width;
    unknown ExcelBorderPart ExcelBorderPart {internal set; }
    internal IColor Color { get; internal set; }
    internal ExcelBorderStyle Style { get; internal set; }
    internal double Width { get; internal set; }
    internal BorderProperties(IColor color, ExcelBorderStyle style, ExcelBorderPart part);
    internal BorderProperties(ExcelBorderPart part);
    internal BorderProperties(BorderProperties borderProps, ExcelBorderPart part);
    internal void set_ExcelBorderPart(ExcelBorderPart value);
    internal void set_Color(IColor value);
    internal IColor get_Color();
    internal void set_Style(ExcelBorderStyle value);
    internal ExcelBorderStyle get_Style();
    internal void set_Width(double value);
    internal double get_Width();
    internal void Render(IStyle style);
    public virtual string ToString();
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.HeaderFooterConstants : object {
    internal static string AMPERSAND;
    internal static string DOUBLE_QUOTE;
    internal static string LINEFEED;
    internal static string BOLD;
    internal static string ITALIC;
    internal static string UNDERLINE;
    internal static string LINETHROUGH;
    internal static string LEFTSECTION;
    internal static string RIGHTSECTION;
    internal static string CENTERSECTION;
    internal static string PAGENUMBER;
    internal static string TOTALPAGES;
    internal static string REPORTNAME;
    internal static string FOOTERDATA;
    internal static string FOOTER_PAGE;
    internal static string SPACE;
    internal static string LINEBREAK;
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.HeaderFooterLayout : ALayout {
    private List`1<ReportItemInfo> m_fullList;
    private int m_centerWidth;
    private int m_rightWidth;
    private List`1<ReportItemInfo> m_leftList;
    private List`1<ReportItemInfo> m_rightList;
    private List`1<ReportItemInfo> m_centerList;
    private float m_height;
    internal float Height { get; }
    internal bool HeaderInBody { get; }
    internal bool FooterInBody { get; }
    internal Nullable`1<bool> SummaryRowAfter { get; internal set; }
    internal Nullable`1<bool> SummaryColumnAfter { get; internal set; }
    internal HeaderFooterLayout(RPLReport report, float aWidth, float aHeight);
    internal float get_Height();
    internal virtual void AddReportItem(object rplSource, int top, int left, int width, int height, int generationIndex, byte state, Dictionary`2<string, ToggleParent> toggleParents);
    internal virtual void AddStructuralItem(int top, int left, int width, int height, bool isToggglable, int generationIndex, RPLTablixMemberCell member, TogglePosition togglePosition);
    internal virtual void AddStructuralItem(int top, int left, int width, int height, int generationIndex, int rowHeaderWidth, int columnHeaderHeight, bool rtl);
    internal virtual bool get_HeaderInBody();
    internal virtual bool get_FooterInBody();
    internal virtual Nullable`1<bool> get_SummaryRowAfter();
    internal virtual void set_SummaryRowAfter(Nullable`1<bool> value);
    internal virtual Nullable`1<bool> get_SummaryColumnAfter();
    internal virtual void set_SummaryColumnAfter(Nullable`1<bool> value);
    internal virtual ALayout GetPageHeaderLayout(float aWidth, float aHeight);
    internal virtual ALayout GetPageFooterLayout(float aWidth, float aHeight);
    internal virtual void Complete();
    internal void RenderStrings(RPLReport report, String& left, String& center, String& right);
    private string RenderString(List`1<ReportItemInfo> list);
    private void BuildString(StringBuilder str, RPLTextBoxProps textBox, String& lastFont, Double& lastFontSize);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.HeaderFooterRichTextFont : object {
    private StringBuilder m_builder;
    private StringBuilder m_styleStringBuilder;
    private bool m_boldSet;
    private bool m_italicSet;
    private bool m_strikethroughSet;
    private bool m_underlineSet;
    private string m_fontName;
    private double m_fontSize;
    unknown int Bold {public set; }
    unknown bool Italic {public set; }
    unknown bool Strikethrough {public set; }
    unknown ScriptStyle ScriptStyle {public set; }
    unknown IColor Color {public set; }
    unknown Underline Underline {public set; }
    unknown string Name {public set; }
    unknown double Size {public set; }
    internal string LastFontName { get; }
    internal double LastFontSize { get; }
    internal StringBuilder StyleString { get; }
    internal HeaderFooterRichTextFont(StringBuilder builder);
    public sealed virtual void set_Bold(int value);
    public sealed virtual void set_Italic(bool value);
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual void set_ScriptStyle(ScriptStyle value);
    public sealed virtual void set_Color(IColor value);
    public sealed virtual void set_Underline(Underline value);
    public sealed virtual void set_Name(string value);
    public sealed virtual void set_Size(double value);
    internal string get_LastFontName();
    internal double get_LastFontSize();
    internal StringBuilder get_StyleString();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.HeaderFooterRichTextInfo : object {
    private HeaderFooterRichTextFont m_font;
    private StringBuilder m_stringBuilder;
    internal string LastFontName { get; }
    internal double LastFontSize { get; }
    internal StringBuilder StyleString { get; }
    unknown bool CheckForRotatedFarEastChars {public set; }
    internal HeaderFooterRichTextInfo(StringBuilder builder);
    internal string get_LastFontName();
    internal double get_LastFontSize();
    internal StringBuilder get_StyleString();
    public sealed virtual IFont AppendTextRun(string value);
    public sealed virtual IFont AppendTextRun(string value, bool replaceInvalidWhiteSpace);
    public sealed virtual void AppendText(string value);
    public sealed virtual void AppendText(string value, bool replaceInvalidWhiteSpace);
    public sealed virtual void AppendText(char value);
    internal void CompleteRun();
    public sealed virtual void set_CheckForRotatedFarEastChars(bool value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.ImageInformation : object {
    internal static string GIFMIMETYPE;
    internal static string JPGMIMETYPE;
    internal static string JPEGMIMETYPE;
    internal static string PNGMIMETYPE;
    internal static string BMPMIMETYPE;
    internal static string XPNGMIMETYPE;
    private Stream m_imageData;
    private Sizings m_imageSizings;
    private ImageFormat m_imageFormat;
    private string m_imageName;
    private int m_width;
    private int m_height;
    private float m_horizontalResolution;
    private float m_verticalResolution;
    private string m_hyperlinkURL;
    private bool m_hyperlinkIsBookmark;
    private PaddingInformation m_paddings;
    internal Stream ImageData { get; internal set; }
    internal string ImageName { get; internal set; }
    internal Sizings ImageSizings { get; internal set; }
    internal ImageFormat ImageFormat { get; internal set; }
    internal int Width { get; internal set; }
    internal int Height { get; internal set; }
    internal float HorizontalResolution { get; internal set; }
    internal float VerticalResolution { get; internal set; }
    internal string HyperlinkURL { get; internal set; }
    internal bool HyperlinkIsBookmark { get; internal set; }
    internal PaddingInformation Paddings { get; internal set; }
    unknown Sizings Sizings {internal set; }
    internal Stream get_ImageData();
    internal void set_ImageData(Stream value);
    internal string get_ImageName();
    internal void set_ImageName(string value);
    internal Sizings get_ImageSizings();
    internal void set_ImageSizings(Sizings value);
    internal ImageFormat get_ImageFormat();
    internal void set_ImageFormat(ImageFormat value);
    internal int get_Width();
    internal void set_Width(int value);
    internal int get_Height();
    internal void set_Height(int value);
    internal float get_HorizontalResolution();
    internal void set_HorizontalResolution(float value);
    internal float get_VerticalResolution();
    internal void set_VerticalResolution(float value);
    internal string get_HyperlinkURL();
    internal void set_HyperlinkURL(string value);
    internal bool get_HyperlinkIsBookmark();
    internal void set_HyperlinkIsBookmark(bool value);
    internal PaddingInformation get_Paddings();
    internal void set_Paddings(PaddingInformation value);
    internal void set_Sizings(Sizings value);
    internal void ReadImage(IExcelGenerator excel, RPLImageData image, string imageName, RPLReport report);
    internal void SetMimeType(string mimeType);
    private void CalculateMetrics();
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.LayoutConvert : object {
    private static double MM_PER_INCH;
    private static int PTS_PER_INCH;
    private static double ROUNDUP_DELTA;
    private static int OnePixelInTwips;
    private static int TwoPixelsInTwips;
    private static int ThreePixelsInTwips;
    internal static double ToMillimeters(string val);
    internal static double ToInches(string val);
    internal static double ToPoints(string val);
    internal static Color ToColor(string val);
    internal static ExcelBorderStyle ToBorderLineStyle(ExcelBorderStyle excelBorderStyle, double borderWidth);
    internal static ExcelBorderStyle ToBorderLineStyle(BorderStyles val);
    internal static int GetBorderWidth(ExcelBorderStyle borderStyle, double borderWidthInPts, bool rightOrBottom);
    internal static int ToFontWeight(FontWeights val);
    internal static HorizontalAlignment ToHorizontalAlignEnum(TextAlignments val);
    internal static HorizontalAlignment RotateVerticalToHorizontalAlign(VerticalAlignment val);
    internal static VerticalAlignment RotateHorizontalToVerticalAlign(HorizontalAlignment val);
    internal static VerticalAlignment ToVerticalAlignEnum(VerticalAlignments val);
    internal static Calendar GetCalendarInstance(Calendars val);
    internal static int ConvertMMTo20thPoints(double aMm);
    internal static double ConvertMMTo20thPointsUnrounded(double aMm);
    internal static double ConvertMMToInches(double aMm);
    internal static double ConvertFloatToDouble(float floatValue);
    internal static double ConvertMMToPoints(double aMm);
    internal static double ConvertPointsToMM(double aPoints);
    internal static bool ParseBool(string boolValue, bool defaultValue);
    internal static double ParseDouble(string doubleValue, double defaultValue);
    internal static double ParseSize(string sizeValue, double defaultValue);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.LayoutEngine : ALayout {
    private static int MAX_ROW_HEIGHT;
    private static string InvalidImage;
    private static double MinimumRowPrecentage;
    private static double MinimumColumnPrecentage;
    private static Char[] BulletChars;
    private static Char[0...,0...] RomanNumerals;
    private string m_reportLanguage;
    private bool m_renderHeaderInBody;
    private HeaderFooterLayout m_headerLayout;
    private HeaderFooterLayout m_footerLayout;
    private int m_headerHeight;
    private HashSet`1<int> m_columnEdges;
    private ColumnInfo[] m_columns;
    private Dictionary`2<int, int> m_columnEdgesMap;
    private ScalableDictionary`2<int, RowInfo> m_rows;
    private ScalableList`1<RowInfo> m_rowInfo;
    private Dictionary`2<int, int> m_rowEdgesMap;
    private Nullable`1<bool> m_summaryRowAfter;
    private Nullable`1<bool> m_summaryColumnAfter;
    private Stack`1<IBlockerInfo> m_rowBlockers;
    private IScalabilityCache m_scalabilityCache;
    internal bool HeaderInBody { get; }
    internal bool FooterInBody { get; }
    internal Nullable`1<bool> SummaryRowAfter { get; internal set; }
    internal Nullable`1<bool> SummaryColumnAfter { get; internal set; }
    internal IScalabilityCache ScalabilityCache { get; }
    internal LayoutEngine(RPLReport report, bool headerInBody, CreateAndRegisterStream streamDelegate);
    private static LayoutEngine();
    private void AddColumnEdge(int edge);
    private void AddRowEdge(int edge);
    private RowInfo AddRowEdge(int edge, bool returnRowInfo, IDisposable& rowRef);
    private void AddRowItemStruct(int top, IRowItemStruct rowItem);
    internal virtual void AddReportItem(object rplSource, int top, int left, int width, int height, int generationIndex, byte state, Dictionary`2<string, ToggleParent> toggleParents);
    internal virtual void AddStructuralItem(int top, int left, int width, int height, bool isToggglable, int generationIndex, RPLTablixMemberCell member, TogglePosition togglePosition);
    internal virtual void AddStructuralItem(int top, int left, int width, int height, int generationIndex, int rowHeaderWidth, int columnHeaderHeight, bool rtl);
    internal virtual bool get_HeaderInBody();
    internal virtual bool get_FooterInBody();
    internal virtual Nullable`1<bool> get_SummaryRowAfter();
    internal virtual void set_SummaryRowAfter(Nullable`1<bool> value);
    internal virtual Nullable`1<bool> get_SummaryColumnAfter();
    internal virtual void set_SummaryColumnAfter(Nullable`1<bool> value);
    internal virtual ALayout GetPageHeaderLayout(float width, float height);
    internal virtual ALayout GetPageFooterLayout(float width, float height);
    internal virtual void Complete();
    internal void RenderPageToExcel(IExcelGenerator excel, Dictionary`2<string, BorderInfo> sharedBorderCache, Dictionary`2<string, ImageInformation> sharedImageCache);
    internal void RenderEmptyPageToExcel(IExcelGenerator excel, RPLPage page, Dictionary`2<string, BorderInfo> sharedBorderCache);
    private void RenderNewItem(IRowItemStruct item, int top, int topRow, IExcelGenerator excel, Dictionary`2<string, BorderInfo> sharedBorderCache, Dictionary`2<string, ImageInformation> sharedImageCache, Boolean& autosizableGrow, Boolean& autosizableShrink);
    private void RenderItem(IExcelGenerator excel, Dictionary`2<string, ImageInformation> sharedImageCache, RPLElementProps props, byte type, int topRow, int bottomRow, int leftColumn, int rightColumn, bool merged, Boolean& autosizableGrow, Boolean& autosizableShrink, BorderInfo borderDef, IRowItemStruct item);
    private void RenderChartOrGauge(IExcelGenerator excel, Dictionary`2<string, ImageInformation> sharedImageCache, RPLElementProps itemProps, int topRow, int bottomRow, int leftColumn, int rightColumn, IRowItemStruct item);
    private void RenderImage(IExcelGenerator excel, Dictionary`2<string, ImageInformation> sharedImageCache, RPLElementProps itemProps, int topRow, int bottomRow, int leftColumn, int rightColumn, IRowItemStruct item);
    private void RenderSimpleTextBox(IExcelGenerator excel, RPLTextBoxProps textBox, RPLTextBoxPropsDef textBoxDef, RPLStyleProps defStyle, BorderInfo borderDef, IRowItemStruct item);
    private void FixupAlignments(IExcelGenerator excel, bool isNumberType, bool isVertical, HorizontalAlignment horizontalAlign, VerticalAlignment verticalAlign, TextDirection textDirection);
    private HorizontalAlignment ResolveGeneralAlignment(TextDirection textDirection, bool isNumberType);
    private void RenderRichTextBox(IExcelGenerator excel, RPLTextBoxProps textBox, RPLTextBoxPropsDef textBoxDef, RPLStyleProps defStyle, BorderInfo borderDef, IRowItemStruct item, IRichTextInfo richTextInfo);
    internal static RPLActionInfo RenderRichText(IExcelGenerator excel, RPLTextBox rplTextbox, IRichTextInfo richTextInfo, bool inHeaderAndFooter, RPLActionInfo actions, bool renderListPrefixes, HorizontalAlignment& horizontalAlign);
    private void CalculateRowFlagsFromTextBoxes(ItemInfo itemInfo, int row, Boolean& rowCanGrow, Boolean& rowCanShrink, Boolean& autoSize);
    private void CalculateAutoSizeFlag(bool rowCanGrow, bool rowCanShrink, int rowHeightIn20thPoints, Boolean& autoSize);
    private static string GetAsDecimalString(int value);
    private static string GetAsLatinAlphaString(int value);
    private static string GetAsRomanNumeralString(int value);
    private void RenderTextBoxValue(IExcelGenerator excel, string value, object originalValue, TypeCode type);
    private void RenderActions(IExcelGenerator excel, RPLActionInfo actions);
    private static void RenderTextBoxStyle(IExcelGenerator excel, RPLStyleProps style, Boolean& isVertical, HorizontalAlignment& horizontalAlign, VerticalAlignment& verticalAlign, TextDirection& textDirection);
    private static void RenderTextBoxStyle(IExcelGenerator excel, RPLStyleProps style, IFont font, bool fontOnly);
    private static void RenderTextBoxStyle(IExcelGenerator excel, RPLStyleProps style, IFont font, bool fontOnly, Boolean& isVertical, HorizontalAlignment& horizontalAlign, VerticalAlignment& verticalAlign, TextDirection& textDirection);
    private static bool UpdateHorizontalAlign(IExcelGenerator excel, RPLStyleProps style, HorizontalAlignment& horizontalAlign);
    private static bool UpdateHorizontalAlign(IExcelGenerator excel, object value, HorizontalAlignment& horizontalAlign);
    private static bool UpdateVerticalAlign(RPLStyleProps style, VerticalAlignment& verticalAlign);
    private static bool UpdateDirection(RPLStyleProps style, TextDirection& textDirection);
    private bool IsWritingModeVertical(RPLStyleProps style);
    private void RenderFormat(IExcelGenerator excel, string format, object originalValue, object value, TypeCode typeCode, string language, string numeralLanguage, object rplCalendar, object numeralVariant, HorizontalAlignment& textAlign);
    private void RenderImage(ImageInformation imageInfo, IRowItemStruct item, IExcelGenerator excel, Dictionary`2<string, ImageInformation> sharedImageCache, bool invalidImage, int rowTop, int columnLeft, int rowBottom, int columnRight);
    private int GetBorderWidth(RPLElementStyle style, byte borderStyleItem, byte boderWidthItem, BorderStyles defaultBorderStyle, double defaultBorderWidthInPts, bool rightOrBottom);
    private bool HandleBlocking(IBlockerInfo item, TogglePosition togglePosition, Boolean& isColumnBlocker);
    private TablixMemberInfo FindVerticalParentTablixMember(TablixMemberInfo member, int currentColumn);
    private TablixMemberInfo FindHorizontalParentTablixMember(TablixMemberInfo member, int currentColumn);
    private void HandleTablixOutline(TablixMemberInfo member, int currentRow, int currentColumn, Byte& rowOutlineLevel, Boolean& rowCollapsed);
    private void BumpRowOutlineLevel(TablixMemberInfo member, Byte& rowOutlineLevel, Boolean& rowCollapsed);
    private void BumpColOutlineLevel(TablixMemberInfo member, int currentColumn);
    private byte GetOutlineLevelIncrementValue(TablixMemberInfo member, Boolean& isCollapsed);
    private TogglePosition GetTogglePosition(RowItemStruct rowItem, string toggleParentName, int top);
    private ImageInformation GetInvalidImage(IExcelGenerator excel, Dictionary`2<string, ImageInformation> sharedImageCache, Boolean& isShared);
    private PaddingInformation GetImagePaddings(RPLElementStyle style);
    private BorderInfo GetBorderDefinitionFromCache(string key, Dictionary`2<string, BorderInfo> sharedBorderCache, RPLStyleProps styleProps, bool omitBorderTop, bool omitBorderBottom, IExcelGenerator excel);
    private bool ProcessVerticalPaddings(Int32& rowStart, int rowEnd, Int32& padding, bool topToBottom, Int32& rowHeight);
    private bool ProcessHorizontalPaddings(Int32& columnStart, int columnEnd, Int32& padding, bool leftToRight, Int32& columnWidth);
    private static int CompareGenerationIndex(IRowItemStruct left, IRowItemStruct right);
    internal IScalabilityCache get_ScalabilityCache();
    internal void InitCache(CreateAndRegisterStream streamDelegate);
    internal void Dispose();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.PaddingInformation : object {
    private int m_paddingLeft;
    private int m_paddingRight;
    private int m_paddingTop;
    private int m_paddingBottom;
    internal int PaddingLeft { get; }
    internal int PaddingRight { get; }
    internal int PaddingTop { get; }
    internal int PaddingBottom { get; }
    internal PaddingInformation(int paddingLeft, int paddingRight, int paddingTop, int paddingBottom);
    internal int get_PaddingLeft();
    internal int get_PaddingRight();
    internal int get_PaddingTop();
    internal int get_PaddingBottom();
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.PageSizeIndex : object {
    private static Int32[] m_mmSizeIndex;
    private static Int32[] m_mmWidth;
    private static Int32[] m_mmHeight;
    private static Int32[] m_inchSizeIndex;
    private static Single[] m_inchWidth;
    private static Single[] m_inchHeight;
    private static PageSizeIndex();
    internal static int GetPageSizeIndex(float pageWidth, float pageHeight, Boolean& isPortrait);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.ReportItemInfo : object {
    private object m_rplSource;
    private int m_top;
    private int m_left;
    private int m_right;
    private int m_alignmentPoint;
    private RPLTextBoxProps m_textBox;
    private Dictionary`2<string, ToggleParent> m_toggleParents;
    private bool m_isHidden;
    internal object RPLSource { get; }
    internal int Top { get; }
    internal int Left { get; }
    internal int Right { get; }
    internal RPLTextBoxProps Values { get; internal set; }
    internal int AlignmentPoint { get; internal set; }
    internal bool IsHidden { get; }
    internal Dictionary`2<string, ToggleParent> ToggleParents { get; }
    internal ReportItemInfo(object aRplSource, int aTop, int aLeft, int aRight, bool aIsHidden, Dictionary`2<string, ToggleParent> aToggleParents);
    internal object get_RPLSource();
    internal int get_Top();
    internal int get_Left();
    internal int get_Right();
    internal RPLTextBoxProps get_Values();
    internal void set_Values(RPLTextBoxProps value);
    internal int get_AlignmentPoint();
    internal void set_AlignmentPoint(int value);
    internal bool get_IsHidden();
    internal Dictionary`2<string, ToggleParent> get_ToggleParents();
    internal static int CompareTopsThenLefts(ReportItemInfo aLeft, ReportItemInfo aRight);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.Layout.RPLHeaderFooterConstants : object {
    internal static string AMPERSAND;
    internal static string DOUBLE_QUOTE;
    internal static string LINEFEED;
    internal static string BOLD;
    internal static string ITALIC;
    internal static string UNDERLINE;
    internal static string LINETHROUGH;
    internal static string LEFTSECTION;
    internal static string RIGHTSECTION;
    internal static string CENTERSECTION;
    internal static string PAGENUMBER;
    internal static string TOTALPAGES;
    internal static string REPORTNAME;
    internal static string FOOTERDATA;
    internal static string FOOTER_PAGE;
    internal static string SPACE;
    internal static string LINEBREAK;
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.MainEngine : object {
    private IExcelGenerator m_excel;
    private CreateAndRegisterStream m_streamDelegate;
    private long m_totalScaleTimeMs;
    private long m_peakMemoryUsageKB;
    private Dictionary`2<string, BorderInfo> m_sharedBorderCache;
    private Dictionary`2<string, ImageInformation> m_sharedImageCache;
    private Stream m_backgroundImage;
    private ushort m_backgroundImageWidth;
    private ushort m_backgroundImageHeight;
    internal long TotalScaleTimeMs { get; }
    internal long PeakMemoryUsageKB { get; }
    internal MainEngine(CreateAndRegisterStream createStream);
    public sealed virtual void Dispose();
    internal long get_TotalScaleTimeMs();
    internal long get_PeakMemoryUsageKB();
    private Stream CreateTempStream(string name);
    internal void AddBackgroundImage(RPLReport report);
    internal bool AddDocumentMap(DocumentMap docMap);
    internal void AdjustFirstWorksheetName(string reportName, bool addedDocMap);
    internal void NextPage();
    internal void RenderRPLPage(RPLReport report, bool headerInBody, bool suppressOutlines);
    internal void Save(Stream output);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.ArgCount : object {
    private short m_count;
    internal short Count { get; internal set; }
    internal short get_Count();
    internal void set_Count(short value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.Conditional : Operator {
    private string m_gotoLabel;
    private string m_label;
    internal string Label { get; internal set; }
    internal string GotoLabel { get; internal set; }
    internal Conditional(string op, int precedence, OperatorType ot, ushort biffCode);
    internal Conditional(string op, int precedence, OperatorType ot, ushort biffCode, UInt32 functionCode, short numOfArgs);
    internal Conditional(Conditional conditionalOp);
    internal string get_Label();
    internal void set_Label(string value);
    internal string get_GotoLabel();
    internal void set_GotoLabel(string value);
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.ExcelDataType : Enum {
    public int value__;
    public static ExcelDataType Boolean;
    public static ExcelDataType Number;
    public static ExcelDataType String;
    public static ExcelDataType Blank;
    public static ExcelDataType Formula;
    public static ExcelDataType RichString;
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.ExcelFormulaHandler : object {
    private static Regex m_regPatternExp;
    private static Regex m_ushortPatternExp;
    private static Hashtable m_htOperators;
    private static ExcelFormulaHandler();
    internal static void ProcessFormula(string formula, ArrayList& postFixList, Hashtable& literals);
    private static Hashtable ParseStringLiterals(String& formula, Boolean& validLiterals);
    private static bool GetPostFixNotation(String[] tokens, ArrayList finalExpr);
    private static void CheckNegativeUnary(String& szOp, String[] tokens, int currentIndex);
    private static bool HasVariableArguments(string op);
    private static bool IsLowerPrecOperator(string oper1, string oper2);
    private static bool IsEqualPrecOperator(string oper1, string oper2);
    private static bool IsHigherPrecOperator(string oper1, string oper2);
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.FormatHandler : object {
    internal static string DEFAULTFORMATFORDATETIME;
    internal static string DEFAULTFORMATFORNUMBER;
    private static string GetShortNumberFormat(char type);
    private static string GetLongNumberFormat(char type, int precision);
    private static string GetExcelPictureNumberFormat(string format);
    private static bool NeedNumberEscape(char c);
    private static string GetNumberFormat(NumberFormatInfo numberFormatInfo, int precision);
    private static string GetNegativePattern(int negativePattern);
    private static string GetCurrencyFormat(NumberFormatInfo numberFormatInfo, int precision);
    private static string GetPositiveCurrencyPattern(int currencyPositivePattern);
    private static string GetNegativeCurrencyPattern(int currencyNegativePattern);
    private static string GetNumberFormat(string format, string language, Boolean& isHex, TypeCode typeCode, object originalValue, Boolean& isGeneral);
    private static char GetGeneralFormat(TypeCode typeCode, object originalValue, int precision, CultureInfo cultureInfo);
    private static string GetDateTimePattern(char patternCharacter, DateTimeFormatInfo currInfo);
    private static string GetExcelPictureDateTimeFormat(string format, string timeSeparator, string dateSeparator);
    private static string GetDateTimeFormat(string format, string language, object rplCalendar);
    private static int GetLanguageLCID(string language);
    private static string GetFormatStringPrefix(Nullable`1<Calendars> calendar, int numeralVariant, string language, string numeralLanguage);
    private static string GetExcelNumeralVariant(string numeralLanguagePrefix);
    private static string GetExcelCalendarDigits(Calendars calendar);
    internal static ExcelDataType GetDataType(TypeCode type);
    internal static bool IsExcelNumberDataType(TypeCode type);
    internal static string GetExcelNumberFormat(string rsNumberFormat, string language, Calendars rplCalendar, string numeralLanguage, int numeralVariant, TypeCode type, object originalValue, String& hexFormula, Boolean& invalidFormatCode);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.FormulaHandler : object {
    private int m_reportItemCount;
    private ArrayList m_reportItemsNames;
    private static Hashtable m_FormulaMapping;
    private static Regex m_RegexGlobalOnly;
    private static Regex m_RegexReportItemNameFormat;
    private static Regex m_RegexFunctionName;
    private static Regex m_RegexIdentifier;
    private static Regex m_RegexNonConstant;
    private static Regex m_RegexFieldDetection;
    private static Regex m_RegexReportItemsDetection;
    private static Regex m_RegexGlobalsDetection;
    private static Regex m_RegexAmpDetection;
    private static Regex m_RegexParametersDetection;
    private static Regex m_RegexUserDetection;
    private static Regex m_RegexAggregatesDetection;
    private static Regex m_RegexStringLiteralOnly;
    private static Regex m_RegexNothingOnly;
    private static Regex m_RegexReportItemName;
    private static Regex m_RegexSpecialFunction;
    private static RegexOptions m_regexOptions;
    private static ArrayList m_VBModulePropertiesSupported;
    private static ArrayList m_VBModulePropertiesUnSupported;
    private static FormulaHandler();
    private static void InitRegularExpressions();
    private static void InitFormulaMapping();
    internal ArrayList ProcessFormula(string formulaExpression, String& excelFormula);
    internal static string ProcessHeaderFooterFormula(string formulaExpression);
    internal static void EncodeHeaderFooterString(StringBuilder output, string input);
    internal static string ExcelHeaderFooterFormula(string formulaExpression);
    private string CheckValidityforConversion(string formulaExpression);
    private bool ValidateFunctionNames(String& transformedExpression);
    private string MapVbModuleProperty(Match match);
    private string MapFunction(Match match);
    private string FormatReportItemReference(string formulaExpression);
    private string MapReportItemName(Match match);
    private string MapToExcel(Match match);
    private bool Detected(Regex detectionRegex, string formulaExpression);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.LabelPosition : object {
    private string m_label;
    private long m_position;
    private long m_startPosition;
    internal string Label { get; }
    internal long Position { get; }
    internal long StartPosition { get; }
    internal LabelPosition(string label, long position);
    internal LabelPosition(string label, long position, long startPosition);
    internal string get_Label();
    internal long get_Position();
    internal long get_StartPosition();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.Operand : object {
    private object m_operandValue;
    private OperandType m_type;
    internal object OperandValue { get; }
    internal OperandType Type { get; }
    internal Operand(object operandValue, OperandType type);
    internal object get_OperandValue();
    internal OperandType get_Type();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.Operator : object {
    private string m_operator;
    private int m_precedence;
    private OperatorType m_type;
    private ushort m_biffCode;
    private UInt32 m_functionCode;
    private short m_numOfArgs;
    private bool m_variableArgs;
    internal string Name { get; }
    internal int Precedence { get; }
    internal OperatorType Type { get; }
    internal ushort BCode { get; }
    internal UInt32 FCode { get; }
    internal short ArgumentCount { get; internal set; }
    internal Byte[] BiffOperator { get; }
    internal Byte[] FunctionCode { get; }
    internal Byte[] NumberOfArguments { get; }
    internal Operator(string op, int precedence, OperatorType ot, ushort biffCode);
    internal Operator(string op, int precedence, OperatorType ot, ushort biffCode, UInt32 functionCode);
    internal Operator(string op, int precedence, OperatorType ot, ushort biffCode, UInt32 functionCode, short numOfArgs);
    internal Operator(Operator op);
    internal string get_Name();
    internal int get_Precedence();
    internal OperatorType get_Type();
    internal ushort get_BCode();
    internal UInt32 get_FCode();
    internal short get_ArgumentCount();
    internal void set_ArgumentCount(short value);
    internal bool HasVariableArguments();
    internal Byte[] get_BiffOperator();
    internal Byte[] get_FunctionCode();
    internal Byte[] get_NumberOfArguments();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.ExcelCallbacks.Convert.OptimizedChoose : Operator {
    private ArrayList m_gotoLabels;
    internal ArrayList GotoLabelList { get; internal set; }
    internal OptimizedChoose(string op, int precedence, OperatorType ot, ushort biffCode);
    internal OptimizedChoose(OptimizedChoose oc);
    internal ArrayList get_GotoLabelList();
    internal void set_GotoLabelList(ArrayList value);
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIF.Reader : object {
    internal static void ReadReportMeasurements(RPLReport report, ALayout layout, bool suppressOutlines);
    private static void ReadMeasurement(RPLElement element, ALayout layout, int top, int left, int generationIndex, BlockOutlines blockOutlines, Dictionary`2<string, ToggleParent> toggleParents, bool suppressOutlines);
    private static void ReadTablixStructure(RPLTablix tablix, ALayout layout, int top, int left, int generationIndex, BlockOutlines blockOutlines, Dictionary`2<string, ToggleParent> toggleParents, bool suppressOutlines);
    private static void ReadTablixCellProperties(RPLTablixCell cell, ALayout layout, Int32[] rowTops, Int32[] columnLefts, int generationIndex, bool isRTL, BlockOutlines blockOutlines, Dictionary`2<string, ToggleParent> toggleParents, bool suppressOutlines);
    private static bool SetRelativeStaticLocation(RPLTablixMemberCell member, ALayout layout, RelativeStaticLocation staticLocation, List`1<RelativeStaticLocation> rowHeaderStaticLocations, Boolean& isColumn);
}
internal abstract class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIFReader.Callbacks.ALayout : object {
    internal static int TablixStructGenerationOffset;
    internal static int TablixStructStart;
    protected RPLReport m_report;
    internal bool HeaderInBody { get; }
    internal bool FooterInBody { get; }
    internal Nullable`1<bool> SummaryRowAfter { get; internal set; }
    internal Nullable`1<bool> SummaryColumnAfter { get; internal set; }
    internal RPLReport RPLReport { get; }
    internal ALayout(RPLReport report);
    private static ALayout();
    internal abstract virtual void AddReportItem(object rplSource, int top, int left, int width, int height, int generationIndex, byte state, Dictionary`2<string, ToggleParent> toggleParents);
    internal abstract virtual void AddStructuralItem(int top, int left, int width, int height, bool isToggglable, int generationIndex, RPLTablixMemberCell member, TogglePosition togglePosition);
    internal abstract virtual void AddStructuralItem(int top, int left, int width, int height, int generationIndex, int rowHeaderWidth, int columnHeaderHeight, bool rtl);
    internal abstract virtual bool get_HeaderInBody();
    internal abstract virtual bool get_FooterInBody();
    internal abstract virtual Nullable`1<bool> get_SummaryRowAfter();
    internal abstract virtual void set_SummaryRowAfter(Nullable`1<bool> value);
    internal abstract virtual Nullable`1<bool> get_SummaryColumnAfter();
    internal abstract virtual void set_SummaryColumnAfter(Nullable`1<bool> value);
    internal abstract virtual ALayout GetPageHeaderLayout(float width, float height);
    internal abstract virtual ALayout GetPageFooterLayout(float width, float height);
    internal abstract virtual void Complete();
    internal RPLReport get_RPLReport();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIFReader.Callbacks.ToggleParent : object {
    internal int m_top;
    internal int m_left;
    internal int m_width;
    internal int m_height;
    private static Declaration m_declaration;
    internal int Top { get; }
    internal int Left { get; }
    internal int Width { get; }
    internal int Height { get; }
    public int Size { get; }
    internal ToggleParent(int top, int left, int width, int height);
    private static ToggleParent();
    internal int get_Top();
    internal int get_Left();
    internal int get_Width();
    internal int get_Height();
    public sealed virtual int get_Size();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal enum Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIFReader.Callbacks.TogglePosition : Enum {
    public byte value__;
    public static TogglePosition None;
    public static TogglePosition Left;
    public static TogglePosition Right;
    public static TogglePosition Above;
    public static TogglePosition Below;
}
internal static class Microsoft.ReportingServices.Rendering.ExcelRenderer.SPBIFReader.RDLConstants : object {
    internal static string DOCUMENTMAP_STYLE_NAME;
    internal static string FONTWEIGHT_THIN;
    internal static string FONTWEIGHT_EXTRALIGHT;
    internal static string FONTWEIGHT_LIGHTER;
    internal static string FONTWEIGHT_LIGHT;
    internal static string FONTWEIGHT_NORMAL;
    internal static string FONTWEIGHT_MEDIUM;
    internal static string FONTWEIGHT_SEMIBOLD;
    internal static string FONTWEIGHT_BOLD;
    internal static string FONTWEIGHT_EXTRABOLD;
    internal static string FONTWEIGHT_HEAVY;
    internal static string FONTWEIGHT_BOLDER;
    internal static string FONTWEIGHT_700;
    internal static string FONTWEIGHT_800;
    internal static string FONTWEIGHT_900;
    internal static string FONTSTYLE_ITALIC;
    internal static string TEXTDECORATION;
    internal static string TEXTDECORATION_UNDERLINE;
    internal static string TEXTDECORATION_LINETHROUGH;
    internal static string DIRECTION_LTR;
    internal static string DIRECTION_RTL;
    internal static string WRITINGMODE_HORIZ;
    internal static string WRITINGMODE_VERT;
    internal static string REPEAT;
    internal static string TRANSPARENT;
    internal static string TEXTALIGN_LEFT;
    internal static string TEXTALIGN_RIGHT;
    internal static string TEXTALIGN_GENERAL;
    internal static string TEXTALIGN_CENTER;
    internal static string VERTALIGN_TOP;
    internal static string VERTALIGN_MIDDLE;
    internal static string VERTALIGN_BOTTOM;
    internal static string BORDERSTYLE_NONE;
    internal static string BORDERSTYLE_DOTTED;
    internal static string BORDERSTYLE_DASHED;
    internal static string BORDERSTYLE_SOLID;
    internal static string BORDERSTYLE_DOUBLE;
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.StorageObjectCreator : object {
    private static StorageObjectCreator m_instance;
    private static List`1<Declaration> m_declarations;
    internal static StorageObjectCreator Instance { get; }
    private static StorageObjectCreator();
    public sealed virtual bool TryCreateObject(ObjectType objectType, IPersistable& persistObj);
    public sealed virtual List`1<Declaration> GetDeclarations();
    internal static StorageObjectCreator get_Instance();
    private static List`1<Declaration> BuildDeclarations();
}
internal class Microsoft.ReportingServices.Rendering.ExcelRenderer.Util.HashSet`1 : object {
    private Dictionary`2<T, T> mHashTable;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.AddTextBoxDelegate : MulticastDelegate {
    public AddTextBoxDelegate(object object, IntPtr method);
    public virtual void Invoke(string aTextboxDefinitionName, object aTextboxOriginalValue);
    public virtual IAsyncResult BeginInvoke(string aTextboxDefinitionName, object aTextboxOriginalValue, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.CachedSharedImageInfo : object {
    private string m_streamName;
    private ItemBoundaries m_itemBoundaries;
    internal string StreamName { get; }
    internal ItemBoundaries ImageBounderies { get; }
    internal CachedSharedImageInfo(string streamName, ItemBoundaries itemBoundaries);
    internal string get_StreamName();
    internal ItemBoundaries get_ImageBounderies();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Chart : DynamicImage {
    private static Declaration m_declaration;
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal Chart(Chart source);
    private static Chart();
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteBorderProps(BinaryWriter spbifWriter, Style style);
    internal virtual void WriteBorderProps(RPLStyleProps rplStyleProps, Style style);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
}
internal abstract class Microsoft.ReportingServices.Rendering.HPBProcessing.DynamicImage : PageItem {
    protected static int DEFAULT_RESOLUTION_X;
    protected static int MIN_RESOLUTION_X;
    protected static int DEFAULT_RESOLUTION_Y;
    protected static int MIN_RESOLUTION_Y;
    private static Declaration m_declaration;
    internal DynamicImage(ReportItem source);
    private static DynamicImage();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    private Stream LoadDynamicImage(ActionInfoWithDynamicImageMapCollection& actionImageMaps, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps styleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps styleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.FixedItemSizes : ItemSizes {
    unknown double Left {internal set; }
    unknown double Top {internal set; }
    unknown double Width {internal set; }
    unknown double Height {internal set; }
    internal FixedItemSizes(double width, double height);
    internal virtual void set_Left(double value);
    internal virtual void set_Top(double value);
    internal virtual void set_Width(double value);
    internal virtual void set_Height(double value);
    internal virtual void AdjustHeightTo(double amount);
    internal virtual void AdjustWidthTo(double amount);
    internal virtual void MoveVertical(double delta);
    internal virtual void MoveHorizontal(double delta);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.GaugePanel : DynamicImage {
    private static Declaration m_declaration;
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal GaugePanel(GaugePanel source);
    private static GaugePanel();
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
}
internal static class Microsoft.ReportingServices.Rendering.HPBProcessing.HeaderFooterEval : object {
    internal static void CollectTextBoxes(ReportItem reportItem, PageContext pageContext, bool useForPageHFEval, Dictionary`2<string, List`1<object>> textBoxes);
    private static void CollectTextBoxes(ReportItemCollection collection, PageContext pageContext, bool useForPageHFEval, Dictionary`2<string, List`1<object>> textBoxes);
    private static void CollectTextBoxes(Tablix tablix, PageContext pageContext, bool useForPageHFEval, Dictionary`2<string, List`1<object>> textBoxes);
    private static bool ShouldBeCollected(ReportItem reportItem);
    private static bool ShouldBeCollected(Tablix tablix);
    private static bool ShouldBeCollected(TablixMember tablixMember, Boolean& useForPageHFEval);
    private static int CollectTablixMembersContents(Tablix tablix, TablixMember memberParent, int rowMemberIndexCell, TablixState state, bool noRows, PageContext context, bool useForPageHFEval, Dictionary`2<string, List`1<object>> textBoxes);
    private static void CollectTablixCornerContents(TablixCorner corner, PageContext context, bool useForPageHFEval, Dictionary`2<string, List`1<object>> textBoxes);
    private static void CollectDetailCellContents(Tablix tablix, int colMemberIndexCell, int rowMemberIndexCell, PageContext context, bool useForPageHFEval, Dictionary`2<string, List`1<object>> textBoxes);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.HiddenPageItem : PageItem {
    private Dictionary`2<string, List`1<object>> m_textBoxValues;
    private static Declaration m_declaration;
    internal bool ContentOnPage { get; }
    internal double OriginalLeft { get; }
    internal double OriginalWidth { get; }
    public int Size { get; }
    internal HiddenPageItem(double top, double left);
    internal HiddenPageItem(ReportItem source, PageContext pageContext, bool checkHiddenState);
    private static HiddenPageItem();
    internal void AddToCollection(HiddenPageItem hiddenItem);
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    internal virtual void RegisterTextBoxes(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual bool get_ContentOnPage();
    internal virtual double get_OriginalLeft();
    internal virtual double get_OriginalWidth();
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.HPBProcessing : object {
    protected static ResourceManager HPBResManager;
    private PageContext m_pageContext;
    private PaginationSettings m_paginationSettings;
    private List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> m_paragraphsItemizedData;
    private int m_startPage;
    private int m_endPage;
    private int m_currentPage;
    private int m_totalPages;
    private bool m_createStream;
    private CreateAndRegisterStream m_createAndRegisterStream;
    private Report m_report;
    private static Version m_rplVersion;
    internal static ResourceManager HPBResourceManager { get; }
    public PaginationSettings PaginationSettings { get; }
    internal FontCache SharedFontCache { get; }
    internal List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> ParagraphsItemizedData { get; }
    private static HPBProcessing();
    public HPBProcessing(Report report, CreateAndRegisterStream createAndRegisterStream, Hashtable& renderProperties);
    public HPBProcessing(Report report, NameValueCollection deviceInfo, CreateAndRegisterStream createAndRegisterStream, Hashtable& renderProperties);
    public HPBProcessing(Report report, PaginationSettings pagination, CreateAndRegisterStream createAndRegisterStream, Hashtable& renderProperties);
    private void Init(Report report, PaginationSettings pagination, CreateAndRegisterStream createAndRegisterStream, Hashtable& renderProperties);
    internal static ResourceManager get_HPBResourceManager();
    public sealed virtual void Dispose();
    private bool NextPage();
    private void CreateCacheStream();
    public void SetContext();
    public void SetContext(int startPage, int endPage);
    public void SetContext(int startPage, int endPage, bool createStream);
    public Stream GetNextPage();
    public Stream GetNextPage(RPLReport& rplReport);
    private void WriteVersionStamp(BinaryWriter spbifWriter);
    public PaginationSettings get_PaginationSettings();
    internal FontCache get_SharedFontCache();
    internal List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> get_ParagraphsItemizedData();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.HPBReferenceCreator : object {
    private static HPBReferenceCreator m_instance;
    internal static HPBReferenceCreator Instance { get; }
    private static HPBReferenceCreator();
    internal static HPBReferenceCreator get_Instance();
    public sealed virtual bool TryCreateReference(IStorable refTarget, BaseReference& reference);
    public sealed virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& reference);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.HPBRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string RenderSubreportError { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_RenderSubreportError();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Image : PageItem {
    private bool m_invalidImage;
    [StaticReferenceAttribute]
private GDIImageProps m_imageProps;
    private string m_streamName;
    private double m_padHorizontal;
    private double m_padVertical;
    private static Declaration m_declaration;
    public int Size { get; }
    internal Image(Image source);
    private static Image();
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    private void DetermineSize(PageContext pageContext);
    internal virtual void CacheNonSharedProperties(PageContext pageContext);
    private void CheckAutoSize(ImageInstance imageInstance, PageContext pageContext);
    private bool AutoSizeImage(PageContext pageContext, ImageInstance imageInstance, Image& gdiImage);
    private void GetPaddings(PageContext pageContext);
    private void ResizeImage(PageContext pageContext, int width, int height);
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.ItemBoundaries : object {
    private long m_startOffset;
    private long m_endOffset;
    internal long StartOffset { get; }
    internal long EndOffset { get; }
    internal ItemBoundaries(long start, long end);
    internal long get_StartOffset();
    internal long get_EndOffset();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.ItemSizes : object {
    private double m_deltaX;
    private double m_deltaY;
    protected double m_left;
    protected double m_top;
    protected double m_width;
    protected double m_height;
    private static Declaration m_declaration;
    internal double DeltaX { get; internal set; }
    internal double DeltaY { get; internal set; }
    internal double Left { get; internal set; }
    internal double Top { get; internal set; }
    internal double Bottom { get; }
    internal double Right { get; }
    internal double Width { get; internal set; }
    internal double Height { get; internal set; }
    public int Size { get; }
    internal ItemSizes(ReportItem reportItem);
    internal ItemSizes(double left, double top, double width, double height);
    private static ItemSizes();
    internal double get_DeltaX();
    internal void set_DeltaX(double value);
    internal double get_DeltaY();
    internal void set_DeltaY(double value);
    internal virtual double get_Left();
    internal virtual void set_Left(double value);
    internal virtual double get_Top();
    internal virtual void set_Top(double value);
    internal double get_Bottom();
    internal double get_Right();
    internal virtual double get_Width();
    internal virtual void set_Width(double value);
    internal virtual double get_Height();
    internal virtual void set_Height(double value);
    public sealed virtual int get_Size();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    internal virtual void AdjustHeightTo(double amount);
    internal virtual void AdjustWidthTo(double amount);
    internal virtual void MoveVertical(double delta);
    internal virtual void MoveHorizontal(double delta);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Line : PageItem {
    private static Declaration m_declaration;
    internal Line(Line source);
    private static Line();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.NoRowsItem : PageItem {
    private static Declaration m_declaration;
    internal bool ContentOnPage { get; }
    internal NoRowsItem(ReportItem source);
    private static NoRowsItem();
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual bool get_ContentOnPage();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.PaddingsStyle : object {
    private double m_padHorizontal;
    private double m_padVertical;
    private double m_padTop;
    private PaddingState m_state;
    internal double PadHorizontal { get; internal set; }
    internal double PadVertical { get; internal set; }
    internal PaddingState State { get; internal set; }
    private static ReportSize GetStyleValue(StyleAttributeNames styleName, ReportItem source);
    private static ReportSize GetStyleValue(StyleAttributeNames styleName, Boolean& shared, ReportItem source);
    internal static void CreatePaddingsStyle(PageContext pageContext, ReportItem source, Double& padVertical, Double& padHorizontal, Double& padTop);
    internal void GetPaddingValues(ReportItem source, Double& padVertical, Double& padHorizontal, Double& padTop);
    internal double get_PadHorizontal();
    internal void set_PadHorizontal(double value);
    internal double get_PadVertical();
    internal void set_PadVertical(double value);
    internal PaddingState get_State();
    internal void set_State(PaddingState value);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.PageContext : object {
    internal static double RoundDelta;
    internal static string InvalidImage;
    private bool m_ignorePageBreak;
    private bool m_fullOnPage;
    private bool m_cacheNonSharedProps;
    private bool m_resetHorizontal;
    private PageContextCommon m_common;
    private List`1<TextRunItemizedData> m_paragraphItemizedData;
    internal bool ConsumeWhitespace { get; }
    internal IScalabilityCache ScalabilityCache { get; }
    internal long TotalScaleTimeMs { get; }
    internal long PeakMemoryUsageKB { get; }
    internal bool UseGenericDefault { get; }
    internal double ColumnHeight { get; }
    internal double ColumnWidth { get; }
    internal bool IgnorePageBreaks { get; internal set; }
    internal bool FullOnPage { get; internal set; }
    internal bool ResetHorizontal { get; internal set; }
    internal bool EvaluatePageHeaderFooter { get; internal set; }
    public int DpiX { get; }
    public int DpiY { get; }
    internal bool EMFDynamicImages { get; }
    internal int VerticalPageNumber { get; internal set; }
    internal Hashtable ItemPropsStart { get; internal set; }
    internal Hashtable SharedImages { get; internal set; }
    internal Hashtable AutoSizeSharedImages { get; internal set; }
    internal Hashtable TextBoxSharedInfo { get; internal set; }
    internal Hashtable ItemPaddingsStyle { get; internal set; }
    internal bool CacheNonSharedProps { get; }
    internal Stream PropertyCache { get; internal set; }
    internal CacheState PropertyCacheState { get; internal set; }
    internal BinaryReader PropertyCacheReader { get; }
    internal BinaryWriter PropertyCacheWriter { get; }
    internal Hashtable CacheSharedImages { get; internal set; }
    internal CachedSharedImageInfo ItemCacheSharedImageInfo { get; internal set; }
    internal AddTextBoxDelegate AddTextBox { get; }
    internal PageContextCommon Common { get; }
    internal List`1<TextRunItemizedData> ParagraphItemizedData { get; internal set; }
    internal PageContext(PaginationSettings pagination, AddTextBoxDelegate aAddTextBox, bool consumeWhitespace, CreateAndRegisterStream createAndRegisterStream);
    internal PageContext(PageContext pageContext);
    internal PageContext(PageContext pageContext, bool fullOnPage, bool ignorePageBreaks, bool cacheNonSharedProps);
    internal PageContext(PageContext pageContext, bool cacheNonSharedProps);
    internal void InitCache();
    internal void DisposeGraphics();
    internal double ConvertToMillimeters(int coordinate, float dpi);
    internal void RegisterTextRunData(TextRunItemizedData runItemizedData);
    internal bool get_ConsumeWhitespace();
    internal IScalabilityCache get_ScalabilityCache();
    internal long get_TotalScaleTimeMs();
    internal long get_PeakMemoryUsageKB();
    internal bool get_UseGenericDefault();
    internal double get_ColumnHeight();
    internal double get_ColumnWidth();
    internal bool get_IgnorePageBreaks();
    internal void set_IgnorePageBreaks(bool value);
    internal bool get_FullOnPage();
    internal void set_FullOnPage(bool value);
    internal bool get_ResetHorizontal();
    internal void set_ResetHorizontal(bool value);
    internal bool get_EvaluatePageHeaderFooter();
    internal void set_EvaluatePageHeaderFooter(bool value);
    public int get_DpiX();
    public int get_DpiY();
    internal bool get_EMFDynamicImages();
    internal int get_VerticalPageNumber();
    internal void set_VerticalPageNumber(int value);
    internal Hashtable get_ItemPropsStart();
    internal void set_ItemPropsStart(Hashtable value);
    internal Hashtable get_SharedImages();
    internal void set_SharedImages(Hashtable value);
    internal Hashtable get_AutoSizeSharedImages();
    internal void set_AutoSizeSharedImages(Hashtable value);
    internal Hashtable get_TextBoxSharedInfo();
    internal void set_TextBoxSharedInfo(Hashtable value);
    internal Hashtable get_ItemPaddingsStyle();
    internal void set_ItemPaddingsStyle(Hashtable value);
    internal bool get_CacheNonSharedProps();
    internal Stream get_PropertyCache();
    internal void set_PropertyCache(Stream value);
    internal CacheState get_PropertyCacheState();
    internal void set_PropertyCacheState(CacheState value);
    internal BinaryReader get_PropertyCacheReader();
    internal BinaryWriter get_PropertyCacheWriter();
    internal Hashtable get_CacheSharedImages();
    internal void set_CacheSharedImages(Hashtable value);
    internal CachedSharedImageInfo get_ItemCacheSharedImageInfo();
    internal void set_ItemCacheSharedImageInfo(CachedSharedImageInfo value);
    internal AddTextBoxDelegate get_AddTextBox();
    internal PageContextCommon get_Common();
    internal List`1<TextRunItemizedData> get_ParagraphItemizedData();
    internal void set_ParagraphItemizedData(List`1<TextRunItemizedData> value);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.PageHeadFoot : PageItemContainer {
    private PageSection m_source;
    private bool m_isHeader;
    internal string SourceUniqueName { get; }
    internal string SourceID { get; }
    internal Style SharedStyle { get; }
    internal StyleInstance NonSharedStyle { get; }
    internal double OriginalLeft { get; }
    internal double OriginalWidth { get; }
    internal byte RPLFormatType { get; }
    internal PageHeadFoot(PageSection source, double width, bool aIsHeader);
    internal virtual string get_SourceUniqueName();
    internal virtual string get_SourceID();
    internal virtual Style get_SharedStyle();
    internal virtual StyleInstance get_NonSharedStyle();
    protected virtual void CreateChildren(PageContext pageContext);
    internal virtual bool HitsCurrentPage(double pageLeft, double pageTop, double pageRight, double pageBottom);
    internal virtual double get_OriginalLeft();
    internal virtual double get_OriginalWidth();
    internal virtual byte get_RPLFormatType();
    internal virtual RPLElement CreateRPLElement();
    internal virtual RPLElement CreateRPLElement(RPLElementProps props, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
}
internal abstract class Microsoft.ReportingServices.Rendering.HPBProcessing.PageItem : object {
    [StaticReferenceAttribute]
protected ReportItem m_source;
    protected ItemSizes m_itemPageSizes;
    protected List`1<int> m_pageItemsAbove;
    protected List`1<int> m_pageItemsLeft;
    protected StateFlags m_stateFlags;
    protected long m_offset;
    [StaticReferenceAttribute]
protected RPLElement m_rplElement;
    protected long m_nonSharedOffset;
    private byte m_rplItemState;
    private static Declaration m_declaration;
    internal ReportItem Source { get; }
    internal string SourceID { get; }
    internal string SourceUniqueName { get; }
    internal ItemSizes ItemPageSizes { get; }
    internal List`1<int> PageItemsAbove { get; internal set; }
    internal List`1<int> PageItemsLeft { get; internal set; }
    public long Offset { get; public set; }
    public RPLElement RPLElement { get; public set; }
    internal byte RplItemState { get; }
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal bool IgnorePageBreaks { get; }
    internal bool OnThisVerticalPage { get; internal set; }
    internal bool SplitsVerticalPage { get; internal set; }
    internal bool Duplicate { get; internal set; }
    internal bool ResolveChildren { get; internal set; }
    internal bool KeepTogetherVertical { get; internal set; }
    internal bool KeepTogetherHorizontal { get; internal set; }
    internal bool UnresolvedPBS { get; internal set; }
    internal bool UnresolvedPBE { get; internal set; }
    internal bool UnresolvedKTV { get; internal set; }
    internal bool UnresolvedKTH { get; internal set; }
    internal bool UnresolvedCKTV { get; internal set; }
    internal bool UnresolvedCKTH { get; internal set; }
    internal bool UnresolvedCPB { get; internal set; }
    internal bool NeedResolve { get; internal set; }
    internal bool TablixCellTopItem { get; internal set; }
    internal bool PBAreUnresolved { get; }
    internal bool KTVIsUnresolved { get; }
    internal bool KTHIsUnresolved { get; }
    internal double OriginalLeft { get; }
    internal double OriginalWidth { get; }
    internal double OriginalRight { get; }
    internal Style SharedStyle { get; }
    internal StyleInstance NonSharedStyle { get; }
    public int Size { get; }
    internal bool ContentOnPage { get; }
    protected PageItem(ReportItem source);
    private static PageItem();
    internal ReportItem get_Source();
    internal virtual string get_SourceID();
    internal virtual string get_SourceUniqueName();
    internal ItemSizes get_ItemPageSizes();
    internal List`1<int> get_PageItemsAbove();
    internal void set_PageItemsAbove(List`1<int> value);
    internal List`1<int> get_PageItemsLeft();
    internal void set_PageItemsLeft(List`1<int> value);
    public long get_Offset();
    public void set_Offset(long value);
    public RPLElement get_RPLElement();
    public void set_RPLElement(RPLElement value);
    internal byte get_RplItemState();
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    internal bool get_IgnorePageBreaks();
    internal bool get_OnThisVerticalPage();
    internal void set_OnThisVerticalPage(bool value);
    internal bool get_SplitsVerticalPage();
    internal void set_SplitsVerticalPage(bool value);
    internal bool get_Duplicate();
    internal void set_Duplicate(bool value);
    internal bool get_ResolveChildren();
    internal void set_ResolveChildren(bool value);
    internal bool get_KeepTogetherVertical();
    internal void set_KeepTogetherVertical(bool value);
    internal bool get_KeepTogetherHorizontal();
    internal void set_KeepTogetherHorizontal(bool value);
    internal bool get_UnresolvedPBS();
    internal void set_UnresolvedPBS(bool value);
    internal bool get_UnresolvedPBE();
    internal void set_UnresolvedPBE(bool value);
    internal bool get_UnresolvedKTV();
    internal void set_UnresolvedKTV(bool value);
    internal bool get_UnresolvedKTH();
    internal void set_UnresolvedKTH(bool value);
    internal bool get_UnresolvedCKTV();
    internal void set_UnresolvedCKTV(bool value);
    internal bool get_UnresolvedCKTH();
    internal void set_UnresolvedCKTH(bool value);
    internal bool get_UnresolvedCPB();
    internal void set_UnresolvedCPB(bool value);
    internal bool get_NeedResolve();
    internal void set_NeedResolve(bool value);
    internal bool get_TablixCellTopItem();
    internal void set_TablixCellTopItem(bool value);
    internal bool get_PBAreUnresolved();
    internal bool get_KTVIsUnresolved();
    internal bool get_KTHIsUnresolved();
    private bool GetFlagValue(StateFlags aFlag);
    private void SetFlagValue(StateFlags aFlag, bool aValue);
    internal virtual double get_OriginalLeft();
    internal virtual double get_OriginalWidth();
    internal virtual double get_OriginalRight();
    internal virtual Style get_SharedStyle();
    internal virtual StyleInstance get_NonSharedStyle();
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    internal static PageItem Create(ReportItem source, bool tablixCellParent, PageContext pageContext);
    internal static PageItem Create(ReportItem source, bool tablixCellParent, bool ignoreKT, PageContext pageContext);
    internal static bool TransformToTextBox(DataRegion source);
    internal static bool TransformToTextBox(Tablix source, bool tablixCellParent, Boolean& noRows);
    internal static bool TransformToTextBox(SubReport source, bool tablixCellParent, Boolean& noRows);
    internal virtual bool get_ContentOnPage();
    internal void CalculateVertical(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, PageItem[] siblings, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    internal void CalculateVertical(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, PageItem[] siblings, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors, Nullable`1<double> sourceWidth);
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    internal void ResolveVertical(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, PageItem[] siblings, bool resolveItem);
    internal void CalculateHorizontal(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, PageItem[] siblings, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    internal void CalculateHorizontal(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, PageItem[] siblings, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors, Nullable`1<double> sourceWidth);
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    internal void ResolveHorizontal(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, PageItem[] siblings, bool resolveItem);
    private bool ResolvePageBreakAtStart(PageContext pageContext, double topInParentSystem, double bottomInParentSystem);
    protected virtual bool ResolveKeepTogetherVertical(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, bool resolveItem);
    protected virtual bool ResolveKeepTogetherHorizontal(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, bool resolveItem);
    internal bool HitsCurrentVerticalPage(double topInParentSystem, double bottomInParentSystem);
    internal bool HitsCurrentHorizontalPage(double leftInParentSystem, double rightInParentSystem);
    internal virtual bool HitsCurrentPage(double pageLeft, double pageTop, double pageRight, double pageBottom);
    internal bool Release(double pageBottom, double pageRight);
    internal virtual bool AddToPage(RPLWriter rplWriter, PageContext pageContext, double pageLeft, double pageTop, double pageRight, double pageBottom, RepeatState repeatState);
    internal virtual void RegisterTextBoxes(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void ResetHorizontal(bool spanPages, Nullable`1<double> width);
    internal virtual void OmitBorderOnPageBreak(RPLWriter rplWriter, double pageLeft, double pageTop, double pageRight, double pageBottom);
    internal void OmitBorderOnPageBreak(double pageLeft, double pageTop, double pageRight, double pageBottom);
    internal void AdjustOriginFromItemsAtLeft(PageItem[] siblings);
    internal void AdjustOriginFromItemsAbove(PageItem[] siblings);
    internal void WritePageItemSizes(BinaryWriter spbifWriter);
    internal RPLMeasurement WritePageItemSizes();
    internal abstract virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void CacheNonSharedProperties(PageContext pageContext);
    internal void WriteElementProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext, long offset);
    internal virtual void CopyCachedData(RPLWriter rplWriter, PageContext pageContext);
    internal void CopyDataAndResolve(RPLWriter rplWriter, PageContext pageContext, long startOffset, long endOffset, bool ignoreDelimiter);
    internal void CopyData(BinaryReader cacheReader, RPLWriter rplWriter, long length);
    internal void WriteElementProps(RPLElementProps elemProps, PageContext pageContext);
    protected void WriteSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext, long offset);
    protected void WriteSharedItemProps(RPLElementProps elemProps, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, PageContext pageContext);
    internal void WriteStyleProp(Style styleDef, StyleInstance style, BinaryWriter spbifWriter, StyleAttributeNames name, byte spbifType);
    internal void WriteStyleProp(Style styleDef, StyleInstance style, RPLStyleProps rplStyleProps, StyleAttributeNames name, byte spbifType);
    internal static Nullable`1<byte> GetStylePropByte(byte spbifType, object styleProp, Boolean& convertToString);
    internal static void WriteStyleReportProperty(ReportProperty styleProp, BinaryWriter spbifWriter, byte spbifType);
    internal static void WriteStyleReportProperty(ReportProperty styleProp, RPLStyleProps rplStyleProps, byte spbifType);
    internal static Nullable`1<byte> GetStylePropByte(byte spbifType, ReportProperty styleProp);
    internal void WriteStyleProp(Style style, BinaryWriter spbifWriter, StyleAttributeNames name, byte spbifType);
    internal static void WriteStyleProp(Style style, RPLStyleProps rplStyleProps, StyleAttributeNames name, byte spbifType);
    internal void WriteBackgroundImage(Style style, bool writeShared, BinaryWriter spbifWriter, PageContext pageContext);
    internal void WriteBackgroundImage(Style style, bool writeShared, RPLStyleProps rplStyleProps, PageContext pageContext);
    internal void WriteSharedStyle(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteBorderProps(BinaryWriter spbifWriter, Style style);
    internal RPLStyleProps WriteSharedStyle(Style style, PageContext pageContext);
    internal virtual void WriteBorderProps(RPLStyleProps rplStyleProps, Style style);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    private void WriteNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    private void WriteNonSharedItemProps(RPLElementProps elemProps, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps elemProps, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyle(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, PageContext pageContext);
    internal virtual void WriteNonSharedStyleWithoutTag(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual RPLStyleProps WriteNonSharedStyle(Style styleDef, StyleInstance style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal void WriteInvalidImage(BinaryWriter spbifWriter, PageContext pageContext, GDIImageProps gdiImageProps);
    internal void WriteImage(IImageInstance imageInstance, string resourceName, BinaryWriter spbifWriter, PageContext pageContext, GDIImageProps gdiImage, bool writeShared);
    internal void WriteInvalidImage(RPLImageProps elemProps, PageContext pageContext, GDIImageProps gdiImageProps);
    internal void WriteImage(IImageInstance imageInstance, string resourceName, RPLImageProps elemProps, PageContext pageContext, GDIImageProps gdiImage);
    internal void WriteImage(IImageInstance imageInstance, string resourceName, RPLImageData& imageData, PageContext pageContext, GDIImageProps gdiImage);
    private void WriteImageProperties(IImageInstance imageInstance, string streamName, BinaryWriter spbifWriter, GDIImageProps gdiImage);
    private void WriteImageProperties(IImageInstance imageInstance, string streamName, RPLImageData imageData, GDIImageProps gdiImage);
    private void WriteStreamContent(Stream sourceStream, BinaryWriter spbifWriter);
    private void WriteShareableImages(IImageInstance imageInstance, string streamName, BinaryWriter spbifWriter, PageContext pageContext, long offsetStart, GDIImageProps gdiImage, bool writeShared);
    private void WriteShareableImages(IImageInstance imageInstance, string streamName, RPLImageData& imageData, PageContext pageContext, GDIImageProps gdiImage);
    internal void WriteActionInfo(ActionInfo actionInfo, BinaryWriter spbifWriter);
    internal static RPLActionInfo WriteActionInfo(ActionInfo actionInfo);
    internal static void WriteAction(ActionCollection actions, RPLActionInfo rplActionInfo);
    internal bool WriteObjectValue(BinaryWriter spbifWriter, byte name, TypeCode typeCode, object value);
    internal bool WriteObjectValue(RPLTextBoxProps textBoxProps, TypeCode typeCode, object value);
}
internal abstract class Microsoft.ReportingServices.Rendering.HPBProcessing.PageItemContainer : PageItem {
    protected PageItem[] m_children;
    protected Int32[] m_indexesLeftToRight;
    protected double m_rightPadding;
    protected double m_definitionRightPadding;
    protected double m_bottomPadding;
    private static Declaration m_declaration;
    internal byte RPLFormatType { get; }
    public int Size { get; }
    internal PageItemContainer(ReportItem source);
    private static PageItemContainer();
    internal abstract virtual byte get_RPLFormatType();
    internal abstract virtual RPLElement CreateRPLElement();
    internal abstract virtual RPLElement CreateRPLElement(RPLElementProps props, PageContext pageContext);
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    private sealed virtual override int System.Collections.IComparer.Compare(object o1, object o2);
    private void VerticalDependency();
    private void HorizontalDependecy();
    protected abstract virtual void CreateChildren(PageContext pageContext);
    protected void CreateChildren(ReportItemCollection childrenDef, PageContext pageContext);
    private void ConsumeWhitespaceVertical(ItemSizes itemSizes, double adjustHeightTo);
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    private void DetermineContentVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors, bool resolveState, bool resolveItem);
    protected virtual bool ResolveKeepTogetherVertical(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, bool resolveItem);
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    private void DetermineContentHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors, bool resolveState, bool resolveItem);
    private void StretchHorizontal(double maxRightInThisSystem, PageContext pageContext);
    protected virtual bool ResolveKeepTogetherHorizontal(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, bool resolveItem);
    internal virtual bool AddToPage(RPLWriter rplWriter, PageContext pageContext, double pageLeft, double pageTop, double pageRight, double pageBottom, RepeatState repeatState);
    internal virtual void ResetHorizontal(bool spanPages, Nullable`1<double> width);
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteEndItemToStream(RPLWriter rplWriter, List`1<PageItem> itemsOnPage);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.PaginationSettings : object {
    public static double MINIMUMCOLUMNHEIGHT;
    public static double MINIMUMCOLUMNWIDTH;
    private int m_startPage;
    private int m_endPage;
    private double m_physicalPageWidth;
    private double m_physicalPageHeight;
    private double m_usableWidth;
    private double m_columnWidth;
    private double m_columnHeight;
    private double m_headerHeight;
    private double m_footerHeight;
    private int m_columns;
    private double m_columnSpacing;
    private double m_marginTop;
    private double m_marginLeft;
    private double m_marginBottom;
    private double m_marginRight;
    private FormatEncoding m_outputFormat;
    private int m_dpiX;
    private int m_dpiY;
    private bool m_useGenericDefault;
    private bool m_useEmSquare;
    private int m_measureTextDpi;
    private int m_measureImageDpiX;
    private int m_measureImageDpiY;
    private static Hashtable DeviceInfoTagLookup;
    public int StartPage { get; public set; }
    public int EndPage { get; public set; }
    unknown string PageHeightStr {private set; }
    unknown string PageWidthStr {private set; }
    internal int Columns { get; internal set; }
    internal double ColumnSpacing { get; internal set; }
    internal double MarginTop { get; internal set; }
    internal double MarginLeft { get; internal set; }
    internal double MarginBottom { get; internal set; }
    internal double MarginRight { get; internal set; }
    public int DpiX { get; public set; }
    public int DpiY { get; public set; }
    public bool UseGenericDefault { get; public set; }
    public double ColumnHeight { get; public set; }
    public double ColumnWidth { get; public set; }
    public double UsablePageWidth { get; }
    public double PhysicalPageHeight { get; }
    public double PhysicalPageWidth { get; }
    public double PageHeaderHeight { get; public set; }
    public double PageFooterHeight { get; public set; }
    public FormatEncoding OutputFormat { get; }
    public bool UseEmSquare { get; public set; }
    public int MeasureTextDpi { get; public set; }
    public int MeasureImageDpiX { get; public set; }
    public int MeasureImageDpiY { get; public set; }
    internal bool EMFOutputFormat { get; }
    private static PaginationSettings();
    public PaginationSettings(Report aReport);
    public PaginationSettings(Report aReport, NameValueCollection aDeviceInfo);
    private void Init(Report aReport);
    public int get_StartPage();
    public void set_StartPage(int value);
    public int get_EndPage();
    public void set_EndPage(int value);
    private void set_PageHeightStr(string value);
    private void set_PageWidthStr(string value);
    internal int get_Columns();
    internal void set_Columns(int value);
    internal double get_ColumnSpacing();
    internal void set_ColumnSpacing(double value);
    internal double get_MarginTop();
    internal void set_MarginTop(double value);
    internal double get_MarginLeft();
    internal void set_MarginLeft(double value);
    internal double get_MarginBottom();
    internal void set_MarginBottom(double value);
    internal double get_MarginRight();
    internal void set_MarginRight(double value);
    public int get_DpiX();
    public void set_DpiX(int value);
    public int get_DpiY();
    public void set_DpiY(int value);
    public bool get_UseGenericDefault();
    public void set_UseGenericDefault(bool value);
    public double get_ColumnHeight();
    public void set_ColumnHeight(double value);
    public double get_ColumnWidth();
    public void set_ColumnWidth(double value);
    public double get_UsablePageWidth();
    public double get_PhysicalPageHeight();
    public double get_PhysicalPageWidth();
    public double get_PageHeaderHeight();
    public void set_PageHeaderHeight(double value);
    public double get_PageFooterHeight();
    public void set_PageFooterHeight(double value);
    public FormatEncoding get_OutputFormat();
    public bool get_UseEmSquare();
    public void set_UseEmSquare(bool value);
    public int get_MeasureTextDpi();
    public void set_MeasureTextDpi(int value);
    public int get_MeasureImageDpiX();
    public void set_MeasureImageDpiX(int value);
    public int get_MeasureImageDpiY();
    public void set_MeasureImageDpiY(int value);
    internal bool get_EMFOutputFormat();
    private void ValidateDeviceInfoValue(Double& currValue, double defaultValue);
    private void ValidateDeviceInfoValue(Int32& currValue, int defaultValue);
    private void ValidateFields();
    private void ParseDeviceInfo(NameValueCollection deviceInfo);
    internal int ParseInt(string intValue, int defaultValue);
    private double ParseSize(string sizeValue, double defaultValue);
    private FormatEncoding ParseFormat(string enumValue, FormatEncoding defaultValue);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Paragraph : object {
    [StaticReferenceAttribute]
public static Declaration m_declaration;
    [StaticReferenceAttribute]
private Paragraph m_source;
    private Dictionary`2<byte, object> m_styles;
    private Nullable`1<ListStyles> m_listStyle;
    private Nullable`1<int> m_listLevel;
    private int m_paragraphNumber;
    private ReportSize m_spaceBefore;
    private ReportSize m_spaceAfter;
    private ReportSize m_leftIndent;
    private ReportSize m_rightIndent;
    private ReportSize m_hangingIndent;
    private string m_uniqueName;
    private List`1<TextRun> m_textRuns;
    private bool m_firstLine;
    public List`1<TextRun> TextRuns { get; public set; }
    public int ParagraphNumber { get; public set; }
    public string UniqueName { get; }
    public bool FirstLine { get; public set; }
    public TextAlignments Alignment { get; }
    public float SpaceBefore { get; }
    public float SpaceAfter { get; }
    public float LeftIndent { get; }
    public float RightIndent { get; }
    public float HangingIndent { get; }
    public int ListLevel { get; }
    public ListStyles ListStyle { get; }
    public int Size { get; }
    internal Paragraph(string uniqueName);
    internal Paragraph(ParagraphInstance romParagraphInstance, string uniqueName, bool hideDuplicates);
    private static Paragraph();
    public List`1<TextRun> get_TextRuns();
    public void set_TextRuns(List`1<TextRun> value);
    public sealed virtual int get_ParagraphNumber();
    public sealed virtual void set_ParagraphNumber(int value);
    public string get_UniqueName();
    public bool get_FirstLine();
    public void set_FirstLine(bool value);
    public sealed virtual TextAlignments get_Alignment();
    public sealed virtual float get_SpaceBefore();
    public sealed virtual float get_SpaceAfter();
    public sealed virtual float get_LeftIndent();
    public sealed virtual float get_RightIndent();
    public sealed virtual float get_HangingIndent();
    public sealed virtual int get_ListLevel();
    public sealed virtual ListStyles get_ListStyle();
    internal Paragraph GetRichTextParagraph();
    internal RPLParagraph GetRPLParagraph(PageContext pageContext, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, List`1<TextRun> richTextParaRuns);
    internal void WriteElementProps(RPLParagraphProps elemProps, PageContext pageContext);
    internal void WriteSharedStyles(StyleWriter writer, Style style);
    internal long WriteToStream(BinaryWriter writer, PageContext pageContext, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, List`1<TextRun> richTextParaRuns);
    internal void WriteElementProps(BinaryWriter spbifWriter, PageContext pageContext);
    internal void WriteNonSharedStyles(StyleWriter writer);
    public sealed virtual int get_Size();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Rectangle : PageItemContainer {
    private static Declaration m_declaration;
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal byte RPLFormatType { get; }
    internal Rectangle(Rectangle source);
    private static Rectangle();
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    protected virtual void CreateChildren(PageContext pageContext);
    internal virtual void OmitBorderOnPageBreak(RPLWriter rplWriter, double pageLeft, double pageTop, double pageRight, double pageBottom);
    internal virtual byte get_RPLFormatType();
    internal virtual RPLElement CreateRPLElement();
    internal virtual RPLElement CreateRPLElement(RPLElementProps props, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Report : object {
    private Report m_report;
    private ReportBody m_reportBody;
    private List`1<ColumnDetail> m_columns;
    private PageContext m_pageContext;
    private PaginationSettings m_pageSettings;
    private double m_leftEdge;
    private double m_topEdge;
    private long m_offset;
    private long m_pageOffset;
    private long m_columnsOffset;
    private Version m_rplVersion;
    internal bool Done { get; }
    internal IJobContext JobContext { get; }
    internal Report(Report report, PageContext pageContext, PaginationSettings aPagination);
    internal bool get_Done();
    internal IJobContext get_JobContext();
    internal void SetContext();
    internal void NextPage(RPLWriter rplWriter, int page, int totalPages);
    internal void WriteStartItemToStream(RPLWriter rplWriter);
    internal void WriteReportPageStart(RPLWriter rplWriter);
    internal void WriteEndItemToStream(RPLWriter rplWriter, PageHeadFoot header, PageHeadFoot footer);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.ReportBody : PageItemContainer {
    [StaticReferenceAttribute]
private Body m_source;
    private double m_originalWidth;
    private static Declaration m_declaration;
    internal string SourceID { get; }
    internal string SourceUniqueName { get; }
    internal double OriginalLeft { get; }
    internal double OriginalWidth { get; }
    internal Style SharedStyle { get; }
    internal StyleInstance NonSharedStyle { get; }
    internal byte RPLFormatType { get; }
    public int Size { get; }
    internal ReportBody(Body source, ReportSize width);
    private static ReportBody();
    internal virtual string get_SourceID();
    internal virtual string get_SourceUniqueName();
    internal virtual double get_OriginalLeft();
    internal virtual double get_OriginalWidth();
    internal virtual Style get_SharedStyle();
    internal virtual StyleInstance get_NonSharedStyle();
    internal virtual byte get_RPLFormatType();
    internal virtual RPLElement CreateRPLElement();
    internal virtual RPLElement CreateRPLElement(RPLElementProps props, PageContext pageContext);
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    protected virtual void CreateChildren(PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.ReportPage : PageItem {
    private Page m_source;
    internal string SourceUniqueName { get; }
    internal string SourceID { get; }
    internal ReportPage(Page source);
    internal virtual string get_SourceUniqueName();
    internal virtual string get_SourceID();
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal void WriteItemStyle(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.RoundedDouble : object {
    internal double m_value;
    internal double Value { get; internal set; }
    public RoundedDouble(double x);
    internal double get_Value();
    internal void set_Value(double value);
    public static bool op_Equality(RoundedDouble x1, double x2);
    public static bool op_GreaterThan(RoundedDouble x1, double x2);
    public static bool op_GreaterThanOrEqual(RoundedDouble x1, double x2);
    public static bool op_LessThan(RoundedDouble x1, double x2);
    public static bool op_LessThanOrEqual(RoundedDouble x1, double x2);
    public static bool op_Inequality(RoundedDouble x1, double x2);
    public static RoundedDouble op_Addition(RoundedDouble x1, double x2);
    public static RoundedDouble op_Subtraction(RoundedDouble x1, double x2);
    public static RoundedDouble op_Explicit(double x);
    public virtual bool Equals(object x1);
    public virtual int GetHashCode();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.RPLWriter : object {
    private RPLReport m_rplReport;
    private BinaryWriter m_binaryWriter;
    private RPLTablixRow m_tablixRow;
    private int m_delayedTBLevels;
    private List`1<Dictionary`2<string, List`1<object>>> m_currentDelayedTB;
    private Byte[] m_copyBuffer;
    private bool m_cacheRichData;
    private List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> m_paragraphsItemizedData;
    private Dictionary`2<string, List`1<TextRunItemizedData>> m_pageParagraphsData;
    internal RPLReport Report { get; internal set; }
    internal RPLTablixRow TablixRow { get; internal set; }
    internal BinaryWriter BinaryWriter { get; internal set; }
    internal int DelayedTBLevels { get; internal set; }
    internal Byte[] CopyBuffer { get; }
    internal Dictionary`2<string, List`1<TextRunItemizedData>> PageParagraphsItemizedData { get; }
    internal List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> ParagraphsItemizedData { get; }
    internal RPLReport get_Report();
    internal void set_Report(RPLReport value);
    internal RPLTablixRow get_TablixRow();
    internal void set_TablixRow(RPLTablixRow value);
    internal BinaryWriter get_BinaryWriter();
    internal void set_BinaryWriter(BinaryWriter value);
    internal int get_DelayedTBLevels();
    internal void set_DelayedTBLevels(int value);
    internal Byte[] get_CopyBuffer();
    internal Dictionary`2<string, List`1<TextRunItemizedData>> get_PageParagraphsItemizedData();
    internal List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> get_ParagraphsItemizedData();
    internal void AddTextBoxes(Dictionary`2<string, List`1<object>> delayedTextBoxes);
    internal void AddTextBox(string name, object value);
    internal void EnterDelayedTBLevel(bool isLTR, RTLTextBoxes& delayedTB);
    internal void RegisterCellTextBoxes(bool isLTR, RTLTextBoxes delayedTB);
    internal void LeaveDelayedTBLevel(bool isLTR, RTLTextBoxes delayedTB, PageContext pageContext);
    internal void RegisterCacheRichData(bool cacheRichData);
    internal void RegisterPageItemizedData();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.RTLTextBoxes : object {
    private List`1<Dictionary`2<string, List`1<object>>> m_delayedTB;
    private Stack`1<Dictionary`2<string, List`1<object>>> m_rtlDelayedTB;
    internal List`1<Dictionary`2<string, List`1<object>>> DelayedTB { get; internal set; }
    internal Stack`1<Dictionary`2<string, List`1<object>>> RTLDelayedTB { get; internal set; }
    internal RTLTextBoxes(List`1<Dictionary`2<string, List`1<object>>> delayedTB);
    internal List`1<Dictionary`2<string, List`1<object>>> get_DelayedTB();
    internal void set_DelayedTB(List`1<Dictionary`2<string, List`1<object>>> value);
    internal Stack`1<Dictionary`2<string, List`1<object>>> get_RTLDelayedTB();
    internal void set_RTLDelayedTB(Stack`1<Dictionary`2<string, List`1<object>>> value);
    internal void Push(List`1<Dictionary`2<string, List`1<object>>> delayedTB);
    internal List`1<Dictionary`2<string, List`1<object>>> RegisterRTLLevel();
    internal void RegisterTextBoxes(PageContext pageContext);
    private void RegisterTextBoxes(Dictionary`2<string, List`1<object>> textBoxValues, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.StorageObjectCreator : object {
    private static StorageObjectCreator m_instance;
    private static List`1<Declaration> m_declarations;
    internal static StorageObjectCreator Instance { get; }
    private static StorageObjectCreator();
    public sealed virtual bool TryCreateObject(ObjectType objectType, IPersistable& persistObj);
    public sealed virtual List`1<Declaration> GetDeclarations();
    internal static StorageObjectCreator get_Instance();
    private static List`1<Declaration> BuildDeclarations();
}
internal static class Microsoft.ReportingServices.Rendering.HPBProcessing.StyleEnumConverter : object {
    internal static byte Translate(FontStyles aValue);
    internal static byte Translate(FontWeights aValue);
    internal static byte Translate(TextDecorations aValue);
    internal static byte Translate(TextAlignments aValue);
    internal static byte Translate(VerticalAlignments aValue);
    internal static byte Translate(Directions aValue);
    internal static byte Translate(WritingModes aValue);
    internal static byte Translate(UnicodeBiDiTypes aValue);
    internal static byte Translate(Calendars aValue);
    internal static Nullable`1<byte> Translate(BorderStyles aValue);
    internal static byte Translate(BackgroundRepeatTypes aValue);
    internal static byte Translate(ListStyle listStyle);
    internal static byte Translate(MarkupType markupType);
}
internal interface Microsoft.ReportingServices.Rendering.HPBProcessing.StyleWriter {
    public abstract virtual void Write(byte rplId, string value);
    public abstract virtual void Write(byte rplId, byte value);
    public abstract virtual void Write(byte rplId, int value);
    public abstract virtual void WriteAll(Dictionary`2<byte, object> styleList);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.StyleWriterDictionary : object {
    private Dictionary`2<byte, object> m_styles;
    public StyleWriterDictionary(Dictionary`2<byte, object> styles);
    public sealed virtual void Write(byte rplId, string value);
    public sealed virtual void Write(byte rplId, byte value);
    public sealed virtual void Write(byte rplId, int value);
    public sealed virtual void WriteAll(Dictionary`2<byte, object> styles);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.StyleWriterOM : object {
    private RPLStyleProps m_styleProps;
    public StyleWriterOM(RPLStyleProps styleProps);
    public sealed virtual void Write(byte rplId, string value);
    public sealed virtual void Write(byte rplId, byte value);
    public sealed virtual void Write(byte rplId, int value);
    public sealed virtual void WriteAll(Dictionary`2<byte, object> styles);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.StyleWriterStream : object {
    private BinaryWriter m_writer;
    public StyleWriterStream(BinaryWriter writer);
    public void WriteNotNull(byte rplId, string value);
    public void WriteNotNull(byte rplId, Nullable`1<byte> value);
    public sealed virtual void Write(byte rplId, string value);
    public sealed virtual void Write(byte rplId, byte value);
    public sealed virtual void Write(byte rplId, int value);
    public void Write(byte rplId, float value);
    public void Write(byte rplId, bool value);
    public sealed virtual void WriteAll(Dictionary`2<byte, object> styles);
    public void WriteSharedProperty(byte rplId, ReportStringProperty prop);
    public void WriteSharedProperty(byte rplId, ReportSizeProperty prop);
    public void WriteSharedProperty(byte rplId, ReportIntProperty prop);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.SubReport : PageItem {
    private PageItem m_childBody;
    private static Declaration m_declaration;
    public int Size { get; }
    internal SubReport(SubReport source);
    private static SubReport();
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual bool ResolveKeepTogetherVertical(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, bool resolveItem);
    private void DetermineContentVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors, bool resolveState, bool resolveItem);
    protected virtual bool ResolveKeepTogetherHorizontal(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, bool resolveItem);
    private void DetermineContentHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors, bool resolveState, bool resolveItem);
    internal virtual bool AddToPage(RPLWriter rplWriter, PageContext pageContext, double pageLeft, double pageTop, double pageRight, double pageBottom, RepeatState repeatState);
    internal virtual void OmitBorderOnPageBreak(RPLWriter rplWriter, double pageLeft, double pageTop, double pageRight, double pageBottom);
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal void WriteEndItemToStream(RPLWriter rplWriter);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, PageContext pageContext);
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Tablix : PageItem {
    private TablixState m_tablixStateFlags;
    [StaticReferenceAttribute]
private TablixRowCollection m_bodyRows;
    private Double[] m_bodyRowsHeights;
    private Double[] m_bodyColWidths;
    private int m_rowMembersDepth;
    private int m_colMembersDepth;
    [StaticReferenceAttribute]
private List`1<RPLTablixMemberDef> m_rowMemberDefList;
    private Hashtable m_rowMemberDefIndexes;
    [StaticReferenceAttribute]
private List`1<RPLTablixMemberDef> m_colMemberDefList;
    private Hashtable m_colMemberDefIndexes;
    private int m_ignoreCellPageBreaks;
    private int m_headerRowCols;
    private int m_headerColumnRows;
    private int m_rowMemberIndexCell;
    private int m_colMemberIndexCell;
    private int m_colsBeforeRowHeaders;
    private List`1<PageStructMemberCell> m_columnHeaders;
    private List`1<SizeInfo> m_colHeaderHeights;
    private List`1<PageStructMemberCell> m_rowHeaders;
    private List`1<SizeInfo> m_rowHeaderWidths;
    private ScalableList`1<RowInfo> m_detailRows;
    private PageCornerCell[0...,0...] m_cornerCells;
    private int m_ignoreGroupPageBreaks;
    private ScalableList`1<ColumnInfo> m_columnInfo;
    private int m_ignoreCol;
    private int m_ignoreRow;
    private static Declaration m_declaration;
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal bool PinnedToParentCell { get; }
    private bool NoRows { get; private set; }
    private bool IsLTR { get; private set; }
    private bool RepeatColumnHeaders { get; private set; }
    private bool RepeatedColumnHeaders { get; private set; }
    private bool AddToPageColumnHeaders { get; private set; }
    private bool SplitColumnHeaders { get; private set; }
    private bool RepeatRowHeaders { get; private set; }
    private bool AddToPageRowHeaders { get; private set; }
    private bool SplitRowHeaders { get; private set; }
    private bool ColumnHeadersCreated { get; private set; }
    private bool RowHeadersCreated { get; private set; }
    public int Size { get; }
    internal Tablix(Tablix source);
    private static Tablix();
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    internal bool CheckPageBreaks(PageContext pageContext);
    internal bool get_PinnedToParentCell();
    private static int RemoveHeadersAbove(List`1<PageStructMemberCell> members, int endIndex, ScalableList`1<RowInfo> detailRows, Int32& rowEndIndex);
    private static double ResolveStartPos(List`1<SizeInfo> sizeInfoList, double startPos);
    private static double ResolveStartPosRTL(List`1<SizeInfo> sizeInfoList, double startPos);
    private static double ResolveStartPosAndState(List`1<SizeInfo> sizeInfoList, double startPos, PageState state);
    private static double ResolveStartPosAndStateRTL(List`1<SizeInfo> sizeInfoList, double startPos, PageState state);
    private static void ResolveSizes(List`1<SizeInfo> sizeInfoList);
    private static void UpdateSizes(int start, int span, double size, List`1& sizeInfoList);
    private static void ResolveSizes(ScalableList`1<ColumnInfo> columnInfoList);
    private static void UpdateSizes(int start, int span, double size, bool unresolved, bool keepTogether, bool split, ScalableList`1<ColumnInfo> columnInfoList);
    private static void UpdateHidden(int start, int span, ScalableList`1<ColumnInfo> columnInfoList);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal void WriteEndItemToStream(RPLWriter rplWriter, int columnsOnPage, int rowsOnPage, bool hasLabelsOnCH, bool hasLabelsOnRH);
    private void WriteDetailRows(RPLWriter rplWriter, int columnsOnPage, int rowsOnPage);
    internal void WriteTablixMeasurements(RPLWriter rplWriter, int columnsOnPage, int rowsOnPage, bool hasLabelsOnCH, bool hasLabelsOnRH);
    private void WriteTablixMemberDefList(BinaryWriter spbifWriter, List`1<RPLTablixMemberDef> membersDefList, TablixRegion region);
    private void OpenDetailRow(RPLWriter rplWriter, int rowIndex, bool newRow);
    private void CloseRow(RPLWriter rplWriter);
    private void OpenHeaderRow(RPLWriter rplWriter, bool omittedRow, int headerStart);
    private void WriteMemberToStream(RPLWriter rplWriter, PageStructMemberCell structMember, PageMemberCell memberCell, int rowIndex, int colIndex, int rowSpan, int colSpan, TablixRegion region);
    private void WriteCornerCellToStream(RPLWriter rplWriter, PageCornerCell cornerCell, int rowIndex, int colIndex, int rowSpan, int colSpan);
    private void WriteTablixContent(RPLWriter rplWriter, int colsBeforeRH, int headerRowCols, int headerColumnRows, bool hasLabelsOnCH, bool hasLabelsOnRH);
    private void WriteDetailOffsetRows(RPLWriter rplWriter);
    private bool NeedWrite(PageMemberCell memberCell, int memberDefIndex, TablixRegion region);
    private void WriteRowMembersLTR(PageStructMemberCell structMember, int rowIndex, int colIndex, RPLWriter rplWriter, Int32& pageRowIndex, int pageColIndex, Boolean& newRow);
    private void WriteRowMembersLTR(PageMemberCell memberCell, PageStructMemberCell structMember, int rowIndex, int colIndex, RPLWriter rplWriter, Int32& pageRowIndex, int pageColIndex, Boolean& newRow);
    private void WriteRowMembersRTL(PageStructMemberCell structMember, int rowIndex, int colIndex, Int32& targetRow, Boolean& newRow, RPLWriter rplWriter, Int32& pageRowIndex, Int32& pageColIndex, Int32[] state, int stateIndex, int startColIndex);
    private bool WriteRowMembersRTL(PageMemberCell memberCell, PageStructMemberCell structMember, int rowIndex, int colIndex, Int32& targetRow, Boolean& newRow, RPLWriter rplWriter, Int32& pageRowIndex, Int32& pageColIndex, Int32[] state, int stateIndex, int startColIndex);
    private void CloseRTLRow(int stateIndex, Boolean& newRow, Int32& pageRowIndex, RPLWriter rplWriter);
    private void CloseRTLRow(Boolean& newRow, Int32& pageRowIndex, RPLWriter rplWriter);
    private void WriteCornerAndColumnMembers(RPLWriter rplWriter, int colsBeforeRH, int headerRowCols, int headerColumnRows, bool hasLabelsOnCH);
    private void WriteCornerOnly(RPLWriter rplWriter, int headerRowCols);
    private void WriteColMembers(PageStructMemberCell structMember, int targetRow, int rowIndex, int colIndex, RPLWriter rplWriter, int pageRowIndex, Int32& pageColIndex, Boolean& writeOmittedHeaders);
    private void WriteColMembers(PageMemberCell memberCell, PageStructMemberCell structMember, int targetRow, int rowIndex, int colIndex, RPLWriter rplWriter, int pageRowIndex, Int32& pageColIndex, Boolean& writeOmittedHeaders);
    private void WriteOmittedColHeadersRows(RPLWriter rplWriter, int rowIndex, int pageRowIndex, int headerRowCols);
    private void WriteOmittedColMembers(PageStructMemberCell structMember, int targetRow, int rowIndex, int targetLevel, int colIndex, RPLWriter rplWriter, int pageRowIndex, Int32& pageColIndex, Boolean& writeOmittedHeaders, Boolean& openRow);
    private void WriteOmittedColMembers(PageMemberCell memberCell, PageStructMemberCell structMember, int targetRow, int rowIndex, int targetLevel, int colIndex, RPLWriter rplWriter, int pageRowIndex, Int32& pageColIndex, Boolean& writeOmittedHeaders, Boolean& openRow);
    private void WriteOmittedColMembersLevel(PageMemberCell memberCell, PageStructMemberCell structMember, int targetLevel, int level, int colIndex, RPLWriter rplWriter, int pageRowIndex, Int32& pageColIndex, Boolean& writeOmittedHeaders, Boolean& openRow);
    private void WriteOmittedColMembersLevel(PageStructMemberCell structMember, int targetLevel, int level, int colIndex, RPLWriter rplWriter, int pageRowIndex, Int32& pageColIndex, Boolean& writeOmittedHeaders, Boolean& openRow);
    private void WriteCornerCells(int targetRow, RPLWriter rplWriter, int pageRowIndex, int pageColIndex);
    private int AddToPageCornerCells(Int32& rowsOnPage, RPLWriter rplWriter, PageContext pageContext, double pageLeft, double pageTop, double pageRight, double pageBottom, RepeatState repeatState);
    internal virtual void OmitBorderOnPageBreak(RPLWriter rplWriter, double pageLeft, double pageTop, double pageRight, double pageBottom);
    internal virtual bool AddToPage(RPLWriter rplWriter, PageContext pageContext, double pageLeft, double pageTop, double pageRight, double pageBottom, RepeatState repeatState);
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual bool ResolveKeepTogetherVertical(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, bool resolveItem);
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual bool ResolveKeepTogetherHorizontal(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, bool resolveItem);
    private void UpdateRows(double startInTablix, double endInTablix, bool delete);
    private void CreateVertically(PageContext pageContext, CreateItemsContext createItems, double startInTablix, double endInTablix, double topInParentSystem);
    private double CreateTablixItems(Tablix tablix, PageContext pageContext, CreateItemsContext createItems, double startInTablix, double endInTablix);
    private void AlignSplitColumnHeaders(int startRowIndex, int lastRowIndex, double startInTablix, double endInTablix, PageContext pageContext, bool normalize);
    private void MarkDetailRowVerticalState(int rowIndex, VerticalState state);
    private void MarkTablixRowsForVerticalPage(double startInTablix, double endInTablix, PageContext pageContext);
    private void AlignCornerCellsToPageVertical(int targetRowIndex, double startInTablix, double endInTablix, PageContext pageContext);
    private void NormalizeRowHeadersHeights(double startInTablix, double endInTablix, bool update);
    private bool TryRepeatColumnHeaders(double startInTablix, double endInTablix);
    private bool ResolveFooters(HeaderFooterRows prevFooters, Double& endInTablix, double delta, bool lastMember, Boolean& prevFootersOnPage);
    private bool ResolveHeaders(HeaderFooterRows prevHeaders, Double& endInTablix, double delta);
    private void MoveRowToNextPage(int rowIndex);
    private bool MarkSpanRHMemberOnPage(PageMemberCell memberCell, double startInTablix, double endInTablix, int rowIndex, int rowsOnPage, int spanContent, PageContext pageContext);
    private bool MarkLeafOnPage(Boolean& leafsOnPage, HeaderFooterRows prevHeaders, HeaderFooterRows prevFooters, HeaderFooterRows headers, HeaderFooterRows footers, Double& endInTablix, int rowIndex, bool lastMember, double spaceOnPage, Boolean& prevFootersOnPage);
    internal int MarkSpanRHMemberDetailRows(List`1<PageStructMemberCell> members, double startInTablix, double endInTablix, int rowIndex, int rowsOnPage, int spanContent, PageContext pageContext);
    private bool MarkSpanRHMember(PageMemberCell memberCell, RoundedDouble contentBottom, double startInTablix, double endInTablix, Int32& rowIndex, Int32& levelRowsOnPage, int rowsOnPage, int spanContent, PageContext pageContext);
    internal int MarkDetailRowsForVerticalPage(List`1<PageStructMemberCell> members, double startInTablix, Double& endInTablix, HeaderFooterRows prevHeaders, HeaderFooterRows prevFooters, Boolean& prevFootersOnPage, Boolean& leafsOnPage, int rowIndex, int rowsOnPage, PageContext pageContext);
    private int AdvanceInDynamicMember(PageStructDynamicMemberCell dynamicMember, int startRowIndex, Int32& endRowIndex, double endInTablix, int start, int end);
    private int AdvanceInDynamicMember(PageStructDynamicMemberCell dynamic, double endInTablix, int start, int end);
    internal HeaderFooterRows CollectFooters(List`1<PageStructMemberCell> members, int index, int rowIndex, Boolean& lastMember, Boolean& footersKeepWith);
    private HeaderFooterRows MergeHeadersFooters(HeaderFooterRows prevRows, HeaderFooterRows levelRows);
    private int BringHeadersFootersOnPage(HeaderFooterRows levelHeaders, HeaderFooterRows levelFooters);
    private void NormalizeHeights(List`1<PageStructMemberCell> members, int index, int rowIndex, double startInTablix, double endInTablix);
    private void NormalizeHeights(ScalableList`1<PageMemberCell> members, int index, int rowIndex, double startInTablix, double endInTablix);
    private bool MoveKeepWithHeaders(List`1<PageStructMemberCell> members, Int32& index, int rowIndex, double pageHeight, HeaderFooterRows prevHeaders, HeaderFooterRows prevFooters, HeaderFooterRows headers, bool leafsOnPage, bool prevFootersOnPage, PageContext pageContext);
    private int MoveToNextPageWithHeaders(PageContext pageContext, PageMemberCell memberInstance, HeaderFooterRows currHeaders, HeaderFooterRows headers, HeaderFooterRows prevHeaders);
    private double SpaceNeededForThisPage(HeaderFooterRows prevHeaders, HeaderFooterRows prevFooters, HeaderFooterRows headers, bool lastMember, bool leafsOnPage);
    private double SpaceNeededForFullPage(HeaderFooterRows prevHeaders, HeaderFooterRows prevFooters, bool lastMember);
    private void UpdateColumns(double startInTablix, double endInTablix);
    private void AlignCornerCellsToPageHorizontally(int targetColIndex, double startInTablix, double endInTablix, PageContext pageContext);
    private void CornerRowsHorizontalSize(PageContext pageContext);
    private bool TryRepeatRowHeaders(double startInTablix, double endInTablix, Int32& colIndex);
    private void CalculateContentHorizontally(double startInTablix, double endInTablix, PageContext pageContext);
    private int FindRHColumnSpanHorizontal(double startInTablix, double endInTablix, Int32& firstColIndex, Double& rowHeadersWidth);
    private void MarkColumnHorizontalState(int colIndex, HorizontalState state);
    private void MarkSplitRowHeaders(double startInTablix, double endInTablix, PageContext pageContext);
    private void AlignSplitRowHeaders(int firstColIndex, int lastColIndex, double startInTablix, double endInTablix, PageContext pageContext, bool normalize);
    private void MarkTablixRTLColumnsForHorizontalPage(double startInTablix, double endInTablix, PageContext pageContext);
    private void MarkTablixLTRColumnsForHorizontalPage(double startInTablix, double endInTablix, bool rowHeadersOnPageInFlow, PageContext pageContext);
    private void MarkTablixColumnsForHorizontalPage(double startInTablix, double endInTablix, PageContext pageContext);
    private int MarkDetailColsForHorizontalPage(List`1<PageStructMemberCell> members, double startInTablix, double endInTablix, double realEndInTablix, int colIndex, int colsOnPage, int spanContent, int stopIndex, bool allowSpanAtRight, PageContext pageContext);
    private bool MarkSpanCHMemberOnPage(PageMemberCell memberCell, double startInTablix, double endInTablix, double realEndInTablix, int colIndex, int colsOnPage, int spanContent, int stopIndex, bool allowSpanAtRight, PageContext pageContext);
    private void NormalizeColHeadersWidths(double startInTablix, double endInTablix, bool update);
    private void NormalizeColHeadersWidths(double startInTablix, double endInTablix, bool update, int startColIndex);
    private void NormalizeWidths(List`1<PageStructMemberCell> members, int index, int colIndex, double startInTablix, double endInTablix);
    private void NormalizeWidths(ScalableList`1<PageMemberCell> members, int index, int colIndex, double startInTablix, double endInTablix);
    private bool StaticDecendents(TablixMemberCollection children);
    private int TablixMembersDepthTree(TablixMemberCollection memberCollection);
    private int AddTablixMemberDef(Hashtable& memberDefIndexes, List`1& memberDefList, TablixMember tablixMember, bool borderHeader, int defTreeLevel);
    internal bool AlwayHiddenMember(Tablix tablix, TablixMember member, Visibility visibility, bool evalPageHeaderFooter);
    internal bool EnterColMemberInstance(TablixMember colMember, Visibility visibility, bool evalPageHeaderFooter);
    internal void LeaveColMemberInstance(TablixMember colMember, Visibility visibility, bool evalPageHeaderFooter);
    internal bool EnterRowMember(TablixMember rowMember, Visibility visibility, bool evalPageHeaderFooter);
    internal void LeaveRowMember(TablixMember rowMember, Visibility visibility, bool evalPageHeaderFooter);
    internal void LeaveRowMember(TablixMember rowMember, Visibility visibility, bool evalPageHeaderFooter, bool currentlyHidden);
    internal bool EnterRowMemberInstance(TablixMember rowMember, Visibility visibility, bool evalPageHeaderFooter);
    internal void LeaveRowMemberInstance(TablixMember rowMember, Visibility visibility, bool evalPageHeaderFooter, bool currentlyHidden);
    internal PageMemberCell AddColMember(TablixMember colMember, int rowIndex, int rowSpan, int colSpan, LevelInfo childInfo, PageContext pageContext, double updateHeight);
    internal PageMemberCell AddTotalColMember(TablixMember colMember, int rowIndex, int rowSpan, int colSpan, LevelInfo parentInfo, LevelInfo childInfo, PageContext pageContext);
    internal PageMemberCell AddRowMember(TablixMember rowMember, int colIndex, int rowSpan, int colSpan, LevelInfo childInfo, PageContext pageContext, double updateWidth);
    internal PageMemberCell AddTotalRowMember(TablixMember rowMember, int colIndex, int rowSpan, int colSpan, LevelInfo parentInfo, LevelInfo childInfo, PageContext pageContext);
    internal void CreateCornerCell(PageItem topItem, CellContents cellContents, int rowIndex, int colIndex, double sourceWidth, double sourceHeight);
    private bool CreateDetailCell(Tablix tablix, TablixMember colMemberParent, int colGridIndex, RowInfo rowInfo, PageContext pageContext);
    private void UpdateTopItemKT(PageItem topItem, RowInfo rowInfo, PageDetailCell currCell);
    private bool UpdateDetailCell(Tablix tablix, TablixMember colMemberParent, int colGridIndex, RowInfo rowInfo, double startInTablix, double endInTablix, Int32& detailCellIndex, PageContext pageContext);
    internal void CreateCorner(TablixCorner corner, PageContext pageContext);
    private void AddCornerCell(TablixCornerCell tablixCornerCell, int rowIndex, int colIndex, PageContext pageContext);
    private double CreateColumnsHeaders(Tablix tablix, PageContext pageContext);
    private int CreateColumnMemberChildren(Tablix tablix, TablixMember colMemberParent, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, LevelInfo& parentLevelInfo, PageContext pageContext);
    private int CreateColumnMemberTotals(List`1<int> totals, TablixMemberCollection columnMembers, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, LevelInfo parentLevelInfo, PageContext pageContext);
    private int TraverseColumnMembers(Tablix tablix, TablixMember colMemberParent, int parentColIndex, RowInfo currRowInfo, bool create, double startInTablix, double endInTablix, Int32& detailCellIndex, Int32& visibleSpan, List`1<int> detailCellsState, PageContext pageContext);
    private int TraverseTotalColumnMembers(Tablix tablix, List`1<int> totals, TablixMemberCollection columnMembers, int parentColIndex, RowInfo currRowInfo, bool create, double startInTablix, double endInTablix, Int32& detailCellIndex, Int32& visibleSpan, PageContext pageContext);
    private int CreateTablixRows(Tablix tablix, TablixMember rowMemberParent, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, List`1& pageStructMemberCell, bool ignoreTotals, Boolean& finishLevel, bool parentHasFooters, CreateItemsContext createItems, double startInTablix, double endInTablix, PageContext pageContext);
    private void SetPageBreakAndKeepWith(int index);
    private int MergeToggledDetailRows(int destIndex, int srcIndex, List`1<DetailRowState> detailRowsState);
    private int CreateRowMemberChildren(Tablix tablix, TablixMember rowMemberParent, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, int sourceIndex, bool resetContext, bool parentHasFooters, LevelInfo parentLevelInfo, PageContext pageContext);
    private int CreateRowMemberTotals(Tablix tablix, List`1<int> totals, TablixMemberCollection rowMembers, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, bool parentHasFooters, LevelInfo parentLevelInfo, PageContext pageContext);
    private RowInfo CreateDetailRow(Tablix tablix, TablixMember rowMemberParent, int parentRowIndex, int parentColIndex, PageContext pageContext);
    private void UpdateDetailRow(Tablix tablix, TablixMember rowMemberParent, RowInfo currRowInfo, int parentColIndex, double startInTablix, double endInTablix, PageContext pageContext);
    private int CreateDynamicRowMemberChildren(Tablix tablix, TablixMember rowMemberParent, int defTreeLevel, int sourceIndex, int parentRowIndex, int parentColIndex, bool parentHasFooters, LevelInfo parentLevelInfo, PageContext pageContext);
    private bool ApplyDynamicPageBreaks(TablixMember rowMember, int rowIndex, bool memberHasFooters, Boolean& keepWith, Boolean& checkVisibleChildren);
    private bool KeepTogetherStaticHeader(TablixMemberCollection rowMembers, TablixMember staticMember, int staticIndex, Boolean& keepWithGroup);
    private bool DynamicWithVisibleChildren(TablixMember rowMemberParent);
    private bool StaticWithVisibleChildren(TablixMember rowMemberParent);
    private bool MemberWithVisibleChildren(TablixMember rowMemberParent, Boolean& childPageBreakAtStart);
    private bool CheckAndAdvanceToNextVisibleInstance(Tablix tablix, TablixMember rowMember, TablixDynamicMemberInstance rowDynamicInstance);
    private bool AdvanceToNextVisibleInstance(Tablix tablix, TablixMember rowMember, TablixDynamicMemberInstance rowDynamicInstance);
    private int CheckKeepWithGroupDown(TablixMemberCollection rowMembers, int start, KeepWithGroup keepWith, Boolean& repeatWith);
    private int CreateKeepWithRowMember(Tablix tablix, TablixMember rowMemberParent, int defTreeLevel, int parentRowIndex, int parentColIndex, int start, int end, bool keepWith, bool setPrevHeader, LevelInfo parentLevelInfo, PageContext pageContext);
    private bool RenderRowMemberInstance(TablixMember rowMember);
    private bool get_NoRows();
    private void set_NoRows(bool value);
    private bool get_IsLTR();
    private void set_IsLTR(bool value);
    private bool get_RepeatColumnHeaders();
    private void set_RepeatColumnHeaders(bool value);
    private bool get_RepeatedColumnHeaders();
    private void set_RepeatedColumnHeaders(bool value);
    private bool get_AddToPageColumnHeaders();
    private void set_AddToPageColumnHeaders(bool value);
    private bool get_SplitColumnHeaders();
    private void set_SplitColumnHeaders(bool value);
    private bool get_RepeatRowHeaders();
    private void set_RepeatRowHeaders(bool value);
    private bool get_AddToPageRowHeaders();
    private void set_AddToPageRowHeaders(bool value);
    private bool get_SplitRowHeaders();
    private void set_SplitRowHeaders(bool value);
    private bool get_ColumnHeadersCreated();
    private void set_ColumnHeadersCreated(bool value);
    private bool get_RowHeadersCreated();
    private void set_RowHeadersCreated(bool value);
    private bool GetFlagValue(TablixState flag);
    private void SetFlagValue(TablixState flag, bool value);
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.TextBox : PageItem {
    private CalcSize m_calcSizeState;
    private double m_padHorizontal;
    private double m_padVertical;
    private double m_padTop;
    private List`1<Paragraph> m_paragraphs;
    [StaticReferenceAttribute]
private TextBox m_richTextBox;
    private TextBoxState m_textBoxState;
    private TextBoxOffset m_pageStartOffset;
    private TextBoxOffset m_pageEndOffset;
    private TextBoxOffset m_nextPageStartOffset;
    private double m_contentOffset;
    private double m_contentBottom;
    private float m_contentHeight;
    [StaticReferenceAttribute]
private static Declaration m_declaration;
    internal CalcSize CalcSizeState { get; internal set; }
    internal string SourceID { get; }
    public int Size { get; }
    public TextAlignments DefaultAlignment { get; }
    public Directions Direction { get; }
    public WritingModes WritingMode { get; }
    public Color BackgroundColor { get; }
    public bool CanGrow { get; }
    private TextBox(ReportItem source, PageContext pageContext);
    internal TextBox(TextBox source, PageContext pageContext);
    internal TextBox(DataRegion source, PageContext pageContext);
    internal TextBox(SubReport source, PageContext pageContext);
    private static TextBox();
    internal CalcSize get_CalcSizeState();
    internal void set_CalcSizeState(CalcSize value);
    internal virtual string get_SourceID();
    public virtual int get_Size();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    private bool GetAlignmentRight(Style style, StyleInstance styleInstance);
    private void CreateFullStyle(PageContext pageContext);
    protected virtual void DetermineVerticalSize(PageContext pageContext, double topInParentSystem, double bottomInParentSystem, List`1<PageItem> ancestors, Boolean& anyAncestorHasKT, bool hasUnpinnedAncestors);
    protected virtual void DetermineHorizontalSize(PageContext pageContext, double leftInParentSystem, double rightInParentSystem, List`1<PageItem> ancestors, bool anyAncestorHasKT, bool hasUnpinnedAncestors);
    private void CalculateOffsetFromHeight();
    internal virtual bool AddToPage(RPLWriter rplWriter, PageContext pageContext, double pageLeft, double pageTop, double pageRight, double pageBottom, RepeatState repeatState);
    internal virtual void ResetHorizontal(bool spanPages, Nullable`1<double> width);
    private void UpdateState();
    private bool HideDuplicate(TextBox textBox, PageContext pageContext, bool splitsAcrossVerticalPage);
    private object GetOriginalValue(PageContext pageContext);
    internal virtual void RegisterTextBoxes(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void CacheNonSharedProperties(PageContext pageContext);
    internal void ReadNonSharedValuesFromCache(PageContext pageContext, String& value, TypeCode& typeCode, Object& originalValue);
    internal void ReadNonSharedValuesFromCache(BinaryReader reader, String& value, TypeCode& typeCode, Object& originalValue);
    internal virtual void CopyCachedData(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    private bool SimpleValuesIsSharedNonNull(TextBox textBoxDef);
    private string CalculateSimpleValue(bool isNonShared, PageContext pageContext);
    private void CalculateSimpleGlyph(PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, PageContext pageContext);
    private bool WriteSimpleValue(RPLTextBoxProps textBoxProps, PageContext pageContext);
    private TypeCode GetTypeCode(TypeCode sharedTypeCode, TextBoxInstance textBox, Boolean& changed);
    private void WriteParagraphs(PageContext pageContext, Dictionary`2<string, List`1<TextRunItemizedData>> textBoxItemizedData);
    private void WriteParagraph(RPLTextBox tb, int index, bool cacheRichData, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, PageContext pageContext, Dictionary`2<string, List`1<TextRunItemizedData>> textBoxItemizedData);
    private List`1<long> WriteParagraphs(BinaryWriter spbifWriter, PageContext pageContext, Dictionary`2<string, List`1<TextRunItemizedData>> textBoxItemizedData);
    private void WriteParagraph(BinaryWriter spbifWriter, int index, bool cacheRichData, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, List`1<long> offsets, PageContext pageContext, Dictionary`2<string, List`1<TextRunItemizedData>> textBoxItemizedData);
    private bool WriteOriginalValue(BinaryWriter spbifWriter, TypeCode typeCode, object value);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteNonSharedStyle(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, PageContext pageContext);
    internal virtual RPLStyleProps WriteNonSharedStyle(Style styleDef, StyleInstance style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProps(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    private TextBox GetRichTextBox();
    private void InitParagraphs();
    public sealed virtual TextAlignments get_DefaultAlignment();
    public sealed virtual Directions get_Direction();
    public sealed virtual WritingModes get_WritingMode();
    public sealed virtual Color get_BackgroundColor();
    public sealed virtual bool get_CanGrow();
    public sealed virtual void DrawTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle);
    public sealed virtual void DrawClippedTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle, UInt32 fontColorOverride, Rectangle clipRect);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.TextBoxSharedInfo : object {
    private int m_pageNumber;
    internal int PageNumber { get; internal set; }
    internal TextBoxSharedInfo(int pageNumber);
    internal int get_PageNumber();
    internal void set_PageNumber(int value);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.TextBoxState : object {
    private TextBoxInternalState m_state;
    public byte State { get; public set; }
    public Directions Direction { get; public set; }
    public TextAlignments DefaultTextAlign { get; public set; }
    public WritingModes WritingMode { get; public set; }
    public VerticalAlignments VerticalAlignment { get; public set; }
    public bool SpanPages { get; public set; }
    public bool ResetHorizontalState { get; public set; }
    public byte get_State();
    public void set_State(byte value);
    public Directions get_Direction();
    public void set_Direction(Directions value);
    public TextAlignments get_DefaultTextAlign();
    public void set_DefaultTextAlign(TextAlignments value);
    public WritingModes get_WritingMode();
    public void set_WritingMode(WritingModes value);
    public VerticalAlignments get_VerticalAlignment();
    public void set_VerticalAlignment(VerticalAlignments value);
    public bool get_SpanPages();
    public void set_SpanPages(bool value);
    public bool get_ResetHorizontalState();
    public void set_ResetHorizontalState(bool value);
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.TextRun : object {
    [StaticReferenceAttribute]
private static Declaration m_declaration;
    [StaticReferenceAttribute]
private TextRun m_source;
    private Dictionary`2<byte, object> m_styles;
    private string m_text;
    private string m_toolTip;
    private Nullable`1<byte> m_markup;
    private List`1<string> m_hyperlinks;
    private string m_uniqueName;
    private List`1<int> m_splitIndices;
    private int m_startCharacterOffset;
    private string m_fontKey;
    public string Text { get; public set; }
    public string DefinitionText { get; }
    public List`1<int> SplitIndices { get; }
    public string FontFamily { get; }
    public float FontSize { get; }
    public Color Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public TextDecorations TextDecoration { get; }
    public int IndexInParagraph { get; }
    public string FontKey { get; public set; }
    public int Size { get; }
    internal TextRun(TextRunInstance instance, bool hideDuplicates);
    private static TextRun();
    public string get_Text();
    public void set_Text(string value);
    public string get_DefinitionText();
    public List`1<int> get_SplitIndices();
    public sealed virtual string get_FontFamily();
    public sealed virtual float get_FontSize();
    public sealed virtual Color get_Color();
    public sealed virtual bool get_Bold();
    public sealed virtual bool get_Italic();
    public sealed virtual TextDecorations get_TextDecoration();
    public sealed virtual int get_IndexInParagraph();
    public sealed virtual string get_FontKey();
    public sealed virtual void set_FontKey(string value);
    public sealed virtual void AddSplitIndex(int index);
    public void ClearTo(int splitIndex);
    internal TextRun GetRichTextRun();
    public RPLTextRun GetRPLTextRun(PageContext pageContext, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, int previousCount, List`1<TextRun> richTextRuns);
    internal string GetStringValue(string fullValue, TextBoxOffset startPosition, TextBoxOffset endPosition, int previousRunCount, List`1<TextRun> richTextRuns, TextRunItemizedData& glyphData);
    internal TextRunItemizedData GetGlyphValue(string fullValue, int previousRunCount, List`1<TextRun> richTextRuns);
    private TextRunItemizedData CreateGlyphData(int startIndex, int start, int end, string fullValue, List`1<TextRun> richTextRuns);
    private void WriteElementProps(RPLTextRunProps props, PageContext pageContext, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, int previousRunCount, List`1<TextRun> richTextRuns);
    internal long WriteToStream(BinaryWriter writer, PageContext pageContext, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, int previousRunCount, List`1<TextRun> richTextRuns);
    private void WriteElementProps(BinaryWriter spbifWriter, PageContext pageContext, bool hideDuplicates, TextBoxOffset startPosition, TextBoxOffset endPosition, int previousRunCount, List`1<TextRun> richTextRuns);
    public void WriteNonSharedStyles(StyleWriter writer);
    internal void WriteActions(BinaryWriter spbifWriter);
    internal void WriteSharedStyles(StyleWriter writer, Style style);
    public sealed virtual int get_Size();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.Rendering.HPBProcessing.Utility : object {
    internal static bool IsBold(FontWeights fontWeight);
    internal static bool IsNullOrEmpty(List`1<T> list);
    internal static void AddInstanceStyles(StyleInstance styleInst, Dictionary`2& styles);
    internal static void WriteSharedStyles(StyleWriter writeTo, Style styleDef);
    internal static void WriteStyleProperty(StyleWriter writeTo, Style style, StyleAttributeNames name);
    internal static void WriteStyleProperty(StyleWriter writeTo, StyleAttributeNames styleAtt, ReportProperty prop);
    internal static byte ConvertROMTORPL(StyleAttributeNames ROMType);
    internal static void SetStyle(byte rplId, object styleProp, StyleWriter writer);
    internal static double GetSizePropertyValue(ReportSizeProperty sizeProp, ReportSize instanceValue);
    internal static int GetIntPropertyValue(ReportIntProperty intProp, Nullable`1<int> instanceValue);
    internal static void WriteReportSize(BinaryWriter spbifWriter, byte rplid, ReportSize value);
    internal static void AddStyle(byte rplId, ReportIntProperty prop, StyleWriter writer);
    internal static void AddStyle(byte rplId, ReportStringProperty prop, StyleWriter writer);
    internal static void AddStyle(byte rplId, ReportSizeProperty prop, StyleWriter writer);
    internal static void AddStyle(byte rplId, ReportProperty prop, StyleWriter writer);
    internal static void AddStyle(byte rplId, ReportColorProperty prop, StyleWriter writer);
    internal static string GetStringProp(byte rplId, StyleAttributeNames styleAttributeName, Style styleDef, Dictionary`2<byte, object> styles);
    internal static double GetSizeProp(byte rplId, StyleAttributeNames styleAttributeName, float defaultValue, Style styleDef, Dictionary`2<byte, object> styles);
    internal static Color GetColorProp(byte rplId, StyleAttributeNames styleAttributeName, Color defaultColor, Style styleDef, Dictionary`2<byte, object> styles);
    internal static Nullable`1<byte> GetEnumProp(byte rplId, StyleAttributeNames styleAttributeName, Style styleDef, Dictionary`2<byte, object> styles);
    internal static Nullable`1<byte> GetNonCompiledEnumProp(byte styleAttributeRplId, StyleAttributeNames styleAttributeName, Style style, StyleInstance styleIntance);
    public static ReportSize ReadReportSize(IntermediateFormatReader reader);
    public static void WriteReportSize(IntermediateFormatWriter writer, ReportSize reportSize);
    public static int ReportSizeItemSize(ReportSize reportSize);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.PageTableCell : object {
    private RoundedFloat m_x;
    private RoundedFloat m_y;
    private RoundedFloat m_dx;
    private RoundedFloat m_dy;
    private int m_rowSpan;
    private int m_colSpan;
    private bool m_keepRightBorder;
    private bool m_keepBottomBorder;
    private bool m_fInUse;
    private bool m_fEaten;
    private bool m_vertMerge;
    private bool m_horzMerge;
    private bool m_firstHorzMerge;
    private bool m_firstVertMerge;
    private int m_usedCell;
    private RPLMeasurement m_measurement;
    private RPLLine m_borderLeft;
    private RPLLine m_borderTop;
    private RPLLine m_borderRight;
    private RPLLine m_borderBottom;
    internal bool VertMerge { get; internal set; }
    internal bool HorzMerge { get; internal set; }
    internal bool FirstHorzMerge { get; internal set; }
    internal bool FirstVertMerge { get; internal set; }
    internal bool KeepRightBorder { get; internal set; }
    internal bool KeepBottomBorder { get; internal set; }
    internal bool HasBorder { get; }
    internal RPLLine BorderLeft { get; internal set; }
    internal RPLLine BorderRight { get; internal set; }
    internal RPLLine BorderBottom { get; internal set; }
    internal RPLLine BorderTop { get; internal set; }
    internal int UsedCell { get; internal set; }
    internal RoundedFloat XValue { get; }
    internal RoundedFloat DXValue { get; }
    internal RoundedFloat YValue { get; }
    internal RoundedFloat DYValue { get; }
    internal int RowSpan { get; internal set; }
    internal int ColSpan { get; internal set; }
    internal bool InUse { get; internal set; }
    internal bool Eaten { get; internal set; }
    internal RPLMeasurement Measurement { get; }
    internal bool NeedsRowHeight { get; }
    internal PageTableCell(float x, float y, float dx, float dy);
    internal bool get_VertMerge();
    internal void set_VertMerge(bool value);
    internal bool get_HorzMerge();
    internal void set_HorzMerge(bool value);
    internal bool get_FirstHorzMerge();
    internal void set_FirstHorzMerge(bool value);
    internal bool get_FirstVertMerge();
    internal void set_FirstVertMerge(bool value);
    internal bool get_KeepRightBorder();
    internal void set_KeepRightBorder(bool value);
    internal bool get_KeepBottomBorder();
    internal void set_KeepBottomBorder(bool value);
    internal bool get_HasBorder();
    internal RPLLine get_BorderLeft();
    internal void set_BorderLeft(RPLLine value);
    internal RPLLine get_BorderRight();
    internal void set_BorderRight(RPLLine value);
    internal RPLLine get_BorderBottom();
    internal void set_BorderBottom(RPLLine value);
    internal RPLLine get_BorderTop();
    internal void set_BorderTop(RPLLine value);
    internal int get_UsedCell();
    internal void set_UsedCell(int value);
    internal RoundedFloat get_XValue();
    internal RoundedFloat get_DXValue();
    internal RoundedFloat get_YValue();
    internal RoundedFloat get_DYValue();
    internal int get_RowSpan();
    internal void set_RowSpan(int value);
    internal int get_ColSpan();
    internal void set_ColSpan(int value);
    internal bool get_InUse();
    internal void set_InUse(bool value);
    internal bool get_Eaten();
    internal void set_Eaten(bool value);
    internal RPLMeasurement get_Measurement();
    internal void MarkCellEaten(int index);
    internal void MarkCellUsed(RPLMeasurement measurement, int colSpan, int rowSpan, int index);
    internal bool get_NeedsRowHeight();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.PageTableCellList : ArrayList {
    internal PageTableCell Item { get; }
    internal PageTableCell get_Item(int index);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.PageTableLayout : object {
    private static float LINETHRESHOLD;
    public static double RoundDelta;
    private int m_nrCols;
    private int m_nrRows;
    private PageTableCellList m_tableGrid;
    private bool m_bandTable;
    private int m_firstVisibleRow;
    private int m_firstVisibleColumn;
    private bool m_needExtraRow;
    internal bool BandTable { get; internal set; }
    internal int NrCols { get; internal set; }
    internal int NrRows { get; internal set; }
    internal PageTableLayout(int nrCols, int nrRows);
    internal void AddCell(float x, float y, float dx, float dy);
    internal bool get_BandTable();
    internal void set_BandTable(bool value);
    internal int get_NrCols();
    internal void set_NrCols(int value);
    internal int get_NrRows();
    internal void set_NrRows(int value);
    internal PageTableCell GetCell(int index);
    internal PageTableCell GetCell(int row, int col);
    public static void GenerateTableLayout(RPLMeasurement[] repItemCollection, float ownerWidth, float ownerHeight, float delta, PageTableLayout& tableLayout);
    internal bool NeedExtraRow();
    internal static bool SkipReportItem(RPLMeasurement measurement);
    private static void FillXArray(RPLMeasurement[] reportItemCol, float parentWidth, List`1<float> leftPosition);
    private static void FillYArray(RPLMeasurement[] repItemColl, float parentHeight, List`1<float> topPosition, float delta);
    private static float ReportItemRightValue(RPLMeasurement currReportItem);
    private static float ReportItemBottomValue(RPLMeasurement currReportItem);
    internal bool AreSpansInColOne();
    private void AttachVerticalBorder(int xCellFound, int yCellFound, RPLMeasurement measurement, RPLLine currReportItem, bool leftBorder);
    private void AttachHorizontalBorder(int xCellFound, int yCellFound, RPLMeasurement measurement, RPLLine currReportItem, bool topBorder);
    private bool FindRItemCell(RPLMeasurement currReportItem, Int32& xCellFound, Int32& yCellFound, double delta);
    private void AttachRItem(int xCellFound, int yCellFound, int colSpan, int rowSpan, RPLMeasurement measurement);
    private void ComputeColRowSpan(RPLMeasurement reportItem, int xCellFound, int yCellFound, Int32& colSpans, Int32& rowSpans);
    private void FillAndFindOverlap(RPLMeasurement[] repItemCollection, double delta);
    internal bool GetBool(object b);
    internal void EmptyRowsCells();
    internal void AttachReportItems(RPLMeasurement[] reportItemCol, double delta);
    internal bool EmptyRow(RPLMeasurement[] repItemColl, bool ignoreLines, int rowIndex, bool renderHeight, Int32& skipHeight);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.RoundedFloat : object {
    internal float m_value;
    internal float Value { get; internal set; }
    public RoundedFloat(float x);
    internal float get_Value();
    internal void set_Value(float value);
    public static bool op_Equality(RoundedFloat x1, float x2);
    public static bool op_GreaterThan(RoundedFloat x1, float x2);
    public static bool op_GreaterThanOrEqual(RoundedFloat x1, float x2);
    public static bool op_LessThan(RoundedFloat x1, float x2);
    public static bool op_LessThanOrEqual(RoundedFloat x1, float x2);
    public static bool op_Inequality(RoundedFloat x1, float x2);
    public static RoundedFloat op_Addition(RoundedFloat x1, float x2);
    public static RoundedFloat op_Subtraction(RoundedFloat x1, float x2);
    public static RoundedFloat op_Explicit(float x);
    public virtual bool Equals(object x1);
    public virtual int GetHashCode();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.Border : object {
    internal int RowZIndex;
    internal int ColumnZIndex;
    internal int RowIndex;
    internal int ColumnIndex;
    internal List`1<Operation> Operations;
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.DrawLineOp : Operation {
    internal float Width;
    internal BorderStyles Style;
    internal Color Color;
    internal float X1;
    internal float Y1;
    internal float X2;
    internal float Y2;
    internal DrawLineOp(Color color, float width, BorderStyles style, float x1, float y1, float x2, float y2);
    internal virtual void Perform(WriterBase writer);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.DrawRectangleOp : Operation {
    internal float Width;
    internal BorderStyles Style;
    internal Color Color;
    internal RectangleF Rectangle;
    internal DrawRectangleOp(Color color, float width, BorderStyles style, RectangleF rectangle);
    internal virtual void Perform(WriterBase writer);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.EmbeddedFont : object {
    private int m_objectId;
    private List`1<PDFFont> m_fonts;
    internal int ObjectId { get; }
    internal List`1<PDFFont> PDFFonts { get; }
    internal EmbeddedFont(int objectId);
    internal int get_ObjectId();
    internal List`1<PDFFont> get_PDFFonts();
    internal UInt16[] GetGlyphIdArray();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.FillPolygonOp : Operation {
    internal Color Color;
    internal PointF[] Polygon;
    internal FillPolygonOp(Color color, PointF[] polygon);
    internal virtual void Perform(WriterBase writer);
}
internal enum Microsoft.ReportingServices.Rendering.ImageRenderer.FontEmbedding : Enum {
    public int value__;
    public static FontEmbedding None;
    public static FontEmbedding Subset;
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.FontPackage : object {
    private static ushort OS2V0_WEIGHTCLASS_OFFSET;
    private static ushort OS2V0_SELECTION_OFFSET;
    private static ushort SIZEOF_OS2V0_TABLE;
    private static UInt32 TAG_TABLE_NAME_OS2V0;
    private static byte TMPF_TRUETYPE;
    private static int FW_SEMIBOLD;
    private static ushort SFNT_DIRECTORYENTRY_TAG;
    private static ushort SFNT_DIRECTORYENTRY_CHECKSUM;
    private static ushort SFNT_DIRECTORYENTRY_TABLEOFFSET;
    private static ushort SFNT_DIRECTORYENTRY_TABLELENGTH;
    private static ushort SIZEOF_SFNT_DIRECTORYENTRY;
    private static ushort SFNT_OFFSETTABLE_NUMOFFSETS;
    private static ushort SIZEOF_SFNT_OFFSETTABLE;
    private static UInt32 tag_TTCF;
    private static UInt32 GDI_ERROR;
    private static ushort TTFCFP_FLAGS_SUBSET;
    private static ushort TTFCFP_FLAGS_GLYPHLIST;
    private static int EMBED_PREVIEWPRINT;
    private static int EMBED_EDITABLE;
    private static int EMBED_INSTALLABLE;
    private static int EMBED_NOEMBEDDING;
    private static int E_NONE;
    private static void ThrowNativeException(string source, int error);
    private static void CheckGetFontDataResult(UInt32 result);
    private static ushort ToUInt16BigEndian(Byte[] buffer, ushort offset);
    private static bool GetWeightClassAndSelection(IntPtr hdc, UInt16& weightClass, UInt16& selection);
    internal static void CheckSimulatedFontStyles(IntPtr hdc, TEXTMETRIC textMetric, Boolean& simulateItalic, Boolean& simulateBold);
    internal static bool CheckEmbeddingRights(IntPtr hdc);
    internal static Byte[] Generate(IntPtr hdc, UInt16[] glyphIdArray);
    private static Byte[] Swap(Byte[] source);
    private static Byte[] GetTTCFontData(IntPtr hdc, UInt32& fontDataLength);
    private static IntPtr AllocateFontBufferMemory(IntPtr size);
    private static IntPtr ReAllocateFontBufferMemory(IntPtr memPointer, IntPtr size);
    private static void FreeFontBufferMemory(IntPtr memPointer);
    private static UInt32 GetFontData(IntPtr hdc, UInt32 dwTable, UInt32 dwOffset, IntPtr lpvBuffer, UInt32 cbData);
    private static UInt32 GetFontData(IntPtr hdc, UInt32 dwTable, UInt32 dwOffset, Byte[] lpvBuffer, UInt32 cbData);
    private static short CreateFontPackage(IntPtr puchSrcBuffer, UInt32 ulSrcBufferSize, IntPtr& puchFontPackageBuffer, UInt32& pulFontPackageBufferSize, UInt32& pulBytesWritten, ushort usFlags, ushort usTTCIndex, ushort usSubsetFormat, ushort usSubsetLanguage, ushort usSubsetPlatform, ushort usSubsetEncoding, UInt16[] pusSubsetKeepList, ushort usSubsetKeepListCount, Delegate lpfnAllocate, Delegate lpfnReAllocate, Delegate lpfnFree, IntPtr lpvReserved);
    private static int TTGetEmbeddingType(IntPtr hdc, UInt32& status);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.GDIBrush : object {
    internal static Brush GetBrush(Dictionary`2<string, Brush> brushes, Color color);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.GDIFont : object {
    private Font m_font;
    private float m_height;
    private string m_family;
    private float m_size;
    private string m_key;
    private string m_writerKey;
    internal Font Font { get; }
    internal float Height { get; }
    internal string Family { get; }
    internal float Size { get; }
    internal string Key { get; }
    internal string WriterKey { get; }
    internal GDIFont(string key, Font font, float height);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    internal Font get_Font();
    internal float get_Height();
    internal string get_Family();
    internal float get_Size();
    internal string get_Key();
    internal string get_WriterKey();
    internal static GDIFont GetOrCreateFont(Dictionary`2<string, GDIFont> gdiFonts, string fontFamily, float fontSize, FontWeights fontWeight, FontStyles fontStyle, TextDecorations textDecoration);
    internal static GDIFont GetOrCreateFont(string fontKey, Dictionary`2<string, GDIFont> gdiFonts, GraphicsBase graphicsBase, string fontFamily, float fontSize, FontWeights fontWeight, FontStyles fontStyle, TextDecorations textDecoration);
    private static string GetKey(string fontFamily, float fontSize, FontWeights fontWeight, FontStyles fontStyle, TextDecorations textDecoration);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.GDIPen : object {
    private static string GetKey(Color color, float size, BorderStyles style);
    internal static Pen GetPen(Dictionary`2<string, Pen> pens, Color color, float size, BorderStyles style);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.Graphics : GraphicsBase {
    private EncoderParameters m_encoderParameters;
    private Bitmap m_firstImage;
    protected Win32ObjectSafeHandle m_hBitmap;
    protected Win32DCSafeHandle m_hdcBitmap;
    private static ImageCodecInfo[] m_encoders;
    internal Graphics(float dpiX, float dpiY);
    private static Graphics();
    protected virtual void Dispose(bool disposing);
    internal virtual void Save(Stream outputStream, FormatEncoding outputFormat);
    internal void NewPage(float pageWidth, float pageHeight, int dpiX, int dpiY);
    private void HandleError(Win32DCSafeHandle handle);
    private void HandleError(Win32ObjectSafeHandle handle);
    private void HandleError(IntPtr handle);
    internal void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    internal void DrawImage(Image image, RectangleF destination, RectangleF source);
    internal void DrawImage(Image image, RectangleF destination, RectangleF source, bool tile);
    internal void DrawRectangle(Pen pen, RectangleF rectangle);
    internal void FillPolygon(Brush brush, PointF[] polygon);
    internal void FillRectangle(Brush brush, RectangleF rectangle);
    internal void ResetClipAndTransform(RectangleF bounds);
    internal void RotateTransform(float angle);
    internal void EndReport(FormatEncoding outputFormat);
    protected static void SetGraphicsProperties(Graphics graphics);
    private static ImageCodecInfo GetEncoderInfo(string mimeType);
    private static ImageCodecInfo[] GetGdiImageEncoders();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.GraphicsBase : object {
    protected Graphics m_graphicsBase;
    protected Bitmap m_imageBase;
    private int m_dpiX;
    private int m_dpiY;
    private IntPtr m_hdc;
    internal int DpiX { get; internal set; }
    internal int DpiY { get; internal set; }
    internal IntPtr Hdc { get; internal set; }
    internal Graphics SystemGraphics { get; }
    internal GraphicsBase(float dpiX, float dpiY);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    internal int get_DpiX();
    internal void set_DpiX(int value);
    internal int get_DpiY();
    internal void set_DpiY(int value);
    internal IntPtr get_Hdc();
    internal void set_Hdc(IntPtr value);
    internal Graphics get_SystemGraphics();
    internal virtual void CacheHdc(bool createNewHdc);
    internal virtual void ReleaseCachedHdc(bool releaseHdc);
    internal virtual void Lock();
    internal virtual void Unlock();
    internal IntPtr GetHdc();
    internal void ReleaseHdc();
    internal float ConvertToMillimeters(int pixels);
    internal int ConvertToPixels(float mm);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.HardPageBreakShared : object {
    internal static RectangleF CalculateColumnBounds(RPLPage page, RectangleF headerBounds, RectangleF footerBounds, int columnNumber);
    internal static void CalculateHeaderFooterBounds(RPLPage page, Single& pageWidth, Single& pageHeight, RectangleF& headerBounds, RectangleF& footerBounds);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.ImageRenderer : RendererBase {
    private static int DEFAULT_PRINT_DPI;
    private int m_printDpiX;
    private int m_printDpiY;
    public string LocalizedName { get; }
    protected virtual void Render(Report report, NameValueCollection deviceInfo, Hashtable renderProperties, CreateAndRegisterStream createAndRegisterStream);
    protected virtual void ParseDeviceInfo(NameValueCollection& deviceInfo);
    public virtual string get_LocalizedName();
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.ImageRendererRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string IMAGELocalizedName { get; }
    public static string PDFLocalizedName { get; }
    public static string RGDILocalizedName { get; }
    public static string Win32ErrorInfo { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_IMAGELocalizedName();
    public static string get_PDFLocalizedName();
    public static string get_RGDILocalizedName();
    public static string get_Win32ErrorInfo();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.ImageWriter : WriterBase {
    internal static char StreamNameSeparator;
    private Graphics m_graphics;
    private Dictionary`2<string, Image> m_cachedImages;
    internal FormatEncoding OutputFormat;
    private RectangleF MetafileRectangle;
    private Dictionary`2<string, Pen> m_pens;
    private Dictionary`2<string, Brush> m_brushes;
    private Rectangle m_bodyRect;
    private POINT m_prevViewportOrg;
    private int m_dpiX;
    private int m_dpiY;
    private int m_measureImageDpiX;
    private int m_measureImageDpiY;
    private int DEFAULT_RESOLUTION_X;
    private int DYNAMIC_IMAGE_MIN_RESOLUTION_X;
    private int DEFAULT_RESOLUTION_Y;
    private int DYNAMIC_IMAGE_MIN_RESOLUTION_Y;
    internal bool IsEmf { get; }
    unknown Stream OutputStream {internal set; }
    internal ImageWriter(Renderer renderer, Stream stream, bool disposeRenderer, CreateAndRegisterStream createAndRegisterStream, int measureImageDpiX, int measureImageDpiY);
    protected virtual void Dispose(bool disposing);
    protected virtual void Finalize();
    internal bool get_IsEmf();
    internal void set_OutputStream(Stream value);
    internal virtual void BeginReport(int dpiX, int dpiY);
    internal virtual void BeginPage(float pageWidth, float pageHeight);
    internal virtual void BeginPageSection(RectangleF bounds);
    internal virtual RectangleF CalculateColumnBounds(RPLPage page, RectangleF headerBounds, RectangleF footerBounds, RPLMeasurement column, int columnNumber);
    internal virtual void CalculateHeaderFooterBounds(RPLPage page, RPLMeasurement body, Single& pageWidth, Single& pageHeight, RectangleF& headerBounds, RectangleF& footerBounds);
    internal virtual void DrawBackgroundImage(RPLImageData imageData, BackgroundRepeatTypes repeat, PointF start, RectangleF position);
    internal virtual void DrawLine(Color color, float size, BorderStyles style, float x1, float y1, float x2, float y2);
    internal void GetDefaultImage(Image& gdiImage);
    internal virtual void DrawDynamicImage(string imageName, Stream imageStream, long imageDataOffset, RectangleF position);
    internal virtual void DrawImage(RectangleF position, RPLImage image, RPLImageProps instanceProperties, RPLImagePropsDef definitionProperties);
    internal virtual void DrawRectangle(Color color, float size, BorderStyles style, RectangleF rectangle);
    internal virtual void DrawTextRun(IntPtr hdc, FontCache fontCache, TextRun run, TypeCode typeCode, TextAlignments textAlign, VerticalAlignments verticalAlign, WritingModes writingMode, Directions direction, Point pointPosition, Rectangle layoutRectangle, int lineHeight, int baselineY);
    internal virtual void EndPage();
    internal virtual void EndReport();
    internal virtual void FillPolygon(Color color, PointF[] polygon);
    internal virtual void FillRectangle(Color color, RectangleF rectangle);
    private void CalculateMetafileRectangle(float pageWidth, float pageHeight);
    private bool GetImage(string imageName, Byte[] imageBytes, long imageDataOffset, bool dynamicImage, Image& image);
    private bool GetImage(string imageName, Stream imageStream, long imageDataOffset, bool dynamicImage, Image& image);
    private void AddImageToCache(Image image, bool dynamicImage, string imageName);
    private void SetResolution(Bitmap bitmap, bool dynamicImage);
    internal virtual void ClipTextboxRectangle(IntPtr hdc, RectangleF position);
    internal virtual void UnClipTextboxRectangle(IntPtr hdc);
    internal static void GetScreenDpi(Int32& dpiX, Int32& dpiY);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.MetafileGraphics : Graphics {
    private static object m_syncRoot;
    private Metafile m_metafile;
    internal MetafileGraphics(float dpiX, float dpiY);
    private static MetafileGraphics();
    protected virtual void Dispose(bool disposing);
    internal virtual void CacheHdc(bool createNewHdc);
    internal virtual void ReleaseCachedHdc(bool releaseHdc);
    internal virtual void Lock();
    internal virtual void Unlock();
    internal virtual void Save(Stream outputStream, FormatEncoding outputFormat);
    internal void NewPage(Stream stream, FormatEncoding outputFormat, RectangleF metafileRectangle, int dpiX, int dpiY);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.NativeGDIWrapper : object {
    public static IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);
    public static bool DeleteObject(IntPtr hgdiobj);
    public static int GetCharABCWidthsFloat(IntPtr hdc, UInt32 iFirstChar, UInt32 iLastChar, ABCFloat[] lpABCF);
    public static UInt32 GetGlyphIndicesW(IntPtr hdc, UInt16[] lpstr, int c, UInt16[] g, UInt32 fl);
    public static bool GetTextExtentExPointI(IntPtr hdc, UInt16[] pgiIn, int cgi, int nMaxExtent, Int32& lpnFit, Int32[] alpDx, Size& lpSize);
    public static UInt32 GetOutlineTextMetrics(IntPtr hdc, UInt32 cbData, OutlineTextMetric& lpOTM);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.Operation : object {
    internal virtual void Perform(WriterBase writer);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.PDFFont : object {
    internal string FontFamily;
    internal string FontPDFFamily;
    internal int FontId;
    internal List`1<GlyphData> UniqueGlyphs;
    internal string FontCMap;
    internal string Registry;
    internal string Ordering;
    internal string Supplement;
    internal FontStyle GDIFontStyle;
    internal int EMHeight;
    internal float EMGridConversion;
    internal bool InternalFont;
    internal bool SimulateItalic;
    internal bool SimulateBold;
    internal bool IsComposite { get; }
    internal PDFFont(string fontFamily, string pdfFontFamily, string fontCMap, string registry, string ordering, string supplement, FontStyle gdiFontStyle, int emHeight, bool internalFont, bool simulateItalic, bool simulateBold);
    internal bool get_IsComposite();
    internal void AddUniqueGlyph(ushort glyph, float width);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.PDFImage : object {
    internal int ImageId;
    internal Byte[] ImageData;
    internal GDIImageProps GdiProperties;
    private bool m_isMonochromeJpeg;
    internal bool IsMonochromeJpeg { get; }
    internal bool get_IsMonochromeJpeg();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.PDFLabel : object {
    internal string UniqueName;
    internal string Label;
    internal List`1<PDFLabel> Children;
    internal PDFLabel Parent;
    internal PDFLabel(string uniqueName, string label);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.PDFPagePoint : object {
    internal int PageObjectId;
    internal PointF Point;
    internal PDFPagePoint(int pageObjectId, PointF point);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.PDFRenderer : RendererBase {
    private static string FONT_EMBEDDING_NONE;
    private static string FONT_EMBEDDING_SUBSET;
    private bool m_humanReadablePDF;
    private FontEmbedding m_embedFonts;
    public string LocalizedName { get; }
    protected virtual void Render(Report report, NameValueCollection deviceInfo, Hashtable renderProperties, CreateAndRegisterStream createAndRegisterStream);
    private static void HandleDocumenMap_Recursive(DocumentMap documentMap, PDFLabel currentLabel, int currentLevel);
    private static FontEmbedding ParseDeviceInfoFontEmbedding(string fontEmbeddingValue, FontEmbedding defaultValue);
    protected virtual void ParseDeviceInfo(NameValueCollection& deviceInfo);
    public virtual string get_LocalizedName();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.PDFUriAction : object {
    internal string Uri;
    internal RectangleF Rectangle;
    internal PDFUriAction(string uri, RectangleF rectangle);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.PDFWriter : WriterBase {
    internal static float GRID_CONVERSION;
    private static string CRLF;
    private static string INTEGER_FORMAT;
    private static string DECIMAL_FORMAT;
    private static int PNG_HEADER_SIZE;
    private static string STRING_ITALIC;
    private static string STRING_BOLD;
    private int m_procSetId;
    private int m_contentsId;
    private List`1<string> m_pageContentsSection;
    private List`1<int> m_pageIds;
    private int m_pageId;
    private int m_pagesId;
    private int m_infoId;
    private int m_rootId;
    private int m_outlinesId;
    private RectangleF m_bounds;
    private Dictionary`2<int, PDFUriAction> m_actions;
    private Dictionary`2<string, PDFFont> m_fonts;
    private int m_nextObjectId;
    private List`1<long> m_objectOffsets;
    private UnicodeEncoding m_unicodeEncoding;
    private Encoding m_ansiEncoding;
    private SizeF m_mediaBoxSize;
    private Dictionary`2<string, PDFImage> m_images;
    private List`1<int> m_fontsUsedInCurrentPage;
    private List`1<int> m_imagesUsedInCurrentPage;
    internal Dictionary`2<string, PDFPagePoint> DocumentMapLabelPoints;
    internal PDFLabel DocumentMapRootLabel;
    internal bool HumanReadablePDF;
    internal FontEmbedding EmbedFonts;
    private static string m_assemblyVersionString;
    private static Dictionary`2<string, string> m_internalFonts;
    private static Dictionary`2<char, char> m_unicodeToWinAnsi;
    private int m_imageDpiX;
    private int m_imageDpiY;
    private static Hashtable m_pdfDelimiterChars;
    internal float HalfPixelWidthY { get; }
    internal float HalfPixelWidthX { get; }
    private static PDFWriter();
    internal PDFWriter(Renderer renderer, Stream stream, bool disposeRenderer, CreateAndRegisterStream createAndRegisterStream, int imageDpiX, int imageDpiY);
    internal virtual void BeginPage(float pageWidth, float pageHeight);
    internal virtual void BeginPageSection(RectangleF bounds);
    internal virtual void BeginReport(int dpiX, int dpiY);
    internal virtual RectangleF CalculateColumnBounds(RPLPage page, RectangleF headerBounds, RectangleF footerBounds, RPLMeasurement column, int columnNumber);
    internal virtual void CalculateHeaderFooterBounds(RPLPage page, RPLMeasurement body, Single& pageWidth, Single& pageHeight, RectangleF& headerBounds, RectangleF& footerBounds);
    internal virtual void DrawBackgroundImage(RPLImageData imageData, BackgroundRepeatTypes repeat, PointF start, RectangleF position);
    internal virtual void DrawLine(Color color, float size, BorderStyles style, float x1, float y1, float x2, float y2);
    internal virtual void DrawDynamicImage(string imageName, Stream imageStream, long imageDataOffset, RectangleF position);
    internal virtual void DrawImage(RectangleF position, RPLImage image, RPLImageProps instanceProperties, RPLImagePropsDef definitionProperties);
    internal virtual void DrawRectangle(Color color, float size, BorderStyles style, RectangleF rectangle);
    internal virtual void DrawTextRun(IntPtr hdc, FontCache fontCache, TextRun run, TypeCode typeCode, TextAlignments textAlign, VerticalAlignments verticalAlign, WritingModes writingMode, Directions direction, Point position, Rectangle layoutRectangle, int lHeight, int baselineY);
    internal virtual void EndPage();
    private void EndPage_WriteActions(StringBuilder sb);
    internal virtual void EndPageSection();
    internal virtual void EndReport();
    private void EndReport_WriteDocumentMap();
    private int EndReport_WriteDocumentMap_Recursive(List`1<PDFLabel> labels, int parentId, Int32& firstChildId, Int32& lastChildId);
    internal virtual void FillPolygon(Color color, PointF[] polygon);
    internal virtual void FillRectangle(Color color, RectangleF rectangle);
    internal virtual void ProcessAction(string uniqueName, RPLActionInfo actionInfo, RectangleF position);
    internal virtual void ProcessLabel(string uniqueName, string label, PointF point);
    protected virtual void Dispose(bool disposing);
    protected virtual void Finalize();
    private string CompressString(string text);
    private Byte[] CompressBytes(Byte[] bytes);
    private static int CompressBytes(StringBuilder stringBuilder, Byte[] bytes, int offset, int count);
    private static void AppendBytes(StringBuilder stringBuilder, Byte[] bytes);
    private static Byte[] ManagedCompress(Byte[] bytes);
    private static Byte[] ManagedCompress(Byte[] bytes, int offset, int count);
    private static UInt32 CalculateAdler32Checksum(Byte[] bytes, int offset, int count);
    private PointF ConvertToPDFUnits(PointF point);
    private PointF ConvertToPDFUnits(float x, float y);
    private RectangleF ConvertBoundsToPDFUnits(RectangleF rectangle);
    private RectangleF ConvertToPDFUnits(RectangleF rectangle);
    private float ConvertPixelsToPDFUnits(int pixels, float dpi);
    private static string ConvertReservedCharToASCII(char reservedChar);
    private static string EncodePDFName(string literalName);
    private static string EscapeString(string text);
    private PDFImage GetDefaultImage();
    private PDFImage GetImage(string imageName, Byte[] imageData, long imageDataOffset, GDIImageProps gdiImageProps);
    private static int GetInt32(Byte[] data, int offset);
    private static bool IsUnicode(char character);
    private int ReserveObjectId();
    private void UpdateCrossRefPosition(int objectId);
    private bool UnicodeOutput(TextRun run);
    private PDFFont ProcessDrawStringFont(TextRun run, TypeCode typeCode, TextAlignments textAlign, VerticalAlignments verticalAlign, WritingModes writingMode, Directions direction, GDIFont& gdiFont);
    private static void WriteTextString(IntPtr hdc, FontCache fontCache, TextRun textRun, StringBuilder sb, PDFFont pdfFont, GDIFont gdiFont, Directions direction, string text);
    private int Process32bppArgbImage(StringBuilder sb, StringBuilder imageContent, PDFImage image);
    private void ProcessImage(PDFImage image);
    private static int ProcessPngImage(StringBuilder sb, StringBuilder imageContent, PDFImage image);
    private void Write(string text);
    private void Write(int value);
    private void Write(long value);
    private void Write(Byte[] buffer);
    private static void Write(StringBuilder sb, ushort value);
    private static void Write(StringBuilder sb, int value);
    private static void Write(StringBuilder sb, float value);
    private static void Write(StringBuilder sb, PointF point);
    private static void Write(StringBuilder sb, SizeF size);
    private static void Write(StringBuilder sb, Byte[] data);
    private static void Write(StringBuilder sb, Byte[] data, int offset, int length);
    private static void WriteClipBounds(StringBuilder sb, float left, float bottom, SizeF size);
    private static void WriteColor(StringBuilder sb, Color color, bool isStroke);
    private void WriteCrossRef();
    private void WriteDocumentMapEntry(int id, PDFLabel label, PDFPagePoint pagePoint, int parentId, int previousId, int nextId, int firstChildId, int lastChildId, int childCount);
    private void WriteEmbeddedFont(EmbeddedFont embeddedFont);
    private void WriteFont(PDFFont pdfFont, Dictionary`2<string, EmbeddedFont> embeddedFonts);
    private static void WriteHex(StringBuilder sb, int value);
    private static void WriteImage(StringBuilder sb, int id, RectangleF bounds, SizeF size);
    private static void WriteImage(StringBuilder sb, int id, RectangleF bounds, float left, float bottom, SizeF size);
    private int WriteObject(string pdfObject);
    private int WriteObject(int objectId, string pdfObject);
    private void WriteFontBuffer(int objectId, Byte[] buffer);
    private static void WriteRectangle(StringBuilder sb, float left, float bottom, SizeF size);
    private static void WriteRectangle(StringBuilder sb, float left, float bottom, float right, float top);
    private static void WriteSizeAndStyle(StringBuilder sb, float size, BorderStyles style);
    private void WriteUnicodeString(StringBuilder sb, string text);
    internal virtual void ClipTextboxRectangle(IntPtr hdc, RectangleF textposition);
    internal virtual void UnClipTextboxRectangle(IntPtr hdc);
    internal virtual float get_HalfPixelWidthY();
    internal virtual float get_HalfPixelWidthX();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.Renderer : object {
    internal WriterBase Writer;
    internal RPLReport RplReport;
    internal int SharedItemsCount;
    internal string CurrentLanguage;
    internal bool PhysicalPagination;
    private int m_pageNumber;
    internal Dictionary`2<string, int> SharedItems;
    private Dictionary`2<string, float> m_cachedReportSizes;
    private Dictionary`2<string, float> m_cachedFontSizes;
    private Dictionary`2<string, Color> m_cachedReportColors;
    private FontCache m_fontCache;
    private List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> m_paragraphsItemizedData;
    private Dictionary`2<string, List`1<TextRunItemizedData>> m_pageParagraphsItemizedData;
    private bool m_beginPage;
    internal static Dictionary`2<string, Bitmap> ImageResources;
    private static ResourceManager ImageResourceManager;
    private static Renderer();
    internal Renderer(bool physicalPagination);
    internal static int CalculateRowZIndex(RPLTablixRow row);
    internal static int CalculateZIndex(RPLTablixMemberCell header);
    public sealed virtual void Dispose();
    private void CalculateUsableReportItemRectangle(RPLElementProps properties, RectangleF& position);
    private Color GetCachedReportColorStyle(RPLElementProps properties, byte style);
    private float GetCachedReportSizeStyleMM(RPLElementProps properties, byte style);
    private void GetReportItemPaddingStyleMM(RPLElementProps instanceProperties, Single& paddingLeft, Single& paddingTop, Single& paddingRight, Single& paddingBottom);
    private void ProcessBackgroundColorAndImage(RPLElementProps properties, RectangleF position, RectangleF bounds);
    private List`1<Operation> ProcessPageBorders(RPLElementStyle style, RectangleF position, RectangleF bounds, Boolean& inPageSection, RectangleF fullPageBounds);
    private List`1<Operation> ProcessBorders(RPLElementProps properties, RectangleF position, RectangleF bounds, bool renderBorders, byte state);
    private List`1<Operation> ProcessBorders(BorderStyles borderStyleLeft, BorderStyles borderStyleTop, BorderStyles borderStyleRight, BorderStyles borderStyleBottom, float borderWidthLeft, float borderWidthTop, float borderWidthRight, float borderWidthBottom, Color borderColorLeft, Color borderColorTop, Color borderColorRight, Color borderColorBottom, RectangleF position, RectangleF bounds, bool renderBorders, byte state);
    private void ProcessDynamicImage(RPLMeasurement measurement, RectangleF position);
    private void ProcessImage(RPLMeasurement measurement, RectangleF position);
    private void ProcessImageMapActions(RPLActionInfoWithImageMap[] imageMap, string uniqueName, RectangleF position);
    private bool ProcessLabelAndBookmark(RPLElementProps properties, RectangleF position);
    private void ProcessLine(RPLMeasurement measurement, RectangleF position);
    private void ProcessNonTablixContainerReportItems(RPLContainer container, RectangleF bounds);
    internal void ProcessPage(RPLReport rplReport, int pageNumber, FontCache sharedFontCache, List`1<Dictionary`2<string, List`1<TextRunItemizedData>>> paragraphsItemizedData);
    private List`1<Operation> ProcessPageStyle(Color backgroundColor, RPLImageData backgroundImage, BackgroundRepeatTypes backgroundRepeat, RPLElementStyle style, RectangleF pageBounds, RectangleF fullPageBounds);
    private List`1<Operation> ProcessReportItem(RPLMeasurement measurement, RectangleF bounds, bool renderBorders);
    private List`1<Operation> ProcessReportItem(RPLMeasurement measurement, RectangleF bounds, bool renderBorders, bool hasTablixCellParent);
    private void ProcessTablixContainer(RPLTablix tablix, RectangleF position, Single[] rowStarts, Single[] columnStarts);
    private void ProcessTextBox(RPLMeasurement measurement, RectangleF position);
    protected virtual void ProcessSimpleTextBox(string value, RectangleF textPosition, ReportTextBox rptTextBox, ReportParagraph reportParagraph, ReportTextRun reportTextRun, PointF offset);
    protected virtual void ProcessRichTextBox(RectangleF textPosition, RPLTextBox textbox, ReportTextBox rptTextBox, PointF offset);
    private void CreateParagraphRuns(string value, Paragraph richTextParagraph, ReportTextRun reportTextRun, TextRunItemizedData textRunItemizedData);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.RendererBase : object {
    public string LocalizedName { get; }
    public sealed virtual void GetRenderingResource(CreateAndRegisterStream createAndRegisterStreamCallback, NameValueCollection deviceInfo);
    public virtual string get_LocalizedName();
    protected virtual void ParseDeviceInfo(NameValueCollection& deviceInfo);
    protected static bool ParseDeviceInfoBoolean(string boolValue, bool defaultValue);
    protected static int ParseDeviceInfoInt32(string intValue, int defaultValue);
    protected virtual void Render(Report report, NameValueCollection deviceInfo, Hashtable renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual bool Render(Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual bool RenderStream(string streamName, Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual void SetConfiguration(string configuration);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.ReportParagraph : object {
    private RPLParagraphProps m_source;
    private RPLElementStyle m_style;
    private string m_uniqueName;
    private int m_paragraphNumber;
    public TextAlignments Alignment { get; }
    public float SpaceBefore { get; }
    public float SpaceAfter { get; }
    public float LeftIndent { get; }
    public float RightIndent { get; }
    public float HangingIndent { get; }
    public int ListLevel { get; }
    public ListStyles ListStyle { get; }
    public int ParagraphNumber { get; public set; }
    internal string UniqueName { get; }
    internal ReportParagraph(RPLParagraphProps source);
    internal ReportParagraph(RPLElementStyle style, string uniqueName);
    public sealed virtual TextAlignments get_Alignment();
    public sealed virtual float get_SpaceBefore();
    public sealed virtual float get_SpaceAfter();
    public sealed virtual float get_LeftIndent();
    public sealed virtual float get_RightIndent();
    public sealed virtual float get_HangingIndent();
    public sealed virtual int get_ListLevel();
    public sealed virtual ListStyles get_ListStyle();
    public sealed virtual int get_ParagraphNumber();
    public sealed virtual void set_ParagraphNumber(int value);
    internal string get_UniqueName();
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.ReportTextBox : object {
    private RPLTextBoxProps m_source;
    private WriterBase m_writer;
    private bool m_spanPages;
    public TextAlignments DefaultAlignment { get; }
    public Directions Direction { get; }
    public WritingModes WritingMode { get; }
    public Color BackgroundColor { get; }
    public bool CanGrow { get; }
    internal VerticalAlignments VerticalAlignment { get; }
    unknown bool SpanPages {internal set; }
    internal ReportTextBox(RPLTextBoxProps source, WriterBase writer);
    public sealed virtual TextAlignments get_DefaultAlignment();
    public sealed virtual Directions get_Direction();
    public sealed virtual WritingModes get_WritingMode();
    public sealed virtual Color get_BackgroundColor();
    public sealed virtual bool get_CanGrow();
    public sealed virtual void DrawTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle);
    public sealed virtual void DrawClippedTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle, UInt32 fontColorOverride, Rectangle clipRect);
    internal VerticalAlignments get_VerticalAlignment();
    internal void set_SpanPages(bool value);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.ReportTextRun : object {
    private string m_uniqueName;
    private RPLActionInfo m_actionInfo;
    private RPLElementStyle m_sourceStyle;
    private float m_fontSize;
    private string m_fontKey;
    private Color m_color;
    public string UniqueName { get; }
    public RPLActionInfo ActionInfo { get; }
    public string FontFamily { get; }
    public float FontSize { get; }
    public Color Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public TextDecorations TextDecoration { get; }
    public int IndexInParagraph { get; }
    public string FontKey { get; public set; }
    internal ReportTextRun(RPLElementStyle sourceStyle, Dictionary`2<string, float> cachedReportSizes, Dictionary`2<string, Color> cachedReportColors);
    internal ReportTextRun(RPLElementStyle sourceStyle, string uniqueName, RPLActionInfo sourceActionInfo, Dictionary`2<string, float> cachedReportSizes, Dictionary`2<string, Color> cachedReportColors);
    public string get_UniqueName();
    public RPLActionInfo get_ActionInfo();
    public sealed virtual string get_FontFamily();
    public sealed virtual float get_FontSize();
    public sealed virtual Color get_Color();
    public sealed virtual bool get_Bold();
    public sealed virtual bool get_Italic();
    public sealed virtual TextDecorations get_TextDecoration();
    public sealed virtual int get_IndexInParagraph();
    public sealed virtual string get_FontKey();
    public sealed virtual void set_FontKey(string value);
    public sealed virtual void AddSplitIndex(int index);
    private void SetFontSize(Dictionary`2<string, float> cachedReportSizes);
    private void SetFontColor(Dictionary`2<string, Color> cachedReportColors);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.SharedRenderer : object {
    internal static float INCH_TO_MILLIMETER;
    public static float MIN_DOUBLE_BORDER_SIZE;
    internal static void CalculateImageRectangle(RectangleF position, GDIImageProps gdiProperties, Sizings sizing, RectangleF& imagePositionAndSize, RectangleF& imagePortion);
    internal static void CalculateImageRectangle(RectangleF position, int width, int height, float horizontalResolution, float verticalResolution, Sizings sizing, RectangleF& imagePositionAndSize, RectangleF& imagePortion);
    internal static float ConvertToMillimeters(int pixels, float dpi);
    internal static int ConvertToPixels(float mm, float dpi);
    internal static float ConvertToMillimeters(int pixels, Nullable`1<float> dpi, WriterBase writer);
    internal static int ConvertToPixels(float mm, Nullable`1<float> dpi, WriterBase writer);
    internal static void DrawImage(Graphics graphics, Image image, RectangleF rectDestMM, RectangleF rectSourcePX);
    internal static void DrawImage(Graphics graphics, Image image, RectangleF rectDestMM, RectangleF rectSourcePX, ImageAttributes imageAttributes);
    internal static void DrawImage(Graphics graphics, Image image, PointF[] pointsDestMM, RectangleF rectSourcePX, ImageAttributes imageAttributes);
    internal static void GetFontFormatInformation(RPLElementProps elementProperties, WritingModes& writingMode, Directions& direction, VerticalAlignments& verticalAlign, TextAlignments& textAlign, Boolean& stringFormatFromInstance);
    internal static void GetFontStyleInformation(RPLElementProps elementProperties, FontStyles& fontStyle, FontWeights& fontWeight, TextDecorations& textDecoration, Single& fontSize, String& fontFamily, Boolean& fontStyleFromInstance);
    internal static RectangleF GetMeasurementRectangle(RPLMeasurement measurement, RectangleF bounds);
    internal static bool GetImage(RPLReport rplReport, Byte[]& imageData, long imageDataOffset);
    internal static Stream GetEmbeddedImageStream(RPLReport rplReport, long imageDataOffset, CreateAndRegisterStream createAndRegisterStream, string imageName);
    internal static bool GetImage(RPLReport rplReport, Byte[]& imageData, long imageDataOffset, GDIImageProps& gdiImageProps);
    internal static Color GetReportColorStyle(RPLElementStyle properties, byte style);
    internal static float GetReportSizeStyleMM(RPLElementStyle properties, byte style);
    internal static BorderStyles GetStylePropertyValueBorderStyle(RPLElementStyle properties, byte style, BorderStyles defaultStyle);
    internal static BorderStyles GetStylePropertyValueBorderStyle(RPLElementProps properties, byte style, BorderStyles defaultStyle);
    internal static object GetStylePropertyValueObject(RPLElementProps properties, byte style);
    internal static object GetStylePropertyValueObject(RPLElementProps properties, byte style, Boolean& fromInstance);
    internal static string GetStylePropertyValueString(RPLElementProps properties, byte style);
    internal static string GetStylePropertyValueString(RPLElementProps properties, byte style, Boolean& fromInstance);
    internal static TextAlignments GetTextAlignForGeneral(TypeCode typeCode, Directions direction);
    internal static bool IsWeightBold(FontWeights weight);
    internal static void ProcessBottomBorder(WriterBase writer, List`1<Operation> operations, float borderWidthBottom, BorderStyles borderStyleBottom, Color borderColorBottom, Color borderColorLeft, Color borderColorRight, float borderBottom, float borderBottomEdge, float borderLeftEdge, float borderRightEdge, float borderBottomEdgeUnclipped, float borderLeftEdgeUnclipped, float borderRightEdgeUnclipped, float borderWidthLeft, float borderWidthRight, float borderWidthBottomUnclipped, float borderWidthLeftUnclipped, float borderWidthRightUnclipped);
    internal static void ProcessLeftBorder(WriterBase writer, List`1<Operation> operations, float borderWidthLeft, BorderStyles borderStyleLeft, Color borderColorLeft, Color borderColorTop, Color borderColorBottom, float borderLeft, float borderLeftEdge, float borderTopEdge, float borderBottomEdge, float borderLeftEdgeUnclipped, float borderTopEdgeUnclipped, float borderBottomEdgeUnclipped, float borderWidthTop, float borderWidthBottom, float borderWidthLeftUnclipped, float borderWidthTopUnclipped, float borderWidthBottomUnclipped);
    internal static void ProcessRightBorder(WriterBase writer, List`1<Operation> operations, float borderWidthRight, BorderStyles borderStyleRight, Color borderColorRight, Color borderColorTop, Color borderColorBottom, float borderRight, float borderRightEdge, float borderTopEdge, float borderBottomEdge, float borderRightEdgeUnclipped, float borderTopEdgeUnclipped, float borderBottomEdgeUnclipped, float borderWidthTop, float borderWidthBottom, float borderWidthRightUnclipped, float borderWidthTopUnclipped, float borderWidthBottomUnclipped);
    internal static void ProcessTopBorder(WriterBase writer, List`1<Operation> operations, float borderWidthTop, BorderStyles borderStyleTop, Color borderColorTop, Color borderColorLeft, Color borderColorRight, float borderTop, float borderTopEdge, float borderLeftEdge, float borderRightEdge, float borderTopEdgeUnclipped, float borderLeftEdgeUnclipped, float borderRightEdgeUnclipped, float borderWidthLeft, float borderWidthRight, float borderWidthTopUnclipped, float borderWidthLeftUnclipped, float borderWidthRightUnclipped);
    internal static bool CalculateImageClippedUnscaledBounds(WriterBase writer, RectangleF bounds, int width, int height, float xOffsetMM, float yOffsetMM, RectangleF& destination, RectangleF& source);
    internal static bool CalculateImageClippedUnscaledBounds(WriterBase writer, RectangleF bounds, int width, int height, float xOffsetMM, float yOffsetMM, Nullable`1<int> measureImageDpiX, Nullable`1<int> measureImageDpiY, RectangleF& destination, RectangleF& source);
}
internal abstract class Microsoft.ReportingServices.Rendering.ImageRenderer.WriterBase : object {
    private static int DPI;
    protected Stream m_outputStream;
    protected GraphicsBase m_commonGraphics;
    protected Dictionary`2<string, GDIFont> m_gdiFonts;
    protected Renderer m_renderer;
    private bool m_disposeRenderer;
    private RectangleF m_pageSectionBounds;
    private CreateAndRegisterStream m_createAndRegisterStream;
    internal RectangleF PageSectionBounds { get; }
    internal float HalfPixelWidthY { get; }
    internal float HalfPixelWidthX { get; }
    internal CreateAndRegisterStream CreateAndRegisterStream { get; }
    protected WriterBase(Renderer renderer, Stream stream, bool disposeRenderer, CreateAndRegisterStream createAndRegisterStream);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    internal RectangleF get_PageSectionBounds();
    internal virtual float get_HalfPixelWidthY();
    internal virtual float get_HalfPixelWidthX();
    internal CreateAndRegisterStream get_CreateAndRegisterStream();
    internal virtual void BeginReport(int dpiX, int dpiY);
    internal virtual void BeginPage(float pageWidth, float pageHeight);
    internal virtual void BeginPageSection(RectangleF bounds);
    internal virtual RectangleF CalculatePageBounds(RPLPage page, RPLMeasurement body);
    internal virtual RectangleF CalculateColumnBounds(RPLPage page, RectangleF headerBounds, RectangleF footerBounds, RPLMeasurement column, int columnNumber);
    internal virtual void CalculateHeaderFooterBounds(RPLPage page, RPLMeasurement body, Single& pageWidth, Single& pageHeight, RectangleF& headerBounds, RectangleF& footerBounds);
    internal virtual void DrawBackgroundImage(RPLImageData imageData, BackgroundRepeatTypes repeat, PointF start, RectangleF position);
    internal virtual void DrawLine(Color color, float size, BorderStyles style, float x1, float y1, float x2, float y2);
    internal virtual void DrawDynamicImage(string imageName, Stream imageStream, long imageDataOffset, RectangleF position);
    internal virtual void DrawImage(RectangleF position, RPLImage image, RPLImageProps instanceProperties, RPLImagePropsDef definitionProperties);
    internal virtual void DrawRectangle(Color color, float size, BorderStyles style, RectangleF rectangle);
    internal virtual void DrawTextRun(IntPtr hdc, FontCache fontCache, TextRun run, TypeCode typeCode, TextAlignments textAlign, VerticalAlignments verticalAlign, WritingModes writingMode, Directions direction, Point position, Rectangle layoutRectangle, int lineHeight, int baselineY);
    internal virtual void EndPageSection();
    internal virtual void EndPage();
    internal virtual void EndReport();
    internal virtual void FillPolygon(Color color, PointF[] polygon);
    internal virtual void FillRectangle(Color color, RectangleF rectangle);
    internal virtual void PostProcessPage();
    internal virtual void PostProcessReportItem(object state);
    internal virtual void PreProcessPage(string uniqueName, RectangleF bounds);
    internal virtual object PreProcessReportItem(RPLElement element, RPLElementProps instanceProperties, RectangleF position, bool hasLabel);
    internal virtual void ProcessAction(string uniqueName, RPLActionInfo actionInfo, RectangleF position);
    internal virtual void ProcessAction(string uniqueName, RPLActionInfoWithImageMap actionInfo, RectangleF position);
    internal virtual void ProcessBookmark(string uniqueName, PointF point);
    internal virtual void ProcessFixedHeaders(RPLTablix tablix, RectangleF position, Single[] rowStarts, Single[] columnStarts);
    internal virtual void ProcessLabel(string uniqueName, string label, PointF point);
    internal virtual void ProcessSort(string uniqueName, SortOptions sortState, RectangleF& textPosition);
    internal virtual void ProcessToggle(string uniqueName, bool toggleState, RectangleF& textPosition);
    internal void LockAndGetHdc(bool createNewHdc, IntPtr& hdc, Single& dpiX);
    internal void ReleaseHdcAndUnlock(bool release);
    internal virtual void ClipTextboxRectangle(IntPtr hdc, RectangleF position);
    internal virtual void UnClipTextboxRectangle(IntPtr hdc);
    internal virtual float ConvertToMillimeters(int pixels);
    internal virtual int ConvertToPixels(float mm);
}
internal class Microsoft.ReportingServices.Rendering.ImageRenderer.ZIndexComparer : object {
    public sealed virtual int Compare(RPLMeasurement x, RPLMeasurement y);
    public sealed virtual int Compare(Border x, Border y);
    public static int Compare(int x, int y);
}
internal class Microsoft.ReportingServices.Rendering.RichText.ABC : ValueType {
    internal int abcA;
    internal UInt32 abcB;
    internal int abcC;
    internal int Width { get; }
    internal int get_Width();
    internal void SetToZeroWidth();
}
internal class Microsoft.ReportingServices.Rendering.RichText.BulletPrefixRun : PrefixRun {
    private static string PrefixBulletFontFamily;
    internal string FontName { get; }
    internal virtual string get_FontName();
}
internal class Microsoft.ReportingServices.Rendering.RichText.CachedFont : object {
    private IntPtr m_hfont;
    private Font m_font;
    private TEXTMETRIC m_textMetric;
    private bool m_initialized;
    private float m_scaleFactor;
    internal ScriptCacheSafeHandle ScriptCache;
    internal IntPtr Hfont { get; internal set; }
    internal Font Font { get; internal set; }
    public float ScaleFactor { get; public set; }
    internal TEXTMETRIC TextMetric { get; }
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    internal IntPtr get_Hfont();
    internal void set_Hfont(IntPtr value);
    internal Font get_Font();
    internal void set_Font(Font value);
    public float get_ScaleFactor();
    public void set_ScaleFactor(float value);
    internal TEXTMETRIC get_TextMetric();
    private void Initialize(IntPtr hdc, FontCache fontCache);
    private int Scale(int value);
    internal int GetHeight(IntPtr hdc, FontCache fontCache);
    internal int GetAscent(IntPtr hdc, FontCache fontCache);
    internal int GetDescent(IntPtr hdc, FontCache fontCache);
    internal int GetLeading(IntPtr hdc, FontCache fontCache);
}
internal class Microsoft.ReportingServices.Rendering.RichText.CaretInfo : object {
    private Point m_position;
    private bool m_isFirstLine;
    private bool m_isLastLine;
    private int m_ascent;
    private int m_descent;
    private int m_height;
    private int m_lineHeight;
    private int m_lineYOffset;
    internal Point Position { get; internal set; }
    internal bool IsFirstLine { get; internal set; }
    internal bool IsLastLine { get; internal set; }
    internal int Ascent { get; internal set; }
    internal int Descent { get; internal set; }
    internal int LineHeight { get; internal set; }
    internal int LineYOffset { get; internal set; }
    internal int Height { get; internal set; }
    internal Point get_Position();
    internal void set_Position(Point value);
    internal bool get_IsFirstLine();
    internal void set_IsFirstLine(bool value);
    internal bool get_IsLastLine();
    internal void set_IsLastLine(bool value);
    internal int get_Ascent();
    internal void set_Ascent(int value);
    internal int get_Descent();
    internal void set_Descent(int value);
    internal int get_LineHeight();
    internal void set_LineHeight(int value);
    internal int get_LineYOffset();
    internal void set_LineYOffset(int value);
    internal int get_Height();
    internal void set_Height(int value);
}
internal class Microsoft.ReportingServices.Rendering.RichText.FlowContext : object {
    internal float Width;
    internal float Height;
    internal float ContentOffset;
    internal bool WordTrim;
    internal bool LineLimit;
    internal float OmittedLineHeight;
    internal bool AtEndOfTextBox;
    internal TextBoxContext Context;
    internal TextBoxContext ClipContext;
    internal bool Updatable;
    internal bool VerticalCanGrow;
    internal bool ForcedCharTrim;
    internal bool CharTrimLastLine;
    internal int CharTrimmedRunWidth;
    internal FlowContext(float width, float height);
    internal FlowContext(float width, float height, int paragraphIndex, int runIndex, int runCharIndex);
    internal FlowContext(float width, float height, bool wordTrim, bool lineLimit);
    internal FlowContext(float width, float height, TextBoxContext context);
    internal FlowContext Clone();
    internal void Reset();
}
internal class Microsoft.ReportingServices.Rendering.RichText.FontCache : object {
    private static int DEFAULT_EM_HEIGHT;
    internal static List`1<string> FontFallback;
    internal static Dictionary`2<int, int> ScriptFontMapping;
    private Dictionary`2<string, CachedFont> m_fontDict;
    private float m_dpi;
    private IntPtr m_selectedFont;
    private IntPtr m_selectedHdc;
    private bool m_verticalMode;
    private bool m_useEmSquare;
    private UInt32 m_fontQuality;
    internal float Dpi { get; }
    unknown bool VerticalMode {internal set; }
    internal bool UseEmSquare { get; }
    internal bool AllowVerticalFont { get; }
    public UInt32 FontQuality { get; public set; }
    internal FontCache(float dpi);
    internal FontCache(float dpi, bool useEmSquare);
    private static FontCache();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    internal float get_Dpi();
    internal void set_VerticalMode(bool value);
    internal void ResetGraphics();
    internal bool get_UseEmSquare();
    internal bool get_AllowVerticalFont();
    public UInt32 get_FontQuality();
    public void set_FontQuality(UInt32 value);
    internal CachedFont GetFont(ITextRunProps textRunProps, byte charset, bool verticalFont);
    internal CachedFont GetFallbackFont(ITextRunProps textRunProps, byte charset, int script, bool verticalFont);
    internal CachedFont GetFont(ITextRunProps textRunProps, byte charset, float fontSize, bool verticalFont);
    private CachedFont CreateFont(ITextRunProps textRun, string key, byte charset, bool verticalFont, string fontFamily, float fontSize);
    private Font CreateGdiPlusFont(string fontFamilyName, float fontSize, bool bold, bool italic, bool lineThrough);
    private IntPtr CreateGdiFont(bool verticalMode, int fontSize, bool bold, bool italic, bool lineThrough, byte charset, bool verticalFont, string fontFamily);
    private string GetRunKey(ITextRunProps textRunProps, String& fontFamily, Single& fontSize);
    private string GetKey(string runKey, int charset, bool verticalFont, string fontFamily, Nullable`1<float> fontSize);
    private string GetKey(ITextRunProps textRunProps, String& fontFamily, Single& fontSize);
    internal void SelectFontObject(IntPtr hdc, IntPtr hFont);
    private static List`1<string> PopulateFontFallBack();
    private static Dictionary`2<int, int> PopulateScriptFontMapping();
}
internal class Microsoft.ReportingServices.Rendering.RichText.GlyphData : object {
    internal GlyphShapeData GlyphScriptShapeData;
    private Int32[] m_advances;
    private GOFFSET[] m_gOffsets;
    internal ABC ABC;
    private float m_scaleFactor;
    private bool m_needGlyphPlaceData;
    internal bool NeedGlyphPlaceData { get; internal set; }
    unknown float ScaleFactor {internal set; }
    public Int32[] RawAdvances { get; }
    internal Int32[] Advances { get; }
    internal Int32[] ScaledAdvances { get; }
    internal GOFFSET[] RawGOffsets { get; }
    internal GOFFSET[] GOffsets { get; }
    internal GOFFSET[] ScaledGOffsets { get; }
    internal int TotalWidth { get; }
    internal int ScaledTotalWidth { get; }
    public bool Scaled { get; }
    internal GlyphData(int maxglyphs, int numChars);
    internal GlyphData(GlyphShapeData glyphInfo);
    internal bool get_NeedGlyphPlaceData();
    internal void set_NeedGlyphPlaceData(bool value);
    internal void set_ScaleFactor(float value);
    public Int32[] get_RawAdvances();
    internal Int32[] get_Advances();
    internal Int32[] get_ScaledAdvances();
    internal GOFFSET[] get_RawGOffsets();
    internal GOFFSET[] get_GOffsets();
    internal GOFFSET[] get_ScaledGOffsets();
    internal int get_TotalWidth();
    internal int get_ScaledTotalWidth();
    public bool get_Scaled();
    internal int Scale(int value);
    internal void TrimToGlyphCount();
}
internal class Microsoft.ReportingServices.Rendering.RichText.GlyphShapeData : object {
    internal int GlyphCount;
    internal Int16[] Glyphs;
    internal Int16[] Clusters;
    internal SCRIPT_VISATTR[] VisAttrs;
    internal GlyphShapeData(int maxglyphs, int numChars);
    internal void TrimToGlyphCount();
}
internal class Microsoft.ReportingServices.Rendering.RichText.GOFFSET : ValueType {
    internal int du;
    internal int dv;
}
internal class Microsoft.ReportingServices.Rendering.RichText.HighlightTextRun : TextRun {
    private int m_highlightStart;
    private int m_highlightEnd;
    private Color m_highlightColor;
    private int m_charIndexInOriginal;
    internal int HighlightStart { get; internal set; }
    internal int HighlightEnd { get; internal set; }
    internal Color HighlightColor { get; internal set; }
    internal bool IsHighlightTextRun { get; }
    internal int CharacterIndexInOriginal { get; internal set; }
    internal HighlightTextRun(string text, ITextRunProps props);
    internal HighlightTextRun(string text, TextRun textRun);
    internal HighlightTextRun(string text, HighlightTextRun textRun);
    internal HighlightTextRun(string text, HighlightTextRun textRun, SCRIPT_LOGATTR[] scriptLogAttr);
    internal virtual int get_HighlightStart();
    internal virtual void set_HighlightStart(int value);
    internal virtual int get_HighlightEnd();
    internal virtual void set_HighlightEnd(int value);
    internal virtual Color get_HighlightColor();
    internal virtual void set_HighlightColor(Color value);
    internal virtual bool get_IsHighlightTextRun();
    internal virtual int get_CharacterIndexInOriginal();
    internal virtual void set_CharacterIndexInOriginal(int value);
    internal virtual TextRun Split(string text, SCRIPT_LOGATTR[] scriptLogAttr);
    internal virtual TextRun GetSubRun(int startIndex, int length);
}
internal interface Microsoft.ReportingServices.Rendering.RichText.IParagraphProps {
    public float SpaceBefore { get; }
    public float SpaceAfter { get; }
    public float LeftIndent { get; }
    public float RightIndent { get; }
    public float HangingIndent { get; }
    public int ListLevel { get; }
    public ListStyles ListStyle { get; }
    public TextAlignments Alignment { get; }
    public int ParagraphNumber { get; public set; }
    public abstract virtual float get_SpaceBefore();
    public abstract virtual float get_SpaceAfter();
    public abstract virtual float get_LeftIndent();
    public abstract virtual float get_RightIndent();
    public abstract virtual float get_HangingIndent();
    public abstract virtual int get_ListLevel();
    public abstract virtual ListStyles get_ListStyle();
    public abstract virtual TextAlignments get_Alignment();
    public abstract virtual int get_ParagraphNumber();
    public abstract virtual void set_ParagraphNumber(int value);
}
internal interface Microsoft.ReportingServices.Rendering.RichText.ITextBoxProps {
    public WritingModes WritingMode { get; }
    public TextAlignments DefaultAlignment { get; }
    public Directions Direction { get; }
    public Color BackgroundColor { get; }
    public bool CanGrow { get; }
    public abstract virtual WritingModes get_WritingMode();
    public abstract virtual TextAlignments get_DefaultAlignment();
    public abstract virtual Directions get_Direction();
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual bool get_CanGrow();
    public abstract virtual void DrawTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle);
    public abstract virtual void DrawClippedTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle, UInt32 fontColorOverride, Rectangle clipRect);
}
internal interface Microsoft.ReportingServices.Rendering.RichText.ITextRunProps {
    public string FontFamily { get; }
    public float FontSize { get; }
    public Color Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public TextDecorations TextDecoration { get; }
    public int IndexInParagraph { get; }
    public string FontKey { get; public set; }
    public abstract virtual string get_FontFamily();
    public abstract virtual float get_FontSize();
    public abstract virtual Color get_Color();
    public abstract virtual bool get_Bold();
    public abstract virtual bool get_Italic();
    public abstract virtual TextDecorations get_TextDecoration();
    public abstract virtual int get_IndexInParagraph();
    public abstract virtual string get_FontKey();
    public abstract virtual void set_FontKey(string value);
    public abstract virtual void AddSplitIndex(int index);
}
internal class Microsoft.ReportingServices.Rendering.RichText.LineBreaker : object {
    private static Char[] BulletChars;
    private static Char[0...,0...] RomanNumerals;
    private static LineBreaker();
    internal static List`1<Paragraph> Flow(TextBox textBox, Graphics g, FontCache fontCache, FlowContext flowContext, bool keepLines);
    internal static List`1<Paragraph> Flow(TextBox textBox, Graphics g, FontCache fontCache, FlowContext flowContext, bool keepLines, Single& height);
    internal static List`1<Paragraph> Flow(TextBox textBox, IntPtr hdc, float dpiX, FontCache fontCache, FlowContext flowContext, bool keepLines, Single& height);
    internal static float FlowVertical(TextBox textBox, Graphics g, FontCache fontCache, FlowContext flowContext, Single& width, Single& nextWidth);
    private static bool FlowParagraph(Paragraph paragraph, Directions direction, IntPtr hdc, float dpiX, FontCache fontCache, FlowContext flowContext, bool keepLines, SizeF flowContextSize, Int32& contentOffset);
    private static bool GetLine(Paragraph paragraph, TextLine line, IntPtr hdc, FontCache fontCache, FlowContext flowContext, float left, float right, float height, Stack`1<int> lineRunsIndex, Stack`1<int> lineRunsCharIndex);
    private static void FoldLine(Paragraph paragraph, TextLine line, IntPtr hdc, FontCache fontCache, FlowContext flowContext, bool wordTrim, Stack`1<int> lineRunsIndex, Stack`1<int> lineRunsCharIndex, float maxWidth);
    private static void FoldLineAt(TextLine line, int runIndex, int runCharIndex, TextBoxContext context, Stack`1<int> lineRunsIndex, Stack`1<int> lineRunsCharIndex);
    private static int FindWidthToBreakPosition(TextRun run, IntPtr hdc, FontCache fontCache, float maxWidth, Int32& width);
    private static int FindFoldTextPosition_CharacterTrim(TextRun run, IntPtr hdc, FontCache fontCache, float maxWidth);
    private static int FindFoldTextPosition_TextRunTrim(TextRun run, IntPtr hdc, FontCache fontCache, float maxWidth, Nullable`1<SCRIPT_LOGATTR> nextCharLogAttr);
    private static List`1<TextRun> CreateLinePrefix(Paragraph paragraph, Directions direction);
    private static string GetAsDecimalString(int value);
    private static string GetAsLatinAlphaString(int value);
    private static string GetAsRomanNumeralString(int value);
}
internal class Microsoft.ReportingServices.Rendering.RichText.NumberPrefixRun : PrefixRun {
    private static string PrefixNumberFontFamily;
    internal string FontName { get; }
    internal virtual string get_FontName();
}
internal class Microsoft.ReportingServices.Rendering.RichText.Paragraph : object {
    private static int m_maxRunLength;
    private List`1<TextRun> m_runs;
    private IParagraphProps m_paragraphProps;
    private List`1<TextLine> m_lines;
    private bool m_updated;
    private bool m_processedEmptyParagraph;
    private int m_offsetY;
    private int m_height;
    private int m_lastRunIndex;
    private int m_lastCharIndexInRun;
    internal IParagraphProps ParagraphProps { get; }
    internal int ParagraphNumber { get; }
    internal List`1<TextRun> Runs { get; internal set; }
    internal List`1<TextLine> TextLines { get; internal set; }
    internal bool Updated { get; internal set; }
    internal bool ProcessedEmptyParagraph { get; internal set; }
    internal int OffsetY { get; internal set; }
    internal int Height { get; internal set; }
    internal Paragraph(IParagraphProps paraProps);
    internal Paragraph(IParagraphProps paraProps, int textRunCount);
    internal IParagraphProps get_ParagraphProps();
    internal int get_ParagraphNumber();
    internal List`1<TextRun> get_Runs();
    internal void set_Runs(List`1<TextRun> value);
    internal List`1<TextLine> get_TextLines();
    internal void set_TextLines(List`1<TextLine> value);
    internal bool get_Updated();
    internal void set_Updated(bool value);
    internal bool get_ProcessedEmptyParagraph();
    internal void set_ProcessedEmptyParagraph(bool value);
    internal int get_OffsetY();
    internal void set_OffsetY(int value);
    internal int get_Height();
    internal void set_Height(int value);
    private List`1<TextRun> ExtractRuns(int startingParaCharIndex, int endingParaCharIndex, SCRIPT_ANALYSIS analysis);
    private static void AnalyzeForBreakPositions(List`1<TextRun> itemRuns, string itemsText);
    internal void ScriptItemize(Directions direction);
    private bool CanMergeItemizedRuns(int start, int end, StringBuilder paragraphText);
    internal bool AtEndOfParagraph(TextBoxContext context);
    internal void AdvanceToNextRun(TextBoxContext context);
    internal void AdvanceToNextRun(TextBoxContext context, bool skipEmptyRuns);
    internal TextRun GetSubRunForLine(TextBoxContext context, Boolean& newLine);
    internal string GetNextTextBlock();
    internal void GetParagraphIndents(Directions direction, float dpiX, Single& leftIndent, Single& rightIndent, Single& hangingIndent);
}
internal class Microsoft.ReportingServices.Rendering.RichText.ParagraphNumberCalculator : object {
    private List`1<int> m_paragraphLevelList;
    internal void UpdateParagraph(IParagraphProps paragraphProps);
}
internal class Microsoft.ReportingServices.Rendering.RichText.PerfCheck : object {
    private string m_Name;
    private Stopwatch m_sw;
    internal PerfCheck(string Name);
    [ConditionalAttribute("PERF_CHECK")]
private void Start();
    [ConditionalAttribute("PERF_CHECK")]
private void Stop();
    public sealed virtual void Dispose();
}
internal class Microsoft.ReportingServices.Rendering.RichText.PlaceholderTextRun : HighlightTextRun {
    private Color m_placeholderBorderColor;
    private bool m_allowColorInversion;
    internal bool IsPlaceholderTextRun { get; }
    internal Color PlaceholderBorderColor { get; internal set; }
    internal bool AllowColorInversion { get; internal set; }
    internal PlaceholderTextRun(string text, ITextRunProps props);
    internal PlaceholderTextRun(string text, TextRun textRun);
    internal PlaceholderTextRun(string text, PlaceholderTextRun textRun);
    internal PlaceholderTextRun(string text, PlaceholderTextRun textRun, SCRIPT_LOGATTR[] scriptLogAttr);
    internal virtual bool get_IsPlaceholderTextRun();
    internal Color get_PlaceholderBorderColor();
    internal void set_PlaceholderBorderColor(Color value);
    internal virtual bool get_AllowColorInversion();
    internal virtual void set_AllowColorInversion(bool value);
    internal virtual TextRun Split(string text, SCRIPT_LOGATTR[] scriptLogAttr);
    internal virtual TextRun GetSubRun(int startIndex, int length);
}
internal class Microsoft.ReportingServices.Rendering.RichText.PrefixRun : object {
    private static float PrefixFontSize;
    private string m_fontKey;
    public string FontFamily { get; }
    public float FontSize { get; }
    public Color Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public TextDecorations TextDecoration { get; }
    public int IndexInParagraph { get; }
    public string FontKey { get; public set; }
    internal string FontName { get; }
    public sealed virtual string get_FontFamily();
    public sealed virtual float get_FontSize();
    public sealed virtual Color get_Color();
    public sealed virtual bool get_Bold();
    public sealed virtual bool get_Italic();
    public sealed virtual TextDecorations get_TextDecoration();
    public sealed virtual int get_IndexInParagraph();
    public sealed virtual string get_FontKey();
    public sealed virtual void set_FontKey(string value);
    public sealed virtual void AddSplitIndex(int index);
    internal virtual string get_FontName();
}
internal class Microsoft.ReportingServices.Rendering.RichText.RECT : ValueType {
    internal int left;
    internal int top;
    internal int right;
    internal int bottom;
}
internal class Microsoft.ReportingServices.Rendering.RichText.RevertingDeviceContext : object {
    private IntPtr m_hdc;
    private Matrix m_matrix;
    private XFORM m_oldXForm;
    private XFORM m_xForm;
    private int m_oldMode;
    private Graphics m_graphics;
    private GraphicsUnit m_pageUnits;
    private float m_pageScale;
    internal IntPtr Hdc { get; }
    internal XFORM XForm { get; }
    internal RevertingDeviceContext(Graphics g, float dpi);
    internal IntPtr get_Hdc();
    internal XFORM get_XForm();
    public sealed virtual void Dispose();
    private void SetupGraphics(float dpi);
}
internal class Microsoft.ReportingServices.Rendering.RichText.RichTextRenderer : object {
    private float m_width;
    private float m_flowHeight;
    private float m_height;
    private bool m_lineLimit;
    private bool m_charTrimLastLine;
    private float m_dpi;
    private FontCache m_fontCache;
    private TextBox m_rttextbox;
    private List`1<Paragraph> m_cachedrtparagraphs;
    internal bool LineLimit { get; internal set; }
    internal bool CharTrimLastLine { get; internal set; }
    internal float Width { get; internal set; }
    internal int WidthInPX { get; internal set; }
    internal float FlowHeight { get; internal set; }
    internal int FlowHeightInPX { get; internal set; }
    internal float Dpi { get; internal set; }
    internal FontCache FontCache { get; internal set; }
    internal List`1<Paragraph> RTParagraphs { get; internal set; }
    internal TextBox RTTextbox { get; }
    internal void Render(Graphics g, RectangleF rectangle);
    internal void Render(Graphics g, RectangleF rectangle, bool unitsInMM);
    internal void Render(Graphics g, RectangleF rectangle, IEnumerable`1<RTSelectionHighlight> highlights);
    internal void Render(Graphics g, RectangleF rectangle, IEnumerable`1<RTSelectionHighlight> highlights, bool unitsInMM);
    internal void Render(Graphics g, RectangleF rectangle, PointF offset, IEnumerable`1<RTSelectionHighlight> highlights, bool unitsInMM);
    private void SetHighlighting(List`1<Paragraph> paragraphs, IntPtr hdc, RTSelectionHighlight highlight, TextRun runStart, TextRun runEnd, int x1, int x2);
    private static bool HighlightStartLessThanOrEqualToEnd(TextBoxContext start, TextBoxContext end);
    internal Rectangle GetTextBoundingBoxPx(Rectangle rect, VerticalAlignments vAlign);
    internal TextBoxContext MapPoint(PointF pt);
    internal TextBoxContext MapPoint(PointF pt, Boolean& atEndOfLine);
    internal TextBoxContext MapPoint(Graphics g, PointF pt);
    internal TextBoxContext MapPoint(Graphics g, PointF pt, Boolean& atEndOfLine);
    private TextBoxContext GetParagraphAndRunIndex(Graphics g, int x, int y, TextRun& run, Int32& runX, Boolean& atEndOfLine);
    private TextBoxContext GetParagraphAndRunIndex(Graphics g, Paragraph paragraph, int leftIndent, int rightIndent, int hangingIndent, int x, int y, bool isLTR, bool lastParagraph, TextRun& run, Int32& runX, Boolean& atEndOfLine);
    private TextRun GetLastNonLineBreakRun(List`1<TextRun> runs, Int32& charIndex, Boolean& hasNonCRLFChars);
    private TextRun GetFirstNonLineBreakRun(List`1<TextRun> runs, Int32& charIndex);
    private TextBoxContext GetParagraphAndRunIndex(IntPtr hdc, Paragraph paragraph, TextLine line, int x, int lineWidth, bool lastParagraph, TextRun& run, Int32& runX, Boolean& atEndOfLine);
    internal CaretInfo MapLocation(TextBoxContext location);
    internal CaretInfo MapLocation(Graphics g, TextBoxContext location);
    internal CaretInfo MapLocation(TextBoxContext location, bool moveCaretToNextLine);
    internal CaretInfo MapLocation(Graphics g, TextBoxContext location, bool moveCaretToNextLine);
    private CaretInfo MapLocation(Graphics g, TextBoxContext location, bool relativeToRun, bool moveCaretToNextLine, TextRun& run);
    private CaretInfo MapLocation(IntPtr hdc, TextBoxContext location, bool relativeToRun, bool moveCaretToNextLine, TextRun& run);
    private Point GetParagraphAndRunCoordinates(IntPtr hdc, TextBoxContext location, bool moveCaretToNextLine, Int32& lineYOffset, Int32& lineHeight, TextRun& textRun, Int32& textRunCharacterIndex, Boolean& isFirstLine, Boolean& isLastLine);
    internal bool get_LineLimit();
    internal void set_LineLimit(bool value);
    internal bool get_CharTrimLastLine();
    internal void set_CharTrimLastLine(bool value);
    internal float get_Width();
    internal void set_Width(float value);
    internal int get_WidthInPX();
    internal void set_WidthInPX(int value);
    internal float get_FlowHeight();
    internal void set_FlowHeight(float value);
    internal int get_FlowHeightInPX();
    internal void set_FlowHeightInPX(int value);
    internal float get_Dpi();
    internal void set_Dpi(float value);
    internal float GetHeight();
    internal int GetHeightInPX();
    internal FontCache get_FontCache();
    internal void set_FontCache(FontCache value);
    internal void SetTextbox(TextBox textbox);
    internal List`1<Paragraph> get_RTParagraphs();
    internal void set_RTParagraphs(List`1<Paragraph> value);
    internal TextBox get_RTTextbox();
    private void ResetCachedObjects();
    private void UpdateCachedObjects();
    private void UpdateCachedObjects(Graphics g);
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Rendering.RichText.RichTextRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string Win32ErrorInfo { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Win32ErrorInfo();
}
internal class Microsoft.ReportingServices.Rendering.RichText.RomanNumeral : object {
    internal int ArabicNumber;
    internal string RomanNumeralString;
    internal static RomanNumeral[] RomanNumerals;
    internal RomanNumeral(int arabicNumber, string romanNumeralString);
    private static RomanNumeral();
}
internal class Microsoft.ReportingServices.Rendering.RichText.RTSelectionHighlight : object {
    private TextBoxContext m_selectionStart;
    private TextBoxContext m_selectionEnd;
    private bool m_allowColorInversion;
    private Color m_color;
    internal TextBoxContext SelectionStart { get; internal set; }
    internal TextBoxContext SelectionEnd { get; internal set; }
    internal Color Color { get; internal set; }
    internal bool AllowColorInversion { get; internal set; }
    internal RTSelectionHighlight(TextBoxContext Start, TextBoxContext End, Color Color);
    internal RTSelectionHighlight(TextBoxContext Start, TextBoxContext End);
    internal TextBoxContext get_SelectionStart();
    internal void set_SelectionStart(TextBoxContext value);
    internal TextBoxContext get_SelectionEnd();
    internal void set_SelectionEnd(TextBoxContext value);
    internal Color get_Color();
    internal void set_Color(Color value);
    internal bool get_AllowColorInversion();
    internal void set_AllowColorInversion(bool value);
    public virtual string ToString();
}
internal class Microsoft.ReportingServices.Rendering.RichText.SCRIPT_ANALYSIS : ValueType {
    internal ushort word1;
    internal SCRIPT_STATE state;
}
internal class Microsoft.ReportingServices.Rendering.RichText.SCRIPT_CONTROL : ValueType {
    internal UInt32 dword1;
}
internal class Microsoft.ReportingServices.Rendering.RichText.SCRIPT_ITEM : ValueType {
    internal int iCharPos;
    internal SCRIPT_ANALYSIS analysis;
}
internal class Microsoft.ReportingServices.Rendering.RichText.SCRIPT_LOGATTR : ValueType {
    private byte m_value;
    internal bool IsWhiteSpace { get; }
    internal bool IsSoftBreak { get; }
    internal bool get_IsWhiteSpace();
    internal bool get_IsSoftBreak();
}
internal class Microsoft.ReportingServices.Rendering.RichText.SCRIPT_PROPERTIES : ValueType {
    internal ulong long1;
}
internal class Microsoft.ReportingServices.Rendering.RichText.SCRIPT_STATE : ValueType {
    internal ushort word1;
}
internal class Microsoft.ReportingServices.Rendering.RichText.SCRIPT_VISATTR : ValueType {
    internal ushort word1;
}
internal class Microsoft.ReportingServices.Rendering.RichText.ScriptAnalysis : object {
    internal int eScript;
    internal int fRTL;
    internal int fLayoutRTL;
    internal int fLinkBefore;
    internal int fLinkAfter;
    internal int fLogicalOrder;
    internal int fNoGlyphIndex;
    internal ScriptState s;
    internal ScriptAnalysis(ushort word1);
    internal SCRIPT_ANALYSIS GetAs_SCRIPT_ANALYSIS();
}
internal class Microsoft.ReportingServices.Rendering.RichText.ScriptCacheSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
internal class Microsoft.ReportingServices.Rendering.RichText.ScriptProperties : object {
    private long m_value;
    private static ScriptProperties[] ScriptsProps;
    internal bool IsComplex { get; }
    internal byte CharSet { get; }
    internal bool IsAmbiguousCharSet { get; }
    internal static int Length { get; }
    internal ScriptProperties(long value);
    private static ScriptProperties();
    internal bool get_IsComplex();
    internal byte get_CharSet();
    internal bool get_IsAmbiguousCharSet();
    internal static int get_Length();
    internal static ScriptProperties GetProperties(int script);
}
internal class Microsoft.ReportingServices.Rendering.RichText.ScriptState : object {
    private ushort m_value;
    internal int uBidiLevel;
    internal int fOverrideDirection;
    internal int fInhibitSymSwap;
    internal int fCharShape;
    internal int fDigitSubstitute;
    internal int fInhibitLigate;
    internal int fDisplayZWG;
    internal int fArabicNumContext;
    internal int fGcpClusters;
    internal int fReserved;
    internal int fEngineReserved;
    internal ScriptState(ushort value);
    internal static int GetBidiLevel(ushort value);
    internal SCRIPT_STATE GetAs_SCRIPT_STATE();
}
internal class Microsoft.ReportingServices.Rendering.RichText.TexRunShapeData : object {
    private GlyphShapeData m_glyphData;
    private SCRIPT_ANALYSIS m_analysis;
    private SCRIPT_LOGATTR[] m_scriptLogAttr;
    private CachedFont m_cachedFont;
    private Nullable`1<int> m_itemizedScriptId;
    private TextRunState m_runState;
    internal GlyphShapeData GlyphData { get; }
    internal SCRIPT_ANALYSIS Analysis { get; }
    internal SCRIPT_LOGATTR[] ScriptLogAttr { get; }
    internal CachedFont Font { get; }
    internal Nullable`1<int> ItemizedScriptId { get; }
    internal TextRunState State { get; }
    internal TexRunShapeData(TextRun run, bool storeGlyph);
    internal TexRunShapeData(TextRun run, bool storeGlyph, int startIndex);
    internal GlyphShapeData get_GlyphData();
    internal SCRIPT_ANALYSIS get_Analysis();
    internal SCRIPT_LOGATTR[] get_ScriptLogAttr();
    internal CachedFont get_Font();
    internal Nullable`1<int> get_ItemizedScriptId();
    internal TextRunState get_State();
}
internal class Microsoft.ReportingServices.Rendering.RichText.TextBox : object {
    internal static float PrefixIndent;
    internal static float PrefixSpace;
    internal static float INCH_TO_MILLIMETER;
    internal static float RoundDelta;
    private List`1<Paragraph> m_paragraphs;
    private ITextBoxProps m_textBoxProps;
    internal List`1<Paragraph> Paragraphs { get; internal set; }
    internal ITextBoxProps TextBoxProps { get; }
    internal string Value { get; }
    internal TextBox(ITextBoxProps textBoxProps);
    internal List`1<Paragraph> get_Paragraphs();
    internal void set_Paragraphs(List`1<Paragraph> value);
    internal ITextBoxProps get_TextBoxProps();
    internal string get_Value();
    internal static float MeasureFullHeight(TextBox textBox, Graphics g, FontCache fontCache, FlowContext flowContext, Single& contentHeight);
    internal static void Render(TextBox textBox, List`1<Paragraph> paragraphs, Graphics g, FontCache fontCache, PointF offset, RectangleF layoutRectangle);
    internal static void Render(TextBox textBox, List`1<Paragraph> paragraphs, IntPtr hdc, FontCache fontCache, PointF offset, RectangleF layoutRectangle, float dpiX);
    internal static void Render(TextBox textBox, List`1<Paragraph> paragraphs, IntPtr hdc, FontCache fontCache, PointF offset, RectangleF layoutRectangle, float dpiX, bool unitsInMM);
    private static void RenderParagraph(TextBox textBox, Paragraph paragraph, IntPtr hdc, FontCache fontCache, int offsetX, Int32& offsetY, Rectangle layoutRectangle, float dpiX);
    private static void RenderHighlightedTextRun(TextBox textBox, Paragraph paragraph, TextRun run, TextRun prevRun, IntPtr hdc, Graphics g, FontCache fontCache, float dpiX, int x, int offsetY, int baselineY, int lineHeight, Rectangle layoutRectangle, int runWidth, int prevRunWidth, int prevRunX, bool lastRunInLine, bool lastLineInParagraph);
    private static bool NeedsColorInversion(Color color1, Color color2);
    private static Color InvertColor(Color color);
    internal static void DrawTextRun(TextRun run, IntPtr hdc, FontCache fontCache, int x, int baselineY, Underline underline);
    internal static void ExtDrawTextRun(TextRun run, IntPtr hdc, FontCache fontCache, int x, int baselineY, Underline underline);
    internal static void DrawClippedTextRun(TextRun run, IntPtr hdc, FontCache fontCache, int x, int baselineY, UInt32 fontColorOverride, Rectangle clipRect, Underline underline);
    internal static int ConvertToPixels(float mm, float dpi);
    internal static float ConvertToMillimeters(int pixels, float dpi);
    internal static float ConvertToPoints(float pixels, float dpi);
    internal static bool IsWhitespaceControlChar(char c);
    internal void ScriptItemize();
}
internal class Microsoft.ReportingServices.Rendering.RichText.TextBoxContext : object {
    internal int ParagraphIndex;
    internal int TextRunIndex;
    internal int TextRunCharacterIndex;
    internal void IncrementParagraph();
    internal TextBoxContext Clone();
    internal void Reset();
    public virtual string ToString();
}
internal class Microsoft.ReportingServices.Rendering.RichText.TextLine : object {
    private List`1<TextRun> m_prefix;
    private List`1<TextRun> m_visualRuns;
    private List`1<TextRun> m_logicalRuns;
    private int m_prefixWidth;
    private int m_width;
    private int m_ascent;
    private int m_descent;
    private bool m_firstLine;
    private bool m_lastLine;
    private bool m_calculatedDimensions;
    private bool m_calculatedHeight;
    internal string Text { get; }
    internal List`1<TextRun> VisualRuns { get; }
    internal List`1<TextRun> LogicalRuns { get; }
    internal List`1<TextRun> Prefix { get; internal set; }
    internal bool LastLine { get; internal set; }
    internal bool FirstLine { get; internal set; }
    internal string get_Text();
    internal List`1<TextRun> get_VisualRuns();
    internal List`1<TextRun> get_LogicalRuns();
    internal List`1<TextRun> get_Prefix();
    internal void set_Prefix(List`1<TextRun> value);
    internal bool get_LastLine();
    internal void set_LastLine(bool value);
    internal bool get_FirstLine();
    internal void set_FirstLine(bool value);
    internal void ResetHeight();
    internal int GetHeight(IntPtr hdc, FontCache fontCache);
    internal int GetAscent(IntPtr hdc, FontCache fontCache);
    internal int GetDescent(IntPtr hdc, FontCache fontCache);
    internal int GetWidth(IntPtr hdc, FontCache fontCache);
    internal int GetPrefixWidth(IntPtr hdc, FontCache fontCache);
    private void CalculateDimensions(IntPtr hdc, FontCache fontCache);
    internal void ScriptLayout(IntPtr hdc, FontCache fontCache);
}
internal class Microsoft.ReportingServices.Rendering.RichText.TextRun : object {
    protected string m_text;
    protected bool m_clone;
    protected ITextRunProps m_textRunProps;
    protected GlyphData m_cachedGlyphData;
    protected CachedFont m_cachedFont;
    protected ScriptAnalysis m_scriptAnalysis;
    internal SCRIPT_ANALYSIS SCRIPT_ANALYSIS;
    internal SCRIPT_LOGATTR[] ScriptLogAttr;
    internal int m_underlineHeight;
    private Nullable`1<int> m_itemizedScriptId;
    private TextRunState m_runState;
    public bool IsComplex { get; }
    internal ITextRunProps TextRunProperties { get; }
    internal CachedFont CachedFont { get; }
    internal TextRunState State { get; }
    internal Nullable`1<int> ItemizedScriptId { get; }
    internal bool FallbackFont { get; internal set; }
    internal bool HasEastAsianChars { get; internal set; }
    internal int CharacterCount { get; }
    internal UInt32 ColorInt { get; }
    internal ScriptAnalysis ScriptAnalysis { get; }
    internal string Text { get; }
    internal GlyphData GlyphData { get; }
    internal bool Clone { get; internal set; }
    internal int HighlightStart { get; internal set; }
    internal int HighlightEnd { get; internal set; }
    internal Color HighlightColor { get; internal set; }
    internal int CharacterIndexInOriginal { get; internal set; }
    internal bool IsHighlightTextRun { get; }
    internal bool IsPlaceholderTextRun { get; }
    internal int UnderlineHeight { get; internal set; }
    internal bool AllowColorInversion { get; internal set; }
    internal TextRun(string text, ITextRunProps props);
    internal TextRun(string text, TextRun textRun);
    internal TextRun(string text, ITextRunProps props, TexRunShapeData shapeData);
    internal TextRun(string text, TextRun textRun, SCRIPT_LOGATTR[] scriptLogAttr);
    public bool get_IsComplex();
    internal ITextRunProps get_TextRunProperties();
    internal CachedFont get_CachedFont();
    internal TextRunState get_State();
    internal Nullable`1<int> get_ItemizedScriptId();
    internal bool get_FallbackFont();
    internal void set_FallbackFont(bool value);
    internal bool get_HasEastAsianChars();
    internal void set_HasEastAsianChars(bool value);
    internal int get_CharacterCount();
    internal UInt32 get_ColorInt();
    internal ScriptAnalysis get_ScriptAnalysis();
    internal string get_Text();
    internal GlyphData get_GlyphData();
    internal bool get_Clone();
    internal void set_Clone(bool value);
    internal virtual int get_HighlightStart();
    internal virtual void set_HighlightStart(int value);
    internal virtual int get_HighlightEnd();
    internal virtual void set_HighlightEnd(int value);
    internal virtual Color get_HighlightColor();
    internal virtual void set_HighlightColor(Color value);
    internal virtual int get_CharacterIndexInOriginal();
    internal virtual void set_CharacterIndexInOriginal(int value);
    internal virtual bool get_IsHighlightTextRun();
    internal virtual bool get_IsPlaceholderTextRun();
    internal int get_UnderlineHeight();
    internal void set_UnderlineHeight(int value);
    internal virtual bool get_AllowColorInversion();
    internal virtual void set_AllowColorInversion(bool value);
    internal virtual TextRun Split(string text, SCRIPT_LOGATTR[] scriptLogAttr);
    internal virtual TextRun GetSubRun(int startIndex, int length);
    internal TextRun GetSubRun(int startIndex);
    internal Int32[] GetLogicalWidths(IntPtr hdc, FontCache fontCache);
    internal void TerminateAt(int index);
    internal CachedFont GetCachedFont(IntPtr hdc, FontCache fontCache);
    internal GlyphData GetGlyphData(IntPtr hdc, FontCache fontCache);
    internal int GetWidth(IntPtr hdc, FontCache fontCache);
    internal int GetHeight(IntPtr hdc, FontCache fontCache);
    internal int GetAscent(IntPtr hdc, FontCache fontCache);
    internal int GetDescent(IntPtr hdc, FontCache fontCache);
    internal void ShapeAndPlace(IntPtr hdc, FontCache fontCache);
    private void TextScriptPlace(IntPtr hdc, bool fontSelected, FontCache fontCache);
    private void LoadGlyphData(IntPtr hdc, FontCache fontCache);
    private void SetUndefinedScript();
    private byte GetCharset();
}
internal class Microsoft.ReportingServices.Rendering.RichText.TextRunItemizedData : object {
    internal List`1<int> SplitIndexes;
    internal List`1<TexRunShapeData> GlyphData;
    internal TextRunItemizedData(List`1<int> splitIndexes, List`1<TexRunShapeData> textRunsShapeData);
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.Rendering.RichText.TextRunState : Enum {
    public byte value__;
    public static TextRunState Clear;
    public static TextRunState HasEastAsianChars;
    public static TextRunState FallbackFont;
}
internal class Microsoft.ReportingServices.Rendering.RichText.Underline : object {
    internal static double UnderlineScale;
    private Point m_startPoint;
    private Point m_endPoint;
    internal Underline(TextRun run, IntPtr hdc, FontCache fontCache, Rectangle layoutRectangle, int x, int baselineY, bool verticalMode);
    internal void Draw(IntPtr hdc, int lineThickness, UInt32 rgbColor);
}
internal class Microsoft.ReportingServices.Rendering.RichText.Utilities : object {
    internal static int EASTASIACHAR_RANGE1_START;
    internal static int EASTASIACHAR_RANGE1_END;
    internal static int EASTASIACHAR_RANGE2_START;
    internal static int EASTASIACHAR_RANGE2_END;
    internal static int EASTASIACHAR_RANGE3_START;
    internal static int EASTASIACHAR_RANGE3_END;
    internal static int EASTASIACHAR_RANGE4_START;
    internal static int EASTASIACHAR_RANGE4_END;
    internal static int SCRIPT_LOOKUP_DEFAULT;
    internal static int SCRIPT_LOOKUP_KANA;
    internal static int SCRIPT_LOOKUP_HIRAGANA;
    internal static int SCRIPT_LOOKUP_KATAKANA;
    internal static int SCRIPT_LOOKUP_HAN;
    internal static int SCRIPT_LOOKUP_HANGUL;
    internal static int SCRIPT_LOOKUP_OLD_HANGUL;
    internal static int SCRIPT_LOOKUP_BOPOMOFO;
    internal static int SCRIPT_LOOKUP_KATAKANA_EXT;
    internal static string ConvertTabAndCheckEastAsianChars(string value, Boolean& hasEastAsianChars);
    internal static int GetEastAsianScriptIDFromText(string text);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal class Microsoft.ReportingServices.Rendering.RichText.Win32 : object {
    internal static int HORZSIZE;
    internal static int VERTSIZE;
    internal static int HORZRES;
    internal static int VERTRES;
    internal static int LOGPIXELSX;
    internal static int LOGPIXELSY;
    internal static int S_FALSE;
    internal static int ETO_CLIPPED;
    internal static int ETO_OPAQUE;
    internal static int ETO_RTLREADING;
    internal static int USP_E_SCRIPT_NOT_IN_FONT;
    internal static int E_OUTOFMEMORY;
    internal static int E_PENDING;
    internal static int SCRIPT_UNDEFINED;
    internal static int SIC_COMPLEX;
    internal static int SIC_ASCIIDIGIT;
    internal static int SIC_NEUTRAL;
    internal static int GM_COMPATIBLE;
    internal static int GM_ADVANCED;
    internal static int PS_GEOMETRIC;
    internal static int PS_COSMETIC;
    internal static int PS_ALTERNATE;
    internal static int PS_SOLID;
    internal static int PS_DASH;
    internal static int PS_DOT;
    internal static int PS_DASHDOT;
    internal static int PS_DASHDOTDOT;
    internal static int PS_NULL;
    internal static int PS_USERSTYLE;
    internal static int PS_INSIDEFRAME;
    internal static int PS_ENDCAP_ROUND;
    internal static int PS_ENDCAP_SQUARE;
    internal static int PS_ENDCAP_FLAT;
    internal static int PS_JOIN_BEVEL;
    internal static int PS_JOIN_MITER;
    internal static int PS_JOIN_ROUND;
    internal static int BS_SOLID;
    internal static int BS_NULL;
    internal static int BS_HOLLOW;
    internal static int BS_HATCHED;
    internal static int BS_PATTERN;
    internal static int BS_INDEXED;
    internal static int BS_DIBPATTERN;
    internal static int BS_DIBPATTERNPT;
    internal static int BS_PATTERN8X8;
    internal static int BS_DIBPATTERN8X8;
    internal static int BS_MONOPATTERN;
    internal static int HS_HORIZONTAL;
    internal static int HS_VERTICAL;
    internal static int HS_FDIAGONAL;
    internal static int HS_BDIAGONAL;
    internal static int HS_CROSS;
    internal static int HS_DIAGCROSS;
    internal static int MM_ANISOTROPIC;
    internal static int MM_HIENGLISH;
    internal static int MM_HIMETRIC;
    internal static int MM_ISOTROPIC;
    internal static int MM_LOENGLISH;
    internal static int MM_LOMETRIC;
    internal static int MM_TEXT;
    internal static int MM_TWIPS;
    internal static int TextRenderingHintSystemDefault;
    internal static int TextRenderingHintSingleBitPerPixelGridFit;
    internal static int TextRenderingHintSingleBitPerPixel;
    internal static int TextRenderingHintAntiAliasGridFit;
    internal static int TextRenderingHintAntiAlias;
    internal static int TextRenderingHintClearTypeGridFit;
    internal static UInt32 DEFAULT_QUALITY;
    internal static UInt32 DRAFT_QUALITY;
    internal static UInt32 PROOF_QUALITY;
    internal static UInt32 NONANTIALIASED_QUALITY;
    internal static UInt32 ANTIALIASED_QUALITY;
    internal static UInt32 CLEARTYPE_QUALITY;
    internal static UInt32 CLEARTYPE_NATURAL_QUALITY;
    internal static UInt32 BI_RGB;
    internal static double METER_PER_INCH;
    internal static int TA_BASELINE;
    internal static int TA_RTLREADING;
    internal static int TRANSPARENT;
    internal static int OPAQUE;
    internal static int OUT_TT_PRECIS;
    internal static int OUT_TT_ONLY_PRECIS;
    internal static int OUT_DEFAULT_PRECIS;
    internal static int LF_FACESIZE;
    internal static int LF_FULLFACESIZE;
    internal static int DEFAULT_CHARSET;
    internal static bool Failed(int hr);
    internal static bool Succeeded(int hr);
    internal static int ScriptXtoCP(int iX, int cChars, int cGlyphs, Int16[] pwLogClust, SCRIPT_VISATTR[] psva, Int32[] piAdvance, SCRIPT_ANALYSIS& psa, Int32& piCP, Int32& piTrailing);
    internal static int ScriptCPtoX(int iCP, bool fTrailing, int cChars, int cGlyphs, Int16[] pwLogClust, SCRIPT_VISATTR[] psva, Int32[] piAdvance, SCRIPT_ANALYSIS& psa, Int32& piX);
    internal static int ScriptGetCMap(IntPtr hdc, IntPtr& psc, string pwcInChars, int cChars, UInt32 dwFlags, Int16[] pwOutGlyphs);
    internal static int ScriptGetLogicalWidths(SCRIPT_ANALYSIS& psa, int cChars, int cGlyphs, Int32[] piGlyphWidth, Int16[] pwLogClust, SCRIPT_VISATTR[] psva, Int32[] piDx);
    internal static int ScriptBreak(string pwcChars, int cChars, SCRIPT_ANALYSIS& psa, SCRIPT_LOGATTR[] psla);
    internal static int ScriptGetProperties(IntPtr& ppScriptProperties, Int32& pNumScripts);
    internal static int ScriptIsComplex(string pwcInChars, int cInChars, UInt32 dwFlags);
    internal static int ScriptItemize(string pwcInChars, int cInChars, int cMaxItems, SCRIPT_CONTROL& psControl, SCRIPT_STATE& psState, SCRIPT_ITEM[] pItems, Int32& pcItems);
    internal static int ScriptLayout(int cRuns, Byte[] pbLevel, Int32[] piVisualToLogical, Int32[] piLogicalToVisual);
    internal static int ScriptShape(IntPtr hdc, ScriptCacheSafeHandle& psc, string pwcChars, int cChars, int cMaxGlyphs, SCRIPT_ANALYSIS& psa, Int16[] pwOutGlyphs, Int16[] pwLogClust, SCRIPT_VISATTR[] psva, Int32& pcGlyphs);
    internal static int ScriptFreeCache(IntPtr& psc);
    internal static int ScriptPlace(IntPtr hdc, ScriptCacheSafeHandle& psc, Int16[] pwGlyphs, int cGlyphs, SCRIPT_VISATTR[] psva, SCRIPT_ANALYSIS& psa, Int32[] piAdvance, GOFFSET[] pGoffset, ABC& pABC);
    internal static int ScriptTextOut(IntPtr hdc, ScriptCacheSafeHandle& psc, int x, int y, UInt32 fuOptions, IntPtr lprc, SCRIPT_ANALYSIS& psa, IntPtr pwcReserved, int iReserved, Int16[] pwGlyphs, int cGlyphs, Int32[] piAdvance, Int32[] piJustify, GOFFSET[] pGoffset);
    internal static bool ExtTextOut(IntPtr hdc, int X, int Y, UInt32 fuOptions, IntPtr lprc, string ptcInText, UInt32 cbCount, Int32[] lpDx);
    internal static Win32DCSafeHandle CreateCompatibleDC(IntPtr hdc);
    internal static IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);
    internal static Win32ObjectSafeHandle CreateDIBSection(Win32DCSafeHandle hdc, BITMAPINFOHEADER& pbmi, UInt32 iUsage, IntPtr& ppvBits, IntPtr hSection, UInt32 dwOffset);
    internal static int ScriptGetFontProperties(IntPtr hdc, ScriptCacheSafeHandle& psc, SCRIPT_FONTPROPERTIES& sfp);
    internal static IntPtr SelectObject(IntPtr hDC, IntPtr gdiobj);
    internal static IntPtr SelectObject(Win32DCSafeHandle hDC, Win32ObjectSafeHandle gdiobj);
    internal static IntPtr GetDC(IntPtr hWnd);
    internal static bool ReleaseDC(IntPtr hWnd, IntPtr hDC);
    internal static bool DeleteDC(IntPtr hdc);
    internal static int DeleteObject(IntPtr hObject);
    internal static IntPtr CreateFont(int nHeight, int nWidth, int nEscapement, int nOrientation, int fnWeight, UInt32 fdwItalic, UInt32 fdwUnderline, UInt32 fdwStrikeOut, UInt32 fdwCharSet, UInt32 fdwOutputPrecision, UInt32 fdwClipPrecision, UInt32 fdwQuality, UInt32 fdwPitchAndFamily, string lpszFace);
    internal static IntPtr CreateFontIndirect(LOGFONT& lplf);
    internal static int GetDeviceCaps(IntPtr hdc, int nIndex);
    internal static UInt32 SetTextColor(IntPtr hdc, UInt32 crColor);
    internal static UInt32 SetTextAlign(IntPtr hdc, UInt32 fMode);
    internal static int SetBkMode(IntPtr hdc, int iBkMode);
    internal static IntPtr CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    internal static bool SetViewportOrgEx(IntPtr hdc, int X, int Y, IntPtr lpPoint);
    internal static bool GetViewportOrgEx(IntPtr hdc, POINT& point);
    internal static int GetClipRgn(IntPtr hdc, IntPtr hrgn);
    internal static int SelectClipRgn(IntPtr hdc, IntPtr hrgn);
    internal static bool GetTextMetrics(IntPtr hdc, TEXTMETRIC& tm);
    internal static int GetFontObject(IntPtr hgdiobj, int cbBuffer, LOGFONT& lf);
    internal static bool Rectangle(IntPtr hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    internal static int GetCharABCWidthsFloat(IntPtr hdc, UInt32 iFirstChar, UInt32 iLastChar, ABCFloat[] lpABCF);
    internal static UInt32 GetGlyphIndicesW(IntPtr hdc, UInt16[] lpstr, int c, UInt16[] g, UInt32 fl);
    internal static bool GetTextExtentExPointI(IntPtr hdc, UInt16[] pgiIn, int cgi, int nMaxExtent, Int32& lpnFit, Int32[] alpDx, Size& lpSize);
    internal static UInt32 GetOutlineTextMetrics(IntPtr hdc, UInt32 cbData, OutlineTextMetric& lpOTM);
    internal static UInt32 GetFontData(IntPtr hdc, int dwTable, int dwOffset, Byte[] lpvBuffer, int cbData);
    internal static bool MoveToEx(IntPtr hdc, int X, int Y, IntPtr old);
    internal static bool LineTo(IntPtr hdc, int nXEnd, int nYEnd);
    internal static IntPtr CreatePen(int fnPenStyle, int nWidth, UInt32 crColor);
    internal static IntPtr CreateSolidBrush(UInt32 crColor);
    internal static IntPtr ExtCreatePen(UInt32 dwPenStyle, UInt32 dwWidth, LOGBRUSH& lplb, UInt32 dwStyleCount, UInt32[] lpStyle);
    internal static int SetMapMode(IntPtr hdc, int fnMapMode);
    internal static int GetMapMode(IntPtr hdc);
    internal static bool SetWorldTransform(IntPtr hdc, XFORM& lpXform);
    internal static int GetGraphicsMode(IntPtr hdc);
    internal static int SetGraphicsMode(IntPtr hdc, int iMode);
    internal static bool GetWorldTransform(IntPtr hdc, XFORM& lpXform);
}
internal class Microsoft.ReportingServices.Rendering.RichText.Win32DCSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public IntPtr Handle { get; }
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
    public IntPtr get_Handle();
}
internal class Microsoft.ReportingServices.Rendering.RichText.Win32ObjectSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public IntPtr Handle { get; }
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
    public IntPtr get_Handle();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.Constants : object {
    internal static int TOGGLEDIMENSION;
    internal static int SORTDIMENSION;
    internal static float INCH_TO_MILLIMETER;
    internal static string NoRowsSuffix;
    internal static string IgnoreDefinitionValue;
    internal static string RPLStamp;
    internal static int RPLVersionMajor;
    internal static int RPLVersionMinor;
    internal static int RPLVersionBuild;
    internal static string RPLVersionString;
    internal static int RPLVersionMajor2008;
    internal static int RPLVersionMinor2008;
    internal static int RPLVersionBuild2008;
    internal static string RPLVersionString2008;
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.GDIImageProps : object {
    private int m_width;
    private int m_height;
    private float m_horizontalResolution;
    private float m_verticalResolution;
    private ImageFormat m_rawFormat;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public float VerticalResolution { get; public set; }
    public float HorizontalResolution { get; public set; }
    public ImageFormat RawFormat { get; public set; }
    public GDIImageProps(Image image);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public float get_VerticalResolution();
    public void set_VerticalResolution(float value);
    public float get_HorizontalResolution();
    public void set_HorizontalResolution(float value);
    public ImageFormat get_RawFormat();
    public void set_RawFormat(ImageFormat value);
}
internal interface Microsoft.ReportingServices.Rendering.RPLProcessing.IRPLItemFactory {
    public abstract virtual RPLItem GetRPLItem();
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.ReportingServices.Rendering.RPLProcessing.IRPLStyle {
    public object Item { get; }
    public abstract virtual object get_Item(byte styleName);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.OffsetInfo : object {
    private long m_endOffset;
    internal RPLContext m_context;
    internal long EndOffset { get; }
    internal OffsetInfo(long endOffset, RPLContext context);
    internal long get_EndOffset();
    public sealed virtual RPLItem GetRPLItem();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLAction : object {
    private string m_label;
    private string m_hyperlink;
    private string m_bookmarkLink;
    private string m_drillthroughId;
    private string m_drillthroughUrl;
    public string Label { get; public set; }
    public string Hyperlink { get; public set; }
    public string BookmarkLink { get; public set; }
    public string DrillthroughId { get; public set; }
    public string DrillthroughUrl { get; public set; }
    internal RPLAction(string label);
    public string get_Label();
    public void set_Label(string value);
    public string get_Hyperlink();
    public void set_Hyperlink(string value);
    public string get_BookmarkLink();
    public void set_BookmarkLink(string value);
    public string get_DrillthroughId();
    public void set_DrillthroughId(string value);
    public string get_DrillthroughUrl();
    public void set_DrillthroughUrl(string value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLActionInfo : object {
    private RPLAction[] m_actions;
    public RPLAction[] Actions { get; public set; }
    internal RPLActionInfo(int count);
    public RPLAction[] get_Actions();
    public void set_Actions(RPLAction[] value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLActionInfoWithImageMap : RPLActionInfo {
    private RPLImageMapCollection m_imageMaps;
    public RPLImageMapCollection ImageMaps { get; public set; }
    internal RPLActionInfoWithImageMap(int actionCount);
    public RPLImageMapCollection get_ImageMaps();
    public void set_ImageMaps(RPLImageMapCollection value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLBody : RPLContainer {
    internal RPLBody(RPLItemProps props);
    internal RPLBody(long startOffset, RPLContext context, RPLMeasurement[] children);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLChart : RPLItem {
    internal RPLChart(long startOffset, RPLContext context);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLChartProps : RPLDynamicImageProps {
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLContainer : RPLItem {
    private RPLMeasurement[] m_children;
    public RPLMeasurement[] Children { get; public set; }
    internal RPLContainer(long startOffset, RPLContext context, RPLMeasurement[] children);
    internal RPLContainer(RPLItemProps rplElementProps);
    public RPLMeasurement[] get_Children();
    public void set_Children(RPLMeasurement[] value);
    internal static RPLItem CreateItem(long offset, RPLContext context, RPLMeasurement[] children, byte type);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLContext : object {
    private Hashtable m_sharedProps;
    private Hashtable m_sharedImages;
    private BinaryReader m_binaryReader;
    internal BinaryReader BinaryReader { get; }
    internal Hashtable SharedProps { get; internal set; }
    internal Hashtable SharedImages { get; internal set; }
    internal RPLContext(BinaryReader reader);
    public void Release();
    internal BinaryReader get_BinaryReader();
    internal Hashtable get_SharedProps();
    internal void set_SharedProps(Hashtable value);
    internal Hashtable get_SharedImages();
    internal void set_SharedImages(Hashtable value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLDynamicImageProps : RPLItemProps {
    private string m_streamName;
    private long m_dynamicImageContentOffset;
    private Stream m_dynamicImageContent;
    private RPLActionInfoWithImageMap[] m_actionImageMaps;
    private Rectangle m_offsets;
    public string StreamName { get; public set; }
    public long DynamicImageContentOffset { get; public set; }
    public Stream DynamicImageContent { get; public set; }
    public RPLActionInfoWithImageMap[] ActionImageMapAreas { get; public set; }
    public Rectangle ImageConsolidationOffsets { get; public set; }
    public string get_StreamName();
    public void set_StreamName(string value);
    public long get_DynamicImageContentOffset();
    public void set_DynamicImageContentOffset(long value);
    public Stream get_DynamicImageContent();
    public void set_DynamicImageContent(Stream value);
    public RPLActionInfoWithImageMap[] get_ActionImageMapAreas();
    public void set_ActionImageMapAreas(RPLActionInfoWithImageMap[] value);
    public Rectangle get_ImageConsolidationOffsets();
    public void set_ImageConsolidationOffsets(Rectangle value);
}
internal abstract class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLElement : object {
    internal RPLContext m_context;
    protected RPLElementProps m_rplElementProps;
    public RPLElementProps ElementProps { get; public set; }
    public RPLElementPropsDef ElementPropsDef { get; }
    internal RPLElement(RPLContext context);
    protected RPLElement(RPLElementProps rplElementProps);
    public virtual RPLElementProps get_ElementProps();
    public virtual void set_ElementProps(RPLElementProps value);
    public virtual RPLElementPropsDef get_ElementPropsDef();
}
internal abstract class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLElementProps : object {
    protected RPLElementPropsDef m_definition;
    protected string m_uniqueName;
    protected RPLStyleProps m_nonSharedStyle;
    public RPLElementPropsDef Definition { get; public set; }
    public RPLElementStyle Style { get; }
    public string UniqueName { get; public set; }
    public RPLStyleProps NonSharedStyle { get; public set; }
    public virtual RPLElementPropsDef get_Definition();
    public virtual void set_Definition(RPLElementPropsDef value);
    public RPLElementStyle get_Style();
    public string get_UniqueName();
    public void set_UniqueName(string value);
    public RPLStyleProps get_NonSharedStyle();
    public void set_NonSharedStyle(RPLStyleProps value);
}
internal abstract class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLElementPropsDef : object {
    protected string m_id;
    protected RPLStyleProps m_sharedStyle;
    public string ID { get; public set; }
    public RPLStyleProps SharedStyle { get; public set; }
    public string get_ID();
    public void set_ID(string value);
    public RPLStyleProps get_SharedStyle();
    public void set_SharedStyle(RPLStyleProps value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLElementStyle : object {
    private RPLStyleProps m_sharedProperties;
    private RPLStyleProps m_nonSharedProperties;
    public object Item { get; }
    public RPLStyleProps SharedProperties { get; }
    public RPLStyleProps NonSharedProperties { get; }
    public RPLElementStyle(RPLStyleProps nonSharedProps, RPLStyleProps sharedProps);
    public sealed virtual object get_Item(byte styleName);
    public RPLStyleProps get_SharedProperties();
    public RPLStyleProps get_NonSharedProperties();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLFormat : object {
    public static byte Shared;
    public static byte NonShared;
    public static byte UseShared;
    public static byte OffsetsArrayElementStart;
    public static byte PageContentStart;
    public static byte Columns;
    public static byte ReportStart;
    public static byte PageStart;
    public static byte ReportPropertiesStart;
    public static byte PagePropertiesStart;
    public static byte PageHeader;
    public static byte PageFooter;
    public static byte Body;
    public static byte TextBox;
    public static byte Line;
    public static byte Image;
    public static byte Rectangle;
    public static byte Chart;
    public static byte SubReport;
    public static byte Tablix;
    public static byte GaugePanel;
    public static byte ElementPropsStart;
    public static byte MeasurementsStart;
    public static byte TablixStructureStart;
    public static byte TablixBodyRowStart;
    public static byte RichTextBoxStructureStart;
    public static byte ParagraphStart;
    public static byte TextRunStart;
    public static byte ElementEnd;
    public static byte Delimiter;
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLGaugePanel : RPLItem {
    internal RPLGaugePanel(long startOffset, RPLContext context);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLGaugePanelProps : RPLDynamicImageProps {
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLHeaderFooter : RPLContainer {
    internal RPLHeaderFooter(long startOffset, RPLContext context, RPLMeasurement[] children);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLHeaderFooterPropsDef : RPLItemPropsDef {
    private bool m_printOnFirstPage;
    public bool PrintOnFirstPage { get; public set; }
    public bool get_PrintOnFirstPage();
    public void set_PrintOnFirstPage(bool value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLImage : RPLItem {
    internal RPLImage(long startOffset, RPLContext context);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLImageData : object {
    private string m_imageName;
    private string m_imageMimeType;
    private bool m_isShared;
    private long m_imageDataOffset;
    private Byte[] m_stream;
    private GDIImageProps m_gdiImageProps;
    private Rectangle m_offsets;
    public string ImageName { get; public set; }
    public string ImageMimeType { get; public set; }
    public long ImageDataOffset { get; public set; }
    public Byte[] ImageData { get; public set; }
    public GDIImageProps GDIImageProps { get; public set; }
    public bool IsShared { get; public set; }
    public Rectangle ImageConsolidationOffsets { get; public set; }
    public string get_ImageName();
    public void set_ImageName(string value);
    public string get_ImageMimeType();
    public void set_ImageMimeType(string value);
    public long get_ImageDataOffset();
    public void set_ImageDataOffset(long value);
    public Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    public GDIImageProps get_GDIImageProps();
    public void set_GDIImageProps(GDIImageProps value);
    public bool get_IsShared();
    public void set_IsShared(bool value);
    public Rectangle get_ImageConsolidationOffsets();
    public void set_ImageConsolidationOffsets(Rectangle value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLImageMap : object {
    private ShapeType m_shape;
    private Single[] m_coordinates;
    private string m_tooltip;
    public ShapeType Shape { get; public set; }
    public Single[] Coordinates { get; public set; }
    public string ToolTip { get; public set; }
    public ShapeType get_Shape();
    public void set_Shape(ShapeType value);
    public Single[] get_Coordinates();
    public void set_Coordinates(Single[] value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLImageMapCollection : object {
    private RPLImageMap[] m_list;
    public RPLImageMap Item { get; public set; }
    public int Count { get; }
    internal RPLImageMapCollection(int count);
    internal RPLImageMapCollection(RPLImageMap[] list);
    public RPLImageMap get_Item(int index);
    public void set_Item(int index, RPLImageMap value);
    public int get_Count();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLImageProps : RPLItemProps {
    private RPLImageData m_image;
    private RPLActionInfo m_actionInfo;
    private RPLActionInfoWithImageMap[] m_actionImageMapAreas;
    public RPLImageData Image { get; public set; }
    public RPLActionInfoWithImageMap[] ActionImageMapAreas { get; public set; }
    public RPLActionInfo ActionInfo { get; public set; }
    public RPLImageData get_Image();
    public void set_Image(RPLImageData value);
    public RPLActionInfoWithImageMap[] get_ActionImageMapAreas();
    public void set_ActionImageMapAreas(RPLActionInfoWithImageMap[] value);
    public RPLActionInfo get_ActionInfo();
    public void set_ActionInfo(RPLActionInfo value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLImagePropsDef : RPLItemPropsDef {
    private Sizings m_sizing;
    public Sizings Sizing { get; public set; }
    public Sizings get_Sizing();
    public void set_Sizing(Sizings value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLItem : RPLElement {
    protected long m_startOffset;
    public RPLElementProps ElementProps { get; public set; }
    public RPLElementPropsDef ElementPropsDef { get; }
    public long StartOffset { get; }
    public object RPLSource { get; }
    internal RPLItem(long startOffset, RPLContext context);
    internal RPLItem(RPLItemProps rplElementProps);
    public virtual RPLElementProps get_ElementProps();
    public virtual void set_ElementProps(RPLElementProps value);
    public virtual RPLElementPropsDef get_ElementPropsDef();
    public long get_StartOffset();
    public object get_RPLSource();
    internal static RPLItem CreateItem(long offset, RPLContext context, byte type);
    public sealed virtual RPLItem GetRPLItem();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLItemProps : RPLElementProps {
    private string m_label;
    private string m_bookmark;
    private string m_tooltip;
    public string ToolTip { get; public set; }
    public string Bookmark { get; public set; }
    public string Label { get; public set; }
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Bookmark();
    public void set_Bookmark(string value);
    public string get_Label();
    public void set_Label(string value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLItemPropsDef : RPLElementPropsDef {
    private string m_name;
    private string m_tooltip;
    private string m_bookmark;
    private string m_label;
    private string m_toggleItem;
    public string Name { get; public set; }
    public string ToolTip { get; public set; }
    public string Bookmark { get; public set; }
    public string Label { get; public set; }
    public string ToggleItem { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Bookmark();
    public void set_Bookmark(string value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToggleItem();
    public void set_ToggleItem(string value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLLine : RPLItem {
    internal RPLLine(long startOffset, RPLContext context);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLLineProps : RPLItemProps {
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLLinePropsDef : RPLItemPropsDef {
    private bool m_slant;
    public bool Slant { get; public set; }
    public bool get_Slant();
    public void set_Slant(bool value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLMeasurement : RPLSizes {
    private IRPLItemFactory m_rplElement;
    private int m_zindex;
    private byte m_state;
    public int ZIndex { get; public set; }
    public byte State { get; public set; }
    public RPLItem Element { get; public set; }
    internal OffsetInfo OffsetInfo { get; }
    internal RPLMeasurement(RPLItem rplElement);
    public int get_ZIndex();
    public void set_ZIndex(int value);
    public byte get_State();
    public void set_State(byte value);
    public RPLItem get_Element();
    public void set_Element(RPLItem value);
    internal OffsetInfo get_OffsetInfo();
    internal void SetOffset(long offset, RPLContext context);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLPage : object {
    private float m_pageHeight;
    private float m_pageWidth;
    private float m_marginTop;
    private float m_marginBottom;
    private float m_marginLeft;
    private float m_marginRight;
    private float m_columnSpacing;
    private int m_columns;
    private RPLElementStyle m_pageStyle;
    private RPLMeasurement m_header;
    private RPLMeasurement m_footer;
    private string m_id;
    private string m_uniqueName;
    public string ID { get; public set; }
    public string UniqueName { get; public set; }
    public float PageWidth { get; public set; }
    public float PageHeight { get; public set; }
    public float MarginTop { get; public set; }
    public float MarginBottom { get; public set; }
    public float MarginLeft { get; public set; }
    public float MarginRight { get; public set; }
    public float ColumnSpacing { get; public set; }
    public int Columns { get; public set; }
    public RPLElementStyle Style { get; public set; }
    public RPLMeasurement Header { get; public set; }
    public RPLMeasurement Footer { get; public set; }
    public string get_ID();
    public void set_ID(string value);
    public string get_UniqueName();
    public void set_UniqueName(string value);
    public float get_PageWidth();
    public void set_PageWidth(float value);
    public float get_PageHeight();
    public void set_PageHeight(float value);
    public float get_MarginTop();
    public void set_MarginTop(float value);
    public float get_MarginBottom();
    public void set_MarginBottom(float value);
    public float get_MarginLeft();
    public void set_MarginLeft(float value);
    public float get_MarginRight();
    public void set_MarginRight(float value);
    public float get_ColumnSpacing();
    public void set_ColumnSpacing(float value);
    public int get_Columns();
    public void set_Columns(int value);
    public RPLElementStyle get_Style();
    public void set_Style(RPLElementStyle value);
    public RPLMeasurement get_Header();
    public void set_Header(RPLMeasurement value);
    public RPLMeasurement get_Footer();
    public void set_Footer(RPLMeasurement value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLPageContent : object {
    private RPLMeasurement[] m_columns;
    private RPLPage m_page;
    private long m_endOffset;
    private RPLContext m_context;
    public RPLMeasurement[] Columns { get; public set; }
    public RPLPage Page { get; public set; }
    internal RPLPageContent(int columns);
    internal RPLPageContent(long endOffset, RPLContext context);
    public RPLMeasurement[] get_Columns();
    public void set_Columns(RPLMeasurement[] value);
    public RPLPage get_Page();
    public void set_Page(RPLPage value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLParagraph : RPLElement {
    private int m_textRunCount;
    private RPLSizes m_contentSizes;
    private Queue`1<RPLTextRun> m_textRuns;
    private long m_textRunOffsets;
    public RPLSizes ContentSizes { get; public set; }
    public int TextRunCount { get; public set; }
    internal RPLParagraph(long textRunOffsets, RPLContext context);
    internal RPLParagraph(Queue`1<RPLTextRun> textRuns, RPLParagraphProps rplElementProps);
    public RPLSizes get_ContentSizes();
    public void set_ContentSizes(RPLSizes value);
    public int get_TextRunCount();
    public void set_TextRunCount(int value);
    internal void AddTextRun(RPLTextRun textRun);
    public RPLTextRun GetNextTextRun();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLParagraphProps : RPLElementProps {
    private Nullable`1<ListStyles> m_listStyle;
    private Nullable`1<int> m_listLevel;
    private int m_paragraphNumber;
    private RPLReportSize m_leftIndent;
    private RPLReportSize m_rightIndent;
    private RPLReportSize m_hangingIndent;
    private RPLReportSize m_spaceBefore;
    private RPLReportSize m_spaceAfter;
    private bool m_firstLine;
    public RPLReportSize LeftIndent { get; public set; }
    public RPLReportSize RightIndent { get; public set; }
    public RPLReportSize HangingIndent { get; public set; }
    public Nullable`1<ListStyles> ListStyle { get; public set; }
    public Nullable`1<int> ListLevel { get; public set; }
    public int ParagraphNumber { get; public set; }
    public RPLReportSize SpaceBefore { get; public set; }
    public RPLReportSize SpaceAfter { get; public set; }
    public bool FirstLine { get; public set; }
    public RPLReportSize get_LeftIndent();
    public void set_LeftIndent(RPLReportSize value);
    public RPLReportSize get_RightIndent();
    public void set_RightIndent(RPLReportSize value);
    public RPLReportSize get_HangingIndent();
    public void set_HangingIndent(RPLReportSize value);
    public Nullable`1<ListStyles> get_ListStyle();
    public void set_ListStyle(Nullable`1<ListStyles> value);
    public Nullable`1<int> get_ListLevel();
    public void set_ListLevel(Nullable`1<int> value);
    public int get_ParagraphNumber();
    public void set_ParagraphNumber(int value);
    public RPLReportSize get_SpaceBefore();
    public void set_SpaceBefore(RPLReportSize value);
    public RPLReportSize get_SpaceAfter();
    public void set_SpaceAfter(RPLReportSize value);
    public bool get_FirstLine();
    public void set_FirstLine(bool value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLParagraphPropsDef : RPLElementPropsDef {
    private ListStyles m_listStyle;
    private int m_listLevel;
    private RPLReportSize m_leftIndent;
    private RPLReportSize m_rightIndent;
    private RPLReportSize m_hangingIndent;
    private RPLReportSize m_spaceBefore;
    private RPLReportSize m_spaceAfter;
    public RPLReportSize LeftIndent { get; public set; }
    public RPLReportSize RightIndent { get; public set; }
    public RPLReportSize HangingIndent { get; public set; }
    public ListStyles ListStyle { get; public set; }
    public int ListLevel { get; public set; }
    public RPLReportSize SpaceBefore { get; public set; }
    public RPLReportSize SpaceAfter { get; public set; }
    public RPLReportSize get_LeftIndent();
    public void set_LeftIndent(RPLReportSize value);
    public RPLReportSize get_RightIndent();
    public void set_RightIndent(RPLReportSize value);
    public RPLReportSize get_HangingIndent();
    public void set_HangingIndent(RPLReportSize value);
    public ListStyles get_ListStyle();
    public void set_ListStyle(ListStyles value);
    public int get_ListLevel();
    public void set_ListLevel(int value);
    public RPLReportSize get_SpaceBefore();
    public void set_SpaceBefore(RPLReportSize value);
    public RPLReportSize get_SpaceAfter();
    public void set_SpaceAfter(RPLReportSize value);
}
internal static class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLReader : object {
    internal static byte ReadItemType(long startOffset, BinaryReader reader);
    internal static long ResolveReportItemEnd(long offsetEnd, BinaryReader reader, Byte& itemType);
    internal static RPLMeasurement[] ReadMeasurements(RPLContext context, BinaryReader reader);
    internal static RPLParagraph ReadParagraph(long paragraphOffset, RPLContext context);
    internal static RPLTextRun ReadTextRun(long textRunOffset, RPLContext context);
    internal static void ReadTablixStructure(RPLTablix tablix, RPLContext context, BinaryReader reader);
    internal static RPLTablixMemberDef ReadTablixMemberDef(BinaryReader reader);
    internal static RPLTablixRow ReadTablixRow(long rowOffset, RPLContext context, RPLTablixMemberDef[] rowMembersDef, RPLTablixMemberDef[] colMembersDef, Int64& nextRowStart);
    private static RPLTablixCell ReadTablixCell(byte type, RPLContext context, BinaryReader reader, RPLTablixMemberDef[] rowMembersDef, RPLTablixMemberDef[] colMembersDef);
    internal static RPLItemProps ReadElementProps(long startOffset, RPLContext context);
    internal static RPLItemPropsDef ReadElementPropsDef(long startOffset, RPLContext context);
    internal static RPLItemProps ReadElementProps(long startOffset, RPLContext context, Byte& elementType);
    internal static RPLItemPropsDef ReadElementPropsDef(long startOffset, RPLContext context, Byte& elementType);
    private static void ReadItemProps(RPLItemProps element, byte code, RPLContext context, BinaryReader reader);
    private static RPLParagraphProps ReadParagraphProps(RPLContext context, BinaryReader reader, RPLSizes& sizes);
    private static RPLTextRunProps ReadTextRunProps(RPLContext context, BinaryReader reader, RPLSizes& sizes);
    private static RPLItemPropsDef ReadItemPropsDef(byte code, RPLContext context, BinaryReader reader);
    private static RPLItemPropsDef ReadDefinition(byte elementType, RPLContext context, BinaryReader reader);
    private static void ReadBasedDefinitionProps(RPLItemPropsDef props, RPLContext context, BinaryReader reader, byte token);
    private static RPLItemPropsDef ReadElementDefinition(RPLContext context, BinaryReader reader);
    private static RPLItemPropsDef ReadRectangleDefinition(RPLContext context, BinaryReader reader);
    private static RPLItemPropsDef ReadHeaderFooterDefinition(RPLContext context, BinaryReader reader);
    private static RPLSubReportPropsDef ReadSubReportDefinition(RPLContext context, BinaryReader reader);
    private static RPLLinePropsDef ReadLineDefinition(RPLContext context, BinaryReader reader);
    private static RPLImagePropsDef ReadImageDefinition(RPLContext context, BinaryReader reader);
    private static RPLTextBoxPropsDef ReadTextBoxDefinition(RPLContext context, BinaryReader reader);
    private static void ReadInstance(RPLItemProps instance, byte code, RPLContext context, BinaryReader reader);
    private static void ReadBasedInstanceProps(RPLItemProps props, RPLContext context, BinaryReader reader, byte token);
    private static void ReadElementInstance(RPLItemProps props, RPLContext context, BinaryReader reader);
    private static void ReadSubReportInstance(RPLSubReportProps props, RPLContext context, BinaryReader reader);
    private static void ReadImageInstance(RPLImageProps props, RPLContext context, BinaryReader reader);
    private static void ReadDynamicImageInstance(RPLDynamicImageProps dynamicImage, RPLContext context, BinaryReader reader);
    private static void ReadTextBoxInstance(RPLTextBoxProps props, RPLContext context, BinaryReader reader);
    private static RPLElementStyle ReadPageStyle(RPLContext context, BinaryReader reader);
    private static RPLStyleProps ReadStyle(RPLContext context, BinaryReader reader);
    private static RPLStyleProps ReadStyleProps(RPLContext context, BinaryReader reader);
    private static RPLImageData ReadImage(RPLContext context, bool backgroundImage, BinaryReader reader);
    private static RPLParagraphPropsDef ReadParagraphDefinition(RPLContext context, BinaryReader reader);
    private static RPLParagraphPropsDef ReadParagraphDefinitionProps(RPLContext context, BinaryReader reader);
    private static void ReadParagraphInstance(RPLParagraphProps props, RPLContext context, BinaryReader reader, RPLSizes& size);
    private static RPLTextRunPropsDef ReadTextRunDefinition(RPLContext context, BinaryReader reader);
    private static RPLTextRunPropsDef ReadTextRunDefinitionProps(RPLContext context, BinaryReader reader);
    private static void ReadTextRunInstance(RPLTextRunProps props, RPLContext context, BinaryReader reader, RPLSizes& size);
    private static RPLImageData ReadImageProperties(BinaryReader reader);
    private static RPLActionInfo ReadActionInfo(BinaryReader reader);
    private static RPLActionInfoWithImageMap ReadActionInfoWithMaps(BinaryReader reader);
    private static RPLAction ReadAction(BinaryReader reader);
    private static RPLActionInfoWithImageMap[] ReadActionImageMapAreas(BinaryReader reader);
    private static RPLImageMapCollection ReadImageMapAreas(BinaryReader reader);
    private static void ReadPageProps(RPLPage page, RPLContext context, BinaryReader reader);
    private static void ReadReportProps(RPLReport report, BinaryReader reader);
    internal static void ReadReport(RPLReport report, RPLContext context);
    private static bool ReadAndVerifyRPLVersion(BinaryReader reader, Version& rplVersion);
    internal static void ReadPageContent(RPLMeasurement[]& bodyColumns, RPLPage& page, long endOffset, RPLContext context);
    internal static RPLTextBox ReadTextBoxStructure(long startOffset, RPLContext m_context);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLRectangle : RPLContainer {
    internal RPLRectangle(long startOffset, RPLContext context, RPLMeasurement[] children);
    internal RPLRectangle(RPLItemProps rplElementProps);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLRectanglePropsDef : RPLItemPropsDef {
    private string m_linkToChildId;
    public string LinkToChildId { get; public set; }
    public string get_LinkToChildId();
    public void set_LinkToChildId(string value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLReport : object {
    private RPLPageContent[] m_rplPages;
    private string m_location;
    private string m_description;
    private string m_language;
    private string m_author;
    private int m_autoRefresh;
    private string m_reportName;
    private DateTime m_executionTime;
    private RPLContext m_rplContext;
    private Version m_rplVersion;
    public Version RPLVersion { get; public set; }
    public string ReportName { get; public set; }
    public string Description { get; public set; }
    public string Author { get; public set; }
    public int AutoRefresh { get; public set; }
    public DateTime ExecutionTime { get; public set; }
    public string Location { get; public set; }
    public RPLPageContent[] RPLPages { get; public set; }
    public string Language { get; public set; }
    public RPLReport(BinaryReader reader);
    public Version get_RPLVersion();
    public void set_RPLVersion(Version value);
    public string get_ReportName();
    public void set_ReportName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Author();
    public void set_Author(string value);
    public int get_AutoRefresh();
    public void set_AutoRefresh(int value);
    public DateTime get_ExecutionTime();
    public void set_ExecutionTime(DateTime value);
    public string get_Location();
    public void set_Location(string value);
    public RPLPageContent[] get_RPLPages();
    public void set_RPLPages(RPLPageContent[] value);
    public string get_Language();
    public void set_Language(string value);
    public void GetImage(long offset, Stream imageStream);
    public Byte[] GetImage(long offset);
    public RPLItemProps GetItemProps(long startOffset, Byte& elementType);
    public RPLItemProps GetItemProps(object rplSource, Byte& elementType);
    public void Release();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLReportColor : object {
    private static Regex m_colorRegex;
    private string m_color;
    private Color m_GDIColor;
    public RPLReportColor(string color);
    private static RPLReportColor();
    public virtual string ToString();
    public Color ToColor();
    private void ParseColor();
    private void ColorFromArgb();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLReportSize : object {
    private string m_size;
    private double m_sizeInMM;
    public RPLReportSize(string size);
    public RPLReportSize(double sizeInMM);
    public virtual string ToString();
    public double ToMillimeters();
    public double ToInches();
    public double ToPoints();
    public double ToCentimeters();
    internal void ParseSize();
    internal double ConvertToMM(RVUnit unit);
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLRes : object {
    public static CultureInfo Culture { get; public set; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string InvalidRPLToken(string rplItemType, string hexToken);
    public static string UnsupportedRPLVersion(string actualVersion, string expectedVersion);
    public static string IncompleteRPLVersion(string length);
    public static string MismatchRPLVersion(string version1, string version2);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLSizes : object {
    private float m_left;
    private float m_top;
    private float m_width;
    private float m_height;
    public float Left { get; public set; }
    public float Top { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float get_Left();
    public void set_Left(float value);
    public float get_Top();
    public void set_Top(float value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLStyleProps : object {
    private Dictionary`2<byte, object> m_styleMap;
    public object Item { get; }
    public int Count { get; }
    public sealed virtual object get_Item(byte styleName);
    public int get_Count();
    internal void Add(byte name, object value);
    internal void AddAll(RPLStyleProps styleProps);
    private sealed virtual override IEnumerator`1<byte> System.Collections.Generic.IEnumerable<System.Byte>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLSubReport : RPLContainer {
    internal RPLSubReport(long startOffset, RPLContext context, RPLMeasurement[] children);
    internal RPLSubReport(RPLItemProps rplElementProps);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLSubReportProps : RPLItemProps {
    private string m_language;
    public string Language { get; public set; }
    public string get_Language();
    public void set_Language(string value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLSubReportPropsDef : RPLItemPropsDef {
    private string m_reportName;
    public string ReportName { get; public set; }
    public string get_ReportName();
    public void set_ReportName(string value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablix : RPLItem {
    private int m_columnHeaderRows;
    private int m_rowHeaderColumns;
    private int m_colsBeforeRowHeaders;
    private Directions m_layoutDirection;
    private Single[] m_columnsWidths;
    private Single[] m_rowHeights;
    private float m_contentLeft;
    private float m_contentTop;
    private Boolean[] m_fixedColumns;
    private Byte[] m_rowsState;
    private Queue`1<RPLTablixRow> m_rows;
    private long m_nextRowStart;
    private RPLTablixMemberDef[] m_tablixRowMembersDef;
    private RPLTablixMemberDef[] m_tablixColMembersDef;
    public Directions LayoutDirection { get; public set; }
    public int ColumnHeaderRows { get; public set; }
    public int RowHeaderColumns { get; public set; }
    public int ColsBeforeRowHeaders { get; public set; }
    public float ContentTop { get; public set; }
    public float ContentLeft { get; public set; }
    public Single[] ColumnWidths { get; public set; }
    public Single[] RowHeights { get; public set; }
    public Boolean[] FixedColumns { get; public set; }
    public Byte[] RowsState { get; public set; }
    unknown long NextRowStart {internal set; }
    unknown Queue`1<RPLTablixRow> Rows {internal set; }
    internal RPLTablixMemberDef[] TablixRowMembersDef { get; internal set; }
    internal RPLTablixMemberDef[] TablixColMembersDef { get; internal set; }
    internal RPLTablix(long startOffset, RPLContext context);
    internal RPLTablix(RPLItemProps rplElementProps);
    public Directions get_LayoutDirection();
    public void set_LayoutDirection(Directions value);
    public int get_ColumnHeaderRows();
    public void set_ColumnHeaderRows(int value);
    public int get_RowHeaderColumns();
    public void set_RowHeaderColumns(int value);
    public int get_ColsBeforeRowHeaders();
    public void set_ColsBeforeRowHeaders(int value);
    public float get_ContentTop();
    public void set_ContentTop(float value);
    public float get_ContentLeft();
    public void set_ContentLeft(float value);
    public Single[] get_ColumnWidths();
    public void set_ColumnWidths(Single[] value);
    public Single[] get_RowHeights();
    public void set_RowHeights(Single[] value);
    public Boolean[] get_FixedColumns();
    public void set_FixedColumns(Boolean[] value);
    public Byte[] get_RowsState();
    public void set_RowsState(Byte[] value);
    internal void set_NextRowStart(long value);
    internal void set_Rows(Queue`1<RPLTablixRow> value);
    internal RPLTablixMemberDef[] get_TablixRowMembersDef();
    internal void set_TablixRowMembersDef(RPLTablixMemberDef[] value);
    internal RPLTablixMemberDef[] get_TablixColMembersDef();
    internal void set_TablixColMembersDef(RPLTablixMemberDef[] value);
    public bool FixedRow(int index);
    public bool SharedLayoutRow(int index);
    public bool UseSharedLayoutRow(int index);
    public float GetRowHeight(int index, int span);
    public float GetColumnWidth(int index, int span);
    public RPLTablixRow GetNextRow();
    internal void AddRow(RPLTablixRow row);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablixCell : object {
    private IRPLItemFactory m_cellElement;
    private byte m_cellElementState;
    private RPLSizes m_contentSizes;
    protected int m_colSpan;
    private int m_columnIndex;
    private int m_rowIndex;
    public int ColSpan { get; public set; }
    public int RowSpan { get; public set; }
    public int ColIndex { get; public set; }
    public int RowIndex { get; public set; }
    public RPLItem Element { get; public set; }
    public RPLSizes ContentSizes { get; public set; }
    public byte ElementState { get; public set; }
    internal RPLTablixCell(RPLItem element, byte elementState);
    public int get_ColSpan();
    public void set_ColSpan(int value);
    public virtual int get_RowSpan();
    public virtual void set_RowSpan(int value);
    public int get_ColIndex();
    public void set_ColIndex(int value);
    public int get_RowIndex();
    public void set_RowIndex(int value);
    public RPLItem get_Element();
    public void set_Element(RPLItem value);
    public RPLSizes get_ContentSizes();
    public void set_ContentSizes(RPLSizes value);
    public byte get_ElementState();
    public void set_ElementState(byte value);
    internal void SetOffset(long offset, RPLContext context);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablixCornerCell : RPLTablixCell {
    protected int m_rowSpan;
    public int RowSpan { get; public set; }
    internal RPLTablixCornerCell(RPLItem element, byte elementState, int rowSpan, int colSpan);
    public virtual int get_RowSpan();
    public virtual void set_RowSpan(int value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablixFullRow : RPLTablixRow {
    private int m_headerStart;
    private int m_bodyStart;
    private List`1<RPLTablixMemberCell> m_omittedHeaders;
    public int HeaderStart { get; }
    public int BodyStart { get; }
    public List`1<RPLTablixMemberCell> OmittedHeaders { get; }
    internal RPLTablixFullRow(int headerStart, int bodyStart);
    internal RPLTablixFullRow(List`1<RPLTablixCell> cells, List`1<RPLTablixMemberCell> omittedHeaders, int headerStart, int bodyStart);
    public virtual int get_HeaderStart();
    public virtual int get_BodyStart();
    public virtual List`1<RPLTablixMemberCell> get_OmittedHeaders();
    internal virtual void SetHeaderStart();
    internal virtual void SetBodyStart();
    internal virtual void AddOmittedHeader(RPLTablixMemberCell cell);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablixMemberCell : RPLTablixCell {
    private string m_uniqueName;
    private string m_groupLabel;
    private int m_recursiveToggleLevel;
    private byte m_state;
    private int m_rowSpan;
    private RPLTablixMemberDef m_memberDef;
    public string GroupLabel { get; public set; }
    public int RecursiveToggleLevel { get; public set; }
    public bool IsRecursiveToggle { get; }
    public string UniqueName { get; public set; }
    public bool HasToggle { get; }
    public bool ToggleCollapse { get; }
    public bool IsInnerMost { get; }
    public int RowSpan { get; public set; }
    public RPLTablixMemberDef TablixMemberDef { get; public set; }
    internal byte State { get; internal set; }
    internal RPLTablixMemberCell(RPLItem element, byte elementState, int rowSpan, int colSpan);
    public string get_GroupLabel();
    public void set_GroupLabel(string value);
    public int get_RecursiveToggleLevel();
    public void set_RecursiveToggleLevel(int value);
    public bool get_IsRecursiveToggle();
    public string get_UniqueName();
    public void set_UniqueName(string value);
    public bool get_HasToggle();
    public bool get_ToggleCollapse();
    public bool get_IsInnerMost();
    public virtual int get_RowSpan();
    public virtual void set_RowSpan(int value);
    public RPLTablixMemberDef get_TablixMemberDef();
    public void set_TablixMemberDef(RPLTablixMemberDef value);
    internal byte get_State();
    internal void set_State(byte value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablixMemberDef : object {
    private string m_definitionPath;
    private int m_memberCellIndex;
    private int m_level;
    private byte m_state;
    public string DefinitionPath { get; public set; }
    public int MemberCellIndex { get; public set; }
    public int Level { get; public set; }
    public bool StaticHeadersTree { get; }
    public bool IsStatic { get; }
    public bool IsColumn { get; }
    internal byte State { get; internal set; }
    internal RPLTablixMemberDef(string definitionPath, int memberCellIndex, byte state, int defTreeLevel);
    public string get_DefinitionPath();
    public void set_DefinitionPath(string value);
    public int get_MemberCellIndex();
    public void set_MemberCellIndex(int value);
    public int get_Level();
    public void set_Level(int value);
    public bool get_StaticHeadersTree();
    public bool get_IsStatic();
    public bool get_IsColumn();
    internal byte get_State();
    internal void set_State(byte value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablixOmittedRow : RPLTablixRow {
    private List`1<RPLTablixMemberCell> m_omittedHeaders;
    public int BodyStart { get; }
    public List`1<RPLTablixMemberCell> OmittedHeaders { get; }
    internal RPLTablixOmittedRow(List`1<RPLTablixMemberCell> omittedHeaders);
    public virtual int get_BodyStart();
    public virtual List`1<RPLTablixMemberCell> get_OmittedHeaders();
    internal virtual void AddOmittedHeader(RPLTablixMemberCell cell);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTablixRow : object {
    protected List`1<RPLTablixCell> m_cells;
    public RPLTablixCell Item { get; public set; }
    public int HeaderStart { get; }
    public int BodyStart { get; }
    public List`1<RPLTablixMemberCell> OmittedHeaders { get; }
    public int NumCells { get; }
    internal List`1<RPLTablixCell> RowCells { get; }
    internal RPLTablixRow(List`1<RPLTablixCell> cells);
    public RPLTablixCell get_Item(int index);
    public void set_Item(int index, RPLTablixCell value);
    public virtual int get_HeaderStart();
    public virtual int get_BodyStart();
    public virtual List`1<RPLTablixMemberCell> get_OmittedHeaders();
    public int get_NumCells();
    internal List`1<RPLTablixCell> get_RowCells();
    internal virtual void SetHeaderStart();
    internal virtual void SetBodyStart();
    internal virtual void AddOmittedHeader(RPLTablixMemberCell cell);
    internal void AddCells(List`1<RPLTablixCell> cells);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTextBox : RPLItem {
    private int m_paragraphCount;
    private Queue`1<RPLParagraph> m_paragraphs;
    private long m_paragraphOffsets;
    internal long ParagraphOffsets { get; internal set; }
    unknown int ParagraphCount {internal set; }
    internal RPLTextBox(long startOffset, RPLContext context);
    internal RPLTextBox(RPLItemProps rplElementProps);
    internal long get_ParagraphOffsets();
    internal void set_ParagraphOffsets(long value);
    internal void set_ParagraphCount(int value);
    public RPLParagraph GetNextParagraph();
    internal void AddParagraph(RPLParagraph paragraph);
    public void GetSimpleStyles(RPLStyleProps& nonShared, RPLStyleProps& shared, RPLParagraph paragraph, RPLTextRun textRun);
    public RPLElementStyle GetSimpleStyles(RPLParagraph paragraph, RPLTextRun textRun);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTextBoxProps : RPLItemProps {
    private bool m_toggleState;
    private SortOptions m_sortState;
    private bool m_isToggleParent;
    private TypeCode m_typeCode;
    private object m_originalValue;
    private string m_value;
    private RPLActionInfo m_actionInfo;
    private float m_contentHeight;
    private float m_contentOffset;
    private bool m_processedWithError;
    public string Value { get; public set; }
    public object OriginalValue { get; public set; }
    public TypeCode TypeCode { get; public set; }
    public bool IsToggleParent { get; public set; }
    public bool ToggleState { get; public set; }
    public RPLActionInfo ActionInfo { get; public set; }
    public SortOptions SortState { get; public set; }
    public float ContentHeight { get; public set; }
    public float ContentOffset { get; public set; }
    public bool ProcessedWithError { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public object get_OriginalValue();
    public void set_OriginalValue(object value);
    public TypeCode get_TypeCode();
    public void set_TypeCode(TypeCode value);
    public bool get_IsToggleParent();
    public void set_IsToggleParent(bool value);
    public bool get_ToggleState();
    public void set_ToggleState(bool value);
    public RPLActionInfo get_ActionInfo();
    public void set_ActionInfo(RPLActionInfo value);
    public SortOptions get_SortState();
    public void set_SortState(SortOptions value);
    public float get_ContentHeight();
    public void set_ContentHeight(float value);
    public float get_ContentOffset();
    public void set_ContentOffset(float value);
    public bool get_ProcessedWithError();
    public void set_ProcessedWithError(bool value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTextBoxPropsDef : RPLItemPropsDef {
    private bool m_isSimple;
    private string m_formula;
    private bool m_isToggleParent;
    private bool m_canGrow;
    private bool m_canShrink;
    private bool m_canSort;
    private TypeCode m_typeCode;
    private bool m_formattedValueExpressionBased;
    private string m_value;
    public bool CanSort { get; public set; }
    public bool CanShrink { get; public set; }
    public bool CanGrow { get; public set; }
    public string Formula { get; public set; }
    public bool IsToggleParent { get; public set; }
    public string Value { get; public set; }
    public TypeCode SharedTypeCode { get; public set; }
    public bool FormattedValueExpressionBased { get; public set; }
    public bool IsSimple { get; public set; }
    public bool get_CanSort();
    public void set_CanSort(bool value);
    public bool get_CanShrink();
    public void set_CanShrink(bool value);
    public bool get_CanGrow();
    public void set_CanGrow(bool value);
    public string get_Formula();
    public void set_Formula(string value);
    public bool get_IsToggleParent();
    public void set_IsToggleParent(bool value);
    public string get_Value();
    public void set_Value(string value);
    public TypeCode get_SharedTypeCode();
    public void set_SharedTypeCode(TypeCode value);
    public bool get_FormattedValueExpressionBased();
    public void set_FormattedValueExpressionBased(bool value);
    public bool get_IsSimple();
    public void set_IsSimple(bool value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTextRun : RPLElement {
    private RPLSizes m_contentSizes;
    public RPLSizes ContentSizes { get; public set; }
    internal RPLTextRun(RPLTextRunProps rplElementProps);
    public RPLSizes get_ContentSizes();
    public void set_ContentSizes(RPLSizes value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTextRunProps : RPLElementProps {
    private RPLActionInfo m_actionInfo;
    private string m_value;
    private string m_toolTip;
    private MarkupStyles m_markup;
    private bool m_processedWithError;
    public string Value { get; public set; }
    public string ToolTip { get; public set; }
    public RPLActionInfo ActionInfo { get; public set; }
    public MarkupStyles Markup { get; public set; }
    public bool ProcessedWithError { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public RPLActionInfo get_ActionInfo();
    public void set_ActionInfo(RPLActionInfo value);
    public MarkupStyles get_Markup();
    public void set_Markup(MarkupStyles value);
    public bool get_ProcessedWithError();
    public void set_ProcessedWithError(bool value);
}
internal class Microsoft.ReportingServices.Rendering.RPLProcessing.RPLTextRunPropsDef : RPLElementPropsDef {
    private string m_value;
    private string m_label;
    private string m_toolTip;
    private MarkupStyles m_markup;
    private string m_formula;
    public string Value { get; public set; }
    public string Label { get; public set; }
    public string ToolTip { get; public set; }
    public MarkupStyles Markup { get; public set; }
    public string Formula { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public MarkupStyles get_Markup();
    public void set_Markup(MarkupStyles value);
    public string get_Formula();
    public void set_Formula(string value);
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Rendering.RPLRendering.RenderRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string RPLLocalizedName { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_RPLLocalizedName();
}
internal class Microsoft.ReportingServices.Rendering.RPLRendering.RPLRenderer : object {
    private static string PARAM_START_PAGE;
    private static string PARAM_END_PAGE;
    private static string PARAM_MEASURE_ITEMS;
    private static string PARAM_TOGGLE_ITEMS;
    private static string PARAM_SECONDARY_STREAMS;
    private static string PARAM_STREAM_NAMES;
    private static string PARAM_RPL_VERSION;
    private static string PARAM_IMAGE_CONSOLIDATION;
    private static string MIME_EXTENSION;
    private static string MIME_TYPE;
    private SPBContext m_spbContext;
    private string m_rplVersion;
    public string LocalizedName { get; }
    private static RPLRenderer();
    private void ParseParameters(NameValueCollection deviceInfo);
    internal static SecondaryStreams ParseSecondaryStreamsParam(string secondaryStreamStr, SecondaryStreams defaultValue);
    internal static bool ParseBool(string boolValue, bool defaultValue);
    internal static int ParseInt(string intValue, int defaultValue);
    internal static double ParseDouble(string doubleValue, double defaultValue);
    public sealed virtual bool Render(Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual bool RenderStream(string streamName, Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& renderProperties, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual void GetRenderingResource(CreateAndRegisterStream createAndRegisterStreamCallback, NameValueCollection deviceInfo);
    public sealed virtual string get_LocalizedName();
    public sealed virtual void SetConfiguration(string configuration);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Bookmarks : InteractivityChunks {
    internal Bookmarks(Stream stream, int page);
    internal void WriteBookmark(ReportItemInstance itemInstance);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.CanvasFont : object {
    private Font m_gdiFont;
    private StringFormat m_stringFormat;
    private bool m_writingModeTopBottom;
    internal Font GDIFont { get; }
    internal StringFormat TrimStringFormat { get; }
    internal bool WritingModeTopBottom { get; }
    internal CanvasFont(CanvasFont copyFont);
    internal CanvasFont(string family, ReportSize size, FontStyles style, FontWeights weight, TextDecorations decoration, TextAlignments alignment, VerticalAlignments verticalAlignment, Directions direction, WritingModes writingMode);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private void CreateFont(string family, ReportSize size, FontStyles style, FontWeights weight, TextDecorations decoration, TextAlignments alignment, VerticalAlignments verticalAlignment, Directions direction, WritingModes writingMode);
    private StringAlignment CreateLineStringAlignment(VerticalAlignments verticalAlignment);
    internal void NewFormatStrings(bool newFormatStrings);
    internal void SetWritingMode(WritingModes writingMode);
    internal void SetTextStringAlignment(TextAlignments alignment, bool newFormatStrings);
    internal void SetLineStringAlignment(VerticalAlignments verticalAlignment, bool newFormatStrings);
    internal void SetFormatFlags(Directions direction, bool setWritingMode, bool newFormatStrings);
    private StringAlignment CreateTextStringAlignment(TextAlignments alignment);
    internal void CreateGDIFont(string family, ReportSize size, FontStyles style, FontWeights weight, TextDecorations decoration);
    private void CreateFormatString(StringAlignment textStringAlignment, StringAlignment lineStringAlignment, bool directionRightToLeft);
    private void UpdateFormatFlags(StringFormatFlags& formatFlags, bool setWritingMode, bool directionRightToLeft);
    private bool IsBold(FontWeights fontWeight);
    internal Font get_GDIFont();
    internal StringFormat get_TrimStringFormat();
    internal bool get_WritingModeTopBottom();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Chart : DynamicImage {
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal Chart(Chart source, PageContext pageContext, bool createForRepeat);
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    internal virtual Stream LoadDynamicImage(PageContext pageContext, String& streamName, ActionInfoWithDynamicImageMapCollection& actionImageMaps, Rectangle& offsets);
    private void RegisterChart(Stream& chartStream, String& streamName, string extension, string mimeType, PageContext pageContext, Rectangle& offsets);
    internal virtual void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
    internal virtual void WriteBorderProps(BinaryWriter spbifWriter, Style style);
    internal virtual void WriteBorderProps(RPLStyleProps rplStyleProps, Style style);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.DocumentMapLabels : InteractivityChunks {
    internal DocumentMapLabels(Stream stream, int page);
    internal void WriteDocMapLabel(ReportItemInstance itemInstance);
    internal void WriteDocMapLabel(GroupInstance groupInstance);
    internal void WriteDocMapRootLabel(string rootLabelUniqueName);
}
internal abstract class Microsoft.ReportingServices.Rendering.SPBProcessing.DynamicImage : PageItem {
    internal DynamicImage(ReportItem source, PageContext pageContext, bool createForRepeat);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal abstract virtual Stream LoadDynamicImage(PageContext pageContext, String& streamName, ActionInfoWithDynamicImageMapCollection& actionImageMaps, Rectangle& offsets);
    protected void RegisterDynamicImage(Stream& dynamicImageStream, String& streamName, string extension, string mimeType, PageContext pageContext, Rectangle& offsets);
    internal abstract virtual void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps styleProps, Style style, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.EdgePageItem : PageItem {
    internal EdgePageItem(double top, double left, string id, PageContext pageContext);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.GaugePanel : DynamicImage {
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal GaugePanel(GaugePanel source, PageContext pageContext, bool createForRepeat);
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    internal virtual Stream LoadDynamicImage(PageContext pageContext, String& streamName, ActionInfoWithDynamicImageMapCollection& actionImageMaps, Rectangle& offsets);
    private void RegisterGauge(Stream& gaugeStream, String& streamName, string extension, string mimeType, PageContext pageContext, Rectangle& offsets);
    internal virtual void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
}
internal abstract class Microsoft.ReportingServices.Rendering.SPBProcessing.HeaderFooterEval : object {
    internal static bool AddToCurrentPage(ReportItem reportItem);
    internal static bool AddToCurrentPage(Tablix tablix);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Image : PageItem {
    internal Image(Image source, PageContext pageContext, bool createForRepeat);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal virtual void CalculateRepeatWithPage(RPLWriter rplWriter, PageContext pageContext, PageItem[] siblings);
    internal virtual int WriteRepeatWithToPage(RPLWriter rplWriter, PageContext pageContext);
    private ReportSize GetStyleValue(StyleAttributeNames styleName);
    private double GetPaddings(StyleAttributeNames padd1, StyleAttributeNames padd2);
    private bool AutoSizeImage(PageContext pageContext, ImageInstance imageInstance, Image& gdiImage);
    private void ResizeImage(PageContext pageContext, int width, int height);
    internal void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal static string SharedImageStreamName(Image image, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ImageConsolidation : object {
    protected static float SUPPORTED_DPI;
    protected static float DPI_TOLERANCE;
    public static string STREAMPREFIX;
    public List`1<ImageInfo> ImageInfos;
    public int MaxHeight;
    public int MaxWidth;
    public int CurrentOffset;
    private static int MAXIMAGECONSOLIDATION_TOTALSIZE;
    private static int MAXIMAGECONSOLIDATION_PERIMAGESIZE;
    private CreateAndRegisterStream m_createAndRegisterStream;
    private int m_currentByteCount;
    private int m_ignoreOffsetTill;
    private string m_imagePrefix;
    public int IgnoreOffsetTill { get; }
    public ImageConsolidation(CreateAndRegisterStream createAndRegisterStream);
    public ImageConsolidation(CreateAndRegisterStream createAndRegisterStream, int ignoreOffsetTill);
    private static ImageConsolidation();
    public int get_IgnoreOffsetTill();
    public Rectangle AppendImage(Stream imageStream);
    public Image Render();
    public static string GetStreamName(string reportName, int page);
    public string GetStreamName();
    public void SetName(string reportName, int pageNumber);
    public void RenderToStream();
    public void ResetCancelPage();
    public void Reset();
    private bool IsDPISupported(float dpiX, float dpiY);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ImageInfo : object {
    public Stream ImageData;
    public int Width;
    public int Height;
    public void RenderAndDispose(Graphics g, int x, int y);
    public sealed virtual void Dispose();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Interactivity : object {
    private string m_itemInfo;
    private string m_bookmarkId;
    private bool m_itemFound;
    private string m_streamName;
    private CreateAndRegisterStream m_createAndRegisterStream;
    private EventType m_eventType;
    internal bool Done { get; }
    internal string ItemInfo { get; }
    internal bool NeedPageHeaderFooter { get; }
    internal bool RegisterHiddenItems { get; }
    internal EventType InteractivityEventType { get; }
    internal Interactivity(string itemInfo, EventType eventType, string streamName, CreateAndRegisterStream createAndRegisterStream);
    internal Interactivity(string itemInfo, EventType eventType);
    internal Interactivity(EventType eventType);
    internal Interactivity(string bookmarkId);
    internal bool RegisterItem(PageItem pageItem, PageContext pageContext);
    private void WriteDynamicImageStream(Stream startStream);
    private void FindTextBox(TextBox textbox, PageContext pageContext);
    internal bool RegisterHiddenItem(ReportItem reportItem, PageContext pageContext);
    internal void RegisterGroupLabel(Group group, PageContext pageContext);
    internal void RegisterDocMapRootLabel(string rootLabelUniqueName, PageContext pageContext);
    internal bool get_Done();
    internal string get_ItemInfo();
    internal bool get_NeedPageHeaderFooter();
    internal bool get_RegisterHiddenItems();
    internal EventType get_InteractivityEventType();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.InteractivityChunks : object {
    internal static string LabelsChunk;
    internal static string BookmarksChunk;
    protected BinaryWriter m_writer;
    protected int m_page;
    private Stream m_stream;
    internal int Page { get; internal set; }
    internal InteractivityChunks(Stream stream, int page);
    internal static int FindBoomark(Report report, string bookmarkId, String& uniqueName, Int32& lastPageCollected, Boolean& reportDone);
    internal static int FindDocumentMapLabel(Report report, string documentMapId, Int32& lastPageCollected, Boolean& reportDone);
    private static Stream GetInteractivityChunck(Report report, string chunkName, int page, Int32& lastPage);
    internal static Bookmarks GetBookmarksStream(Report report, int page);
    internal static DocumentMapLabels GetLabelsStream(Report report, int page);
    internal void Flush(bool reportDone);
    internal int get_Page();
    internal void set_Page(int value);
}
internal interface Microsoft.ReportingServices.Rendering.SPBProcessing.ISPBProcessing {
    public bool Done { get; }
    public abstract virtual void SetContext(SPBContext context);
    public abstract virtual Stream GetNextPage(RPLReport& rplReport);
    public abstract virtual bool get_Done();
}
internal interface Microsoft.ReportingServices.Rendering.SPBProcessing.ItemOffset {
    public long Offset { get; public set; }
    public abstract virtual long get_Offset();
    public abstract virtual void set_Offset(long value);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ItemSizes : object {
    protected double m_deltaX;
    protected double m_deltaY;
    protected double m_left;
    protected double m_top;
    protected double m_width;
    protected double m_height;
    protected string m_id;
    internal double DeltaX { get; internal set; }
    internal double DeltaY { get; internal set; }
    internal double Left { get; internal set; }
    internal double Top { get; internal set; }
    internal double Bottom { get; }
    internal double Right { get; }
    internal double Width { get; internal set; }
    internal double Height { get; internal set; }
    internal double PadWidth { get; }
    internal double PadHeight { get; }
    internal double PaddingRight { get; internal set; }
    internal double PaddingBottom { get; internal set; }
    internal string ID { get; internal set; }
    internal ItemSizes(ReportSize width, ReportSize height, string id);
    internal ItemSizes(ReportItem reportItem);
    internal ItemSizes(ItemSizes itemSizes);
    internal ItemSizes(double top, double left, string id);
    internal double get_DeltaX();
    internal void set_DeltaX(double value);
    internal double get_DeltaY();
    internal void set_DeltaY(double value);
    internal double get_Left();
    internal void set_Left(double value);
    internal double get_Top();
    internal void set_Top(double value);
    internal double get_Bottom();
    internal double get_Right();
    internal double get_Width();
    internal void set_Width(double value);
    internal double get_Height();
    internal void set_Height(double value);
    internal virtual double get_PadWidth();
    internal virtual double get_PadHeight();
    internal virtual double get_PaddingRight();
    internal virtual void set_PaddingRight(double value);
    internal virtual double get_PaddingBottom();
    internal virtual void set_PaddingBottom(double value);
    internal string get_ID();
    internal void set_ID(string value);
    internal virtual ItemSizes GetNewItem();
    internal virtual void Update(ReportSize width, ReportSize height);
    internal virtual void Update(ReportItem reportItem);
    internal virtual void Update(ItemSizes itemSizes, bool returnPaddings);
    internal virtual void Update(double top, double left);
    internal virtual void Clean();
    internal void AdjustHeightTo(double amount);
    internal void AdjustWidthTo(double amount);
    internal void MoveVertical(double delta);
    internal void MoveHorizontal(double delta);
    internal void UpdateSizes(double topDelta, PageItem owner, PageItem[] siblings, RepeatWithItem[] repeatWithItems);
    internal virtual void SetPaddings(double right, double bottom);
    internal virtual int ReadPaginationInfo(BinaryReader reader, long offsetEndPage);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual ItemSizes WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Line : PageItem {
    internal Line(Line source, PageContext pageContext, bool createForRepeat);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal virtual void CalculateRepeatWithPage(RPLWriter rplWriter, PageContext pageContext, PageItem[] siblings);
    internal virtual int WriteRepeatWithToPage(RPLWriter rplWriter, PageContext pageContext);
    internal void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.NoRowsItem : PageItem {
    internal NoRowsItem(ReportItem source, PageContext pageContext, bool createForRepeat);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PaddItemSizes : ItemSizes {
    private double m_paddingRight;
    private double m_paddingBottom;
    internal double PadWidth { get; }
    internal double PadHeight { get; }
    internal double PaddingRight { get; internal set; }
    internal double PaddingBottom { get; internal set; }
    internal PaddItemSizes(ReportItem reportItem);
    internal PaddItemSizes(PaddItemSizes paddItemSizes);
    internal PaddItemSizes(ItemSizes paddItemSizes);
    internal PaddItemSizes(ReportSize width, ReportSize height, string id);
    internal virtual ItemSizes GetNewItem();
    internal virtual void Update(ReportItem reportItem);
    internal virtual void Update(ItemSizes paddItemSizes, bool returnPaddings);
    internal virtual void Update(ReportSize width, ReportSize height);
    internal virtual void Clean();
    internal virtual void SetPaddings(double right, double bottom);
    internal virtual int ReadPaginationInfo(BinaryReader reader, long offsetEndPage);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual ItemSizes WritePaginationInfo();
    internal virtual double get_PadWidth();
    internal virtual double get_PadHeight();
    internal virtual double get_PaddingRight();
    internal virtual void set_PaddingRight(double value);
    internal virtual double get_PaddingBottom();
    internal virtual void set_PaddingBottom(double value);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PageContext : object {
    internal static double RoundDelta;
    internal static double RoundOverlapDelta;
    internal static string InvalidImage;
    internal static char StreamNameSeparator;
    internal static string PageHeaderSuffix;
    internal static string PageFooterSuffix;
    internal static string ImageStreamNamePrefix;
    internal static string BkGndImageStreamNamePrefix;
    internal static string ChartStreamNamePrefix;
    internal static string GaugeStreamNamePrefix;
    internal static double InvalidImageWidth;
    internal static double InvalidImageHeight;
    internal static double MinFontSize;
    internal static char RPLVersionSeparator;
    private PageContextFlags m_flags;
    private PageContextCommon m_common;
    internal ImageConsolidation ImageConsolidation { get; internal set; }
    internal IScalabilityCache ScalabilityCache { get; }
    internal long TotalScaleTimeMs { get; }
    internal long PeakMemoryUsageKB { get; }
    internal bool CancelMode { get; }
    internal bool CancelPage { get; internal set; }
    internal double PageHeight { get; internal set; }
    internal PageContextFlags Flags { get; }
    internal bool IgnorePageBreaks { get; internal set; }
    internal bool FullOnPage { get; internal set; }
    internal bool KeepTogether { get; internal set; }
    internal bool HideDuplicates { get; internal set; }
    internal bool TypeCodeNonString { get; internal set; }
    internal bool RegisterEvents { get; }
    internal bool MeasureItems { get; }
    internal bool EmfDynamicImage { get; }
    internal bool ConsumeContainerWhitespace { get; }
    internal CreateAndRegisterStream CreateAndRegisterStream { get; }
    internal SecondaryStreams SecondaryStreams { get; }
    internal bool AddToggledItems { get; }
    internal bool AddOriginalValue { get; }
    internal bool AddSecondaryStreamNames { get; }
    internal bool EvaluatePageHeaderFooter { get; internal set; }
    internal bool AddFirstPageHeaderFooter { get; internal set; }
    internal float DpiX { get; internal set; }
    internal float DpiY { get; internal set; }
    internal int PageNumber { get; internal set; }
    internal RPLPageSection RplPageSection { get; internal set; }
    internal Hashtable ItemPropsStart { get; internal set; }
    internal Hashtable SharedImages { get; internal set; }
    internal Hashtable RegisteredStreamNames { get; internal set; }
    internal Hashtable AutoSizeSharedImages { get; internal set; }
    internal Hashtable TextBoxSharedInfo { get; internal set; }
    internal DocumentMapLabels Labels { get; internal set; }
    internal Bookmarks Bookmarks { get; internal set; }
    internal Dictionary`2<string, string> PageBookmarks { get; internal set; }
    internal PageContextCommon Common { get; }
    internal PageContext(double pageHeight, bool registerEvents, bool consumeWhiteSpace, CreateAndRegisterStream createAndRegisterStream);
    internal PageContext(PageContext pageContext);
    internal PageContext(PageContext pageContext, PageContextFlags flags);
    internal void SetContext(bool measureItems, bool emfDynamicImage, SecondaryStreams secondaryStreams, bool addSecondaryStreamNames, bool addToggledItems, bool addOriginalValue, bool addFirstPageHeaderFooter);
    internal void InitCache();
    internal void InitCancelPage(double pageHeight);
    internal void ResetCancelPage();
    internal void CheckPageSize(RoundedDouble pageHeight);
    internal void DisposeResources();
    internal float MeasureFullTextBoxHeight(TextBox textBox, FlowContext flowContext, Single& contentHeight);
    internal ItemSizes GetSharedItemSizesElement(ReportItem reportItem, bool isPadded);
    internal ItemSizes GetSharedItemSizesElement(ReportSize width, ReportSize height, string id, bool isPadded);
    internal ItemSizes GetSharedRenderItemSizesElement(ItemSizes itemSizes, bool isPadded, bool returnPaddings);
    internal ItemSizes GetSharedEdgeItemSizesElement(double top, double left, string id);
    internal ItemSizes GetSharedRenderEdgeItemSizesElement(ItemSizes itemSizes);
    internal ItemSizes GetSharedFromRepeatItemSizesElement(ReportItem reportItem, bool isPadded);
    internal ItemSizes GetSharedRenderFromRepeatItemSizesElement(ItemSizes itemSizes, bool isPadded, bool returnPaddings);
    internal ItemSizes GetSharedRenderRepeatItemSizesElement(ItemSizes itemSizes, bool isPadded, bool returnPaddings);
    internal SizeF MeasureStringGDI(string text, CanvasFont font, SizeF layoutArea, Int32& charactersFitted, Int32& linesFilled);
    internal ImageConsolidation get_ImageConsolidation();
    internal void set_ImageConsolidation(ImageConsolidation value);
    internal double ConvertToMillimeters(int coordinate, float dpi);
    internal string GenerateStreamName(IImageInstance imageInstance, string ownerUniqueName);
    internal string GenerateStreamName(ChartInstance chartIntance);
    internal string GenerateStreamName(GaugePanelInstance gaugeIntance);
    internal void RegisterPageBookmark(ReportItemInstance reportItemInstance);
    internal IScalabilityCache get_ScalabilityCache();
    internal long get_TotalScaleTimeMs();
    internal long get_PeakMemoryUsageKB();
    internal bool get_CancelMode();
    internal bool get_CancelPage();
    internal void set_CancelPage(bool value);
    internal double get_PageHeight();
    internal void set_PageHeight(double value);
    internal PageContextFlags get_Flags();
    internal bool get_IgnorePageBreaks();
    internal void set_IgnorePageBreaks(bool value);
    internal bool get_FullOnPage();
    internal void set_FullOnPage(bool value);
    internal bool get_KeepTogether();
    internal void set_KeepTogether(bool value);
    internal bool get_HideDuplicates();
    internal void set_HideDuplicates(bool value);
    internal bool get_TypeCodeNonString();
    internal void set_TypeCodeNonString(bool value);
    internal bool get_RegisterEvents();
    internal bool get_MeasureItems();
    internal bool get_EmfDynamicImage();
    internal bool get_ConsumeContainerWhitespace();
    internal CreateAndRegisterStream get_CreateAndRegisterStream();
    internal SecondaryStreams get_SecondaryStreams();
    internal bool get_AddToggledItems();
    internal bool get_AddOriginalValue();
    internal bool get_AddSecondaryStreamNames();
    internal bool get_EvaluatePageHeaderFooter();
    internal void set_EvaluatePageHeaderFooter(bool value);
    internal bool get_AddFirstPageHeaderFooter();
    internal void set_AddFirstPageHeaderFooter(bool value);
    internal float get_DpiX();
    internal void set_DpiX(float value);
    internal float get_DpiY();
    internal void set_DpiY(float value);
    internal int get_PageNumber();
    internal void set_PageNumber(int value);
    internal RPLPageSection get_RplPageSection();
    internal void set_RplPageSection(RPLPageSection value);
    internal Hashtable get_ItemPropsStart();
    internal void set_ItemPropsStart(Hashtable value);
    internal Hashtable get_SharedImages();
    internal void set_SharedImages(Hashtable value);
    internal Hashtable get_RegisteredStreamNames();
    internal void set_RegisteredStreamNames(Hashtable value);
    internal Hashtable get_AutoSizeSharedImages();
    internal void set_AutoSizeSharedImages(Hashtable value);
    internal Hashtable get_TextBoxSharedInfo();
    internal void set_TextBoxSharedInfo(Hashtable value);
    internal DocumentMapLabels get_Labels();
    internal void set_Labels(DocumentMapLabels value);
    internal Bookmarks get_Bookmarks();
    internal void set_Bookmarks(Bookmarks value);
    internal Dictionary`2<string, string> get_PageBookmarks();
    internal void set_PageBookmarks(Dictionary`2<string, string> value);
    internal PageContextCommon get_Common();
}
internal abstract class Microsoft.ReportingServices.Rendering.SPBProcessing.PageElement : object {
    protected ReportElement m_source;
    public long Offset { get; public set; }
    internal ReportElement Source { get; }
    internal ReportElement OriginalSource { get; }
    internal bool HasBackground { get; }
    internal string SourceID { get; }
    internal string SourceUniqueName { get; }
    protected PageElement(ReportElement source);
    public abstract virtual long get_Offset();
    public abstract virtual void set_Offset(long value);
    internal virtual ReportElement get_Source();
    internal virtual ReportElement get_OriginalSource();
    internal virtual bool get_HasBackground();
    internal abstract virtual string get_SourceID();
    internal abstract virtual string get_SourceUniqueName();
    internal virtual void WriteSharedStyle(BinaryWriter spbifWriter, Style style, PageContext pageContext, byte rplTag);
    internal virtual RPLStyleProps WriteSharedStyle(Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteNonSharedStyle(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, PageContext pageContext, Nullable`1<byte> rplTag, ReportElementInstance compiledSource);
    protected bool WriteCommonNonSharedStyle(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, PageContext pageContext, Nullable`1<byte> rplTag, ReportElementInstance compiledSource);
    internal virtual RPLStyleProps WriteNonSharedStyle(Style styleDef, StyleInstance style, PageContext pageContext, ReportElementInstance compiledSource);
    protected virtual void WriteNonSharedStyleFromAttributes(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, PageContext pageContext, List`1<StyleAttributeNames> styleAttributes);
    protected virtual RPLStyleProps WriteNonSharedStyleFromAttributes(Style styleDef, StyleInstance style, PageContext pageContext, List`1<StyleAttributeNames> styleAttributes);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteBorderProps(BinaryWriter spbifWriter, Style styleDef);
    internal virtual void WriteBorderProps(RPLStyleProps rplStyleProps, Style styleDef);
    internal virtual void WriteBackgroundImage(BinaryWriter spbifWriter, Style style, bool writeShared, PageContext pageContext);
    internal virtual void WriteBackgroundImage(RPLStyleProps rplStyleProps, Style style, bool writeShared, PageContext pageContext);
    internal void WriteStyleProp(Style style, BinaryWriter spbifWriter, StyleAttributeNames name, byte spbifType);
    internal void WriteStyleProp(Style style, RPLStyleProps rplStyleProps, StyleAttributeNames name, byte spbifType);
    internal void WriteStyleProp(Style styleDef, StyleInstance style, BinaryWriter spbifWriter, StyleAttributeNames name, byte spbifType);
    internal void WriteStyleProp(Style styleDef, StyleInstance style, RPLStyleProps rplStyleProps, StyleAttributeNames name, byte spbifType);
    internal void WriteImage(IImageInstance imageInstance, string resourceName, BinaryWriter spbifWriter, PageContext pageContext, Image gdiImage);
    internal void WriteImage(IImageInstance imageInstance, string resourceName, RPLImageProps elemProps, PageContext pageContext, Image gdiImage);
    internal void WriteImage(IImageInstance imageInstance, string resourceName, RPLImageData& imageData, PageContext pageContext, Image gdiImage);
    internal object GetRichTextStyleValue(StyleAttributeNames styleName, ReportElementInstance compiledReportElement);
    internal object GetRichTextStyleValue(StyleAttributeNames styleName, ReportElementInstance compiledReportElement, Boolean& isShared);
    internal StyleInstance GetStyleInstance(ReportElement reportElement, ReportElementInstance compiledReportElement);
    private void WriteStyleReportProperty(ReportProperty styleProp, BinaryWriter spbifWriter, byte spbifType);
    private void WriteStyleReportProperty(ReportProperty styleProp, RPLStyleProps rplStyleProps, byte spbifType);
    private Nullable`1<byte> GetStylePropByte(byte spbifType, object styleProp, Boolean& convertToString);
    private Nullable`1<byte> GetStylePropByte(byte spbifType, ReportProperty styleProp);
    private void WriteShareableImages(IImageInstance imageInstance, string streamName, BinaryWriter spbifWriter, PageContext pageContext, long offsetStart, Image gdiImage);
    private void WriteShareableImages(IImageInstance imageInstance, string streamName, RPLImageData& imageData, PageContext pageContext, Image gdiImage);
    private void WriteImageProperties(IImageInstance imageInstance, string streamName, BinaryWriter spbifWriter, Image gdiImage, PageContext pageContext);
    private void WriteImageProperties(IImageInstance imageInstance, string streamName, RPLImageData imageData, Image gdiImage, PageContext pageContext);
    private void CreateImageStream(IImageInstance imageInstance, string streamName, bool generatedStreamName, PageContext pageContext);
    private void WriteStreamContent(Stream sourceStream, BinaryWriter spbifWriter);
    internal void WriteActionInfo(ActionInfo actionInfo, BinaryWriter spbifWriter, PageContext pageContext, byte rplIdStartInfo);
    internal RPLActionInfo WriteActionInfo(ActionInfo actionInfo, PageContext pageContext);
    internal void WriteImageMapAreaInstanceCollection(ActionInfoWithDynamicImageMapCollection actionImageMaps, BinaryWriter spbifWriter, PageContext pageContext);
    internal void WriteImageMapAreaInstanceCollection(ActionInfoWithDynamicImageMap[] actionImageMaps, BinaryWriter spbifWriter, PageContext pageContext);
    internal RPLActionInfoWithImageMap[] WriteImageMapAreaInstanceCollection(ActionInfoWithDynamicImageMapCollection actionImageMaps, PageContext pageContext);
    internal RPLActionInfoWithImageMap[] WriteImageMapAreaInstanceCollection(ActionInfoWithDynamicImageMap[] actionImageMaps, PageContext pageContext);
    private void WriteImageMapAreaInstanceCollection(ActionInfoWithDynamicImageMap actionInfo, BinaryWriter spbifWriter, PageContext pageContext);
    private void WriteAction(ActionCollection actions, RPLActionInfo rplActionInfo, PageContext pageContext);
    internal RPLActionInfoWithImageMap WriteActionInfoWithMaps(ActionInfoWithDynamicImageMap actionInfo, PageContext pageContext);
    internal virtual void WriteElementProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext, long offset);
    internal virtual void WriteElementProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext, long offset);
    internal virtual void WriteSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PageHeadFoot : PageItemContainer {
    private PageSection m_source;
    internal string SourceUniqueName { get; }
    internal string SourceID { get; }
    internal ReportElement OriginalSource { get; }
    internal PageHeadFoot(PageSection source, ReportSize width, PageContext pageContext);
    internal void CalculateItem(RPLWriter rplWriter, PageContext pageContext, bool isHeader, Interactivity interactivity);
    internal void WriteStartItemToStream(RPLWriter rplWriter, bool isHeader, PageContext pageContext);
    internal virtual void WriteEndItemToStream(RPLWriter rplWriter, int itemsOnPage, PageItem[] childrenOnPage);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual string get_SourceUniqueName();
    internal virtual string get_SourceID();
    internal virtual ReportElement get_OriginalSource();
}
internal abstract class Microsoft.ReportingServices.Rendering.SPBProcessing.PageItem : PageElement {
    protected ReportItem m_source;
    protected ItemSizes m_itemPageSizes;
    protected ItemSizes m_itemRenderSizes;
    protected List`1<int> m_pageItemsAbove;
    protected List`1<int> m_pageItemsLeft;
    protected long m_offset;
    protected RPLItem m_rplElement;
    protected State m_itemState;
    protected byte m_rplItemState;
    protected double m_defLeftValue;
    public long Offset { get; public set; }
    internal ReportItem Source { get; }
    internal ReportElement OriginalSource { get; }
    internal string SourceID { get; }
    internal string SourceUniqueName { get; }
    internal bool StaticItem { get; }
    internal byte RplItemState { get; }
    internal bool RepeatedSibling { get; }
    internal ItemSizes ItemPageSizes { get; }
    internal ItemSizes ItemRenderSizes { get; internal set; }
    internal List`1<int> PageItemsAbove { get; internal set; }
    internal List`1<int> PageItemsLeft { get; internal set; }
    public RPLItem RPLElement { get; public set; }
    internal State ItemState { get; internal set; }
    internal double DefLeftValue { get; internal set; }
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal bool IgnorePageBreaks { get; }
    protected PageItem(ReportItem source);
    public virtual long get_Offset();
    public virtual void set_Offset(long value);
    internal ReportItem get_Source();
    internal virtual ReportElement get_OriginalSource();
    internal virtual string get_SourceID();
    internal virtual string get_SourceUniqueName();
    internal virtual bool get_StaticItem();
    internal byte get_RplItemState();
    internal bool get_RepeatedSibling();
    internal ItemSizes get_ItemPageSizes();
    internal ItemSizes get_ItemRenderSizes();
    internal void set_ItemRenderSizes(ItemSizes value);
    internal List`1<int> get_PageItemsAbove();
    internal void set_PageItemsAbove(List`1<int> value);
    internal List`1<int> get_PageItemsLeft();
    internal void set_PageItemsLeft(List`1<int> value);
    public RPLItem get_RPLElement();
    public void set_RPLElement(RPLItem value);
    internal State get_ItemState();
    internal void set_ItemState(State value);
    internal double get_DefLeftValue();
    internal void set_DefLeftValue(double value);
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    internal bool get_IgnorePageBreaks();
    internal static List`1<int> GetNewList(List`1<int> source);
    internal static Int32[] GetNewArray(Int32[] source);
    internal static PageItem Create(ReportItem source, PageContext pageContext, bool tablixCellParent, bool createForRepeat);
    internal static bool TransformToTextBox(DataRegion source);
    internal static bool TransformToTextBox(Tablix source, bool tablixCellParent, Boolean& noRows);
    internal static bool TransformToTextBox(SubReport source, bool tablixCellParent, Boolean& noRows);
    internal virtual void CreateItemRenderSizes(ItemSizes contentSize, PageContext pageContext, bool createForRepeat);
    internal double ReserveSpaceForRepeatWith(RepeatWithItem[] repeatWithItems, PageContext pageContext);
    internal void WritePageItemRenderSizes(BinaryWriter spbifWriter);
    internal void WritePageItemRenderSizes(BinaryWriter spbifWriter, long offset);
    internal RPLMeasurement WritePageItemRenderSizes();
    internal void MergeRepeatSiblings(List`1& repeatedSiblings);
    internal virtual void WriteSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext, long offset);
    internal virtual void WriteNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal abstract virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentHeight, Interactivity interactivity);
    internal bool HiddenForOverlap(PageContext pageContext);
    internal bool ResolveItemHiddenState(RPLWriter rplWriter, Interactivity interactivity, PageContext pageContext, bool createForRepeat, ItemSizes& contentSize);
    internal virtual bool HitsCurrentPage(PageContext pageContext, double parentTopInPage);
    internal bool HasItemsAbove(PageItem[] siblings, RepeatWithItem[] repeatWithItems);
    internal void AdjustOriginFromItemsAbove(PageItem[] siblings, RepeatWithItem[] repeatWithItems);
    internal void AdjustOriginFromItemsAbove(PageItem[] siblings, RepeatWithItem[] repeatWithItems, bool adjustForRender);
    internal void AdjustOriginFromItemsAtLeft(PageItem[] siblings, bool adjustForRender);
    internal virtual void CalculateRepeatWithPage(RPLWriter rplWriter, PageContext pageContext, PageItem[] siblings);
    internal void AdjustOriginFromRepeatItems(PageItem[] siblings);
    internal virtual int WriteRepeatWithToPage(RPLWriter rplWriter, PageContext pageContext);
    internal void UpdateSizes(double topDelta, PageItem[] siblings, RepeatWithItem[] repeatWithItems);
    internal virtual void UpdateItem(PageItemHelper itemHelper);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
    internal virtual void WritePaginationInfoProperties(BinaryWriter reportPageInfo);
    internal virtual void WritePaginationInfoProperties(PageItemHelper itemHelper);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PageItemContainer : PageItem {
    protected PageItem[] m_children;
    protected Int32[] m_indexesTopToBottom;
    protected RepeatWithItem[] m_repeatWithItems;
    protected Int32[] m_indexesLeftToRight;
    protected bool m_itemsCreated;
    protected double m_prevPageEnd;
    private PageItem m_rightEdgeItem;
    internal PageItemContainer(ReportItem source, bool createForRepeat);
    private sealed virtual override int System.Collections.IComparer.Compare(object o1, object o2);
    private void VerticalDependency(PageItem[] children);
    private void HorizontalDependecy();
    private bool IsStaticTablix(Tablix tablix, TablixMember colMemberParent);
    internal bool CreateChildren(ReportItemCollection childrenDef, PageContext pageContext, double parentWidth, double parentHeight);
    internal bool CreateChildren(ReportItemCollection childrenDef, PageContext pageContext, double parentWidth, double parentHeight, bool isSimple);
    internal bool CreateChildrenFromPaginationState(ReportItemCollection childrenDef, PageContext pageContext, PageItemContainerHelper itemHelper, bool isSimple);
    internal void ResolveRepeatWithFromPaginationState(PageItemContainerHelper itemHelper, RPLWriter rplWriter, PageContext pageContext);
    internal void ResolveRepeatWith(ReportItemCollection childrenDef, PageContext pageContext);
    private void ResolveOverlappingItems(PageContext pageContext);
    private void UpdateChildren(PageItem[]& defChildren);
    private static bool IsStraightLine(Line line);
    private void RemoveItem(PageItem item, int index);
    private void DetectOverlappingItems(PageContext pageContext, Boolean& itemsOverlap, Boolean& verticalOverlap);
    private void MoveItems(RoundedDouble pinItemRight, PageItem moveItemRight, PageItem moveItemDown, double overlapY, double deltaY, Boolean& verticalOverlap);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal virtual void CreateItemRenderSizes(ItemSizes contentSize, PageContext pageContext, bool createForRepeat);
    internal PageItem[] BringRepeatedWithOnPage(RPLWriter rplWriter, List`1<int> repeatedSiblings, PageContext pageContext);
    protected void ConsumeWhitespaceHorizontal(ItemSizes itemSizes, double adjustWidthTo, PageContext pageContext);
    protected void ConsumeWhitespaceVertical(ItemSizes itemSizes, double adjustHeightTo, PageContext pageContext);
    internal void CalculateRepeatWithRenderSizes(PageContext pageContext);
    internal int CalculateRenderSizes(RPLWriter rplWriter, PageContext pageContext, Interactivity interactivity, List`1<int> repeatedSiblings, PageItem[]& childrenOnPage);
    internal void UpdateItemPageState(PageContext pageContext, bool omitBorderOnPageBreak);
    internal virtual void UpdateItem(PageItemHelper itemHelper);
    internal void ResolveVerticalDependencyList(List`1<int> pageItemsAbove, int index);
    private void FixItemsAbove(PageItem item, int index, List`1<int> repeatedItems);
    private void CollectAllItems(List`1<int> srcList, Hashtable destList);
    internal void ReleaseChildrenOnPage();
    private void VerifyNoRows(ReportItem reportItem, Boolean& noRows);
    internal virtual void WriteEndItemToStream(RPLWriter rplWriter, int itemsOnPage, PageItem[] childrenOnPage);
    internal void WriteRepeatWithEndItemToStream(RPLWriter rplWriter, int itemsOnPage);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
    internal virtual void WritePaginationInfoProperties(PageItemHelper itemHelper);
    internal virtual void WritePaginationInfoProperties(BinaryWriter reportPageInfo);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PageItemContainerHelper : PageItemHelper {
    private bool m_itemsCreated;
    private Int32[] m_indexesLeftToRight;
    private Int32[] m_indexesTopToBottom;
    private PageItemHelper[] m_repeatWithItems;
    private PageItemHelper m_rightEdgeItem;
    private PageItemHelper[] m_children;
    internal bool ItemsCreated { get; internal set; }
    internal Int32[] IndexesLeftToRight { get; internal set; }
    internal Int32[] IndexesTopToBottom { get; internal set; }
    internal PageItemHelper[] RepeatWithItems { get; internal set; }
    internal PageItemHelper RightEdgeItem { get; internal set; }
    internal PageItemHelper[] Children { get; internal set; }
    internal PageItemContainerHelper(byte type);
    internal bool get_ItemsCreated();
    internal void set_ItemsCreated(bool value);
    internal Int32[] get_IndexesLeftToRight();
    internal void set_IndexesLeftToRight(Int32[] value);
    internal Int32[] get_IndexesTopToBottom();
    internal void set_IndexesTopToBottom(Int32[] value);
    internal PageItemHelper[] get_RepeatWithItems();
    internal void set_RepeatWithItems(PageItemHelper[] value);
    internal PageItemHelper get_RightEdgeItem();
    internal void set_RightEdgeItem(PageItemHelper value);
    internal PageItemHelper[] get_Children();
    internal void set_Children(PageItemHelper[] value);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PageItemHelper : object {
    private PaginationInfoItems m_type;
    private ItemSizes m_itemPageSizes;
    private State m_state;
    private List`1<int> m_pageItemsAbove;
    private List`1<int> m_pageItemsLeft;
    private double m_defLeftValue;
    private double m_prevPageEnd;
    private PageItemHelper m_childPage;
    internal PaginationInfoItems Type { get; }
    internal ItemSizes ItemPageSizes { get; internal set; }
    internal State State { get; internal set; }
    internal List`1<int> PageItemsAbove { get; internal set; }
    internal List`1<int> PageItemsLeft { get; internal set; }
    internal double PrevPageEnd { get; internal set; }
    internal PageItemHelper ChildPage { get; internal set; }
    internal double DefLeftValue { get; internal set; }
    internal PageItemHelper(byte type);
    internal PaginationInfoItems get_Type();
    internal ItemSizes get_ItemPageSizes();
    internal void set_ItemPageSizes(ItemSizes value);
    internal State get_State();
    internal void set_State(State value);
    internal List`1<int> get_PageItemsAbove();
    internal void set_PageItemsAbove(List`1<int> value);
    internal List`1<int> get_PageItemsLeft();
    internal void set_PageItemsLeft(List`1<int> value);
    internal double get_PrevPageEnd();
    internal void set_PrevPageEnd(double value);
    internal PageItemHelper get_ChildPage();
    internal void set_ChildPage(PageItemHelper value);
    internal double get_DefLeftValue();
    internal void set_DefLeftValue(double value);
    internal static PageItemHelper ReadItems(BinaryReader reader, long offsetEndPage);
    private static void ReadRepeatWithItemProperties(PageItemRepeatWithHelper item, BinaryReader reader, long offsetEndPage);
    private static void ReadPageItemContainerProperties(PageItemContainerHelper item, BinaryReader reader, long offsetEndPage);
    private static void ReadPageItemProperties(PageItemHelper item, BinaryReader reader, long offsetEndPage);
    private static void ReadSubReportProperties(PageItemHelper item, BinaryReader reader, long offsetEndPage);
    private static void ReadTablixProperties(PageTablixHelper item, BinaryReader reader, long offsetEndPage);
    private void ProcessPageItemToken(byte token, BinaryReader reader, long offsetEndPage);
    private static List`1<int> ReadIntList(BinaryReader reader, long offsetEndPage);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PageItemRepeatWithHelper : PageItemHelper {
    private double m_relativeTop;
    private double m_relativeBottom;
    private double m_relativeTopToBottom;
    private int m_dataRegionIndex;
    private ItemSizes m_renderItemSize;
    internal double RelativeTop { get; internal set; }
    internal double RelativeBottom { get; internal set; }
    internal double RelativeTopToBottom { get; internal set; }
    internal int DataRegionIndex { get; internal set; }
    internal ItemSizes RenderItemSize { get; internal set; }
    internal PageItemRepeatWithHelper(byte type);
    internal double get_RelativeTop();
    internal void set_RelativeTop(double value);
    internal double get_RelativeBottom();
    internal void set_RelativeBottom(double value);
    internal double get_RelativeTopToBottom();
    internal void set_RelativeTopToBottom(double value);
    internal int get_DataRegionIndex();
    internal void set_DataRegionIndex(int value);
    internal ItemSizes get_RenderItemSize();
    internal void set_RenderItemSize(ItemSizes value);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.PageTablixHelper : PageItemHelper {
    private int m_levelForRepeat;
    private List`1<int> m_tablixCreateState;
    private List`1<int> m_membersInstanceIndex;
    private bool m_ignoreTotalsOnLastLevel;
    internal int LevelForRepeat { get; internal set; }
    internal bool IgnoreTotalsOnLastLevel { get; internal set; }
    internal List`1<int> TablixCreateState { get; internal set; }
    internal List`1<int> MembersInstanceIndex { get; internal set; }
    internal PageTablixHelper(byte type);
    internal int get_LevelForRepeat();
    internal void set_LevelForRepeat(int value);
    internal bool get_IgnoreTotalsOnLastLevel();
    internal void set_IgnoreTotalsOnLastLevel(bool value);
    internal List`1<int> get_TablixCreateState();
    internal void set_TablixCreateState(List`1<int> value);
    internal List`1<int> get_MembersInstanceIndex();
    internal void set_MembersInstanceIndex(List`1<int> value);
}
internal enum Microsoft.ReportingServices.Rendering.SPBProcessing.PaginationInfoItems : Enum {
    public byte value__;
    public static PaginationInfoItems Unknown;
    public static PaginationInfoItems PageItem;
    public static PaginationInfoItems NoRowsItem;
    public static PaginationInfoItems EdgePageItem;
    public static PaginationInfoItems SubReport;
    public static PaginationInfoItems PageItemContainer;
    public static PaginationInfoItems Rectangle;
    public static PaginationInfoItems ReportBody;
    public static PaginationInfoItems Line;
    public static PaginationInfoItems Image;
    public static PaginationInfoItems Chart;
    public static PaginationInfoItems Tablix;
    public static PaginationInfoItems TextBox;
    public static PaginationInfoItems RepeatWithItem;
    public static PaginationInfoItems NullItem;
    public static PaginationInfoItems GaugePanel;
}
internal enum Microsoft.ReportingServices.Rendering.SPBProcessing.PaginationInfoProperties : Enum {
    public byte value__;
    public static PaginationInfoProperties Unknown;
    public static PaginationInfoProperties ItemSizes;
    public static PaginationInfoProperties PaddItemSizes;
    public static PaginationInfoProperties ItemState;
    public static PaginationInfoProperties PageItemsAbove;
    public static PaginationInfoProperties PageItemsLeft;
    public static PaginationInfoProperties ItemsCreated;
    public static PaginationInfoProperties IndexesLeftToRight;
    public static PaginationInfoProperties RepeatWithItems;
    public static PaginationInfoProperties RightEdgeItem;
    public static PaginationInfoProperties Children;
    public static PaginationInfoProperties PrevPageEnd;
    public static PaginationInfoProperties RelativeTop;
    public static PaginationInfoProperties RelativeBottom;
    public static PaginationInfoProperties RelativeTopToBottom;
    public static PaginationInfoProperties DataRegionIndex;
    public static PaginationInfoProperties LevelForRepeat;
    public static PaginationInfoProperties TablixCreateState;
    public static PaginationInfoProperties MembersInstanceIndex;
    public static PaginationInfoProperties ChildPage;
    public static PaginationInfoProperties IndexesTopToBottom;
    public static PaginationInfoProperties DefLeftValue;
    public static PaginationInfoProperties IgnoreTotalsOnLastLevel;
    public static PaginationInfoProperties Delimiter;
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Paragraph : PageElement {
    private long m_offset;
    private List`1<TextRun> m_textRuns;
    private RPLParagraph m_rplElement;
    private CompiledParagraphInstance m_compiledSource;
    private CompiledParagraphInstanceCollection m_compiledParagraphsCollection;
    private int m_paragraphNumber;
    public long Offset { get; public set; }
    internal string SourceID { get; }
    internal string SourceUniqueName { get; }
    internal bool HasBackground { get; }
    internal List`1<TextRun> TextRuns { get; }
    internal RPLParagraph RPLElement { get; }
    internal CompiledParagraphInstance CompiledInstance { get; }
    internal CompiledParagraphInstanceCollection CompiledParagraphsCollection { get; }
    public TextAlignments Alignment { get; }
    public float SpaceBefore { get; }
    public float SpaceAfter { get; }
    public float LeftIndent { get; }
    public float RightIndent { get; }
    public float HangingIndent { get; }
    public int ListLevel { get; }
    public ListStyles ListStyle { get; }
    public int ParagraphNumber { get; public set; }
    internal Paragraph(Paragraph paragraph, PageContext pageContext);
    internal Paragraph(Paragraph paragraph, CompiledParagraphInstance compiledParagraph, PageContext pageContext);
    public virtual long get_Offset();
    public virtual void set_Offset(long value);
    internal virtual string get_SourceID();
    internal virtual string get_SourceUniqueName();
    internal virtual bool get_HasBackground();
    internal List`1<TextRun> get_TextRuns();
    internal RPLParagraph get_RPLElement();
    internal CompiledParagraphInstance get_CompiledInstance();
    internal CompiledParagraphInstanceCollection get_CompiledParagraphsCollection();
    public sealed virtual TextAlignments get_Alignment();
    public sealed virtual float get_SpaceBefore();
    public sealed virtual float get_SpaceAfter();
    public sealed virtual float get_LeftIndent();
    public sealed virtual float get_RightIndent();
    public sealed virtual float get_HangingIndent();
    public sealed virtual int get_ListLevel();
    public sealed virtual ListStyles get_ListStyle();
    public sealed virtual int get_ParagraphNumber();
    public sealed virtual void set_ParagraphNumber(int value);
    internal object GetRichTextStyleValue(StyleAttributeNames styleName, Boolean& isShared);
    internal object GetRichTextStyleValue(StyleAttributeNames styleName);
    internal virtual void WriteSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext, long offset);
    internal virtual void WriteSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteBackgroundImage(BinaryWriter spbifWriter, Style style, bool writeShared, PageContext pageContext);
    internal virtual void WriteBackgroundImage(RPLStyleProps rplStyleProps, Style style, bool writeShared, PageContext pageContext);
    internal virtual void WriteBorderProps(BinaryWriter spbifWriter, Style style);
    internal virtual void WriteBorderProps(RPLStyleProps rplStyleProps, Style style);
    internal void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal Paragraph GetRichTextParagraph();
    private void BuildTextRunCollection(PageContext pageContext);
    private bool IsExpressionValue(ReportSizeProperty property, ReportSize instance);
    private bool IsNotExpressionValue(ReportSizeProperty property);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ProcessPageBreaks : object {
    private bool m_pbAtStart;
    private double m_minAtStart;
    private bool m_spanItems;
    private double m_maxSpanItems;
    private List`1<double> m_pbsAtEnd;
    private double m_maxAtEnd;
    internal void ProcessItemPageBreaks(PageItem pageItem);
    internal bool HasPageBreaks(Double& breakPosition, Double& pageItemHeight);
    private void ResolveItemPosition(double itemPosition, bool checkSpanItems);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Rectangle : PageItemContainer {
    private bool m_staticItem;
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal bool StaticItem { get; }
    internal Rectangle(Rectangle source, PageContext pageContext, bool createForRepeat);
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    internal virtual bool get_StaticItem();
    private void CalculateHiddenItemRenderSize(PageContext pageContext, bool createForRepeat);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal virtual void CalculateRepeatWithPage(RPLWriter rplWriter, PageContext pageContext, PageItem[] siblings);
    internal virtual int WriteRepeatWithToPage(RPLWriter rplWriter, PageContext pageContext);
    internal void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal abstract class Microsoft.ReportingServices.Rendering.SPBProcessing.RegisterItem : object {
    internal static void RegisterPageItem(PageItem pageItem, PageContext pageContext, bool useForPageHFEval, Interactivity interactivity);
    internal static void RegisterHiddenItem(ReportItem reportItem, PageContext pageContext, bool useForPageHFEval, Interactivity interactivity);
    private static void RegisterHiddenItem(ReportItemCollection collection, PageContext pageContext, bool useForPageHFEval, Interactivity interactivity);
    private static void RegisterHiddenItem(Tablix tablix, PageContext pageContext, bool useForPageHFEval, Interactivity interactivity);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.RepeatWithItem : object {
    internal static string RepeatSuffix;
    private double m_relativeTop;
    private double m_relativeBottom;
    private double m_relativeTopToBottom;
    private int m_dataRegionIndex;
    private PageItem m_pageItem;
    private ItemSizes m_renderItemSize;
    internal int DataRegionIndex { get; }
    internal PageItem SourcePageItem { get; }
    internal double RelativeTop { get; }
    internal double RelativeBottom { get; }
    internal RepeatWithItem(PageItem pageItem, PageContext pageContext);
    internal int get_DataRegionIndex();
    internal PageItem get_SourcePageItem();
    internal double get_RelativeTop();
    internal double get_RelativeBottom();
    internal void UpdateCreateState(PageItem dataRegion, int dataRegionIndex, List`1<int> pageItemsAbove, PageContext pageContext);
    internal void UpdateSizes(PageContext pageContext);
    internal bool AddOnPage(ItemSizes dataRegionSizes, PageItem[] siblings, int itemIndex, List`1& parentOverlappedItems, Double& header);
    internal void WriteRepeatWithToPage(RPLWriter rplWriter, PageContext pageContext);
    internal void UpdateItem(PageItemHelper itemHelper, RPLWriter rplWriter, PageContext pageContext);
    internal void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Report : object {
    private Report m_report;
    private ReportPaginationInfo m_reportInfo;
    private PageItem m_reportBody;
    private PageContext m_pageContext;
    private long m_offset;
    private long m_pageOffset;
    private long m_bodyOffset;
    private DocumentMapLabels m_labels;
    private Bookmarks m_bookmarks;
    private bool m_chunksLoaded;
    private bool m_labelsChunkLoaded;
    private Version m_rplVersion;
    internal bool Done { get; }
    internal Version RPLVersion { get; }
    internal double InteractiveHeight { get; }
    internal IJobContext JobContext { get; }
    internal Report(Report report, PageContext pageContext, string rplVersion, bool defaultVersion);
    internal bool get_Done();
    internal Version get_RPLVersion();
    internal double get_InteractiveHeight();
    internal IJobContext get_JobContext();
    internal void SetContext(ReportPaginationInfo reportInfo);
    internal void LoadInteractiveChunks(int page);
    internal void LoadLabelsChunk();
    internal void UnloadInteractiveChunks();
    internal bool RegisterPageForCollect(int page, bool collectPageBookmarks);
    internal bool RegisterPageLabelsForCollect(int page);
    internal void UnregisterPageForCollect();
    internal void NextPage(RPLWriter rplWriter, PageItemHelper& lastPageInfo, int page, int totalPages, Interactivity interactivity);
    internal void WriteStartItemToStream(RPLWriter rplWriter);
    internal void WriteReportPageStart(RPLWriter rplWriter);
    internal void WriteEndItemToStream(RPLWriter rplWriter, int itemsOnPage, PageHeadFoot header, PageHeadFoot footer);
    internal void UpdatePagination();
    internal PageItemHelper GetPaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ReportBody : PageItemContainer {
    private Body m_source;
    internal string SourceUniqueName { get; }
    internal string SourceID { get; }
    internal ReportElement OriginalSource { get; }
    internal ReportBody(Body source, ReportSize width, PageContext pageContext);
    internal virtual string get_SourceUniqueName();
    internal virtual string get_SourceID();
    internal virtual ReportElement get_OriginalSource();
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ReportPage : PageElement {
    public long Offset { get; public set; }
    internal string SourceID { get; }
    internal string SourceUniqueName { get; }
    internal ReportPage(Page source);
    internal void WriteElementStyle(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    public virtual long get_Offset();
    public virtual void set_Offset(long value);
    internal virtual string get_SourceID();
    internal virtual string get_SourceUniqueName();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ReportPaginationInfo : object {
    internal static string PaginationInfoChunk;
    private Version m_version;
    private int m_paginatedPages;
    private Stream m_stream;
    private BinaryReader m_reader;
    private BinaryWriter m_writer;
    private List`1<long> m_metadataPages;
    private long m_offsetLastPage;
    private long m_offsetHeader;
    private bool m_reportDone;
    private double m_pageHeight;
    private bool m_newPagesMetadata;
    internal Version Version { get; }
    internal int PaginatedPages { get; }
    internal long OffsetLastPage { get; }
    internal BinaryWriter BinaryWriter { get; }
    internal BinaryReader BinaryReader { get; }
    internal bool IsDone { get; }
    internal ReportPaginationInfo(Report report, Version rplVersion, double pageHeight);
    internal Version get_Version();
    internal int get_PaginatedPages();
    internal long get_OffsetLastPage();
    internal BinaryWriter get_BinaryWriter();
    internal BinaryReader get_BinaryReader();
    internal bool get_IsDone();
    internal void ReadPageInfo(int page, PageItemHelper& pageInfo);
    internal void SavePaginationMetadata(bool reportDone);
    internal void UpdateReportInfo();
    private void SavePaginationInfo();
    private void ExtractPaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.RoundedDouble : object {
    internal double m_value;
    internal bool m_forOverlapDetection;
    internal double Value { get; internal set; }
    public RoundedDouble(double x);
    public RoundedDouble(double x, bool forOverlapDetection);
    internal double get_Value();
    internal void set_Value(double value);
    internal static double GetRoundingDelta(RoundedDouble x);
    public static bool op_Equality(RoundedDouble x1, double x2);
    public static bool op_GreaterThan(RoundedDouble x1, double x2);
    public static bool op_GreaterThanOrEqual(RoundedDouble x1, double x2);
    public static bool op_LessThan(RoundedDouble x1, double x2);
    public static bool op_LessThanOrEqual(RoundedDouble x1, double x2);
    public static bool op_Inequality(RoundedDouble x1, double x2);
    public static RoundedDouble op_Addition(RoundedDouble x1, double x2);
    public static RoundedDouble op_Subtraction(RoundedDouble x1, double x2);
    public static RoundedDouble op_Explicit(double x);
    public virtual bool Equals(object x1);
    public virtual int GetHashCode();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.RPLWriter : object {
    private RPLReport m_rplReport;
    private BinaryWriter m_binaryWriter;
    private RPLTablixRow m_tablixRow;
    internal RPLReport Report { get; internal set; }
    internal RPLTablixRow TablixRow { get; internal set; }
    internal BinaryWriter BinaryWriter { get; internal set; }
    internal RPLReport get_Report();
    internal void set_Report(RPLReport value);
    internal RPLTablixRow get_TablixRow();
    internal void set_TablixRow(RPLTablixRow value);
    internal BinaryWriter get_BinaryWriter();
    internal void set_BinaryWriter(BinaryWriter value);
}
internal enum Microsoft.ReportingServices.Rendering.SPBProcessing.SecondaryStreams : Enum {
    public byte value__;
    public static SecondaryStreams Embedded;
    public static SecondaryStreams Server;
    public static SecondaryStreams Temporary;
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.ShareFont : object {
    internal static int FontGDI;
    internal static int Alignment;
    internal static int LineAlignment;
    internal static int WritingMode;
    internal static int FormatFlags;
    internal static int All;
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.SortPageItemIndexesOnTop : object {
    private PageItem[] m_children;
    internal SortPageItemIndexesOnTop(PageItem[] children);
    private sealed virtual override int System.Collections.IComparer.Compare(object o1, object o2);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.SPBContext : object {
    public int StartPage;
    public int EndPage;
    public bool MeasureItems;
    public SecondaryStreams SecondaryStreams;
    public bool AddSecondaryStreamNames;
    public bool AddToggledItems;
    public bool AddOriginalValue;
    public bool AddFirstPageHeaderFooter;
    public bool UseImageConsolidation;
    public bool EmfDynamicImage;
    public SPBContext(int startPage, int endPage);
    public SPBContext(int startPage, int endPage, bool addToggledItems);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.SPBProcessing : object {
    protected static ResourceManager SPBResManager;
    private CreateAndRegisterStream m_createAndRegisterStream;
    private Report m_report;
    private PageContext m_pageContext;
    private RPLState m_rplState;
    private bool m_useInteractiveHeight;
    private int m_startPage;
    private int m_endPage;
    private int m_currentPage;
    private int m_totalPages;
    private ReportPaginationInfo m_reportInfo;
    private PageItemHelper m_lastPageInfo;
    private PageItemHelper m_lastPageInfoForCancel;
    private Version m_serverRPLVersion;
    internal static ResourceManager SPBResourceManager { get; }
    public bool Done { get; }
    public Dictionary`2<string, string> PageBookmarks { get; }
    internal FontCache SharedFontCache { get; }
    internal bool UseEmSquare { get; internal set; }
    private static SPBProcessing();
    public SPBProcessing(Report report, CreateAndRegisterStream createAndRegisterStream, double pageHeight);
    public SPBProcessing(Report report, CreateAndRegisterStream createAndRegisterStream, bool registerEvents, string rplVersion, Hashtable& renderProperties);
    public SPBProcessing(Report report, CreateAndRegisterStream createAndRegisterStream, bool registerEvents, Hashtable& renderProperties);
    internal SPBProcessing(Report report, int totalPages, bool needPageHeaderFooter);
    internal static ResourceManager get_SPBResourceManager();
    public static int TotalNrOfPages(Report report);
    public static bool RenderSecondaryStream(Report report, CreateAndRegisterStream createAndRegisterStream, string streamName);
    public static int ProcessFindStringEvent(Report report, int totalPages, int startPage, int endPage, string findValue);
    public static int ProcessUserSortEvent(Report report, string textbox, Int32& numberOfPages, PaginationMode& paginationMode);
    public static int ProcessBookmarkNavigationEvent(Report report, int totalPages, string bookmarkId, String& uniqueName);
    public static int ProcessDocumentMapNavigationEvent(Report report, string documentMapId);
    public static void GetDocumentMap(Report report);
    internal static int ParseInt(string intValue, int defaultValue);
    internal static int CompareWithOrdinalComparison(string x, string y, bool ignoreCase);
    private static void FindChart(Report report, string uniqueName, int pageNumber, string streamName, CreateAndRegisterStream createAndRegisterStream);
    private static void FindGaugePanel(Report report, string uniqueName, int pageNumber, string streamName, CreateAndRegisterStream createAndRegisterStream);
    private static void FindImage(Report report, string uniqueName, int pageNumber, string streamName, CreateAndRegisterStream createAndRegisterStream);
    private static void FindImageConsolidation(Report report, int pageNumber, int offset, string streamName, CreateAndRegisterStream createAndRegisterStream);
    public static Dictionary`2<string, string> CollectBookmarks(Report report, int totalPages);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public sealed virtual void SetContext(SPBContext context);
    internal void SetContext(SPBContext context, bool createStream);
    public void UpdateRenderProperties(Hashtable& renderProperties);
    public Stream GetNextPage();
    public Stream GetNextPage(bool collectPageBookmarks);
    public void GetNextPage(Stream outputStream);
    public void GetNextPage(Stream outputStream, bool collectPageBookmarks);
    private RPLWriter FlushRPLWriter(RPLWriter& rplWriter);
    public sealed virtual Stream GetNextPage(RPLReport& rplReport);
    public Stream GetNextPage(RPLReport& rplReport, bool collectPageBookmarks);
    private RPLWriter GetReportNextPage(Stream& stream, bool collectPageBookmarks);
    private void CreateWriter(RPLWriter rplWriter, Stream stream);
    private void WriteVersionStamp(BinaryWriter sbpWriter, Version rplVersion);
    private void PaginateReport(int startPage, int endPage);
    private void InitializeForInteractiveRenderer(Report report, CreateAndRegisterStream createAndRegisterStream, bool registerEvents, Hashtable& renderProperties);
    internal int FindString(int startPage, int endPage, string findValue);
    internal int FindUserSort(string textbox, Int32& numberOfPages, PaginationMode& paginationMode);
    private void FindItem(Interactivity interactivityContext, int pageNumber);
    internal void FindImageConsolidation(string reportName, int pageNumber, int offset, string streamName, CreateAndRegisterStream createAndRegisterStream);
    internal void FindChart(string uniqueName, int pageNumber, string streamName, CreateAndRegisterStream createAndRegisterStream);
    internal void FindGaugePanel(string uniqueName, int pageNumber, string streamName, CreateAndRegisterStream createAndRegisterStream);
    internal void FindImage(string uniqueName, int pageNumber, string streamName, CreateAndRegisterStream createAndRegisterStream);
    internal int FindBookmark(string bookmarkId, int lastPageCollected, String& uniqueName);
    internal Dictionary`2<string, string> CollectBookmarks();
    internal int FindDocumentMap(string documentMapId, int lastPageCollected);
    internal void GetDocumentMap();
    public sealed virtual bool get_Done();
    public Dictionary`2<string, string> get_PageBookmarks();
    internal FontCache get_SharedFontCache();
    internal bool get_UseEmSquare();
    internal void set_UseEmSquare(bool value);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.SPBReferenceCreator : object {
    private static SPBReferenceCreator m_instance;
    internal static SPBReferenceCreator Instance { get; }
    private static SPBReferenceCreator();
    internal static SPBReferenceCreator get_Instance();
    public sealed virtual bool TryCreateReference(IStorable refTarget, BaseReference& reference);
    public sealed virtual bool TryCreateReference(ObjectType referenceObjectType, BaseReference& reference);
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.SPBRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string RenderSubreportError { get; }
    public static string InvalidPaginationStream { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_RenderSubreportError();
    public static string get_InvalidPaginationStream();
    public static string InvalidTokenPaginationProperties(string hexToken);
    public static string InvalidTokenPaginationItems(string hexToken);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.StorageObjectCreator : object {
    private static StorageObjectCreator m_instance;
    private static List`1<Declaration> m_declarations;
    internal static StorageObjectCreator Instance { get; }
    private static StorageObjectCreator();
    public sealed virtual bool TryCreateObject(ObjectType objectType, IPersistable& persistObj);
    public sealed virtual List`1<Declaration> GetDeclarations();
    internal static StorageObjectCreator get_Instance();
    private static List`1<Declaration> BuildDeclarations();
}
internal static class Microsoft.ReportingServices.Rendering.SPBProcessing.StyleEnumConverter : object {
    internal static byte Translate(FontStyles aValue);
    internal static byte Translate(FontWeights aValue);
    internal static byte Translate(TextDecorations aValue);
    internal static byte Translate(TextAlignments aValue);
    internal static byte Translate(VerticalAlignments aValue);
    internal static byte Translate(Directions aValue);
    internal static byte Translate(WritingModes aValue);
    internal static byte Translate(UnicodeBiDiTypes aValue);
    internal static byte Translate(Calendars aValue);
    internal static Nullable`1<byte> Translate(BorderStyles aValue);
    internal static byte Translate(BackgroundRepeatTypes aValue);
    internal static byte Translate(ListStyle listStyle);
    internal static byte Translate(MarkupType markupType);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.SubReport : PageItem {
    private PageItem m_childBody;
    private double m_prevPageEnd;
    internal SubReport(SubReport source, PageContext pageContext, bool createForRepeat);
    internal void UpdateItemPageState(bool omitBordersOnPageBreaks);
    internal virtual void UpdateItem(PageItemHelper itemHelper);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal void WriteEndItemToStream(RPLWriter rplWriter);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.Tablix : PageItem {
    internal static byte BorderHeader;
    internal static byte HasToggle;
    internal static byte CollapsedHeader;
    internal static byte HasOmittedChildren;
    private PageItem m_partialPageItem;
    private List`1<int> m_tablixCreateState;
    private int m_levelForRepeat;
    private bool m_ignoreTotalsOnLastLevel;
    private TablixRowCollection m_bodyRows;
    private Double[] m_bodyRowsHeigths;
    private Double[] m_bodyColWidths;
    private bool m_ignoreCellPageBreaks;
    private int m_rowMembersDepth;
    private int m_colMembersDepth;
    internal bool PageBreakAtStart { get; }
    internal bool PageBreakAtEnd { get; }
    internal Tablix(Tablix source, PageContext pageContext, bool createForRepeat);
    internal virtual bool get_PageBreakAtStart();
    internal virtual bool get_PageBreakAtEnd();
    internal virtual void UpdateItem(PageItemHelper itemHelper);
    private int TablixMembersDepthTree(TablixMemberCollection memberCollection);
    private bool StaticDecendents(TablixMemberCollection children);
    private double CornerSize(TablixMemberCollection memberCollection);
    private void CreateDetailCell(Tablix tablix, TablixMember colMemberParent, int colGridIndex, TablixContext context);
    private int CreateColumnMemberChildren(Tablix tablix, TablixMember colMemberParent, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, TablixContext context, bool createDetail, LevelInfo& parentLevelInfo);
    private int CreateColumnMemberTotals(Tablix tablix, List`1<int> totals, TablixMemberCollection columnMembers, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, TablixContext context, bool createDetail, LevelInfo parentLevelInfo);
    private int CheckKeepWithGroupUp(TablixMemberCollection rowMembers, int start, KeepWithGroup keepWith);
    private int CheckKeepWithGroupDown(TablixMemberCollection rowMembers, int start, KeepWithGroup keepWith);
    private int CreateKeepWithRowMemberChildren(Tablix tablix, TablixMember rowMemberParent, int defTreeLevel, int parentRowIndex, int parentColIndex, int level, int start, int end, LevelInfo& parentLevelInfo, TablixContext context);
    private int CreateRowMemberChildren(Tablix tablix, TablixMember rowMemberParent, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, int level, TablixContext context, Boolean& advanceRow, LevelInfo& parentLevelInfo, List`1& ignoreTotals);
    private int CreateRowMemberTotals(Tablix tablix, List`1<int> totals, TablixMemberCollection rowMembers, int defTreeLevel, bool parentBorderHeader, int parentRowIndex, int parentColIndex, int level, TablixContext context, Boolean& advanceRow, LevelInfo parentLevelInfo, List`1<bool> ignoreTotals);
    private bool RenderRowMemberInstance(TablixMember rowMember, bool addToggledItems);
    private bool KeepTogetherStaticHeader(TablixMemberCollection rowMembers, TablixMember staticMember, int staticIndex, TablixContext context);
    private double RegisterSizeForRepeatWithBefore(Tablix tablix, TablixMember rowMemberParent, int start, int end, TablixContext context);
    private bool DynamicWithVisibleChildren(TablixMember rowMemberParent, TablixContext context);
    private bool DynamicWithNonKeepWithVisibleChildren(TablixMember rowMemberParent, int childrenLevel, TablixContext context, Boolean& pageBreak);
    private bool DynamicWithVisibleChildren(TablixMember rowMemberParent, bool addToggledItems, Boolean& pageBreakAtStart);
    private bool MemberWithVisibleChildren(TablixMemberCollection rowMembers, bool addToggledItems, Boolean& pageBreakAtStart);
    private bool MemberWithNonKeepWithVisibleChildren(TablixMemberCollection rowMembers, bool addToggledItems, bool checkPageBreaks, int startChild, int level, Boolean& found, Boolean& pageBreak);
    private bool CheckAndAdvanceToNextVisibleInstance(Tablix tablix, TablixMember rowMember, TablixDynamicMemberInstance rowDynamicInstance, TablixContext context);
    private bool AdvanceToNextVisibleInstance(Tablix tablix, TablixMember rowMember, TablixDynamicMemberInstance rowDynamicInstance, TablixContext context);
    private int AdvanceInState(Tablix tablix, TablixMember rowMemberParent, int level, TablixContext context, Int32& ignoredRows, Int32& staticHeaderLevel, List`1<bool> ignoreTotals);
    private List`1<int> GetTablixMembersInstanceIndex();
    private void GetTablixMembersInstanceIndex(TablixMemberCollection rowMembers, int level, List`1<int> instanceState);
    private void SetTablixMembersInstanceIndex(List`1<int> instanceState);
    private void SetTablixMembersInstanceIndex(TablixMemberCollection rowMembers, int level, List`1<int> instanceState);
    private void CreateTablixItems(Tablix tablix, TablixContext context);
    private void CheckForOnlyStaticHeaders(Tablix tablix, int staticHeaderLevel, TablixContext context);
    private Int32[] DefDetailRowsCapacity(TablixRowCollection defDetailRows);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal void WriteStartItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal void WriteEndItemToStream(RPLWriter rplWriter, TablixContext context, Tablix tablix, ItemSizes contentSize);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.TextBox : PageItem {
    private static int MAX_GDI_TEXT_SIZE;
    private CalcSize m_calcSizeState;
    private bool m_isSimple;
    private List`1<Paragraph> m_paragraphs;
    private TextBox m_richTextBox;
    private float m_contentHeight;
    internal string SourceID { get; }
    internal CalcSize CalcSizeState { get; internal set; }
    internal bool IsSimple { get; }
    public TextAlignments DefaultAlignment { get; }
    public Directions Direction { get; }
    public WritingModes WritingMode { get; }
    public Color BackgroundColor { get; }
    public bool CanGrow { get; }
    internal TextBox(TextBox source, PageContext pageContext, bool createForRepeat);
    internal TextBox(DataRegion source, PageContext pageContext, bool createForRepeat);
    internal TextBox(SubReport source, PageContext pageContext, bool createForRepeat);
    internal virtual string get_SourceID();
    internal CalcSize get_CalcSizeState();
    internal void set_CalcSizeState(CalcSize value);
    internal bool get_IsSimple();
    public sealed virtual TextAlignments get_DefaultAlignment();
    public sealed virtual Directions get_Direction();
    public sealed virtual WritingModes get_WritingMode();
    public sealed virtual Color get_BackgroundColor();
    public sealed virtual bool get_CanGrow();
    public sealed virtual void DrawTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle);
    public sealed virtual void DrawClippedTextRun(TextRun run, Paragraph paragraph, IntPtr hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle, UInt32 fontColorOverride, Rectangle clipRect);
    internal virtual bool CalculatePage(RPLWriter rplWriter, PageItemHelper lastPageInfo, PageContext pageContext, PageItem[] siblings, RepeatWithItem[] repeatWithItems, double parentTopInPage, Double& parentPageHeight, Interactivity interactivity);
    internal virtual void CalculateRepeatWithPage(RPLWriter rplWriter, PageContext pageContext, PageItem[] siblings);
    internal virtual int WriteRepeatWithToPage(RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomSharedItemProps(RPLElementPropsDef sharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteCustomNonSharedItemProps(RPLElementProps nonSharedProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteItemNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAtt, PageContext pageContext);
    internal virtual void WriteNonSharedStyle(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, PageContext pageContext, Nullable`1<byte> rplTag, ReportElementInstance compiledSource);
    internal virtual RPLStyleProps WriteNonSharedStyle(Style styleDef, StyleInstance style, PageContext pageContext, ReportElementInstance compiledSource);
    internal virtual void WritePaginationInfo(BinaryWriter reportPageInfo);
    internal virtual PageItemHelper WritePaginationInfo();
    internal void MeasureTextBox(PageContext pageContext, ItemSizes contentSize, bool createForRepeat);
    private float MeasureTextBox_Uniscribe(PageContext pageContext, ItemSizes contentSize, TextBox tbDef, Double& padVertical);
    private float MeasureTextBox_GDI(PageContext pageContext, ItemSizes contentSize, TextBox tbDef, Double& padVertical);
    private string AggregateTextBoxStyle(PageContext pageContext, Double& padHorizontal, Double& padVertical, CanvasFont& font, Boolean& newFont, Boolean& newStringFormat);
    internal bool SearchTextBox(string findValue, PageContext pageContext);
    private float TextBoxWidth(TextBox tbDef, PageContext pageContext, double padHorizontal);
    private bool HideDuplicate(TextBox tbDef, TextBoxInstance tbInst, PageContext pageContext);
    private void CalculateTotalPaddings(PageContext pageContext, Double& padHorizontal, Double& padVertical);
    private void CalculateRichTextElements(PageContext pageContext);
    private bool WriteOriginalValue(BinaryWriter spbifWriter, TypeCode typeCode, object value);
    private bool WriteOriginalValue(RPLTextBoxProps textBoxProps, TypeCode typeCode, object value);
    private bool WriteObjectValue(BinaryWriter spbifWriter, byte name, TypeCode typeCode, object value);
    private bool WriteObjectValue(RPLTextBoxProps textBoxProps, TypeCode typeCode, object value);
    private void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    private List`1<long> WriteRichTextElementProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    private void WriteRichTextElementProps(RPLWriter rplWriter, PageContext pageContext);
    private TextAlignments GetTextAlignmentValue(Paragraph paragraph, Boolean& shared);
    private bool GetAlignmentRight(Boolean& shared);
    private CanvasFont CreateFontPens(PageContext pageContext, Paragraph paragraph, TextRun textRun, Boolean& newFont, Boolean& newFormatString);
    private CanvasFont CreatePartialSharedFont(CanvasFont shareFont, int fontSharedState, Paragraph paragraph, TextRun textRun, Boolean& newFont, Boolean& newFormatString);
    internal static void AddNewLinesAtGdiLimits(String& text);
    private static void InsertNewLines(StringBuilder text, string value);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.TextBoxSharedInfo : object {
    private CanvasFont m_sharedFont;
    private int m_sharedState;
    private int m_pageNumber;
    internal CanvasFont SharedFont { get; internal set; }
    internal int SharedState { get; internal set; }
    internal int PageNumber { get; internal set; }
    internal TextBoxSharedInfo(CanvasFont font, int sharedState);
    internal TextBoxSharedInfo(int pageNumber);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    internal CanvasFont get_SharedFont();
    internal void set_SharedFont(CanvasFont value);
    internal int get_SharedState();
    internal void set_SharedState(int value);
    internal int get_PageNumber();
    internal void set_PageNumber(int value);
}
internal class Microsoft.ReportingServices.Rendering.SPBProcessing.TextRun : PageElement {
    private long m_offset;
    private RPLTextRun m_rplElement;
    private CompiledTextRunInstance m_compiledSource;
    private string m_fontKey;
    public long Offset { get; public set; }
    internal string SourceID { get; }
    internal string SourceUniqueName { get; }
    internal bool HasBackground { get; }
    internal RPLTextRun RPLElement { get; }
    internal CompiledTextRunInstance CompiledInstance { get; }
    public string FontFamily { get; }
    public float FontSize { get; }
    public Color Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public TextDecorations TextDecoration { get; }
    public int IndexInParagraph { get; }
    public string FontKey { get; public set; }
    internal TextRun(TextRun textRun, PageContext pageContext);
    internal TextRun(TextRun textRun, CompiledTextRunInstance compiledTextRun, PageContext pageContext);
    public virtual long get_Offset();
    public virtual void set_Offset(long value);
    internal virtual string get_SourceID();
    internal virtual string get_SourceUniqueName();
    internal virtual bool get_HasBackground();
    internal RPLTextRun get_RPLElement();
    internal CompiledTextRunInstance get_CompiledInstance();
    public sealed virtual string get_FontFamily();
    public sealed virtual float get_FontSize();
    public sealed virtual Color get_Color();
    public sealed virtual bool get_Bold();
    public sealed virtual bool get_Italic();
    public sealed virtual TextDecorations get_TextDecoration();
    public sealed virtual int get_IndexInParagraph();
    public sealed virtual string get_FontKey();
    public sealed virtual void set_FontKey(string value);
    public sealed virtual void AddSplitIndex(int index);
    internal object GetRichTextStyleValue(StyleAttributeNames styleName, Boolean& isShared);
    internal object GetRichTextStyleValue(StyleAttributeNames styleName);
    internal string ComputeValue();
    internal virtual void WriteSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext, long offset);
    internal virtual void WriteSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedItemProps(BinaryWriter spbifWriter, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteNonSharedItemProps(RPLElementProps elemProps, RPLWriter rplWriter, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(BinaryWriter spbifWriter, Style style, PageContext pageContext);
    internal virtual void WriteItemSharedStyleProps(RPLStyleProps rplStyleProps, Style style, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(BinaryWriter spbifWriter, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteNonSharedStyleProp(RPLStyleProps rplStyleProps, Style styleDef, StyleInstance style, StyleAttributeNames styleAttribute, PageContext pageContext);
    internal virtual void WriteBackgroundImage(BinaryWriter spbifWriter, Style style, bool writeShared, PageContext pageContext);
    internal virtual void WriteBackgroundImage(RPLStyleProps rplStyleProps, Style style, bool writeShared, PageContext pageContext);
    internal virtual void WriteBorderProps(BinaryWriter spbifWriter, Style style);
    internal virtual void WriteBorderProps(RPLStyleProps rplStyleProps, Style style);
    internal void WriteItemToStream(RPLWriter rplWriter, PageContext pageContext);
    internal TextRun GetRichTextRun();
    private void WriteActionInstance(ActionInstance actionInst, BinaryWriter spbifWriter, PageContext pageContext);
    private RPLActionInfo WriteActionInstance(ActionInstance actionInst, PageContext pageContext);
    private bool IsBold(FontWeights fontWeight);
    private bool IsItalic(FontStyles fontStyle);
}
internal abstract class Microsoft.ReportingServices.Rendering.SPBProcessing.WalkTablix : object {
    internal static int AddMembersToCurrentPage(Tablix tablix, TablixMember memberParent, int rowMemberIndexCell, State state, bool noRows, PageContext context, bool useForPageHFEval, Interactivity interactivity);
    private static void AddCornerToCurrentPage(TablixCorner corner, PageContext context, bool useForPageHFEval, Interactivity interactivity);
    private static bool WalkTablixMember(TablixMember tablixMember, Boolean& useForPageHFEval, Interactivity interactivity);
    internal static void AddDetailCellToCurrentPage(Tablix tablix, int colMemberIndexCell, int rowMemberIndexCell, PageContext context, bool useForPageHFEval, Interactivity interactivity);
}
internal class Microsoft.ReportingServices.Rendering.Utilities.LittleEndian : object {
    internal static void PutInt(Byte[] data, int offset, int val);
    internal static void PutInt(Byte[] data, int val);
    internal static void PutUShort(Byte[] data, int offset, ushort val);
    internal static void PutUShort(Byte[] data, ushort val);
    internal static void PutShort(Byte[] data, int offset, short val);
    internal static void PutShort(Byte[] data, short val);
    internal static int getInt(Byte[] data);
    internal static int getInt(Byte[] data, int offset);
    internal static ushort getUShort(Byte[] data, int offset);
    internal static short getShort(Byte[] data, int offset);
    private static long getNumber(Byte[] data, int offset, int size);
    private static void PutNumber(Byte[] data, int offset, long val, int size);
}
internal class Microsoft.ReportingServices.Rendering.Utilities.OfficeImageHasher : object {
    private int m_a;
    private int m_b;
    private int m_c;
    private int m_d;
    private Int32[] m_dd;
    private int m_numwords;
    internal Byte[] Hash { get; }
    internal OfficeImageHasher(Byte[] inputBuffer);
    internal OfficeImageHasher(Stream inputStream);
    internal Byte[] get_Hash();
    internal void Mdinit(Byte[] inputBuffer);
    internal void Mdinit(Stream inputStream);
    internal void Calc();
    internal static int F(int x, int y, int z);
    internal static int G(int x, int y, int z);
    internal static int H(int x, int y, int z);
    internal void Round1(int blk);
    internal void Round2(int blk);
    internal void Round3(int blk);
    internal Int32[] Getregs();
    internal static int Rotintlft(int val, int numbits);
    public virtual string ToString();
    internal static string Tohex(int i);
}
internal enum Microsoft.ReportingServices.Rendering.WordRenderer.AutoFit : Enum {
    public int value__;
    public static AutoFit False;
    public static AutoFit True;
    public static AutoFit Default;
    public static AutoFit Never;
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.BitField : object {
    private int m_mask;
    private int m_shiftCount;
    internal BitField(int mask);
    internal virtual int GetValue(int holder);
    internal virtual short GetShortValue(short holder);
    internal virtual int GetRawValue(int holder);
    internal virtual short GetShortRawValue(short holder);
    internal virtual bool IsSet(int holder);
    internal virtual bool IsAllSet(int holder);
    internal virtual int SetValue(int holder, int value_Renamed);
    internal virtual short SetShortValue(short holder, short value_Renamed);
    internal virtual int Clear(int holder);
    internal virtual short ClearShort(short holder);
    internal virtual byte ClearByte(byte holder);
    internal virtual int Mark(int holder);
    internal virtual short SetShort(short holder);
    internal virtual byte SetByte(byte holder);
    internal virtual int SetBoolean(int holder, bool flag);
    internal virtual short SetShortBoolean(short holder, bool flag);
    internal virtual byte SetByteBoolean(byte holder, bool flag);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.Bookmarks : object {
    private List`1<int> m_offsets;
    private List`1<string> m_names;
    internal int Count { get; }
    internal static Char[] EscapeText(string text, Int32& length);
    internal static string CleanseName(string name);
    internal void AddBookmark(string name, int cp);
    internal void SerializeStarts(BinaryWriter writer, int cpEnd);
    internal void SerializeEnds(BinaryWriter writer, int cpEnd);
    internal void SerializeNames(BinaryWriter writer);
    internal int get_Count();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.BorderCode : object {
    private int m_ico24;
    private int m_info;
    private static BitField m_dptLineWidth;
    private static BitField m_brcType;
    private static BitField m_dptSpace;
    private static BitField m_fShadow;
    private static BitField m_fFrame;
    private byte m_97dptLineWidth;
    private byte m_97brcType;
    private ushort m_97info2;
    private static BitField m_97dptSpace;
    private static BitField m_97fShadow;
    private static BitField _97fFrame;
    internal LineStyle Style { get; internal set; }
    internal int LineWidth { get; internal set; }
    unknown bool HasShadow {internal set; }
    internal int Size { get; }
    internal int Ico24 { get; internal set; }
    internal bool Empty { get; }
    internal int Ico97 { get; }
    private static BorderCode();
    internal LineStyle get_Style();
    internal void set_Style(LineStyle value);
    internal int get_LineWidth();
    internal void set_LineWidth(int value);
    internal void set_HasShadow(bool value);
    internal int get_Size();
    internal int get_Ico24();
    internal void set_Ico24(int value);
    internal bool get_Empty();
    internal int get_Ico97();
    internal void SetColor(int ico24);
    internal Color GetColor();
    internal void SetColor(Color& color);
    internal void Serialize2K3(Byte[] buf, int offset);
    internal void Serialize97(Byte[] buf, int offset);
    internal virtual Byte[] toByteArray();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.BorderContext : object {
    private static int TopBit;
    private static int LeftBit;
    private static int BottomBit;
    private static int RightBit;
    internal static BorderContext EmptyBorder;
    internal static BorderContext TopBorder;
    internal static BorderContext LeftBorder;
    internal static BorderContext RightBorder;
    internal static BorderContext BottomBorder;
    internal static BorderContext TopLeftBorder;
    internal static BorderContext TopRightBorder;
    internal static BorderContext BottomLeftBorder;
    internal static BorderContext BottomRightBorder;
    private int m_borderContext;
    internal bool Top { get; internal set; }
    internal bool Left { get; internal set; }
    internal bool Bottom { get; internal set; }
    internal bool Right { get; internal set; }
    internal BorderContext(BorderContext borderContext);
    internal BorderContext(int borderContext);
    private static BorderContext();
    internal void Reset();
    internal bool get_Top();
    internal void set_Top(bool value);
    internal bool get_Left();
    internal void set_Left(bool value);
    internal bool get_Bottom();
    internal void set_Bottom(bool value);
    internal bool get_Right();
    internal void set_Right(bool value);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.BuiltInFonts : object {
    private static Ffn Times_New_Roman;
    private static Ffn Symbol;
    private static Ffn Arial;
    private static Ffn Agency_FB;
    private static Ffn Algerian;
    private static Ffn Arial_Black;
    private static Ffn Arial_Narrow;
    private static Ffn Arial_Rounded_MT_Bold;
    private static Ffn Arial_Unicode_MS;
    private static Ffn Baskerville_Old_Face;
    private static Ffn Batang;
    private static Ffn Bauhaus_93;
    private static Ffn Bell_MT;
    private static Ffn Berlin_Sans_FB;
    private static Ffn Berlin_Sans_FB_Demi;
    private static Ffn Bernard_MT_Condensed;
    private static Ffn Bitstream_Vera_Sans;
    private static Ffn Bitstream_Vera_Sans_Mono;
    private static Ffn Bitstream_Vera_Serif;
    private static Ffn Blackadder_ITC;
    private static Ffn Bodoni_MT;
    private static Ffn Bodoni_MT_Black;
    private static Ffn Bodoni_MT_Condensed;
    private static Ffn Bodoni_MT_Poster_Compressed;
    private static Ffn Book_Antiqua;
    private static Ffn Bookman_Old_Style;
    private static Ffn Bradley_Hand_ITC;
    private static Ffn Britannic_Bold;
    private static Ffn Broadway;
    private static Ffn Brush_Script_MT;
    private static Ffn Californian_FB;
    private static Ffn Calisto_MT;
    private static Ffn Castellar;
    private static Ffn Centaur;
    private static Ffn Century;
    private static Ffn Century_Gothic;
    private static Ffn Century_Schoolbook;
    private static Ffn Chiller;
    private static Ffn Colonna_MT;
    private static Ffn Comic_Sans_MS;
    private static Ffn Cooper_Black;
    private static Ffn Copperplate_Gothic_Bold;
    private static Ffn Copperplate_Gothic_Light;
    private static Ffn Courier_New;
    private static Ffn Curlz_MT;
    private static Ffn Edwardian_Script_ITC;
    private static Ffn Elephant;
    private static Ffn Engravers_MT;
    private static Ffn Eras_Bold_ITC;
    private static Ffn Eras_Demi_ITC;
    private static Ffn Eras_Light_ITC;
    private static Ffn Eras_Medium_ITC;
    private static Ffn Estrangelo_Edessa;
    private static Ffn Felix_Titling;
    private static Ffn Footlight_MT_Light;
    private static Ffn Forte;
    private static Ffn Franklin_Gothic_Book;
    private static Ffn Franklin_Gothic_Demi;
    private static Ffn Franklin_Gothic_Demi_Cond;
    private static Ffn Franklin_Gothic_Heavy;
    private static Ffn Franklin_Gothic_Medium;
    private static Ffn Franklin_Gothic_Medium_Cond;
    private static Ffn Freestyle_Script;
    private static Ffn French_Script_MT;
    private static Ffn Garamond;
    private static Ffn Gautami;
    private static Ffn Georgia;
    private static Ffn Gigi;
    private static Ffn Gill_Sans_MT;
    private static Ffn Gill_Sans_MT_Condensed;
    private static Ffn Gill_Sans_MT_Ext_Condensed_Bold;
    private static Ffn Gill_Sans_Ultra_Bold;
    private static Ffn Gill_Sans_Ultra_Bold_Condensed;
    private static Ffn Gloucester_MT_Extra_Condensed;
    private static Ffn Goudy_Stout;
    private static Ffn Haettenschweiler;
    private static Ffn Harlow_Solid_Italic;
    private static Ffn Harrington;
    private static Ffn High_Tower_Text;
    private static Ffn Impact;
    private static Ffn Imprint_MT_Shadow;
    private static Ffn Informal_Roman;
    private static Ffn Jokerman;
    private static Ffn Juice_ITC;
    private static Ffn Kristen_ITC;
    private static Ffn Kunstler_Script;
    private static Ffn Latha;
    private static Ffn Lucida_Bright;
    private static Ffn Lucida_Calligraphy;
    private static Ffn Lucida_Console;
    private static Ffn Lucida_Fax;
    private static Ffn Onyx;
    private static Ffn Lucida_Handwriting;
    private static Ffn Lucida_Sans;
    private static Ffn Lucida_Sans_Typewriter;
    private static Ffn Lucida_Sans_Unicode;
    private static Ffn Magneto;
    private static Ffn Maiandra_GD;
    private static Ffn Mangal;
    private static Ffn Matura_MT_Script_Capitals;
    private static Ffn Microsoft_Sans_Serif;
    private static Ffn Mistral;
    private static Ffn Modern_No__20;
    private static Ffn Monotype_Corsiva;
    private static Ffn MS_Mincho;
    private static Ffn MS_Reference_Sans_Serif;
    private static Ffn MV_Boli;
    private static Ffn Niagara_Engraved;
    private static Ffn Niagara_Solid;
    private static Ffn OCR_A_Extended;
    private static Ffn Old_English_Text_MT;
    private static Ffn Palace_Script_MT;
    private static Ffn Palatino_Linotype;
    private static Ffn Papyrus;
    private static Ffn Parchment;
    private static Ffn Perpetua;
    private static Ffn Perpetua_Titling_MT;
    private static Ffn Playbill;
    private static Ffn Poor_Richard;
    private static Ffn Pristina;
    private static Ffn Raavi;
    private static Ffn Rage_Italic;
    private static Ffn Ravie;
    private static Ffn Rockwell;
    private static Ffn Rockwell_Condensed;
    private static Ffn Rockwell_Extra_Bold;
    private static Ffn Script_MT_Bold;
    private static Ffn Showcard_Gothic;
    private static Ffn Shruti;
    private static Ffn SimSun;
    private static Ffn Snap_ITC;
    private static Ffn Stencil;
    private static Ffn Sylfaen;
    private static Ffn Tahoma;
    private static Ffn Tempus_Sans_ITC;
    private static Ffn Trebuchet_MS;
    private static Ffn Tunga;
    private static Ffn Tw_Cen_MT;
    private static Ffn Tw_Cen_MT_Condensed;
    private static Ffn Tw_Cen_MT_Condensed_Extra_Bold;
    private static Ffn Verdana;
    private static Ffn Viner_Hand_ITC;
    private static Ffn Vivaldi;
    private static Ffn Vladimir_Script;
    private static Ffn Wide_Latin;
    private static Hashtable m_fontMap;
    private static int BaseFontSize;
    private static BuiltInFonts();
    internal static Ffn GetFont(string name);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.CellBorderColor : object {
    private Byte[] m_borderColorsTop;
    private Byte[] m_borderColorsLeft;
    private Byte[] m_borderColorsBottom;
    private Byte[] m_borderColorsRight;
    internal int SprmSize { get; }
    internal CellBorderColor(int numColumns);
    private void InitColors(Byte[] borderColors);
    internal void Reset();
    internal void SetColor(Positions position, int cellIndex, int ico24);
    internal int get_SprmSize();
    internal Byte[] ToByteArray();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.CellPadding : object {
    private CellSpacingStruct m_topPadding;
    private CellSpacingStruct m_leftPadding;
    private CellSpacingStruct m_bottomPadding;
    private CellSpacingStruct m_rightPadding;
    private List`1<Byte[]> m_sprms;
    private int m_runningSize;
    private int m_numColumns;
    private int m_adjustmentTop;
    private int m_adjustmentBottom;
    internal int HeightAdjustment { get; }
    internal int SprmSize { get; }
    internal CellPadding(int numColumns);
    internal void SetPaddingTop(int cellIndex, int twips);
    internal void SetPaddingLeft(int cellIndex, int twips);
    internal void SetPaddingBottom(int cellIndex, int twips);
    internal void SetPaddingRight(int cellIndex, int twips);
    internal int get_HeightAdjustment();
    internal int get_SprmSize();
    internal Byte[] ToByteArray();
    private void Commit(CellSpacingStruct spacing);
    internal void Finish();
    internal void Reset();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.CellShading : object {
    internal static int ShdSize;
    private Byte[] m_cellShading;
    private Byte[] m_cellShading2;
    private Byte[] m_cellShading3;
    private Byte[] m_tableShd;
    internal int SprmSize { get; }
    internal CellShading(int numColumns, Byte[] tableShd);
    internal int get_SprmSize();
    internal Byte[] ToByteArray();
    internal void SetCellShading(int index, int ico24);
    internal void Reset();
    private void InitShading();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.CellSpacingStruct : object {
    private byte m_itcFirst;
    private byte m_itcLim;
    private byte m_grfbrc;
    private byte m_ftsWidth;
    private ushort m_wWidth;
    unknown int ItcFirst {internal set; }
    unknown int ItcLim {internal set; }
    unknown int GrfBrc {internal set; }
    unknown int FtsWidth {internal set; }
    internal int Width { get; internal set; }
    internal bool Empty { get; }
    internal CellSpacingStruct(Location location);
    internal void set_ItcFirst(int value);
    internal void set_ItcLim(int value);
    internal void set_GrfBrc(int value);
    internal void set_FtsWidth(int value);
    internal int get_Width();
    internal void set_Width(int value);
    internal bool get_Empty();
    internal void serialize(Byte[] buf, int offset);
    internal Byte[] ToByteArray();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.CharacterFormat : Format {
    private static int MaxChpSprmSize;
    private int m_chpOffsetOffset;
    private int m_chpGrpprlOffset;
    private Stream m_chpTable;
    private List`1<int> m_chpOffsets;
    private Byte[] m_chpFkp;
    private Stack`1<SprmBuffer> m_formatStack;
    private int m_chpFcOffset;
    private int m_fcStart;
    internal Stream Stream { get; }
    internal List`1<int> Offsets { get; }
    internal CharacterFormat(Stream chpTable, int fcStart);
    internal void CommitLastCharacterRun(int cpStart, int cpEnd);
    private bool AddPropToChpFkp(Byte[] fkp, int cpEnd, int fcOffset, Byte[] midEntry, int offsetOffset, Byte[] grpprl, int grpprlEnd, int grpprlOffset);
    internal void Finish(int lastCp);
    internal void Push(int bufSize);
    internal void CopyAndPush();
    internal void Pop();
    internal void SetIsInlineImage(int position);
    internal Stream get_Stream();
    internal List`1<int> get_Offsets();
    internal void WriteBinTableTo(BinaryWriter tableWriter, Int32& pageStart);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.CharacterSprms : object {
    internal static ushort SPRM_FRMARKDEL;
    internal static ushort SPRM_FRMARK;
    internal static ushort SPRM_FFLDVANISH;
    internal static ushort SPRM_PICLOCATION;
    internal static ushort SPRM_IBSTRMARK;
    internal static ushort SPRM_DTTMRMARK;
    internal static ushort SPRM_FDATA;
    internal static ushort SPRM_SYMBOL;
    internal static ushort SPRM_FOLE2;
    internal static ushort SPRM_HIGHLIGHT;
    internal static ushort SPRM_OBJLOCATION;
    internal static ushort SPRM_ISTD;
    internal static ushort SPRM_FBOLD;
    internal static ushort SPRM_FBOLDBI;
    internal static ushort SPRM_FITALIC;
    internal static ushort SPRM_FITALICBI;
    internal static ushort SPRM_FSTRIKE;
    internal static ushort SPRM_FOUTLINE;
    internal static ushort SPRM_FSHADOW;
    internal static ushort SPRM_FSMALLCAPS;
    internal static ushort SPRM_FCAPS;
    internal static ushort SPRM_FVANISH;
    internal static ushort SPRM_KUL;
    internal static ushort SPRM_DXASPACE;
    internal static ushort SPRM_LID;
    internal static ushort SPRM_ICO;
    internal static ushort SPRM_ICO24;
    internal static ushort SPRM_HPS;
    internal static ushort SPRM_HPSPOS;
    internal static ushort SPRM_HPSBIDI;
    internal static ushort SPRM_ISS;
    internal static ushort SPRM_HPSKERN;
    internal static ushort SPRM_YSRI;
    internal static ushort SPRM_RGFTCASCII;
    internal static ushort SPRM_RGFTCFAREAST;
    internal static ushort SPRM_RGFTCNOTFAREAST;
    internal static ushort SPRM_FTCBI;
    internal static ushort SPRM_CHARSCALE;
    internal static ushort SPRM_FDSTRIKE;
    internal static ushort SPRM_FIMPRINT;
    internal static ushort SPRM_FSPEC;
    internal static ushort SPRM_FOBJ;
    internal static ushort SPRM_PROPRMARK;
    internal static ushort SPRM_FEMBOSS;
    internal static ushort SPRM_SFXTEXT;
    internal static ushort SPRM_FBIDI;
    internal static ushort SPRM_DISPFLDRMARK;
    internal static ushort SPRM_IBSTRMARKDEL;
    internal static ushort SPRM_DTTMRMARKDEL;
    internal static ushort SPRM_BRC80;
    internal static ushort SPRM_BRC;
    internal static ushort SPRM_SHD80;
    internal static ushort SPRM_SHD;
    internal static ushort SPRM_IDSIRMARKDEL;
    internal static ushort SPRM_CPG;
    internal static ushort SPRM_NONFELID;
    internal static ushort SPRM_FELID;
    internal static ushort SPRM_IDCTHINT;
    internal static ushort SPRM_NOPROOF;
    internal static ushort SPRM_CVUL;
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.DeviceInfo : object {
    private AutoFit m_autoFit;
    private bool m_expandToggles;
    private bool m_fixedPageWidth;
    private bool m_omitHyperlinks;
    private bool m_omitDrillthroughs;
    private NameValueCollection m_rawDeviceInfo;
    internal AutoFit AutoFit { get; internal set; }
    internal bool ExpandToggles { get; }
    internal bool FixedPageWidth { get; }
    internal bool OmitHyperlinks { get; }
    internal bool OmitDrillthroughs { get; }
    internal NameValueCollection RawDeviceInfo { get; }
    internal DeviceInfo(NameValueCollection deviceInfo);
    internal AutoFit get_AutoFit();
    internal void set_AutoFit(AutoFit value);
    internal bool get_ExpandToggles();
    internal bool get_FixedPageWidth();
    internal bool get_OmitHyperlinks();
    internal bool get_OmitDrillthroughs();
    internal NameValueCollection get_RawDeviceInfo();
    private static bool ParseBool(string boolValue, bool defaultValue);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.DocumentProperties : object {
    internal static Byte[] Buffer;
    private static DocumentProperties();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherBoolProperty : EscherSimpleProperty {
    internal bool True { get; }
    internal bool False { get; }
    internal EscherBoolProperty(ushort propertyNumber, int value_Renamed);
    internal virtual bool get_True();
    internal virtual bool get_False();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherBSERecord : EscherRecord {
    internal static string RECORD_DESCRIPTION;
    internal static byte BT_ERROR;
    internal static byte BT_UNKNOWN;
    internal static byte BT_EMF;
    internal static byte BT_WMF;
    internal static byte BT_PICT;
    internal static byte BT_JPEG;
    internal static byte BT_PNG;
    internal static byte BT_DIB;
    internal static short RECORD_ID;
    private byte field_1_blipTypeWin32;
    private byte field_2_blipTypeMacOS;
    private Byte[] field_3_uid;
    private ushort field_4_tag;
    private int field_5_size;
    private int field_6_ref;
    private int field_7_offset;
    private byte field_8_usage;
    private byte field_9_name;
    private byte field_10_unused2;
    private byte field_11_unused3;
    private EscherBSESubRecord field_12_sub;
    private bool _hideSub;
    internal int RecordSize { get; }
    internal string RecordName { get; }
    internal byte BlipTypeWin32 { get; internal set; }
    internal byte BlipTypeMacOS { get; internal set; }
    internal Byte[] Uid { get; internal set; }
    internal ushort Tag { get; internal set; }
    internal int Size { get; internal set; }
    internal int Ref { get; internal set; }
    internal int Offset { get; internal set; }
    internal byte Usage { get; internal set; }
    internal byte Name { get; internal set; }
    internal byte Unused2 { get; internal set; }
    internal byte Unused3 { get; internal set; }
    internal EscherBSESubRecord SubRecord { get; internal set; }
    private static EscherBSERecord();
    internal virtual int get_RecordSize();
    internal virtual string get_RecordName();
    internal virtual byte get_BlipTypeWin32();
    internal virtual void set_BlipTypeWin32(byte value);
    internal virtual byte get_BlipTypeMacOS();
    internal virtual void set_BlipTypeMacOS(byte value);
    internal virtual Byte[] get_Uid();
    internal virtual void set_Uid(Byte[] value);
    internal virtual ushort get_Tag();
    internal virtual void set_Tag(ushort value);
    internal virtual int get_Size();
    internal virtual void set_Size(int value);
    internal virtual int get_Ref();
    internal virtual void set_Ref(int value);
    internal virtual int get_Offset();
    internal virtual void set_Offset(int value);
    internal virtual byte get_Usage();
    internal virtual void set_Usage(byte value);
    internal virtual byte get_Name();
    internal virtual void set_Name(byte value);
    internal virtual byte get_Unused2();
    internal virtual void set_Unused2(byte value);
    internal virtual byte get_Unused3();
    internal virtual void set_Unused3(byte value);
    internal virtual EscherBSESubRecord get_SubRecord();
    internal virtual void set_SubRecord(EscherBSESubRecord value);
    internal virtual int Serialize(BinaryWriter dataWriter);
    internal virtual string GetBlipType(byte b);
    internal virtual void hideSub();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherBSESubRecord : EscherRecord {
    internal static int MD4HASH_LENGTH;
    private Byte[] mHash;
    private byte mBoundary;
    private Byte[] mImage;
    internal int RecordSize { get; }
    internal string RecordName { get; }
    internal Byte[] Hash { get; internal set; }
    internal Byte[] Image { get; internal set; }
    internal virtual int get_RecordSize();
    internal virtual string get_RecordName();
    internal virtual Byte[] get_Hash();
    internal virtual void set_Hash(Byte[] value);
    internal virtual Byte[] get_Image();
    internal virtual void set_Image(Byte[] value);
    internal virtual int Serialize(BinaryWriter dataWriter);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherClientAnchorRecord : EscherRecord {
    internal static string RECORD_DESCRIPTION;
    internal static ushort RECORD_ID;
    private ushort field_1_flag;
    private ushort field_2_col1;
    private ushort field_3_dx1;
    private ushort field_4_row1;
    private ushort field_5_dy1;
    private ushort field_6_col2;
    private ushort field_7_dx2;
    private ushort field_8_row2;
    private ushort field_9_dy2;
    private Byte[] remainingData;
    private bool shortRecord;
    internal int RecordSize { get; }
    internal string RecordName { get; }
    internal ushort Flag { get; internal set; }
    internal ushort Col1 { get; internal set; }
    internal ushort Dx1 { get; internal set; }
    internal ushort Row1 { get; internal set; }
    internal ushort Dy1 { get; internal set; }
    internal ushort Col2 { get; internal set; }
    internal ushort Dx2 { get; internal set; }
    internal ushort Row2 { get; internal set; }
    internal ushort Dy2 { get; internal set; }
    internal Byte[] RemainingData { get; internal set; }
    unknown bool ShortRecord {internal set; }
    private static EscherClientAnchorRecord();
    internal virtual int get_RecordSize();
    internal virtual string get_RecordName();
    internal virtual ushort get_Flag();
    internal virtual void set_Flag(ushort value);
    internal virtual ushort get_Col1();
    internal virtual void set_Col1(ushort value);
    internal virtual ushort get_Dx1();
    internal virtual void set_Dx1(ushort value);
    internal virtual ushort get_Row1();
    internal virtual void set_Row1(ushort value);
    internal virtual ushort get_Dy1();
    internal virtual void set_Dy1(ushort value);
    internal virtual ushort get_Col2();
    internal virtual void set_Col2(ushort value);
    internal virtual ushort get_Dx2();
    internal virtual void set_Dx2(ushort value);
    internal virtual ushort get_Row2();
    internal virtual void set_Row2(ushort value);
    internal virtual ushort get_Dy2();
    internal virtual void set_Dy2(ushort value);
    internal virtual Byte[] get_RemainingData();
    internal virtual void set_RemainingData(Byte[] value);
    internal virtual void set_ShortRecord(bool value);
    internal virtual int Serialize(BinaryWriter dataWriter);
    internal virtual ushort GetRecordId();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherComplexProperty : EscherProperty {
    internal Byte[] complexData;
    internal Byte[] ComplexData { get; internal set; }
    internal int PropertySize { get; }
    internal EscherComplexProperty(ushort id, Byte[] complexData);
    internal EscherComplexProperty(ushort propertyNumber, bool isBlipId, Byte[] complexData);
    internal virtual Byte[] get_ComplexData();
    internal virtual void set_ComplexData(Byte[] value);
    internal virtual int get_PropertySize();
    internal virtual int serializeSimplePart(BinaryWriter dataWriter);
    internal virtual int serializeComplexPart(BinaryWriter dataWriter);
    public virtual int GetHashCode();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherContainerRecord : EscherRecord {
    internal static ushort DGG_CONTAINER;
    internal static ushort BSTORE_CONTAINER;
    internal static ushort DG_CONTAINER;
    internal static ushort SPGR_CONTAINER;
    internal static ushort SP_CONTAINER;
    internal static ushort SOLVER_CONTAINER;
    private IList childRecords;
    internal int RecordSize { get; }
    internal IList ChildRecords { get; internal set; }
    internal string RecordName { get; }
    internal virtual int get_RecordSize();
    internal virtual IList get_ChildRecords();
    internal virtual void set_ChildRecords(IList value);
    internal virtual string get_RecordName();
    internal virtual int Serialize(BinaryWriter dataWriter);
    internal virtual void Display(StreamWriter w, int indent);
    internal virtual void addChildRecord(EscherRecord record);
    internal virtual EscherRecord getChildById(ushort recordId);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherOptRecord : EscherRecord {
    internal static string RECORD_DESCRIPTION;
    internal static ushort RECORD_ID;
    private IList m_properties;
    internal int RecordSize { get; }
    internal string RecordName { get; }
    private int PropertiesSize { get; }
    internal IList EscherProperties { get; }
    private static EscherOptRecord();
    internal virtual int get_RecordSize();
    internal virtual string get_RecordName();
    private int get_PropertiesSize();
    internal virtual IList get_EscherProperties();
    internal virtual int Serialize(BinaryWriter dataWriter);
    internal virtual ushort getOptions();
    internal virtual EscherProperty getEscherProperty(int index);
    internal virtual EscherProperty getEscherPropertyByID(int id);
    internal virtual void addEscherProperty(EscherProperty prop);
    internal virtual void sortProperties();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherProperties : object {
    internal static short TRANSFORM__ROTATION;
    internal static short PROTECTION__LOCKROTATION;
    internal static short PROTECTION__LOCKASPECTRATIO;
    internal static short PROTECTION__LOCKPOSITION;
    internal static short PROTECTION__LOCKAGAINSTSELECT;
    internal static short PROTECTION__LOCKCROPPING;
    internal static short PROTECTION__LOCKVERTICES;
    internal static short PROTECTION__LOCKTEXT;
    internal static short PROTECTION__LOCKADJUSTHANDLES;
    internal static short PROTECTION__LOCKAGAINSTGROUPING;
    internal static short TEXT__TEXTID;
    internal static short TEXT__TEXTLEFT;
    internal static short TEXT__TEXTTOP;
    internal static short TEXT__TEXTRIGHT;
    internal static short TEXT__TEXTBOTTOM;
    internal static short TEXT__WRAPTEXT;
    internal static short TEXT__SCALETEXT;
    internal static short TEXT__ANCHORTEXT;
    internal static short TEXT__TEXTFLOW;
    internal static short TEXT__FONTROTATION;
    internal static short TEXT__IDOFNEXTSHAPE;
    internal static short TEXT__BIDIR;
    internal static short TEXT__SINGLECLICKSELECTS;
    internal static short TEXT__USEHOSTMARGINS;
    internal static short TEXT__ROTATETEXTWITHSHAPE;
    internal static short TEXT__SIZESHAPETOFITTEXT;
    internal static short TEXT__SIZE_TEXT_TO_FIT_SHAPE;
    internal static short GEOTEXT__UNICODE;
    internal static short GEOTEXT__RTFTEXT;
    internal static short GEOTEXT__ALIGNMENTONCURVE;
    internal static short GEOTEXT__DEFAULTPOINTSIZE;
    internal static short GEOTEXT__TEXTSPACING;
    internal static short GEOTEXT__FONTFAMILYNAME;
    internal static short GEOTEXT__REVERSEROWORDER;
    internal static short GEOTEXT__HASTEXTEFFECT;
    internal static short GEOTEXT__ROTATECHARACTERS;
    internal static short GEOTEXT__KERNCHARACTERS;
    internal static short GEOTEXT__TIGHTORTRACK;
    internal static short GEOTEXT__STRETCHTOFITSHAPE;
    internal static short GEOTEXT__CHARBOUNDINGBOX;
    internal static short GEOTEXT__SCALETEXTONPATH;
    internal static short GEOTEXT__STRETCHCHARHEIGHT;
    internal static short GEOTEXT__NOMEASUREALONGPATH;
    internal static short GEOTEXT__BOLDFONT;
    internal static short GEOTEXT__ITALICFONT;
    internal static short GEOTEXT__UNDERLINEFONT;
    internal static short GEOTEXT__SHADOWFONT;
    internal static short GEOTEXT__SMALLCAPSFONT;
    internal static short GEOTEXT__STRIKETHROUGHFONT;
    internal static short BLIP__CROPFROMTOP;
    internal static short BLIP__CROPFROMBOTTOM;
    internal static short BLIP__CROPFROMLEFT;
    internal static short BLIP__CROPFROMRIGHT;
    internal static short BLIP__BLIPTODISPLAY;
    internal static short BLIP__BLIPFILENAME;
    internal static short BLIP__BLIPFLAGS;
    internal static short BLIP__TRANSPARENTCOLOR;
    internal static short BLIP__CONTRASTSETTING;
    internal static short BLIP__BRIGHTNESSSETTING;
    internal static short BLIP__GAMMA;
    internal static short BLIP__PICTUREID;
    internal static short BLIP__DOUBLEMOD;
    internal static short BLIP__PICTUREFILLMOD;
    internal static short BLIP__PICTURELINE;
    internal static short BLIP__PRINTBLIP;
    internal static short BLIP__PRINTBLIPFILENAME;
    internal static short BLIP__PRINTFLAGS;
    internal static short BLIP__NOHITTESTPICTURE;
    internal static short BLIP__PICTUREGRAY;
    internal static short BLIP__PICTUREBILEVEL;
    internal static short BLIP__PICTUREACTIVE;
    internal static short GEOMETRY__LEFT;
    internal static short GEOMETRY__TOP;
    internal static short GEOMETRY__RIGHT;
    internal static short GEOMETRY__BOTTOM;
    internal static short GEOMETRY__SHAPEPATH;
    internal static short GEOMETRY__VERTICES;
    internal static short GEOMETRY__SEGMENTINFO;
    internal static short GEOMETRY__ADJUSTVALUE;
    internal static short GEOMETRY__ADJUST2VALUE;
    internal static short GEOMETRY__ADJUST3VALUE;
    internal static short GEOMETRY__ADJUST4VALUE;
    internal static short GEOMETRY__ADJUST5VALUE;
    internal static short GEOMETRY__ADJUST6VALUE;
    internal static short GEOMETRY__ADJUST7VALUE;
    internal static short GEOMETRY__ADJUST8VALUE;
    internal static short GEOMETRY__ADJUST9VALUE;
    internal static short GEOMETRY__ADJUST10VALUE;
    internal static short GEOMETRY__SHADOWok;
    internal static short GEOMETRY__3DOK;
    internal static short GEOMETRY__LINEOK;
    internal static short GEOMETRY__GEOTEXTOK;
    internal static short GEOMETRY__FILLSHADESHAPEOK;
    internal static short GEOMETRY__FILLOK;
    internal static short FILL__FILLTYPE;
    internal static short FILL__FILLCOLOR;
    internal static short FILL__FILLOPACITY;
    internal static short FILL__FILLBACKCOLOR;
    internal static short FILL__BACKOPACITY;
    internal static short FILL__CRMOD;
    internal static short FILL__PATTERNTEXTURE;
    internal static short FILL__BLIPFILENAME;
    internal static short FILL__BLIPFLAGS;
    internal static short FILL__WIDTH;
    internal static short FILL__HEIGHT;
    internal static short FILL__ANGLE;
    internal static short FILL__FOCUS;
    internal static short FILL__TOLEFT;
    internal static short FILL__TOTOP;
    internal static short FILL__TORIGHT;
    internal static short FILL__TOBOTTOM;
    internal static short FILL__RECTLEFT;
    internal static short FILL__RECTTOP;
    internal static short FILL__RECTRIGHT;
    internal static short FILL__RECTBOTTOM;
    internal static short FILL__DZTYPE;
    internal static short FILL__SHADEPRESET;
    internal static short FILL__SHADECOLORS;
    internal static short FILL__ORIGINX;
    internal static short FILL__ORIGINY;
    internal static short FILL__SHAPEORIGINX;
    internal static short FILL__SHAPEORIGINY;
    internal static short FILL__SHADETYPE;
    internal static short FILL__FILLED;
    internal static short FILL__HITTESTFILL;
    internal static short FILL__SHAPE;
    internal static short FILL__USERECT;
    internal static short FILL__NOFILLHITTEST;
    internal static short LINESTYLE__COLOR;
    internal static short LINESTYLE__OPACITY;
    internal static short LINESTYLE__BACKCOLOR;
    internal static short LINESTYLE__CRMOD;
    internal static short LINESTYLE__LINETYPE;
    internal static short LINESTYLE__FILLBLIP;
    internal static short LINESTYLE__FILLBLIPNAME;
    internal static short LINESTYLE__FILLBLIPFLAGS;
    internal static short LINESTYLE__FILLWIDTH;
    internal static short LINESTYLE__FILLHEIGHT;
    internal static short LINESTYLE__FILLDZTYPE;
    internal static short LINESTYLE__LINEWIDTH;
    internal static short LINESTYLE__LINEMITERLIMIT;
    internal static short LINESTYLE__LINESTYLE;
    internal static short LINESTYLE__LINEDASHING;
    internal static short LINESTYLE__LINEDASHSTYLE;
    internal static short LINESTYLE__LINESTARTARROWHEAD;
    internal static short LINESTYLE__LINEENDARROWHEAD;
    internal static short LINESTYLE__LINESTARTARROWWIDTH;
    internal static short LINESTYLE__LINEESTARTARROWLENGTH;
    internal static short LINESTYLE__LINEENDARROWWIDTH;
    internal static short LINESTYLE__LINEENDARROWLENGTH;
    internal static short LINESTYLE__LINEJOINSTYLE;
    internal static short LINESTYLE__LINEENDCAPSTYLE;
    internal static short LINESTYLE__ARROWHEADSOK;
    internal static short LINESTYLE__ANYLINE;
    internal static short LINESTYLE__HITLINETEST;
    internal static short LINESTYLE__LINEFILLSHAPE;
    internal static short LINESTYLE__NOLINEDRAWDASH;
    internal static short SHADOWSTYLE__TYPE;
    internal static short SHADOWSTYLE__COLOR;
    internal static short SHADOWSTYLE__HIGHLIGHT;
    internal static short SHADOWSTYLE__CRMOD;
    internal static short SHADOWSTYLE__OPACITY;
    internal static short SHADOWSTYLE__OFFSETX;
    internal static short SHADOWSTYLE__OFFSETY;
    internal static short SHADOWSTYLE__SECONDOFFSETX;
    internal static short SHADOWSTYLE__SECONDOFFSETY;
    internal static short SHADOWSTYLE__SCALEXTOX;
    internal static short SHADOWSTYLE__SCALEYTOX;
    internal static short SHADOWSTYLE__SCALEXTOY;
    internal static short SHADOWSTYLE__SCALEYTOY;
    internal static short SHADOWSTYLE__PERSPECTIVEX;
    internal static short SHADOWSTYLE__PERSPECTIVEY;
    internal static short SHADOWSTYLE__WEIGHT;
    internal static short SHADOWSTYLE__ORIGINX;
    internal static short SHADOWSTYLE__ORIGINY;
    internal static short SHADOWSTYLE__SHADOW;
    internal static short SHADOWSTYLE__SHADOWOBSURED;
    internal static short PERSPECTIVE__TYPE;
    internal static short PERSPECTIVE__OFFSETX;
    internal static short PERSPECTIVE__OFFSETY;
    internal static short PERSPECTIVE__SCALEXTOX;
    internal static short PERSPECTIVE__SCALEYTOX;
    internal static short PERSPECTIVE__SCALEXTOY;
    internal static short PERSPECTIVE__SCALEYTOY;
    internal static short PERSPECTIVE__PERSPECTIVEX;
    internal static short PERSPECTIVE__PERSPECTIVEY;
    internal static short PERSPECTIVE__WEIGHT;
    internal static short PERSPECTIVE__ORIGINX;
    internal static short PERSPECTIVE__ORIGINY;
    internal static short PERSPECTIVE__PERSPECTIVEON;
    internal static short THREED__SPECULARAMOUNT;
    internal static short THREED__DIFFUSEAMOUNT;
    internal static short THREED__SHININESS;
    internal static short THREED__EDGETHICKNESS;
    internal static short THREED__EXTRUDEFORWARD;
    internal static short THREED__EXTRUDEBACKWARD;
    internal static short THREED__EXTRUDEPLANE;
    internal static short THREED__EXTRUSIONCOLOR;
    internal static short THREED__CRMOD;
    internal static short THREED__3DEFFECT;
    internal static short THREED__METALLIC;
    internal static short THREED__USEEXTRUSIONCOLOR;
    internal static short THREED__LIGHTFACE;
    internal static short THREEDSTYLE__YROTATIONANGLE;
    internal static short THREEDSTYLE__XROTATIONANGLE;
    internal static short THREEDSTYLE__ROTATIONAXISX;
    internal static short THREEDSTYLE__ROTATIONAXISY;
    internal static short THREEDSTYLE__ROTATIONAXISZ;
    internal static short THREEDSTYLE__ROTATIONANGLE;
    internal static short THREEDSTYLE__ROTATIONCENTERX;
    internal static short THREEDSTYLE__ROTATIONCENTERY;
    internal static short THREEDSTYLE__ROTATIONCENTERZ;
    internal static short THREEDSTYLE__RENDERMODE;
    internal static short THREEDSTYLE__TOLERANCE;
    internal static short THREEDSTYLE__XVIEWPOINT;
    internal static short THREEDSTYLE__YVIEWPOINT;
    internal static short THREEDSTYLE__ZVIEWPOINT;
    internal static short THREEDSTYLE__ORIGINX;
    internal static short THREEDSTYLE__ORIGINY;
    internal static short THREEDSTYLE__SKEWANGLE;
    internal static short THREEDSTYLE__SKEWAMOUNT;
    internal static short THREEDSTYLE__AMBIENTINTENSITY;
    internal static short THREEDSTYLE__KEYX;
    internal static short THREEDSTYLE__KEYY;
    internal static short THREEDSTYLE__KEYZ;
    internal static short THREEDSTYLE__KEYINTENSITY;
    internal static short THREEDSTYLE__FILLX;
    internal static short THREEDSTYLE__FILLY;
    internal static short THREEDSTYLE__FILLZ;
    internal static short THREEDSTYLE__FILLINTENSITY;
    internal static short THREEDSTYLE__CONSTRAINROTATION;
    internal static short THREEDSTYLE__ROTATIONCENTERAUTO;
    internal static short THREEDSTYLE__PARALLEL;
    internal static short THREEDSTYLE__KEYHARSH;
    internal static short THREEDSTYLE__FILLHARSH;
    internal static short SHAPE__MASTER;
    internal static short SHAPE__CONNECTORSTYLE;
    internal static short SHAPE__BLACKANDWHITESETTINGS;
    internal static short SHAPE__WMODEPUREBW;
    internal static short SHAPE__WMODEBW;
    internal static short SHAPE__OLEICON;
    internal static short SHAPE__PREFERRELATIVERESIZE;
    internal static short SHAPE__LOCKSHAPETYPE;
    internal static short SHAPE__DELETEATTACHEDOBJECT;
    internal static short SHAPE__BACKGROUNDSHAPE;
    internal static short CALLOUT__CALLOUTTYPE;
    internal static short CALLOUT__XYCALLOUTGAP;
    internal static short CALLOUT__CALLOUTANGLE;
    internal static short CALLOUT__CALLOUTDROPTYPE;
    internal static short CALLOUT__CALLOUTDROPSPECIFIED;
    internal static short CALLOUT__CALLOUTLENGTHSPECIFIED;
    internal static short CALLOUT__ISCALLOUT;
    internal static short CALLOUT__CALLOUTACCENTBAR;
    internal static short CALLOUT__CALLOUTTEXTBORDER;
    internal static short CALLOUT__CALLOUTMINUSX;
    internal static short CALLOUT__CALLOUTMINUSY;
    internal static short CALLOUT__DROPAUTO;
    internal static short CALLOUT__LENGTHSPECIFIED;
    internal static short GROUPSHAPE__SHAPENAME;
    internal static short GROUPSHAPE__DESCRIPTION;
    internal static short GROUPSHAPE__HYPERLINK;
    internal static short GROUPSHAPE__WRAPPOLYGONVERTICES;
    internal static short GROUPSHAPE__WRAPDISTLEFT;
    internal static short GROUPSHAPE__WRAPDISTTOP;
    internal static short GROUPSHAPE__WRAPDISTRIGHT;
    internal static short GROUPSHAPE__WRAPDISTBOTTOM;
    internal static short GROUPSHAPE__REGROUPID;
    internal static short GROUPSHAPE__EDITEDWRAP;
    internal static short GROUPSHAPE__BEHINDDOCUMENT;
    internal static short GROUPSHAPE__ONDBLCLICKNOTIFY;
    internal static short GROUPSHAPE__ISBUTTON;
    internal static short GROUPSHAPE__1DADJUSTMENT;
    internal static short GROUPSHAPE__HIDDEN;
    internal static short GROUPSHAPE__PRINT;
    private static IDictionary m_properties;
    private static void InitProps();
    private static void addProp(int s, EscherPropertyMetaData data);
    private static EscherPropertyMetaData data(string propName, byte type);
    private static EscherPropertyMetaData data(string propName);
    internal static string GetPropertyName(ushort propertyId);
    internal static byte GetPropertyType(short propertyId);
}
internal abstract class Microsoft.ReportingServices.Rendering.WordRenderer.EscherProperty : object {
    private ushort id;
    internal ushort Id { get; }
    internal ushort PropertyNumber { get; }
    internal bool Complex { get; }
    internal bool BlipId { get; }
    internal string Name { get; }
    internal int PropertySize { get; }
    internal EscherProperty(ushort id);
    internal EscherProperty(ushort propertyNumber, bool isComplex, bool isBlipId);
    internal virtual ushort get_Id();
    internal virtual ushort get_PropertyNumber();
    internal virtual bool get_Complex();
    internal virtual bool get_BlipId();
    internal virtual string get_Name();
    internal virtual int get_PropertySize();
    internal abstract virtual int serializeSimplePart(BinaryWriter dataWriter);
    internal abstract virtual int serializeComplexPart(BinaryWriter dataWriter);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherPropertyMetaData : object {
    internal static byte TYPE_UNKNOWN;
    internal static byte TYPE_BOOLEAN;
    internal static byte TYPE_RGB;
    internal static byte TYPE_SHAPEPATH;
    internal static byte TYPE_SIMPLE;
    internal static byte TYPE_ARRAY;
    private string description;
    private byte type;
    internal string Description { get; }
    internal byte Type { get; }
    internal EscherPropertyMetaData(string description);
    internal EscherPropertyMetaData(string description, byte type);
    private static EscherPropertyMetaData();
    internal virtual string get_Description();
    internal virtual byte get_Type();
}
internal abstract class Microsoft.ReportingServices.Rendering.WordRenderer.EscherRecord : object {
    internal static int HEADER_SIZE;
    private ushort options;
    private ushort recordId;
    internal bool ContainerRecord { get; }
    internal int RecordSize { get; }
    internal IList ChildRecords { get; internal set; }
    internal string RecordName { get; }
    internal short Instance { get; }
    internal virtual bool get_ContainerRecord();
    internal abstract virtual int get_RecordSize();
    internal virtual IList get_ChildRecords();
    internal virtual void set_ChildRecords(IList value);
    internal abstract virtual string get_RecordName();
    internal virtual short get_Instance();
    protected internal virtual int readHeader(Byte[] data, int offset);
    internal virtual ushort getOptions();
    internal virtual void setOptions(ushort options);
    internal abstract virtual int Serialize(BinaryWriter dataWriter);
    internal virtual ushort GetRecordId();
    internal virtual void SetRecordId(ushort recordId);
    public virtual object Clone();
    internal virtual EscherRecord GetChild(int index);
    internal virtual void Display(StreamWriter w, int indent);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherSimpleProperty : EscherProperty {
    protected internal int m_propertyValue;
    internal int PropertyValue { get; internal set; }
    internal EscherSimpleProperty(ushort id, int propertyValue);
    internal EscherSimpleProperty(ushort propertyNumber, bool isComplex, bool isBlipId, int propertyValue);
    internal virtual int get_PropertyValue();
    internal virtual void set_PropertyValue(int value);
    internal virtual int serializeSimplePart(BinaryWriter dataWriter);
    internal virtual int serializeComplexPart(BinaryWriter dataWriter);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.EscherSpRecord : EscherRecord {
    internal static string RECORD_DESCRIPTION;
    internal static int FLAG_GROUP;
    internal static int FLAG_CHILD;
    internal static int FLAG_PATRIARCH;
    internal static int FLAG_DELETED;
    internal static int FLAG_OLESHAPE;
    internal static int FLAG_HAVEMASTER;
    internal static int FLAG_FLIPHORIZ;
    internal static int FLAG_FLIPVERT;
    internal static int FLAG_CONNECTOR;
    internal static int FLAG_HAVEANCHOR;
    internal static int FLAG_BACKGROUND;
    internal static int FLAG_HASSHAPETYPE;
    internal static ushort RECORD_ID;
    private int field_1_shapeId;
    private int field_2_flags;
    internal int RecordSize { get; }
    internal string RecordName { get; }
    internal int ShapeId { get; internal set; }
    internal int Flags { get; internal set; }
    private static EscherSpRecord();
    internal virtual int get_RecordSize();
    internal virtual string get_RecordName();
    internal virtual int get_ShapeId();
    internal virtual void set_ShapeId(int value);
    internal virtual int get_Flags();
    internal virtual void set_Flags(int value);
    internal virtual int Serialize(BinaryWriter dataWriter);
    internal virtual ushort GetRecordId();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.Ffn : object {
    private int m_cbFfnM1;
    private byte m_info;
    private ushort m_wWeight;
    private byte m_chs;
    private byte m_ixchSzAlt;
    private Byte[] m_panose;
    private Byte[] m_fontSig;
    private Char[] m_xszFfn;
    private int m_xszFfnLength;
    internal Ffn(int size, byte info, short wWeight, byte chs, byte ixchSzAlt, Byte[] panose, Byte[] fontSig, Char[] xszFfn);
    internal virtual Byte[] toByteArray();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.FIBFields : object {
    internal static int STSHFORIG;
    internal static int STSHF;
    internal static int PLCFFNDREF;
    internal static int PLCFFNDTXT;
    internal static int PLCFANDREF;
    internal static int PLCFANDTXT;
    internal static int PLCFSED;
    internal static int PLCFPAD;
    internal static int PLCFPHE;
    internal static int STTBGLSY;
    internal static int PLCFGLSY;
    internal static int PLCFHDD;
    internal static int PLCFBTECHPX;
    internal static int PLCFBTEPAPX;
    internal static int PLCFSEA;
    internal static int STTBFFFN;
    internal static int PLCFFLDMOM;
    internal static int PLCFFLDHDR;
    internal static int PLCFFLDFTN;
    internal static int PLCFFLDATN;
    internal static int PLCFFLDMCR;
    internal static int STTBFBKMK;
    internal static int PLCFBKF;
    internal static int PLCFBKL;
    internal static int CMDS;
    internal static int PLCMCR;
    internal static int STTBFMCR;
    internal static int PRDRVR;
    internal static int PRENVPORT;
    internal static int PRENVLAND;
    internal static int WSS;
    internal static int DOP;
    internal static int STTBFASSOC;
    internal static int CLX;
    internal static int PLCFPGDFTN;
    internal static int AUTOSAVESOURCE;
    internal static int GRPXSTATNOWNERS;
    internal static int STTBFATNBKMK;
    internal static int PLCFDOAMOM;
    internal static int PLCDOAHDR;
    internal static int PLCSPAMOM;
    internal static int PLCSPAHDR;
    internal static int PLCFATNBKF;
    internal static int PLCFATNBKL;
    internal static int PMS;
    internal static int FORMFLDSTTBS;
    internal static int PLCFENDREF;
    internal static int PLCFENDTXT;
    internal static int PLCFFLDEDN;
    internal static int PLCFPGDEDN;
    internal static int DGGINFO;
    internal static int STTBFRMARK;
    internal static int STTBCAPTION;
    internal static int STTBAUTOCAPTION;
    internal static int PLCFWKB;
    internal static int PLCFSPL;
    internal static int PLCFTXBXTXT;
    internal static int PLCFFLDTXBX;
    internal static int PLCFHDRTXBXTXT;
    internal static int PLCFFLDHDRTXBX;
    internal static int STWUSER;
    internal static int STTBTTMBD;
    internal static int UNUSED;
    internal static int PGDMOTHER;
    internal static int BKDMOTHER;
    internal static int PGDFTN;
    internal static int BKDFTN;
    internal static int PGDEDN;
    internal static int BKDEDN;
    internal static int STTBFINTFLD;
    internal static int ROUTESLIP;
    internal static int STTBSAVEDBY;
    internal static int STTBFNM;
    internal static int PLCFLST;
    internal static int PLFLFO;
    internal static int PLCFTXBXBKD;
    internal static int PLCFTXBXHDRBKD;
    internal static int DOCUNDO;
    internal static int RGBUSE;
    internal static int USP;
    internal static int USKF;
    internal static int PLCUPCRGBUSE;
    internal static int PLCUPCUSP;
    internal static int STTBGLSYSTYLE;
    internal static int PLGOSL;
    internal static int PLCOCX;
    internal static int PLCFBTELVC;
    internal static int MODIFIED;
    internal static int PLCFLVC;
    internal static int PLCASUMY;
    internal static int PLCFGRAM;
    internal static int STTBLISTNAMES;
    internal static int STTBFUSSR;
    internal static int PLCFTCH;
    internal static int RMDFTHREADING;
    internal static int MID;
    internal static int STTBGTPLC;
    internal static int MSOENVELOPE;
    internal static int PLCLAD;
    internal static int RGDOFR;
    internal static int PLCOSL;
    internal static int PLCFCOOKIEOLD;
    internal static int PLCFPGP;
    internal static int PLCFUIM;
    internal static int PLFGUIDUIM;
    internal static int ATRDEXTRA;
    internal static int PLRSID;
    internal static int STTBFBKMKFACTOID;
    internal static int PLCFBKDFACTOID;
    internal static int PLCFCOOKIE;
    internal static int PLCFBKLFACTOID;
    internal static int FACTOIDDATA;
    internal static int DOCUNDO1;
    internal static int STTBFBKMKFCC;
    internal static int PLCFBKFFCC;
    internal static int PLCBKLFCC;
    internal static int STTBFBKMKBPREPAIRS;
    internal static int PLCFBKBPREPAIRS;
    internal static int PLCFBKLBPREPAIRS;
    internal static int PMSNEW;
    internal static int ODSO;
    internal static int PLCFPMIOLDXP;
    internal static int PLCFPMINEWXP;
    internal static int PLCFPMIMIXEDXP;
    internal static int ENCRYPTEDPROPS;
    internal static int PLCFFACTOID;
    internal static int PLCFLVCOLDXP;
    internal static int PLCFLVCNEWXP;
    internal static int PLCFLVCMIXEDXP;
    internal static int HPLXSDR;
    internal static int STTBFBKMKSDT;
    internal static int PLCFBKFSDT;
    internal static int PLCFBKLSDT;
    internal static int CUSTOMXFORM;
    internal static int STTBFBKMKPROT;
    internal static int PLCFBKFPROT;
    internal static int PLCFBKLPROT;
    internal static int STTBPROTUSER;
    internal static int PLCFTPC;
    internal static int PLCFPMIOLD;
    internal static int PLCFPMIOLDINLINE;
    internal static int PLCFPMINEW;
    internal static int PLCFPMINEWINLINE;
    internal static int PLCFLVCOLD;
    internal static int PLCFLVCOLDINLINE;
    internal static int PLCFLVCNEW;
    internal static int PLCFLVCNEWINLINE;
    internal static int AFD;
}
internal abstract class Microsoft.ReportingServices.Rendering.WordRenderer.FieldInfo : object {
    internal static byte StartCode;
    internal static byte MiddleCode;
    internal static byte EndCode;
    protected int m_offset;
    protected Location m_location;
    internal int Offset { get; }
    internal Byte[] Start { get; }
    internal Byte[] Middle { get; }
    internal Byte[] End { get; }
    internal FieldInfo(int offset, Location location);
    internal int get_Offset();
    internal void WriteData(BinaryWriter dataWriter);
    internal abstract virtual Byte[] get_Start();
    internal abstract virtual Byte[] get_Middle();
    internal abstract virtual Byte[] get_End();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.FieldsTable : object {
    internal static byte StartCode;
    internal static byte MiddleCode;
    internal static byte EndCode;
    private List`1<FieldInfo> m_offsets;
    internal int Size { get; }
    internal void Add(FieldInfo info);
    internal int get_Size();
    internal void WriteTo(BinaryWriter dataWriter, int startCP, int endCP);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.FileInformationBlock : object {
    internal static Byte[] StartBuffer;
    internal static Byte[] EndBuffer;
    internal static int FieldsSize;
    private static FileInformationBlock();
}
internal abstract class Microsoft.ReportingServices.Rendering.WordRenderer.Format : object {
    protected SprmBuffer m_grpprl;
    internal Format(int initialSize, int initialOffset);
    internal void AddSprm(ushort sprmCode, int param, Byte[] varParam);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.FormulaHandler : object {
    internal static string GLOBALS_PAGENUMBER;
    internal static string GLOBALS_TOTALPAGES;
    internal static string GLOBALS_REPORTNAME;
    private static Regex m_RegexGlobalOnly;
    private static Regex m_RegexAmpDetection;
    private static RegexOptions m_regexOptions;
    private static FormulaHandler();
    private static void InitRegularExpressions();
    internal static ArrayList ProcessHeaderFooterFormula(string formulaExpression);
    private static GlobalExpressionType WordHeaderFooterFormula(Match match, string formulaExpression);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.HyperlinkFieldInfo : FieldInfo {
    private static byte HyperlinkCode;
    private static Byte[] StartData;
    private static Byte[] MiddleData;
    private static Byte[] EndData;
    internal Byte[] Start { get; }
    internal Byte[] Middle { get; }
    internal Byte[] End { get; }
    internal HyperlinkFieldInfo(int offset, Location location);
    private static HyperlinkFieldInfo();
    internal virtual Byte[] get_Start();
    internal virtual Byte[] get_Middle();
    internal virtual Byte[] get_End();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.HyperlinkWriter : object {
    private static byte Unknown;
    private static int Unknown1;
    private static int Unknown2;
    private static short Unknown3;
    private static int Unknown4;
    private static byte Unknown5;
    internal static Byte[] EMPTY_PIC;
    internal static Byte[] MAGIC_NUM1;
    internal static Byte[] MAGIC_NUM2;
    internal static Byte[] MAGIC_NUM3;
    internal static Byte[] MAGIC_NUM4;
    private static HyperlinkWriter();
    internal static void WriteHyperlink(Stream dataStream, string target, LinkType type);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.ImageHash : object {
    private Byte[] m_md4;
    private Sizings m_sizing;
    private int m_width;
    private int m_height;
    internal ImageHash(Byte[] md4, Sizings sizing, int width, int height);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal enum Microsoft.ReportingServices.Rendering.WordRenderer.LineStyle : Enum {
    public int value__;
    public static LineStyle None;
    public static LineStyle Single;
    public static LineStyle Thick;
    public static LineStyle Double;
    public static LineStyle Hairline;
    public static LineStyle Dot;
    public static LineStyle DashLargeGap;
    public static LineStyle DotDash;
    public static LineStyle DotDotDash;
    public static LineStyle Triple;
    public static LineStyle ThinThickSmallGap;
    public static LineStyle ThickThinSmallGap;
    public static LineStyle ThinThickThinSmallGap;
    public static LineStyle ThinThickMediumGap;
    public static LineStyle ThickThinMediumGap;
    public static LineStyle ThinThickThinMediumGap;
    public static LineStyle ThinThickLargeGap;
    public static LineStyle ThickThinLargeGap;
    public static LineStyle ThinThickThinLargeGap;
    public static LineStyle Wave;
    public static LineStyle DoubleWave;
    public static LineStyle DashSmallGap;
    public static LineStyle DashDotStroked;
    public static LineStyle Emboss3d;
    public static LineStyle Engrave3d;
    public static LineStyle Unknown;
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.ListData : object {
    private static short NilStyle;
    private int m_lsid;
    internal ListLevelOnFile[] m_levels;
    internal int Lsid { get; }
    internal ListLevelOnFile[] Levels { get; }
    internal ListData(int listID);
    internal virtual int get_Lsid();
    internal virtual ListLevelOnFile[] get_Levels();
    internal virtual void SetLevel(int index, ListLevelOnFile level);
    internal void Write(BinaryWriter dataWriter, BinaryWriter levelWriter, Word97Writer writer);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.ListLevelOnFile : object {
    internal static int TAB;
    internal static int SPACE;
    internal static int NOTHING;
    private int _iStartAt;
    private byte _nfc;
    private byte _info;
    private Byte[] _rgbxchNums;
    private byte _ixchFollow;
    private int _dxaSpace;
    private int _dxaIndent;
    private short _reserved;
    private Byte[] _grpprlPapx;
    private Byte[] _grpprlChpx;
    private Char[] _bulletText;
    private ListStyles m_style;
    internal int SizeInBytes { get; }
    internal byte FollowChar { get; }
    internal ListStyles ListStyle { get; }
    internal ListLevelOnFile(int level, ListStyles listStyle, Word97Writer writer);
    internal virtual int get_SizeInBytes();
    internal virtual byte get_FollowChar();
    internal ListStyles get_ListStyle();
    internal void Write(BinaryWriter writer);
    private void setNumberFormatInternal(WordNumberFormat nfc);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.PageNumberFieldInfo : FieldInfo {
    private static byte PageNumberCode;
    private static Byte[] StartData;
    private static Byte[] MiddleData;
    private static Byte[] EndData;
    internal Byte[] Start { get; }
    internal Byte[] Middle { get; }
    internal Byte[] End { get; }
    internal PageNumberFieldInfo(int offset, Location location);
    private static PageNumberFieldInfo();
    internal virtual Byte[] get_Start();
    internal virtual Byte[] get_Middle();
    internal virtual Byte[] get_End();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.ParagraphFormat : Format {
    private static int MaxPapSprmSize;
    private List`1<int> m_papOffsets;
    private Byte[] m_papFkp;
    private Stream m_papTable;
    private int m_papOffsetOffset;
    private int m_papGrpprlOffset;
    private int m_papFcOffset;
    private int m_parStart;
    private int m_fcStart;
    internal short StyleIndex { get; internal set; }
    internal Stream Stream { get; }
    internal List`1<int> Offsets { get; }
    internal ParagraphFormat(Stream papTable, int fcStart);
    internal void CommitParagraph(int cpEnd, TableData currentRow, Stream dataStream);
    private bool AddPropToPapFkp(Byte[] fkp, int cpEnd, int fcOffset, Byte[] midEntry, int offsetOffset, Byte[] grpprl, int grpprlEnd, int grpprlOffset);
    internal void Finish(int lastCp);
    internal void SetIsInTable(int m_nestingLevel);
    internal short get_StyleIndex();
    internal void set_StyleIndex(short value);
    internal Stream get_Stream();
    internal List`1<int> get_Offsets();
    internal void WriteBinTableTo(BinaryWriter tableWriter, Int32& pageStart);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.ParagraphSprms : object {
    internal static ushort SprmDefTable;
    internal static ushort SprmDefPadding;
    internal static int SPRM_TABLEOFFSET;
    internal static short SPRM_JC80;
    internal static ushort SPRM_JC;
    internal static short SPRM_FSIDEBYSIDE;
    internal static short SPRM_FKEEP;
    internal static short SPRM_FKEEPFOLLOW;
    internal static short SPRM_FPAGEBREAKBEFORE;
    internal static short SPRM_BRCL;
    internal static short SPRM_BRCP;
    internal static ushort SPRM_ILVL;
    internal static ushort SPRM_ILFO;
    internal static short SPRM_FNOLINENUMB;
    internal static ushort SPRM_DYALINE;
    internal static ushort SPRM_FINTABLE;
    internal static ushort SPRM_FTTP;
    internal static ushort SPRM_FTTPEMBEDDED;
    internal static ushort SPRM_INNERCELL;
    internal static short SPRM_PC;
    internal static short SPRM_WR;
    internal static short SPRM_BRCTOP80;
    internal static short SPRM_BRCLEFT80;
    internal static short SPRM_BRCBOTTOM80;
    internal static short SPRM_BRCRIGHT80;
    internal static short SPRM_BRCBAR80;
    internal static short SPRM_BRCBETWEEN80;
    internal static short SPRM_FNOAUTOHYPH;
    internal static short SPRM_WHEIGHTABS;
    internal static short SPRM_DCS;
    internal static short SPRM_SHD80;
    internal static short SPRM_FLOCKED;
    internal static short SPRM_FWIDOWCONTROL;
    internal static short SPRM_FKINSOKU;
    internal static short SPRM_FWORDWRAP;
    internal static short SPRM_FOVERFLOWPUNCT;
    internal static short SPRM_FTOPLINEPUNCT;
    internal static short SPRM_AUTOSPACEDE;
    internal static short SPRM_AUTOSPACEDN;
    internal static short SPRM_WALIGNFONT;
    internal static short SPRM_FRAMETEXTFLOW;
    internal static short SPRM_OUTLVL;
    internal static ushort SPRM_FBIDI;
    internal static short SPRM_FNUMRMLNS;
    internal static short SPRM_CRLF;
    internal static short SPRM_USEPGSUSETTINGS;
    internal static short SPRM_FADJUSTRIGHT;
    internal static short SPRM_FDYABEFOREAUTO;
    internal static short SPRM_FDYAAFTERAUTO;
    internal static ushort SPRM_ITAP;
    internal static ushort SPRM_HUGEPAPX;
    internal static short SPRM_CHGTABSPAPX;
    internal static ushort SPRM_DXARIGHT;
    internal static ushort SPRM_DXARIGHT2k3;
    internal static ushort SPRM_DXALEFT;
    internal static ushort SPRM_DXALEFT2k3;
    internal static short SPRM_DXALEFT1;
    internal static ushort SPRM_DXALEFT12k3;
    internal static ushort SPRM_DYABEFORE;
    internal static ushort SPRM_DYAAFTER;
    internal static short SPRM_CHGTABS;
    internal static short SPRM_DXAABS;
    internal static short SPRM_DYAABS;
    internal static short SPRM_DXAWIDTH;
    internal static short SPRM_BRCTOP;
    internal static short SPRM_BRCLEFT;
    internal static short SPRM_BRCBOTTOM;
    internal static short SPRM_BRCRIGHT;
    internal static short SPRM_BRCBAR;
    internal static short SPRM_BRCBETWEEN;
    internal static short SPRM_SHD;
    internal static short SPRM_DYAFROMTEXT;
    internal static short SPRM_DXAFROMTEXT;
    internal static short SPRM_RULER;
    internal static short SPRM_ANLD;
    internal static short SPRM_PROPRMARK;
    internal static short SPRM_NUMRM;
    private static ParagraphSprms();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.PictureData : object {
    private Image m_img;
    internal int WidthPx { get; }
    internal int HeightPx { get; }
    internal PictureData(Byte[] rawData, string mimeType);
    internal PictureData(Byte[] rawData);
    internal virtual int get_WidthPx();
    internal virtual int get_HeightPx();
    public sealed virtual void Dispose();
    internal virtual Byte[] GetData(string mimeType);
    internal static Byte[] ExportImageData(Byte[] rawData, int type, int sizeX, int sizeY);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.PictureDescriptor : object {
    private static int JPG_DENSITY_OPTION_OFF;
    private static int JPG_XDENSITY_OFF;
    private static int JPG_YDENSITY_OFF;
    private static int JPG_CENT_DENSITY;
    private static int JPG_PIXELPERINCH_DENSITY;
    private static int JPG_ASPECT_DENSITY;
    private static float CENT_IN_INCHES;
    private static float INCH_IN_TWIPS;
    private static float INCH_IN_METERS;
    private static int PNG_DENSITY_OPTION_OFF;
    private static int PNG_XDENSITY_OFF;
    private static int PNG_YDENSITY_OFF;
    private static float PNG_DPI;
    private static int CONTAINER_IDX;
    private static int BSE_IDX;
    private static ushort SHAPERECORD_ID;
    private static ushort OPTIONSRECORD_ID;
    private static ushort ANCHORRECORD_ID;
    private static ushort CONTAINERRECORD_ID;
    private static ushort BSERECORD_ID;
    private static string FILENAME;
    internal static ushort BASE_SHAPE_ID;
    internal static ushort IDPROP_ID;
    private static ushort FILENAMEPROP_ID;
    private static ushort BLIPFLAGSPROP_ID;
    private static ushort NOLINEPROP_ID;
    private static int ASPECT_ID;
    private static int ASPECT_NOT_LOCKED;
    private static int RELATIVE_ID;
    private static int IS_NOT_RELATIVE;
    internal static int SIZE;
    internal static int TIFF;
    internal static int BMP;
    internal static int ESCHER;
    internal static string BMP_MIME;
    internal static string JPEG_MIME;
    internal static string PNG_MIME;
    private static Byte[] JPG_MAGIC;
    private static Byte[] JPG_SIG;
    private static Byte[] JPG_FRAME_MARKER;
    private static Byte[] EXIF_MAGIC;
    private static Byte[] GIF_MAGIC;
    private static Byte[] PNG_MAGIC;
    private static Byte[] PNG_IHDR;
    private static Byte[] PNG_IDAT;
    private static Byte[] PNG_PHYS;
    private static Byte[] BM_MAGIC;
    private int m_totalSize;
    private short m_picSize;
    private short m_mappingMode;
    private short m_xExt;
    private short m_yExt;
    private short m_hMF;
    private Byte[] m_metaData;
    private short m_dxaGoal;
    private short m_dyaGoal;
    private short m_mX;
    private short m_mY;
    private int m_dxaCropLeft;
    private int m_dyaCropTop;
    private int m_dxaCropRight;
    private int m_dyaCropBottom;
    private short m_info;
    private static BitField m_fFrameEmpty;
    private static BitField m_fBitmap;
    private static BitField m_fDrawHatch;
    private static BitField m_fError;
    private static BitField m_bpp;
    private int m_brcTop;
    private int m_brcLeft;
    private int m_brcBottom;
    private int m_brcRight;
    private short m_xOrigin;
    private short m_yOrigin;
    private short m_cProps;
    private Byte[] m_unknownData;
    private ArrayList m_recordList;
    private short m_originalHeight;
    private short m_originalWidth;
    private EscherBSERecord m_bse;
    private EscherSpRecord m_shape;
    private EscherOptRecord m_options;
    private Sizings m_sizing;
    private bool m_relative;
    private float m_xDensity;
    private float m_yDensity;
    private EscherClientAnchorRecord m_anchorRecord;
    internal short Height { get; internal set; }
    internal short Width { get; internal set; }
    internal short OriginalHeight { get; }
    internal short OriginalWidth { get; }
    internal int MappingMode { get; }
    internal int TotalSize { get; }
    internal int HeaderSize { get; }
    internal ArrayList EscherRecords { get; }
    internal EscherBSERecord BSERecord { get; }
    internal EscherSpRecord ShapeRecord { get; }
    internal EscherOptRecord OptionsRecord { get; }
    internal EscherClientAnchorRecord ClientAnchorRecord { get; }
    internal Sizings Sizing { get; internal set; }
    internal bool SizeRelative { get; internal set; }
    internal int BlipType { get; }
    internal PictureDescriptor(Byte[] imgData, Byte[] hash, int aWidth, int aHeight, Sizings sizing, int imgIndex);
    private static PictureDescriptor();
    internal short get_Height();
    internal void set_Height(short value);
    internal short get_Width();
    internal void set_Width(short value);
    internal short get_OriginalHeight();
    internal short get_OriginalWidth();
    internal int get_MappingMode();
    internal int get_TotalSize();
    internal int get_HeaderSize();
    internal ArrayList get_EscherRecords();
    internal EscherBSERecord get_BSERecord();
    internal EscherSpRecord get_ShapeRecord();
    internal EscherOptRecord get_OptionsRecord();
    internal EscherClientAnchorRecord get_ClientAnchorRecord();
    internal Sizings get_Sizing();
    internal void set_Sizing(Sizings value);
    internal bool get_SizeRelative();
    internal void set_SizeRelative(bool value);
    internal int get_BlipType();
    internal void Serialize(Stream data);
    private void CreateDefaultEscherRecords(Byte[] imgData, Byte[] hash, int imgIndex);
    internal Byte[] ExportRawImageData();
    internal Byte[] ExportImageData(int aType);
    internal void InitImage(Byte[] aImgData, Byte[] aHash, int imgIndex);
    private void InitIndex(int index);
    private void InitSizing();
    private static int GetBigEndian(Byte[] buf, int offset, int width);
    private static bool FindSubArray(Byte[] aImgData, Byte[] magicNum, int start);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.SectionFormat : Format {
    private static int MaxSectionSize;
    internal void WriteTo(BinaryWriter tableWriter, BinaryWriter mainWriter, int lastCp);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.SectionSprms : object {
    internal static ushort SPRM_DXA_LEFT;
    internal static ushort SPRM_DXA_RIGHT;
    internal static ushort SPRM_DYA_TOP;
    internal static ushort SPRM_DYA_BOTTOM;
    internal static ushort SPRM_XA_PAGE;
    internal static ushort SPRM_YA_PAGE;
    internal static ushort SPRM_FTITLEPAGE;
    internal static ushort SPRM_SBORIENTATION;
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.SprmBuffer : object {
    private Byte[] m_grpprl;
    private int m_offset;
    private int m_initialOffset;
    internal Byte[] Buf { get; }
    internal int Offset { get; }
    internal short StyleIndex { get; internal set; }
    internal SprmBuffer(int initialSize, int initialOffset);
    internal void AddSprm(ushort instruction, int param, Byte[] varParam);
    internal void AddRawSprmData(Byte[] buf);
    internal void Clear(int start, int length);
    internal void Reset(int offset);
    internal void Reset();
    internal Byte[] get_Buf();
    internal int get_Offset();
    internal short get_StyleIndex();
    internal void set_StyleIndex(short value);
    internal void ClearStyle();
    public sealed virtual object Clone();
}
internal static class Microsoft.ReportingServices.Rendering.WordRenderer.StructuredStorage : object {
    private static int BUFFERSIZE;
    internal static bool CreateMultiStreamFile(Stream[] sources, String[] streamNames, string author, string title, string comments, Stream output, bool forceInMemory);
    private static void WriteProperty(IPropertyStorage propertyStorage, int propid, string value);
}
internal enum Microsoft.ReportingServices.Rendering.WordRenderer.StyleContext : Enum {
    public byte value__;
    public static StyleContext Body;
    public static StyleContext Paragraph;
    public static StyleContext Table;
    public static StyleContext Cell;
    public static StyleContext CharacterRun;
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.StyleDescription : object {
    internal static int BchUpeOffset;
    private static int ParagraphStyle;
    private static int CharacterStyle;
    private static BitField sti;
    private static BitField fScratch;
    private static BitField fInvalHeight;
    private static BitField fHasUpe;
    private static BitField fMassCopy;
    private static BitField styleTypeCode;
    private static BitField baseStyle;
    private static BitField numUPX;
    private static BitField nextStyle;
    private static BitField fAutoRedef;
    private static BitField fHidden;
    private static BitField f97LidsSet;
    private static BitField fCopyLang;
    private static BitField fPersonalCompose;
    private static BitField fPersonReply;
    private static BitField fPersonal;
    private static BitField fNoHtmlExport;
    private static BitField fSemiHidden;
    private static BitField fLocked;
    private static BitField fInternalUse;
    private static StyleDescription();
    internal static Byte[] WriteStdHeader(int styleIndex, string name);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.StyleSheet : object {
    internal static Byte[] Buffer;
    private static StyleSheet();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.TableData : object {
    private static int DefaultOffset;
    private static int BrcSize;
    private static int Brc97Size;
    private static int MaxTapxSprmSize;
    internal static byte TC_ROTATEFONT;
    internal static byte TC_VERTICAL;
    private CellBorderColor m_borderColors;
    private CellShading m_cellShading;
    private CellPadding m_cellPadding;
    private SprmBuffer m_tapx;
    private int m_numColumns;
    private Single[] m_columnWidths;
    private BorderCode[] m_tableBorders;
    private BorderCode[] m_cellBorders;
    private Byte[] m_tableShd;
    private int m_startOffset;
    private int m_rowHeight;
    private bool m_writeRowHeight;
    private bool m_writeExactRowHeight;
    private bool m_layoutTable;
    internal bool WriteRowHeight { get; internal set; }
    internal bool WriteExactRowHeight { get; internal set; }
    internal Byte[] Tapx { get; }
    internal TableData(int tableLevel, bool layoutTable);
    private static TableData();
    internal bool get_WriteRowHeight();
    internal void set_WriteRowHeight(bool value);
    internal bool get_WriteExactRowHeight();
    internal void set_WriteExactRowHeight(bool value);
    internal Byte[] get_Tapx();
    internal void InitTableRow(float leftStart, float rowHeight, Single[] columnWidths, AutoFit autoFit);
    private void CreateTableDefSprm(float leftStart);
    internal void WriteTableCellBegin(int cellIndex, int numColumns, bool firstVertMerge, bool firstHorzMerge, bool vertMerge, bool horzMerge);
    internal void AddCellStyleProp(int cellIndex, byte code, object value);
    public void AddPadding(int cellIndex, byte code, object value, int defaultValue);
    internal void AddCellDiagonal(int cellIndex, BorderStyles style, string width, string color, bool slantUp);
    private void SetCellBorderWidth(int cellIndex, string width, Positions position);
    private void SetCellBorderWidth(int cellIndex, string width);
    private void SetCellBorderStyle(int cellIndex, BorderStyles borderStyle, Positions position);
    private void SetCellBorderStyle(int cellIndex, BorderStyles borderStyle);
    private void SetCellBorderColor(int cellIndex, string color);
    private void SetCellBorderColor(int cellIndex, string color, Positions position);
    private void SetTableCellShading(int index, string color);
    internal void AddTableStyleProp(byte code, object value);
    internal void SetTableContext(BorderContext borderContext);
    private void SetDefaultBorderColor(string color);
    private void SetTableShading(string color);
    private void SetBorderWidth(string width, Positions position);
    private void SetDefaultBorderWidth(string width);
    private void SetBorderStyle(BorderStyles style, Positions position);
    private void SetDefaultBorderStyle(BorderStyles style);
    private void SetBorderColor(string color, Positions position);
    private void RenderVerticalAlign(int cellIndex, VerticalAlignments vertAlign);
    private void RenderWritingMode(int cellIndex, WritingModes writingModes);
    internal void WriteBrc97(Byte[] grpprl, int offset, BorderCode brc);
    private int GetTcLocation(int numColumns, int cellIndex);
    private LineStyle ConvertBorderStyle(BorderStyles style);
    internal void WriteTableCellEnd(int cellIndex, BorderContext borderContext);
    private void UpdateBorderColor(Positions position, int offset, int cellIndex, bool borderContext);
    internal void ClearCellBorder(Positions position);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.TableSprms : object {
    internal static ushort SPRM_SHD;
    internal static ushort SPRM_TABLEBORDERS;
    internal static ushort SPRM_TABLEBORDERS97;
    internal static ushort SPRM_CELL_SHD;
    internal static ushort SPRM_CELL_SHD2;
    internal static ushort SPRM_CELL_SHD3;
    internal static ushort SPRM_CELL_BRC_TOP_CV;
    internal static ushort SPRM_CELL_BRC_LEFT_CV;
    internal static ushort SPRM_CELL_BRC_BOTTOM_CV;
    internal static ushort SPRM_CELL_BRC_RIGHT_CV;
    internal static ushort SPRM_ROW_HEIGHT;
    internal static ushort SPRM_PADDING;
    internal static ushort SPRM_DEFAULT_PADDING;
    internal static ushort SPRM_FAUTOFIT;
    internal static ushort SPRM_TSETBRC;
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.TotalPagesFieldInfo : FieldInfo {
    private static byte TotalPagesCode;
    private static Byte[] StartData;
    private static Byte[] MiddleData;
    private static Byte[] EndData;
    internal Byte[] Start { get; }
    internal Byte[] Middle { get; }
    internal Byte[] End { get; }
    internal TotalPagesFieldInfo(int offset, Location location);
    private static TotalPagesFieldInfo();
    internal virtual Byte[] get_Start();
    internal virtual Byte[] get_Middle();
    internal virtual Byte[] get_End();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.Word97Constants : object {
    internal static int TcSize;
    internal static byte TcFirstMerge;
    internal static byte TcMerge;
    internal static byte TcVertMerge;
    internal static byte TcVertRestart;
    internal static byte TextPieceTableMarker;
    internal static ushort TextPieceDescriptor;
    internal static ushort DefaultStyleCount;
    internal static short DefaultSepxSize;
    internal static int WordPageSize;
    internal static float InchInTwips;
    internal static int NumHdrFtrOffsets;
    internal static byte PaddingTop;
    internal static byte PaddingLeft;
    internal static byte PaddingBottom;
    internal static byte PaddingRight;
    internal static byte PaddingTwips;
    internal static int OddHeader;
    internal static int EvenHeader;
    internal static int FirstHeader;
    internal static int OddFooter;
    internal static int EvenFooter;
    internal static int FirstFooter;
    internal static string InlineImgCode;
    internal static int LeftJc;
    internal static int CenterJc;
    internal static int RightJc;
    internal static float InchInMm;
    internal static int WordMaxColumns;
    internal static float WordMaxWidth;
    internal static ushort WordMaxWidthTwips;
    internal static float WordMaxWidthMM;
    internal static int WorddmOrientPortrait;
    internal static int WorddmOrientLandscape;
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.Word97Writer : object {
    private static int EmptyStyleIndex;
    private int m_fcStart;
    private Stream m_fontTable;
    private Stream m_tableStream;
    private Stream m_mainStream;
    private Stream m_dataStream;
    private Stream m_listStream;
    private Stream m_listLevelStream;
    private Stream m_outStream;
    private Dictionary`2<ImageHash, int> m_images;
    private Dictionary`2<string, int> m_fontNameSet;
    private int m_currentFontIndex;
    private TableData m_currentRow;
    private Int32[] m_headerFooterOffsets;
    private int m_ccpText;
    private int m_ccpHdd;
    private int m_nestingLevel;
    private Stack`1<TableData> m_tapStack;
    private FieldsTable m_fldsCurrent;
    private FieldsTable m_fldsMain;
    private FieldsTable m_fldsHdr;
    private Bookmarks m_bookmarks;
    private CharacterFormat m_charFormat;
    private ParagraphFormat m_parFormat;
    private SectionFormat m_secFormat;
    private WordText m_wordText;
    private int m_imgIndex;
    private int m_listIndex;
    private ListData m_currentList;
    private AutoFit m_autoFit;
    private ListLevelInfo[] m_levelData;
    private int m_currentMaxListLevel;
    internal bool CanBand { get; }
    public AutoFit AutoFit { get; public set; }
    internal void Init(CreateAndRegisterStream createAndRegisterStream, AutoFit autoFit);
    internal void SetPageDimensions(float pageHeight, float pageWidth, float leftMargin, float rightMargin, float topMargin, float bottomMargin);
    internal bool get_CanBand();
    public AutoFit get_AutoFit();
    public void set_AutoFit(AutoFit value);
    internal void InitHeaderFooter();
    internal void FinishHeader();
    internal void FinishFooter();
    internal void FinishHeader(HeaderFooterLocation location);
    internal void FinishFooter(HeaderFooterLocation location);
    private void FinishHeaderFooterRegion(int index);
    internal void FinishHeadersFooters(bool hasTitlePage);
    internal void AddImage(Byte[] imgBuf, float height, float width, Sizings sizing);
    private void WriteSpecialText(string text);
    internal void WriteText(string text);
    internal void WriteHyperlinkBegin(string target, bool bookmarkLink);
    internal void WriteHyperlinkEnd();
    internal void AddTableStyleProp(byte code, object value);
    internal void SetTableContext(BorderContext borderContext);
    internal void AddBodyStyleProp(byte code, object value);
    internal void AddCellStyleProp(int cellIndex, byte code, object value);
    internal void AddPadding(int cellIndex, byte code, object value, int defaultValue);
    internal void AddTextStyleProp(byte code, object value);
    internal void AddFirstLineIndent(float indent);
    internal void AddLeftIndent(float margin);
    internal void AddRightIndent(float margin);
    internal void AddSpaceBefore(float space);
    internal void AddSpaceAfter(float space);
    internal static bool FixMargins(float totalSize, Single& left, Single& right);
    private int PointsToTwips(float indent);
    private void RenderTextDecoration(TextDecorations textDecorations);
    private void RenderLanguage(string p);
    private void RenderUnicodeBiDi(UnicodeBiDiTypes unicodeBiDiTypes);
    private void RenderDirection(Directions directions);
    public void RenderTextRunDirection(Directions direction);
    private void RenderLineHeight(string size);
    private void RenderTextColor(string strColor);
    private void RenderTextColor(Color color);
    private bool GetTextAlignForType(TypeCode typeCode);
    internal void RenderTextAlign(TypeCode type, TextAlignments textAlignments, Directions direction);
    internal void RenderFontWeight(FontWeights fontWeights, Directions dir);
    internal void RenderFontWeight(Nullable`1<FontWeights> fontWeights, Directions dir);
    internal void RenderFontSize(string size, Directions dir);
    internal void RenderFontFamily(string font, Directions dir);
    internal void RenderFontStyle(FontStyles value, Directions dir);
    internal void RenderFontStyle(Nullable`1<FontStyles> value, Directions dir);
    internal void WriteParagraphEnd();
    internal void WriteListParagraphEnd(int level, ListStyles listStyle);
    internal void InitListLevels();
    internal void ResetListlevels();
    internal void WriteTableCellEnd(int cellIndex, BorderContext borderContext, bool emptyLayoutCell);
    internal void WriteEmptyStyle();
    internal void WriteTableBegin(float left, bool layoutTable);
    internal void WriteTableRowBegin(float left, float height, Single[] columnWidths);
    internal void IgnoreRowHeight(bool canGrow);
    internal void SetWriteExactRowHeight(bool writeExactRowHeight);
    internal void WriteTableCellBegin(int cellIndex, int numColumns, bool firstVertMerge, bool firstHorzMerge, bool vertMerge, bool horzMerge);
    internal void WriteTableRowEnd();
    internal void WriteTableEnd();
    internal void Finish(string title, string author, string comments);
    internal int WriteFont(string fontName);
    private void WriteParagraphEnd(string parEnd, bool useTapx);
    internal static int AddSprm(Byte[] grpprl, int offset, ushort instruction, int param, Byte[] varParam);
    internal static double ToPoints(string size);
    internal static int ToIco24(string color);
    internal static ushort ToTwips(string size);
    internal static ushort ToTwips(object size);
    internal static ushort ToTwips(float mm);
    internal static float TwipsToMM(int twips);
    private int GetFcField(int fieldNum);
    private int GetLcbField(int fieldNum);
    private void TransferData(Stream inStream, Stream outStream, int bufSize);
    internal void RenderBookmark(string name);
    internal void RenderLabel(string label, int level);
    internal void WritePageNumberField();
    internal void WriteTotalPagesField();
    internal void AddListStyle(int level, bool bulleted);
    private void WriteCurrentListData();
    private void WriteListFormatOverrides(BinaryWriter writer);
    private void WriteListNameTable(BinaryWriter writer);
    internal void WriteCellDiagonal(int cellIndex, BorderStyles style, string width, string color, bool slantUp);
    internal void WritePageBreak();
    internal void ClearCellBorder(Positions position);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.WordColor : object {
    private static Color darkYellow;
    internal int _ico;
    internal int _ico24;
    internal WordColor(int ico);
    internal WordColor(Color& color);
    private static WordColor();
    internal virtual Color getColor();
    internal static Color get97Color(int ico97);
    internal static Color getColor(int ico24);
    internal static int GetIco24(Color color);
    internal static int getIco97(Color& color);
    private static Single[] getHSBModel(Color& color);
    internal static int transposeIco(int ico);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.WordDocumentRenderer : object {
    public string LocalizedName { get; }
    public sealed virtual void GetRenderingResource(CreateAndRegisterStream createAndRegisterStreamCallback, NameValueCollection deviceInfo);
    public sealed virtual bool Render(Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& someProps, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual bool RenderStream(string streamName, Report report, NameValueCollection reportServerParameters, NameValueCollection deviceInfo, NameValueCollection clientCapabilities, Hashtable& someProps, CreateAndRegisterStream createAndRegisterStream);
    public sealed virtual string get_LocalizedName();
    public sealed virtual void SetConfiguration(string configuration);
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.WordRenderer : object {
    private static float MaximumAutofitPageWidthDifference;
    internal static int MaximumListLevel;
    private SPBProcessing m_spbProcessing;
    private Word97Writer m_writer;
    private int m_labelLevel;
    private bool m_inHeaderFooter;
    private RPLReport m_rplReport;
    private DeviceInfo m_deviceInfo;
    private bool m_omitHyperlinks;
    private bool m_omitDrillthroughs;
    private float m_pageHeight;
    private static Byte[] m_invalidImage;
    private static WordRenderer();
    internal WordRenderer(CreateAndRegisterStream createAndRegisterStream, SPBProcessing spbProcessing, Word97Writer writer, DeviceInfo deviceInfo);
    internal bool Render();
    private void RenderReportItem(RPLElement element, RPLMeasurement measurement, int cellIndex, float left, BorderContext borderContext, bool inTablix);
    private static void RenderSizeProp(RPLReportSize nonShared, RPLReportSize shared, RenderSize sizeFunction);
    private void RenderTextBox(RPLTextBox textBox, RPLMeasurement measurement, int cellIndex, float left, BorderContext borderContext, bool inTablix, bool hasBorder);
    private void RenderTextBoxRich(RPLTextBox textBox, RPLAction textBoxAction);
    public void RenderTextRunStyle(RPLElementStyle runStyle, Directions dir);
    public void RemovePaddingFromMeasurement(RPLMeasurement measurement, RPLElementStyle style);
    public bool HasAnyBorder(RPLElementStyle style);
    public BorderContext HasBorders(RPLElementStyle style, BorderContext parentBorderContext);
    public bool HasBorder(RPLElementStyle style, Positions pos);
    public static bool IsWritingModeVertical(IRPLStyle style);
    public double ToMM(object size, object defaultSize);
    private void RenderAction(RPLAction action);
    private void RenderFormulaString(object obj);
    private void RenderBookmarksLabels(RPLElement element);
    private void RenderTextProperties(TypeCode typeCode, IRPLStyle style);
    private void RenderCellProperties(IRPLStyle style, int cellIndex, bool needsBorderOrPadding);
    private void RenderCellProperties(IRPLStyle style, int cellIndex, bool needsBorder, bool needsPadding);
    private void RenderTableProperties(IRPLStyle style, bool isTablix, BorderContext parentBorderContext);
    private void SetZeroPadding(int cellIndex);
    private void RenderCellStyle(IRPLStyle style, int cellIndex);
    private void RenderSplitTablix(RPLTablix tablix, RPLMeasurement measurement, int splitColumn, BorderContext parentBorderContext);
    private static void PlaceCellIntoSplitTablix(SplitTablix[] tablices, int x, RPLTablixCell cell, int totalColumns, int totalRows, int splitColumn, BorderContext parentBorderContext);
    private void RenderTablix(RPLTablix element, float left, BorderContext parentBorderContext, bool inTablix);
    private void RenderTablixCell(RPLTablix tablix, float left, Single[] widths, TablixGhostCell[] ghostCells, BorderContext borderContext, int nextCell, RPLTablixCell cell, Enumerator<RPLTablixMemberCell> omittedCells, bool lastCell);
    private void RenderOmittedCells(Enumerator<RPLTablixMemberCell> omittedCells, int colIndex, bool lastCell);
    private void RenderGhostCells(Single[] widths, TablixGhostCell[] ghostCells, int nextCell, int endIndex);
    private void RenderTablixStyle(IRPLStyle style, BorderContext borderContext);
    private float GetLeft(Single[] widths, int index, float left);
    private bool RenderRectangle(RPLContainer rectangle, float left, RPLMeasurement rectangleMeasurement, BorderContext parentBorderContext, bool inTablix);
    private bool RenderRectangle(RPLContainer rectangle, float left, bool canGrow, RPLMeasurement rectangleMeasurement, BorderContext parentBorderContext, bool inTablix, bool ignoreStyles);
    private void RenderLines(int cellIndex, PageTableCell cell, BorderContext borderContext);
    private void RenderLine(int cellIndex, RPLLine line, byte lineStyleCode, byte widthCode, byte colorCode, bool onlyLabel);
    private Byte[] CreateImageBuf(RPLImageData imgData);
    private bool HasAction(RPLAction action);
    private bool HasAction(RPLActionInfo actionInfo);
    private void WriteBeginTableRowCell(RPLMeasurement measurement, bool notCanGrow);
    private void WriteEndCellRowTable(BorderContext borderContext);
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Rendering.WordRenderer.WordRenderRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string WidthError { get; }
    public static string ColumnsError { get; }
    public static string WidthMarginsAdjusted { get; }
    public static string HeightMarginsAdjusted { get; }
    public static string PageWidthExceeded { get; }
    public static string PageHeightExceeded { get; }
    public static string InvalidAutofit { get; }
    public static string WordLocalizedName { get; }
    public static string InvalidPNGError { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_WidthError();
    public static string get_ColumnsError();
    public static string get_WidthMarginsAdjusted();
    public static string get_HeightMarginsAdjusted();
    public static string get_PageWidthExceeded();
    public static string get_PageHeightExceeded();
    public static string get_InvalidAutofit();
    public static string get_WordLocalizedName();
    public static string get_InvalidPNGError();
}
internal class Microsoft.ReportingServices.Rendering.WordRenderer.WordText : object {
    private int m_currentCp;
    private Stream m_textPiece;
    internal int CurrentCp { get; }
    internal Stream Stream { get; }
    internal WordText(Stream textPiece);
    internal static Char[] EscapeText(string text, Int32& length);
    internal void WriteText(string text);
    internal void WriteSpecialText(string text);
    internal int get_CurrentCp();
    internal Stream get_Stream();
    internal void WriteClxTo(BinaryWriter tableWriter, int fcStart);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Action : object {
    private List`1<ActionItem> m_actionItemList;
    private Style m_styleClass;
    private bool m_trackFieldsUsedInValueExpression;
    private ActionInfoExprHost m_exprHost;
    private StyleProperties m_sharedStyleProperties;
    private bool m_noNonSharedStyleProps;
    private static Declaration m_Declaration;
    internal Style StyleClass { get; internal set; }
    internal List`1<ActionItem> ActionItems { get; internal set; }
    internal StyleProperties SharedStyleProperties { get; internal set; }
    internal bool NoNonSharedStyleProps { get; internal set; }
    internal bool TrackFieldsUsedInValueExpression { get; internal set; }
    internal Action(ActionItem actionItem, bool computed);
    private static Action();
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal List`1<ActionItem> get_ActionItems();
    internal void set_ActionItems(List`1<ActionItem> value);
    internal StyleProperties get_SharedStyleProperties();
    internal void set_SharedStyleProperties(StyleProperties value);
    internal bool get_NoNonSharedStyleProps();
    internal void set_NoNonSharedStyleProps(bool value);
    internal bool get_TrackFieldsUsedInValueExpression();
    internal void set_TrackFieldsUsedInValueExpression(bool value);
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(ActionInfoExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal bool ResetObjectModelForDrillthroughContext(ObjectModelImpl objectModel, IActionOwner actionOwner);
    internal void GetSelectedItemsForDrillthroughContext(ObjectModelImpl objectModel, IActionOwner actionOwner);
    public object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ActionItem : object {
    private ExpressionInfo m_hyperLinkURL;
    private ExpressionInfo m_drillthroughReportName;
    private List`1<ParameterValue> m_drillthroughParameters;
    private ExpressionInfo m_drillthroughBookmarkLink;
    private ExpressionInfo m_bookmarkLink;
    private ExpressionInfo m_label;
    private int m_exprHostID;
    private int m_computedIndex;
    private ActionExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ExpressionInfo HyperLinkURL { get; internal set; }
    internal ExpressionInfo DrillthroughReportName { get; internal set; }
    internal List`1<ParameterValue> DrillthroughParameters { get; internal set; }
    internal ExpressionInfo DrillthroughBookmarkLink { get; internal set; }
    internal ExpressionInfo BookmarkLink { get; internal set; }
    internal ExpressionInfo Label { get; internal set; }
    internal int ComputedIndex { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal ActionExprHost ExprHost { get; }
    private static ActionItem();
    internal ExpressionInfo get_HyperLinkURL();
    internal void set_HyperLinkURL(ExpressionInfo value);
    internal ExpressionInfo get_DrillthroughReportName();
    internal void set_DrillthroughReportName(ExpressionInfo value);
    internal List`1<ParameterValue> get_DrillthroughParameters();
    internal void set_DrillthroughParameters(List`1<ParameterValue> value);
    internal ExpressionInfo get_DrillthroughBookmarkLink();
    internal void set_DrillthroughBookmarkLink(ExpressionInfo value);
    internal ExpressionInfo get_BookmarkLink();
    internal void set_BookmarkLink(ExpressionInfo value);
    internal ExpressionInfo get_Label();
    internal void set_Label(ExpressionInfo value);
    internal int get_ComputedIndex();
    internal void set_ComputedIndex(int value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal ActionExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(IList`1<ActionExprHost> actionItemExprHosts, ObjectModelImpl reportObjectModel);
    internal string EvaluateHyperLinkURL(IReportScopeInstance romInstance, OnDemandProcessingContext context, IInstancePath ownerItem, ObjectType objectType, string objectName);
    internal string EvaluateDrillthroughReportName(IReportScopeInstance romInstance, OnDemandProcessingContext context, IInstancePath ownerItem, ObjectType objectType, string objectName);
    internal string EvaluateBookmarkLink(IReportScopeInstance romInstance, OnDemandProcessingContext context, IInstancePath ownerItem, ObjectType objectType, string objectName);
    internal string EvaluateLabel(IReportScopeInstance romInstance, OnDemandProcessingContext context, IInstancePath ownerItem, ObjectType objectType, string objectName);
    internal object EvaluateDrillthroughParamValue(IReportScopeInstance romInstance, OnDemandProcessingContext context, IInstancePath ownerItem, List`1<string> fieldsUsedInOwnerValue, ParameterValue paramValue, ObjectType objectType, string objectName);
    internal bool EvaluateDrillthroughParamOmit(IReportScopeInstance romInstance, OnDemandProcessingContext context, IInstancePath ownerItem, ParameterValue paramValue, ObjectType objectType, string objectName);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public object PublishClone(AutomaticSubtotalContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Aggregate : DataAggregate {
    private object m_value;
    private static Declaration m_declaration;
    public int Size { get; }
    private static Aggregate();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.AggregateType : Enum {
    public int value__;
    public static AggregateType Normal;
    public static AggregateType Recursive;
    public static AggregateType PostSort;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.AttributeInfo : object {
    private bool m_isExpression;
    private string m_stringValue;
    private bool m_boolValue;
    private int m_intValue;
    private static Declaration m_Declaration;
    internal bool IsExpression { get; internal set; }
    internal string Value { get; internal set; }
    internal bool BoolValue { get; internal set; }
    internal int IntValue { get; internal set; }
    private static AttributeInfo();
    internal bool get_IsExpression();
    internal void set_IsExpression(bool value);
    internal string get_Value();
    internal void set_Value(string value);
    internal bool get_BoolValue();
    internal void set_BoolValue(bool value);
    internal int get_IntValue();
    internal void set_IntValue(int value);
    internal AttributeInfo PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Avg : Sum {
    private UInt32 m_currentCount;
    private static Declaration m_declaration;
    public int Size { get; }
    private static Avg();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.BackFrame : GaugePanelStyleContainer {
    private BackFrameExprHost m_exprHost;
    private static Declaration m_Declaration;
    private ExpressionInfo m_frameStyle;
    private ExpressionInfo m_frameShape;
    private ExpressionInfo m_frameWidth;
    private ExpressionInfo m_glassEffect;
    private FrameBackground m_frameBackground;
    private FrameImage m_frameImage;
    internal ExpressionInfo FrameStyle { get; internal set; }
    internal ExpressionInfo FrameShape { get; internal set; }
    internal ExpressionInfo FrameWidth { get; internal set; }
    internal ExpressionInfo GlassEffect { get; internal set; }
    internal FrameBackground FrameBackground { get; internal set; }
    internal FrameImage FrameImage { get; internal set; }
    internal string OwnerName { get; }
    internal BackFrameExprHost ExprHost { get; }
    internal BackFrame(GaugePanel gaugePanel);
    private static BackFrame();
    internal ExpressionInfo get_FrameStyle();
    internal void set_FrameStyle(ExpressionInfo value);
    internal ExpressionInfo get_FrameShape();
    internal void set_FrameShape(ExpressionInfo value);
    internal ExpressionInfo get_FrameWidth();
    internal void set_FrameWidth(ExpressionInfo value);
    internal ExpressionInfo get_GlassEffect();
    internal void set_GlassEffect(ExpressionInfo value);
    internal FrameBackground get_FrameBackground();
    internal void set_FrameBackground(FrameBackground value);
    internal FrameImage get_FrameImage();
    internal void set_FrameImage(FrameImage value);
    internal string get_OwnerName();
    internal BackFrameExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(BackFrameExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal GaugeFrameStyles EvaluateFrameStyle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeFrameShapes EvaluateFrameShape(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateFrameWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeGlassEffects EvaluateGlassEffect(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.BaseGaugeImage : object {
    protected BaseGaugeImageExprHost m_exprHost;
    private static Declaration m_Declaration;
    [ReferenceAttribute]
protected GaugePanel m_gaugePanel;
    private ExpressionInfo m_source;
    private ExpressionInfo m_value;
    private ExpressionInfo m_MIMEType;
    private ExpressionInfo m_transparentColor;
    internal ExpressionInfo Source { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo MIMEType { get; internal set; }
    internal ExpressionInfo TransparentColor { get; internal set; }
    internal string OwnerName { get; }
    internal BaseGaugeImageExprHost ExprHost { get; }
    internal BaseGaugeImage(GaugePanel gaugePanel);
    private static BaseGaugeImage();
    internal ExpressionInfo get_Source();
    internal void set_Source(ExpressionInfo value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_MIMEType();
    internal void set_MIMEType(ExpressionInfo value);
    internal ExpressionInfo get_TransparentColor();
    internal void set_TransparentColor(ExpressionInfo value);
    internal string get_OwnerName();
    internal BaseGaugeImageExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(BaseGaugeImageExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal SourceType EvaluateSource(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateStringValue(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context, Boolean& errorOccurred);
    internal Byte[] EvaluateBinaryValue(IReportScopeInstance romInstance, OnDemandProcessingContext context, Boolean& errOccurred);
    internal string EvaluateMIMEType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateTransparentColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CapImage : BaseGaugeImage {
    private static Declaration m_Declaration;
    private ExpressionInfo m_hueColor;
    private ExpressionInfo m_offsetX;
    private ExpressionInfo m_offsetY;
    internal ExpressionInfo HueColor { get; internal set; }
    internal ExpressionInfo OffsetX { get; internal set; }
    internal ExpressionInfo OffsetY { get; internal set; }
    internal CapImage(GaugePanel gaugePanel);
    private static CapImage();
    internal ExpressionInfo get_HueColor();
    internal void set_HueColor(ExpressionInfo value);
    internal ExpressionInfo get_OffsetX();
    internal void set_OffsetX(ExpressionInfo value);
    internal ExpressionInfo get_OffsetY();
    internal void set_OffsetY(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(CapImageExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal string EvaluateHueColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateOffsetX(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateOffsetY(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.Cell : IDOwner {
    protected int m_exprHostID;
    protected int m_parentRowID;
    protected int m_parentColumnID;
    protected int m_indexInCollection;
    protected bool m_hasInnerGroupTreeHierarchy;
    [ReferenceAttribute]
protected DataRegion m_dataRegionDef;
    protected List`1<int> m_aggregateIndexes;
    protected List`1<int> m_postSortAggregateIndexes;
    protected List`1<int> m_runningValueIndexes;
    private bool m_needToCacheDataRows;
    private Byte[] m_textboxesInScope;
    private Byte[] m_variablesInScope;
    private List`1<IInScopeEventSource> m_inScopeEventSources;
    protected bool m_inDynamicRowAndColumnContext;
    private static Declaration m_Declaration;
    protected IDOwner m_parentColumnIDOwner;
    protected List`1<DataAggregateInfo> m_aggregates;
    protected List`1<DataAggregateInfo> m_postSortAggregates;
    protected List`1<RunningValueInfo> m_runningValues;
    internal int ExpressionHostID { get; internal set; }
    internal int ParentRowMemberID { get; }
    internal int ParentColumnMemberID { get; }
    internal DataRegion DataRegionDef { get; }
    internal List`1<int> AggregateIndexes { get; }
    internal List`1<int> PostSortAggregateIndexes { get; }
    internal List`1<int> RunningValueIndexes { get; }
    internal bool HasInnerGroupTreeHierarchy { get; }
    internal bool SimpleGroupTreeCell { get; }
    internal List`1<DataAggregateInfo> Aggregates { get; }
    internal List`1<DataAggregateInfo> PostSortAggregates { get; }
    internal List`1<RunningValueInfo> RunningValues { get; }
    public List`1<InstancePathItem> InstancePath { get; }
    protected bool IsDataRegionBodyCell { get; }
    public int IndexInCollection { get; public set; }
    public IndexedInCollectionType IndexedInCollectionType { get; }
    internal List`1<IInScopeEventSource> InScopeEventSources { get; }
    internal bool InDynamicRowAndColumnContext { get; }
    private bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.NeedToCacheDataRows { get; private set; }
    internal Cell(int id, DataRegion dataRegion);
    private static Cell();
    internal int get_ExpressionHostID();
    internal void set_ExpressionHostID(int value);
    internal int get_ParentRowMemberID();
    internal int get_ParentColumnMemberID();
    internal DataRegion get_DataRegionDef();
    internal List`1<int> get_AggregateIndexes();
    internal List`1<int> get_PostSortAggregateIndexes();
    internal List`1<int> get_RunningValueIndexes();
    internal bool get_HasInnerGroupTreeHierarchy();
    internal bool get_SimpleGroupTreeCell();
    internal List`1<DataAggregateInfo> get_Aggregates();
    internal List`1<DataAggregateInfo> get_PostSortAggregates();
    internal List`1<RunningValueInfo> get_RunningValues();
    public virtual List`1<InstancePathItem> get_InstancePath();
    protected virtual bool get_IsDataRegionBodyCell();
    public sealed virtual int get_IndexInCollection();
    public sealed virtual void set_IndexInCollection(int value);
    public sealed virtual IndexedInCollectionType get_IndexedInCollectionType();
    internal List`1<IInScopeEventSource> get_InScopeEventSources();
    internal bool get_InDynamicRowAndColumnContext();
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.get_NeedToCacheDataRows();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.set_NeedToCacheDataRows(bool value);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.VariableInScope(int sequenceIndex);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.TextboxInScope(int sequenceIndex);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.ResetTextBoxImpls(OnDemandProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeTextBox(TextBox textbox);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeEventSource(IInScopeEventSource eventSource);
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetAggregateList();
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetPostSortAggregateList();
    private sealed virtual override List`1<RunningValueInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.ClearIfEmpty();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.ClearIfEmpty();
    internal void GenerateAggregateIndexes(Dictionary`2<string, int> aggregateIndexMapping, Dictionary`2<string, int> postSortAggregateIndexMapping, Dictionary`2<string, int> runningValueIndexMapping);
    private static void GenerateAggregateIndexes(List`1<AggregateType> cellAggregates, Dictionary`2<string, int> aggregateIndexMapping, List`1& aggregateIndexes);
    internal static bool ContainsInnerGroupTreeHierarchy(ReportItem cellContents);
    internal virtual void DetermineGroupTreeRequirement();
    internal void Initialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal abstract virtual void InternalInitialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CellList : ArrayList {
    internal Cell Item { get; }
    internal CellList(int capacity);
    internal Cell get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Chart : DataRegion {
    private ChartMemberList m_categoryMembers;
    private ChartMemberList m_seriesMembers;
    private ChartSeriesList m_chartSeriesCollection;
    private List`1<ChartDerivedSeries> m_chartDerivedSeriesCollection;
    private ExpressionInfo m_palette;
    private ExpressionInfo m_paletteHatchBehavior;
    private List`1<ChartArea> m_chartAreas;
    private List`1<ChartLegend> m_legends;
    private List`1<ChartTitle> m_titles;
    private List`1<ChartCustomPaletteColor> m_customPaletteColors;
    private DataValueList m_codeParameters;
    private ChartBorderSkin m_borderSkin;
    private ChartNoDataMessage m_noDataMessage;
    private ExpressionInfo m_dynamicHeight;
    private ExpressionInfo m_dynamicWidth;
    private bool m_dataValueSequenceRendering;
    private bool m_hasDataValueAggregates;
    private bool m_hasSeriesPlotTypeLine;
    private Nullable`1<bool> m_hasStaticColumns;
    private Nullable`1<bool> m_hasStaticRows;
    private static Declaration m_Declaration;
    private int m_actionOwnerCounter;
    private ChartExprHost m_chartExprHost;
    internal ObjectType ObjectType { get; }
    internal HierarchyNodeList ColumnMembers { get; }
    internal HierarchyNodeList RowMembers { get; }
    internal RowList Rows { get; }
    internal ChartMemberList CategoryMembers { get; internal set; }
    internal ChartMemberList SeriesMembers { get; internal set; }
    internal ChartSeriesList ChartSeriesCollection { get; internal set; }
    internal List`1<ChartDerivedSeries> DerivedSeriesCollection { get; internal set; }
    internal bool HasStaticColumns { get; }
    internal bool HasStaticRows { get; }
    internal ExpressionInfo DynamicWidth { get; internal set; }
    internal ExpressionInfo DynamicHeight { get; internal set; }
    internal List`1<ChartArea> ChartAreas { get; internal set; }
    internal List`1<ChartLegend> Legends { get; internal set; }
    internal List`1<ChartTitle> Titles { get; internal set; }
    internal ExpressionInfo Palette { get; internal set; }
    internal ExpressionInfo PaletteHatchBehavior { get; internal set; }
    internal DataValueList CodeParameters { get; internal set; }
    internal List`1<ChartCustomPaletteColor> CustomPaletteColors { get; internal set; }
    internal ChartBorderSkin BorderSkin { get; internal set; }
    internal ChartNoDataMessage NoDataMessage { get; internal set; }
    internal ChartExprHost ChartExprHost { get; }
    protected IndexedExprHost UserSortExpressionsHost { get; }
    internal bool HasSeriesPlotTypeLine { get; internal set; }
    internal bool HasDataValueAggregates { get; internal set; }
    internal int SeriesCount { get; internal set; }
    internal int CategoryCount { get; internal set; }
    internal bool DataValueSequenceRendering { get; }
    internal Chart(ReportItem parent);
    internal Chart(int id, ReportItem parent);
    private static Chart();
    internal virtual ObjectType get_ObjectType();
    internal virtual HierarchyNodeList get_ColumnMembers();
    internal virtual HierarchyNodeList get_RowMembers();
    internal virtual RowList get_Rows();
    internal ChartMemberList get_CategoryMembers();
    internal void set_CategoryMembers(ChartMemberList value);
    internal ChartMemberList get_SeriesMembers();
    internal void set_SeriesMembers(ChartMemberList value);
    internal ChartSeriesList get_ChartSeriesCollection();
    internal void set_ChartSeriesCollection(ChartSeriesList value);
    internal List`1<ChartDerivedSeries> get_DerivedSeriesCollection();
    internal void set_DerivedSeriesCollection(List`1<ChartDerivedSeries> value);
    internal bool get_HasStaticColumns();
    internal bool get_HasStaticRows();
    internal ExpressionInfo get_DynamicWidth();
    internal void set_DynamicWidth(ExpressionInfo value);
    internal ExpressionInfo get_DynamicHeight();
    internal void set_DynamicHeight(ExpressionInfo value);
    internal List`1<ChartArea> get_ChartAreas();
    internal void set_ChartAreas(List`1<ChartArea> value);
    internal List`1<ChartLegend> get_Legends();
    internal void set_Legends(List`1<ChartLegend> value);
    internal List`1<ChartTitle> get_Titles();
    internal void set_Titles(List`1<ChartTitle> value);
    internal ExpressionInfo get_Palette();
    internal void set_Palette(ExpressionInfo value);
    internal ExpressionInfo get_PaletteHatchBehavior();
    internal void set_PaletteHatchBehavior(ExpressionInfo value);
    internal DataValueList get_CodeParameters();
    internal void set_CodeParameters(DataValueList value);
    internal List`1<ChartCustomPaletteColor> get_CustomPaletteColors();
    internal void set_CustomPaletteColors(List`1<ChartCustomPaletteColor> value);
    internal ChartBorderSkin get_BorderSkin();
    internal void set_BorderSkin(ChartBorderSkin value);
    internal ChartNoDataMessage get_NoDataMessage();
    internal void set_NoDataMessage(ChartNoDataMessage value);
    internal ChartExprHost get_ChartExprHost();
    protected virtual IndexedExprHost get_UserSortExpressionsHost();
    internal bool get_HasSeriesPlotTypeLine();
    internal void set_HasSeriesPlotTypeLine(bool value);
    internal bool get_HasDataValueAggregates();
    internal void set_HasDataValueAggregates(bool value);
    internal int get_SeriesCount();
    internal void set_SeriesCount(int value);
    internal int get_CategoryCount();
    internal void set_CategoryCount(int value);
    internal bool get_DataValueSequenceRendering();
    private bool ContainsStatic(ChartMember member);
    internal virtual bool Initialize(InitializationContext context);
    protected virtual bool InitializeMembers(InitializationContext context);
    protected virtual void InitializeCorner(InitializationContext context);
    protected virtual bool ValidateInnerStructure(InitializationContext context);
    private bool CalculateDataValueSequenceRendering();
    private bool IsYukonDataRendererType(string type, string subType);
    internal ChartDataPoint GetDataPoint(int seriesIndex, int categoryIndex);
    internal ChartDataPoint GetDataPoint(int cellIndex);
    internal ChartMember GetChartMember(ChartSeries chartSeries);
    internal ChartMember GetChartMember(ChartMemberList chartMemberList, int memberCellIndex);
    internal List`1<ChartDerivedSeries> GetChildrenDerivedSeries(string chartSeriesName);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal int GenerateActionOwnerID();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void DataRegionContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    internal virtual object EvaluateNoRowsMessageExpression();
    internal string EvaluateDynamicWidth(ChartInstance chartInstance, OnDemandProcessingContext context);
    internal string EvaluateDynamicHeight(ChartInstance chartInstance, OnDemandProcessingContext context);
    internal ChartPalette EvaluatePalette(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal PaletteHatchBehavior EvaluatePaletteHatchBehavior(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartAlignType : object {
    private ExpressionInfo m_position;
    private ExpressionInfo m_axesView;
    private ExpressionInfo m_cursor;
    private ExpressionInfo m_innerPlotPosition;
    [ReferenceAttribute]
private Chart m_chart;
    private static Declaration m_Declaration;
    private ChartArea m_chartArea;
    internal ExpressionInfo Cursor { get; internal set; }
    internal ExpressionInfo AxesView { get; internal set; }
    internal ExpressionInfo Position { get; internal set; }
    internal ExpressionInfo InnerPlotPosition { get; internal set; }
    internal ChartAreaExprHost ExprHost { get; }
    internal ChartAlignType(Chart chart);
    private static ChartAlignType();
    internal ExpressionInfo get_Cursor();
    internal void set_Cursor(ExpressionInfo value);
    internal ExpressionInfo get_AxesView();
    internal void set_AxesView(ExpressionInfo value);
    internal ExpressionInfo get_Position();
    internal void set_Position(ExpressionInfo value);
    internal ExpressionInfo get_InnerPlotPosition();
    internal void set_InnerPlotPosition(ExpressionInfo value);
    internal ChartAreaExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal void SetExprHost(ChartArea chartArea);
    internal bool EvaluateAxesView(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal bool EvaluateCursor(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal bool EvaluatePosition(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal bool EvaluateInnerPlotPosition(IReportScopeInstance instance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartArea : ChartStyleContainer {
    private string m_name;
    private List`1<ChartAxis> m_categoryAxes;
    private List`1<ChartAxis> m_valueAxes;
    private ChartThreeDProperties m_3dProperties;
    private ChartElementPosition m_chartElementPosition;
    private ChartElementPosition m_chartInnerPlotPosition;
    private int m_exprHostID;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_alignOrientation;
    private ChartAlignType m_chartAlignType;
    private string m_alignWithChartArea;
    private ExpressionInfo m_equallySizedAxesFont;
    private static Declaration m_Declaration;
    private ChartAreaExprHost m_exprHost;
    internal string ChartAreaName { get; internal set; }
    internal List`1<ChartAxis> CategoryAxes { get; internal set; }
    internal List`1<ChartAxis> ValueAxes { get; internal set; }
    internal ChartThreeDProperties ThreeDProperties { get; internal set; }
    internal ChartAreaExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo AlignOrientation { get; internal set; }
    internal ChartAlignType ChartAlignType { get; internal set; }
    internal string AlignWithChartArea { get; internal set; }
    internal ExpressionInfo EquallySizedAxesFont { get; internal set; }
    internal ChartElementPosition ChartElementPosition { get; internal set; }
    internal ChartElementPosition ChartInnerPlotPosition { get; internal set; }
    internal Chart Chart { get; internal set; }
    internal ChartArea(Chart chart);
    private static ChartArea();
    internal string get_ChartAreaName();
    internal void set_ChartAreaName(string value);
    internal List`1<ChartAxis> get_CategoryAxes();
    internal void set_CategoryAxes(List`1<ChartAxis> value);
    internal List`1<ChartAxis> get_ValueAxes();
    internal void set_ValueAxes(List`1<ChartAxis> value);
    internal ChartThreeDProperties get_ThreeDProperties();
    internal void set_ThreeDProperties(ChartThreeDProperties value);
    internal ChartAreaExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_AlignOrientation();
    internal void set_AlignOrientation(ExpressionInfo value);
    internal ChartAlignType get_ChartAlignType();
    internal void set_ChartAlignType(ChartAlignType value);
    internal string get_AlignWithChartArea();
    internal void set_AlignWithChartArea(string value);
    internal ExpressionInfo get_EquallySizedAxesFont();
    internal void set_EquallySizedAxesFont(ExpressionInfo value);
    internal ChartElementPosition get_ChartElementPosition();
    internal void set_ChartElementPosition(ChartElementPosition value);
    internal ChartElementPosition get_ChartInnerPlotPosition();
    internal void set_ChartInnerPlotPosition(ChartElementPosition value);
    internal Chart get_Chart();
    internal void set_Chart(Chart value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal void SetExprHost(ChartAreaExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal bool EvaluateHidden(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartAreaAlignOrientations EvaluateAlignOrientation(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal bool EvaluateEquallySizedAxesFont(IReportScopeInstance instance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxis : ChartStyleContainer {
    protected string m_name;
    private ChartAxisTitle m_title;
    private ChartGridLines m_majorGridLines;
    private ChartGridLines m_minorGridLines;
    private DataValueList m_customProperties;
    private List`1<ChartStripLine> m_chartStripLines;
    private ExpressionInfo m_visible;
    private ExpressionInfo m_margin;
    private ExpressionInfo m_interval;
    private ExpressionInfo m_intervalType;
    private ExpressionInfo m_intervalOffset;
    private ExpressionInfo m_intervalOffsetType;
    private ChartTickMarks m_majorTickMarks;
    private ChartTickMarks m_minorTickMarks;
    private ExpressionInfo m_marksAlwaysAtPlotEdge;
    private ExpressionInfo m_reverse;
    private ExpressionInfo m_location;
    private ExpressionInfo m_interlaced;
    private ExpressionInfo m_interlacedColor;
    private ExpressionInfo m_logScale;
    private ExpressionInfo m_logBase;
    private ExpressionInfo m_hideLabels;
    private ExpressionInfo m_angle;
    private ExpressionInfo m_arrows;
    private ExpressionInfo m_preventFontShrink;
    private ExpressionInfo m_preventFontGrow;
    private ExpressionInfo m_preventLabelOffset;
    private ExpressionInfo m_preventWordWrap;
    private ExpressionInfo m_allowLabelRotation;
    private ExpressionInfo m_includeZero;
    private ExpressionInfo m_labelsAutoFitDisabled;
    private ExpressionInfo m_minFontSize;
    private ExpressionInfo m_maxFontSize;
    private ExpressionInfo m_offsetLabels;
    private ExpressionInfo m_hideEndLabels;
    private ChartAxisScaleBreak m_axisScaleBreak;
    private ExpressionInfo m_crossAt;
    private ExpressionInfo m_min;
    private ExpressionInfo m_max;
    private bool m_scalar;
    private bool m_autoCrossAt;
    private bool m_autoScaleMin;
    private bool m_autoScaleMax;
    private int m_exprHostID;
    private ExpressionInfo m_variableAutoInterval;
    private ExpressionInfo m_labelInterval;
    private ExpressionInfo m_labelIntervalType;
    private ExpressionInfo m_labelIntervalOffset;
    private ExpressionInfo m_labelIntervalOffsetType;
    private ChartAxisExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal string AxisName { get; internal set; }
    internal ChartAxisTitle Title { get; internal set; }
    internal ChartGridLines MajorGridLines { get; internal set; }
    internal ChartGridLines MinorGridLines { get; internal set; }
    internal List`1<ChartStripLine> StripLines { get; internal set; }
    public DataValueList CustomProperties { get; public set; }
    internal bool Scalar { get; internal set; }
    internal ExpressionInfo Minimum { get; internal set; }
    internal ExpressionInfo Maximum { get; internal set; }
    internal ExpressionInfo CrossAt { get; internal set; }
    internal bool AutoCrossAt { get; internal set; }
    internal bool AutoScaleMin { get; internal set; }
    internal bool AutoScaleMax { get; internal set; }
    internal ExpressionInfo Visible { get; internal set; }
    internal ExpressionInfo Margin { get; internal set; }
    internal ExpressionInfo Interval { get; internal set; }
    internal ExpressionInfo IntervalType { get; internal set; }
    internal ExpressionInfo IntervalOffset { get; internal set; }
    internal ExpressionInfo IntervalOffsetType { get; internal set; }
    internal ChartTickMarks MajorTickMarks { get; internal set; }
    internal ChartTickMarks MinorTickMarks { get; internal set; }
    internal ExpressionInfo MarksAlwaysAtPlotEdge { get; internal set; }
    internal ExpressionInfo Reverse { get; internal set; }
    internal ExpressionInfo Location { get; internal set; }
    internal ExpressionInfo Interlaced { get; internal set; }
    internal ExpressionInfo InterlacedColor { get; internal set; }
    internal ExpressionInfo LogScale { get; internal set; }
    internal ExpressionInfo LogBase { get; internal set; }
    internal ExpressionInfo HideLabels { get; internal set; }
    internal ExpressionInfo Angle { get; internal set; }
    internal ExpressionInfo Arrows { get; internal set; }
    internal ExpressionInfo PreventFontShrink { get; internal set; }
    internal ExpressionInfo PreventFontGrow { get; internal set; }
    internal ExpressionInfo PreventLabelOffset { get; internal set; }
    internal ExpressionInfo PreventWordWrap { get; internal set; }
    internal ExpressionInfo AllowLabelRotation { get; internal set; }
    internal ExpressionInfo IncludeZero { get; internal set; }
    internal ExpressionInfo LabelsAutoFitDisabled { get; internal set; }
    internal ExpressionInfo MinFontSize { get; internal set; }
    internal ExpressionInfo MaxFontSize { get; internal set; }
    internal ExpressionInfo OffsetLabels { get; internal set; }
    internal ExpressionInfo HideEndLabels { get; internal set; }
    internal ChartAxisScaleBreak AxisScaleBreak { get; internal set; }
    internal ExpressionInfo VariableAutoInterval { get; internal set; }
    internal ExpressionInfo LabelInterval { get; internal set; }
    internal ExpressionInfo LabelIntervalType { get; internal set; }
    internal ExpressionInfo LabelIntervalOffset { get; internal set; }
    internal ExpressionInfo LabelIntervalOffsetType { get; internal set; }
    internal ChartAxisExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal ChartAxis(Chart chart);
    private static ChartAxis();
    internal string get_AxisName();
    internal void set_AxisName(string value);
    internal ChartAxisTitle get_Title();
    internal void set_Title(ChartAxisTitle value);
    internal ChartGridLines get_MajorGridLines();
    internal void set_MajorGridLines(ChartGridLines value);
    internal ChartGridLines get_MinorGridLines();
    internal void set_MinorGridLines(ChartGridLines value);
    internal List`1<ChartStripLine> get_StripLines();
    internal void set_StripLines(List`1<ChartStripLine> value);
    public sealed virtual DataValueList get_CustomProperties();
    public void set_CustomProperties(DataValueList value);
    internal bool get_Scalar();
    internal void set_Scalar(bool value);
    internal ExpressionInfo get_Minimum();
    internal void set_Minimum(ExpressionInfo value);
    internal ExpressionInfo get_Maximum();
    internal void set_Maximum(ExpressionInfo value);
    internal ExpressionInfo get_CrossAt();
    internal void set_CrossAt(ExpressionInfo value);
    internal bool get_AutoCrossAt();
    internal void set_AutoCrossAt(bool value);
    internal bool get_AutoScaleMin();
    internal void set_AutoScaleMin(bool value);
    internal bool get_AutoScaleMax();
    internal void set_AutoScaleMax(bool value);
    internal ExpressionInfo get_Visible();
    internal void set_Visible(ExpressionInfo value);
    internal ExpressionInfo get_Margin();
    internal void set_Margin(ExpressionInfo value);
    internal ExpressionInfo get_Interval();
    internal void set_Interval(ExpressionInfo value);
    internal ExpressionInfo get_IntervalType();
    internal void set_IntervalType(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffset();
    internal void set_IntervalOffset(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffsetType();
    internal void set_IntervalOffsetType(ExpressionInfo value);
    internal ChartTickMarks get_MajorTickMarks();
    internal void set_MajorTickMarks(ChartTickMarks value);
    internal ChartTickMarks get_MinorTickMarks();
    internal void set_MinorTickMarks(ChartTickMarks value);
    internal ExpressionInfo get_MarksAlwaysAtPlotEdge();
    internal void set_MarksAlwaysAtPlotEdge(ExpressionInfo value);
    internal ExpressionInfo get_Reverse();
    internal void set_Reverse(ExpressionInfo value);
    internal ExpressionInfo get_Location();
    internal void set_Location(ExpressionInfo value);
    internal ExpressionInfo get_Interlaced();
    internal void set_Interlaced(ExpressionInfo value);
    internal ExpressionInfo get_InterlacedColor();
    internal void set_InterlacedColor(ExpressionInfo value);
    internal ExpressionInfo get_LogScale();
    internal void set_LogScale(ExpressionInfo value);
    internal ExpressionInfo get_LogBase();
    internal void set_LogBase(ExpressionInfo value);
    internal ExpressionInfo get_HideLabels();
    internal void set_HideLabels(ExpressionInfo value);
    internal ExpressionInfo get_Angle();
    internal void set_Angle(ExpressionInfo value);
    internal ExpressionInfo get_Arrows();
    internal void set_Arrows(ExpressionInfo value);
    internal ExpressionInfo get_PreventFontShrink();
    internal void set_PreventFontShrink(ExpressionInfo value);
    internal ExpressionInfo get_PreventFontGrow();
    internal void set_PreventFontGrow(ExpressionInfo value);
    internal ExpressionInfo get_PreventLabelOffset();
    internal void set_PreventLabelOffset(ExpressionInfo value);
    internal ExpressionInfo get_PreventWordWrap();
    internal void set_PreventWordWrap(ExpressionInfo value);
    internal ExpressionInfo get_AllowLabelRotation();
    internal void set_AllowLabelRotation(ExpressionInfo value);
    internal ExpressionInfo get_IncludeZero();
    internal void set_IncludeZero(ExpressionInfo value);
    internal ExpressionInfo get_LabelsAutoFitDisabled();
    internal void set_LabelsAutoFitDisabled(ExpressionInfo value);
    internal ExpressionInfo get_MinFontSize();
    internal void set_MinFontSize(ExpressionInfo value);
    internal ExpressionInfo get_MaxFontSize();
    internal void set_MaxFontSize(ExpressionInfo value);
    internal ExpressionInfo get_OffsetLabels();
    internal void set_OffsetLabels(ExpressionInfo value);
    internal ExpressionInfo get_HideEndLabels();
    internal void set_HideEndLabels(ExpressionInfo value);
    internal ChartAxisScaleBreak get_AxisScaleBreak();
    internal void set_AxisScaleBreak(ChartAxisScaleBreak value);
    internal ExpressionInfo get_VariableAutoInterval();
    internal void set_VariableAutoInterval(ExpressionInfo value);
    internal ExpressionInfo get_LabelInterval();
    internal void set_LabelInterval(ExpressionInfo value);
    internal ExpressionInfo get_LabelIntervalType();
    internal void set_LabelIntervalType(ExpressionInfo value);
    internal ExpressionInfo get_LabelIntervalOffset();
    internal void set_LabelIntervalOffset(ExpressionInfo value);
    internal ExpressionInfo get_LabelIntervalOffsetType();
    internal void set_LabelIntervalOffsetType(ExpressionInfo value);
    internal ChartAxisExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal void SetExprHost(ChartAxisExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context, bool isValueAxis);
    private string GetPropertyName(bool isValueAxis);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal object EvaluateCrossAt(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal object EvaluateMin(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal object EvaluateMax(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartAxisArrow EvaluateArrows(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateVisible(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMargin(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateIntervalOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalOffsetType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateMarksAlwaysAtPlotEdge(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateReverse(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartAxisLocation EvaluateLocation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateInterlaced(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateInterlacedColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateLogScale(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLogBase(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHideLabels(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluatePreventFontShrink(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluatePreventFontGrow(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluatePreventLabelOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluatePreventWordWrap(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartAxisLabelRotation EvaluateAllowLabelRotation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateIncludeZero(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateLabelsAutoFitDisabled(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMinFontSize(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMaxFontSize(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateOffsetLabels(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHideEndLabels(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateVariableAutoInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLabelInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateLabelIntervalType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLabelIntervalOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateLabelIntervalOffsetType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisScaleBreak : ChartStyleContainer {
    private ExpressionInfo m_enabled;
    private ExpressionInfo m_breakLineType;
    private ExpressionInfo m_collapsibleSpaceThreshold;
    private ExpressionInfo m_maxNumberOfBreaks;
    private ExpressionInfo m_spacing;
    private ExpressionInfo m_includeZero;
    private static Declaration m_Declaration;
    private ChartAxisScaleBreakExprHost m_exprHost;
    internal ChartAxisScaleBreakExprHost ExprHost { get; }
    internal ExpressionInfo Enabled { get; internal set; }
    internal ExpressionInfo BreakLineType { get; internal set; }
    internal ExpressionInfo CollapsibleSpaceThreshold { get; internal set; }
    internal ExpressionInfo MaxNumberOfBreaks { get; internal set; }
    internal ExpressionInfo Spacing { get; internal set; }
    internal ExpressionInfo IncludeZero { get; internal set; }
    internal ChartAxisScaleBreak(Chart chart);
    private static ChartAxisScaleBreak();
    internal ChartAxisScaleBreakExprHost get_ExprHost();
    internal ExpressionInfo get_Enabled();
    internal void set_Enabled(ExpressionInfo value);
    internal ExpressionInfo get_BreakLineType();
    internal void set_BreakLineType(ExpressionInfo value);
    internal ExpressionInfo get_CollapsibleSpaceThreshold();
    internal void set_CollapsibleSpaceThreshold(ExpressionInfo value);
    internal ExpressionInfo get_MaxNumberOfBreaks();
    internal void set_MaxNumberOfBreaks(ExpressionInfo value);
    internal ExpressionInfo get_Spacing();
    internal void set_Spacing(ExpressionInfo value);
    internal ExpressionInfo get_IncludeZero();
    internal void set_IncludeZero(ExpressionInfo value);
    internal void SetExprHost(ChartAxisScaleBreakExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal bool EvaluateEnabled(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartBreakLineType EvaluateBreakLineType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateCollapsibleSpaceThreshold(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateMaxNumberOfBreaks(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateSpacing(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateIncludeZero(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartAxisTitle : ChartTitleBase {
    private ExpressionInfo m_position;
    private ExpressionInfo m_textOrientation;
    private static Declaration m_Declaration;
    internal ExpressionInfo Position { get; internal set; }
    internal ExpressionInfo TextOrientation { get; internal set; }
    internal ChartAxisTitle(Chart chart);
    private static ChartAxisTitle();
    internal ExpressionInfo get_Position();
    internal void set_Position(ExpressionInfo value);
    internal ExpressionInfo get_TextOrientation();
    internal void set_TextOrientation(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal ChartAxisTitlePositions EvaluatePosition(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal TextOrientations EvaluateTextOrientation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartBorderSkin : ChartStyleContainer {
    private ExpressionInfo m_borderSkinType;
    private static Declaration m_Declaration;
    private ChartBorderSkinExprHost m_exprHost;
    internal ChartBorderSkinExprHost ExprHost { get; }
    internal ExpressionInfo BorderSkinType { get; internal set; }
    internal ChartBorderSkin(Chart chart);
    private static ChartBorderSkin();
    internal ChartBorderSkinExprHost get_ExprHost();
    internal ExpressionInfo get_BorderSkinType();
    internal void set_BorderSkinType(ExpressionInfo value);
    internal void SetExprHost(ChartBorderSkinExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal ChartBorderSkinType EvaluateBorderSkinType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartCustomPaletteColor : object {
    private int m_exprHostID;
    [ReferenceAttribute]
private Chart m_chart;
    private ExpressionInfo m_color;
    private static Declaration m_Declaration;
    private ChartCustomPaletteColorExprHost m_exprHost;
    internal ChartCustomPaletteColorExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal ExpressionInfo Color { get; internal set; }
    internal ChartCustomPaletteColor(Chart chart);
    private static ChartCustomPaletteColor();
    internal ChartCustomPaletteColorExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal ExpressionInfo get_Color();
    internal void set_Color(ExpressionInfo value);
    internal void SetExprHost(ChartCustomPaletteColorExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context, int index);
    internal string EvaluateColor(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataLabel : ChartStyleContainer {
    private ExpressionInfo m_visible;
    private ExpressionInfo m_label;
    private ExpressionInfo m_position;
    private ExpressionInfo m_rotation;
    private ExpressionInfo m_useValueAsLabel;
    private Action m_action;
    private ExpressionInfo m_toolTip;
    [ReferenceAttribute]
private ChartDataPoint m_chartDataPoint;
    [ReferenceAttribute]
private ChartSeries m_chartSeries;
    private static Declaration m_Declaration;
    private Formatter m_formatter;
    private ChartDataLabelExprHost m_exprHost;
    internal ExpressionInfo Visible { get; internal set; }
    internal ExpressionInfo Label { get; internal set; }
    internal ExpressionInfo UseValueAsLabel { get; internal set; }
    internal ExpressionInfo Position { get; internal set; }
    internal ExpressionInfo Rotation { get; internal set; }
    internal Action Action { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ChartDataLabelExprHost ExprHost { get; }
    public IInstancePath InstancePath { get; }
    internal ChartDataLabel(Chart chart, ChartDataPoint chartDataPoint);
    internal ChartDataLabel(Chart chart, ChartSeries chartSeries);
    private static ChartDataLabel();
    internal ExpressionInfo get_Visible();
    internal void set_Visible(ExpressionInfo value);
    internal ExpressionInfo get_Label();
    internal void set_Label(ExpressionInfo value);
    internal ExpressionInfo get_UseValueAsLabel();
    internal void set_UseValueAsLabel(ExpressionInfo value);
    internal ExpressionInfo get_Position();
    internal void set_Position(ExpressionInfo value);
    internal ExpressionInfo get_Rotation();
    internal void set_Rotation(ExpressionInfo value);
    internal Action get_Action();
    internal void set_Action(Action value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ChartDataLabelExprHost get_ExprHost();
    public virtual IInstancePath get_InstancePath();
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void Initialize(InitializationContext context);
    internal void SetExprHost(ChartDataLabelExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal VariantResult EvaluateLabel(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartDataLabelPositions EvaluatePosition(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateRotation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateUseValueAsLabel(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateVisible(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string GetFormattedValue(VariantResult originalValue, IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPoint : Cell {
    private ChartDataPointValues m_dataPointValues;
    private ChartDataLabel m_dataLabel;
    private Action m_action;
    private Style m_styleClass;
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private DataValueList m_customProperties;
    private ChartMarker m_marker;
    private ExpressionInfo m_axisLabel;
    private ChartItemInLegend m_itemInLegend;
    private ExpressionInfo m_toolTip;
    private ChartDataPointExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    private static Declaration m_Declaration;
    private Formatter m_formatter;
    protected bool IsDataRegionBodyCell { get; }
    internal ChartDataPointValues DataPointValues { get; internal set; }
    internal ChartDataLabel DataLabel { get; internal set; }
    internal Action Action { get; internal set; }
    public Style StyleClass { get; public set; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.InstancePath { get; }
    public ObjectType ObjectType { get; }
    public string Name { get; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    private DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.CustomProperties { get; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.InstancePath { get; }
    internal DataValueList CustomProperties { get; internal set; }
    internal ChartDataPointExprHost ExprHost { get; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ChartMarker Marker { get; internal set; }
    internal ExpressionInfo AxisLabel { get; internal set; }
    internal ChartItemInLegend ItemInLegend { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ChartDataPoint(int id, Chart chart);
    private static ChartDataPoint();
    protected virtual bool get_IsDataRegionBodyCell();
    internal ChartDataPointValues get_DataPointValues();
    internal void set_DataPointValues(ChartDataPointValues value);
    internal ChartDataLabel get_DataLabel();
    internal void set_DataLabel(ChartDataLabel value);
    internal Action get_Action();
    internal void set_Action(Action value);
    public sealed virtual Style get_StyleClass();
    public void set_StyleClass(Style value);
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_InstancePath();
    public sealed virtual ObjectType get_ObjectType();
    public sealed virtual string get_Name();
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    private sealed virtual override DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_CustomProperties();
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_InstancePath();
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal ChartDataPointExprHost get_ExprHost();
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ChartMarker get_Marker();
    internal void set_Marker(ChartMarker value);
    internal ExpressionInfo get_AxisLabel();
    internal void set_AxisLabel(ExpressionInfo value);
    internal ChartItemInLegend get_ItemInLegend();
    internal void set_ItemInLegend(ChartItemInLegend value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void InternalInitialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal void DataRendererInitialize(InitializationContext context);
    internal static Declaration GetDeclaration();
    internal VariantResult EvaluateAxisLabel(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal void SetExprHost(ChartDataPointExprHost exprHost, ObjectModelImpl reportObjectModel);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointList : CellList {
    internal ChartDataPoint Item { get; }
    internal ChartDataPointList(int capacity);
    internal ChartDataPoint get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartDataPointValues : object {
    private ExpressionInfo m_x;
    private ExpressionInfo m_y;
    private ExpressionInfo m_size;
    private ExpressionInfo m_high;
    private ExpressionInfo m_low;
    private ExpressionInfo m_start;
    private ExpressionInfo m_end;
    private ExpressionInfo m_mean;
    private ExpressionInfo m_median;
    [ReferenceAttribute]
private ChartDataPoint m_dataPoint;
    [ReferenceAttribute]
private Chart m_chart;
    private static Declaration m_Declaration;
    internal ExpressionInfo X { get; internal set; }
    internal ExpressionInfo Y { get; internal set; }
    internal ExpressionInfo Size { get; internal set; }
    internal ExpressionInfo High { get; internal set; }
    internal ExpressionInfo Low { get; internal set; }
    internal ExpressionInfo Start { get; internal set; }
    internal ExpressionInfo End { get; internal set; }
    internal ExpressionInfo Mean { get; internal set; }
    internal ExpressionInfo Median { get; internal set; }
    internal ChartDataPointValues(Chart chart, ChartDataPoint dataPoint);
    private static ChartDataPointValues();
    internal ExpressionInfo get_X();
    internal void set_X(ExpressionInfo value);
    internal ExpressionInfo get_Y();
    internal void set_Y(ExpressionInfo value);
    internal ExpressionInfo get_Size();
    internal void set_Size(ExpressionInfo value);
    internal ExpressionInfo get_High();
    internal void set_High(ExpressionInfo value);
    internal ExpressionInfo get_Low();
    internal void set_Low(ExpressionInfo value);
    internal ExpressionInfo get_Start();
    internal void set_Start(ExpressionInfo value);
    internal ExpressionInfo get_End();
    internal void set_End(ExpressionInfo value);
    internal ExpressionInfo get_Mean();
    internal void set_Mean(ExpressionInfo value);
    internal ExpressionInfo get_Median();
    internal void set_Median(ExpressionInfo value);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal object PublishClone(AutomaticSubtotalContext context);
    internal VariantResult EvaluateX(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateY(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateSize(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateHigh(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateLow(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateStart(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateEnd(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateMean(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateMedian(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartDerivedSeries : object {
    private int m_exprHostID;
    [ReferenceAttribute]
private Chart m_chart;
    private ChartSeries m_sourceSeries;
    private ChartSeries m_series;
    private ExpressionInfo m_sourceChartSeriesName;
    private ExpressionInfo m_derivedSeriesFormula;
    private List`1<ChartFormulaParameter> m_chartFormulaParameters;
    private static Declaration m_Declaration;
    private ChartDerivedSeriesExprHost m_exprHost;
    internal ChartSeries SourceSeries { get; }
    internal ChartDerivedSeriesExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal ChartSeries Series { get; internal set; }
    internal List`1<ChartFormulaParameter> FormulaParameters { get; internal set; }
    internal string SourceChartSeriesName { get; internal set; }
    internal ChartSeriesFormula DerivedSeriesFormula { get; internal set; }
    internal ChartDerivedSeries(Chart chart);
    private static ChartDerivedSeries();
    internal ChartSeries get_SourceSeries();
    internal ChartDerivedSeriesExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal ChartSeries get_Series();
    internal void set_Series(ChartSeries value);
    internal List`1<ChartFormulaParameter> get_FormulaParameters();
    internal void set_FormulaParameters(List`1<ChartFormulaParameter> value);
    internal string get_SourceChartSeriesName();
    internal void set_SourceChartSeriesName(string value);
    internal ChartSeriesFormula get_DerivedSeriesFormula();
    internal void set_DerivedSeriesFormula(ChartSeriesFormula value);
    internal void SetExprHost(ChartDerivedSeriesExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context, int index);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartElementPosition : object {
    private ChartElementPositionExprHost m_exprHost;
    [ReferenceAttribute]
private Chart m_chart;
    private static Declaration m_Declaration;
    private ExpressionInfo m_top;
    private ExpressionInfo m_left;
    private ExpressionInfo m_height;
    private ExpressionInfo m_width;
    internal ExpressionInfo Top { get; internal set; }
    internal ExpressionInfo Left { get; internal set; }
    internal ExpressionInfo Height { get; internal set; }
    internal ExpressionInfo Width { get; internal set; }
    internal string OwnerName { get; }
    internal ChartElementPositionExprHost ExprHost { get; }
    internal ChartElementPosition(Chart chart);
    private static ChartElementPosition();
    internal ExpressionInfo get_Top();
    internal void set_Top(ExpressionInfo value);
    internal ExpressionInfo get_Left();
    internal void set_Left(ExpressionInfo value);
    internal ExpressionInfo get_Height();
    internal void set_Height(ExpressionInfo value);
    internal ExpressionInfo get_Width();
    internal void set_Width(ExpressionInfo value);
    internal string get_OwnerName();
    internal ChartElementPositionExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(ChartElementPositionExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual ObjectType GetObjectType();
    internal double EvaluateTop(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLeft(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateHeight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartEmptyPoints : ChartStyleContainer {
    private Action m_action;
    private ChartMarker m_marker;
    private ChartDataLabel m_dataLabel;
    private ExpressionInfo m_axisLabel;
    private DataValueList m_customProperties;
    private ExpressionInfo m_toolTip;
    [ReferenceAttribute]
private ChartSeries m_chartSeries;
    private static Declaration m_Declaration;
    private List`1<string> m_fieldsUsedInValueExpression;
    private ChartEmptyPointsExprHost m_exprHost;
    private Formatter m_formatter;
    internal ChartEmptyPointsExprHost ExprHost { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ChartMarker Marker { get; internal set; }
    internal ChartDataLabel DataLabel { get; internal set; }
    internal ExpressionInfo AxisLabel { get; internal set; }
    public DataValueList CustomProperties { get; public set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    public IInstancePath InstancePath { get; }
    internal ChartEmptyPoints(Chart chart, ChartSeries chartSeries);
    private static ChartEmptyPoints();
    internal ChartEmptyPointsExprHost get_ExprHost();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ChartMarker get_Marker();
    internal void set_Marker(ChartMarker value);
    internal ChartDataLabel get_DataLabel();
    internal void set_DataLabel(ChartDataLabel value);
    internal ExpressionInfo get_AxisLabel();
    internal void set_AxisLabel(ExpressionInfo value);
    public sealed virtual DataValueList get_CustomProperties();
    public void set_CustomProperties(DataValueList value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    public virtual IInstancePath get_InstancePath();
    internal void SetExprHost(ChartEmptyPointsExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal VariantResult EvaluateAxisLabel(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartFormulaParameter : object {
    private string m_name;
    private int m_exprHostID;
    [ReferenceAttribute]
private Chart m_chart;
    [ReferenceAttribute]
private ChartSeries m_sourceSeries;
    private ChartDerivedSeries m_parentDerivedSeries;
    private ExpressionInfo m_value;
    private string m_source;
    private static Declaration m_Declaration;
    private ChartFormulaParameterExprHost m_exprHost;
    internal string FormulaParameterName { get; internal set; }
    internal ChartFormulaParameterExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal ExpressionInfo Value { get; internal set; }
    internal string Source { get; internal set; }
    private ChartSeries SourceSeries { get; }
    internal ChartFormulaParameter(Chart chart, ChartDerivedSeries parentDerivedSeries);
    private static ChartFormulaParameter();
    internal string get_FormulaParameterName();
    internal void set_FormulaParameterName(string value);
    internal ChartFormulaParameterExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal string get_Source();
    internal void set_Source(string value);
    private ChartSeries get_SourceSeries();
    internal void SetExprHost(ChartFormulaParameterExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal VariantResult EvaluateValue(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartGridLines : ChartStyleContainer {
    private ExpressionInfo m_enabled;
    private ExpressionInfo m_interval;
    private ExpressionInfo m_intervalType;
    private ExpressionInfo m_intervalOffset;
    private ExpressionInfo m_intervalOffsetType;
    private ChartGridLinesExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ExpressionInfo Enabled { get; internal set; }
    internal ExpressionInfo Interval { get; internal set; }
    internal ExpressionInfo IntervalType { get; internal set; }
    internal ExpressionInfo IntervalOffset { get; internal set; }
    internal ExpressionInfo IntervalOffsetType { get; internal set; }
    internal ChartGridLinesExprHost ExprHost { get; }
    internal ChartGridLines(Chart chart);
    private static ChartGridLines();
    internal ExpressionInfo get_Enabled();
    internal void set_Enabled(ExpressionInfo value);
    internal ExpressionInfo get_Interval();
    internal void set_Interval(ExpressionInfo value);
    internal ExpressionInfo get_IntervalType();
    internal void set_IntervalType(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffset();
    internal void set_IntervalOffset(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffsetType();
    internal void set_IntervalOffsetType(ExpressionInfo value);
    internal ChartGridLinesExprHost get_ExprHost();
    internal void Initialize(InitializationContext context, bool isMajor);
    internal void SetExprHost(ChartGridLinesExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal ChartAutoBool EvaluateEnabled(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateInterval(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalType(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal double EvaluateIntervalOffset(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalOffsetType(IReportScopeInstance instance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartItemInLegend : object {
    [ReferenceAttribute]
private Chart m_chart;
    [ReferenceAttribute]
private ChartSeries m_chartSeries;
    [ReferenceAttribute]
private ChartDataPoint m_chartDataPoint;
    private Action m_action;
    private ExpressionInfo m_legendText;
    private ExpressionInfo m_toolTip;
    private ExpressionInfo m_hidden;
    private List`1<string> m_fieldsUsedInValueExpression;
    private static Declaration m_Declaration;
    private ChartDataPointInLegendExprHost m_exprHost;
    private Formatter m_formatter;
    internal ChartDataPointInLegendExprHost ExprHost { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ExpressionInfo LegendText { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    private IInstancePath InstancePath { get; }
    internal ChartItemInLegend(Chart chart, ChartDataPoint chartDataPoint);
    internal ChartItemInLegend(Chart chart, ChartSeries chartSeries);
    private static ChartItemInLegend();
    internal ChartDataPointInLegendExprHost get_ExprHost();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ExpressionInfo get_LegendText();
    internal void set_LegendText(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    private IInstancePath get_InstancePath();
    internal void SetExprHost(ChartDataPointInLegendExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal string EvaluateLegendText(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegend : ChartStyleContainer {
    private string m_name;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_position;
    private ExpressionInfo m_layout;
    private List`1<ChartLegendCustomItem> m_chartLegendCustomItems;
    private string m_dockToChartArea;
    private ExpressionInfo m_dockOutsideChartArea;
    private ChartLegendTitle m_chartLegendTitle;
    private ExpressionInfo m_autoFitTextDisabled;
    private ExpressionInfo m_minFontSize;
    private ExpressionInfo m_headerSeparator;
    private ExpressionInfo m_headerSeparatorColor;
    private ExpressionInfo m_columnSeparator;
    private ExpressionInfo m_columnSeparatorColor;
    private ExpressionInfo m_columnSpacing;
    private ExpressionInfo m_interlacedRows;
    private ExpressionInfo m_interlacedRowsColor;
    private ExpressionInfo m_equallySpacedItems;
    private ExpressionInfo m_reversed;
    private ExpressionInfo m_maxAutoSize;
    private ExpressionInfo m_textWrapThreshold;
    private List`1<ChartLegendColumn> m_chartLegendColumns;
    private int m_exprHostID;
    private ChartElementPosition m_chartElementPosition;
    private static Declaration m_Declaration;
    private ChartLegendExprHost m_exprHost;
    internal string LegendName { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo Position { get; internal set; }
    internal ExpressionInfo Layout { get; internal set; }
    internal string DockToChartArea { get; internal set; }
    internal ExpressionInfo DockOutsideChartArea { get; internal set; }
    internal ChartLegendTitle LegendTitle { get; internal set; }
    internal ExpressionInfo AutoFitTextDisabled { get; internal set; }
    internal ExpressionInfo MinFontSize { get; internal set; }
    internal ExpressionInfo HeaderSeparator { get; internal set; }
    internal ExpressionInfo HeaderSeparatorColor { get; internal set; }
    internal ExpressionInfo ColumnSeparator { get; internal set; }
    internal ExpressionInfo ColumnSeparatorColor { get; internal set; }
    internal ExpressionInfo ColumnSpacing { get; internal set; }
    internal ExpressionInfo InterlacedRows { get; internal set; }
    internal ExpressionInfo InterlacedRowsColor { get; internal set; }
    internal ExpressionInfo EquallySpacedItems { get; internal set; }
    internal ExpressionInfo Reversed { get; internal set; }
    internal ExpressionInfo MaxAutoSize { get; internal set; }
    internal ExpressionInfo TextWrapThreshold { get; internal set; }
    internal List`1<ChartLegendCustomItem> LegendCustomItems { get; internal set; }
    internal List`1<ChartLegendColumn> LegendColumns { get; internal set; }
    internal ChartElementPosition ChartElementPosition { get; internal set; }
    internal ChartLegendExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal ChartLegend(Chart chart);
    private static ChartLegend();
    internal string get_LegendName();
    internal void set_LegendName(string value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_Position();
    internal void set_Position(ExpressionInfo value);
    internal ExpressionInfo get_Layout();
    internal void set_Layout(ExpressionInfo value);
    internal string get_DockToChartArea();
    internal void set_DockToChartArea(string value);
    internal ExpressionInfo get_DockOutsideChartArea();
    internal void set_DockOutsideChartArea(ExpressionInfo value);
    internal ChartLegendTitle get_LegendTitle();
    internal void set_LegendTitle(ChartLegendTitle value);
    internal ExpressionInfo get_AutoFitTextDisabled();
    internal void set_AutoFitTextDisabled(ExpressionInfo value);
    internal ExpressionInfo get_MinFontSize();
    internal void set_MinFontSize(ExpressionInfo value);
    internal ExpressionInfo get_HeaderSeparator();
    internal void set_HeaderSeparator(ExpressionInfo value);
    internal ExpressionInfo get_HeaderSeparatorColor();
    internal void set_HeaderSeparatorColor(ExpressionInfo value);
    internal ExpressionInfo get_ColumnSeparator();
    internal void set_ColumnSeparator(ExpressionInfo value);
    internal ExpressionInfo get_ColumnSeparatorColor();
    internal void set_ColumnSeparatorColor(ExpressionInfo value);
    internal ExpressionInfo get_ColumnSpacing();
    internal void set_ColumnSpacing(ExpressionInfo value);
    internal ExpressionInfo get_InterlacedRows();
    internal void set_InterlacedRows(ExpressionInfo value);
    internal ExpressionInfo get_InterlacedRowsColor();
    internal void set_InterlacedRowsColor(ExpressionInfo value);
    internal ExpressionInfo get_EquallySpacedItems();
    internal void set_EquallySpacedItems(ExpressionInfo value);
    internal ExpressionInfo get_Reversed();
    internal void set_Reversed(ExpressionInfo value);
    internal ExpressionInfo get_MaxAutoSize();
    internal void set_MaxAutoSize(ExpressionInfo value);
    internal ExpressionInfo get_TextWrapThreshold();
    internal void set_TextWrapThreshold(ExpressionInfo value);
    internal List`1<ChartLegendCustomItem> get_LegendCustomItems();
    internal void set_LegendCustomItems(List`1<ChartLegendCustomItem> value);
    internal List`1<ChartLegendColumn> get_LegendColumns();
    internal void set_LegendColumns(List`1<ChartLegendColumn> value);
    internal ChartElementPosition get_ChartElementPosition();
    internal void set_ChartElementPosition(ChartElementPosition value);
    internal ChartLegendExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal void SetExprHost(ChartLegendExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartLegendPositions EvaluatePosition(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartLegendLayouts EvaluateLayout(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateDockOutsideChartArea(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateAutoFitTextDisabled(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMinFontSize(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartSeparators EvaluateHeaderSeparator(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateHeaderSeparatorColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartSeparators EvaluateColumnSeparator(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateColumnSeparatorColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateColumnSpacing(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateInterlacedRows(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateInterlacedRowsColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateEquallySpacedItems(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartAutoBool EvaluateReversed(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateMaxAutoSize(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateTextWrapThreshold(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumn : ChartStyleContainer {
    private string m_name;
    private int m_exprHostID;
    private Action m_action;
    private ExpressionInfo m_columnType;
    private ExpressionInfo m_value;
    private ExpressionInfo m_toolTip;
    private ExpressionInfo m_minimumWidth;
    private ExpressionInfo m_maximumWidth;
    private ExpressionInfo m_seriesSymbolWidth;
    private ExpressionInfo m_seriesSymbolHeight;
    private ChartLegendColumnHeader m_header;
    private int m_id;
    private static Declaration m_Declaration;
    private ChartLegendColumnExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal string LegendColumnName { get; internal set; }
    internal ChartLegendColumnExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal int ID { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ExpressionInfo ColumnType { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo MinimumWidth { get; internal set; }
    internal ExpressionInfo MaximumWidth { get; internal set; }
    internal ExpressionInfo SeriesSymbolWidth { get; internal set; }
    internal ExpressionInfo SeriesSymbolHeight { get; internal set; }
    internal ChartLegendColumnHeader Header { get; internal set; }
    internal ChartLegendColumn(Chart chart, int id);
    private static ChartLegendColumn();
    internal string get_LegendColumnName();
    internal void set_LegendColumnName(string value);
    internal ChartLegendColumnExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal int get_ID();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ExpressionInfo get_ColumnType();
    internal void set_ColumnType(ExpressionInfo value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_MinimumWidth();
    internal void set_MinimumWidth(ExpressionInfo value);
    internal ExpressionInfo get_MaximumWidth();
    internal void set_MaximumWidth(ExpressionInfo value);
    internal ExpressionInfo get_SeriesSymbolWidth();
    internal void set_SeriesSymbolWidth(ExpressionInfo value);
    internal ExpressionInfo get_SeriesSymbolHeight();
    internal void set_SeriesSymbolHeight(ExpressionInfo value);
    internal ChartLegendColumnHeader get_Header();
    internal void set_Header(ChartLegendColumnHeader value);
    internal void SetExprHost(ChartLegendColumnExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal ChartColumnType EvaluateColumnType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateValue(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMinimumWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMaximumWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateSeriesSymbolWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateSeriesSymbolHeight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendColumnHeader : ChartStyleContainer {
    private ExpressionInfo m_value;
    private static Declaration m_Declaration;
    private ChartLegendColumnHeaderExprHost m_exprHost;
    internal ChartLegendColumnHeaderExprHost ExprHost { get; }
    internal ExpressionInfo Value { get; internal set; }
    internal ChartLegendColumnHeader(Chart chart);
    private static ChartLegendColumnHeader();
    internal ChartLegendColumnHeaderExprHost get_ExprHost();
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal void SetExprHost(ChartLegendColumnHeaderExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal string EvaluateValue(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItem : ChartStyleContainer {
    private string m_name;
    private int m_exprHostID;
    private Action m_action;
    private ChartMarker m_marker;
    private ExpressionInfo m_separator;
    private ExpressionInfo m_separatorColor;
    private ExpressionInfo m_toolTip;
    private List`1<ChartLegendCustomItemCell> m_chartLegendCustomItemCells;
    private int m_id;
    private List`1<string> m_fieldsUsedInValueExpression;
    private static Declaration m_Declaration;
    private ChartLegendCustomItemExprHost m_exprHost;
    internal string LegendCustomItemName { get; internal set; }
    internal ChartLegendCustomItemExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal int ID { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ChartMarker Marker { get; internal set; }
    internal ExpressionInfo Separator { get; internal set; }
    internal ExpressionInfo SeparatorColor { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal List`1<ChartLegendCustomItemCell> LegendCustomItemCells { get; internal set; }
    internal ChartLegendCustomItem(Chart chart, int id);
    private static ChartLegendCustomItem();
    internal string get_LegendCustomItemName();
    internal void set_LegendCustomItemName(string value);
    internal ChartLegendCustomItemExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal int get_ID();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ChartMarker get_Marker();
    internal void set_Marker(ChartMarker value);
    internal ExpressionInfo get_Separator();
    internal void set_Separator(ExpressionInfo value);
    internal ExpressionInfo get_SeparatorColor();
    internal void set_SeparatorColor(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal List`1<ChartLegendCustomItemCell> get_LegendCustomItemCells();
    internal void set_LegendCustomItemCells(List`1<ChartLegendCustomItemCell> value);
    internal void SetExprHost(ChartLegendCustomItemExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal ChartSeparators EvaluateSeparator(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateSeparatorColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendCustomItemCell : ChartStyleContainer {
    private string m_name;
    private int m_exprHostID;
    private Action m_action;
    private ExpressionInfo m_cellType;
    private ExpressionInfo m_text;
    private ExpressionInfo m_cellSpan;
    private ExpressionInfo m_toolTip;
    private ExpressionInfo m_imageWidth;
    private ExpressionInfo m_imageHeight;
    private ExpressionInfo m_symbolHeight;
    private ExpressionInfo m_symbolWidth;
    private ExpressionInfo m_alignment;
    private ExpressionInfo m_topMargin;
    private ExpressionInfo m_bottomMargin;
    private ExpressionInfo m_leftMargin;
    private ExpressionInfo m_rightMargin;
    private int m_id;
    private static Declaration m_Declaration;
    private ChartLegendCustomItemCellExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal string LegendCustomItemCellName { get; internal set; }
    internal ChartLegendCustomItemCellExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal int ID { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ExpressionInfo CellType { get; internal set; }
    internal ExpressionInfo Text { get; internal set; }
    internal ExpressionInfo CellSpan { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo ImageWidth { get; internal set; }
    internal ExpressionInfo ImageHeight { get; internal set; }
    internal ExpressionInfo SymbolHeight { get; internal set; }
    internal ExpressionInfo SymbolWidth { get; internal set; }
    internal ExpressionInfo Alignment { get; internal set; }
    internal ExpressionInfo TopMargin { get; internal set; }
    internal ExpressionInfo BottomMargin { get; internal set; }
    internal ExpressionInfo LeftMargin { get; internal set; }
    internal ExpressionInfo RightMargin { get; internal set; }
    internal ChartLegendCustomItemCell(Chart chart, int id);
    private static ChartLegendCustomItemCell();
    internal string get_LegendCustomItemCellName();
    internal void set_LegendCustomItemCellName(string value);
    internal ChartLegendCustomItemCellExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal int get_ID();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ExpressionInfo get_CellType();
    internal void set_CellType(ExpressionInfo value);
    internal ExpressionInfo get_Text();
    internal void set_Text(ExpressionInfo value);
    internal ExpressionInfo get_CellSpan();
    internal void set_CellSpan(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_ImageWidth();
    internal void set_ImageWidth(ExpressionInfo value);
    internal ExpressionInfo get_ImageHeight();
    internal void set_ImageHeight(ExpressionInfo value);
    internal ExpressionInfo get_SymbolHeight();
    internal void set_SymbolHeight(ExpressionInfo value);
    internal ExpressionInfo get_SymbolWidth();
    internal void set_SymbolWidth(ExpressionInfo value);
    internal ExpressionInfo get_Alignment();
    internal void set_Alignment(ExpressionInfo value);
    internal ExpressionInfo get_TopMargin();
    internal void set_TopMargin(ExpressionInfo value);
    internal ExpressionInfo get_BottomMargin();
    internal void set_BottomMargin(ExpressionInfo value);
    internal ExpressionInfo get_LeftMargin();
    internal void set_LeftMargin(ExpressionInfo value);
    internal ExpressionInfo get_RightMargin();
    internal void set_RightMargin(ExpressionInfo value);
    internal void SetExprHost(ChartLegendCustomItemCellExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context, int index);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal ChartCellType EvaluateCellType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateText(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateCellSpan(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateImageWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateImageHeight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateSymbolHeight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateSymbolWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartCellAlignment EvaluateAlignment(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateTopMargin(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateBottomMargin(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateLeftMargin(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateRightMargin(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartLegendTitle : ChartTitleBase {
    private ExpressionInfo m_titleSeparator;
    private static Declaration m_Declaration;
    internal ExpressionInfo TitleSeparator { get; internal set; }
    internal ChartLegendTitle(Chart chart);
    private static ChartLegendTitle();
    internal ExpressionInfo get_TitleSeparator();
    internal void set_TitleSeparator(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal ChartSeparators EvaluateTitleSeparator(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartMarker : ChartStyleContainer {
    private ExpressionInfo m_markerType;
    private ExpressionInfo m_markerSize;
    [ReferenceAttribute]
private ChartDataPoint m_chartDataPoint;
    [ReferenceAttribute]
private ChartSeries m_chartSeries;
    private static Declaration m_Declaration;
    private ChartMarkerExprHost m_exprHost;
    internal ExpressionInfo Type { get; internal set; }
    internal ExpressionInfo Size { get; internal set; }
    internal ChartMarkerExprHost ExprHost { get; }
    public IInstancePath InstancePath { get; }
    internal ChartMarker(Chart chart, ChartDataPoint chartDataPoint);
    internal ChartMarker(Chart chart, ChartSeries chartSeries);
    private static ChartMarker();
    internal ExpressionInfo get_Type();
    internal void set_Type(ExpressionInfo value);
    internal ExpressionInfo get_Size();
    internal void set_Size(ExpressionInfo value);
    internal ChartMarkerExprHost get_ExprHost();
    public virtual IInstancePath get_InstancePath();
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void Initialize(InitializationContext context);
    internal void SetExprHost(ChartMarkerExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal string EvaluateChartMarkerSize(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartMarkerTypes EvaluateChartMarkerType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartMember : ReportHierarchyNode {
    private ChartMemberList m_chartMembers;
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private ExpressionInfo m_labelExpression;
    private bool m_chartGroupExpression;
    private static Declaration m_Declaration;
    private Formatter m_formatter;
    private ChartMemberExprHost m_exprHost;
    internal HierarchyNodeList InnerHierarchy { get; }
    internal ChartMemberList ChartMembers { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal ExpressionInfo Label { get; internal set; }
    internal bool ChartGroupExpression { get; internal set; }
    internal ChartMemberExprHost ExprHost { get; }
    internal ChartMember(int id, Chart crItem);
    private static ChartMember();
    internal virtual HierarchyNodeList get_InnerHierarchy();
    internal ChartMemberList get_ChartMembers();
    internal void set_ChartMembers(ChartMemberList value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal ExpressionInfo get_Label();
    internal void set_Label(ExpressionInfo value);
    internal bool get_ChartGroupExpression();
    internal void set_ChartGroupExpression(bool value);
    internal ChartMemberExprHost get_ExprHost();
    internal void SetIsCategoryMember(bool value);
    protected virtual void DataGroupStart(ExprHostBuilder builder);
    protected virtual int DataGroupEnd(ExprHostBuilder builder);
    internal virtual bool InnerInitialize(InitializationContext context);
    internal virtual bool Initialize(InitializationContext context);
    internal void DataRendererInitialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context, DataRegion newContainingRegion);
    internal static Declaration GetDeclaration();
    private ChartSeries GetChartSeries();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(IMemberNode memberExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void MemberContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    internal VariantResult EvaluateLabel(ChartMemberInstance instance, OnDemandProcessingContext context);
    internal string GetFormattedLabelValue(VariantResult labelObject, OnDemandProcessingContext context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartMemberList : HierarchyNodeList {
    internal ChartMember Item { get; }
    internal ChartMemberList(int capacity);
    internal ChartMember get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartNoDataMessage : ChartTitle {
    internal ChartNoDataMessage(Chart chart);
    internal virtual void Initialize(InitializationContext context);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartNoMoveDirections : object {
    [ReferenceAttribute]
private Chart m_chart;
    [ReferenceAttribute]
private ChartSeries m_chartSeries;
    private ExpressionInfo m_up;
    private ExpressionInfo m_down;
    private ExpressionInfo m_left;
    private ExpressionInfo m_right;
    private ExpressionInfo m_upLeft;
    private ExpressionInfo m_upRight;
    private ExpressionInfo m_downLeft;
    private ExpressionInfo m_downRight;
    private static Declaration m_Declaration;
    private ChartNoMoveDirectionsExprHost m_exprHost;
    internal ChartNoMoveDirectionsExprHost ExprHost { get; }
    internal ExpressionInfo Up { get; internal set; }
    internal ExpressionInfo Down { get; internal set; }
    internal ExpressionInfo Left { get; internal set; }
    internal ExpressionInfo Right { get; internal set; }
    internal ExpressionInfo UpLeft { get; internal set; }
    internal ExpressionInfo UpRight { get; internal set; }
    internal ExpressionInfo DownLeft { get; internal set; }
    internal ExpressionInfo DownRight { get; internal set; }
    internal ChartNoMoveDirections(Chart chart, ChartSeries chartSeries);
    private static ChartNoMoveDirections();
    internal ChartNoMoveDirectionsExprHost get_ExprHost();
    internal ExpressionInfo get_Up();
    internal void set_Up(ExpressionInfo value);
    internal ExpressionInfo get_Down();
    internal void set_Down(ExpressionInfo value);
    internal ExpressionInfo get_Left();
    internal void set_Left(ExpressionInfo value);
    internal ExpressionInfo get_Right();
    internal void set_Right(ExpressionInfo value);
    internal ExpressionInfo get_UpLeft();
    internal void set_UpLeft(ExpressionInfo value);
    internal ExpressionInfo get_UpRight();
    internal void set_UpRight(ExpressionInfo value);
    internal ExpressionInfo get_DownLeft();
    internal void set_DownLeft(ExpressionInfo value);
    internal ExpressionInfo get_DownRight();
    internal void set_DownRight(ExpressionInfo value);
    internal void SetExprHost(ChartNoMoveDirectionsExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal bool EvaluateUp(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateDown(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateLeft(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateRight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateUpLeft(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateUpRight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateDownLeft(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateDownRight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeries : Row {
    private ChartDataPointList m_dataPoints;
    private int m_exprHostID;
    private string m_name;
    private Action m_action;
    private ExpressionInfo m_type;
    private ExpressionInfo m_subtype;
    private ChartEmptyPoints m_emptyPoints;
    private ExpressionInfo m_legendName;
    private ExpressionInfo m_legendText;
    private ExpressionInfo m_chartAreaName;
    private ExpressionInfo m_valueAxisName;
    private ExpressionInfo m_categoryAxisName;
    private Style m_styleClass;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_hideInLegend;
    private ChartSmartLabel m_chartSmartLabel;
    private DataValueList m_customProperties;
    private ChartDataLabel m_dataLabel;
    private ChartMarker m_marker;
    private ExpressionInfo m_toolTip;
    private ChartItemInLegend m_chartItemInLegend;
    [ReferenceAttribute]
private Chart m_chart;
    [ReferenceAttribute]
private ChartMember m_parentChartMember;
    [ReferenceAttribute]
private ChartSeries m_sourceSeries;
    private ChartDerivedSeries m_parentDerivedSeries;
    private List`1<ChartDerivedSeries> m_childrenDerivedSeries;
    private List`1<string> m_fieldsUsedInValueExpression;
    private ChartSeriesExprHost m_exprHost;
    private Formatter m_formatter;
    private static Declaration m_Declaration;
    internal CellList Cells { get; }
    internal ChartDataPointList DataPoints { get; internal set; }
    internal ChartSeriesExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal Action Action { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo HideInLegend { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ExpressionInfo Type { get; internal set; }
    internal ExpressionInfo Subtype { get; internal set; }
    internal ChartEmptyPoints EmptyPoints { get; internal set; }
    internal ExpressionInfo LegendName { get; internal set; }
    internal ExpressionInfo LegendText { get; internal set; }
    internal ExpressionInfo ChartAreaName { get; internal set; }
    internal ExpressionInfo ValueAxisName { get; internal set; }
    internal ExpressionInfo CategoryAxisName { get; internal set; }
    internal ChartDataLabel DataLabel { get; internal set; }
    internal ChartMarker Marker { get; internal set; }
    public Style StyleClass { get; public set; }
    internal string Name { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    private ChartSeries SourceSeries { get; }
    internal ChartItemInLegend ChartItemInLegend { get; internal set; }
    private ChartMember ParentChartMember { get; }
    public List`1<InstancePathItem> InstancePath { get; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.InstancePath { get; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.InstancePath { get; }
    private ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.ObjectType { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.Name { get; }
    internal DataValueList CustomProperties { get; internal set; }
    internal ChartSmartLabel ChartSmartLabel { get; internal set; }
    private DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.CustomProperties { get; }
    internal List`1<ChartDerivedSeries> ChildrenDerivedSeries { get; }
    internal ChartSeries(Chart chart, int id);
    internal ChartSeries(Chart chart, ChartDerivedSeries parentDerivedSeries, int id);
    private static ChartSeries();
    internal virtual CellList get_Cells();
    internal ChartDataPointList get_DataPoints();
    internal void set_DataPoints(ChartDataPointList value);
    internal ChartSeriesExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal Action get_Action();
    internal void set_Action(Action value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_HideInLegend();
    internal void set_HideInLegend(ExpressionInfo value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ExpressionInfo get_Type();
    internal void set_Type(ExpressionInfo value);
    internal ExpressionInfo get_Subtype();
    internal void set_Subtype(ExpressionInfo value);
    internal ChartEmptyPoints get_EmptyPoints();
    internal void set_EmptyPoints(ChartEmptyPoints value);
    internal ExpressionInfo get_LegendName();
    internal void set_LegendName(ExpressionInfo value);
    internal ExpressionInfo get_LegendText();
    internal void set_LegendText(ExpressionInfo value);
    internal ExpressionInfo get_ChartAreaName();
    internal void set_ChartAreaName(ExpressionInfo value);
    internal ExpressionInfo get_ValueAxisName();
    internal void set_ValueAxisName(ExpressionInfo value);
    internal ExpressionInfo get_CategoryAxisName();
    internal void set_CategoryAxisName(ExpressionInfo value);
    internal ChartDataLabel get_DataLabel();
    internal void set_DataLabel(ChartDataLabel value);
    internal ChartMarker get_Marker();
    internal void set_Marker(ChartMarker value);
    public sealed virtual Style get_StyleClass();
    public void set_StyleClass(Style value);
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    private ChartSeries get_SourceSeries();
    internal ChartItemInLegend get_ChartItemInLegend();
    internal void set_ChartItemInLegend(ChartItemInLegend value);
    private ChartMember get_ParentChartMember();
    public virtual List`1<InstancePathItem> get_InstancePath();
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_InstancePath();
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_InstancePath();
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_ObjectType();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_Name();
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal ChartSmartLabel get_ChartSmartLabel();
    internal void set_ChartSmartLabel(ChartSmartLabel value);
    private sealed virtual override DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_CustomProperties();
    internal List`1<ChartDerivedSeries> get_ChildrenDerivedSeries();
    internal void SetExprHost(ChartSeriesExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context, string name);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal ChartSeriesType EvaluateType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartSeriesSubtype EvaluateSubtype(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateLegendName(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateLegendText(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateChartAreaName(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateValueAxisName(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateCategoryAxisName(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHideInLegend(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartSeriesList : RowList {
    internal ChartSeries Item { get; }
    internal ChartSeriesList(int capacity);
    internal ChartSeries get_Item(int index);
    internal ChartSeries GetByName(string seriesName);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartSmartLabel : object {
    [ReferenceAttribute]
private Chart m_chart;
    [ReferenceAttribute]
private ChartSeries m_chartSeries;
    private ExpressionInfo m_allowOutSidePlotArea;
    private ExpressionInfo m_calloutBackColor;
    private ExpressionInfo m_calloutLineAnchor;
    private ExpressionInfo m_calloutLineColor;
    private ExpressionInfo m_calloutLineStyle;
    private ExpressionInfo m_calloutLineWidth;
    private ExpressionInfo m_calloutStyle;
    private ExpressionInfo m_showOverlapped;
    private ExpressionInfo m_markerOverlapping;
    private ExpressionInfo m_maxMovingDistance;
    private ExpressionInfo m_minMovingDistance;
    private ChartNoMoveDirections m_noMoveDirections;
    private ExpressionInfo m_disabled;
    private static Declaration m_Declaration;
    private ChartSmartLabelExprHost m_exprHost;
    internal ChartSmartLabelExprHost ExprHost { get; }
    internal ExpressionInfo AllowOutSidePlotArea { get; internal set; }
    internal ExpressionInfo CalloutBackColor { get; internal set; }
    internal ExpressionInfo CalloutLineAnchor { get; internal set; }
    internal ExpressionInfo CalloutLineColor { get; internal set; }
    internal ExpressionInfo CalloutLineStyle { get; internal set; }
    internal ExpressionInfo CalloutLineWidth { get; internal set; }
    internal ExpressionInfo CalloutStyle { get; internal set; }
    internal ExpressionInfo ShowOverlapped { get; internal set; }
    internal ExpressionInfo MarkerOverlapping { get; internal set; }
    internal ExpressionInfo MaxMovingDistance { get; internal set; }
    internal ExpressionInfo MinMovingDistance { get; internal set; }
    internal ChartNoMoveDirections NoMoveDirections { get; internal set; }
    internal ExpressionInfo Disabled { get; internal set; }
    private IInstancePath InstancePath { get; }
    internal ChartSmartLabel(Chart chart, ChartSeries chartSeries);
    private static ChartSmartLabel();
    internal ChartSmartLabelExprHost get_ExprHost();
    internal ExpressionInfo get_AllowOutSidePlotArea();
    internal void set_AllowOutSidePlotArea(ExpressionInfo value);
    internal ExpressionInfo get_CalloutBackColor();
    internal void set_CalloutBackColor(ExpressionInfo value);
    internal ExpressionInfo get_CalloutLineAnchor();
    internal void set_CalloutLineAnchor(ExpressionInfo value);
    internal ExpressionInfo get_CalloutLineColor();
    internal void set_CalloutLineColor(ExpressionInfo value);
    internal ExpressionInfo get_CalloutLineStyle();
    internal void set_CalloutLineStyle(ExpressionInfo value);
    internal ExpressionInfo get_CalloutLineWidth();
    internal void set_CalloutLineWidth(ExpressionInfo value);
    internal ExpressionInfo get_CalloutStyle();
    internal void set_CalloutStyle(ExpressionInfo value);
    internal ExpressionInfo get_ShowOverlapped();
    internal void set_ShowOverlapped(ExpressionInfo value);
    internal ExpressionInfo get_MarkerOverlapping();
    internal void set_MarkerOverlapping(ExpressionInfo value);
    internal ExpressionInfo get_MaxMovingDistance();
    internal void set_MaxMovingDistance(ExpressionInfo value);
    internal ExpressionInfo get_MinMovingDistance();
    internal void set_MinMovingDistance(ExpressionInfo value);
    internal ChartNoMoveDirections get_NoMoveDirections();
    internal void set_NoMoveDirections(ChartNoMoveDirections value);
    internal ExpressionInfo get_Disabled();
    internal void set_Disabled(ExpressionInfo value);
    private IInstancePath get_InstancePath();
    internal void SetExprHost(ChartSmartLabelExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal ChartAllowOutsideChartArea EvaluateAllowOutSidePlotArea(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateCalloutBackColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartCalloutLineAnchor EvaluateCalloutLineAnchor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateCalloutLineColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartCalloutLineStyle EvaluateCalloutLineStyle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateCalloutLineWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartCalloutStyle EvaluateCalloutStyle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateShowOverlapped(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateMarkerOverlapping(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMaxMovingDistance(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateMinMovingDistance(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateDisabled(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartStripLine : ChartStyleContainer {
    private int m_exprHostID;
    private Action m_action;
    private ExpressionInfo m_title;
    private ExpressionInfo m_titleAngle;
    private ExpressionInfo m_textOrientation;
    private ExpressionInfo m_toolTip;
    private ExpressionInfo m_interval;
    private ExpressionInfo m_intervalType;
    private ExpressionInfo m_intervalOffset;
    private ExpressionInfo m_intervalOffsetType;
    private ExpressionInfo m_stripWidth;
    private ExpressionInfo m_stripWidthType;
    private int m_id;
    private static Declaration m_Declaration;
    private ChartStripLineExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal ChartStripLineExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal int ID { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ExpressionInfo Title { get; internal set; }
    internal ExpressionInfo TitleAngle { get; internal set; }
    internal ExpressionInfo TextOrientation { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo Interval { get; internal set; }
    internal ExpressionInfo IntervalType { get; internal set; }
    internal ExpressionInfo IntervalOffset { get; internal set; }
    internal ExpressionInfo IntervalOffsetType { get; internal set; }
    internal ExpressionInfo StripWidth { get; internal set; }
    internal ExpressionInfo StripWidthType { get; internal set; }
    internal ChartStripLine(Chart chart, int id);
    private static ChartStripLine();
    internal ChartStripLineExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal int get_ID();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal ExpressionInfo get_Title();
    internal void set_Title(ExpressionInfo value);
    internal ExpressionInfo get_TitleAngle();
    internal void set_TitleAngle(ExpressionInfo value);
    internal ExpressionInfo get_TextOrientation();
    internal void set_TextOrientation(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_Interval();
    internal void set_Interval(ExpressionInfo value);
    internal ExpressionInfo get_IntervalType();
    internal void set_IntervalType(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffset();
    internal void set_IntervalOffset(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffsetType();
    internal void set_IntervalOffsetType(ExpressionInfo value);
    internal ExpressionInfo get_StripWidth();
    internal void set_StripWidth(ExpressionInfo value);
    internal ExpressionInfo get_StripWidthType();
    internal void set_StripWidthType(ExpressionInfo value);
    internal void SetExprHost(ChartStripLineExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context, int index);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal string EvaluateTitle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateTitleAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal TextOrientations EvaluateTextOrientation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateIntervalOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalOffsetType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateStripWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateStripWidthType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.ChartStyleContainer : object {
    [ReferenceAttribute]
protected Chart m_chart;
    protected Style m_styleClass;
    private static Declaration m_Declaration;
    public Style StyleClass { get; public set; }
    public IInstancePath InstancePath { get; }
    public ObjectType ObjectType { get; }
    public string Name { get; }
    internal ChartStyleContainer(Chart chart);
    private static ChartStyleContainer();
    public sealed virtual Style get_StyleClass();
    public void set_StyleClass(Style value);
    public virtual IInstancePath get_InstancePath();
    public sealed virtual ObjectType get_ObjectType();
    public sealed virtual string get_Name();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartThreeDProperties : object {
    private ExpressionInfo m_enabled;
    private ExpressionInfo m_projectionMode;
    private ExpressionInfo m_rotation;
    private ExpressionInfo m_inclination;
    private ExpressionInfo m_perspective;
    private ExpressionInfo m_depthRatio;
    private ExpressionInfo m_shading;
    private ExpressionInfo m_gapDepth;
    private ExpressionInfo m_wallThickness;
    private ExpressionInfo m_clustered;
    [ReferenceAttribute]
private Chart m_chart;
    private Chart3DPropertiesExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ExpressionInfo Enabled { get; internal set; }
    internal ExpressionInfo ProjectionMode { get; internal set; }
    internal ExpressionInfo Rotation { get; internal set; }
    internal ExpressionInfo Inclination { get; internal set; }
    internal ExpressionInfo Perspective { get; internal set; }
    internal ExpressionInfo DepthRatio { get; internal set; }
    internal ExpressionInfo Shading { get; internal set; }
    internal ExpressionInfo GapDepth { get; internal set; }
    internal ExpressionInfo WallThickness { get; internal set; }
    internal ExpressionInfo Clustered { get; internal set; }
    internal Chart3DPropertiesExprHost ExprHost { get; }
    internal ChartThreeDProperties(Chart chart);
    private static ChartThreeDProperties();
    internal ExpressionInfo get_Enabled();
    internal void set_Enabled(ExpressionInfo value);
    internal ExpressionInfo get_ProjectionMode();
    internal void set_ProjectionMode(ExpressionInfo value);
    internal ExpressionInfo get_Rotation();
    internal void set_Rotation(ExpressionInfo value);
    internal ExpressionInfo get_Inclination();
    internal void set_Inclination(ExpressionInfo value);
    internal ExpressionInfo get_Perspective();
    internal void set_Perspective(ExpressionInfo value);
    internal ExpressionInfo get_DepthRatio();
    internal void set_DepthRatio(ExpressionInfo value);
    internal ExpressionInfo get_Shading();
    internal void set_Shading(ExpressionInfo value);
    internal ExpressionInfo get_GapDepth();
    internal void set_GapDepth(ExpressionInfo value);
    internal ExpressionInfo get_WallThickness();
    internal void set_WallThickness(ExpressionInfo value);
    internal ExpressionInfo get_Clustered();
    internal void set_Clustered(ExpressionInfo value);
    internal Chart3DPropertiesExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal void SetExprHost(Chart3DPropertiesExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal bool EvaluateEnabled(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartThreeDProjectionModes EvaluateProjectionMode(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal int EvaluateRotation(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal int EvaluateInclination(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal int EvaluatePerspective(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal int EvaluateDepthRatio(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartThreeDShadingTypes EvaluateShading(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal int EvaluateGapDepth(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal int EvaluateWallThickness(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal bool EvaluateClustered(IReportScopeInstance instance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartTickMarks : ChartStyleContainer {
    private ExpressionInfo m_enabled;
    private ExpressionInfo m_type;
    private ExpressionInfo m_length;
    private ExpressionInfo m_interval;
    private ExpressionInfo m_intervalType;
    private ExpressionInfo m_intervalOffset;
    private ExpressionInfo m_intervalOffsetType;
    private static Declaration m_Declaration;
    private ChartTickMarksExprHost m_exprHost;
    internal ChartTickMarksExprHost ExprHost { get; }
    internal ExpressionInfo Enabled { get; internal set; }
    internal ExpressionInfo Type { get; internal set; }
    internal ExpressionInfo Length { get; internal set; }
    internal ExpressionInfo Interval { get; internal set; }
    internal ExpressionInfo IntervalType { get; internal set; }
    internal ExpressionInfo IntervalOffset { get; internal set; }
    internal ExpressionInfo IntervalOffsetType { get; internal set; }
    internal ChartTickMarks(Chart chart);
    private static ChartTickMarks();
    internal ChartTickMarksExprHost get_ExprHost();
    internal ExpressionInfo get_Enabled();
    internal void set_Enabled(ExpressionInfo value);
    internal ExpressionInfo get_Type();
    internal void set_Type(ExpressionInfo value);
    internal ExpressionInfo get_Length();
    internal void set_Length(ExpressionInfo value);
    internal ExpressionInfo get_Interval();
    internal void set_Interval(ExpressionInfo value);
    internal ExpressionInfo get_IntervalType();
    internal void set_IntervalType(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffset();
    internal void set_IntervalOffset(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffsetType();
    internal void set_IntervalOffsetType(ExpressionInfo value);
    internal void SetExprHost(ChartTickMarksExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context, bool isMajor);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    internal string EvaluateEnabled(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartTickMarksType EvaluateType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLength(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateIntervalOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ChartIntervalType EvaluateIntervalOffsetType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitle : ChartTitleBase {
    private string m_name;
    private ExpressionInfo m_position;
    protected int m_exprHostID;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_docking;
    private string m_dockToChartArea;
    private ExpressionInfo m_dockOutsideChartArea;
    private ExpressionInfo m_dockOffset;
    private ExpressionInfo m_toolTip;
    private Action m_action;
    private ExpressionInfo m_textOrientation;
    private ChartElementPosition m_chartElementPosition;
    private static Declaration m_Declaration;
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal string TitleName { get; internal set; }
    internal ExpressionInfo Position { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo Docking { get; internal set; }
    internal string DockToChartArea { get; internal set; }
    internal ExpressionInfo DockOutsideChartArea { get; internal set; }
    internal ExpressionInfo DockOffset { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo TextOrientation { get; internal set; }
    internal ChartElementPosition ChartElementPosition { get; internal set; }
    internal int ExpressionHostID { get; }
    internal ChartTitle(Chart chart);
    private static ChartTitle();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal string get_TitleName();
    internal void set_TitleName(string value);
    internal ExpressionInfo get_Position();
    internal void set_Position(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_Docking();
    internal void set_Docking(ExpressionInfo value);
    internal string get_DockToChartArea();
    internal void set_DockToChartArea(string value);
    internal ExpressionInfo get_DockOutsideChartArea();
    internal void set_DockOutsideChartArea(ExpressionInfo value);
    internal ExpressionInfo get_DockOffset();
    internal void set_DockOffset(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_TextOrientation();
    internal void set_TextOrientation(ExpressionInfo value);
    internal ChartElementPosition get_ChartElementPosition();
    internal void set_ChartElementPosition(ChartElementPosition value);
    internal int get_ExpressionHostID();
    internal virtual void Initialize(InitializationContext context);
    protected void InitializeInternal(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal bool EvaluateHidden(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartTitleDockings EvaluateDocking(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ChartTitlePositions EvaluatePosition(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal bool EvaluateDockOutsideChartArea(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal int EvaluateDockOffset(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal TextOrientations EvaluateTextOrientation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ChartTitleBase : ChartStyleContainer {
    private ExpressionInfo m_caption;
    private Formatter m_formatter;
    private ChartTitleBaseExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ExpressionInfo Caption { get; internal set; }
    internal ChartTitleBaseExprHost ExprHost { get; }
    internal ChartTitleBase(Chart chart);
    private static ChartTitleBase();
    internal ExpressionInfo get_Caption();
    internal void set_Caption(ExpressionInfo value);
    internal ChartTitleBaseExprHost get_ExprHost();
    internal virtual void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal virtual void Initialize(InitializationContext context);
    internal string EvaluateCaption(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CodeClass : ValueType {
    internal string ClassName;
    internal string InstanceName;
    private static Declaration m_Declaration;
    private static CodeClass();
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CommonSubReportInfo : object {
    private string m_description;
    private string m_reportPath;
    private string m_originalCatalogPath;
    private ParameterInfoCollection m_parametersFromCatalog;
    private bool m_retrievalFailed;
    private string m_definitionUniqueName;
    private IChunkFactory m_definitionChunkFactory;
    private static Declaration m_Declaration;
    internal string ReportPath { get; internal set; }
    internal string OriginalCatalogPath { get; internal set; }
    internal string Description { get; internal set; }
    internal ParameterInfoCollection ParametersFromCatalog { get; internal set; }
    internal bool RetrievalFailed { get; internal set; }
    internal string DefinitionUniqueName { get; internal set; }
    internal IChunkFactory DefinitionChunkFactory { get; internal set; }
    private static CommonSubReportInfo();
    internal string get_ReportPath();
    internal void set_ReportPath(string value);
    internal string get_OriginalCatalogPath();
    internal void set_OriginalCatalogPath(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal ParameterInfoCollection get_ParametersFromCatalog();
    internal void set_ParametersFromCatalog(ParameterInfoCollection value);
    internal bool get_RetrievalFailed();
    internal void set_RetrievalFailed(bool value);
    internal string get_DefinitionUniqueName();
    internal void set_DefinitionUniqueName(string value);
    internal IChunkFactory get_DefinitionChunkFactory();
    internal void set_DefinitionChunkFactory(IChunkFactory value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.ConstructionPhase : Enum {
    public int value__;
    public static ConstructionPhase Publishing;
    public static ConstructionPhase Deserializing;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Count : DataAggregate {
    private int m_currentTotal;
    private static Declaration m_declaration;
    public int Size { get; }
    private static Count();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    internal virtual object NoRowsResult();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CountDistinct : DataAggregate {
    private Hashtable m_distinctValues;
    private static Declaration m_declaration;
    public int Size { get; }
    private static CountDistinct();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    internal virtual object NoRowsResult();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CountRows : DataAggregate {
    private int m_currentTotal;
    private static Declaration m_declaration;
    public int Size { get; }
    private static CountRows();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    internal virtual object NoRowsResult();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CustomDataRow : Row {
    private DataCellList m_cells;
    private static Declaration m_Declaration;
    internal CellList Cells { get; }
    internal DataCellList DataCells { get; internal set; }
    internal CustomDataRow(int id);
    private static CustomDataRow();
    internal virtual CellList get_Cells();
    internal DataCellList get_DataCells();
    internal void set_DataCells(DataCellList value);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CustomDataRowList : RowList {
    internal CustomDataRow Item { get; }
    internal CustomDataRowList(int capacity);
    internal CustomDataRow get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CustomLabel : GaugePanelStyleContainer {
    private int m_exprHostID;
    private CustomLabelExprHost m_exprHost;
    private Formatter m_formatter;
    private static Declaration m_Declaration;
    private string m_name;
    private ExpressionInfo m_text;
    private ExpressionInfo m_allowUpsideDown;
    private ExpressionInfo m_distanceFromScale;
    private ExpressionInfo m_fontAngle;
    private ExpressionInfo m_placement;
    private ExpressionInfo m_rotateLabel;
    private TickMarkStyle m_tickMarkStyle;
    private ExpressionInfo m_value;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_useFontPercent;
    internal string Name { get; internal set; }
    internal ExpressionInfo Text { get; internal set; }
    internal ExpressionInfo AllowUpsideDown { get; internal set; }
    internal ExpressionInfo DistanceFromScale { get; internal set; }
    internal ExpressionInfo FontAngle { get; internal set; }
    internal ExpressionInfo Placement { get; internal set; }
    internal ExpressionInfo RotateLabel { get; internal set; }
    internal TickMarkStyle TickMarkStyle { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo UseFontPercent { get; internal set; }
    internal string OwnerName { get; }
    internal CustomLabelExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal CustomLabel(GaugePanel gaugePanel);
    private static CustomLabel();
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_Text();
    internal void set_Text(ExpressionInfo value);
    internal ExpressionInfo get_AllowUpsideDown();
    internal void set_AllowUpsideDown(ExpressionInfo value);
    internal ExpressionInfo get_DistanceFromScale();
    internal void set_DistanceFromScale(ExpressionInfo value);
    internal ExpressionInfo get_FontAngle();
    internal void set_FontAngle(ExpressionInfo value);
    internal ExpressionInfo get_Placement();
    internal void set_Placement(ExpressionInfo value);
    internal ExpressionInfo get_RotateLabel();
    internal void set_RotateLabel(ExpressionInfo value);
    internal TickMarkStyle get_TickMarkStyle();
    internal void set_TickMarkStyle(TickMarkStyle value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_UseFontPercent();
    internal void set_UseFontPercent(ExpressionInfo value);
    internal string get_OwnerName();
    internal CustomLabelExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(CustomLabelExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal string EvaluateText(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateAllowUpsideDown(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateDistanceFromScale(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateFontAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeLabelPlacements EvaluatePlacement(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateRotateLabel(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateValue(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateUseFontPercent(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.CustomReportItem : DataRegion {
    private DataMemberList m_dataColumnMembers;
    private DataMemberList m_dataRowMembers;
    private CustomDataRowList m_dataRows;
    private string m_type;
    private ReportItem m_altReportItem;
    private int m_altReportItemIndexInParentCollectionDef;
    private ReportItemCollection m_renderReportItem;
    private bool m_explicitAltReportItemDefined;
    private bool m_createdSubtotals;
    private static Declaration m_Declaration;
    private CustomReportItemExprHost m_criExprHost;
    internal bool IsDataRegion { get; }
    internal ObjectType ObjectType { get; }
    internal HierarchyNodeList ColumnMembers { get; }
    internal HierarchyNodeList RowMembers { get; }
    internal RowList Rows { get; }
    internal CustomReportItemExprHost CustomReportItemExprHost { get; }
    protected IndexedExprHost UserSortExpressionsHost { get; }
    internal DataMemberList DataColumnMembers { get; internal set; }
    internal DataMemberList DataRowMembers { get; internal set; }
    internal CustomDataRowList DataRows { get; internal set; }
    internal string Type { get; internal set; }
    internal ReportItem AltReportItem { get; internal set; }
    internal int AltReportItemIndexInParentCollectionDef { get; internal set; }
    internal ReportItemCollection RenderReportItem { get; internal set; }
    internal bool ExplicitlyDefinedAltReportItem { get; internal set; }
    internal CustomReportItem(ReportItem parent);
    internal CustomReportItem(int id, ReportItem parent);
    private static CustomReportItem();
    internal virtual bool get_IsDataRegion();
    internal virtual ObjectType get_ObjectType();
    internal virtual HierarchyNodeList get_ColumnMembers();
    internal virtual HierarchyNodeList get_RowMembers();
    internal virtual RowList get_Rows();
    internal CustomReportItemExprHost get_CustomReportItemExprHost();
    protected virtual IndexedExprHost get_UserSortExpressionsHost();
    internal DataMemberList get_DataColumnMembers();
    internal void set_DataColumnMembers(DataMemberList value);
    internal DataMemberList get_DataRowMembers();
    internal void set_DataRowMembers(DataMemberList value);
    internal CustomDataRowList get_DataRows();
    internal void set_DataRows(CustomDataRowList value);
    internal string get_Type();
    internal void set_Type(string value);
    internal ReportItem get_AltReportItem();
    internal void set_AltReportItem(ReportItem value);
    internal int get_AltReportItemIndexInParentCollectionDef();
    internal void set_AltReportItemIndexInParentCollectionDef(int value);
    internal ReportItemCollection get_RenderReportItem();
    internal void set_RenderReportItem(ReportItemCollection value);
    internal bool get_ExplicitlyDefinedAltReportItem();
    internal void set_ExplicitlyDefinedAltReportItem(bool value);
    internal virtual bool Initialize(InitializationContext context);
    protected virtual bool ValidateInnerStructure(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    public sealed virtual void CreateAutomaticSubtotals(AutomaticSubtotalContext context);
    private int CreateAutomaticSubtotals(AutomaticSubtotalContext context, DataMemberList members, bool isColumn);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void DataRegionContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    internal virtual object EvaluateNoRowsMessageExpression();
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregate : object {
    public int Size { get; }
    internal abstract virtual void Init();
    internal abstract virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal abstract virtual object Result();
    internal virtual object NoRowsResult();
    internal static DataTypeCode GetTypeCode(object o);
    internal static DataTypeCode GetTypeCode(object o, bool throwException, Boolean& valid);
    protected static bool IsNull(DataTypeCode typeCode);
    protected static bool IsVariant(DataTypeCode typeCode);
    protected static void ConvertToDoubleOrDecimal(DataTypeCode numericType, object numericData, DataTypeCode& doubleOrDecimalType, Object& doubleOrDecimalData);
    protected static object Add(DataTypeCode xType, object x, DataTypeCode yType, object y);
    protected static object Square(DataTypeCode xType, object x);
    public abstract virtual void Serialize(IntermediateFormatWriter writer);
    public abstract virtual void Deserialize(IntermediateFormatReader reader);
    public abstract virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public abstract virtual ObjectType GetObjectType();
    public abstract virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateInfo : object {
    private string m_name;
    private AggregateTypes m_aggregateType;
    private ExpressionInfo[] m_expressions;
    private List`1<string> m_duplicateNames;
    private int m_dataSetIndexInCollection;
    private string m_scope;
    private bool m_hasScope;
    private bool m_recursive;
    private static Declaration m_Declaration;
    private AggregateParamExprHost[] m_expressionHosts;
    private bool m_exprHostInitialized;
    private ObjectModelImpl m_exprHostReportObjectModel;
    private bool m_suppressExceptions;
    private bool m_hasCachedFieldReferences;
    private int m_staticId;
    internal bool MustCopyAggregateResult { get; }
    internal string Name { get; internal set; }
    internal string EvaluationScope { get; internal set; }
    internal AggregateTypes AggregateType { get; internal set; }
    internal ExpressionInfo[] Expressions { get; internal set; }
    internal List`1<string> DuplicateNames { get; internal set; }
    internal int DataSetIndexInCollection { get; internal set; }
    internal string ExpressionText { get; }
    internal AggregateParamExprHost[] ExpressionHosts { get; }
    internal bool ExprHostInitialized { get; internal set; }
    internal bool Recursive { get; internal set; }
    internal bool SuppressExceptions { get; }
    public int ID { get; }
    private static DataAggregateInfo();
    internal virtual bool get_MustCopyAggregateResult();
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_EvaluationScope();
    internal void set_EvaluationScope(string value);
    internal AggregateTypes get_AggregateType();
    internal void set_AggregateType(AggregateTypes value);
    internal ExpressionInfo[] get_Expressions();
    internal void set_Expressions(ExpressionInfo[] value);
    internal List`1<string> get_DuplicateNames();
    internal void set_DuplicateNames(List`1<string> value);
    internal int get_DataSetIndexInCollection();
    internal void set_DataSetIndexInCollection(int value);
    internal string get_ExpressionText();
    internal AggregateParamExprHost[] get_ExpressionHosts();
    internal bool get_ExprHostInitialized();
    internal void set_ExprHostInitialized(bool value);
    internal bool get_Recursive();
    internal void set_Recursive(bool value);
    internal bool get_SuppressExceptions();
    internal bool ShouldRecordFieldReferences();
    internal void StoreFieldReferences(OnDemandProcessingContext odpContext, List`1<string> dataFieldNames);
    public virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual string GetAsString();
    internal void SetScope(string scope);
    internal bool GetScope(String& scope);
    internal void SetExprHosts(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal bool IsPostSortAggregate();
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public sealed virtual int get_ID();
    public sealed virtual void SetID(int id);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateObj : object {
    private bool m_nonAggregateMode;
    private string m_name;
    private List`1<string> m_duplicateNames;
    private DataAggregate m_aggregator;
    [StaticReferenceAttribute]
private DataAggregateInfo m_aggregateDef;
    [StaticReferenceAttribute]
private ReportRuntime m_reportRT;
    private bool m_usedInExpression;
    private DataAggregateObjResult m_aggregateResult;
    private static Declaration m_declaration;
    internal string Name { get; }
    internal List`1<string> DuplicateNames { get; }
    internal bool NonAggregateMode { get; }
    internal DataAggregateInfo AggregateDef { get; }
    internal bool UsedInExpression { get; internal set; }
    public int Size { get; }
    internal DataAggregateObj(DataAggregateInfo aggInfo, OnDemandProcessingContext odpContext);
    internal DataAggregateObj(DataAggregateInfo aggrDef, DataAggregateObjResult aggrResult);
    private static DataAggregateObj();
    internal string get_Name();
    internal List`1<string> get_DuplicateNames();
    internal bool get_NonAggregateMode();
    internal DataAggregateInfo get_AggregateDef();
    internal bool get_UsedInExpression();
    internal void set_UsedInExpression(bool value);
    internal void Init();
    internal void Update();
    internal DataAggregateObjResult AggregateResult();
    internal bool EvaluateParameters(Object[]& values, DataFieldStatus& fieldStatus);
    internal void Set(DataAggregateObjResult aggregateResult);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, String[] arguments);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataAggregateObjResult : object {
    internal bool ErrorOccurred;
    internal object Value;
    internal bool HasCode;
    internal ProcessingErrorCode Code;
    internal Severity Severity;
    internal String[] Arguments;
    internal DataFieldStatus FieldStatus;
    private static Declaration m_Declaration;
    public int Size { get; }
    internal DataAggregateObjResult(DataAggregateObjResult original);
    private static DataAggregateObjResult();
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataCell : Cell {
    private DataValueList m_dataValues;
    private static Declaration m_Declaration;
    protected bool IsDataRegionBodyCell { get; }
    internal DataValueList DataValues { get; internal set; }
    internal DataCell(int id, DataRegion dataRegion);
    private static DataCell();
    protected virtual bool get_IsDataRegionBodyCell();
    internal DataValueList get_DataValues();
    internal void set_DataValues(DataValueList value);
    internal virtual void InternalInitialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataCellInstance : ScopeInstance {
    private Cell m_cellDef;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal Cell CellDef { get; }
    public int Size { get; }
    private DataCellInstance(OnDemandProcessingContext odpContext, Cell cellDef, DataAggregateObjResult[] runningValueValues, long firstRowOffset);
    private static DataCellInstance();
    internal virtual ObjectType get_ObjectType();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal Cell get_CellDef();
    internal static DataCellInstance CreateInstance(IMemberHierarchy dataRegionOrRowMemberInstance, OnDemandProcessingContext odpContext, Cell cellDef, long firstRowOffset, int columnMemberSequenceId);
    internal static DataCellInstance CreateInstance(IMemberHierarchy dataRegionOrRowMemberInstance, OnDemandProcessingContext odpContext, Cell cellDef, DataAggregateObjResult[] runningValueValues, long firstRowOffset, int columnMemberSequenceId);
    internal void SetupEnvironment(OnDemandProcessingContext odpContext, int dataSetIndex);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataCellList : CellList {
    internal DataCell Item { get; }
    internal DataCellList(int capacity);
    internal DataCell get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataMember : ReportHierarchyNode {
    private DataMemberList m_dataMembers;
    private bool m_subtotal;
    private DataMember m_parentMember;
    private static Declaration m_Declaration;
    private DataGroupExprHost m_exprHost;
    internal HierarchyNodeList InnerHierarchy { get; }
    internal DataMemberList SubMembers { get; internal set; }
    internal DataGroupExprHost ExprHost { get; }
    internal DataMember ParentMember { get; internal set; }
    internal bool Subtotal { get; internal set; }
    internal DataMember(int id, CustomReportItem crItem);
    private static DataMember();
    internal virtual HierarchyNodeList get_InnerHierarchy();
    internal DataMemberList get_SubMembers();
    internal void set_SubMembers(DataMemberList value);
    internal DataGroupExprHost get_ExprHost();
    internal DataMember get_ParentMember();
    internal void set_ParentMember(DataMember value);
    internal bool get_Subtotal();
    internal void set_Subtotal(bool value);
    protected virtual void DataGroupStart(ExprHostBuilder builder);
    protected virtual int DataGroupEnd(ExprHostBuilder builder);
    internal virtual object PublishClone(AutomaticSubtotalContext context, DataRegion newContainingRegion, bool isSubtotal);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(IMemberNode memberExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void MemberContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataMemberList : HierarchyNodeList {
    internal DataMember Item { get; }
    internal DataMemberList(int capacity);
    internal DataMember get_Item(int index);
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.DataRegion : ReportItem {
    protected string m_dataSetName;
    protected ExpressionInfo m_noRowsMessage;
    protected int m_columnCount;
    protected int m_rowCount;
    protected List`1<int> m_repeatSiblings;
    protected ProcessingInnerGroupings m_processingInnerGrouping;
    protected Sorting m_sorting;
    protected List`1<Filter> m_filters;
    protected List`1<DataAggregateInfo> m_aggregates;
    protected List`1<DataAggregateInfo> m_postSortAggregates;
    protected List`1<RunningValueInfo> m_runningValues;
    protected List`1<DataAggregateInfo> m_cellAggregates;
    protected List`1<DataAggregateInfo> m_cellPostSortAggregates;
    protected List`1<RunningValueInfo> m_cellRunningValues;
    protected List`1<ExpressionInfo> m_userSortExpressions;
    private Byte[] m_textboxesInScope;
    private Byte[] m_variablesInScope;
    private bool m_needToCacheDataRows;
    private List`1<IInScopeEventSource> m_inScopeEventSources;
    protected InScopeSortFilterHashtable m_detailSortFiltersInScope;
    protected PageBreakLocation m_pageBreakLocation;
    protected int m_indexInCollection;
    protected int m_outerGroupingMaximumDynamicLevel;
    protected int m_outerGroupingDynamicMemberCount;
    protected int m_outerGroupingDynamicPathCount;
    protected int m_innerGroupingMaximumDynamicLevel;
    protected int m_innerGroupingDynamicMemberCount;
    protected int m_innerGroupingDynamicPathCount;
    private static Declaration m_Declaration;
    private bool m_rowScopeFound;
    private bool m_columnScopeFound;
    private bool m_hasDynamicColumnMember;
    private bool m_hasDynamicRowMember;
    private ScopeChainInfo m_scopeChainInfo;
    protected DataSet m_cachedDataSet;
    protected PageBreakStates m_pagebreakState;
    protected RuntimeDataRegionObjReference m_runtimeDataRegionObj;
    protected List`1<int> m_outermostStaticColumnIndexes;
    protected List`1<int> m_outermostStaticRowIndexes;
    protected int m_currentCellOuterIndex;
    protected int m_currentCellInnerIndex;
    protected int m_sequentialColMemberInstanceIndex;
    protected int m_sequentialRowMemberInstanceIndex;
    protected Hashtable m_scopeNames;
    protected bool m_inTablixCell;
    protected Boolean[] m_isSortFilterTarget;
    protected Boolean[] m_isSortFilterExpressionScope;
    protected Int32[] m_sortFilterSourceDetailScopeInfo;
    protected int m_currentColDetailIndex;
    protected int m_currentRowDetailIndex;
    protected bool m_noRows;
    protected bool m_processCellRunningValues;
    protected bool m_processOutermostStaticCellRunningValues;
    private bool m_inOutermostStaticCells;
    protected DataRegionInstance m_currentDataRegionInstance;
    protected AggregateRowInfo m_dataTablixAggregateRowInfo;
    protected AggregateRowInfo[] m_outerGroupingAggregateRowInfo;
    protected Int32[] m_outerGroupingIndexes;
    protected IReference`1[] m_currentOuterGroupRootObjs;
    protected IReference`1<RuntimeDataTablixGroupRootObj> m_currentOuterGroupRoot;
    internal bool IsDataRegion { get; }
    internal HierarchyNodeList ColumnMembers { get; }
    internal HierarchyNodeList RowMembers { get; }
    internal HierarchyNodeList OuterMembers { get; }
    internal HierarchyNodeList InnerMembers { get; }
    internal RowList Rows { get; }
    internal string DataSetName { get; internal set; }
    internal bool NoRows { get; internal set; }
    internal ExpressionInfo NoRowsMessage { get; internal set; }
    internal int ColumnCount { get; internal set; }
    internal int RowCount { get; internal set; }
    internal ProcessingInnerGroupings ProcessingInnerGrouping { get; internal set; }
    internal List`1<int> RepeatSiblings { get; internal set; }
    internal Sorting Sorting { get; internal set; }
    internal List`1<Filter> Filters { get; internal set; }
    internal List`1<DataAggregateInfo> Aggregates { get; internal set; }
    internal List`1<DataAggregateInfo> PostSortAggregates { get; internal set; }
    internal List`1<RunningValueInfo> RunningValues { get; internal set; }
    internal List`1<DataAggregateInfo> CellAggregates { get; internal set; }
    internal List`1<DataAggregateInfo> CellPostSortAggregates { get; internal set; }
    internal List`1<RunningValueInfo> CellRunningValues { get; internal set; }
    internal List`1<ExpressionInfo> UserSortExpressions { get; internal set; }
    internal InScopeSortFilterHashtable DetailSortFiltersInScope { get; internal set; }
    internal Hashtable ScopeNames { get; internal set; }
    internal RuntimeDataRegionObjReference RuntimeDataRegionObj { get; internal set; }
    internal List`1<int> OutermostStaticColumnIndexes { get; internal set; }
    internal List`1<int> OutermostStaticRowIndexes { get; internal set; }
    internal int CurrentCellOuterIndex { get; internal set; }
    internal int CurrentCellInnerIndex { get; internal set; }
    internal IReference`1<RuntimeDataTablixGroupRootObj> CurrentOuterGroupRoot { get; internal set; }
    internal IReference`1[] CurrentOuterGroupRootObjs { get; internal set; }
    internal Int32[] OuterGroupingIndexes { get; }
    internal bool InTablixCell { get; internal set; }
    internal Boolean[] IsSortFilterTarget { get; internal set; }
    internal Boolean[] IsSortFilterExpressionScope { get; internal set; }
    internal Int32[] SortFilterSourceDetailScopeInfo { get; internal set; }
    internal int CurrentColDetailIndex { get; internal set; }
    internal int CurrentRowDetailIndex { get; internal set; }
    internal bool ProcessCellRunningValues { get; internal set; }
    internal bool ProcessOutermostStaticCellRunningValues { get; internal set; }
    internal bool InOutermostStaticCells { get; internal set; }
    private int Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.ID { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.ScopeName { get; }
    private Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.IsSortFilterTarget { get; private set; }
    private Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.IsSortFilterExpressionScope { get; private set; }
    private List`1<ExpressionInfo> Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.UserSortExpressions { get; private set; }
    private IndexedExprHost Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.UserSortExpressionsHost { get; }
    protected IndexedExprHost UserSortExpressionsHost { get; }
    internal bool ColumnScopeFound { get; internal set; }
    internal bool RowScopeFound { get; internal set; }
    public int IndexInCollection { get; public set; }
    public IndexedInCollectionType IndexedInCollectionType { get; }
    internal DataRegionInstance CurrentDataRegionInstance { get; internal set; }
    internal List`1<IInScopeEventSource> InScopeEventSources { get; }
    internal int OuterGroupingMaximumDynamicLevel { get; }
    internal int OuterGroupingDynamicMemberCount { get; }
    internal int OuterGroupingDynamicPathCount { get; }
    internal ScopeChainInfo ScopeChainInfo { get; internal set; }
    internal int InnerGroupingMaximumDynamicLevel { get; }
    internal int InnerGroupingDynamicMemberCount { get; }
    internal int InnerGroupingDynamicPathCount { get; }
    private bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.NeedToCacheDataRows { get; private set; }
    public PageBreakLocation PageBreakLocation { get; public set; }
    protected DataRegion(ReportItem parent);
    protected DataRegion(int id, ReportItem parent);
    private static DataRegion();
    internal virtual bool get_IsDataRegion();
    internal abstract virtual HierarchyNodeList get_ColumnMembers();
    internal abstract virtual HierarchyNodeList get_RowMembers();
    internal HierarchyNodeList get_OuterMembers();
    internal HierarchyNodeList get_InnerMembers();
    internal abstract virtual RowList get_Rows();
    internal string get_DataSetName();
    internal void set_DataSetName(string value);
    internal bool get_NoRows();
    internal void set_NoRows(bool value);
    internal ExpressionInfo get_NoRowsMessage();
    internal void set_NoRowsMessage(ExpressionInfo value);
    internal int get_ColumnCount();
    internal void set_ColumnCount(int value);
    internal int get_RowCount();
    internal void set_RowCount(int value);
    internal ProcessingInnerGroupings get_ProcessingInnerGrouping();
    internal void set_ProcessingInnerGrouping(ProcessingInnerGroupings value);
    internal List`1<int> get_RepeatSiblings();
    internal void set_RepeatSiblings(List`1<int> value);
    internal Sorting get_Sorting();
    internal void set_Sorting(Sorting value);
    internal List`1<Filter> get_Filters();
    internal void set_Filters(List`1<Filter> value);
    internal List`1<DataAggregateInfo> get_Aggregates();
    internal void set_Aggregates(List`1<DataAggregateInfo> value);
    internal List`1<DataAggregateInfo> get_PostSortAggregates();
    internal void set_PostSortAggregates(List`1<DataAggregateInfo> value);
    internal List`1<RunningValueInfo> get_RunningValues();
    internal void set_RunningValues(List`1<RunningValueInfo> value);
    internal List`1<DataAggregateInfo> get_CellAggregates();
    internal void set_CellAggregates(List`1<DataAggregateInfo> value);
    internal List`1<DataAggregateInfo> get_CellPostSortAggregates();
    internal void set_CellPostSortAggregates(List`1<DataAggregateInfo> value);
    internal List`1<RunningValueInfo> get_CellRunningValues();
    internal void set_CellRunningValues(List`1<RunningValueInfo> value);
    internal List`1<ExpressionInfo> get_UserSortExpressions();
    internal void set_UserSortExpressions(List`1<ExpressionInfo> value);
    internal InScopeSortFilterHashtable get_DetailSortFiltersInScope();
    internal void set_DetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal Hashtable get_ScopeNames();
    internal void set_ScopeNames(Hashtable value);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.VariableInScope(int sequenceIndex);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.TextboxInScope(int sequenceIndex);
    internal RuntimeDataRegionObjReference get_RuntimeDataRegionObj();
    internal void set_RuntimeDataRegionObj(RuntimeDataRegionObjReference value);
    internal List`1<int> get_OutermostStaticColumnIndexes();
    internal void set_OutermostStaticColumnIndexes(List`1<int> value);
    internal List`1<int> get_OutermostStaticRowIndexes();
    internal void set_OutermostStaticRowIndexes(List`1<int> value);
    internal int get_CurrentCellOuterIndex();
    internal void set_CurrentCellOuterIndex(int value);
    internal int get_CurrentCellInnerIndex();
    internal void set_CurrentCellInnerIndex(int value);
    internal IReference`1<RuntimeDataTablixGroupRootObj> get_CurrentOuterGroupRoot();
    internal void set_CurrentOuterGroupRoot(IReference`1<RuntimeDataTablixGroupRootObj> value);
    internal IReference`1[] get_CurrentOuterGroupRootObjs();
    internal void set_CurrentOuterGroupRootObjs(IReference`1[] value);
    internal Int32[] get_OuterGroupingIndexes();
    internal bool get_InTablixCell();
    internal void set_InTablixCell(bool value);
    internal Boolean[] get_IsSortFilterTarget();
    internal void set_IsSortFilterTarget(Boolean[] value);
    internal Boolean[] get_IsSortFilterExpressionScope();
    internal void set_IsSortFilterExpressionScope(Boolean[] value);
    internal Int32[] get_SortFilterSourceDetailScopeInfo();
    internal void set_SortFilterSourceDetailScopeInfo(Int32[] value);
    internal int get_CurrentColDetailIndex();
    internal void set_CurrentColDetailIndex(int value);
    internal int get_CurrentRowDetailIndex();
    internal void set_CurrentRowDetailIndex(int value);
    internal bool get_ProcessCellRunningValues();
    internal void set_ProcessCellRunningValues(bool value);
    internal bool get_ProcessOutermostStaticCellRunningValues();
    internal void set_ProcessOutermostStaticCellRunningValues(bool value);
    internal bool get_InOutermostStaticCells();
    internal void set_InOutermostStaticCells(bool value);
    private sealed virtual override int Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_ID();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_ScopeName();
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_IsSortFilterTarget();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_IsSortFilterExpressionScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_IsSortFilterExpressionScope(Boolean[] value);
    private sealed virtual override List`1<ExpressionInfo> Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_UserSortExpressions();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_UserSortExpressions(List`1<ExpressionInfo> value);
    private sealed virtual override IndexedExprHost Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_UserSortExpressionsHost();
    protected abstract virtual IndexedExprHost get_UserSortExpressionsHost();
    internal bool get_ColumnScopeFound();
    internal void set_ColumnScopeFound(bool value);
    internal bool get_RowScopeFound();
    internal void set_RowScopeFound(bool value);
    public sealed virtual int get_IndexInCollection();
    public sealed virtual void set_IndexInCollection(int value);
    public sealed virtual IndexedInCollectionType get_IndexedInCollectionType();
    internal DataRegionInstance get_CurrentDataRegionInstance();
    internal void set_CurrentDataRegionInstance(DataRegionInstance value);
    internal List`1<IInScopeEventSource> get_InScopeEventSources();
    internal int get_OuterGroupingMaximumDynamicLevel();
    internal int get_OuterGroupingDynamicMemberCount();
    internal int get_OuterGroupingDynamicPathCount();
    internal ScopeChainInfo get_ScopeChainInfo();
    internal void set_ScopeChainInfo(ScopeChainInfo value);
    internal int get_InnerGroupingMaximumDynamicLevel();
    internal int get_InnerGroupingDynamicMemberCount();
    internal int get_InnerGroupingDynamicPathCount();
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.get_NeedToCacheDataRows();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.set_NeedToCacheDataRows(bool value);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeTextBox(TextBox textbox);
    protected virtual void AddInScopeTextBox(TextBox textbox);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.ResetTextBoxImpls(OnDemandProcessingContext context);
    internal virtual void ResetTextBoxImpls(OnDemandProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeEventSource(IInScopeEventSource eventSource);
    internal virtual bool Initialize(InitializationContext context);
    private int GetMaximumDynamicLevelAndAssignHierarchyIndexes(HierarchyNodeList members, int parentDynamicLevels, Int32& hierarchyDynamicIndex, Int32& hierarchyPathIndex);
    protected GroupingList GenerateUserSortGroupingList(bool rowIsInnerGrouping);
    private void AddGroupsToList(HierarchyNodeList members, GroupingList groups);
    protected virtual void InitializeRows(InitializationContext context);
    protected virtual void InitializeCorner(InitializationContext context);
    protected abstract virtual bool ValidateInnerStructure(InitializationContext context);
    protected virtual bool InitializeMembers(InitializationContext context);
    protected virtual bool InitializeColumnMembers(InitializationContext context);
    protected virtual bool InitializeRowMembers(InitializationContext context);
    protected virtual void InitializeData(InitializationContext context);
    protected virtual void InitializeDataRows(Int32& index, ReportHierarchyNode member, InitializationContext context);
    protected virtual void InitializeDataColumns(int parentRowID, int rowIndex, InitializationContext context);
    protected virtual void InitializeDataColumns(int parentRowID, int rowIndex, Int32& columnIndex, ReportHierarchyNode member, InitializationContext context);
    internal virtual void InitializeRVDirectionDependentItems(InitializationContext context);
    private void InitializeRVDirectionDependentItems(InitializationContext context, bool traverseInner);
    private void InitializeRVDirectionDependentItems(Int32& outerIndex, Int32& innerIndex, InitializationContext context, bool traverseInner, bool initializeCells);
    private void InitializeRVDirectionDependentItems(Int32& outerIndex, Int32& innerIndex, ReportHierarchyNode member, InitializationContext context, bool traverseInner, bool initializeCells);
    protected virtual void InitializeRVDirectionDependentItemsInCorner(InitializationContext context);
    protected virtual void InitializeRVDirectionDependentItems(int outerIndex, int innerIndex, InitializationContext context);
    internal virtual void DetermineGroupingExprValueCount(InitializationContext context, int groupingExprCount);
    private void DetermineGroupingExprValueCount(Int32& outerIndex, Int32& innerIndex, InitializationContext context, bool traverseInner, int groupingExprCount);
    private void DetermineGroupingExprValueCount(Int32& outerIndex, Int32& innerIndex, ReportHierarchyNode member, InitializationContext context, bool traverseInner, int groupingExprCount);
    protected virtual void DetermineGroupingExprValueCountInCorner(InitializationContext context, int groupingExprCount);
    protected virtual void DetermineGroupingExprValueCount(int outerIndex, int innerIndex, InitializationContext context, int groupingExprCount);
    protected static void CopyCellAggregates(List`1<AggregateType> aggregates, List`1& dataRegionCellAggregates);
    internal DataSet GetDataSet(Report reportDefinition);
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetAggregateList();
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetPostSortAggregateList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.ClearIfEmpty();
    private sealed virtual override List`1<RunningValueInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.ClearIfEmpty();
    internal void ConvertCellAggregatesToIndexes();
    private static void GenerateAggregateIndexMapping(List`1<AggregateType> cellAggregates, Dictionary`2<string, int> aggregateIndexes);
    public virtual bool IgnorePageBreaks();
    public virtual bool HasPageBreaks(bool atStart);
    public virtual PageBreakLocation get_PageBreakLocation();
    public virtual void set_PageBreakLocation(PageBreakLocation value);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal abstract virtual object EvaluateNoRowsMessageExpression();
    internal string EvaluateNoRowsMessage(DataRegionInstance romInstance, OnDemandProcessingContext odpContext);
    protected void DataRegionSetExprHost(ReportItemExprHost exprHost, SortExprHost sortExprHost, IList`1<FilterExprHost> FilterHostsRemotable, IndexedExprHost UserSortExpressionsHost, ObjectModelImpl reportObjectModel);
    internal abstract virtual void DataRegionContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    internal void SaveOuterGroupingAggregateRowInfo(int dynamicLevel, OnDemandProcessingContext odpContext);
    internal void SetDataTablixAggregateRowInfo(AggregateRowInfo aggregateRowInfo);
    internal void SetCellAggregateRowInfo(int dynamicLevel, OnDemandProcessingContext odpContext);
    internal void ResetInstancePathCascade();
    internal void ResetInstanceIndexes();
    internal void UpdateOuterGroupingIndexes(IReference`1<RuntimeDataTablixGroupRootObj> groupRoot, int groupLeafIndex);
    internal void ResetOuterGroupingIndexesForOuterPeerGroup(int level);
    internal void ResetOuterGroupingAggregateRowInfo();
    internal int AddMemberInstance(bool isColumn, int scopeLevel);
    internal void AddCell();
    internal void NewOuterCells();
    internal void ResetTopLevelDynamicMemberInstanceCount();
    private void ResetTopLevelDynamicMemberInstanceCount(HierarchyNodeList topLevelMembers);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataRegionInstance : ScopeInstance {
    private int m_dataSetIndexInCollection;
    private List`1<ScalableList`1<DataRegionMemberInstance>> m_rowMembers;
    private List`1<ScalableList`1<DataRegionMemberInstance>> m_columnMembers;
    private List`1<ScalableList`1<DataCellInstance>> m_cells;
    [ReferenceAttribute]
private DataRegion m_dataRegionDef;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal DataRegion DataRegionDef { get; }
    internal bool NoRows { get; }
    internal int DataSetIndexInCollection { get; }
    internal List`1<ScalableList`1<DataRegionMemberInstance>> TopLevelRowMembers { get; }
    internal List`1<ScalableList`1<DataRegionMemberInstance>> TopLevelColumnMembers { get; }
    internal List`1<ScalableList`1<DataCellInstance>> Cells { get; }
    public int Size { get; }
    private DataRegionInstance(DataRegion dataRegionDef, int dataSetIndex);
    private static DataRegionInstance();
    internal virtual ObjectType get_ObjectType();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal DataRegion get_DataRegionDef();
    internal bool get_NoRows();
    internal int get_DataSetIndexInCollection();
    internal List`1<ScalableList`1<DataRegionMemberInstance>> get_TopLevelRowMembers();
    internal List`1<ScalableList`1<DataRegionMemberInstance>> get_TopLevelColumnMembers();
    internal List`1<ScalableList`1<DataCellInstance>> get_Cells();
    internal static IReference`1<DataRegionInstance> CreateInstance(ScopeInstance parentInstance, OnDemandMetadata odpMetadata, DataRegion dataRegionDef, int dataSetIndex);
    internal virtual void InstanceComplete();
    private sealed virtual override IDisposable Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.AddMemberInstance(DataRegionMemberInstance instance, int indexInCollection, IScalabilityCache cache, Int32& instanceIndex);
    private sealed virtual override IDisposable Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.AddCellInstance(int columnMemberSequenceId, int cellIndexInCollection, DataCellInstance cellInstance, IScalabilityCache cache);
    internal static IDisposable AddCellInstance(List`1<ScalableList`1<DataCellInstance>> cells, int columnMemberSequenceId, int cellIndexInCollection, DataCellInstance cellInstance, IScalabilityCache cache);
    internal void SetupEnvironment(OnDemandProcessingContext odpContext);
    private sealed virtual override IList`1<DataRegionMemberInstance> Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.GetChildMemberInstances(bool isRowMember, int memberIndexInCollection);
    private sealed virtual override IList`1<DataCellInstance> Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.GetCellInstances(int columnMemberSequenceId);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataRegionMemberInstance : ScopeInstance {
    private int m_memberInstanceIndexWithinScopeLevel;
    private List`1<ScalableList`1<DataRegionMemberInstance>> m_children;
    private List`1<ScalableList`1<DataCellInstance>> m_cells;
    private Object[] m_variables;
    private int m_recursiveLevel;
    private Object[] m_groupExprValues;
    private int m_parentInstanceIndex;
    private Nullable`1<bool> m_hasRecursiveChildren;
    [ReferenceAttribute]
private ReportHierarchyNode m_memberDef;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal int MemberInstanceIndexWithinScopeLevel { get; }
    internal int RecursiveLevel { get; }
    internal Object[] GroupVariables { get; }
    internal Object[] GroupExprValues { get; }
    internal List`1<ScalableList`1<DataRegionMemberInstance>> Children { get; }
    internal List`1<ScalableList`1<DataCellInstance>> Cells { get; }
    internal ReportHierarchyNode MemberDef { get; }
    internal int RecursiveParentIndex { get; internal set; }
    internal Nullable`1<bool> HasRecursiveChildren { get; internal set; }
    public int Size { get; }
    private DataRegionMemberInstance(OnDemandProcessingContext odpContext, ReportHierarchyNode memberDef, long firstRowOffset, int memberInstanceIndexWithinScopeLevel, int recursiveLevel, List`1<object> groupExpressionValues, Object[] groupVariableValues);
    private static DataRegionMemberInstance();
    internal virtual ObjectType get_ObjectType();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal int get_MemberInstanceIndexWithinScopeLevel();
    internal int get_RecursiveLevel();
    internal Object[] get_GroupVariables();
    internal Object[] get_GroupExprValues();
    internal List`1<ScalableList`1<DataRegionMemberInstance>> get_Children();
    internal List`1<ScalableList`1<DataCellInstance>> get_Cells();
    internal ReportHierarchyNode get_MemberDef();
    internal int get_RecursiveParentIndex();
    internal void set_RecursiveParentIndex(int value);
    internal Nullable`1<bool> get_HasRecursiveChildren();
    internal void set_HasRecursiveChildren(Nullable`1<bool> value);
    internal static DataRegionMemberInstance CreateInstance(IMemberHierarchy parentInstance, OnDemandProcessingContext odpContext, ReportHierarchyNode memberDef, long firstRowOffset, int memberInstanceIndexWithinScopeLevel, int recursiveLevel, List`1<object> groupExpressionValues, Object[] groupVariableValues, Int32& instanceIndex);
    internal virtual void InstanceComplete();
    private sealed virtual override IDisposable Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.AddMemberInstance(DataRegionMemberInstance instance, int indexInCollection, IScalabilityCache cache, Int32& instanceIndex);
    private sealed virtual override IDisposable Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.AddCellInstance(int columnMemberSequenceId, int cellIndexInCollection, DataCellInstance cellInstance, IScalabilityCache cache);
    internal void SetupEnvironment(OnDemandProcessingContext odpContext, int dataSetIndex);
    private sealed virtual override IList`1<DataRegionMemberInstance> Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.GetChildMemberInstances(bool isRowMember, int memberIndexInCollection);
    private sealed virtual override IList`1<DataCellInstance> Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy.GetCellInstances(int columnMemberSequenceId);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataSet : IDOwner {
    internal static UInt32 CompareFlag_Default;
    internal static UInt32 CompareFlag_IgnoreCase;
    internal static UInt32 CompareFlag_IgnoreNonSpace;
    internal static UInt32 CompareFlag_IgnoreKanatype;
    internal static UInt32 CompareFlag_IgnoreWidth;
    private string m_name;
    private List`1<Field> m_fields;
    private ReportQuery m_query;
    private TriState m_caseSensitivity;
    private string m_collation;
    private TriState m_accentSensitivity;
    private TriState m_kanatypeSensitivity;
    private TriState m_widthSensitivity;
    [ReferenceAttribute]
private List`1<DataRegion> m_dataRegions;
    private List`1<DataAggregateInfo> m_aggregates;
    private List`1<Filter> m_filters;
    private bool m_usedOnlyInParameters;
    private int m_nonCalculatedFieldCount;
    private int m_exprHostID;
    private List`1<DataAggregateInfo> m_postSortAggregates;
    private bool m_hasDetailUserSortFilter;
    private List`1<ExpressionInfo> m_userSortExpressions;
    private bool m_dynamicFieldReferences;
    private TriState m_interpretSubtotalsAsDetails;
    private bool m_hasSubReports;
    private int m_indexInCollection;
    [ReferenceAttribute]
private DataSource m_dataSource;
    private UInt32 m_lcid;
    private bool m_usedOnlyInParametersSet;
    private Nullable`1<bool> m_isShareable;
    private DataSetExprHost m_exprHost;
    private string m_autoDetectedCollation;
    private Boolean[] m_isSortFilterTarget;
    private Hashtable m_referencedFieldProperties;
    private bool m_usedInAggregates;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal string Name { get; internal set; }
    internal List`1<Field> Fields { get; internal set; }
    internal ReportQuery Query { get; internal set; }
    internal TriState CaseSensitivity { get; internal set; }
    internal string Collation { get; internal set; }
    internal TriState AccentSensitivity { get; internal set; }
    internal TriState KanatypeSensitivity { get; internal set; }
    internal TriState WidthSensitivity { get; internal set; }
    internal List`1<DataRegion> DataRegions { get; internal set; }
    internal List`1<DataAggregateInfo> Aggregates { get; internal set; }
    internal List`1<Filter> Filters { get; internal set; }
    internal bool UsedOnlyInParametersSet { get; }
    internal bool UsedOnlyInParameters { get; internal set; }
    internal int NonCalculatedFieldCount { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal List`1<DataAggregateInfo> PostSortAggregates { get; internal set; }
    internal UInt32 LCID { get; internal set; }
    internal bool HasDetailUserSortFilter { get; internal set; }
    internal List`1<ExpressionInfo> UserSortExpressions { get; internal set; }
    internal DataSetExprHost ExprHost { get; }
    internal string AutoDetectedCollation { get; internal set; }
    internal Boolean[] IsSortFilterTarget { get; internal set; }
    private int Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.ID { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.ScopeName { get; }
    private Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.IsSortFilterTarget { get; private set; }
    private Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.IsSortFilterExpressionScope { get; private set; }
    private List`1<ExpressionInfo> Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.UserSortExpressions { get; private set; }
    private IndexedExprHost Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.UserSortExpressionsHost { get; }
    internal bool DynamicFieldReferences { get; internal set; }
    internal bool UsedInAggregates { get; internal set; }
    internal TriState InterpretSubtotalsAsDetails { get; internal set; }
    internal bool HasSubReports { get; internal set; }
    internal int IndexInCollection { get; }
    internal DataSource DataSource { get; internal set; }
    internal DataSet(int id, int indexCounter);
    private static DataSet();
    internal ObjectType get_ObjectType();
    internal string get_Name();
    internal void set_Name(string value);
    internal List`1<Field> get_Fields();
    internal void set_Fields(List`1<Field> value);
    internal ReportQuery get_Query();
    internal void set_Query(ReportQuery value);
    internal TriState get_CaseSensitivity();
    internal void set_CaseSensitivity(TriState value);
    internal string get_Collation();
    internal void set_Collation(string value);
    internal TriState get_AccentSensitivity();
    internal void set_AccentSensitivity(TriState value);
    internal TriState get_KanatypeSensitivity();
    internal void set_KanatypeSensitivity(TriState value);
    internal TriState get_WidthSensitivity();
    internal void set_WidthSensitivity(TriState value);
    internal List`1<DataRegion> get_DataRegions();
    internal void set_DataRegions(List`1<DataRegion> value);
    internal List`1<DataAggregateInfo> get_Aggregates();
    internal void set_Aggregates(List`1<DataAggregateInfo> value);
    internal List`1<Filter> get_Filters();
    internal void set_Filters(List`1<Filter> value);
    internal bool get_UsedOnlyInParametersSet();
    internal bool get_UsedOnlyInParameters();
    internal void set_UsedOnlyInParameters(bool value);
    internal int get_NonCalculatedFieldCount();
    internal void set_NonCalculatedFieldCount(int value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal List`1<DataAggregateInfo> get_PostSortAggregates();
    internal void set_PostSortAggregates(List`1<DataAggregateInfo> value);
    internal UInt32 get_LCID();
    internal void set_LCID(UInt32 value);
    internal bool get_HasDetailUserSortFilter();
    internal void set_HasDetailUserSortFilter(bool value);
    internal List`1<ExpressionInfo> get_UserSortExpressions();
    internal void set_UserSortExpressions(List`1<ExpressionInfo> value);
    internal DataSetExprHost get_ExprHost();
    internal string get_AutoDetectedCollation();
    internal void set_AutoDetectedCollation(string value);
    internal Boolean[] get_IsSortFilterTarget();
    internal void set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override int Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_ID();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_ScopeName();
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_IsSortFilterTarget();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_IsSortFilterExpressionScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_IsSortFilterExpressionScope(Boolean[] value);
    private sealed virtual override List`1<ExpressionInfo> Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_UserSortExpressions();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_UserSortExpressions(List`1<ExpressionInfo> value);
    private sealed virtual override IndexedExprHost Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_UserSortExpressionsHost();
    internal bool get_DynamicFieldReferences();
    internal void set_DynamicFieldReferences(bool value);
    internal bool get_UsedInAggregates();
    internal void set_UsedInAggregates(bool value);
    internal TriState get_InterpretSubtotalsAsDetails();
    internal void set_InterpretSubtotalsAsDetails(TriState value);
    internal bool get_HasSubReports();
    internal void set_HasSubReports(bool value);
    internal int get_IndexInCollection();
    internal DataSource get_DataSource();
    internal void set_DataSource(DataSource value);
    internal void Initialize(InitializationContext context);
    private void InternalInitialize(InitializationContext context);
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetAggregateList();
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetPostSortAggregateList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.ClearIfEmpty();
    internal void CheckNonCalculatedFieldCount();
    internal void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal void SetupRuntimeEnvironment(OnDemandProcessingContext odpContext);
    internal bool NeedAutoDetectCollation();
    internal void MergeCollationSettings(ErrorContext errorContext, string dataSourceType, string cultureName, bool caseSensitive, bool accentSensitive, bool kanatypeSensitive, bool widthSensitive);
    private void MergeSensitivity(TriState& current, bool detectedValue);
    internal UInt32 GetSQLSortCompareFlags();
    internal CompareOptions GetCLRCompareOptions();
    internal void MergeFieldProperties(ExpressionInfo expressionInfo);
    internal void PopulateReferencedFieldProperties();
    internal bool IsShareable(bool canShareDataSets);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataSetInstance : ScopeInstance {
    private int m_recordSetSize;
    private string m_rewrittenCommandText;
    private FieldInfo[] m_fieldInfos;
    private UInt32 m_lcid;
    private TriState m_caseSensitivity;
    private TriState m_accentSensitivity;
    private TriState m_kanatypeSensitivity;
    private TriState m_widthSensitivity;
    private bool m_oldSnapshotTablixProcessingComplete;
    private string m_dataChunkName;
    private static Declaration m_Declaration;
    private DataSet m_dataSetDef;
    private CompareInfo m_cachedCompareInfo;
    private CompareOptions m_cachedCompareOptions;
    internal ObjectType ObjectType { get; }
    internal DataSet DataSetDef { get; internal set; }
    internal int RecordSetSize { get; internal set; }
    internal bool NoRows { get; }
    internal FieldInfo[] FieldInfos { get; internal set; }
    internal string RewrittenCommandText { get; internal set; }
    internal TriState CaseSensitivity { get; internal set; }
    internal TriState AccentSensitivity { get; internal set; }
    internal TriState KanatypeSensitivity { get; internal set; }
    internal TriState WidthSensitivity { get; internal set; }
    internal UInt32 LCID { get; internal set; }
    internal bool OldSnapshotTablixProcessingComplete { get; internal set; }
    internal string DataChunkName { get; internal set; }
    internal CompareInfo CompareInfo { get; }
    internal CompareOptions ClrCompareOptions { get; }
    internal DataSetInstance(DataSet dataSetDef);
    internal DataSetInstance(DataSetInstance dataSetInstance);
    private static DataSetInstance();
    internal virtual ObjectType get_ObjectType();
    internal DataSet get_DataSetDef();
    internal void set_DataSetDef(DataSet value);
    internal int get_RecordSetSize();
    internal void set_RecordSetSize(int value);
    internal bool get_NoRows();
    internal FieldInfo[] get_FieldInfos();
    internal void set_FieldInfos(FieldInfo[] value);
    internal string get_RewrittenCommandText();
    internal void set_RewrittenCommandText(string value);
    internal TriState get_CaseSensitivity();
    internal void set_CaseSensitivity(TriState value);
    internal TriState get_AccentSensitivity();
    internal void set_AccentSensitivity(TriState value);
    internal TriState get_KanatypeSensitivity();
    internal void set_KanatypeSensitivity(TriState value);
    internal TriState get_WidthSensitivity();
    internal void set_WidthSensitivity(TriState value);
    internal UInt32 get_LCID();
    internal void set_LCID(UInt32 value);
    internal bool get_OldSnapshotTablixProcessingComplete();
    internal void set_OldSnapshotTablixProcessingComplete(bool value);
    internal string get_DataChunkName();
    internal void set_DataChunkName(string value);
    internal CompareInfo get_CompareInfo();
    internal CompareOptions get_ClrCompareOptions();
    internal void InitializeForReprocessing();
    internal virtual void AddChildScope(IReference`1<ScopeInstance> child, int indexInCollection);
    internal void SetupEnvironment(OnDemandProcessingContext odpContext, bool newDataSetDefinition);
    internal void SetupDataSetLevelAggregates(OnDemandProcessingContext odpContext);
    private void CreateCompareInfo();
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataSource : object {
    private int m_referenceID;
    private string m_name;
    private bool m_transaction;
    private string m_type;
    private ExpressionInfo m_connectString;
    private bool m_integratedSecurity;
    private string m_prompt;
    private string m_dataSourceReference;
    private List`1<DataSet> m_dataSets;
    private Guid m_ID;
    private int m_exprHostID;
    private string m_sharedDataSourceReferencePath;
    private DataSourceExprHost m_exprHost;
    private bool m_isComplex;
    private List`1<string> m_parameterNames;
    private static Declaration m_Declaration;
    public string Name { get; public set; }
    public bool Transaction { get; public set; }
    public string Type { get; public set; }
    internal ExpressionInfo ConnectStringExpression { get; internal set; }
    public bool IntegratedSecurity { get; public set; }
    public string Prompt { get; public set; }
    public string DataSourceReference { get; public set; }
    internal List`1<DataSet> DataSets { get; internal set; }
    public Guid ID { get; public set; }
    internal DataSourceExprHost ExprHost { get; }
    internal int ExprHostID { get; internal set; }
    internal bool IsComplex { get; internal set; }
    internal List`1<string> ParameterNames { get; internal set; }
    public string SharedDataSourceReferencePath { get; public set; }
    private int Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IReferenceable.ID { get; }
    internal DataSource(int id);
    private static DataSource();
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public bool get_Transaction();
    public void set_Transaction(bool value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    internal ExpressionInfo get_ConnectStringExpression();
    internal void set_ConnectStringExpression(ExpressionInfo value);
    public sealed virtual bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public sealed virtual string get_DataSourceReference();
    public void set_DataSourceReference(string value);
    internal List`1<DataSet> get_DataSets();
    internal void set_DataSets(List`1<DataSet> value);
    public sealed virtual Guid get_ID();
    public void set_ID(Guid value);
    internal DataSourceExprHost get_ExprHost();
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal bool get_IsComplex();
    internal void set_IsComplex(bool value);
    internal List`1<string> get_ParameterNames();
    internal void set_ParameterNames(List`1<string> value);
    public string get_SharedDataSourceReferencePath();
    public sealed virtual void set_SharedDataSourceReferencePath(string value);
    internal void Initialize(InitializationContext context);
    internal string ResolveConnectionString(OnDemandProcessingContext pc, DataSourceInfo& dataSourceInfo);
    private void InternalInitialize(InitializationContext context);
    private void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    private string EvaluateConnectStringExpression(OnDemandProcessingContext processingContext);
    internal static Declaration GetDeclaration();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    private sealed virtual override int Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IReferenceable.get_ID();
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IReferenceable.GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataValue : object {
    private ExpressionInfo m_name;
    private ExpressionInfo m_value;
    private int m_exprHostID;
    private DataValueExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ExpressionInfo Name { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal DataValueExprHost ExprHost { get; }
    private static DataValue();
    internal ExpressionInfo get_Name();
    internal void set_Name(ExpressionInfo value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal DataValueExprHost get_ExprHost();
    public object PublishClone(AutomaticSubtotalContext context);
    internal void Initialize(string propertyName, bool isCustomProperty, ChartOrCustomUniqueNameValidator validator, InitializationContext context);
    internal void SetExprHost(IList`1<DataValueExprHost> dataValueHosts, ObjectModelImpl reportObjectModel);
    internal void EvaluateNameAndValue(ReportElement reportElementOwner, IReportScopeInstance romInstance, IInstancePath instancePath, OnDemandProcessingContext context, ObjectType objectType, string objectName, String& name, Object& value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DataValueList : ArrayList {
    internal DataValue Item { get; }
    private DataValue System.Collections.Generic.IList<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.Count { get; }
    private bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.IsReadOnly { get; }
    internal DataValueList(int capacity);
    internal DataValue get_Item(int index);
    internal static string CreatePropertyNameString(string prefix, int rowIndex, int cellIndex, int valueIndex);
    internal void Initialize(string prefix, InitializationContext context);
    internal void Initialize(string prefix, int rowIndex, int cellIndex, bool isCustomProperty, InitializationContext context);
    internal void SetExprHost(IList`1<DataValueExprHost> dataValueHosts, ObjectModelImpl reportObjectModel);
    private sealed virtual override int System.Collections.Generic.IList<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.IndexOf(DataValue item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.Insert(int index, DataValue item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.RemoveAt(int index);
    private sealed virtual override DataValue System.Collections.Generic.IList<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.set_Item(int index, DataValue value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.Add(DataValue item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.Contains(DataValue item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.CopyTo(DataValue[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.Remove(DataValue item);
    private sealed virtual override IEnumerator`1<DataValue> System.Collections.Generic.IEnumerable<Microsoft.ReportingServices.ReportIntermediateFormat.DataValue>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DocumentMapBeginContainer : object {
    private static DocumentMapBeginContainer m_instance;
    private static Declaration m_Declaration;
    internal static DocumentMapBeginContainer Instance { get; }
    private static DocumentMapBeginContainer();
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static DocumentMapBeginContainer get_Instance();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DocumentMapEndContainer : object {
    private static DocumentMapEndContainer m_instance;
    private static Declaration m_Declaration;
    internal static DocumentMapEndContainer Instance { get; }
    private static DocumentMapEndContainer();
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static DocumentMapEndContainer get_Instance();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DocumentMapNode : object {
    internal static char IdLevelSeparator;
    private string m_id;
    private string m_label;
    private static Declaration m_Declaration;
    internal string Label { get; internal set; }
    internal string Id { get; internal set; }
    private static DocumentMapNode();
    internal string get_Label();
    internal void set_Label(string value);
    internal string get_Id();
    internal void set_Id(string value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DocumentMapReader : object {
    private DocumentMapNode m_currentNode;
    private IntermediateFormatReader m_rifReader;
    private int m_level;
    private long m_startIndex;
    private Stream m_chunkStream;
    public DocumentMapNode Current { get; }
    public DocumentMapReader(Stream chunkStream);
    public bool MoveNext();
    public void Reset();
    public void Close();
    public DocumentMapNode get_Current();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.DocumentMapWriter : object {
    private DocumentMapNode m_node;
    private int m_level;
    private IntermediateFormatWriter m_writer;
    private Stream m_chunkStream;
    private bool m_isClosed;
    private static List`1<Declaration> m_docMapDeclarations;
    public DocumentMapWriter(Stream aChunkStream);
    private static DocumentMapWriter();
    public void WriteBeginContainer(string aLabel, string aId);
    public void WriteNode(string aLabel, string aId);
    public void WriteEndContainer();
    public void Close();
    public bool IsClosed();
    private static List`1<Declaration> GetDocumentMapDeclarations();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.EndUserSort : object {
    [ReferenceAttribute]
private DataSet m_dataSet;
    [ReferenceAttribute]
private ISortFilterScope m_sortExpressionScope;
    [ReferenceAttribute]
private GroupingList m_groupsInSortTarget;
    [ReferenceAttribute]
private ISortFilterScope m_sortTarget;
    private int m_sortExpressionIndex;
    private static Declaration m_Declaration;
    private ExpressionInfo m_sortExpression;
    private string m_sortExpressionScopeString;
    private string m_sortTargetString;
    private List`1<SubReport> m_detailScopeSubReports;
    private int m_subReportDataSetGlobalId;
    internal DataSet DataSet { get; internal set; }
    internal ISortFilterScope SortExpressionScope { get; internal set; }
    internal GroupingList GroupsInSortTarget { get; internal set; }
    internal ISortFilterScope SortTarget { get; internal set; }
    internal int SortExpressionIndex { get; internal set; }
    internal List`1<SubReport> DetailScopeSubReports { get; internal set; }
    internal int SubReportDataSetGlobalId { get; internal set; }
    internal ExpressionInfo SortExpression { get; internal set; }
    internal string SortExpressionScopeString { get; internal set; }
    internal string SortTargetString { get; internal set; }
    private static EndUserSort();
    internal DataSet get_DataSet();
    internal void set_DataSet(DataSet value);
    internal ISortFilterScope get_SortExpressionScope();
    internal void set_SortExpressionScope(ISortFilterScope value);
    internal GroupingList get_GroupsInSortTarget();
    internal void set_GroupsInSortTarget(GroupingList value);
    internal ISortFilterScope get_SortTarget();
    internal void set_SortTarget(ISortFilterScope value);
    internal int get_SortExpressionIndex();
    internal void set_SortExpressionIndex(int value);
    internal List`1<SubReport> get_DetailScopeSubReports();
    internal void set_DetailScopeSubReports(List`1<SubReport> value);
    internal int get_SubReportDataSetGlobalId();
    internal void set_SubReportDataSetGlobalId(int value);
    internal ExpressionInfo get_SortExpression();
    internal void set_SortExpression(ExpressionInfo value);
    internal string get_SortExpressionScopeString();
    internal void set_SortExpressionScopeString(string value);
    internal string get_SortTargetString();
    internal void set_SortTargetString(string value);
    internal void SetSortTarget(ISortFilterScope target);
    internal void SetDefaultSortTarget(ISortFilterScope target);
    public object PublishClone(AutomaticSubtotalContext context);
    internal void UpdateSortScopeAndTargetReference(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfo : object {
    private Types m_type;
    private DataType m_constantType;
    private string m_stringValue;
    private bool m_boolValue;
    private int m_intValue;
    private DateTime m_dateTimeValue;
    private Nullable`1<DateTimeOffset> m_dateTimeOffsetValue;
    private double m_floatValue;
    private int m_exprHostID;
    private string m_originalText;
    private bool m_inPrevious;
    private string m_transformedExpression;
    private List`1<TransformedExprAggregateInfo> m_transformedExprAggregateInfos;
    private List`1<string> m_referencedFields;
    private List`1<string> m_referencedReportItems;
    private List`1<int> m_referencedReportItemPositionsInTransformedExpression;
    private List`1<int> m_referencedReportItemPositionsInOriginalText;
    private List`1<string> m_referencedVariables;
    private List`1<int> m_referencedVariablePositions;
    private List`1<string> m_referencedParameters;
    private List`1<string> m_referencedDataSets;
    private List`1<string> m_referencedDataSources;
    private List`1<DataAggregateInfo> m_aggregates;
    private List`1<RunningValueInfo> m_runningValues;
    private int m_compileTimeID;
    private Hashtable m_referencedFieldProperties;
    private bool m_dynamicFieldReferences;
    private bool m_referencedPageGlobals;
    private List`1<int> m_meDotValuePositionsInOriginalText;
    private List`1<int> m_meDotValuePositionsInTranformedExpr;
    private int m_id;
    private static Declaration m_Declaration;
    internal bool IsExpression { get; }
    internal DataType ConstantType { get; internal set; }
    internal TypeCode ConstantTypeCode { get; }
    internal Types Type { get; internal set; }
    internal string StringValue { get; internal set; }
    internal object Value { get; }
    internal bool BoolValue { get; internal set; }
    internal int IntValue { get; internal set; }
    internal double FloatValue { get; internal set; }
    internal string OriginalText { get; internal set; }
    internal string TransformedExpression { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal int CompileTimeID { get; internal set; }
    internal List`1<DataAggregateInfo> Aggregates { get; }
    internal List`1<RunningValueInfo> RunningValues { get; }
    internal bool InPrevious { get; internal set; }
    internal Hashtable ReferencedFieldProperties { get; }
    internal List`1<string> ReferencedReportItems { get; }
    internal bool DynamicFieldReferences { get; internal set; }
    internal bool ReferencedPageGlobals { get; internal set; }
    internal bool MeDotValueDetected { get; }
    internal bool HasDirectFieldReferences { get; }
    internal bool HasAnyFieldReferences { get; }
    public int ID { get; }
    private static ExpressionInfo();
    internal static ExpressionInfo CreateConstExpression(string value);
    internal static ExpressionInfo CreateConstExpression(bool value);
    internal static ExpressionInfo CreateConstExpression(int value);
    internal static ExpressionInfo CreateEmptyExpression();
    internal bool get_IsExpression();
    internal DataType get_ConstantType();
    internal void set_ConstantType(DataType value);
    internal TypeCode get_ConstantTypeCode();
    internal Types get_Type();
    internal void set_Type(Types value);
    internal string get_StringValue();
    internal void set_StringValue(string value);
    internal object get_Value();
    internal bool get_BoolValue();
    internal void set_BoolValue(bool value);
    internal int get_IntValue();
    internal void set_IntValue(int value);
    internal double get_FloatValue();
    internal void set_FloatValue(double value);
    internal object GetDateTimeValue();
    internal void SetDateTimeValue(DateTime dateTime);
    internal void SetDateTimeValue(DateTimeOffset dateTimeOffset);
    internal string get_OriginalText();
    internal void set_OriginalText(string value);
    internal string get_TransformedExpression();
    internal void set_TransformedExpression(string value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal int get_CompileTimeID();
    internal void set_CompileTimeID(int value);
    internal List`1<DataAggregateInfo> get_Aggregates();
    internal List`1<RunningValueInfo> get_RunningValues();
    internal bool get_InPrevious();
    internal void set_InPrevious(bool value);
    internal Hashtable get_ReferencedFieldProperties();
    internal List`1<string> get_ReferencedReportItems();
    internal bool get_DynamicFieldReferences();
    internal void set_DynamicFieldReferences(bool value);
    internal bool get_ReferencedPageGlobals();
    internal void set_ReferencedPageGlobals(bool value);
    internal bool get_MeDotValueDetected();
    internal bool get_HasDirectFieldReferences();
    internal bool get_HasAnyFieldReferences();
    internal void Initialize(string propertyName, InitializationContext context);
    internal bool InitializeAxisExpression(string propertyName, InitializationContext context);
    internal void AggregateInitialize(string dataSetName, ObjectType objectType, string objectName, string propertyName, InitializationContext context);
    internal bool HasRecursiveAggregates();
    internal void GroupExpressionInitialize(InitializationContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal void AddReferencedField(string fieldName);
    internal void AddReferencedReportItemInOriginalText(string reportItemName, int index);
    internal void AddReferencedReportItemInTransformedExpression(string reportItemName, int index);
    internal void AddMeDotValueInOriginalText(int index);
    internal void AddMeDotValueInTransformedExpression(int index);
    internal void AddReferencedVariable(string variableName, int index);
    internal void AddReferencedParameter(string parameterName);
    internal void AddReferencedDataSet(string dataSetName);
    internal void AddReferencedDataSource(string dataSourceName);
    internal void AddAggregate(DataAggregateInfo aggregate);
    internal void AddRunningValue(RunningValueInfo runningValue);
    internal DataAggregateInfo GetSumAggregateWithoutScope();
    internal void AddDynamicPropertyReference(string fieldName);
    internal void AddStaticPropertyReference(string fieldName, string propertyName);
    internal void AddTransformedExpressionAggregateInfo(int position, string aggregateID, bool isRunningValue);
    internal object PublishClone(AutomaticSubtotalContext context, ExpressionInfo meDotValueExpression);
    private int UpdateReferencedItemsCollection(ExpressionInfo meDotValueExpression, int referencedIndex, int meDotValuePositionInOriginalText, int meDotValuePositionInTransformedExpression, List`1<int> positionsInTransformedExpression, List`1<int> positionsInOriginalText, List`1<string> referencedValues, List`1<int> positionsInMeDotValueTransformedExpression, List`1<int> positionsInMeDotValueOriginalText, List`1<string> referencedMeDotValueValues);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal void UpdateReportItemReferences(AutomaticSubtotalContext context);
    public sealed virtual int get_ID();
    public sealed virtual void SetID(int id);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ExpressionInfoTypeValuePair : object {
    private DataType m_constantDataType;
    private ExpressionInfo m_value;
    private static Declaration m_Declaration;
    internal DataType DataType { get; }
    internal ExpressionInfo Value { get; }
    internal ExpressionInfoTypeValuePair(DataType constantType, ExpressionInfo value);
    private static ExpressionInfoTypeValuePair();
    internal DataType get_DataType();
    internal ExpressionInfo get_Value();
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Field : object {
    private string m_name;
    private string m_dataField;
    private ExpressionInfo m_value;
    private int m_exprHostID;
    private bool m_dynamicPropertyReferences;
    private FieldPropertyHashtable m_referencedProperties;
    private DataType m_constantDataType;
    private CalcFieldExprHost m_exprHost;
    private int m_id;
    private static Declaration m_Declaration;
    internal string Name { get; internal set; }
    internal string DataField { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal bool IsCalculatedField { get; }
    internal DataType DataType { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal bool DynamicPropertyReferences { get; internal set; }
    internal FieldPropertyHashtable ReferencedProperties { get; internal set; }
    internal CalcFieldExprHost ExprHost { get; }
    public int ID { get; }
    private static Field();
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_DataField();
    internal void set_DataField(string value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal bool get_IsCalculatedField();
    internal DataType get_DataType();
    internal void set_DataType(DataType value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal bool get_DynamicPropertyReferences();
    internal void set_DynamicPropertyReferences(bool value);
    internal FieldPropertyHashtable get_ReferencedProperties();
    internal void set_ReferencedProperties(FieldPropertyHashtable value);
    internal CalcFieldExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(DataSetExprHost dataSetExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual int get_ID();
    public sealed virtual void SetID(int id);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.FieldInfo : object {
    private List`1<int> m_propertyReaderIndices;
    private List`1<string> m_propertyNames;
    internal bool ErrorRegistered;
    internal bool Missing;
    private Boolean[] m_propertyErrorRegistered;
    private static Declaration m_declaration;
    internal int PropertyCount { get; }
    internal List`1<int> PropertyReaderIndices { get; }
    internal List`1<string> PropertyNames { get; }
    internal FieldInfo(List`1<int> aPropIndices, List`1<string> aPropNames);
    private static FieldInfo();
    internal int get_PropertyCount();
    internal List`1<int> get_PropertyReaderIndices();
    internal List`1<string> get_PropertyNames();
    internal bool IsPropertyErrorRegistered(int aIndex);
    internal void SetPropertyErrorRegistered(int aIndex);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.FieldPropertyHashtable : object {
    private Hashtable m_hashtable;
    internal int Count { get; }
    internal Hashtable InnerHashtable { get; }
    internal FieldPropertyHashtable(Hashtable hashtable);
    internal FieldPropertyHashtable(int capacity);
    internal int get_Count();
    internal Hashtable get_InnerHashtable();
    internal void Add(string key);
    internal bool ContainsKey(string key);
    public IDictionaryEnumerator GetEnumerator();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Filter : object {
    private ExpressionInfo m_expression;
    private Operators m_operator;
    private List`1<ExpressionInfoTypeValuePair> m_values;
    private int m_exprHostID;
    private FilterExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ExpressionInfo Expression { get; internal set; }
    internal Operators Operator { get; internal set; }
    internal List`1<ExpressionInfoTypeValuePair> Values { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal FilterExprHost ExprHost { get; }
    private static Filter();
    internal ExpressionInfo get_Expression();
    internal void set_Expression(ExpressionInfo value);
    internal Operators get_Operator();
    internal void set_Operator(Operators value);
    internal List`1<ExpressionInfoTypeValuePair> get_Values();
    internal void set_Values(List`1<ExpressionInfoTypeValuePair> value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal FilterExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(IList`1<FilterExprHost> filterHosts, ObjectModelImpl reportObjectModel);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.First : DataAggregate {
    private object m_value;
    private bool m_updated;
    private static Declaration m_declaration;
    public int Size { get; }
    private static First();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.FrameBackground : GaugePanelStyleContainer {
    private FrameBackgroundExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal string OwnerName { get; }
    internal FrameBackgroundExprHost ExprHost { get; }
    internal FrameBackground(GaugePanel gaugePanel);
    private static FrameBackground();
    internal string get_OwnerName();
    internal FrameBackgroundExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(FrameBackgroundExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.FrameImage : BaseGaugeImage {
    private static Declaration m_Declaration;
    private ExpressionInfo m_hueColor;
    private ExpressionInfo m_transparency;
    private ExpressionInfo m_clipImage;
    internal ExpressionInfo HueColor { get; internal set; }
    internal ExpressionInfo Transparency { get; internal set; }
    internal ExpressionInfo ClipImage { get; internal set; }
    internal FrameImage(GaugePanel gaugePanel);
    private static FrameImage();
    internal ExpressionInfo get_HueColor();
    internal void set_HueColor(ExpressionInfo value);
    internal ExpressionInfo get_Transparency();
    internal void set_Transparency(ExpressionInfo value);
    internal ExpressionInfo get_ClipImage();
    internal void set_ClipImage(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(FrameImageExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal string EvaluateHueColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateTransparency(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateClipImage(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.FunctionalList`1 : object {
    private T m_car;
    private FunctionalList`1<T> m_cdr;
    private int m_size;
    private static FunctionalList`1<T> m_emptyList;
    internal T First { get; }
    internal FunctionalList`1<T> Rest { get; }
    internal int Count { get; }
    internal static FunctionalList`1<T> Empty { get; }
    private FunctionalList`1(T aItem, FunctionalList`1<T> aCdr);
    private static FunctionalList`1();
    internal FunctionalList`1<T> Add(T aItem);
    internal T get_First();
    internal FunctionalList`1<T> get_Rest();
    internal int get_Count();
    internal bool IsEmpty();
    internal int IndexOf(T aItem);
    internal bool Contains(T aItem);
    internal T Get(T aItem);
    internal FunctionalList`1<T> Reverse();
    internal static FunctionalList`1<T> get_Empty();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Gauge : GaugePanelItem {
    private static Declaration m_Declaration;
    private BackFrame m_backFrame;
    private ExpressionInfo m_clipContent;
    private TopImage m_topImage;
    private ExpressionInfo m_aspectRatio;
    internal BackFrame BackFrame { get; internal set; }
    internal ExpressionInfo ClipContent { get; internal set; }
    internal TopImage TopImage { get; internal set; }
    internal ExpressionInfo AspectRatio { get; internal set; }
    internal Gauge(GaugePanel gaugePanel, int id);
    private static Gauge();
    internal BackFrame get_BackFrame();
    internal void set_BackFrame(BackFrame value);
    internal ExpressionInfo get_ClipContent();
    internal void set_ClipContent(ExpressionInfo value);
    internal TopImage get_TopImage();
    internal void set_TopImage(TopImage value);
    internal ExpressionInfo get_AspectRatio();
    internal void set_AspectRatio(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugeExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal bool EvaluateClipContent(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateAspectRatio(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeCell : Cell {
    private static Declaration m_Declaration;
    private List`1<GaugeInputValue> m_gaugeInputValues;
    private GaugeCellExprHost m_exprHost;
    protected bool IsDataRegionBodyCell { get; }
    public ObjectType ObjectType { get; }
    internal GaugeCell(int id, GaugePanel gaugePanel);
    private static GaugeCell();
    protected virtual bool get_IsDataRegionBodyCell();
    public ObjectType get_ObjectType();
    internal virtual void InternalInitialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal static Declaration GetDeclaration();
    internal void SetExprHost(GaugeCellExprHost exprHost, ObjectModelImpl reportObjectModel);
    private List`1<GaugeInputValue> GetGaugeInputValues();
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeCellList : CellList {
    internal GaugeCell Item { get; }
    internal GaugeCell get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeImage : GaugePanelItem {
    private ExpressionInfo m_source;
    private ExpressionInfo m_value;
    private ExpressionInfo m_transparentColor;
    private static Declaration m_Declaration;
    internal ExpressionInfo Source { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo TransparentColor { get; internal set; }
    internal GaugeImage(GaugePanel gaugePanel, int id);
    private static GaugeImage();
    internal ExpressionInfo get_Source();
    internal void set_Source(ExpressionInfo value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_TransparentColor();
    internal void set_TransparentColor(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugeImageExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal SourceType EvaluateSource(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateValue(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateTransparentColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeInputValue : object {
    private GaugeInputValueExprHost m_exprHost;
    [ReferenceAttribute]
private GaugePanel m_gaugePanel;
    private static Declaration m_Declaration;
    private ExpressionInfo m_value;
    private ExpressionInfo m_formula;
    private ExpressionInfo m_minPercent;
    private ExpressionInfo m_maxPercent;
    private ExpressionInfo m_multiplier;
    private ExpressionInfo m_addConstant;
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private int m_exprHostID;
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo Formula { get; internal set; }
    internal ExpressionInfo MinPercent { get; internal set; }
    internal ExpressionInfo MaxPercent { get; internal set; }
    internal ExpressionInfo Multiplier { get; internal set; }
    internal ExpressionInfo AddConstant { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal string OwnerName { get; }
    internal GaugeInputValueExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal GaugeInputValue(GaugePanel gaugePanel);
    private static GaugeInputValue();
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_Formula();
    internal void set_Formula(ExpressionInfo value);
    internal ExpressionInfo get_MinPercent();
    internal void set_MinPercent(ExpressionInfo value);
    internal ExpressionInfo get_MaxPercent();
    internal void set_MaxPercent(ExpressionInfo value);
    internal ExpressionInfo get_Multiplier();
    internal void set_Multiplier(ExpressionInfo value);
    internal ExpressionInfo get_AddConstant();
    internal void set_AddConstant(ExpressionInfo value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal string get_OwnerName();
    internal GaugeInputValueExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal void Initialize(InitializationContext context, int index);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugeInputValueExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    internal VariantResult EvaluateValue(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeInputValueFormulas EvaluateFormula(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateMinPercent(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateMaxPercent(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateMultiplier(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateAddConstant(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeLabel : GaugePanelItem {
    private static Declaration m_Declaration;
    private Formatter m_formatter;
    private ExpressionInfo m_text;
    private ExpressionInfo m_angle;
    private ExpressionInfo m_resizeMode;
    private ExpressionInfo m_textShadowOffset;
    private ExpressionInfo m_useFontPercent;
    internal ExpressionInfo Text { get; internal set; }
    internal ExpressionInfo Angle { get; internal set; }
    internal ExpressionInfo ResizeMode { get; internal set; }
    internal ExpressionInfo TextShadowOffset { get; internal set; }
    internal ExpressionInfo UseFontPercent { get; internal set; }
    internal GaugeLabel(GaugePanel gaugePanel, int id);
    private static GaugeLabel();
    internal ExpressionInfo get_Text();
    internal void set_Text(ExpressionInfo value);
    internal ExpressionInfo get_Angle();
    internal void set_Angle(ExpressionInfo value);
    internal ExpressionInfo get_ResizeMode();
    internal void set_ResizeMode(ExpressionInfo value);
    internal ExpressionInfo get_TextShadowOffset();
    internal void set_TextShadowOffset(ExpressionInfo value);
    internal ExpressionInfo get_UseFontPercent();
    internal void set_UseFontPercent(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugeLabelExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal string EvaluateText(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeResizeModes EvaluateResizeMode(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateTextShadowOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateUseFontPercent(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeMember : ReportHierarchyNode {
    private GaugeMemberList m_innerMembers;
    private static Declaration m_Declaration;
    internal HierarchyNodeList InnerHierarchy { get; }
    internal GaugeMember ChildGaugeMember { get; internal set; }
    internal GaugeMember(int id, GaugePanel crItem);
    private static GaugeMember();
    internal virtual HierarchyNodeList get_InnerHierarchy();
    internal GaugeMember get_ChildGaugeMember();
    internal void set_ChildGaugeMember(GaugeMember value);
    internal void SetIsCategoryMember(bool value);
    protected virtual void DataGroupStart(ExprHostBuilder builder);
    protected virtual int DataGroupEnd(ExprHostBuilder builder);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context, DataRegion newContainingRegion);
    [SkipMemberStaticValidationAttribute("936")]
internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(IMemberNode memberExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void MemberContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeMemberList : HierarchyNodeList {
    internal GaugeMember Item { get; }
    internal GaugeMember get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanel : DataRegion {
    private List`1<LinearGauge> m_linearGauges;
    private List`1<RadialGauge> m_radialGauges;
    private List`1<NumericIndicator> m_numericIndicators;
    private List`1<StateIndicator> m_stateIndicators;
    private List`1<GaugeImage> m_gaugeImages;
    private List`1<GaugeLabel> m_gaugeLabels;
    private ExpressionInfo m_antiAliasing;
    private ExpressionInfo m_autoLayout;
    private BackFrame m_backFrame;
    private ExpressionInfo m_shadowIntensity;
    private ExpressionInfo m_textAntiAliasingQuality;
    private TopImage m_topImage;
    private GaugeMemberList m_columnMembers;
    private GaugeMemberList m_rowMembers;
    private GaugeRowList m_rows;
    private static Declaration m_Declaration;
    private GaugePanelExprHost m_exprHost;
    private int m_actionOwnerCounter;
    internal ObjectType ObjectType { get; }
    internal HierarchyNodeList ColumnMembers { get; }
    internal HierarchyNodeList RowMembers { get; }
    internal RowList Rows { get; }
    internal GaugeMember GaugeMember { get; internal set; }
    internal GaugeMember GaugeRowMember { get; internal set; }
    internal GaugeRow GaugeRow { get; internal set; }
    internal List`1<LinearGauge> LinearGauges { get; internal set; }
    internal List`1<RadialGauge> RadialGauges { get; internal set; }
    internal List`1<NumericIndicator> NumericIndicators { get; internal set; }
    internal List`1<StateIndicator> StateIndicators { get; internal set; }
    internal List`1<GaugeImage> GaugeImages { get; internal set; }
    internal List`1<GaugeLabel> GaugeLabels { get; internal set; }
    internal ExpressionInfo AntiAliasing { get; internal set; }
    internal ExpressionInfo AutoLayout { get; internal set; }
    internal BackFrame BackFrame { get; internal set; }
    internal ExpressionInfo ShadowIntensity { get; internal set; }
    internal ExpressionInfo TextAntiAliasingQuality { get; internal set; }
    internal TopImage TopImage { get; internal set; }
    internal GaugePanelExprHost GaugePanelExprHost { get; }
    protected IndexedExprHost UserSortExpressionsHost { get; }
    internal GaugePanel(ReportItem parent);
    internal GaugePanel(int id, ReportItem parent);
    private static GaugePanel();
    internal virtual ObjectType get_ObjectType();
    internal virtual HierarchyNodeList get_ColumnMembers();
    internal virtual HierarchyNodeList get_RowMembers();
    internal virtual RowList get_Rows();
    internal GaugeMember get_GaugeMember();
    internal void set_GaugeMember(GaugeMember value);
    internal GaugeMember get_GaugeRowMember();
    internal void set_GaugeRowMember(GaugeMember value);
    internal GaugeRow get_GaugeRow();
    internal void set_GaugeRow(GaugeRow value);
    internal List`1<LinearGauge> get_LinearGauges();
    internal void set_LinearGauges(List`1<LinearGauge> value);
    internal List`1<RadialGauge> get_RadialGauges();
    internal void set_RadialGauges(List`1<RadialGauge> value);
    internal List`1<NumericIndicator> get_NumericIndicators();
    internal void set_NumericIndicators(List`1<NumericIndicator> value);
    internal List`1<StateIndicator> get_StateIndicators();
    internal void set_StateIndicators(List`1<StateIndicator> value);
    internal List`1<GaugeImage> get_GaugeImages();
    internal void set_GaugeImages(List`1<GaugeImage> value);
    internal List`1<GaugeLabel> get_GaugeLabels();
    internal void set_GaugeLabels(List`1<GaugeLabel> value);
    internal ExpressionInfo get_AntiAliasing();
    internal void set_AntiAliasing(ExpressionInfo value);
    internal ExpressionInfo get_AutoLayout();
    internal void set_AutoLayout(ExpressionInfo value);
    internal BackFrame get_BackFrame();
    internal void set_BackFrame(BackFrame value);
    internal ExpressionInfo get_ShadowIntensity();
    internal void set_ShadowIntensity(ExpressionInfo value);
    internal ExpressionInfo get_TextAntiAliasingQuality();
    internal void set_TextAntiAliasingQuality(ExpressionInfo value);
    internal TopImage get_TopImage();
    internal void set_TopImage(TopImage value);
    internal GaugePanelExprHost get_GaugePanelExprHost();
    protected virtual IndexedExprHost get_UserSortExpressionsHost();
    internal virtual bool Initialize(InitializationContext context);
    protected virtual void InitializeCorner(InitializationContext context);
    protected virtual bool ValidateInnerStructure(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal GaugeAntiAliasings EvaluateAntiAliasing(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateAutoLayout(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateShadowIntensity(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal TextAntiAliasingQualities EvaluateTextAntiAliasingQuality(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    [SkipMemberStaticValidationAttribute("938")]
[SkipMemberStaticValidationAttribute("936")]
[SkipMemberStaticValidationAttribute("937")]
internal static Declaration GetDeclaration();
    internal List`1<GaugeInputValue> GetGaugeInputValues();
    internal int GenerateActionOwnerID();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void DataRegionContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    internal virtual object EvaluateNoRowsMessageExpression();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanelItem : GaugePanelStyleContainer {
    private Action m_action;
    protected int m_exprHostID;
    private List`1<string> m_fieldsUsedInValueExpression;
    protected GaugePanelItemExprHost m_exprHost;
    private static Declaration m_Declaration;
    protected string m_name;
    private ExpressionInfo m_top;
    private ExpressionInfo m_left;
    private ExpressionInfo m_height;
    private ExpressionInfo m_width;
    private ExpressionInfo m_zIndex;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_toolTip;
    private string m_parentItem;
    private int m_id;
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal string Name { get; internal set; }
    internal int ID { get; }
    internal ExpressionInfo Top { get; internal set; }
    internal ExpressionInfo Left { get; internal set; }
    internal ExpressionInfo Height { get; internal set; }
    internal ExpressionInfo Width { get; internal set; }
    internal ExpressionInfo ZIndex { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal string ParentItem { get; internal set; }
    internal string OwnerName { get; }
    internal GaugePanelItemExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal GaugePanelItem(GaugePanel gaugePanel, int id);
    private static GaugePanelItem();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_ID();
    internal ExpressionInfo get_Top();
    internal void set_Top(ExpressionInfo value);
    internal ExpressionInfo get_Left();
    internal void set_Left(ExpressionInfo value);
    internal ExpressionInfo get_Height();
    internal void set_Height(ExpressionInfo value);
    internal ExpressionInfo get_Width();
    internal void set_Width(ExpressionInfo value);
    internal ExpressionInfo get_ZIndex();
    internal void set_ZIndex(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal string get_ParentItem();
    internal void set_ParentItem(string value);
    internal string get_OwnerName();
    internal GaugePanelItemExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugePanelItemExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal double EvaluateTop(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLeft(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateHeight(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal int EvaluateZIndex(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.GaugePanelStyleContainer : object {
    [ReferenceAttribute]
protected GaugePanel m_gaugePanel;
    protected Style m_styleClass;
    private static Declaration m_Declaration;
    public Style StyleClass { get; public set; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.InstancePath { get; }
    private ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.ObjectType { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.Name { get; }
    internal GaugePanelStyleContainer(GaugePanel gaugePanel);
    private static GaugePanelStyleContainer();
    public sealed virtual Style get_StyleClass();
    public void set_StyleClass(Style value);
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_InstancePath();
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_ObjectType();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_Name();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugePointer : GaugePanelStyleContainer {
    private Action m_action;
    protected int m_exprHostID;
    private List`1<string> m_fieldsUsedInValueExpression;
    protected GaugePointerExprHost m_exprHost;
    private static Declaration m_Declaration;
    protected string m_name;
    private GaugeInputValue m_gaugeInputValue;
    private ExpressionInfo m_barStart;
    private ExpressionInfo m_distanceFromScale;
    private PointerImage m_pointerImage;
    private ExpressionInfo m_markerLength;
    private ExpressionInfo m_markerStyle;
    private ExpressionInfo m_placement;
    private ExpressionInfo m_snappingEnabled;
    private ExpressionInfo m_snappingInterval;
    private ExpressionInfo m_toolTip;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_width;
    private int m_id;
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal string Name { get; internal set; }
    internal int ID { get; }
    internal GaugeInputValue GaugeInputValue { get; internal set; }
    internal ExpressionInfo BarStart { get; internal set; }
    internal ExpressionInfo DistanceFromScale { get; internal set; }
    internal PointerImage PointerImage { get; internal set; }
    internal ExpressionInfo MarkerLength { get; internal set; }
    internal ExpressionInfo MarkerStyle { get; internal set; }
    internal ExpressionInfo Placement { get; internal set; }
    internal ExpressionInfo SnappingEnabled { get; internal set; }
    internal ExpressionInfo SnappingInterval { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo Width { get; internal set; }
    internal string OwnerName { get; }
    internal GaugePointerExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal GaugePointer(GaugePanel gaugePanel, int id);
    private static GaugePointer();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_ID();
    internal GaugeInputValue get_GaugeInputValue();
    internal void set_GaugeInputValue(GaugeInputValue value);
    internal ExpressionInfo get_BarStart();
    internal void set_BarStart(ExpressionInfo value);
    internal ExpressionInfo get_DistanceFromScale();
    internal void set_DistanceFromScale(ExpressionInfo value);
    internal PointerImage get_PointerImage();
    internal void set_PointerImage(PointerImage value);
    internal ExpressionInfo get_MarkerLength();
    internal void set_MarkerLength(ExpressionInfo value);
    internal ExpressionInfo get_MarkerStyle();
    internal void set_MarkerStyle(ExpressionInfo value);
    internal ExpressionInfo get_Placement();
    internal void set_Placement(ExpressionInfo value);
    internal ExpressionInfo get_SnappingEnabled();
    internal void set_SnappingEnabled(ExpressionInfo value);
    internal ExpressionInfo get_SnappingInterval();
    internal void set_SnappingInterval(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_Width();
    internal void set_Width(ExpressionInfo value);
    internal string get_OwnerName();
    internal GaugePointerExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugePointerExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal GaugeBarStarts EvaluateBarStart(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateDistanceFromScale(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateMarkerLength(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeMarkerStyles EvaluateMarkerStyle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugePointerPlacements EvaluatePlacement(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateSnappingEnabled(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateSnappingInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeRow : Row {
    private GaugeCellList m_cells;
    [ReferenceAttribute]
private GaugePanel m_gaugePanel;
    private static Declaration m_Declaration;
    internal CellList Cells { get; }
    internal GaugeCell GaugeCell { get; internal set; }
    internal GaugeRow(int id, GaugePanel gaugePanel);
    private static GaugeRow();
    internal virtual CellList get_Cells();
    internal GaugeCell get_GaugeCell();
    internal void set_GaugeCell(GaugeCell value);
    [SkipMemberStaticValidationAttribute("939")]
internal static Declaration GetDeclaration();
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeRowList : RowList {
    internal GaugeRow Item { get; }
    internal GaugeRowList(int capacity);
    internal GaugeRow get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeScale : GaugePanelStyleContainer {
    private Action m_action;
    protected int m_exprHostID;
    private List`1<string> m_fieldsUsedInValueExpression;
    protected GaugeScaleExprHost m_exprHost;
    private static Declaration m_Declaration;
    protected string m_name;
    private List`1<ScaleRange> m_scaleRanges;
    private List`1<CustomLabel> m_customLabels;
    private ExpressionInfo m_interval;
    private ExpressionInfo m_intervalOffset;
    private ExpressionInfo m_logarithmic;
    private ExpressionInfo m_logarithmicBase;
    private GaugeInputValue m_maximumValue;
    private GaugeInputValue m_minimumValue;
    private ExpressionInfo m_multiplier;
    private ExpressionInfo m_reversed;
    private GaugeTickMarks m_gaugeMajorTickMarks;
    private GaugeTickMarks m_gaugeMinorTickMarks;
    private ScalePin m_maximumPin;
    private ScalePin m_minimumPin;
    private ScaleLabels m_scaleLabels;
    private ExpressionInfo m_tickMarksOnTop;
    private ExpressionInfo m_toolTip;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_width;
    private int m_id;
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal string Name { get; internal set; }
    internal int ID { get; }
    internal List`1<ScaleRange> ScaleRanges { get; internal set; }
    internal List`1<CustomLabel> CustomLabels { get; internal set; }
    internal ExpressionInfo Interval { get; internal set; }
    internal ExpressionInfo IntervalOffset { get; internal set; }
    internal ExpressionInfo Logarithmic { get; internal set; }
    internal ExpressionInfo LogarithmicBase { get; internal set; }
    internal GaugeInputValue MaximumValue { get; internal set; }
    internal GaugeInputValue MinimumValue { get; internal set; }
    internal ExpressionInfo Multiplier { get; internal set; }
    internal ExpressionInfo Reversed { get; internal set; }
    internal GaugeTickMarks GaugeMajorTickMarks { get; internal set; }
    internal GaugeTickMarks GaugeMinorTickMarks { get; internal set; }
    internal ScalePin MaximumPin { get; internal set; }
    internal ScalePin MinimumPin { get; internal set; }
    internal ScaleLabels ScaleLabels { get; internal set; }
    internal ExpressionInfo TickMarksOnTop { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo Width { get; internal set; }
    internal string OwnerName { get; }
    internal GaugeScaleExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal GaugeScale(GaugePanel gaugePanel, int id);
    private static GaugeScale();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_ID();
    internal List`1<ScaleRange> get_ScaleRanges();
    internal void set_ScaleRanges(List`1<ScaleRange> value);
    internal List`1<CustomLabel> get_CustomLabels();
    internal void set_CustomLabels(List`1<CustomLabel> value);
    internal ExpressionInfo get_Interval();
    internal void set_Interval(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffset();
    internal void set_IntervalOffset(ExpressionInfo value);
    internal ExpressionInfo get_Logarithmic();
    internal void set_Logarithmic(ExpressionInfo value);
    internal ExpressionInfo get_LogarithmicBase();
    internal void set_LogarithmicBase(ExpressionInfo value);
    internal GaugeInputValue get_MaximumValue();
    internal void set_MaximumValue(GaugeInputValue value);
    internal GaugeInputValue get_MinimumValue();
    internal void set_MinimumValue(GaugeInputValue value);
    internal ExpressionInfo get_Multiplier();
    internal void set_Multiplier(ExpressionInfo value);
    internal ExpressionInfo get_Reversed();
    internal void set_Reversed(ExpressionInfo value);
    internal GaugeTickMarks get_GaugeMajorTickMarks();
    internal void set_GaugeMajorTickMarks(GaugeTickMarks value);
    internal GaugeTickMarks get_GaugeMinorTickMarks();
    internal void set_GaugeMinorTickMarks(GaugeTickMarks value);
    internal ScalePin get_MaximumPin();
    internal void set_MaximumPin(ScalePin value);
    internal ScalePin get_MinimumPin();
    internal void set_MinimumPin(ScalePin value);
    internal ScaleLabels get_ScaleLabels();
    internal void set_ScaleLabels(ScaleLabels value);
    internal ExpressionInfo get_TickMarksOnTop();
    internal void set_TickMarksOnTop(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_Width();
    internal void set_Width(ExpressionInfo value);
    internal string get_OwnerName();
    internal GaugeScaleExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugeScaleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal double EvaluateInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateIntervalOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateLogarithmic(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLogarithmicBase(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateMultiplier(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateReversed(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateTickMarksOnTop(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GaugeTickMarks : TickMarkStyle {
    private static Declaration m_Declaration;
    private ExpressionInfo m_interval;
    private ExpressionInfo m_intervalOffset;
    internal ExpressionInfo Interval { get; internal set; }
    internal ExpressionInfo IntervalOffset { get; internal set; }
    internal GaugeTickMarks(GaugePanel gaugePanel);
    private static GaugeTickMarks();
    internal ExpressionInfo get_Interval();
    internal void set_Interval(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffset();
    internal void set_IntervalOffset(ExpressionInfo value);
    internal void Initialize(InitializationContext context, bool isMajor);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(GaugeTickMarksExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluateInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateIntervalOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Grouping : object {
    private string m_name;
    private int m_ID;
    private List`1<ExpressionInfo> m_groupExpressions;
    private ExpressionInfo m_groupLabel;
    private List`1<bool> m_sortDirections;
    private PageBreakLocation m_pageBreakLocation;
    private List`1<DataAggregateInfo> m_aggregates;
    private bool m_groupAndSort;
    private List`1<Filter> m_filters;
    [ReferenceAttribute]
private List`1<ReportItem> m_reportItemsWithHideDuplicates;
    private List`1<ExpressionInfo> m_parent;
    private List`1<DataAggregateInfo> m_recursiveAggregates;
    private List`1<DataAggregateInfo> m_postSortAggregates;
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private bool m_saveGroupExprValues;
    private List`1<ExpressionInfo> m_userSortExpressions;
    private InScopeSortFilterHashtable m_nonDetailSortFiltersInScope;
    private InScopeSortFilterHashtable m_detailSortFiltersInScope;
    private List`1<Variable> m_variables;
    private List`1<int> m_hideDuplicatesReportItemIDs;
    private GroupExprHost m_exprHost;
    private Hashtable m_scopeNames;
    private int m_recursiveLevel;
    private Int32[] m_groupExpressionFieldIndices;
    private bool m_isClone;
    private List`1<object> m_currentGroupExprValues;
    private Object[] m_groupInstanceExprValues;
    private ReportHierarchyNode m_owner;
    private List`1[] m_sortFilterScopeInfo;
    private Int32[] m_sortFilterScopeIndex;
    private Boolean[] m_needScopeInfoForSortFilterExpression;
    private Boolean[] m_sortFilterScopeMatched;
    private Boolean[] m_isSortFilterTarget;
    private Boolean[] m_isSortFilterExpressionScope;
    private bool m_isDynamicInDetail;
    private static Declaration m_Declaration;
    internal string Name { get; internal set; }
    internal ExpressionInfo GroupLabel { get; internal set; }
    internal List`1<bool> SortDirections { get; internal set; }
    internal List`1<ExpressionInfo> GroupExpressions { get; internal set; }
    internal bool IsDetail { get; }
    public PageBreakLocation PageBreakLocation { get; public set; }
    internal List`1<DataAggregateInfo> Aggregates { get; internal set; }
    internal bool GroupAndSort { get; internal set; }
    internal List`1<Filter> Filters { get; internal set; }
    internal bool SimpleGroupExpressions { get; }
    internal List`1<ReportItem> ReportItemsWithHideDuplicates { get; internal set; }
    internal List`1<ExpressionInfo> Parent { get; internal set; }
    internal IndexedExprHost ParentExprHost { get; }
    internal IndexedExprHost VariableValueHosts { get; }
    internal List`1<DataAggregateInfo> RecursiveAggregates { get; internal set; }
    internal List`1<DataAggregateInfo> PostSortAggregates { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal bool SaveGroupExprValues { get; internal set; }
    internal List`1<ExpressionInfo> UserSortExpressions { get; internal set; }
    internal InScopeSortFilterHashtable NonDetailSortFiltersInScope { get; internal set; }
    internal InScopeSortFilterHashtable DetailSortFiltersInScope { get; internal set; }
    internal List`1<int> HideDuplicatesReportItemIDs { get; internal set; }
    internal GroupExprHost ExprHost { get; }
    internal Hashtable ScopeNames { get; internal set; }
    internal int RecursiveLevel { get; internal set; }
    internal List`1<object> CurrentGroupExpressionValues { get; internal set; }
    internal ReportHierarchyNode Owner { get; internal set; }
    internal List`1[] SortFilterScopeInfo { get; internal set; }
    internal Int32[] SortFilterScopeIndex { get; internal set; }
    internal Boolean[] NeedScopeInfoForSortFilterExpression { get; internal set; }
    internal Boolean[] IsSortFilterTarget { get; internal set; }
    internal Boolean[] IsSortFilterExpressionScope { get; internal set; }
    internal Boolean[] SortFilterScopeMatched { get; internal set; }
    private int Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IReferenceable.ID { get; }
    private int Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.ID { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.ScopeName { get; }
    private Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.IsSortFilterTarget { get; private set; }
    private Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.IsSortFilterExpressionScope { get; private set; }
    private List`1<ExpressionInfo> Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.UserSortExpressions { get; private set; }
    private IndexedExprHost Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.UserSortExpressionsHost { get; }
    internal List`1<Variable> Variables { get; internal set; }
    internal bool IsDynamicInDetail { get; internal set; }
    internal Grouping(ConstructionPhase phase);
    internal Grouping(int id, ConstructionPhase phase);
    private static Grouping();
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_GroupLabel();
    internal void set_GroupLabel(ExpressionInfo value);
    internal List`1<bool> get_SortDirections();
    internal void set_SortDirections(List`1<bool> value);
    internal List`1<ExpressionInfo> get_GroupExpressions();
    internal void set_GroupExpressions(List`1<ExpressionInfo> value);
    internal bool get_IsDetail();
    public sealed virtual PageBreakLocation get_PageBreakLocation();
    public sealed virtual void set_PageBreakLocation(PageBreakLocation value);
    public sealed virtual bool IgnorePageBreaks();
    public sealed virtual bool HasPageBreaks(bool atStart);
    internal List`1<DataAggregateInfo> get_Aggregates();
    internal void set_Aggregates(List`1<DataAggregateInfo> value);
    internal bool get_GroupAndSort();
    internal void set_GroupAndSort(bool value);
    internal List`1<Filter> get_Filters();
    internal void set_Filters(List`1<Filter> value);
    internal bool get_SimpleGroupExpressions();
    internal List`1<ReportItem> get_ReportItemsWithHideDuplicates();
    internal void set_ReportItemsWithHideDuplicates(List`1<ReportItem> value);
    internal List`1<ExpressionInfo> get_Parent();
    internal void set_Parent(List`1<ExpressionInfo> value);
    internal IndexedExprHost get_ParentExprHost();
    internal IndexedExprHost get_VariableValueHosts();
    internal List`1<DataAggregateInfo> get_RecursiveAggregates();
    internal void set_RecursiveAggregates(List`1<DataAggregateInfo> value);
    internal List`1<DataAggregateInfo> get_PostSortAggregates();
    internal void set_PostSortAggregates(List`1<DataAggregateInfo> value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal bool get_SaveGroupExprValues();
    internal void set_SaveGroupExprValues(bool value);
    internal List`1<ExpressionInfo> get_UserSortExpressions();
    internal void set_UserSortExpressions(List`1<ExpressionInfo> value);
    internal InScopeSortFilterHashtable get_NonDetailSortFiltersInScope();
    internal void set_NonDetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal InScopeSortFilterHashtable get_DetailSortFiltersInScope();
    internal void set_DetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal List`1<int> get_HideDuplicatesReportItemIDs();
    internal void set_HideDuplicatesReportItemIDs(List`1<int> value);
    internal GroupExprHost get_ExprHost();
    internal Hashtable get_ScopeNames();
    internal void set_ScopeNames(Hashtable value);
    internal int get_RecursiveLevel();
    internal void set_RecursiveLevel(int value);
    internal List`1<object> get_CurrentGroupExpressionValues();
    internal void set_CurrentGroupExpressionValues(List`1<object> value);
    internal ReportHierarchyNode get_Owner();
    internal void set_Owner(ReportHierarchyNode value);
    internal List`1[] get_SortFilterScopeInfo();
    internal void set_SortFilterScopeInfo(List`1[] value);
    internal Int32[] get_SortFilterScopeIndex();
    internal void set_SortFilterScopeIndex(Int32[] value);
    internal Boolean[] get_NeedScopeInfoForSortFilterExpression();
    internal void set_NeedScopeInfoForSortFilterExpression(Boolean[] value);
    internal Boolean[] get_IsSortFilterTarget();
    internal void set_IsSortFilterTarget(Boolean[] value);
    internal Boolean[] get_IsSortFilterExpressionScope();
    internal void set_IsSortFilterExpressionScope(Boolean[] value);
    internal Boolean[] get_SortFilterScopeMatched();
    internal void set_SortFilterScopeMatched(Boolean[] value);
    private sealed virtual override int Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IReferenceable.get_ID();
    private sealed virtual override int Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_ID();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_ScopeName();
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_IsSortFilterTarget();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_IsSortFilterExpressionScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_IsSortFilterExpressionScope(Boolean[] value);
    private sealed virtual override List`1<ExpressionInfo> Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_UserSortExpressions();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.set_UserSortExpressions(List`1<ExpressionInfo> value);
    private sealed virtual override IndexedExprHost Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope.get_UserSortExpressionsHost();
    internal List`1<Variable> get_Variables();
    internal void set_Variables(List`1<Variable> value);
    internal bool get_IsDynamicInDetail();
    internal void set_IsDynamicInDetail(bool value);
    internal void Initialize(InitializationContext context);
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetAggregateList();
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetPostSortAggregateList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.ClearIfEmpty();
    private void DataRendererInitialize(InitializationContext context);
    internal void AddReportItemWithHideDuplicates(ReportItem reportItem);
    internal void ResetReportItemsWithHideDuplicates();
    internal bool IsOnPathToSortFilterSource(int index);
    internal Int32[] GetGroupExpressionFieldIndices();
    internal object PublishClone(AutomaticSubtotalContext context, ReportHierarchyNode owner);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal void SetExprHost(GroupExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal string EvaluateGroupingLabelExpression(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal int GetRecursiveLevel(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal void SetGroupInstanceExpressionValues(Object[] exprValues);
    internal Object[] GetGroupInstanceExpressionValues(IReportScopeInstance romInstance, OnDemandProcessingContext context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.GroupingList : ArrayList {
    internal Grouping Item { get; }
    internal Grouping LastEntry { get; }
    internal GroupingList(int capacity);
    internal Grouping get_Item(int index);
    internal Grouping get_LastEntry();
    internal object PublishClone(AutomaticSubtotalContext context, ReportHierarchyNode owner);
    internal GroupingList Clone();
}
internal static class Microsoft.ReportingServices.ReportIntermediateFormat.GroupTreeTracer : object {
    private static List`1<string> m_strings;
    private static GroupTreeTracer();
    internal static void TraceReportInstance(OnDemandMetadata odpMetadata, ReportInstance reportInstance, Report reportDefinition, int level);
    private static string GetEmptyString(int level);
    private static void TraceMetadata(OnDemandMetadata odpMetadata, int level);
    private static void TraceScopeInstance(ScopeInstance scopeInstance, int level);
    private static void TraceDataSetInstance(DataSetInstance instance, int level);
    private static void TraceDataRegionInstance(DataRegionInstance instance, int level);
    private static void TraceDataRegionMemberInstances(List`1<ScalableList`1<DataRegionMemberInstance>> members, int level);
    private static void TraceDataRegionMemberInstance(DataRegionMemberInstance instance, int level);
    private static void TraceCellInstances(List`1<ScalableList`1<DataCellInstance>> cells, int level);
    private static void TraceCellInstance(DataCellInstance instance, int level);
    private static void TraceSubReportInstance(SubReportInstance instance, int level);
    private static void TraceParameters(ParametersImpl parameters, int level);
    private static string FlattenParameterArray(object parameterValueOrLabel);
    private static string FlattenObjectArray(Object[] objects);
    private static string GetObjectValue(object obj);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.HierarchyNodeList : ArrayList {
    private List`1<int> m_leafCellIndexes;
    private int m_excludedIndex;
    private List`1<int> m_leafCellIndexesWithoutExcluded;
    internal ReportHierarchyNode Item { get; }
    internal List`1<int> LeafCellIndexes { get; }
    internal HierarchyNodeList(int capacity);
    internal ReportHierarchyNode get_Item(int index);
    internal List`1<int> get_LeafCellIndexes();
    internal List`1<int> GetLeafCellIndexes(int excludedCellIndex);
    private static void CalculateLeafCellIndexes(HierarchyNodeList nodes, List`1& leafCellIndexes, int excludedCellIndex);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner {
    public Action Action { get; }
    public List`1<string> FieldsUsedInValueExpression { get; public set; }
    public abstract virtual Action get_Action();
    public abstract virtual List`1<string> get_FieldsUsedInValueExpression();
    public abstract virtual void set_FieldsUsedInValueExpression(List`1<string> value);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder {
    public abstract virtual List`1<DataAggregateInfo> GetAggregateList();
    public abstract virtual List`1<DataAggregateInfo> GetPostSortAggregateList();
    public abstract virtual void ClearIfEmpty();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.IComparerToGeneric`1 : object {
    private IComparer m_comparer;
    internal IComparerToGeneric`1(IComparer comparer);
    public sealed virtual int Compare(T x, T y);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.ICreateSubtotals {
    public abstract virtual void CreateAutomaticSubtotals(AutomaticSubtotalContext context);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder {
    public IInstancePath InstancePath { get; }
    public DataValueList CustomProperties { get; }
    public abstract virtual IInstancePath get_InstancePath();
    public abstract virtual DataValueList get_CustomProperties();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IDocumentMapEntry {
    public bool InDocumentMap { get; }
    public abstract virtual bool get_InDocumentMap();
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.IDOwner : object {
    protected int m_ID;
    protected bool m_isClone;
    private static Declaration m_Declaration;
    protected string m_cachedDefinitionPath;
    protected InstancePathItem m_instancePathItem;
    protected IDOwner m_parentIDOwner;
    protected List`1<InstancePathItem> m_cachedInstancePath;
    protected int m_globalID;
    private string m_renderingModelID;
    public int ID { get; public set; }
    public int GlobalID { get; public set; }
    internal string RenderingModelID { get; }
    public InstancePathItem InstancePathItem { get; public set; }
    internal string SubReportDefinitionPath { get; }
    public List`1<InstancePathItem> InstancePath { get; }
    public IInstancePath ParentInstancePath { get; public set; }
    public string UniqueName { get; }
    protected IDOwner(int id);
    private static IDOwner();
    public sealed virtual int get_ID();
    public void set_ID(int value);
    public sealed virtual int get_GlobalID();
    public sealed virtual void set_GlobalID(int value);
    internal string get_RenderingModelID();
    public sealed virtual InstancePathItem get_InstancePathItem();
    public sealed virtual void set_InstancePathItem(InstancePathItem value);
    internal string get_SubReportDefinitionPath();
    public virtual List`1<InstancePathItem> get_InstancePath();
    public sealed virtual IInstancePath get_ParentInstancePath();
    public void set_ParentInstancePath(IInstancePath value);
    public virtual string get_UniqueName();
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void SetupCriRenderItemDef(ReportItem reportItem);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.IEnumerableHelper : object {
    internal static IEnumerable`1<T> ConvertToTyped(IEnumerable aEnum);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IIndexedInCollection {
    public int IndexInCollection { get; public set; }
    public IndexedInCollectionType IndexedInCollectionType { get; }
    public abstract virtual int get_IndexInCollection();
    public abstract virtual void set_IndexInCollection(int value);
    public abstract virtual IndexedInCollectionType get_IndexedInCollectionType();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource {
    public ObjectType ObjectType { get; }
    public string Name { get; }
    public ReportItem Parent { get; }
    public EndUserSort UserSort { get; }
    public List`1<InstancePathItem> InstancePath { get; }
    public GroupingList ContainingScopes { get; public set; }
    public string Scope { get; public set; }
    public bool IsTablixCellScope { get; public set; }
    public bool IsDetailScope { get; public set; }
    public bool IsSubReportTopLevelScope { get; public set; }
    public ScopeChainInfo ScopeChainInfo { get; public set; }
    public abstract virtual ObjectType get_ObjectType();
    public abstract virtual string get_Name();
    public abstract virtual ReportItem get_Parent();
    public abstract virtual EndUserSort get_UserSort();
    public abstract virtual List`1<InstancePathItem> get_InstancePath();
    public abstract virtual GroupingList get_ContainingScopes();
    public abstract virtual void set_ContainingScopes(GroupingList value);
    public abstract virtual string get_Scope();
    public abstract virtual void set_Scope(string value);
    public abstract virtual bool get_IsTablixCellScope();
    public abstract virtual void set_IsTablixCellScope(bool value);
    public abstract virtual bool get_IsDetailScope();
    public abstract virtual void set_IsDetailScope(bool value);
    public abstract virtual bool get_IsSubReportTopLevelScope();
    public abstract virtual void set_IsSubReportTopLevelScope(bool value);
    public abstract virtual List`1<int> GetPeerSortFilters(bool create);
    public abstract virtual InScopeSortFilterHashtable GetSortFiltersInScope(bool create, bool inDetail);
    public abstract virtual ScopeChainInfo get_ScopeChainInfo();
    public abstract virtual void set_ScopeChainInfo(ScopeChainInfo value);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IInstancePath {
    public List`1<InstancePathItem> InstancePath { get; }
    public IInstancePath ParentInstancePath { get; }
    public InstancePathItem InstancePathItem { get; public set; }
    public string UniqueName { get; }
    public abstract virtual List`1<InstancePathItem> get_InstancePath();
    public abstract virtual IInstancePath get_ParentInstancePath();
    public abstract virtual InstancePathItem get_InstancePathItem();
    public abstract virtual void set_InstancePathItem(InstancePathItem value);
    public abstract virtual string get_UniqueName();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Image : ReportItem {
    private Action m_action;
    private SourceType m_source;
    private ExpressionInfo m_value;
    private ExpressionInfo m_MIMEType;
    private Sizings m_sizing;
    private ImageExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    private static Declaration m_Declaration;
    internal static Byte[] TransparentImageBytes;
    internal ObjectType ObjectType { get; }
    internal Action Action { get; internal set; }
    internal SourceType Source { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo MIMEType { get; internal set; }
    internal Sizings Sizing { get; internal set; }
    internal ImageExprHost ImageExprHost { get; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal Image(ReportItem parent);
    internal Image(int id, ReportItem parent);
    private static Image();
    internal virtual ObjectType get_ObjectType();
    internal Action get_Action();
    internal void set_Action(Action value);
    internal SourceType get_Source();
    internal void set_Source(SourceType value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_MIMEType();
    internal void set_MIMEType(ExpressionInfo value);
    internal Sizings get_Sizing();
    internal void set_Sizing(Sizings value);
    internal ImageExprHost get_ImageExprHost();
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal bool ShouldTrackFieldsUsedInValue();
    internal string EvaluateMimeTypeExpression(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal Byte[] EvaluateBinaryValueExpression(IReportScopeInstance romInstance, OnDemandProcessingContext context, Boolean& errOccurred);
    internal string EvaluateStringValueExpression(IReportScopeInstance romInstance, OnDemandProcessingContext context, Boolean& errOccurred);
}
internal static class Microsoft.ReportingServices.ReportIntermediateFormat.ImageHelper : object {
    internal static Byte[] TransparentImageBytes;
    private static ImageHelper();
    internal static Byte[] LoadExistingImageData(string imageDataId, IBaseImage image, ReportElement reportElement);
    internal static string GetCalculatedImageProperties(IBaseImage image, ReportElement reportElement, String& mimeType, Byte[]& imageData, String& imageDataId, List`1& fieldsUsedInValue);
    private static string GetCalculatedDatabaseImageProperties(IBaseImage image, ReportElement reportElement, String& mimeType, Byte[]& imageData, List`1& fieldsUsedInValue);
    private static string GetCalculatedNonDatabaseImageProperties(IBaseImage image, ReportElement reportElement, String& mimeType, Byte[]& imageData, String& imageDataId, List`1& fieldsUsedInValue);
    internal static ObjectType GetObjectTypeAndName(ReportItem reportItem, ReportElement reportElement, RenderingContext renderingContext, String& objectName);
    internal static void RegisterWarning(RenderingContext renderingContext, ReportElement reportElement, SourceType source, string expression, ObjectType objectType, string objectName, string propertyName);
    internal static Byte[] ReadImageDataFromChunk(string chunkName, ReportChunkTypes chunkType, RenderingContext renderingContext, ObjectType objectType, string objectName, string propertyName, ProcessingErrorCode errorCode);
    internal static string StoreImageDataInChunk(ReportChunkTypes chunkType, Byte[] imageData, string mimeType, RenderingContext renderingContext);
    internal static string FetchEmbeddedImageData(string value, RenderingContext renderingContext, ObjectType objectType, string objectName, string propertyName, String& mimeType, Byte[]& imageData, String& imageDataId);
    internal static string FetchExternalImageData(string value, RenderingContext renderingContext, ObjectType objectType, string objectName, string propertyName, String& mimeType, Byte[]& imageData, String& imageDataId);
    internal static bool GetExternalImage(RenderingContext renderingContext, string path, ObjectType objectType, string objectName, Byte[]& imageData, String& mimeType);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ImageInfo : object {
    private string m_streamName;
    private string m_mimeType;
    private bool m_errorOccurred;
    private WeakReference m_imageDataRef;
    private static Declaration m_Declaration;
    internal string StreamName { get; internal set; }
    internal string MimeType { get; internal set; }
    internal WeakReference ImageDataRef { get; internal set; }
    internal bool ErrorOccurred { get; internal set; }
    internal ImageInfo(string streamName, string mimeType);
    private static ImageInfo();
    internal string get_StreamName();
    internal void set_StreamName(string value);
    internal string get_MimeType();
    internal void set_MimeType(string value);
    internal WeakReference get_ImageDataRef();
    internal void set_ImageDataRef(WeakReference value);
    internal bool get_ErrorOccurred();
    internal void set_ErrorOccurred(bool value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IMemberHierarchy {
    public abstract virtual IList`1<DataRegionMemberInstance> GetChildMemberInstances(bool isRowMember, int memberIndexInCollection);
    public abstract virtual IList`1<DataCellInstance> GetCellInstances(int columnMemberSequenceId);
    public abstract virtual IDisposable AddCellInstance(int columnMemberSequenceId, int cellIndexInCollection, DataCellInstance cellInstance, IScalabilityCache cache);
    public abstract virtual IDisposable AddMemberInstance(DataRegionMemberInstance instance, int indexInCollection, IScalabilityCache cache, Int32& instanceIndex);
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.IndexedInCollectionType : Enum {
    public int value__;
    public static IndexedInCollectionType DataRegion;
    public static IndexedInCollectionType Member;
    public static IndexedInCollectionType Cell;
    public static IndexedInCollectionType SubReport;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.InitializationContext : ValueType {
    private ICatalogItemContext m_reportContext;
    private LocationFlags m_location;
    private ObjectType m_objectType;
    private string m_objectName;
    private string m_tablixName;
    private Dictionary`2<string, ImageInfo> m_embeddedImages;
    private ErrorContext m_errorContext;
    private Hashtable m_parameters;
    private ArrayList m_dynamicParameters;
    private Hashtable m_dataSetQueryInfo;
    private ExprHostBuilder m_exprHostBuilder;
    private Report m_report;
    private Dictionary`2<string, Variable> m_variablesInScope;
    private Byte[] m_referencableTextboxes;
    private Byte[] m_referencableVariables;
    private string m_outerGroupName;
    private string m_currentGroupName;
    private string m_currentDataRegionName;
    private List`1<RunningValueInfo> m_runningValues;
    private Hashtable m_groupingScopesForRunningValues;
    private GroupingScopesForTablix m_groupingScopesForRunningValuesInTablix;
    private Hashtable m_dataregionScopesForRunningValues;
    private AxisGroupingScopesForRunningValues m_axisGroupingScopesForRunningValues;
    private Dictionary`2<string, int> m_groupingExprCountAtScope;
    private bool m_hasFilters;
    private ScopeInfo m_currentScope;
    private ScopeInfo m_outermostDataregionScope;
    private Hashtable m_groupingScopes;
    private Hashtable m_dataregionScopes;
    private Hashtable m_datasetScopes;
    private int m_numberOfDataSets;
    private string m_oneDataSetName;
    private string m_currentDataSetName;
    private int m_currentDataSetIndex;
    private Hashtable m_fieldNameMap;
    private Hashtable m_dataSetNameToDataRegionsMap;
    private StringDictionary m_dataSources;
    private Dictionary`2<string, Pair`2<ReportItem, int>> m_reportItemsInScope;
    private bool m_registerReceiver;
    private CultureInfo m_reportLanguage;
    private bool m_reportDataElementStyleAttribute;
    private bool m_hasUserSortPeerScopes;
    private bool m_hasUserSorts;
    private Dictionary`2<string, List`1<IInScopeEventSource>> m_userSortExpressionScopes;
    private Dictionary`2<string, List`1<IInScopeEventSource>> m_userSortEventSources;
    private Hashtable m_peerScopes;
    private int m_lastPeerScopeId;
    private Dictionary`2<string, ISortFilterScope> m_reportScopes;
    private Hashtable m_reportScopeDatasets;
    private bool m_initializingUserSorts;
    private List`1<IInScopeEventSource> m_detailSortExpressionScopeEventSources;
    private IList`1<Pair`2<double, int>> m_columnHeaderLevelSizeList;
    private IList`1<Pair`2<double, int>> m_rowHeaderLevelSizeList;
    private bool m_hasPreviousAggregates;
    private List`1<string> m_categoryAxisNames;
    private List`1<string> m_valueAxisNames;
    private List`1<string> m_titleNames;
    private List`1<string> m_legendNames;
    private List`1<string> m_legendColumnNames;
    private List`1<string> m_legendCustomItemCellNames;
    private List`1<string> m_legendCustomItemNames;
    private List`1<string> m_formulaParameterNames;
    private List`1<string> m_chartAreaNames;
    private bool m_inAutoSubtotalClone;
    private List`1<VisibilityToggleInfo> m_visibilityToggleInfos;
    private Dictionary`2<string, ToggleItemInfo> m_toggleItems;
    private Stack`1<VisibilityContainmentInfo> m_visibilityContainmentInfos;
    private bool m_isTopLevelCellContents;
    private bool m_isDataRegionScopedCell;
    private Holder`1<int> m_memberCellIndex;
    private Dictionary`2<Hashtable, int> m_indexInCollectionTableForDataRegions;
    private Dictionary`2<Hashtable, int> m_indexInCollectionTableForSubReports;
    private Dictionary`2<Hashtable, int> m_indexInCollectionTable;
    private double m_currentAbsoluteTop;
    private double m_currentAbsoluteLeft;
    internal ICatalogItemContext ReportContext { get; }
    internal LocationFlags Location { get; internal set; }
    internal ObjectType ObjectType { get; internal set; }
    internal string ObjectName { get; internal set; }
    internal bool IsTopLevelCellContents { get; internal set; }
    internal bool HasUserSorts { get; }
    internal bool InitializingUserSorts { get; internal set; }
    internal bool IsTablixCellScope { get; }
    internal bool CellHasDynamicRowsAndColumns { get; }
    internal bool IsDataRegionScopedCell { get; internal set; }
    internal bool ReportDataElementStyleAttribute { get; internal set; }
    internal string TablixName { get; internal set; }
    internal Dictionary`2<string, ImageInfo> EmbeddedImages { get; }
    internal ErrorContext ErrorContext { get; }
    internal bool RegisterHiddenReceiver { get; internal set; }
    internal ExprHostBuilder ExprHostBuilder { get; }
    internal bool MergeOnePass { get; }
    internal CultureInfo ReportLanguage { get; }
    internal IList`1<Pair`2<double, int>> ColumnHeaderLevelSizeList { get; internal set; }
    internal IList`1<Pair`2<double, int>> RowHeaderLevelSizeList { get; internal set; }
    internal bool InAutoSubtotalClone { get; internal set; }
    internal int MemberCellIndex { get; internal set; }
    internal double CurrentAbsoluteTop { get; }
    internal double CurrentAbsoluteLeft { get; }
    internal bool HasPreviousAggregates { get; }
    internal Dictionary`2<string, int> GroupingExprCountAtScope { get; }
    internal bool IsRunningValueDirectionColumn { get; }
    internal InitializationContext(ICatalogItemContext reportContext, bool hasFilters, StringDictionary dataSources, List`1<DataSet> dataSets, ArrayList dynamicParameters, Hashtable dataSetQueryInfo, ErrorContext errorContext, ExprHostBuilder exprHostBuilder, Report report, CultureInfo reportLanguage, Dictionary`2<string, ISortFilterScope> reportScopes, bool hasUserSortPeerScopes, bool hasUserSort, int dataRegionCount, int textboxCount, int variableCount);
    internal ICatalogItemContext get_ReportContext();
    internal LocationFlags get_Location();
    internal void set_Location(LocationFlags value);
    internal ObjectType get_ObjectType();
    internal void set_ObjectType(ObjectType value);
    internal string get_ObjectName();
    internal void set_ObjectName(string value);
    internal bool get_IsTopLevelCellContents();
    internal void set_IsTopLevelCellContents(bool value);
    internal bool get_HasUserSorts();
    internal bool get_InitializingUserSorts();
    internal void set_InitializingUserSorts(bool value);
    internal bool get_IsTablixCellScope();
    internal bool get_CellHasDynamicRowsAndColumns();
    internal bool get_IsDataRegionScopedCell();
    internal void set_IsDataRegionScopedCell(bool value);
    internal bool get_ReportDataElementStyleAttribute();
    internal void set_ReportDataElementStyleAttribute(bool value);
    internal string get_TablixName();
    internal void set_TablixName(string value);
    internal Dictionary`2<string, ImageInfo> get_EmbeddedImages();
    internal ErrorContext get_ErrorContext();
    internal bool get_RegisterHiddenReceiver();
    internal void set_RegisterHiddenReceiver(bool value);
    internal ExprHostBuilder get_ExprHostBuilder();
    internal bool get_MergeOnePass();
    internal CultureInfo get_ReportLanguage();
    internal IList`1<Pair`2<double, int>> get_ColumnHeaderLevelSizeList();
    internal void set_ColumnHeaderLevelSizeList(IList`1<Pair`2<double, int>> value);
    internal IList`1<Pair`2<double, int>> get_RowHeaderLevelSizeList();
    internal void set_RowHeaderLevelSizeList(IList`1<Pair`2<double, int>> value);
    internal bool get_InAutoSubtotalClone();
    internal void set_InAutoSubtotalClone(bool value);
    internal int get_MemberCellIndex();
    internal void set_MemberCellIndex(int value);
    internal double get_CurrentAbsoluteTop();
    internal double get_CurrentAbsoluteLeft();
    internal bool get_HasPreviousAggregates();
    internal Dictionary`2<string, int> get_GroupingExprCountAtScope();
    internal bool get_IsRunningValueDirectionColumn();
    private void RegisterDataSetScope(string scopeName, List`1<DataAggregateInfo> scopeAggregates, List`1<DataAggregateInfo> scopePostSortAggregates, int datasetIndexInCollection);
    private void UnRegisterDataSetScope(string scopeName);
    private void RegisterDataRegionScope(DataRegion dataRegion);
    private void UnRegisterDataRegionScope(string scopeName);
    internal void RegisterGroupingScope(ReportHierarchyNode member);
    internal void UnRegisterGroupingScope(ReportHierarchyNode member);
    internal void ValidateHideDuplicateScope(string hideDuplicateScope, ReportItem reportItem);
    internal void RegisterGroupingScopeForTablixCell(ReportHierarchyNode member);
    internal void UnRegisterGroupingScopeForTablixCell(ReportHierarchyNode member);
    internal void RegisterIndividualCellScope(List`1<DataAggregateInfo> scopeAggregates, List`1<DataAggregateInfo> scopePostSortAggregates, List`1<RunningValueInfo> cellRunningValues, IRIFReportScope scope);
    internal DataRegion RegisterTablixCellScope(DataRegion dataRegion, bool forceRows, List`1<DataAggregateInfo> scopeAggregates, List`1<DataAggregateInfo> scopePostSortAggregates);
    internal void UnRegisterTablixCellScope(DataRegion dataRegion);
    internal void ResetMemberAndCellIndexInCollectionTable();
    internal void SetIndexInCollection(IIndexedInCollection indexedInCollection);
    internal void RegisterPageSectionScope(List`1<DataAggregateInfo> scopeAggregates);
    internal void UnRegisterPageSectionScope();
    internal void RegisterRunningValues(List`1<RunningValueInfo> runningValues);
    internal void RegisterRunningValues(string groupName, List`1<RunningValueInfo> runningValues);
    internal void UnRegisterRunningValues(List`1<RunningValueInfo> runningValues);
    internal void UnregisterCategoryAxisNames();
    internal void UnregisterValueAxisNames();
    internal void RegisterAxisName(string axisName, bool isValueAxis);
    internal void UnregisterLegendCustomItemNames();
    internal void RegisterLegendCustomItemName(string legendCustomItemName);
    internal void UnregisterTitleNames();
    internal void RegisterTitleName(string titleName);
    internal void UnregisterLegendNames();
    internal void RegisterLegendName(string legendName);
    internal void UnregisterChartAreaNames();
    internal void RegisterChartAreaName(string chartAreaName);
    internal void UnregisterFormulaParameterNames();
    internal void RegisterFormulaParameterName(string formulaParameterName);
    internal void UnregisterLegendColumnNames();
    internal void RegisterLegendColumnName(string legendColumnName);
    internal void UnregisterLegendCutomItemCellNames();
    internal void RegisterLegendCustomItemCellName(string legendCustomItemCellName);
    internal void ValidateValueAxisName(string axisName);
    internal string GetFirstValueAxisName();
    internal void RegisterCustomLabelName(string name);
    internal void RegisterScaleRangeName(string name);
    internal void TransferGroupExpressionRowNumbers(List`1<RunningValueInfo> rowNumbers);
    internal void TransferRunningValues(List`1<RunningValueInfo> runningValues, string propertyName);
    internal void TransferRunningValues(List`1<RunningValueInfo> runningValues, ObjectType objectType, string objectName, string propertyName);
    internal void SpecialTransferRunningValues(List`1<RunningValueInfo> runningValues);
    internal void CopyRunningValues(List`1<RunningValueInfo> runningValues, List`1<DataAggregateInfo> tablixAggregates);
    internal void TransferAggregates(List`1<DataAggregateInfo> aggregates, string propertyName);
    internal void TransferAggregates(List`1<DataAggregateInfo> aggregates, ObjectType objectType, string objectName, string propertyName);
    internal void InitializeParameters(List`1<ParameterDef> parameters, List`1<DataSet> dataSetList);
    private void InitializeParameter(ParameterDef parameter, DynamicParameter dynamicParameter, Hashtable dependencies, List`1<DataSet> dataSetList);
    private void InitializeParameterDataSource(ParameterDef parameter, DataSetReference dataSetRef, bool isDefault, Hashtable dependencies, Boolean& isComplex, List`1<DataSet> dataSetList);
    internal void MergeFieldPropertiesIntoDataset(ExpressionInfo expressionInfo);
    internal void RegisterDataSetLevelAggregate(int referencedDataSetIndex);
    internal bool RegisterDataRegion(DataRegion dataRegion);
    internal void UnRegisterDataRegion(DataRegion dataRegion);
    internal void RegisterDataSet(DataSet dataSet);
    internal void UnRegisterDataSet(DataSet dataSet);
    private string GetDataSetName();
    private DataSet GetDataSet();
    private DataSet GetDataSet(string dataSetName);
    internal void SetDataSetHasSubReports();
    internal DataRegion GetCurrentDataRegion();
    private bool ValidateDataSetNameForTopLevelDataRegion(string dataSetName, bool registerError);
    internal void CheckFieldReferences(List`1<string> fieldNames, string propertyName);
    internal void AggregateCheckFieldReferences(List`1<string> fieldNames, string dataSetName, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckFieldReference(List`1<string> fieldNames, string dataSetName, ObjectType objectType, string objectName, string propertyName);
    internal void FillInFieldIndex(ExpressionInfo exprInfo);
    internal void FillInFieldIndex(ExpressionInfo exprInfo, string dataSetName);
    private void InternalFillInFieldIndex(ExpressionInfo exprInfo, string dataSetName);
    internal void FillInTokenIndex(ExpressionInfo exprInfo);
    internal void CheckDataSetReference(List`1<string> referencedDataSets, string propertyName);
    internal void AggregateCheckDataSetReference(List`1<string> referencedDataSets, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckDataSetReference(List`1<string> dataSetNames, ObjectType objectType, string objectName, string propertyName);
    internal void CheckDataSourceReference(List`1<string> referencedDataSources, string propertyName);
    internal void AggregateCheckDataSourceReference(List`1<string> referencedDataSources, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckDataSourceReference(List`1<string> dataSourceNames, ObjectType objectType, string objectName, string propertyName);
    internal void RegisterGroupWithVariables(ReportHierarchyNode node);
    internal void RegisterVariables(List`1<Variable> variables);
    internal void UnregisterVariables(List`1<Variable> variables);
    internal void RegisterVariable(Variable variable);
    internal void UnregisterVariable(Variable variable);
    internal void CheckVariableReferences(List`1<string> referencedVariables, string propertyName);
    internal void AggregateCheckVariableReferences(List`1<string> referencedVariables, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckVariableReferences(List`1<string> referencedVariables, ObjectType objectType, string objectName, string propertyName);
    internal void RegisterTextBoxInScope(TextBox textbox);
    internal void RegisterReportItem(ReportItem reportItem);
    internal void RegisterReportItems(ReportItemCollection reportItems);
    private void RegisterReportItems(List`1<List`1<TablixCornerCell>> corner);
    internal void RegisterReportItems(TablixRowList rows);
    private void RegisterReportItems(TablixCellBase cell);
    private void RegisterReportItem(Tablix tablix);
    private void RegisterStaticMemberReportItems(TablixMemberList members, bool register, List`1<int> indexes, Int32& index);
    internal void RegisterMemberReportItems(TablixMember member, bool firstPass);
    private void HandleCellContents(TablixMember member, bool register);
    private void RegisterMemberReportItems(TablixMember member, bool register, bool registerStatic, List`1<int> indexes, Int32& index);
    internal void RegisterReportItems(List`1<ReportItem> reportItems);
    internal void UnRegisterReportItem(ReportItem reportItem);
    internal void UnRegisterReportItems(List`1<ReportItem> reportItems);
    private void UnRegisterReportItems(List`1<List`1<TablixCornerCell>> corner);
    internal void UnRegisterReportItems(TablixRowList rows);
    private void UnRegisterReportItems(TablixCellBase cell);
    internal void UnRegisterReportItem(Tablix tablix);
    private void UnRegisterStaticMemberReportItems(TablixMemberList members, bool unregister, List`1<int> indexes, Int32& index);
    internal void UnRegisterMemberReportItems(TablixMember member, bool firstPass);
    private void UnRegisterMemberReportItems(TablixMember member, bool unregister, bool unregisterStatic, List`1<int> indexes, Int32& index);
    internal void UnRegisterReportItems(ReportItemCollection reportItems);
    internal void CheckReportItemReferences(List`1<string> referencedReportItems, string propertyName);
    internal void AggregateCheckReportItemReferences(List`1<string> referencedReportItems, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckReportItemReferences(List`1<string> referencedReportItems, ObjectType objectType, string objectName, string propertyName);
    internal Byte[] GetCurrentReferencableVariables();
    internal Byte[] GetCurrentReferencableTextboxes();
    internal void CheckReportParameterReferences(List`1<string> referencedParameters, string propertyName);
    private void InternalCheckReportParameterReferences(List`1<string> referencedParameters, ObjectType objectType, string objectName, string propertyName);
    internal VisibilityToggleInfo RegisterVisibilityToggle(Visibility visibility);
    internal void RegisterVisibility(Visibility visibility, IVisibilityOwner owner);
    internal void UnRegisterVisibility(Visibility visibility, IVisibilityOwner owner);
    internal bool NeedVisibilityLink(Visibility visibility, IVisibilityOwner owner, IVisibilityOwner& outerContainer, IVisibilityOwner& outerRowContainer, IVisibilityOwner& outerColumnContainer);
    internal void RegisterToggleItem(TextBox textbox);
    internal void ValidateToggleItems();
    private bool IsTargetVisibilityOnContainmentChain(IVisibilityOwner visibilityOwner, Visibility targetVisibility);
    private bool ContainsSubsetOfKeys(Hashtable set, Hashtable subSet);
    internal void ValidateHeaderSize(double size, int startLevel, int span, bool isColumnHierarchy, int cellIndex);
    internal double GetTotalHeaderSize(bool isColumnHierarchy, int span);
    internal double GetHeaderSize(bool isColumnHierarchy, int startLevel, int span);
    internal double GetHeaderSize(IList`1<Pair`2<double, int>> headerLevelSizeList, int startingLevel, int spans);
    private int FindEntryForLevel(IList`1<Pair`2<double, int>> headerLevelSizeList, int level);
    internal double ValidateSize(string size, string propertyName);
    internal double ValidateSize(String& size, string propertyName);
    internal double ValidateSize(String& size, bool restrictMaxValue, string propertyName);
    internal void CheckInternationalSettings(Dictionary`2<string, AttributeInfo> styleAttributes);
    internal string GetCurrentScopeName();
    internal bool IsScope(string scope);
    internal bool IsAncestorScope(string targetScope);
    internal bool IsSameOrChildScope(string parentScope, string childScope);
    internal bool IsCurrentScope(string targetScope);
    internal bool IsPeerScope(string targetScope);
    internal bool IsReportTopLevelScope();
    internal ISortFilterScope GetSortFilterScope();
    internal ISortFilterScope GetSortFilterScope(string scopeName);
    internal void RegisterPeerScopes(ReportItemCollection reportItems);
    private void RegisterPeerScopes(TablixMemberList members, int scopeID);
    private void RegisterPeerScopes(List`1<List`1<TablixCornerCell>> cornerCells, int scopeID);
    private void RegisterPeerScopes(ReportItemCollection reportItems, int scopeID, bool traverse);
    private void InternalRegisterPeerScopes(ReportItemCollection reportItems, int scopeID, bool traverse);
    private void RegisterPeerScope(ReportItem item, int scopeID, bool traverse);
    private void RegisterUserSortInnerScope(IInScopeEventSource eventSource);
    private void UnregisterUserSortInnerScope(string sortExpressionScopeString, IInScopeEventSource eventSource);
    internal void ProcessUserSortScopes(string scopeName);
    internal void RegisterSortEventSource(IInScopeEventSource eventSource);
    internal void ProcessSortEventSource(IInScopeEventSource eventSource);
    private void RegisterUserSortWithSortTarget(IInScopeEventSource eventSource);
    private void UnregisterUserSortWithSortTarget(string sortTarget, IInScopeEventSource eventSource);
    internal GroupingList GetContainingScopesInCurrentDataRegion();
    internal GroupingList GetContainingScopes();
    private ScopeChainInfo GetScopeChainInfo();
    private void AddEventSourceToScope(IInScopeEventSource eventSource);
    private void InitializeSortExpression(IInScopeEventSource eventSource, bool needsExplicitAggregateScope);
    private void AddToScopeSortFilterList(IInScopeEventSource eventSource);
    internal void SetDataSetDetailUserSortFilter();
    private void EventSourceWithDetailSortExpressionAdd(IInScopeEventSource eventSource);
    internal void EventSourcesWithDetailSortExpressionInitialize(string sortExpressionScope);
    internal void InitializeAbsolutePosition(ReportItem reportItem);
    internal void UpdateTopLeftDataRegion(DataRegion dataRegion);
    internal void AddGroupingExprCountForGroup(string scope, int groupingExprCount);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.InScopeSortFilterHashtable : Hashtable {
    internal List`1<int> Item { get; }
    internal InScopeSortFilterHashtable(int capacity);
    internal List`1<int> get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.InstancePathComparer : object {
    private static InstancePathComparer m_instance;
    internal static InstancePathComparer Instance { get; }
    private static InstancePathComparer();
    internal static InstancePathComparer get_Instance();
    public sealed virtual bool Equals(List`1<InstancePathItem> instancePath1, List`1<InstancePathItem> instancePath2);
    public sealed virtual int GetHashCode(List`1<InstancePathItem> instancePath);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.InstancePathDictionary`1 : Dictionary`2<List`1<InstancePathItem>, TValue> {
    public InstancePathDictionary`1(int capacity);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.InstancePathItem : object {
    internal static char DefinitionInstanceDelimiter;
    internal static char InstancePathDelimiter;
    private static char m_0;
    private static char m_1;
    private static char m_2;
    private static char m_3;
    private static char m_4;
    private static char m_5;
    private static char m_6;
    private static char m_7;
    private static char m_8;
    private static char m_9;
    private int m_instanceIndex;
    private int m_indexInCollection;
    private InstancePathItemType m_indexType;
    private int m_hash;
    internal bool IsDynamicMember { get; }
    internal bool IsScope { get; }
    internal bool IsEmpty { get; }
    internal int IndexInCollection { get; }
    internal int InstanceIndex { get; }
    internal InstancePathItemType Type { get; }
    internal InstancePathItem(InstancePathItemType type, int id);
    internal InstancePathItem(InstancePathItem original);
    internal bool get_IsDynamicMember();
    internal bool get_IsScope();
    internal bool get_IsEmpty();
    internal int get_IndexInCollection();
    internal int get_InstanceIndex();
    internal InstancePathItemType get_Type();
    public virtual int GetHashCode();
    internal void ResetContext();
    internal void MoveNext();
    internal void SetContext(int index);
    internal static void DeepCopyPath(List`1<InstancePathItem> instancePath, List`1& copy);
    internal static bool IsSameScopePath(IInstancePath originalRIFObject, IInstancePath lastRIFObject);
    internal static bool IsSamePath(List`1<InstancePathItem> path1, List`1<InstancePathItem> path2);
    internal static int GetSharedPathIndex(int startIndexForNewPath, List`1<InstancePathItem> oldPath, List`1<InstancePathItem> newPath);
    internal static int GetSharedPathIndex(int startIndexForNewPath, List`1<InstancePathItem> oldPath, List`1<InstancePathItem> newPath, bool returnPreviousIndex, Boolean& identicalPaths);
    internal static bool IsEmptyPath(int startIndex, List`1<InstancePathItem> path);
    internal static bool IsValidContext(List`1<InstancePathItem> path);
    internal static List`1<InstancePathItem> CombineRowColPath(List`1<InstancePathItem> rowPath, List`1<InstancePathItem> columnPath);
    internal static int GetParentDataRegionIndex(List`1<InstancePathItem> instancePath);
    internal static int GetParentReportIndex(List`1<InstancePathItem> instancePath, bool isSubreport);
    internal static string GenerateUniqueNameString(int id, List`1<InstancePathItem> instancePath);
    internal static string GenerateUniqueNameString(string idString, List`1<InstancePathItem> instancePath);
    internal static string GenerateUniqueNameString(int id, List`1<InstancePathItem> instancePath, int parentInstanceIndex);
    internal static string GenerateInstancePathString(List`1<InstancePathItem> instancePath);
    private static string GenerateInstancePathString(List`1<InstancePathItem> instancePath, int parentInstanceIndex);
    private static void AppendInteger(ReverseStringBuilder& builder, int value);
    private static char GetIntegerChar(int digit);
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.InstancePathItemType : Enum {
    public int value__;
    public static InstancePathItemType None;
    public static InstancePathItemType DataRegion;
    public static InstancePathItemType SubReport;
    public static InstancePathItemType Cell;
    public static InstancePathItemType ColumnMemberInstanceIndexTopMost;
    public static InstancePathItemType ColumnMemberInstanceIndex;
    public static InstancePathItemType RowMemberInstanceIndex;
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak {
    public PageBreakLocation PageBreakLocation { get; public set; }
    public abstract virtual PageBreakLocation get_PageBreakLocation();
    public abstract virtual void set_PageBreakLocation(PageBreakLocation value);
    public abstract virtual bool IgnorePageBreaks();
    public abstract virtual bool HasPageBreaks(bool atStart);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IReportInstanceContainer {
    public IReference`1<ReportInstance> ReportInstance { get; }
    public abstract virtual IReference`1<ReportInstance> get_ReportInstance();
    public abstract virtual IReference`1<ReportInstance> SetReportInstance(ReportInstance reportInstance, OnDemandMetadata odpMetadata);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope {
    public bool NeedToCacheDataRows { get; public set; }
    public abstract virtual void AddInScopeEventSource(IInScopeEventSource eventSource);
    public abstract virtual void AddInScopeTextBox(TextBox textbox);
    public abstract virtual void ResetTextBoxImpls(OnDemandProcessingContext context);
    public abstract virtual bool VariableInScope(int sequenceIndex);
    public abstract virtual bool TextboxInScope(int sequenceIndex);
    public abstract virtual bool get_NeedToCacheDataRows();
    public abstract virtual void set_NeedToCacheDataRows(bool value);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder {
    public abstract virtual List`1<RunningValueInfo> GetRunningValueList();
    public abstract virtual void ClearIfEmpty();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IShowHideSender {
    public abstract virtual void ProcessSender(ProcessingContext context, int uniqueName);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.ISortFilterScope {
    public int ID { get; }
    public string ScopeName { get; }
    public Boolean[] IsSortFilterTarget { get; public set; }
    public Boolean[] IsSortFilterExpressionScope { get; public set; }
    public List`1<ExpressionInfo> UserSortExpressions { get; public set; }
    public IndexedExprHost UserSortExpressionsHost { get; }
    public abstract virtual int get_ID();
    public abstract virtual string get_ScopeName();
    public abstract virtual Boolean[] get_IsSortFilterTarget();
    public abstract virtual void set_IsSortFilterTarget(Boolean[] value);
    public abstract virtual Boolean[] get_IsSortFilterExpressionScope();
    public abstract virtual void set_IsSortFilterExpressionScope(Boolean[] value);
    public abstract virtual List`1<ExpressionInfo> get_UserSortExpressions();
    public abstract virtual void set_UserSortExpressions(List`1<ExpressionInfo> value);
    public abstract virtual IndexedExprHost get_UserSortExpressionsHost();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer {
    public Style StyleClass { get; }
    public IInstancePath InstancePath { get; }
    public ObjectType ObjectType { get; }
    public string Name { get; }
    public abstract virtual Style get_StyleClass();
    public abstract virtual IInstancePath get_InstancePath();
    public abstract virtual ObjectType get_ObjectType();
    public abstract virtual string get_Name();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.IVisibilityOwner {
    public Visibility Visibility { get; }
    public IVisibilityOwner ContainingDynamicVisibility { get; public set; }
    public IVisibilityOwner ContainingDynamicColumnVisibility { get; public set; }
    public IVisibilityOwner ContainingDynamicRowVisibility { get; public set; }
    public string SenderUniqueName { get; }
    public abstract virtual Visibility get_Visibility();
    public abstract virtual bool ComputeHidden(RenderingContext renderingContext, ToggleCascadeDirection direction);
    public abstract virtual bool ComputeDeepHidden(RenderingContext renderingContext, ToggleCascadeDirection direction);
    public abstract virtual bool ComputeStartHidden(RenderingContext renderingContext);
    public abstract virtual IVisibilityOwner get_ContainingDynamicVisibility();
    public abstract virtual void set_ContainingDynamicVisibility(IVisibilityOwner value);
    public abstract virtual IVisibilityOwner get_ContainingDynamicColumnVisibility();
    public abstract virtual void set_ContainingDynamicColumnVisibility(IVisibilityOwner value);
    public abstract virtual IVisibilityOwner get_ContainingDynamicRowVisibility();
    public abstract virtual void set_ContainingDynamicRowVisibility(IVisibilityOwner value);
    public abstract virtual string get_SenderUniqueName();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Last : DataAggregate {
    private object m_value;
    private static Declaration m_declaration;
    public int Size { get; }
    private static Last();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Line : ReportItem {
    private static string ZeroSize;
    private bool m_slanted;
    private ReportItemExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal bool LineSlant { get; internal set; }
    internal Line(ReportItem parent);
    internal Line(int id, ReportItem parent);
    private static Line();
    internal virtual ObjectType get_ObjectType();
    internal bool get_LineSlant();
    internal void set_LineSlant(bool value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void CalculateSizes(double width, double height, InitializationContext context, bool overwrite);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.LinearGauge : Gauge {
    private static Declaration m_Declaration;
    private List`1<LinearScale> m_gaugeScales;
    private ExpressionInfo m_orientation;
    internal List`1<LinearScale> GaugeScales { get; internal set; }
    internal ExpressionInfo Orientation { get; internal set; }
    internal LinearGauge(GaugePanel gaugePanel, int id);
    private static LinearGauge();
    internal List`1<LinearScale> get_GaugeScales();
    internal void set_GaugeScales(List`1<LinearScale> value);
    internal ExpressionInfo get_Orientation();
    internal void set_Orientation(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(LinearGaugeExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal GaugeOrientations EvaluateOrientation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.LinearPointer : GaugePointer {
    private static Declaration m_Declaration;
    private ExpressionInfo m_type;
    private Thermometer m_thermometer;
    internal ExpressionInfo Type { get; internal set; }
    internal Thermometer Thermometer { get; internal set; }
    internal LinearPointer(GaugePanel gaugePanel, int id);
    private static LinearPointer();
    internal ExpressionInfo get_Type();
    internal void set_Type(ExpressionInfo value);
    internal Thermometer get_Thermometer();
    internal void set_Thermometer(Thermometer value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(LinearPointerExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal LinearPointerTypes EvaluateType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.LinearScale : GaugeScale {
    private static Declaration m_Declaration;
    private List`1<LinearPointer> m_gaugePointers;
    private ExpressionInfo m_startMargin;
    private ExpressionInfo m_endMargin;
    private ExpressionInfo m_position;
    internal List`1<LinearPointer> GaugePointers { get; internal set; }
    internal ExpressionInfo StartMargin { get; internal set; }
    internal ExpressionInfo EndMargin { get; internal set; }
    internal ExpressionInfo Position { get; internal set; }
    internal LinearScale(GaugePanel gaugePanel, int id);
    private static LinearScale();
    internal List`1<LinearPointer> get_GaugePointers();
    internal void set_GaugePointers(List`1<LinearPointer> value);
    internal ExpressionInfo get_StartMargin();
    internal void set_StartMargin(ExpressionInfo value);
    internal ExpressionInfo get_EndMargin();
    internal void set_EndMargin(ExpressionInfo value);
    internal ExpressionInfo get_Position();
    internal void set_Position(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(LinearScaleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluateStartMargin(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateEndMargin(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluatePosition(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Max : DataAggregate {
    private DataTypeCode m_expressionType;
    private object m_currentMax;
    private CompareInfo m_compareInfo;
    private CompareOptions m_compareOptions;
    private static Declaration m_declaration;
    public int Size { get; }
    internal Max(CompareInfo compareInfo, CompareOptions compareOptions);
    private static Max();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Min : DataAggregate {
    private DataTypeCode m_expressionType;
    private object m_currentMin;
    private CompareInfo m_compareInfo;
    private CompareOptions m_compareOptions;
    private static Declaration m_declaration;
    public int Size { get; }
    internal Min(CompareInfo compareInfo, CompareOptions compareOptions);
    private static Min();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.NumericIndicator : GaugePanelItem {
    private static Declaration m_Declaration;
    internal NumericIndicator(GaugePanel gaugePanel, int id);
    private static NumericIndicator();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(NumericIndicatorExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Page : IDOwner {
    private PageSection m_pageHeader;
    private PageSection m_pageFooter;
    private string m_pageHeight;
    private double m_pageHeightValue;
    private string m_pageWidth;
    private double m_pageWidthValue;
    private string m_leftMargin;
    private double m_leftMarginValue;
    private string m_rightMargin;
    private double m_rightMarginValue;
    private string m_topMargin;
    private double m_topMarginValue;
    private string m_bottomMargin;
    private double m_bottomMarginValue;
    private string m_interactiveHeight;
    private double m_interactiveHeightValue;
    private string m_interactiveWidth;
    private double m_interactiveWidthValue;
    private int m_columns;
    private string m_columnSpacing;
    private double m_columnSpacingValue;
    private ReportSize m_columnSpacingForRendering;
    private ReportSize m_pageWidthForRendering;
    private ReportSize m_pageHeightForRendering;
    private Style m_styleClass;
    private ReportSize m_bottomMarginForRendering;
    private ReportSize m_topMarginForRendering;
    private ReportSize m_rightMarginForRendering;
    private ReportSize m_leftMarginForRendering;
    private static Declaration m_Declaration;
    internal PageSection PageHeader { get; internal set; }
    internal bool PageHeaderEvaluation { get; }
    internal PageSection PageFooter { get; internal set; }
    internal bool PageFooterEvaluation { get; }
    internal string PageHeight { get; internal set; }
    internal double PageHeightValue { get; internal set; }
    internal string PageWidth { get; internal set; }
    internal double PageWidthValue { get; internal set; }
    internal string LeftMargin { get; internal set; }
    internal double LeftMarginValue { get; internal set; }
    internal string RightMargin { get; internal set; }
    internal double RightMarginValue { get; internal set; }
    internal string TopMargin { get; internal set; }
    internal double TopMarginValue { get; internal set; }
    internal string BottomMargin { get; internal set; }
    internal double BottomMarginValue { get; internal set; }
    internal ReportSize PageHeightForRendering { get; internal set; }
    internal ReportSize PageWidthForRendering { get; internal set; }
    internal ReportSize LeftMarginForRendering { get; internal set; }
    internal ReportSize RightMarginForRendering { get; internal set; }
    internal ReportSize TopMarginForRendering { get; internal set; }
    internal ReportSize BottomMarginForRendering { get; internal set; }
    internal string InteractiveHeight { get; internal set; }
    internal double InteractiveHeightValue { get; internal set; }
    internal string InteractiveWidth { get; internal set; }
    internal double InteractiveWidthValue { get; internal set; }
    internal int Columns { get; internal set; }
    internal string ColumnSpacing { get; internal set; }
    internal double ColumnSpacingValue { get; internal set; }
    internal ReportSize ColumnSpacingForRendering { get; internal set; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.InstancePath { get; }
    public Style StyleClass { get; public set; }
    public ObjectType ObjectType { get; }
    public string Name { get; }
    private static Page();
    internal PageSection get_PageHeader();
    internal void set_PageHeader(PageSection value);
    internal bool get_PageHeaderEvaluation();
    internal PageSection get_PageFooter();
    internal void set_PageFooter(PageSection value);
    internal bool get_PageFooterEvaluation();
    internal double GetPageSectionWidth(double width);
    internal string get_PageHeight();
    internal void set_PageHeight(string value);
    internal double get_PageHeightValue();
    internal void set_PageHeightValue(double value);
    internal string get_PageWidth();
    internal void set_PageWidth(string value);
    internal double get_PageWidthValue();
    internal void set_PageWidthValue(double value);
    internal string get_LeftMargin();
    internal void set_LeftMargin(string value);
    internal double get_LeftMarginValue();
    internal void set_LeftMarginValue(double value);
    internal string get_RightMargin();
    internal void set_RightMargin(string value);
    internal double get_RightMarginValue();
    internal void set_RightMarginValue(double value);
    internal string get_TopMargin();
    internal void set_TopMargin(string value);
    internal double get_TopMarginValue();
    internal void set_TopMarginValue(double value);
    internal string get_BottomMargin();
    internal void set_BottomMargin(string value);
    internal double get_BottomMarginValue();
    internal void set_BottomMarginValue(double value);
    internal ReportSize get_PageHeightForRendering();
    internal void set_PageHeightForRendering(ReportSize value);
    internal ReportSize get_PageWidthForRendering();
    internal void set_PageWidthForRendering(ReportSize value);
    internal ReportSize get_LeftMarginForRendering();
    internal void set_LeftMarginForRendering(ReportSize value);
    internal ReportSize get_RightMarginForRendering();
    internal void set_RightMarginForRendering(ReportSize value);
    internal ReportSize get_TopMarginForRendering();
    internal void set_TopMarginForRendering(ReportSize value);
    internal ReportSize get_BottomMarginForRendering();
    internal void set_BottomMarginForRendering(ReportSize value);
    internal string get_InteractiveHeight();
    internal void set_InteractiveHeight(string value);
    internal double get_InteractiveHeightValue();
    internal void set_InteractiveHeightValue(double value);
    internal string get_InteractiveWidth();
    internal void set_InteractiveWidth(string value);
    internal double get_InteractiveWidthValue();
    internal void set_InteractiveWidthValue(double value);
    internal int get_Columns();
    internal void set_Columns(int value);
    internal string get_ColumnSpacing();
    internal void set_ColumnSpacing(string value);
    internal double get_ColumnSpacingValue();
    internal void set_ColumnSpacingValue(double value);
    internal ReportSize get_ColumnSpacingForRendering();
    internal void set_ColumnSpacingForRendering(ReportSize value);
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_InstancePath();
    public sealed virtual Style get_StyleClass();
    public void set_StyleClass(Style value);
    public sealed virtual ObjectType get_ObjectType();
    public sealed virtual string get_Name();
    internal void Initialize(InitializationContext context);
    internal void PageHeaderFooterInitialize(InitializationContext context, List`1<DataAggregateInfo> m_pageAggregates);
    internal void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.PageBreakStates : Enum {
    public int value__;
    public static PageBreakStates Unknown;
    public static PageBreakStates CanIgnore;
    public static PageBreakStates CannotIgnore;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.PageSection : ReportItem {
    private bool m_printOnFirstPage;
    private bool m_printOnLastPage;
    private ReportItemCollection m_reportItems;
    private bool m_postProcessEvaluate;
    private bool m_isHeader;
    private StyleExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal bool IsHeader { get; internal set; }
    internal bool PrintOnFirstPage { get; internal set; }
    internal bool PrintOnLastPage { get; internal set; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal bool PostProcessEvaluate { get; internal set; }
    internal PageSection(bool isHeader, int id, int idForReportItems, Report report);
    internal PageSection(ReportItem parent);
    private static PageSection();
    internal virtual ObjectType get_ObjectType();
    internal bool get_IsHeader();
    internal void set_IsHeader(bool value);
    internal bool get_PrintOnFirstPage();
    internal void set_PrintOnFirstPage(bool value);
    internal bool get_PrintOnLastPage();
    internal void set_PrintOnLastPage(bool value);
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal bool get_PostProcessEvaluate();
    internal void set_PostProcessEvaluate(bool value);
    internal virtual bool Initialize(InitializationContext context);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Pair`2 : ValueType {
    internal T First;
    internal U Second;
    internal Pair`2(T first, U second);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Paragraph : IDOwner {
    private List`1<TextRun> m_textRuns;
    private Style m_styleClass;
    private ExpressionInfo m_leftIndent;
    private ExpressionInfo m_rightIndent;
    private ExpressionInfo m_hangingIndent;
    private ExpressionInfo m_spaceBefore;
    private ExpressionInfo m_spaceAfter;
    private ExpressionInfo m_listLevel;
    private ExpressionInfo m_listStyle;
    private int m_indexInCollection;
    private int m_exprHostID;
    private bool m_textRunValueReferenced;
    [ReferenceAttribute]
private TextBox m_textBox;
    private string m_idString;
    private ParagraphImpl m_paragraphImpl;
    private string m_name;
    private ParagraphExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal string IDString { get; }
    internal List`1<TextRun> TextRuns { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal ExpressionInfo LeftIndent { get; internal set; }
    internal ExpressionInfo RightIndent { get; internal set; }
    internal ExpressionInfo HangingIndent { get; internal set; }
    internal ExpressionInfo SpaceBefore { get; internal set; }
    internal ExpressionInfo SpaceAfter { get; internal set; }
    internal ExpressionInfo ListStyle { get; internal set; }
    internal ExpressionInfo ListLevel { get; internal set; }
    internal int IndexInCollection { get; internal set; }
    internal TextBox TextBox { get; internal set; }
    internal bool TextRunValueReferenced { get; internal set; }
    internal bool IsSimple { get; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.InstancePath { get; }
    private Style Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.StyleClass { get; }
    public ObjectType ObjectType { get; }
    public string Name { get; }
    internal ParagraphExprHost ExprHost { get; }
    internal Paragraph(TextBox textbox, int index, int id);
    private static Paragraph();
    internal string get_IDString();
    internal List`1<TextRun> get_TextRuns();
    internal void set_TextRuns(List`1<TextRun> value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal ExpressionInfo get_LeftIndent();
    internal void set_LeftIndent(ExpressionInfo value);
    internal ExpressionInfo get_RightIndent();
    internal void set_RightIndent(ExpressionInfo value);
    internal ExpressionInfo get_HangingIndent();
    internal void set_HangingIndent(ExpressionInfo value);
    internal ExpressionInfo get_SpaceBefore();
    internal void set_SpaceBefore(ExpressionInfo value);
    internal ExpressionInfo get_SpaceAfter();
    internal void set_SpaceAfter(ExpressionInfo value);
    internal ExpressionInfo get_ListStyle();
    internal void set_ListStyle(ExpressionInfo value);
    internal ExpressionInfo get_ListLevel();
    internal void set_ListLevel(ExpressionInfo value);
    internal int get_IndexInCollection();
    internal void set_IndexInCollection(int value);
    internal TextBox get_TextBox();
    internal void set_TextBox(TextBox value);
    internal bool get_TextRunValueReferenced();
    internal void set_TextRunValueReferenced(bool value);
    internal bool get_IsSimple();
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_InstancePath();
    private sealed virtual override Style Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_StyleClass();
    public sealed virtual ObjectType get_ObjectType();
    public sealed virtual string get_Name();
    internal ParagraphExprHost get_ExprHost();
    internal bool Initialize(InitializationContext context, Boolean& aHasExpressionBasedValue);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal void SetExprHost(TextBoxExprHost textBoxExprHost, ObjectModelImpl reportObjectModel);
    internal string EvaluateSpaceAfter(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal string EvaluateSpaceBefore(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal string EvaluateListStyle(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal Nullable`1<int> EvaluateListLevel(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal string EvaluateLeftIndent(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal string EvaluateRightIndent(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal string EvaluateHangingIndent(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal ParagraphImpl GetParagraphImpl(OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ParagraphFilteredStyle : Style {
    internal ParagraphFilteredStyle(Style style);
    internal virtual bool GetAttributeInfo(string styleAttributeName, AttributeInfo& styleAttribute);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDataSource : object {
    private int m_dataSourceIndex;
    private int m_dataSetIndex;
    private int m_valueFieldIndex;
    private int m_labelFieldIndex;
    private static Declaration m_Declaration;
    public int DataSourceIndex { get; public set; }
    public int DataSetIndex { get; public set; }
    public int ValueFieldIndex { get; public set; }
    public int LabelFieldIndex { get; public set; }
    internal ParameterDataSource(int dataSourceIndex, int dataSetIndex);
    private static ParameterDataSource();
    public sealed virtual int get_DataSourceIndex();
    public void set_DataSourceIndex(int value);
    public sealed virtual int get_DataSetIndex();
    public void set_DataSetIndex(int value);
    public sealed virtual int get_ValueFieldIndex();
    public void set_ValueFieldIndex(int value);
    public sealed virtual int get_LabelFieldIndex();
    public void set_LabelFieldIndex(int value);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ParameterDef : ParameterBase {
    private ParameterDataSource m_validValuesDataSource;
    private List`1<ExpressionInfo> m_validValuesValueExpressions;
    private List`1<ExpressionInfo> m_validValuesLabelExpressions;
    private ParameterDataSource m_defaultDataSource;
    private List`1<ExpressionInfo> m_defaultExpressions;
    [ReferenceAttribute]
private List`1<ParameterDef> m_dependencyList;
    private int m_exprHostID;
    private ExpressionInfo m_prompt;
    private int m_referenceId;
    private ReportParamExprHost m_exprHost;
    private static Declaration m_Declaration;
    private int Microsoft.ReportingServices.ReportProcessing.IParameterDef.DefaultValuesExpressionCount { get; }
    private int Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidValuesValueExpressionCount { get; }
    private int Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidValuesLabelExpressionCount { get; }
    private string Microsoft.ReportingServices.ReportProcessing.IParameterDef.Name { get; }
    private DataType Microsoft.ReportingServices.ReportProcessing.IParameterDef.DataType { get; }
    private bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.MultiValue { get; }
    private IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.DefaultDataSource { get; }
    private IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidValuesDataSource { get; }
    public string Prompt { get; public set; }
    public ExpressionInfo PromptExpression { get; public set; }
    internal List`1<ExpressionInfo> DefaultExpressions { get; internal set; }
    internal ParameterDataSource ValidValuesDataSource { get; internal set; }
    internal List`1<ExpressionInfo> ValidValuesValueExpressions { get; internal set; }
    internal List`1<ExpressionInfo> ValidValuesLabelExpressions { get; internal set; }
    internal ParameterDataSource DefaultDataSource { get; internal set; }
    internal List`1<ParameterDef> DependencyList { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal ReportParamExprHost ExprHost { get; }
    public int ID { get; }
    internal ParameterDef(int referenceId);
    private static ParameterDef();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_DefaultValuesExpressionCount();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_ValidValuesValueExpressionCount();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_ValidValuesLabelExpressionCount();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasDefaultValuesExpressions();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasValidValuesLabelExpressions();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasValidValuesValueExpressions();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasDefaultValuesDataSource();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasValidValuesDataSource();
    private sealed virtual override string Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_Name();
    private sealed virtual override DataType Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_DataType();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidateValueForNull(object newValue, ErrorContext errorContext, string parameterValueProperty);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidateValueForBlank(object newValue, ErrorContext errorContext, string parameterValueProperty);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_MultiValue();
    private sealed virtual override IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_DefaultDataSource();
    private sealed virtual override IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_ValidValuesDataSource();
    public virtual string get_Prompt();
    public virtual void set_Prompt(string value);
    public ExpressionInfo get_PromptExpression();
    public void set_PromptExpression(ExpressionInfo value);
    internal List`1<ExpressionInfo> get_DefaultExpressions();
    internal void set_DefaultExpressions(List`1<ExpressionInfo> value);
    internal ParameterDataSource get_ValidValuesDataSource();
    internal void set_ValidValuesDataSource(ParameterDataSource value);
    internal List`1<ExpressionInfo> get_ValidValuesValueExpressions();
    internal void set_ValidValuesValueExpressions(List`1<ExpressionInfo> value);
    internal List`1<ExpressionInfo> get_ValidValuesLabelExpressions();
    internal void set_ValidValuesLabelExpressions(List`1<ExpressionInfo> value);
    internal ParameterDataSource get_DefaultDataSource();
    internal void set_DefaultDataSource(ParameterDataSource value);
    internal List`1<ParameterDef> get_DependencyList();
    internal void set_DependencyList(List`1<ParameterDef> value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal ReportParamExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(ReportExprHost reportExprHost, OnDemandObjectModel reportObjectModel);
    internal void Parse(string name, List`1<string> defaultValues, string type, string nullable, ExpressionInfo prompt, string promptUser, string allowBlank, string multiValue, string usedInQuery, bool hidden, ErrorContext errorContext, CultureInfo language);
    private void ValidateExpressionDataTypes(List`1<ExpressionInfo> expressions, ErrorContext errorContext, string paramName, string memberName, bool fromValidValues, CultureInfo language);
    [SkipMemberStaticValidationAttribute("401")]
private static Declaration GetDeclaration();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual int get_ID();
}
[SkipStaticValidationAttribute]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ParameterImplWrapper : object {
    private ParameterImpl m_odpParameter;
    private static Declaration m_Declaration;
    internal ParameterImpl WrappedParameterImpl { get; internal set; }
    internal ParameterImplWrapper(ParameterImpl odpParameter);
    private static ParameterImplWrapper();
    internal ParameterImpl get_WrappedParameterImpl();
    internal void set_WrappedParameterImpl(ParameterImpl value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
[SkipStaticValidationAttribute]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ParametersImplWrapper : object {
    private ParametersImpl m_opdParameters;
    private int m_hash;
    private static Declaration m_Declaration;
    internal ParametersImpl WrappedParametersImpl { get; }
    internal ParametersImplWrapper(ParametersImpl odpParameters);
    private static ParametersImplWrapper();
    internal ParametersImpl get_WrappedParametersImpl();
    internal bool ValuesAreEqual(ParametersImplWrapper obj);
    internal int GetValuesHashCode();
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ParameterValue : object {
    private string m_name;
    private ExpressionInfo m_value;
    private ExpressionInfo m_omit;
    private int m_exprHostID;
    private DataType m_constantDataType;
    private ParamExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal string Name { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal DataType DataType { get; internal set; }
    internal ExpressionInfo Omit { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal ParamExprHost ExprHost { get; internal set; }
    private static ParameterValue();
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal DataType get_DataType();
    internal void set_DataType(DataType value);
    internal ExpressionInfo get_Omit();
    internal void set_Omit(ExpressionInfo value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal ParamExprHost get_ExprHost();
    internal void set_ExprHost(ParamExprHost value);
    internal void Initialize(InitializationContext context, bool queryParam);
    internal void SetExprHost(IList`1<ParamExprHost> paramExprHosts, ObjectModelImpl reportObjectModel);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ArrayOfReferencesAttribute : Attribute {
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ChunkManager : object {
    internal static string Definition;
    internal static string DocumentMap;
    internal static string ShowHideInfo;
    internal static string Bookmarks;
    internal static string Drillthrough;
    internal static string QuickFind;
    internal static string SortFilterEventInfo;
    internal static string DataChunkPrefix;
    internal static string GroupTree;
    internal static string Metadata;
    internal static char Delimiter;
    internal static string GenerateDataChunkName(OnDemandProcessingContext context, int dataSetID, bool isInSubReport, bool isShareable);
    private static string GenerateDataChunkName(DataSetInstance dataSetInstance, OnDemandProcessingContext context, bool writeOperation);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.CreateDictionary`1 : MulticastDelegate {
    public CreateDictionary`1(object object, IntPtr method);
    public virtual T Invoke(int dictionaryLength);
    public virtual IAsyncResult BeginInvoke(int dictionaryLength, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.DataReaderRIFObjectCreator : ValueType {
    public sealed virtual IPersistable CreateRIFObject(ObjectType objectType, IntermediateFormatReader& context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.Declaration : object {
    private List`1<MemberInfo> m_memberInfoList;
    private ObjectType m_type;
    private ObjectType m_baseType;
    private Pair`2[] m_usableMembers;
    private int m_readWriteMemberInfoCount;
    private bool m_hasSkippedMembers;
    internal List`1<MemberInfo> MemberInfoList { get; }
    internal int ReadWriteMemberInfoCount { get; }
    internal ObjectType ObjectType { get; }
    internal ObjectType BaseObjectType { get; }
    internal bool RegisteredCurrentDeclaration { get; }
    internal bool HasSkippedMembers { get; }
    internal Declaration(ObjectType type, ObjectType baseType, List`1<MemberInfo> memberInfoList);
    internal List`1<MemberInfo> get_MemberInfoList();
    internal int get_ReadWriteMemberInfoCount();
    internal ObjectType get_ObjectType();
    internal ObjectType get_BaseObjectType();
    internal bool get_RegisteredCurrentDeclaration();
    internal bool IsMemberSkipped(int index);
    internal int MembersToSkip(int index);
    internal bool get_HasSkippedMembers();
    internal void RegisterCurrentDeclaration(Declaration currentDeclaration);
    private bool Contains(MemberInfo otherMember);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.EqualityComparers : object {
    internal static IEqualityComparer`1<ObjectType> ObjectTypeComparerInstance;
    internal static Int32EqualityComparer Int32ComparerInstance;
    internal static ReversedInt32EqualityComparer ReversedInt32ComparerInstance;
    internal static Int64EqualityComparer Int64ComparerInstance;
    internal static IEqualityComparer`1<string> StringComparerInstance;
    private static EqualityComparers();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.GlobalIDOwnerCollection : object {
    private int m_currentID;
    private Dictionary`2<int, IGloballyReferenceable> m_globallyReferenceableItems;
    internal int GetGlobalID();
    internal void Add(IGloballyReferenceable globallyReferenceableItem);
    internal bool TryGetValue(int refID, IGloballyReferenceable& referenceableItem);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.GroupTreeRIFObjectCreator : ValueType {
    public sealed virtual IPersistable CreateRIFObject(ObjectType objectType, IntermediateFormatReader& context);
    public sealed virtual bool TryCreateObject(ObjectType objectType, IPersistable& persistObj);
    public sealed virtual List`1<Declaration> GetDeclarations();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.HashtableOfReferencesAttribute : Attribute {
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IGlobalIDOwner {
    public int GlobalID { get; public set; }
    public abstract virtual int get_GlobalID();
    public abstract virtual void set_GlobalID(int value);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IGloballyReferenceable {
    public abstract virtual ObjectType GetObjectType();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.INameObjectCollection {
    public int Count { get; }
    public abstract virtual void Add(string key, object value);
    public abstract virtual string GetKey(int index);
    public abstract virtual object GetValue(int index);
    public abstract virtual int get_Count();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IncompatibleFormatVersionException : Exception {
    internal IncompatibleFormatVersionException(ObjectType declaredType, long streamPos);
    private IncompatibleFormatVersionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IntermediateFormatReader : ValueType {
    private int m_currentMemberIndex;
    private Declaration m_currentPersistedDeclaration;
    private Dictionary`2<ObjectType, Declaration> m_readDecls;
    private PersistenceBinaryReader m_reader;
    private Dictionary`2<IPersistable, Dictionary`2<ObjectType, List`1<MemberReference>>> m_memberReferencesCollection;
    private Dictionary`2<int, IReferenceable> m_referenceableItems;
    private GlobalIDOwnerCollection m_globalIDOwners;
    private IRIFObjectCreator m_rifObjectCreator;
    private PersistenceHelper m_persistenceHelper;
    private IntermediateFormatVersion m_version;
    private long m_objectStartPosition;
    private PersistenceFlags m_persistenceFlags;
    private int m_currentMemberInfoCount;
    private MemberInfo m_currentMember;
    private BinaryFormatter m_binaryFormatter;
    internal bool CanSeek { get; }
    internal bool EOS { get; }
    internal IntermediateFormatVersion IntermediateFormatVersion { get; }
    internal MemberInfo CurrentMember { get; }
    internal PersistenceHelper PersistenceHelper { get; }
    internal long ObjectStartPosition { get; }
    internal bool HasReferences { get; }
    internal GlobalIDOwnerCollection GlobalIDOwners { get; }
    internal IntermediateFormatReader(Stream str, IRIFObjectCreator rifObjectCreator);
    internal IntermediateFormatReader(Stream str, IRIFObjectCreator rifObjectCreator, PersistenceHelper persistenceHelper);
    internal IntermediateFormatReader(Stream str, IRIFObjectCreator rifObjectCreator, GlobalIDOwnerCollection globalIDOwnersFromOtherStream);
    internal IntermediateFormatReader(Stream str, IRIFObjectCreator rifObjectCreator, GlobalIDOwnerCollection globalIDOwnersFromOtherStream, PersistenceHelper persistenceHelper);
    internal IntermediateFormatReader(Stream str, IRIFObjectCreator rifObjectCreator, GlobalIDOwnerCollection globalIDOwnersFromOtherStream, PersistenceHelper persistenceHelper, List`1<Declaration> declarations, IntermediateFormatVersion version, PersistenceFlags flags);
    private IntermediateFormatReader(Stream str, IRIFObjectCreator rifObjectCreator, GlobalIDOwnerCollection globalIDOwnersFromOtherStream, PersistenceHelper persistenceHelper, List`1<Declaration> declarations, IntermediateFormatVersion version, PersistenceFlags flags, bool initFromStream);
    internal bool get_CanSeek();
    internal bool get_EOS();
    internal IntermediateFormatVersion get_IntermediateFormatVersion();
    internal MemberInfo get_CurrentMember();
    internal PersistenceHelper get_PersistenceHelper();
    internal long get_ObjectStartPosition();
    internal bool get_HasReferences();
    internal GlobalIDOwnerCollection get_GlobalIDOwners();
    private void ReadDeclarations();
    internal void RegisterDeclaration(Declaration declaration);
    internal bool NextMember();
    internal void ResolveReferences();
    internal void ClearReferences();
    private void SkipMembers(int toSkip);
    private void SkipPrimitive(Token token);
    private void SkipArrayOfPrimitives();
    private void SkipListOfPrimitives();
    private void SkipListOrArrayOfReferences();
    private void SkipListOrArrayOfRIFObjects();
    private void SkipRIFObject();
    private void __SkipRIFObjectPrivate(ObjectType objectType);
    private void SkipStringRIFObjectDictionary();
    private void SkipInt32RIFObjectDictionary();
    internal void SkipInt32PrimitiveListHashtable();
    internal void SkipStringObjectHashtable();
    internal void SkipObjectHashtableHashtable();
    internal void Seek(long newPosition);
    internal void Seek(long newPosition, SeekOrigin seekOrigin);
    internal IPersistable ReadRIFObject();
    internal IPersistable ReadRIFObject(IPersistable persitObj);
    internal T ReadRIFObject();
    private IPersistable ReadRIFObject(bool verify);
    private void AddReferenceableItem(IPersistable persistObj);
    private ObjectType ReadRIFObjectStart();
    private void ReadRIFObjectFinish(ObjectType persistedType, IPersistable persitObj, bool verify);
    internal Dictionary`2<string, TValue> ReadStringRIFObjectDictionary();
    internal Dictionary`2<int, TValue> ReadInt32RIFObjectDictionary();
    internal IDictionary ReadInt32RIFObjectDictionary(CreateDictionary`1<T> dictionaryCreator);
    internal T ReadInt32PrimitiveListHashtable();
    internal T ReadStringInt32Hashtable();
    internal T ReadByteVariantHashtable();
    internal T ReadStringStringHashtable();
    internal T ReadStringObjectHashtable();
    internal T ReadStringRIFObjectHashtable();
    internal Dictionary`2<string, List`1<string>> ReadStringListOfStringDictionary();
    internal T ReadStringObjectHashtable(CreateDictionary`1<T> createDictionary, Predicate`1<string> allowKey, Converter`2<string, string> processName, Converter`2<object, object> processValue);
    internal Hashtable ReadObjectHashtableHashtable();
    internal T ReadNameObjectCollection();
    internal Nullable`1<T> ReadNullable();
    internal Dictionary`2<T, string> ReadRIFObjectStringHashtable();
    internal Dictionary`2<T, string> ReadRIFObjectStringHashtable(Dictionary`2<T, string> dictionary);
    internal Hashtable ReadVariantVariantHashtable();
    internal Dictionary`2<List`1<object>, object> ReadVariantListVariantDictionary();
    internal Dictionary`2<string, List`1<object>> ReadStringVariantListDictionary();
    internal Dictionary`2<string, Boolean[]> ReadStringBoolArrayDictionary();
    internal Hashtable ReadInt32StringHashtable();
    internal T ReadVariantRIFObjectDictionary(CreateDictionary`1<T> creator);
    internal T ReadVariantListOfRIFObjectDictionary(CreateDictionary`1<T> creator);
    internal T ReadListOfRIFObjects();
    internal void ReadListOfRIFObjects(IList list);
    internal void ReadListOfRIFObjects(Action`1<T> addRIFObject);
    internal List`1<T> ReadGenericListOfRIFObjects();
    internal List`1<T> ReadGenericListOfRIFObjectsUsingNew();
    internal List`1<T> ReadGenericListOfRIFObjects(Action`1<T> action);
    internal List`1<List`1<T>> ReadListOfListsOfRIFObjects();
    internal List`1<T[]> ReadListOfRIFObjectArrays();
    internal List`1<T> ReadListOfPrimitives();
    internal List`1<List`1[]> ReadListOfArrayOfListsOfPrimitives();
    internal T ReadListOfVariant();
    internal List`1[] ReadArrayOfListsOfPrimitives();
    internal List`1[] ReadArrayOfRIFObjectLists();
    internal T[] ReadArrayOfRIFObjects();
    private T[] ReadArrayOfRIFObjects(bool verify);
    internal T[][0...,0...] Read2DArrayOfArrayOfRIFObjects();
    internal T[0...,0...] Read2DArrayOfRIFObjects();
    internal T[] ReadArrayOfRIFObjects(Converter`2<RIFT, T> convertRIFObject);
    internal String[] ReadStringArray();
    internal Object[] ReadVariantArray();
    internal object ReadSerializable();
    private object ReadISerializable();
    internal object ReadVariant();
    private object ReadVariant(Token token);
    internal Int32[] ReadInt32Array();
    internal Int64[] ReadInt64Array();
    internal Single[] ReadSingleArray();
    internal Char[] ReadCharArray();
    internal Byte[] ReadByteArray();
    internal Boolean[] ReadBooleanArray();
    internal Double[] ReadDoubleArray();
    internal byte ReadByte();
    internal byte ReadByte(bool verify);
    internal sbyte ReadSByte();
    internal char ReadChar();
    internal short ReadInt16();
    internal ushort ReadUInt16();
    internal int ReadInt32();
    private int ReadInt32(bool verify);
    internal UInt32 ReadUInt32();
    internal long ReadInt64();
    internal ulong ReadUInt64();
    internal float ReadSingle();
    internal double ReadDouble();
    internal decimal ReadDecimal();
    internal string ReadString();
    private string ReadString(bool verify);
    internal bool ReadBoolean();
    internal DateTime ReadDateTime();
    internal DateTime ReadDateTimeWithKind();
    internal DateTimeOffset ReadDateTimeOffset();
    internal TimeSpan ReadTimeSpan();
    internal int Read7BitEncodedInt();
    internal int ReadEnum();
    internal Guid ReadGuid();
    internal CultureInfo ReadCultureInfo();
    internal List`1<T> ReadGenericListOfReferences(IPersistable obj);
    internal int ReadListOfReferencesNoResolution(IPersistable obj);
    internal T ReadListOfReferences(IPersistable obj);
    internal T ReadReference(IPersistable obj);
    private T ReadReference(IPersistable obj, bool delayReferenceResolution);
    internal List`1<T> ReadGenericListOfGloablReferences();
    internal T ReadListOfGloablReferences();
    internal T ReadGlobalReference();
    internal IntermediateFormatVersion ReadIntermediateFormatVersion();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IntermediateFormatVersion : object {
    private int m_major;
    private int m_minor;
    private int m_build;
    private static Declaration m_Declaration;
    private static IntermediateFormatVersion m_current;
    private static IntermediateFormatVersion m_ctpRefresh;
    internal int Major { get; internal set; }
    internal int Minor { get; internal set; }
    internal int Build { get; internal set; }
    internal bool IsOldVersion { get; }
    internal static IntermediateFormatVersion Current { get; }
    internal static IntermediateFormatVersion CTPRefresh { get; }
    internal IntermediateFormatVersion(int major, int minor, int build);
    private static IntermediateFormatVersion();
    internal int get_Major();
    internal void set_Major(int value);
    internal int get_Minor();
    internal void set_Minor(int value);
    internal int get_Build();
    internal void set_Build(int value);
    internal bool get_IsOldVersion();
    internal static IntermediateFormatVersion get_Current();
    internal static IntermediateFormatVersion get_CTPRefresh();
    private static int EncodeFileVersion(FileVersionInfo fileVersion);
    internal static void DecodeFileVersion(int version, Int32& major, Int32& minor, Int32& build, Int32& buildminor);
    internal void SetCurrent();
    internal int CompareTo(int major, int minor, int build);
    internal int CompareTo(IntermediateFormatVersion version);
    private int Compare(int x, int y);
    public virtual string ToString();
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IntermediateFormatWriter : ValueType {
    private int m_currentMemberIndex;
    private Declaration m_currentDeclaration;
    private Dictionary`2<ObjectType, Declaration> m_writtenDecls;
    private PersistenceBinaryWriter m_writer;
    private PersistenceHelper m_persistenceContext;
    private bool m_isSeekable;
    private int m_lastMemberInfoIndex;
    private MemberInfo m_currentMember;
    private BinaryFormatter m_binaryFormatter;
    internal MemberInfo CurrentMember { get; }
    internal PersistenceHelper PersistenceHelper { get; }
    internal IntermediateFormatWriter(Stream str);
    internal IntermediateFormatWriter(Stream str, PersistenceHelper persistenceContext);
    internal IntermediateFormatWriter(Stream str, List`1<Declaration> declarations);
    internal IntermediateFormatWriter(Stream str, List`1<Declaration> declarations, PersistenceHelper persistenceContext);
    internal IntermediateFormatWriter(Stream str, long startOffset, List`1<Declaration> declarations, PersistenceHelper persistenceContext);
    internal MemberInfo get_CurrentMember();
    internal PersistenceHelper get_PersistenceHelper();
    private void WriteDeclarations(List`1<Declaration> declarations);
    internal void RegisterDeclaration(Declaration declaration);
    internal bool NextMember();
    internal void Write(IPersistable persistableObj);
    private void Write(IPersistable persistableObj, bool verify);
    internal void WriteNameObjectCollection(INameObjectCollection collection);
    internal void WriteStringRIFObjectDictionary(Dictionary`2<string, TVal> dictionary);
    internal void WriteStringListOfStringDictionary(Dictionary`2<string, List`1<string>> dictionary);
    internal void WriteInt32RIFObjectDictionary(Dictionary`2<int, TVal> dictionary);
    internal void WriteInt32RIFObjectDictionary(IDictionary dictionary);
    internal void WriteStringRIFObjectHashtable(Hashtable hashtable);
    internal void WriteInt32PrimitiveListHashtable(Hashtable hashtable);
    internal void WriteStringObjectHashtable(IDictionary dictionary);
    internal void WriteStringRIFObjectHashtable(IDictionary dictionary);
    internal void WriteStringInt32Hashtable(IDictionary dictionary);
    internal void WriteStringStringHashtable(IDictionary dictionary);
    internal void WriteObjectHashtableHashtable(Hashtable hashtable);
    internal void WriteRIFObjectStringHashtable(IDictionary hashtable);
    internal void WriteVariantVariantHashtable(Hashtable hashtable);
    internal void WriteVariantListVariantDictionary(Dictionary`2<List`1<object>, object> dictionary);
    internal void WriteStringVariantListDictionary(Dictionary`2<string, List`1<object>> dictionary);
    internal void WriteStringBoolArrayDictionary(Dictionary`2<string, Boolean[]> dictionary);
    internal void WriteInt32StringHashtable(Hashtable hashtable);
    internal void WriteByteVariantHashtable(IDictionary dictionary);
    internal void WriteVariantRifObjectDictionary(IDictionary dictionary);
    internal void WriteVariantListOfRifObjectDictionary(IDictionary dictionary);
    internal void WriteListOfReferences(IList rifList);
    internal void WriteListOfGlobalReferences(IList rifList);
    internal void Write(List`1<T> rifList);
    internal void WriteRIFList(IList`1<T> rifList);
    internal void Write(ArrayList rifObjectList);
    internal void Write(List`1<List`1<T>> rifObjectLists);
    internal void Write(List`1<T[]> rifObjectArrays);
    internal void WriteListOfVariant(IList list);
    internal void WriteArrayListOfPrimitives(ArrayList list);
    internal void WriteListOfPrimitives(List`1<T> list);
    private void WriteListOfPrimitives(List`1<T> list, bool verify);
    internal void WriteArrayOfListsOfPrimitives(List`1[] arrayOfLists);
    private void WriteArrayOfListsOfPrimitives(List`1[] arrayOfLists, bool validate);
    internal void WriteListOfArrayOfListsOfPrimitives(List`1<List`1[]> outerList);
    internal void Write(List`1[] rifObjectListArray);
    internal void Write(String[] strings);
    internal void Write(Object[] array);
    internal void WriteVariantOrPersistableArray(Object[] array);
    internal void Write(IPersistable[] array);
    internal void Write(IPersistable[][0...,0...] array);
    internal void Write(IPersistable[0...,0...] array);
    internal void Write(Single[] array);
    internal void Write(Int32[] array);
    internal void Write(Int64[] array);
    internal void Write(Char[] array);
    internal void Write(Byte[] array);
    internal void Write(Boolean[] array);
    internal void Write(Double[] array);
    internal void Write(DateTime dateTime);
    internal void Write(DateTimeOffset dateTimeOffset);
    internal void Write(TimeSpan timeSpan);
    internal void Write(Guid guid);
    internal void Write(string value);
    internal void Write(bool value);
    internal void Write(short value);
    internal void Write(int value);
    internal void Write(long value);
    internal void Write(ushort value);
    internal void Write(UInt32 value);
    internal void Write(ulong value);
    internal void Write(char value);
    internal void Write(byte value);
    internal void Write(sbyte value);
    internal void Write(float value);
    internal void Write(double value);
    internal void Write(decimal value);
    internal void Write7BitEncodedInt(int value);
    internal void WriteEnum(int value);
    internal void WriteNull();
    internal void Write(CultureInfo threadCulture);
    private void WriteReferenceInList(IReferenceable referenceableItem);
    internal void WriteReference(IReferenceable referenceableItem);
    internal void WriteReferenceID(int referenceID);
    private void WriteGlobalReferenceInList(IGloballyReferenceable globalReference);
    internal void WriteGlobalReference(IGloballyReferenceable globalReference);
    internal void WriteGlobalReferenceID(int globalReferenceID);
    internal void Write(ObjectType type);
    internal bool CanWrite(object obj);
    internal bool TryWriteSerializable(object obj);
    internal void WriteVariantOrPersistable(object obj);
    internal void Write(object obj);
    internal bool TryWrite(object obj);
    private bool Write(object obj, bool verify, bool assertOnInvalidType);
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable {
    public abstract virtual void Serialize(IntermediateFormatWriter writer);
    public abstract virtual void Deserialize(IntermediateFormatReader reader);
    public abstract virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public abstract virtual ObjectType GetObjectType();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IReferenceable {
    public int ID { get; }
    public abstract virtual int get_ID();
    public abstract virtual ObjectType GetObjectType();
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IRIFObjectCreator {
    public abstract virtual IPersistable CreateRIFObject(ObjectType objectType, IntermediateFormatReader& context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.MemberInfo : object {
    private MemberName m_name;
    private Token m_token;
    private ObjectType m_type;
    private ObjectType m_containedType;
    internal MemberName MemberName { get; }
    internal Token Token { get; }
    internal ObjectType ObjectType { get; }
    internal ObjectType ContainedType { get; }
    internal bool ReadOnly { get; }
    internal MemberInfo(MemberName name, Token token);
    internal MemberInfo(MemberName name, ObjectType type);
    internal MemberInfo(MemberName name, ObjectType type, ObjectType containedType);
    internal MemberInfo(MemberName name, ObjectType type, Token token);
    internal MemberInfo(MemberName name, ObjectType type, Token token, ObjectType containedType);
    internal MemberName get_MemberName();
    internal Token get_Token();
    internal ObjectType get_ObjectType();
    internal ObjectType get_ContainedType();
    internal virtual bool get_ReadOnly();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal bool Equals(MemberInfo otherMember);
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.MemberName : Enum {
    public int value__;
    public static MemberName FieldValueSerializable;
    public static MemberName ID;
    public static MemberName ReaderExtensionsSupported;
    public static MemberName FieldPropertyNames;
    public static MemberName CompareOptions;
    public static MemberName RecordFields;
    public static MemberName IsAggregateRow;
    public static MemberName AggregationFieldCount;
    public static MemberName PropertyNames;
    public static MemberName FieldStatus;
    public static MemberName FieldValue;
    public static MemberName IsAggregateField;
    public static MemberName FieldPropertyValues;
    public static MemberName CellAggregates;
    public static MemberName CellPostSortAggregates;
    public static MemberName CellRunningValues;
    public static MemberName DataSetIndexInCollection;
    public static MemberName RowMembers;
    public static MemberName ColumnMembers;
    public static MemberName Cells;
    public static MemberName MemberInstanceIndexWithinScopeLevel;
    public static MemberName Children;
    public static MemberName Variable;
    public static MemberName Variables;
    public static MemberName RecursiveLevel;
    public static MemberName GroupExpressionValues;
    public static MemberName RecordSetSize;
    public static MemberName RewrittenCommandText;
    public static MemberName Fields;
    public static MemberName CaseSensitivity;
    public static MemberName Collation;
    public static MemberName AccentSensitivity;
    public static MemberName KanatypeSensitivity;
    public static MemberName WidthSensitivity;
    public static MemberName LCID;
    public static MemberName TablixProcessingComplete;
    public static MemberName FieldPropertyReaderIndices;
    public static MemberName NoRows;
    public static MemberName Language;
    public static MemberName DataSetInstances;
    public static MemberName FirstRowIndex;
    public static MemberName DataRegionInstances;
    public static MemberName SubReportInstances;
    public static MemberName AggregateValues;
    public static MemberName SubReport;
    public static MemberName ReportInstance;
    public static MemberName DataSetUniqueName;
    public static MemberName ThreadCulture;
    public static MemberName Parameters;
    public static MemberName Status;
    public static MemberName ProcessedWithError;
    public static MemberName LastID;
    public static MemberName UniqueName;
    public static MemberName ReportPath;
    public static MemberName ParametersFromCatalog;
    public static MemberName Name;
    public static MemberName Value;
    public static MemberName DataType;
    public static MemberName AggregateType;
    public static MemberName Expressions;
    public static MemberName DuplicateNames;
    public static MemberName Scope;
    public static MemberName TotalGroupingExpressionCount;
    public static MemberName IsScopedInEvaluationScope;
    public static MemberName IsInOutermostStatic;
    public static MemberName ParentInstanceIndex;
    public static MemberName IsInstanceShared;
    public static MemberName DataChunkNameModifier;
    public static MemberName OdpContext;
    public static MemberName ProcessedPreviousAggregates;
    public static MemberName ReportObjectModel;
    public static MemberName AggregationFieldChecked;
    public static MemberName Properties;
    public static MemberName FieldDef;
    public static MemberName UsedInExpression;
    public static MemberName HierarchyRoot;
    public static MemberName SortHierarchyStruct;
    public static MemberName DataHolder;
    public static MemberName Owner;
    public static MemberName ScopeInstances;
    public static MemberName ScopeValuesList;
    public static MemberName SortTree;
    public static MemberName CurrentScopeIndex;
    public static MemberName ScopeInstanceIndices;
    public static MemberName Tuples;
    public static MemberName IndexInParent;
    public static MemberName List;
    public static MemberName Capacity;
    public static MemberName Child;
    public static MemberName Key;
    public static MemberName HierarchyNode;
    public static MemberName CellLevel;
    public static MemberName RowIndexes;
    public static MemberName ColumnIndexes;
    public static MemberName CellNonCustomAggObjs;
    public static MemberName CellCustomAggObjs;
    public static MemberName CellAggValueList;
    public static MemberName RunningValueValues;
    public static MemberName Innermost;
    public static MemberName FirstRow;
    public static MemberName FirstRowIsAggregate;
    public static MemberName NextCell;
    public static MemberName SortFilterExpressionScopeInfoIndices;
    public static MemberName CellsWithSameScope;
    public static MemberName ReportItemColIndex;
    public static MemberName OuterScope;
    public static MemberName NonCustomAggregates;
    public static MemberName CustomAggregates;
    public static MemberName DataAction;
    public static MemberName OuterDataAction;
    public static MemberName InnerDataAction;
    public static MemberName UserSortTargetInfo;
    public static MemberName NonAggregateMode;
    public static MemberName Aggregator;
    public static MemberName AggregateDef;
    public static MemberName ReportRuntime;
    public static MemberName AggregateResult;
    public static MemberName Updated;
    public static MemberName ExpressionType;
    public static MemberName CurrentTotalType;
    public static MemberName CurrentTotal;
    public static MemberName CurrentCount;
    public static MemberName CompareInfo;
    public static MemberName CurrentMax;
    public static MemberName DistinctValues;
    public static MemberName SumOfXType;
    public static MemberName SumOfX;
    public static MemberName SumOfXSquared;
    public static MemberName Previous;
    public static MemberName StyleClass;
    public static MemberName Top;
    public static MemberName TopValue;
    public static MemberName Left;
    public static MemberName LeftValue;
    public static MemberName Height;
    public static MemberName HeightValue;
    public static MemberName Width;
    public static MemberName WidthValue;
    public static MemberName ZIndex;
    public static MemberName Visibility;
    public static MemberName Label;
    public static MemberName RepeatedSibling;
    public static MemberName Author;
    public static MemberName AutoRefresh;
    public static MemberName EmbeddedImages;
    public static MemberName PageHeader;
    public static MemberName PageFooter;
    public static MemberName ReportItems;
    public static MemberName DataSources;
    public static MemberName PageHeight;
    public static MemberName PageHeightValue;
    public static MemberName PageWidth;
    public static MemberName PageWidthValue;
    public static MemberName LeftMargin;
    public static MemberName LeftMarginValue;
    public static MemberName RightMargin;
    public static MemberName RightMarginValue;
    public static MemberName TopMargin;
    public static MemberName TopMarginValue;
    public static MemberName BottomMargin;
    public static MemberName BottomMarginValue;
    public static MemberName ClassName;
    public static MemberName InstanceName;
    public static MemberName CodeModules;
    public static MemberName CodeClasses;
    public static MemberName Columns;
    public static MemberName ColumnSpacing;
    public static MemberName ColumnSpacingValue;
    public static MemberName PageAggregates;
    public static MemberName CompiledCode;
    public static MemberName MergeOnePass;
    public static MemberName PageMergeOnePass;
    public static MemberName SubReportMergeTransactions;
    public static MemberName NeedPostGroupProcessing;
    public static MemberName HasPostSortAggregates;
    public static MemberName HasReportItemReferences;
    public static MemberName ShowHideType;
    public static MemberName BodyID;
    public static MemberName PrintOnFirstPage;
    public static MemberName PrintOnLastPage;
    public static MemberName PostProcessEvaluate;
    public static MemberName Slanted;
    public static MemberName PageBreakAtEnd;
    public static MemberName PageBreakAtStart;
    public static MemberName HyperLinkURL;
    public static MemberName Source;
    public static MemberName MIMEType;
    public static MemberName Sizing;
    public static MemberName HideDuplicates;
    public static MemberName CanGrow;
    public static MemberName CanShrink;
    public static MemberName IsToggle;
    public static MemberName InitialToggleState;
    public static MemberName MergeTransactions;
    public static MemberName ReportName;
    public static MemberName Description;
    public static MemberName Report;
    public static MemberName StringUri;
    public static MemberName ClassID;
    public static MemberName CodeBase;
    public static MemberName DataSetName;
    public static MemberName KeepTogether;
    public static MemberName RepeatSiblings;
    public static MemberName Grouping;
    public static MemberName Sorting;
    public static MemberName DataRegionDef;
    public static MemberName GroupExpressions;
    public static MemberName GroupLabel;
    public static MemberName SortDirections;
    public static MemberName Aggregates;
    public static MemberName GroupAndSort;
    public static MemberName SortExpressions;
    public static MemberName ColumnCount;
    public static MemberName RowCount;
    public static MemberName InnerRowLevelWithPageBreak;
    public static MemberName GroupsBeforeRowHeaders;
    public static MemberName ProcessingInnerGrouping;
    public static MemberName Size;
    public static MemberName SizeValue;
    public static MemberName Subtotal;
    public static MemberName Level;
    public static MemberName IsColumn;
    public static MemberName Position;
    public static MemberName RunningValues;
    public static MemberName ChartSeriesCollection;
    public static MemberName ChartAreas;
    public static MemberName Titles;
    public static MemberName AxisTitle;
    public static MemberName LegendTitle;
    public static MemberName BorderSkin;
    public static MemberName Title;
    public static MemberName TitleAngle;
    public static MemberName StripWidth;
    public static MemberName StripWidthType;
    public static MemberName CellType;
    public static MemberName Text;
    public static MemberName CellSpan;
    public static MemberName ImageWidth;
    public static MemberName ImageHeight;
    public static MemberName SymbolHeight;
    public static MemberName SymbolWidth;
    public static MemberName Alignment;
    public static MemberName ColumnType;
    public static MemberName ToolTip;
    public static MemberName MinimumWidth;
    public static MemberName MaximumWidth;
    public static MemberName SeriesSymbolWidth;
    public static MemberName SeriesSymbolHeight;
    public static MemberName Header;
    public static MemberName Marker;
    public static MemberName Separator;
    public static MemberName SeparatorColor;
    public static MemberName AllowOutSidePlotArea;
    public static MemberName CalloutBackColor;
    public static MemberName CalloutLineAnchor;
    public static MemberName CalloutLineColor;
    public static MemberName CalloutLineStyle;
    public static MemberName CalloutLineWidth;
    public static MemberName CalloutStyle;
    public static MemberName HideOverlapped;
    public static MemberName MarkerOverlapping;
    public static MemberName MaxMovingDistance;
    public static MemberName MinMovingDistance;
    public static MemberName NoMoveDirections;
    public static MemberName Up;
    public static MemberName Down;
    public static MemberName Right;
    public static MemberName UpLeft;
    public static MemberName UpRight;
    public static MemberName DownLeft;
    public static MemberName DownRight;
    public static MemberName Visible;
    public static MemberName Margin;
    public static MemberName Interval;
    public static MemberName IntervalType;
    public static MemberName IntervalOffset;
    public static MemberName IntervalOffsetType;
    public static MemberName MajorTickMarks;
    public static MemberName MinorTickMarks;
    public static MemberName MarksNextToAxis;
    public static MemberName Reverse;
    public static MemberName Location;
    public static MemberName Interlaced;
    public static MemberName InterlacedColor;
    public static MemberName LogScale;
    public static MemberName LogBase;
    public static MemberName Angle;
    public static MemberName Arrows;
    public static MemberName AllowLabelRotation;
    public static MemberName IncludeZero;
    public static MemberName MinFontSize;
    public static MemberName MaxFontSize;
    public static MemberName OffsetLabels;
    public static MemberName AxisScaleBreak;
    public static MemberName Series;
    public static MemberName SourceChartSeriesName;
    public static MemberName DerivedSeriesFormula;
    public static MemberName DataLabel;
    public static MemberName AxisLabel;
    public static MemberName ChartItemInLegend;
    public static MemberName LegendText;
    public static MemberName Length;
    public static MemberName CustomPaletteColors;
    public static MemberName CustomPaletteColor;
    public static MemberName Color;
    public static MemberName CodeParameters;
    public static MemberName NoDataMessage;
    public static MemberName LegendColumn;
    public static MemberName LegendColumnHeader;
    public static MemberName LegendCustomItems;
    public static MemberName LegendCustomCells;
    public static MemberName ChartStripLines;
    public static MemberName ChartLegendColumns;
    public static MemberName ChartLegendCustomItems;
    public static MemberName ChartLegendCustomItemCells;
    public static MemberName ChartDerivedSeriesCollection;
    public static MemberName ChartFormulaParameters;
    public static MemberName FormulaParamters;
    public static MemberName EmptyPoints;
    public static MemberName SmartLabel;
    public static MemberName NoMoveDirection;
    public static MemberName ChartLegends;
    public static MemberName NonComputedReportItems;
    public static MemberName ComputedReportItems;
    public static MemberName SortedReportItems;
    public static MemberName IsComputed;
    public static MemberName Index;
    public static MemberName StyleAttributes;
    public static MemberName ExpressionList;
    public static MemberName IsExpression;
    public static MemberName StringValue;
    public static MemberName BoolValue;
    public static MemberName IntValue;
    public static MemberName Hidden;
    public static MemberName Toggle;
    public static MemberName Type;
    public static MemberName Transaction;
    public static MemberName ConnectString;
    public static MemberName DataSets;
    public static MemberName DataField;
    public static MemberName Query;
    public static MemberName DataRegions;
    public static MemberName CommandType;
    public static MemberName CommandText;
    public static MemberName QueryParameters;
    public static MemberName Timeout;
    public static MemberName StartHidden;
    public static MemberName ReceiverUniqueNames;
    public static MemberName ContainerUniqueNames;
    public static MemberName SenderUniqueName;
    public static MemberName Offset;
    public static MemberName OffsetInfo;
    public static MemberName ReportItemColInstance;
    public static MemberName StyleAttributeValues;
    public static MemberName RequestUserName;
    public static MemberName BodyUniqueName;
    public static MemberName ChildrenUniqueNames;
    public static MemberName ReportItemInstances;
    public static MemberName ChildrenNonComputedUniqueNames;
    public static MemberName OriginalValue;
    public static MemberName DocumentMap;
    public static MemberName Nullable;
    public static MemberName Prompt;
    public static MemberName PromptUser;
    public static MemberName IsUserSupplied;
    public static MemberName QuickFind;
    public static MemberName Images;
    public static MemberName Bookmark;
    public static MemberName IntegratedSecurity;
    public static MemberName DataSourceReference;
    public static MemberName LinkToChild;
    public static MemberName DrillthroughReportName;
    public static MemberName DrillthroughParameters;
    public static MemberName BookmarkLink;
    public static MemberName LayoutDirection;
    public static MemberName Expression;
    public static MemberName Operator;
    public static MemberName Values;
    public static MemberName Filters;
    public static MemberName SubReports;
    public static MemberName HasImageStreams;
    public static MemberName IsFullSize;
    public static MemberName HasBookmarks;
    public static MemberName HasLabels;
    public static MemberName ParametersNotUsedInQuery;
    public static MemberName DrillthroughBookmarkLink;
    public static MemberName UsedInQuery;
    public static MemberName UsedOnlyInParameters;
    public static MemberName AllowBlank;
    public static MemberName MultiValue;
    public static MemberName ValidValues;
    public static MemberName DefaultValue;
    public static MemberName ValidValuesDataSource;
    public static MemberName ValidValuesValueExpression;
    public static MemberName ValidValuesLabelExpression;
    public static MemberName DefaultValueDataSource;
    public static MemberName DataSourceIndex;
    public static MemberName DataSetIndex;
    public static MemberName ValueFieldIndex;
    public static MemberName LabelFieldIndex;
    public static MemberName DynamicValidValues;
    public static MemberName DynamicDefaultValue;
    public static MemberName DependencyList;
    public static MemberName NonCalculatedFieldCount;
    public static MemberName ExecutionTime;
    public static MemberName ReportServerUrl;
    public static MemberName ReportFolder;
    public static MemberName Formula;
    public static MemberName ProcessingMessages;
    public static MemberName Code;
    public static MemberName Severity;
    public static MemberName ObjectType;
    public static MemberName ObjectName;
    public static MemberName PropertyName;
    public static MemberName Message;
    public static MemberName CommonCode;
    public static MemberName ReportItemsWithHideDuplicates;
    public static MemberName ExprHostID;
    public static MemberName HasExprHost;
    public static MemberName ValueReferenced;
    public static MemberName Omit;
    public static MemberName Parent;
    public static MemberName PostSortAggregates;
    public static MemberName RecursiveAggregates;
    public static MemberName HasSpecialRecursiveAggregates;
    public static MemberName RecursiveSender;
    public static MemberName RecursiveReceiver;
    public static MemberName Action;
    public static MemberName SubType;
    public static MemberName PointWidth;
    public static MemberName ThreeDProperties;
    public static MemberName DataTransform;
    public static MemberName DataSchema;
    public static MemberName DataElementName;
    public static MemberName DataElementStyleAttribute;
    public static MemberName DataElementOutput;
    public static MemberName DataCollectionName;
    public static MemberName Palette;
    public static MemberName Caption;
    public static MemberName PlotArea;
    public static MemberName Layout;
    public static MemberName MajorGridLines;
    public static MemberName MinorGridLines;
    public static MemberName MajorInterval;
    public static MemberName MinorInterval;
    public static MemberName ShowGridLines;
    public static MemberName Minimum;
    public static MemberName Maximum;
    public static MemberName AutoScaleMin;
    public static MemberName AutoScaleMax;
    public static MemberName CrossAt;
    public static MemberName AutoCrossAt;
    public static MemberName DataValues;
    public static MemberName DataPointValues;
    public static MemberName X;
    public static MemberName Y;
    public static MemberName High;
    public static MemberName Low;
    public static MemberName Start;
    public static MemberName End;
    public static MemberName Mean;
    public static MemberName Median;
    public static MemberName MarkerStyleClass;
    public static MemberName PerspectiveProjectionMode;
    public static MemberName Rotation;
    public static MemberName Inclination;
    public static MemberName Perspective;
    public static MemberName HeightRatio;
    public static MemberName DepthRatio;
    public static MemberName Shading;
    public static MemberName GapDepth;
    public static MemberName WallThickness;
    public static MemberName Origin;
    public static MemberName InsidePlotArea;
    public static MemberName Enabled;
    public static MemberName DrawingStyleCube;
    public static MemberName Clustered;
    public static MemberName Scalar;
    public static MemberName PlotTypesLine;
    public static MemberName CultureName;
    public static MemberName StartPage;
    public static MemberName EndPage;
    public static MemberName NumberOfPages;
    public static MemberName Page;
    public static MemberName IntermediateFormatVersionMajor;
    public static MemberName IntermediateFormatVersionMinor;
    public static MemberName IntermediateFormatVersionBuild;
    public static MemberName ReportVersion;
    public static MemberName StreamName;
    public static MemberName ActionItem;
    public static MemberName ActionItemList;
    public static MemberName CustomProperties;
    public static MemberName HasDocumentMap;
    public static MemberName HasShowHide;
    public static MemberName DocMapPage;
    public static MemberName RenderReportItemColDef;
    public static MemberName EventSource;
    public static MemberName EventSourceScopeInfo;
    public static MemberName DataSetID;
    public static MemberName ContainingScopes;
    public static MemberName UserSort;
    public static MemberName SortExpressionScope;
    public static MemberName GroupsInSortTarget;
    public static MemberName SortTarget;
    public static MemberName HasDetailUserSortFilter;
    public static MemberName SaveGroupExprValues;
    public static MemberName HasUserSortFilter;
    public static MemberName IsTablixCellScope;
    public static MemberName UserSortExpressions;
    public static MemberName SortExpressionIndex;
    public static MemberName CommandTextValue;
    public static MemberName SharedDataSourceReferencePath;
    public static MemberName DynamicFieldReferences;
    public static MemberName DynamicPropertyReferences;
    public static MemberName ReferencedProperties;
    public static MemberName CompiledCodeGeneratedWithRefusedPermissions;
    public static MemberName InteractiveHeight;
    public static MemberName InteractiveHeightValue;
    public static MemberName InteractiveWidth;
    public static MemberName InteractiveWidthValue;
    public static MemberName PageNumber;
    public static MemberName DetailScopeSubReports;
    public static MemberName DataSetUniqueNameMap;
    public static MemberName LookupTable;
    public static MemberName LookupInt;
    public static MemberName IsSubReportTopLevelScope;
    public static MemberName NonDetailSortFiltersInScope;
    public static MemberName DetailSortFiltersInScope;
    public static MemberName DrillthroughHashtable;
    public static MemberName RewrittenCommands;
    public static MemberName PageBreakLocation;
    public static MemberName PropagatedPageBreakLocation;
    public static MemberName Tablix;
    public static MemberName TablixHeader;
    public static MemberName TablixRow;
    public static MemberName TablixRows;
    public static MemberName TablixCell;
    public static MemberName TablixCells;
    public static MemberName CellContents;
    public static MemberName TablixColumn;
    public static MemberName TablixColumns;
    public static MemberName TablixMember;
    public static MemberName TablixMembers;
    public static MemberName TablixColumnMembers;
    public static MemberName TablixRowMembers;
    public static MemberName TablixCornerCells;
    public static MemberName RepeatColumnHeaders;
    public static MemberName RepeatRowHeaders;
    public static MemberName FixedColumnHeaders;
    public static MemberName FixedRowHeaders;
    public static MemberName KeepWithGroup;
    public static MemberName FixedData;
    public static MemberName NoRowsMessage;
    public static MemberName ColSpan;
    public static MemberName RowSpan;
    public static MemberName AutoSubtotal;
    public static MemberName MemberCellIndex;
    public static MemberName CategoryMembers;
    public static MemberName SeriesMembers;
    public static MemberName ChartSeries;
    public static MemberName ChartDataPoints;
    public static MemberName Subtype;
    public static MemberName LegendName;
    public static MemberName ChartAreaName;
    public static MemberName ValueAxisName;
    public static MemberName CategoryAxisName;
    public static MemberName PlotAsLine;
    public static MemberName DataColumnMembers;
    public static MemberName DataRowMembers;
    public static MemberName DataMembers;
    public static MemberName DataRows;
    public static MemberName AltReportItem;
    public static MemberName OmitBorderOnPageBreak;
    public static MemberName DynamicHeight;
    public static MemberName DynamicWidth;
    public static MemberName ReGroupExpressions;
    public static MemberName DeferVariableEvaluation;
    public static MemberName ExpressionInfoTypeValuePair;
    public static MemberName HideIfNoRows;
    public static MemberName InterpretSubtotalsAsDetails;
    public static MemberName ValueAxes;
    public static MemberName CategoryAxes;
    public static MemberName ChartMembers;
    public static MemberName AngleValue;
    public static MemberName PlotType;
    public static MemberName ParentRowID;
    public static MemberName ParentColumnID;
    public static MemberName DynamicPrompt;
    public static MemberName HasSubReports;
    public static MemberName HideStaticsIfNoRows;
    public static MemberName InScopeTextBoxes;
    public static MemberName ColumnHeaderRowCount;
    public static MemberName RowHeaderColumnCount;
    public static MemberName IndexInCollection;
    public static MemberName ReportSnapshot;
    public static MemberName FirstDataSet;
    public static MemberName DataSetNoRows;
    public static MemberName DataSetRecordSetSizes;
    public static MemberName ErrorOccurred;
    public static MemberName HasCode;
    public static MemberName GroupTreePartitionOffsets;
    public static MemberName TopLevelScopeInstances;
    public static MemberName ToggleSender;
    public static MemberName Names;
    public static MemberName Count;
    public static MemberName IsMultiValue;
    public static MemberName LockAdd;
    public static MemberName SubReportInfos;
    public static MemberName Computed;
    public static MemberName RepeatOnNewPage;
    public static MemberName TopLeftDataRegion;
    public static MemberName HasInnerGroupTreeHierarchy;
    public static MemberName ImageChunkNames;
    public static MemberName DataSetsNotOnlyUsedInParameters;
    public static MemberName ChartStyleContainer;
    public static MemberName Chart;
    public static MemberName ChartDataPoint;
    public static MemberName AggregateIndexes;
    public static MemberName PostSortAggregateIndexes;
    public static MemberName RunningValueIndexes;
    public static MemberName AltCellContents;
    public static MemberName ROMIndexMap;
    public static MemberName AltReportItemIndexInParentCollectionDef;
    public static MemberName InPrevious;
    public static MemberName NeedToCacheDataRows;
    public static MemberName HasPreviousAggregates;
    public static MemberName BreakLineType;
    public static MemberName CollapsibleSpaceThreshold;
    public static MemberName MaxNumberOfBreaks;
    public static MemberName Spacing;
    public static MemberName BorderSkinType;
    public static MemberName TopLevelDataRegionIndexes;
    public static MemberName InScopeEventSources;
    public static MemberName InScopeTextBoxesInPage;
    public static MemberName InScopeTextBoxesInBody;
    public static MemberName CachedExternalImages;
    public static MemberName TransparentImageChunkName;
    public static MemberName DataChunkName;
    public static MemberName DataChunkMap;
    public static MemberName EventSources;
    public static MemberName DataSet;
    public static MemberName ChunkNameModifier;
    public static MemberName ReferenceID;
    public static MemberName DataSource;
    public static MemberName RetrievalFailed;
    public static MemberName ContainingDynamicVisibility;
    public static MemberName ContainingDynamicRowVisibility;
    public static MemberName ContainingDynamicColumnVisibility;
    public static MemberName ImageData;
    public static MemberName Actions;
    public static MemberName ActionDefinition;
    public static MemberName ImageMapAreas;
    public static MemberName Shape;
    public static MemberName Coordinates;
    public static MemberName Style;
    public static MemberName CustomPropertyNames;
    public static MemberName CustomPropertyValues;
    public static MemberName GeneratedReportItemChunkNames;
    public static MemberName ChartSmartLabel;
    public static MemberName InDynamicRowAndColumnContext;
    public static MemberName SortFilterEventInfos;
    public static MemberName OuterGroupingMaximumDynamicLevel;
    public static MemberName OuterGroupingDynamicMemberCount;
    public static MemberName OuterGroupingDynamicPathCount;
    public static MemberName HierarchyDynamicIndex;
    public static MemberName HierarchyPathIndex;
    public static MemberName AggregateFieldReferences;
    public static MemberName TrackFieldsUsedInValueExpression;
    public static MemberName Docking;
    public static MemberName DockToChartArea;
    public static MemberName DockOutsideChartArea;
    public static MemberName DockOffset;
    public static MemberName TitleSeparator;
    public static MemberName AlignOrientation;
    public static MemberName ChartAlignType;
    public static MemberName AlignWithChartArea;
    public static MemberName EquallySizedAxesFont;
    public static MemberName Cursor;
    public static MemberName AxesView;
    public static MemberName InnerPlotPosition;
    public static MemberName ChartLegendTitle;
    public static MemberName AutoFitTextDisabled;
    public static MemberName HeaderSeparator;
    public static MemberName HeaderSeparatorColor;
    public static MemberName ColumnSeparator;
    public static MemberName ColumnSeparatorColor;
    public static MemberName InterlacedRows;
    public static MemberName InterlacedRowsColor;
    public static MemberName EquallySpacedItems;
    public static MemberName Reversed;
    public static MemberName MaxAutoSize;
    public static MemberName TextWrapThreshold;
    public static MemberName ShowOverlapped;
    public static MemberName HideInLegend;
    public static MemberName UseValueAsLabel;
    public static MemberName ProjectionMode;
    public static MemberName MarksAlwaysAtPlotEdge;
    public static MemberName HideLabels;
    public static MemberName PreventFontShrink;
    public static MemberName PreventFontGrow;
    public static MemberName PreventLabelOffset;
    public static MemberName PreventWordWrap;
    public static MemberName LabelsAutoFitDisabled;
    public static MemberName HideEndLabels;
    public static MemberName VariableAutoInterval;
    public static MemberName LabelInterval;
    public static MemberName LabelIntervalType;
    public static MemberName LabelIntervalOffset;
    public static MemberName LabelIntervalOffsetType;
    public static MemberName IsMajor;
    public static MemberName GroupsWithVariables;
    public static MemberName InstanceParameterValues;
    public static MemberName HierarchyParentGroups;
    public static MemberName InnerGroupingMaximumDynamicLevel;
    public static MemberName InnerGroupingDynamicMemberCount;
    public static MemberName InnerGroupingDynamicPathCount;
    public static MemberName GroupTreeRootOffset;
    public static MemberName Item;
    public static MemberName Priority;
    public static MemberName AggregateRows;
    public static MemberName SortFilterInfoIndices;
    public static MemberName TargetForNonDetailSort;
    public static MemberName TargetForDetailSort;
    public static MemberName FirstCell;
    public static MemberName LastCell;
    public static MemberName CurrentMin;
    public static MemberName ReportItemsDef;
    public static MemberName CellReportItemDef;
    public static MemberName CellAltReportItemDef;
    public static MemberName ReportItemDef;
    public static MemberName DataRegionObjs;
    public static MemberName CurrentDataRegion;
    public static MemberName ProcessSubreports;
    public static MemberName OldUniqueName;
    public static MemberName SortSourceScopeInfo;
    public static MemberName SortDirection;
    public static MemberName EventSourceRowScope;
    public static MemberName EventSourceColDetailIndex;
    public static MemberName EventSourceRowDetailIndex;
    public static MemberName DetailRowScopes;
    public static MemberName DetailRowScopeIndices;
    public static MemberName DetailColScopeIndices;
    public static MemberName EventTarget;
    public static MemberName TargetSortFilterInfoAdded;
    public static MemberName GroupExpressionsInSortTarget;
    public static MemberName SortFilterExpressionScopeObjects;
    public static MemberName CurrentSortIndex;
    public static MemberName CurrentInstanceIndex;
    public static MemberName SortOrders;
    public static MemberName Processed;
    public static MemberName NullScopeCount;
    public static MemberName NewUniqueName;
    public static MemberName PeerSortFilters;
    public static MemberName Direction;
    public static MemberName ExpressionsHost;
    public static MemberName ExpressionIndex;
    public static MemberName HierarchyObjs;
    public static MemberName Hashtable;
    public static MemberName Tree;
    public static MemberName ParentInfo;
    public static MemberName FirstChild;
    public static MemberName LastChild;
    public static MemberName RvValueList;
    public static MemberName RunningValuesInGroup;
    public static MemberName PreviousValuesInGroup;
    public static MemberName GlobalRunningValueCollection;
    public static MemberName GroupCollection;
    public static MemberName ProcessingStage;
    public static MemberName ScopedRunningValues;
    public static MemberName ParentInstance;
    public static MemberName GroupingType;
    public static MemberName ParentExpression;
    public static MemberName CurrentGroupExprValue;
    public static MemberName BuiltinSortOverridden;
    public static MemberName IsDetailGroup;
    public static MemberName HierarchyDef;
    public static MemberName Collection;
    public static MemberName ErrorContext;
    public static MemberName InnerGroupings;
    public static MemberName OutermostStaticCellRvs;
    public static MemberName HeadingLevel;
    public static MemberName OutermostStatics;
    public static MemberName HasLeafCells;
    public static MemberName ProcessOutermostStaticCells;
    public static MemberName CurrentMemberIndexWithinScopeLevel;
    public static MemberName CurrentMemberInstance;
    public static MemberName GroupRoot;
    public static MemberName HasStaticMembers;
    public static MemberName StaticLeafCellIndexes;
    public static MemberName StaticHeadings;
    public static MemberName OuterGroupingCounters;
    public static MemberName OuterGroupings;
    public static MemberName InnerGroupsWithCellsForOuterPeerGroupProcessing;
    public static MemberName StaticCorner;
    public static MemberName StaticCornerCells;
    public static MemberName TablixCorner;
    public static MemberName TopLevelStaticCellContents;
    public static MemberName NextLeaf;
    public static MemberName PrevLeaf;
    public static MemberName GroupExprValues;
    public static MemberName TargetScopeMatched;
    public static MemberName MemberObjs;
    public static MemberName HasInnerHierarchy;
    public static MemberName FirstPassCellNonCustomAggs;
    public static MemberName FirstPassCellCustomAggs;
    public static MemberName CellsList;
    public static MemberName GroupLeafIndex;
    public static MemberName ProcessHeading;
    public static MemberName MemberInstance;
    public static MemberName SequentialMemberIndexWithinScopeLevel;
    public static MemberName OutermostColumnIndexes;
    public static MemberName OutermostRowIndexes;
    public static MemberName CellRunningValueValues;
    public static MemberName HeadingReportItemCol;
    public static MemberName FirstPassCells;
    public static MemberName SortInfo;
    public static MemberName SortIndex;
    public static MemberName ValidAggregateRow;
    public static MemberName ContainedType;
    public static MemberName IsValueReady;
    public static MemberName IsVisited;
    public static MemberName Array;
    public static MemberName Keys;
    public static MemberName BucketSize;
    public static MemberName Buckets;
    public static MemberName Version;
    public static MemberName Entries;
    public static MemberName Prime;
    public static MemberName HashInputA;
    public static MemberName HashInputB;
    public static MemberName NodeCapacity;
    public static MemberName ValuesCapacity;
    public static MemberName Comparer;
    public static MemberName Root;
    public static MemberName UseFixedReferences;
    public static MemberName Depth;
    public static MemberName SortTreeNodes;
    public static MemberName PreviousValues;
    public static MemberName StartIndex;
    public static MemberName PreviousEnabled;
    public static MemberName HasNoExplicitScope;
    public static MemberName StaticCellRunningValues;
    public static MemberName CellPreviousValues;
    public static MemberName StaticCellPreviousValues;
    public static MemberName DetailRowIndex;
    public static MemberName DetailUserSortTargetInfo;
    public static MemberName InstanceIndex;
    public static MemberName RecursiveParentIndexes;
    public static MemberName IsOuterGrouping;
    public static MemberName State;
    public static MemberName Fixed;
    public static MemberName SpanSize;
    public static MemberName DefIndex;
    public static MemberName MemberCell;
    public static MemberName DeltaX;
    public static MemberName DeltaY;
    public static MemberName ItemPageSizes;
    public static MemberName ItemsAbove;
    public static MemberName ItemsLeft;
    public static MemberName RPLElement;
    public static MemberName RPLState;
    public static MemberName NonSharedOffset;
    public static MemberName TextBoxValues;
    public static MemberName Indexes;
    public static MemberName Padding;
    public static MemberName DefPadding;
    public static MemberName BodySource;
    public static MemberName ChildBody;
    public static MemberName InvalidImage;
    public static MemberName ImageProps;
    public static MemberName HorizontalPadding;
    public static MemberName VerticalPadding;
    public static MemberName ValueStart;
    public static MemberName ValueEnd;
    public static MemberName CanvasFont;
    public static MemberName CalcSizeState;
    public static MemberName HorizontalState;
    public static MemberName VerticalState;
    public static MemberName TablixState;
    public static MemberName StartPos;
    public static MemberName RPLTablixRow;
    public static MemberName DetailCells;
    public static MemberName SourceHeight;
    public static MemberName RowHeight;
    public static MemberName BodyRows;
    public static MemberName BodyRowHeights;
    public static MemberName BodyColWidths;
    public static MemberName RowMembersDepth;
    public static MemberName ColMembersDepth;
    public static MemberName RowMemberDef;
    public static MemberName RowMemberDefIndexes;
    public static MemberName ColMemberDef;
    public static MemberName ColMemberDefIndexes;
    public static MemberName CellPageBreaks;
    public static MemberName HeaderRowCols;
    public static MemberName HeaderColumnRows;
    public static MemberName RowMemberIndexCell;
    public static MemberName ColMemberIndexCell;
    public static MemberName ColsBeforeRowHeaders;
    public static MemberName ColumnHeaders;
    public static MemberName ColumnHeadersHeights;
    public static MemberName RowHeaders;
    public static MemberName RowHeadersWidths;
    public static MemberName DetailRows;
    public static MemberName CornerCells;
    public static MemberName GroupPageBreaks;
    public static MemberName ColumnInfo;
    public static MemberName IgnoreCol;
    public static MemberName IgnoreRow;
    public static MemberName ContentOnPage;
    public static MemberName CellItem;
    public static MemberName MemberItem;
    public static MemberName CurrRowSpan;
    public static MemberName CurrColSpan;
    public static MemberName MemberState;
    public static MemberName SourceIndex;
    public static MemberName Span;
    public static MemberName MemberInstances;
    public static MemberName RepeatWith;
    public static MemberName IsSimple;
    public static MemberName ConsumeContainerWhitespace;
    public static MemberName FloatValue;
    public static MemberName DateTimeValue;
    public static MemberName ConstantType;
    public static MemberName DataValueSequenceRendering;
    public static MemberName CommonSubReportInfo;
    public static MemberName CommonSubReportInfos;
    public static MemberName DefinitionUniqueName;
    public static MemberName FirstInstanceSet;
    public static MemberName VariablesInScope;
    public static MemberName FlattenedDatasetDependencyMatrix;
    public static MemberName FirstDataSetIndexToProcess;
    public static MemberName SnapshotParameters;
    public static MemberName UserProfileState;
    public static MemberName SequenceID;
    public static MemberName TextboxesInScope;
    public static MemberName GaugePanel;
    public static MemberName GaugeMember;
    public static MemberName GaugeRowMember;
    public static MemberName GaugeRow;
    public static MemberName GaugeCell;
    public static MemberName TransparentColor;
    public static MemberName HueColor;
    public static MemberName OffsetX;
    public static MemberName OffsetY;
    public static MemberName Transparency;
    public static MemberName ClipImage;
    public static MemberName FrameStyle;
    public static MemberName FrameShape;
    public static MemberName FrameWidth;
    public static MemberName GlassEffect;
    public static MemberName FrameBackground;
    public static MemberName FrameImage;
    public static MemberName AllowUpsideDown;
    public static MemberName RotateLabels;
    public static MemberName TickMarkStyle;
    public static MemberName BackFrame;
    public static MemberName ClipContent;
    public static MemberName TopImage;
    public static MemberName MinPercent;
    public static MemberName MaxPercent;
    public static MemberName AddConstant;
    public static MemberName LinearGauges;
    public static MemberName RadialGauges;
    public static MemberName NumericIndicators;
    public static MemberName StateIndicators;
    public static MemberName GaugeImages;
    public static MemberName GaugeLabels;
    public static MemberName AntiAliasing;
    public static MemberName AutoLayout;
    public static MemberName ShadowIntensity;
    public static MemberName TextAntiAliasingQuality;
    public static MemberName ParentItem;
    public static MemberName GaugeInputValue;
    public static MemberName BarStart;
    public static MemberName DistanceFromScale;
    public static MemberName PointerImage;
    public static MemberName MarkerLength;
    public static MemberName MarkerStyle;
    public static MemberName SnappingEnabled;
    public static MemberName SnappingInterval;
    public static MemberName ScaleRanges;
    public static MemberName CustomLabels;
    public static MemberName Logarithmic;
    public static MemberName LogarithmicBase;
    public static MemberName MaximumValue;
    public static MemberName MinimumValue;
    public static MemberName Multiplier;
    public static MemberName GaugeMajorTickMarks;
    public static MemberName GaugeMinorTickMarks;
    public static MemberName MaximumPin;
    public static MemberName MinimumPin;
    public static MemberName ScaleLabels;
    public static MemberName TickMarksOnTop;
    public static MemberName Orientation;
    public static MemberName Thermometer;
    public static MemberName StartMargin;
    public static MemberName EndMargin;
    public static MemberName Placement;
    public static MemberName RotateLabel;
    public static MemberName UseFontPercent;
    public static MemberName CapImage;
    public static MemberName OnTop;
    public static MemberName Reflection;
    public static MemberName CapStyle;
    public static MemberName GaugeScales;
    public static MemberName PivotX;
    public static MemberName PivotY;
    public static MemberName PointerCap;
    public static MemberName NeedleStyle;
    public static MemberName GaugePointers;
    public static MemberName Radius;
    public static MemberName StartAngle;
    public static MemberName SweepAngle;
    public static MemberName FontAngle;
    public static MemberName ShowEndLabels;
    public static MemberName Enable;
    public static MemberName PinLabel;
    public static MemberName StartValue;
    public static MemberName EndValue;
    public static MemberName StartWidth;
    public static MemberName EndWidth;
    public static MemberName InRangeBarPointerColor;
    public static MemberName InRangeLabelColor;
    public static MemberName InRangeTickMarksColor;
    public static MemberName BackgroundGradientType;
    public static MemberName BulbOffset;
    public static MemberName BulbSize;
    public static MemberName ThermometerStyle;
    public static MemberName EnableGradient;
    public static MemberName GradientDensity;
    public static MemberName TickMarkImage;
    public static MemberName ResizeMode;
    public static MemberName TextShadowOffset;
    public static MemberName Items;
    public static MemberName Flags;
    public static MemberName UseRPLStream;
    public static MemberName RPLSource;
    public static MemberName GenerationIndex;
    public static MemberName ToggleParent;
    public static MemberName IsDefaultLine;
    public static MemberName RowHeaderWidth;
    public static MemberName ColumnHeaderHeight;
    public static MemberName RTL;
    public static MemberName DateTimeOffsetValue;
    public static MemberName DetailRowCounter;
    public static MemberName DetailSortAdditionalGroupLeafs;
    public static MemberName ProcessStaticCellsForRVs;
    public static MemberName Arguments;
    public static MemberName ChartMember;
    public static MemberName SourceSeries;
    public static MemberName ExplicitAltReportItem;
    public static MemberName TextOrientation;
    public static MemberName AspectRatio;
    public static MemberName ChartElementPosition;
    public static MemberName ChartInnerPlotPosition;
    public static MemberName Disabled;
    public static MemberName DependencyRefList;
    public static MemberName RecursiveMember;
    public static MemberName HasRecursiveChildren;
    public static MemberName DefinitionHasDocumentMap;
    public static MemberName Paragraphs;
    public static MemberName Paragraph;
    public static MemberName TextBox;
    public static MemberName TextRuns;
    public static MemberName TextRun;
    public static MemberName LeftIndent;
    public static MemberName RightIndent;
    public static MemberName HangingIndent;
    public static MemberName SpaceBefore;
    public static MemberName SpaceAfter;
    public static MemberName ListStyle;
    public static MemberName ListLevel;
    public static MemberName MarkupType;
    public static MemberName HasExpressionBasedValue;
    public static MemberName HasValue;
    public static MemberName TextRunValueReferenced;
    public static MemberName ParagraphNumber;
    public static MemberName ParagraphIndex;
    public static MemberName TextRunIndex;
    public static MemberName CharacterIndex;
    public static MemberName ContentOffset;
    public static MemberName ContentBottom;
    public static MemberName PageStartOffset;
    public static MemberName PageEndOffset;
    public static MemberName NextPageStartOffset;
    public static MemberName FirstLine;
    public static MemberName TopPadding;
    public static MemberName InDataRowSortPhase;
    public static MemberName SortedDataRowTree;
    public static MemberName DataRowSortExpression;
    public static MemberName PaletteHatchBehavior;
    public static MemberName ContentHeight;
    public static MemberName DependencyIndexList;
    public static MemberName EventSourceColScope;
    public static MemberName DetailColScopes;
    public static MemberName HasNonRecursiveSender;
    public static MemberName IsDataRegion;
    public static MemberName OriginalCatalogPath;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.MemberReference : object {
    private MemberName m_memberName;
    private int m_refID;
    internal MemberName MemberName { get; }
    internal int RefID { get; }
    internal MemberReference(MemberName memberName, int refID);
    internal MemberName get_MemberName();
    internal int get_RefID();
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ObjectType : Enum {
    public int value__;
    public static ObjectType Null;
    public static ObjectType None;
    public static ObjectType RIFObjectArray;
    public static ObjectType RIFObjectList;
    public static ObjectType PrimitiveArray;
    public static ObjectType PrimitiveList;
    public static ObjectType PrimitiveTypedArray;
    public static ObjectType StringRIFObjectDictionary;
    public static ObjectType StringRIFObjectHashtable;
    public static ObjectType NameObjectCollection;
    public static ObjectType Int32RIFObjectDictionary;
    public static ObjectType Int32PrimitiveListHashtable;
    public static ObjectType ObjectHashtableHashtable;
    public static ObjectType StringObjectHashtable;
    public static ObjectType ListOfRIFObjectRIFObjectDictionary;
    public static ObjectType RIFObjectStringHashtable;
    public static ObjectType RecordSetInfo;
    public static ObjectType RecordRow;
    public static ObjectType RecordField;
    public static ObjectType RecordSetPropertyNames;
    public static ObjectType Nullable;
    public static ObjectType StorageItem;
    public static ObjectType Reference;
    public static ObjectType ScalableDictionaryNodeReference;
    public static ObjectType IScalableDictionaryEntry;
    public static ObjectType ScalableDictionaryValues;
    public static ObjectType ScalableDictionaryNode;
    public static ObjectType ScalableDictionary;
    public static ObjectType StorableArray;
    public static ObjectType StorableArrayReference;
    public static ObjectType ScalableList;
    public static ObjectType Array2D;
    public static ObjectType DataRegionInstanceReference;
    public static ObjectType SubReportInstanceReference;
    public static ObjectType ReportInstanceReference;
    public static ObjectType ScopeInstanceReference;
    public static ObjectType DataFieldRow;
    public static ObjectType FieldImpl;
    public static ObjectType BTreeNode;
    public static ObjectType BTreeNodeTupleList;
    public static ObjectType BTreeNodeTuple;
    public static ObjectType BTreeNodeValue;
    public static ObjectType ScalableHybridListEntry;
    public static ObjectType FilterKey;
    public static ObjectType RuntimeSortHierarchyObj;
    public static ObjectType SortHierarchyStruct;
    public static ObjectType RuntimeSortFilterEventInfo;
    public static ObjectType SortFilterExpressionScopeObj;
    public static ObjectType SortExpressionScopeInstanceHolder;
    public static ObjectType DataAggregateObj;
    public static ObjectType RuntimeRICollection;
    public static ObjectType RuntimeTablixCell;
    public static ObjectType RuntimeChartCriCell;
    public static ObjectType RuntimeUserSortTargetInfo;
    public static ObjectType Aggregate;
    public static ObjectType First;
    public static ObjectType Last;
    public static ObjectType Sum;
    public static ObjectType Avg;
    public static ObjectType Max;
    public static ObjectType Min;
    public static ObjectType Count;
    public static ObjectType VariantVariantHashtable;
    public static ObjectType CountDistinct;
    public static ObjectType CountRows;
    public static ObjectType VarBase;
    public static ObjectType Var;
    public static ObjectType StDev;
    public static ObjectType VarP;
    public static ObjectType StDevP;
    public static ObjectType Previous;
    public static ObjectType AggregateRow;
    public static ObjectType RuntimeCells;
    public static ObjectType RuntimeExpressionInfo;
    public static ObjectType Int32StringHashtable;
    public static ObjectType RuntimeHierarchyObj;
    public static ObjectType RuntimeGroupingObj;
    public static ObjectType VariantRifObjectDictionary;
    public static ObjectType VariantListOfRifObjectDictionary;
    public static ObjectType AggregatesImpl;
    public static ObjectType RuntimeDataTablixGroupRootObj;
    public static ObjectType RuntimeDataTablixMemberObj;
    public static ObjectType RuntimeTablixMemberObj;
    public static ObjectType RuntimeDataTablixObj;
    public static ObjectType RuntimeTablixObj;
    public static ObjectType RuntimeChartObj;
    public static ObjectType RuntimeCriObj;
    public static ObjectType RuntimeTablixGroupLeafObj;
    public static ObjectType RuntimeChartCriGroupLeafObj;
    public static ObjectType CalculatedFieldWrapperImpl;
    public static ObjectType RuntimeSortDataHolder;
    public static ObjectType VariantListVariantDictionary;
    public static ObjectType BTree;
    public static ObjectType DataFieldRowReference;
    public static ObjectType RuntimeSortHierarchyObjReference;
    public static ObjectType RuntimeSortFilterEventInfoReference;
    public static ObjectType SortFilterExpressionScopeObjReference;
    public static ObjectType SortExpressionScopeInstanceHolderReference;
    public static ObjectType DataAggregateObjReference;
    public static ObjectType RuntimeRICollectionReference;
    public static ObjectType RuntimeTablixCellReference;
    public static ObjectType RuntimeChartCriCellReference;
    public static ObjectType RuntimeUserSortTargetInfoReference;
    public static ObjectType AggregateRowReference;
    public static ObjectType RuntimeCellsReference;
    public static ObjectType RuntimeHierarchyObjReference;
    public static ObjectType RuntimeGroupingObjReference;
    public static ObjectType RuntimeDataTablixGroupRootObjReference;
    public static ObjectType RuntimeDataTablixMemberObjReference;
    public static ObjectType RuntimeTablixMemberObjReference;
    public static ObjectType RuntimeTablixObjReference;
    public static ObjectType RuntimeChartObjReference;
    public static ObjectType RuntimeCriObjReference;
    public static ObjectType RuntimeTablixGroupLeafObjReference;
    public static ObjectType RuntimeChartCriGroupLeafObjReference;
    public static ObjectType RuntimeSortDataHolderReference;
    public static ObjectType StringVariantListDictionary;
    public static ObjectType RowMemberInfo;
    public static ObjectType SizeInfo;
    public static ObjectType DetailCell;
    public static ObjectType CornerCell;
    public static ObjectType MemberCell;
    public static ObjectType PageMemberCell;
    public static ObjectType BTreeNodeHierarchyObj;
    public static ObjectType BTreeNodeDataRow;
    public static ObjectType IDOwner;
    public static ObjectType ReportItem;
    public static ObjectType Report;
    public static ObjectType PageSection;
    public static ObjectType Line;
    public static ObjectType Rectangle;
    public static ObjectType Image;
    public static ObjectType TextBox;
    public static ObjectType SubReport;
    public static ObjectType DataRegion;
    public static ObjectType ReportHierarchyNode;
    public static ObjectType Grouping;
    public static ObjectType Sorting;
    public static ObjectType ReportItemCollection;
    public static ObjectType ReportItemIndexer;
    public static ObjectType Style;
    public static ObjectType AttributeInfo;
    public static ObjectType Visibility;
    public static ObjectType ExpressionInfo;
    public static ObjectType DataAggregateInfo;
    public static ObjectType RunningValueInfo;
    public static ObjectType Filter;
    public static ObjectType DataSource;
    public static ObjectType DataSet;
    public static ObjectType ReportQuery;
    public static ObjectType Field;
    public static ObjectType ParameterValue;
    public static ObjectType ReportSnapshot;
    public static ObjectType DocumentMapNode;
    public static ObjectType InstanceInfo;
    public static ObjectType ScopeInstance;
    public static ObjectType ReportInstance;
    public static ObjectType ParameterInfo;
    public static ObjectType ParameterInfoCollection;
    public static ObjectType Variant;
    public static ObjectType VariantList;
    public static ObjectType ValidValue;
    public static ObjectType ParameterDataSource;
    public static ObjectType ParameterDef;
    public static ObjectType ParameterBase;
    public static ObjectType ProcessingMessageList;
    public static ObjectType ProcessingMessage;
    public static ObjectType CodeClass;
    public static ObjectType String;
    public static ObjectType Action;
    public static ObjectType RenderingPagesRanges;
    public static ObjectType IntermediateFormatVersion;
    public static ObjectType ImageInfo;
    public static ObjectType ActionItem;
    public static ObjectType DataValue;
    public static ObjectType CustomReportItem;
    public static ObjectType SortFilterEventInfo;
    public static ObjectType SortFilterEventInfoMap;
    public static ObjectType EndUserSort;
    public static ObjectType ISortFilterScope;
    public static ObjectType GroupingList;
    public static ObjectType ScopeLookupTable;
    public static ObjectType Row;
    public static ObjectType Cell;
    public static ObjectType Tablix;
    public static ObjectType TablixHeader;
    public static ObjectType TablixMember;
    public static ObjectType TablixColumn;
    public static ObjectType TablixRow;
    public static ObjectType TablixCornerCell;
    public static ObjectType TablixCell;
    public static ObjectType Chart;
    public static ObjectType ChartMember;
    public static ObjectType ChartSeries;
    public static ObjectType ChartDataPoint;
    public static ObjectType ChartAxis;
    public static ObjectType AxisList;
    public static ObjectType ThreeDProperties;
    public static ObjectType PlotArea;
    public static ObjectType ChartDataLabel;
    public static ObjectType ChartDataPointValues;
    public static ObjectType ChartArea;
    public static ObjectType ChartTitleBase;
    public static ObjectType ChartTitle;
    public static ObjectType ChartAxisTitle;
    public static ObjectType ChartLegendTitle;
    public static ObjectType ChartLegend;
    public static ObjectType ChartBorderSkin;
    public static ObjectType ChartTickMarks;
    public static ObjectType ChartNoDataMessage;
    public static ObjectType ChartCustomPaletteColor;
    public static ObjectType ChartLegendColumn;
    public static ObjectType ChartLegendColumnHeader;
    public static ObjectType ChartLegendCustomItem;
    public static ObjectType ChartLegendCustomItemCell;
    public static ObjectType ChartStripLine;
    public static ObjectType ChartAxisScaleBreak;
    public static ObjectType ChartDerivedSeries;
    public static ObjectType ChartFormulaParameter;
    public static ObjectType ChartEmptyPoints;
    public static ObjectType ChartItemInLegend;
    public static ObjectType ChartSmartLabel;
    public static ObjectType ChartNoMoveDirections;
    public static ObjectType GridLines;
    public static ObjectType DataMember;
    public static ObjectType CustomDataRow;
    public static ObjectType DataCell;
    public static ObjectType Variable;
    public static ObjectType ExpressionInfoTypeValuePair;
    public static ObjectType Page;
    public static ObjectType IReferenceable;
    public static ObjectType SubReportInstance;
    public static ObjectType SubReportInstanceItem;
    public static ObjectType Parameter;
    public static ObjectType CultureInfo;
    public static ObjectType Declaration;
    public static ObjectType DocumentMapBeginContainer;
    public static ObjectType DocumentMapEndContainer;
    public static ObjectType OnDemandMetadata;
    public static ObjectType GroupTreePartition;
    public static ObjectType FieldInfo;
    public static ObjectType DataSetInstance;
    public static ObjectType DataRegionInstance;
    public static ObjectType DataRegionMemberInstance;
    public static ObjectType DataCellInstance;
    public static ObjectType DataAggregateObjResult;
    public static ObjectType Parameters;
    public static ObjectType StringInt32Hashtable;
    public static ObjectType Variables;
    public static ObjectType SubReportInfo;
    public static ObjectType StringStringHashtable;
    public static ObjectType ChartStyleContainer;
    public static ObjectType ChartMarker;
    public static ObjectType IInScopeEventSource;
    public static ObjectType IVisibilityOwner;
    public static ObjectType ReportElementInstance;
    public static ObjectType ReportItemInstance;
    public static ObjectType ImageInstance;
    public static ObjectType ActionInstance;
    public static ObjectType ParameterInstance;
    public static ObjectType ActionInfoWithDynamicImageMap;
    public static ObjectType ImageMapAreaInstance;
    public static ObjectType StyleInstance;
    public static ObjectType StringListOfStringDictionary;
    public static ObjectType ChartAlignType;
    public static ObjectType RIFObject;
    public static ObjectType OnDemandProcessingContext;
    public static ObjectType ObjectModelImpl;
    public static ObjectType RuntimeOnDemandDataSet;
    public static ObjectType ISortDataHolder;
    public static ObjectType IHierarchyObj;
    public static ObjectType RuntimeRDLDataRegionObj;
    public static ObjectType RuntimeCell;
    public static ObjectType Filters;
    public static ObjectType ReportRuntime;
    public static ObjectType DataAggregate;
    public static ObjectType IScope;
    public static ObjectType IndexedExprHost;
    public static ObjectType RuntimeGroupLeafObj;
    public static ObjectType RuntimeGroupObj;
    public static ObjectType RuntimeDetailObj;
    public static ObjectType IErrorContext;
    public static ObjectType RuntimeGroupRootObj;
    public static ObjectType RuntimeMemberObj;
    public static ObjectType RuntimeChartCriObj;
    public static ObjectType RuntimeDataTablixGroupLeafObj;
    public static ObjectType RuntimeOnDemandDataSetReference;
    public static ObjectType IHierarchyObjReference;
    public static ObjectType RuntimeCellReference;
    public static ObjectType RuntimeRDLDataRegionObjReference;
    public static ObjectType IScopeReference;
    public static ObjectType RuntimeDataTablixGroupLeafObjReference;
    public static ObjectType RuntimeGroupLeafObjReference;
    public static ObjectType RuntimeGroupObjReference;
    public static ObjectType RuntimeDetailObjReference;
    public static ObjectType RuntimeGroupRootObjReference;
    public static ObjectType RuntimeMemberObjReference;
    public static ObjectType RuntimeDataTablixObjReference;
    public static ObjectType RuntimeChartCriObjReference;
    public static ObjectType ISortDataHolderReference;
    public static ObjectType RuntimeDataRegionObjReference;
    public static ObjectType RuntimeDataRegionObj;
    public static ObjectType DataAggregateReference;
    public static ObjectType StreamMemberCell;
    public static ObjectType RPLMemberCell;
    public static ObjectType ItemSizes;
    public static ObjectType PageItem;
    public static ObjectType HiddenPageItem;
    public static ObjectType NoRowsItem;
    public static ObjectType PageItemContainer;
    public static ObjectType ReportBody;
    public static ObjectType RowInfo;
    public static ObjectType ColumnInfo;
    public static ObjectType PageTablixCell;
    public static ObjectType PageDetailCell;
    public static ObjectType PageCornerCell;
    public static ObjectType PageStructMemberCell;
    public static ObjectType PageStructStaticMemberCell;
    public static ObjectType PageStructDynamicMemberCell;
    public static ObjectType CommonSubReportInfo;
    public static ObjectType TablixCellBase;
    public static ObjectType RuntimeGaugePanelObj;
    public static ObjectType RuntimeGaugePanelObjReference;
    public static ObjectType GaugePanel;
    public static ObjectType GaugeMember;
    public static ObjectType GaugeRow;
    public static ObjectType GaugeCell;
    public static ObjectType GaugePanelStyleContainer;
    public static ObjectType FrameBackground;
    public static ObjectType BaseGaugeImage;
    public static ObjectType StateImage;
    public static ObjectType PointerImage;
    public static ObjectType CapImage;
    public static ObjectType FrameImage;
    public static ObjectType CustomLabel;
    public static ObjectType Gauge;
    public static ObjectType RadialGauge;
    public static ObjectType LinearGauge;
    public static ObjectType GaugeImage;
    public static ObjectType GaugeLabel;
    public static ObjectType GaugePanelItem;
    public static ObjectType GaugePointer;
    public static ObjectType RadialPointer;
    public static ObjectType LinearPointer;
    public static ObjectType GaugeScale;
    public static ObjectType RadialScale;
    public static ObjectType LinearScale;
    public static ObjectType GaugeTickMarks;
    public static ObjectType TickMarkStyle;
    public static ObjectType ScalePin;
    public static ObjectType GaugeInputValue;
    public static ObjectType NumericIndicator;
    public static ObjectType PinLabel;
    public static ObjectType PointerCap;
    public static ObjectType ScaleLabels;
    public static ObjectType ScaleRange;
    public static ObjectType StateIndicator;
    public static ObjectType BackFrame;
    public static ObjectType TopImage;
    public static ObjectType Thermometer;
    public static ObjectType DynamicImage;
    public static ObjectType ExcelRowInfo;
    public static ObjectType IRowItemStruct;
    public static ObjectType RowItemStruct;
    public static ObjectType TablixItemStruct;
    public static ObjectType TablixStruct;
    public static ObjectType TablixMemberStruct;
    public static ObjectType ToggleParent;
    public static ObjectType ChildLeafInfo;
    public static ObjectType TextOrientation;
    public static ObjectType AspectRatio;
    public static ObjectType ChartElementPosition;
    public static ObjectType Paragraph;
    public static ObjectType TextRun;
    public static ObjectType ByteVariantHashtable;
    public static ObjectType TextBoxOffset;
    public static ObjectType StringBoolArrayDictionary;
    public static ObjectType MaxValue;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.PersistenceBinaryReader : BinaryReader {
    internal long StreamPosition { get; internal set; }
    internal bool EOS { get; }
    internal PersistenceBinaryReader(Stream str);
    internal long get_StreamPosition();
    internal void set_StreamPosition(long value);
    internal bool get_EOS();
    internal bool ReadReference(Int32& refID, ObjectType& declaredRefType);
    internal bool ReadListStart(ObjectType objectType, Int32& listSize);
    internal bool ReadDictionaryStart(ObjectType objectType, Int32& dictionarySize);
    internal bool ReadArrayStart(ObjectType objectType, Int32& arraySize);
    internal bool Read2DArrayStart(ObjectType objectType, Int32& arrayXLength, Int32& arrayYLength);
    internal Boolean[] ReadBooleanArray();
    internal Byte[] ReadByteArray();
    internal Single[] ReadFloatArray();
    internal Double[] ReadDoubleArray();
    internal Char[] ReadCharArray();
    internal Int32[] ReadInt32Array();
    internal Int64[] ReadInt64Array();
    public virtual bool ReadBoolean();
    internal Guid ReadGuid();
    public virtual decimal ReadDecimal();
    public virtual string ReadString();
    internal string ReadString(bool checkforNull);
    internal DateTime ReadDateTime();
    internal DateTime ReadDateTimeWithKind();
    internal DateTimeOffset ReadDateTimeOffset();
    internal TimeSpan ReadTimeSpan();
    internal int ReadEnum();
    internal Token ReadToken();
    internal ObjectType ReadObjectType();
    private MemberName ReadMemberName();
    internal Declaration ReadDeclaration();
    internal void SkipString();
    internal void SkipBytes(int bytesToSkip);
    internal void SkipMultiByteInt();
    internal void SkipTypedArray(int elementSize);
    internal void Seek(long newPosition, SeekOrigin seekOrigin);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.PersistenceBinaryWriter : BinaryWriter {
    private static int m_MaxEncVal;
    internal PersistenceBinaryWriter(Stream str);
    private static PersistenceBinaryWriter();
    internal void WriteNull();
    internal void WriteEnum(int value);
    internal void Write(DateTime dateTime, Token token);
    internal void Write(DateTimeOffset dateTimeOffset);
    internal void Write(TimeSpan timeSpan);
    public virtual void Write(bool value);
    internal void Write(Guid guid);
    public virtual void Write(decimal value);
    public virtual void Write(string value);
    internal void Write(string str, bool writeObjType);
    internal void WriteDictionaryStart(ObjectType type, int size);
    internal void WriteListStart(ObjectType type, int size);
    internal void WriteArrayStart(ObjectType type, int size);
    internal void Write2DArrayStart(ObjectType type, int xSize, int ySize);
    internal void Write(ObjectType type);
    internal void Write(MemberName name);
    internal void Write(Token token);
    internal void Write(Declaration decl);
    internal void Write(MemberInfo member);
    internal void Write(Single[] array);
    internal void Write(Int32[] array);
    internal void Write(Int64[] array);
    internal void Write(Double[] array);
    public virtual void Write(Char[] array);
    public virtual void Write(Byte[] array);
    public void Write(Boolean[] array);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.PersistenceConstants : object {
    internal static int NullReferenceID;
    internal static int MajorVersion;
    internal static int MinorVersion;
    private static PersistenceConstants();
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.PersistenceFlags : Enum {
    public int value__;
    public static PersistenceFlags None;
    public static PersistenceFlags Seekable;
}
internal interface Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.PersistenceHelper {
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.PersistenceValidator : object {
    [ConditionalAttribute("DEBUG")]
internal static void VerifyReadOrWrite(MemberInfo CurrentMember, PersistMethod persistMethod);
    [ConditionalAttribute("DEBUG")]
internal static void VerifyReadOrWrite(MemberInfo currentMember, PersistMethod persistMethod, Token primitiveType, ObjectType containedType);
    [ConditionalAttribute("DEBUG")]
internal static void VerifyDeclaredType(MemberInfo currentMember, ObjectType persistedType, Dictionary`2<ObjectType, Declaration> declarations, bool verify);
    [ConditionalAttribute("DEBUG")]
internal static void VerifyDeclaredType(MemberInfo currentMember, ObjectType persistedType, Dictionary`2<ObjectType, Declaration> declarations);
    private static bool VerifyDeclaredType(ObjectType declaredType, ObjectType persistedType, Dictionary`2<ObjectType, Declaration> declarations);
    internal static bool CheckSpecialCase(MemberInfo currentMember, ObjectType persistedType);
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.PersistMethod : Enum {
    public int value__;
    public static PersistMethod PrimitiveGenericList;
    public static PersistMethod PrimitiveList;
    public static PersistMethod PrimitiveArray;
    public static PersistMethod PrimitiveTypedArray;
    public static PersistMethod GenericListOfReferences;
    public static PersistMethod ListOfReferences;
    public static PersistMethod Reference;
    public static PersistMethod GenericListOfGlobalReferences;
    public static PersistMethod ListOfGlobalReferences;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ProcessingRIFObjectCreator : object {
    private IDOwner m_parentIDOwner;
    private ReportItem m_parentReportItem;
    internal ProcessingRIFObjectCreator(IDOwner parentIDOwner, ReportItem parentReportItem);
    public sealed virtual IPersistable CreateRIFObject(ObjectType objectType, IntermediateFormatReader& context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ReadOnlyMemberInfo : MemberInfo {
    internal bool ReadOnly { get; }
    internal ReadOnlyMemberInfo(MemberName name, Token token);
    internal ReadOnlyMemberInfo(MemberName name, ObjectType type);
    internal ReadOnlyMemberInfo(MemberName name, ObjectType type, ObjectType containedType);
    internal ReadOnlyMemberInfo(MemberName name, ObjectType type, Token token);
    internal ReadOnlyMemberInfo(MemberName name, ObjectType type, Token token, ObjectType containedType);
    internal virtual bool get_ReadOnly();
}
[AttributeUsageAttribute("256")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.ReferenceAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.SkipMemberStaticValidationAttribute : Attribute {
    private MemberName m_member;
    public MemberName Member { get; }
    internal SkipMemberStaticValidationAttribute(MemberName member);
    public MemberName get_Member();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.SkipStaticValidationAttribute : Attribute {
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.Token : Enum {
    public byte value__;
    public static Token Null;
    public static Token Object;
    public static Token Reference;
    public static Token Enum;
    public static Token GlobalReference;
    public static Token Serializable;
    public static Token DateTimeWithKind;
    public static Token DateTimeOffset;
    public static Token ByteArray;
    public static Token Guid;
    public static Token String;
    public static Token DateTime;
    public static Token TimeSpan;
    public static Token Char;
    public static Token Boolean;
    public static Token Int16;
    public static Token Int32;
    public static Token Int64;
    public static Token UInt16;
    public static Token UInt32;
    public static Token UInt64;
    public static Token Byte;
    public static Token SByte;
    public static Token Single;
    public static Token Double;
    public static Token Decimal;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.VersionStamp : object {
    private static Byte[] Stamp;
    private static VersionStamp();
    internal static Byte[] GetBytes();
    internal static bool Validate(Byte[] stamp);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.PinLabel : GaugePanelStyleContainer {
    private PinLabelExprHost m_exprHost;
    private static Declaration m_Declaration;
    private ExpressionInfo m_text;
    private ExpressionInfo m_allowUpsideDown;
    private ExpressionInfo m_distanceFromScale;
    private ExpressionInfo m_fontAngle;
    private ExpressionInfo m_placement;
    private ExpressionInfo m_rotateLabel;
    private ExpressionInfo m_useFontPercent;
    internal ExpressionInfo Text { get; internal set; }
    internal ExpressionInfo AllowUpsideDown { get; internal set; }
    internal ExpressionInfo DistanceFromScale { get; internal set; }
    internal ExpressionInfo FontAngle { get; internal set; }
    internal ExpressionInfo Placement { get; internal set; }
    internal ExpressionInfo RotateLabel { get; internal set; }
    internal ExpressionInfo UseFontPercent { get; internal set; }
    internal string OwnerName { get; }
    internal PinLabelExprHost ExprHost { get; }
    internal PinLabel(GaugePanel gaugePanel);
    private static PinLabel();
    internal ExpressionInfo get_Text();
    internal void set_Text(ExpressionInfo value);
    internal ExpressionInfo get_AllowUpsideDown();
    internal void set_AllowUpsideDown(ExpressionInfo value);
    internal ExpressionInfo get_DistanceFromScale();
    internal void set_DistanceFromScale(ExpressionInfo value);
    internal ExpressionInfo get_FontAngle();
    internal void set_FontAngle(ExpressionInfo value);
    internal ExpressionInfo get_Placement();
    internal void set_Placement(ExpressionInfo value);
    internal ExpressionInfo get_RotateLabel();
    internal void set_RotateLabel(ExpressionInfo value);
    internal ExpressionInfo get_UseFontPercent();
    internal void set_UseFontPercent(ExpressionInfo value);
    internal string get_OwnerName();
    internal PinLabelExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(PinLabelExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal string EvaluateText(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateAllowUpsideDown(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateDistanceFromScale(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateFontAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeLabelPlacements EvaluatePlacement(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateRotateLabel(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateUseFontPercent(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.PointerCap : GaugePanelStyleContainer {
    private PointerCapExprHost m_exprHost;
    private static Declaration m_Declaration;
    private CapImage m_capImage;
    private ExpressionInfo m_onTop;
    private ExpressionInfo m_reflection;
    private ExpressionInfo m_capStyle;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_width;
    internal CapImage CapImage { get; internal set; }
    internal ExpressionInfo OnTop { get; internal set; }
    internal ExpressionInfo Reflection { get; internal set; }
    internal ExpressionInfo CapStyle { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo Width { get; internal set; }
    internal string OwnerName { get; }
    internal PointerCapExprHost ExprHost { get; }
    internal PointerCap(GaugePanel gaugePanel);
    private static PointerCap();
    internal CapImage get_CapImage();
    internal void set_CapImage(CapImage value);
    internal ExpressionInfo get_OnTop();
    internal void set_OnTop(ExpressionInfo value);
    internal ExpressionInfo get_Reflection();
    internal void set_Reflection(ExpressionInfo value);
    internal ExpressionInfo get_CapStyle();
    internal void set_CapStyle(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_Width();
    internal void set_Width(ExpressionInfo value);
    internal string get_OwnerName();
    internal PointerCapExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(PointerCapExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal bool EvaluateOnTop(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateReflection(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeCapStyles EvaluateCapStyle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.PointerImage : BaseGaugeImage {
    private static Declaration m_Declaration;
    private ExpressionInfo m_hueColor;
    private ExpressionInfo m_transparency;
    private ExpressionInfo m_offsetX;
    private ExpressionInfo m_offsetY;
    internal ExpressionInfo HueColor { get; internal set; }
    internal ExpressionInfo Transparency { get; internal set; }
    internal ExpressionInfo OffsetX { get; internal set; }
    internal ExpressionInfo OffsetY { get; internal set; }
    internal PointerImage(GaugePanel gaugePanel);
    private static PointerImage();
    internal ExpressionInfo get_HueColor();
    internal void set_HueColor(ExpressionInfo value);
    internal ExpressionInfo get_Transparency();
    internal void set_Transparency(ExpressionInfo value);
    internal ExpressionInfo get_OffsetX();
    internal void set_OffsetX(ExpressionInfo value);
    internal ExpressionInfo get_OffsetY();
    internal void set_OffsetY(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(PointerImageExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal string EvaluateHueColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateTransparency(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateOffsetX(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateOffsetY(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Previous : DataAggregate {
    [StaticReferenceAttribute]
private OnDemandProcessingContext m_odpContext;
    private Dictionary`2<List`1<object>, object> m_previousValues;
    private Dictionary`2<List`1<object>, object> m_values;
    private int m_startIndex;
    private bool m_isScopedInEvaluationScope;
    private object m_previous;
    private bool m_previousEnabled;
    private bool m_hasNoExplicitScope;
    private object m_value;
    private static Declaration m_declaration;
    public int Size { get; }
    internal Previous(OnDemandProcessingContext odpContext, int startIndex, bool isScopedInEvaluationScope, bool hasNoExplicitScope);
    private static Previous();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ProcessingIntermediateFormatVersion : object {
    private IntermediateFormatVersion m_version;
    internal int Major { get; internal set; }
    internal int Minor { get; internal set; }
    internal int Build { get; internal set; }
    internal bool IsOldVersion { get; }
    internal bool IsRIF11_orOlder { get; }
    internal bool IsRIF11_orNewer { get; }
    internal bool IsRS2000_Beta2_orOlder { get; }
    internal bool IsRS2000_WithSpecialRecursiveAggregates { get; }
    internal bool IsRS2000_WithNewChartYAxis { get; }
    internal bool IsRS2000_WithOtherPageChunkSplit { get; }
    internal bool IsRS2000_RTM_orOlder { get; }
    internal bool IsRS2000_RTM_orNewer { get; }
    internal bool IsRS2000_WithUnusedFieldsOptimization { get; }
    internal bool IsRS2000_WithImageInfo { get; }
    internal bool IsRS2005_Beta2_orOlder { get; }
    internal bool IsRS2005_WithMultipleActions { get; }
    internal bool IsRS2005_WithSpecialChunkSplit { get; }
    internal bool IsRS2005_IDW9_orOlder { get; }
    internal bool IsRS2005_WithTableDetailFix { get; }
    internal bool IsRS2005_WithPHFChunks { get; }
    internal bool IsRS2005_WithTableOptimizations { get; }
    internal bool IsRS2005_WithSharedDrillthroughParams { get; }
    internal bool IsRS2005_WithSimpleTextBoxOptimizations { get; }
    internal bool IsRS2005_WithChartHeadingInstanceFix { get; }
    internal bool IsRS2005_WithXmlDataElementOutputChange { get; }
    internal bool Is_WithUserSort { get; }
    internal ProcessingIntermediateFormatVersion(IntermediateFormatVersion version);
    internal int get_Major();
    internal void set_Major(int value);
    internal int get_Minor();
    internal void set_Minor(int value);
    internal int get_Build();
    internal void set_Build(int value);
    internal bool get_IsOldVersion();
    internal bool get_IsRIF11_orOlder();
    internal bool get_IsRIF11_orNewer();
    internal bool get_IsRS2000_Beta2_orOlder();
    internal bool get_IsRS2000_WithSpecialRecursiveAggregates();
    internal bool get_IsRS2000_WithNewChartYAxis();
    internal bool get_IsRS2000_WithOtherPageChunkSplit();
    internal bool get_IsRS2000_RTM_orOlder();
    internal bool get_IsRS2000_RTM_orNewer();
    internal bool get_IsRS2000_WithUnusedFieldsOptimization();
    internal bool get_IsRS2000_WithImageInfo();
    internal bool get_IsRS2005_Beta2_orOlder();
    internal bool get_IsRS2005_WithMultipleActions();
    internal bool get_IsRS2005_WithSpecialChunkSplit();
    internal bool get_IsRS2005_IDW9_orOlder();
    internal bool get_IsRS2005_WithTableDetailFix();
    internal bool get_IsRS2005_WithPHFChunks();
    internal bool get_IsRS2005_WithTableOptimizations();
    internal bool get_IsRS2005_WithSharedDrillthroughParams();
    internal bool get_IsRS2005_WithSimpleTextBoxOptimizations();
    internal bool get_IsRS2005_WithChartHeadingInstanceFix();
    internal bool get_IsRS2005_WithXmlDataElementOutputChange();
    internal bool get_Is_WithUserSort();
    public virtual string ToString();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RadialGauge : Gauge {
    private static Declaration m_Declaration;
    private List`1<RadialScale> m_gaugeScales;
    private ExpressionInfo m_pivotX;
    private ExpressionInfo m_pivotY;
    internal List`1<RadialScale> GaugeScales { get; internal set; }
    internal ExpressionInfo PivotX { get; internal set; }
    internal ExpressionInfo PivotY { get; internal set; }
    internal RadialGauge(GaugePanel gaugePanel, int id);
    private static RadialGauge();
    internal List`1<RadialScale> get_GaugeScales();
    internal void set_GaugeScales(List`1<RadialScale> value);
    internal ExpressionInfo get_PivotX();
    internal void set_PivotX(ExpressionInfo value);
    internal ExpressionInfo get_PivotY();
    internal void set_PivotY(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(RadialGaugeExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluatePivotX(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluatePivotY(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RadialPointer : GaugePointer {
    private static Declaration m_Declaration;
    private ExpressionInfo m_type;
    private PointerCap m_pointerCap;
    private ExpressionInfo m_needleStyle;
    internal ExpressionInfo Type { get; internal set; }
    internal PointerCap PointerCap { get; internal set; }
    internal ExpressionInfo NeedleStyle { get; internal set; }
    internal RadialPointer(GaugePanel gaugePanel, int id);
    private static RadialPointer();
    internal ExpressionInfo get_Type();
    internal void set_Type(ExpressionInfo value);
    internal PointerCap get_PointerCap();
    internal void set_PointerCap(PointerCap value);
    internal ExpressionInfo get_NeedleStyle();
    internal void set_NeedleStyle(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(RadialPointerExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal RadialPointerTypes EvaluateType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal RadialPointerNeedleStyles EvaluateNeedleStyle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RadialScale : GaugeScale {
    private static Declaration m_Declaration;
    private List`1<RadialPointer> m_gaugePointers;
    private ExpressionInfo m_radius;
    private ExpressionInfo m_startAngle;
    private ExpressionInfo m_sweepAngle;
    internal List`1<RadialPointer> GaugePointers { get; internal set; }
    internal ExpressionInfo Radius { get; internal set; }
    internal ExpressionInfo StartAngle { get; internal set; }
    internal ExpressionInfo SweepAngle { get; internal set; }
    internal RadialScale(GaugePanel gaugePanel, int id);
    private static RadialScale();
    internal List`1<RadialPointer> get_GaugePointers();
    internal void set_GaugePointers(List`1<RadialPointer> value);
    internal ExpressionInfo get_Radius();
    internal void set_Radius(ExpressionInfo value);
    internal ExpressionInfo get_StartAngle();
    internal void set_StartAngle(ExpressionInfo value);
    internal ExpressionInfo get_SweepAngle();
    internal void set_SweepAngle(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(RadialScaleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluateRadius(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateStartAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateSweepAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RecordField : object {
    private object m_fieldValue;
    private bool m_isAggregationField;
    private List`1<object> m_fieldPropertyValues;
    private DataFieldStatus m_fieldStatus;
    private static Declaration m_Declaration;
    internal object FieldValue { get; internal set; }
    internal bool IsAggregationField { get; internal set; }
    internal List`1<object> FieldPropertyValues { get; internal set; }
    internal bool IsOverflow { get; }
    internal bool IsUnSupportedDataType { get; }
    internal bool IsError { get; }
    internal DataFieldStatus FieldStatus { get; internal set; }
    private static RecordField();
    internal object get_FieldValue();
    internal void set_FieldValue(object value);
    internal bool get_IsAggregationField();
    internal void set_IsAggregationField(bool value);
    internal List`1<object> get_FieldPropertyValues();
    internal void set_FieldPropertyValues(List`1<object> value);
    internal bool get_IsOverflow();
    internal bool get_IsUnSupportedDataType();
    internal bool get_IsError();
    internal DataFieldStatus get_FieldStatus();
    internal void set_FieldStatus(DataFieldStatus value);
    [SkipMemberStaticValidationAttribute("9")]
internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RecordRow : object {
    private RecordField[] m_recordFields;
    private bool m_isAggregateRow;
    private int m_aggregationFieldCount;
    private long m_streamPosition;
    private static Declaration m_Declaration;
    internal RecordField[] RecordFields { get; internal set; }
    internal bool IsAggregateRow { get; internal set; }
    internal int AggregationFieldCount { get; internal set; }
    internal long StreamPosition { get; internal set; }
    private static RecordRow();
    internal RecordField[] get_RecordFields();
    internal void set_RecordFields(RecordField[] value);
    internal bool get_IsAggregateRow();
    internal void set_IsAggregateRow(bool value);
    internal int get_AggregationFieldCount();
    internal void set_AggregationFieldCount(int value);
    internal long get_StreamPosition();
    internal void set_StreamPosition(long value);
    internal object GetFieldValue(int aliasIndex);
    internal bool IsAggregationField(int aliasIndex);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RecordSetInfo : object {
    private bool m_readerExtensionsSupported;
    private RecordSetPropertyNamesList m_fieldPropertyNames;
    private CompareOptions m_compareOptions;
    private bool m_validCompareOptions;
    private static Declaration m_Declaration;
    internal bool ReaderExtensionsSupported { get; internal set; }
    internal RecordSetPropertyNamesList FieldPropertyNames { get; internal set; }
    internal CompareOptions CompareOptions { get; internal set; }
    internal bool ValidCompareOptions { get; internal set; }
    internal RecordSetInfo(bool readerExtensionsSupported, CompareOptions compareOptions);
    private static RecordSetInfo();
    internal bool get_ReaderExtensionsSupported();
    internal void set_ReaderExtensionsSupported(bool value);
    internal RecordSetPropertyNamesList get_FieldPropertyNames();
    internal void set_FieldPropertyNames(RecordSetPropertyNamesList value);
    internal CompareOptions get_CompareOptions();
    internal void set_CompareOptions(CompareOptions value);
    internal bool get_ValidCompareOptions();
    internal void set_ValidCompareOptions(bool value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RecordSetPropertyNames : object {
    private List`1<string> m_propertyNames;
    private static Declaration m_Declaration;
    internal List`1<string> PropertyNames { get; internal set; }
    private static RecordSetPropertyNames();
    internal List`1<string> get_PropertyNames();
    internal void set_PropertyNames(List`1<string> value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RecordSetPropertyNamesList : ArrayList {
    internal RecordSetPropertyNames Item { get; }
    internal RecordSetPropertyNamesList(int capacity);
    internal RecordSetPropertyNames get_Item(int index);
    internal List`1<string> GetPropertyNames(int aliasIndex);
    internal string GetPropertyName(int aliasIndex, int propertyIndex);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Rectangle : ReportItem {
    private ReportItemCollection m_reportItems;
    private PageBreakLocation m_pageBreakLocation;
    private int m_linkToChild;
    private bool m_keepTogether;
    private bool m_omitBorderOnPageBreak;
    private bool m_isSimple;
    private PageBreakStates m_pagebreakState;
    private ReportItemExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal ReportItemCollection ReportItems { get; internal set; }
    public PageBreakLocation PageBreakLocation { get; public set; }
    internal int LinkToChild { get; internal set; }
    internal bool KeepTogether { get; internal set; }
    internal bool OmitBorderOnPageBreak { get; internal set; }
    internal bool IsSimple { get; internal set; }
    internal DataElementOutputTypes DataElementOutputDefault { get; }
    internal Rectangle(ReportItem parent);
    internal Rectangle(int id, int idForReportItems, ReportItem parent);
    private static Rectangle();
    internal virtual ObjectType get_ObjectType();
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    public sealed virtual PageBreakLocation get_PageBreakLocation();
    public sealed virtual void set_PageBreakLocation(PageBreakLocation value);
    internal int get_LinkToChild();
    internal void set_LinkToChild(int value);
    internal bool get_KeepTogether();
    internal void set_KeepTogether(bool value);
    internal bool get_OmitBorderOnPageBreak();
    internal void set_OmitBorderOnPageBreak(bool value);
    internal bool get_IsSimple();
    internal void set_IsSimple(bool value);
    internal virtual void CalculateSizes(double width, double height, InitializationContext context, bool overwrite);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual DataElementOutputTypes get_DataElementOutputDefault();
    internal virtual void InitializeRVDirectionDependentItems(InitializationContext context);
    internal virtual void DetermineGroupingExprValueCount(InitializationContext context, int groupingExprCount);
    internal bool ContainsDataRegionOrSubReport();
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.IgnorePageBreaks();
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.HasPageBreaks(bool atStart);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RenderingPagesRanges : ValueType {
    private int m_startPage;
    private int m_endPage;
    private static Declaration m_Declaration;
    internal int StartPage { get; internal set; }
    internal int StartRow { get; internal set; }
    internal int EndPage { get; internal set; }
    internal int NumberOfDetails { get; internal set; }
    private static RenderingPagesRanges();
    internal int get_StartPage();
    internal void set_StartPage(int value);
    internal int get_StartRow();
    internal void set_StartRow(int value);
    internal int get_EndPage();
    internal void set_EndPage(int value);
    internal int get_NumberOfDetails();
    internal void set_NumberOfDetails(int value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RenderingPagesRangesList : ArrayList {
    internal RenderingPagesRanges Item { get; }
    internal RenderingPagesRangesList(int capacity);
    internal RenderingPagesRanges get_Item(int index);
    internal void MoveAllToFirstPage(int totalCount);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Report : ReportItem {
    private bool m_consumeContainerWhitespace;
    private ProcessingIntermediateFormatVersion m_intermediateFormatVersion;
    private Guid m_reportVersion;
    private string m_author;
    private int m_autoRefresh;
    private Dictionary`2<string, ImageInfo> m_embeddedImages;
    private Page m_page;
    private ReportItemCollection m_reportItems;
    private List`1<DataSource> m_dataSources;
    private List`1<Variable> m_variables;
    private bool m_deferVariableEvaluation;
    private List`1<DataAggregateInfo> m_pageAggregates;
    private Byte[] m_exprCompiledCode;
    private bool m_exprCompiledCodeGeneratedWithRefusedPermissions;
    private bool m_mergeOnePass;
    private bool m_pageMergeOnePass;
    private bool m_subReportMergeTransactions;
    private bool m_needPostGroupProcessing;
    private bool m_hasPostSortAggregates;
    private bool m_hasReportItemReferences;
    private ShowHideTypes m_showHideType;
    private int m_lastID;
    private int m_bodyID;
    [ReferenceAttribute]
private List`1<SubReport> m_subReports;
    private bool m_hasImageStreams;
    private bool m_hasLabels;
    private bool m_hasBookmarks;
    private bool m_parametersNotUsedInQuery;
    private List`1<ParameterDef> m_parameters;
    private string m_oneDataSetName;
    private List`1<string> m_codeModules;
    private List`1<CodeClass> m_codeClasses;
    private bool m_hasSpecialRecursiveAggregates;
    private ExpressionInfo m_language;
    private string m_dataTransform;
    private string m_dataSchema;
    private bool m_dataElementStyleAttribute;
    private string m_code;
    private bool m_hasUserSortFilter;
    private bool m_hasPreviousAggregates;
    private InScopeSortFilterHashtable m_nonDetailSortFiltersInScope;
    private InScopeSortFilterHashtable m_detailSortFiltersInScope;
    private List`1<DataRegion> m_topLevelDataRegions;
    [ReferenceAttribute]
private DataSet m_firstDataSet;
    [ReferenceAttribute]
private DataRegion m_topLeftDataRegion;
    private int m_dataSetsNotOnlyUsedInParameters;
    private List`1<TextBox> m_inScopeTextBoxesInBody;
    private List`1<TextBox> m_inScopeTextBoxesInPage;
    private List`1<IInScopeEventSource> m_inScopeEventSources;
    private List`1<IInScopeEventSource> m_eventSources;
    private List`1<ReportHierarchyNode> m_groupsWithVariables;
    private Byte[] m_flattenedDatasetDependencyMatrix;
    private int m_firstDataSetIndexToProcess;
    private Byte[] m_textboxesInScope;
    private Byte[] m_variablesInScope;
    private int m_lastAggregateID;
    private double m_topLeftDataRegionAbsTop;
    private double m_topLeftDataRegionAbsLeft;
    private static Declaration m_Declaration;
    private ReportExprHost m_exprHost;
    private Dictionary`2<string, DataSet> m_mappingNameToDataSet;
    private List`1<int> m_mappingDataSetIndexToDataSourceIndex;
    private List`1<DataSet> m_mappingDataSetIndexToDataSet;
    private bool m_reportOrDescendentHasUserSortFilter;
    private ReportSize m_interactiveHeightForRendering;
    private ReportSize m_interactiveWidthForRendering;
    internal ObjectType ObjectType { get; }
    internal string DataElementNameDefault { get; }
    internal bool ConsumeContainerWhitespace { get; internal set; }
    internal ProcessingIntermediateFormatVersion IntermediateFormatVersion { get; }
    internal Guid ReportVersion { get; }
    internal string Author { get; internal set; }
    internal int AutoRefresh { get; internal set; }
    internal Dictionary`2<string, ImageInfo> EmbeddedImages { get; internal set; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal List`1<DataSource> DataSources { get; internal set; }
    internal int DataSourceCount { get; }
    internal int DataSetCount { get; }
    internal List`1<DataAggregateInfo> PageAggregates { get; internal set; }
    internal Byte[] CompiledCode { get; internal set; }
    internal bool CompiledCodeGeneratedWithRefusedPermissions { get; internal set; }
    internal bool MergeOnePass { get; internal set; }
    internal bool PageMergeOnePass { get; internal set; }
    internal bool SubReportMergeTransactions { get; internal set; }
    internal bool NeedPostGroupProcessing { get; internal set; }
    internal bool HasPostSortAggregates { get; internal set; }
    internal bool HasReportItemReferences { get; internal set; }
    internal int DataSetsNotOnlyUsedInParameters { get; internal set; }
    internal ShowHideTypes ShowHideType { get; internal set; }
    internal bool ParametersNotUsedInQuery { get; internal set; }
    internal int LastID { get; internal set; }
    internal int BodyID { get; internal set; }
    internal List`1<SubReport> SubReports { get; internal set; }
    internal bool HasImageStreams { get; internal set; }
    internal bool HasLabels { get; internal set; }
    internal bool HasBookmarks { get; internal set; }
    internal Page Page { get; internal set; }
    internal double PageSectionWidth { get; }
    internal List`1<ParameterDef> Parameters { get; internal set; }
    internal string OneDataSetName { get; internal set; }
    internal List`1<string> CodeModules { get; internal set; }
    internal List`1<CodeClass> CodeClasses { get; internal set; }
    internal bool HasSpecialRecursiveAggregates { get; internal set; }
    internal bool HasPreviousAggregates { get; internal set; }
    internal bool HasVariables { get; }
    internal ExpressionInfo Language { get; internal set; }
    internal ReportExprHost ReportExprHost { get; }
    internal string DataTransform { get; internal set; }
    internal string DataSchema { get; internal set; }
    internal bool DataElementStyleAttribute { get; internal set; }
    internal string Code { get; internal set; }
    internal bool HasUserSortFilter { get; internal set; }
    internal bool ReportOrDescendentHasUserSortFilter { get; internal set; }
    internal InScopeSortFilterHashtable NonDetailSortFiltersInScope { get; internal set; }
    internal InScopeSortFilterHashtable DetailSortFiltersInScope { get; internal set; }
    internal string ExprHostAssemblyName { get; }
    internal int LastAggregateID { get; internal set; }
    internal List`1<Variable> Variables { get; internal set; }
    internal bool DeferVariableEvaluation { get; internal set; }
    internal ReportSize InteractiveHeightForRendering { get; internal set; }
    internal ReportSize InteractiveWidthForRendering { get; internal set; }
    internal bool HasSubReports { get; }
    internal Dictionary`2<string, DataSet> MappingNameToDataSet { get; }
    internal List`1<int> MappingDataSetIndexToDataSourceIndex { get; }
    internal List`1<DataSet> MappingDataSetIndexToDataSet { get; }
    internal List`1<DataRegion> TopLevelDataRegions { get; internal set; }
    internal DataSet FirstDataSet { get; internal set; }
    internal int FirstDataSetIndexToProcess { get; }
    internal List`1<IInScopeEventSource> InScopeEventSources { get; }
    internal List`1<IInScopeEventSource> EventSources { get; }
    internal List`1<ReportHierarchyNode> GroupsWithVariables { get; }
    private bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.NeedToCacheDataRows { get; private set; }
    internal Report(int id, int idForReportItems);
    internal Report(ReportItem parent, IntermediateFormatVersion version);
    private static Report();
    internal virtual ObjectType get_ObjectType();
    internal virtual string get_DataElementNameDefault();
    internal bool get_ConsumeContainerWhitespace();
    internal void set_ConsumeContainerWhitespace(bool value);
    internal ProcessingIntermediateFormatVersion get_IntermediateFormatVersion();
    internal Guid get_ReportVersion();
    internal string get_Author();
    internal void set_Author(string value);
    internal int get_AutoRefresh();
    internal void set_AutoRefresh(int value);
    internal Dictionary`2<string, ImageInfo> get_EmbeddedImages();
    internal void set_EmbeddedImages(Dictionary`2<string, ImageInfo> value);
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal List`1<DataSource> get_DataSources();
    internal void set_DataSources(List`1<DataSource> value);
    internal int get_DataSourceCount();
    internal int get_DataSetCount();
    internal List`1<DataAggregateInfo> get_PageAggregates();
    internal void set_PageAggregates(List`1<DataAggregateInfo> value);
    internal Byte[] get_CompiledCode();
    internal void set_CompiledCode(Byte[] value);
    internal bool get_CompiledCodeGeneratedWithRefusedPermissions();
    internal void set_CompiledCodeGeneratedWithRefusedPermissions(bool value);
    internal bool get_MergeOnePass();
    internal void set_MergeOnePass(bool value);
    internal bool get_PageMergeOnePass();
    internal void set_PageMergeOnePass(bool value);
    internal bool get_SubReportMergeTransactions();
    internal void set_SubReportMergeTransactions(bool value);
    internal bool get_NeedPostGroupProcessing();
    internal void set_NeedPostGroupProcessing(bool value);
    internal bool get_HasPostSortAggregates();
    internal void set_HasPostSortAggregates(bool value);
    internal bool get_HasReportItemReferences();
    internal void set_HasReportItemReferences(bool value);
    internal int get_DataSetsNotOnlyUsedInParameters();
    internal void set_DataSetsNotOnlyUsedInParameters(int value);
    internal ShowHideTypes get_ShowHideType();
    internal void set_ShowHideType(ShowHideTypes value);
    internal bool get_ParametersNotUsedInQuery();
    internal void set_ParametersNotUsedInQuery(bool value);
    internal int get_LastID();
    internal void set_LastID(int value);
    internal int get_BodyID();
    internal void set_BodyID(int value);
    internal List`1<SubReport> get_SubReports();
    internal void set_SubReports(List`1<SubReport> value);
    internal bool get_HasImageStreams();
    internal void set_HasImageStreams(bool value);
    internal bool get_HasLabels();
    internal void set_HasLabels(bool value);
    internal bool get_HasBookmarks();
    internal void set_HasBookmarks(bool value);
    internal Page get_Page();
    internal void set_Page(Page value);
    internal double get_PageSectionWidth();
    internal List`1<ParameterDef> get_Parameters();
    internal void set_Parameters(List`1<ParameterDef> value);
    internal string get_OneDataSetName();
    internal void set_OneDataSetName(string value);
    internal List`1<string> get_CodeModules();
    internal void set_CodeModules(List`1<string> value);
    internal List`1<CodeClass> get_CodeClasses();
    internal void set_CodeClasses(List`1<CodeClass> value);
    internal bool get_HasSpecialRecursiveAggregates();
    internal void set_HasSpecialRecursiveAggregates(bool value);
    internal bool get_HasPreviousAggregates();
    internal void set_HasPreviousAggregates(bool value);
    internal bool get_HasVariables();
    internal ExpressionInfo get_Language();
    internal void set_Language(ExpressionInfo value);
    internal ReportExprHost get_ReportExprHost();
    internal string get_DataTransform();
    internal void set_DataTransform(string value);
    internal string get_DataSchema();
    internal void set_DataSchema(string value);
    internal bool get_DataElementStyleAttribute();
    internal void set_DataElementStyleAttribute(bool value);
    internal string get_Code();
    internal void set_Code(string value);
    internal bool get_HasUserSortFilter();
    internal void set_HasUserSortFilter(bool value);
    internal bool get_ReportOrDescendentHasUserSortFilter();
    internal void set_ReportOrDescendentHasUserSortFilter(bool value);
    internal InScopeSortFilterHashtable get_NonDetailSortFiltersInScope();
    internal void set_NonDetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal InScopeSortFilterHashtable get_DetailSortFiltersInScope();
    internal void set_DetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal string get_ExprHostAssemblyName();
    internal int get_LastAggregateID();
    internal void set_LastAggregateID(int value);
    internal List`1<Variable> get_Variables();
    internal void set_Variables(List`1<Variable> value);
    internal bool get_DeferVariableEvaluation();
    internal void set_DeferVariableEvaluation(bool value);
    internal ReportSize get_InteractiveHeightForRendering();
    internal void set_InteractiveHeightForRendering(ReportSize value);
    internal ReportSize get_InteractiveWidthForRendering();
    internal void set_InteractiveWidthForRendering(ReportSize value);
    internal bool get_HasSubReports();
    internal Dictionary`2<string, DataSet> get_MappingNameToDataSet();
    internal List`1<int> get_MappingDataSetIndexToDataSourceIndex();
    internal List`1<DataSet> get_MappingDataSetIndexToDataSet();
    internal List`1<DataRegion> get_TopLevelDataRegions();
    internal void set_TopLevelDataRegions(List`1<DataRegion> value);
    internal DataSet get_FirstDataSet();
    internal void set_FirstDataSet(DataSet value);
    internal int get_FirstDataSetIndexToProcess();
    internal List`1<IInScopeEventSource> get_InScopeEventSources();
    internal List`1<IInScopeEventSource> get_EventSources();
    internal List`1<ReportHierarchyNode> get_GroupsWithVariables();
    internal virtual bool Initialize(InitializationContext context);
    internal void BodyInitialize(InitializationContext context);
    internal void UpdateTopLeftDataRegion(InitializationContext context, DataRegion dataRegion);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.get_NeedToCacheDataRows();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.set_NeedToCacheDataRows(bool value);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.VariableInScope(int sequenceIndex);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.TextboxInScope(int sequenceIndex);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeTextBox(TextBox textbox);
    internal void AddInScopeTextBoxInBody(TextBox textbox);
    internal void AddInScopeTextBoxInPage(TextBox textbox);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.ResetTextBoxImpls(OnDemandProcessingContext context);
    internal void ResetTextBoxImplsInBody(OnDemandProcessingContext context);
    internal void ResetTextBoxImplsInPage(OnDemandProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeEventSource(IInScopeEventSource eventSource);
    internal void AddEventSource(IInScopeEventSource eventSource);
    internal void AddGroupWithVariables(ReportHierarchyNode node);
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetAggregateList();
    private sealed virtual override List`1<DataAggregateInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.GetPostSortAggregateList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IAggregateHolder.ClearIfEmpty();
    private void AllocateDatasetDependencyMatrix();
    private void CalculateOffsetAndMask(int datasetIndex, int referencedDatasetIndex, Int32& byteOffset, Byte& bitMask);
    internal void SetDatasetDependency(int datasetIndex, int referencedDatasetIndex, bool clearDependency);
    internal bool HasDatasetDependency(int datasetIndex, int referencedDatasetIndex);
    internal void ClearDatasetParameterOnlyDependencies(int datasetIndex);
    internal int CalculateDatasetRootIndex(int suggestedRootIndex, Boolean[] exclusionList, int unprocessedDataSetCount);
    internal void Phase4_DetermineFirstDatasetToProcess();
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal void RegisterDataSetScopedAggregates(OnDemandProcessingContext odpContext);
    private void GenerateDataSetMappings();
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.ReportHierarchyNode : IDOwner {
    protected bool m_isColumn;
    protected int m_level;
    protected Grouping m_grouping;
    protected Sorting m_sorting;
    protected int m_memberCellIndex;
    protected int m_exprHostID;
    protected int m_rowSpan;
    protected int m_colSpan;
    protected bool m_isAutoSubtotal;
    protected List`1<RunningValueInfo> m_runningValues;
    protected DataValueList m_customProperties;
    [ReferenceAttribute]
protected DataRegion m_dataRegionDef;
    private int m_indexInCollection;
    private bool m_needToCacheDataRows;
    private List`1<IInScopeEventSource> m_inScopeEventSources;
    private Byte[] m_textboxesInScope;
    private Byte[] m_variablesInScope;
    private int m_hierarchyDynamicIndex;
    private int m_hierarchyPathIndex;
    private GroupingList m_hierarchyParentGroups;
    private static Declaration m_Declaration;
    private IMemberNode m_exprHost;
    private Nullable`1<bool> m_hasInnerFilters;
    protected HierarchyNodeList m_innerStaticMembersInSameScope;
    protected HierarchyNodeList m_innerDynamicMembers;
    protected int m_cellStartIndex;
    protected int m_cellEndIndex;
    private Dictionary`2[0...,0...] m_cellScopes;
    protected AggregatesImpl m_outermostStaticCellRVCol;
    protected AggregatesImpl[] m_outermostStaticCellScopedRVCollections;
    protected AggregatesImpl m_cellRVCol;
    protected AggregatesImpl[] m_cellScopedRVCollections;
    protected int m_staticRefId;
    private PageBreakStates m_pagebreakState;
    private int m_currentMemberIndex;
    private int m_currentDynamicInstanceCount;
    private List`1<int> m_staticLeafCellIndexes;
    internal HierarchyNodeList InnerHierarchy { get; }
    internal bool IsColumn { get; internal set; }
    internal int Level { get; internal set; }
    internal Grouping Grouping { get; internal set; }
    internal Sorting Sorting { get; internal set; }
    internal int MemberCellIndex { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal int RowSpan { get; internal set; }
    internal int ColSpan { get; internal set; }
    internal bool IsAutoSubtotal { get; internal set; }
    private DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.CustomProperties { get; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.InstancePath { get; }
    internal DataValueList CustomProperties { get; internal set; }
    internal DataRegion DataRegionDef { get; internal set; }
    internal List`1<RunningValueInfo> RunningValues { get; internal set; }
    private PageBreakLocation Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.PageBreakLocation { get; private set; }
    internal bool IsStatic { get; }
    internal bool IsTablixMember { get; }
    internal int CurrentMemberIndex { get; internal set; }
    internal int InstanceCount { get; internal set; }
    public int IndexInCollection { get; public set; }
    public IndexedInCollectionType IndexedInCollectionType { get; }
    internal bool HasInnerDynamic { get; }
    internal HierarchyNodeList InnerDynamicMembers { get; }
    internal HierarchyNodeList InnerStaticMembersInSameScope { get; }
    internal int CellStartIndex { get; }
    internal int CellEndIndex { get; }
    internal bool HasFilters { get; }
    internal bool HasVariables { get; }
    internal bool HasInnerFilters { get; internal set; }
    internal List`1<int> StaticLeafCellIndexes { get; internal set; }
    internal AggregatesImpl OutermostStaticCellRVCol { get; internal set; }
    internal AggregatesImpl[] OutermostStaticCellScopedRVCollections { get; internal set; }
    internal AggregatesImpl CellRVCol { get; internal set; }
    internal AggregatesImpl[] CellScopedRVCollections { get; internal set; }
    internal List`1<IInScopeEventSource> InScopeEventSources { get; }
    internal int HierarchyDynamicIndex { get; internal set; }
    internal int HierarchyPathIndex { get; internal set; }
    internal Dictionary`2[0...,0...] CellScopes { get; internal set; }
    internal GroupingList HierarchyParentGroups { get; }
    private bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.NeedToCacheDataRows { get; private set; }
    internal bool IsNonToggleableHiddenMember { get; }
    private int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.ID { get; }
    internal ReportHierarchyNode(int id, DataRegion dataRegionDef);
    private static ReportHierarchyNode();
    internal abstract virtual HierarchyNodeList get_InnerHierarchy();
    internal bool get_IsColumn();
    internal void set_IsColumn(bool value);
    internal int get_Level();
    internal void set_Level(int value);
    internal Grouping get_Grouping();
    internal void set_Grouping(Grouping value);
    internal Sorting get_Sorting();
    internal void set_Sorting(Sorting value);
    internal int get_MemberCellIndex();
    internal void set_MemberCellIndex(int value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal int get_RowSpan();
    internal void set_RowSpan(int value);
    internal int get_ColSpan();
    internal void set_ColSpan(int value);
    internal bool get_IsAutoSubtotal();
    internal void set_IsAutoSubtotal(bool value);
    private sealed virtual override DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_CustomProperties();
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_InstancePath();
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal DataRegion get_DataRegionDef();
    internal void set_DataRegionDef(DataRegion value);
    internal List`1<RunningValueInfo> get_RunningValues();
    internal void set_RunningValues(List`1<RunningValueInfo> value);
    private sealed virtual override PageBreakLocation Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.get_PageBreakLocation();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.set_PageBreakLocation(PageBreakLocation value);
    internal bool get_IsStatic();
    internal virtual bool get_IsTablixMember();
    internal int get_CurrentMemberIndex();
    internal void set_CurrentMemberIndex(int value);
    internal int get_InstanceCount();
    internal void set_InstanceCount(int value);
    public sealed virtual int get_IndexInCollection();
    public sealed virtual void set_IndexInCollection(int value);
    public sealed virtual IndexedInCollectionType get_IndexedInCollectionType();
    internal bool get_HasInnerDynamic();
    internal HierarchyNodeList get_InnerDynamicMembers();
    internal HierarchyNodeList get_InnerStaticMembersInSameScope();
    internal int get_CellStartIndex();
    internal int get_CellEndIndex();
    internal bool get_HasFilters();
    internal bool get_HasVariables();
    internal bool get_HasInnerFilters();
    internal void set_HasInnerFilters(bool value);
    internal List`1<int> get_StaticLeafCellIndexes();
    internal void set_StaticLeafCellIndexes(List`1<int> value);
    internal AggregatesImpl get_OutermostStaticCellRVCol();
    internal void set_OutermostStaticCellRVCol(AggregatesImpl value);
    internal AggregatesImpl[] get_OutermostStaticCellScopedRVCollections();
    internal void set_OutermostStaticCellScopedRVCollections(AggregatesImpl[] value);
    internal AggregatesImpl get_CellRVCol();
    internal void set_CellRVCol(AggregatesImpl value);
    internal AggregatesImpl[] get_CellScopedRVCollections();
    internal void set_CellScopedRVCollections(AggregatesImpl[] value);
    internal List`1<IInScopeEventSource> get_InScopeEventSources();
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.VariableInScope(int sequenceIndex);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.TextboxInScope(int sequenceIndex);
    internal int get_HierarchyDynamicIndex();
    internal void set_HierarchyDynamicIndex(int value);
    internal int get_HierarchyPathIndex();
    internal void set_HierarchyPathIndex(int value);
    internal Dictionary`2[0...,0...] get_CellScopes();
    internal void set_CellScopes(Dictionary`2[0...,0...] value);
    internal GroupingList get_HierarchyParentGroups();
    internal Dictionary`2<string, Grouping> GetScopeNames();
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.get_NeedToCacheDataRows();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.set_NeedToCacheDataRows(bool value);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeTextBox(TextBox textbox);
    protected virtual void AddInScopeTextBox(TextBox textbox);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.ResetTextBoxImpls(OnDemandProcessingContext context);
    internal virtual void ResetTextBoxImpls(OnDemandProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRIFReportScope.AddInScopeEventSource(IInScopeEventSource eventSource);
    internal virtual bool InnerInitialize(InitializationContext context);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void PreInitializeDataMember(InitializationContext context);
    internal virtual void PostInitializeDataMember(InitializationContext context);
    internal void CaptureReferencableTextboxes(InitializationContext context);
    protected abstract virtual void DataGroupStart(ExprHostBuilder builder);
    protected abstract virtual int DataGroupEnd(ExprHostBuilder builder);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.IgnorePageBreaks();
    internal virtual bool get_IsNonToggleableHiddenMember();
    protected bool IgnorePageBreaks(Visibility visibility);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.HasPageBreaks(bool atStart);
    private sealed virtual override List`1<RunningValueInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.ClearIfEmpty();
    internal virtual void InitializeRVDirectionDependentItems(InitializationContext context);
    internal virtual void DetermineGroupingExprValueCount(InitializationContext context, int groupingExprCount);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context, DataRegion newContainingRegion);
    internal virtual object PublishClone(AutomaticSubtotalContext context, DataRegion newContainingRegion, bool isSubtotal);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal abstract virtual void SetExprHost(IMemberNode memberExprHost, ObjectModelImpl reportObjectModel);
    protected void MemberNodeSetExprHost(IMemberNode exprHost, ObjectModelImpl reportObjectModel);
    internal abstract virtual void MemberContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    private void CalculateDependencies();
    internal List`1<int> GetCellIndexes();
    internal static bool CalculateDependencies(HierarchyNodeList members, HierarchyNodeList& staticMembersInSameScope, HierarchyNodeList& dynamicMembers);
    private static void GetCellIndexes(HierarchyNodeList innerStaticMemberList, Int32& cellStartIndex, Int32& cellEndIndex);
    internal void ResetInstancePathCascade();
    internal virtual void MoveNextForUserSort(OnDemandProcessingContext odpContext);
    internal void SetUserSortDetailRowIndex(OnDemandProcessingContext odpContext);
    internal virtual void SetMemberInstances(IList`1<DataRegionMemberInstance> memberInstances);
    internal virtual void SetRecursiveParentIndex(int parentInstanceIndex);
    internal virtual void SetInstanceHasRecursiveChildren(Nullable`1<bool> hasRecursiveChildren);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.get_ID();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.SetID(int id);
    private sealed virtual override ObjectType Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ReportInstance : ScopeInstance {
    private bool m_noRows;
    private string m_language;
    private Object[] m_variables;
    private DataSetInstance[] m_dataSetInstances;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal bool NoRows { get; internal set; }
    internal string Language { get; internal set; }
    internal Object[] VariableValues { get; }
    internal ReportInstance(OnDemandProcessingContext odpContext, Report reportDef, ParameterInfoCollection parameters);
    private static ReportInstance();
    internal virtual ObjectType get_ObjectType();
    internal bool get_NoRows();
    internal void set_NoRows(bool value);
    internal string get_Language();
    internal void set_Language(string value);
    internal Object[] get_VariableValues();
    internal DataSetInstance GetDataSetInstance(DataSet dataSet, OnDemandProcessingContext odpContext);
    internal DataSetInstance GetDataSetInstance(int dataSetIndexInCollection, OnDemandProcessingContext odpContext);
    internal void SetDataSetInstance(DataSetInstance dataSetInstance);
    private void InitDataSetInstances(OnDemandProcessingContext odpContext);
    internal IEnumerator GetCachedDataSetInstances();
    internal void InitializeFromSnapshot(OnDemandProcessingContext odpContext);
    internal virtual void AddChildScope(IReference`1<ScopeInstance> child, int indexInCollection);
    internal IReference`1<DataRegionInstance> GetTopLevelDataRegionReference(int indexInCollection);
    internal void SetupEnvironment(OnDemandProcessingContext odpContext);
    internal void CalculateAndStoreReportVariables(OnDemandProcessingContext odpContext);
    internal void ResetReportVariables(OnDemandProcessingContext odpContext);
    internal static Declaration GetDeclaration();
    internal static IReference`1<ReportInstance> CreateInstance(IReportInstanceContainer reportInstanceContainer, OnDemandProcessingContext odpContext, Report reportDef, ParameterInfoCollection parameters);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.ReportItem : IDOwner {
    private static string ZeroSize;
    private static int OverlapDetectionRounding;
    protected string m_name;
    protected Style m_styleClass;
    protected string m_top;
    protected double m_topValue;
    protected string m_left;
    protected double m_leftValue;
    protected string m_height;
    protected double m_heightValue;
    protected string m_width;
    protected double m_widthValue;
    protected int m_zIndex;
    protected ExpressionInfo m_toolTip;
    protected Visibility m_visibility;
    protected ExpressionInfo m_documentMapLabel;
    protected ExpressionInfo m_bookmark;
    protected bool m_repeatedSibling;
    protected bool m_isFullSize;
    private int m_exprHostID;
    protected string m_dataElementName;
    protected DataElementOutputTypes m_dataElementOutput;
    protected DataValueList m_customProperties;
    protected bool m_computed;
    protected string m_repeatWith;
    [ReferenceAttribute]
private IVisibilityOwner m_containingDynamicVisibility;
    [ReferenceAttribute]
private IVisibilityOwner m_containingDynamicRowVisibility;
    [ReferenceAttribute]
private IVisibilityOwner m_containingDynamicColumnVisibility;
    protected ReportItem m_parent;
    private static Declaration m_Declaration;
    private ReportItemExprHost m_exprHost;
    protected bool m_softPageBreak;
    protected bool m_shareMyLastPage;
    protected bool m_startHidden;
    protected double m_topInPage;
    protected double m_bottomInPage;
    private PageTextboxes m_repeatedSiblingTextboxes;
    private int m_staticRefId;
    private IReportScopeInstance m_romScopeInstance;
    private bool m_cachedHiddenValue;
    private bool m_cachedDeepHiddenValue;
    private bool m_cachedStartHiddenValue;
    private bool m_hasCachedHiddenValue;
    private bool m_hasCachedDeepHiddenValue;
    private bool m_hasCachedStartHiddenValue;
    private List`1<InstancePathItem> m_visibilityCacheLastInstancePath;
    protected StyleProperties m_sharedStyleProperties;
    protected bool m_noNonSharedStyleProps;
    protected ReportSize m_heightForRendering;
    protected ReportSize m_widthForRendering;
    protected ReportSize m_topForRendering;
    protected ReportSize m_leftForRendering;
    internal string Name { get; internal set; }
    public Style StyleClass { get; public set; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.InstancePath { get; }
    private ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.ObjectType { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.Name { get; }
    internal string Top { get; internal set; }
    internal double TopValue { get; internal set; }
    internal string Left { get; internal set; }
    internal double LeftValue { get; internal set; }
    internal string Height { get; internal set; }
    internal double HeightValue { get; internal set; }
    internal string Width { get; internal set; }
    internal double WidthValue { get; internal set; }
    internal double AbsoluteTopValue { get; }
    internal double AbsoluteLeftValue { get; }
    internal double AbsoluteBottomValue { get; }
    internal double AbsoluteRightValue { get; }
    internal int ZIndex { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    public Visibility Visibility { get; public set; }
    internal ExpressionInfo DocumentMapLabel { get; internal set; }
    internal ExpressionInfo Bookmark { get; internal set; }
    internal bool RepeatedSibling { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal string DataElementNameDefault { get; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal ReportItem Parent { get; internal set; }
    internal bool Computed { get; internal set; }
    internal bool IsDataRegion { get; }
    internal string RepeatWith { get; internal set; }
    internal ReportItemExprHost ExprHost { get; }
    internal bool SoftPageBreak { get; internal set; }
    internal bool ShareMyLastPage { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal StyleProperties SharedStyleProperties { get; internal set; }
    internal bool NoNonSharedStyleProps { get; internal set; }
    internal ReportSize HeightForRendering { get; internal set; }
    internal ReportSize WidthForRendering { get; internal set; }
    internal ReportSize TopForRendering { get; internal set; }
    internal ReportSize LeftForRendering { get; internal set; }
    internal DataElementOutputTypes DataElementOutputDefault { get; }
    internal double TopInStartPage { get; internal set; }
    internal double BottomInEndPage { get; internal set; }
    private DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.CustomProperties { get; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.InstancePath { get; }
    internal DataValueList CustomProperties { get; internal set; }
    internal PageTextboxes RepeatedSiblingTextboxes { get; internal set; }
    internal ObjectType ObjectType { get; }
    public IReportScopeInstance ROMScopeInstance { get; public set; }
    public IVisibilityOwner ContainingDynamicVisibility { get; public set; }
    public IVisibilityOwner ContainingDynamicColumnVisibility { get; public set; }
    public IVisibilityOwner ContainingDynamicRowVisibility { get; public set; }
    public string SenderUniqueName { get; }
    private int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.ID { get; }
    protected ReportItem(int id, ReportItem parent);
    protected ReportItem(ReportItem parent);
    private static ReportItem();
    internal string get_Name();
    internal void set_Name(string value);
    public sealed virtual Style get_StyleClass();
    public void set_StyleClass(Style value);
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_InstancePath();
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_ObjectType();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_Name();
    internal string get_Top();
    internal void set_Top(string value);
    internal double get_TopValue();
    internal void set_TopValue(double value);
    internal string get_Left();
    internal void set_Left(string value);
    internal double get_LeftValue();
    internal void set_LeftValue(double value);
    internal string get_Height();
    internal void set_Height(string value);
    internal double get_HeightValue();
    internal void set_HeightValue(double value);
    internal string get_Width();
    internal void set_Width(string value);
    internal double get_WidthValue();
    internal void set_WidthValue(double value);
    internal double get_AbsoluteTopValue();
    internal double get_AbsoluteLeftValue();
    internal double get_AbsoluteBottomValue();
    internal double get_AbsoluteRightValue();
    internal int get_ZIndex();
    internal void set_ZIndex(int value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    public sealed virtual Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    internal ExpressionInfo get_DocumentMapLabel();
    internal void set_DocumentMapLabel(ExpressionInfo value);
    internal ExpressionInfo get_Bookmark();
    internal void set_Bookmark(ExpressionInfo value);
    internal bool get_RepeatedSibling();
    internal void set_RepeatedSibling(bool value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal virtual string get_DataElementNameDefault();
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal ReportItem get_Parent();
    internal void set_Parent(ReportItem value);
    internal bool get_Computed();
    internal void set_Computed(bool value);
    internal virtual bool get_IsDataRegion();
    internal string get_RepeatWith();
    internal void set_RepeatWith(string value);
    internal ReportItemExprHost get_ExprHost();
    internal virtual bool get_SoftPageBreak();
    internal virtual void set_SoftPageBreak(bool value);
    internal virtual bool get_ShareMyLastPage();
    internal virtual void set_ShareMyLastPage(bool value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal StyleProperties get_SharedStyleProperties();
    internal void set_SharedStyleProperties(StyleProperties value);
    internal bool get_NoNonSharedStyleProps();
    internal void set_NoNonSharedStyleProps(bool value);
    internal ReportSize get_HeightForRendering();
    internal void set_HeightForRendering(ReportSize value);
    internal ReportSize get_WidthForRendering();
    internal void set_WidthForRendering(ReportSize value);
    internal ReportSize get_TopForRendering();
    internal void set_TopForRendering(ReportSize value);
    internal ReportSize get_LeftForRendering();
    internal void set_LeftForRendering(ReportSize value);
    internal virtual DataElementOutputTypes get_DataElementOutputDefault();
    internal double get_TopInStartPage();
    internal void set_TopInStartPage(double value);
    internal double get_BottomInEndPage();
    internal void set_BottomInEndPage(double value);
    private sealed virtual override DataValueList Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_CustomProperties();
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.ICustomPropertiesHolder.get_InstancePath();
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal PageTextboxes get_RepeatedSiblingTextboxes();
    internal void set_RepeatedSiblingTextboxes(PageTextboxes value);
    internal abstract virtual ObjectType get_ObjectType();
    public IReportScopeInstance get_ROMScopeInstance();
    public void set_ROMScopeInstance(IReportScopeInstance value);
    public sealed virtual IVisibilityOwner get_ContainingDynamicVisibility();
    public sealed virtual void set_ContainingDynamicVisibility(IVisibilityOwner value);
    public sealed virtual IVisibilityOwner get_ContainingDynamicColumnVisibility();
    public sealed virtual void set_ContainingDynamicColumnVisibility(IVisibilityOwner value);
    public sealed virtual IVisibilityOwner get_ContainingDynamicRowVisibility();
    public sealed virtual void set_ContainingDynamicRowVisibility(IVisibilityOwner value);
    public sealed virtual bool ComputeHidden(RenderingContext renderingContext, ToggleCascadeDirection direction);
    public sealed virtual bool ComputeDeepHidden(RenderingContext renderingContext, ToggleCascadeDirection direction);
    public sealed virtual bool ComputeStartHidden(RenderingContext renderingContext);
    private bool CanUseCachedVisibilityData(Boolean& cacheHasValue);
    private void UpdateVisibilityDataCacheFlag(Boolean& cacheHasValue);
    public sealed virtual string get_SenderUniqueName();
    internal void ResetVisibilityComputationCache();
    internal virtual bool Initialize(InitializationContext context);
    private void ValidateParentBoundaries(InitializationContext context, ObjectType objectType, string objectName);
    protected static double RoundSize(double size);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal virtual void CalculateSizes(double width, double height, InitializationContext context, bool overwrite);
    internal void CalculateSizes(InitializationContext context, bool overwrite);
    internal virtual void InitializeRVDirectionDependentItems(InitializationContext context);
    internal virtual void DetermineGroupingExprValueCount(InitializationContext context, int groupingExprCount);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void SetupCriRenderItemDef(ReportItem reportItem);
    internal void UpdateRepeatWithReference(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal abstract virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    protected void ReportItemSetExprHost(ReportItemExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal bool EvaluateStartHidden(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal string EvaluateBookmark(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal string EvaluateDocumentMapLabel(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.get_ID();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.SetID(int id);
    private sealed virtual override ObjectType Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ReportItemCollection : IDOwner {
    private List`1<ReportItem> m_nonComputedReportItems;
    private List`1<ReportItem> m_computedReportItems;
    private List`1<ReportItemIndexer> m_sortedReportItemList;
    private List`1<int> m_romIndexMap;
    private List`1<RunningValueInfo> m_runningValues;
    private bool m_normal;
    private bool m_unpopulated;
    private List`1<ReportItem> m_entries;
    private string m_linkToChildName;
    private static Declaration m_Declaration;
    private bool m_firstInstance;
    private int m_staticRefId;
    internal ReportItem Item { get; }
    internal int Count { get; }
    internal List`1<ReportItem> ComputedReportItems { get; internal set; }
    internal List`1<ReportItem> NonComputedReportItems { get; internal set; }
    internal List`1<ReportItemIndexer> SortedReportItems { get; internal set; }
    internal List`1<int> ROMIndexMap { get; }
    internal bool FirstInstance { get; internal set; }
    unknown string LinkToChild {internal set; }
    private int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.ID { get; }
    internal ReportItemCollection(int id, bool normal);
    private static ReportItemCollection();
    internal ReportItem get_Item(int index);
    internal int get_Count();
    internal List`1<ReportItem> get_ComputedReportItems();
    internal void set_ComputedReportItems(List`1<ReportItem> value);
    internal List`1<ReportItem> get_NonComputedReportItems();
    internal void set_NonComputedReportItems(List`1<ReportItem> value);
    internal List`1<ReportItemIndexer> get_SortedReportItems();
    internal void set_SortedReportItems(List`1<ReportItemIndexer> value);
    internal List`1<int> get_ROMIndexMap();
    internal bool get_FirstInstance();
    internal void set_FirstInstance(bool value);
    internal void set_LinkToChild(string value);
    private sealed virtual override List`1<RunningValueInfo> Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IRunningValueHolder.ClearIfEmpty();
    internal void AddReportItem(ReportItem reportItem);
    internal void AddCustomRenderItem(ReportItem reportItem);
    internal bool Initialize(InitializationContext context, bool registerRunningValues);
    internal void InitializeRVDirectionDependentItems(InitializationContext context);
    internal void DetermineGroupingExprValueCount(InitializationContext context, int groupingExprCount);
    private void RegisterOverlappingItems(InitializationContext context, int count, SortedReportItemIndexList sortedTop, bool isSortedVertically);
    internal void CalculateSizes(InitializationContext context, bool overwrite);
    internal void MarkChildrenComputed();
    internal void Populate(ErrorContext errorContext);
    internal bool IsReportItemComputed(int index);
    internal ReportItem GetUnsortedReportItem(int index, bool computed);
    internal void GetReportItem(int index, Boolean& computed, Int32& internalIndex, ReportItem& reportItem);
    private ReportItem InternalGet(int index, bool computed);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.get_ID();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.SetID(int id);
    private sealed virtual override ObjectType Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ReportItemIndexer : ValueType {
    internal bool IsComputed;
    internal int Index;
    private static Declaration m_Declaration;
    private static ReportItemIndexer();
    public object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ReportQuery : object {
    private CommandType m_commandType;
    private ExpressionInfo m_commandText;
    private List`1<ParameterValue> m_queryParameters;
    private int m_timeOut;
    private string m_commandTextValue;
    private string m_dataSourceName;
    private IndexedExprHost m_queryParamsExprHost;
    private static Declaration m_Declaration;
    internal CommandType CommandType { get; internal set; }
    internal ExpressionInfo CommandText { get; internal set; }
    internal List`1<ParameterValue> Parameters { get; internal set; }
    internal int TimeOut { get; internal set; }
    internal string CommandTextValue { get; internal set; }
    internal string DataSourceName { get; internal set; }
    private static ReportQuery();
    internal CommandType get_CommandType();
    internal void set_CommandType(CommandType value);
    internal ExpressionInfo get_CommandText();
    internal void set_CommandText(ExpressionInfo value);
    internal List`1<ParameterValue> get_Parameters();
    internal void set_Parameters(List`1<ParameterValue> value);
    internal int get_TimeOut();
    internal void set_TimeOut(int value);
    internal string get_CommandTextValue();
    internal void set_CommandTextValue(string value);
    internal string get_DataSourceName();
    internal void set_DataSourceName(string value);
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(IndexedExprHost queryParamsExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ReportSnapshot : object {
    private DateTime m_executionTime;
    private Report m_report;
    private bool m_hasDocumentMap;
    private Nullable`1<bool> m_definitionHasDocumentMap;
    private bool m_hasShowHide;
    private bool m_hasBookmarks;
    private bool m_hasImageStreams;
    private string m_requestUserName;
    private string m_reportServerUrl;
    private string m_reportFolder;
    private string m_language;
    private ProcessingMessageList m_processingMessages;
    private Dictionary`2<string, string> m_cachedDatabaseImages;
    private Dictionary`2<string, string> m_cachedGeneratedReportItems;
    private ParameterInfoCollection m_parameters;
    private bool m_hasUserSortFilter;
    private Dictionary`2<string, List`1<string>> m_aggregateFieldReferences;
    private bool m_cachedDataChanged;
    private ReportInstance m_reportInstance;
    private SortFilterEventInfoMap m_sortFilterEventInfo;
    private string m_reportName;
    private static Declaration m_Declaration;
    internal Report Report { get; internal set; }
    internal bool HasDocumentMap { get; internal set; }
    internal bool DefinitionTreeHasDocumentMap { get; internal set; }
    internal bool HasBookmarks { get; internal set; }
    internal bool HasShowHide { get; internal set; }
    internal bool HasUserSortFilter { get; internal set; }
    internal bool HasImageStreams { get; internal set; }
    internal string RequestUserName { get; internal set; }
    internal DateTime ExecutionTime { get; internal set; }
    internal string ReportServerUrl { get; internal set; }
    internal string ReportFolder { get; internal set; }
    internal string Language { get; internal set; }
    internal ProcessingMessageList Warnings { get; internal set; }
    internal ReportInstance ReportInstance { get; internal set; }
    internal bool CachedDataChanged { get; }
    internal ParameterInfoCollection Parameters { get; }
    internal Dictionary`2<string, List`1<string>> AggregateFieldReferences { get; }
    internal SortFilterEventInfoMap SortFilterEventInfo { get; internal set; }
    internal ReportSnapshot(Report report, string reportName, ParameterInfoCollection parameters, string requestUserName, DateTime executionTime, string reportServerUrl, string reportFolder, string language);
    private static ReportSnapshot();
    internal Report get_Report();
    internal void set_Report(Report value);
    internal bool get_HasDocumentMap();
    internal void set_HasDocumentMap(bool value);
    internal bool get_DefinitionTreeHasDocumentMap();
    internal void set_DefinitionTreeHasDocumentMap(bool value);
    internal bool get_HasBookmarks();
    internal void set_HasBookmarks(bool value);
    internal bool get_HasShowHide();
    internal void set_HasShowHide(bool value);
    internal bool get_HasUserSortFilter();
    internal void set_HasUserSortFilter(bool value);
    internal bool get_HasImageStreams();
    internal void set_HasImageStreams(bool value);
    internal string get_RequestUserName();
    internal void set_RequestUserName(string value);
    internal DateTime get_ExecutionTime();
    internal void set_ExecutionTime(DateTime value);
    internal string get_ReportServerUrl();
    internal void set_ReportServerUrl(string value);
    internal string get_ReportFolder();
    internal void set_ReportFolder(string value);
    internal string get_Language();
    internal void set_Language(string value);
    internal ProcessingMessageList get_Warnings();
    internal void set_Warnings(ProcessingMessageList value);
    internal ReportInstance get_ReportInstance();
    internal void set_ReportInstance(ReportInstance value);
    internal bool get_CachedDataChanged();
    internal void AddImageChunkName(string definitionKey, string name);
    internal bool TryGetImageChunkName(string definitionKey, String& name);
    internal void AddGeneratedReportItemChunkName(string definitionKey, string name);
    internal bool TryGetGeneratedReportItemChunkName(string definitionKey, String& name);
    internal ParameterInfoCollection get_Parameters();
    internal Dictionary`2<string, List`1<string>> get_AggregateFieldReferences();
    internal SortFilterEventInfoMap get_SortFilterEventInfo();
    internal void set_SortFilterEventInfo(SortFilterEventInfoMap value);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    [SkipMemberStaticValidationAttribute("47")]
internal static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.Row : IDOwner {
    private static Declaration m_Declaration;
    internal CellList Cells { get; }
    internal Row(int id);
    private static Row();
    internal abstract virtual CellList get_Cells();
    internal virtual void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RowList : ArrayList {
    internal Row Item { get; }
    internal RowList(int capacity);
    internal Row get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RunningValueInfo : DataAggregateInfo {
    private string m_scope;
    private int m_totalGroupingExpressionCount;
    private bool m_isScopedInEvaluationScope;
    private static Declaration m_Declaration;
    internal bool MustCopyAggregateResult { get; }
    internal string Scope { get; internal set; }
    internal int TotalGroupingExpressionCount { get; internal set; }
    internal bool IsScopedInEvaluationScope { get; internal set; }
    internal bool HasDirectFieldReferences { get; }
    private static RunningValueInfo();
    internal virtual bool get_MustCopyAggregateResult();
    internal string get_Scope();
    internal void set_Scope(string value);
    internal int get_TotalGroupingExpressionCount();
    internal void set_TotalGroupingExpressionCount(int value);
    internal bool get_IsScopedInEvaluationScope();
    internal void set_IsScopedInEvaluationScope(bool value);
    internal bool get_HasDirectFieldReferences();
    public virtual object PublishClone(AutomaticSubtotalContext context);
    internal DataAggregateInfo GetAsAggregate();
    internal virtual string GetAsString();
    internal void Initialize(InitializationContext context, string dataSetName, ObjectType objectType, string objectName, string propertyName);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.RuntimeExpressionInfo : object {
    [StaticReferenceAttribute]
private ExpressionInfo m_expression;
    private bool m_direction;
    [StaticReferenceAttribute]
private IndexedExprHost m_expressionsHost;
    private int m_expressionIndex;
    private static Declaration m_declaration;
    internal ExpressionInfo Expression { get; }
    internal bool Direction { get; }
    internal IndexedExprHost ExpressionsHost { get; }
    internal int ExpressionIndex { get; }
    public int Size { get; }
    internal RuntimeExpressionInfo(List`1<ExpressionInfo> expressions, IndexedExprHost expressionsHost, List`1<bool> directions, int expressionIndex);
    private static RuntimeExpressionInfo();
    internal ExpressionInfo get_Expression();
    internal bool get_Direction();
    internal IndexedExprHost get_ExpressionsHost();
    internal int get_ExpressionIndex();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ScaleLabels : GaugePanelStyleContainer {
    private ScaleLabelsExprHost m_exprHost;
    private static Declaration m_Declaration;
    private ExpressionInfo m_interval;
    private ExpressionInfo m_intervalOffset;
    private ExpressionInfo m_allowUpsideDown;
    private ExpressionInfo m_distanceFromScale;
    private ExpressionInfo m_fontAngle;
    private ExpressionInfo m_placement;
    private ExpressionInfo m_rotateLabels;
    private ExpressionInfo m_showEndLabels;
    private ExpressionInfo m_hidden;
    private ExpressionInfo m_useFontPercent;
    internal ExpressionInfo Interval { get; internal set; }
    internal ExpressionInfo IntervalOffset { get; internal set; }
    internal ExpressionInfo AllowUpsideDown { get; internal set; }
    internal ExpressionInfo DistanceFromScale { get; internal set; }
    internal ExpressionInfo FontAngle { get; internal set; }
    internal ExpressionInfo Placement { get; internal set; }
    internal ExpressionInfo RotateLabels { get; internal set; }
    internal ExpressionInfo ShowEndLabels { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal ExpressionInfo UseFontPercent { get; internal set; }
    internal string OwnerName { get; }
    internal ScaleLabelsExprHost ExprHost { get; }
    internal ScaleLabels(GaugePanel gaugePanel);
    private static ScaleLabels();
    internal ExpressionInfo get_Interval();
    internal void set_Interval(ExpressionInfo value);
    internal ExpressionInfo get_IntervalOffset();
    internal void set_IntervalOffset(ExpressionInfo value);
    internal ExpressionInfo get_AllowUpsideDown();
    internal void set_AllowUpsideDown(ExpressionInfo value);
    internal ExpressionInfo get_DistanceFromScale();
    internal void set_DistanceFromScale(ExpressionInfo value);
    internal ExpressionInfo get_FontAngle();
    internal void set_FontAngle(ExpressionInfo value);
    internal ExpressionInfo get_Placement();
    internal void set_Placement(ExpressionInfo value);
    internal ExpressionInfo get_RotateLabels();
    internal void set_RotateLabels(ExpressionInfo value);
    internal ExpressionInfo get_ShowEndLabels();
    internal void set_ShowEndLabels(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal ExpressionInfo get_UseFontPercent();
    internal void set_UseFontPercent(ExpressionInfo value);
    internal string get_OwnerName();
    internal ScaleLabelsExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(ScaleLabelsExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluateInterval(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateIntervalOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateAllowUpsideDown(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateDistanceFromScale(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateFontAngle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeLabelPlacements EvaluatePlacement(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateRotateLabels(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateShowEndLabels(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateUseFontPercent(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ScalePin : TickMarkStyle {
    private static Declaration m_Declaration;
    private ExpressionInfo m_location;
    private ExpressionInfo m_enable;
    private PinLabel m_pinLabel;
    internal ExpressionInfo Location { get; internal set; }
    internal ExpressionInfo Enable { get; internal set; }
    internal PinLabel PinLabel { get; internal set; }
    internal ScalePin(GaugePanel gaugePanel);
    private static ScalePin();
    internal ExpressionInfo get_Location();
    internal void set_Location(ExpressionInfo value);
    internal ExpressionInfo get_Enable();
    internal void set_Enable(ExpressionInfo value);
    internal PinLabel get_PinLabel();
    internal void set_PinLabel(PinLabel value);
    internal void Initialize(InitializationContext context, bool isMaximum);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(ScalePinExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluateLocation(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateEnable(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ScaleRange : GaugePanelStyleContainer {
    private Action m_action;
    private int m_exprHostID;
    private List`1<string> m_fieldsUsedInValueExpression;
    private ScaleRangeExprHost m_exprHost;
    private static Declaration m_Declaration;
    private string m_name;
    private ExpressionInfo m_distanceFromScale;
    private GaugeInputValue m_startValue;
    private GaugeInputValue m_endValue;
    private ExpressionInfo m_startWidth;
    private ExpressionInfo m_endWidth;
    private ExpressionInfo m_inRangeBarPointerColor;
    private ExpressionInfo m_inRangeLabelColor;
    private ExpressionInfo m_inRangeTickMarksColor;
    private ExpressionInfo m_backgroundGradientType;
    private ExpressionInfo m_placement;
    private ExpressionInfo m_toolTip;
    private ExpressionInfo m_hidden;
    private int m_id;
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal string Name { get; internal set; }
    internal int ID { get; }
    internal ExpressionInfo DistanceFromScale { get; internal set; }
    internal GaugeInputValue StartValue { get; internal set; }
    internal GaugeInputValue EndValue { get; internal set; }
    internal ExpressionInfo StartWidth { get; internal set; }
    internal ExpressionInfo EndWidth { get; internal set; }
    internal ExpressionInfo InRangeBarPointerColor { get; internal set; }
    internal ExpressionInfo InRangeLabelColor { get; internal set; }
    internal ExpressionInfo InRangeTickMarksColor { get; internal set; }
    internal ExpressionInfo BackgroundGradientType { get; internal set; }
    internal ExpressionInfo Placement { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal string OwnerName { get; }
    internal ScaleRangeExprHost ExprHost { get; }
    internal int ExpressionHostID { get; }
    internal ScaleRange(GaugePanel gaugePanel, int id);
    private static ScaleRange();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_ID();
    internal ExpressionInfo get_DistanceFromScale();
    internal void set_DistanceFromScale(ExpressionInfo value);
    internal GaugeInputValue get_StartValue();
    internal void set_StartValue(GaugeInputValue value);
    internal GaugeInputValue get_EndValue();
    internal void set_EndValue(GaugeInputValue value);
    internal ExpressionInfo get_StartWidth();
    internal void set_StartWidth(ExpressionInfo value);
    internal ExpressionInfo get_EndWidth();
    internal void set_EndWidth(ExpressionInfo value);
    internal ExpressionInfo get_InRangeBarPointerColor();
    internal void set_InRangeBarPointerColor(ExpressionInfo value);
    internal ExpressionInfo get_InRangeLabelColor();
    internal void set_InRangeLabelColor(ExpressionInfo value);
    internal ExpressionInfo get_InRangeTickMarksColor();
    internal void set_InRangeTickMarksColor(ExpressionInfo value);
    internal ExpressionInfo get_BackgroundGradientType();
    internal void set_BackgroundGradientType(ExpressionInfo value);
    internal ExpressionInfo get_Placement();
    internal void set_Placement(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal string get_OwnerName();
    internal ScaleRangeExprHost get_ExprHost();
    internal int get_ExpressionHostID();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(ScaleRangeExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal double EvaluateDistanceFromScale(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateStartWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateEndWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateInRangeBarPointerColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateInRangeLabelColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateInRangeTickMarksColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal BackgroundGradientTypes EvaluateBackgroundGradientType(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal ScaleRangePlacements EvaluatePlacement(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.ScopeInstance : object {
    protected long m_firstRowOffset;
    protected List`1<IReference`1<DataRegionInstance>> m_dataRegionInstances;
    protected List`1<IReference`1<SubReportInstance>> m_subReportInstances;
    protected List`1<DataAggregateObjResult> m_aggregateValues;
    private int m_serializationDataRegionIndexInCollection;
    protected IDisposable m_cleanupRef;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal IRIFReportScope RIFReportScope { get; }
    internal long FirstRowOffset { get; internal set; }
    internal List`1<IReference`1<DataRegionInstance>> DataRegionInstances { get; }
    internal List`1<IReference`1<SubReportInstance>> SubreportInstances { get; }
    internal List`1<DataAggregateObjResult> AggregateValues { get; }
    internal bool IsReadOnly { get; }
    public int Size { get; }
    protected ScopeInstance(long firstRowOffset);
    private static ScopeInstance();
    internal abstract virtual ObjectType get_ObjectType();
    internal virtual IRIFReportScope get_RIFReportScope();
    internal long get_FirstRowOffset();
    internal void set_FirstRowOffset(long value);
    internal List`1<IReference`1<DataRegionInstance>> get_DataRegionInstances();
    internal List`1<IReference`1<SubReportInstance>> get_SubreportInstances();
    internal List`1<DataAggregateObjResult> get_AggregateValues();
    internal bool get_IsReadOnly();
    internal virtual void InstanceComplete();
    protected void UnPinList(List`1<ScalableList`1<T>> listOfLists);
    protected void SetReadOnlyList(List`1<ScalableList`1<T>> listOfLists);
    protected static void AdjustLength(List`1<T> instances, int indexInCollection);
    protected static IDisposable AddAndPinItemAt(ScalableList`1<T> list, int index, T item);
    internal virtual void AddChildScope(IReference`1<ScopeInstance> childRef, int indexInCollection);
    internal void StoreAggregates(OnDemandProcessingContext odpContext, List`1<AggregateType> aggregateDefs);
    internal void StoreAggregates(DataAggregateObjResult[] aggregateObjResults);
    internal void StoreAggregates(OnDemandProcessingContext odpContext, List`1<AggregateType> aggregateDefs, List`1<int> aggregateIndexes);
    private static void StoreAggregate(OnDemandProcessingContext odpContext, AggregateType aggregateDef, List`1& aggregateValues);
    protected static IList`1<DataRegionMemberInstance> GetChildMemberInstances(List`1<ScalableList`1<DataRegionMemberInstance>> members, int memberIndexInCollection);
    internal void SetupFields(OnDemandProcessingContext odpContext, int dataSetIndex);
    internal void SetupFields(OnDemandProcessingContext odpContext, DataSetInstance dataSetInstance, DataChunkReader dataReader);
    internal void SetupAggregates(OnDemandProcessingContext odpContext, List`1<AggregateType> aggregateDefs, Int32& aggregateValueOffset);
    internal void SetupAggregates(OnDemandProcessingContext odpContext, List`1<AggregateType> aggregateDefs, List`1<int> aggregateIndexes, Int32& aggregateValueOffset);
    private static void SetupAggregate(OnDemandProcessingContext odpContext, AggregateType aggregateDef, DataAggregateObjResult aggregateObj);
    internal static void CalculateVariables(OnDemandProcessingContext odpContext, List`1<Variable> variableDefs, Object[]& variableValues);
    internal static void ResetVariables(OnDemandProcessingContext odpContext, List`1<Variable> variableDefs);
    internal static void SetupVariables(OnDemandProcessingContext odpContext, List`1<Variable> variableDefs, Object[] variableValues);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ScopeLookupTable : object {
    private int m_lookupInt;
    private Hashtable m_lookupTable;
    private static Declaration m_Declaration;
    internal Hashtable LookupTable { get; internal set; }
    internal int LookupInt { get; internal set; }
    public int Size { get; }
    private static ScopeLookupTable();
    internal Hashtable get_LookupTable();
    internal void set_LookupTable(Hashtable value);
    internal int get_LookupInt();
    internal void set_LookupInt(int value);
    internal void Clear();
    internal void Add(GroupingList scopeDefs, List`1[] scopeValues, int value);
    private void GetNullScopeEntries(int nullScopes, Hashtable& hashEntries, Boolean& lookup);
    internal int Lookup(GroupingList scopeDefs, List`1[] scopeValues);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public sealed virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.SortedReportItemIndexList : ArrayList {
    internal int Item { get; }
    internal SortedReportItemIndexList(int capacity);
    public void Add(List`1<ReportItem> collection, int collectionIndex, bool sortVertically);
    internal int get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.SortFilterEventInfo : object {
    [ReferenceAttribute]
private IInScopeEventSource m_eventSource;
    private List`1[] m_eventSourceScopeInfo;
    private static Declaration m_Declaration;
    internal IInScopeEventSource EventSource { get; internal set; }
    internal List`1[] EventSourceScopeInfo { get; internal set; }
    internal SortFilterEventInfo(IInScopeEventSource eventSource);
    private static SortFilterEventInfo();
    internal IInScopeEventSource get_EventSource();
    internal void set_EventSource(IInScopeEventSource value);
    internal List`1[] get_EventSourceScopeInfo();
    internal void set_EventSourceScopeInfo(List`1[] value);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.SortFilterEventInfoMap : object {
    private Dictionary`2<string, SortFilterEventInfo> m_sortFilterEventInfos;
    private static Declaration m_Declaration;
    internal SortFilterEventInfo Item { get; }
    internal int Count { get; }
    private static SortFilterEventInfoMap();
    internal SortFilterEventInfo get_Item(string eventSourceUniqueName);
    internal int get_Count();
    internal void Add(string eventSourceUniqueName, SortFilterEventInfo eventInfo);
    internal void Merge(SortFilterEventInfoMap partition);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Sorting : object {
    private List`1<ExpressionInfo> m_sortExpressions;
    private List`1<bool> m_sortDirections;
    private SortExprHost m_exprHost;
    private static Declaration m_Declaration;
    internal List`1<ExpressionInfo> SortExpressions { get; internal set; }
    internal List`1<bool> SortDirections { get; internal set; }
    internal SortExprHost ExprHost { get; }
    internal Sorting(ConstructionPhase phase);
    private static Sorting();
    internal List`1<ExpressionInfo> get_SortExpressions();
    internal void set_SortExpressions(List`1<ExpressionInfo> value);
    internal List`1<bool> get_SortDirections();
    internal void set_SortDirections(List`1<bool> value);
    internal SortExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(SortExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.StateImage : BaseGaugeImage {
    private static Declaration m_Declaration;
    internal StateImage(GaugePanel gaugePanel);
    private static StateImage();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(StateImageExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.StateIndicator : GaugePanelItem {
    private static Declaration m_Declaration;
    internal StateIndicator(GaugePanel gaugePanel, int id);
    private static StateIndicator();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(StateIndicatorExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.StDev : Var {
    private static Declaration m_declaration;
    private static StDev();
    internal virtual object Result();
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.StDevP : VarP {
    private static Declaration m_declaration;
    private static StDevP();
    internal virtual object Result();
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Style : object {
    protected Dictionary`2<string, AttributeInfo> m_styleAttributes;
    protected List`1<ExpressionInfo> m_expressionList;
    private StyleExprHost m_exprHost;
    private int m_customSharedStyleCount;
    private static Declaration m_Declaration;
    internal Dictionary`2<string, AttributeInfo> StyleAttributes { get; internal set; }
    internal List`1<ExpressionInfo> ExpressionList { get; internal set; }
    internal StyleExprHost ExprHost { get; }
    internal int CustomSharedStyleCount { get; internal set; }
    internal Style(ConstructionPhase phase);
    private static Style();
    internal static string GetStyleString(StyleId styleId);
    internal static StyleId GetStyleId(string styleString);
    internal Dictionary`2<string, AttributeInfo> get_StyleAttributes();
    internal void set_StyleAttributes(Dictionary`2<string, AttributeInfo> value);
    internal List`1<ExpressionInfo> get_ExpressionList();
    internal void set_ExpressionList(List`1<ExpressionInfo> value);
    internal StyleExprHost get_ExprHost();
    internal int get_CustomSharedStyleCount();
    internal void set_CustomSharedStyleCount(int value);
    internal void SetStyleExprHost(StyleExprHost exprHost);
    internal int GetStyleAttribute(ObjectType objectType, string objectName, string styleAttributeName, OnDemandProcessingContext context, Boolean& sharedFormatSettings, String& styleStringValue);
    internal void GetStyleAttribute(ObjectType objectType, string objectName, string styleAttributeName, OnDemandProcessingContext context, Boolean& sharedFormatSettings, Int32& styleIntValue);
    internal virtual bool GetAttributeInfo(string styleAttributeName, AttributeInfo& styleAttribute);
    internal object EvaluateStyle(ObjectType objectType, string objectName, StyleId styleId, OnDemandProcessingContext context);
    internal object EvaluateStyle(ObjectType objectType, string objectName, string styleAttributeName, OnDemandProcessingContext context);
    internal object EvaluateStyle(ObjectType objectType, string objectName, AttributeInfo attribute, StyleId styleId, OnDemandProcessingContext context);
    internal void AddAttribute(string name, ExpressionInfo expressionInfo);
    internal void Initialize(InitializationContext context);
    public object PublishClone(AutomaticSubtotalContext context);
    internal void InitializeForCRIGeneratedReportItem();
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.StyleProperties : object {
    private Hashtable m_nameMap;
    private ArrayList m_valueCollection;
    public object Item { get; }
    public object Item { get; }
    public int Count { get; }
    public ICollection Keys { get; }
    internal StyleProperties(int capacity);
    public object get_Item(int index);
    public object get_Item(string styleName);
    public int get_Count();
    public ICollection get_Keys();
    public bool ContainStyleProperty(string styleName);
    internal void Add(string name, object value);
    internal void Set(string name, object value);
    internal object PublishClone(AutomaticSubtotalContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.SubReport : ReportItem {
    internal static UInt32 MaxSubReportLevel;
    private string m_reportName;
    private List`1<ParameterValue> m_parameters;
    private ExpressionInfo m_noRowsMessage;
    private bool m_mergeTransactions;
    [ReferenceAttribute]
private GroupingList m_containingScopes;
    private bool m_omitBorderOnPageBreak;
    private bool m_keepTogether;
    private bool m_isTablixCellScope;
    private LocationFlags m_location;
    private int m_indexInCollection;
    private bool m_isDetailScope;
    private static Declaration m_Declaration;
    private ParameterInfoCollection m_parametersFromCatalog;
    private Status m_status;
    private Report m_report;
    private string m_description;
    private string m_reportPath;
    private PageBreakStates m_pagebreakState;
    private PageBreakLocation m_pageBreakLocation;
    private SubreportExprHost m_exprHost;
    private List`1<SubReport> m_detailScopeSubReports;
    private SubReportInfo m_odpSubReportInfo;
    private ICatalogItemContext m_reportContext;
    private OnDemandProcessingContext m_odpContext;
    private bool m_isAllDataShared;
    private bool m_noRows;
    private bool m_exceededMaxLevel;
    private IReference`1<SubReportInstance> m_currentSubReportInstance;
    internal ObjectType ObjectType { get; }
    internal string OriginalCatalogPath { get; internal set; }
    internal List`1<ParameterValue> Parameters { get; internal set; }
    internal ExpressionInfo NoRowsMessage { get; internal set; }
    internal bool MergeTransactions { get; internal set; }
    internal GroupingList ContainingScopes { get; internal set; }
    internal Status RetrievalStatus { get; internal set; }
    internal string ReportName { get; internal set; }
    internal string Description { get; internal set; }
    internal Report Report { get; internal set; }
    internal ICatalogItemContext ReportContext { get; internal set; }
    internal ParameterInfoCollection ParametersFromCatalog { get; internal set; }
    internal SubreportExprHost SubReportExprHost { get; }
    internal bool IsTablixCellScope { get; }
    internal bool IsDetailScope { get; internal set; }
    internal List`1<SubReport> DetailScopeSubReports { get; internal set; }
    internal SubReportInfo OdpSubReportInfo { get; internal set; }
    private PageBreakLocation Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.PageBreakLocation { get; private set; }
    internal bool KeepTogether { get; internal set; }
    internal bool OmitBorderOnPageBreak { get; internal set; }
    internal OnDemandProcessingContext OdpContext { get; internal set; }
    internal bool IsAllDataShared { get; internal set; }
    internal bool NoRows { get; internal set; }
    internal bool ExceededMaxLevel { get; internal set; }
    internal bool InDataRegion { get; }
    public int IndexInCollection { get; public set; }
    public IndexedInCollectionType IndexedInCollectionType { get; }
    internal IReference`1<SubReportInstance> CurrentSubReportInstance { get; internal set; }
    internal SubReport(ReportItem parent);
    internal SubReport(int id, ReportItem parent);
    private static SubReport();
    internal virtual ObjectType get_ObjectType();
    internal string get_OriginalCatalogPath();
    internal void set_OriginalCatalogPath(string value);
    internal List`1<ParameterValue> get_Parameters();
    internal void set_Parameters(List`1<ParameterValue> value);
    internal ExpressionInfo get_NoRowsMessage();
    internal void set_NoRowsMessage(ExpressionInfo value);
    internal bool get_MergeTransactions();
    internal void set_MergeTransactions(bool value);
    internal GroupingList get_ContainingScopes();
    internal void set_ContainingScopes(GroupingList value);
    internal Status get_RetrievalStatus();
    internal void set_RetrievalStatus(Status value);
    internal string get_ReportName();
    internal void set_ReportName(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal Report get_Report();
    internal void set_Report(Report value);
    internal ICatalogItemContext get_ReportContext();
    internal void set_ReportContext(ICatalogItemContext value);
    internal ParameterInfoCollection get_ParametersFromCatalog();
    internal void set_ParametersFromCatalog(ParameterInfoCollection value);
    internal SubreportExprHost get_SubReportExprHost();
    internal bool get_IsTablixCellScope();
    internal bool get_IsDetailScope();
    internal void set_IsDetailScope(bool value);
    internal List`1<SubReport> get_DetailScopeSubReports();
    internal void set_DetailScopeSubReports(List`1<SubReport> value);
    internal SubReportInfo get_OdpSubReportInfo();
    internal void set_OdpSubReportInfo(SubReportInfo value);
    private sealed virtual override PageBreakLocation Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.get_PageBreakLocation();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.set_PageBreakLocation(PageBreakLocation value);
    internal bool get_KeepTogether();
    internal void set_KeepTogether(bool value);
    internal bool get_OmitBorderOnPageBreak();
    internal void set_OmitBorderOnPageBreak(bool value);
    internal OnDemandProcessingContext get_OdpContext();
    internal void set_OdpContext(OnDemandProcessingContext value);
    internal bool get_IsAllDataShared();
    internal void set_IsAllDataShared(bool value);
    internal bool get_NoRows();
    internal void set_NoRows(bool value);
    internal bool get_ExceededMaxLevel();
    internal void set_ExceededMaxLevel(bool value);
    internal bool get_InDataRegion();
    public sealed virtual int get_IndexInCollection();
    public sealed virtual void set_IndexInCollection(int value);
    public sealed virtual IndexedInCollectionType get_IndexedInCollectionType();
    internal IReference`1<SubReportInstance> get_CurrentSubReportInstance();
    internal void set_CurrentSubReportInstance(IReference`1<SubReportInstance> value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void InitializeRVDirectionDependentItems(InitializationContext context);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.IgnorePageBreaks();
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IPageBreak.HasPageBreaks(bool atStart);
    internal void UpdateSubReportScopes(UserSortFilterContext context);
    internal void UpdateSubReportEventSourceGlobalDataSetIds(SubReportInfo subReportInfo);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal string EvaulateNoRowMessage(IReportScopeInstance subReportInstance, OnDemandProcessingContext odpContext);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.SubReportInfo : object {
    private int m_lastID;
    private string m_uniqueName;
    private Dictionary`2<ParametersImplWrapper, int> m_parameterValuesToInfoIndexMap;
    private List`1<ParametersImplWrapper> m_instanceParameterValues;
    private int m_userSortDataSetGlobalId;
    private CommonSubReportInfo m_commonSubReportInfo;
    private static Declaration m_Declaration;
    internal CommonSubReportInfo CommonSubReportInfo { get; internal set; }
    internal string UniqueName { get; }
    internal int LastID { get; internal set; }
    internal int UserSortDataSetGlobalId { get; internal set; }
    internal SubReportInfo(Guid uniqueName);
    private static SubReportInfo();
    internal CommonSubReportInfo get_CommonSubReportInfo();
    internal void set_CommonSubReportInfo(CommonSubReportInfo value);
    internal string get_UniqueName();
    internal int get_LastID();
    internal void set_LastID(int value);
    internal int get_UserSortDataSetGlobalId();
    internal void set_UserSortDataSetGlobalId(int value);
    internal int GetChunkNameModifierForParamValues(ParametersImpl parameterValues, bool addEntry, Nullable`1& isShared, ParametersImpl& fullParameterValues);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.SubReportInstance : ScopeInstance {
    private ParametersImpl m_parameters;
    private IReference`1<ReportInstance> m_reportInstance;
    private string m_instanceUniqueName;
    private CultureInfo m_threadCulture;
    private Status m_status;
    private bool m_processedWithError;
    private SubReport m_subReportDef;
    private Nullable`1<bool> m_isInstanceShared;
    private Nullable`1<int> m_dataChunkNameModifier;
    private bool m_initialized;
    private static Declaration m_Declaration;
    internal ObjectType ObjectType { get; }
    internal SubReport SubReportDef { get; }
    internal bool Initialized { get; internal set; }
    internal ParametersImpl Parameters { get; internal set; }
    internal bool NoRows { get; }
    public IReference`1<ReportInstance> ReportInstance { get; }
    internal string InstanceUniqueName { get; internal set; }
    internal CultureInfo ThreadCulture { get; internal set; }
    internal Status RetrievalStatus { get; internal set; }
    internal bool ProcessedWithError { get; internal set; }
    public int Size { get; }
    private SubReportInstance(SubReport subreport, OnDemandMetadata odpMetadata);
    private static SubReportInstance();
    internal virtual ObjectType get_ObjectType();
    internal SubReport get_SubReportDef();
    internal bool get_Initialized();
    internal void set_Initialized(bool value);
    internal ParametersImpl get_Parameters();
    internal void set_Parameters(ParametersImpl value);
    internal bool get_NoRows();
    public sealed virtual IReference`1<ReportInstance> get_ReportInstance();
    public sealed virtual IReference`1<ReportInstance> SetReportInstance(ReportInstance reportInstance, OnDemandMetadata odpMetadata);
    internal string get_InstanceUniqueName();
    internal void set_InstanceUniqueName(string value);
    internal CultureInfo get_ThreadCulture();
    internal void set_ThreadCulture(CultureInfo value);
    internal Status get_RetrievalStatus();
    internal void set_RetrievalStatus(Status value);
    internal bool get_ProcessedWithError();
    internal void set_ProcessedWithError(bool value);
    internal virtual void AddChildScope(IReference`1<ScopeInstance> child, int indexInCollection);
    internal string GetChunkNameModifier(SubReportInfo subReportInfo, bool useCachedValue, bool addEntry, Boolean& isShared);
    internal virtual void InstanceComplete();
    internal static IReference`1<SubReportInstance> CreateInstance(ScopeInstance parentInstance, SubReport subReport, OnDemandMetadata odpMetadata);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Sum : DataAggregate {
    private DataTypeCode m_expressionType;
    protected DataTypeCode m_currentTotalType;
    protected object m_currentTotal;
    private static Declaration m_declaration;
    public int Size { get; }
    private static Sum();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Tablix : DataRegion {
    private bool m_keepTogether;
    private TablixMemberList m_tablixColumnMembers;
    private TablixMemberList m_tablixRowMembers;
    private TablixRowList m_tablixRows;
    private List`1<TablixColumn> m_tablixColumns;
    private List`1<List`1<TablixCornerCell>> m_corner;
    private PageBreakLocation m_propagatedPageBreakLocation;
    private int m_innerRowLevelWithPageBreak;
    private int m_groupsBeforeRowHeaders;
    private bool m_layoutDirection;
    private bool m_repeatColumnHeaders;
    private bool m_repeatRowHeaders;
    private bool m_fixedColumnHeaders;
    private bool m_fixedRowHeaders;
    private bool m_omitBorderOnPageBreak;
    private bool m_hideStaticsIfNoRows;
    [ReferenceAttribute]
private List`1<TextBox> m_inScopeTextBoxes;
    private int m_columnHeaderRowCount;
    private int m_rowHeaderColumnCount;
    private InitData m_initData;
    private bool m_createdSubtotals;
    private static Declaration m_Declaration;
    private TablixExprHost m_tablixExprHost;
    internal bool KeepTogether { get; internal set; }
    internal ObjectType ObjectType { get; }
    internal HierarchyNodeList ColumnMembers { get; }
    internal HierarchyNodeList RowMembers { get; }
    internal RowList Rows { get; }
    internal TablixMemberList TablixColumnMembers { get; internal set; }
    internal TablixMemberList TablixRowMembers { get; internal set; }
    internal TablixRowList TablixRows { get; internal set; }
    internal List`1<TablixColumn> TablixColumns { get; internal set; }
    internal List`1<List`1<TablixCornerCell>> Corner { get; internal set; }
    internal PageBreakLocation PropagatedPageBreakLocation { get; internal set; }
    internal int InnerRowLevelWithPageBreak { get; internal set; }
    internal int GroupsBeforeRowHeaders { get; internal set; }
    internal bool LayoutDirection { get; internal set; }
    public bool RepeatColumnHeaders { get; public set; }
    public bool RepeatRowHeaders { get; public set; }
    internal bool FixedColumnHeaders { get; internal set; }
    internal bool FixedRowHeaders { get; internal set; }
    internal int ColumnHeaderRowCount { get; internal set; }
    internal int RowHeaderColumnCount { get; internal set; }
    internal bool OmitBorderOnPageBreak { get; internal set; }
    internal bool HideStaticsIfNoRows { get; internal set; }
    internal TablixExprHost TablixExprHost { get; }
    protected IndexedExprHost UserSortExpressionsHost { get; }
    internal InitData InitializationData { get; }
    internal List`1<TextBox> InScopeTextBoxes { get; }
    internal Tablix(ReportItem parent);
    internal Tablix(int id, ReportItem parent);
    private static Tablix();
    internal bool get_KeepTogether();
    internal void set_KeepTogether(bool value);
    internal virtual ObjectType get_ObjectType();
    internal virtual HierarchyNodeList get_ColumnMembers();
    internal virtual HierarchyNodeList get_RowMembers();
    internal virtual RowList get_Rows();
    internal TablixMemberList get_TablixColumnMembers();
    internal void set_TablixColumnMembers(TablixMemberList value);
    internal TablixMemberList get_TablixRowMembers();
    internal void set_TablixRowMembers(TablixMemberList value);
    internal TablixRowList get_TablixRows();
    internal void set_TablixRows(TablixRowList value);
    internal List`1<TablixColumn> get_TablixColumns();
    internal void set_TablixColumns(List`1<TablixColumn> value);
    internal List`1<List`1<TablixCornerCell>> get_Corner();
    internal void set_Corner(List`1<List`1<TablixCornerCell>> value);
    internal PageBreakLocation get_PropagatedPageBreakLocation();
    internal void set_PropagatedPageBreakLocation(PageBreakLocation value);
    internal int get_InnerRowLevelWithPageBreak();
    internal void set_InnerRowLevelWithPageBreak(int value);
    internal int get_GroupsBeforeRowHeaders();
    internal void set_GroupsBeforeRowHeaders(int value);
    internal bool get_LayoutDirection();
    internal void set_LayoutDirection(bool value);
    public bool get_RepeatColumnHeaders();
    public void set_RepeatColumnHeaders(bool value);
    public bool get_RepeatRowHeaders();
    public void set_RepeatRowHeaders(bool value);
    internal bool get_FixedColumnHeaders();
    internal void set_FixedColumnHeaders(bool value);
    internal bool get_FixedRowHeaders();
    internal void set_FixedRowHeaders(bool value);
    internal int get_ColumnHeaderRowCount();
    internal void set_ColumnHeaderRowCount(int value);
    internal int get_RowHeaderColumnCount();
    internal void set_RowHeaderColumnCount(int value);
    internal bool get_OmitBorderOnPageBreak();
    internal void set_OmitBorderOnPageBreak(bool value);
    internal bool get_HideStaticsIfNoRows();
    internal void set_HideStaticsIfNoRows(bool value);
    internal TablixExprHost get_TablixExprHost();
    protected virtual IndexedExprHost get_UserSortExpressionsHost();
    internal InitData get_InitializationData();
    internal List`1<TextBox> get_InScopeTextBoxes();
    internal virtual bool Initialize(InitializationContext context);
    protected virtual void InitializeRVDirectionDependentItemsInCorner(InitializationContext context);
    protected virtual void InitializeRVDirectionDependentItems(int outerIndex, int innerIndex, InitializationContext context);
    protected virtual void DetermineGroupingExprValueCountInCorner(InitializationContext context, int groupingExprCount);
    protected virtual void DetermineGroupingExprValueCount(int outerIndex, int innerIndex, InitializationContext context, int groupingExprCount);
    internal static void ValidateKeepWithGroup(TablixMemberList members, InitializationContext context);
    private static bool HasDynamic(TablixMemberList members);
    protected virtual void InitializeCorner(InitializationContext context);
    protected virtual void InitializeRows(InitializationContext context);
    private bool ValidateColSpan(Tablix tablix, int index, int colSpan);
    private bool ValidateColSpan(TablixMember aMember, int index, int colSpan, Int32& current);
    protected virtual bool ValidateInnerStructure(InitializationContext context);
    protected virtual bool InitializeColumnMembers(InitializationContext context);
    protected virtual bool InitializeRowMembers(InitializationContext context);
    protected virtual void InitializeData(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    public sealed virtual void CreateAutomaticSubtotals(AutomaticSubtotalContext context);
    private int CreateAutomaticSubtotals(AutomaticSubtotalContext context, TablixMemberList members, bool isColumn);
    private bool AllSiblingsHaveConditionalOrToggleableVisibility(TablixMemberList members);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    private void FixIndexInCollections();
    private void FixIndexInCollection(TablixMember member, IndexInCollectionUpgrader indexUpgrader, bool isColumn, Int32& rowIndex, Int32& colIndex);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void DataRegionContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    internal virtual object EvaluateNoRowsMessageExpression();
    protected virtual void AddInScopeTextBox(TextBox textbox);
    internal virtual void ResetTextBoxImpls(OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixCell : TablixCellBase {
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private static Declaration m_Declaration;
    private string m_cellIDForRendering;
    private ReportSize m_cellWidthForRendering;
    private ReportSize m_cellHeightForRendering;
    protected bool IsDataRegionBodyCell { get; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal string CellIDForRendering { get; internal set; }
    internal ReportSize CellWidthForRendering { get; internal set; }
    internal ReportSize CellHeightForRendering { get; internal set; }
    internal TablixCell(int id, DataRegion dataRegion);
    private static TablixCell();
    protected virtual bool get_IsDataRegionBodyCell();
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal string get_CellIDForRendering();
    internal void set_CellIDForRendering(string value);
    internal ReportSize get_CellWidthForRendering();
    internal void set_CellWidthForRendering(ReportSize value);
    internal ReportSize get_CellHeightForRendering();
    internal void set_CellHeightForRendering(ReportSize value);
    internal virtual void InternalInitialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal virtual void DataRendererInitialize(InitializationContext context);
    internal void InitializeRVDirectionDependentItems(InitializationContext context);
    internal void DetermineGroupingExprValueCount(InitializationContext context, int groupingExprCount);
    internal virtual void DetermineGroupTreeRequirement();
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal void SetExprHost(StyleExprHost styleExprHost, ObjectModelImpl reportObjectModel);
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.TablixCellBase : Cell {
    protected int m_rowSpan;
    protected int m_colSpan;
    protected ReportItem m_cellContents;
    protected ReportItem m_altCellContents;
    private static Declaration m_Declaration;
    internal int ColSpan { get; internal set; }
    internal int RowSpan { get; internal set; }
    internal ReportItem CellContents { get; internal set; }
    internal ReportItem AltCellContents { get; internal set; }
    internal TablixCellBase(int id, DataRegion dataRegion);
    private static TablixCellBase();
    internal int get_ColSpan();
    internal void set_ColSpan(int value);
    internal int get_RowSpan();
    internal void set_RowSpan(int value);
    internal ReportItem get_CellContents();
    internal void set_CellContents(ReportItem value);
    internal ReportItem get_AltCellContents();
    internal void set_AltCellContents(ReportItem value);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal virtual void InternalInitialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal virtual void DataRendererInitialize(InitializationContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixCellList : CellList {
    internal TablixCell Item { get; }
    internal TablixCellList(int capacity);
    internal TablixCell get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixColumn : IDOwner {
    private string m_width;
    private double m_widthValue;
    private bool m_forAutoSubtotal;
    private static Declaration m_Declaration;
    internal string Width { get; internal set; }
    internal double WidthValue { get; internal set; }
    internal bool ForAutoSubtotal { get; internal set; }
    internal TablixColumn(int id);
    private static TablixColumn();
    internal string get_Width();
    internal void set_Width(string value);
    internal double get_WidthValue();
    internal void set_WidthValue(double value);
    internal bool get_ForAutoSubtotal();
    internal void set_ForAutoSubtotal(bool value);
    internal void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixCornerCell : TablixCellBase {
    private static Declaration m_Declaration;
    internal TablixCornerCell(int id, DataRegion dataRegion);
    private static TablixCornerCell();
    internal virtual void InternalInitialize(int parentRowID, int parentColumnID, int rowindex, int colIndex, InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixHeader : IDOwner {
    private string m_size;
    private double m_sizeValue;
    private ReportItem m_cellContents;
    private ReportItem m_altCellContents;
    private static String[] m_StylesForEmptyRectangleInSubtotals;
    private static Declaration m_Declaration;
    private ReportSize m_sizeForRendering;
    internal string Size { get; internal set; }
    internal double SizeValue { get; internal set; }
    internal ReportSize SizeForRendering { get; internal set; }
    internal ReportItem CellContents { get; internal set; }
    internal ReportItem AltCellContents { get; internal set; }
    internal TablixHeader(int id);
    private static TablixHeader();
    internal string get_Size();
    internal void set_Size(string value);
    internal double get_SizeValue();
    internal void set_SizeValue(double value);
    internal ReportSize get_SizeForRendering();
    internal void set_SizeForRendering(ReportSize value);
    internal ReportItem get_CellContents();
    internal void set_CellContents(ReportItem value);
    internal ReportItem get_AltCellContents();
    internal void set_AltCellContents(ReportItem value);
    internal void Initialize(InitializationContext context, bool isColumn, bool ignoreSize);
    internal object PublishClone(AutomaticSubtotalContext context, bool isClonedDynamic);
    private void AddAttribute(AutomaticSubtotalContext context, Style originalStyle, Style newStyle, string name, ExpressionInfo meDotValueExpression);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixMember : ReportHierarchyNode {
    private TablixHeader m_tablixHeader;
    private TablixMemberList m_tablixMembers;
    private Visibility m_visibility;
    private PageBreakLocation m_propagatedPageBreakLocation;
    private bool m_keepTogether;
    private bool m_fixedData;
    private KeepWithGroup m_keepWithGroup;
    private bool m_repeatOnNewPage;
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private bool m_hideIfNoRows;
    [ReferenceAttribute]
private List`1<TextBox> m_inScopeTextBoxes;
    [ReferenceAttribute]
private IVisibilityOwner m_containingDynamicVisibility;
    [ReferenceAttribute]
private IVisibilityOwner m_containingDynamicRowVisibility;
    [ReferenceAttribute]
private IVisibilityOwner m_containingDynamicColumnVisibility;
    private TablixMember m_parentMember;
    private Boolean[] m_headerLevelHasStaticArray;
    private int m_headerLevel;
    private bool m_isInnerMostMemberWithHeader;
    private bool m_hasStaticPeerWithHeader;
    private int m_resizedForLevel;
    private bool m_canHaveSpanDecreased;
    private int m_consecutiveZeroHeightDescendentCount;
    private int m_consecutiveZeroHeightAncestorCount;
    private static Declaration m_Declaration;
    private string m_senderUniqueName;
    private Nullable`1<int> m_parentInstanceIndex;
    private Nullable`1<bool> m_instanceHasRecursiveChildren;
    private IList`1<DataRegionMemberInstance> m_memberInstances;
    private TablixMemberExprHost m_exprHost;
    private IReportScopeInstance m_romScopeInstance;
    private List`1<VisibilityState> m_recursiveVisibilityCache;
    private VisibilityState m_nonRecursiveVisibilityCache;
    internal HierarchyNodeList InnerHierarchy { get; }
    internal TablixMemberList SubMembers { get; internal set; }
    public Visibility Visibility { get; public set; }
    internal TablixMember ParentMember { get; internal set; }
    internal bool HasStaticPeerWithHeader { get; internal set; }
    internal PageBreakLocation PropagatedPageBreakLocation { get; internal set; }
    internal TablixHeader TablixHeader { get; internal set; }
    internal bool FixedData { get; internal set; }
    internal bool RepeatOnNewPage { get; internal set; }
    internal KeepWithGroup KeepWithGroup { get; internal set; }
    internal bool KeepTogether { get; internal set; }
    internal bool HideIfNoRows { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal bool IsNonToggleableHiddenMember { get; }
    private bool WasResized { get; }
    internal bool CanHaveSpanDecreased { get; internal set; }
    internal bool HasToggleableVisibility { get; }
    internal bool HasConditionalOrToggleableVisibility { get; }
    internal Boolean[] HeaderLevelHasStaticArray { get; internal set; }
    internal int HeaderLevel { get; internal set; }
    internal bool IsInnerMostMemberWithHeader { get; internal set; }
    internal bool IsTablixMember { get; }
    internal List`1<TextBox> InScopeTextBoxes { get; }
    public IReportScopeInstance ROMScopeInstance { get; public set; }
    public IVisibilityOwner ContainingDynamicVisibility { get; public set; }
    public IVisibilityOwner ContainingDynamicColumnVisibility { get; public set; }
    public IVisibilityOwner ContainingDynamicRowVisibility { get; public set; }
    public string SenderUniqueName { get; }
    internal int ConsecutiveZeroHeightDescendentCount { get; internal set; }
    internal int ConsecutiveZeroHeightAncestorCount { get; internal set; }
    internal bool InstanceHasRecursiveChildren { get; }
    private ToggleCascadeDirection ToggleCascadeDirection { get; }
    internal TablixMember(int id, Tablix tablixDef);
    private static TablixMember();
    internal virtual HierarchyNodeList get_InnerHierarchy();
    internal TablixMemberList get_SubMembers();
    internal void set_SubMembers(TablixMemberList value);
    public sealed virtual Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    internal TablixMember get_ParentMember();
    internal void set_ParentMember(TablixMember value);
    internal bool get_HasStaticPeerWithHeader();
    internal void set_HasStaticPeerWithHeader(bool value);
    internal PageBreakLocation get_PropagatedPageBreakLocation();
    internal void set_PropagatedPageBreakLocation(PageBreakLocation value);
    internal TablixHeader get_TablixHeader();
    internal void set_TablixHeader(TablixHeader value);
    internal bool get_FixedData();
    internal void set_FixedData(bool value);
    internal bool get_RepeatOnNewPage();
    internal void set_RepeatOnNewPage(bool value);
    internal KeepWithGroup get_KeepWithGroup();
    internal void set_KeepWithGroup(KeepWithGroup value);
    internal bool get_KeepTogether();
    internal void set_KeepTogether(bool value);
    internal bool get_HideIfNoRows();
    internal void set_HideIfNoRows(bool value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal virtual bool get_IsNonToggleableHiddenMember();
    private bool get_WasResized();
    internal bool get_CanHaveSpanDecreased();
    internal void set_CanHaveSpanDecreased(bool value);
    internal bool get_HasToggleableVisibility();
    internal bool get_HasConditionalOrToggleableVisibility();
    internal Boolean[] get_HeaderLevelHasStaticArray();
    internal void set_HeaderLevelHasStaticArray(Boolean[] value);
    internal int get_HeaderLevel();
    internal void set_HeaderLevel(int value);
    internal bool get_IsInnerMostMemberWithHeader();
    internal void set_IsInnerMostMemberWithHeader(bool value);
    internal virtual bool get_IsTablixMember();
    internal List`1<TextBox> get_InScopeTextBoxes();
    public IReportScopeInstance get_ROMScopeInstance();
    public void set_ROMScopeInstance(IReportScopeInstance value);
    public sealed virtual IVisibilityOwner get_ContainingDynamicVisibility();
    public sealed virtual void set_ContainingDynamicVisibility(IVisibilityOwner value);
    public sealed virtual IVisibilityOwner get_ContainingDynamicColumnVisibility();
    public sealed virtual void set_ContainingDynamicColumnVisibility(IVisibilityOwner value);
    public sealed virtual IVisibilityOwner get_ContainingDynamicRowVisibility();
    public sealed virtual void set_ContainingDynamicRowVisibility(IVisibilityOwner value);
    public sealed virtual string get_SenderUniqueName();
    internal int get_ConsecutiveZeroHeightDescendentCount();
    internal void set_ConsecutiveZeroHeightDescendentCount(int value);
    internal int get_ConsecutiveZeroHeightAncestorCount();
    internal void set_ConsecutiveZeroHeightAncestorCount(int value);
    internal bool get_InstanceHasRecursiveChildren();
    public sealed virtual bool ComputeHidden(RenderingContext renderingContext, ToggleCascadeDirection direction);
    public sealed virtual bool ComputeDeepHidden(RenderingContext renderingContext, ToggleCascadeDirection direction);
    public bool ComputeToggleSenderDeepHidden(RenderingContext renderingContext);
    private ToggleCascadeDirection get_ToggleCascadeDirection();
    public sealed virtual bool ComputeStartHidden(RenderingContext renderingContext);
    internal void ResetVisibilityComputationCache();
    protected virtual void DataGroupStart(ExprHostBuilder builder);
    protected virtual int DataGroupEnd(ExprHostBuilder builder);
    internal virtual object PublishClone(AutomaticSubtotalContext context, DataRegion newContainingRegion);
    internal TablixMember CreateAutomaticSubtotalClone(AutomaticSubtotalContext context, TablixMember parent, bool isDynamicTarget, Int32& aDynamicsRemoved, Boolean& aAllWereDynamic);
    private bool HasStaticAncestorWithOneMemberGenerations(TablixMember member);
    private bool HasInnermostHeaderAncestorWithOneMemberGenerations(TablixMember member);
    internal virtual bool InnerInitialize(InitializationContext context);
    internal virtual bool Initialize(InitializationContext context);
    internal void DataRendererInitialize(InitializationContext context);
    internal virtual void PreInitializeDataMember(InitializationContext context);
    internal virtual void PostInitializeDataMember(InitializationContext context);
    internal virtual void InitializeRVDirectionDependentItems(InitializationContext context);
    internal virtual void DetermineGroupingExprValueCount(InitializationContext context, int groupingExprCount);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal virtual void SetExprHost(IMemberNode memberExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void MemberContentsSetExprHost(ObjectModelImpl reportObjectModel, bool traverseDataRegions);
    internal virtual void MoveNextForUserSort(OnDemandProcessingContext odpContext);
    protected virtual void AddInScopeTextBox(TextBox textbox);
    internal virtual void ResetTextBoxImpls(OnDemandProcessingContext context);
    internal bool EvaluateStartHidden(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal virtual void SetMemberInstances(IList`1<DataRegionMemberInstance> memberInstances);
    internal virtual void SetRecursiveParentIndex(int parentInstanceIndex);
    internal virtual void SetInstanceHasRecursiveChildren(Nullable`1<bool> hasRecursiveChildren);
    private Nullable`1<int> SetupParentRecursiveIndex(OnDemandProcessingContext odpContext);
    private VisibilityState GetCachedVisibilityState(OnDemandProcessingContext odpContext);
    private VisibilityState GetCachedVisibilityState(OnDemandProcessingContext odpContext, int memberIndex);
    private TablixMember GetRecursiveMember();
    private Nullable`1<int> GetRecursiveParentIndex();
    private bool IsRecursive();
    private bool IsToggleableChildOfRecursive();
    private bool IsRecursiveToggleReceiver();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixMemberList : HierarchyNodeList {
    internal TablixMember Item { get; }
    internal TablixMemberList(int capacity);
    internal TablixMember get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixRow : Row {
    private string m_height;
    private double m_heightValue;
    private TablixCellList m_cells;
    private bool m_forAutoSubtotal;
    private static Declaration m_Declaration;
    internal string Height { get; internal set; }
    internal double HeightValue { get; internal set; }
    internal CellList Cells { get; }
    internal TablixCellList TablixCells { get; internal set; }
    internal bool ForAutoSubtotal { get; internal set; }
    internal TablixRow(int id);
    private static TablixRow();
    internal string get_Height();
    internal void set_Height(string value);
    internal double get_HeightValue();
    internal void set_HeightValue(double value);
    internal virtual CellList get_Cells();
    internal TablixCellList get_TablixCells();
    internal void set_TablixCells(TablixCellList value);
    internal bool get_ForAutoSubtotal();
    internal void set_ForAutoSubtotal(bool value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TablixRowList : RowList {
    internal TablixRow Item { get; }
    internal TablixRowList(int capacity);
    internal TablixRow get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TextBox : ReportItem {
    private List`1<Paragraph> m_paragraphs;
    private Action m_action;
    private bool m_canGrow;
    private bool m_canShrink;
    private string m_hideDuplicates;
    private bool m_isToggle;
    private ExpressionInfo m_initialToggleState;
    private bool m_valueReferenced;
    private bool m_textRunValueReferenced;
    private bool m_recursiveSender;
    private bool m_hasNonRecursiveSender;
    [ReferenceAttribute]
private TablixMember m_recursiveMember;
    private bool m_dataElementStyleAttribute;
    private bool m_hasValue;
    private bool m_hasExpressionBasedValue;
    private bool m_keepTogether;
    [ReferenceAttribute]
private GroupingList m_containingScopes;
    private EndUserSort m_userSort;
    private bool m_isTablixCellScope;
    private int m_sequenceID;
    private bool m_isSimple;
    private ScopeChainInfo m_scopeChainInfo;
    private static Declaration m_Declaration;
    private bool m_isSubReportTopLevelScope;
    private bool m_overrideReportDataElementStyle;
    private string m_textboxScope;
    private bool m_isDetailScope;
    private VariantResult m_oldResult;
    private bool m_hasOldResult;
    private TextBoxExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    private TextBoxImpl m_textBoxImpl;
    internal ObjectType ObjectType { get; }
    internal List`1<Paragraph> Paragraphs { get; internal set; }
    internal bool CanGrow { get; internal set; }
    internal bool CanShrink { get; internal set; }
    internal string HideDuplicates { get; internal set; }
    internal bool IsToggle { get; internal set; }
    internal ExpressionInfo InitialToggleState { get; internal set; }
    internal bool RecursiveSender { get; internal set; }
    internal bool HasNonRecursiveSender { get; internal set; }
    internal TablixMember RecursiveMember { get; internal set; }
    internal bool ValueReferenced { get; internal set; }
    internal TextBoxExprHost TextBoxExprHost { get; }
    internal bool DataElementStyleAttribute { get; internal set; }
    internal EndUserSort UserSort { get; internal set; }
    internal bool OverrideReportDataElementStyle { get; internal set; }
    internal bool KeepTogether { get; internal set; }
    internal bool HasExpressionBasedValue { get; }
    internal bool HasValue { get; }
    internal bool IsSimple { get; }
    internal DataElementOutputTypes DataElementOutputDefault { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal bool TextRunValueReferenced { get; internal set; }
    internal int SequenceID { get; internal set; }
    private ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.ObjectType { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.Name { get; }
    private ReportItem Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.Parent { get; }
    private EndUserSort Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.UserSort { get; }
    private GroupingList Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.ContainingScopes { get; private set; }
    internal GroupingList ContainingScopes { get; }
    private string Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.Scope { get; private set; }
    private bool Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.IsTablixCellScope { get; private set; }
    private bool Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.IsDetailScope { get; private set; }
    private bool Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.IsSubReportTopLevelScope { get; private set; }
    private ScopeChainInfo Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.ScopeChainInfo { get; private set; }
    internal TextBox(ReportItem parent);
    internal TextBox(int id, ReportItem parent);
    private static TextBox();
    internal virtual ObjectType get_ObjectType();
    internal List`1<Paragraph> get_Paragraphs();
    internal void set_Paragraphs(List`1<Paragraph> value);
    internal bool get_CanGrow();
    internal void set_CanGrow(bool value);
    internal bool get_CanShrink();
    internal void set_CanShrink(bool value);
    internal string get_HideDuplicates();
    internal void set_HideDuplicates(string value);
    internal bool get_IsToggle();
    internal void set_IsToggle(bool value);
    internal ExpressionInfo get_InitialToggleState();
    internal void set_InitialToggleState(ExpressionInfo value);
    internal bool get_RecursiveSender();
    internal void set_RecursiveSender(bool value);
    internal bool get_HasNonRecursiveSender();
    internal void set_HasNonRecursiveSender(bool value);
    internal TablixMember get_RecursiveMember();
    internal void set_RecursiveMember(TablixMember value);
    internal bool get_ValueReferenced();
    internal void set_ValueReferenced(bool value);
    internal TextBoxExprHost get_TextBoxExprHost();
    internal bool get_DataElementStyleAttribute();
    internal void set_DataElementStyleAttribute(bool value);
    internal EndUserSort get_UserSort();
    internal void set_UserSort(EndUserSort value);
    internal bool get_OverrideReportDataElementStyle();
    internal void set_OverrideReportDataElementStyle(bool value);
    internal bool get_KeepTogether();
    internal void set_KeepTogether(bool value);
    internal bool get_HasExpressionBasedValue();
    internal bool get_HasValue();
    internal bool get_IsSimple();
    internal virtual DataElementOutputTypes get_DataElementOutputDefault();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal bool get_TextRunValueReferenced();
    internal void set_TextRunValueReferenced(bool value);
    internal int get_SequenceID();
    internal void set_SequenceID(int value);
    internal virtual bool Initialize(InitializationContext context);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_ObjectType();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_Name();
    private sealed virtual override ReportItem Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_Parent();
    private sealed virtual override EndUserSort Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_UserSort();
    private sealed virtual override GroupingList Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_ContainingScopes();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.set_ContainingScopes(GroupingList value);
    internal GroupingList get_ContainingScopes();
    private sealed virtual override string Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_Scope();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.set_Scope(string value);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_IsTablixCellScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.set_IsTablixCellScope(bool value);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_IsDetailScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.set_IsDetailScope(bool value);
    private sealed virtual override bool Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_IsSubReportTopLevelScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.set_IsSubReportTopLevelScope(bool value);
    private sealed virtual override ScopeChainInfo Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.get_ScopeChainInfo();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.set_ScopeChainInfo(ScopeChainInfo value);
    private sealed virtual override InScopeSortFilterHashtable Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.GetSortFiltersInScope(bool create, bool inDetail);
    private sealed virtual override List`1<int> Microsoft.ReportingServices.ReportIntermediateFormat.IInScopeEventSource.GetPeerSortFilters(bool create);
    internal string GetRecursiveUniqueName(int parentInstanceIndex);
    internal bool EvaluateIsToggle(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal virtual void InitializeRVDirectionDependentItems(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    [SkipMemberStaticValidationAttribute("56")]
[SkipMemberStaticValidationAttribute("55")]
internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    private TextRun GetOrCreateSingleTextRun(IntermediateFormatReader reader);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal bool EvaluateInitialToggleState(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal VariantResult EvaluateValue(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal List`1<string> GetFieldsUsedInValueExpression(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    internal TextBoxImpl GetTextBoxImpl(OnDemandProcessingContext context);
    internal void ResetTextBoxImpl(OnDemandProcessingContext context);
    internal void ResetDuplicates();
    internal bool CalculateDuplicates(VariantResult currentResult, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TextBoxFilteredStyle : Style {
    internal TextBoxFilteredStyle(Style style);
    internal virtual bool GetAttributeInfo(string styleAttributeName, AttributeInfo& styleAttribute);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TextRun : IDOwner {
    private ExpressionInfo m_value;
    private ExpressionInfo m_toolTip;
    private Style m_styleClass;
    private Action m_action;
    private string m_label;
    private ExpressionInfo m_markupType;
    private DataType m_constantDataType;
    private int m_indexInCollection;
    private int m_exprHostID;
    private bool m_valueReferenced;
    [ReferenceAttribute]
private Paragraph m_paragraph;
    private string m_idString;
    private string m_name;
    private static Declaration m_Declaration;
    private TextRunImpl m_textRunImpl;
    private TextRunExprHost m_exprHost;
    private TypeCode m_valueType;
    private bool m_valueTypeSet;
    private Formatter m_formatter;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal string IDString { get; }
    internal ExpressionInfo Value { get; internal set; }
    internal string Label { get; internal set; }
    internal ExpressionInfo MarkupType { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal Paragraph Paragraph { get; internal set; }
    internal int IndexInCollection { get; internal set; }
    internal DataType DataType { get; internal set; }
    internal bool ValueReferenced { get; internal set; }
    internal bool IsSimple { get; }
    private IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.InstancePath { get; }
    private Style Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.StyleClass { get; }
    public ObjectType ObjectType { get; }
    public string Name { get; }
    internal TypeCode ValueTypeCode { get; }
    internal Action Action { get; internal set; }
    private Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal TextRunExprHost ExprHost { get; }
    internal TextRun(Paragraph paragraph, int index, int id);
    private static TextRun();
    internal string get_IDString();
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal string get_Label();
    internal void set_Label(string value);
    internal ExpressionInfo get_MarkupType();
    internal void set_MarkupType(ExpressionInfo value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal Paragraph get_Paragraph();
    internal void set_Paragraph(Paragraph value);
    internal int get_IndexInCollection();
    internal void set_IndexInCollection(int value);
    internal DataType get_DataType();
    internal void set_DataType(DataType value);
    internal bool get_ValueReferenced();
    internal void set_ValueReferenced(bool value);
    internal bool get_IsSimple();
    private sealed virtual override IInstancePath Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_InstancePath();
    private sealed virtual override Style Microsoft.ReportingServices.ReportIntermediateFormat.IStyleContainer.get_StyleClass();
    public sealed virtual ObjectType get_ObjectType();
    public sealed virtual string get_Name();
    internal TypeCode get_ValueTypeCode();
    internal Action get_Action();
    internal void set_Action(Action value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal TextRunExprHost get_ExprHost();
    internal bool Initialize(InitializationContext context, Boolean& hasExpressionBasedValue);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    internal void SetExprHost(TextRunExprHost textRunExprHost);
    internal void SetExprHost(ParagraphExprHost paragraphExprHost, ObjectModelImpl reportObjectModel);
    internal string EvaluateMarkupType(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal string EvaluateToolTip(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal VariantResult EvaluateValue(IReportScopeInstance instance, OnDemandProcessingContext context);
    internal List`1<string> GetFieldsUsedInValueExpression(IReportScopeInstance romInstance, OnDemandProcessingContext context);
    private TextRunImpl GetTextRunImpl(OnDemandProcessingContext context);
    internal string FormatTextRunValue(VariantResult textRunResult, OnDemandProcessingContext context);
    internal string FormatTextRunValue(object textRunValue, TypeCode typeCode, OnDemandProcessingContext context);
    private string FormatTextRunValue(object textRunValue, TypeCode typeCode, string formatCode, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TextRunFilteredStyle : Style {
    internal TextRunFilteredStyle(Style style);
    internal virtual bool GetAttributeInfo(string styleAttributeName, AttributeInfo& styleAttribute);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Thermometer : GaugePanelStyleContainer {
    private ThermometerExprHost m_exprHost;
    private static Declaration m_Declaration;
    private ExpressionInfo m_bulbOffset;
    private ExpressionInfo m_bulbSize;
    private ExpressionInfo m_thermometerStyle;
    internal ExpressionInfo BulbOffset { get; internal set; }
    internal ExpressionInfo BulbSize { get; internal set; }
    internal ExpressionInfo ThermometerStyle { get; internal set; }
    internal string OwnerName { get; }
    internal ThermometerExprHost ExprHost { get; }
    internal Thermometer(GaugePanel gaugePanel);
    private static Thermometer();
    internal ExpressionInfo get_BulbOffset();
    internal void set_BulbOffset(ExpressionInfo value);
    internal ExpressionInfo get_BulbSize();
    internal void set_BulbSize(ExpressionInfo value);
    internal ExpressionInfo get_ThermometerStyle();
    internal void set_ThermometerStyle(ExpressionInfo value);
    internal string get_OwnerName();
    internal ThermometerExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(ThermometerExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluateBulbOffset(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateBulbSize(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeThermometerStyles EvaluateThermometerStyle(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TickMarkStyle : GaugePanelStyleContainer {
    protected TickMarkStyleExprHost m_exprHost;
    private static Declaration m_Declaration;
    private ExpressionInfo m_distanceFromScale;
    private ExpressionInfo m_placement;
    private ExpressionInfo m_enableGradient;
    private ExpressionInfo m_gradientDensity;
    private TopImage m_tickMarkImage;
    private ExpressionInfo m_length;
    private ExpressionInfo m_width;
    private ExpressionInfo m_shape;
    private ExpressionInfo m_hidden;
    internal ExpressionInfo DistanceFromScale { get; internal set; }
    internal ExpressionInfo Placement { get; internal set; }
    internal ExpressionInfo EnableGradient { get; internal set; }
    internal ExpressionInfo GradientDensity { get; internal set; }
    internal TopImage TickMarkImage { get; internal set; }
    internal ExpressionInfo Length { get; internal set; }
    internal ExpressionInfo Width { get; internal set; }
    internal ExpressionInfo Shape { get; internal set; }
    internal ExpressionInfo Hidden { get; internal set; }
    internal string OwnerName { get; }
    internal TickMarkStyleExprHost ExprHost { get; }
    internal TickMarkStyle(GaugePanel gaugePanel);
    private static TickMarkStyle();
    internal ExpressionInfo get_DistanceFromScale();
    internal void set_DistanceFromScale(ExpressionInfo value);
    internal ExpressionInfo get_Placement();
    internal void set_Placement(ExpressionInfo value);
    internal ExpressionInfo get_EnableGradient();
    internal void set_EnableGradient(ExpressionInfo value);
    internal ExpressionInfo get_GradientDensity();
    internal void set_GradientDensity(ExpressionInfo value);
    internal TopImage get_TickMarkImage();
    internal void set_TickMarkImage(TopImage value);
    internal ExpressionInfo get_Length();
    internal void set_Length(ExpressionInfo value);
    internal ExpressionInfo get_Width();
    internal void set_Width(ExpressionInfo value);
    internal ExpressionInfo get_Shape();
    internal void set_Shape(ExpressionInfo value);
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal string get_OwnerName();
    internal TickMarkStyleExprHost get_ExprHost();
    internal virtual void Initialize(InitializationContext context);
    internal void InitializeInternal(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(TickMarkStyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal double EvaluateDistanceFromScale(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeLabelPlacements EvaluatePlacement(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateEnableGradient(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateGradientDensity(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateLength(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal double EvaluateWidth(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal GaugeTickMarkShapes EvaluateShape(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
    internal bool EvaluateHidden(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal enum Microsoft.ReportingServices.ReportIntermediateFormat.ToggleCascadeDirection : Enum {
    public int value__;
    public static ToggleCascadeDirection None;
    public static ToggleCascadeDirection Row;
    public static ToggleCascadeDirection Column;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.ToggleItemInfo : object {
    internal TextBox Textbox;
    internal string GroupName;
    internal Hashtable GroupingSet;
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.TopImage : BaseGaugeImage {
    private static Declaration m_Declaration;
    private ExpressionInfo m_hueColor;
    internal ExpressionInfo HueColor { get; internal set; }
    internal TopImage(GaugePanel gaugePanel);
    private static TopImage();
    internal ExpressionInfo get_HueColor();
    internal void set_HueColor(ExpressionInfo value);
    internal virtual void Initialize(InitializationContext context);
    internal virtual object PublishClone(AutomaticSubtotalContext context);
    internal void SetExprHost(TopImageExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual ObjectType GetObjectType();
    internal string EvaluateHueColor(IReportScopeInstance reportScopeInstance, OnDemandProcessingContext context);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Var : VarBase {
    private static Declaration m_declaration;
    private static Var();
    internal virtual object Result();
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportIntermediateFormat.VarBase : DataAggregate {
    private DataTypeCode m_expressionType;
    protected UInt32 m_currentCount;
    protected DataTypeCode m_sumOfXType;
    protected object m_sumOfX;
    protected object m_sumOfXSquared;
    private static Declaration m_declaration;
    public int Size { get; }
    private static VarBase();
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    public virtual void Serialize(IntermediateFormatWriter writer);
    public virtual void Deserialize(IntermediateFormatReader reader);
    public virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Variable : object {
    private DataType m_constantDataType;
    private string m_name;
    private ExpressionInfo m_value;
    private int m_sequenceID;
    private bool m_isClone;
    private string m_propertyName;
    private VariableImpl m_cachedVariableObj;
    private static Declaration m_Declaration;
    internal string Name { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal DataType DataType { get; internal set; }
    internal int SequenceID { get; internal set; }
    private static Variable();
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal DataType get_DataType();
    internal void set_DataType(DataType value);
    internal int get_SequenceID();
    internal void set_SequenceID(int value);
    internal void Initialize(InitializationContext context);
    internal object PublishClone(AutomaticSubtotalContext context);
    internal string GetPropertyName();
    internal VariableImpl GetCachedVariableObj(OnDemandProcessingContext odpContext);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.VarP : VarBase {
    private static Declaration m_declaration;
    private static VarP();
    internal virtual object Result();
    public virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.Visibility : object {
    private ExpressionInfo m_hidden;
    private string m_toggle;
    private bool m_recursiveReceiver;
    private TablixMember m_recursiveMember;
    private TextBox m_toggleSender;
    private bool m_isClone;
    private static Declaration m_Declaration;
    internal ExpressionInfo Hidden { get; internal set; }
    internal string Toggle { get; internal set; }
    internal TextBox ToggleSender { get; internal set; }
    internal bool RecursiveReceiver { get; internal set; }
    internal TablixMember RecursiveMember { get; internal set; }
    internal bool IsToggleReceiver { get; }
    internal bool IsConditional { get; }
    internal bool IsClone { get; }
    private static Visibility();
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal string get_Toggle();
    internal void set_Toggle(string value);
    internal TextBox get_ToggleSender();
    internal void set_ToggleSender(TextBox value);
    internal bool get_RecursiveReceiver();
    internal void set_RecursiveReceiver(bool value);
    internal TablixMember get_RecursiveMember();
    internal void set_RecursiveMember(TablixMember value);
    internal bool get_IsToggleReceiver();
    internal bool get_IsConditional();
    internal bool get_IsClone();
    internal void Initialize(InitializationContext context);
    internal void Initialize(InitializationContext context, bool registerVisibilityToggle);
    internal VisibilityToggleInfo RegisterVisibilityToggle(InitializationContext context);
    internal static SharedHiddenState GetSharedHidden(Visibility visibility);
    internal static bool HasToggle(Visibility visibility);
    internal object PublishClone(AutomaticSubtotalContext context, bool isSubtotalMember);
    internal void UpdateToggleItemReference(AutomaticSubtotalContext context);
    internal static Declaration GetDeclaration();
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    internal static bool ComputeHidden(IVisibilityOwner visibilityOwner, RenderingContext renderingContext, ToggleCascadeDirection direction, Boolean& valueIsDeep);
    internal static bool ComputeDeepHidden(bool hidden, IVisibilityOwner visibilityOwner, ToggleCascadeDirection direction, RenderingContext renderingContext);
}
internal class Microsoft.ReportingServices.ReportIntermediateFormat.VisibilityToggleInfo : object {
    internal ObjectType ObjectType;
    internal string ObjectName;
    internal Visibility Visibility;
    internal string GroupName;
    internal Hashtable GroupingSet;
    internal bool IsTablixMember;
}
internal class Microsoft.ReportingServices.ReportProcessing.Action : object {
    private ActionItemList m_actionItemList;
    private Style m_styleClass;
    private int m_computedActionItemsCount;
    private ActionInfoExprHost m_exprHost;
    private StyleProperties m_sharedStyleProperties;
    private bool m_noNonSharedStyleProps;
    internal Style StyleClass { get; internal set; }
    internal ActionItemList ActionItems { get; internal set; }
    internal int ComputedActionItemsCount { get; internal set; }
    internal StyleProperties SharedStyleProperties { get; internal set; }
    internal bool NoNonSharedStyleProps { get; internal set; }
    internal Action(ActionItem actionItem, bool computed);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal ActionItemList get_ActionItems();
    internal void set_ActionItems(ActionItemList value);
    internal int get_ComputedActionItemsCount();
    internal void set_ComputedActionItemsCount(int value);
    internal StyleProperties get_SharedStyleProperties();
    internal void set_SharedStyleProperties(StyleProperties value);
    internal bool get_NoNonSharedStyleProps();
    internal void set_NoNonSharedStyleProps(bool value);
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(ActionInfoExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void SetExprHost(ActionExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    internal void ProcessDrillthroughAction(ProcessingContext processingContext, int uniqueName);
    internal bool ResetObjectModelForDrillthroughContext(ObjectModelImpl objectModel, IActionOwner actionOwner);
    internal void GetSelectedItemsForDrillthroughContext(ObjectModelImpl objectModel, IActionOwner actionOwner);
}
internal class Microsoft.ReportingServices.ReportProcessing.ActionInstance : object {
    private ActionItemInstanceList m_actionItemsValues;
    private Object[] m_styleAttributeValues;
    private int m_uniqueName;
    internal ActionItemInstanceList ActionItemsValues { get; internal set; }
    internal Object[] StyleAttributeValues { get; internal set; }
    internal int UniqueName { get; internal set; }
    internal ActionInstance(ProcessingContext pc);
    internal ActionInstance(ActionItemInstance actionItemInstance);
    internal ActionItemInstanceList get_ActionItemsValues();
    internal void set_ActionItemsValues(ActionItemInstanceList value);
    internal Object[] get_StyleAttributeValues();
    internal void set_StyleAttributeValues(Object[] value);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal object GetStyleAttributeValue(int index);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ActionItem : object {
    private ExpressionInfo m_hyperLinkURL;
    private ExpressionInfo m_drillthroughReportName;
    private ParameterValueList m_drillthroughParameters;
    private ExpressionInfo m_drillthroughBookmarkLink;
    private ExpressionInfo m_bookmarkLink;
    private ExpressionInfo m_label;
    private int m_exprHostID;
    private int m_computedIndex;
    private ActionExprHost m_exprHost;
    internal ExpressionInfo HyperLinkURL { get; internal set; }
    internal ExpressionInfo DrillthroughReportName { get; internal set; }
    internal ParameterValueList DrillthroughParameters { get; internal set; }
    internal ExpressionInfo DrillthroughBookmarkLink { get; internal set; }
    internal ExpressionInfo BookmarkLink { get; internal set; }
    internal ExpressionInfo Label { get; internal set; }
    internal int ComputedIndex { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal ActionExprHost ExprHost { get; }
    internal ExpressionInfo get_HyperLinkURL();
    internal void set_HyperLinkURL(ExpressionInfo value);
    internal ExpressionInfo get_DrillthroughReportName();
    internal void set_DrillthroughReportName(ExpressionInfo value);
    internal ParameterValueList get_DrillthroughParameters();
    internal void set_DrillthroughParameters(ParameterValueList value);
    internal ExpressionInfo get_DrillthroughBookmarkLink();
    internal void set_DrillthroughBookmarkLink(ExpressionInfo value);
    internal ExpressionInfo get_BookmarkLink();
    internal void set_BookmarkLink(ExpressionInfo value);
    internal ExpressionInfo get_Label();
    internal void set_Label(ExpressionInfo value);
    internal int get_ComputedIndex();
    internal void set_ComputedIndex(int value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal ActionExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(IList`1<ActionExprHost> actionItemExprHosts, ObjectModelImpl reportObjectModel);
    internal void SetExprHost(ActionExprHost actionExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    internal void ProcessDrillthroughAction(ProcessingContext processingContext, int ownerUniqueName, int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ActionItemInstance : object {
    private string m_hyperLinkURL;
    private string m_bookmarkLink;
    private string m_label;
    private string m_drillthroughReportName;
    private Object[] m_drillthroughParametersValues;
    private BoolList m_drillthroughParametersOmits;
    private IntList m_dataSetTokenIDs;
    internal string HyperLinkURL { get; internal set; }
    internal string BookmarkLink { get; internal set; }
    internal string Label { get; internal set; }
    internal string DrillthroughReportName { get; internal set; }
    internal Object[] DrillthroughParametersValues { get; internal set; }
    internal BoolList DrillthroughParametersOmits { get; internal set; }
    internal IntList DataSetTokenIDs { get; internal set; }
    internal ActionItemInstance(ProcessingContext pc, ActionItem actionItemDef);
    internal string get_HyperLinkURL();
    internal void set_HyperLinkURL(string value);
    internal string get_BookmarkLink();
    internal void set_BookmarkLink(string value);
    internal string get_Label();
    internal void set_Label(string value);
    internal string get_DrillthroughReportName();
    internal void set_DrillthroughReportName(string value);
    internal Object[] get_DrillthroughParametersValues();
    internal void set_DrillthroughParametersValues(Object[] value);
    internal BoolList get_DrillthroughParametersOmits();
    internal void set_DrillthroughParametersOmits(BoolList value);
    internal IntList get_DataSetTokenIDs();
    internal void set_DataSetTokenIDs(IntList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ActionItemInstanceList : ArrayList {
    internal ActionItemInstance Item { get; }
    internal ActionItemInstanceList(int capacity);
    internal ActionItemInstance get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ActionItemList : ArrayList {
    internal ActionItem Item { get; }
    internal ActionItemList(int capacity);
    internal ActionItem get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ActiveXControl : ReportItem {
    private string m_classID;
    private string m_codeBase;
    private ParameterValueList m_parameters;
    private ActiveXControlExprHost m_exprHost;
    internal ObjectType ObjectType { get; }
    internal string ClassID { get; internal set; }
    internal string CodeBase { get; internal set; }
    internal ParameterValueList Parameters { get; internal set; }
    internal ActiveXControl(ReportItem parent);
    internal ActiveXControl(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal string get_ClassID();
    internal void set_ClassID(string value);
    internal string get_CodeBase();
    internal void set_CodeBase(string value);
    internal ParameterValueList get_Parameters();
    internal void set_Parameters(ParameterValueList value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ActiveXControlInstance : ReportItemInstance {
    internal ActiveXControlInstanceInfo InstanceInfo { get; }
    internal ActiveXControlInstance(ProcessingContext pc, ActiveXControl reportItemDef, int index);
    internal ActiveXControlInstanceInfo get_InstanceInfo();
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.ActiveXControlInstanceInfo : ReportItemInstanceInfo {
    private Object[] m_parameterValues;
    internal Object[] ParameterValues { get; internal set; }
    internal ActiveXControlInstanceInfo(ProcessingContext pc, ActiveXControl reportItemDef, ReportItemInstance owner, int index);
    internal ActiveXControlInstanceInfo(ActiveXControl reportItemDef);
    internal Object[] get_ParameterValues();
    internal void set_ParameterValues(Object[] value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.Aggregate : DataAggregate {
    private object m_value;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.ArrayHelper : object {
    internal static bool Equals(Array o1, Array o2);
}
internal class Microsoft.ReportingServices.ReportProcessing.AttributeInfo : object {
    private bool m_isExpression;
    private string m_stringValue;
    private bool m_boolValue;
    private int m_intValue;
    internal bool IsExpression { get; internal set; }
    internal string Value { get; internal set; }
    internal bool BoolValue { get; internal set; }
    internal int IntValue { get; internal set; }
    internal bool get_IsExpression();
    internal void set_IsExpression(bool value);
    internal string get_Value();
    internal void set_Value(string value);
    internal bool get_BoolValue();
    internal void set_BoolValue(bool value);
    internal int get_IntValue();
    internal void set_IntValue(int value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.Avg : Sum {
    private UInt32 m_currentCount;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.Axis : object {
    private bool m_visible;
    private Style m_styleClass;
    private ChartTitle m_title;
    private bool m_margin;
    private TickMarks m_majorTickMarks;
    private TickMarks m_minorTickMarks;
    private GridLines m_majorGridLines;
    private GridLines m_minorGridLines;
    private ExpressionInfo m_majorInterval;
    private ExpressionInfo m_minorInterval;
    private bool m_reverse;
    private ExpressionInfo m_crossAt;
    private bool m_autoCrossAt;
    private bool m_interlaced;
    private bool m_scalar;
    private ExpressionInfo m_min;
    private ExpressionInfo m_max;
    private bool m_autoScaleMin;
    private bool m_autoScaleMax;
    private bool m_logScale;
    private DataValueList m_customProperties;
    private AxisExprHost m_exprHost;
    internal bool Visible { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal ChartTitle Title { get; internal set; }
    internal bool Margin { get; internal set; }
    internal TickMarks MajorTickMarks { get; internal set; }
    internal TickMarks MinorTickMarks { get; internal set; }
    internal GridLines MajorGridLines { get; internal set; }
    internal GridLines MinorGridLines { get; internal set; }
    internal ExpressionInfo MajorInterval { get; internal set; }
    internal ExpressionInfo MinorInterval { get; internal set; }
    internal bool Reverse { get; internal set; }
    internal ExpressionInfo CrossAt { get; internal set; }
    internal bool AutoCrossAt { get; internal set; }
    internal bool Interlaced { get; internal set; }
    internal bool Scalar { get; internal set; }
    internal ExpressionInfo Min { get; internal set; }
    internal ExpressionInfo Max { get; internal set; }
    internal bool AutoScaleMin { get; internal set; }
    internal bool AutoScaleMax { get; internal set; }
    internal bool LogScale { get; internal set; }
    internal DataValueList CustomProperties { get; internal set; }
    internal AxisExprHost ExprHost { get; }
    internal bool get_Visible();
    internal void set_Visible(bool value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal ChartTitle get_Title();
    internal void set_Title(ChartTitle value);
    internal bool get_Margin();
    internal void set_Margin(bool value);
    internal TickMarks get_MajorTickMarks();
    internal void set_MajorTickMarks(TickMarks value);
    internal TickMarks get_MinorTickMarks();
    internal void set_MinorTickMarks(TickMarks value);
    internal GridLines get_MajorGridLines();
    internal void set_MajorGridLines(GridLines value);
    internal GridLines get_MinorGridLines();
    internal void set_MinorGridLines(GridLines value);
    internal ExpressionInfo get_MajorInterval();
    internal void set_MajorInterval(ExpressionInfo value);
    internal ExpressionInfo get_MinorInterval();
    internal void set_MinorInterval(ExpressionInfo value);
    internal bool get_Reverse();
    internal void set_Reverse(bool value);
    internal ExpressionInfo get_CrossAt();
    internal void set_CrossAt(ExpressionInfo value);
    internal bool get_AutoCrossAt();
    internal void set_AutoCrossAt(bool value);
    internal bool get_Interlaced();
    internal void set_Interlaced(bool value);
    internal bool get_Scalar();
    internal void set_Scalar(bool value);
    internal ExpressionInfo get_Min();
    internal void set_Min(ExpressionInfo value);
    internal ExpressionInfo get_Max();
    internal void set_Max(ExpressionInfo value);
    internal bool get_AutoScaleMin();
    internal void set_AutoScaleMin(bool value);
    internal bool get_AutoScaleMax();
    internal void set_AutoScaleMax(bool value);
    internal bool get_LogScale();
    internal void set_LogScale(bool value);
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal AxisExprHost get_ExprHost();
    internal void SetExprHost(AxisExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context, Mode mode);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.AxisInstance : object {
    private int m_uniqueName;
    private ChartTitleInstance m_title;
    private Object[] m_styleAttributeValues;
    private Object[] m_majorGridLinesStyleAttributeValues;
    private Object[] m_minorGridLinesStyleAttributeValues;
    private object m_minValue;
    private object m_maxValue;
    private object m_crossAtValue;
    private object m_majorIntervalValue;
    private object m_minorIntervalValue;
    private DataValueInstanceList m_customPropertyInstances;
    internal int UniqueName { get; internal set; }
    internal ChartTitleInstance Title { get; internal set; }
    internal Object[] StyleAttributeValues { get; internal set; }
    internal Object[] MajorGridLinesStyleAttributeValues { get; internal set; }
    internal Object[] MinorGridLinesStyleAttributeValues { get; internal set; }
    internal object MinValue { get; internal set; }
    internal object MaxValue { get; internal set; }
    internal object CrossAtValue { get; internal set; }
    internal object MajorIntervalValue { get; internal set; }
    internal object MinorIntervalValue { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    internal AxisInstance(ProcessingContext pc, Chart chart, Axis axisDef, Mode mode);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal ChartTitleInstance get_Title();
    internal void set_Title(ChartTitleInstance value);
    internal Object[] get_StyleAttributeValues();
    internal void set_StyleAttributeValues(Object[] value);
    internal Object[] get_MajorGridLinesStyleAttributeValues();
    internal void set_MajorGridLinesStyleAttributeValues(Object[] value);
    internal Object[] get_MinorGridLinesStyleAttributeValues();
    internal void set_MinorGridLinesStyleAttributeValues(Object[] value);
    internal object get_MinValue();
    internal void set_MinValue(object value);
    internal object get_MaxValue();
    internal void set_MaxValue(object value);
    internal object get_CrossAtValue();
    internal void set_CrossAtValue(object value);
    internal object get_MajorIntervalValue();
    internal void set_MajorIntervalValue(object value);
    internal object get_MinorIntervalValue();
    internal void set_MinorIntervalValue(object value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.BinaryResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal Byte[] Value;
}
internal class Microsoft.ReportingServices.ReportProcessing.BookmarkInformation : object {
    private string m_id;
    private int m_page;
    internal string Id { get; internal set; }
    internal int Page { get; internal set; }
    internal BookmarkInformation(string id, int page);
    internal string get_Id();
    internal void set_Id(string value);
    internal int get_Page();
    internal void set_Page(int value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.BookmarksHashtable : HashtableInstanceInfo {
    internal BookmarkInformation Item { get; internal set; }
    internal BookmarksHashtable(int capacity);
    internal BookmarkInformation get_Item(string key);
    internal void set_Item(string key, BookmarkInformation value);
    internal void Add(string bookmark, BookmarkInformation bookmarkInfo);
    internal void Add(string bookmark, int page, string id);
}
internal class Microsoft.ReportingServices.ReportProcessing.BooleanResult : ValueType {
    internal bool ErrorOccurred;
    internal bool Value;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.BoolList : ArrayList {
    internal bool Item { get; internal set; }
    internal BoolList(int capacity);
    internal bool get_Item(int index);
    internal void set_Item(int index, bool value);
}
internal class Microsoft.ReportingServices.ReportProcessing.Chart : Pivot {
    private ChartHeading m_columns;
    private ChartHeading m_rows;
    private ChartDataPointList m_cellDataPoints;
    private RunningValueInfoList m_cellRunningValues;
    private MultiChart m_multiChart;
    private Legend m_legend;
    private Axis m_categoryAxis;
    private Axis m_valueAxis;
    [ReferenceAttribute]
private ChartHeading m_staticColumns;
    [ReferenceAttribute]
private ChartHeading m_staticRows;
    private ChartTypes m_type;
    private ChartSubTypes m_subType;
    private ChartPalette m_palette;
    private ChartTitle m_title;
    private int m_pointWidth;
    private ThreeDProperties m_3dProperties;
    private PlotArea m_plotArea;
    private ChartExprHost m_exprHost;
    private IntList m_numberOfSeriesDataPoints;
    private BoolList m_seriesPlotType;
    private bool m_hasSeriesPlotTypeLine;
    private bool m_hasDataValueAggregates;
    internal ObjectType ObjectType { get; }
    internal PivotHeading PivotColumns { get; }
    internal PivotHeading PivotRows { get; }
    internal ChartHeading Columns { get; internal set; }
    internal ChartHeading Rows { get; internal set; }
    internal MultiChart MultiChart { get; internal set; }
    internal ChartDataPointList ChartDataPoints { get; internal set; }
    internal RunningValueInfoList PivotCellRunningValues { get; }
    internal RunningValueInfoList CellRunningValues { get; internal set; }
    internal Legend Legend { get; internal set; }
    internal Axis CategoryAxis { get; internal set; }
    internal Axis ValueAxis { get; internal set; }
    internal PivotHeading PivotStaticColumns { get; }
    internal PivotHeading PivotStaticRows { get; }
    internal ChartHeading StaticColumns { get; internal set; }
    internal ChartHeading StaticRows { get; internal set; }
    internal ChartTypes Type { get; internal set; }
    internal ChartSubTypes SubType { get; internal set; }
    internal ChartTitle Title { get; internal set; }
    internal int PointWidth { get; internal set; }
    internal ThreeDProperties ThreeDProperties { get; internal set; }
    internal ChartPalette Palette { get; internal set; }
    internal PlotArea PlotArea { get; internal set; }
    internal ChartExprHost ChartExprHost { get; }
    protected DataRegionExprHost DataRegionExprHost { get; }
    internal IntList NumberOfSeriesDataPoints { get; internal set; }
    internal BoolList SeriesPlotType { get; internal set; }
    internal bool HasSeriesPlotTypeLine { get; internal set; }
    internal bool HasDataValueAggregates { get; internal set; }
    internal int StaticSeriesCount { get; }
    internal int StaticCategoryCount { get; }
    internal Chart(ReportItem parent);
    internal Chart(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal virtual PivotHeading get_PivotColumns();
    internal virtual PivotHeading get_PivotRows();
    internal ChartHeading get_Columns();
    internal void set_Columns(ChartHeading value);
    internal ChartHeading get_Rows();
    internal void set_Rows(ChartHeading value);
    internal MultiChart get_MultiChart();
    internal void set_MultiChart(MultiChart value);
    internal ChartDataPointList get_ChartDataPoints();
    internal void set_ChartDataPoints(ChartDataPointList value);
    internal virtual RunningValueInfoList get_PivotCellRunningValues();
    internal RunningValueInfoList get_CellRunningValues();
    internal void set_CellRunningValues(RunningValueInfoList value);
    internal Legend get_Legend();
    internal void set_Legend(Legend value);
    internal Axis get_CategoryAxis();
    internal void set_CategoryAxis(Axis value);
    internal Axis get_ValueAxis();
    internal void set_ValueAxis(Axis value);
    internal virtual PivotHeading get_PivotStaticColumns();
    internal virtual PivotHeading get_PivotStaticRows();
    internal ChartHeading get_StaticColumns();
    internal void set_StaticColumns(ChartHeading value);
    internal ChartHeading get_StaticRows();
    internal void set_StaticRows(ChartHeading value);
    internal ChartTypes get_Type();
    internal void set_Type(ChartTypes value);
    internal ChartSubTypes get_SubType();
    internal void set_SubType(ChartSubTypes value);
    internal ChartTitle get_Title();
    internal void set_Title(ChartTitle value);
    internal int get_PointWidth();
    internal void set_PointWidth(int value);
    internal ThreeDProperties get_ThreeDProperties();
    internal void set_ThreeDProperties(ThreeDProperties value);
    internal ChartPalette get_Palette();
    internal void set_Palette(ChartPalette value);
    internal PlotArea get_PlotArea();
    internal void set_PlotArea(PlotArea value);
    internal ChartExprHost get_ChartExprHost();
    protected virtual DataRegionExprHost get_DataRegionExprHost();
    internal IntList get_NumberOfSeriesDataPoints();
    internal void set_NumberOfSeriesDataPoints(IntList value);
    internal BoolList get_SeriesPlotType();
    internal void set_SeriesPlotType(BoolList value);
    internal bool get_HasSeriesPlotTypeLine();
    internal void set_HasSeriesPlotTypeLine(bool value);
    internal bool get_HasDataValueAggregates();
    internal void set_HasDataValueAggregates(bool value);
    internal int get_StaticSeriesCount();
    internal int get_StaticCategoryCount();
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal static Object[] CreateStyle(ProcessingContext pc, Style styleDef, string objectName, int uniqueName);
    internal virtual bool Initialize(InitializationContext context);
    private void InternalInitialize(InitializationContext context);
    private void CornerInitialize(InitializationContext context);
    private void ColumnsInitialize(InitializationContext context, Int32& expectedNumberOfCategories, Boolean& computedSubtotal);
    private void RowsInitialize(InitializationContext context, Int32& expectedNumberOfSeries, Boolean& computedSubtotal);
    private void ChartDataPointInitialize(InitializationContext context, int expectedNumberOfCategories, int expectedNumberOfSeries, bool computedCells);
    internal bool IsValidChartSubType();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal ChartDataPoint GetDataPoint(int seriesIndex, int categoryIndex);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartColumn : object {
    private string m_name;
    private ExpressionInfo m_value;
    internal string Name { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ChartColumnList : ArrayList {
    internal ChartColumn Item { get; }
    internal ChartColumnList(int capacity);
    internal ChartColumn get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartDataLabel : object {
    private bool m_visible;
    private ExpressionInfo m_value;
    private Style m_styleClass;
    private Positions m_position;
    private int m_rotation;
    internal bool Visible { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal Positions Position { get; internal set; }
    internal int Rotation { get; internal set; }
    internal bool get_Visible();
    internal void set_Visible(bool value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal Positions get_Position();
    internal void set_Position(Positions value);
    internal int get_Rotation();
    internal void set_Rotation(int value);
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartDataPoint : object {
    private ExpressionInfoList m_dataValues;
    private ChartDataLabel m_dataLabel;
    private Action m_action;
    private Style m_styleClass;
    private MarkerTypes m_markerType;
    private string m_markerSize;
    private Style m_markerStyleClass;
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private int m_exprHostID;
    private DataValueList m_customProperties;
    private ChartDataPointExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal ExpressionInfoList DataValues { get; internal set; }
    internal ChartDataLabel DataLabel { get; internal set; }
    internal Action Action { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal MarkerTypes MarkerType { get; internal set; }
    internal string MarkerSize { get; internal set; }
    internal Style MarkerStyleClass { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal DataValueList CustomProperties { get; internal set; }
    internal ChartDataPointExprHost ExprHost { get; }
    private Action Microsoft.ReportingServices.ReportProcessing.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportProcessing.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal ExpressionInfoList get_DataValues();
    internal void set_DataValues(ExpressionInfoList value);
    internal ChartDataLabel get_DataLabel();
    internal void set_DataLabel(ChartDataLabel value);
    internal Action get_Action();
    internal void set_Action(Action value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal MarkerTypes get_MarkerType();
    internal void set_MarkerType(MarkerTypes value);
    internal string get_MarkerSize();
    internal void set_MarkerSize(string value);
    internal Style get_MarkerStyleClass();
    internal void set_MarkerStyleClass(Style value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal ChartDataPointExprHost get_ExprHost();
    private sealed virtual override Action Microsoft.ReportingServices.ReportProcessing.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportProcessing.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal void Initialize(InitializationContext context);
    internal void DataRendererInitialize(InitializationContext context);
    internal void SetExprHost(ChartDataPointExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartDataPointInstance : InstanceInfoOwner {
    private int m_uniqueName;
    internal int UniqueName { get; internal set; }
    internal ChartDataPointInstanceInfo InstanceInfo { get; }
    internal ChartDataPointInstance(ProcessingContext pc, Chart chart, ChartDataPoint dataPointDef, int dataPointIndex);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal ChartDataPointInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager, ChartDataPointList chartDataPoints);
    internal ChartDataPointInstanceInfo get_InstanceInfo();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartDataPointInstanceInfo : InstanceInfo {
    private int m_dataPointIndex;
    private Object[] m_dataValues;
    private string m_dataLabelValue;
    private Object[] m_dataLabelStyleAttributeValues;
    private ActionInstance m_action;
    private Object[] m_styleAttributeValues;
    private Object[] m_markerStyleAttributeValues;
    private DataValueInstanceList m_customPropertyInstances;
    internal int DataPointIndex { get; internal set; }
    internal Object[] DataValues { get; internal set; }
    internal string DataLabelValue { get; internal set; }
    internal Object[] DataLabelStyleAttributeValues { get; internal set; }
    internal ActionInstance Action { get; internal set; }
    internal Object[] StyleAttributeValues { get; internal set; }
    internal Object[] MarkerStyleAttributeValues { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    internal ChartDataPointInstanceInfo(ProcessingContext pc, Chart chart, ChartDataPoint dataPointDef, int dataPointIndex, ChartDataPointInstance owner);
    internal int get_DataPointIndex();
    internal void set_DataPointIndex(int value);
    internal Object[] get_DataValues();
    internal void set_DataValues(Object[] value);
    internal string get_DataLabelValue();
    internal void set_DataLabelValue(string value);
    internal Object[] get_DataLabelStyleAttributeValues();
    internal void set_DataLabelStyleAttributeValues(Object[] value);
    internal ActionInstance get_Action();
    internal void set_Action(ActionInstance value);
    internal Object[] get_StyleAttributeValues();
    internal void set_StyleAttributeValues(Object[] value);
    internal Object[] get_MarkerStyleAttributeValues();
    internal void set_MarkerStyleAttributeValues(Object[] value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ChartDataPointInstanceList : ArrayList {
    internal ChartDataPointInstance Item { get; }
    internal ChartDataPointInstanceList(int capacity);
    internal ChartDataPointInstance get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ChartDataPointInstancesList : ArrayList {
    internal ChartDataPointInstanceList Item { get; }
    internal ChartDataPointInstancesList(int capacity);
    internal ChartDataPointInstanceList get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ChartDataPointList : ArrayList {
    internal ChartDataPoint Item { get; }
    internal ChartDataPointList(int capacity);
    internal ChartDataPoint get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartHeading : PivotHeading {
    private ExpressionInfoList m_labels;
    private RunningValueInfoList m_runningValues;
    private bool m_chartGroupExpression;
    private BoolList m_plotTypesLine;
    private ChartDynamicGroupExprHost m_exprHost;
    internal ChartHeading SubHeading { get; internal set; }
    internal ExpressionInfoList Labels { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal bool ChartGroupExpression { get; internal set; }
    internal BoolList PlotTypesLine { get; internal set; }
    internal ChartDynamicGroupExprHost ExprHost { get; }
    internal ChartHeading(int id, Chart chartDef);
    internal ChartHeading get_SubHeading();
    internal void set_SubHeading(ChartHeading value);
    internal ExpressionInfoList get_Labels();
    internal void set_Labels(ExpressionInfoList value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal bool get_ChartGroupExpression();
    internal void set_ChartGroupExpression(bool value);
    internal BoolList get_PlotTypesLine();
    internal void set_PlotTypesLine(BoolList value);
    internal ChartDynamicGroupExprHost get_ExprHost();
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal void SetExprHost(ChartDynamicGroupExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void LabelCollectionInitialize(InitializationContext context, bool registerRunningValues, bool isStatic);
    internal int DynamicInitialize(bool column, int level, InitializationContext context);
    internal int StaticInitialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartHeadingInstance : InstanceInfoOwner {
    private int m_uniqueName;
    [ReferenceAttribute]
private ChartHeading m_chartHeadingDef;
    private ChartHeadingInstanceList m_subHeadingInstances;
    internal int UniqueName { get; internal set; }
    internal ChartHeading ChartHeadingDef { get; internal set; }
    internal ChartHeadingInstanceList SubHeadingInstances { get; internal set; }
    internal ChartHeadingInstanceInfo InstanceInfo { get; }
    internal ChartHeadingInstance(ProcessingContext pc, int headingCellIndex, ChartHeading chartHeadingDef, int labelIndex, VariantList groupExpressionValues);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal ChartHeading get_ChartHeadingDef();
    internal void set_ChartHeadingDef(ChartHeading value);
    internal ChartHeadingInstanceList get_SubHeadingInstances();
    internal void set_SubHeadingInstances(ChartHeadingInstanceList value);
    internal ChartHeadingInstanceInfo get_InstanceInfo();
    internal ChartHeadingInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartHeadingInstanceInfo : InstanceInfo {
    private object m_headingLabel;
    private int m_headingCellIndex;
    private int m_headingSpan;
    private object m_groupExpressionValue;
    private int m_staticGroupingIndex;
    private DataValueInstanceList m_customPropertyInstances;
    internal object HeadingLabel { get; internal set; }
    internal int HeadingCellIndex { get; internal set; }
    internal int HeadingSpan { get; internal set; }
    internal object GroupExpressionValue { get; internal set; }
    internal int StaticGroupingIndex { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    internal ChartHeadingInstanceInfo(ProcessingContext pc, int headingCellIndex, ChartHeading chartHeadingDef, int labelIndex, VariantList groupExpressionValues);
    internal object get_HeadingLabel();
    internal void set_HeadingLabel(object value);
    internal int get_HeadingCellIndex();
    internal void set_HeadingCellIndex(int value);
    internal int get_HeadingSpan();
    internal void set_HeadingSpan(int value);
    internal object get_GroupExpressionValue();
    internal void set_GroupExpressionValue(object value);
    internal int get_StaticGroupingIndex();
    internal void set_StaticGroupingIndex(int value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ChartHeadingInstanceList : ArrayList {
    private ChartHeadingInstance m_lastHeadingInstance;
    internal ChartHeadingInstance Item { get; }
    internal ChartHeadingInstanceList(int capacity);
    internal ChartHeadingInstance get_Item(int index);
    internal void Add(ChartHeadingInstance chartHeadingInstance, ProcessingContext pc);
    internal void SetLastHeadingSpan(int currentCellIndex, ProcessingContext pc);
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartInstance : ReportItemInstance {
    private MultiChartInstanceList m_multiCharts;
    private int m_currentCellOuterIndex;
    private int m_currentCellInnerIndex;
    private int m_currentOuterStaticIndex;
    private int m_currentInnerStaticIndex;
    private int m_startPage;
    private int m_endPage;
    internal MultiChartInstanceList MultiCharts { get; internal set; }
    private MultiChartInstance CurrentMultiChart { get; }
    internal ChartHeadingInstanceList ColumnInstances { get; }
    internal ChartHeadingInstanceList RowInstances { get; }
    internal ChartDataPointInstancesList DataPoints { get; }
    internal int DataPointSeriesCount { get; }
    internal int DataPointCategoryCount { get; }
    internal int CurrentCellOuterIndex { get; }
    internal int CurrentCellInnerIndex { get; }
    unknown int CurrentOuterStaticIndex {internal set; }
    unknown int CurrentInnerStaticIndex {internal set; }
    internal ChartHeadingInstanceList InnerHeadingInstanceList { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal ChartInstance(ProcessingContext pc, Chart reportItemDef);
    internal MultiChartInstanceList get_MultiCharts();
    internal void set_MultiCharts(MultiChartInstanceList value);
    private MultiChartInstance get_CurrentMultiChart();
    internal ChartHeadingInstanceList get_ColumnInstances();
    internal ChartHeadingInstanceList get_RowInstances();
    internal ChartDataPointInstancesList get_DataPoints();
    internal int get_DataPointSeriesCount();
    internal int get_DataPointCategoryCount();
    internal int get_CurrentCellOuterIndex();
    internal int get_CurrentCellInnerIndex();
    internal void set_CurrentOuterStaticIndex(int value);
    internal void set_CurrentInnerStaticIndex(int value);
    internal ChartHeadingInstanceList get_InnerHeadingInstanceList();
    internal void set_InnerHeadingInstanceList(ChartHeadingInstanceList value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal ChartDataPoint GetCellDataPoint(int cellDPIndex);
    internal ChartDataPointInstance AddCell(ProcessingContext pc, int currCellDPIndex);
    internal void NewOuterCells();
    internal int GetCurrentCellDPIndex();
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartInstanceInfo : ReportItemInstanceInfo {
    private AxisInstance m_categoryAxis;
    private AxisInstance m_valueAxis;
    private ChartTitleInstance m_title;
    private Object[] m_plotAreaStyleAttributeValues;
    private Object[] m_legendStyleAttributeValues;
    private string m_cultureName;
    private string m_noRows;
    internal AxisInstance CategoryAxis { get; internal set; }
    internal AxisInstance ValueAxis { get; internal set; }
    internal ChartTitleInstance Title { get; internal set; }
    internal Object[] PlotAreaStyleAttributeValues { get; internal set; }
    internal Object[] LegendStyleAttributeValues { get; internal set; }
    internal string CultureName { get; internal set; }
    internal string NoRows { get; internal set; }
    internal ChartInstanceInfo(ProcessingContext pc, Chart reportItemDef, ChartInstance owner);
    internal ChartInstanceInfo(Chart reportItemDef);
    internal AxisInstance get_CategoryAxis();
    internal void set_CategoryAxis(AxisInstance value);
    internal AxisInstance get_ValueAxis();
    internal void set_ValueAxis(AxisInstance value);
    internal ChartTitleInstance get_Title();
    internal void set_Title(ChartTitleInstance value);
    internal Object[] get_PlotAreaStyleAttributeValues();
    internal void set_PlotAreaStyleAttributeValues(Object[] value);
    internal Object[] get_LegendStyleAttributeValues();
    internal void set_LegendStyleAttributeValues(Object[] value);
    internal string get_CultureName();
    internal void set_CultureName(string value);
    internal string get_NoRows();
    internal void set_NoRows(string value);
    private void SaveChartCulture();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartTitle : object {
    private ExpressionInfo m_caption;
    private Style m_styleClass;
    private Positions m_position;
    private ChartTitleExprHost m_exprHost;
    internal ExpressionInfo Caption { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal Positions Position { get; internal set; }
    internal ChartTitleExprHost ExprHost { get; }
    internal ExpressionInfo get_Caption();
    internal void set_Caption(ExpressionInfo value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal Positions get_Position();
    internal void set_Position(Positions value);
    internal ChartTitleExprHost get_ExprHost();
    internal void SetExprHost(ChartTitleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChartTitleInstance : object {
    private int m_uniqueName;
    private string m_caption;
    private Object[] m_styleAttributeValues;
    internal int UniqueName { get; internal set; }
    internal string Caption { get; internal set; }
    internal Object[] StyleAttributeValues { get; internal set; }
    internal ChartTitleInstance(ProcessingContext pc, Chart chart, ChartTitle titleDef, string propertyName);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal string get_Caption();
    internal void set_Caption(string value);
    internal Object[] get_StyleAttributeValues();
    internal void set_StyleAttributeValues(Object[] value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.CheckBox : ReportItem {
    private ExpressionInfo m_value;
    private string m_hideDuplicates;
    private bool m_oldValue;
    private bool m_hasOldValue;
    internal ObjectType ObjectType { get; }
    internal ExpressionInfo Value { get; internal set; }
    internal string HideDuplicates { get; internal set; }
    internal bool OldValue { get; internal set; }
    internal bool HasOldValue { get; internal set; }
    internal CheckBox(ReportItem parent);
    internal CheckBox(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal string get_HideDuplicates();
    internal void set_HideDuplicates(string value);
    internal bool get_OldValue();
    internal void set_OldValue(bool value);
    internal bool get_HasOldValue();
    internal void set_HasOldValue(bool value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.CheckBoxInstance : ReportItemInstance {
    internal CheckBoxInstanceInfo InstanceInfo { get; }
    internal CheckBoxInstance(ProcessingContext pc, CheckBox reportItemDef, int index);
    internal CheckBoxInstanceInfo get_InstanceInfo();
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.CheckBoxInstanceInfo : ReportItemInstanceInfo {
    private bool m_value;
    private bool m_duplicate;
    internal bool Value { get; internal set; }
    internal bool Duplicate { get; internal set; }
    internal CheckBoxInstanceInfo(ProcessingContext pc, CheckBox reportItemDef, ReportItemInstance owner, int index);
    internal CheckBoxInstanceInfo(CheckBox reportItemDef);
    internal bool get_Value();
    internal void set_Value(bool value);
    internal bool get_Duplicate();
    internal void set_Duplicate(bool value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ChunkFactoryAdapter : object {
    private IChunkFactory m_chunkFactory;
    internal ChunkFactoryAdapter(IChunkFactory aFactory);
    public Stream CreateReportChunk(string name, ReportChunkTypes type, string mimeType);
    public Stream GetReportChunk(string name, ReportChunkTypes type, String& mimeType);
    public string GetChunkMimeType(string name, ReportChunkTypes type);
}
internal class Microsoft.ReportingServices.ReportProcessing.ChunkManager : object {
    internal static string Definition;
    internal static string MainChunk;
    internal static string FirstPageChunk;
    internal static string OtherPageChunk;
    internal static string SpecialChunk;
    internal static string DocumentMap;
    internal static string ShowHideInfo;
    internal static string Bookmarks;
    internal static string Drillthrough;
    internal static string QuickFind;
    internal static string SortFilterEventInfo;
    internal static string DataChunkPrefix;
    internal static string PageSections;
    internal static string PageSectionInstances;
    internal static string Delimiter;
    private static int InstancePerChunk;
    private static int RecordRowPerChunk;
    private static string GenerateDataChunkName(string dataSetName, string subReportName, bool isShareable, int reportUniqueName);
    private static string GenerateDataChunkName(DataSet dataSet, ProcessingContext context, bool writeOperation);
}
internal enum Microsoft.ReportingServices.ReportProcessing.ChunkMode : Enum {
    public int value__;
    public static ChunkMode Open;
    public static ChunkMode OpenOrCreate;
}
internal class Microsoft.ReportingServices.ReportProcessing.CLSNameValidator : NameValidator {
    internal static bool ValidateDataElementName(String& elementName, string defaultName, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportProcessing.CLSUniqueNameValidator : NameValidator {
    private ProcessingErrorCode m_errorCodeNotCLS;
    private ProcessingErrorCode m_errorCodeNotUnique;
    internal CLSUniqueNameValidator(ProcessingErrorCode errorCodeNotCLS, ProcessingErrorCode errorCodeNotUnique);
    internal bool Validate(ObjectType objectType, string name, ErrorContext errorContext);
    internal bool Validate(string name, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal bool Validate(string name, string dataField, string dataSetName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportProcessing.CodeClass : ValueType {
    internal string ClassName;
    internal string InstanceName;
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.CodeClassList : ArrayList {
    internal CodeClass Item { get; }
    internal CodeClassList(int capacity);
    internal CodeClass get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.Constants : object {
    internal static string AccentSensitivity;
    internal static string Action;
    internal static string Actions;
    internal static string ActionInfo;
    internal static string ActiveXControl;
    internal static string AllowBlank;
    internal static string AltReportItem;
    internal static string Ascending;
    internal static string Author;
    internal static string AutoRefresh;
    internal static string BackgroundColor;
    internal static string BackgroundGradientEndColor;
    internal static string BackgroundGradientType;
    internal static string BackgroundImage;
    internal static string BackgroundImageSource;
    internal static string BackgroundImageValue;
    internal static string BackgroundImageMIMEType;
    internal static string BackgroundRepeat;
    internal static string Body;
    internal static string Bookmark;
    internal static string BookmarkLink;
    internal static string BorderColor;
    internal static string BorderColorLeft;
    internal static string BorderColorRight;
    internal static string BorderColorTop;
    internal static string BorderColorBottom;
    internal static string BorderStyle;
    internal static string BorderStyleLeft;
    internal static string BorderStyleRight;
    internal static string BorderStyleTop;
    internal static string BorderStyleBottom;
    internal static string BorderWidth;
    internal static string BorderWidthLeft;
    internal static string BorderWidthRight;
    internal static string BorderWidthTop;
    internal static string BorderWidthBottom;
    internal static string Bottom;
    internal static string BottomMargin;
    internal static string CanGrow;
    internal static string Calendar;
    internal static string CanShrink;
    internal static string CaseSensitivity;
    internal static string Cell;
    internal static string Chart;
    internal static string ChartSubType;
    internal static string Checkbox;
    internal static string Class;
    internal static string Classes;
    internal static string ClassID;
    internal static string ClassName;
    internal static string Code;
    internal static string CodeBase;
    internal static string CodeModule;
    internal static string CodeModules;
    internal static string Collation;
    internal static string Color;
    internal static string ColSpan;
    internal static string ColumnGrouping;
    internal static string ColumnGroupings;
    internal static string Columns;
    internal static string ColumnSpacing;
    internal static string CommandText;
    internal static string CommandType;
    internal static string ConnectionProperties;
    internal static string ConnectString;
    internal static string Corner;
    internal static string Custom;
    internal static string CustomData;
    internal static string CustomProperties;
    internal static string CustomProperty;
    internal static string CustomReportItem;
    internal static string DataCell;
    internal static string DataColumnGroupings;
    internal static string DataField;
    internal static string DataGrouping;
    internal static string DataGroupings;
    internal static string DataProvider;
    internal static string DataRowGroupings;
    internal static string DataRow;
    internal static string DataRows;
    internal static string DataSets;
    internal static string DataSet;
    internal static string DataSetName;
    internal static string DataSetReference;
    internal static string DataSource;
    internal static string DataSourceReference;
    internal static string DataSources;
    internal static string DataSourceName;
    internal static string DataType;
    internal static string Default;
    internal static string DefaultValue;
    internal static string Description;
    internal static string Detail;
    internal static string Details;
    internal static string Direction;
    internal static string Drillthrough;
    internal static string DrillthroughParameters;
    internal static string DrillthroughParamVal;
    internal static string DrillthroughReportName;
    internal static string DynamicColumns;
    internal static string DynamicRows;
    internal static string EmbeddedImage;
    internal static string EmbeddedImages;
    internal static string ExecutionTime;
    internal static string Fields;
    internal static string Field;
    internal static string FieldExtendedProperty;
    internal static string FillPage;
    internal static string Filter;
    internal static string FilterExpression;
    internal static string Filters;
    internal static string FilterValue;
    internal static string FilterValues;
    internal static string FontStyle;
    internal static string FontFamily;
    internal static string FontSize;
    internal static string FontWeight;
    internal static string Footer;
    internal static string Format;
    internal static string Function;
    internal static string Group;
    internal static string GroupExpressions;
    internal static string GroupExpression;
    internal static string Grouping;
    internal static string GroupsBeforeRowHeaders;
    internal static string Header;
    internal static string Height;
    internal static string Hidden;
    internal static string HideDuplicates;
    internal static string Hyperlink;
    internal static string Image;
    internal static string ImageData;
    internal static string ImageURL;
    internal static string InitialState;
    internal static string InstanceName;
    internal static string IntegratedSecurity;
    internal static string InteractiveHeight;
    internal static string InteractiveWidth;
    internal static string Item;
    internal static string Items;
    internal static string KanatypeSensitivity;
    internal static string KeepTogether;
    internal static string Label;
    internal static string LabelField;
    internal static string Language;
    internal static string LayoutDirection;
    internal static string Left;
    internal static string LeftMargin;
    internal static string Line;
    internal static string LineHeight;
    internal static string LinkToChild;
    internal static string List;
    internal static string Matrix;
    internal static string MatrixCell;
    internal static string MatrixCells;
    internal static string MatrixColumn;
    internal static string MatrixColumns;
    internal static string MatrixRow;
    internal static string MatrixRows;
    internal static string MergeTransactions;
    internal static string MIMEType;
    internal static string MultiValue;
    internal static string Name;
    internal static string Namespace;
    internal static string NoRows;
    internal static string Nullable;
    internal static string NumeralLanguage;
    internal static string NumeralVariant;
    internal static string Omit;
    internal static string Operator;
    internal static string OWCChart;
    internal static string OWCColumn;
    internal static string OWCColumns;
    internal static string OWCDefinition;
    internal static string PaddingLeft;
    internal static string PaddingRight;
    internal static string PaddingTop;
    internal static string PaddingBottom;
    internal static string PageHeight;
    internal static string PageWidth;
    internal static string PageBreakAtStart;
    internal static string PageBreakAtEnd;
    internal static string PageHeader;
    internal static string PageFooter;
    internal static string PageNumber;
    internal static string Parameters;
    internal static string Parameter;
    internal static string ParameterOmit;
    internal static string ParameterValue;
    internal static string ParameterValues;
    internal static string Parent;
    internal static string Position;
    internal static string PrintOnFirstPage;
    internal static string PrintOnLastPage;
    internal static string Prompt;
    internal static string Query;
    internal static string QueryParameters;
    internal static string QueryParameter;
    internal static string Rectangle;
    internal static string RepeatOnNewPage;
    internal static string Repeat;
    internal static string RepeatWith;
    internal static string Report;
    internal static string ReportItems;
    internal static string ReportItem;
    internal static string ReportFolder;
    internal static string ReportName;
    internal static string ReportParameters;
    internal static string ReportParameter;
    internal static string ReportServerUrl;
    internal static string Right;
    internal static string RightMargin;
    internal static string RowGrouping;
    internal static string RowGroupings;
    internal static string RTL;
    internal static string SharedStyles;
    internal static string Sizing;
    internal static string Sort;
    internal static string SortBy;
    internal static string SortExpression;
    internal static string SortExpressions;
    internal static string SortExpressionScope;
    internal static string Sorting;
    internal static string SortTarget;
    internal static string Source;
    internal static string Static;
    internal static string StaticColumn;
    internal static string StaticColumns;
    internal static string StaticRow;
    internal static string StaticRows;
    internal static string Style;
    internal static string Styles;
    internal static string Subreport;
    internal static string Subtotals;
    internal static string Subtotal;
    internal static string Table;
    internal static string TableCells;
    internal static string TableCell;
    internal static string TableColumns;
    internal static string TableColumn;
    internal static string TableDetails;
    internal static string TableGroups;
    internal static string TableGroup;
    internal static string TableRow;
    internal static string TableRows;
    internal static string Textbox;
    internal static string TextDecoration;
    internal static string TextAlign;
    internal static string Timeout;
    internal static string ToggleImage;
    internal static string ToggleItem;
    internal static string ToolTip;
    internal static string Top;
    internal static string TopMargin;
    internal static string Total;
    internal static string TotalPages;
    internal static string Transaction;
    internal static string UnicodeBiDi;
    internal static string UsedInQuery;
    internal static string UserID;
    internal static string UserSort;
    internal static string ValidValue;
    internal static string ValidValues;
    internal static string Value;
    internal static string Values;
    internal static string ValueField;
    internal static string VerticalAlign;
    internal static string Visibility;
    internal static string Width;
    internal static string WidthSensitivity;
    internal static string WritingMode;
    internal static string ZIndex;
    internal static string ReportScope;
    internal static string CellScope;
    internal static string DataTransform;
    internal static string DataSchema;
    internal static string DataElementName;
    internal static string DataElementStyle;
    internal static string AttributeNormal;
    internal static string DataElementOutput;
    internal static string DataCollectionName;
    internal static string DataInstanceName;
    internal static string DataInstanceElementOutput;
    internal static string CellDataElementName;
    internal static string CellDataElementOutput;
    internal static string ChartElementOutput;
    internal static string Collection;
    internal static string DetailDataElementName;
    internal static string DetailDataCollectionName;
    internal static string DetailDataElementOutput;
    internal static string Type;
    internal static string Subtype;
    internal static string SeriesGroupings;
    internal static string SeriesGrouping;
    internal static string CategoryGroupings;
    internal static string CategoryGrouping;
    internal static string HeadingLabel;
    internal static string DataPoints;
    internal static string DataPoint;
    internal static string DataValues;
    internal static string DataValue;
    internal static string CategoryAxis;
    internal static string ValueAxis;
    internal static string FilterAxis;
    internal static string MultiChart;
    internal static string Title;
    internal static string PointWidth;
    internal static string Palette;
    internal static string ThreeDProperties;
    internal static string PlotArea;
    internal static string DynamicSeries;
    internal static string StaticSeries;
    internal static string DynamicCategories;
    internal static string StaticCategories;
    internal static string StaticMember;
    internal static string Caption;
    internal static string Legend;
    internal static string Axis;
    internal static string DataLabel;
    internal static string Marker;
    internal static string MarkerType;
    internal static string MarkerSize;
    internal static string PlotType;
    internal static string ShowEquation;
    internal static string ShowRSquared;
    internal static string Crossbeam;
    internal static string Percent;
    internal static string Fixed;
    internal static string PlusMinus;
    internal static string Minus;
    internal static string Layout;
    internal static string MaxCount;
    internal static string SyncScale;
    internal static string Horizontal;
    internal static string Vertical;
    internal static string ProjectionMode;
    internal static string Rotation;
    internal static string Inclination;
    internal static string Perspective;
    internal static string HeightRatio;
    internal static string DepthRatio;
    internal static string Shading;
    internal static string GapDepth;
    internal static string WallThickness;
    internal static string Origin;
    internal static string MajorTickMarks;
    internal static string MinorTickMarks;
    internal static string MajorGridLines;
    internal static string MinorGridLines;
    internal static string MajorInterval;
    internal static string MinorInterval;
    internal static string Reverse;
    internal static string ShowGridLines;
    internal static string Min;
    internal static string Max;
    internal static string LogScale;
    internal static string SplitAxis;
    internal static string CrossAt;
    internal static string SplitStart;
    internal static string SplitEnd;
    internal static string Visible;
    internal static string InsidePlotArea;
    internal static string Interlaced;
    internal static string Enabled;
    internal static string DrawingStyle;
    internal static string Cube;
    internal static string Clustered;
    internal static string Margin;
    internal static string Size;
    internal static string TitleCaption;
    internal static string Scalar;
    internal static string ChartData;
    internal static string ChartSeries;
    internal static string FixedHeader;
    internal static string URLProtocols;
    internal static string ErrorOverflowException;
    internal static string ErrorUnsupportedDatatype;
    internal static string GenericError;
    internal static string PageBreak;
    internal static string BreakLocation;
    internal static string Tablix;
    internal static string TablixGrouping;
    internal static string TablixGroupings;
    internal static string RowSpan;
    internal static string RepeatWithGroup;
}
internal enum Microsoft.ReportingServices.ReportProcessing.ConstructionPhase : Enum {
    public int value__;
    public static ConstructionPhase Publishing;
    public static ConstructionPhase Deserializing;
}
internal class Microsoft.ReportingServices.ReportProcessing.Converter : object {
    internal static double Inches160;
    internal static double Pt1;
    internal static double Pt200;
    internal static double PtPoint25;
    internal static double Pt20;
    internal static double Pt1000;
    private static Converter();
    internal static string ConvertSize(double size);
    internal static double ConvertToMM(RVUnit unit);
}
internal class Microsoft.ReportingServices.ReportProcessing.Count : DataAggregate {
    private int m_currentTotal;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.CountDistinct : DataAggregate {
    private Hashtable m_distinctValues;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.CountRows : DataAggregate {
    private int m_currentTotal;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.CRI2005UpgradeException : Exception {
    public CRI2005UpgradeException(string msg);
    public CRI2005UpgradeException(string msg, Exception inner);
    private CRI2005UpgradeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.CustomPropertyUniqueNameValidator : NameValidator {
    internal bool Validate(Severity severity, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItem : Tablix {
    private string m_type;
    private ReportItemCollection m_altReportItem;
    private CustomReportItemHeadingList m_columns;
    private CustomReportItemHeadingList m_rows;
    private DataCellsList m_dataRowCells;
    private RunningValueInfoList m_cellRunningValues;
    private IntList m_cellExprHostIDs;
    private ReportItemCollection m_renderReportItem;
    private int m_expectedColumns;
    private int m_expectedRows;
    private CustomReportItemExprHost m_exprHost;
    private CustomReportItemHeadingList m_staticColumns;
    private bool m_staticColumnsInitialized;
    private CustomReportItemHeadingList m_staticRows;
    private bool m_staticRowsInitialized;
    private CustomReportItemInstance m_criInstance;
    private CustomReportItemInstanceInfo m_criInstanceInfo;
    private ProcessingContext m_processingContext;
    private int m_repeatedSiblingIndex;
    private ObjectType m_customObjectType;
    private string m_customObjectName;
    private string m_customPropertyName;
    private string m_customTopLevelRenderItemName;
    private bool m_firstInstance;
    internal ObjectType ObjectType { get; }
    internal TablixHeadingList TablixColumns { get; }
    internal TablixHeadingList TablixRows { get; }
    internal RunningValueInfoList TablixCellRunningValues { get; }
    internal string Type { get; internal set; }
    internal ReportItemCollection AltReportItem { get; internal set; }
    internal CustomReportItemHeadingList Columns { get; internal set; }
    internal CustomReportItemHeadingList Rows { get; internal set; }
    internal DataCellsList DataRowCells { get; internal set; }
    internal RunningValueInfoList CellRunningValues { get; internal set; }
    internal IntList CellExprHostIDs { get; internal set; }
    internal int ExpectedColumns { get; internal set; }
    internal int ExpectedRows { get; internal set; }
    internal CustomReportItemHeadingList StaticColumns { get; }
    internal CustomReportItemHeadingList StaticRows { get; }
    internal ReportItemCollection RenderReportItem { get; internal set; }
    internal bool FirstInstanceOfRenderReportItem { get; internal set; }
    internal ProcessingContext ProcessingContext { get; internal set; }
    internal ObjectType CustomObjectType { get; internal set; }
    internal string CustomObjectName { get; internal set; }
    protected DataRegionExprHost DataRegionExprHost { get; }
    internal CustomReportItem(ReportItem parent);
    internal CustomReportItem(int id, int idAltReportitem, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal virtual TablixHeadingList get_TablixColumns();
    internal virtual TablixHeadingList get_TablixRows();
    internal virtual RunningValueInfoList get_TablixCellRunningValues();
    internal string get_Type();
    internal void set_Type(string value);
    internal ReportItemCollection get_AltReportItem();
    internal void set_AltReportItem(ReportItemCollection value);
    internal CustomReportItemHeadingList get_Columns();
    internal void set_Columns(CustomReportItemHeadingList value);
    internal CustomReportItemHeadingList get_Rows();
    internal void set_Rows(CustomReportItemHeadingList value);
    internal DataCellsList get_DataRowCells();
    internal void set_DataRowCells(DataCellsList value);
    internal RunningValueInfoList get_CellRunningValues();
    internal void set_CellRunningValues(RunningValueInfoList value);
    internal IntList get_CellExprHostIDs();
    internal void set_CellExprHostIDs(IntList value);
    internal int get_ExpectedColumns();
    internal void set_ExpectedColumns(int value);
    internal int get_ExpectedRows();
    internal void set_ExpectedRows(int value);
    internal CustomReportItemHeadingList get_StaticColumns();
    internal CustomReportItemHeadingList get_StaticRows();
    internal ReportItemCollection get_RenderReportItem();
    internal void set_RenderReportItem(ReportItemCollection value);
    internal bool get_FirstInstanceOfRenderReportItem();
    internal void set_FirstInstanceOfRenderReportItem(bool value);
    internal ProcessingContext get_ProcessingContext();
    internal void set_ProcessingContext(ProcessingContext value);
    internal ObjectType get_CustomObjectType();
    internal void set_CustomObjectType(ObjectType value);
    internal string get_CustomObjectName();
    internal void set_CustomObjectName(string value);
    protected virtual DataRegionExprHost get_DataRegionExprHost();
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal virtual bool Initialize(InitializationContext context);
    private void CustomInitialize(InitializationContext context);
    private void InitializeStaticGroups(bool isRows);
    private bool ValidateProcessingRestrictions(InitializationContext context);
    private bool ValidateRDLStructure(InitializationContext context);
    private void DataCellInitialize(InitializationContext context);
    private void SetupRowScopesAndInitialize(CustomReportItemHeadingList rowHeadings, int cellRowIndex, InitializationContext context);
    private void SetupColumnScopesAndInitialize(CustomReportItemHeadingList columnHeadings, DataCellList cellList, Int32& cellIndex, InitializationContext context);
    internal void CopyHeadingAggregates(CustomReportItemHeadingList headings);
    internal virtual int GetDynamicHeadingCount(bool outerGroupings);
    internal virtual TablixHeadingList SkipStatics(TablixHeadingList headings);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual Hashtable GetOuterScopeNames(int dynamicLevel);
    internal static Declaration GetDeclaration();
    internal void CustomProcessingInitialize(CustomReportItemInstance instance, CustomReportItemInstanceInfo instanceInfo, ProcessingContext context, int repeatedSiblingIndex);
    internal void CustomProcessingReset();
    internal void DeconstructRenderItem(ReportItem renderItem, CustomReportItemInstance criInstance);
    private void DeconstructImageInstance(Image image, ImageInstance imageInstance, ImageInstanceInfo imageInstanceInfo, Image renderImage, bool isfirstInstance, bool isRootItem, IErrorContext errorContext);
    private Image DeconstructImageDefinition(Image renderItem, bool isRootItem);
    private void SetLabel(string label, ReportItem definition, ReportItemInstance instance, ReportItemInstanceInfo instanceInfo);
    private void SetBookmark(string bookmark, ReportItem definition, ReportItemInstance instance, ReportItemInstanceInfo instanceInfo);
    private void DeconstructReportItemInstance(ReportItem definition, ReportItemInstance instance, ReportItemInstanceInfo instanceInfo, ReportItem renderItem, bool isRootItem);
    private void DeconstructReportItemDefinition(ReportItem definition, ReportItem renderItem, bool isRootItem);
    internal static void DeconstructRenderStyle(bool firstStyleInstance, DataValueInstanceList sharedStyles, DataValueInstanceList nonSharedStyles, Style& style, Object[]& styleAttributeValues, CustomReportItem context);
    private void OverrideDefinitionSettings(ReportItem target);
    internal static bool CloneObject(object o, Object& clone);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, String[] arguments);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
}
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemCellInstance : object {
    private int m_rowIndex;
    private int m_columnIndex;
    private DataValueInstanceList m_dataValueInstances;
    internal int RowIndex { get; internal set; }
    internal int ColumnIndex { get; internal set; }
    internal DataValueInstanceList DataValueInstances { get; internal set; }
    internal CustomReportItemCellInstance(int rowIndex, int colIndex, CustomReportItem definition, ProcessingContext pc);
    internal int get_RowIndex();
    internal void set_RowIndex(int value);
    internal int get_ColumnIndex();
    internal void set_ColumnIndex(int value);
    internal DataValueInstanceList get_DataValueInstances();
    internal void set_DataValueInstances(DataValueInstanceList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemCellInstanceList : ArrayList {
    internal CustomReportItemCellInstance Item { get; }
    internal CustomReportItemCellInstanceList(int capacity);
    internal CustomReportItemCellInstance get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemCellInstancesList : ArrayList {
    internal CustomReportItemCellInstanceList Item { get; }
    internal CustomReportItemCellInstancesList(int capacity);
    internal CustomReportItemCellInstanceList get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemHeading : TablixHeading {
    private bool m_static;
    private CustomReportItemHeadingList m_innerHeadings;
    private DataValueList m_customProperties;
    private int m_exprHostID;
    private RunningValueInfoList m_runningValues;
    private DataGroupingExprHost m_exprHost;
    internal bool Static { get; internal set; }
    internal CustomReportItemHeadingList InnerHeadings { get; internal set; }
    internal DataValueList CustomProperties { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal DataGroupingExprHost ExprHost { get; }
    internal CustomReportItemHeading(int id, CustomReportItem crItem);
    internal bool get_Static();
    internal void set_Static(bool value);
    internal CustomReportItemHeadingList get_InnerHeadings();
    internal void set_InnerHeadings(CustomReportItemHeadingList value);
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal DataGroupingExprHost get_ExprHost();
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal bool Initialize(int level, CustomReportItemHeadingList peerHeadings, int headingIndex, DataCellsList dataRowCells, Int32& currentIndex, Int32& maxLevel, InitializationContext context);
    private void CommonInitialize(int level, DataCellsList dataRowCells, Int32& currentIndex, Int32& maxLevel, InitializationContext context);
    private static CustomReportItemHeading HeadingClone(CustomReportItemHeading heading, DataCellsList dataRowCells, Int32& currentIndex, int headingSpan, InitializationContext context);
    private static CustomReportItemHeadingList HeadingListClone(CustomReportItemHeadingList headings, DataCellsList dataRowCells, Int32& currentIndex, int headingSpan, InitializationContext context);
    internal static bool ValidateProcessingRestrictions(CustomReportItemHeadingList headings, bool isColumn, bool hasStatic, InitializationContext context);
    internal void CopySubHeadingAggregates();
    internal void TransferHeadingAggregates();
    internal void SetExprHost(IList`1<DataGroupingExprHost> dataGroupingHosts, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemHeadingInstance : object {
    private CustomReportItemHeadingInstanceList m_subHeadingInstances;
    [ReferenceAttribute]
private CustomReportItemHeading m_headingDef;
    private int m_headingCellIndex;
    private int m_headingSpan;
    private DataValueInstanceList m_customPropertyInstances;
    private string m_label;
    private VariantList m_groupExpressionValues;
    private int m_recursiveLevel;
    internal CustomReportItemHeadingInstanceList SubHeadingInstances { get; internal set; }
    internal CustomReportItemHeading HeadingDefinition { get; internal set; }
    internal int HeadingCellIndex { get; internal set; }
    internal int HeadingSpan { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    internal string Label { get; internal set; }
    internal VariantList GroupExpressionValues { get; internal set; }
    internal int RecursiveLevel { get; }
    internal CustomReportItemHeadingInstance(ProcessingContext pc, int headingCellIndex, CustomReportItemHeading headingDef, VariantList groupExpressionValues, int recursiveLevel);
    internal CustomReportItemHeadingInstanceList get_SubHeadingInstances();
    internal void set_SubHeadingInstances(CustomReportItemHeadingInstanceList value);
    internal CustomReportItemHeading get_HeadingDefinition();
    internal void set_HeadingDefinition(CustomReportItemHeading value);
    internal int get_HeadingCellIndex();
    internal void set_HeadingCellIndex(int value);
    internal int get_HeadingSpan();
    internal void set_HeadingSpan(int value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    internal string get_Label();
    internal void set_Label(string value);
    internal VariantList get_GroupExpressionValues();
    internal void set_GroupExpressionValues(VariantList value);
    internal int get_RecursiveLevel();
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemHeadingInstanceList : ArrayList {
    private CustomReportItemHeadingInstance m_lastHeadingInstance;
    internal CustomReportItemHeadingInstance Item { get; }
    internal CustomReportItemHeadingInstanceList(int capacity);
    internal CustomReportItemHeadingInstance get_Item(int index);
    internal void Add(CustomReportItemHeadingInstance headingInstance, ProcessingContext pc);
    internal void SetLastHeadingSpan(int currentCellIndex, ProcessingContext pc);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemHeadingList : TablixHeadingList {
    internal CustomReportItemHeading Item { get; }
    internal CustomReportItemHeadingList(int capacity);
    internal CustomReportItemHeading get_Item(int index);
    internal int Initialize(int level, DataCellsList dataRowCells, Int32& currentIndex, Int32& maxLevel, InitializationContext context);
    internal void TransferHeadingAggregates();
    internal virtual TablixHeadingList InnerHeadings();
}
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemInstance : ReportItemInstance {
    private ReportItemColInstance m_altReportItemColInstance;
    private CustomReportItemHeadingInstanceList m_columnInstances;
    private CustomReportItemHeadingInstanceList m_rowInstances;
    private CustomReportItemCellInstancesList m_cells;
    private int m_currentCellOuterIndex;
    private int m_currentCellInnerIndex;
    private int m_currentOuterStaticIndex;
    private int m_currentInnerStaticIndex;
    private CustomReportItemHeadingInstanceList m_innerHeadingInstanceList;
    private int m_startPage;
    private int m_endPage;
    internal ReportItemColInstance AltReportItemColInstance { get; internal set; }
    internal CustomReportItemHeadingInstanceList ColumnInstances { get; internal set; }
    internal CustomReportItemHeadingInstanceList RowInstances { get; internal set; }
    internal CustomReportItemCellInstancesList Cells { get; internal set; }
    internal int CurrentCellOuterIndex { get; }
    internal int CurrentCellInnerIndex { get; }
    unknown int CurrentOuterStaticIndex {internal set; }
    unknown int CurrentInnerStaticIndex {internal set; }
    internal CustomReportItemHeadingInstanceList InnerHeadingInstanceList { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal int CellColumnCount { get; }
    internal int CellRowCount { get; }
    internal CustomReportItemInstance(ProcessingContext pc, CustomReportItem reportItemDef);
    internal ReportItemColInstance get_AltReportItemColInstance();
    internal void set_AltReportItemColInstance(ReportItemColInstance value);
    internal CustomReportItemHeadingInstanceList get_ColumnInstances();
    internal void set_ColumnInstances(CustomReportItemHeadingInstanceList value);
    internal CustomReportItemHeadingInstanceList get_RowInstances();
    internal void set_RowInstances(CustomReportItemHeadingInstanceList value);
    internal CustomReportItemCellInstancesList get_Cells();
    internal void set_Cells(CustomReportItemCellInstancesList value);
    internal int get_CurrentCellOuterIndex();
    internal int get_CurrentCellInnerIndex();
    internal void set_CurrentOuterStaticIndex(int value);
    internal void set_CurrentInnerStaticIndex(int value);
    internal CustomReportItemHeadingInstanceList get_InnerHeadingInstanceList();
    internal void set_InnerHeadingInstanceList(CustomReportItemHeadingInstanceList value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal int get_CellColumnCount();
    internal int get_CellRowCount();
    internal CustomReportItemCellInstance AddCell(ProcessingContext pc);
    internal void NewOuterCells();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.CustomReportItemInstanceInfo : ReportItemInstanceInfo {
    internal CustomReportItemInstanceInfo(ProcessingContext pc, CustomReportItem reportItemDef, CustomReportItemInstance owner);
    internal CustomReportItemInstanceInfo(CustomReportItem reportItemDef);
    internal static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.DataAggregate : object {
    internal abstract virtual void Init();
    internal abstract virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal abstract virtual object Result();
    internal static DataTypeCode GetTypeCode(object o);
    internal static DataTypeCode GetTypeCode(object o, bool throwException, Boolean& valid);
    protected static bool IsNull(DataTypeCode typeCode);
    protected static bool IsVariant(DataTypeCode typeCode);
    protected static void ConvertToDoubleOrDecimal(DataTypeCode numericType, object numericData, DataTypeCode& doubleOrDecimalType, Object& doubleOrDecimalData);
    protected static object Add(DataTypeCode xType, object x, DataTypeCode yType, object y);
    protected static object Square(DataTypeCode xType, object x);
}
internal class Microsoft.ReportingServices.ReportProcessing.DataAggregateInfo : object {
    private string m_name;
    private AggregateTypes m_aggregateType;
    private ExpressionInfo[] m_expressions;
    private StringList m_duplicateNames;
    private string m_scope;
    private bool m_hasScope;
    private bool m_recursive;
    private bool m_isCopied;
    private AggregateParamExprHost[] m_expressionHosts;
    private bool m_exprHostInitialized;
    private ObjectModelImpl m_exprHostReportObjectModel;
    private bool m_suppressExceptions;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal string Name { get; internal set; }
    internal AggregateTypes AggregateType { get; internal set; }
    internal ExpressionInfo[] Expressions { get; internal set; }
    internal StringList DuplicateNames { get; internal set; }
    internal string ExpressionText { get; }
    internal AggregateParamExprHost[] ExpressionHosts { get; }
    internal bool ExprHostInitialized { get; internal set; }
    internal bool Recursive { get; internal set; }
    internal bool IsCopied { get; internal set; }
    internal bool SuppressExceptions { get; }
    internal List`1<string> FieldsUsedInValueExpression { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal AggregateTypes get_AggregateType();
    internal void set_AggregateType(AggregateTypes value);
    internal ExpressionInfo[] get_Expressions();
    internal void set_Expressions(ExpressionInfo[] value);
    internal StringList get_DuplicateNames();
    internal void set_DuplicateNames(StringList value);
    internal string get_ExpressionText();
    internal AggregateParamExprHost[] get_ExpressionHosts();
    internal bool get_ExprHostInitialized();
    internal void set_ExprHostInitialized(bool value);
    internal bool get_Recursive();
    internal void set_Recursive(bool value);
    internal bool get_IsCopied();
    internal void set_IsCopied(bool value);
    internal bool get_SuppressExceptions();
    internal List`1<string> get_FieldsUsedInValueExpression();
    internal void set_FieldsUsedInValueExpression(List`1<string> value);
    internal DataAggregateInfo DeepClone(InitializationContext context);
    protected void DeepCloneInternal(DataAggregateInfo clone, InitializationContext context);
    internal void SetScope(string scope);
    internal bool GetScope(String& scope);
    internal void SetExprHosts(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal bool IsPostSortAggregate();
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataAggregateInfoList : ArrayList {
    internal DataAggregateInfo Item { get; }
    internal DataAggregateInfoList(int capacity);
    internal DataAggregateInfo get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.DataAggregateObj : object {
    private bool m_nonAggregateMode;
    private string m_name;
    private StringList m_duplicateNames;
    private DataAggregate m_aggregator;
    private DataAggregateInfo m_aggregateDef;
    private ReportRuntime m_reportRT;
    private bool m_usedInExpression;
    private DataAggregateObjResult m_aggregateResult;
    internal string Name { get; }
    internal StringList DuplicateNames { get; }
    internal bool NonAggregateMode { get; }
    internal DataAggregateInfo AggregateDef { get; }
    internal bool UsedInExpression { get; internal set; }
    internal DataAggregateObj(DataAggregateInfo aggInfo, ProcessingContext processingContext);
    internal DataAggregateObj(DataAggregateInfo aggrDef, DataAggregateObjResult aggrResult);
    internal string get_Name();
    internal StringList get_DuplicateNames();
    internal bool get_NonAggregateMode();
    internal DataAggregateInfo get_AggregateDef();
    internal bool get_UsedInExpression();
    internal void set_UsedInExpression(bool value);
    internal void Init();
    internal void Update();
    internal DataAggregateObjResult AggregateResult();
    internal bool EvaluateParameters(Object[]& values, DataFieldStatus& fieldStatus);
    internal void Set(DataAggregateObjResult aggregateResult);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, String[] arguments);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataAggregateObjList : ArrayList {
    internal DataAggregateObj Item { get; }
    internal DataAggregateObj get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.DataAggregateObjResult : ValueType {
    internal bool ErrorOccurred;
    internal object Value;
    internal bool HasCode;
    internal ProcessingErrorCode Code;
    internal Severity Severity;
    internal String[] Arguments;
    internal DataFieldStatus FieldStatus;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataAggregateObjResultsList : ArrayList {
    internal DataAggregateObjResult[] Item { get; }
    internal DataAggregateObjResult[] get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataCellList : ArrayList {
    internal DataValueCRIList Item { get; }
    internal DataCellList(int capacity);
    internal DataValueCRIList get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataCellsList : ArrayList {
    internal DataCellList Item { get; }
    internal DataCellsList(int capacity);
    internal DataCellList get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataFieldList : ArrayList {
    internal Field Item { get; }
    internal DataFieldList(int capacity);
    internal Field get_Item(int index);
}
internal enum Microsoft.ReportingServices.ReportProcessing.DataFieldStatus : Enum {
    public int value__;
    public static DataFieldStatus None;
    public static DataFieldStatus Overflow;
    public static DataFieldStatus UnSupportedDataType;
    public static DataFieldStatus IsMissing;
    public static DataFieldStatus IsError;
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.DataRegion : ReportItem {
    protected string m_dataSetName;
    protected ExpressionInfo m_noRows;
    protected bool m_pageBreakAtEnd;
    protected bool m_pageBreakAtStart;
    protected bool m_keepTogether;
    protected IntList m_repeatSiblings;
    protected FilterList m_filters;
    protected DataAggregateInfoList m_aggregates;
    protected DataAggregateInfoList m_postSortAggregates;
    protected ExpressionInfoList m_userSortExpressions;
    protected InScopeSortFilterHashtable m_detailSortFiltersInScope;
    protected RuntimeDataRegionObj m_runtimeDataRegionObj;
    protected PageBreakStates m_pagebreakState;
    protected Hashtable m_scopeNames;
    protected bool m_inPivotCell;
    protected Boolean[] m_isSortFilterTarget;
    protected Boolean[] m_isSortFilterExpressionScope;
    protected Int32[] m_sortFilterSourceDetailScopeInfo;
    protected int m_currentDetailRowIndex;
    internal string DataSetName { get; internal set; }
    internal ExpressionInfo NoRows { get; internal set; }
    internal bool PageBreakAtEnd { get; internal set; }
    internal bool PageBreakAtStart { get; internal set; }
    internal bool KeepTogether { get; internal set; }
    internal IntList RepeatSiblings { get; internal set; }
    internal FilterList Filters { get; internal set; }
    internal DataAggregateInfoList Aggregates { get; internal set; }
    internal DataAggregateInfoList PostSortAggregates { get; internal set; }
    internal ExpressionInfoList UserSortExpressions { get; internal set; }
    internal InScopeSortFilterHashtable DetailSortFiltersInScope { get; internal set; }
    internal RuntimeDataRegionObj RuntimeDataRegionObj { get; internal set; }
    internal Hashtable ScopeNames { get; internal set; }
    internal bool InPivotCell { get; internal set; }
    internal Boolean[] IsSortFilterTarget { get; internal set; }
    internal Boolean[] IsSortFilterExpressionScope { get; internal set; }
    internal Int32[] SortFilterSourceDetailScopeInfo { get; internal set; }
    internal int CurrentDetailRowIndex { get; internal set; }
    protected DataRegionExprHost DataRegionExprHost { get; }
    private int Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.ID { get; }
    private string Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.ScopeName { get; }
    private Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.IsSortFilterTarget { get; private set; }
    private Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.IsSortFilterExpressionScope { get; private set; }
    private ExpressionInfoList Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.UserSortExpressions { get; private set; }
    private IndexedExprHost Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.UserSortExpressionsHost { get; }
    protected DataRegion(ReportItem parent);
    protected DataRegion(int id, ReportItem parent);
    internal string get_DataSetName();
    internal void set_DataSetName(string value);
    internal ExpressionInfo get_NoRows();
    internal void set_NoRows(ExpressionInfo value);
    internal bool get_PageBreakAtEnd();
    internal void set_PageBreakAtEnd(bool value);
    internal bool get_PageBreakAtStart();
    internal void set_PageBreakAtStart(bool value);
    internal bool get_KeepTogether();
    internal void set_KeepTogether(bool value);
    internal IntList get_RepeatSiblings();
    internal void set_RepeatSiblings(IntList value);
    internal FilterList get_Filters();
    internal void set_Filters(FilterList value);
    internal DataAggregateInfoList get_Aggregates();
    internal void set_Aggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_PostSortAggregates();
    internal void set_PostSortAggregates(DataAggregateInfoList value);
    internal ExpressionInfoList get_UserSortExpressions();
    internal void set_UserSortExpressions(ExpressionInfoList value);
    internal InScopeSortFilterHashtable get_DetailSortFiltersInScope();
    internal void set_DetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal RuntimeDataRegionObj get_RuntimeDataRegionObj();
    internal void set_RuntimeDataRegionObj(RuntimeDataRegionObj value);
    internal Hashtable get_ScopeNames();
    internal void set_ScopeNames(Hashtable value);
    internal bool get_InPivotCell();
    internal void set_InPivotCell(bool value);
    internal Boolean[] get_IsSortFilterTarget();
    internal void set_IsSortFilterTarget(Boolean[] value);
    internal Boolean[] get_IsSortFilterExpressionScope();
    internal void set_IsSortFilterExpressionScope(Boolean[] value);
    internal Int32[] get_SortFilterSourceDetailScopeInfo();
    internal void set_SortFilterSourceDetailScopeInfo(Int32[] value);
    internal int get_CurrentDetailRowIndex();
    internal void set_CurrentDetailRowIndex(int value);
    protected abstract virtual DataRegionExprHost get_DataRegionExprHost();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_ID();
    private sealed virtual override string Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_ScopeName();
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_IsSortFilterTarget();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_IsSortFilterExpressionScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_IsSortFilterExpressionScope(Boolean[] value);
    private sealed virtual override ExpressionInfoList Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_UserSortExpressions();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_UserSortExpressions(ExpressionInfoList value);
    private sealed virtual override IndexedExprHost Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_UserSortExpressionsHost();
    internal virtual bool Initialize(InitializationContext context);
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetAggregateLists();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetPostSortAggregateLists();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.ClearIfEmpty();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.HasPageBreaks(bool atStart);
    protected void DataRegionSetExprHost(DataRegionExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
[ArrayOfReferencesAttribute]
internal class Microsoft.ReportingServices.ReportProcessing.DataRegionList : ArrayList {
    internal DataRegion Item { get; }
    internal DataRegionList(int capacity);
    internal DataRegion get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.DataSet : IDOwner {
    internal static UInt32 CompareFlag_Default;
    internal static UInt32 CompareFlag_IgnoreCase;
    internal static UInt32 CompareFlag_IgnoreNonSpace;
    internal static UInt32 CompareFlag_IgnoreKanatype;
    internal static UInt32 CompareFlag_IgnoreWidth;
    private string m_name;
    private DataFieldList m_fields;
    private ReportQuery m_query;
    private Sensitivity m_caseSensitivity;
    private string m_collation;
    private Sensitivity m_accentSensitivity;
    private Sensitivity m_kanatypeSensitivity;
    private Sensitivity m_widthSensitivity;
    private DataRegionList m_dataRegions;
    private DataAggregateInfoList m_aggregates;
    private FilterList m_filters;
    private bool m_usedOnlyInParameters;
    private int m_nonCalculatedFieldCount;
    private int m_exprHostID;
    private DataAggregateInfoList m_postSortAggregates;
    private bool m_hasDetailUserSortFilter;
    private ExpressionInfoList m_userSortExpressions;
    private bool m_dynamicFieldReferences;
    private Nullable`1<bool> m_interpretSubtotalsAsDetails;
    private int m_recordSetSize;
    private UInt32 m_lcid;
    private DataSetExprHost m_exprHost;
    private string m_autoDetectedCollation;
    private Boolean[] m_isSortFilterTarget;
    private Hashtable m_referencedFieldProperties;
    private bool m_usedInAggregates;
    internal ObjectType ObjectType { get; }
    internal string Name { get; internal set; }
    internal DataFieldList Fields { get; internal set; }
    internal ReportQuery Query { get; internal set; }
    internal Sensitivity CaseSensitivity { get; internal set; }
    internal string Collation { get; internal set; }
    internal Sensitivity AccentSensitivity { get; internal set; }
    internal Sensitivity KanatypeSensitivity { get; internal set; }
    internal Sensitivity WidthSensitivity { get; internal set; }
    internal DataRegionList DataRegions { get; internal set; }
    internal DataAggregateInfoList Aggregates { get; internal set; }
    internal FilterList Filters { get; internal set; }
    internal bool UsedOnlyInParameters { get; internal set; }
    internal int NonCalculatedFieldCount { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal DataAggregateInfoList PostSortAggregates { get; internal set; }
    internal int RecordSetSize { get; internal set; }
    internal UInt32 LCID { get; internal set; }
    internal bool HasDetailUserSortFilter { get; internal set; }
    internal ExpressionInfoList UserSortExpressions { get; internal set; }
    internal DataSetExprHost ExprHost { get; }
    internal string AutoDetectedCollation { get; internal set; }
    internal Boolean[] IsSortFilterTarget { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.ID { get; }
    private string Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.ScopeName { get; }
    private Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.IsSortFilterTarget { get; private set; }
    private Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.IsSortFilterExpressionScope { get; private set; }
    private ExpressionInfoList Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.UserSortExpressions { get; private set; }
    private IndexedExprHost Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.UserSortExpressionsHost { get; }
    internal bool DynamicFieldReferences { get; internal set; }
    internal bool UsedInAggregates { get; internal set; }
    internal bool InterpretSubtotalsAsDetailsIsAuto { get; }
    internal bool InterpretSubtotalsAsDetails { get; internal set; }
    internal DataSet(int id);
    internal ObjectType get_ObjectType();
    internal string get_Name();
    internal void set_Name(string value);
    internal DataFieldList get_Fields();
    internal void set_Fields(DataFieldList value);
    internal ReportQuery get_Query();
    internal void set_Query(ReportQuery value);
    internal Sensitivity get_CaseSensitivity();
    internal void set_CaseSensitivity(Sensitivity value);
    internal string get_Collation();
    internal void set_Collation(string value);
    internal Sensitivity get_AccentSensitivity();
    internal void set_AccentSensitivity(Sensitivity value);
    internal Sensitivity get_KanatypeSensitivity();
    internal void set_KanatypeSensitivity(Sensitivity value);
    internal Sensitivity get_WidthSensitivity();
    internal void set_WidthSensitivity(Sensitivity value);
    internal DataRegionList get_DataRegions();
    internal void set_DataRegions(DataRegionList value);
    internal DataAggregateInfoList get_Aggregates();
    internal void set_Aggregates(DataAggregateInfoList value);
    internal FilterList get_Filters();
    internal void set_Filters(FilterList value);
    internal bool get_UsedOnlyInParameters();
    internal void set_UsedOnlyInParameters(bool value);
    internal int get_NonCalculatedFieldCount();
    internal void set_NonCalculatedFieldCount(int value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal DataAggregateInfoList get_PostSortAggregates();
    internal void set_PostSortAggregates(DataAggregateInfoList value);
    internal int get_RecordSetSize();
    internal void set_RecordSetSize(int value);
    internal UInt32 get_LCID();
    internal void set_LCID(UInt32 value);
    internal bool get_HasDetailUserSortFilter();
    internal void set_HasDetailUserSortFilter(bool value);
    internal ExpressionInfoList get_UserSortExpressions();
    internal void set_UserSortExpressions(ExpressionInfoList value);
    internal DataSetExprHost get_ExprHost();
    internal string get_AutoDetectedCollation();
    internal void set_AutoDetectedCollation(string value);
    internal Boolean[] get_IsSortFilterTarget();
    internal void set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_ID();
    private sealed virtual override string Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_ScopeName();
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_IsSortFilterTarget();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_IsSortFilterExpressionScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_IsSortFilterExpressionScope(Boolean[] value);
    private sealed virtual override ExpressionInfoList Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_UserSortExpressions();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_UserSortExpressions(ExpressionInfoList value);
    private sealed virtual override IndexedExprHost Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_UserSortExpressionsHost();
    internal bool get_DynamicFieldReferences();
    internal void set_DynamicFieldReferences(bool value);
    internal bool get_UsedInAggregates();
    internal void set_UsedInAggregates(bool value);
    internal bool get_InterpretSubtotalsAsDetailsIsAuto();
    internal bool get_InterpretSubtotalsAsDetails();
    internal void set_InterpretSubtotalsAsDetails(bool value);
    internal void Initialize(InitializationContext context);
    private void InternalInitialize(InitializationContext context);
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetAggregateLists();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetPostSortAggregateLists();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.ClearIfEmpty();
    internal void CheckNonCalculatedFieldCount();
    internal void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal bool NeedAutoDetectCollation();
    internal void MergeCollationSettings(ErrorContext errorContext, string dataSourceType, string cultureName, bool caseSensitive, bool accentSensitive, bool kanatypeSensitive, bool widthSensitive);
    private void MergeSensitivity(Sensitivity& current, bool detectedValue);
    internal UInt32 GetSQLSortCompareFlags();
    internal CompareOptions GetCLRCompareOptions();
    internal void MergeFieldProperties(ExpressionInfo expressionInfo);
    internal void PopulateReferencedFieldProperties();
    internal bool IsShareable();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.DataSetInfo : object {
    private StringList m_parameterNames;
    private bool m_isComplex;
    private int m_dataSetDefIndex;
    private int m_dataSourceIndex;
    private int m_dataSetIndex;
    private int m_calculatedFieldIndex;
    internal int DataSourceIndex { get; internal set; }
    internal int DataSetIndex { get; internal set; }
    internal int DataSetDefIndex { get; }
    internal bool IsComplex { get; }
    internal StringList ParameterNames { get; }
    internal int CalculatedFieldIndex { get; internal set; }
    internal DataSetInfo(int index, bool isComplex, StringList parameterNames);
    internal int get_DataSourceIndex();
    internal void set_DataSourceIndex(int value);
    internal int get_DataSetIndex();
    internal void set_DataSetIndex(int value);
    internal int get_DataSetDefIndex();
    internal bool get_IsComplex();
    internal StringList get_ParameterNames();
    internal int get_CalculatedFieldIndex();
    internal void set_CalculatedFieldIndex(int value);
    internal void MergeFlagsFromDataSource(bool isComplex, StringList datasourceParameterNames);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataSetList : ArrayList {
    internal DataSet Item { get; }
    internal DataSetList(int capacity);
    internal DataSet get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.DataSetReference : object {
    private string m_dataSet;
    private string m_valueAlias;
    private string m_labelAlias;
    internal string DataSet { get; }
    internal string ValueAlias { get; }
    internal string LabelAlias { get; }
    internal DataSetReference(string dataSet, string valueAlias, string labelAlias);
    internal string get_DataSet();
    internal string get_ValueAlias();
    internal string get_LabelAlias();
}
internal class Microsoft.ReportingServices.ReportProcessing.DataSource : object {
    private string m_name;
    private bool m_transaction;
    private string m_type;
    private ExpressionInfo m_connectString;
    private bool m_integratedSecurity;
    private string m_prompt;
    private string m_dataSourceReference;
    private DataSetList m_dataSets;
    private Guid m_ID;
    private int m_exprHostID;
    private string m_sharedDataSourceReferencePath;
    private DataSourceExprHost m_exprHost;
    private bool m_isComplex;
    private StringList m_parameterNames;
    public string Name { get; public set; }
    public bool Transaction { get; public set; }
    public string Type { get; public set; }
    internal ExpressionInfo ConnectStringExpression { get; internal set; }
    public bool IntegratedSecurity { get; public set; }
    public string Prompt { get; public set; }
    public string DataSourceReference { get; public set; }
    internal DataSetList DataSets { get; internal set; }
    public Guid ID { get; public set; }
    internal DataSourceExprHost ExprHost { get; }
    internal int ExprHostID { get; internal set; }
    internal bool IsComplex { get; internal set; }
    internal StringList ParameterNames { get; internal set; }
    public string SharedDataSourceReferencePath { get; public set; }
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public bool get_Transaction();
    public void set_Transaction(bool value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    internal ExpressionInfo get_ConnectStringExpression();
    internal void set_ConnectStringExpression(ExpressionInfo value);
    public sealed virtual bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public sealed virtual string get_DataSourceReference();
    public void set_DataSourceReference(string value);
    internal DataSetList get_DataSets();
    internal void set_DataSets(DataSetList value);
    public sealed virtual Guid get_ID();
    public void set_ID(Guid value);
    internal DataSourceExprHost get_ExprHost();
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal bool get_IsComplex();
    internal void set_IsComplex(bool value);
    internal StringList get_ParameterNames();
    internal void set_ParameterNames(StringList value);
    public string get_SharedDataSourceReferencePath();
    public sealed virtual void set_SharedDataSourceReferencePath(string value);
    internal void Initialize(InitializationContext context);
    internal string ResolveConnectionString(ReportProcessingContext pc, DataSourceInfo& dataSourceInfo);
    private void InternalInitialize(InitializationContext context);
    private void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    private string EvaluateConnectStringExpression(ProcessingContext processingContext);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataSourceList : ArrayList {
    internal DataSource Item { get; }
    internal DataSourceList(int capacity);
    internal DataSource get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.DataSourceNameValidator : NameValidator {
    internal bool Validate(ObjectType objectType, string objectName, ErrorContext errorContext);
}
internal enum Microsoft.ReportingServices.ReportProcessing.DataType : Enum {
    public int value__;
    public static DataType Boolean;
    public static DataType DateTime;
    public static DataType Integer;
    public static DataType Float;
    public static DataType String;
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.DataTypeUtility : object {
    internal static bool IsNumeric(DataTypeCode typeCode);
    internal static bool IsFloat(DataTypeCode typeCode);
    internal static bool IsSigned(DataTypeCode typeCode);
    internal static bool IsUnsigned(DataTypeCode typeCode);
    internal static bool Is32BitOrLess(DataTypeCode typeCode);
    internal static bool Is64BitOrLess(DataTypeCode typeCode);
    internal static double ConvertToDouble(DataTypeCode typeCode, object data);
    internal static int ConvertToInt32(DataTypeCode typeCode, object data, Boolean& valid);
    internal static string ConvertToInvariantString(object o);
    internal static Type GetNumericTypeFromDataTypeCode(DataTypeCode typeCode);
    internal static DataTypeCode CommonNumericDenominator(DataTypeCode x, DataTypeCode y);
    private static DataTypeCode CommonDataTypeSignedUnsigned(DataTypeCode signed, DataTypeCode unsigned);
}
internal class Microsoft.ReportingServices.ReportProcessing.DataValue : object {
    private ExpressionInfo m_name;
    private ExpressionInfo m_value;
    private int m_exprHostID;
    private DataValueExprHost m_exprHost;
    internal ExpressionInfo Name { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal DataValueExprHost ExprHost { get; }
    internal ExpressionInfo get_Name();
    internal void set_Name(ExpressionInfo value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal DataValueExprHost get_ExprHost();
    internal DataValue DeepClone(InitializationContext context);
    internal void Initialize(string propertyName, bool isCustomProperty, CustomPropertyUniqueNameValidator validator, InitializationContext context);
    internal void SetExprHost(IList`1<DataValueExprHost> dataValueHosts, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.DataValueCRIList : DataValueList {
    private int m_rdlRowIndex;
    private int m_rdlColumnIndex;
    internal int RDLRowIndex { get; internal set; }
    internal int RDLColumnIndex { get; internal set; }
    internal DataValueCRIList(int capacity);
    internal int get_RDLRowIndex();
    internal void set_RDLRowIndex(int value);
    internal int get_RDLColumnIndex();
    internal void set_RDLColumnIndex(int value);
    internal DataValueCRIList DeepClone(InitializationContext context);
    internal void Initialize(string prefix, InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.DataValueInstance : object {
    private string m_name;
    private object m_value;
    internal string Name { get; internal set; }
    internal object Value { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal object get_Value();
    internal void set_Value(object value);
    internal DataValueInstance DeepClone();
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataValueInstanceList : ArrayList {
    internal DataValueInstance Item { get; }
    internal DataValueInstanceList(int capacity);
    internal DataValueInstance get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DataValueList : ArrayList {
    internal DataValue Item { get; }
    internal DataValueList(int capacity);
    internal DataValue get_Item(int index);
    internal static string CreatePropertyNameString(string prefix, int rowIndex, int cellIndex, int valueIndex);
    internal void Initialize(string prefix, bool isCustomProperty, InitializationContext context);
    internal void Initialize(string prefix, int rowIndex, int cellIndex, bool isCustomProperty, InitializationContext context);
    internal void SetExprHost(IList`1<DataValueExprHost> dataValueHosts, ObjectModelImpl reportObjectModel);
    internal DataValueInstanceList EvaluateExpressions(ObjectType objectType, string objectName, string prefix, ProcessingContext pc);
    internal DataValueInstanceList EvaluateExpressions(ObjectType objectType, string objectName, string prefix, int rowIndex, int cellIndex, ProcessingContext pc);
    internal DataValueList DeepClone(InitializationContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.DocumentMapNode : InstanceInfo {
    private string m_id;
    private string m_label;
    private int m_page;
    private DocumentMapNode[] m_children;
    internal string Label { get; internal set; }
    internal string Id { get; internal set; }
    internal int Page { get; internal set; }
    internal DocumentMapNode[] Children { get; internal set; }
    internal DocumentMapNode(string id, string label, int page, ArrayList children);
    internal string get_Label();
    internal void set_Label(string value);
    internal string get_Id();
    internal void set_Id(string value);
    internal int get_Page();
    internal void set_Page(int value);
    internal DocumentMapNode[] get_Children();
    internal void set_Children(DocumentMapNode[] value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.DocumentMapNodeInfo : object {
    private string m_id;
    private string m_label;
    private DocumentMapNodeInfo[] m_children;
    public string Label { get; }
    public string Id { get; }
    public DocumentMapNodeInfo[] Children { get; }
    internal DocumentMapNodeInfo(DocumentMapNode docMapNode, DocumentMapNodeInfo[] children);
    public string get_Label();
    public string get_Id();
    public DocumentMapNodeInfo[] get_Children();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.DrillthroughHashtable : HashtableInstanceInfo {
    internal DrillthroughInformation Item { get; internal set; }
    internal DrillthroughHashtable(int capacity);
    internal DrillthroughInformation get_Item(string key);
    internal void set_Item(string key, DrillthroughInformation value);
    internal void Add(string drillthroughId, DrillthroughInformation drillthroughInfo);
}
internal class Microsoft.ReportingServices.ReportProcessing.DrillthroughInfo : object {
    private string m_reportName;
    private DrillthroughParameters m_reportParameters;
    internal string ReportName { get; }
    internal DrillthroughParameters ReportParameters { get; }
    internal DrillthroughInfo(string reportName, DrillthroughParameters parameters);
    internal string get_ReportName();
    internal DrillthroughParameters get_ReportParameters();
}
internal class Microsoft.ReportingServices.ReportProcessing.DrillthroughInformation : object {
    private string m_reportName;
    private DrillthroughParameters m_reportParameters;
    private IntList m_dataSetTokenIDs;
    internal string ReportName { get; internal set; }
    internal DrillthroughParameters ReportParameters { get; internal set; }
    internal IntList DataSetTokenIDs { get; internal set; }
    internal DrillthroughInformation(string reportName, DrillthroughParameters reportParameters, IntList dataSetTokenIDs);
    internal string get_ReportName();
    internal void set_ReportName(string value);
    internal DrillthroughParameters get_ReportParameters();
    internal void set_ReportParameters(DrillthroughParameters value);
    internal IntList get_DataSetTokenIDs();
    internal void set_DataSetTokenIDs(IntList value);
    internal static Declaration GetDeclaration();
    internal void ResolveDataSetTokenIDs(TokensHashtable dataSetTokenIDs);
}
internal class Microsoft.ReportingServices.ReportProcessing.DrillthroughParameters : NameObjectCollectionBase {
    internal DrillthroughParameters(int capacity);
    internal DrillthroughParameters(SerializationInfo info, StreamingContext context);
    public sealed virtual void Add(string key, object value);
    public sealed virtual string GetKey(int index);
    public sealed virtual object GetValue(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.DynamicParameter : object {
    private DataSetReference m_validValueDataSet;
    private DataSetReference m_defaultDataSet;
    private int m_index;
    private bool m_isComplex;
    internal DataSetReference ValidValueDataSet { get; }
    internal DataSetReference DefaultDataSet { get; }
    internal int Index { get; }
    internal bool IsComplex { get; }
    internal DynamicParameter(DataSetReference validValueDataSet, DataSetReference defaultDataSet, int index, bool isComplex);
    internal DataSetReference get_ValidValueDataSet();
    internal DataSetReference get_DefaultDataSet();
    internal int get_Index();
    internal bool get_IsComplex();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.EmbeddedImageHashtable : Hashtable {
    internal ImageInfo Item { get; }
    internal EmbeddedImageHashtable(int capacity);
    private EmbeddedImageHashtable(SerializationInfo info, StreamingContext context);
    internal ImageInfo get_Item(string index);
}
internal class Microsoft.ReportingServices.ReportProcessing.EndUserSort : object {
    private int m_dataSetID;
    [ReferenceAttribute]
private ISortFilterScope m_sortExpressionScope;
    [ReferenceAttribute]
private GroupingList m_groupsInSortTarget;
    [ReferenceAttribute]
private ISortFilterScope m_sortTarget;
    private int m_sortExpressionIndex;
    private SubReportList m_detailScopeSubReports;
    private ExpressionInfo m_sortExpression;
    private int m_sortExpressionScopeID;
    private IntList m_groupInSortTargetIDs;
    private int m_sortTargetID;
    private string m_sortExpressionScopeString;
    private string m_sortTargetString;
    private bool m_foundSortExpressionScope;
    internal int DataSetID { get; internal set; }
    internal ISortFilterScope SortExpressionScope { get; internal set; }
    internal GroupingList GroupsInSortTarget { get; internal set; }
    internal ISortFilterScope SortTarget { get; internal set; }
    internal int SortExpressionIndex { get; internal set; }
    internal SubReportList DetailScopeSubReports { get; internal set; }
    internal ExpressionInfo SortExpression { get; internal set; }
    internal int SortExpressionScopeID { get; internal set; }
    internal IntList GroupInSortTargetIDs { get; internal set; }
    internal int SortTargetID { get; internal set; }
    internal string SortExpressionScopeString { get; internal set; }
    internal string SortTargetString { get; internal set; }
    internal bool FoundSortExpressionScope { get; internal set; }
    internal int get_DataSetID();
    internal void set_DataSetID(int value);
    internal ISortFilterScope get_SortExpressionScope();
    internal void set_SortExpressionScope(ISortFilterScope value);
    internal GroupingList get_GroupsInSortTarget();
    internal void set_GroupsInSortTarget(GroupingList value);
    internal ISortFilterScope get_SortTarget();
    internal void set_SortTarget(ISortFilterScope value);
    internal int get_SortExpressionIndex();
    internal void set_SortExpressionIndex(int value);
    internal SubReportList get_DetailScopeSubReports();
    internal void set_DetailScopeSubReports(SubReportList value);
    internal ExpressionInfo get_SortExpression();
    internal void set_SortExpression(ExpressionInfo value);
    internal int get_SortExpressionScopeID();
    internal void set_SortExpressionScopeID(int value);
    internal IntList get_GroupInSortTargetIDs();
    internal void set_GroupInSortTargetIDs(IntList value);
    internal int get_SortTargetID();
    internal void set_SortTargetID(int value);
    internal string get_SortExpressionScopeString();
    internal void set_SortExpressionScopeString(string value);
    internal string get_SortTargetString();
    internal void set_SortTargetString(string value);
    internal bool get_FoundSortExpressionScope();
    internal void set_FoundSortExpressionScope(bool value);
    internal void SetSortTarget(ISortFilterScope target);
    internal static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ErrorContext : object {
    protected bool m_hasError;
    protected bool m_suspendErrors;
    protected ProcessingMessageList m_messages;
    internal bool HasError { get; internal set; }
    internal bool SuspendErrors { get; internal set; }
    internal ProcessingMessageList Messages { get; }
    internal bool get_HasError();
    internal void set_HasError(bool value);
    internal bool get_SuspendErrors();
    internal void set_SuspendErrors(bool value);
    internal ProcessingMessageList get_Messages();
    internal abstract virtual ProcessingMessage Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
    internal abstract virtual ProcessingMessage Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, ProcessingMessageList innerMessages, String[] arguments);
    internal virtual void Register(RSException rsException, ObjectType objectType);
    protected ProcessingMessage CreateProcessingMessage(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, ProcessingMessageList innerMessages, String[] arguments);
    protected ProcessingMessage CreateProcessingMessage(ErrorCode code, ObjectType objectType, string messageString);
    private Object[] GetMessageArgs(ObjectType objectType, string objectName, string propertyName, String[] arguments);
    internal static string GetLocalizedObjectTypeString(ObjectType objectType);
    private string GetLocalizedObjectNameString(ObjectType objectType, string objectName);
    private string GetLocalizedPropertyNameString(string propertyName);
}
internal class Microsoft.ReportingServices.ReportProcessing.EventInformation : object {
    private bool m_hasShowHideInfo;
    private Hashtable m_toggleStateInfo;
    private Hashtable m_hiddenInfo;
    private bool m_hasSortInfo;
    private SortEventInfo m_sortInfo;
    private OdpSortEventInfo m_odpSortInfo;
    private Dictionary`2<string, RendererEventInformation> m_rendererEventInformation;
    private bool m_changed;
    internal Hashtable ToggleStateInfo { get; internal set; }
    internal Hashtable HiddenInfo { get; internal set; }
    internal SortEventInfo SortInfo { get; internal set; }
    internal OdpSortEventInfo OdpSortInfo { get; internal set; }
    internal bool Changed { get; internal set; }
    public EventInformation(EventInformation copy);
    public Byte[] Serialize();
    public static EventInformation Deserialize(Byte[] data);
    internal Hashtable get_ToggleStateInfo();
    internal void set_ToggleStateInfo(Hashtable value);
    internal Hashtable get_HiddenInfo();
    internal void set_HiddenInfo(Hashtable value);
    internal SortEventInfo get_SortInfo();
    internal void set_SortInfo(SortEventInfo value);
    internal OdpSortEventInfo get_OdpSortInfo();
    internal void set_OdpSortInfo(OdpSortEventInfo value);
    internal bool get_Changed();
    internal void set_Changed(bool value);
    internal RendererEventInformation GetRendererEventInformation(string aRenderFormat);
    internal bool ValidToggleSender(string senderId);
    internal DrillthroughInfo GetDrillthroughInfo(string drillthroughId);
}
internal class Microsoft.ReportingServices.ReportProcessing.ExpressionInfo : object {
    private Types m_type;
    private string m_stringValue;
    private bool m_boolValue;
    private int m_intValue;
    private int m_exprHostID;
    private string m_originalText;
    private string m_transformedExpression;
    private IntList m_transformedExpressionAggregatePositions;
    private StringList m_transformedExpressionAggregateIDs;
    private StringList m_referencedFields;
    private StringList m_referencedReportItems;
    private StringList m_referencedParameters;
    private StringList m_referencedDataSets;
    private StringList m_referencedDataSources;
    private DataAggregateInfoList m_aggregates;
    private RunningValueInfoList m_runningValues;
    private int m_compileTimeID;
    private Hashtable m_referencedFieldProperties;
    private bool m_dynamicFieldReferences;
    internal Types Type { get; internal set; }
    internal bool IsExpression { get; }
    internal string Value { get; internal set; }
    internal bool BoolValue { get; internal set; }
    internal int IntValue { get; internal set; }
    internal string OriginalText { get; internal set; }
    internal string TransformedExpression { get; internal set; }
    internal IntList TransformedExpressionAggregatePositions { get; internal set; }
    internal StringList TransformedExpressionAggregateIDs { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal int CompileTimeID { get; internal set; }
    internal DataAggregateInfoList Aggregates { get; }
    internal RunningValueInfoList RunningValues { get; }
    internal Hashtable ReferencedFieldProperties { get; }
    internal bool DynamicFieldReferences { get; internal set; }
    internal ExpressionInfo(Types type);
    internal Types get_Type();
    internal void set_Type(Types value);
    internal bool get_IsExpression();
    internal string get_Value();
    internal void set_Value(string value);
    internal bool get_BoolValue();
    internal void set_BoolValue(bool value);
    internal int get_IntValue();
    internal void set_IntValue(int value);
    internal string get_OriginalText();
    internal void set_OriginalText(string value);
    internal string get_TransformedExpression();
    internal void set_TransformedExpression(string value);
    internal IntList get_TransformedExpressionAggregatePositions();
    internal void set_TransformedExpressionAggregatePositions(IntList value);
    internal StringList get_TransformedExpressionAggregateIDs();
    internal void set_TransformedExpressionAggregateIDs(StringList value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal int get_CompileTimeID();
    internal void set_CompileTimeID(int value);
    internal DataAggregateInfoList get_Aggregates();
    internal RunningValueInfoList get_RunningValues();
    internal Hashtable get_ReferencedFieldProperties();
    internal bool get_DynamicFieldReferences();
    internal void set_DynamicFieldReferences(bool value);
    internal void Initialize(string propertyName, InitializationContext context);
    internal void AggregateInitialize(string dataSetName, ObjectType objectType, string objectName, string propertyName, InitializationContext context);
    internal bool HasRecursiveAggregates();
    internal void GroupExpressionInitialize(InitializationContext context);
    internal ExpressionInfo DeepClone(InitializationContext context);
    internal static Declaration GetDeclaration();
    internal void AddReferencedField(string fieldName);
    internal void AddReferencedReportItem(string reportItemName);
    internal void AddReferencedParameter(string parameterName);
    internal void AddReferencedDataSet(string dataSetName);
    internal void AddReferencedDataSource(string dataSourceName);
    internal void AddAggregate(DataAggregateInfo aggregate);
    internal void AddRunningValue(RunningValueInfo runningValue);
    internal DataAggregateInfo GetSumAggregateWithoutScope();
    internal void AddDynamicPropertyReference(string fieldName);
    internal void AddStaticPropertyReference(string fieldName, string propertyName);
}
internal class Microsoft.ReportingServices.ReportProcessing.ExpressionInfoExtended : ExpressionInfo {
    private bool m_isExtendedSimpleFieldReference;
    internal bool IsExtendedSimpleFieldReference { get; internal set; }
    internal bool get_IsExtendedSimpleFieldReference();
    internal void set_IsExtendedSimpleFieldReference(bool value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ExpressionInfoList : ArrayList {
    internal ExpressionInfo Item { get; }
    internal ExpressionInfoList(int capacity);
    internal ExpressionInfo get_Item(int index);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ExpressionParser : object {
    protected ErrorContext m_errorContext;
    private bool m_valueReferenced;
    private bool m_valueReferencedGlobal;
    internal bool BodyRefersToReportItems { get; }
    internal bool PageSectionRefersToReportItems { get; }
    internal int NumberOfAggregates { get; }
    internal int LastID { get; }
    internal bool ValueReferenced { get; }
    internal bool ValueReferencedGlobal { get; }
    internal ExpressionParser(ErrorContext errorContext);
    internal abstract virtual CodeDomProvider GetCodeCompiler();
    internal abstract virtual string GetCompilerArguments();
    internal abstract virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context);
    internal abstract virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, DetectionFlags flag, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    internal abstract virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, Boolean& userCollectionReferenced);
    internal abstract virtual void ConvertField2ComplexExpr(ExpressionInfo& expression);
    internal void ResetValueReferencedFlag();
    internal abstract virtual bool get_BodyRefersToReportItems();
    internal abstract virtual bool get_PageSectionRefersToReportItems();
    internal abstract virtual int get_NumberOfAggregates();
    internal abstract virtual int get_LastID();
    internal bool get_ValueReferenced();
    internal bool get_ValueReferencedGlobal();
    protected static Restrictions ExpressionType2Restrictions(ExpressionType expressionType);
    protected void SetValueReferenced();
}
internal class Microsoft.ReportingServices.ReportProcessing.ExprHostBuilder : object {
    internal static string RootType;
    private static string EndSrcMarker;
    private static string ExprSrcMarker;
    private static string CustomCodeSrcMarker;
    private static string CodeModuleClassInstanceDeclSrcMarker;
    private RootTypeDecl m_rootTypeDecl;
    private TypeDecl m_currentTypeDecl;
    private bool m_setCode;
    private static Regex m_findExprNumber;
    private static Regex m_findCodeModuleClassInstanceDeclNumber;
    internal bool HasExpressions { get; }
    internal bool CustomCode { get; }
    private static ExprHostBuilder();
    internal bool get_HasExpressions();
    internal bool get_CustomCode();
    internal void SetCustomCode();
    internal CodeCompileUnit GetExprHost(IntermediateFormatVersion version, bool refusePermissions);
    internal ErrorSource ParseErrorSource(CompilerError error, Int32& id);
    internal void ReportStart();
    internal void ReportEnd();
    internal void ReportLanguage(ExpressionInfo expression);
    internal void GenericLabel(ExpressionInfo expression);
    internal void GenericValue(ExpressionInfo expression);
    internal void GenericNoRows(ExpressionInfo expression);
    internal void GenericVisibilityHidden(ExpressionInfo expression);
    internal void AggregateParamExprAdd(ExpressionInfo expression);
    internal void CustomCodeProxyStart();
    internal void CustomCodeProxyEnd();
    internal void CustomCodeClassInstance(string className, string instanceName, int id);
    internal void ReportCode(string code);
    internal void ReportParameterStart(string name);
    internal int ReportParameterEnd();
    internal void ReportParameterValidationExpression(ExpressionInfo expression);
    internal void ReportParameterDefaultValue(ExpressionInfo expression);
    internal void ReportParameterValidValuesStart();
    internal void ReportParameterValidValuesEnd();
    internal void ReportParameterValidValue(ExpressionInfo expression);
    internal void ReportParameterValidValueLabelsStart();
    internal void ReportParameterValidValueLabelsEnd();
    internal void ReportParameterValidValueLabel(ExpressionInfo expression);
    internal void CalcFieldStart(string name);
    internal int CalcFieldEnd();
    internal void QueryParametersStart();
    internal void QueryParametersEnd();
    internal void QueryParameterValue(ExpressionInfo expression);
    internal void DataSourceStart(string name);
    internal int DataSourceEnd();
    internal void DataSourceConnectString(ExpressionInfo expression);
    internal void DataSetStart(string name);
    internal int DataSetEnd();
    internal void DataSetQueryCommandText(ExpressionInfo expression);
    internal void PageSectionStart();
    internal int PageSectionEnd();
    internal void ParameterOmit(ExpressionInfo expression);
    internal void StyleAttribute(string name, ExpressionInfo expression);
    internal void ActionInfoStart();
    internal void ActionInfoEnd();
    internal void ActionStart();
    internal int ActionEnd();
    internal void ActionHyperlink(ExpressionInfo expression);
    internal void ActionDrillThroughReportName(ExpressionInfo expression);
    internal void ActionDrillThroughBookmarkLink(ExpressionInfo expression);
    internal void ActionBookmarkLink(ExpressionInfo expression);
    internal void ActionDrillThroughParameterStart();
    internal int ActionDrillThroughParameterEnd();
    internal void ReportItemBookmark(ExpressionInfo expression);
    internal void ReportItemToolTip(ExpressionInfo expression);
    internal void LineStart(string name);
    internal int LineEnd();
    internal void RectangleStart(string name);
    internal int RectangleEnd();
    internal void TextBoxStart(string name);
    internal int TextBoxEnd();
    internal void TextBoxToggleImageInitialState(ExpressionInfo expression);
    internal void UserSortExpressionsStart();
    internal void UserSortExpressionsEnd();
    internal void UserSortExpression(ExpressionInfo expression);
    internal void ImageStart(string name);
    internal int ImageEnd();
    internal void ImageMIMEType(ExpressionInfo expression);
    internal void SubreportStart(string name);
    internal int SubreportEnd();
    internal void SubreportParameterStart();
    internal int SubreportParameterEnd();
    internal void ActiveXControlStart(string name);
    internal int ActiveXControlEnd();
    internal void ActiveXControlParameterStart();
    internal int ActiveXControlParameterEnd();
    internal void SortingStart();
    internal void SortingEnd();
    internal void SortingExpression(ExpressionInfo expression);
    internal void SortDirectionsStart();
    internal void SortDirectionsEnd();
    internal void SortDirection(ExpressionInfo expression);
    internal void FilterStart();
    internal int FilterEnd();
    internal void FilterExpression(ExpressionInfo expression);
    internal void FilterValue(ExpressionInfo expression);
    internal void GroupingStart(string typeName);
    internal void GroupingEnd();
    internal void GroupingExpression(ExpressionInfo expression);
    internal void GroupingParentExpressionsStart();
    internal void GroupingParentExpressionsEnd();
    internal void GroupingParentExpression(ExpressionInfo expression);
    internal void ListStart(string name);
    internal int ListEnd();
    internal void MatrixDynamicGroupStart(string name);
    internal bool MatrixDynamicGroupEnd(bool column);
    internal void SubtotalStart();
    internal void SubtotalEnd();
    internal void MatrixStart(string name);
    internal int MatrixEnd();
    internal void MultiChartStart();
    internal void MultiChartEnd();
    internal void ChartDynamicGroupStart(string name);
    internal bool ChartDynamicGroupEnd(bool column);
    internal void ChartHeadingLabel(ExpressionInfo expression);
    internal void ChartDataPointStart();
    internal int ChartDataPointEnd();
    internal void ChartDataPointDataValue(ExpressionInfo expression);
    internal void DataLabelValue(ExpressionInfo expression);
    internal void DataLabelStyleStart();
    internal void DataLabelStyleEnd();
    internal void DataPointStyleStart();
    internal void DataPointStyleEnd();
    internal void DataPointMarkerStyleStart();
    internal void DataPointMarkerStyleEnd();
    internal void ChartTitleStart();
    internal void ChartTitleEnd();
    internal void ChartCaption(ExpressionInfo expression);
    internal void MajorGridLinesStyleStart();
    internal void MajorGridLinesStyleEnd();
    internal void MinorGridLinesStyleStart();
    internal void MinorGridLinesStyleEnd();
    internal void AxisMin(ExpressionInfo expression);
    internal void AxisMax(ExpressionInfo expression);
    internal void AxisCrossAt(ExpressionInfo expression);
    internal void AxisMajorInterval(ExpressionInfo expression);
    internal void AxisMinorInterval(ExpressionInfo expression);
    internal void ChartStaticRowLabelsStart();
    internal void ChartStaticRowLabelsEnd();
    internal void ChartStaticColumnLabelsStart();
    internal void ChartStaticColumnLabelsEnd();
    internal void ChartStaticColumnRowLabel(ExpressionInfo expression);
    internal void ChartStart(string name);
    internal int ChartEnd();
    internal void ChartCategoryAxisStart();
    internal void ChartCategoryAxisEnd();
    internal void ChartValueAxisStart();
    internal void ChartValueAxisEnd();
    internal void ChartLegendStart();
    internal void ChartLegendEnd();
    internal void ChartPlotAreaStart();
    internal void ChartPlotAreaEnd();
    internal void TableGroupStart(string name);
    internal bool TableGroupEnd();
    internal void TableRowVisibilityHiddenExpressionsStart();
    internal void TableRowVisibilityHiddenExpressionsEnd();
    internal void TableRowColVisibilityHiddenExpressionsExpr(ExpressionInfo expression);
    internal void TableStart(string name);
    internal int TableEnd();
    internal void TableColumnVisibilityHiddenExpressionsStart();
    internal void TableColumnVisibilityHiddenExpressionsEnd();
    internal void OWCChartStart(string name);
    internal int OWCChartEnd();
    internal void OWCChartColumnsStart();
    internal void OWCChartColumnsEnd();
    internal void OWCChartColumnsValue(ExpressionInfo expression);
    internal void DataValueStart();
    internal int DataValueEnd(bool isCustomProperty);
    internal void DataValueName(ExpressionInfo expression);
    internal void DataValueValue(ExpressionInfo expression);
    internal void CustomReportItemStart(string name);
    internal int CustomReportItemEnd();
    internal void DataGroupingStart(bool column);
    internal int DataGroupingEnd(bool column);
    internal void DataCellStart();
    internal int DataCellEnd();
    private void TypeStart(string typeName, string baseType);
    private int TypeEnd(TypeDecl container, string name, CodeExpressionCollection& initializers);
    private bool TypeEnd(TypeDecl container, string name);
    private void TypeEnd(TypeDecl container);
    private int ReportItemEnd(string name, CodeExpressionCollection& initializers);
    private void ParameterStart();
    private int ParameterEnd(string propName);
    private void StyleStart(string typeName);
    private void StyleEnd(string propName);
    private void AxisStart(string typeName);
    private void AxisEnd(string propName);
    private void AggregateStart();
    private int AggregateEnd();
    private string CreateTypeName(string template, CodeExpressionCollection initializers);
    private void ExprIndexerCreate();
    private void IndexedExpressionAdd(ExpressionInfo expression);
    private void ExpressionAdd(string name, ExpressionInfo expression);
    private CodeMethodReturnStatement CreateExprReturnStatement(ExpressionInfo expression);
}
internal class Microsoft.ReportingServices.ReportProcessing.Field : object {
    private string m_name;
    private string m_dataField;
    private ExpressionInfo m_value;
    private int m_exprHostID;
    private bool m_dynamicPropertyReferences;
    private FieldPropertyHashtable m_referencedProperties;
    private CalcFieldExprHost m_exprHost;
    internal string Name { get; internal set; }
    internal string DataField { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal bool IsCalculatedField { get; }
    internal int ExprHostID { get; internal set; }
    internal bool DynamicPropertyReferences { get; internal set; }
    internal FieldPropertyHashtable ReferencedProperties { get; internal set; }
    internal CalcFieldExprHost ExprHost { get; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_DataField();
    internal void set_DataField(string value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal bool get_IsCalculatedField();
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal bool get_DynamicPropertyReferences();
    internal void set_DynamicPropertyReferences(bool value);
    internal FieldPropertyHashtable get_ReferencedProperties();
    internal void set_ReferencedProperties(FieldPropertyHashtable value);
    internal CalcFieldExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(DataSetExprHost dataSetExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.FieldPropertyHashtable : object {
    private Hashtable m_hashtable;
    internal int Count { get; }
    internal FieldPropertyHashtable(int capacity);
    internal void Add(string key);
    internal int get_Count();
    internal bool ContainsKey(string key);
    internal IDictionaryEnumerator GetEnumerator();
}
internal class Microsoft.ReportingServices.ReportProcessing.Filter : object {
    private ExpressionInfo m_expression;
    private Operators m_operator;
    private ExpressionInfoList m_values;
    private int m_exprHostID;
    private FilterExprHost m_exprHost;
    internal ExpressionInfo Expression { get; internal set; }
    internal Operators Operator { get; internal set; }
    internal ExpressionInfoList Values { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal FilterExprHost ExprHost { get; }
    internal ExpressionInfo get_Expression();
    internal void set_Expression(ExpressionInfo value);
    internal Operators get_Operator();
    internal void set_Operator(Operators value);
    internal ExpressionInfoList get_Values();
    internal void set_Values(ExpressionInfoList value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal FilterExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(IList`1<FilterExprHost> filterHosts, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.FilterList : ArrayList {
    internal Filter Item { get; }
    internal FilterList(int capacity);
    internal Filter get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.Filters : object {
    private FilterTypes m_filterType;
    private IFilterOwner m_owner;
    private FilterList m_filters;
    private ObjectType m_objectType;
    private string m_objectName;
    private ProcessingContext m_processingContext;
    private int m_startFilterIndex;
    private int m_currentSpecialFilterIndex;
    private FilterInfo m_filterInfo;
    private bool m_failFilters;
    unknown bool FailFilters {internal set; }
    internal Filters(FilterTypes filterType, IFilterOwner owner, FilterList filters, ObjectType objectType, string objectName, ProcessingContext processingContext);
    internal void set_FailFilters(bool value);
    internal bool PassFilters(object dataInstance);
    private void ThrowIfErrorOccurred(string propertyName, bool errorOccurred, DataFieldStatus fieldStatus);
    internal bool PassFilters(object dataInstance, Boolean& specialFilter);
    internal void FinishReadingRows();
    private ProcessingMessageList RegisterComparisonError();
    private ProcessingMessageList RegisterComparisonError(ReportProcessingException_ComparisonError e);
    private void TrimInstanceSet(FilterInfo filterInfo);
    private object EvaluateFilterValue(Filter filterDef);
    private Object[] EvaluateFilterValues(Filter filterDef);
    private void SortAndSave(object key, object dataInstance);
    private void InitFilterInfos(MySortedList dataInstanceList, int currentFilterIndex);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.FiltersList : ArrayList {
    internal Filters Item { get; }
    internal Filters get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.First : DataAggregate {
    private object m_value;
    private bool m_updated;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.FloatResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal double Value;
}
internal class Microsoft.ReportingServices.ReportProcessing.FormatDigitReplacement : object {
    private static int DbnumHundred;
    private static int DbnumThousand;
    private static int DbnumTenThousand;
    private static int DbnumHundredMillion;
    private static int DbnumTrillion;
    private static int NUM_ASCII;
    private static int NUM_ARABIC_INDIC;
    private static int NUM_EXTENDED_ARABIC_INDIC;
    private static int NUM_DEVANAGARI;
    private static int NUM_BENGALI;
    private static int NUM_GURMUKHI;
    private static int NUM_GUJARATI;
    private static int NUM_ORIYA;
    private static int NUM_TAMIL;
    private static int NUM_TELUGU;
    private static int NUM_KANNADA;
    private static int NUM_MALAYALAM;
    private static int NUM_THAI;
    private static int NUM_LAO;
    private static int NUM_TIBETAN;
    private static int NUM_JAPANESE1;
    private static int NUM_JAPANESE2;
    private static int NUM_JAPANESE3;
    private static int NUM_CHINESE_SIMP1;
    private static int NUM_CHINESE_SIMP2;
    private static int NUM_CHINESE_SIMP3;
    private static int NUM_CHINESE_TRAD1;
    private static int NUM_CHINESE_TRAD2;
    private static int NUM_CHINESE_TRAD3;
    private static int NUM_KOREAN1;
    private static int NUM_KOREAN2;
    private static int NUM_KOREAN3;
    private static int NUM_KOREAN4;
    internal static UInt32[][] DBNum_Japanese;
    internal static UInt32[][] DBNum_Korean;
    internal static UInt32[][] DBNum_SimplChinese;
    internal static UInt32[][] DBNum_TradChinese;
    internal static Char[][] SimpleDigitMapping;
    private static FormatDigitReplacement();
    internal static char SimpleDigitFromNumeralShape(char asciiDigit, int numeralShape);
    private static string SimpleTranslateNumber(string numberValue, int numeralShape, char numberDecimalSeparator);
    private static void SkipNonDigits(string number, Int32& index);
    private static string ComplexTranslateNumber(string number, int numeralShape, char numberDecimalSeparator, int numVariant);
    private static int GetNumeralShape(int numeralVariant, CultureInfo numeralLanguage);
    internal static string FormatNumeralVariant(string number, int numeralVariant, CultureInfo numeralLanguage, string numberDecimalSeparator, Boolean& numberTranslated);
}
internal class Microsoft.ReportingServices.ReportProcessing.Formatter : object {
    private Style m_styleClass;
    private OnDemandProcessingContext m_context;
    private bool m_sharedFormatSettings;
    private bool m_calendarValidated;
    private UInt32 m_languageInstanceId;
    private ObjectType m_objectType;
    private string m_objectName;
    private Calendar m_formattingCalendar;
    internal Formatter(Style styleClass, OnDemandProcessingContext context, ObjectType objectType, string objectName);
    internal static string FormatWithInvariantCulture(object value);
    internal static string FormatWithInvariantCulture(object value, Boolean& errorOccurred);
    internal static string Format(object value, Formatter& formatter, Style reportItemStyle, Style reportElementStyle, OnDemandProcessingContext context, ObjectType objectType, string objectName);
    internal string FormatValue(object value, TypeCode typeCode);
    internal string FormatValue(object value, string formatString, TypeCode typeCode);
    internal string FormatValue(object value, string formatString, TypeCode typeCode, bool addDateTimeOffsetSuffix);
    private void CreateAndValidateCalendar(int languageState, CultureInfo formattingCulture);
}
internal class Microsoft.ReportingServices.ReportProcessing.Global : object {
    internal static string ReportProcessingNamespace;
    internal static RSTrace Tracer;
    internal static RSTrace RenderingTracer;
    internal static string ReportProcessingLocation;
    private static Global();
}
internal class Microsoft.ReportingServices.ReportProcessing.GridLines : object {
    private bool m_showGridLines;
    private Style m_styleClass;
    internal bool ShowGridLines { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal bool get_ShowGridLines();
    internal void set_ShowGridLines(bool value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.Grouping : object {
    private string m_name;
    private ExpressionInfoList m_groupExpressions;
    private ExpressionInfo m_groupLabel;
    private BoolList m_sortDirections;
    private bool m_pageBreakAtEnd;
    private bool m_pageBreakAtStart;
    private string m_custom;
    private DataAggregateInfoList m_aggregates;
    private bool m_groupAndSort;
    private FilterList m_filters;
    [ReferenceAttribute]
private ReportItemList m_reportItemsWithHideDuplicates;
    private ExpressionInfoList m_parent;
    private DataAggregateInfoList m_recursiveAggregates;
    private DataAggregateInfoList m_postSortAggregates;
    private string m_dataElementName;
    private string m_dataCollectionName;
    private DataElementOutputTypes m_dataElementOutput;
    private DataValueList m_customProperties;
    private bool m_saveGroupExprValues;
    private ExpressionInfoList m_userSortExpressions;
    private InScopeSortFilterHashtable m_nonDetailSortFiltersInScope;
    private InScopeSortFilterHashtable m_detailSortFiltersInScope;
    private IntList m_hideDuplicatesReportItemIDs;
    private GroupingExprHost m_exprHost;
    private Hashtable m_scopeNames;
    private bool m_inPivotCell;
    private int m_recursiveLevel;
    private Int32[] m_groupExpressionFieldIndices;
    private bool m_hasInnerFilters;
    private VariantList m_currentGroupExprValues;
    private ReportHierarchyNode m_owner;
    private VariantList[] m_sortFilterScopeInfo;
    private Int32[] m_sortFilterScopeIndex;
    private Boolean[] m_needScopeInfoForSortFilterExpression;
    private Boolean[] m_sortFilterScopeMatched;
    private Boolean[] m_isSortFilterTarget;
    private Boolean[] m_isSortFilterExpressionScope;
    internal string Name { get; internal set; }
    internal ExpressionInfo GroupLabel { get; internal set; }
    internal BoolList SortDirections { get; internal set; }
    internal ExpressionInfoList GroupExpressions { get; internal set; }
    internal bool PageBreakAtEnd { get; internal set; }
    internal bool PageBreakAtStart { get; internal set; }
    internal string Custom { get; internal set; }
    internal DataAggregateInfoList Aggregates { get; internal set; }
    internal bool GroupAndSort { get; internal set; }
    internal FilterList Filters { get; internal set; }
    internal bool SimpleGroupExpressions { get; }
    internal ReportItemList ReportItemsWithHideDuplicates { get; internal set; }
    internal ExpressionInfoList Parent { get; internal set; }
    internal IndexedExprHost ParentExprHost { get; }
    internal DataAggregateInfoList RecursiveAggregates { get; internal set; }
    internal DataAggregateInfoList PostSortAggregates { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal string DataCollectionName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal DataValueList CustomProperties { get; internal set; }
    internal bool SaveGroupExprValues { get; internal set; }
    internal ExpressionInfoList UserSortExpressions { get; internal set; }
    internal InScopeSortFilterHashtable NonDetailSortFiltersInScope { get; internal set; }
    internal InScopeSortFilterHashtable DetailSortFiltersInScope { get; internal set; }
    internal IntList HideDuplicatesReportItemIDs { get; internal set; }
    internal GroupingExprHost ExprHost { get; }
    internal Hashtable ScopeNames { get; internal set; }
    internal bool InPivotCell { get; internal set; }
    internal int RecursiveLevel { get; internal set; }
    internal bool HasInnerFilters { get; internal set; }
    internal VariantList CurrentGroupExpressionValues { get; internal set; }
    internal ReportHierarchyNode Owner { get; internal set; }
    internal VariantList[] SortFilterScopeInfo { get; internal set; }
    internal Int32[] SortFilterScopeIndex { get; internal set; }
    internal Boolean[] NeedScopeInfoForSortFilterExpression { get; internal set; }
    internal Boolean[] IsSortFilterTarget { get; internal set; }
    internal Boolean[] IsSortFilterExpressionScope { get; internal set; }
    internal Boolean[] SortFilterScopeMatched { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.ID { get; }
    private string Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.ScopeName { get; }
    private Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.IsSortFilterTarget { get; private set; }
    private Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.IsSortFilterExpressionScope { get; private set; }
    private ExpressionInfoList Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.UserSortExpressions { get; private set; }
    private IndexedExprHost Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.UserSortExpressionsHost { get; }
    internal Grouping(ConstructionPhase phase);
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_GroupLabel();
    internal void set_GroupLabel(ExpressionInfo value);
    internal BoolList get_SortDirections();
    internal void set_SortDirections(BoolList value);
    internal ExpressionInfoList get_GroupExpressions();
    internal void set_GroupExpressions(ExpressionInfoList value);
    internal bool get_PageBreakAtEnd();
    internal void set_PageBreakAtEnd(bool value);
    internal bool get_PageBreakAtStart();
    internal void set_PageBreakAtStart(bool value);
    internal string get_Custom();
    internal void set_Custom(string value);
    internal DataAggregateInfoList get_Aggregates();
    internal void set_Aggregates(DataAggregateInfoList value);
    internal bool get_GroupAndSort();
    internal void set_GroupAndSort(bool value);
    internal FilterList get_Filters();
    internal void set_Filters(FilterList value);
    internal bool get_SimpleGroupExpressions();
    internal ReportItemList get_ReportItemsWithHideDuplicates();
    internal void set_ReportItemsWithHideDuplicates(ReportItemList value);
    internal ExpressionInfoList get_Parent();
    internal void set_Parent(ExpressionInfoList value);
    internal IndexedExprHost get_ParentExprHost();
    internal DataAggregateInfoList get_RecursiveAggregates();
    internal void set_RecursiveAggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_PostSortAggregates();
    internal void set_PostSortAggregates(DataAggregateInfoList value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal string get_DataCollectionName();
    internal void set_DataCollectionName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal bool get_SaveGroupExprValues();
    internal void set_SaveGroupExprValues(bool value);
    internal ExpressionInfoList get_UserSortExpressions();
    internal void set_UserSortExpressions(ExpressionInfoList value);
    internal InScopeSortFilterHashtable get_NonDetailSortFiltersInScope();
    internal void set_NonDetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal InScopeSortFilterHashtable get_DetailSortFiltersInScope();
    internal void set_DetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal IntList get_HideDuplicatesReportItemIDs();
    internal void set_HideDuplicatesReportItemIDs(IntList value);
    internal GroupingExprHost get_ExprHost();
    internal Hashtable get_ScopeNames();
    internal void set_ScopeNames(Hashtable value);
    internal bool get_InPivotCell();
    internal void set_InPivotCell(bool value);
    internal int get_RecursiveLevel();
    internal void set_RecursiveLevel(int value);
    internal bool get_HasInnerFilters();
    internal void set_HasInnerFilters(bool value);
    internal VariantList get_CurrentGroupExpressionValues();
    internal void set_CurrentGroupExpressionValues(VariantList value);
    internal ReportHierarchyNode get_Owner();
    internal void set_Owner(ReportHierarchyNode value);
    internal VariantList[] get_SortFilterScopeInfo();
    internal void set_SortFilterScopeInfo(VariantList[] value);
    internal Int32[] get_SortFilterScopeIndex();
    internal void set_SortFilterScopeIndex(Int32[] value);
    internal Boolean[] get_NeedScopeInfoForSortFilterExpression();
    internal void set_NeedScopeInfoForSortFilterExpression(Boolean[] value);
    internal Boolean[] get_IsSortFilterTarget();
    internal void set_IsSortFilterTarget(Boolean[] value);
    internal Boolean[] get_IsSortFilterExpressionScope();
    internal void set_IsSortFilterExpressionScope(Boolean[] value);
    internal Boolean[] get_SortFilterScopeMatched();
    internal void set_SortFilterScopeMatched(Boolean[] value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_ID();
    private sealed virtual override string Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_ScopeName();
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_IsSortFilterTarget();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_IsSortFilterTarget(Boolean[] value);
    private sealed virtual override Boolean[] Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_IsSortFilterExpressionScope();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_IsSortFilterExpressionScope(Boolean[] value);
    private sealed virtual override ExpressionInfoList Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_UserSortExpressions();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.set_UserSortExpressions(ExpressionInfoList value);
    private sealed virtual override IndexedExprHost Microsoft.ReportingServices.ReportProcessing.ISortFilterScope.get_UserSortExpressionsHost();
    internal void Initialize(InitializationContext context);
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetAggregateLists();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetPostSortAggregateLists();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.ClearIfEmpty();
    private void DataRendererInitialize(InitializationContext context);
    internal void AddReportItemWithHideDuplicates(ReportItem reportItem);
    internal void SetExprHost(GroupingExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal bool IsOnPathToSortFilterSource(int index);
    internal Int32[] GetGroupExpressionFieldIndices();
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.GroupingList : ArrayList {
    internal Grouping Item { get; }
    internal Grouping LastEntry { get; }
    internal GroupingList(int capacity);
    internal Grouping get_Item(int index);
    internal Grouping get_LastEntry();
    internal GroupingList Clone();
}
internal class Microsoft.ReportingServices.ReportProcessing.HandledReportRenderingException : RSException {
    private HandledReportRenderingException(SerializationInfo info, StreamingContext context);
    internal HandledReportRenderingException(ReportRenderingException innerException);
    internal HandledReportRenderingException(ErrorCode errCode, string message);
    internal HandledReportRenderingException(ErrorCode errCode, Exception innerException);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.HashtableInstanceInfo : InstanceInfo {
    protected Hashtable m_hashtable;
    internal int Count { get; }
    protected HashtableInstanceInfo(int capacity);
    internal int get_Count();
    internal bool ContainsKey(int key);
    internal IDictionaryEnumerator GetEnumerator();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IActionOwner {
    public Action Action { get; }
    public List`1<string> FieldsUsedInValueExpression { get; public set; }
    public abstract virtual Action get_Action();
    public abstract virtual List`1<string> get_FieldsUsedInValueExpression();
    public abstract virtual void set_FieldsUsedInValueExpression(List`1<string> value);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IAggregateHolder {
    public abstract virtual DataAggregateInfoList[] GetAggregateLists();
    public abstract virtual DataAggregateInfoList[] GetPostSortAggregateLists();
    public abstract virtual void ClearIfEmpty();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IChunkFactory {
    public ReportProcessingFlags ReportProcessingFlags { get; }
    public abstract virtual Stream CreateChunk(string chunkName, ReportChunkTypes type, string mimeType);
    public abstract virtual Stream GetChunk(string chunkName, ReportChunkTypes type, ChunkMode mode, String& mimeType);
    public abstract virtual bool Erase(string chunkName, ReportChunkTypes type);
    public abstract virtual ReportProcessingFlags get_ReportProcessingFlags();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IDocumentMap {
    public abstract virtual void Close();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IDocumentMapEntry {
    public bool InDocumentMap { get; }
    public abstract virtual bool get_InDocumentMap();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.IDOwner : object {
    protected int m_ID;
    internal int ID { get; internal set; }
    protected IDOwner(int id);
    internal int get_ID();
    internal void set_ID(int value);
    internal static Declaration GetDeclaration();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IErrorContext {
    public abstract virtual void Register(ProcessingErrorCode code, Severity severity, String[] arguments);
    public abstract virtual void Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IGetResource {
    public abstract virtual void GetResource(ICatalogItemContext reportContext, string path, Byte[]& resource, String& mimeType, Boolean& registerWarning);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IIndexInto {
    public abstract virtual object GetChildAt(int index, NonComputedUniqueNames& nonCompNames);
}
internal class Microsoft.ReportingServices.ReportProcessing.Image : ReportItem {
    private Action m_action;
    private SourceType m_source;
    private ExpressionInfo m_value;
    private ExpressionInfo m_MIMEType;
    private Sizings m_sizing;
    private ImageExprHost m_exprHost;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal ObjectType ObjectType { get; }
    internal Action Action { get; internal set; }
    internal SourceType Source { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo MIMEType { get; internal set; }
    internal Sizings Sizing { get; internal set; }
    internal ImageExprHost ImageExprHost { get; }
    private Action Microsoft.ReportingServices.ReportProcessing.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportProcessing.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal Image(ReportItem parent);
    internal Image(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal Action get_Action();
    internal void set_Action(Action value);
    internal SourceType get_Source();
    internal void set_Source(SourceType value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_MIMEType();
    internal void set_MIMEType(ExpressionInfo value);
    internal Sizings get_Sizing();
    internal void set_Sizing(Sizings value);
    internal ImageExprHost get_ImageExprHost();
    private sealed virtual override Action Microsoft.ReportingServices.ReportProcessing.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportProcessing.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void ProcessDrillthroughAction(ProcessingContext processingContext, NonComputedUniqueNames nonCompNames);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ImageData : object {
    private Byte[] m_data;
    private string m_MIMEType;
    internal string MIMEType { get; }
    internal Byte[] Data { get; }
    internal ImageData(Byte[] data, string mimeType);
    internal string get_MIMEType();
    internal Byte[] get_Data();
}
internal class Microsoft.ReportingServices.ReportProcessing.ImageInfo : object {
    private string m_streamName;
    private string m_mimeType;
    private WeakReference m_imageDataRef;
    internal string StreamName { get; internal set; }
    internal string MimeType { get; internal set; }
    internal WeakReference ImageDataRef { get; internal set; }
    internal ImageInfo(string streamName, string mimeType);
    internal string get_StreamName();
    internal void set_StreamName(string value);
    internal string get_MimeType();
    internal void set_MimeType(string value);
    internal WeakReference get_ImageDataRef();
    internal void set_ImageDataRef(WeakReference value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ImageInstance : ReportItemInstance {
    internal ImageInstanceInfo InstanceInfo { get; }
    internal ImageInstance(ProcessingContext pc, Image reportItemDef, int index);
    internal ImageInstance(ProcessingContext pc, Image reportItemDef, int index, bool customCreated);
    internal ImageInstanceInfo get_InstanceInfo();
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.ImageInstanceInfo : ReportItemInstanceInfo {
    private object m_data;
    private ActionInstance m_action;
    private bool m_brokenImage;
    private ImageMapAreaInstanceList m_imageMapAreas;
    internal string ImageValue { get; internal set; }
    internal ImageData Data { get; internal set; }
    internal object ValueObject { get; }
    internal ActionInstance Action { get; internal set; }
    internal bool BrokenImage { get; internal set; }
    internal ImageMapAreaInstanceList ImageMapAreas { get; internal set; }
    internal ImageInstanceInfo(ProcessingContext pc, Image reportItemDef, ReportItemInstance owner, int index, bool customCreated);
    internal ImageInstanceInfo(Image reportItemDef);
    internal string get_ImageValue();
    internal void set_ImageValue(string value);
    internal ImageData get_Data();
    internal void set_Data(ImageData value);
    internal object get_ValueObject();
    internal ActionInstance get_Action();
    internal void set_Action(ActionInstance value);
    internal bool get_BrokenImage();
    internal void set_BrokenImage(bool value);
    internal ImageMapAreaInstanceList get_ImageMapAreas();
    internal void set_ImageMapAreas(ImageMapAreaInstanceList value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ImageMapAreaInstance : object {
    private string m_id;
    private ImageMapAreaShape m_shape;
    private Single[] m_coordinates;
    private Action m_actionDef;
    private ActionInstance m_actionInstance;
    private int m_uniqueName;
    public string ID { get; public set; }
    public ImageMapAreaShape Shape { get; public set; }
    public Single[] Coordinates { get; public set; }
    public Action Action { get; public set; }
    public ActionInstance ActionInstance { get; public set; }
    public int UniqueName { get; public set; }
    internal ImageMapAreaInstance(ProcessingContext processingContext);
    public string get_ID();
    public void set_ID(string value);
    public ImageMapAreaShape get_Shape();
    public void set_Shape(ImageMapAreaShape value);
    public Single[] get_Coordinates();
    public void set_Coordinates(Single[] value);
    public Action get_Action();
    public void set_Action(Action value);
    public ActionInstance get_ActionInstance();
    public void set_ActionInstance(ActionInstance value);
    public int get_UniqueName();
    public void set_UniqueName(int value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ImageMapAreaInstanceList : ArrayList {
    private int m_uniqueName;
    internal ImageMapAreaInstance Item { get; }
    internal int UniqueName { get; internal set; }
    internal ImageMapAreaInstanceList(int capacity);
    internal ImageMapAreaInstance get_Item(int index);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ImageStreamNames : Hashtable {
    internal ImageInfo Item { get; internal set; }
    internal ImageStreamNames(int capacity);
    internal ImageInfo get_Item(string url);
    internal void set_Item(string url, ImageInfo value);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.InfoBase : object {
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.InitializationContext : ValueType {
    private ICatalogItemContext m_reportContext;
    private LocationFlags m_location;
    private ObjectType m_objectType;
    private string m_objectName;
    private ObjectType m_detailObjectType;
    private string m_matrixName;
    private EmbeddedImageHashtable m_embeddedImages;
    private ImageStreamNames m_imageStreamNames;
    private ErrorContext m_errorContext;
    private Hashtable m_parameters;
    private ArrayList m_dynamicParameters;
    private Hashtable m_dataSetQueryInfo;
    private ExprHostBuilder m_exprHostBuilder;
    private Report m_report;
    private StringList m_aggregateEscalateScopes;
    private Hashtable m_aggregateRewriteScopes;
    private Hashtable m_aggregateRewriteMap;
    private int m_dataRegionCount;
    private string m_outerGroupName;
    private string m_currentGroupName;
    private string m_currentDataregionName;
    private RunningValueInfoList m_runningValues;
    private Hashtable m_groupingScopesForRunningValues;
    private GroupingScopesForTablix m_groupingScopesForRunningValuesInTablix;
    private Hashtable m_dataregionScopesForRunningValues;
    private bool m_hasFilters;
    private ScopeInfo m_currentScope;
    private ScopeInfo m_outermostDataregionScope;
    private Hashtable m_groupingScopes;
    private Hashtable m_dataregionScopes;
    private Hashtable m_datasetScopes;
    private int m_numberOfDataSets;
    private string m_oneDataSetName;
    private string m_currentDataSetName;
    private Hashtable m_fieldNameMap;
    private Hashtable m_dataSetNameToDataRegionsMap;
    private StringDictionary m_dataSources;
    private Hashtable m_reportItemsInScope;
    private Hashtable m_toggleItemInfos;
    private bool m_registerReceiver;
    private CultureInfo m_reportLanguage;
    private bool m_reportDataElementStyleAttribute;
    private bool m_tableColumnVisible;
    private bool m_hasUserSortPeerScopes;
    private Hashtable m_userSortExpressionScopes;
    private Hashtable m_userSortTextboxes;
    private Hashtable m_peerScopes;
    private int m_lastPeerScopeId;
    private Hashtable m_reportScopes;
    private Hashtable m_reportScopeDatasetIDs;
    private GroupingList m_groupingList;
    private Hashtable m_reportGroupingLists;
    private Hashtable m_scopesInMatrixCells;
    private StringList m_parentMatrixList;
    private TextBoxList m_reportSortFilterTextboxes;
    private TextBoxList m_detailSortExpressionScopeTextboxes;
    internal ICatalogItemContext ReportContext { get; }
    internal LocationFlags Location { get; internal set; }
    internal ObjectType ObjectType { get; internal set; }
    internal string ObjectName { get; internal set; }
    internal bool ReportDataElementStyleAttribute { get; internal set; }
    internal bool TableColumnVisible { get; internal set; }
    unknown ObjectType DetailObjectType {internal set; }
    internal string MatrixName { get; internal set; }
    internal EmbeddedImageHashtable EmbeddedImages { get; }
    internal ImageStreamNames ImageStreamNames { get; }
    internal ErrorContext ErrorContext { get; }
    internal bool RegisterHiddenReceiver { get; internal set; }
    internal ExprHostBuilder ExprHostBuilder { get; }
    internal bool MergeOnePass { get; }
    internal int DataRegionCount { get; }
    internal CultureInfo ReportLanguage { get; }
    internal StringList AggregateEscalateScopes { get; internal set; }
    internal Hashtable AggregateRewriteScopes { get; internal set; }
    internal Hashtable AggregateRewriteMap { get; internal set; }
    internal InitializationContext(ICatalogItemContext reportContext, bool hasFilters, StringDictionary dataSources, DataSetList dataSets, ArrayList dynamicParameters, Hashtable dataSetQueryInfo, ErrorContext errorContext, ExprHostBuilder exprHostBuilder, Report report, CultureInfo reportLanguage, Hashtable reportScopes, bool hasUserSortPeerScopes, int dataRegionCount);
    internal ICatalogItemContext get_ReportContext();
    internal LocationFlags get_Location();
    internal void set_Location(LocationFlags value);
    internal ObjectType get_ObjectType();
    internal void set_ObjectType(ObjectType value);
    internal string get_ObjectName();
    internal void set_ObjectName(string value);
    internal bool get_ReportDataElementStyleAttribute();
    internal void set_ReportDataElementStyleAttribute(bool value);
    internal bool get_TableColumnVisible();
    internal void set_TableColumnVisible(bool value);
    internal void set_DetailObjectType(ObjectType value);
    internal string get_MatrixName();
    internal void set_MatrixName(string value);
    internal EmbeddedImageHashtable get_EmbeddedImages();
    internal ImageStreamNames get_ImageStreamNames();
    internal ErrorContext get_ErrorContext();
    internal bool get_RegisterHiddenReceiver();
    internal void set_RegisterHiddenReceiver(bool value);
    internal ExprHostBuilder get_ExprHostBuilder();
    internal bool get_MergeOnePass();
    internal int get_DataRegionCount();
    internal CultureInfo get_ReportLanguage();
    internal StringList get_AggregateEscalateScopes();
    internal void set_AggregateEscalateScopes(StringList value);
    internal Hashtable get_AggregateRewriteScopes();
    internal void set_AggregateRewriteScopes(Hashtable value);
    internal Hashtable get_AggregateRewriteMap();
    internal void set_AggregateRewriteMap(Hashtable value);
    private void RegisterDataSetScope(string scopeName, DataAggregateInfoList scopeAggregates, DataAggregateInfoList scopePostSortAggregates);
    private void UnRegisterDataSetScope(string scopeName);
    private void RegisterDataRegionScope(DataRegion dataRegion);
    private void UnRegisterDataRegionScope(string scopeName);
    internal void RegisterGroupingScope(string scopeName, bool simpleGroupExpressions, DataAggregateInfoList scopeAggregates, DataAggregateInfoList scopePostSortAggregates, DataAggregateInfoList scopeRecursiveAggregates, Grouping groupingScope);
    internal void RegisterGroupingScope(string scopeName, bool simpleGroupExpressions, DataAggregateInfoList scopeAggregates, DataAggregateInfoList scopePostSortAggregates, DataAggregateInfoList scopeRecursiveAggregates, Grouping groupingScope, bool isMatrixGrouping);
    internal void UnRegisterGroupingScope(string scopeName);
    internal void UnRegisterGroupingScope(string scopeName, bool isMatrixGrouping);
    internal void ValidateHideDuplicateScope(string hideDuplicateScope, ReportItem reportItem);
    internal void RegisterGroupingScopeForTablixCell(string scopeName, bool column, bool simpleGroupExpressions, DataAggregateInfoList scopeAggregates, DataAggregateInfoList scopePostSortAggregates, DataAggregateInfoList scopeRecursiveAggregates, Grouping groupingScope);
    internal void UnRegisterGroupingScopeForTablixCell(string scopeName, bool column);
    internal void RegisterTablixCellScope(bool forceRows, DataAggregateInfoList scopeAggregates, DataAggregateInfoList scopePostSortAggregates);
    internal void UnRegisterTablixCellScope();
    internal void RegisterPageSectionScope(DataAggregateInfoList scopeAggregates);
    internal void UnRegisterPageSectionScope();
    internal void RegisterRunningValues(RunningValueInfoList runningValues);
    internal void UnRegisterRunningValues(RunningValueInfoList runningValues);
    internal void TransferGroupExpressionRowNumbers(RunningValueInfoList rowNumbers);
    internal bool IsRunningValueDirectionColumn();
    internal void TransferRunningValues(RunningValueInfoList runningValues, string propertyName);
    internal void TransferRunningValues(RunningValueInfoList runningValues, ObjectType objectType, string objectName, string propertyName);
    internal void SpecialTransferRunningValues(RunningValueInfoList runningValues);
    internal void CopyRunningValues(RunningValueInfoList runningValues, DataAggregateInfoList tablixAggregates);
    internal void TransferAggregates(DataAggregateInfoList aggregates, string propertyName);
    internal void TransferAggregates(DataAggregateInfoList aggregates, ObjectType objectType, string objectName, string propertyName);
    internal string EscalateScope(string oldScope);
    internal void InitializeParameters(ParameterDefList parameters, DataSetList dataSetList);
    private void InitializeParameter(ParameterDef parameter, DynamicParameter dynamicParameter, Hashtable dependencies, DataSetList dataSetList);
    private void InitializeParameterDataSource(ParameterDef parameter, DataSetReference dataSetRef, bool isDefault, Hashtable dependencies, Boolean& isComplex, DataSetList dataSetList);
    internal void MergeFieldPropertiesIntoDataset(ExpressionInfo expressionInfo);
    internal void RegisterDataRegion(DataRegion dataRegion);
    internal void UnRegisterDataRegion(DataRegion dataRegion);
    internal void RegisterDataSet(DataSet dataSet);
    internal void UnRegisterDataSet(DataSet dataSet);
    private string GetDataSetName();
    private int GetDataSetID();
    private void ValidateDataSetNameForTopLevelDataRegion(string dataSetName);
    internal void CheckFieldReferences(StringList fieldNames, string propertyName);
    internal void AggregateCheckFieldReferences(StringList fieldNames, string dataSetName, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckFieldReference(StringList fieldNames, string dataSetName, ObjectType objectType, string objectName, string propertyName);
    internal void FillInFieldIndex(ExpressionInfo exprInfo);
    internal void FillInFieldIndex(ExpressionInfo exprInfo, string dataSetName);
    private void InternalFillInFieldIndex(ExpressionInfo exprInfo, string dataSetName);
    internal void FillInTokenIndex(ExpressionInfo exprInfo);
    internal void CheckDataSetReference(StringList referencedDataSets, string propertyName);
    internal void AggregateCheckDataSetReference(StringList referencedDataSets, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckDataSetReference(StringList dataSetNames, ObjectType objectType, string objectName, string propertyName);
    internal void CheckDataSourceReference(StringList referencedDataSources, string propertyName);
    internal void AggregateCheckDataSourceReference(StringList referencedDataSources, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckDataSourceReference(StringList dataSourceNames, ObjectType objectType, string objectName, string propertyName);
    internal int GenerateSubtotalID();
    internal string GenerateAggregateID(string oldAggregateID);
    internal void RegisterReportItems(ReportItemCollection reportItems);
    internal void UnRegisterReportItems(ReportItemCollection reportItems);
    internal void CheckReportItemReferences(StringList referencedReportItems, string propertyName);
    internal void AggregateCheckReportItemReferences(StringList referencedReportItems, ObjectType objectType, string objectName, string propertyName);
    private void InternalCheckReportItemReferences(StringList referencedReportItems, ObjectType objectType, string objectName, string propertyName);
    internal void CheckReportParameterReferences(StringList referencedParameters, string propertyName);
    private void InternalCheckReportParameterReferences(StringList referencedParameters, ObjectType objectType, string objectName, string propertyName);
    internal ToggleItemInfo RegisterReceiver(string senderName, Visibility visibility, bool isContainer);
    internal void UnRegisterReceiver(string senderName, ToggleItemInfo toggleItemInfo);
    internal void RegisterSender(TextBox textbox);
    internal double ValidateSize(string size, string propertyName);
    internal double ValidateSize(String& size, string propertyName);
    internal double ValidateSize(String& size, bool restrictMaxValue, string propertyName);
    internal void CheckInternationalSettings(StyleAttributeHashtable styleAttributes);
    internal string GetCurrentScope();
    internal bool IsScope(string scope);
    internal bool IsAncestorScope(string targetScope, bool inMatrixGrouping, bool checkAllGroupingScopes);
    internal bool IsCurrentScope(string targetScope);
    internal bool IsPeerScope(string targetScope);
    internal bool IsReportTopLevelScope();
    internal ISortFilterScope GetSortFilterScope();
    internal ISortFilterScope GetSortFilterScope(string scopeName);
    internal GroupingList GetGroupingList();
    internal void RegisterScopeInMatrixCell(string matrixName, string scope, bool registerMatrixCellScope);
    internal void UpdateScopesInMatrixCells(string matrixName, GroupingList matrixGroups);
    internal void RegisterPeerScopes(ReportItemCollection reportItems);
    private void RegisterMatrixPeerScopes(MatrixHeading headings, int scopeID);
    private void RegisterPeerScopes(ReportItemCollection reportItems, int scopeID, bool traverse);
    internal void RegisterUserSortInnerScope(TextBox textbox);
    internal void ProcessUserSortInnerScope(string scopeName, bool isMatrixGroup, bool isMatrixColumnGroup);
    internal void ValidateUserSortInnerScope(string scopeName);
    internal void RegisterSortFilterTextbox(TextBox textbox);
    internal void SetDataSetDetailUserSortFilter();
    internal void CalculateSortFilterGroupingLists();
    private GroupingList CalculateGroupingDifference(GroupingList expressionScope, GroupingList targetScope);
    internal void TextboxWithDetailSortExpressionAdd(TextBox textbox);
    internal void TextboxesWithDetailSortExpressionInitialize();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.InScopeSortFilterHashtable : Hashtable {
    internal IntList Item { get; }
    internal InScopeSortFilterHashtable(int capacity);
    internal IntList get_Item(int index);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.InstanceInfo : InfoBase {
    internal static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.InstanceInfoOwner : object {
    protected InfoBase m_instanceInfo;
    internal OffsetInfo OffsetInfo { get; internal set; }
    internal long ChunkOffset { get; }
    internal OffsetInfo get_OffsetInfo();
    internal void set_OffsetInfo(OffsetInfo value);
    internal long get_ChunkOffset();
    internal void SetOffset(long offset);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.Int64List : ArrayList {
    internal long Item { get; internal set; }
    internal Int64List(int capacity);
    internal long get_Item(int index);
    internal void set_Item(int index, long value);
}
internal class Microsoft.ReportingServices.ReportProcessing.IntegerResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal int Value;
}
internal class Microsoft.ReportingServices.ReportProcessing.IntermediateFormatVersion : object {
    private int m_major;
    private int m_minor;
    private int m_build;
    private static int m_current_major;
    private static int m_current_minor;
    private static int m_current_build;
    internal int Major { get; internal set; }
    internal int Minor { get; internal set; }
    internal int Build { get; internal set; }
    internal bool IsOldVersion { get; }
    internal bool IsRS2000_Beta2_orOlder { get; }
    internal bool IsRS2000_WithSpecialRecursiveAggregates { get; }
    internal bool IsRS2000_WithNewChartYAxis { get; }
    internal bool IsRS2000_WithOtherPageChunkSplit { get; }
    internal bool IsRS2000_RTM_orOlder { get; }
    internal bool IsRS2000_RTM_orNewer { get; }
    internal bool IsRS2000_WithUnusedFieldsOptimization { get; }
    internal bool IsRS2000_WithImageInfo { get; }
    internal bool IsRS2005_Beta2_orOlder { get; }
    internal bool IsRS2005_WithMultipleActions { get; }
    internal bool IsRS2005_WithSpecialChunkSplit { get; }
    internal bool IsRS2005_IDW9_orOlder { get; }
    internal bool IsRS2005_WithTableDetailFix { get; }
    internal bool IsRS2005_WithPHFChunks { get; }
    internal bool IsRS2005_WithTableOptimizations { get; }
    internal bool IsRS2005_WithSharedDrillthroughParams { get; }
    internal bool IsRS2005_WithSimpleTextBoxOptimizations { get; }
    internal bool IsRS2005_WithChartHeadingInstanceFix { get; }
    internal bool IsRS2005_WithXmlDataElementOutputChange { get; }
    internal bool Is_WithUserSort { get; }
    internal IntermediateFormatVersion(int major, int minor, int build);
    private static IntermediateFormatVersion();
    internal int get_Major();
    internal void set_Major(int value);
    internal int get_Minor();
    internal void set_Minor(int value);
    internal int get_Build();
    internal void set_Build(int value);
    internal bool get_IsOldVersion();
    internal bool get_IsRS2000_Beta2_orOlder();
    internal bool get_IsRS2000_WithSpecialRecursiveAggregates();
    internal bool get_IsRS2000_WithNewChartYAxis();
    internal bool get_IsRS2000_WithOtherPageChunkSplit();
    internal bool get_IsRS2000_RTM_orOlder();
    internal bool get_IsRS2000_RTM_orNewer();
    internal bool get_IsRS2000_WithUnusedFieldsOptimization();
    internal bool get_IsRS2000_WithImageInfo();
    internal bool get_IsRS2005_Beta2_orOlder();
    internal bool get_IsRS2005_WithMultipleActions();
    internal bool get_IsRS2005_WithSpecialChunkSplit();
    internal bool get_IsRS2005_IDW9_orOlder();
    internal bool get_IsRS2005_WithTableDetailFix();
    internal bool get_IsRS2005_WithPHFChunks();
    internal bool get_IsRS2005_WithTableOptimizations();
    internal bool get_IsRS2005_WithSharedDrillthroughParams();
    internal bool get_IsRS2005_WithSimpleTextBoxOptimizations();
    internal bool get_IsRS2005_WithChartHeadingInstanceFix();
    internal bool get_IsRS2005_WithXmlDataElementOutputChange();
    internal bool get_Is_WithUserSort();
    private static int EncodeFileVersion(FileVersionInfo fileVersion);
    internal static void DecodeFileVersion(int version, Int32& major, Int32& minor, Int32& build, Int32& buildminor);
    internal void SetCurrent();
    private int CompareTo(int major, int minor, int build);
    private int Compare(int x, int y);
    internal static Declaration GetDeclaration();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.IntList : ArrayList {
    internal int Item { get; internal set; }
    internal IntList(int capacity);
    internal int get_Item(int index);
    internal void set_Item(int index, int value);
    internal void CopyTo(IntList target);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IPageBreakItem {
    public abstract virtual bool HasPageBreaks(bool atStart);
    public abstract virtual bool IgnorePageBreaks();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IPageItem {
    public int StartPage { get; public set; }
    public int EndPage { get; public set; }
    public abstract virtual int get_StartPage();
    public abstract virtual void set_StartPage(int value);
    public abstract virtual int get_EndPage();
    public abstract virtual void set_EndPage(int value);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IParameterDataSource {
    public int DataSourceIndex { get; }
    public int DataSetIndex { get; }
    public int ValueFieldIndex { get; }
    public int LabelFieldIndex { get; }
    public abstract virtual int get_DataSourceIndex();
    public abstract virtual int get_DataSetIndex();
    public abstract virtual int get_ValueFieldIndex();
    public abstract virtual int get_LabelFieldIndex();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IParameterDef {
    public int DefaultValuesExpressionCount { get; }
    public int ValidValuesValueExpressionCount { get; }
    public int ValidValuesLabelExpressionCount { get; }
    public string Name { get; }
    public DataType DataType { get; }
    public bool MultiValue { get; }
    public IParameterDataSource DefaultDataSource { get; }
    public IParameterDataSource ValidValuesDataSource { get; }
    public abstract virtual bool HasDefaultValuesExpressions();
    public abstract virtual bool HasDefaultValuesDataSource();
    public abstract virtual int get_DefaultValuesExpressionCount();
    public abstract virtual bool HasValidValuesValueExpressions();
    public abstract virtual bool HasValidValuesLabelExpressions();
    public abstract virtual bool HasValidValuesDataSource();
    public abstract virtual int get_ValidValuesValueExpressionCount();
    public abstract virtual int get_ValidValuesLabelExpressionCount();
    public abstract virtual string get_Name();
    public abstract virtual DataType get_DataType();
    public abstract virtual bool get_MultiValue();
    public abstract virtual IParameterDataSource get_DefaultDataSource();
    public abstract virtual IParameterDataSource get_ValidValuesDataSource();
    public abstract virtual bool ValidateValueForNull(object newValue, ErrorContext errorContext, string parameterValueProperty);
    public abstract virtual bool ValidateValueForBlank(object newValue, ErrorContext errorContext, string parameterValueProperty);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IProcessingDataExtensionConnection {
    public bool MustResolveSharedDataSources { get; }
    public abstract virtual void DataSetRetrieveForReportInstance(ICatalogItemContext itemContext, ParameterInfoCollection reportParameters);
    public abstract virtual IDbConnection OpenDataSourceExtensionConnection(IProcessingDataSource dataSource, string connectionString, DataSourceInfo dataSourceInfo, string datasetName);
    public abstract virtual void CloseConnection(IDbConnection connection);
    public abstract virtual bool get_MustResolveSharedDataSources();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IProcessingDataSource {
    public Guid ID { get; }
    public string Name { get; }
    public string Type { get; public set; }
    unknown string SharedDataSourceReferencePath {public set; }
    public string DataSourceReference { get; }
    public bool IntegratedSecurity { get; }
    public abstract virtual Guid get_ID();
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual void set_SharedDataSourceReferencePath(string value);
    public abstract virtual string get_DataSourceReference();
    public abstract virtual bool get_IntegratedSecurity();
}
internal interface Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder {
    public abstract virtual RunningValueInfoList GetRunningValueList();
    public abstract virtual void ClearIfEmpty();
}
internal interface Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName {
    public abstract virtual object Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IShowHideContainer {
    public abstract virtual void BeginProcessContainer(ProcessingContext context);
    public abstract virtual void EndProcessContainer(ProcessingContext context);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IShowHideReceiver {
    public abstract virtual void ProcessReceiver(ProcessingContext context, int uniqueName);
}
internal interface Microsoft.ReportingServices.ReportProcessing.IShowHideSender {
    public abstract virtual void ProcessSender(ProcessingContext context, int uniqueName);
}
internal interface Microsoft.ReportingServices.ReportProcessing.ISortFilterScope {
    public int ID { get; }
    public string ScopeName { get; }
    public Boolean[] IsSortFilterTarget { get; public set; }
    public Boolean[] IsSortFilterExpressionScope { get; public set; }
    public ExpressionInfoList UserSortExpressions { get; public set; }
    public IndexedExprHost UserSortExpressionsHost { get; }
    public abstract virtual int get_ID();
    public abstract virtual string get_ScopeName();
    public abstract virtual Boolean[] get_IsSortFilterTarget();
    public abstract virtual void set_IsSortFilterTarget(Boolean[] value);
    public abstract virtual Boolean[] get_IsSortFilterExpressionScope();
    public abstract virtual void set_IsSortFilterExpressionScope(Boolean[] value);
    public abstract virtual ExpressionInfoList get_UserSortExpressions();
    public abstract virtual void set_UserSortExpressions(ExpressionInfoList value);
    public abstract virtual IndexedExprHost get_UserSortExpressionsHost();
}
internal class Microsoft.ReportingServices.ReportProcessing.Last : DataAggregate {
    private object m_value;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.Legend : object {
    private bool m_visible;
    private Style m_styleClass;
    private Positions m_position;
    private LegendLayout m_layout;
    private bool m_insidePlotArea;
    internal bool Visible { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal Positions Position { get; internal set; }
    internal LegendLayout Layout { get; internal set; }
    internal bool InsidePlotArea { get; internal set; }
    internal bool get_Visible();
    internal void set_Visible(bool value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal Positions get_Position();
    internal void set_Position(Positions value);
    internal LegendLayout get_Layout();
    internal void set_Layout(LegendLayout value);
    internal bool get_InsidePlotArea();
    internal void set_InsidePlotArea(bool value);
    internal void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.Line : ReportItem {
    private static string ZeroSize;
    private bool m_slanted;
    private ReportItemExprHost m_exprHost;
    internal ObjectType ObjectType { get; }
    internal bool LineSlant { get; internal set; }
    internal Line(ReportItem parent);
    internal Line(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal bool get_LineSlant();
    internal void set_LineSlant(bool value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void CalculateSizes(double width, double height, InitializationContext context, bool overwrite);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.LineInstance : ReportItemInstance {
    internal LineInstance(ProcessingContext pc, Line reportItemDef, int index);
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.LineInstanceInfo : ReportItemInstanceInfo {
    internal LineInstanceInfo(ProcessingContext pc, Line reportItemDef, ReportItemInstance owner, int index);
    internal LineInstanceInfo(Line reportItemDef);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.List : DataRegion {
    private ReportHierarchyNode m_hierarchyDef;
    private ReportItemCollection m_reportItems;
    private bool m_fillPage;
    private string m_dataInstanceName;
    private DataElementOutputTypes m_dataInstanceElementOutput;
    private bool m_isListMostInner;
    private ListExprHost m_exprHost;
    private int m_ContentStartPage;
    private int m_keepWithChildFirstPage;
    internal ObjectType ObjectType { get; }
    internal Grouping Grouping { get; internal set; }
    internal Sorting Sorting { get; internal set; }
    internal ReportHierarchyNode HierarchyDef { get; internal set; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal bool FillPage { get; internal set; }
    internal int ListContentID { get; }
    internal string DataInstanceName { get; internal set; }
    internal DataElementOutputTypes DataInstanceElementOutput { get; internal set; }
    internal bool IsListMostInner { get; internal set; }
    internal bool PropagatedPageBreakAtStart { get; }
    internal bool PropagatedPageBreakAtEnd { get; }
    internal ListExprHost ListExprHost { get; }
    internal int ContentStartPage { get; internal set; }
    internal int KeepWithChildFirstPage { get; internal set; }
    protected DataRegionExprHost DataRegionExprHost { get; }
    internal List(ReportItem parent);
    internal List(int id, int idForListContent, int idForReportItems, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal Grouping get_Grouping();
    internal void set_Grouping(Grouping value);
    internal Sorting get_Sorting();
    internal void set_Sorting(Sorting value);
    internal ReportHierarchyNode get_HierarchyDef();
    internal void set_HierarchyDef(ReportHierarchyNode value);
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal bool get_FillPage();
    internal void set_FillPage(bool value);
    internal int get_ListContentID();
    internal string get_DataInstanceName();
    internal void set_DataInstanceName(string value);
    internal DataElementOutputTypes get_DataInstanceElementOutput();
    internal void set_DataInstanceElementOutput(DataElementOutputTypes value);
    internal bool get_IsListMostInner();
    internal void set_IsListMostInner(bool value);
    internal bool get_PropagatedPageBreakAtStart();
    internal bool get_PropagatedPageBreakAtEnd();
    internal ListExprHost get_ListExprHost();
    internal int get_ContentStartPage();
    internal void set_ContentStartPage(int value);
    internal int get_KeepWithChildFirstPage();
    internal void set_KeepWithChildFirstPage(int value);
    protected virtual DataRegionExprHost get_DataRegionExprHost();
    internal virtual void CalculateSizes(double width, double height, InitializationContext context, bool overwrite);
    internal virtual bool Initialize(InitializationContext context);
    private void InternalInitialize(InitializationContext context);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal virtual void RegisterReceiver(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ListContentInstance : InstanceInfoOwner {
    private int m_uniqueName;
    private ReportItemColInstance m_reportItemColInstance;
    [ReferenceAttribute]
private List m_listDef;
    internal int UniqueName { get; internal set; }
    internal List ListDef { get; internal set; }
    internal ReportItemColInstance ReportItemColInstance { get; internal set; }
    internal ListContentInstance(ProcessingContext pc, List listDef);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal List get_ListDef();
    internal void set_ListDef(List value);
    internal ReportItemColInstance get_ReportItemColInstance();
    internal void set_ReportItemColInstance(ReportItemColInstance value);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal static Declaration GetDeclaration();
    internal ListContentInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
}
internal class Microsoft.ReportingServices.ReportProcessing.ListContentInstanceInfo : InstanceInfo {
    private bool m_startHidden;
    private string m_label;
    private DataValueInstanceList m_customPropertyInstances;
    internal bool StartHidden { get; internal set; }
    internal string Label { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    internal ListContentInstanceInfo(ProcessingContext pc, ListContentInstance owner, List listDef);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal string get_Label();
    internal void set_Label(string value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ListContentInstanceList : ArrayList {
    internal ListContentInstance Item { get; }
    internal ListContentInstanceList(int capacity);
    internal ListContentInstance get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ListInstance : ReportItemInstance {
    private ListContentInstanceList m_listContentInstances;
    private RenderingPagesRangesList m_renderingPages;
    private int m_numberOfContentsOnThisPage;
    private int m_startPage;
    private int m_endPage;
    internal ListContentInstanceList ListContents { get; internal set; }
    internal RenderingPagesRangesList ChildrenStartAndEndPages { get; internal set; }
    internal int NumberOfContentsOnThisPage { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal ListInstance(ProcessingContext pc, List reportItemDef);
    internal ListInstance(ProcessingContext pc, List reportItemDef, ListContentInstanceList listContentInstances, RenderingPagesRangesList renderingPages);
    internal ListContentInstanceList get_ListContents();
    internal void set_ListContents(ListContentInstanceList value);
    internal RenderingPagesRangesList get_ChildrenStartAndEndPages();
    internal void set_ChildrenStartAndEndPages(RenderingPagesRangesList value);
    internal int get_NumberOfContentsOnThisPage();
    internal void set_NumberOfContentsOnThisPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal static Declaration GetDeclaration();
    protected virtual object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.ListInstanceInfo : ReportItemInstanceInfo {
    private string m_noRows;
    internal string NoRows { get; internal set; }
    internal ListInstanceInfo(ProcessingContext pc, List reportItemDef, ListInstance owner);
    internal ListInstanceInfo(List reportItemDef);
    internal string get_NoRows();
    internal void set_NoRows(string value);
    internal static Declaration GetDeclaration();
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.ReportProcessing.LocationFlags : Enum {
    public int value__;
    public static LocationFlags None;
    public static LocationFlags InDataSet;
    public static LocationFlags InDataRegion;
    public static LocationFlags InGrouping;
    public static LocationFlags InDetail;
    public static LocationFlags InMatrixCell;
    public static LocationFlags InPageSection;
    public static LocationFlags InMatrixSubtotal;
    public static LocationFlags InMatrixCellTopLevelItem;
    public static LocationFlags InMatrixOrTable;
    public static LocationFlags InMatrixGroupHeader;
}
internal class Microsoft.ReportingServices.ReportProcessing.Matrix : Pivot {
    private MatrixHeading m_columns;
    private MatrixHeading m_rows;
    private ReportItemCollection m_cornerReportItems;
    private ReportItemCollection m_cellReportItems;
    private IntList m_cellIDs;
    private bool m_propagatedPageBreakAtStart;
    private bool m_propagatedPageBreakAtEnd;
    private int m_innerRowLevelWithPageBreak;
    private MatrixRowList m_matrixRows;
    private MatrixColumnList m_matrixColumns;
    private int m_groupsBeforeRowHeaders;
    private bool m_layoutDirection;
    [ReferenceAttribute]
private MatrixHeading m_staticColumns;
    [ReferenceAttribute]
private MatrixHeading m_staticRows;
    private bool m_useOWC;
    private StringList m_owcCellNames;
    private string m_cellDataElementName;
    private bool m_columnGroupingFixedHeader;
    private bool m_rowGroupingFixedHeader;
    private bool m_firstInstance;
    private BoolList m_firstCellInstances;
    private MatrixExprHost m_exprHost;
    private int m_currentPage;
    private int m_cellPage;
    private PageTextboxes m_cellPageTextboxes;
    private PageTextboxes m_columnHeaderPageTextboxes;
    private PageTextboxes m_rowHeaderPageTextboxes;
    private NonComputedUniqueNames m_cornerNonComputedUniqueNames;
    private bool m_inOutermostSubtotalCell;
    private ReportSizeCollection m_cellHeightsForRendering;
    private ReportSizeCollection m_cellWidthsForRendering;
    private String[] m_cellIDsForRendering;
    internal ObjectType ObjectType { get; }
    internal ReportItemCollection CornerReportItems { get; internal set; }
    internal ReportItem CornerReportItem { get; }
    internal PivotHeading PivotColumns { get; }
    internal PivotHeading PivotRows { get; }
    internal MatrixHeading Columns { get; internal set; }
    internal MatrixHeading Rows { get; internal set; }
    internal ReportItemCollection CellReportItems { get; internal set; }
    internal RunningValueInfoList PivotCellRunningValues { get; }
    internal IntList CellIDs { get; internal set; }
    internal bool PropagatedPageBreakAtStart { get; internal set; }
    internal bool PropagatedPageBreakAtEnd { get; internal set; }
    internal int InnerRowLevelWithPageBreak { get; internal set; }
    internal MatrixRowList MatrixRows { get; internal set; }
    internal MatrixColumnList MatrixColumns { get; internal set; }
    internal int GroupsBeforeRowHeaders { get; internal set; }
    internal bool LayoutDirection { get; internal set; }
    internal PivotHeading PivotStaticColumns { get; }
    internal PivotHeading PivotStaticRows { get; }
    internal MatrixHeading StaticColumns { get; internal set; }
    internal MatrixHeading StaticRows { get; internal set; }
    internal bool UseOWC { get; internal set; }
    internal StringList OwcCellNames { get; internal set; }
    internal string CellDataElementName { get; internal set; }
    internal bool FirstInstance { get; internal set; }
    internal BoolList FirstCellInstances { get; internal set; }
    internal MatrixExprHost MatrixExprHost { get; }
    protected DataRegionExprHost DataRegionExprHost { get; }
    internal int CurrentPage { get; internal set; }
    internal NonComputedUniqueNames CornerNonComputedUniqueNames { get; internal set; }
    internal bool InOutermostSubtotalCell { get; internal set; }
    internal ReportSizeCollection CellHeightsForRendering { get; }
    internal ReportSizeCollection CellWidthsForRendering { get; }
    internal String[] CellIDsForRendering { get; internal set; }
    internal bool ColumnGroupingFixedHeader { get; internal set; }
    internal bool RowGroupingFixedHeader { get; internal set; }
    internal PageTextboxes CellPageTextboxes { get; }
    internal PageTextboxes ColumnHeaderPageTextboxes { get; }
    internal PageTextboxes RowHeaderPageTextboxes { get; }
    internal int CellPage { get; internal set; }
    internal Matrix(ReportItem parent);
    internal Matrix(int id, int idForCornerReportItems, int idForCellReportItems, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal ReportItemCollection get_CornerReportItems();
    internal void set_CornerReportItems(ReportItemCollection value);
    internal ReportItem get_CornerReportItem();
    internal virtual PivotHeading get_PivotColumns();
    internal virtual PivotHeading get_PivotRows();
    internal MatrixHeading get_Columns();
    internal void set_Columns(MatrixHeading value);
    internal MatrixHeading get_Rows();
    internal void set_Rows(MatrixHeading value);
    internal ReportItemCollection get_CellReportItems();
    internal void set_CellReportItems(ReportItemCollection value);
    internal virtual RunningValueInfoList get_PivotCellRunningValues();
    internal IntList get_CellIDs();
    internal void set_CellIDs(IntList value);
    internal bool get_PropagatedPageBreakAtStart();
    internal void set_PropagatedPageBreakAtStart(bool value);
    internal bool get_PropagatedPageBreakAtEnd();
    internal void set_PropagatedPageBreakAtEnd(bool value);
    internal int get_InnerRowLevelWithPageBreak();
    internal void set_InnerRowLevelWithPageBreak(int value);
    internal MatrixRowList get_MatrixRows();
    internal void set_MatrixRows(MatrixRowList value);
    internal MatrixColumnList get_MatrixColumns();
    internal void set_MatrixColumns(MatrixColumnList value);
    internal int get_GroupsBeforeRowHeaders();
    internal void set_GroupsBeforeRowHeaders(int value);
    internal bool get_LayoutDirection();
    internal void set_LayoutDirection(bool value);
    internal virtual PivotHeading get_PivotStaticColumns();
    internal virtual PivotHeading get_PivotStaticRows();
    internal MatrixHeading get_StaticColumns();
    internal void set_StaticColumns(MatrixHeading value);
    internal MatrixHeading get_StaticRows();
    internal void set_StaticRows(MatrixHeading value);
    internal bool get_UseOWC();
    internal void set_UseOWC(bool value);
    internal StringList get_OwcCellNames();
    internal void set_OwcCellNames(StringList value);
    internal string get_CellDataElementName();
    internal void set_CellDataElementName(string value);
    internal bool get_FirstInstance();
    internal void set_FirstInstance(bool value);
    internal BoolList get_FirstCellInstances();
    internal void set_FirstCellInstances(BoolList value);
    internal MatrixExprHost get_MatrixExprHost();
    protected virtual DataRegionExprHost get_DataRegionExprHost();
    internal int get_CurrentPage();
    internal void set_CurrentPage(int value);
    internal NonComputedUniqueNames get_CornerNonComputedUniqueNames();
    internal void set_CornerNonComputedUniqueNames(NonComputedUniqueNames value);
    internal bool get_InOutermostSubtotalCell();
    internal void set_InOutermostSubtotalCell(bool value);
    internal ReportSizeCollection get_CellHeightsForRendering();
    internal ReportSizeCollection get_CellWidthsForRendering();
    internal String[] get_CellIDsForRendering();
    internal void set_CellIDsForRendering(String[] value);
    internal bool get_ColumnGroupingFixedHeader();
    internal void set_ColumnGroupingFixedHeader(bool value);
    internal bool get_RowGroupingFixedHeader();
    internal void set_RowGroupingFixedHeader(bool value);
    internal PageTextboxes get_CellPageTextboxes();
    internal PageTextboxes get_ColumnHeaderPageTextboxes();
    internal PageTextboxes get_RowHeaderPageTextboxes();
    internal int get_CellPage();
    internal void set_CellPage(int value);
    internal virtual bool Initialize(InitializationContext context);
    private void InternalInitialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal virtual void RegisterReceiver(InitializationContext context);
    internal void CalculatePropagatedFlags();
    private void CornerInitialize(InitializationContext context);
    private void ColumnsInitialize(InitializationContext context, Int32& expectedNumberOfMatrixColumns, Double& size, Boolean& computedSubtotal);
    private void ColumnsRegisterReceiver(InitializationContext context);
    private void RowsInitialize(InitializationContext context, Int32& expectedNumberOfMatrixRows, Double& size, Boolean& computedSubtotal);
    private void RowsRegisterReceiver(InitializationContext context);
    private void MatrixCellInitialize(InitializationContext context, int expectedNumberOfMatrixColumns, int expectedNumberOfMatrixRows, bool computedSubtotal, Double& totalCellHeight, Double& totalCellWidth);
    private GroupingList GenerateUserSortGroupingList(bool rowIsInnerGrouping);
    private void MatrixCellRegisterReceiver(InitializationContext context);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    internal ReportItem GetCellReportItem(int rowIndex, int columnIndex);
    internal void InitializePageSectionProcessing();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixCellInstance : InstanceInfoOwner {
    private ReportItemInstance m_content;
    internal ReportItemInstance Content { get; internal set; }
    internal MatrixCellInstance(int rowIndex, int colIndex, Matrix matrixDef, int cellDefIndex, ProcessingContext pc, NonComputedUniqueNames& nonComputedUniqueNames);
    internal ReportItemInstance get_Content();
    internal void set_Content(ReportItemInstance value);
    internal static Declaration GetDeclaration();
    internal MatrixCellInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixCellInstanceInfo : InstanceInfo {
    private NonComputedUniqueNames m_contentUniqueNames;
    private int m_rowIndex;
    private int m_columnIndex;
    internal NonComputedUniqueNames ContentUniqueNames { get; internal set; }
    internal int RowIndex { get; internal set; }
    internal int ColumnIndex { get; internal set; }
    internal MatrixCellInstanceInfo(int rowIndex, int colIndex, Matrix matrixDef, int cellDefIndex, ProcessingContext pc, MatrixCellInstance owner, NonComputedUniqueNames& nonComputedUniqueNames);
    internal NonComputedUniqueNames get_ContentUniqueNames();
    internal void set_ContentUniqueNames(NonComputedUniqueNames value);
    internal int get_RowIndex();
    internal void set_RowIndex(int value);
    internal int get_ColumnIndex();
    internal void set_ColumnIndex(int value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.MatrixCellInstanceList : ArrayList {
    internal MatrixCellInstance Item { get; }
    internal MatrixCellInstanceList(int capacity);
    internal MatrixCellInstance get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.MatrixCellInstancesList : ArrayList {
    internal MatrixCellInstanceList Item { get; }
    internal MatrixCellInstancesList(int capacity);
    internal MatrixCellInstanceList get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixColumn : object {
    private string m_width;
    private double m_widthValue;
    internal string Width { get; internal set; }
    internal double WidthValue { get; internal set; }
    internal string get_Width();
    internal void set_Width(string value);
    internal double get_WidthValue();
    internal void set_WidthValue(double value);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.MatrixColumnList : ArrayList {
    internal MatrixColumn Item { get; }
    internal MatrixColumnList(int capacity);
    internal MatrixColumn get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixHeading : PivotHeading {
    private string m_size;
    private double m_sizeValue;
    private ReportItemCollection m_reportItems;
    private bool m_owcGroupExpression;
    private bool m_inFirstPage;
    private BoolList m_firstHeadingInstances;
    private MatrixDynamicGroupExprHost m_exprHost;
    private bool m_startHidden;
    private bool m_inOutermostSubtotalCell;
    private string m_renderingModelID;
    private String[] m_renderingModelIDs;
    private ReportSize m_sizeForRendering;
    internal MatrixHeading SubHeading { get; internal set; }
    internal string Size { get; internal set; }
    internal double SizeValue { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal ReportItem ReportItem { get; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal bool OwcGroupExpression { get; internal set; }
    internal bool InFirstPage { get; internal set; }
    internal BoolList FirstHeadingInstances { get; internal set; }
    internal string RenderingModelID { get; internal set; }
    internal String[] RenderingModelIDs { get; internal set; }
    internal ReportSize SizeForRendering { get; internal set; }
    internal MatrixDynamicGroupExprHost ExprHost { get; }
    internal bool InOutermostSubtotalCell { get; internal set; }
    internal MatrixHeading(int id, int idForReportItems, Matrix matrixDef);
    internal MatrixHeading get_SubHeading();
    internal void set_SubHeading(MatrixHeading value);
    internal string get_Size();
    internal void set_Size(string value);
    internal double get_SizeValue();
    internal void set_SizeValue(double value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal ReportItem get_ReportItem();
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal bool get_OwcGroupExpression();
    internal void set_OwcGroupExpression(bool value);
    internal bool get_InFirstPage();
    internal void set_InFirstPage(bool value);
    internal BoolList get_FirstHeadingInstances();
    internal void set_FirstHeadingInstances(BoolList value);
    internal string get_RenderingModelID();
    internal void set_RenderingModelID(string value);
    internal String[] get_RenderingModelIDs();
    internal void set_RenderingModelIDs(String[] value);
    internal ReportSize get_SizeForRendering();
    internal void set_SizeForRendering(ReportSize value);
    internal MatrixDynamicGroupExprHost get_ExprHost();
    internal bool get_InOutermostSubtotalCell();
    internal void set_InOutermostSubtotalCell(bool value);
    internal int DynamicInitialize(bool column, int level, InitializationContext context, Double& cornerSize);
    internal void DynamicRegisterReceiver(InitializationContext context);
    internal int StaticInitialize(InitializationContext context);
    internal void StaticRegisterReceiver(InitializationContext context);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    internal void SetExprHost(MatrixDynamicGroupExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal ReportItem GetContent(Boolean& computed);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixHeadingInstance : InstanceInfoOwner {
    private int m_uniqueName;
    private ReportItemInstance m_content;
    private MatrixHeadingInstanceList m_subHeadingInstances;
    private bool m_isSubtotal;
    private RenderingPagesRangesList m_renderingPages;
    [ReferenceAttribute]
private MatrixHeading m_matrixHeadingDef;
    private int m_headingDefIndex;
    internal int UniqueName { get; internal set; }
    internal MatrixHeading MatrixHeadingDef { get; internal set; }
    internal ReportItemInstance Content { get; internal set; }
    internal MatrixHeadingInstanceList SubHeadingInstances { get; internal set; }
    internal bool IsSubtotal { get; internal set; }
    internal MatrixHeadingInstanceInfo InstanceInfo { get; }
    internal int HeadingIndex { get; internal set; }
    internal RenderingPagesRangesList ChildrenStartAndEndPages { get; internal set; }
    internal MatrixHeadingInstance(ProcessingContext pc, int headingCellIndex, MatrixHeading matrixHeadingDef, bool isSubtotal, int reportItemDefIndex, VariantList groupExpressionValues, NonComputedUniqueNames& nonComputedUniqueNames);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal MatrixHeading get_MatrixHeadingDef();
    internal void set_MatrixHeadingDef(MatrixHeading value);
    internal ReportItemInstance get_Content();
    internal void set_Content(ReportItemInstance value);
    internal MatrixHeadingInstanceList get_SubHeadingInstances();
    internal void set_SubHeadingInstances(MatrixHeadingInstanceList value);
    internal bool get_IsSubtotal();
    internal void set_IsSubtotal(bool value);
    internal MatrixHeadingInstanceInfo get_InstanceInfo();
    internal int get_HeadingIndex();
    internal void set_HeadingIndex(int value);
    internal RenderingPagesRangesList get_ChildrenStartAndEndPages();
    internal void set_ChildrenStartAndEndPages(RenderingPagesRangesList value);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal static Declaration GetDeclaration();
    internal object Find(int index, int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    internal MatrixHeadingInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixHeadingInstanceInfo : InstanceInfo {
    private NonComputedUniqueNames m_contentUniqueNames;
    private bool m_startHidden;
    private int m_headingCellIndex;
    private int m_headingSpan;
    private object m_groupExpressionValue;
    private string m_label;
    private DataValueInstanceList m_customPropertyInstances;
    internal NonComputedUniqueNames ContentUniqueNames { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal int HeadingCellIndex { get; internal set; }
    internal int HeadingSpan { get; internal set; }
    internal object GroupExpressionValue { get; internal set; }
    internal string Label { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    internal MatrixHeadingInstanceInfo(ProcessingContext pc, int headingCellIndex, MatrixHeading matrixHeadingDef, MatrixHeadingInstance owner, bool isSubtotal, int reportItemDefIndex, VariantList groupExpressionValues, NonComputedUniqueNames& nonComputedUniqueNames);
    internal NonComputedUniqueNames get_ContentUniqueNames();
    internal void set_ContentUniqueNames(NonComputedUniqueNames value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal int get_HeadingCellIndex();
    internal void set_HeadingCellIndex(int value);
    internal int get_HeadingSpan();
    internal void set_HeadingSpan(int value);
    internal object get_GroupExpressionValue();
    internal void set_GroupExpressionValue(object value);
    internal string get_Label();
    internal void set_Label(string value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.MatrixHeadingInstanceList : ArrayList {
    private MatrixHeadingInstance m_lastHeadingInstance;
    internal MatrixHeadingInstance Item { get; }
    internal MatrixHeadingInstanceList(int capacity);
    internal MatrixHeadingInstance get_Item(int index);
    internal void Add(MatrixHeadingInstance matrixHeadingInstance, ProcessingContext pc);
    internal void SetLastHeadingSpan(int currentCellIndex, ProcessingContext pc);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixInstance : ReportItemInstance {
    private ReportItemInstance m_cornerContent;
    private MatrixHeadingInstanceList m_columnInstances;
    private MatrixHeadingInstanceList m_rowInstances;
    private MatrixCellInstancesList m_cells;
    private int m_instanceCountOfInnerRowWithPageBreak;
    private RenderingPagesRangesList m_renderingPages;
    private int m_currentCellOuterIndex;
    private int m_currentCellInnerIndex;
    private int m_currentOuterStaticIndex;
    private int m_currentInnerStaticIndex;
    private MatrixHeadingInstanceList m_innerHeadingInstanceList;
    private bool m_inFirstPage;
    private int m_extraPagesFilled;
    private int m_numberOfChildrenOnThisPage;
    private int m_startPage;
    private int m_endPage;
    internal ReportItemInstance CornerContent { get; internal set; }
    internal MatrixHeadingInstanceList ColumnInstances { get; internal set; }
    internal MatrixHeadingInstanceList RowInstances { get; internal set; }
    internal MatrixCellInstancesList Cells { get; internal set; }
    internal int CellColumnCount { get; }
    internal int CellRowCount { get; }
    internal int InstanceCountOfInnerRowWithPageBreak { get; internal set; }
    internal RenderingPagesRangesList ChildrenStartAndEndPages { get; internal set; }
    internal int CurrentCellOuterIndex { get; }
    internal int CurrentCellInnerIndex { get; }
    unknown int CurrentOuterStaticIndex {internal set; }
    unknown int CurrentInnerStaticIndex {internal set; }
    internal MatrixHeadingInstanceList InnerHeadingInstanceList { get; internal set; }
    internal bool InFirstPage { get; internal set; }
    internal int ExtraPagesFilled { get; internal set; }
    internal int NumberOfChildrenOnThisPage { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal MatrixInstanceInfo InstanceInfo { get; }
    internal Matrix MatrixDef { get; }
    internal MatrixInstance(ProcessingContext pc, Matrix reportItemDef);
    internal ReportItemInstance get_CornerContent();
    internal void set_CornerContent(ReportItemInstance value);
    internal MatrixHeadingInstanceList get_ColumnInstances();
    internal void set_ColumnInstances(MatrixHeadingInstanceList value);
    internal MatrixHeadingInstanceList get_RowInstances();
    internal void set_RowInstances(MatrixHeadingInstanceList value);
    internal MatrixCellInstancesList get_Cells();
    internal void set_Cells(MatrixCellInstancesList value);
    internal int get_CellColumnCount();
    internal int get_CellRowCount();
    internal int get_InstanceCountOfInnerRowWithPageBreak();
    internal void set_InstanceCountOfInnerRowWithPageBreak(int value);
    internal RenderingPagesRangesList get_ChildrenStartAndEndPages();
    internal void set_ChildrenStartAndEndPages(RenderingPagesRangesList value);
    internal int get_CurrentCellOuterIndex();
    internal int get_CurrentCellInnerIndex();
    internal void set_CurrentOuterStaticIndex(int value);
    internal void set_CurrentInnerStaticIndex(int value);
    internal MatrixHeadingInstanceList get_InnerHeadingInstanceList();
    internal void set_InnerHeadingInstanceList(MatrixHeadingInstanceList value);
    internal bool get_InFirstPage();
    internal void set_InFirstPage(bool value);
    internal int get_ExtraPagesFilled();
    internal void set_ExtraPagesFilled(int value);
    internal int get_NumberOfChildrenOnThisPage();
    internal void set_NumberOfChildrenOnThisPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal MatrixInstanceInfo get_InstanceInfo();
    internal Matrix get_MatrixDef();
    protected virtual object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal ReportItem GetCellReportItemDef(int cellRIIndex, Boolean& computed);
    internal MatrixCellInstance AddCell(ProcessingContext pc, NonComputedUniqueNames& cellNonComputedUniqueNames);
    internal void NewOuterCells();
    internal int GetCurrentCellRIIndex();
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixInstanceInfo : ReportItemInstanceInfo {
    private NonComputedUniqueNames m_cornerNonComputedNames;
    private string m_noRows;
    internal NonComputedUniqueNames CornerNonComputedNames { get; internal set; }
    internal string NoRows { get; internal set; }
    internal MatrixInstanceInfo(ProcessingContext pc, Matrix reportItemDef, MatrixInstance owner);
    internal MatrixInstanceInfo(Matrix reportItemDef);
    internal NonComputedUniqueNames get_CornerNonComputedNames();
    internal void set_CornerNonComputedNames(NonComputedUniqueNames value);
    internal string get_NoRows();
    internal void set_NoRows(string value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixRow : object {
    private string m_height;
    private double m_heightValue;
    private int m_numberOfMatrixCells;
    internal string Height { get; internal set; }
    internal double HeightValue { get; internal set; }
    internal int NumberOfMatrixCells { get; internal set; }
    internal string get_Height();
    internal void set_Height(string value);
    internal double get_HeightValue();
    internal void set_HeightValue(double value);
    internal int get_NumberOfMatrixCells();
    internal void set_NumberOfMatrixCells(int value);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.MatrixRowList : ArrayList {
    internal MatrixRow Item { get; }
    internal MatrixRowList(int capacity);
    internal MatrixRow get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixSubtotalCellInstance : MatrixCellInstance {
    [ReferenceAttribute]
private MatrixHeadingInstance m_subtotalHeadingInstance;
    internal MatrixHeadingInstance SubtotalHeadingInstance { get; internal set; }
    internal MatrixSubtotalCellInstance(int rowIndex, int colIndex, Matrix matrixDef, int cellDefIndex, ProcessingContext pc, NonComputedUniqueNames& nonComputedUniqueNames);
    internal MatrixHeadingInstance get_SubtotalHeadingInstance();
    internal void set_SubtotalHeadingInstance(MatrixHeadingInstance value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.MatrixSubtotalHeadingInstanceInfo : MatrixHeadingInstanceInfo {
    private Object[] m_styleAttributeValues;
    internal Object[] StyleAttributeValues { get; internal set; }
    internal MatrixSubtotalHeadingInstanceInfo(ProcessingContext pc, int headingCellIndex, MatrixHeading matrixHeadingDef, MatrixHeadingInstance owner, bool isSubtotal, int reportItemDefIndex, VariantList groupExpressionValues, NonComputedUniqueNames& nonComputedUniqueNames);
    internal Object[] get_StyleAttributeValues();
    internal void set_StyleAttributeValues(Object[] value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.Max : DataAggregate {
    private DataTypeCode m_expressionType;
    private object m_currentMax;
    private CompareInfo m_compareInfo;
    private CompareOptions m_compareOptions;
    internal Max(CompareInfo compareInfo, CompareOptions compareOptions);
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.Min : DataAggregate {
    private DataTypeCode m_expressionType;
    private object m_currentMin;
    private CompareInfo m_compareInfo;
    private CompareOptions m_compareOptions;
    internal Min(CompareInfo compareInfo, CompareOptions compareOptions);
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.MultiChart : ReportHierarchyNode {
    private Layouts m_layout;
    private int m_maxCount;
    private bool m_syncScale;
    internal Layouts Layout { get; internal set; }
    internal int MaxCount { get; internal set; }
    internal bool SyncScale { get; internal set; }
    internal MultiChart(int id, Chart chartDef);
    internal Layouts get_Layout();
    internal void set_Layout(Layouts value);
    internal int get_MaxCount();
    internal void set_MaxCount(int value);
    internal bool get_SyncScale();
    internal void set_SyncScale(bool value);
    internal void SetExprHost(MultiChartExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.MultiChartInstance : object {
    private ChartHeadingInstanceList m_columnInstances;
    private ChartHeadingInstanceList m_rowInstances;
    private ChartDataPointInstancesList m_cellDataPoints;
    private ChartHeadingInstanceList m_innerHeadingInstanceList;
    internal ChartHeadingInstanceList ColumnInstances { get; internal set; }
    internal ChartHeadingInstanceList RowInstances { get; internal set; }
    internal ChartDataPointInstancesList DataPoints { get; internal set; }
    internal ChartHeadingInstanceList InnerHeadingInstanceList { get; internal set; }
    internal MultiChartInstance(Chart reportItemDef);
    internal ChartHeadingInstanceList get_ColumnInstances();
    internal void set_ColumnInstances(ChartHeadingInstanceList value);
    internal ChartHeadingInstanceList get_RowInstances();
    internal void set_RowInstances(ChartHeadingInstanceList value);
    internal ChartDataPointInstancesList get_DataPoints();
    internal void set_DataPoints(ChartDataPointInstancesList value);
    internal ChartHeadingInstanceList get_InnerHeadingInstanceList();
    internal void set_InnerHeadingInstanceList(ChartHeadingInstanceList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.MultiChartInstanceList : ArrayList {
    internal MultiChartInstance Item { get; }
    internal MultiChartInstanceList(int capacity);
    internal MultiChartInstance get_Item(int index);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.NameValidator : object {
    private static string m_identifierStart;
    private static string m_identifierExtend;
    private static Regex m_clsIdentifierRegex;
    private Hashtable m_dictionary;
    private static NameValidator();
    protected static bool IsCLSCompliant(string name);
    protected bool IsUnique(string name);
}
internal class Microsoft.ReportingServices.ReportProcessing.NonComputedUniqueNames : object {
    private int m_uniqueName;
    private NonComputedUniqueNames[] m_childrenUniqueNames;
    internal int UniqueName { get; internal set; }
    internal NonComputedUniqueNames[] ChildrenUniqueNames { get; internal set; }
    private NonComputedUniqueNames(int uniqueName, NonComputedUniqueNames[] childrenUniqueNames);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal NonComputedUniqueNames[] get_ChildrenUniqueNames();
    internal void set_ChildrenUniqueNames(NonComputedUniqueNames[] value);
    internal static NonComputedUniqueNames[] CreateNonComputedUniqueNames(ProcessingContext pc, ReportItemCollection reportItemsDef);
    internal static NonComputedUniqueNames CreateNonComputedUniqueNames(ProcessingContext pc, ReportItem reportItemDef);
    internal static Declaration GetDeclaration();
}
internal enum Microsoft.ReportingServices.ReportProcessing.ObjectType : Enum {
    public int value__;
    public static ObjectType Report;
    public static ObjectType PageHeader;
    public static ObjectType PageFooter;
    public static ObjectType Line;
    public static ObjectType Rectangle;
    public static ObjectType Checkbox;
    public static ObjectType Textbox;
    public static ObjectType Image;
    public static ObjectType Subreport;
    public static ObjectType ActiveXControl;
    public static ObjectType List;
    public static ObjectType Matrix;
    public static ObjectType Table;
    public static ObjectType OWCChart;
    public static ObjectType GaugePanel;
    public static ObjectType GaugeCell;
    public static ObjectType Chart;
    public static ObjectType Grouping;
    public static ObjectType ReportParameter;
    public static ObjectType DataSource;
    public static ObjectType DataSet;
    public static ObjectType Field;
    public static ObjectType Query;
    public static ObjectType QueryParameter;
    public static ObjectType EmbeddedImage;
    public static ObjectType ReportItem;
    public static ObjectType Subtotal;
    public static ObjectType CodeClass;
    public static ObjectType CustomReportItem;
    public static ObjectType Tablix;
    public static ObjectType PageSection;
    public static ObjectType Page;
    public static ObjectType Paragraph;
    public static ObjectType TextRun;
}
internal class Microsoft.ReportingServices.ReportProcessing.OffsetInfo : InfoBase {
    private long m_offset;
    internal long Offset { get; internal set; }
    internal OffsetInfo(long offset);
    internal long get_Offset();
    internal void set_Offset(long value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandDocumentMapNode : object {
    private string m_label;
    private string m_id;
    private int m_level;
    public string Label { get; }
    public string Id { get; }
    public int Level { get; internal set; }
    internal OnDemandDocumentMapNode(string aLabel, string aId, int aLevel);
    public string get_Label();
    public string get_Id();
    public int get_Level();
    internal void set_Level(int value);
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandProcessingResult : object {
    private bool m_hasImageStreams;
    private ReportSnapshot m_newSnapshot;
    private ReportSnapshot m_newOdpSnapshot;
    private OnDemandProcessingManager m_chunkManager;
    private ProcessingChunkManager m_legacyChunkManager;
    private bool m_hasInteractivity;
    private ParameterInfoCollection m_parameters;
    private int m_autoRefresh;
    private ProcessingMessageList m_warnings;
    private int m_numberOfPages;
    private bool m_hasDocumentMap;
    private bool m_renderingInfoChanged;
    private IChunkFactory m_createChunkFactory;
    private RenderingInfoManager m_renderingInfoManager;
    private bool m_eventInfoChanged;
    private EventInformation m_newEventInfo;
    private PaginationMode m_updatedPaginationMode;
    private ReportProcessingFlags m_updatedReportProcessingFlags;
    private UserProfileState m_usedUserProfileState;
    public bool SnapshotChanged { get; }
    public bool HasImageStreams { get; }
    public bool HasInteractivity { get; }
    public bool HasDocumentMap { get; }
    public ParameterInfoCollection Parameters { get; }
    public int AutoRefresh { get; }
    public ProcessingMessageList Warnings { get; }
    public int NumberOfPages { get; }
    public bool EventInfoChanged { get; }
    public EventInformation NewEventInfo { get; }
    public PaginationMode UpdatedPaginationMode { get; }
    public ReportProcessingFlags UpdatedReportProcessingFlags { get; public set; }
    public UserProfileState UsedUserProfileState { get; }
    internal ReportSnapshot NewSnapshot { get; }
    internal ProcessingChunkManager LegacyChunkManager { get; }
    internal bool RenderingInfoChanged { get; }
    internal RenderingInfoManager RenderingInfoManager { get; }
    internal IChunkFactory CreateChunkFactory { get; }
    internal OnDemandProcessingResult(ReportSnapshot newOdpSnapshot, OnDemandProcessingManager chunkManager, bool newOdpSnapshotChanged, IChunkFactory createChunkFactory, ParameterInfoCollection parameters, int autoRefresh, int numberOfPages, ProcessingMessageList warnings, bool renderingInfoChanged, bool eventInfoChanged, EventInformation newEventInfo, PaginationMode updatedPaginationMode, ReportProcessingFlags updatedProcessingFlags, UserProfileState usedUserProfileState);
    internal OnDemandProcessingResult(ReportSnapshot newSnapshot, ProcessingChunkManager chunkManager, IChunkFactory createChunkFactory, ParameterInfoCollection parameters, int autoRefresh, int numberOfPages, ProcessingMessageList warnings, bool renderingInfoChanged, RenderingInfoManager renderingInfoManager, bool eventInfoChanged, EventInformation newEventInfo, PaginationMode updatedPaginationMode, ReportProcessingFlags updatedProcessingFlags, UserProfileState usedUserProfileState);
    private OnDemandProcessingResult(IChunkFactory createChunkFactory, bool hasDocumentMap, bool hasInteractivity, ParameterInfoCollection parameters, int autoRefresh, int numberOfPages, ProcessingMessageList warnings, bool hasImageStreams, bool renderingInfoChanged, RenderingInfoManager renderingInfoManager, bool eventInfoChanged, EventInformation newEventInfo, PaginationMode updatedPaginationMode, ReportProcessingFlags updatedProcessingFlags, UserProfileState usedUserProfileState);
    internal OnDemandProcessingResult(ReportSnapshot newSnapshot, ProcessingChunkManager chunkManager, ParameterInfoCollection parameters, int autoRefresh, int numberOfPages, ProcessingMessageList warnings, ReportProcessingFlags updatedProcessingFlags, UserProfileState usedUserProfileState);
    internal OnDemandProcessingResult(bool renderingInfoChanged, IChunkFactory createChunkFactory, bool hasInteractivity, RenderingInfoManager renderingInfoManager, bool eventInfoChanged, EventInformation newEventInfo, ParameterInfoCollection parameters, ProcessingMessageList warnings, int autoRefresh, int numberOfPages, PaginationMode updatedPaginationMode, ReportProcessingFlags updatedProcessingFlags, UserProfileState usedUserProfileState);
    public bool get_SnapshotChanged();
    public bool get_HasImageStreams();
    public bool get_HasInteractivity();
    public bool get_HasDocumentMap();
    public ParameterInfoCollection get_Parameters();
    public int get_AutoRefresh();
    public ProcessingMessageList get_Warnings();
    public int get_NumberOfPages();
    public bool get_EventInfoChanged();
    public EventInformation get_NewEventInfo();
    public PaginationMode get_UpdatedPaginationMode();
    public ReportProcessingFlags get_UpdatedReportProcessingFlags();
    public void set_UpdatedReportProcessingFlags(ReportProcessingFlags value);
    public UserProfileState get_UsedUserProfileState();
    internal ReportSnapshot get_NewSnapshot();
    internal ProcessingChunkManager get_LegacyChunkManager();
    internal bool get_RenderingInfoChanged();
    internal RenderingInfoManager get_RenderingInfoManager();
    internal IChunkFactory get_CreateChunkFactory();
    public void Save();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.AggregatesImpl : Aggregates {
    internal static string Name;
    private bool m_lockAdd;
    private Hashtable m_collection;
    private Hashtable m_duplicateNames;
    private OnDemandProcessingContext m_odpContext;
    private int m_id;
    public object Item { get; }
    private IErrorContext ErrorContext { get; }
    internal ICollection Objects { get; }
    public int ID { get; }
    internal AggregatesImpl(OnDemandProcessingContext odpContext);
    internal AggregatesImpl(bool lockAdd, OnDemandProcessingContext odpContext);
    public virtual object get_Item(string key);
    private IErrorContext get_ErrorContext();
    internal ICollection get_Objects();
    internal void ClearAll();
    internal void ResetAll();
    internal void Add(DataAggregateObj newObject);
    internal void Remove(DataAggregateInfo aggDef);
    internal void Set(string name, DataAggregateInfo aggregateDef, List`1<string> duplicateNames, DataAggregateObjResult aggregateResult);
    internal DataAggregateObj GetAggregateObj(string name);
    private void PopulateDuplicateNames(string name, List`1<string> duplicateNames);
    internal void ResetFieldsUsedInExpression();
    internal void AddFieldsUsedInExpression(OnDemandProcessingContext odpContext, List`1<string> fieldsUsedInValueExpression);
    public sealed virtual int get_ID();
    public sealed virtual void SetID(int id);
    public sealed virtual ObjectType GetObjectType();
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.CalculatedFieldWrapperImpl : CalculatedFieldWrapper {
    private Field m_fieldDef;
    private object m_value;
    private bool m_isValueReady;
    private bool m_isVisited;
    private ReportRuntime m_reportRT;
    private bool m_errorOccurred;
    private IErrorContext m_iErrorContext;
    private static Declaration m_declaration;
    public object Value { get; }
    internal bool ErrorOccurred { get; }
    public int Size { get; }
    internal CalculatedFieldWrapperImpl(Field fieldDef, ReportRuntime reportRT);
    private static CalculatedFieldWrapperImpl();
    public virtual object get_Value();
    internal void ResetValue();
    internal bool get_ErrorOccurred();
    private void CalculateValue();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.DataSetImpl : DataSet {
    private DataSet m_dataSet;
    private DataSetInstance m_dataSetInstance;
    public string CommandText { get; }
    public string RewrittenCommandText { get; }
    internal DataSetImpl(DataSet dataSetDef, DataSetInstance dataSetInstance);
    public virtual string get_CommandText();
    public virtual string get_RewrittenCommandText();
    internal void Update(DataSetInstance dataSetInstance);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.DataSetsImpl : DataSets {
    internal static string Name;
    private bool m_lockAdd;
    private Hashtable m_collection;
    public DataSet Item { get; }
    internal DataSetsImpl(int size);
    internal void AddOrUpdate(DataSet dataSetDef, DataSetInstance dataSetInstance);
    public virtual DataSet get_Item(string key);
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.DataSourceImpl : DataSource {
    private DataSource m_dataSource;
    public string DataSourceReference { get; }
    public string Type { get; }
    internal DataSourceImpl(DataSource dataSourceDef);
    public virtual string get_DataSourceReference();
    public virtual string get_Type();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.DataSourcesImpl : DataSources {
    internal static string Name;
    private bool m_lockAdd;
    private Hashtable m_collection;
    public DataSource Item { get; }
    internal DataSourcesImpl(int size);
    internal void Add(DataSource dataSourceDef);
    public virtual DataSource get_Item(string key);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.FieldImpl : Field {
    [StaticReferenceAttribute]
private ObjectModelImpl m_reportOM;
    private object m_value;
    private bool m_isAggregationField;
    private bool m_aggregationFieldChecked;
    private DataFieldStatus m_fieldStatus;
    private string m_exceptionMessage;
    private Hashtable m_properties;
    [StaticReferenceAttribute]
private Field m_fieldDef;
    private bool m_usedInExpression;
    private static Declaration m_declaration;
    public object Item { get; }
    public object Value { get; }
    public bool IsMissing { get; }
    public string UniqueName { get; }
    public string BackgroundColor { get; }
    public string Color { get; }
    public string FontFamily { get; }
    public string FontSize { get; }
    public string FontWeight { get; }
    public string FontStyle { get; }
    public string TextDecoration { get; }
    public string FormattedValue { get; }
    public object Key { get; }
    public int LevelNumber { get; }
    public string ParentUniqueName { get; }
    internal DataFieldStatus FieldStatus { get; }
    internal string ExceptionMessage { get; }
    internal bool IsAggregationField { get; }
    internal bool AggregationFieldChecked { get; internal set; }
    internal Hashtable Properties { get; }
    internal Field FieldDef { get; }
    internal bool UsedInExpression { get; internal set; }
    internal bool IsCalculatedField { get; }
    public int Size { get; }
    internal FieldImpl(ObjectModelImpl reportOM, object value, bool isAggregationField, Field fieldDef);
    internal FieldImpl(ObjectModelImpl reportOM, DataFieldStatus status, string exceptionMessage, Field fieldDef);
    private static FieldImpl();
    internal void UpdateValue(object value, bool isAggregationField, DataFieldStatus status, string exceptionMessage);
    internal bool ResetCalculatedField();
    public virtual object get_Properties(string key);
    public virtual object get_Value();
    public virtual bool get_IsMissing();
    public virtual string get_UniqueName();
    public virtual string get_BackgroundColor();
    public virtual string get_Color();
    public virtual string get_FontFamily();
    public virtual string get_FontSize();
    public virtual string get_FontWeight();
    public virtual string get_FontStyle();
    public virtual string get_TextDecoration();
    public virtual string get_FormattedValue();
    public virtual object get_Key();
    public virtual int get_LevelNumber();
    public virtual string get_ParentUniqueName();
    internal DataFieldStatus get_FieldStatus();
    internal string get_ExceptionMessage();
    internal bool get_IsAggregationField();
    internal bool get_AggregationFieldChecked();
    internal void set_AggregationFieldChecked(bool value);
    internal Hashtable get_Properties();
    internal Field get_FieldDef();
    internal bool get_UsedInExpression();
    internal void set_UsedInExpression(bool value);
    internal bool get_IsCalculatedField();
    internal void SetValue(object value);
    internal void SetProperty(string propertyName, object propertyValue);
    private object GetProperty(string propertyName);
    public sealed virtual void Serialize(IntermediateFormatWriter writer);
    public sealed virtual void Deserialize(IntermediateFormatReader reader);
    public sealed virtual void ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    public sealed virtual ObjectType GetObjectType();
    public static Declaration GetDeclaration();
    public sealed virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.FieldsImpl : Fields {
    internal static string Name;
    private ObjectModelImpl m_reportOM;
    private Hashtable m_nameMap;
    private Boolean[] m_fieldMissing;
    private Boolean[] m_fieldError;
    private FieldImpl[] m_collection;
    private int m_count;
    private bool m_referenced;
    private bool m_readerExtensionsSupported;
    private bool m_readerFieldProperties;
    private bool m_isAggregateRow;
    private int m_aggregationFieldCount;
    private int m_aggregationFieldCountForDetailRow;
    private bool m_noRows;
    private long m_streamOffset;
    private bool m_validAggregateRow;
    private bool m_addRowIndex;
    private bool m_needsInlineSetup;
    public Field Item { get; }
    internal FieldImpl Item { get; internal set; }
    internal int Count { get; }
    internal int CountWithRowIndex { get; }
    internal bool ReaderExtensionsSupported { get; internal set; }
    internal bool ReaderFieldProperties { get; internal set; }
    internal bool IsAggregateRow { get; internal set; }
    internal int AggregationFieldCount { get; internal set; }
    unknown int AggregationFieldCountForDetailRow {internal set; }
    internal bool ValidAggregateRow { get; internal set; }
    internal bool AddRowIndex { get; }
    internal bool NeedsInlineSetup { get; internal set; }
    internal long StreamOffset { get; }
    internal FieldsImpl(ObjectModelImpl reportOM, int size, bool addRowIndex, bool noRows);
    internal FieldsImpl(ObjectModelImpl reportOM);
    public virtual Field get_Item(string key);
    internal FieldImpl GetFieldByIndex(int index);
    private FieldImpl CheckedGetFieldByIndex(int index);
    internal FieldImpl get_Item(int index);
    internal void set_Item(int index, FieldImpl value);
    internal int get_Count();
    internal int get_CountWithRowIndex();
    internal bool get_ReaderExtensionsSupported();
    internal void set_ReaderExtensionsSupported(bool value);
    internal bool get_ReaderFieldProperties();
    internal void set_ReaderFieldProperties(bool value);
    internal bool get_IsAggregateRow();
    internal void set_IsAggregateRow(bool value);
    internal int get_AggregationFieldCount();
    internal void set_AggregationFieldCount(int value);
    internal void set_AggregationFieldCountForDetailRow(int value);
    internal bool get_ValidAggregateRow();
    internal void set_ValidAggregateRow(bool value);
    internal bool get_AddRowIndex();
    internal bool get_NeedsInlineSetup();
    internal void set_NeedsInlineSetup(bool value);
    internal long get_StreamOffset();
    internal void Add(string name, FieldImpl field);
    internal void AddRowIndexField();
    internal void SetFieldIsMissing(int index);
    internal bool IsFieldMissing(int index);
    internal void SetFieldErrorRegistered(int index);
    internal bool IsFieldErrorRegistered(int index);
    internal void NewRow();
    internal void NewRow(long streamOffset);
    internal void SetRowIndex(int rowIndex);
    internal void SetFields(FieldImpl[] fields, long streamOffset);
    internal void SetFields(FieldImpl[] fields, long streamOffset, bool isAggregateRow, int aggregationFieldCount, bool validAggregateRow);
    internal FieldImpl[] GetAndSaveFields();
    internal FieldImpl[] GetFields();
    internal int GetRowIndex();
    internal void Clone(FieldsImpl fields);
    private bool ValidateFieldCollection();
    internal void ResetFieldsUsedInExpression();
    internal void AddFieldsUsedInExpression(List`1<string> fieldsUsedInValueExpression);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.GlobalsImpl : Globals {
    internal static string Name;
    private string m_reportName;
    private int m_pageNumber;
    private int m_totalPages;
    private DateTime m_executionTime;
    private string m_reportServerUrl;
    private string m_reportFolder;
    public object Item { get; }
    public string ReportName { get; }
    public int PageNumber { get; }
    public int TotalPages { get; }
    public DateTime ExecutionTime { get; }
    public string ReportServerUrl { get; }
    public string ReportFolder { get; }
    internal GlobalsImpl(string reportName, DateTime executionTime, string reportServerUrl, string reportFolder);
    internal GlobalsImpl(string reportName, int pageNumber, int totalPages, DateTime executionTime, string reportServerUrl, string reportFolder);
    public virtual object get_Item(string key);
    public virtual string get_ReportName();
    public virtual int get_PageNumber();
    public virtual int get_TotalPages();
    public virtual DateTime get_ExecutionTime();
    public virtual string get_ReportServerUrl();
    public virtual string get_ReportFolder();
    internal void SetPageNumber(int pageNumber);
    internal void SetPageNumbers(int pageNumber, int totalPages);
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.ObjectModelImpl : OnDemandObjectModel {
    internal static string NamespacePrefix;
    private bool m_allFieldsCleared;
    private bool m_pendingFieldValueUpdate;
    private long m_lastRowOffset;
    private DataSetInstance m_lastDataSetInstance;
    private DataChunkReader m_lastDataReader;
    private FieldsImpl m_fields;
    private ParametersImpl m_parameters;
    private GlobalsImpl m_globals;
    private UserImpl m_user;
    private ReportItemsImpl m_reportItems;
    private AggregatesImpl m_aggregates;
    private DataSetsImpl m_dataSets;
    private DataSourcesImpl m_dataSources;
    private VariablesImpl m_variables;
    private OnDemandProcessingContext m_odpContext;
    private int m_id;
    public Fields Fields { get; }
    public Parameters Parameters { get; }
    public Globals Globals { get; }
    public User User { get; }
    public ReportItems ReportItems { get; }
    public Aggregates Aggregates { get; }
    public DataSets DataSets { get; }
    public DataSources DataSources { get; }
    public Variables Variables { get; }
    internal FieldsImpl FieldsImpl { get; internal set; }
    internal ParametersImpl ParametersImpl { get; internal set; }
    internal GlobalsImpl GlobalsImpl { get; internal set; }
    internal UserImpl UserImpl { get; internal set; }
    internal ReportItemsImpl ReportItemsImpl { get; internal set; }
    internal AggregatesImpl AggregatesImpl { get; internal set; }
    internal DataSetsImpl DataSetsImpl { get; internal set; }
    internal DataSourcesImpl DataSourcesImpl { get; internal set; }
    internal VariablesImpl VariablesImpl { get; internal set; }
    internal OnDemandProcessingContext OdpContext { get; }
    internal bool AllFieldsCleared { get; }
    private int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.ID { get; }
    internal ObjectModelImpl(OnDemandProcessingContext odpContext);
    internal ObjectModelImpl(ObjectModelImpl copy, OnDemandProcessingContext odpContext);
    internal void Initialize(Report report, ReportInstance reportInstance);
    private int InitOrUpdateDataSetCollection(Report report, ReportInstance reportInstance, bool initialize);
    internal void Initialize(ParameterInfoCollection parameters);
    internal void SetForNewSubReportContext(ParametersImpl parameters);
    internal void SetupFieldsForNewDataSet(DataSet dataset, bool addRowIndex, bool noRows);
    internal void ResetFieldValues();
    internal void PerformPendingFieldValueUpdate();
    internal void RegisterOnDemandFieldValueUpdate(long firstRowOffsetInScope, DataSetInstance dataSetInstance, DataChunkReader dataReader);
    internal void UpdateFieldValues(bool reuseFieldObjects, RecordRow row, DataSetInstance dataSetInstance, bool readerExtensionsSupported);
    private void CreateAndInitializeCalculatedFieldWrapper(bool readerExtensionsSupported, DataSet dataSet, int fieldIndex, Field fieldDef);
    internal void ResetFieldsUsedInExpression();
    internal void AddFieldsUsedInExpression(List`1<string> fieldsUsedInExpression);
    public virtual Fields get_Fields();
    public virtual Parameters get_Parameters();
    public virtual Globals get_Globals();
    public virtual User get_User();
    public virtual ReportItems get_ReportItems();
    public virtual Aggregates get_Aggregates();
    public virtual DataSets get_DataSets();
    public virtual DataSources get_DataSources();
    public virtual Variables get_Variables();
    internal FieldsImpl get_FieldsImpl();
    internal void set_FieldsImpl(FieldsImpl value);
    internal ParametersImpl get_ParametersImpl();
    internal void set_ParametersImpl(ParametersImpl value);
    internal GlobalsImpl get_GlobalsImpl();
    internal void set_GlobalsImpl(GlobalsImpl value);
    internal UserImpl get_UserImpl();
    internal void set_UserImpl(UserImpl value);
    internal ReportItemsImpl get_ReportItemsImpl();
    internal void set_ReportItemsImpl(ReportItemsImpl value);
    internal AggregatesImpl get_AggregatesImpl();
    internal void set_AggregatesImpl(AggregatesImpl value);
    internal DataSetsImpl get_DataSetsImpl();
    internal void set_DataSetsImpl(DataSetsImpl value);
    internal DataSourcesImpl get_DataSourcesImpl();
    internal void set_DataSourcesImpl(DataSourcesImpl value);
    internal VariablesImpl get_VariablesImpl();
    internal void set_VariablesImpl(VariablesImpl value);
    internal OnDemandProcessingContext get_OdpContext();
    internal bool get_AllFieldsCleared();
    public virtual bool InScope(string scope);
    public virtual int RecursiveLevel(string scope);
    private sealed virtual override int Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.get_ID();
    private sealed virtual override void Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.SetID(int id);
    private sealed virtual override ObjectType Microsoft.ReportingServices.OnDemandProcessing.Scalability.IStaticReferenceable.GetObjectType();
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.ParagraphImpl : Paragraph {
    private TextRunsImpl m_textRuns;
    public TextRuns TextRuns { get; }
    internal ParagraphImpl(Paragraph paragraphDef, ReportRuntime reportRT, IErrorContext iErrorContext, IScope scope);
    public virtual TextRuns get_TextRuns();
    internal void Reset();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.ParagraphsImpl : Paragraphs {
    private TextBox m_textBoxDef;
    private ParagraphImpl[] m_paragraphs;
    private ReportRuntime m_reportRT;
    private IErrorContext m_iErrorContext;
    private IScope m_scope;
    public Paragraph Item { get; }
    internal int Count { get; }
    internal ParagraphsImpl(TextBox textBoxDef, ReportRuntime reportRT, IErrorContext iErrorContext, IScope scope);
    public virtual Paragraph get_Item(int index);
    internal int get_Count();
    internal void Reset();
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.ParameterImpl : Parameter {
    private Object[] m_value;
    private String[] m_labels;
    private bool m_isMultiValue;
    private string m_prompt;
    private int m_hash;
    private bool m_isUserSupplied;
    public object Value { get; }
    public object Label { get; }
    public int Count { get; }
    public bool IsMultiValue { get; }
    internal bool IsUserSupplied { get; }
    internal string Prompt { get; }
    internal ParameterImpl(ParameterInfo parameterInfo);
    public virtual object get_Value();
    public virtual object get_Label();
    public virtual int get_Count();
    public virtual bool get_IsMultiValue();
    internal bool get_IsUserSupplied();
    internal void SetIsMultiValue(bool isMultiValue);
    internal void SetIsUserSupplied(bool isUserSupplied);
    internal void SetValues(Object[] values);
    internal Object[] GetValues();
    internal void SetLabels(String[] labels);
    internal String[] GetLabels();
    internal string get_Prompt();
    internal void SetPrompt(string prompt);
    internal bool ValuesAreEqual(ParameterImpl obj);
    internal int GetValuesHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.ParametersImpl : Parameters {
    internal static string Name;
    private Hashtable m_nameMap;
    private ParameterImpl[] m_collection;
    private int m_count;
    public Parameter Item { get; }
    internal ParameterImpl[] Collection { get; internal set; }
    internal Hashtable NameMap { get; internal set; }
    internal int Count { get; internal set; }
    internal ParametersImpl(int size);
    internal ParametersImpl(ParametersImpl copy);
    public virtual Parameter get_Item(string key);
    internal ParameterImpl[] get_Collection();
    internal void set_Collection(ParameterImpl[] value);
    internal Hashtable get_NameMap();
    internal void set_NameMap(Hashtable value);
    internal int get_Count();
    internal void set_Count(int value);
    internal void Add(string name, ParameterImpl parameter);
    internal void Clear();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.ReportItemImpl : ReportItem {
    internal ReportItem m_item;
    internal ReportRuntime m_reportRT;
    internal IErrorContext m_iErrorContext;
    internal IScope m_scope;
    internal string Name { get; }
    unknown IScope Scope {internal set; }
    internal ReportItemImpl(ReportItem itemDef, ReportRuntime reportRT, IErrorContext iErrorContext);
    internal string get_Name();
    internal void set_Scope(IScope value);
    internal abstract virtual void Reset();
    internal abstract virtual void Reset(VariantResult aResult);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.ReportItemsImpl : ReportItems {
    internal static string Name;
    private bool m_lockAdd;
    private Hashtable m_collection;
    private bool m_specialMode;
    private string m_specialModeIndex;
    public ReportItem Item { get; }
    unknown bool SpecialMode {internal set; }
    internal ReportItemsImpl(bool lockAdd);
    public virtual ReportItem get_Item(string key);
    internal void set_SpecialMode(bool value);
    internal void ResetAll();
    internal void ResetAll(VariantResult aResult);
    internal void Add(ReportItemImpl reportItem);
    internal void AddAll(ReportItemsImpl reportItems);
    internal ReportItem GetReportItem(string aName);
    internal string GetSpecialModeIndex();
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.TextBoxImpl : ReportItemImpl {
    private TextBox m_textBox;
    private VariantResult m_result;
    private bool m_isValueReady;
    private bool m_isVisited;
    private List`1<string> m_fieldsUsedInValueExpression;
    private ParagraphsImpl m_paragraphs;
    public object Value { get; }
    internal Paragraphs Paragraphs { get; }
    internal TextBoxImpl(TextBox itemDef, ReportRuntime reportRT, IErrorContext iErrorContext);
    public virtual object get_Value();
    internal Paragraphs get_Paragraphs();
    private bool IsTextboxInScope();
    internal VariantResult GetResult(IReportScopeInstance romInstance, bool calledFromValue);
    internal List`1<string> GetFieldsUsedInValueExpression(IReportScopeInstance romInstance);
    internal virtual void Reset();
    internal virtual void Reset(VariantResult value);
    internal void SetResult(VariantResult result);
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.TextRunImpl : TextRun {
    private TextBox m_textBoxDef;
    private TextRun m_textRunDef;
    private ReportRuntime m_reportRT;
    private IErrorContext m_iErrorContext;
    private VariantResult m_result;
    private bool m_isValueReady;
    private bool m_isVisited;
    private IScope m_scope;
    private List`1<string> m_fieldsUsedInValueExpression;
    public object Value { get; }
    internal TextRun TextRunDef { get; }
    internal TextRunImpl(TextBox textBoxDef, TextRun textRunDef, ReportRuntime reportRT, IErrorContext iErrorContext, IScope scope);
    public virtual object get_Value();
    internal TextRun get_TextRunDef();
    internal VariantResult GetResult(IReportScopeInstance romInstance);
    internal List`1<string> GetFieldsUsedInValueExpression(IReportScopeInstance romInstance);
    internal void MergeFieldsUsedInValueExpression(Dictionary`2<string, bool> usedFields);
    internal void Reset();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.TextRunsImpl : TextRuns {
    private TextBox m_textBoxDef;
    private Paragraph m_paragraphDef;
    private TextRunImpl[] m_textRuns;
    private ReportRuntime m_reportRT;
    private IErrorContext m_iErrorContext;
    private IScope m_scope;
    public TextRun Item { get; }
    internal int Count { get; }
    internal TextRunsImpl(Paragraph paragraphDef, ReportRuntime reportRT, IErrorContext iErrorContext, IScope scope);
    public virtual TextRun get_Item(int index);
    internal int get_Count();
    internal void Reset();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.UserImpl : User {
    internal static string Name;
    private string m_userID;
    private string m_language;
    private UserProfileState m_allowUserProfileState;
    private UserProfileState m_hasUserProfileState;
    private UserProfileState m_location;
    private bool m_indirectQueryReference;
    private object m_locationUpdateLock;
    private OnDemandProcessingContext m_odpContext;
    public object Item { get; }
    public string UserID { get; }
    public string Language { get; }
    internal UserProfileState UserProfileLocation { get; }
    internal UserProfileState HasUserProfileState { get; }
    internal bool IndirectQueryReference { get; internal set; }
    internal UserImpl(string userID, string language, UserProfileState allowUserProfileState, OnDemandProcessingContext odpContext);
    internal UserImpl(UserImpl copy, OnDemandProcessingContext odpContext);
    public virtual object get_Item(string key);
    public virtual string get_UserID();
    public virtual string get_Language();
    internal UserProfileState get_UserProfileLocation();
    internal UserProfileState get_HasUserProfileState();
    internal bool get_IndirectQueryReference();
    internal void set_IndirectQueryReference(bool value);
    internal IDisposable UpdateUserProfileLocation(UserProfileState newLocation);
    internal UserProfileState UpdateUserProfileLocationWithoutLocking(UserProfileState newLocation);
    private void UpdateUserProfileState();
}
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.VariableImpl : Variable {
    private Variable m_variableDef;
    private IndexedExprHost m_exprHost;
    private ObjectType m_parentObjectType;
    private string m_parentObjectName;
    private ReportRuntime m_reportRT;
    private IScope m_scope;
    private object m_value;
    private VariantResult m_result;
    private bool m_isValueReady;
    private bool m_isVisited;
    public object Value { get; }
    unknown IScope Scope {internal set; }
    internal string Name { get; internal set; }
    private bool VariableInScope { get; }
    private bool IsReportVariable { get; }
    internal VariableImpl(Variable variable, IndexedExprHost variableValuesHost, ObjectType parentObjectType, string parentObjectName, ReportRuntime reportRT);
    public virtual object get_Value();
    internal void set_Scope(IScope value);
    internal string get_Name();
    internal void set_Name(string value);
    private bool get_VariableInScope();
    private bool get_IsReportVariable();
    internal void SetResult(VariantResult result);
    internal void SetValue(object value);
    internal void Reset();
    internal object GetResult();
    private object GetResult(bool fromValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OnDemandReportObjectModel.VariablesImpl : Variables {
    internal static string Name;
    private bool m_lockAdd;
    private Hashtable m_collection;
    public Variable Item { get; }
    internal Hashtable Collection { get; internal set; }
    internal VariablesImpl(bool lockAdd);
    public virtual Variable get_Item(string key);
    internal void Add(VariableImpl variable);
    internal Hashtable get_Collection();
    internal void set_Collection(Hashtable value);
    internal void ResetAll();
}
internal class Microsoft.ReportingServices.ReportProcessing.OWCChart : DataRegion {
    private ChartColumnList m_chartData;
    private string m_chartDefinition;
    private RunningValueInfoList m_detailRunningValues;
    private RunningValueInfoList m_runningValues;
    private OWCChartExprHost m_exprHost;
    internal ObjectType ObjectType { get; }
    internal ChartColumnList ChartData { get; internal set; }
    internal string ChartDefinition { get; internal set; }
    internal RunningValueInfoList DetailRunningValues { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal OWCChartExprHost OWCChartExprHost { get; }
    protected DataRegionExprHost DataRegionExprHost { get; }
    internal OWCChart(ReportItem parent);
    internal OWCChart(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal ChartColumnList get_ChartData();
    internal void set_ChartData(ChartColumnList value);
    internal string get_ChartDefinition();
    internal void set_ChartDefinition(string value);
    internal RunningValueInfoList get_DetailRunningValues();
    internal void set_DetailRunningValues(RunningValueInfoList value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal OWCChartExprHost get_OWCChartExprHost();
    protected virtual DataRegionExprHost get_DataRegionExprHost();
    internal virtual bool Initialize(InitializationContext context);
    private void InternalInitialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.OWCChartInstance : ReportItemInstance {
    private int m_startPage;
    private int m_endPage;
    internal OWCChartInstanceInfo InstanceInfo { get; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal OWCChartInstance(ProcessingContext pc, OWCChart reportItemDef);
    internal OWCChartInstance(ProcessingContext pc, OWCChart reportItemDef, VariantList[] chartData);
    internal OWCChartInstanceInfo get_InstanceInfo();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.OWCChartInstanceInfo : ReportItemInstanceInfo {
    private VariantList[] m_chartData;
    private string m_noRows;
    internal VariantList Item { get; }
    internal VariantList[] ChartData { get; internal set; }
    internal int Size { get; }
    internal string NoRows { get; internal set; }
    internal OWCChartInstanceInfo(ProcessingContext pc, OWCChart reportItemDef, OWCChartInstance owner);
    internal OWCChartInstanceInfo(ProcessingContext pc, OWCChart reportItemDef, OWCChartInstance owner, VariantList[] chartData);
    internal OWCChartInstanceInfo(OWCChart reportItemDef);
    internal VariantList get_Item(int index);
    internal VariantList[] get_ChartData();
    internal void set_ChartData(VariantList[] value);
    internal int get_Size();
    internal string get_NoRows();
    internal void set_NoRows(string value);
    internal void ChartDataXML(IChartStream chartStream);
    internal static Declaration GetDeclaration();
}
internal enum Microsoft.ReportingServices.ReportProcessing.PageBreakStates : Enum {
    public int value__;
    public static PageBreakStates Unknown;
    public static PageBreakStates CanIgnore;
    public static PageBreakStates CannotIgnore;
}
internal class Microsoft.ReportingServices.ReportProcessing.PageProperties : object {
    protected double m_pageHeight;
    protected double m_pageWidth;
    protected double m_topMargin;
    protected double m_bottomMargin;
    protected double m_leftMargin;
    protected double m_rightMargin;
    public double PageHeight { get; }
    public double PageWidth { get; }
    public double TopMargin { get; }
    public double BottomMargin { get; }
    public double LeftMargin { get; }
    public double RightMargin { get; }
    public PageProperties(double pageHeight, double pageWidth, double topMargin, double bottomMargin, double leftMargin, double rightMargin);
    public double get_PageHeight();
    public double get_PageWidth();
    public double get_TopMargin();
    public double get_BottomMargin();
    public double get_LeftMargin();
    public double get_RightMargin();
}
internal class Microsoft.ReportingServices.ReportProcessing.PageSection : ReportItem {
    private bool m_printOnFirstPage;
    private bool m_printOnLastPage;
    private ReportItemCollection m_reportItems;
    private bool m_postProcessEvaluate;
    private bool m_isHeader;
    private StyleExprHost m_exprHost;
    internal ObjectType ObjectType { get; }
    internal bool PrintOnFirstPage { get; internal set; }
    internal bool PrintOnLastPage { get; internal set; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal bool PostProcessEvaluate { get; internal set; }
    internal PageSection(bool isHeader, int id, int idForReportItems, Report report);
    internal PageSection(bool isHeader, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal bool get_PrintOnFirstPage();
    internal void set_PrintOnFirstPage(bool value);
    internal bool get_PrintOnLastPage();
    internal void set_PrintOnLastPage(bool value);
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal bool get_PostProcessEvaluate();
    internal void set_PostProcessEvaluate(bool value);
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.PageSectionInstance : ReportItemInstance {
    private int m_pageNumber;
    private ReportItemColInstance m_reportItemColInstance;
    internal int PageNumber { get; internal set; }
    internal ReportItemColInstance ReportItemColInstance { get; internal set; }
    internal PageSectionInstance(ProcessingContext pc, int pageNumber, PageSection reportItemDef);
    internal int get_PageNumber();
    internal void set_PageNumber(int value);
    internal ReportItemColInstance get_ReportItemColInstance();
    internal void set_ReportItemColInstance(ReportItemColInstance value);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.IIndexInto.GetChildAt(int index, NonComputedUniqueNames& nonCompNames);
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.PageSectionInstanceInfo : ReportItemInstanceInfo {
    internal PageSectionInstanceInfo(ProcessingContext pc, PageSection reportItemDef, PageSectionInstance owner);
    internal PageSectionInstanceInfo(PageSection reportItemDef);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.PaginationInfo : object {
    private ArrayList m_pages;
    private int m_totalPageNumber;
    internal int TotalPageNumber { get; internal set; }
    internal Page Item { get; internal set; }
    internal int CurrentPageCount { get; }
    internal int get_TotalPageNumber();
    internal void set_TotalPageNumber(int value);
    internal Page get_Item(int pageNumber);
    internal void set_Item(int pageNumber, Page value);
    internal int get_CurrentPageCount();
    internal void AddPage(Page page);
    internal void Clear();
    internal void InsertPage(int pageNumber, Page page);
    internal void RemovePage(int pageNumber);
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.ReportProcessing.PaginationMode : Enum {
    public int value__;
    public static PaginationMode Progressive;
    public static PaginationMode TotalPages;
    public static PaginationMode Estimate;
}
internal class Microsoft.ReportingServices.ReportProcessing.PairObj`2 : object {
    internal T First;
    internal U Second;
    internal PairObj`2(T first, U second);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ParameterBase : object {
    internal static string NameXmlElement;
    internal static string TypeXmlElement;
    internal static string NullableXmlElement;
    internal static string AllowBlankXmlElement;
    internal static string MultiValueXmlElement;
    internal static string PromptXmlElement;
    internal static string PromptUserXmlElement;
    internal static string ValueXmlElement;
    internal static string UsedInQueryXmlElement;
    internal static string DefaultValuesXmlElement;
    internal static string ValidValuesXmlElement;
    internal static string StateXmlElement;
    private string m_name;
    private DataType m_dataType;
    private bool m_nullable;
    private bool m_promptUser;
    private bool m_usedInQuery;
    private bool m_allowBlank;
    private bool m_multiValue;
    private Object[] m_defaultValues;
    private UsedInQueryType m_usedInQueryAsDefined;
    private Hashtable m_dependencies;
    private static Declaration m_Declaration;
    public string Name { get; public set; }
    public DataType DataType { get; public set; }
    public bool Nullable { get; public set; }
    public string Prompt { get; public set; }
    public bool PromptUser { get; public set; }
    public bool AllowBlank { get; public set; }
    public bool MultiValue { get; public set; }
    public Object[] DefaultValues { get; public set; }
    internal Hashtable Dependencies { get; internal set; }
    public bool UsedInQuery { get; public set; }
    internal UsedInQueryType UsedInQueryAsDefined { get; }
    internal ParameterBase(ParameterBase source);
    private static ParameterBase();
    internal static Declaration GetDeclaration();
    internal static Declaration GetNewDeclaration();
    internal void Serialize(IntermediateFormatWriter writer);
    internal void Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    public string get_Name();
    public void set_Name(string value);
    public DataType get_DataType();
    public void set_DataType(DataType value);
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public abstract virtual string get_Prompt();
    public abstract virtual void set_Prompt(string value);
    public bool get_PromptUser();
    public void set_PromptUser(bool value);
    public bool get_AllowBlank();
    public void set_AllowBlank(bool value);
    public bool get_MultiValue();
    public void set_MultiValue(bool value);
    public Object[] get_DefaultValues();
    public void set_DefaultValues(Object[] value);
    internal Hashtable get_Dependencies();
    internal void set_Dependencies(Hashtable value);
    public bool get_UsedInQuery();
    public void set_UsedInQuery(bool value);
    internal UsedInQueryType get_UsedInQueryAsDefined();
    internal bool ValidateValueForNull(object newValue, ErrorContext errorContext, string parameterValueProperty);
    internal bool ValidateValueForBlank(object newValue, ErrorContext errorContext, string parameterValueProperty);
    internal void ValidateValue(object newValue, ErrorContext errorContext, string parameterValueProperty);
    internal virtual void Parse(string name, List`1<string> defaultValues, string type, string nullable, object prompt, string promptUser, string allowBlank, string multiValue, string usedInQuery, bool hidden, ErrorContext errorContext, CultureInfo language);
    internal static bool Cast(object oldValue, DataType oldType, Object& newValue, DataType newType, CultureInfo language);
    public static bool CastFromString(string oldString, Object& newValue, DataType newType, CultureInfo language);
    internal static bool CastFromBoolean(bool oldBoolean, Object& newValue, DataType newType, CultureInfo language);
    internal static bool CastFromDouble(double oldDouble, Object& newValue, DataType newType, CultureInfo language);
    internal static bool CastFromInteger(int oldInteger, Object& newValue, DataType newType, CultureInfo language);
    internal static bool CastFromDateTime(DateTime oldDateTime, Object& newValue, DataType newType, CultureInfo language);
    internal static bool CastFromDateTimeOffset(DateTimeOffset oldDateTime, Object& newValue, DataType newType, CultureInfo language);
    public static bool ParameterValuesEqual(object o1, object o2);
}
internal class Microsoft.ReportingServices.ReportProcessing.ParameterDataSource : object {
    private int m_dataSourceIndex;
    private int m_dataSetIndex;
    private int m_valueFieldIndex;
    private int m_labelFieldIndex;
    public int DataSourceIndex { get; public set; }
    public int DataSetIndex { get; public set; }
    public int ValueFieldIndex { get; public set; }
    public int LabelFieldIndex { get; public set; }
    internal ParameterDataSource(int dataSourceIndex, int dataSetIndex);
    public sealed virtual int get_DataSourceIndex();
    public void set_DataSourceIndex(int value);
    public sealed virtual int get_DataSetIndex();
    public void set_DataSetIndex(int value);
    public sealed virtual int get_ValueFieldIndex();
    public void set_ValueFieldIndex(int value);
    public sealed virtual int get_LabelFieldIndex();
    public void set_LabelFieldIndex(int value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ParameterDef : ParameterBase {
    private ParameterDataSource m_validValuesDataSource;
    private ExpressionInfoList m_validValuesValueExpressions;
    private ExpressionInfoList m_validValuesLabelExpressions;
    private ParameterDataSource m_defaultDataSource;
    private ExpressionInfoList m_defaultExpressions;
    private ParameterDefList m_dependencyList;
    private int m_exprHostID;
    private string m_prompt;
    private ReportParamExprHost m_exprHost;
    internal ExpressionInfoList DefaultExpressions { get; internal set; }
    internal ParameterDataSource ValidValuesDataSource { get; internal set; }
    internal ExpressionInfoList ValidValuesValueExpressions { get; internal set; }
    internal ExpressionInfoList ValidValuesLabelExpressions { get; internal set; }
    internal ParameterDataSource DefaultDataSource { get; internal set; }
    internal ParameterDefList DependencyList { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal ReportParamExprHost ExprHost { get; }
    public string Prompt { get; public set; }
    private int Microsoft.ReportingServices.ReportProcessing.IParameterDef.DefaultValuesExpressionCount { get; }
    private int Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidValuesValueExpressionCount { get; }
    private int Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidValuesLabelExpressionCount { get; }
    private string Microsoft.ReportingServices.ReportProcessing.IParameterDef.Name { get; }
    private DataType Microsoft.ReportingServices.ReportProcessing.IParameterDef.DataType { get; }
    private bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.MultiValue { get; }
    private IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.DefaultDataSource { get; }
    private IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidValuesDataSource { get; }
    internal ExpressionInfoList get_DefaultExpressions();
    internal void set_DefaultExpressions(ExpressionInfoList value);
    internal ParameterDataSource get_ValidValuesDataSource();
    internal void set_ValidValuesDataSource(ParameterDataSource value);
    internal ExpressionInfoList get_ValidValuesValueExpressions();
    internal void set_ValidValuesValueExpressions(ExpressionInfoList value);
    internal ExpressionInfoList get_ValidValuesLabelExpressions();
    internal void set_ValidValuesLabelExpressions(ExpressionInfoList value);
    internal ParameterDataSource get_DefaultDataSource();
    internal void set_DefaultDataSource(ParameterDataSource value);
    internal ParameterDefList get_DependencyList();
    internal void set_DependencyList(ParameterDefList value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal ReportParamExprHost get_ExprHost();
    public virtual string get_Prompt();
    public virtual void set_Prompt(string value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_DefaultValuesExpressionCount();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_ValidValuesValueExpressionCount();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_ValidValuesLabelExpressionCount();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasDefaultValuesExpressions();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasValidValuesValueExpressions();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasValidValuesLabelExpressions();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasDefaultValuesDataSource();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.HasValidValuesDataSource();
    private sealed virtual override string Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_Name();
    private sealed virtual override DataType Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_DataType();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidateValueForNull(object newValue, ErrorContext errorContext, string parameterValueProperty);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.ValidateValueForBlank(object newValue, ErrorContext errorContext, string parameterValueProperty);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_MultiValue();
    private sealed virtual override IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_DefaultDataSource();
    private sealed virtual override IParameterDataSource Microsoft.ReportingServices.ReportProcessing.IParameterDef.get_ValidValuesDataSource();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(ReportExprHost reportExprHost, ObjectModel reportObjectModel);
    internal void Parse(string name, List`1<string> defaultValues, string type, string nullable, string prompt, string promptUser, string allowBlank, string multiValue, string usedInQuery, bool hidden, ErrorContext errorContext, CultureInfo language);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ParameterDefList : ArrayList {
    internal ParameterDef Item { get; }
    internal ParameterDefList(int capacity);
    internal ParameterDef get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ParameterInfo : ParameterBase {
    internal static string ParametersXmlElement;
    internal static string ParameterXmlElement;
    internal static string ValidValueXmlElement;
    internal static string LabelXmlElement;
    internal static string ValuesXmlElement;
    internal static string DynamicValidValuesXmlElement;
    internal static string DynamicDefaultValueXmlElement;
    internal static string DynamicPromptXmlElement;
    internal static string DependenciesXmlElement;
    internal static string DependencyXmlElement;
    internal static string UserProfileStateElement;
    internal static string UseExplicitDefaultValueXmlElement;
    internal static string ValuesChangedXmlElement;
    internal static string IsUserSuppliedXmlElement;
    internal static string NilXmlAttribute;
    private Object[] m_values;
    private String[] m_labels;
    private bool m_isUserSupplied;
    private bool m_dynamicValidValues;
    private bool m_dynamicDefaultValue;
    private bool m_dynamicPrompt;
    private string m_prompt;
    private ParameterInfoCollection m_dependencyList;
    private ValidValueList m_validValues;
    private Int32[] m_dependencyIndexList;
    private bool m_valuesChanged;
    private ReportParameterState m_state;
    private bool m_othersDependOnMe;
    private bool m_useExplicitDefaultValue;
    private int m_indexInCollection;
    private static Declaration m_Declaration;
    public Object[] Values { get; public set; }
    public String[] Labels { get; public set; }
    public ValidValueList ValidValues { get; public set; }
    public bool DynamicValidValues { get; public set; }
    public bool DynamicDefaultValue { get; public set; }
    public bool UseExplicitDefaultValue { get; public set; }
    public ParameterInfoCollection DependencyList { get; public set; }
    internal bool IsUserSupplied { get; internal set; }
    internal bool ValuesChanged { get; internal set; }
    public string Prompt { get; public set; }
    public bool DynamicPrompt { get; public set; }
    public ReportParameterState State { get; public set; }
    public bool OthersDependOnMe { get; public set; }
    public bool IsVisible { get; }
    internal int IndexInCollection { get; internal set; }
    internal ParameterInfo(ParameterInfo source);
    internal ParameterInfo(ParameterBase source);
    private static ParameterInfo();
    internal static Declaration GetDeclaration();
    internal static Declaration GetNewDeclaration();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
    internal void ResolveDependencies(ParameterInfoCollection containingCollection);
    public Object[] get_Values();
    public void set_Values(Object[] value);
    public String[] get_Labels();
    public void set_Labels(String[] value);
    public ValidValueList get_ValidValues();
    public void set_ValidValues(ValidValueList value);
    public bool get_DynamicValidValues();
    public void set_DynamicValidValues(bool value);
    public bool get_DynamicDefaultValue();
    public void set_DynamicDefaultValue(bool value);
    public bool get_UseExplicitDefaultValue();
    public void set_UseExplicitDefaultValue(bool value);
    public ParameterInfoCollection get_DependencyList();
    public void set_DependencyList(ParameterInfoCollection value);
    internal bool get_IsUserSupplied();
    internal void set_IsUserSupplied(bool value);
    internal bool get_ValuesChanged();
    internal void set_ValuesChanged(bool value);
    public virtual string get_Prompt();
    public virtual void set_Prompt(string value);
    public bool get_DynamicPrompt();
    public void set_DynamicPrompt(bool value);
    public ReportParameterState get_State();
    public void set_State(ReportParameterState value);
    public bool get_OthersDependOnMe();
    public void set_OthersDependOnMe(bool value);
    public bool get_IsVisible();
    internal int get_IndexInCollection();
    internal void set_IndexInCollection(int value);
    public bool AllDependenciesSpecified();
    public bool ValueIsValid();
    internal void StoreLabels();
    internal void EnsureLabelsAreGenerated();
    internal void AddValidValue(object paramValue, string paramLabel);
    internal void AddValidValue(string paramValue, string paramLabel, ErrorContext errorContext, CultureInfo language);
    internal void AddValidValueExplicit(object paramValue, string paramLabel);
    internal void Parse(string name, List`1<string> defaultValues, string type, string nullable, string prompt, bool promptIsExpr, string promptUser, string allowBlank, string multiValue, ValidValueList validValues, string usedInQuery, bool hidden, ErrorContext errorContext, CultureInfo language);
    internal void Parse(string name, string type, string nullable, string allowBlank, string multiValue, string usedInQuery, string state, string dynamicPrompt, string prompt, string promptUser, ParameterInfoCollection dependencies, string dynamicValidValues, ValidValueList validValues, string dynamicDefaultValue, List`1<string> defaultValues, List`1<string> values, String[] labels, CultureInfo language);
    internal void WriteToXml(XmlTextWriter xml, bool writeTransientState);
    private void WriteValueToXml(XmlTextWriter xml, object val);
    internal void WriteNameValueToXml(XmlTextWriter xml);
    internal static ParameterInfo Cast(ParameterInfo oldValue, ParameterInfo newType, CultureInfo language);
    internal static ParameterInfo Cast(ParameterInfo oldValue, ParameterInfo newType, CultureInfo language, Boolean& metaChanges);
    public static string CastToString(object val, DataType type, CultureInfo language);
    public string CastToString(object val, CultureInfo language);
    internal static string CastValueToLabelString(object val, CultureInfo language);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ParameterInfoCollection : ArrayList {
    private UserProfileState m_userProfileState;
    private bool m_validated;
    private static Declaration m_Declaration;
    public ParameterInfo Item { get; public set; }
    public ParameterInfo Item { get; }
    public NameValueCollection AsNameValueCollectionInUserCulture { get; }
    public int VisibleCount { get; }
    public bool Validated { get; public set; }
    public bool IsAnyParameterDynamic { get; }
    public UserProfileState UserProfileState { get; public set; }
    internal ParameterInfoCollection(int capacity);
    private static ParameterInfoCollection();
    public ParameterInfo get_Item(int index);
    public void set_Item(int index, ParameterInfo value);
    public ParameterInfo get_Item(string name);
    public void Add(ParameterInfo parameterInfo);
    public void CopyTo(ParameterInfoCollection target);
    public NameValueCollection get_AsNameValueCollectionInUserCulture();
    public int get_VisibleCount();
    public string GetParameterWithNoValue();
    public bool ValuesAreValid(Boolean& satisfiable, bool throwOnUnsatisfiable, Boolean& hasMissingValidValue);
    public bool ValuesAreValid();
    public bool ValuesAreValid(Boolean& hasMissingValidValue);
    public bool ValuesAreValid(Boolean& satisfiable, bool throwOnUnsatisfiable);
    public bool NeedPrompts();
    public void ThrowIfNotValid();
    public void ValidateInputValues(ParamValues inputValues, bool isSnapshotExecution);
    public string ToUrl();
    public static string ToUrl(NameValueCollection coll);
    private static void EncodeSingleParamForUrl(StringBuilder url, string name, object val);
    private static void EncodeForUrlAndAppend(StringBuilder builder, string unencodedStr);
    public string ToXmlWithTransientState();
    public string ToXml(bool usedInQueryValuesOnly);
    private string ToXml(bool usedInQueryValuesOnly, bool writeTransientState);
    public static ParameterInfoCollection DecodeFromXml(string paramString);
    public static ParameterInfoCollection DecodeFromNameValueCollectionAndUserCulture(NameValueCollection collection);
    private static void ParseOneParameter(XmlReader sourceXmlReader, ParameterInfoCollection result, CultureInfo culture);
    private static ParameterInfoCollection ParseDependencies(ParameterInfoCollection parameters, List`1<string> dependencies);
    private static List`1<string> ParseXmlList(XmlReader sourceXmlReader, string expectedElement);
    private static ValidValueList ParseValidValues(XmlReader sourceXmlReader);
    private static void ParseValueLabel(XmlReader sourceXmlReader, String& val, String& label);
    public static ParameterInfoCollection Match(ParameterInfoCollection oldParameters, ParameterInfoCollection newParameters);
    public static ParameterInfoCollection Match(ParameterInfoCollection oldParameters, ParameterInfoCollection newParameters, Boolean& metaChanges);
    public static ParameterInfoCollection Combine(ParameterInfoCollection oldParameters, ParameterInfoCollection newParameters, bool checkReadOnly, bool ignoreNewQueryParams, bool isParameterDefinitionUpdate);
    public static ParameterInfoCollection Combine(ParameterInfoCollection oldParameters, ParameterInfoCollection newParameters, bool checkReadOnly, bool ignoreNewQueryParams, bool isParameterDefinitionUpdate, CultureInfo culture);
    private void FixupDependencies();
    public void SameParameters(ParameterInfoCollection otherParameters, Boolean& sameQueryParameters, Boolean& sameSnapshotParameters);
    private bool UpdateParameterFlagsAndBreak(bool usedInQuery, Boolean& sameQueryParameters, Boolean& sameSnapshotParameters);
    private static bool SameParameterValues(ParameterInfo thisParameter, ParameterInfo otherParameter);
    private bool SameReportParameters(NameValueCollection otherParams, bool ignoreQueryParams);
    public bool SameSnapshotParameters(NameValueCollection otherParams);
    public bool SameReportParameters(string passedInParameters);
    internal void StoreLabels();
    public bool get_Validated();
    public void set_Validated(bool value);
    public bool get_IsAnyParameterDynamic();
    public UserProfileState get_UserProfileState();
    public void set_UserProfileState(UserProfileState value);
    internal static Declaration GetDeclaration();
    public ParameterInfoCollection GetQueryParameters();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
}
internal class Microsoft.ReportingServices.ReportProcessing.ParameterNameValidator : NameValidator {
    internal bool Validate(string parameterName, ObjectType objectType, string objectName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportProcessing.ParameterValue : object {
    private string m_name;
    private ExpressionInfo m_value;
    private ExpressionInfo m_omit;
    private int m_exprHostID;
    private ParamExprHost m_exprHost;
    internal string Name { get; internal set; }
    internal ExpressionInfo Value { get; internal set; }
    internal ExpressionInfo Omit { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal ParamExprHost ExprHost { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal ExpressionInfo get_Omit();
    internal void set_Omit(ExpressionInfo value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal ParamExprHost get_ExprHost();
    internal void set_ExprHost(ParamExprHost value);
    internal void Initialize(InitializationContext context, bool queryParam);
    internal void SetExprHost(IList`1<ParamExprHost> paramExprHosts, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ParameterValueList : ArrayList {
    internal ParameterValue Item { get; }
    internal ParameterValueList(int capacity);
    internal ParameterValue get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ParameterValueResult : ValueType {
    internal bool ErrorOccurred;
    internal object Value;
    internal DataType Type;
}
internal class Microsoft.ReportingServices.ReportProcessing.ParamValue : object {
    internal static string _ParameterValue;
    private static string _Name;
    private static string _Value;
    private static string _Field;
    private ParamValues m_parent;
    private string m_name;
    private string m_value;
    private string m_fieldName;
    public string Name { get; }
    public string Value { get; }
    public string FieldName { get; }
    public bool UseField { get; }
    public bool UseValue { get; }
    public string FieldValue { get; }
    public ParamValue(XmlReader reader, ParamValues parent);
    public string get_Name();
    public string get_Value();
    public string get_FieldName();
    public bool get_UseField();
    public bool get_UseValue();
    public bool IsValid();
    public string get_FieldValue();
    internal void ToXml(XmlTextWriter writer, bool outputFieldElements);
    internal void ToOldParameterXml(XmlTextWriter writer);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ParamValueList : ArrayList {
    internal ParamValue Item { get; }
    internal ParamValueList(int capacity);
    internal ParamValue get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ParamValues : Hashtable {
    private static string _ParameterValues;
    internal Hashtable m_fields;
    public ParamValueList Item { get; }
    public Hashtable Fields { get; }
    public String[] FieldKeys { get; }
    public NameValueCollection AsNameValueCollection { get; }
    public ParamValueList get_Item(string name);
    public Hashtable get_Fields();
    public String[] get_FieldKeys();
    internal void AddField(string fieldName);
    internal string GetFieldValue(string fieldName);
    internal void AddFieldValue(string fieldName, string fieldValue);
    public void FromXml(string xml);
    public string ToXml(bool outputFieldElements);
    public string ToOldParameterXml();
    public NameValueCollection get_AsNameValueCollection();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.ArrayOfReferencesAttribute : Attribute {
}
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.Declaration : object {
    private ObjectType m_baseType;
    private MemberInfoList m_members;
    internal ObjectType BaseType { get; }
    internal MemberInfoList Members { get; }
    internal Declaration(ObjectType baseType, MemberInfoList members);
    internal ObjectType get_BaseType();
    internal MemberInfoList get_Members();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.DeclarationList : object {
    private Declaration[] m_declarations;
    internal static DeclarationList Current;
    internal int Count { get; }
    internal Declaration Item { get; internal set; }
    private Declaration Item { get; private set; }
    private static DeclarationList();
    internal int get_Count();
    internal Declaration get_Item(ObjectType objectType);
    internal void set_Item(ObjectType objectType, Declaration value);
    private Declaration get_Item(int index);
    private void set_Item(int index, Declaration value);
    internal bool ContainsKey(ObjectType objectType);
    private static DeclarationList CreateCurrentDeclarations();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.HashtableOfReferencesAttribute : Attribute {
}
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatReader : object {
    private ReportServerBinaryReader m_reader;
    private Hashtable m_definitionObjects;
    private Hashtable m_instanceObjects;
    private Hashtable m_parametersDef;
    private Hashtable m_parametersInfo;
    private Hashtable m_matrixHeadingInstanceObjects;
    private State m_state;
    private bool m_expectDeclarations;
    private Stack`1<GroupingList> m_groupingsWithHideDuplicatesStack;
    private IntermediateFormatVersion m_intermediateFormatVersion;
    private ArrayList m_textboxesWithUserSort;
    private int m_currentUniqueName;
    internal IntermediateFormatVersion IntermediateFormatVersion { get; }
    internal Hashtable DefinitionObjects { get; }
    internal Hashtable InstanceObjects { get; }
    internal Hashtable MatrixHeadingInstanceObjects { get; }
    internal State ReaderState { get; }
    internal IntermediateFormatReader(Stream stream);
    internal IntermediateFormatReader(Stream stream, Hashtable instanceObjects);
    internal IntermediateFormatReader(Stream stream, Hashtable instanceObjects, Hashtable definitionObjects, IntermediateFormatVersion intermediateFormatVersion);
    internal IntermediateFormatReader(Stream stream, Hashtable instanceObjects, IntermediateFormatVersion intermediateFormatVersion);
    internal IntermediateFormatReader(Stream stream, IntermediateFormatVersion intermediateFormatVersion);
    internal IntermediateFormatReader(Stream stream, State state, Hashtable definitionObjects, IntermediateFormatVersion intermediateFormatVersion);
    internal IntermediateFormatReader(Stream stream, State state, IntermediateFormatVersion intermediateFormatVersion);
    private void Initialize(Stream stream);
    internal IntermediateFormatVersion get_IntermediateFormatVersion();
    internal Hashtable get_DefinitionObjects();
    internal Hashtable get_InstanceObjects();
    internal Hashtable get_MatrixHeadingInstanceObjects();
    internal State get_ReaderState();
    internal IntermediateFormatVersion ReadIntermediateFormatVersion();
    internal Report ReadReport(ReportItem parent);
    private void ResolveReportItemReferenceForGroupings(GroupingList groupingsWithHideDuplicates);
    private void ResolveUserSortReferenceForTextBoxes();
    internal ReportSnapshot ReadReportSnapshot();
    internal Report ReadReportFromSnapshot(DateTime& executionTime);
    internal ParameterInfoCollection ReadSnapshotParameters();
    internal DocumentMapNode ReadDocumentMapNode();
    internal DocumentMapNodeInfo ReadDocumentMapNodeInfo();
    internal bool FindDocumentMapNodePage(string documentMapId, Int32& page);
    internal TokensHashtable ReadTokensHashtable();
    internal BookmarksHashtable ReadBookmarksHashtable();
    internal BookmarkInformation FindBookmarkIdInfo(string bookmarkId);
    internal DrillthroughInformation FindDrillthroughIdInfo(string drillthroughId);
    internal SenderInformationHashtable ReadSenderInformationHashtable();
    internal ReceiverInformationHashtable ReadReceiverInformationHashtable();
    internal QuickFindHashtable ReadQuickFindHashtable();
    internal SortFilterEventInfoHashtable ReadSortFilterEventInfoHashtable();
    internal List`1<PageSectionInstance> ReadPageSections(int requestedPageNumber, int startPage, PageSection headerDef, PageSection footerDef);
    internal ActionInstance ReadActionInstance(Action action);
    private ActionItemInstanceList ReadActionItemInstanceList(ActionItemList actionItemList);
    internal ActionItemInstance ReadActionItemInstance(ActionItem actionItemDef);
    internal ReportItemColInstanceInfo ReadReportItemColInstanceInfo();
    internal ListContentInstanceInfo ReadListContentInstanceInfo();
    internal MatrixHeadingInstanceInfo ReadMatrixHeadingInstanceInfoBase();
    internal void ReadMatrixHeadingInstanceInfo(MatrixHeadingInstanceInfo instanceInfo);
    internal void ReadMatrixSubtotalHeadingInstanceInfo(MatrixSubtotalHeadingInstanceInfo instanceInfo);
    internal MatrixCellInstanceInfo ReadMatrixCellInstanceInfo();
    internal ChartHeadingInstanceInfo ReadChartHeadingInstanceInfo();
    internal ChartDataPointInstanceInfo ReadChartDataPointInstanceInfo(ChartDataPointList chartDataPoints);
    internal TableGroupInstanceInfo ReadTableGroupInstanceInfo();
    internal TableRowInstanceInfo ReadTableRowInstanceInfo();
    internal LineInstanceInfo ReadLineInstanceInfo(Line line);
    internal TextBoxInstanceInfo ReadTextBoxInstanceInfo(TextBox textBox);
    internal SimpleTextBoxInstanceInfo ReadSimpleTextBoxInstanceInfo(TextBox textBox);
    internal RectangleInstanceInfo ReadRectangleInstanceInfo(Rectangle rectangle);
    internal CheckBoxInstanceInfo ReadCheckBoxInstanceInfo(CheckBox checkBox);
    internal ImageInstanceInfo ReadImageInstanceInfo(Image image);
    internal SubReportInstanceInfo ReadSubReportInstanceInfo(SubReport subReport);
    internal ActiveXControlInstanceInfo ReadActiveXControlInstanceInfo(ActiveXControl activeXControl);
    internal ListInstanceInfo ReadListInstanceInfo(List list);
    internal MatrixInstanceInfo ReadMatrixInstanceInfo(Matrix matrix);
    internal TableInstanceInfo ReadTableInstanceInfo(Table table);
    internal OWCChartInstanceInfo ReadOWCChartInstanceInfo(OWCChart chart);
    internal ChartInstanceInfo ReadChartInstanceInfo(Chart chart);
    internal CustomReportItemInstanceInfo ReadCustomReportItemInstanceInfo(CustomReportItem cri);
    internal PageSectionInstanceInfo ReadPageSectionInstanceInfo(PageSection pageSectionDef);
    internal ReportInstanceInfo ReadReportInstanceInfo(Report report);
    internal RecordSetInfo ReadRecordSetInfo();
    private CompareOptions ReadCompareOptions();
    private RecordSetPropertyNamesList ReadRecordSetPropertyNamesList();
    internal RecordSetPropertyNames ReadRecordSetPropertyNames();
    internal RecordRow ReadRecordRow();
    private static void Assert(bool condition);
    private void RegisterParameterDef(ParameterDef paramDef);
    private ParameterDef GetParameterDefObject(string name);
    private void RegisterParameterInfo(ParameterInfo paramInfo);
    private ParameterInfo GetParameterInfoObject(string name);
    private void RegisterDefinitionObject(IDOwner idOwner);
    private IDOwner GetDefinitionObject(int id);
    private void RegisterInstanceObject(ReportItemInstance reportItemInstance);
    private ReportItemInstance GetInstanceObject(int uniqueName);
    private void RegisterMatrixHeadingInstanceObject(MatrixHeadingInstance matrixHeadingInstance);
    private MatrixHeadingInstance GetMatrixHeadingInstanceObject(int uniqueName);
    private void DeclarationCallback(ObjectType objectType, Declaration declaration);
    private IntList CreateOldIndexesToSkip(int index, int lastIndex);
    private bool PreRead(ObjectType objectType, Indexes indexes);
    private void PostRead(ObjectType objectType, Indexes indexes);
    private void Skip(ObjectType objectType, Indexes indexes);
    private void ReadRemovedItemType(Token token, ObjectType objectType);
    private void ReadRemovedReference();
    private bool IsInOldDeclaration(ObjectType objectType, Indexes indexes);
    private ValidValueList ReadValidValueList();
    private ParameterDefList ReadParameterDefList();
    private ParameterDefList ReadParameterDefRefList();
    private ParameterInfoCollection ReadParameterInfoCollection();
    private ParameterInfoCollection ReadParameterInfoRefCollection();
    private FilterList ReadFilterList();
    private DataSourceList ReadDataSourceList();
    private DataAggregateInfoList ReadDataAggregateInfoList();
    private ReportItemList ReadReportItemList(ReportItem parent);
    private ReportItemIndexerList ReadReportItemIndexerList();
    private RunningValueInfoList ReadRunningValueInfoList();
    private StyleAttributeHashtable ReadStyleAttributeHashtable();
    private ImageInfo ReadImageInfo();
    private DrillthroughParameters ReadDrillthroughParameters();
    private ImageStreamNames ReadImageStreamNames();
    private EmbeddedImageHashtable ReadEmbeddedImageHashtable();
    private ExpressionInfoList ReadExpressionInfoList();
    private DataSetList ReadDataSetList();
    private ExpressionInfo[] ReadExpressionInfos();
    private StringList ReadStringList();
    private DataFieldList ReadDataFieldList();
    private DataRegionList ReadDataRegionList();
    private ParameterValueList ReadParameterValueList();
    private CodeClassList ReadCodeClassList();
    private IntList ReadIntList();
    private Int64List ReadInt64List();
    private BoolList ReadBoolList();
    private MatrixRowList ReadMatrixRowList();
    private MatrixColumnList ReadMatrixColumnList();
    private TableColumnList ReadTableColumnList();
    private TableRowList ReadTableRowList(ReportItem parent);
    private ChartColumnList ReadChartColumnList();
    private SubReportList ReadSubReportList();
    private NonComputedUniqueNames[] ReadNonComputedUniqueNamess();
    private ReportItemInstanceList ReadReportItemInstanceList(ReportItemCollection reportItemsDef);
    private RenderingPagesRangesList ReadRenderingPagesRangesList();
    private ListContentInstanceList ReadListContentInstanceList(List listDef);
    private MatrixHeadingInstanceList ReadMatrixHeadingInstanceList(MatrixHeading headingDef);
    private MatrixCellInstancesList ReadMatrixCellInstancesList();
    private MatrixCellInstanceList ReadMatrixCellInstanceList();
    private MultiChartInstanceList ReadMultiChartInstanceList(Chart chartDef);
    private ChartHeadingInstanceList ReadChartHeadingInstanceList(ChartHeading headingDef);
    private ChartDataPointInstancesList ReadChartDataPointInstancesList();
    private ChartDataPointInstanceList ReadChartDataPointInstanceList();
    private TableRowInstance[] ReadTableRowInstances(TableRowList rowDefs, int rowStartUniqueName);
    private TableDetailInstanceList ReadTableDetailInstanceList(TableDetail detailDef);
    private TableGroupInstanceList ReadTableGroupInstanceList(TableGroup groupDef);
    private TableColumnInstance[] ReadTableColumnInstances();
    private CustomReportItemHeadingList ReadCustomReportItemHeadingList(ReportItem parent);
    private CustomReportItemHeadingInstanceList ReadCustomReportItemHeadingInstanceList(CustomReportItemHeadingList headingDefinitions);
    private CustomReportItemCellInstancesList ReadCustomReportItemCellInstancesList();
    private CustomReportItemCellInstanceList ReadCustomReportItemCellInstanceList();
    private DocumentMapNode[] ReadDocumentMapNodes();
    private DocumentMapNodeInfo[] ReadDocumentMapNodesInfo();
    private bool FindDocumentMapNodesPage(string documentMapId, Int32& page);
    private Object[] ReadVariants();
    private Object[] ReadVariants(bool isMultiValue, bool readNextToken);
    private void ReadMultiValue(Object[] parentArray, int index);
    private object ReadMultiValue();
    private String[] ReadStrings();
    private VariantList ReadVariantList(bool convertDBNull);
    private VariantList[] ReadVariantLists(bool convertDBNull);
    private ProcessingMessageList ReadProcessingMessageList();
    private DataCellsList ReadDataCellsList();
    private DataCellList ReadDataCellList();
    private DataValueCRIList ReadDataValueCRIList();
    private DataValueList ReadDataValueList();
    private DataValueList ReadDataValueList(DataValueList values);
    private DataValueInstanceList ReadDataValueInstanceList();
    private ImageMapAreaInstanceList ReadImageMapAreaInstanceList();
    private void ReadIDOwnerBase(IDOwner idOwner);
    private ReportItem ReadReportItem(ReportItem parent);
    private void ReadReportItemBase(ReportItem reportItem);
    private ReportItem ReadReportItemReference(bool getDefinition);
    private SubReport ReadSubReportReference();
    private PageSection ReadPageSection(bool isHeader, ReportItem parent);
    private ReportItemCollection ReadReportItemCollection(ReportItem parent);
    private ShowHideTypes ReadShowHideTypes();
    private DataElementOutputTypes ReadDataElementOutputType(Visibility visibility);
    private Style ReadStyle();
    private Visibility ReadVisibility();
    private Filter ReadFilter();
    private Operators ReadOperators();
    private DataSource ReadDataSource();
    private DataAggregateInfo ReadDataAggregateInfo();
    private void ReadDataAggregateInfoBase(DataAggregateInfo aggregate);
    private ExpressionInfo ReadExpressionInfo();
    private AggregateTypes ReadAggregateTypes();
    private Types ReadTypes();
    private ReportItemIndexer ReadReportItemIndexer();
    private RenderingPagesRanges ReadRenderingPagesRanges();
    private RunningValueInfo ReadRunningValueInfo();
    private RunningValueInfo ReadRunningValueInfoInternals();
    private AttributeInfo ReadAttributeInfo();
    private DataSet ReadDataSet();
    private ReportQuery ReadReportQuery();
    private Sensitivity ReadSensitivity();
    private CommandType ReadCommandType();
    private Field ReadDataField();
    internal FieldPropertyHashtable ReadFieldPropertyHashtable();
    private ParameterValue ReadParameterValue();
    private CodeClass ReadCodeClass();
    private Action ReadAction();
    private ActionItemList ReadActionItemList();
    private ActionItem ReadActionItem();
    private Line ReadLineInternals(ReportItem parent);
    private Rectangle ReadRectangleInternals(ReportItem parent);
    private Image ReadImageInternals(ReportItem parent);
    private ImageMapAreaInstance ReadImageMapAreaInstance();
    private SourceType ReadSourceType();
    private Sizings ReadSizings();
    private ImageMapAreaShape ReadImageMapAreaShape();
    private CheckBox ReadCheckBoxInternals(ReportItem parent);
    private TextBox ReadTextBoxInternals(ReportItem parent);
    private EndUserSort ReadEndUserSort(TextBox eventSource);
    private IntList ReadGroupingIDList();
    private GroupingList ReadGroupingReferenceList();
    private Grouping ReadGroupingReference();
    private TypeCode ReadTypeCode();
    private SubReport ReadSubReportInternals(ReportItem parent);
    private ScopeLookupTable ReadScopeLookupTable();
    private object ReadScopeTableValues();
    private Status ReadStatus();
    private ActiveXControl ReadActiveXControlInternals(ReportItem parent);
    private ParameterBase ReadParameterBase(ParameterBase parameter);
    private ParameterDef ReadParameterDef();
    private ParameterDataSource ReadParameterDataSource();
    private ValidValue ReadValidValue();
    private DataRegion ReadDataRegionInternals(ReportItem parent);
    private void ReadDataRegionBase(DataRegion dataRegion);
    private DataRegion ReadDataRegionReference();
    private ReportHierarchyNode ReadReportHierarchyNode(ReportItem parent);
    private void ReadReportHierarchyNodeBase(ReportHierarchyNode node, ReportItem parent);
    private Grouping ReadGrouping();
    private InScopeSortFilterHashtable ReadInScopeSortFilterTable();
    private IntList ReadReportItemIDList();
    private int ReadIDOwnerID(ObjectType objectType);
    private Sorting ReadSorting();
    private TableGroup ReadTableGroup(ReportItem parent);
    private TableGroup ReadTableGroupInternals(ReportItem parent);
    private TableGroup ReadTableGroupReference();
    private TableDetail ReadTableDetail(ReportItem parent);
    private TableDetail ReadTableDetailInternals(ReportItem parent);
    private void ReadPivotHeadingBase(PivotHeading pivotHeading, ReportItem parent);
    private MatrixHeading ReadMatrixHeading(ReportItem parent);
    private MatrixHeading ReadMatrixHeadingInternals(ReportItem parent);
    private MatrixHeading ReadMatrixHeadingReference();
    private void ReadTablixHeadingBase(TablixHeading tablixHeading, ReportItem parent);
    private CustomReportItemHeading ReadCustomReportItemHeading(ReportItem parent);
    private CustomReportItemHeading ReadCustomReportItemHeadingInternals(ReportItem parent);
    private CustomReportItemHeading ReadCustomReportItemHeadingReference();
    private TableRow ReadTableRow(ReportItem parent);
    private Subtotal ReadSubtotal(ReportItem parent);
    private PositionType ReadPositionType();
    private List ReadListInternals(ReportItem parent);
    private void ReadPivotBase(Pivot pivot);
    private void ReadTablixBase(Tablix tablix);
    private CustomReportItem ReadCustomReportItemInternals(ReportItem parent);
    private ChartHeading ReadChartHeading(ReportItem parent);
    private ChartHeading ReadChartHeadingInternals(ReportItem parent);
    private ChartHeading ReadChartHeadingReference();
    private ChartDataPointList ReadChartDataPointList();
    private ChartDataPoint ReadChartDataPoint();
    private ChartDataLabel ReadChartDataLabel();
    private MultiChart ReadMultiChart(ReportItem parent);
    private MultiChart ReadMultiChartInternals(ReportItem parent);
    private Axis ReadAxis();
    private ChartTitle ReadChartTitle();
    private Legend ReadLegend();
    private GridLines ReadGridLines();
    private ThreeDProperties ReadThreeDProperties();
    private PlotArea ReadPlotArea();
    private Chart ReadChartInternals(ReportItem parent);
    private Positions ReadDataLabelPosition();
    private MarkerTypes ReadMarkerType();
    private Layouts ReadMultiChartLayout();
    private TickMarks ReadTickMark();
    private ShadingTypes ReadShading();
    private Origins ReadPlotAreaOrigin();
    private LegendLayout ReadLegendLayout();
    private Positions ReadLegendPosition();
    private Positions ReadChartTitlePosition();
    private ChartTypes ReadChartType();
    private ChartSubTypes ReadChartSubType();
    private ChartPalette ReadChartPalette();
    private Matrix ReadMatrixInternals(ReportItem parent);
    private ProcessingInnerGroupings ReadProcessingInnerGrouping();
    private MatrixRow ReadMatrixRow();
    private MatrixColumn ReadMatrixColumn();
    private Table ReadTableInternals(ReportItem parent);
    private TableColumn ReadTableColumn();
    private OWCChart ReadOWCChartInternals(ReportItem parent);
    private ChartColumn ReadChartColumn();
    private DataValue ReadDataValue();
    private ParameterInfo ReadParameterInfo();
    private ProcessingMessage ReadProcessingMessage();
    private DataValueInstance ReadDataValueInstance();
    private ProcessingErrorCode ReadProcessingErrorCode();
    private ErrorCode ReadCommonErrorCode();
    private Severity ReadProcessingErrorSeverity();
    private ObjectType ReadProcessingErrorObjectType();
    private DataType ReadDataType();
    private BookmarkInformation ReadBookmarkInformation();
    private DrillthroughInformation ReadDrillthroughInformation(bool hasTokensIDs);
    private SenderInformation ReadSenderInformation();
    private ReceiverInformation ReadReceiverInformation();
    private SortFilterEventInfo ReadSortFilterEventInfo(bool getDefinition);
    private void ReadInfoBaseBase(InfoBase infoBase);
    private OffsetInfo ReadSimpleOffsetInfo();
    private OffsetInfo ReadOffsetInfo();
    private void ReadInstanceInfoBase(InstanceInfo instanceInfo);
    private void ReadReportItemInstanceInfoBase(ReportItemInstanceInfo instanceInfo);
    private NonComputedUniqueNames ReadNonComputedUniqueNames();
    private void ReadInstanceInfoOwnerBase(InstanceInfoOwner owner);
    private ReportItemInstance ReadReportItemInstance(ReportItem reportItemDef);
    private void ReadReportItemInstanceBase(ReportItemInstance reportItemInstance, ReportItem reportItemDef);
    private void ReadReportItemInstanceBase(ReportItemInstance reportItemInstance, ReportItem& reportItemDef);
    private ReportItemInstance ReadReportItemInstanceReference();
    private ReportInstance ReadReportInstance(Report reportDef);
    private ReportItemColInstance ReadReportItemColInstance(ReportItemCollection reportItemsDef);
    private LineInstance ReadLineInstanceInternals(ReportItem reportItemDef);
    private void UpdateUniqueNameForAction(Action actionDef);
    private TextBoxInstance ReadTextBoxInstanceInternals(ReportItem reportItemDef);
    private RectangleInstance ReadRectangleInstanceInternals(ReportItem reportItemDef);
    private CheckBoxInstance ReadCheckBoxInstanceInternals(ReportItem reportItemDef);
    private ImageInstance ReadImageInstanceInternals(ReportItem reportItemDef);
    private SubReportInstance ReadSubReportInstanceInternals(ReportItem reportItemDef);
    private ActiveXControlInstance ReadActiveXControlInstanceInternals(ReportItem reportItemDef);
    private ListInstance ReadListInstanceInternals(ReportItem reportItemDef);
    private ListContentInstance ReadListContentInstance(List listDef);
    private MatrixInstance ReadMatrixInstanceInternals(ReportItem reportItemDef);
    private MatrixHeadingInstance ReadMatrixHeadingInstance(MatrixHeading headingDef, int index, int totalCount);
    internal MatrixCellInstance ReadMatrixCellInstanceBase();
    private void ReadMatrixCellInstance(MatrixCellInstance instance);
    internal void ReadMatrixSubtotalCellInstance(MatrixSubtotalCellInstance instance);
    private MultiChartInstance ReadMultiChartInstance(Chart chartDef);
    private ChartInstance ReadChartInstanceInternals(ReportItem reportItemDef);
    private ChartHeadingInstance ReadChartHeadingInstance(ChartHeading headingDef);
    private ChartDataPointInstance ReadChartDataPointInstance();
    private AxisInstance ReadAxisInstance();
    private ChartTitleInstance ReadChartTitleInstance();
    private TableInstance ReadTableInstanceInternals(ReportItem reportItemDef);
    private TableDetailInstanceList ReadTableDetailInstances(Table tableDef, TableGroup tableGroup, ObjectType objectType, Indexes indexes);
    private TableGroupInstance ReadTableGroupInstance(TableGroup groupDef);
    private TableDetailInstance ReadTableDetailInstance(TableDetail detailDef);
    internal TableDetailInstanceInfo ReadTableDetailInstanceInfo();
    private TableRowInstance ReadTableRowInstance(TableRowList rowDefs, int index, int rowUniqueName);
    private TableColumnInstance ReadTableColumnInstance();
    private OWCChartInstance ReadOWCChartInstanceInternals(ReportItem reportItemDef);
    private CustomReportItemInstance ReadCustomReportItemInstanceInternals(CustomReportItem reportItemDef);
    private CustomReportItemHeadingInstance ReadCustomReportItemHeadingInstance(CustomReportItemHeadingList headingDef, int index, int totalCount);
    internal CustomReportItemCellInstance ReadCustomReportItemCellInstance();
    private PageSectionInstance ReadPageSectionInstance(PageSection pageSectionDef);
    private object ReadVariant();
    private object ReadVariant(bool readNextToken);
    private object ReadVariant(bool readNextToken, bool convertDBNull);
    private RecordField[] ReadRecordFields();
    private RecordField ReadRecordField();
    private object ReadFieldValue(DataFieldStatus& fieldStatus);
}
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.IntermediateFormatWriter : object {
    private ReportServerBinaryWriter m_writer;
    private bool m_writeDeclarations;
    private Boolean[] m_declarationsWritten;
    private bool m_writeUniqueName;
    internal Boolean[] DeclarationsToWrite { get; }
    internal IntermediateFormatWriter(Stream stream, Boolean[] firstPageDeclarationsToWrite, Boolean[] otherPageDeclarationsToWrite);
    internal IntermediateFormatWriter(Stream stream, bool writeDeclarations);
    private void Initialize(Stream stream, bool writeDeclarations, Boolean[] firstPageDeclarationsToWrite, Boolean[] otherPageDeclarationsToWrite);
    private void WriteDeclarations(Boolean[] declarationsToWrite);
    internal Boolean[] get_DeclarationsToWrite();
    internal void WriteIntermediateFormatVersion(IntermediateFormatVersion version);
    internal void WriteReport(Report report);
    internal void WriteReportSnapshot(ReportSnapshot reportSnapshot);
    internal void WriteDocumentMapNode(DocumentMapNode documentMapNode);
    internal void WriteBookmarksHashtable(BookmarksHashtable bookmarks);
    internal void WriteDrillthroughInfo(ReportDrillthroughInfo reportDrillthroughInfo);
    internal void WriteTokensHashtable(TokensHashtable tokens);
    internal void WriteDrillthroughHashtable(DrillthroughHashtable drillthrough);
    internal void WriteSenderInformationHashtable(SenderInformationHashtable senders);
    internal void WriteReceiverInformationHashtable(ReceiverInformationHashtable receivers);
    internal void WriteQuickFindHashtable(QuickFindHashtable quickFind);
    internal void WriteSortFilterEventInfoHashtable(SortFilterEventInfoHashtable sortFilterEventInfo);
    internal Int64List WritePageSections(Stream stream, List`1<PageSectionInstance> pageSections);
    internal void WriteSortFilterEventInfo(SortFilterEventInfo sortFilterEventInfo);
    internal void WriteInstanceInfo(InstanceInfo instanceInfo);
    internal void WriteRecordSetInfo(RecordSetInfo recordSetInfo);
    internal void WriteRecordSetPropertyNamesList(RecordSetPropertyNamesList list);
    internal void WriteRecordSetPropertyNames(RecordSetPropertyNames field);
    internal bool WriteRecordRow(RecordRow recordRow, RecordSetPropertyNamesList aliasPropertyNames);
    private static void Assert(bool condition);
    private void DeclareType(ObjectType objectType);
    private void WriteValidValueList(ValidValueList parameters);
    private void WriteParameterDefList(ParameterDefList parameters);
    private void WriteParameterDefRefList(ParameterDefList parameters);
    private void WriteParameterInfoCollection(ParameterInfoCollection parameters);
    private void WriteParameterInfoRefCollection(ParameterInfoCollection parameters);
    private void WriteFilterList(FilterList filters);
    private void WriteDataSourceList(DataSourceList dataSources);
    private void WriteDataAggregateInfoList(DataAggregateInfoList aggregates);
    private void WriteReportItemIDList(ReportItemList reportItems);
    private void WriteReportItemID(ReportItem reportItem);
    private void WriteReportItemList(ReportItemList reportItems);
    private void WriteReportItemIndexerList(ReportItemIndexerList reportItemIndexers);
    private void WriteRunningValueInfoList(RunningValueInfoList runningValues);
    private void WriteStyleAttributeHashtable(StyleAttributeHashtable styleAttributes);
    private void WriteImageInfo(ImageInfo imageInfo);
    private void WriteDrillthroughParameters(DrillthroughParameters parameters);
    private void WriteImageStreamNames(ImageStreamNames streamNames);
    private void WriteEmbeddedImageHashtable(EmbeddedImageHashtable embeddedImages);
    private void WriteExpressionInfoList(ExpressionInfoList expressions);
    private void WriteDataSetList(DataSetList dataSets);
    private void WriteExpressionInfos(ExpressionInfo[] expressions);
    private void WriteStringList(StringList strings);
    private void WriteDataFieldList(DataFieldList fields);
    private void WriteDataRegionList(DataRegionList dataRegions);
    private void WriteParameterValueList(ParameterValueList parameters);
    private void WriteCodeClassList(CodeClassList classes);
    private void WriteIntList(IntList ints);
    private void WriteInt64List(Int64List longs);
    private void WriteBoolList(BoolList bools);
    private void WriteMatrixRowList(MatrixRowList rows);
    private void WriteMatrixColumnList(MatrixColumnList columns);
    private void WriteTableColumnList(TableColumnList columns);
    private void WriteTableRowList(TableRowList rows);
    private void WriteChartColumnList(ChartColumnList columns);
    private void WriteCustomReportItemHeadingList(CustomReportItemHeadingList headings);
    private void WriteDataCellsList(DataCellsList rows);
    private void WriteDataCellList(DataCellList cells);
    private void WriteDataValueCRIList(DataValueCRIList values);
    private void WriteDataValueList(DataValueList values);
    private void WriteDataValueInstanceList(DataValueInstanceList instances);
    private void WriteImageMapAreaInstanceList(ImageMapAreaInstanceList mapAreas);
    private void WriteSubReportList(SubReportList subReports);
    private void WriteSubReportReference(SubReport subReport);
    private void WriteNonComputedUniqueNamess(NonComputedUniqueNames[] names);
    private void WriteReportItemInstanceList(ReportItemInstanceList reportItemInstances);
    private void WriteRenderingPagesRangesList(RenderingPagesRangesList renderingPagesRanges);
    private void WriteListContentInstanceList(ListContentInstanceList listContents);
    private void WriteMatrixHeadingInstanceList(MatrixHeadingInstanceList matrixheadingInstances);
    private void WriteMatrixCellInstancesList(MatrixCellInstancesList matrixCellInstancesList);
    private void WriteMatrixCellInstanceList(MatrixCellInstanceList matrixCellInstances);
    private void WriteMultiChartInstanceList(MultiChartInstanceList multichartInstances);
    private void WriteChartHeadingInstanceList(ChartHeadingInstanceList chartheadingInstances);
    private void WriteChartDataPointInstancesList(ChartDataPointInstancesList chartDataPointInstancesList);
    private void WriteChartDataPointInstanceList(ChartDataPointInstanceList chartDataPointInstanceList);
    private void WriteTableRowInstances(TableRowInstance[] tableRowInstances);
    private void WriteTableDetailInstanceList(TableDetailInstanceList tableDetailInstanceList);
    private void WriteTableGroupInstanceList(TableGroupInstanceList tableGroupInstances);
    private void WriteTableColumnInstances(TableColumnInstance[] tableColumnInstances);
    private void WriteCustomReportItemHeadingInstanceList(CustomReportItemHeadingInstanceList headingInstances);
    private void WriteCustomReportItemCellInstancesList(CustomReportItemCellInstancesList cellInstancesList);
    private void WriteCustomReportItemCellInstanceList(CustomReportItemCellInstanceList cellInstances);
    private void WriteDocumentMapNodes(DocumentMapNode[] nodes);
    private void WriteStrings(String[] strings);
    private void WriteVariants(Object[] variants);
    private void WriteVariants(Object[] variants, bool isMultiValue);
    private void WriteVariantList(VariantList variants, bool convertDBNull);
    private void WriteVariantLists(VariantList[] variantLists, bool convertDBNull);
    private void WriteProcessingMessageList(ProcessingMessageList messages);
    private void WriteIDOwnerBase(IDOwner idOwner);
    private void WriteReportItem(ReportItem reportItem);
    private void WriteReportItemBase(ReportItem reportItem);
    private void WriteReportItemReference(ReportItem reportItem);
    private void WritePageSection(PageSection pageSection);
    private void WriteReportItemCollection(ReportItemCollection reportItems);
    private void WriteShowHideTypes(ShowHideTypes showHideType);
    private void WriteDataElementOutputType(DataElementOutputTypes element);
    private void WriteStyle(Style style);
    private void WriteVisibility(Visibility visibility);
    private void WriteFilter(Filter filter);
    private void WriteOperators(Operators operators);
    private void WriteDataSource(DataSource dataSource);
    private void WriteDataAggregateInfo(DataAggregateInfo aggregate);
    private void WriteDataAggregateInfoBase(DataAggregateInfo aggregate);
    private void WriteExpressionInfo(ExpressionInfo expression);
    private void WriteAggregateTypes(AggregateTypes aggregateType);
    private void WriteTypes(Types type);
    private void WriteReportItemIndexer(ReportItemIndexer reportItemIndexer);
    private void WriteRenderingPagesRanges(RenderingPagesRanges renderingPagesRanges);
    private void WriteRunningValueInfo(RunningValueInfo runningValue);
    private void WriteAttributeInfo(AttributeInfo attributeInfo);
    private void WriteDataSet(DataSet dataSet);
    private void WriteReportQuery(ReportQuery query);
    private void WriteSensitivity(Sensitivity sensitivity);
    private void WriteCommandType(CommandType commandType);
    private void WriteDataField(Field field);
    internal void WriteFieldPropertyHashtable(FieldPropertyHashtable properties);
    private void WriteParameterValue(ParameterValue parameter);
    private void WriteCodeClass(CodeClass codeClass);
    private void WriteAction(Action actionInfo);
    private void WriteActionItemList(ActionItemList actionItemList);
    private void WriteActionItem(ActionItem actionItem);
    private void WriteLine(Line line);
    private void WriteRectangle(Rectangle rectangle);
    private void WriteImage(Image image);
    private void WriteImageMapAreaInstance(ImageMapAreaInstance mapArea);
    private void WriteImageMapAreaShape(ImageMapAreaShape sourceType);
    private void WriteSourceType(SourceType sourceType);
    private void WriteSizings(Sizings sizing);
    private void WriteCheckBox(CheckBox checkBox);
    private void WriteTextBox(TextBox textBox);
    private void WriteEndUserSort(EndUserSort userSort);
    private void WriteSortFilterScopeReference(ISortFilterScope sortFilterScope);
    private void WriteGroupingReferenceList(GroupingList groups);
    private void WriteTypeCode(TypeCode typeCode);
    private void WriteSubReport(SubReport subReport);
    private void WriteScopeLookupTable(ScopeLookupTable scopeTable);
    private void WriteScopeTableValues(object value);
    private void WriteStatus(Status status);
    private void WriteActiveXControl(ActiveXControl control);
    private void WriteParameterBase(ParameterBase parameter);
    private void WriteParameterDef(ParameterDef parameter);
    private void WriteParameterDataSource(ParameterDataSource paramDataSource);
    private void WriteValidValue(ValidValue validValue);
    private void WriteDataRegion(DataRegion dataRegion);
    private void WriteDataRegionBase(DataRegion dataRegion);
    private void WriteDataRegionReference(DataRegion dataRegion);
    private void WriteReportHierarchyNode(ReportHierarchyNode node);
    private void WriteReportHierarchyNodeBase(ReportHierarchyNode node);
    private void WriteGrouping(Grouping grouping);
    private void WriteInScopeSortFilterHashtable(InScopeSortFilterHashtable inScopeSortFilters);
    private void WriteSorting(Sorting sorting);
    private void WriteTableGroup(TableGroup tableGroup);
    private void WriteTableGroupReference(TableGroup tableGroup);
    private void WriteTableDetail(TableDetail tableDetail);
    private void WritePivotHeadingBase(PivotHeading pivotHeading);
    private void WriteMatrixHeading(MatrixHeading matrixHeading);
    private void WriteMatrixHeadingReference(MatrixHeading matrixHeading);
    private void WriteTablixHeadingBase(TablixHeading tablixHeading);
    private void WriteCustomReportItemHeading(CustomReportItemHeading heading);
    private void WriteCustomReportItemHeadingReference(CustomReportItemHeading heading);
    private void WriteTableRow(TableRow tableRow);
    private void WriteSubtotal(Subtotal subtotal);
    private void WritePositionType(PositionType positionType);
    private void WriteList(List list);
    private void WritePivotBase(Pivot pivot);
    private void WriteTablixBase(Tablix tablix);
    private void WriteCustomReportItem(CustomReportItem custom);
    private void WriteChartDataPointList(ChartDataPointList datapoints);
    private void WriteChartDataPoint(ChartDataPoint datapoint);
    private void WriteChartDataLabel(ChartDataLabel label);
    private void WriteMultiChart(MultiChart multiChart);
    private void WriteLegend(Legend legend);
    private void WriteChartHeading(ChartHeading chartHeading);
    private void WriteChartHeadingReference(ChartHeading chartHeading);
    private void WriteAxis(Axis axis);
    private void WriteGridLines(GridLines gridLines);
    private void WriteChartTitle(ChartTitle chartTitle);
    private void WriteThreeDProperties(ThreeDProperties properties);
    private void WritePlotArea(PlotArea plotArea);
    private void WriteChart(Chart chart);
    private void WriteMatrix(Matrix matrix);
    private void WriteProcessingInnerGrouping(ProcessingInnerGroupings directions);
    private void WriteMatrixRow(MatrixRow row);
    private void WriteMatrixColumn(MatrixColumn column);
    private void WriteTable(Table table);
    private void WriteTableColumn(TableColumn column);
    private void WriteOWCChart(OWCChart chart);
    private void WriteChartColumn(ChartColumn column);
    private void WriteDataValue(DataValue value);
    private void WriteParameterInfo(ParameterInfo parameter);
    private void WriteProcessingMessage(ProcessingMessage message);
    private void WriteDataValueInstance(DataValueInstance instance);
    private void WriteDataType(DataType dataType);
    private void WriteBookmarkInformation(BookmarkInformation bookmark);
    private void WriteDrillthroughInformation(DrillthroughInformation drillthroughInfo);
    private void WriteSenderInformation(SenderInformation sender);
    private void WriteReceiverInformation(ReceiverInformation receiver);
    private void WriteInfoBaseBase(InfoBase infoBase);
    private void WriteSimpleOffsetInfo(OffsetInfo offsetInfo);
    private void WriteActionInstance(ActionInstance actionInstance);
    private void WriteActionItemInstanceList(ActionItemInstanceList actionItemInstanceList);
    private void WriteActionItemInstance(ActionItemInstance actionItemInstance);
    private void WriteDrillthroughVariants(Object[] variants, IntList tokenIDs);
    private void WriteReportInstanceInfo(ReportInstanceInfo instanceInfo);
    private void WriteReportItemColInstanceInfo(ReportItemColInstanceInfo instanceInfo);
    private void WriteReportItemInstanceInfo(ReportItemInstanceInfo reportItemInstanceInfo);
    private void WriteLineInstanceInfo(LineInstanceInfo instanceInfo);
    private void WriteTextBoxInstanceInfo(TextBoxInstanceInfo instanceInfo);
    private void WriteSimpleTextBoxInstanceInfo(SimpleTextBoxInstanceInfo simpleTextBoxInstanceInfo);
    private void WriteRectangleInstanceInfo(RectangleInstanceInfo instanceInfo);
    private void WriteCheckBoxInstanceInfo(CheckBoxInstanceInfo instanceInfo);
    private void WriteImageInstanceInfo(ImageInstanceInfo instanceInfo);
    private void WriteSubReportInstanceInfo(SubReportInstanceInfo instanceInfo);
    private void WriteActiveXControlInstanceInfo(ActiveXControlInstanceInfo instanceInfo);
    private void WriteListInstanceInfo(ListInstanceInfo instanceInfo);
    private void WriteListContentInstanceInfo(ListContentInstanceInfo instanceInfo);
    private void WriteMatrixInstanceInfo(MatrixInstanceInfo instanceInfo);
    private void WriteMatrixHeadingInstanceInfo(MatrixHeadingInstanceInfo instanceInfo);
    private void WriteMatrixSubtotalHeadingInstanceInfo(MatrixSubtotalHeadingInstanceInfo instanceInfo);
    private void WriteMatrixCellInstanceInfo(MatrixCellInstanceInfo instanceInfo);
    private void WriteChartInstanceInfo(ChartInstanceInfo instanceInfo);
    private void WriteChartHeadingInstanceInfo(ChartHeadingInstanceInfo instanceInfo);
    private void WriteChartDataPointInstanceInfo(ChartDataPointInstanceInfo instanceInfo);
    private void WriteTableInstanceInfo(TableInstanceInfo instanceInfo);
    private void WriteTableGroupInstanceInfo(TableGroupInstanceInfo instanceInfo);
    private void WriteTableDetailInstanceInfo(TableDetailInstanceInfo instanceInfo);
    private void WriteTableRowInstanceInfo(TableRowInstanceInfo instanceInfo);
    private void WriteOWCChartInstanceInfo(OWCChartInstanceInfo instanceInfo);
    private void WriteCustomReportItemInstanceInfo(CustomReportItemInstanceInfo instanceInfo);
    private void WritePageSectionInstanceInfo(PageSectionInstanceInfo instanceInfo);
    private void WriteInstanceInfoBase(InstanceInfo instanceInfo);
    private void WriteReportItemInstanceInfoBase(ReportItemInstanceInfo instanceInfo);
    private void WriteNonComputedUniqueNames(NonComputedUniqueNames names);
    private void WriteInstanceInfoOwnerBase(InstanceInfoOwner owner);
    private void WriteReportItemInstance(ReportItemInstance reportItemInstance);
    private void WriteReportItemInstanceBase(ReportItemInstance reportItemInstance);
    private void WriteReportItemInstanceReference(ReportItemInstance reportItemInstance);
    private void WriteReportInstance(ReportInstance reportInstance);
    private void WriteReportItemColInstance(ReportItemColInstance reportItemColInstance);
    private void WriteLineInstance(LineInstance lineInstance);
    private void WriteTextBoxInstance(TextBoxInstance textBoxInstance);
    private void WriteRectangleInstance(RectangleInstance rectangleInstance);
    private void WriteCheckBoxInstance(CheckBoxInstance checkBoxInstance);
    private void WriteImageInstance(ImageInstance imageInstance);
    private void WriteSubReportInstance(SubReportInstance subReportInstance);
    private void WriteActiveXControlInstance(ActiveXControlInstance activeXControlInstance);
    private void WriteListInstance(ListInstance listInstance);
    private void WriteListContentInstance(ListContentInstance listContentInstance);
    private void WriteMatrixInstance(MatrixInstance matrixInstance);
    private void WriteMatrixHeadingInstance(MatrixHeadingInstance matrixHeadingInstance);
    private void WriteMatrixCellInstance(MatrixCellInstance matrixCellInstance);
    private void WriteMatrixSubtotalCellInstance(MatrixSubtotalCellInstance matrixSubtotalCellInstance);
    private void WriteChartInstance(ChartInstance chartInstance);
    private void WriteMultiChartInstance(MultiChartInstance multiChartInstance);
    private void WriteChartHeadingInstance(ChartHeadingInstance chartHeadingInstance);
    private void WriteChartDataPointInstance(ChartDataPointInstance dataPointInstance);
    private void WriteAxisInstance(AxisInstance axisInstance);
    private void WriteChartTitleInstance(ChartTitleInstance chartTitleInstance);
    private void WriteTableInstance(TableInstance tableInstance);
    private void WriteTableGroupInstance(TableGroupInstance tableGroupInstance);
    private void WriteTableDetailInstance(TableDetailInstance tableDetailInstance);
    private void WriteTableRowInstance(TableRowInstance tableRowInstance);
    private void WriteTableColumnInstance(TableColumnInstance tableColumnInstance);
    private void WriteOWCChartInstance(OWCChartInstance chartInstance);
    private void WriteCustomReportItemInstance(CustomReportItemInstance instance);
    private void WriteCustomReportItemHeadingInstance(CustomReportItemHeadingInstance headingInstance);
    private void WriteCustomReportItemCellInstance(CustomReportItemCellInstance cellInstance);
    private void WritePageSectionInstance(PageSectionInstance instance);
    private void WriteVariant(object variant);
    private void WriteVariant(object variant, bool convertDBNull);
    private bool WriteRecordFields(RecordField[] recordFields, RecordSetPropertyNamesList aliasPropertyNames);
    private bool WriteRecordField(RecordField recordField);
    private bool WriteFieldValue(object variant);
}
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.MemberInfo : object {
    private MemberName m_memberName;
    private Token m_token;
    private ObjectType m_objectType;
    internal MemberName MemberName { get; internal set; }
    internal Token Token { get; }
    internal ObjectType ObjectType { get; }
    internal MemberInfo(MemberName memberName, Token token);
    internal MemberInfo(MemberName memberName, ObjectType objectType);
    internal MemberInfo(MemberName memberName, Token token, ObjectType objectType);
    internal static bool Equals(MemberInfo a, MemberInfo b);
    internal MemberName get_MemberName();
    internal void set_MemberName(MemberName value);
    internal Token get_Token();
    internal ObjectType get_ObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.MemberInfoList : ArrayList {
    internal MemberInfo Item { get; }
    internal MemberInfoList(int capacity);
    internal MemberInfo get_Item(int index);
}
internal enum Microsoft.ReportingServices.ReportProcessing.Persistence.MemberName : Enum {
    public int value__;
    public static MemberName ID;
    public static MemberName Name;
    public static MemberName StyleClass;
    public static MemberName Top;
    public static MemberName TopValue;
    public static MemberName Left;
    public static MemberName LeftValue;
    public static MemberName Height;
    public static MemberName HeightValue;
    public static MemberName Width;
    public static MemberName WidthValue;
    public static MemberName ZIndex;
    public static MemberName Visibility;
    public static MemberName Label;
    public static MemberName Custom;
    public static MemberName RepeatedSibling;
    public static MemberName Author;
    public static MemberName AutoRefresh;
    public static MemberName EmbeddedImages;
    public static MemberName PageHeader;
    public static MemberName PageFooter;
    public static MemberName ReportItems;
    public static MemberName DataSources;
    public static MemberName PageHeight;
    public static MemberName PageHeightValue;
    public static MemberName PageWidth;
    public static MemberName PageWidthValue;
    public static MemberName LeftMargin;
    public static MemberName LeftMarginValue;
    public static MemberName RightMargin;
    public static MemberName RightMarginValue;
    public static MemberName TopMargin;
    public static MemberName TopMarginValue;
    public static MemberName BottomMargin;
    public static MemberName BottomMarginValue;
    public static MemberName ClassName;
    public static MemberName InstanceName;
    public static MemberName CodeModules;
    public static MemberName CodeClasses;
    public static MemberName Columns;
    public static MemberName ColumnSpacing;
    public static MemberName ColumnSpacingValue;
    public static MemberName PageAggregates;
    public static MemberName CompiledCode;
    public static MemberName MergeOnePass;
    public static MemberName PageMergeOnePass;
    public static MemberName SubReportMergeTransactions;
    public static MemberName NeedPostGroupProcessing;
    public static MemberName HasPostSortAggregates;
    public static MemberName HasReportItemReferences;
    public static MemberName ShowHideType;
    public static MemberName ReportInstance;
    public static MemberName BodyID;
    public static MemberName PrintOnFirstPage;
    public static MemberName PrintOnLastPage;
    public static MemberName PostProcessEvaluate;
    public static MemberName Slanted;
    public static MemberName PageBreakAtEnd;
    public static MemberName PageBreakAtStart;
    public static MemberName HyperLinkURL;
    public static MemberName Source;
    public static MemberName Value;
    public static MemberName MIMEType;
    public static MemberName Sizing;
    public static MemberName HideDuplicates;
    public static MemberName CanGrow;
    public static MemberName CanShrink;
    public static MemberName IsToggle;
    public static MemberName InitialToggleState;
    public static MemberName ValueType;
    public static MemberName ReportPath;
    public static MemberName NoRows;
    public static MemberName Parameters;
    public static MemberName MergeTransactions;
    public static MemberName Status;
    public static MemberName ReportName;
    public static MemberName Description;
    public static MemberName Report;
    public static MemberName StringUri;
    public static MemberName ClassID;
    public static MemberName CodeBase;
    public static MemberName DataSetName;
    public static MemberName KeepTogether;
    public static MemberName RepeatSiblings;
    public static MemberName Grouping;
    public static MemberName Sorting;
    public static MemberName InnerHierarchy;
    public static MemberName DataRegionDef;
    public static MemberName GroupExpressions;
    public static MemberName GroupLabel;
    public static MemberName SortDirections;
    public static MemberName NaturalGroup;
    public static MemberName Aggregates;
    public static MemberName GroupAndSort;
    public static MemberName SortExpressions;
    public static MemberName HierarchyDef;
    public static MemberName FillPage;
    public static MemberName CornerReportItems;
    public static MemberName Rows;
    public static MemberName ColumnCount;
    public static MemberName RowCount;
    public static MemberName CellReportItems;
    public static MemberName CellAggregates;
    public static MemberName PropagatedPageBreakAtStart;
    public static MemberName PropagatedPageBreakAtEnd;
    public static MemberName InnerRowLevelWithPageBreak;
    public static MemberName MatrixRows;
    public static MemberName MatrixColumns;
    public static MemberName GroupsBeforeRowHeaders;
    public static MemberName ProcessingInnerGrouping;
    public static MemberName StaticColumns;
    public static MemberName StaticRows;
    public static MemberName Size;
    public static MemberName SizeValue;
    public static MemberName Subtotal;
    public static MemberName Level;
    public static MemberName IsColumn;
    public static MemberName SubtotalSpan;
    public static MemberName AutoDerived;
    public static MemberName Position;
    public static MemberName TableColumns;
    public static MemberName HeaderRows;
    public static MemberName HeaderRepeatOnNewPage;
    public static MemberName TableGroups;
    public static MemberName DetailRows;
    public static MemberName FooterRows;
    public static MemberName FooterRepeatOnNewPage;
    public static MemberName GroupPageBreakAtStart;
    public static MemberName GroupPageBreakAtEnd;
    public static MemberName UseOwc;
    public static MemberName OwcNonSharedStyles;
    public static MemberName RunningValues;
    public static MemberName ChartData;
    public static MemberName ChartDefinition;
    public static MemberName NonComputedReportItems;
    public static MemberName ComputedReportItems;
    public static MemberName SortedReportItems;
    public static MemberName IsComputed;
    public static MemberName Index;
    public static MemberName StyleAttributes;
    public static MemberName ExpressionList;
    public static MemberName IsExpression;
    public static MemberName StringValue;
    public static MemberName BoolValue;
    public static MemberName IntValue;
    public static MemberName Hidden;
    public static MemberName Toggle;
    public static MemberName Type;
    public static MemberName AggregateType;
    public static MemberName Expressions;
    public static MemberName DuplicateNames;
    public static MemberName Scope;
    public static MemberName Transaction;
    public static MemberName ConnectString;
    public static MemberName DataSets;
    public static MemberName Fields;
    public static MemberName DataField;
    public static MemberName Query;
    public static MemberName CaseSensitivity;
    public static MemberName Collation;
    public static MemberName AccentSensitivity;
    public static MemberName KanatypeSensitivity;
    public static MemberName WidthSensitivity;
    public static MemberName DataRegions;
    public static MemberName CommandType;
    public static MemberName CommandText;
    public static MemberName QueryParameters;
    public static MemberName Timeout;
    public static MemberName StartHidden;
    public static MemberName ReceiverUniqueNames;
    public static MemberName ContainerUniqueNames;
    public static MemberName SenderUniqueName;
    public static MemberName Offset;
    public static MemberName OffsetInfo;
    public static MemberName UniqueName;
    public static MemberName ReportItemDef;
    public static MemberName ReportItemColInstance;
    public static MemberName StyleAttributeValues;
    public static MemberName RequestUserName;
    public static MemberName BodyUniqueName;
    public static MemberName ChildrenUniqueNames;
    public static MemberName ReportItemInstances;
    public static MemberName ReportItemColDef;
    public static MemberName ChildrenNonComputedUniqueNames;
    public static MemberName FormattedValue;
    public static MemberName OriginalValue;
    public static MemberName Duplicate;
    public static MemberName ImageValue;
    public static MemberName ParameterValues;
    public static MemberName ListContentInstances;
    public static MemberName ListDef;
    public static MemberName CornerContent;
    public static MemberName ColumnInstances;
    public static MemberName RowInstances;
    public static MemberName Cells;
    public static MemberName InstanceCountOfInnerRowWithPageBreak;
    public static MemberName CornerNonComputedNames;
    public static MemberName MatrixHeadingDef;
    public static MemberName Content;
    public static MemberName SubHeadingInstances;
    public static MemberName IsSubtotal;
    public static MemberName ContentUniqueNames;
    public static MemberName HeadingCellIndex;
    public static MemberName HeadingSpan;
    public static MemberName RowIndex;
    public static MemberName ColumnIndex;
    public static MemberName HeaderRowInstances;
    public static MemberName TableGroupInstances;
    public static MemberName DetailRowInstances;
    public static MemberName FooterRowInstances;
    public static MemberName TableGroupDef;
    public static MemberName SubGroupInstances;
    public static MemberName TableRowReportItemColInstance;
    public static MemberName TableRowDef;
    public static MemberName DocumentMap;
    public static MemberName ShowHideSenderInfo;
    public static MemberName ShowHideReceiverInfo;
    public static MemberName LastID;
    public static MemberName Id;
    public static MemberName Children;
    public static MemberName DataType;
    public static MemberName Nullable;
    public static MemberName Prompt;
    public static MemberName PromptUser;
    public static MemberName IsUserSupplied;
    public static MemberName QuickFind;
    public static MemberName Images;
    public static MemberName Bookmark;
    public static MemberName IntegratedSecurity;
    public static MemberName DataSourceReference;
    public static MemberName LinkToChild;
    public static MemberName DrillthroughReportName;
    public static MemberName DrillthroughParameters;
    public static MemberName DrillthroughParametersOmits;
    public static MemberName BookmarkLink;
    public static MemberName LayoutDirection;
    public static MemberName ColSpans;
    public static MemberName IDs;
    public static MemberName CellIDs;
    public static MemberName Expression;
    public static MemberName Operator;
    public static MemberName Values;
    public static MemberName Filters;
    public static MemberName OwcCellNames;
    public static MemberName OwcGroupExpression;
    public static MemberName GroupExpressionValue;
    public static MemberName SubReports;
    public static MemberName HasImageStreams;
    public static MemberName IsFullSize;
    public static MemberName HasBookmarks;
    public static MemberName HasLabels;
    public static MemberName SnapshotProcessingEnabled;
    public static MemberName ReaderExtensionsSupported;
    public static MemberName RecordFields;
    public static MemberName IsAggregateRow;
    public static MemberName AggregationFieldCount;
    public static MemberName FieldValue;
    public static MemberName IsAggregateField;
    public static MemberName RecordSetSize;
    public static MemberName DrillthroughBookmarkLink;
    public static MemberName UsedInQuery;
    public static MemberName UsedOnlyInParameters;
    public static MemberName AllowBlank;
    public static MemberName MultiValue;
    public static MemberName ValidValues;
    public static MemberName DefaultValue;
    public static MemberName ValidValuesDataSource;
    public static MemberName ValidValuesValueExpression;
    public static MemberName ValidValuesLabelExpression;
    public static MemberName DefaultValueDataSource;
    public static MemberName DataSourceIndex;
    public static MemberName DataSetIndex;
    public static MemberName ValueFieldIndex;
    public static MemberName LabelFieldIndex;
    public static MemberName DynamicValidValues;
    public static MemberName DynamicDefaultValue;
    public static MemberName DependencyList;
    public static MemberName NonCalculatedFieldCount;
    public static MemberName ExecutionTime;
    public static MemberName ReportServerUrl;
    public static MemberName ReportFolder;
    public static MemberName Language;
    public static MemberName Formula;
    public static MemberName ProcessingMessages;
    public static MemberName Code;
    public static MemberName Severity;
    public static MemberName ObjectType;
    public static MemberName ObjectName;
    public static MemberName PropertyName;
    public static MemberName Message;
    public static MemberName CommonCode;
    public static MemberName ReportItemsWithHideDuplicates;
    public static MemberName SubtotalHeadingInstance;
    public static MemberName StyleExpressionList;
    public static MemberName ExprHostID;
    public static MemberName HasExprHost;
    public static MemberName ValueReferenced;
    public static MemberName Omit;
    public static MemberName ToolTip;
    public static MemberName Parent;
    public static MemberName TableDetail;
    public static MemberName DetailGroup;
    public static MemberName TableDetailDef;
    public static MemberName TableDetailInstances;
    public static MemberName DetailRunningValues;
    public static MemberName PostSortAggregates;
    public static MemberName RecursiveAggregates;
    public static MemberName CellPostSortAggregates;
    public static MemberName HasSpecialRecursiveAggregates;
    public static MemberName RecursiveSender;
    public static MemberName RecursiveReceiver;
    public static MemberName Title;
    public static MemberName Action;
    public static MemberName ChartHeadingDef;
    public static MemberName HeadingLabel;
    public static MemberName CellDataPoints;
    public static MemberName MultiChart;
    public static MemberName MultiChartInstances;
    public static MemberName CategoryAxis;
    public static MemberName ValueAxis;
    public static MemberName SubType;
    public static MemberName PointWidth;
    public static MemberName ThreeDProperties;
    public static MemberName DataTransform;
    public static MemberName DataSchema;
    public static MemberName DataElementName;
    public static MemberName DataElementStyleAttribute;
    public static MemberName DataElementOutput;
    public static MemberName DataCollectionName;
    public static MemberName CellDataElementName;
    public static MemberName CellDataElementOutput;
    public static MemberName DataInstanceName;
    public static MemberName DataInstanceElementOutput;
    public static MemberName DetailDataElementName;
    public static MemberName DetailDataCollectionName;
    public static MemberName DetailDataElementOutput;
    public static MemberName Palette;
    public static MemberName Labels;
    public static MemberName Caption;
    public static MemberName Axis;
    public static MemberName Legend;
    public static MemberName LegendStyleAttributeValues;
    public static MemberName PlotArea;
    public static MemberName PlotAreaStyleAttributeValues;
    public static MemberName Layout;
    public static MemberName MajorTickMarks;
    public static MemberName MinorTickMarks;
    public static MemberName MajorGridLines;
    public static MemberName MinorGridLines;
    public static MemberName MajorInterval;
    public static MemberName MinorInterval;
    public static MemberName Reverse;
    public static MemberName ShowGridLines;
    public static MemberName MajorGridLinesStyleAttributeValues;
    public static MemberName MinorGridLinesStyleAttributeValues;
    public static MemberName Min;
    public static MemberName Max;
    public static MemberName AutoScaleMin;
    public static MemberName AutoScaleMax;
    public static MemberName LogScale;
    public static MemberName SplitAxisStart;
    public static MemberName SplitAxisEnd;
    public static MemberName CrossAt;
    public static MemberName AutoCrossAt;
    public static MemberName DataValues;
    public static MemberName DataLabel;
    public static MemberName MarkerType;
    public static MemberName MarkerSize;
    public static MemberName MarkerStyleClass;
    public static MemberName MaxCount;
    public static MemberName SyncScale;
    public static MemberName PerspectiveProjectionMode;
    public static MemberName Rotation;
    public static MemberName Inclination;
    public static MemberName Perspective;
    public static MemberName HeightRatio;
    public static MemberName DepthRatio;
    public static MemberName Shading;
    public static MemberName GapDepth;
    public static MemberName WallThickness;
    public static MemberName Origin;
    public static MemberName DataLabelStyleAttributeValues;
    public static MemberName DataLabelValue;
    public static MemberName MarkerStyleAttributeValues;
    public static MemberName Visible;
    public static MemberName Interlaced;
    public static MemberName InsidePlotArea;
    public static MemberName Enabled;
    public static MemberName DrawingStyleCube;
    public static MemberName Clustered;
    public static MemberName Margin;
    public static MemberName CellRunningValues;
    public static MemberName MultiCharts;
    public static MemberName DataPointIndex;
    public static MemberName ChartGroupExpression;
    public static MemberName Scalar;
    public static MemberName StaticGroupingIndex;
    public static MemberName PlotTypesLine;
    public static MemberName BrokenImage;
    public static MemberName CultureName;
    public static MemberName StartPage;
    public static MemberName EndPage;
    public static MemberName DistanceFromReportTop;
    public static MemberName DistanceBeforeTop;
    public static MemberName DistanceBelowChildren;
    public static MemberName SiblingAboveMe;
    public static MemberName IsListMostInner;
    public static MemberName ChildrenStartAndEndPages;
    public static MemberName NumberOfPages;
    public static MemberName Page;
    public static MemberName IntermediateFormatVersion;
    public static MemberName IntermediateFormatVersionMajor;
    public static MemberName IntermediateFormatVersionMinor;
    public static MemberName IntermediateFormatVersionBuild;
    public static MemberName LCID;
    public static MemberName ReportVersion;
    public static MemberName ParametersFromCatalog;
    public static MemberName StreamName;
    public static MemberName ActionItem;
    public static MemberName ActionItemList;
    public static MemberName CoumputedActionsCount;
    public static MemberName CustomProperties;
    public static MemberName CustomPropertyInstances;
    public static MemberName DataRowCells;
    public static MemberName Static;
    public static MemberName AltReportItemColInstance;
    public static MemberName DataValueInstances;
    public static MemberName HeadingDefinition;
    public static MemberName InnerHeadings;
    public static MemberName CellExprHostIDs;
    public static MemberName RDLRowIndex;
    public static MemberName RDLColumnIndex;
    public static MemberName BookmarksInfo;
    public static MemberName HasDocumentMap;
    public static MemberName HasShowHide;
    public static MemberName DocMapPage;
    public static MemberName RenderReportItemColDef;
    public static MemberName ImageMapAreas;
    public static MemberName Shape;
    public static MemberName Coordinates;
    public static MemberName ActionInstance;
    public static MemberName EventSource;
    public static MemberName EventSourceScopeInfo;
    public static MemberName DataSetID;
    public static MemberName ContainingScopes;
    public static MemberName UserSort;
    public static MemberName SortExpressionScope;
    public static MemberName GroupsInSortTarget;
    public static MemberName SortTarget;
    public static MemberName HasDetailUserSortFilter;
    public static MemberName SaveGroupExprValues;
    public static MemberName HasUserSortFilter;
    public static MemberName IsMatrixCellScope;
    public static MemberName UserSortExpressions;
    public static MemberName SortExpressionIndex;
    public static MemberName CommandTextValue;
    public static MemberName RewrittenCommandText;
    public static MemberName FixedHeader;
    public static MemberName RowGroupingFixedHeader;
    public static MemberName ColumnGroupingFixedHeader;
    public static MemberName SharedDataSourceReferencePath;
    public static MemberName PropertyNames;
    public static MemberName FieldPropertyNames;
    public static MemberName FieldPropertyValues;
    public static MemberName DynamicFieldReferences;
    public static MemberName DynamicPropertyReferences;
    public static MemberName ReferencedProperties;
    public static MemberName CompiledCodeGeneratedWithRefusedPermissions;
    public static MemberName InteractiveHeight;
    public static MemberName InteractiveHeightValue;
    public static MemberName InteractiveWidth;
    public static MemberName InteractiveWidthValue;
    public static MemberName PageNumber;
    public static MemberName PageSectionOffsets;
    public static MemberName PageSectionInstanceInfo;
    public static MemberName SimpleDetailRows;
    public static MemberName SimpleDetailStartUniqueName;
    public static MemberName DetailScopeSubReports;
    public static MemberName DataSetUniqueNameMap;
    public static MemberName LookupTable;
    public static MemberName IsSubReportTopLevelScope;
    public static MemberName NonDetailSortFiltersInScope;
    public static MemberName DetailSortFiltersInScope;
    public static MemberName DrillthroughHashtable;
    public static MemberName RewrittenCommands;
    public static MemberName CompareOptions;
    public static MemberName InterpretSubtotalsAsDetails;
}
internal enum Microsoft.ReportingServices.ReportProcessing.Persistence.ObjectType : Enum {
    public int value__;
    public static ObjectType None;
    public static ObjectType IDOwner;
    public static ObjectType ReportItem;
    public static ObjectType ReportItemList;
    public static ObjectType Report;
    public static ObjectType PageSection;
    public static ObjectType Line;
    public static ObjectType Rectangle;
    public static ObjectType Image;
    public static ObjectType ImageStreamNames;
    public static ObjectType CheckBox;
    public static ObjectType TextBox;
    public static ObjectType SubReport;
    public static ObjectType ActiveXControl;
    public static ObjectType DataRegion;
    public static ObjectType DataRegionList;
    public static ObjectType ReportHierarchyNode;
    public static ObjectType Grouping;
    public static ObjectType Sorting;
    public static ObjectType List;
    public static ObjectType Pivot;
    public static ObjectType Matrix;
    public static ObjectType PivotHeading;
    public static ObjectType MatrixHeading;
    public static ObjectType MatrixColumn;
    public static ObjectType MatrixColumnList;
    public static ObjectType MatrixRow;
    public static ObjectType MatrixRowList;
    public static ObjectType Subtotal;
    public static ObjectType Table;
    public static ObjectType TableColumn;
    public static ObjectType TableColumnList;
    public static ObjectType TableGroup;
    public static ObjectType TableRow;
    public static ObjectType TableRowList;
    public static ObjectType OWCChart;
    public static ObjectType ChartColumn;
    public static ObjectType ChartColumnList;
    public static ObjectType ReportItemCollection;
    public static ObjectType ReportItemIndexer;
    public static ObjectType ReportItemIndexerList;
    public static ObjectType Style;
    public static ObjectType StyleAttributeHashtable;
    public static ObjectType AttributeInfo;
    public static ObjectType Visibility;
    public static ObjectType ExpressionInfo;
    public static ObjectType ExpressionInfoList;
    public static ObjectType DataAggregateInfo;
    public static ObjectType DataAggregateInfoList;
    public static ObjectType RunningValueInfo;
    public static ObjectType RunningValueInfoList;
    public static ObjectType EmbeddedImageHashtable;
    public static ObjectType Filter;
    public static ObjectType FilterList;
    public static ObjectType DataSource;
    public static ObjectType DataSourceList;
    public static ObjectType DataSet;
    public static ObjectType DataSetList;
    public static ObjectType ReportQuery;
    public static ObjectType Field;
    public static ObjectType DataFieldList;
    public static ObjectType ParameterValue;
    public static ObjectType ParameterValueList;
    public static ObjectType StringList;
    public static ObjectType IntList;
    public static ObjectType BoolList;
    public static ObjectType ReportSnapshot;
    public static ObjectType SenderInformation;
    public static ObjectType SenderInformationHashtable;
    public static ObjectType ReceiverInformation;
    public static ObjectType ReceiverInformationHashtable;
    public static ObjectType DocumentMapNode;
    public static ObjectType InfoBase;
    public static ObjectType OffsetInfo;
    public static ObjectType InstanceInfo;
    public static ObjectType ReportItemInstanceInfo;
    public static ObjectType ReportInstanceInfo;
    public static ObjectType ReportItemColInstanceInfo;
    public static ObjectType LineInstanceInfo;
    public static ObjectType TextBoxInstanceInfo;
    public static ObjectType RectangleInstanceInfo;
    public static ObjectType CheckBoxInstanceInfo;
    public static ObjectType ImageInstanceInfo;
    public static ObjectType SubReportInstanceInfo;
    public static ObjectType ActiveXControlInstanceInfo;
    public static ObjectType ListInstanceInfo;
    public static ObjectType ListContentInstanceInfo;
    public static ObjectType MatrixInstanceInfo;
    public static ObjectType MatrixHeadingInstanceInfo;
    public static ObjectType MatrixCellInstanceInfo;
    public static ObjectType TableInstanceInfo;
    public static ObjectType TableGroupInstanceInfo;
    public static ObjectType TableRowInstanceInfo;
    public static ObjectType OWCChartInstanceInfo;
    public static ObjectType ChartInstanceInfo;
    public static ObjectType NonComputedUniqueNames;
    public static ObjectType InstanceInfoOwner;
    public static ObjectType ReportItemInstance;
    public static ObjectType ReportItemInstanceList;
    public static ObjectType ReportInstance;
    public static ObjectType ReportItemColInstance;
    public static ObjectType LineInstance;
    public static ObjectType TextBoxInstance;
    public static ObjectType RectangleInstance;
    public static ObjectType CheckBoxInstance;
    public static ObjectType ImageInstance;
    public static ObjectType SubReportInstance;
    public static ObjectType ActiveXControlInstance;
    public static ObjectType ListInstance;
    public static ObjectType ListContentInstance;
    public static ObjectType ListContentInstanceList;
    public static ObjectType MatrixInstance;
    public static ObjectType MatrixHeadingInstance;
    public static ObjectType MatrixHeadingInstanceList;
    public static ObjectType MatrixCellInstance;
    public static ObjectType MatrixCellInstanceList;
    public static ObjectType MatrixCellInstancesList;
    public static ObjectType TableInstance;
    public static ObjectType TableRowInstance;
    public static ObjectType TableColumnInstance;
    public static ObjectType TableGroupInstance;
    public static ObjectType TableGroupInstanceList;
    public static ObjectType OWCChartInstance;
    public static ObjectType ParameterInfo;
    public static ObjectType ParameterInfoCollection;
    public static ObjectType Variant;
    public static ObjectType VariantList;
    public static ObjectType QuickFindHashtable;
    public static ObjectType SubReportList;
    public static ObjectType RecordSetInfo;
    public static ObjectType RecordRow;
    public static ObjectType RecordField;
    public static ObjectType ValidValue;
    public static ObjectType ValidValueList;
    public static ObjectType ParameterDataSource;
    public static ObjectType ParameterDef;
    public static ObjectType ParameterDefList;
    public static ObjectType ParameterBase;
    public static ObjectType ProcessingMessageList;
    public static ObjectType ProcessingMessage;
    public static ObjectType MatrixSubtotalHeadingInstanceInfo;
    public static ObjectType MatrixSubtotalCellInstance;
    public static ObjectType CodeClass;
    public static ObjectType CodeClassList;
    public static ObjectType TableDetail;
    public static ObjectType TableDetailInstance;
    public static ObjectType TableDetailInstanceList;
    public static ObjectType TableDetailInstanceInfo;
    public static ObjectType String;
    public static ObjectType Action;
    public static ObjectType ActionInstance;
    public static ObjectType Chart;
    public static ObjectType ChartHeading;
    public static ObjectType ChartDataPoint;
    public static ObjectType ChartDataPointList;
    public static ObjectType MultiChart;
    public static ObjectType MultiChartInstance;
    public static ObjectType MultiChartInstanceList;
    public static ObjectType Axis;
    public static ObjectType AxisInstance;
    public static ObjectType ChartTitle;
    public static ObjectType ChartTitleInstance;
    public static ObjectType ThreeDProperties;
    public static ObjectType PlotArea;
    public static ObjectType Legend;
    public static ObjectType GridLines;
    public static ObjectType ChartDataLabel;
    public static ObjectType ChartInstance;
    public static ObjectType ChartHeadingInstance;
    public static ObjectType ChartHeadingInstanceInfo;
    public static ObjectType ChartHeadingInstanceList;
    public static ObjectType ChartDataPointInstance;
    public static ObjectType ChartDataPointInstanceInfo;
    public static ObjectType ChartDataPointInstanceList;
    public static ObjectType ChartDataPointInstancesList;
    public static ObjectType RenderingPagesRanges;
    public static ObjectType RenderingPagesRangesList;
    public static ObjectType IntermediateFormatVersion;
    public static ObjectType ImageInfo;
    public static ObjectType ActionItem;
    public static ObjectType ActionItemInstance;
    public static ObjectType ActionItemList;
    public static ObjectType ActionItemInstanceList;
    public static ObjectType DataValue;
    public static ObjectType DataValueInstance;
    public static ObjectType DataValueList;
    public static ObjectType DataValueInstanceList;
    public static ObjectType Tablix;
    public static ObjectType TablixHeading;
    public static ObjectType CustomReportItem;
    public static ObjectType CustomReportItemInstance;
    public static ObjectType CustomReportItemHeading;
    public static ObjectType CustomReportItemHeadingInstance;
    public static ObjectType CustomReportItemHeadingList;
    public static ObjectType CustomReportItemHeadingInstanceList;
    public static ObjectType DataCellsList;
    public static ObjectType DataCellList;
    public static ObjectType CustomReportItemCellInstance;
    public static ObjectType CustomReportItemCellInstanceList;
    public static ObjectType CustomReportItemCellInstancesList;
    public static ObjectType DataValueCRIList;
    public static ObjectType BookmarkInformation;
    public static ObjectType BookmarksHashtable;
    public static ObjectType DrillthroughInformation;
    public static ObjectType DrillthroughHashtable;
    public static ObjectType DrillthroughParameters;
    public static ObjectType CustomReportItemInstanceInfo;
    public static ObjectType ImageMapAreaInstanceList;
    public static ObjectType ImageMapAreaInstance;
    public static ObjectType Single;
    public static ObjectType SortFilterEventInfoHashtable;
    public static ObjectType SortFilterEventInfo;
    public static ObjectType EndUserSort;
    public static ObjectType ISortFilterScope;
    public static ObjectType GroupingList;
    public static ObjectType RecordSetPropertyNames;
    public static ObjectType RecordSetPropertyNamesList;
    public static ObjectType FieldPropertyHashtable;
    public static ObjectType Int64List;
    public static ObjectType PageSectionInstance;
    public static ObjectType PageSectionInstanceList;
    public static ObjectType PageSectionInstanceInfo;
    public static ObjectType SimpleTextBoxInstanceInfo;
    public static ObjectType ScopeLookupTable;
    public static ObjectType InScopeSortFilterHashtable;
    public static ObjectType ReportDrillthroughInfo;
    public static ObjectType TokensHashtable;
    public static ObjectType MaxValue;
}
[AttributeUsageAttribute("256")]
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.ReferenceAttribute : Attribute {
}
internal enum Microsoft.ReportingServices.ReportProcessing.Persistence.Token : Enum {
    public byte value__;
    public static Token Null;
    public static Token Object;
    public static Token EndObject;
    public static Token Reference;
    public static Token Enum;
    public static Token TypedArray;
    public static Token Array;
    public static Token Declaration;
    public static Token DataFieldInfo;
    public static Token Guid;
    public static Token String;
    public static Token DateTime;
    public static Token TimeSpan;
    public static Token Char;
    public static Token Boolean;
    public static Token Int16;
    public static Token Int32;
    public static Token Int64;
    public static Token UInt16;
    public static Token UInt32;
    public static Token UInt64;
    public static Token Byte;
    public static Token SByte;
    public static Token Single;
    public static Token Double;
    public static Token Decimal;
}
internal class Microsoft.ReportingServices.ReportProcessing.Persistence.VersionStamp : object {
    private static Byte[] Stamp;
    private static VersionStamp();
    internal static Byte[] GetBytes();
    internal static bool Validate(Byte[] stamp);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.Pivot : DataRegion {
    private int m_columnCount;
    private int m_rowCount;
    protected DataAggregateInfoList m_cellAggregates;
    protected ProcessingInnerGroupings m_processingInnerGrouping;
    protected RunningValueInfoList m_runningValues;
    protected DataAggregateInfoList m_cellPostSortAggregates;
    private DataElementOutputTypes m_cellDataElementOutput;
    protected RuntimePivotGroupRootObj m_currentOuterHeadingGroupRoot;
    protected int m_innermostRowFilterLevel;
    protected int m_innermostColumnFilterLevel;
    protected Int32[] m_outerGroupingIndexes;
    protected AggregateRowInfo[] m_outerGroupingAggregateRowInfo;
    protected AggregateRowInfo m_pivotAggregateRowInfo;
    protected bool m_processCellRunningValues;
    protected bool m_processOutermostSTCellRunningValues;
    internal PivotHeading PivotColumns { get; }
    internal PivotHeading PivotRows { get; }
    internal int ColumnCount { get; internal set; }
    internal int RowCount { get; internal set; }
    internal DataAggregateInfoList CellAggregates { get; internal set; }
    internal DataAggregateInfoList CellPostSortAggregates { get; internal set; }
    internal RunningValueInfoList PivotCellRunningValues { get; }
    internal ProcessingInnerGroupings ProcessingInnerGrouping { get; internal set; }
    internal PivotHeading PivotStaticColumns { get; }
    internal PivotHeading PivotStaticRows { get; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal DataElementOutputTypes CellDataElementOutput { get; internal set; }
    internal int InnermostRowFilterLevel { get; internal set; }
    internal int InnermostColumnFilterLevel { get; internal set; }
    internal Int32[] OuterGroupingIndexes { get; }
    internal bool ProcessCellRunningValues { get; internal set; }
    internal bool ProcessOutermostSTCellRunningValues { get; internal set; }
    internal RuntimePivotGroupRootObj CurrentOuterHeadingGroupRoot { get; internal set; }
    internal Pivot(ReportItem parent);
    internal Pivot(int id, ReportItem parent);
    internal abstract virtual PivotHeading get_PivotColumns();
    internal abstract virtual PivotHeading get_PivotRows();
    internal int get_ColumnCount();
    internal void set_ColumnCount(int value);
    internal int get_RowCount();
    internal void set_RowCount(int value);
    internal DataAggregateInfoList get_CellAggregates();
    internal void set_CellAggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_CellPostSortAggregates();
    internal void set_CellPostSortAggregates(DataAggregateInfoList value);
    internal abstract virtual RunningValueInfoList get_PivotCellRunningValues();
    internal ProcessingInnerGroupings get_ProcessingInnerGrouping();
    internal void set_ProcessingInnerGrouping(ProcessingInnerGroupings value);
    internal abstract virtual PivotHeading get_PivotStaticColumns();
    internal abstract virtual PivotHeading get_PivotStaticRows();
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal DataElementOutputTypes get_CellDataElementOutput();
    internal void set_CellDataElementOutput(DataElementOutputTypes value);
    internal int get_InnermostRowFilterLevel();
    internal void set_InnermostRowFilterLevel(int value);
    internal int get_InnermostColumnFilterLevel();
    internal void set_InnermostColumnFilterLevel(int value);
    internal Int32[] get_OuterGroupingIndexes();
    internal bool get_ProcessCellRunningValues();
    internal void set_ProcessCellRunningValues(bool value);
    internal bool get_ProcessOutermostSTCellRunningValues();
    internal void set_ProcessOutermostSTCellRunningValues(bool value);
    internal RuntimePivotGroupRootObj get_CurrentOuterHeadingGroupRoot();
    internal void set_CurrentOuterHeadingGroupRoot(RuntimePivotGroupRootObj value);
    internal void CopyHeadingAggregates(PivotHeading heading);
    internal static void CopyAggregates(DataAggregateInfoList srcAggregates, DataAggregateInfoList targetAggregates);
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetAggregateLists();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetPostSortAggregateLists();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.ClearIfEmpty();
    internal bool SubtotalInInnerHeading(PivotHeading& innerHeading, PivotHeading& staticHeading);
    internal void SkipStaticHeading(PivotHeading& pivotHeading, PivotHeading& staticHeading);
    internal void GetHeadingDefState(PivotHeading& outermostColumn, Boolean& outermostColumnSubtotal, PivotHeading& staticColumn, PivotHeading& outermostRow, Boolean& outermostRowSubtotal, PivotHeading& staticRow);
    internal PivotHeading GetPivotHeading(bool outerHeading);
    internal PivotHeading GetOuterHeading(int level);
    internal int GetDynamicHeadingCount(bool outerGroupings);
    internal int CreateOuterGroupingIndexList();
    internal Hashtable GetOuterScopeNames(int dynamicLevel);
    internal void SavePivotAggregateRowInfo(ProcessingContext pc);
    internal void RestorePivotAggregateRowInfo(ProcessingContext pc);
    internal void SaveOuterGroupingAggregateRowInfo(int headingLevel, ProcessingContext pc);
    internal void SetCellAggregateRowInfo(int headingLevel, ProcessingContext pc);
    internal void ResetOutergGroupingAggregateRowInfo();
    internal static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.PivotHeading : ReportHierarchyNode {
    protected Visibility m_visibility;
    protected Subtotal m_subtotal;
    protected int m_level;
    protected bool m_isColumn;
    protected bool m_hasExprHost;
    protected int m_subtotalSpan;
    private IntList m_IDs;
    protected int m_numberOfStatics;
    protected DataAggregateInfoList m_aggregates;
    protected DataAggregateInfoList m_postSortAggregates;
    protected DataAggregateInfoList m_recursiveAggregates;
    protected AggregatesImpl m_outermostSTCellRVCol;
    protected AggregatesImpl m_cellRVCol;
    protected AggregatesImpl[] m_outermostSTCellScopedRVCollections;
    protected AggregatesImpl[] m_cellScopedRVCollections;
    protected Hashtable[] m_cellScopeNames;
    internal PivotHeading SubHeading { get; internal set; }
    internal Visibility Visibility { get; internal set; }
    internal Subtotal Subtotal { get; internal set; }
    internal int Level { get; internal set; }
    internal bool IsColumn { get; internal set; }
    internal bool HasExprHost { get; internal set; }
    internal int SubtotalSpan { get; internal set; }
    internal IntList IDs { get; internal set; }
    internal DataAggregateInfoList Aggregates { get; internal set; }
    internal DataAggregateInfoList PostSortAggregates { get; internal set; }
    internal DataAggregateInfoList RecursiveAggregates { get; internal set; }
    internal int NumberOfStatics { get; internal set; }
    internal AggregatesImpl OutermostSTCellRVCol { get; internal set; }
    internal AggregatesImpl CellRVCol { get; internal set; }
    internal AggregatesImpl[] OutermostSTCellScopedRVCollections { get; internal set; }
    internal AggregatesImpl[] CellScopedRVCollections { get; internal set; }
    internal Hashtable[] CellScopeNames { get; internal set; }
    internal PivotHeading(int id, DataRegion matrixDef);
    internal PivotHeading get_SubHeading();
    internal void set_SubHeading(PivotHeading value);
    internal Visibility get_Visibility();
    internal void set_Visibility(Visibility value);
    internal Subtotal get_Subtotal();
    internal void set_Subtotal(Subtotal value);
    internal int get_Level();
    internal void set_Level(int value);
    internal bool get_IsColumn();
    internal void set_IsColumn(bool value);
    internal bool get_HasExprHost();
    internal void set_HasExprHost(bool value);
    internal int get_SubtotalSpan();
    internal void set_SubtotalSpan(int value);
    internal IntList get_IDs();
    internal void set_IDs(IntList value);
    internal DataAggregateInfoList get_Aggregates();
    internal void set_Aggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_PostSortAggregates();
    internal void set_PostSortAggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_RecursiveAggregates();
    internal void set_RecursiveAggregates(DataAggregateInfoList value);
    internal int get_NumberOfStatics();
    internal void set_NumberOfStatics(int value);
    internal AggregatesImpl get_OutermostSTCellRVCol();
    internal void set_OutermostSTCellRVCol(AggregatesImpl value);
    internal AggregatesImpl get_CellRVCol();
    internal void set_CellRVCol(AggregatesImpl value);
    internal AggregatesImpl[] get_OutermostSTCellScopedRVCollections();
    internal void set_OutermostSTCellScopedRVCollections(AggregatesImpl[] value);
    internal AggregatesImpl[] get_CellScopedRVCollections();
    internal void set_CellScopedRVCollections(AggregatesImpl[] value);
    internal Hashtable[] get_CellScopeNames();
    internal void set_CellScopeNames(Hashtable[] value);
    internal void CopySubHeadingAggregates();
    internal void TransferHeadingAggregates();
    internal PivotHeading GetInnerStaticHeading();
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.PlotArea : object {
    private Origins m_origin;
    private Style m_styleClass;
    internal Origins Origin { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal Origins get_Origin();
    internal void set_Origin(Origins value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.Previous : DataAggregate {
    private object m_value;
    private object m_previous;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.ProcessingAbortedException : RSException {
    private Reason m_reason;
    public Reason ReasonForAbort { get; }
    private ProcessingAbortedException(SerializationInfo info, StreamingContext context);
    internal ProcessingAbortedException(Exception innerException);
    public Reason get_ReasonForAbort();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ProcessingContext : object {
    private ICatalogItemContext m_reportContext;
    private string m_requestUserName;
    private ParameterInfoCollection m_parameters;
    private ParameterInfoCollection m_queryParameters;
    private OnDemandSubReportCallback m_subReportCallback;
    private IGetResource m_getResourceFunction;
    private ExecutionType m_interactiveExecution;
    private CultureInfo m_userLanguage;
    private UserProfileState m_allowUserProfileState;
    private UserProfileState m_initialUserProfileState;
    private ReportRuntimeSetup m_reportRuntimeSetup;
    private bool m_isHistorySnapshot;
    private IChunkFactory m_chunkFactory;
    private CreateAndRegisterStream m_createStreamCallback;
    private IJobContext m_jobContext;
    private IExtensionFactory m_extFactory;
    private IDataProtection m_dataProtection;
    private CreateReportChunk m_createReportChunkCallback;
    internal bool EnableDataBackedParameters { get; }
    internal ICatalogItemContext ReportContext { get; }
    internal string RequestUserName { get; }
    public ParameterInfoCollection Parameters { get; }
    internal OnDemandSubReportCallback OnDemandSubReportCallback { get; }
    internal CreateReportChunk CreateReportChunkCallback { get; internal set; }
    public IChunkFactory ChunkFactory { get; public set; }
    internal IGetResource GetResourceCallback { get; }
    internal ExecutionType InteractiveExecution { get; }
    internal CultureInfo UserLanguage { get; }
    internal UserProfileState AllowUserProfileState { get; }
    internal UserProfileState InitialUserProfileState { get; }
    internal ReportRuntimeSetup ReportRuntimeSetup { get; }
    internal bool IsHistorySnapshot { get; }
    internal ReportProcessingFlags ReportProcessingFlags { get; }
    internal IProcessingDataExtensionConnection CreateAndSetupDataExtensionFunction { get; }
    internal RuntimeDataSourceInfoCollection DataSources { get; }
    internal bool CanShareDataSets { get; }
    internal CreateAndRegisterStream CreateStreamCallback { get; }
    public ParameterInfoCollection QueryParameters { get; }
    public IJobContext JobContext { get; }
    public IExtensionFactory ExtFactory { get; }
    public IDataProtection DataProtection { get; }
    internal ProcessingContext(ICatalogItemContext reportContext, string requestUserName, ParameterInfoCollection parameters, OnDemandSubReportCallback subReportCallback, IGetResource getResourceFunction, IChunkFactory createChunkFactory, ExecutionType interactiveExecution, CultureInfo culture, UserProfileState allowUserProfileState, UserProfileState initialUserProfileState, ReportRuntimeSetup reportRuntimeSetup, CreateAndRegisterStream createStreamCallback, bool isHistorySnapshot, IJobContext jobContext, IExtensionFactory extFactory, IDataProtection dataProtection);
    internal abstract virtual ProcessingContext CreateInternalProcessingContext(string chartName, Report report, ErrorContext errorContext, DateTime executionTime, UserProfileState allowUserProfileState, bool isHistorySnapshot, bool snapshotProcessing, bool processWithCachedData, GetReportChunk getChunkCallback, CreateReportChunk cacheDataCallback);
    internal abstract virtual ProcessingContext ParametersInternalProcessingContext(ErrorContext errorContext, DateTime executionTimeStamp, bool isSnapshot);
    internal abstract virtual bool get_EnableDataBackedParameters();
    internal ICatalogItemContext get_ReportContext();
    internal string get_RequestUserName();
    public ParameterInfoCollection get_Parameters();
    internal OnDemandSubReportCallback get_OnDemandSubReportCallback();
    internal CreateReportChunk get_CreateReportChunkCallback();
    internal void set_CreateReportChunkCallback(CreateReportChunk value);
    public IChunkFactory get_ChunkFactory();
    public void set_ChunkFactory(IChunkFactory value);
    internal IGetResource get_GetResourceCallback();
    internal ExecutionType get_InteractiveExecution();
    internal CultureInfo get_UserLanguage();
    internal UserProfileState get_AllowUserProfileState();
    internal UserProfileState get_InitialUserProfileState();
    internal ReportRuntimeSetup get_ReportRuntimeSetup();
    internal bool get_IsHistorySnapshot();
    internal ReportProcessingFlags get_ReportProcessingFlags();
    internal abstract virtual IProcessingDataExtensionConnection get_CreateAndSetupDataExtensionFunction();
    internal abstract virtual RuntimeDataSourceInfoCollection get_DataSources();
    internal abstract virtual bool get_CanShareDataSets();
    internal CreateAndRegisterStream get_CreateStreamCallback();
    public ParameterInfoCollection get_QueryParameters();
    public IJobContext get_JobContext();
    public IExtensionFactory get_ExtFactory();
    public IDataProtection get_DataProtection();
}
internal enum Microsoft.ReportingServices.ReportProcessing.ProcessingEngine : Enum {
    public int value__;
    public static ProcessingEngine YukonEngine;
    public static ProcessingEngine OnDemandEngine;
}
internal enum Microsoft.ReportingServices.ReportProcessing.ProcessingErrorCode : Enum {
    public int value__;
    public static ProcessingErrorCode rsNone;
    public static ProcessingErrorCode rsAggregateInFilterExpression;
    public static ProcessingErrorCode rsAggregateInGroupExpression;
    public static ProcessingErrorCode rsAggregateInQueryParameterExpression;
    public static ProcessingErrorCode rsAggregateInReportParameterExpression;
    public static ProcessingErrorCode rsAggregateInReportLanguageExpression;
    public static ProcessingErrorCode rsAggregateInCalculatedFieldExpression;
    public static ProcessingErrorCode rsAggregateofAggregate;
    public static ProcessingErrorCode rsAggregateReportItemInBody;
    public static ProcessingErrorCode rsBinaryConstant;
    public static ProcessingErrorCode rsChartSeriesPlotTypeIgnored;
    public static ProcessingErrorCode rsCompilerErrorInExpression;
    public static ProcessingErrorCode rsCompilerErrorInCode;
    public static ProcessingErrorCode rsCompilerErrorInClassInstanceDeclaration;
    public static ProcessingErrorCode rsUnexpectedCompilerError;
    public static ProcessingErrorCode rsConflictingRunningValueScopesInMatrix;
    public static ProcessingErrorCode rsConflictingRunningValueScopesInTablix;
    public static ProcessingErrorCode rsCountRowsInPageSectionExpression;
    public static ProcessingErrorCode rsCountStarNotSupported;
    public static ProcessingErrorCode rsCountStarRVNotSupported;
    public static ProcessingErrorCode rsCustomAggregateAndFilter;
    public static ProcessingErrorCode rsDataRegionInDetailList;
    public static ProcessingErrorCode rsDataRegionInPageSection;
    public static ProcessingErrorCode rsDataRegionInTableDetailRow;
    public static ProcessingErrorCode rsDataRegionWithoutDataSet;
    public static ProcessingErrorCode rsDataSourceReferenceNotPublished;
    public static ProcessingErrorCode rsDuplicateChartColumnName;
    public static ProcessingErrorCode rsDuplicateChartAxisName;
    public static ProcessingErrorCode rsInvalidChartAxisName;
    public static ProcessingErrorCode rsSpecifiedNonValueAxisName;
    public static ProcessingErrorCode rsValueAxisNameNotFound;
    public static ProcessingErrorCode rsInvalidTextEffect;
    public static ProcessingErrorCode rsInvalidBackgroundHatchType;
    public static ProcessingErrorCode rsInvalidBackgroundImagePosition;
    public static ProcessingErrorCode rsInvalidTextOrientations;
    public static ProcessingErrorCode rsInvalidRowGaugeMemberCannotBeDynamic;
    public static ProcessingErrorCode rsInvalidRowGaugeMemberCannotContainChildMember;
    public static ProcessingErrorCode rsInvalidColumnGaugeMemberCannotContainMultipleChildMember;
    public static ProcessingErrorCode rsPageBreakOnGaugeGroup;
    public static ProcessingErrorCode rsDuplicateChartAreaName;
    public static ProcessingErrorCode rsDuplicateChartTitleName;
    public static ProcessingErrorCode rsDuplicateChartLegendName;
    public static ProcessingErrorCode rsDuplicateChartLegendCustomItem;
    public static ProcessingErrorCode rsDuplicateChartLegendCustomItemCellName;
    public static ProcessingErrorCode rsDuplicateChartLegendColumnName;
    public static ProcessingErrorCode rsDuplicateChartFormulaParameter;
    public static ProcessingErrorCode rsInvalidChartBorderSkinType;
    public static ProcessingErrorCode rsInvalidChartBreakLineType;
    public static ProcessingErrorCode rsInvalidAutoBool;
    public static ProcessingErrorCode rsInvalidChartTickMarkIntervalType;
    public static ProcessingErrorCode rsInvalidChartTickMarkType;
    public static ProcessingErrorCode rsInvalidChartColumnType;
    public static ProcessingErrorCode rsInvalidChartCellType;
    public static ProcessingErrorCode rsInvalidChartCellAlignment;
    public static ProcessingErrorCode rsInvalidChartAllowOutsideChartArea;
    public static ProcessingErrorCode rsInvalidChartCalloutLineAnchor;
    public static ProcessingErrorCode rsInvalidChartCalloutLineStyle;
    public static ProcessingErrorCode rsInvalidChartCalloutStyle;
    public static ProcessingErrorCode rsInvalidChartIntervalType;
    public static ProcessingErrorCode rsInvalidChartCustomItemSeparator;
    public static ProcessingErrorCode rsInvalidChartSeriesFormula;
    public static ProcessingErrorCode rsInvalidChartSeriesType;
    public static ProcessingErrorCode rsInvalidChartSeriesSubtype;
    public static ProcessingErrorCode rsInvalidChartAxisLabelRotation;
    public static ProcessingErrorCode rsInvalidChartAxisLocation;
    public static ProcessingErrorCode rsInvalidChartAxisArrow;
    public static ProcessingErrorCode rsDuplicateClassInstanceName;
    public static ProcessingErrorCode rsDuplicateDataSourceName;
    public static ProcessingErrorCode rsInvalidDataSourceNameLength;
    public static ProcessingErrorCode rsDuplicateEmbeddedImageName;
    public static ProcessingErrorCode rsInvalidEmbeddedImageNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidEmbeddedImageNameLength;
    public static ProcessingErrorCode rsDuplicateFieldName;
    public static ProcessingErrorCode rsDuplicateParameterName;
    public static ProcessingErrorCode rsDuplicateReportItemName;
    public static ProcessingErrorCode rsDuplicateReportParameterName;
    public static ProcessingErrorCode rsDuplicateCaseInsensitiveReportParameterName;
    public static ProcessingErrorCode rsDuplicateScopeName;
    public static ProcessingErrorCode rsExpressionMissingCloseParen;
    public static ProcessingErrorCode rsFieldInPageSectionExpression;
    public static ProcessingErrorCode rsFieldInQueryParameterExpression;
    public static ProcessingErrorCode rsFieldInReportParameterExpression;
    public static ProcessingErrorCode rsFieldInReportLanguageExpression;
    public static ProcessingErrorCode rsGlobalNotDefined;
    public static ProcessingErrorCode rsInvalidAction;
    public static ProcessingErrorCode rsInvalidActionLabel;
    public static ProcessingErrorCode rsInvalidAggregateScope;
    public static ProcessingErrorCode rsInvalidAltReportItem;
    public static ProcessingErrorCode rsInvalidBooleanConstant;
    public static ProcessingErrorCode rsInvalidCategoryGrouping;
    public static ProcessingErrorCode rsInvalidCharacterInExpression;
    public static ProcessingErrorCode rsInvalidChartColumnName;
    public static ProcessingErrorCode rsInvalidChartColumnNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidChartColumnNameLength;
    public static ProcessingErrorCode rsInvalidChartGroupings;
    public static ProcessingErrorCode rsInvalidChartSubType;
    public static ProcessingErrorCode rsInvalidColumnGrouping;
    public static ProcessingErrorCode rsInvalidColumnsInBody;
    public static ProcessingErrorCode rsInvalidCustomAggregateExpression;
    public static ProcessingErrorCode rsInvalidCustomAggregateScope;
    public static ProcessingErrorCode rsInvalidCustomPropertyName;
    public static ProcessingErrorCode rsInvalidDataElementNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidDataSetName;
    public static ProcessingErrorCode rsInvalidDataSource;
    public static ProcessingErrorCode rsInvalidDataSourceReference;
    public static ProcessingErrorCode rsInvalidValidValuesDataSetReference;
    public static ProcessingErrorCode rsInvalidDefaultValueDataSetReference;
    public static ProcessingErrorCode rsInvalidDataSetReferenceField;
    public static ProcessingErrorCode rsInvalidDefaultValue;
    public static ProcessingErrorCode rsInvalidDefaultValueValues;
    public static ProcessingErrorCode rsInvalidDetailDataGrouping;
    public static ProcessingErrorCode rsInvalidEmbeddedImage;
    public static ProcessingErrorCode rsInvalidExpressionScope;
    public static ProcessingErrorCode rsInvalidExpressionScopeDataSet;
    public static ProcessingErrorCode rsInvalidSortExpressionScope;
    public static ProcessingErrorCode rsIneffectiveSortExpressionScope;
    public static ProcessingErrorCode rsInvalidField;
    public static ProcessingErrorCode rsInvalidFieldName;
    public static ProcessingErrorCode rsInvalidFieldNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidFieldNameLength;
    public static ProcessingErrorCode rsInvalidGroupExpressionScope;
    public static ProcessingErrorCode rsInvalidGroupingName;
    public static ProcessingErrorCode rsInvalidGroupingNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidGroupingNameLength;
    public static ProcessingErrorCode rsInvalidHideDuplicateScope;
    public static ProcessingErrorCode rsInvalidURLProtocol;
    public static ProcessingErrorCode rsInvalidIntegerConstant;
    public static ProcessingErrorCode rsInvalidDateTimeConstant;
    public static ProcessingErrorCode rsInvalidFloatConstant;
    public static ProcessingErrorCode rsLabelExpressionOnChartScalarAxisIsIgnored;
    public static ProcessingErrorCode rsInvalidMatrixSubtotalReportItem;
    public static ProcessingErrorCode rsInvalidName;
    public static ProcessingErrorCode rsInvalidNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidNameLength;
    public static ProcessingErrorCode rsInvalidNumberOfFilterValues;
    public static ProcessingErrorCode rsInvalidOmittedExpressionScope;
    public static ProcessingErrorCode rsInvalidOmittedTargetScope;
    public static ProcessingErrorCode rsInvalidParameterName;
    public static ProcessingErrorCode rsInvalidParameterNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidParameterNameLength;
    public static ProcessingErrorCode rsInvalidPreviousAggregateInMatrixCell;
    public static ProcessingErrorCode rsInvalidPreviousAggregateInTablixCell;
    public static ProcessingErrorCode rsInvalidRepeatWith;
    public static ProcessingErrorCode rsInvalidReportDefinition;
    public static ProcessingErrorCode rsInvalidReportParameterDependency;
    public static ProcessingErrorCode rsInvalidRowGrouping;
    public static ProcessingErrorCode rsInvalidRunningValueAggregate;
    public static ProcessingErrorCode rsInvalidScopeInMatrix;
    public static ProcessingErrorCode rsInvalidScopeInTablix;
    public static ProcessingErrorCode rsInvalidSeriesGrouping;
    public static ProcessingErrorCode rsInvalidStaticDataGrouping;
    public static ProcessingErrorCode rsInvalidReportName;
    public static ProcessingErrorCode rsInvalidReportNameCharacters;
    public static ProcessingErrorCode rsInvalidReportUri;
    public static ProcessingErrorCode rsInvalidTargetScope;
    public static ProcessingErrorCode rsInvalidTextboxInPageSection;
    public static ProcessingErrorCode rsInvalidReportItemInPageSection;
    public static ProcessingErrorCode rsInvalidToggleItem;
    public static ProcessingErrorCode rsInvalidValidValues;
    public static ProcessingErrorCode rsInvalidMultiValueParameter;
    public static ProcessingErrorCode rsInvalidParameterDefaultValue;
    public static ProcessingErrorCode rsLineChartMightScatter;
    public static ProcessingErrorCode rsMissingAggregateScope;
    public static ProcessingErrorCode rsMissingChartDataPoints;
    public static ProcessingErrorCode rsMissingCustomPropertyName;
    public static ProcessingErrorCode rsMissingDataSetName;
    public static ProcessingErrorCode rsMissingMIMEType;
    public static ProcessingErrorCode rsMissingParameterDefault;
    public static ProcessingErrorCode rsMultipleGroupExpressionsOnChartScalarAxis;
    public static ProcessingErrorCode rsMultipleGroupingsOnChartScalarAxis;
    public static ProcessingErrorCode rsMultiReportItemsInMatrixSection;
    public static ProcessingErrorCode rsMultiReportItemsInTableCell;
    public static ProcessingErrorCode rsMultiReportItemsInPageSectionExpression;
    public static ProcessingErrorCode rsMultiReportItemsInCustomReportItem;
    public static ProcessingErrorCode rsMultiStaticCategoriesOrSeries;
    public static ProcessingErrorCode rsMultiStaticColumnsOrRows;
    public static ProcessingErrorCode rsNegativeLeftWidth;
    public static ProcessingErrorCode rsNegativeTopHeight;
    public static ProcessingErrorCode rsNonAggregateInMatrixCell;
    public static ProcessingErrorCode rsNonAggregateInTablixCell;
    public static ProcessingErrorCode rsNonExistingScope;
    public static ProcessingErrorCode rsNotAReportDefinition;
    public static ProcessingErrorCode rsNotACurrentReportDefinition;
    public static ProcessingErrorCode rsOverlappingReportItems;
    public static ProcessingErrorCode rsReportItemOutsideContainer;
    public static ProcessingErrorCode rsPageBreakOnMatrixColumnGroup;
    public static ProcessingErrorCode rsPageBreakOnChartGroup;
    public static ProcessingErrorCode rsParameterValueDefinitionMismatch;
    public static ProcessingErrorCode rsParameterValueNullOrBlank;
    public static ProcessingErrorCode rsPreviousAggregateInFilterExpression;
    public static ProcessingErrorCode rsPreviousAggregateInGroupExpression;
    public static ProcessingErrorCode rsPreviousAggregateInPageSectionExpression;
    public static ProcessingErrorCode rsPreviousAggregateInQueryParameterExpression;
    public static ProcessingErrorCode rsPreviousAggregateInReportParameterExpression;
    public static ProcessingErrorCode rsPreviousAggregateInReportLanguageExpression;
    public static ProcessingErrorCode rsPreviousAggregateInSortExpression;
    public static ProcessingErrorCode rsRepeatWithNotPeerDataRegion;
    public static ProcessingErrorCode rsReportItemInFilterExpression;
    public static ProcessingErrorCode rsReportItemInGroupExpression;
    public static ProcessingErrorCode rsReportItemInQueryParameterExpression;
    public static ProcessingErrorCode rsReportItemInReportParameterExpression;
    public static ProcessingErrorCode rsReportItemInSortExpression;
    public static ProcessingErrorCode rsReportItemInReportLanguageExpression;
    public static ProcessingErrorCode rsReportItemInVariableExpression;
    public static ProcessingErrorCode rsReportParameterPropertyTypeMismatch;
    public static ProcessingErrorCode rsRowNumberInFilterExpression;
    public static ProcessingErrorCode rsRowNumberInPageSectionExpression;
    public static ProcessingErrorCode rsRowNumberInQueryParameterExpression;
    public static ProcessingErrorCode rsRowNumberInReportParameterExpression;
    public static ProcessingErrorCode rsRowNumberInReportLanguageExpression;
    public static ProcessingErrorCode rsRowNumberInSortExpression;
    public static ProcessingErrorCode rsRowNumberInVariableExpression;
    public static ProcessingErrorCode rsRunningValueInFilterExpression;
    public static ProcessingErrorCode rsRunningValueInGroupExpression;
    public static ProcessingErrorCode rsRunningValueInPageSectionExpression;
    public static ProcessingErrorCode rsRunningValueInQueryParameterExpression;
    public static ProcessingErrorCode rsRunningValueInReportParameterExpression;
    public static ProcessingErrorCode rsRunningValueInReportLanguageExpression;
    public static ProcessingErrorCode rsRunningValueInSortExpression;
    public static ProcessingErrorCode rsRunningValueInVariableExpression;
    public static ProcessingErrorCode rsScopeInPageSectionExpression;
    public static ProcessingErrorCode rsStaticGroupingOnChartScalarAxis;
    public static ProcessingErrorCode rsToggleInPageSection;
    public static ProcessingErrorCode rsUnsortedCategoryInAreaChart;
    public static ProcessingErrorCode rsWrongNumberOfMatrixCells;
    public static ProcessingErrorCode rsWrongNumberOfMatrixColumns;
    public static ProcessingErrorCode rsWrongNumberOfMatrixRows;
    public static ProcessingErrorCode rsWrongNumberOfChartDataPoints;
    public static ProcessingErrorCode rsWrongNumberOfChartSeries;
    public static ProcessingErrorCode rsWrongNumberOfChartDataPointsInSeries;
    public static ProcessingErrorCode rsWrongNumberOfDataValues;
    public static ProcessingErrorCode rsWrongNumberOfParameters;
    public static ProcessingErrorCode rsWrongNumberOfTableCells;
    public static ProcessingErrorCode rsMissingDataGrouping;
    public static ProcessingErrorCode rsWrongNumberOfDataRows;
    public static ProcessingErrorCode rsWrongNumberOfDataCellsInDataRow;
    public static ProcessingErrorCode rsInvalidRecursiveAggregate;
    public static ProcessingErrorCode rsInvalidAggregateRecursiveFlag;
    public static ProcessingErrorCode rsPostSortAggregateInGroupFilterExpression;
    public static ProcessingErrorCode rsPostSortAggregateInSortExpression;
    public static ProcessingErrorCode rsPostSortAggregateInVariableExpression;
    public static ProcessingErrorCode rsAggregateInPreviousAggregate;
    public static ProcessingErrorCode rsRunningValueInPreviousAggregate;
    public static ProcessingErrorCode rsPreviousInPreviousAggregate;
    public static ProcessingErrorCode rsRowNumberInPreviousAggregate;
    public static ProcessingErrorCode rsInScopeOrLevelInPreviousAggregate;
    public static ProcessingErrorCode rsInvalidScopeInInnerAggregateOfPreviousAggregate;
    public static ProcessingErrorCode rsInvalidGroupingParent;
    public static ProcessingErrorCode rsMissingDataGroupings;
    public static ProcessingErrorCode rsMissingDataCells;
    public static ProcessingErrorCode rsCRIMultiStaticColumnsOrRows;
    public static ProcessingErrorCode rsCRIStaticWithSubgroups;
    public static ProcessingErrorCode rsCRIMultiNonStaticGroups;
    public static ProcessingErrorCode rsCRISubtotalNotSupported;
    public static ProcessingErrorCode rsInvalidGrouping;
    public static ProcessingErrorCode rsCRIInPageSection;
    public static ProcessingErrorCode rsBookmarkInPageSection;
    public static ProcessingErrorCode rsCantMakeTableGroupHeadersFixed;
    public static ProcessingErrorCode rsFixedHeadersInInnerDataRegion;
    public static ProcessingErrorCode rsInvalidFixedTableColumnHeaderSpacing;
    public static ProcessingErrorCode rsUnsupportedProtocol;
    public static ProcessingErrorCode rsCRIRenderItemNull;
    public static ProcessingErrorCode rsCRIRenderInstanceNull;
    public static ProcessingErrorCode rsCRIRenderItemInvalid;
    public static ProcessingErrorCode rsCRIRenderItemInstanceType;
    public static ProcessingErrorCode rsCRIRenderItemDefinitionName;
    public static ProcessingErrorCode rsCRIRenderItemProperties;
    public static ProcessingErrorCode rsCRIRenderItemDuplicateStyle;
    public static ProcessingErrorCode rsCRIRenderItemInvalidStyleType;
    public static ProcessingErrorCode rsCRIRenderItemInvalidStyle;
    public static ProcessingErrorCode rsCRIProcessingError;
    public static ProcessingErrorCode rsVariableInPreviousAggregate;
    public static ProcessingErrorCode rsAggregateofVariable;
    public static ProcessingErrorCode rsVariableInQueryParameterExpression;
    public static ProcessingErrorCode rsVariableInReportParameterExpression;
    public static ProcessingErrorCode rsVariableInReportLanguageExpression;
    public static ProcessingErrorCode rsVariableInGroupExpression;
    public static ProcessingErrorCode rsVariableInCalculatedFieldExpression;
    public static ProcessingErrorCode rsDataSetInPageSectionExpression;
    public static ProcessingErrorCode rsDataSetInQueryParameterExpression;
    public static ProcessingErrorCode rsDataSetInReportParameterExpression;
    public static ProcessingErrorCode rsDataSetInReportLanguageExpression;
    public static ProcessingErrorCode rsDataSourceInPageSectionExpression;
    public static ProcessingErrorCode rsDataSourceInQueryParameterExpression;
    public static ProcessingErrorCode rsDataSourceInReportParameterExpression;
    public static ProcessingErrorCode rsDataSourceInReportLanguageExpression;
    public static ProcessingErrorCode rsMissingChartDataValueName;
    public static ProcessingErrorCode rsInvalidMeDotValueInExpression;
    public static ProcessingErrorCode rsWrongNumberOfTablixCornerRows;
    public static ProcessingErrorCode rsWrongNumberOfTablixCornerCells;
    public static ProcessingErrorCode rsWrongNumberOfTablixColumns;
    public static ProcessingErrorCode rsWrongNumberOfTablixCells;
    public static ProcessingErrorCode rsWrongNumberOfTablixRows;
    public static ProcessingErrorCode rsInvalidTablixCornerCellSpan;
    public static ProcessingErrorCode rsInvalidTablixCornerRowSpans;
    public static ProcessingErrorCode rsInvalidTablixCornerColumnSpans;
    public static ProcessingErrorCode rsInvalidSortNotAllowed;
    public static ProcessingErrorCode rsInvalidFixedHeaderOnOppositeHierarchy;
    public static ProcessingErrorCode rsInvalidFixedDataColumnPosition;
    public static ProcessingErrorCode rsInvalidFixedDataRowPosition;
    public static ProcessingErrorCode rsInvalidFixedDataNotContiguous;
    public static ProcessingErrorCode rsInvalidFixedDataInHierarchy;
    public static ProcessingErrorCode rsInvalidFixedDataOnInnerMembers;
    public static ProcessingErrorCode rsHiddenTablixCornerCellContents;
    public static ProcessingErrorCode rsInvalidGroupAncestorIsDetail;
    public static ProcessingErrorCode rsInvalidKeepWithGroup;
    public static ProcessingErrorCode rsInvalidKeepWithGroupOnDynamicTablixMember;
    public static ProcessingErrorCode rsInvalidKeepWithGroupOnColumnTablixMember;
    public static ProcessingErrorCode rsInvalidRepeatOnNewPageOnColumnTablixMember;
    public static ProcessingErrorCode rsInvalidRepeatOnNewPage;
    public static ProcessingErrorCode rsInvalidTablixCellColSpans;
    public static ProcessingErrorCode rsInvalidTablixCellColSpan;
    public static ProcessingErrorCode rsInvalidTablixCellRowSpan;
    public static ProcessingErrorCode rsInvalidTablixHeaderColSpan;
    public static ProcessingErrorCode rsInvalidTablixHeaderRowSpan;
    public static ProcessingErrorCode rsCellContentsNotOmitted;
    public static ProcessingErrorCode rsCellContentsRequired;
    public static ProcessingErrorCode rsInvalidTablixCellCellSpan;
    public static ProcessingErrorCode rsInconsistentNumberofCellsInRow;
    public static ProcessingErrorCode rsInvalidTablixHeaderSize;
    public static ProcessingErrorCode rsInvalidTablixHeaders;
    public static ProcessingErrorCode rsInvalidInnerDataSetName;
    public static ProcessingErrorCode rsDuplicateGroupingVariableName;
    public static ProcessingErrorCode rsInvalidGroupingVariable;
    public static ProcessingErrorCode rsDuplicateVariableName;
    public static ProcessingErrorCode rsInvalidVariable;
    public static ProcessingErrorCode rsInvalidVariableReference;
    public static ProcessingErrorCode rsInvalidVariableNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidVariableNameLength;
    public static ProcessingErrorCode rsInvalidGroupingVariableNameNotCLSCompliant;
    public static ProcessingErrorCode rsInvalidGroupingVariableNameLength;
    public static ProcessingErrorCode rsInvalidChartHierarchy;
    public static ProcessingErrorCode rsInvalidChartMemberMustBeDynamic;
    public static ProcessingErrorCode rsInvalidChartMemberMustContainGroupExpressions;
    public static ProcessingErrorCode rsInvlaidAxisAngle;
    public static ProcessingErrorCode rsInvalidVariableCount;
    public static ProcessingErrorCode rsMissingExpression;
    public static ProcessingErrorCode rsInvalidActionsCount;
    public static ProcessingErrorCode rsInvalidChartDataValueName;
    public static ProcessingErrorCode rsInvalidChartDataValueNameNotConstant;
    public static ProcessingErrorCode rsInvalidChartDataValueNameNotUnique;
    public static ProcessingErrorCode rsInvalidFixedDataBodyCellSpans;
    public static ProcessingErrorCode rsAggregateOfMixedDataTypes;
    public static ProcessingErrorCode rsAggregateOfNonNumericData;
    public static ProcessingErrorCode rsCyclicExpression;
    public static ProcessingErrorCode rsCyclicExpressionInReportVariable;
    public static ProcessingErrorCode rsCyclicExpressionInGroupVariable;
    public static ProcessingErrorCode rsErrorExecutingSubreport;
    public static ProcessingErrorCode rsInvalidExpressionDataType;
    public static ProcessingErrorCode rsFieldErrorInExpression;
    public static ProcessingErrorCode rsInvalidValidValueList;
    public static ProcessingErrorCode rsMinMaxOfNonSortableData;
    public static ProcessingErrorCode rsRuntimeErrorInExpression;
    public static ProcessingErrorCode rsRuntimeUserProfileDependency;
    public static ProcessingErrorCode rsMissingFieldInDataSet;
    public static ProcessingErrorCode rsDataSetFieldTypeNotSupported;
    public static ProcessingErrorCode rsErrorReadingDataSetField;
    public static ProcessingErrorCode rsWarningExecutingSubreport;
    public static ProcessingErrorCode rsWarningFetchingExternalImages;
    public static ProcessingErrorCode rsInvalidImageReference;
    public static ProcessingErrorCode rsInvalidDatabaseImage;
    public static ProcessingErrorCode rsComparisonError;
    public static ProcessingErrorCode rsComparisonTypeError;
    public static ProcessingErrorCode rsCollationDetectionFailed;
    public static ProcessingErrorCode rsErrorLoadingExprHostAssembly;
    public static ProcessingErrorCode rsErrorInOnInit;
    public static ProcessingErrorCode rsUntrustedCodeModule;
    public static ProcessingErrorCode rsErrorReadingFieldProperty;
    public static ProcessingErrorCode rsExceededMaxRecursionLevel;
    public static ProcessingErrorCode rsEngineMismatchSubReport;
    public static ProcessingErrorCode rsEngineMismatchParentReport;
    public static ProcessingErrorCode rsInvalidEmptyImageReference;
    public static ProcessingErrorCode rsFieldReference;
    public static ProcessingErrorCode rsInvalidBackgroundRepeat;
    public static ProcessingErrorCode rsInvalidBackgroundGradientType;
    public static ProcessingErrorCode rsInvalidBorderStyle;
    public static ProcessingErrorCode rsInvalidCalendar;
    public static ProcessingErrorCode rsInvalidCalendarForLanguage;
    public static ProcessingErrorCode rsInvalidColor;
    public static ProcessingErrorCode rsInvalidDirection;
    public static ProcessingErrorCode rsInvalidDatabaseImageProperty;
    public static ProcessingErrorCode rsInvalidEmbeddedImageProperty;
    public static ProcessingErrorCode rsInvalidExternalImageProperty;
    public static ProcessingErrorCode rsInvalidFontStyle;
    public static ProcessingErrorCode rsInvalidFontWeight;
    public static ProcessingErrorCode rsInvalidFormatString;
    public static ProcessingErrorCode rsInvalidLanguage;
    public static ProcessingErrorCode rsInvalidMeasurementUnit;
    public static ProcessingErrorCode rsInvalidMIMEType;
    public static ProcessingErrorCode rsInvalidNumeralVariant;
    public static ProcessingErrorCode rsInvalidNumeralVariantForLanguage;
    public static ProcessingErrorCode rsInvalidSize;
    public static ProcessingErrorCode rsInvalidTextAlign;
    public static ProcessingErrorCode rsInvalidTextDecoration;
    public static ProcessingErrorCode rsInvalidUnicodeBiDi;
    public static ProcessingErrorCode rsInvalidVerticalAlign;
    public static ProcessingErrorCode rsInvalidWritingMode;
    public static ProcessingErrorCode rsNegativeSize;
    public static ProcessingErrorCode rsOutOfRangeSize;
    public static ProcessingErrorCode rsPageNumberInBody;
    public static ProcessingErrorCode rsParameterReference;
    public static ProcessingErrorCode rsReportItemReference;
    public static ProcessingErrorCode rsDataSetReference;
    public static ProcessingErrorCode rsDataSourceReference;
    public static ProcessingErrorCode rsErrorLoadingCodeModule;
    public static ProcessingErrorCode rsInvalidObjectNameNotUnique;
    public static ProcessingErrorCode rsInvalidObjectNameNotCLSCompliant;
    public static ProcessingErrorCode rsCRIControlFailedToLoad;
    public static ProcessingErrorCode rsCRIControlNotInstalled;
    public static ProcessingErrorCode rsInvalidSourceSeriesName;
    public static ProcessingErrorCode rsInvalidDataSourceNameNotCLSCompliant;
    public static ProcessingErrorCode rsDuplicateItemName;
    public static ProcessingErrorCode rsDuplicateChartLegendItemName;
    public static ProcessingErrorCode rsInvalidEnumValue;
    public static ProcessingErrorCode rsAggregateOfInvalidExpressionDataType;
    public static ProcessingErrorCode rsInvalidListStyle;
    public static ProcessingErrorCode rsInvalidMarkupType;
    public static ProcessingErrorCode rsInvalidRichTextParseFailed;
    public static ProcessingErrorCode rsParseErrorOutOfRangeSize;
    public static ProcessingErrorCode rsParseErrorInvalidSize;
    public static ProcessingErrorCode rsParseErrorInvalidValue;
    public static ProcessingErrorCode rsParseErrorInvalidColor;
    public static ProcessingErrorCode rsMissingAggregateScopeInPageSection;
    public static ProcessingErrorCode rsReportItemInScopedAggregate;
    public static ProcessingErrorCode rsPageNumberInScopedAggregate;
    public static ProcessingErrorCode rsVariableInDataRowSortExpression;
    public static ProcessingErrorCode rsAggregateInDataRowSortExpression;
    public static ProcessingErrorCode rsInvalidOperation;
    public static ProcessingErrorCode rsInvalidParameterRange;
    public static ProcessingErrorCode rsInvalidParameterValue;
    public static ProcessingErrorCode rsNotInCollection;
    public static ProcessingErrorCode rsVariableInDataRegionOrDataSetFilterExpression;
    public static ProcessingErrorCode rsInvalidCollationCultureName;
}
internal class Microsoft.ReportingServices.ReportProcessing.ProcessingErrorContext : ErrorContext {
    private Hashtable m_itemsRegistered;
    internal virtual ProcessingMessage Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
    internal virtual ProcessingMessage Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, ProcessingMessageList innerMessages, String[] arguments);
    internal virtual void Register(RSException rsException, ObjectType objectType);
    private bool RegisterItem(Severity severity, ProcessingErrorCode code, ObjectType objectType, string objectName);
    internal void Combine(ProcessingMessageList messages);
}
internal class Microsoft.ReportingServices.ReportProcessing.ProcessingMessage : object {
    private ProcessingErrorCode m_code;
    private Severity m_severity;
    private ObjectType m_objectType;
    private string m_objectName;
    private string m_propertyName;
    private string m_message;
    private ProcessingMessageList m_processingMessages;
    private ErrorCode m_commonCode;
    private static Declaration m_Declaration;
    public ProcessingErrorCode Code { get; public set; }
    public ErrorCode CommonCode { get; public set; }
    public Severity Severity { get; public set; }
    public ObjectType ObjectType { get; public set; }
    public string ObjectName { get; public set; }
    public string PropertyName { get; public set; }
    public string Message { get; public set; }
    public ProcessingMessageList ProcessingMessages { get; public set; }
    internal ProcessingMessage(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, string message, ProcessingMessageList innerMessages);
    internal ProcessingMessage(ErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, string message, ProcessingMessageList innerMessages);
    private static ProcessingMessage();
    public ProcessingErrorCode get_Code();
    public void set_Code(ProcessingErrorCode value);
    public ErrorCode get_CommonCode();
    public void set_CommonCode(ErrorCode value);
    public Severity get_Severity();
    public void set_Severity(Severity value);
    public ObjectType get_ObjectType();
    public void set_ObjectType(ObjectType value);
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public string get_Message();
    public void set_Message(string value);
    public ProcessingMessageList get_ProcessingMessages();
    public void set_ProcessingMessages(ProcessingMessageList value);
    public string FormatMessage();
    internal static Declaration GetDeclaration();
    internal static Declaration GetNewDeclaration();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ProcessingMessageList : ArrayList {
    public ProcessingMessage Item { get; }
    internal ProcessingMessageList(int capacity);
    public ProcessingMessage get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ProcessingValidator : object {
    internal static string ValidateColor(string color, IErrorContext errorContext);
    internal static string ValidateColor(string color, IErrorContext errorContext, bool allowTransparency);
    internal static string ValidateBorderWidth(string size, IErrorContext errorContext);
    internal static string ValidateFontSize(string size, IErrorContext errorContext);
    internal static string ValidatePadding(string size, IErrorContext errorContext);
    internal static string ValidateLineHeight(string size, IErrorContext errorContext);
    private static string ValidateSize(string size, double minValue, double maxValue, IErrorContext errorContext);
    internal static string ValidateEmbeddedImageName(string embeddedImageName, EmbeddedImageHashtable embeddedImages, IErrorContext errorContext);
    internal static string ValidateEmbeddedImageName(string embeddedImageName, EmbeddedImageHashtable embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static string ValidateLanguage(string language, IErrorContext errorContext, CultureInfo& culture);
    internal static string ValidateSpecificLanguage(string language, IErrorContext errorContext, CultureInfo& culture);
    internal static Calendar CreateCalendar(Calendars calendarType);
    internal static Calendar CreateCalendar(string calendarName);
    internal static bool ValidateCalendar(CultureInfo language, Calendars calendarType, ObjectType objectType, string ObjectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateCalendar(CultureInfo language, string calendarName, ObjectType objectType, string ObjectName, string propertyName, ErrorContext errorContext);
    internal static void ValidateNumeralVariant(CultureInfo language, int numVariant, ObjectType objectType, string ObjectName, string propertyName, ErrorContext errorContext);
    internal static object ValidateNumeralVariant(int numeralVariant, IErrorContext errorContext);
    internal static string ValidateMimeType(string mimeType, IErrorContext errorContext);
    internal static string ValidateMimeType(string mimeType, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static string ValidateBorderStyle(string borderStyle, ObjectType objectType, IErrorContext errorContext);
    internal static string ValidateBackgroundGradientType(string gradientType, IErrorContext errorContext);
    internal static string ValidateBackgroundRepeat(string repeat, IErrorContext errorContext);
    internal static string ValidateFontStyle(string fontStyle, IErrorContext errorContext);
    internal static string ValidateFontWeight(string fontWeight, IErrorContext errorContext);
    internal static string ValidateTextDecoration(string textDecoration, IErrorContext errorContext);
    internal static string ValidateTextAlign(string textAlign, IErrorContext errorContext);
    internal static string ValidateVerticalAlign(string verticalAlign, IErrorContext errorContext);
    internal static string ValidateDirection(string direction, IErrorContext errorContext);
    internal static string ValidateWritingMode(string writingMode, IErrorContext errorContext);
    internal static string ValidateUnicodeBiDi(string unicodeBiDi, IErrorContext errorContext);
    internal static string ValidateCalendar(string calendar, IErrorContext errorContext);
    internal static object ValidateCustomStyle(string styleName, object styleValue, IErrorContext errorContext);
    internal static object ValidateCustomStyle(string styleName, object styleValue, ObjectType objectType, IErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportProcessing.PublishingErrorContext : ErrorContext {
    private static int MaxNumberOfMessages;
    internal virtual ProcessingMessage Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
    internal virtual ProcessingMessage Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, ProcessingMessageList innerMessages, String[] arguments);
}
internal class Microsoft.ReportingServices.ReportProcessing.PublishingResult : object {
    private string m_reportDescription;
    private string m_reportLanguage;
    private ParameterInfoCollection m_parameters;
    private DataSourceInfoCollection m_dataSources;
    private ProcessingMessageList m_warnings;
    private UserLocationFlags m_userReferenceLocation;
    private PageProperties m_pageProperties;
    private String[] m_dataSetsName;
    private bool m_hasExternalImages;
    private bool m_hasHyperlinks;
    private ReportProcessingFlags m_reportProcessingFlags;
    public string ReportDescription { get; }
    public string ReportLanguage { get; }
    public bool HasUserProfileQueryDependencies { get; }
    public bool HasUserProfileReportDependencies { get; }
    public ParameterInfoCollection Parameters { get; }
    public DataSourceInfoCollection DataSources { get; }
    public ProcessingMessageList Warnings { get; }
    public PageProperties PageProperties { get; }
    public String[] DataSetsName { get; }
    public bool HasExternalImages { get; }
    public bool HasHyperlinks { get; }
    public ReportProcessingFlags ReportProcessingFlags { get; }
    internal PublishingResult(string reportDescription, string reportLanguage, ParameterInfoCollection parameters, DataSourceInfoCollection dataSources, ProcessingMessageList warnings, UserLocationFlags userReferenceLocation, double pageHeight, double pageWidth, double topMargin, double bottomMargin, double leftMargin, double rightMargin, ArrayList dataSetsName, bool hasExternalImages, bool hasHyperlinks, ReportProcessingFlags reportProcessingFlags);
    public string get_ReportDescription();
    public string get_ReportLanguage();
    public bool get_HasUserProfileQueryDependencies();
    public bool get_HasUserProfileReportDependencies();
    public ParameterInfoCollection get_Parameters();
    public DataSourceInfoCollection get_DataSources();
    public ProcessingMessageList get_Warnings();
    public PageProperties get_PageProperties();
    public String[] get_DataSetsName();
    public bool get_HasExternalImages();
    public bool get_HasHyperlinks();
    public ReportProcessingFlags get_ReportProcessingFlags();
}
internal class Microsoft.ReportingServices.ReportProcessing.PublishingValidator : object {
    private static string m_invalidCharacters;
    private static PublishingValidator();
    private static bool ValidateColor(ExpressionInfo color, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateSize(string size, ObjectType objectType, string objectName, string propertyName, bool restrictMaxValue, ErrorContext errorContext, Double& sizeInMM, String& roundSize);
    private static bool ValidateSize(ExpressionInfo size, double minValue, double maxValue, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateSize(string size, bool allowNegative, double minValue, double maxValue, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext, Double& validSizeInMM, String& newSize);
    internal static bool ValidateEmbeddedImageName(ExpressionInfo embeddedImageName, EmbeddedImageHashtable embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateEmbeddedImageName(AttributeInfo embeddedImageName, EmbeddedImageHashtable embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateEmbeddedImageName(string embeddedImageName, EmbeddedImageHashtable embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateLanguage(ExpressionInfo language, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateSpecificLanguage(ExpressionInfo language, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext, CultureInfo& culture);
    internal static bool ValidateColumns(int columns, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateNumeralVariant(ExpressionInfo numeralVariant, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateMimeType(ExpressionInfo mimeType, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateMimeType(string mimeType, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateBorderStyle(ExpressionInfo borderStyle, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateBackgroundGradientType(ExpressionInfo repeat, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateBackgroundRepeat(ExpressionInfo repeat, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateFontStyle(ExpressionInfo fontStyle, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateFontWeight(ExpressionInfo fontWeight, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateTextDecoration(ExpressionInfo textDecoration, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateTextAlign(ExpressionInfo textAlign, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateVerticalAlign(ExpressionInfo verticalAlign, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateDirection(ExpressionInfo direction, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateWritingMode(ExpressionInfo writingMode, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateUnicodeBiDi(ExpressionInfo unicodeBiDi, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateCalendar(ExpressionInfo calendar, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static void ValidateBackgroundImage(ExpressionInfo backgroundImageSource, ExpressionInfo backgroundImageValue, ExpressionInfo backgroundImageMIMEType, Style style, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal static Style ValidateAndCreateStyle(StringList names, ExpressionInfoList values, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal static void ValidateCalendar(CultureInfo language, string calendar, ObjectType objectType, string ObjectName, string propertyName, ErrorContext errorContext);
    internal static void ValidateNumeralVariant(CultureInfo language, int numVariant, ObjectType objectType, string ObjectName, string propertyName, ErrorContext errorContext);
    internal static string ValidateReportName(ICatalogItemContext reportContext, string reportName, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
}
[HashtableOfReferencesAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.QuickFindHashtable : HashtableInstanceInfo {
    internal ReportItemInstance Item { get; }
    internal QuickFindHashtable(int capacity);
    internal ReportItemInstance get_Item(int key);
    internal void Add(int key, ReportItemInstance val);
}
internal class Microsoft.ReportingServices.ReportProcessing.RDLUpgradeException : XmlException {
    internal RDLUpgradeException(string msg);
    internal RDLUpgradeException(string msg, Exception inner);
    private RDLUpgradeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.RDLUpgrader : object {
    public static Stream UpgradeToCurrent(XmlReader rdlReader, string namespaceURI, bool throwUpgradeException, bool upgradeDundasCRIToNative, RDLUpgradeResult& upgradeResults);
    public static Stream UpgradeToCurrent(XmlReader rdlReader, string namespaceURI, bool throwUpgradeException, bool upgradeDundasCRIToNative);
    public static Stream UpgradeToCurrent(Stream stream, bool throwUpgradeException);
    public static Stream UpgradeToCurrent(Stream stream, bool throwUpgradeException, RDLUpgradeResult& upgradeResults);
    public static RDLUpgradeResult CheckForDundasCRI(XmlTextReader xmlTextReader);
    public static string GetCurrentNamespaceURI();
    public static string Get2007NamespaceURI();
    public static string Get2005NamespaceURI();
}
internal class Microsoft.ReportingServices.ReportProcessing.RDLUpgradeResult : object {
    private bool hasUnsupportedDundasChartFeatures;
    private bool hasUnsupportedDundasGaugeFeatures;
    public bool HasUnsupportedDundasCRIFeatures { get; }
    public bool HasUnsupportedDundasChartFeatures { get; internal set; }
    public bool HasUnsupportedDundasGaugeFeatures { get; internal set; }
    public bool get_HasUnsupportedDundasCRIFeatures();
    public bool get_HasUnsupportedDundasChartFeatures();
    internal void set_HasUnsupportedDundasChartFeatures(bool value);
    public bool get_HasUnsupportedDundasGaugeFeatures();
    internal void set_HasUnsupportedDundasGaugeFeatures(bool value);
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.ReportProcessing.RDLUpgradeStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string rdlInvalidURIReference { get; }
    public static string rdlDundasChartCustomCodeNotSupported { get; }
    public static string rdlDundasGaugeCustomCodeNotSupported { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_rdlInvalidURIReference();
    public static string get_rdlDundasChartCustomCodeNotSupported();
    public static string get_rdlDundasGaugeCustomCodeNotSupported();
    public static string rdlInvalidTargetNamespace(string namespace);
    public static string rdlInvalidXmlContents(string innerMessage);
}
internal class Microsoft.ReportingServices.ReportProcessing.RDLValidatingReader : XmlValidatingReader {
    private RdlElementStack m_rdlElementStack;
    private string m_validationNamespace;
    public RDLValidatingReader(XmlReader xmlReader, string validationNamespace);
    private static int CompareWithInvariantCulture(string x, string y, bool ignoreCase);
    public bool Validate(String& message);
    private static void TraverseParticle(XmlSchemaParticle particle, ArrayList elementDeclsInContentModel);
}
internal class Microsoft.ReportingServices.ReportProcessing.RDLValidatingReaderStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string rdlValidationMissingChildElement(string parentType, string childType, string linenumber, string position);
    public static string rdlValidationInvalidElement(string parentType, string childType, string linenumber, string position);
}
internal class Microsoft.ReportingServices.ReportProcessing.RdlValidator : object {
    private XmlReader m_reader;
    private RdlElementStack m_rdlElementStack;
    private string m_validationNamespace;
    public RdlValidator(XmlReader xmlReader, string validationNamespace);
    public bool ValidateStartElement(String& message);
    public bool ValidateEndElement(String& message);
    private static void TraverseParticle(XmlSchemaParticle particle, ArrayList elementDeclsInContentModel);
    private string ValidationMessage(string id, string parentType, string childType);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReceiverInformation : object {
    private bool m_startHidden;
    private int m_senderUniqueName;
    internal bool StartHidden { get; internal set; }
    internal int SenderUniqueName { get; internal set; }
    internal ReceiverInformation(bool startHidden, int senderUniqueName);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal int get_SenderUniqueName();
    internal void set_SenderUniqueName(int value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReceiverInformationHashtable : HashtableInstanceInfo {
    internal ReceiverInformation Item { get; internal set; }
    internal ReceiverInformationHashtable(int capacity);
    internal ReceiverInformation get_Item(int key);
    internal void set_Item(int key, ReceiverInformation value);
    internal void Add(int key, ReceiverInformation receiver);
}
internal class Microsoft.ReportingServices.ReportProcessing.RecordField : object {
    private object m_fieldValue;
    private bool m_isAggregationField;
    private VariantList m_fieldPropertyValues;
    private DataFieldStatus m_fieldStatus;
    private Hashtable m_properties;
    internal object FieldValue { get; internal set; }
    internal bool IsAggregationField { get; internal set; }
    internal VariantList FieldPropertyValues { get; internal set; }
    internal bool IsOverflow { get; }
    internal bool IsUnSupportedDataType { get; }
    internal bool IsError { get; }
    internal DataFieldStatus FieldStatus { get; internal set; }
    internal RecordField(FieldImpl field);
    internal object get_FieldValue();
    internal void set_FieldValue(object value);
    internal bool get_IsAggregationField();
    internal void set_IsAggregationField(bool value);
    internal VariantList get_FieldPropertyValues();
    internal void set_FieldPropertyValues(VariantList value);
    internal bool get_IsOverflow();
    internal bool get_IsUnSupportedDataType();
    internal bool get_IsError();
    internal DataFieldStatus get_FieldStatus();
    internal void set_FieldStatus(DataFieldStatus value);
    internal void SetProperty(string propertyName, object propertyValue);
    internal object GetProperty(string propertyName);
    internal void PopulateFieldPropertyValues(StringList propertyNames);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.RecordRow : object {
    private RecordField[] m_recordFields;
    private bool m_isAggregateRow;
    private int m_aggregationFieldCount;
    internal RecordField[] RecordFields { get; internal set; }
    internal bool IsAggregateRow { get; internal set; }
    internal int AggregationFieldCount { get; internal set; }
    internal RecordRow(FieldsImpl fields, int fieldCount);
    internal RecordField[] get_RecordFields();
    internal void set_RecordFields(RecordField[] value);
    internal bool get_IsAggregateRow();
    internal void set_IsAggregateRow(bool value);
    internal int get_AggregationFieldCount();
    internal void set_AggregationFieldCount(int value);
    internal object GetFieldValue(int aliasIndex);
    internal bool IsAggregationField(int aliasIndex);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.RecordSetInfo : object {
    private bool m_readerExtensionsSupported;
    private RecordSetPropertyNamesList m_fieldPropertyNames;
    private CompareOptions m_compareOptions;
    private bool m_validCompareOptions;
    internal bool ReaderExtensionsSupported { get; internal set; }
    internal RecordSetPropertyNamesList FieldPropertyNames { get; internal set; }
    internal CompareOptions CompareOptions { get; internal set; }
    internal bool ValidCompareOptions { get; internal set; }
    internal RecordSetInfo(bool readerExtensionsSupported, CompareOptions compareOptions);
    internal bool get_ReaderExtensionsSupported();
    internal void set_ReaderExtensionsSupported(bool value);
    internal RecordSetPropertyNamesList get_FieldPropertyNames();
    internal void set_FieldPropertyNames(RecordSetPropertyNamesList value);
    internal CompareOptions get_CompareOptions();
    internal void set_CompareOptions(CompareOptions value);
    internal bool get_ValidCompareOptions();
    internal void set_ValidCompareOptions(bool value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.RecordSetPropertyNames : object {
    private StringList m_propertyNames;
    internal StringList PropertyNames { get; internal set; }
    internal StringList get_PropertyNames();
    internal void set_PropertyNames(StringList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.RecordSetPropertyNamesList : ArrayList {
    internal RecordSetPropertyNames Item { get; }
    internal RecordSetPropertyNamesList(int capacity);
    internal RecordSetPropertyNames get_Item(int index);
    internal StringList GetPropertyNames(int aliasIndex);
    internal string GetPropertyName(int aliasIndex, int propertyIndex);
}
internal class Microsoft.ReportingServices.ReportProcessing.Rectangle : ReportItem {
    private ReportItemCollection m_reportItems;
    private bool m_pageBreakAtEnd;
    private bool m_pageBreakAtStart;
    private int m_linkToChild;
    private PageBreakStates m_pagebreakState;
    private ReportItemExprHost m_exprHost;
    internal ObjectType ObjectType { get; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal bool PageBreakAtEnd { get; internal set; }
    internal bool PageBreakAtStart { get; internal set; }
    internal int LinkToChild { get; internal set; }
    internal Rectangle(ReportItem parent);
    internal Rectangle(int id, int idForReportItems, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal bool get_PageBreakAtEnd();
    internal void set_PageBreakAtEnd(bool value);
    internal bool get_PageBreakAtStart();
    internal void set_PageBreakAtStart(bool value);
    internal int get_LinkToChild();
    internal void set_LinkToChild(int value);
    internal virtual void CalculateSizes(double width, double height, InitializationContext context, bool overwrite);
    internal virtual bool Initialize(InitializationContext context);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal virtual void RegisterReceiver(InitializationContext context);
    internal bool ContainsDataRegionOrSubReport();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.HasPageBreaks(bool atStart);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    internal object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    internal virtual void ProcessDrillthroughAction(ProcessingContext processingContext, NonComputedUniqueNames nonCompNames);
    internal int ProcessNavigationChildren(NavigationInfo navigationInfo, NonComputedUniqueNames nonCompNames, int startPage);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.IIndexInto.GetChildAt(int index, NonComputedUniqueNames& nonCompNames);
}
internal class Microsoft.ReportingServices.ReportProcessing.RectangleInstance : ReportItemInstance {
    private ReportItemColInstance m_reportItemColInstance;
    private int m_startPage;
    private int m_endPage;
    internal ReportItemColInstance ReportItemColInstance { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal RectangleInstance(ProcessingContext pc, Rectangle reportItemDef, int index);
    internal ReportItemColInstance get_ReportItemColInstance();
    internal void set_ReportItemColInstance(ReportItemColInstance value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal virtual int GetDocumentMapUniqueName();
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.IIndexInto.GetChildAt(int index, NonComputedUniqueNames& nonCompNames);
    protected virtual object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.RectangleInstanceInfo : ReportItemInstanceInfo {
    internal RectangleInstanceInfo(ProcessingContext pc, Rectangle reportItemDef, RectangleInstance owner, int index);
    internal RectangleInstanceInfo(Rectangle reportItemDef);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.RenderingContext : object {
    private ICatalogItemContext m_reportContext;
    private string m_reportDescription;
    private EventInformation m_eventInfo;
    internal GetReportChunk m_getReportChunkCallback;
    internal GetChunkMimeType m_getChunkMimeType;
    private StoreServerParameters m_storeServerParameters;
    private UserProfileState m_allowUserProfileState;
    private ReportRuntimeSetup m_reportRuntimeSetup;
    private PaginationMode m_clientPaginationMode;
    private int m_previousTotalPages;
    internal string Format { get; }
    internal Uri ReportUri { get; }
    internal string ShowHideToggle { get; }
    internal ICatalogItemContext ReportContext { get; }
    internal string ReportDescription { get; }
    internal EventInformation EventInfo { get; internal set; }
    internal StoreServerParameters StoreServerParametersCallback { get; }
    internal UserProfileState AllowUserProfileState { get; }
    internal ReportRuntimeSetup ReportRuntimeSetup { get; }
    internal PaginationMode ClientPaginationMode { get; }
    internal int PreviousTotalPages { get; }
    internal RenderingContext(ICatalogItemContext reportContext, string reportDescription, EventInformation eventInfo, ReportRuntimeSetup reportRuntimeSetup, StoreServerParameters storeServerParameters, UserProfileState allowUserProfileState, PaginationMode clientPaginationMode, int previousTotalPages);
    internal string get_Format();
    internal Uri get_ReportUri();
    internal string get_ShowHideToggle();
    internal ICatalogItemContext get_ReportContext();
    internal string get_ReportDescription();
    internal EventInformation get_EventInfo();
    internal void set_EventInfo(EventInformation value);
    internal StoreServerParameters get_StoreServerParametersCallback();
    internal UserProfileState get_AllowUserProfileState();
    internal ReportRuntimeSetup get_ReportRuntimeSetup();
    internal PaginationMode get_ClientPaginationMode();
    internal int get_PreviousTotalPages();
    internal Hashtable GetRenderProperties(bool reprocessSnapshot);
}
internal class Microsoft.ReportingServices.ReportProcessing.RenderingObjectModelException : RSException {
    private RenderingObjectModelException(SerializationInfo info, StreamingContext context);
    internal RenderingObjectModelException(string LocalizedErrorMessage);
    internal RenderingObjectModelException(Exception innerException);
    internal RenderingObjectModelException(ProcessingErrorCode errCode);
    internal RenderingObjectModelException(ProcessingErrorCode errCode, Object[] arguments);
    internal RenderingObjectModelException(ErrorCode code, Object[] arguments);
    internal RenderingObjectModelException(ErrorCode code, Exception innerException, Object[] arguments);
}
internal class Microsoft.ReportingServices.ReportProcessing.RenderingPagesRanges : ValueType {
    private int m_startPage;
    private int m_endPage;
    internal int StartPage { get; internal set; }
    internal int StartRow { get; internal set; }
    internal int EndPage { get; internal set; }
    internal int NumberOfDetails { get; internal set; }
    internal int get_StartPage();
    internal void set_StartPage(int value);
    internal int get_StartRow();
    internal void set_StartRow(int value);
    internal int get_EndPage();
    internal void set_EndPage(int value);
    internal int get_NumberOfDetails();
    internal void set_NumberOfDetails(int value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.RenderingPagesRangesList : ArrayList {
    internal RenderingPagesRanges Item { get; }
    internal RenderingPagesRangesList(int capacity);
    internal RenderingPagesRanges get_Item(int index);
    internal void MoveAllToFirstPage(int totalCount);
}
internal class Microsoft.ReportingServices.ReportProcessing.Report : ReportItem {
    private IntermediateFormatVersion m_intermediateFormatVersion;
    private Guid m_reportVersion;
    private string m_author;
    private int m_autoRefresh;
    private EmbeddedImageHashtable m_embeddedImages;
    private PageSection m_pageHeader;
    private PageSection m_pageFooter;
    private ReportItemCollection m_reportItems;
    private DataSourceList m_dataSources;
    private string m_pageHeight;
    private double m_pageHeightValue;
    private string m_pageWidth;
    private double m_pageWidthValue;
    private string m_leftMargin;
    private double m_leftMarginValue;
    private string m_rightMargin;
    private double m_rightMarginValue;
    private string m_topMargin;
    private double m_topMarginValue;
    private string m_bottomMargin;
    private double m_bottomMarginValue;
    private int m_columns;
    private string m_columnSpacing;
    private double m_columnSpacingValue;
    private DataAggregateInfoList m_pageAggregates;
    private Byte[] m_exprCompiledCode;
    private bool m_exprCompiledCodeGeneratedWithRefusedPermissions;
    private bool m_mergeOnePass;
    private bool m_pageMergeOnePass;
    private bool m_subReportMergeTransactions;
    private bool m_needPostGroupProcessing;
    private bool m_hasPostSortAggregates;
    private bool m_hasReportItemReferences;
    private ShowHideTypes m_showHideType;
    private ImageStreamNames m_imageStreamNames;
    private int m_lastID;
    private int m_bodyID;
    private SubReportList m_subReports;
    private bool m_hasImageStreams;
    private bool m_hasLabels;
    private bool m_hasBookmarks;
    private bool m_parametersNotUsedInQuery;
    private ParameterDefList m_parameters;
    private string m_oneDataSetName;
    private StringList m_codeModules;
    private CodeClassList m_codeClasses;
    private bool m_hasSpecialRecursiveAggregates;
    private ExpressionInfo m_language;
    private string m_dataTransform;
    private string m_dataSchema;
    private bool m_dataElementStyleAttribute;
    private string m_code;
    private bool m_hasUserSortFilter;
    private string m_interactiveHeight;
    private double m_interactiveHeightValue;
    private string m_interactiveWidth;
    private double m_interactiveWidthValue;
    private InScopeSortFilterHashtable m_nonDetailSortFiltersInScope;
    private InScopeSortFilterHashtable m_detailSortFiltersInScope;
    private int m_lastAggregateID;
    private ReportExprHost m_exprHost;
    private ReportSize m_pageHeightForRendering;
    private ReportSize m_pageWidthForRendering;
    private ReportSize m_leftMarginForRendering;
    private ReportSize m_rightMarginForRendering;
    private ReportSize m_topMarginForRendering;
    private ReportSize m_bottomMarginForRendering;
    private ReportSize m_columnSpacingForRendering;
    private long m_mainChunkSize;
    internal ObjectType ObjectType { get; }
    internal string DataElementNameDefault { get; }
    internal IntermediateFormatVersion IntermediateFormatVersion { get; }
    internal Guid ReportVersion { get; }
    internal string Author { get; internal set; }
    internal int AutoRefresh { get; internal set; }
    internal EmbeddedImageHashtable EmbeddedImages { get; internal set; }
    internal PageSection PageHeader { get; internal set; }
    internal bool PageHeaderEvaluation { get; }
    internal PageSection PageFooter { get; internal set; }
    internal bool PageFooterEvaluation { get; }
    internal double PageSectionWidth { get; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal DataSourceList DataSources { get; internal set; }
    internal int DataSourceCount { get; }
    internal string PageHeight { get; internal set; }
    internal double PageHeightValue { get; internal set; }
    internal string PageWidth { get; internal set; }
    internal double PageWidthValue { get; internal set; }
    internal string LeftMargin { get; internal set; }
    internal double LeftMarginValue { get; internal set; }
    internal string RightMargin { get; internal set; }
    internal double RightMarginValue { get; internal set; }
    internal string TopMargin { get; internal set; }
    internal double TopMarginValue { get; internal set; }
    internal string BottomMargin { get; internal set; }
    internal double BottomMarginValue { get; internal set; }
    internal int Columns { get; internal set; }
    internal string ColumnSpacing { get; internal set; }
    internal double ColumnSpacingValue { get; internal set; }
    internal DataAggregateInfoList PageAggregates { get; internal set; }
    internal Byte[] CompiledCode { get; internal set; }
    internal bool CompiledCodeGeneratedWithRefusedPermissions { get; internal set; }
    internal bool MergeOnePass { get; internal set; }
    internal bool PageMergeOnePass { get; internal set; }
    internal bool SubReportMergeTransactions { get; internal set; }
    internal bool NeedPostGroupProcessing { get; internal set; }
    internal bool HasPostSortAggregates { get; internal set; }
    internal bool HasReportItemReferences { get; internal set; }
    internal ShowHideTypes ShowHideType { get; internal set; }
    internal ImageStreamNames ImageStreamNames { get; internal set; }
    internal bool ParametersNotUsedInQuery { get; internal set; }
    internal int LastID { get; internal set; }
    internal int BodyID { get; internal set; }
    internal SubReportList SubReports { get; internal set; }
    internal bool HasImageStreams { get; internal set; }
    internal bool HasLabels { get; internal set; }
    internal bool HasBookmarks { get; internal set; }
    internal ReportSize PageHeightForRendering { get; internal set; }
    internal ReportSize PageWidthForRendering { get; internal set; }
    internal ReportSize LeftMarginForRendering { get; internal set; }
    internal ReportSize RightMarginForRendering { get; internal set; }
    internal ReportSize TopMarginForRendering { get; internal set; }
    internal ReportSize BottomMarginForRendering { get; internal set; }
    internal ReportSize ColumnSpacingForRendering { get; internal set; }
    internal ParameterDefList Parameters { get; internal set; }
    internal string OneDataSetName { get; internal set; }
    internal StringList CodeModules { get; internal set; }
    internal CodeClassList CodeClasses { get; internal set; }
    internal bool HasSpecialRecursiveAggregates { get; internal set; }
    internal ExpressionInfo Language { get; internal set; }
    internal ReportExprHost ReportExprHost { get; }
    internal string DataTransform { get; internal set; }
    internal string DataSchema { get; internal set; }
    internal bool DataElementStyleAttribute { get; internal set; }
    internal string Code { get; internal set; }
    internal bool HasUserSortFilter { get; internal set; }
    internal string InteractiveHeight { get; internal set; }
    internal double InteractiveHeightValue { get; internal set; }
    internal string InteractiveWidth { get; internal set; }
    internal double InteractiveWidthValue { get; internal set; }
    internal InScopeSortFilterHashtable NonDetailSortFiltersInScope { get; internal set; }
    internal InScopeSortFilterHashtable DetailSortFiltersInScope { get; internal set; }
    internal string ExprHostAssemblyName { get; }
    internal int LastAggregateID { get; internal set; }
    internal long MainChunkSize { get; internal set; }
    internal Report(int id, int idForReportItems);
    internal Report(ReportItem parent, IntermediateFormatVersion version, Guid reportVersion);
    internal virtual ObjectType get_ObjectType();
    internal virtual string get_DataElementNameDefault();
    internal IntermediateFormatVersion get_IntermediateFormatVersion();
    internal Guid get_ReportVersion();
    internal string get_Author();
    internal void set_Author(string value);
    internal int get_AutoRefresh();
    internal void set_AutoRefresh(int value);
    internal EmbeddedImageHashtable get_EmbeddedImages();
    internal void set_EmbeddedImages(EmbeddedImageHashtable value);
    internal PageSection get_PageHeader();
    internal void set_PageHeader(PageSection value);
    internal bool get_PageHeaderEvaluation();
    internal PageSection get_PageFooter();
    internal void set_PageFooter(PageSection value);
    internal bool get_PageFooterEvaluation();
    internal double get_PageSectionWidth();
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal DataSourceList get_DataSources();
    internal void set_DataSources(DataSourceList value);
    internal int get_DataSourceCount();
    internal string get_PageHeight();
    internal void set_PageHeight(string value);
    internal double get_PageHeightValue();
    internal void set_PageHeightValue(double value);
    internal string get_PageWidth();
    internal void set_PageWidth(string value);
    internal double get_PageWidthValue();
    internal void set_PageWidthValue(double value);
    internal string get_LeftMargin();
    internal void set_LeftMargin(string value);
    internal double get_LeftMarginValue();
    internal void set_LeftMarginValue(double value);
    internal string get_RightMargin();
    internal void set_RightMargin(string value);
    internal double get_RightMarginValue();
    internal void set_RightMarginValue(double value);
    internal string get_TopMargin();
    internal void set_TopMargin(string value);
    internal double get_TopMarginValue();
    internal void set_TopMarginValue(double value);
    internal string get_BottomMargin();
    internal void set_BottomMargin(string value);
    internal double get_BottomMarginValue();
    internal void set_BottomMarginValue(double value);
    internal int get_Columns();
    internal void set_Columns(int value);
    internal string get_ColumnSpacing();
    internal void set_ColumnSpacing(string value);
    internal double get_ColumnSpacingValue();
    internal void set_ColumnSpacingValue(double value);
    internal DataAggregateInfoList get_PageAggregates();
    internal void set_PageAggregates(DataAggregateInfoList value);
    internal Byte[] get_CompiledCode();
    internal void set_CompiledCode(Byte[] value);
    internal bool get_CompiledCodeGeneratedWithRefusedPermissions();
    internal void set_CompiledCodeGeneratedWithRefusedPermissions(bool value);
    internal bool get_MergeOnePass();
    internal void set_MergeOnePass(bool value);
    internal bool get_PageMergeOnePass();
    internal void set_PageMergeOnePass(bool value);
    internal bool get_SubReportMergeTransactions();
    internal void set_SubReportMergeTransactions(bool value);
    internal bool get_NeedPostGroupProcessing();
    internal void set_NeedPostGroupProcessing(bool value);
    internal bool get_HasPostSortAggregates();
    internal void set_HasPostSortAggregates(bool value);
    internal bool get_HasReportItemReferences();
    internal void set_HasReportItemReferences(bool value);
    internal ShowHideTypes get_ShowHideType();
    internal void set_ShowHideType(ShowHideTypes value);
    internal ImageStreamNames get_ImageStreamNames();
    internal void set_ImageStreamNames(ImageStreamNames value);
    internal bool get_ParametersNotUsedInQuery();
    internal void set_ParametersNotUsedInQuery(bool value);
    internal int get_LastID();
    internal void set_LastID(int value);
    internal int get_BodyID();
    internal void set_BodyID(int value);
    internal SubReportList get_SubReports();
    internal void set_SubReports(SubReportList value);
    internal bool get_HasImageStreams();
    internal void set_HasImageStreams(bool value);
    internal bool get_HasLabels();
    internal void set_HasLabels(bool value);
    internal bool get_HasBookmarks();
    internal void set_HasBookmarks(bool value);
    internal ReportSize get_PageHeightForRendering();
    internal void set_PageHeightForRendering(ReportSize value);
    internal ReportSize get_PageWidthForRendering();
    internal void set_PageWidthForRendering(ReportSize value);
    internal ReportSize get_LeftMarginForRendering();
    internal void set_LeftMarginForRendering(ReportSize value);
    internal ReportSize get_RightMarginForRendering();
    internal void set_RightMarginForRendering(ReportSize value);
    internal ReportSize get_TopMarginForRendering();
    internal void set_TopMarginForRendering(ReportSize value);
    internal ReportSize get_BottomMarginForRendering();
    internal void set_BottomMarginForRendering(ReportSize value);
    internal ReportSize get_ColumnSpacingForRendering();
    internal void set_ColumnSpacingForRendering(ReportSize value);
    internal ParameterDefList get_Parameters();
    internal void set_Parameters(ParameterDefList value);
    internal string get_OneDataSetName();
    internal void set_OneDataSetName(string value);
    internal StringList get_CodeModules();
    internal void set_CodeModules(StringList value);
    internal CodeClassList get_CodeClasses();
    internal void set_CodeClasses(CodeClassList value);
    internal bool get_HasSpecialRecursiveAggregates();
    internal void set_HasSpecialRecursiveAggregates(bool value);
    internal ExpressionInfo get_Language();
    internal void set_Language(ExpressionInfo value);
    internal ReportExprHost get_ReportExprHost();
    internal string get_DataTransform();
    internal void set_DataTransform(string value);
    internal string get_DataSchema();
    internal void set_DataSchema(string value);
    internal bool get_DataElementStyleAttribute();
    internal void set_DataElementStyleAttribute(bool value);
    internal string get_Code();
    internal void set_Code(string value);
    internal bool get_HasUserSortFilter();
    internal void set_HasUserSortFilter(bool value);
    internal string get_InteractiveHeight();
    internal void set_InteractiveHeight(string value);
    internal double get_InteractiveHeightValue();
    internal void set_InteractiveHeightValue(double value);
    internal string get_InteractiveWidth();
    internal void set_InteractiveWidth(string value);
    internal double get_InteractiveWidthValue();
    internal void set_InteractiveWidthValue(double value);
    internal InScopeSortFilterHashtable get_NonDetailSortFiltersInScope();
    internal void set_NonDetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal InScopeSortFilterHashtable get_DetailSortFiltersInScope();
    internal void set_DetailSortFiltersInScope(InScopeSortFilterHashtable value);
    internal string get_ExprHostAssemblyName();
    internal int get_LastAggregateID();
    internal void set_LastAggregateID(int value);
    internal long get_MainChunkSize();
    internal void set_MainChunkSize(long value);
    internal virtual bool Initialize(InitializationContext context);
    internal void BodyInitialize(InitializationContext context);
    internal void PageHeaderFooterInitialize(InitializationContext context);
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetAggregateLists();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetPostSortAggregateLists();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.ClearIfEmpty();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportCompileTime : object {
    private ExpressionParser m_langParser;
    private ErrorContext m_errorContext;
    private ExprHostBuilder m_builder;
    private ExprCompileTimeInfoList m_ctExprList;
    private CodeModuleClassInstanceDeclCompileTimeInfoList m_ctClassInstDeclList;
    private int m_customCodeNumErrors;
    private int m_customCodeNumWarnings;
    private ArrayList m_reportLevelFieldReferences;
    internal ExprHostBuilder Builder { get; }
    internal bool BodyRefersToReportItems { get; }
    internal bool PageSectionRefersToReportItems { get; }
    internal int NumberOfAggregates { get; }
    internal int LastAggregateID { get; }
    internal bool ValueReferenced { get; }
    internal bool ValueReferencedGlobal { get; }
    internal ReportCompileTime(ExpressionParser langParser, ErrorContext errorContext);
    internal ExprHostBuilder get_Builder();
    internal bool get_BodyRefersToReportItems();
    internal bool get_PageSectionRefersToReportItems();
    internal int get_NumberOfAggregates();
    internal int get_LastAggregateID();
    internal bool get_ValueReferenced();
    internal bool get_ValueReferencedGlobal();
    internal ExpressionInfo ParseExpression(string expression, ExpressionContext context);
    internal ExpressionInfo ParseExpression(string expression, ExpressionContext context, DetectionFlags flag, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    internal ExpressionInfo ParseExpression(string expression, ExpressionContext context, Boolean& userCollectionReferenced);
    internal void ConvertFields2ComplexExpr();
    internal void ResetValueReferencedFlag();
    internal Byte[] Compile(Report report, AppDomain compilationTempAppDomain, bool refusePermissions);
    private void ProcessExpression(ExpressionInfo expression, ExpressionContext context);
    private void RegisterExpression(ExprCompileTimeInfo exprCTInfo);
    private void ProcessAggregateParams(ExpressionInfo expression, ExpressionContext context);
    private void ProcessAggregateParam(DataAggregateInfo aggregate, ExpressionContext context);
    private void ProcessAggregateParam(ExpressionInfo expression, ExpressionContext context);
    private Byte[] InternalCompile(Report report, AppDomain compilationTempAppDomain, bool refusePermissions);
    private void ResolveAssemblylocations(StringList codeModules, CompilerParameters options, ErrorContext errorContext, AppDomain compilationTempAppDomain);
    private void ParseErrors(CompilerResults results, CodeClassList codeClassInstDecls);
    private void RegisterError(CompilerError error, Int32& numErrors, Int32& numWarnings, ObjectType objectType, string objectName, string propertyName, ProcessingErrorCode errorCode);
    private string FormatError(CompilerError error);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportDrillthroughInfo : object {
    private TokensHashtable m_rewrittenCommands;
    private DrillthroughHashtable m_drillthroughHashtable;
    internal DrillthroughHashtable DrillthroughInformation { get; internal set; }
    internal TokensHashtable RewrittenCommands { get; internal set; }
    internal int Count { get; }
    internal DrillthroughHashtable get_DrillthroughInformation();
    internal void set_DrillthroughInformation(DrillthroughHashtable value);
    internal TokensHashtable get_RewrittenCommands();
    internal void set_RewrittenCommands(TokensHashtable value);
    internal static Declaration GetDeclaration();
    internal void AddDrillthrough(string drillthroughId, DrillthroughInformation drillthroughInfo);
    internal void AddRewrittenCommand(int id, object value);
    internal int get_Count();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportHierarchyNode : IDOwner {
    protected Grouping m_grouping;
    protected Sorting m_sorting;
    protected ReportHierarchyNode m_innerHierarchy;
    [ReferenceAttribute]
protected DataRegion m_dataRegionDef;
    private PageBreakStates m_pagebreakState;
    private DynamicGroupExprHost m_exprHost;
    internal Grouping Grouping { get; internal set; }
    internal Sorting Sorting { get; internal set; }
    internal ReportHierarchyNode InnerHierarchy { get; internal set; }
    internal DataRegion DataRegionDef { get; internal set; }
    internal ReportHierarchyNode(int id, DataRegion dataRegionDef);
    internal Grouping get_Grouping();
    internal void set_Grouping(Grouping value);
    internal Sorting get_Sorting();
    internal void set_Sorting(Sorting value);
    internal ReportHierarchyNode get_InnerHierarchy();
    internal void set_InnerHierarchy(ReportHierarchyNode value);
    internal DataRegion get_DataRegionDef();
    internal void set_DataRegionDef(DataRegion value);
    internal void Initialize(InitializationContext context);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    protected bool IgnorePageBreaks(Visibility visibility);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.HasPageBreaks(bool atStart);
    protected void ReportHierarchyNodeSetExprHost(DynamicGroupExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal void ReportHierarchyNodeSetExprHost(GroupingExprHost groupingExprHost, SortingExprHost sortingExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportInstance : ReportItemInstance {
    private ReportItemColInstance m_reportItemColInstance;
    private string m_language;
    private int m_numberOfPages;
    private ReportInstanceInfo m_cachedInstanceInfo;
    private bool m_noRows;
    private int m_startPage;
    private int m_endPage;
    internal ReportItemColInstance ReportItemColInstance { get; internal set; }
    internal string Language { get; internal set; }
    internal int NumberOfPages { get; internal set; }
    internal bool NoRows { get; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal ReportInstance(ProcessingContext pc, Report reportItemDef, ParameterInfoCollection parameters, string reportlanguage, bool noRows);
    internal ReportItemColInstance get_ReportItemColInstance();
    internal void set_ReportItemColInstance(ReportItemColInstance value);
    internal string get_Language();
    internal void set_Language(string value);
    internal int get_NumberOfPages();
    internal void set_NumberOfPages(int value);
    internal bool get_NoRows();
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal static Declaration GetDeclaration();
    protected virtual object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    internal ReportInstanceInfo GetCachedReportInstanceInfo(RenderingChunkManager chunkManager);
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportInstanceInfo : ReportItemInstanceInfo {
    private ParameterInfoCollection m_parameters;
    private string m_reportName;
    private bool m_noRows;
    private int m_bodyUniqueName;
    internal ParameterInfoCollection Parameters { get; internal set; }
    internal string ReportName { get; internal set; }
    internal bool NoRows { get; internal set; }
    internal int BodyUniqueName { get; internal set; }
    internal ReportInstanceInfo(ProcessingContext pc, Report reportItemDef, ReportInstance owner, ParameterInfoCollection parameters, bool noRows);
    internal ReportInstanceInfo(Report reportItemDef);
    internal ParameterInfoCollection get_Parameters();
    internal void set_Parameters(ParameterInfoCollection value);
    internal string get_ReportName();
    internal void set_ReportName(string value);
    internal bool get_NoRows();
    internal void set_NoRows(bool value);
    internal int get_BodyUniqueName();
    internal void set_BodyUniqueName(int value);
    internal static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ReportItem : IDOwner {
    private static string ZeroSize;
    internal static int OverlapDetectionRounding;
    protected string m_name;
    protected Style m_styleClass;
    protected string m_top;
    protected double m_topValue;
    protected string m_left;
    protected double m_leftValue;
    protected string m_height;
    protected double m_heightValue;
    protected string m_width;
    protected double m_widthValue;
    protected int m_zIndex;
    protected ExpressionInfo m_toolTip;
    protected Visibility m_visibility;
    protected ExpressionInfo m_label;
    protected ExpressionInfo m_bookmark;
    protected string m_custom;
    protected bool m_repeatedSibling;
    protected bool m_isFullSize;
    private int m_exprHostID;
    protected string m_dataElementName;
    protected DataElementOutputTypes m_dataElementOutput;
    protected int m_distanceFromReportTop;
    protected int m_distanceBeforeTop;
    protected IntList m_siblingAboveMe;
    protected DataValueList m_customProperties;
    protected ReportItem m_parent;
    protected bool m_computed;
    protected string m_repeatWith;
    protected DataElementOutputTypesRDL m_dataElementOutputRDL;
    private ReportItemExprHost m_exprHost;
    protected int m_startPage;
    protected int m_endPage;
    protected bool m_softPageBreak;
    protected bool m_shareMyLastPage;
    protected bool m_startHidden;
    protected double m_topInPage;
    protected double m_bottomInPage;
    private PageTextboxes m_repeatedSiblingTextboxes;
    protected string m_renderingModelID;
    protected StyleProperties m_sharedStyleProperties;
    protected bool m_noNonSharedStyleProps;
    protected ReportSize m_heightForRendering;
    protected ReportSize m_widthForRendering;
    protected ReportSize m_topForRendering;
    protected ReportSize m_leftForRendering;
    internal ObjectType ObjectType { get; }
    internal string Name { get; internal set; }
    internal Style StyleClass { get; internal set; }
    internal string Top { get; internal set; }
    internal double TopValue { get; internal set; }
    internal string Left { get; internal set; }
    internal double LeftValue { get; internal set; }
    internal string Height { get; internal set; }
    internal double HeightValue { get; internal set; }
    internal string Width { get; internal set; }
    internal double WidthValue { get; internal set; }
    internal double AbsoluteTopValue { get; }
    internal double AbsoluteLeftValue { get; }
    internal double AbsoluteBottomValue { get; }
    internal double AbsoluteRightValue { get; }
    internal int ZIndex { get; internal set; }
    internal ExpressionInfo ToolTip { get; internal set; }
    internal Visibility Visibility { get; internal set; }
    internal ExpressionInfo Label { get; internal set; }
    internal ExpressionInfo Bookmark { get; internal set; }
    internal string Custom { get; internal set; }
    internal bool RepeatedSibling { get; internal set; }
    internal bool IsFullSize { get; internal set; }
    internal int ExprHostID { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal string DataElementNameDefault { get; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal int DistanceFromReportTop { get; internal set; }
    internal int DistanceBeforeTop { get; internal set; }
    internal IntList SiblingAboveMe { get; internal set; }
    internal ReportItem Parent { get; }
    internal bool Computed { get; internal set; }
    internal string RepeatWith { get; internal set; }
    internal DataElementOutputTypesRDL DataElementOutputRDL { get; internal set; }
    internal ReportItemExprHost ExprHost { get; }
    internal int StartPage { get; internal set; }
    internal int EndPage { get; internal set; }
    internal bool SoftPageBreak { get; internal set; }
    internal bool ShareMyLastPage { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal string RenderingModelID { get; internal set; }
    internal StyleProperties SharedStyleProperties { get; internal set; }
    internal bool NoNonSharedStyleProps { get; internal set; }
    internal ReportSize HeightForRendering { get; internal set; }
    internal ReportSize WidthForRendering { get; internal set; }
    internal ReportSize TopForRendering { get; internal set; }
    internal ReportSize LeftForRendering { get; internal set; }
    internal DataElementOutputTypes DataElementOutputDefault { get; }
    internal double TopInStartPage { get; internal set; }
    internal double BottomInEndPage { get; internal set; }
    internal DataValueList CustomProperties { get; internal set; }
    internal PageTextboxes RepeatedSiblingTextboxes { get; internal set; }
    protected ReportItem(int id, ReportItem parent);
    protected ReportItem(ReportItem parent);
    internal abstract virtual ObjectType get_ObjectType();
    internal string get_Name();
    internal void set_Name(string value);
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal string get_Top();
    internal void set_Top(string value);
    internal double get_TopValue();
    internal void set_TopValue(double value);
    internal string get_Left();
    internal void set_Left(string value);
    internal double get_LeftValue();
    internal void set_LeftValue(double value);
    internal string get_Height();
    internal void set_Height(string value);
    internal double get_HeightValue();
    internal void set_HeightValue(double value);
    internal string get_Width();
    internal void set_Width(string value);
    internal double get_WidthValue();
    internal void set_WidthValue(double value);
    internal double get_AbsoluteTopValue();
    internal double get_AbsoluteLeftValue();
    internal double get_AbsoluteBottomValue();
    internal double get_AbsoluteRightValue();
    internal int get_ZIndex();
    internal void set_ZIndex(int value);
    internal ExpressionInfo get_ToolTip();
    internal void set_ToolTip(ExpressionInfo value);
    internal Visibility get_Visibility();
    internal void set_Visibility(Visibility value);
    internal ExpressionInfo get_Label();
    internal void set_Label(ExpressionInfo value);
    internal ExpressionInfo get_Bookmark();
    internal void set_Bookmark(ExpressionInfo value);
    internal string get_Custom();
    internal void set_Custom(string value);
    internal bool get_RepeatedSibling();
    internal void set_RepeatedSibling(bool value);
    internal bool get_IsFullSize();
    internal void set_IsFullSize(bool value);
    internal int get_ExprHostID();
    internal void set_ExprHostID(int value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal virtual string get_DataElementNameDefault();
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal virtual int get_DistanceFromReportTop();
    internal virtual void set_DistanceFromReportTop(int value);
    internal int get_DistanceBeforeTop();
    internal void set_DistanceBeforeTop(int value);
    internal IntList get_SiblingAboveMe();
    internal void set_SiblingAboveMe(IntList value);
    internal ReportItem get_Parent();
    internal bool get_Computed();
    internal void set_Computed(bool value);
    internal string get_RepeatWith();
    internal void set_RepeatWith(string value);
    internal DataElementOutputTypesRDL get_DataElementOutputRDL();
    internal void set_DataElementOutputRDL(DataElementOutputTypesRDL value);
    internal ReportItemExprHost get_ExprHost();
    internal virtual int get_StartPage();
    internal virtual void set_StartPage(int value);
    internal virtual int get_EndPage();
    internal virtual void set_EndPage(int value);
    internal virtual bool get_SoftPageBreak();
    internal virtual void set_SoftPageBreak(bool value);
    internal virtual bool get_ShareMyLastPage();
    internal virtual void set_ShareMyLastPage(bool value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal string get_RenderingModelID();
    internal void set_RenderingModelID(string value);
    internal StyleProperties get_SharedStyleProperties();
    internal void set_SharedStyleProperties(StyleProperties value);
    internal bool get_NoNonSharedStyleProps();
    internal void set_NoNonSharedStyleProps(bool value);
    internal ReportSize get_HeightForRendering();
    internal void set_HeightForRendering(ReportSize value);
    internal ReportSize get_WidthForRendering();
    internal void set_WidthForRendering(ReportSize value);
    internal ReportSize get_TopForRendering();
    internal void set_TopForRendering(ReportSize value);
    internal ReportSize get_LeftForRendering();
    internal void set_LeftForRendering(ReportSize value);
    internal virtual DataElementOutputTypes get_DataElementOutputDefault();
    internal double get_TopInStartPage();
    internal void set_TopInStartPage(double value);
    internal double get_BottomInEndPage();
    internal void set_BottomInEndPage(double value);
    internal DataValueList get_CustomProperties();
    internal void set_CustomProperties(DataValueList value);
    internal PageTextboxes get_RepeatedSiblingTextboxes();
    internal void set_RepeatedSiblingTextboxes(PageTextboxes value);
    internal virtual bool Initialize(InitializationContext context);
    private void ValidateParentBoundaries(InitializationContext context, ObjectType objectType, string objectName);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal virtual void CalculateSizes(double width, double height, InitializationContext context, bool overwrite);
    internal void CalculateSizes(InitializationContext context, bool overwrite);
    internal virtual void RegisterReceiver(InitializationContext context);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    internal abstract virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    protected void ReportItemSetExprHost(ReportItemExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    internal virtual void ProcessDrillthroughAction(ProcessingContext processingContext, NonComputedUniqueNames nonCompNames);
    internal void ProcessNavigationAction(NavigationInfo navigationInfo, NonComputedUniqueNames nonCompNames, int startPage);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportItemColInstance : InstanceInfoOwner {
    private ReportItemInstanceList m_reportItemInstances;
    private RenderingPagesRangesList m_childrenStartAndEndPages;
    [ReferenceAttribute]
private ReportItemCollection m_reportItemColDef;
    private NonComputedUniqueNames[] m_childrenNonComputedUniqueNames;
    internal ReportItemInstanceList ReportItemInstances { get; internal set; }
    internal ReportItemCollection ReportItemColDef { get; internal set; }
    internal ReportItemInstance Item { get; }
    internal NonComputedUniqueNames[] ChildrenNonComputedUniqueNames { get; internal set; }
    internal RenderingPagesRangesList ChildrenStartAndEndPages { get; internal set; }
    internal ReportItemColInstance(ProcessingContext pc, ReportItemCollection reportItemsDef);
    internal ReportItemInstanceList get_ReportItemInstances();
    internal void set_ReportItemInstances(ReportItemInstanceList value);
    internal ReportItemCollection get_ReportItemColDef();
    internal void set_ReportItemColDef(ReportItemCollection value);
    internal ReportItemInstance get_Item(int index);
    internal NonComputedUniqueNames[] get_ChildrenNonComputedUniqueNames();
    internal void set_ChildrenNonComputedUniqueNames(NonComputedUniqueNames[] value);
    internal RenderingPagesRangesList get_ChildrenStartAndEndPages();
    internal void set_ChildrenStartAndEndPages(RenderingPagesRangesList value);
    internal void Add(ReportItemInstance riInstance);
    internal int GetReportItemUniqueName(int index);
    internal void GetReportItemStartAndEndPages(int index, Int32& startPage, Int32& endPage);
    internal static Declaration GetDeclaration();
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.IIndexInto.GetChildAt(int index, NonComputedUniqueNames& nonCompNames);
    internal ReportItemColInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager, bool inPageSection);
    internal void SetPaginationForNonComputedChild(Pagination pagination, ReportItem reportItem, ReportItem parentDef);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportItemColInstanceInfo : InstanceInfo {
    private NonComputedUniqueNames[] m_childrenNonComputedUniqueNames;
    internal NonComputedUniqueNames[] ChildrenNonComputedUniqueNames { get; internal set; }
    internal ReportItemColInstanceInfo(ProcessingContext pc, ReportItemCollection reportItemsDef, ReportItemColInstance owner);
    internal NonComputedUniqueNames[] get_ChildrenNonComputedUniqueNames();
    internal void set_ChildrenNonComputedUniqueNames(NonComputedUniqueNames[] value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportItemCollection : IDOwner {
    private ReportItemList m_nonComputedReportItems;
    private ReportItemList m_computedReportItems;
    private ReportItemIndexerList m_sortedReportItemList;
    private RunningValueInfoList m_runningValues;
    private bool m_normal;
    private bool m_unpopulated;
    private ReportItemList m_entries;
    private string m_linkToChildName;
    private bool m_firstInstance;
    internal ReportItem Item { get; }
    internal int Count { get; }
    internal ReportItemList ComputedReportItems { get; internal set; }
    internal ReportItemList NonComputedReportItems { get; internal set; }
    internal ReportItemIndexerList SortedReportItems { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal bool FirstInstance { get; internal set; }
    unknown string LinkToChild {internal set; }
    internal ReportItemCollection(int id, bool normal);
    internal ReportItem get_Item(int index);
    internal int get_Count();
    internal ReportItemList get_ComputedReportItems();
    internal void set_ComputedReportItems(ReportItemList value);
    internal ReportItemList get_NonComputedReportItems();
    internal void set_NonComputedReportItems(ReportItemList value);
    internal ReportItemIndexerList get_SortedReportItems();
    internal void set_SortedReportItems(ReportItemIndexerList value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal bool get_FirstInstance();
    internal void set_FirstInstance(bool value);
    internal void set_LinkToChild(string value);
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal void AddReportItem(ReportItem reportItem);
    internal void AddCustomRenderItem(ReportItem reportItem);
    internal bool Initialize(InitializationContext context, bool registerRunningValues);
    internal bool Initialize(InitializationContext context, bool registerRunningValues, Boolean[] tableColumnVisiblity);
    private void RegisterOverlappingItems(InitializationContext context, int count, SortedReportItemIndexList sortedTop, bool isSortedVertically);
    internal void CalculateSizes(InitializationContext context, bool overwrite);
    internal void RegisterReceiver(InitializationContext context);
    internal void MarkChildrenComputed();
    internal void Populate(ErrorContext errorContext);
    internal bool IsReportItemComputed(int index);
    internal ReportItem GetUnsortedReportItem(int index, bool computed);
    internal void GetReportItem(int index, Boolean& computed, Int32& internalIndex, ReportItem& reportItem);
    private ReportItem InternalGet(int index, bool computed);
    internal void ProcessDrillthroughAction(ProcessingContext processingContext, NonComputedUniqueNames[] nonCompNames);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportItemIndexer : ValueType {
    internal bool IsComputed;
    internal int Index;
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportItemIndexerList : ArrayList {
    internal ReportItemIndexer Item { get; }
    internal ReportItemIndexerList(int capacity);
    internal ReportItemIndexer get_Item(int index);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ReportItemInstance : InstanceInfoOwner {
    protected int m_uniqueName;
    [ReferenceAttribute]
protected ReportItem m_reportItemDef;
    internal int UniqueName { get; internal set; }
    internal ReportItem ReportItemDef { get; internal set; }
    internal ReportItemInstance(int uniqueName, ReportItem reportItemDef);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal ReportItem get_ReportItemDef();
    internal void set_ReportItemDef(ReportItem value);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    protected virtual object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    internal virtual int GetDocumentMapUniqueName();
    internal static Declaration GetDeclaration();
    internal ReportItemInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
    internal ReportItemInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager, bool inPageSection);
    internal abstract virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ReportItemInstanceInfo : InstanceInfo {
    protected Object[] m_styleAttributeValues;
    protected bool m_startHidden;
    protected string m_label;
    protected string m_bookmark;
    protected string m_toolTip;
    protected DataValueInstanceList m_customPropertyInstances;
    protected ReportItem m_reportItemDef;
    internal Object[] StyleAttributeValues { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal ReportItem ReportItemDef { get; internal set; }
    internal string Label { get; internal set; }
    internal string Bookmark { get; internal set; }
    internal string ToolTip { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    protected ReportItemInstanceInfo(ProcessingContext pc, ReportItem reportItemDef, ReportItemInstance owner, int index);
    protected ReportItemInstanceInfo(ProcessingContext pc, ReportItem reportItemDef, ReportItemInstance owner, int index, bool customCreated);
    protected ReportItemInstanceInfo(ProcessingContext pc, ReportItem reportItemDef, ReportItemInstance owner, bool addToChunk);
    protected ReportItemInstanceInfo(ReportItem reportItemDef);
    internal Object[] get_StyleAttributeValues();
    internal void set_StyleAttributeValues(Object[] value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal ReportItem get_ReportItemDef();
    internal void set_ReportItemDef(ReportItem value);
    internal string get_Label();
    internal void set_Label(string value);
    internal string get_Bookmark();
    internal void set_Bookmark(string value);
    internal string get_ToolTip();
    internal void set_ToolTip(string value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    private void ConstructorHelper(ProcessingContext pc, ReportItem reportItemDef, ReportItemInstance owner);
    internal object GetStyleAttributeValue(int index);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideReceiver.ProcessReceiver(ProcessingContext context, int uniqueName);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportItemInstanceList : ArrayList {
    internal ReportItemInstance Item { get; }
    internal ReportItemInstanceList(int capacity);
    internal ReportItemInstance get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportItemList : ArrayList {
    internal ReportItem Item { get; }
    internal ReportItemList(int capacity);
    internal ReportItem get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.AggregatesImpl : Aggregates {
    internal static string Name;
    internal static string FullName;
    private bool m_lockAdd;
    private Hashtable m_collection;
    private Hashtable m_duplicateNames;
    private IErrorContext m_iErrorContext;
    public object Item { get; }
    internal ICollection Objects { get; }
    internal AggregatesImpl(IErrorContext iErrorContext);
    internal AggregatesImpl(bool lockAdd, IErrorContext iErrorContext);
    public virtual object get_Item(string key);
    internal ICollection get_Objects();
    internal void Add(DataAggregateObj newObject);
    internal void Set(string name, DataAggregateInfo aggregateDef, StringList duplicateNames, DataAggregateObjResult aggregateResult);
    internal DataAggregateObj GetAggregateObj(string name);
    private void PopulateDuplicateNames(string name, StringList duplicateNames);
    internal void ResetUsedInExpression();
    internal void AddFieldsUsedInExpression(List`1<string> fieldsUsedInValueExpression);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.CalculatedFieldWrapperImpl : CalculatedFieldWrapper {
    private Field m_fieldDef;
    private object m_value;
    private bool m_isValueReady;
    private bool m_isVisited;
    private ReportRuntime m_reportRT;
    private IErrorContext m_iErrorContext;
    public object Value { get; }
    internal CalculatedFieldWrapperImpl(Field fieldDef, ReportRuntime reportRT);
    public virtual object get_Value();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.DataSetImpl : DataSet {
    private DataSet m_dataSet;
    public string CommandText { get; }
    public string RewrittenCommandText { get; }
    internal DataSetImpl(DataSet dataSetDef);
    public virtual string get_CommandText();
    public virtual string get_RewrittenCommandText();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.DataSetsImpl : DataSets {
    internal static string Name;
    internal static string FullName;
    private bool m_lockAdd;
    private Hashtable m_collection;
    public DataSet Item { get; }
    internal DataSetsImpl(bool lockAdd, int size);
    internal void Add(DataSet dataSetDef);
    public virtual DataSet get_Item(string key);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.DataSourceImpl : DataSource {
    private DataSource m_dataSource;
    public string DataSourceReference { get; }
    public string Type { get; }
    internal DataSourceImpl(DataSource dataSourceDef);
    public virtual string get_DataSourceReference();
    public virtual string get_Type();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.DataSourcesImpl : DataSources {
    internal static string Name;
    internal static string FullName;
    private bool m_lockAdd;
    private Hashtable m_collection;
    public DataSource Item { get; }
    internal DataSourcesImpl(int size);
    internal void Add(DataSource dataSourceDef);
    public virtual DataSource get_Item(string key);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.FieldImpl : Field {
    private object m_value;
    private bool m_isAggregationField;
    private bool m_aggregationFieldChecked;
    private DataFieldStatus m_fieldStatus;
    private string m_exceptionMessage;
    private Hashtable m_properties;
    private Field m_fieldDef;
    private bool m_usedInExpression;
    public object Item { get; }
    public object Value { get; }
    public bool IsMissing { get; }
    public string UniqueName { get; }
    public string BackgroundColor { get; }
    public string Color { get; }
    public string FontFamily { get; }
    public string FontSize { get; }
    public string FontWeight { get; }
    public string FontStyle { get; }
    public string TextDecoration { get; }
    public string FormattedValue { get; }
    public object Key { get; }
    public int LevelNumber { get; }
    public string ParentUniqueName { get; }
    internal DataFieldStatus FieldStatus { get; }
    internal string ExceptionMessage { get; }
    internal bool IsAggregationField { get; }
    internal bool AggregationFieldChecked { get; internal set; }
    internal Hashtable Properties { get; }
    internal Field FieldDef { get; }
    internal bool UsedInExpression { get; internal set; }
    internal FieldImpl(object value, bool isAggregationField, Field fieldDef);
    internal FieldImpl(DataFieldStatus status, string exceptionMessage, Field fieldDef);
    public virtual object get_Properties(string key);
    public virtual object get_Value();
    public virtual bool get_IsMissing();
    public virtual string get_UniqueName();
    public virtual string get_BackgroundColor();
    public virtual string get_Color();
    public virtual string get_FontFamily();
    public virtual string get_FontSize();
    public virtual string get_FontWeight();
    public virtual string get_FontStyle();
    public virtual string get_TextDecoration();
    public virtual string get_FormattedValue();
    public virtual object get_Key();
    public virtual int get_LevelNumber();
    public virtual string get_ParentUniqueName();
    internal DataFieldStatus get_FieldStatus();
    internal string get_ExceptionMessage();
    internal bool get_IsAggregationField();
    internal bool get_AggregationFieldChecked();
    internal void set_AggregationFieldChecked(bool value);
    internal Hashtable get_Properties();
    internal Field get_FieldDef();
    internal bool get_UsedInExpression();
    internal void set_UsedInExpression(bool value);
    internal void SetValue(object value);
    internal void SetProperty(string propertyName, object propertyValue);
    private object GetProperty(string propertyName);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.FieldsImpl : Fields {
    internal static string Name;
    private Hashtable m_nameMap;
    private Boolean[] m_fieldMissing;
    private Boolean[] m_fieldError;
    private FieldImpl[] m_collection;
    private int m_count;
    private bool m_referenced;
    private bool m_readerExtensionsSupported;
    private bool m_readerFieldProperties;
    private bool m_isAggregateRow;
    private int m_aggregationFieldCount;
    private int m_aggregationFieldCountForDetailRow;
    private bool m_noRows;
    private bool m_validAggregateRow;
    private bool m_addRowIndex;
    public Field Item { get; }
    internal FieldImpl Item { get; internal set; }
    internal int Count { get; }
    internal int CountWithRowIndex { get; }
    internal bool ReaderExtensionsSupported { get; internal set; }
    internal bool ReaderFieldProperties { get; internal set; }
    internal bool IsAggregateRow { get; internal set; }
    internal int AggregationFieldCount { get; internal set; }
    unknown int AggregationFieldCountForDetailRow {internal set; }
    internal bool ValidAggregateRow { get; internal set; }
    internal bool AddRowIndex { get; }
    internal FieldsImpl(int size, bool addRowIndex);
    public virtual Field get_Item(string key);
    internal FieldImpl get_Item(int index);
    internal void set_Item(int index, FieldImpl value);
    internal int get_Count();
    internal int get_CountWithRowIndex();
    internal bool get_ReaderExtensionsSupported();
    internal void set_ReaderExtensionsSupported(bool value);
    internal bool get_ReaderFieldProperties();
    internal void set_ReaderFieldProperties(bool value);
    internal bool get_IsAggregateRow();
    internal void set_IsAggregateRow(bool value);
    internal int get_AggregationFieldCount();
    internal void set_AggregationFieldCount(int value);
    internal void set_AggregationFieldCountForDetailRow(int value);
    internal bool get_ValidAggregateRow();
    internal void set_ValidAggregateRow(bool value);
    internal bool get_AddRowIndex();
    internal void Add(string name, FieldImpl field);
    internal void AddRowIndexField();
    internal void SetFieldIsMissing(int index);
    internal bool IsFieldMissing(int index);
    internal void SetFieldErrorRegistered(int index);
    internal bool IsFieldErrorRegistered(int index);
    internal void NewRow();
    internal void SetRowIndex(int rowIndex);
    internal void SetFields(FieldImpl[] fields);
    internal void SetFields(FieldImpl[] fields, bool isAggregateRow, int aggregationFieldCount, bool validAggregateRow);
    internal FieldImpl[] GetAndSaveFields();
    internal FieldImpl[] GetFields();
    internal int GetRowIndex();
    internal void Clone(FieldsImpl fields);
    private bool ValidateFieldCollection();
    internal void ResetUsedInExpression();
    internal void AddFieldsUsedInExpression(List`1<string> fieldsUsedInValueExpression);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.GlobalsImpl : Globals {
    internal static string Name;
    internal static string FullName;
    private string m_reportName;
    private int m_pageNumber;
    private int m_totalPages;
    private DateTime m_executionTime;
    private string m_reportServerUrl;
    private string m_reportFolder;
    public object Item { get; }
    public string ReportName { get; }
    public int PageNumber { get; }
    public int TotalPages { get; }
    public DateTime ExecutionTime { get; }
    public string ReportServerUrl { get; }
    public string ReportFolder { get; }
    internal GlobalsImpl(string reportName, DateTime executionTime, string reportServerUrl, string reportFolder);
    internal GlobalsImpl(string reportName, int pageNumber, int totalPages, DateTime executionTime, string reportServerUrl, string reportFolder);
    public virtual object get_Item(string key);
    public virtual string get_ReportName();
    public virtual int get_PageNumber();
    public virtual int get_TotalPages();
    public virtual DateTime get_ExecutionTime();
    public virtual string get_ReportServerUrl();
    public virtual string get_ReportFolder();
    internal void SetPageNumber(int pageNumber);
    internal void SetPageNumbers(int pageNumber, int totalPages);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.ObjectModelImpl : ObjectModel {
    internal static string NamespacePrefix;
    private FieldsImpl m_fields;
    private ParametersImpl m_parameters;
    private GlobalsImpl m_globals;
    private UserImpl m_user;
    private ReportItemsImpl m_reportItems;
    private AggregatesImpl m_aggregates;
    private DataSetsImpl m_dataSets;
    private DataSourcesImpl m_dataSources;
    private ProcessingContext m_processingContext;
    public Fields Fields { get; }
    public Parameters Parameters { get; }
    public Globals Globals { get; }
    public User User { get; }
    public ReportItems ReportItems { get; }
    public Aggregates Aggregates { get; }
    public DataSets DataSets { get; }
    public DataSources DataSources { get; }
    internal FieldsImpl FieldsImpl { get; internal set; }
    internal ParametersImpl ParametersImpl { get; internal set; }
    internal GlobalsImpl GlobalsImpl { get; internal set; }
    internal UserImpl UserImpl { get; internal set; }
    internal ReportItemsImpl ReportItemsImpl { get; internal set; }
    internal AggregatesImpl AggregatesImpl { get; internal set; }
    internal DataSetsImpl DataSetsImpl { get; internal set; }
    internal DataSourcesImpl DataSourcesImpl { get; internal set; }
    internal ObjectModelImpl(ProcessingContext processingContext);
    internal ObjectModelImpl(ObjectModelImpl copy, ProcessingContext processingContext);
    public virtual Fields get_Fields();
    public virtual Parameters get_Parameters();
    public virtual Globals get_Globals();
    public virtual User get_User();
    public virtual ReportItems get_ReportItems();
    public virtual Aggregates get_Aggregates();
    public virtual DataSets get_DataSets();
    public virtual DataSources get_DataSources();
    internal FieldsImpl get_FieldsImpl();
    internal void set_FieldsImpl(FieldsImpl value);
    internal ParametersImpl get_ParametersImpl();
    internal void set_ParametersImpl(ParametersImpl value);
    internal GlobalsImpl get_GlobalsImpl();
    internal void set_GlobalsImpl(GlobalsImpl value);
    internal UserImpl get_UserImpl();
    internal void set_UserImpl(UserImpl value);
    internal ReportItemsImpl get_ReportItemsImpl();
    internal void set_ReportItemsImpl(ReportItemsImpl value);
    internal AggregatesImpl get_AggregatesImpl();
    internal void set_AggregatesImpl(AggregatesImpl value);
    internal DataSetsImpl get_DataSetsImpl();
    internal void set_DataSetsImpl(DataSetsImpl value);
    internal DataSourcesImpl get_DataSourcesImpl();
    internal void set_DataSourcesImpl(DataSourcesImpl value);
    public virtual bool InScope(string scope);
    public virtual int RecursiveLevel(string scope);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.ParameterImpl : Parameter {
    private Object[] m_value;
    private String[] m_labels;
    private bool m_isMultiValue;
    public object Value { get; }
    public object Label { get; }
    public int Count { get; }
    public bool IsMultiValue { get; }
    internal ParameterImpl(Object[] value, String[] labels, bool isMultiValue);
    public virtual object get_Value();
    public virtual object get_Label();
    public virtual int get_Count();
    public virtual bool get_IsMultiValue();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.ParametersImpl : Parameters {
    internal static string Name;
    internal static string FullName;
    private Hashtable m_nameMap;
    private ParameterImpl[] m_collection;
    private int m_count;
    public Parameter Item { get; }
    internal ParametersImpl(int size);
    public virtual Parameter get_Item(string key);
    internal void Add(string name, ParameterImpl parameter);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.ReportItemImpl : ReportItem {
    internal ReportItem m_item;
    internal ReportRuntime m_reportRT;
    internal IErrorContext m_iErrorContext;
    internal IScope m_scope;
    internal string Name { get; }
    unknown IScope Scope {internal set; }
    internal ReportItemImpl(ReportItem itemDef, ReportRuntime reportRT, IErrorContext iErrorContext);
    internal string get_Name();
    internal void set_Scope(IScope value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.ReportItemsImpl : ReportItems {
    internal static string Name;
    internal static string FullName;
    private bool m_lockAdd;
    private Hashtable m_collection;
    private bool m_specialMode;
    private string m_specialModeIndex;
    public ReportItem Item { get; }
    unknown bool SpecialMode {internal set; }
    internal ReportItemsImpl(bool lockAdd);
    public virtual ReportItem get_Item(string key);
    internal void set_SpecialMode(bool value);
    internal void Add(ReportItemImpl reportItem);
    internal string GetSpecialModeIndex();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.TextBoxImpl : ReportItemImpl {
    private TextBox m_textBox;
    private VariantResult m_result;
    private bool m_isValueReady;
    private bool m_isVisited;
    public object Value { get; }
    internal TextBoxImpl(TextBox itemDef, ReportRuntime reportRT, IErrorContext iErrorContext);
    public virtual object get_Value();
    internal void SetResult(VariantResult result);
    internal VariantResult GetResult();
    internal void Reset();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ReportObjectModel.UserImpl : User {
    internal static string Name;
    internal static string FullName;
    private string m_userID;
    private string m_language;
    private UserProfileState m_allowUserProfileState;
    private UserProfileState m_hasUserProfileState;
    private UserProfileState m_location;
    private bool m_indirectQueryReference;
    public object Item { get; }
    public string UserID { get; }
    public string Language { get; }
    internal UserProfileState UserProfileLocation { get; internal set; }
    internal UserProfileState HasUserProfileState { get; internal set; }
    internal bool IndirectQueryReference { get; internal set; }
    internal UserImpl(string userID, string language, UserProfileState allowUserProfileState);
    public virtual object get_Item(string key);
    public virtual string get_UserID();
    public virtual string get_Language();
    internal UserProfileState get_UserProfileLocation();
    internal void set_UserProfileLocation(UserProfileState value);
    internal UserProfileState get_HasUserProfileState();
    internal void set_HasUserProfileState(UserProfileState value);
    internal bool get_IndirectQueryReference();
    internal void set_IndirectQueryReference(bool value);
    internal void UpdateUserProfileState();
}
internal enum Microsoft.ReportingServices.ReportProcessing.ReportParameterState : Enum {
    public int value__;
    public static ReportParameterState HasValidValue;
    public static ReportParameterState InvalidValueProvided;
    public static ReportParameterState DefaultValueInvalid;
    public static ReportParameterState MissingValidValue;
    public static ReportParameterState HasOutstandingDependencies;
    public static ReportParameterState DynamicValuesUnavailable;
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessing : object {
    internal static int MaximumChartThreads;
    private IConfiguration m_configuration;
    internal IConfiguration Configuration { get; internal set; }
    public bool ProcessToggleEvent(string showHideToggle, IChunkFactory getReportChunkFactory, EventInformation oldShowHideInfo, EventInformation& newShowHideInfo, Boolean& showHideInfoChanged);
    private bool ProcessOdpToggleEvent(string showHideToggle, IChunkFactory getReportChunkFactory, EventInformation oldShowHideInfo, EventInformation& newShowHideInfo, Boolean& showHideInfoChanged);
    private bool ProcessYukonToggleEvent(string showHideToggle, GetReportChunk getReportChunk, EventInformation oldShowHideInfo, EventInformation& newShowHideInfo, Boolean& showHideInfoChanged);
    public int ProcessFindStringEvent(int startPage, int endPage, string findValue, EventInformation eventInfo, ProcessingContext processingContext, OnDemandProcessingResult& result);
    private int ProcessOdpFindStringEvent(int startPage, int endPage, string findValue, EventInformation eventInfo, ProcessingContext processingContext, OnDemandProcessingResult& result);
    private int ProcessYukonFindStringEvent(int startPage, int endPage, string findValue, ProcessingContext pc, EventInformation eventInfo);
    public int ProcessBookmarkNavigationEvent(string bookmarkId, EventInformation eventInfo, ProcessingContext processingContext, String& uniqueName, OnDemandProcessingResult& result);
    private int ProcessOdpBookmarkNavigationEvent(string bookmarkId, EventInformation eventInfo, ProcessingContext processingContext, String& uniqueName, OnDemandProcessingResult& result);
    private int ProcessYukonBookmarkNavigationEvent(string bookmarkId, ProcessingContext pc, String& uniqueName);
    public int ProcessDocumentMapNavigationEvent(string documentMapId, EventInformation eventInfo, ProcessingContext processingContext, OnDemandProcessingResult& result);
    private int ProcessOdpDocumentMapNavigationEvent(string documentMapId, EventInformation eventInfo, ProcessingContext processingContext, OnDemandProcessingResult& result);
    private int ProcessYukonDocumentMapNavigationEvent(string documentMapId, ProcessingContext pc);
    public IDocumentMap GetDocumentMap(EventInformation eventInfo, ProcessingContext processingContext, OnDemandProcessingResult& result);
    private IDocumentMap GetOdpDocumentMap(EventInformation eventInfo, ProcessingContext processingContext, OnDemandProcessingResult& result);
    private DocumentMapNode GetYukonDocumentMap(GetReportChunk getReportChunk);
    public string ProcessDrillthroughEvent(string drillthroughId, IChunkFactory getReportChunk, EventInformation eventInfo, NameValueCollection& parameters);
    public OnDemandProcessingResult ProcessUserSortEvent(string reportItem, SortOptions sortOption, bool clearOldSorts, ProcessingContext pc, RenderingContext rc, IChunkFactory originalSnapshot, String& newReportItem, Int32& page);
    private OnDemandProcessingResult ProcessOdpUserSortEvent(string reportItem, SortOptions sortOption, bool clearOldSorts, ProcessingContext pc, RenderingContext rc, IChunkFactory originalSnapshotChunks, String& newReportItem, Int32& page);
    private OnDemandProcessingResult ProcessYukonUserSortEvent(string reportItem, SortOptions sortOption, bool clearOldSorts, ProcessingContext pc, RenderingContext rc, IChunkFactory sourceSnapshotChunks, String& newReportItem, Int32& page);
    private Report GenerateEventROM(ProcessingContext pc, OnDemandMetadata odpMetadata, EventInformation eventInfo, ExecutionLogContext executionLogContext, ProcessingErrorContext& errorContext, OnDemandProcessingContext& odpContext, RenderingContext& odpRenderingContext, ReportSnapshot& odpReportSnapshot);
    private bool NeedWrapperException(Exception exception, ProcessingErrorContext errorContext, Exception& wrappedException);
    private OnDemandProcessingResult CleanupEventROM(ProcessingContext pc, ExecutionLogContext executionLogContext, ProcessingErrorContext errorContext, OnDemandProcessingContext odpContext, RenderingContext odpRenderingContext, ReportSnapshot odpReportSnapshot, bool exceptionGenerated);
    private OnDemandProcessingResult CleanupEventROM(ProcessingContext pc, ExecutionLogContext executionLogContext, ProcessingErrorContext errorContext, OnDemandProcessingContext odpContext, RenderingContext odpRenderingContext, ReportSnapshot odpReportSnapshot, int pageCount, PaginationMode updatedPaginationMode, bool exceptionGenerated);
    private static void GenerateEventShimROM(IChunkFactory chunkFactory, EventInformation eventInfo, ProcessingContext pc, Report& reportToRender);
    private void ProcessShowHideToggle(string showHideToggle, ReportSnapshot reportSnapshot, EventInformation oldOverrideInformation, RenderingChunkManager chunkManager, Boolean& showHideInformationChanged, EventInformation& newOverrideInformation);
    private bool ProcessOdpUserSortInformation(string reportItemUniqueName, SortOptions sortOption, bool clearOldSorts, EventInformation& userSortInformation);
    private bool ProcessOdpUserSortInformation(string reportItemUniqueName, SortOptions sortOption, bool clearOldSorts, EventInformation& userSortInformation, Boolean& eventExists);
    private bool ProcessUserSortInformation(string reportItem, SortOptions sortOption, bool clearOldSorts, EventInformation& userSortInformation, Int32& reportItemUniqueName);
    private bool ProcessUserSortInformation(int reportItemUniqueName, SortOptions sortOption, bool clearOldSorts, EventInformation& userSortInformation, Boolean& eventExists);
    public static bool NeedsUpgradeToLatest(ReportProcessingFlags processingFlags);
    public static ReportChunkTypes GetImageChunkTypeToCopy(ReportProcessingFlags processingFlags);
    public PublishingResult CreateIntermediateFormat(ICatalogItemContext reportContext, Byte[] reportDefinition, IChunkFactory createChunkFactory, CheckSharedDataSource checkDataSourceCallback, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, ReportProcessingFlags processingFlags, IDataProtection dataProtection);
    public PublishingResult CreateIntermediateFormat(ICatalogItemContext reportContext, Byte[] reportDefinition, IChunkFactory createChunkFactory, CheckSharedDataSource checkDataSourceCallback, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, ReportProcessingFlags processingFlags, IDataProtection dataProtection);
    private void CheckReportCredentials(ReportProcessingContext pc);
    public static bool UpgradeSnapshot(IChunkFactory getChunkFactory, bool isSnapshot, IChunkFactory createChunkFactory, ICatalogItemContext reportContext, Int32& pageCount, Boolean& hasDocumentMap);
    public OnDemandProcessingResult CreateSnapshot(DateTime executionTimeStamp, ProcessingContext pc, IChunkFactory yukonCompiledDefinition);
    public void CreateRenderer(string format, IExtensionFactory extFactory, IRenderingExtension& newRenderer);
    public OnDemandProcessingResult RenderReportAndCacheData(DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory cacheDataChunkFactory, IChunkFactory yukonCompiledDefinition, Boolean& dataCached);
    public OnDemandProcessingResult RenderReportAndCacheData(IRenderingExtension newRenderer, DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory cacheDataFactory, IChunkFactory yukonCompiledDefinition, Boolean& dataCached);
    public OnDemandProcessingResult RenderReport(DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory yukonCompiledDefinition);
    public OnDemandProcessingResult RenderReport(IRenderingExtension newRenderer, DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory yukonCompiledDefinition);
    private OnDemandProcessingResult RenderReport(IRenderingExtension newRenderer, DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory cacheDataChunkFactory, IChunkFactory yukonCompiledDefinition, Boolean& dataCached);
    public OnDemandProcessingResult RenderSnapshot(RenderingContext rc, ProcessingContext pc);
    public OnDemandProcessingResult RenderSnapshot(IRenderingExtension newRenderer, RenderingContext rc, ProcessingContext pc);
    private OnDemandProcessingResult RenderYukonSnapshot(IRenderingExtension newRenderer, ProcessingContext pc, RenderingContext rc);
    public OnDemandProcessingResult RenderReportWithCachedData(DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory getDataFactory);
    public OnDemandProcessingResult RenderReportWithCachedData(IRenderingExtension newRenderer, DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory getDataFactory);
    public OnDemandProcessingResult ProcessAndRenderSnapshot(ProcessingContext pc, RenderingContext rc, IChunkFactory originalSnapshotChunks);
    public OnDemandProcessingResult ProcessAndRenderSnapshot(IRenderingExtension newRenderer, ProcessingContext pc, RenderingContext rc, IChunkFactory originalSnapshotChunks);
    private OnDemandProcessingResult ProcessAndRenderReport(IRenderingExtension newRenderer, bool snapshotProcessing, DateTime executionTimeStamp, ProcessingContext pc, RenderingContext rc, IChunkFactory originalSnapshotChunks, IChunkFactory cachedDataChunks);
    public OnDemandProcessingResult RenderSnapshotStream(string streamName, RenderingContext rc, ProcessingContext pc);
    public OnDemandProcessingResult RenderSnapshotStream(IRenderingExtension newRenderer, string streamName, RenderingContext rc, ProcessingContext pc);
    private OnDemandProcessingResult RenderYukonSnapshotStream(IRenderingExtension newRenderer, string streamName, ProcessingContext pc, RenderingContext rc);
    private OnDemandProcessingResult RenderFromOdpSnapshot(IRenderingExtension newRenderer, string streamName, ProcessingContext pc, RenderingContext rc);
    public void CallRenderer(ICatalogItemContext cc, IExtensionFactory extFactory, CreateAndRegisterStream createAndRegisterStreamCallback);
    public void CallRenderer(IRenderingExtension newRenderer, ICatalogItemContext cc, CreateAndRegisterStream createAndRegisterStreamCallback);
    public RuntimeDataSourceInfoCollection GetAllDataSources(ICatalogItemContext reportContext, IChunkFactory getCompiledDefinitionFactory, OnDemandSubReportDataSourcesCallback subReportCallback, DataSourceInfoCollection dataSources, bool checkIfUsable, ServerDataSourceSettings serverDatasourceSettings, Boolean& needsUpgrade);
    public ParameterInfoCollection GetSnapshotParameters(IChunkFactory getReportChunkFactory);
    private ParameterInfoCollection GetOdpSnapshotParameters(IChunkFactory chunkFactory);
    private ParameterInfoCollection GetYukonSnapshotParameters(GetReportChunk getReportChunkCallback);
    public ProcessingMessageList ProcessReportParameters(DateTime executionTimeStamp, ProcessingContext pc, bool isSnapshot, Boolean& needsUpgrade);
    internal static bool ContainsFlag(ReportProcessingFlags processingFlags, ReportProcessingFlags flag);
    private static void FinallyBlockForProcessingAndRendering(RenderingContext odpRenderingContext, ExecutionLogContext executionLogContext);
    private static void RequestErrorGroupTreeCleanup(OnDemandProcessingContext odpContext);
    private static void CleanupOnDemandProcessing(ProcessingContext pc, OnDemandProcessingContext topLevelOdpContext, bool resetGroupTreeStorage);
    private static void UpdateHostingEnvironment(ErrorContext errorContext, ICatalogItemContext itemContext, ExecutionLogContext executionLogContext, ProcessingEngine processingEngine, IJobContext jobContext);
    private static void UpdateEventInfo(ReportSnapshot odpReportSnapshot, OnDemandProcessingContext odpContext, RenderingContext odpRenderingContext, Boolean& eventInfoChanged);
    private static void UpdateEventInfo(ReportSnapshot odpReportSnapshot, OnDemandProcessingContext odpContext, RenderingContext odpRenderingContext, RenderingContext rc, Boolean& eventInfoChanged);
    private static int GetNumberOfPages(Hashtable renderProperties);
    private static PaginationMode GetUpdatedPaginationMode(Hashtable renderProperties, PaginationMode clientPaginationMode);
    private static void UpdateServerTotalPages(IRenderingExtension renderer, Hashtable& renderProperties);
    private static void HandleRenderingException(ReportRenderingException rex);
    private Report CompileYukonReport(ICatalogItemContext reportContext, Byte[] reportDefinition, CreateReportChunk createChunkCallback, CheckSharedDataSource checkDataSourceCallback, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, PublishingErrorContext errorContext, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, IDataProtection dataProtection, String& reportDescription, String& reportLanguage, ParameterInfoCollection& parameters, DataSourceInfoCollection& dataSources, UserLocationFlags& userReferenceLocation, ArrayList& dataSetsName, Boolean& hasExternalImages, Boolean& hasHyperlinks);
    private Report CompileOdpReport(ICatalogItemContext reportContext, Byte[] reportDefinition, IChunkFactory createChunkCallback, CheckSharedDataSource checkDataSourceCallback, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, PublishingErrorContext errorContext, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, IDataProtection dataProtection, String& reportDescription, String& reportLanguage, ParameterInfoCollection& parameters, DataSourceInfoCollection& dataSources, UserLocationFlags& userReferenceLocation, ArrayList& dataSetsName, Boolean& hasExternalImages, Boolean& hasHyperlinks);
    private ReportSnapshot ProcessReport(Report report, ProcessingContext pc, bool snapshotProcessing, bool processWithCachedData, GetReportChunk getChunkCallback, ErrorContext errorContext, DateTime executionTime, CreateReportChunk cacheDataCallback, ProcessingContext& context, UserProfileState& userProfileState);
    private bool HasUserSortFilter(Report report, UInt32 subreportLevel, ProcessingContext context);
    private ReportSnapshot ProcessOdpReport(Report report, OnDemandMetadata odpMetadataFromSnapshot, ProcessingContext pc, bool snapshotProcessing, bool reprocessSnapshot, bool processUserSortFilterEvent, bool processWithCachedData, ErrorContext errorContext, DateTime executionTime, IChunkFactory cacheDataChunkFactory, StoreServerParameters storeServerParameters, GlobalIDOwnerCollection globalIDOwnerCollection, SortFilterEventInfoMap oldUserSortInformation, EventInformation newUserSortInformation, string oldUserSortEventSourceUniqueName, ExecutionLogContext executionLogContext, OnDemandProcessingContext& odpContext);
    internal static void FetchSubReports(Report report, IChunkFactory getReportChunks, ErrorContext errorContext, OnDemandMetadata odpMetadata, ICatalogItemContext parentReportContext, OnDemandSubReportCallback subReportCallback, int subReportLevel, bool snapshotProcessing, bool processWithCachedData, bool canShareDataSets, GlobalIDOwnerCollection globalIDOwnerCollection, ParameterInfoCollection parentQueryParameters);
    private static bool IsAllDataShared(SubReport subReport, bool canShareDataSets);
    private static void DeserializeKatmaiSubReport(SubReport subReport, IChunkFactory getReportChunks, ICatalogItemContext reportContext, OnDemandSubReportCallback subReportCallback, SubReportInfo subReportInfo, bool snapshotProcessing, ErrorContext errorContext, GlobalIDOwnerCollection globalIDOwnerCollection, bool processWithCachedData, ParameterInfoCollection parentQueryParameters);
    private static bool NeedsUpgradeImpl(ReportProcessingFlags flags);
    internal static void HandleSubReportProcessingError(ErrorContext errorContext, SubReport subReport, string instanceID, ErrorContext subReportErrorContext, Exception e);
    private ReportSnapshot ProcessReport(Report report, ProcessingContext pc, ProcessingContext context, UserProfileState& userProfileState);
    internal static ProcessingMessageList ProcessReportParameters(Report report, ProcessingContext mergeContext, ParameterInfoCollection parameters);
    internal static ProcessingMessageList ProcessReportParameters(Report report, OnDemandProcessingContext context, ParameterInfoCollection parameters);
    private static Report DeserializeKatmaiReport(IChunkFactory chunkFactory);
    internal static Report DeserializeKatmaiReport(IChunkFactory chunkFactory, bool keepReferences, GlobalIDOwnerCollection globalIDOwnerCollection, bool processWithCachedData);
    private static Report DeserializeKatmaiReport(IChunkFactory chunkFactory, string chunkName, bool keepReferences, GlobalIDOwnerCollection globalIDOwnerCollection, IDOwner parentIDOwner, ReportItem parentReportItem, bool processUsingCachedData);
    private static Report DeserializeReport(GetReportChunk getChunkCallback);
    private static Report DeserializeReport(GetReportChunk getChunkCallback, Hashtable& definitionObjects);
    private static Report DeserializeReport(GetReportChunk getChunkCallback, ReportItem parent);
    private static Report DeserializeReport(GetReportChunk getChunkCallback, ReportItem parent, Hashtable& definitionObjects);
    private static Report DeserializeReportFromSnapshot(GetReportChunk getChunkCallback, DateTime& executionTime);
    private static Report DeserializeReportFromSnapshot(GetReportChunk getChunkCallback, DateTime& executionTime, Hashtable& definitionObjects);
    private static Report DeserializeReportFromSnapshot(GetReportChunk getChunkCallback, DateTime& executionTime, Hashtable& definitionObjects, IntermediateFormatVersion& intermediateFormatVersion);
    private static void SerializeReport(Report report, CreateReportChunk createChunkCallback);
    private static void SerializeReport(Report report, IChunkFactory createChunkCallback);
    private static ReportSnapshot DeserializeReportSnapshot(GetReportChunk getChunkCallback, CreateReportChunk createChunkCallback, IGetResource getResourceCallback, RenderingContext renderingContext, IDataProtection dataProtection, Hashtable& instanceObjects, Hashtable& definitionObjects, State& declarationsRead, Boolean& isOldSnapshot);
    internal static int CompareTo(object x, object y, CompareInfo compareInfo, CompareOptions compareOptions);
    internal static int CompareTo(object x, object y, CompareInfo compareInfo, CompareOptions compareOptions, bool throwExceptionOnComparisonFailure, Boolean& validComparisonResult);
    private static int CompareWithIComparable(object x, object y, bool throwExceptionOnComparisonFailure, Boolean& validComparisonResult);
    internal static int CompareWithInvariantCulture(string x, string y, bool ignoreCase);
    private static void GetInteractivePageHeaderFooter(int pageNumber, Report report, PageSection& pageHeader, PageSection& pageFooter);
    private static PageSection GetRenderingPageSection(PageSectionInstance instance, Report report, int pageNumber, bool isHeader);
    internal static void EvaluateHeaderFooterExpressions(int pageNumber, int totalPages, Report report, PageReportItems pageReportItems, PageSection& pageHeader, PageSection& pageFooter);
    private static NameValueCollection FormServerParameterCollection(NameValueCollection serverParams);
    private static void CheckAndAddServerParam(NameValueCollection src, string paramName, NameValueCollection dest);
    private static void CheckCredentialsOdp(Report report, DataSourceInfoCollection dataSources, ICatalogItemContext reportContext, OnDemandSubReportDataSourcesCallback subReportCallback, RuntimeDataSourceInfoCollection allDataSources, int subReportLevel, bool checkIfUsable, ServerDataSourceSettings serverDatasourceSettings, Hashtable subReportNames);
    private static void CheckCredentials(Report report, DataSourceInfoCollection dataSources, ICatalogItemContext reportContext, SubReportDataSourcesCallback subReportCallback, RuntimeDataSourceInfoCollection allDataSources, int subReportLevel, bool checkIfUsable, ServerDataSourceSettings serverDatasourceSettings, Hashtable subReportNames);
    private static bool CanUseCachedData(Report report, ICatalogItemContext reportContext, SubReportCallback subReportCallback, int subReportLevel);
    internal IConfiguration get_Configuration();
    internal void set_Configuration(IConfiguration value);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingContext : ProcessingContext {
    private RuntimeDataSourceInfoCollection m_dataSources;
    private IProcessingDataExtensionConnection m_createDataExtensionInstanceFunction;
    internal bool EnableDataBackedParameters { get; }
    internal RuntimeDataSourceInfoCollection DataSources { get; }
    internal IProcessingDataExtensionConnection CreateDataExtensionInstanceFunction { get; }
    internal bool CanShareDataSets { get; }
    internal IProcessingDataExtensionConnection CreateAndSetupDataExtensionFunction { get; }
    internal ReportProcessingContext(ICatalogItemContext reportContext, string requestUserName, ParameterInfoCollection parameters, RuntimeDataSourceInfoCollection dataSources, OnDemandSubReportCallback subReportCallback, IGetResource getResourceFunction, IChunkFactory createChunkFactory, ExecutionType interactiveExecution, CultureInfo culture, UserProfileState allowUserProfileState, UserProfileState initialUserProfileState, IProcessingDataExtensionConnection createDataExtensionInstanceFunction, ReportRuntimeSetup reportRuntimeSetup, CreateAndRegisterStream createStreamCallback, bool isHistorySnapshot, IJobContext jobContext, IExtensionFactory extFactory, IDataProtection dataProtection);
    internal virtual bool get_EnableDataBackedParameters();
    internal virtual RuntimeDataSourceInfoCollection get_DataSources();
    internal IProcessingDataExtensionConnection get_CreateDataExtensionInstanceFunction();
    internal virtual bool get_CanShareDataSets();
    internal virtual ProcessingContext CreateInternalProcessingContext(string chartName, Report report, ErrorContext errorContext, DateTime executionTime, UserProfileState allowUserProfileState, bool isHistorySnapshot, bool snapshotProcessing, bool processWithCachedData, GetReportChunk getChunkCallback, CreateReportChunk cacheDataCallback);
    internal virtual ProcessingContext ParametersInternalProcessingContext(ErrorContext errorContext, DateTime executionTimeStamp, bool isSnapshot);
    internal virtual IProcessingDataExtensionConnection get_CreateAndSetupDataExtensionFunction();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException : ReportProcessingExceptionBase {
    private ProcessingMessageList m_processingMessages;
    private bool m_useMessageListForExceptionMessage;
    public ProcessingMessageList ProcessingMessages { get; }
    public string Message { get; }
    internal ReportProcessingException(ProcessingMessageList processingMessages);
    internal ReportProcessingException(Exception innerException, ProcessingMessageList processingMessages);
    internal ReportProcessingException(Exception innerException);
    internal ReportProcessingException(ErrorCode code, Exception innerException, Object[] arguments);
    internal ReportProcessingException(ErrorCode code);
    internal ReportProcessingException(ErrorCode code, Object[] arguments);
    internal ReportProcessingException(ErrorCode code, string errMessage);
    protected ReportProcessingException(SerializationInfo info, StreamingContext context);
    public ProcessingMessageList get_ProcessingMessages();
    public virtual string get_Message();
    protected virtual XmlNode AddMoreInformationForThis(XmlDocument doc, XmlNode parent, StringBuilder errorMsgBuilder);
    protected virtual void AddWarnings(XmlDocument doc, XmlNode parent);
    private static string CodeFromMessage(ProcessingMessage message);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_ComparisonError : Exception {
    private static string TypeXSerializationID;
    private static string TypeYSerializationID;
    private string m_typeX;
    private string m_typeY;
    internal string TypeX { get; }
    internal string TypeY { get; }
    internal ReportProcessingException_ComparisonError(string typeX, string typeY);
    private ReportProcessingException_ComparisonError(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal string get_TypeX();
    internal string get_TypeY();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_FieldError : Exception {
    private DataFieldStatus m_status;
    internal DataFieldStatus Status { get; }
    internal ReportProcessingException_FieldError(DataFieldStatus status, string message);
    private ReportProcessingException_FieldError(SerializationInfo info, StreamingContext context);
    internal DataFieldStatus get_Status();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_InvalidOperationException : Exception {
    private ReportProcessingException_InvalidOperationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_NonExistingDataSetReference : Exception {
    private ReportProcessingException_NonExistingDataSetReference(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_NonExistingDataSourceReference : Exception {
    private ReportProcessingException_NonExistingDataSourceReference(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_NonExistingFieldReference : Exception {
    private ReportProcessingException_NonExistingFieldReference(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_NonExistingParameterReference : Exception {
    private ReportProcessingException_NonExistingParameterReference(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_NonExistingReportItemReference : Exception {
    private ReportProcessingException_NonExistingReportItemReference(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_NonExistingVariableReference : Exception {
    private ReportProcessingException_NonExistingVariableReference(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_NoRowsFieldAccess : Exception {
    private ReportProcessingException_NoRowsFieldAccess(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportProcessingException_UserProfilesDependencies : Exception {
    private ReportProcessingException_UserProfilesDependencies(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.ReportProcessing.ReportProcessingFlags : Enum {
    public int value__;
    public static ReportProcessingFlags NotSet;
    public static ReportProcessingFlags OnDemandEngine;
    public static ReportProcessingFlags YukonEngine;
    public static ReportProcessingFlags UpgradedYukonSnapshot;
    public static ReportProcessingFlags YukonSnapshot;
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportPublishing : object {
    private bool m_static;
    private bool m_interactive;
    private int m_idCounter;
    private RmlValidatingReader m_reader;
    private CLSUniqueNameValidator m_reportItemNames;
    private ScopeNameValidator m_scopeNames;
    private ImageStreamNames m_imageStreamNames;
    private ICatalogItemContext m_reportContext;
    private CreateReportChunk m_createChunkCallback;
    private CheckSharedDataSource m_checkDataSourceCallback;
    private string m_description;
    private DataSourceInfoCollection m_dataSources;
    private SubReportList m_subReports;
    private UserLocationFlags m_reportLocationFlags;
    private UserLocationFlags m_userReferenceLocation;
    private bool m_hasExternalImages;
    private bool m_hasHyperlinks;
    private bool m_pageSectionDrillthroughs;
    private bool m_hasGrouping;
    private bool m_hasSorting;
    private bool m_hasUserSort;
    private bool m_hasGroupFilters;
    private bool m_hasSpecialRecursiveAggregates;
    private bool m_aggregateInDetailSections;
    private bool m_subReportMergeTransactions;
    private ReportCompileTime m_reportCT;
    private bool m_hasImageStreams;
    private bool m_hasLabels;
    private bool m_hasBookmarks;
    private TextBoxList m_textBoxesWithUserSortTarget;
    private bool m_hasFilters;
    private DataSetList m_dataSets;
    private bool m_parametersNotUsedInQuery;
    private Hashtable m_usedInQueryInfos;
    private Hashtable m_reportParamUserProfile;
    private Hashtable m_dataSetQueryInfo;
    private ArrayList m_dynamicParameters;
    private CultureInfo m_reportLanguage;
    private bool m_hasUserSortPeerScopes;
    private Hashtable m_reportScopes;
    private StringDictionary m_dataSourceNames;
    private int m_dataRegionCount;
    private ArrayList m_reportItemCollectionList;
    private ArrayList m_aggregateHolderList;
    private ArrayList m_runningValueHolderList;
    private string m_targetRDLNamespace;
    private Report m_report;
    private PublishingErrorContext m_errorContext;
    internal Report CreateIntermediateFormat(ICatalogItemContext reportContext, Byte[] definition, CreateReportChunk createChunkCallback, CheckSharedDataSource checkDataSourceCallback, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, PublishingErrorContext errorContext, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, IDataProtection dataProtection, String& description, String& language, ParameterInfoCollection& parameters, DataSourceInfoCollection& dataSources, UserLocationFlags& userReferenceLocation, ArrayList& dataSetsName, Boolean& hasExternalImages, Boolean& hasHyperlinks);
    private int GenerateID();
    private void Phase1(ICatalogItemContext reportContext, Byte[] definition, CreateReportChunk createChunkCallback, CheckSharedDataSource checkDataSourceCallback, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection, String& description, String& language, DataSourceInfoCollection& dataSources, UserLocationFlags& userReferenceLocation, Boolean& hasExternalImages, Boolean& hasHyperlinks);
    private Report ReadReport(ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection);
    private EmbeddedImageHashtable ReadEmbeddedImages(PublishingContext context);
    private void ReadEmbeddedImage(EmbeddedImageHashtable embeddedImages, CLSUniqueNameValidator embeddedImageNames, PublishingContext context);
    private DataSourceList ReadDataSources(PublishingContext context, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection);
    private DataSource ReadDataSource(DataSourceNameValidator dataSourceNames, PublishingContext context, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection);
    private StringList ReadCodeModules(PublishingContext context);
    private CodeClassList ReadClasses(PublishingContext context);
    private void ReadClass(CodeClassList codeClasses, CLSUniqueNameValidator instanceNameValidator, PublishingContext context);
    private void ReadConnectionProperties(DataSource dataSource, PublishingContext context, Boolean& hasComplexParams, StringList& parametersInQuery);
    private void ReadDataSets(PublishingContext context);
    private DataSet ReadDataSet(PublishingContext context);
    private ReportQuery ReadQuery(PublishingContext context, DataSetInfo& queryDataSetInfo);
    private ExpressionInfo ReadQueryOrParameterExpression(PublishingContext context, Boolean& isComplex, StringList& parametersInQuery);
    private ParameterValueList ReadQueryParameters(PublishingContext context, Boolean& hasComplexParams, StringList& parametersInQuery);
    private ParameterValue ReadQueryParameter(PublishingContext context, Boolean& isComplex, StringList& parametersInQuery);
    private DataFieldList ReadFields(PublishingContext context, Int32& calculatedFieldStartIndex);
    private Field ReadField(CLSUniqueNameValidator names, PublishingContext context);
    private FilterList ReadFilters(ExpressionType expressionType, PublishingContext context);
    private Filter ReadFilter(ExpressionType expressionType, PublishingContext context);
    private ExpressionInfoList ReadFilterValues(ExpressionType expressionType, PublishingContext context);
    private void ReadBody(Report report, PublishingContext context);
    private ParameterDefList ReadReportParameters(PublishingContext context);
    private ParameterDef ReadReportParameter(CLSUniqueNameValidator reportParameterNames, Hashtable parameterNames, PublishingContext context, int count);
    private List`1<string> ReadDefaultValue(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex, DataSetReference& defaultDataSet);
    private List`1<string> ReadValues(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex);
    private bool ReadValidValues(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex, DataSetReference& validValueDataSet);
    private DataSetReference ReadDataSetReference();
    private void ReadParameterValues(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex, Boolean& containsExplicitNull);
    private ExpressionInfo ReadParameterExpression(string propertyName, PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Hashtable& dependencies, Boolean& dynamic, Boolean& isComplex);
    private ParameterValueList ReadParameters(PublishingContext context, bool doClsValidation);
    private ParameterValueList ReadParameters(PublishingContext context, bool omitAllowed, bool doClsValidation, Boolean& computed);
    private ParameterValue ReadParameter(ParameterNameValidator parameterNames, PublishingContext context, bool omitAllowed, bool doClsValidation, Boolean& computed);
    private PageSection ReadPageSection(bool isHeader, Report report, PublishingContext context);
    private void ReadReportItems(string propertyName, ReportItem parent, ReportItemCollection parentCollection, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget, Boolean& computed);
    private void ReadReportItems(string propertyName, ReportItem parent, ReportItemCollection parentCollection, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private CustomReportItem ReadCustomReportItem(ReportItem parent, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadCustomData(CustomReportItem crItem, PublishingContext context);
    private CustomReportItemHeadingList ReadCustomDataColumnOrRowGroupings(bool isColumn, CustomReportItem crItem, PublishingContext context);
    private int ReadCustomDataGroupings(bool isColumn, CustomReportItem crItem, CustomReportItemHeadingList crGroupingList, PublishingContext context);
    private CustomReportItemHeading ReadCustomDataGrouping(bool isColumn, CustomReportItem crItem, PublishingContext context, Int32& groupingLeafs);
    private DataCellsList ReadCustomDataRows(CustomReportItem crItem, PublishingContext context);
    private DataCellList ReadCustomDataRow(CustomReportItem crItem, int rowIndex, PublishingContext context);
    private DataValueCRIList ReadCustomDataCell(CustomReportItem crItem, int rowIndex, int columnIndex, PublishingContext context);
    private Line ReadLine(ReportItem parent, PublishingContext context);
    private Rectangle ReadRectangle(ReportItem parent, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private CheckBox ReadCheckbox(ReportItem parent, PublishingContext context);
    private TextBox ReadTextbox(ReportItem parent, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadUserSort(PublishingContext context, TextBox textbox, TextBoxList textBoxesWithDefaultSortTarget);
    private void SetSortTargetForTextBoxes(TextBoxList textBoxes, ISortFilterScope target);
    private ExpressionInfo ReadToggleImage(PublishingContext context, Boolean& computed);
    private Image ReadImage(ReportItem parent, PublishingContext context);
    private SubReport ReadSubreport(ReportItem parent, PublishingContext context);
    private ActiveXControl ReadActiveXControl(ReportItem parent, PublishingContext context);
    private ExpressionInfo ReadBookmarkExpression(PublishingContext context, Boolean& computedBookmark);
    private List ReadList(ReportItem parent, PublishingContext context);
    private Matrix ReadMatrix(ReportItem parent, PublishingContext context);
    private void ReadCorner(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadColumnGroupings(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private MatrixHeading ReadColumnOrRowGrouping(bool isColumn, Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadRowGroupings(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadDynamicColumnsOrRows(bool isColumns, Matrix matrix, MatrixHeading heading, PublishingContext context, TextBoxList subtotalTextBoxesWithDefaultSortTarget);
    private void ReadStaticColumnsOrRows(bool isColumn, Matrix matrix, MatrixHeading heading, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadStaticColumn(Matrix matrix, MatrixHeading heading, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadStaticRow(Matrix matrix, MatrixHeading heading, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private Subtotal ReadSubtotal(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private MatrixRowList ReadMatrixRows(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private MatrixRow ReadMatrixRow(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private int ReadMatrixCells(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadMatrixCell(Matrix matrix, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private MatrixColumnList ReadMatrixColumns();
    private MatrixColumn ReadMatrixColumn();
    private Chart ReadChart(ReportItem parent, PublishingContext context);
    private void ReadCategoryGroupings(Chart chart, PublishingContext context);
    private void ChartAddRowNumberCategory(Chart chart, PublishingContext context);
    private void ChartFakeStaticSeries(Chart chart);
    private void ChartFakeStaticCategory(Chart chart);
    private ChartHeading ReadCategoryOrSeriesGrouping(bool isCategory, Chart chart, PublishingContext context);
    private void ReadSeriesGroupings(Chart chart, PublishingContext context);
    private void ReadDynamicCategoriesOrSeries(bool isCategory, Chart chart, ChartHeading heading, PublishingContext context);
    private void ReadStaticCategoriesOrSeries(bool isColumn, Chart chart, ChartHeading heading, PublishingContext context);
    private void ReadStaticMember(Chart chart, ChartHeading heading, PublishingContext context);
    private ChartTitle ReadChartTitle(PublishingContext context);
    private Axis ReadCategoryOrValueAxis(Chart chart, PublishingContext context);
    private Axis ReadAxis(Chart chart, PublishingContext context);
    private Legend ReadLegend(PublishingContext context);
    private GridLines ReadGridLines(PublishingContext context);
    private int ReadChartData(Chart chart, PublishingContext context);
    private void ReadChartSeries(Chart chart, PublishingContext context);
    private int ReadChartDataPoints(Chart chart, PublishingContext context);
    private ChartDataPoint ReadChartDataPoint(Chart chart, PublishingContext context);
    private void ReadDataPointMarker(ChartDataPoint dataPoint, PublishingContext context);
    private void ReadChartDataValues(ChartDataPoint dataPoint, PublishingContext context, Boolean& hasAggregates);
    private ExpressionInfo ReadChartDataValue(PublishingContext context, Boolean& hasAggregates);
    private ChartDataLabel ReadChartDataLabel(PublishingContext context);
    private MultiChart ReadMultiChart(Chart chart, PublishingContext context);
    private PlotArea ReadPlotArea(Chart chart, PublishingContext context);
    private ThreeDProperties ReadThreeDProperties(Chart chart, PublishingContext context);
    private Table ReadTable(ReportItem parent, PublishingContext context);
    private void ReadHeaderOrFooter(Table parent, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget, bool allowFixedHeaders, TableRowList& tableRows, Boolean& repeatOnNewPage);
    private TableRowList ReadTableRowList(Table parent, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private TableRow ReadTableRow(Table parent, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadDetails(Table parent, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget, TableDetail& tableDetail, TableGroup& detailGroup);
    private void ReadTableCells(Table parent, ReportItemCollection reportItems, IntList colSpans, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private void ReadTableCell(Table parent, ReportItemCollection reportItems, IntList colSpans, PublishingContext context, TextBoxList textBoxesWithDefaultSortTarget);
    private TableColumnList ReadTableColumns(PublishingContext context, Table table);
    private TableColumn ReadTableColumn(PublishingContext context);
    private TableGroup ReadTableGroups(Table table, PublishingContext context);
    private TableGroup ReadTableGroup(Table table, PublishingContext context);
    private OWCChart ReadOWCChart(ReportItem parent, PublishingContext context);
    private ChartColumnList ReadChartColumns(PublishingContext context);
    private ChartColumn ReadChartColumn(CLSUniqueNameValidator chartColumnNames, PublishingContext context);
    private Sorting ReadSorting(PublishingContext context);
    private void ReadSortBy(Sorting sorting, PublishingContext context);
    private bool CanMergeGroupingAndSorting(Grouping grouping, Sorting sorting);
    private Grouping ReadGrouping(PublishingContext context);
    private void ReadGroupExpressions(Grouping grouping, PublishingContext context);
    private Action ReadAction(PublishingContext context, StyleOwnerType styleOwnerType, Boolean& computed);
    private void ReadActionItemList(Action actionInfo, PublishingContext context);
    private ActionItem ReadActionItem(PublishingContext context, Boolean& computed, Int32& computedIndex, Boolean& missingLabel);
    private void ReadDrillthrough(PublishingContext context, ActionItem actionItem, Boolean& computed);
    private Visibility ReadVisibility(PublishingContext context, Boolean& computed);
    private Visibility ReadVisibility(PublishingContext context);
    private DataValueList ReadCustomProperties(PublishingContext context);
    private DataValueList ReadCustomProperties(PublishingContext context, Boolean& computed);
    private DataValue ReadDataValue(bool isCustomProperty, int index, PublishingContext context);
    private DataValue ReadDataValue(bool isCustomProperty, int index, Boolean& isComputed, PublishingContext context);
    private bool CheckUserProfileDependency();
    private void SetUserProfileDependency();
    private ExpressionInfo ReadExpression(string expression, string propertyName, string dataSetName, ExpressionType expressionType, ConstantType constantType, PublishingContext context);
    private ExpressionInfo ReadExpression(bool parseExtended, string expression, string propertyName, string dataSetName, ExpressionType expressionType, ConstantType constantType, PublishingContext context);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, ConstantType constantType, PublishingContext context, Boolean& userCollectionReferenced);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, ConstantType constantType, PublishingContext context);
    private ExpressionInfo ReadExpression(string propertyName, ExpressionType expressionType, ConstantType constantType, PublishingContext context);
    private ExpressionInfo ReadExpression(string propertyName, ExpressionType expressionType, ConstantType constantType, PublishingContext context, Boolean& computed);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, ConstantType constantType, PublishingContext context, DetectionFlags flag, Boolean& reportParameterReferenced, String& reportParameterName);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, ConstantType constantType, PublishingContext context, DetectionFlags flag, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    private Sensitivity ReadSensitivity();
    private CommandType ReadCommandType();
    private Operators ReadOperator();
    private bool ReadDirection();
    private bool ReadLayoutDirection();
    private bool ReadProjectionMode();
    private bool ReadDrawingStyle();
    private SourceType ReadSource();
    private Sizings ReadSizing();
    private bool ReadDataElementStyle();
    private DataElementStylesRDL ReadDataElementStyleRDL();
    private DataElementOutputTypesRDL ReadDataElementOutputRDL();
    private DataElementOutputTypes ReadDataElementOutput();
    private PositionType ReadPosition();
    private Positions ReadDataLabelPosition();
    private ChartTypes ReadChartType();
    private ChartSubTypes ReadChartSubType();
    private ChartPalette ReadChartPalette();
    private Positions ReadChartTitlePosition();
    private Positions ReadLegendPosition();
    private LegendLayout ReadLegendLayout();
    private Layouts ReadLayout();
    private TickMarks ReadAxisTickMarks();
    private ShadingTypes ReadShading();
    private MarkerTypes ReadMarkerType();
    private bool ReadPlotType();
    private StyleInformation ReadStyle(PublishingContext context, Boolean& computed);
    private StyleInformation ReadStyle(PublishingContext context);
    private void ReadBorderAttribute(string borderAttribute, StyleInformation styleInfo, PublishingContext context, Boolean& computed);
    private void ReadBackgroundImage(StyleInformation styleInfo, PublishingContext context, Boolean& computed);
    private string ReadSize();
    private void Phase2();
    private void Phase3(ICatalogItemContext reportContext, ParameterInfoCollection& parameters, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions);
    private void Phase4();
    private void PopulateReportItemCollections();
    private void CompactAggregates();
    private bool CompactAggregates(DataAggregateInfoList[] aggregateLists, Hashtable aggregateHashByType);
    private bool CompactAggregates(DataAggregateInfoList aggregateList, Hashtable aggregateHashByType);
    private void CompactRunningValues();
    private void CompactRunningValueList(RunningValueInfoList runningValueList, Hashtable runningValueHashByType);
    internal static void CalculateChildrenDependencies(ReportItem reportItem);
    private static bool HasPageBreakAtStart(ReportItem reportItem);
    internal static void CalculateChildrenPostions(ReportItem reportItem);
    private static bool IsListMostInner(ReportItemCollection reportItemCollection);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportPublishingException : ReportProcessingException {
    private ReportProcessingFlags m_processingFlags;
    public ReportProcessingFlags ReportProcessingFlags { get; }
    public ReportPublishingException(ProcessingMessageList messages, ReportProcessingFlags processingFlags);
    private ReportPublishingException(SerializationInfo info, StreamingContext context);
    public ReportProcessingFlags get_ReportProcessingFlags();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportQuery : object {
    private CommandType m_commandType;
    private ExpressionInfo m_commandText;
    private ParameterValueList m_queryParameters;
    private int m_timeOut;
    private string m_commandTextValue;
    private string m_writtenCommandText;
    private string m_dataSourceName;
    private IndexedExprHost m_queryParamsExprHost;
    internal CommandType CommandType { get; internal set; }
    internal ExpressionInfo CommandText { get; internal set; }
    internal ParameterValueList Parameters { get; internal set; }
    internal int TimeOut { get; internal set; }
    internal string CommandTextValue { get; internal set; }
    internal string RewrittenCommandText { get; internal set; }
    internal string DataSourceName { get; internal set; }
    internal CommandType get_CommandType();
    internal void set_CommandType(CommandType value);
    internal ExpressionInfo get_CommandText();
    internal void set_CommandText(ExpressionInfo value);
    internal ParameterValueList get_Parameters();
    internal void set_Parameters(ParameterValueList value);
    internal int get_TimeOut();
    internal void set_TimeOut(int value);
    internal string get_CommandTextValue();
    internal void set_CommandTextValue(string value);
    internal string get_RewrittenCommandText();
    internal void set_RewrittenCommandText(string value);
    internal string get_DataSourceName();
    internal void set_DataSourceName(string value);
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(IndexedExprHost queryParamsExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportRendererFactory : object {
    internal static IRenderingExtension GetNewRenderer(string format, IExtensionFactory extFactory);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportRuntime : object {
    private Assembly m_exprHostAssembly;
    private ReportExprHost m_reportExprHost;
    private ObjectType m_objectType;
    private string m_objectName;
    private string m_propertyName;
    private ObjectModelImpl m_reportObjectModel;
    private ErrorContext m_errorContext;
    private IScope m_currentScope;
    private ReportRuntime m_topLevelReportRuntime;
    private IActionOwner m_currentActionOwner;
    internal ReportExprHost ReportExprHost { get; }
    internal IScope CurrentScope { get; internal set; }
    internal ObjectType ObjectType { get; internal set; }
    internal string ObjectName { get; internal set; }
    internal string PropertyName { get; internal set; }
    internal ObjectModelImpl ReportObjectModel { get; }
    internal IActionOwner CurrentActionOwner { get; internal set; }
    internal ReportRuntime(ObjectModelImpl reportObjectModel, ErrorContext errorContext);
    internal ReportRuntime(ObjectModelImpl reportObjectModel, ErrorContext errorContext, ReportExprHost copyReportExprHost, ReportRuntime topLevelReportRuntime);
    internal ReportExprHost get_ReportExprHost();
    internal IScope get_CurrentScope();
    internal void set_CurrentScope(IScope value);
    internal ObjectType get_ObjectType();
    internal void set_ObjectType(ObjectType value);
    internal string get_ObjectName();
    internal void set_ObjectName(string value);
    internal string get_PropertyName();
    internal void set_PropertyName(string value);
    internal ObjectModelImpl get_ReportObjectModel();
    internal IActionOwner get_CurrentActionOwner();
    internal void set_CurrentActionOwner(IActionOwner value);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, String[] arguments);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IErrorContext.Register(ProcessingErrorCode code, Severity severity, ObjectType objectType, string objectName, string propertyName, String[] arguments);
    internal static string GetErrorName(DataFieldStatus status, string exceptionMessage);
    internal string EvaluateReportLanguageExpression(Report report, CultureInfo& language);
    internal VariantResult EvaluateParamDefaultValue(ParameterDef paramDef, int index);
    internal VariantResult EvaluateParamValidValue(ParameterDef paramDef, int index);
    internal VariantResult EvaluateParamValidValueLabel(ParameterDef paramDef, int index);
    internal object EvaluateDataValueValueExpression(DataValue value, ObjectType objectType, string objectName, string propertyName);
    internal string EvaluateDataValueNameExpression(DataValue value, ObjectType objectType, string objectName, string propertyName);
    internal VariantResult EvaluateFilterVariantExpression(Filter filter, ObjectType objectType, string objectName);
    internal StringResult EvaluateFilterStringExpression(Filter filter, ObjectType objectType, string objectName);
    internal VariantResult EvaluateFilterVariantValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal FloatResult EvaluateFilterIntegerOrFloatValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal IntegerResult EvaluateFilterIntegerValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal StringResult EvaluateFilterStringValue(Filter filter, int index, ObjectType objectType, string objectName);
    internal object EvaluateQueryParamValue(ExpressionInfo paramValue, IndexedExprHost queryParamsExprHost, ObjectType objectType, string objectName);
    internal StringResult EvaluateConnectString(DataSource dataSource);
    internal StringResult EvaluateCommandText(DataSet dataSet);
    internal object EvaluateFieldValueExpression(Field field);
    internal VariantResult EvaluateAggregateVariantOrBinaryParamExpr(DataAggregateInfo aggregateInfo, int index, IErrorContext errorContext);
    internal bool EvaluateParamValueOmitExpression(ParameterValue paramVal, ObjectType objectType, string objectName);
    internal object EvaluateParamVariantValueExpression(ParameterValue paramVal, ObjectType objectType, string objectName, string propertyName);
    internal ParameterValueResult EvaluateParameterValueExpression(ParameterValue paramVal, ObjectType objectType, string objectName, string propertyName);
    internal bool EvaluateStartHiddenExpression(Visibility visibility, IVisibilityHiddenExprHost hiddenExprHostRI, ObjectType objectType, string objectName);
    internal bool EvaluateStartHiddenExpression(Visibility visibility, IndexedExprHost hiddenExprHostIdx, ObjectType objectType, string objectName);
    internal VariantResult EvaluateReportItemLabelExpression(ReportItem reportItem);
    internal string EvaluateReportItemBookmarkExpression(ReportItem reportItem);
    internal string EvaluateReportItemToolTipExpression(ReportItem reportItem);
    internal string EvaluateActionLabelExpression(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateReportItemHyperlinkURLExpression(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateReportItemDrillthroughReportName(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateReportItemBookmarkLinkExpression(ActionItem actionItem, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateImageStringValueExpression(Image image, Boolean& errorOccurred);
    internal Byte[] EvaluateImageBinaryValueExpression(Image image, Boolean& errorOccurred);
    internal string EvaluateImageMIMETypeExpression(Image image);
    internal VariantResult EvaluateTextBoxValueExpression(TextBox textBox);
    internal bool EvaluateTextBoxInitialToggleStateExpression(TextBox textBox);
    internal object EvaluateUserSortExpression(TextBox textBox);
    internal VariantResult EvaluateGroupingLabelExpression(Grouping grouping, ObjectType objectType, string objectName);
    internal object EvaluateRuntimeExpression(RuntimeExpressionInfo runtimeExpression, ObjectType objectType, string objectName, string propertyName);
    internal object EvaluateOWCChartData(OWCChart chart, ExpressionInfo chartDataExpression);
    internal string EvaluateSubReportNoRowsExpression(SubReport subReport, string objectName, string propertyName);
    internal string EvaluateDataRegionNoRowsExpression(DataRegion region, ObjectType objectType, string objectName, string propertyName);
    internal object EvaluateChartDataPointDataValueExpression(ChartDataPoint dataPoint, ExpressionInfo dataPointDataValueExpression, string objectName);
    internal object EvaluateChartStaticHeadingLabelExpression(ChartHeading chartHeading, ExpressionInfo expression, string objectName);
    internal object EvaluateChartDynamicHeadingLabelExpression(ChartHeading chartHeading, ExpressionInfo expression, string objectName);
    internal string EvaluateChartTitleCaptionExpression(ChartTitle title, string objectName, string propertyName);
    internal string EvaluateChartDataLabelValueExpression(ChartDataPoint dataPoint, string objectName, Object[] dataLabelStyleAttributeValues);
    internal object EvaluateChartAxisValueExpression(AxisExprHost exprHost, ExpressionInfo expression, string objectName, string propertyName, ExpressionType type);
    internal string EvaluateStyleBorderColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderColorBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderStyle(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderStyleLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderStyleRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderStyleTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderStyleBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidth(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBorderWidthBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundGradientEndColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundGradientType(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundRepeat(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFontStyle(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFontFamily(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFontSize(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFontWeight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleFormat(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleTextDecoration(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleTextAlign(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleVerticalAlign(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleColor(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingLeft(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingRight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingTop(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStylePaddingBottom(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleLineHeight(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleDirection(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleWritingMode(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleLanguage(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleUnicodeBiDi(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleCalendar(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleNumeralLanguage(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal object EvaluateStyleNumeralVariant(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundUrlImageValue(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundEmbeddedImageValue(Style style, ExpressionInfo expression, EmbeddedImageHashtable embeddedImages, ObjectType objectType, string objectName);
    internal Byte[] EvaluateStyleBackgroundDatabaseImageValue(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    internal string EvaluateStyleBackgroundImageMIMEType(Style style, ExpressionInfo expression, ObjectType objectType, string objectName);
    private bool EvaluateSimpleExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private bool EvaluateSimpleExpression(ExpressionInfo expression, VariantResult& result);
    private bool EvaluateComplexExpression(ExpressionInfo expression, VariantResult& result);
    private void RegisterRuntimeWarning(Exception e, IErrorContext iErrorContext);
    private void RegisterRuntimeErrorInExpressionAndStop(VariantResult& result, Exception e);
    private void RegisterRuntimeErrorInExpression(VariantResult& result, Exception e);
    private void RegisterRuntimeErrorInExpression(VariantResult& result, Exception e, IErrorContext iErrorContext, bool isError);
    private bool EvaluateBooleanExpression(ExpressionInfo expression, bool canBeConstant, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private BooleanResult ProcessBooleanResult(VariantResult result);
    private BooleanResult ProcessBooleanResult(VariantResult result, bool stopOnError, ObjectType objectType, string objectName);
    private bool EvaluateBinaryExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private BinaryResult ProcessBinaryResult(VariantResult result);
    private StringResult ProcessStringResult(VariantResult result);
    private void ProcessLabelResult(VariantResult& result);
    private bool EvaluateIntegerExpression(ExpressionInfo expression, bool canBeConstant, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private IntegerResult ProcessIntegerResult(VariantResult result);
    private bool EvaluateIntegerOrFloatExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    private FloatResult ProcessIntegerOrFloatResult(VariantResult result);
    private void ProcessVariantResult(ExpressionInfo expression, VariantResult& result);
    private void ProcessVariantResult(ExpressionInfo expression, VariantResult& result, bool isArrayAllowed);
    private void ProcessVariantOrBinaryResult(ExpressionInfo expression, VariantResult& result, IErrorContext iErrorContext, bool isAggregate);
    private ParameterValueResult ProcessParameterValueResult(ExpressionInfo expression, VariantResult result);
    private DataType GetDataType(DataTypeCode typecode);
    private bool EvaluateNoConstantExpression(ExpressionInfo expression, ObjectType objectType, string objectName, string propertyName, VariantResult& result);
    internal static bool IsVariant(object o);
    private void RegisterInvalidExpressionDataTypeWarning();
    internal bool InScope(string scope);
    internal int RecursiveLevel(string scope);
    internal void LoadCompiledCode(Report report, bool parametersOnly, ObjectModelImpl reportObjectModel, ReportRuntimeSetup runtimeSetup);
    private void ProcessLoadingExprHostException(Exception e, ProcessingErrorCode errorCode);
    internal void Close();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportRuntimeSetup : object {
    private static ReportRuntimeSetup DefaultRuntimeSetup;
    private AppDomain m_exprHostAppDomain;
    private Evidence m_exprHostEvidence;
    private bool m_restrictCodeModulesInCurrentAppDomain;
    private StringCollection m_currentAppDomainTrustedCodeModules;
    private bool m_requireExpressionHostWithRefusedPermissions;
    public bool ExecutesInSeparateAppDomain { get; }
    internal AppDomain ExprHostAppDomain { get; }
    internal Evidence ExprHostEvidence { get; }
    public bool RequireExpressionHostWithRefusedPermissions { get; }
    public ReportRuntimeSetup(ReportRuntimeSetup originalSetup, AppDomain newAppDomain);
    private ReportRuntimeSetup(AppDomain exprHostAppDomain, Evidence exprHostEvidence, bool restrictCodeModulesInCurrentAppDomain, bool requireExpressionHostWithRefusedPermissions);
    private static ReportRuntimeSetup();
    public static ReportRuntimeSetup GetDefault();
    public static ReportRuntimeSetup CreateForSeparateAppDomainExecution(AppDomain exprHostAppDomain);
    public static ReportRuntimeSetup CreateForCurrentAppDomainExecution();
    public static ReportRuntimeSetup CreateForCurrentAppDomainExecution(Evidence exprHostEvidence);
    public void AddTrustedCodeModuleInCurrentAppDomain(string assemblyName);
    public bool get_ExecutesInSeparateAppDomain();
    internal AppDomain get_ExprHostAppDomain();
    internal Evidence get_ExprHostEvidence();
    internal bool CheckCodeModuleIsTrustedInCurrentAppDomain(string assemblyName);
    public bool get_RequireExpressionHostWithRefusedPermissions();
}
internal class Microsoft.ReportingServices.ReportProcessing.ReportSnapshot : object {
    private DateTime m_executionTime;
    private Report m_report;
    private ParameterInfoCollection m_parameters;
    private ReportInstance m_reportInstance;
    private bool m_hasDocumentMap;
    private bool m_hasShowHide;
    private bool m_hasBookmarks;
    private bool m_hasImageStreams;
    private string m_requestUserName;
    private string m_reportServerUrl;
    private string m_reportFolder;
    private string m_language;
    private ProcessingMessageList m_processingMessages;
    private Int64List m_pageSectionOffsets;
    private InfoBase m_documentMap;
    private InfoBase m_showHideSenderInfo;
    private InfoBase m_showHideReceiverInfo;
    private InfoBase m_quickFind;
    private BookmarksHashtable m_bookmarksInfo;
    private ReportDrillthroughInfo m_drillthroughInfo;
    private InfoBase m_sortFilterEventInfo;
    private List`1<PageSectionInstance> m_pageSections;
    private string m_reportName;
    internal Report Report { get; internal set; }
    internal ParameterInfoCollection Parameters { get; internal set; }
    internal ReportInstance ReportInstance { get; internal set; }
    internal bool HasDocumentMap { get; internal set; }
    internal bool HasBookmarks { get; internal set; }
    internal bool HasShowHide { get; internal set; }
    internal bool HasImageStreams { get; internal set; }
    internal string RequestUserName { get; internal set; }
    internal DateTime ExecutionTime { get; internal set; }
    internal string ReportServerUrl { get; internal set; }
    internal string ReportFolder { get; internal set; }
    internal string Language { get; internal set; }
    internal ProcessingMessageList Warnings { get; internal set; }
    internal Int64List PageSectionOffsets { get; internal set; }
    internal List`1<PageSectionInstance> PageSections { get; internal set; }
    unknown OffsetInfo DocumentMapOffset {internal set; }
    unknown OffsetInfo ShowHideSenderInfoOffset {internal set; }
    unknown OffsetInfo ShowHideReceiverInfoOffset {internal set; }
    unknown OffsetInfo QuickFindOffset {internal set; }
    internal DocumentMapNode DocumentMap { get; internal set; }
    internal BookmarksHashtable BookmarksInfo { get; internal set; }
    internal ReportDrillthroughInfo DrillthroughInfo { get; internal set; }
    internal SenderInformationHashtable ShowHideSenderInfo { get; internal set; }
    internal ReceiverInformationHashtable ShowHideReceiverInfo { get; internal set; }
    internal QuickFindHashtable QuickFind { get; internal set; }
    internal SortFilterEventInfoHashtable SortFilterEventInfo { get; internal set; }
    internal OffsetInfo SortFilterEventInfoOffset { get; internal set; }
    internal ReportSnapshot(Report report, string reportName, ParameterInfoCollection parameters, string requestUserName, DateTime executionTime, string reportServerUrl, string reportFolder, string language);
    internal Report get_Report();
    internal void set_Report(Report value);
    internal ParameterInfoCollection get_Parameters();
    internal void set_Parameters(ParameterInfoCollection value);
    internal ReportInstance get_ReportInstance();
    internal void set_ReportInstance(ReportInstance value);
    internal bool get_HasDocumentMap();
    internal void set_HasDocumentMap(bool value);
    internal bool get_HasBookmarks();
    internal void set_HasBookmarks(bool value);
    internal bool get_HasShowHide();
    internal void set_HasShowHide(bool value);
    internal bool get_HasImageStreams();
    internal void set_HasImageStreams(bool value);
    internal string get_RequestUserName();
    internal void set_RequestUserName(string value);
    internal DateTime get_ExecutionTime();
    internal void set_ExecutionTime(DateTime value);
    internal string get_ReportServerUrl();
    internal void set_ReportServerUrl(string value);
    internal string get_ReportFolder();
    internal void set_ReportFolder(string value);
    internal string get_Language();
    internal void set_Language(string value);
    internal ProcessingMessageList get_Warnings();
    internal void set_Warnings(ProcessingMessageList value);
    internal Int64List get_PageSectionOffsets();
    internal void set_PageSectionOffsets(Int64List value);
    internal List`1<PageSectionInstance> get_PageSections();
    internal void set_PageSections(List`1<PageSectionInstance> value);
    internal void set_DocumentMapOffset(OffsetInfo value);
    internal void set_ShowHideSenderInfoOffset(OffsetInfo value);
    internal void set_ShowHideReceiverInfoOffset(OffsetInfo value);
    internal void set_QuickFindOffset(OffsetInfo value);
    internal DocumentMapNode get_DocumentMap();
    internal void set_DocumentMap(DocumentMapNode value);
    internal BookmarksHashtable get_BookmarksInfo();
    internal void set_BookmarksInfo(BookmarksHashtable value);
    internal ReportDrillthroughInfo get_DrillthroughInfo();
    internal void set_DrillthroughInfo(ReportDrillthroughInfo value);
    internal SenderInformationHashtable get_ShowHideSenderInfo();
    internal void set_ShowHideSenderInfo(SenderInformationHashtable value);
    internal ReceiverInformationHashtable get_ShowHideReceiverInfo();
    internal void set_ShowHideReceiverInfo(ReceiverInformationHashtable value);
    internal QuickFindHashtable get_QuickFind();
    internal void set_QuickFind(QuickFindHashtable value);
    internal SortFilterEventInfoHashtable get_SortFilterEventInfo();
    internal void set_SortFilterEventInfo(SortFilterEventInfoHashtable value);
    internal OffsetInfo get_SortFilterEventInfoOffset();
    internal void set_SortFilterEventInfoOffset(OffsetInfo value);
    internal void CreateNavigationActions(NavigationInfo navigationInfo);
    internal static Declaration GetDeclaration();
    internal DocumentMapNode GetDocumentMap(RenderingChunkManager chunkManager);
    private void GetShowHideInfo(RenderingChunkManager chunkManager);
    internal SenderInformationHashtable GetShowHideSenderInfo(RenderingChunkManager chunkManager);
    internal ReceiverInformationHashtable GetShowHideReceiverInfo(RenderingChunkManager chunkManager);
    internal QuickFindHashtable GetQuickFind(RenderingChunkManager chunkManager);
    internal BookmarksHashtable GetBookmarksInfo(RenderingChunkManager chunkManager);
    internal SortFilterEventInfoHashtable GetSortFilterEventInfo(RenderingChunkManager chunkManager);
    internal List`1<PageSectionInstance> GetPageSections(int pageNumber, RenderingChunkManager chunkManager, PageSection headerDef, PageSection footerDef);
}
internal class Microsoft.ReportingServices.ReportProcessing.ReverseStringBuilder : object {
    private Char[] m_buffer;
    private int m_pos;
    public ReverseStringBuilder(int capacity);
    public void Append(string str);
    public void Append(char c);
    private void EnsureCapacity(int lengthNeeded);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.ReportProcessing.RPRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string rsObjectTypeReport { get; }
    public static string rsObjectTypePage { get; }
    public static string rsObjectTypeLine { get; }
    public static string rsObjectTypeRectangle { get; }
    public static string rsObjectTypeCheckbox { get; }
    public static string rsObjectTypeTextbox { get; }
    public static string rsObjectTypeImage { get; }
    public static string rsObjectTypeSubreport { get; }
    public static string rsObjectTypeActiveXControl { get; }
    public static string rsObjectTypeList { get; }
    public static string rsObjectTypeMatrix { get; }
    public static string rsObjectTypeTable { get; }
    public static string rsObjectTypeOWCChart { get; }
    public static string rsObjectTypeGrouping { get; }
    public static string rsObjectTypeReportParameter { get; }
    public static string rsObjectTypeDataSource { get; }
    public static string rsObjectTypeDataSet { get; }
    public static string rsObjectTypeField { get; }
    public static string rsObjectTypeQuery { get; }
    public static string rsObjectTypeQueryParameter { get; }
    public static string rsObjectTypeEmbeddedImage { get; }
    public static string rsObjectTypeReportItem { get; }
    public static string rsObjectTypeSubtotal { get; }
    public static string rsObjectTypeCodeClass { get; }
    public static string rsObjectTypeCustomReportItem { get; }
    public static string rsObjectTypeChart { get; }
    public static string rsObjectTypeGaugePanel { get; }
    public static string rsObjectTypeTablix { get; }
    public static string rsObjectTypeParagraph { get; }
    public static string rsObjectTypeTextRun { get; }
    public static string rsObjectNameBody { get; }
    public static string rsObjectNameHeader { get; }
    public static string rsObjectNameFooter { get; }
    public static string rsPropertyNameSeries { get; }
    public static string NonClsCompliantException { get; }
    public static string rsWarningFetchingExternalImages { get; }
    public static string rsInvalidSortItemID { get; }
    public static string rsDataSourcePrompt { get; }
    public static string rsNoRowsFieldAccess { get; }
    public static string rsNonExistingFieldReference { get; }
    public static string rsNonExistingParameterReference { get; }
    public static string rsNonExistingReportItemReference { get; }
    public static string rsNonExistingVariableReference { get; }
    public static string rsNonExistingDataSetReference { get; }
    public static string rsNonExistingDataSourceReference { get; }
    public static string rsProcessingAbortedByError { get; }
    public static string rsProcessingAbortedByUser { get; }
    public static string rsParameterError { get; }
    public static string rsParametersNotSpecified { get; }
    public static string rsCredentialsNotSpecified { get; }
    public static string rsExpressionErrorValue { get; }
    public static string rsRichTextParseErrorValue { get; }
    public static string rsDataSourceTypeNull { get; }
    public static string rsRenderingExtensionNotFound { get; }
    public static string rsMalformattedURL { get; }
    public static string rsErrorDuringROMWriteback { get; }
    public static string rsErrorDuringROMDefinitionWriteback { get; }
    public static string rsErrorDuringROMWritebackStringExpected { get; }
    public static string rsErrorDuringROMWritebackNonDynamicAction { get; }
    public static string rsErrorDuringROMWritebackDynamicAction { get; }
    public static string rsUnexpectedError { get; }
    public static string rsTraceGaugePanelInitialized { get; }
    public static string rsInvalidOperation { get; }
    public static string rsRenderSubreportError { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_rsObjectTypeReport();
    public static string get_rsObjectTypePage();
    public static string get_rsObjectTypeLine();
    public static string get_rsObjectTypeRectangle();
    public static string get_rsObjectTypeCheckbox();
    public static string get_rsObjectTypeTextbox();
    public static string get_rsObjectTypeImage();
    public static string get_rsObjectTypeSubreport();
    public static string get_rsObjectTypeActiveXControl();
    public static string get_rsObjectTypeList();
    public static string get_rsObjectTypeMatrix();
    public static string get_rsObjectTypeTable();
    public static string get_rsObjectTypeOWCChart();
    public static string get_rsObjectTypeGrouping();
    public static string get_rsObjectTypeReportParameter();
    public static string get_rsObjectTypeDataSource();
    public static string get_rsObjectTypeDataSet();
    public static string get_rsObjectTypeField();
    public static string get_rsObjectTypeQuery();
    public static string get_rsObjectTypeQueryParameter();
    public static string get_rsObjectTypeEmbeddedImage();
    public static string get_rsObjectTypeReportItem();
    public static string get_rsObjectTypeSubtotal();
    public static string get_rsObjectTypeCodeClass();
    public static string get_rsObjectTypeCustomReportItem();
    public static string get_rsObjectTypeChart();
    public static string get_rsObjectTypeGaugePanel();
    public static string get_rsObjectTypeTablix();
    public static string get_rsObjectTypeParagraph();
    public static string get_rsObjectTypeTextRun();
    public static string get_rsObjectNameBody();
    public static string get_rsObjectNameHeader();
    public static string get_rsObjectNameFooter();
    public static string get_rsPropertyNameSeries();
    public static string get_NonClsCompliantException();
    public static string get_rsWarningFetchingExternalImages();
    public static string get_rsInvalidSortItemID();
    public static string get_rsDataSourcePrompt();
    public static string get_rsNoRowsFieldAccess();
    public static string get_rsNonExistingFieldReference();
    public static string get_rsNonExistingParameterReference();
    public static string get_rsNonExistingReportItemReference();
    public static string get_rsNonExistingVariableReference();
    public static string get_rsNonExistingDataSetReference();
    public static string get_rsNonExistingDataSourceReference();
    public static string get_rsProcessingAbortedByError();
    public static string get_rsProcessingAbortedByUser();
    public static string get_rsParameterError();
    public static string get_rsParametersNotSpecified();
    public static string get_rsCredentialsNotSpecified();
    public static string get_rsExpressionErrorValue();
    public static string get_rsRichTextParseErrorValue();
    public static string get_rsDataSourceTypeNull();
    public static string get_rsRenderingExtensionNotFound();
    public static string get_rsMalformattedURL();
    public static string get_rsErrorDuringROMWriteback();
    public static string get_rsErrorDuringROMDefinitionWriteback();
    public static string get_rsErrorDuringROMWritebackStringExpected();
    public static string get_rsErrorDuringROMWritebackNonDynamicAction();
    public static string get_rsErrorDuringROMWritebackDynamicAction();
    public static string get_rsUnexpectedError();
    public static string get_rsTraceGaugePanelInitialized();
    public static string get_rsInvalidOperation();
    public static string get_rsRenderSubreportError();
    public static string rsAggregateInPreviousAggregate(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInPreviousAggregate(string objectType, string objectName, string propertyName);
    public static string rsPreviousInPreviousAggregate(string objectType, string objectName, string propertyName);
    public static string rsRowNumberInPreviousAggregate(string objectType, string objectName, string propertyName);
    public static string rsInScopeOrLevelInPreviousAggregate(string objectType, string objectName, string propertyName);
    public static string rsInvalidScopeInInnerAggregateOfPreviousAggregate(string objectType, string objectName, string propertyName);
    public static string rsVariableInPreviousAggregate(string objectType, string objectName, string propertyName);
    public static string rsVariableInCalculatedFieldExpression(string objectType, string objectName, string propertyName);
    public static string rsVariableInGroupExpression(string objectType, string objectName, string propertyName);
    public static string rsVariableInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsVariableInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsVariableInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsVariableInDataRowSortExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateofVariable(string objectType, string objectName, string propertyName);
    public static string rsVariableInDataRegionOrDataSetFilterExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateInFilterExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateInGroupExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateInDataRowSortExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsAggregateInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateInCalculatedFieldExpression(string objectType, string objectName, string propertyName);
    public static string rsAggregateofAggregate(string objectType, string objectName, string propertyName);
    public static string rsAggregateReportItemInBody(string objectType, string objectName, string propertyName);
    public static string rsBinaryConstant(string objectType, string objectName, string propertyName);
    public static string rsChartSeriesPlotTypeIgnored(string objectType, string objectName, string propertyName);
    public static string rsCompilerErrorInExpression(string objectType, string objectName, string propertyName, string error);
    public static string rsCompilerErrorInCode(string objectType, string objectName, string propertyName, string error, string lineNumber);
    public static string rsCompilerErrorInClassInstanceDeclaration(string objectType, string objectName, string propertyName, string error);
    public static string rsUnexpectedCompilerError(string objectType, string objectName, string propertyName, string nativeErrorCode);
    public static string rsConflictingRunningValueScopesInMatrix(string objectType, string objectName, string propertyName);
    public static string rsConflictingRunningValueScopesInTablix(string objectType, string objectName, string propertyName);
    public static string rsCountRowsInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsCountStarNotSupported(string objectType, string objectName, string propertyName);
    public static string rsCountStarRVNotSupported(string objectType, string objectName, string propertyName);
    public static string rsCustomAggregateAndFilter(string objectType, string objectName, string propertyName);
    public static string rsDataRegionInDetailList(string objectType, string objectName, string propertyName);
    public static string rsDataRegionInPageSection(string objectType, string objectName, string propertyName);
    public static string rsDataRegionInTableDetailRow(string objectType, string objectName, string propertyName);
    public static string rsDataRegionWithoutDataSet(string objectType, string objectName, string propertyName);
    public static string rsDataSourceReferenceNotPublished(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDataSourceInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsDataSourceInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsDataSourceInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsDataSourceInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsDuplicateChartColumnName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDuplicateClassInstanceName(string objectType, string objectName, string propertyName);
    public static string rsDuplicateDataSourceName(string objectType, string objectName, string propertyName);
    public static string rsInvalidDataSourceNameLength(string objectType, string objectName, string propertyName, string maxLength);
    public static string rsInvalidDataSourceNameNotCLSCompliant(string objectType, string objectName, string propertyName);
    public static string rsInvalidEmbeddedImageNameNotCLSCompliant(string objectType, string objectName, string propertyName);
    public static string rsInvalidEmbeddedImageNameLength(string objectType, string objectName, string propertyName, string maxLength);
    public static string rsDuplicateEmbeddedImageName(string objectType, string objectName, string propertyName);
    public static string rsDuplicateFieldName(string objectType, string objectName, string propertyName, string offendingValue, string dataSetName);
    public static string rsDuplicateParameterName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDuplicateReportItemName(string objectType, string objectName, string propertyName);
    public static string rsDuplicateReportParameterName(string objectType, string objectName, string propertyName);
    public static string rsDuplicateCaseInsensitiveReportParameterName(string objectType, string objectName, string propertyName);
    public static string rsDuplicateScopeName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsExpressionMissingCloseParen(string objectType, string objectName, string propertyName);
    public static string rsFieldInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsFieldInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsFieldInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsFieldInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsGlobalNotDefined(string objectType, string objectName, string propertyName);
    public static string rsDataSetInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsDataSetInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsDataSetInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsDataSetInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsInvalidActionLabel(string objectType, string objectName, string propertyName);
    public static string rsInvalidAction(string objectType, string objectName, string propertyName);
    public static string rsInvalidAggregateScope(string objectType, string objectName, string propertyName);
    public static string rsInvalidAltReportItem(string objectType, string objectName, string propertyName);
    public static string rsInvalidBooleanConstant(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidDateTimeConstant(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidFloatConstant(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidCategoryGrouping(string objectType, string objectName, string propertyName);
    public static string rsInvalidChartHierarchy(string objectType, string objectName, string propertyName, string level);
    public static string rsInvalidChartMemberMustContainGroupExpressions(string objectType, string objectName, string propertyName, string subPropertyName, string groupName, string subsubPropertyName);
    public static string rsInvalidChartMemberMustBeDynamic(string objectType, string objectName, string propertyName, string subPropertyName, string groupName);
    public static string rsInvlaidAxisAngle(string objectType, string objectName, string propertyName, string subPropertyName);
    public static string rsInvalidCharacterInExpression(string objectType, string objectName, string propertyName);
    public static string rsInvalidChartColumnNameNotCLSCompliant(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidChartColumnNameLength(string objectType, string objectName, string propertyName, string offendingValue, string maxLength);
    public static string rsInvalidChartGroupings(string objectType, string objectName, string propertyName);
    public static string rsInvalidChartSubType(string objectType, string objectName, string propertyName, string chartType, string chartSubType);
    public static string rsInvalidColumnGrouping(string objectType, string objectName, string propertyName);
    public static string rsInvalidColumnsInBody(string objectType, string objectName, string propertyName);
    public static string rsInvalidCustomAggregateExpression(string objectType, string objectName, string propertyName);
    public static string rsInvalidCustomAggregateScope(string objectType, string objectName, string propertyName);
    public static string rsInvalidCustomPropertyName(string objectType, string objectName, string propertyName);
    public static string rsInvalidChartDataValueNameNotUnique(string objectType, string objectName, string propertyName, string propertyNameValue);
    public static string rsInvalidObjectNameNotUnique(string objectType, string objectName, string propertyName, string propertyNameValue);
    public static string rsInvalidObjectNameNotCLSCompliant(string objectType, string objectName, string propertyName, string propertyNameValue);
    public static string rsInvalidChartDataValueNameNotConstant(string objectType, string objectName, string propertyName, string subPropertyName, string dataPointIndex, string dataValueIndex);
    public static string rsInvalidChartDataValueName(string objectType, string objectName, string propertyName, string validNames);
    public static string rsInvalidSourceSeriesName(string objectType, string objectName, string stringPropertyName, string propertyNameValue);
    public static string rsInvalidDataElementNameNotCLSCompliant(string objectType, string objectName, string propertyName, string dataRendererElement, string offendingValue);
    public static string rsInvalidDataElementNameLength(string objectType, string objectName, string propertyName, string dataRendererElement, string offendingValue, string maxLength);
    public static string rsInvalidDataSource(string objectType, string objectName, string propertyName);
    public static string rsInvalidDataSourceReference(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidDefaultValue(string objectType, string objectName, string propertyName);
    public static string rsInvalidDefaultValueValues(string objectType, string objectName, string propertyName);
    public static string rsInvalidDataSetReferenceField(string objectType, string objectName, string propertyName, string fieldName, string dataSetName);
    public static string rsInvalidDetailDataGrouping(string objectType, string objectName, string propertyName);
    public static string rsInvalidEmbeddedImage(string objectType, string objectName, string propertyName);
    public static string rsInvalidField(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsInvalidFieldNameNotCLSCompliant(string objectType, string objectName, string propertyName, string offendingValue, string dataSetName);
    public static string rsInvalidFieldNameLength(string objectType, string objectName, string propertyName, string offendingValue, string datasetName, string maxLength);
    public static string rsInvalidGroupExpressionScope(string objectType, string objectName, string propertyName);
    public static string rsInvalidGroupingNameNotCLSCompliant(string objectType, string objectName, string propertyName, string groupName);
    public static string rsInvalidGroupingNameLength(string objectType, string objectName, string propertyName, string maxLength);
    public static string rsInvalidHideDuplicateScope(string objectType, string objectName, string propertyName, string groupName);
    public static string rsInvalidURLProtocol(string objectType, string objectName, string propertyName, string url);
    public static string rsInvalidIntegerConstant(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidNameNotCLSCompliant(string objectType, string objectName, string propertyName);
    public static string rsInvalidNameLength(string objectType, string objectName, string propertyName, string maxLength);
    public static string rsInvalidNumberOfFilterValues(string objectType, string objectName, string propertyName, string op, string count);
    public static string rsInvalidParameterNameNotCLSCompliant(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidParameterNameLength(string objectType, string objectName, string propertyName, string maxLength);
    public static string rsInvalidPreviousAggregateInMatrixCell(string objectType, string objectName, string propertyName, string matrixName);
    public static string rsInvalidRepeatWith(string objectType, string objectName, string propertyName);
    public static string rsInvalidReportDefinition(string objectType, string objectName, string propertyName, string message);
    public static string rsInvalidReportParameterDependency(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidValidValuesDataSetReference(string objectType, string objectName, string propertyName, string dataSet);
    public static string rsInvalidDefaultValueDataSetReference(string objectType, string objectName, string propertyName, string dataSet);
    public static string rsInvalidRowGrouping(string objectType, string objectName, string propertyName);
    public static string rsInvalidRunningValueAggregate(string objectType, string objectName, string propertyName);
    public static string rsInvalidScopeInMatrix(string objectType, string objectName, string propertyName, string matrixName);
    public static string rsInvalidSeriesGrouping(string objectType, string objectName, string propertyName);
    public static string rsInvalidStaticDataGrouping(string objectType, string objectName, string propertyName);
    public static string rsInvalidReportName(string objectType, string objectName, string propertyName);
    public static string rsInvalidReportNameCharacters(string objectType, string objectName, string propertyName, string reservedCharacters);
    public static string rsInvalidReportUri(string objectType, string objectName, string propertyName);
    public static string rsInvalidToggleItem(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidValidValues(string objectType, string objectName, string propertyName);
    public static string rsInvalidMatrixSubtotalReportItem(string objectType, string objectName, string propertyName);
    public static string rsInvalidGroupingParent(string objectType, string objectName, string propertyName);
    public static string rsCantMakeTableGroupHeadersFixed(string objectType, string objectName, string propertyName);
    public static string rsFixedHeadersInInnerDataRegion(string objectType, string objectName, string propertyName);
    public static string rsInvalidFixedTableColumnHeaderSpacing(string objectType, string objectName, string propertyName);
    public static string rsQueryCommandTextProcessingError(string datasetName);
    public static string rsDataSourceConnectStringProcessingError(string datasourceName);
    public static string rsReportParameterProcessingError(string parameterName);
    public static string rsReportParameterQueryProcessingError(string parameterName, string propertyName, string fieldName, string datasetName, string error);
    public static string rsInvalidMultiValueParameter(string objectType, string objectName, string propertyName);
    public static string rsInvalidParameterDefaultValue(string objectType, string objectName, string propertyName);
    public static string rsReportParameterPropertyTypeMismatch(string objectType, string objectName, string propertyName);
    public static string rsParameterValueDefinitionMismatch(string objectType, string objectName, string propertyName, string valuePropertyName);
    public static string rsParameterValueNullOrBlank(string objectType, string objectName, string propertyName, string valuePropertyName);
    public static string rsLabelExpressionOnChartScalarAxisIsIgnored(string objectType, string objectName, string propertyName);
    public static string rsLineChartMightScatter(string objectType, string objectName, string propertyName);
    public static string rsMissingAggregateScope(string objectType, string objectName, string propertyName);
    public static string rsMissingAggregateScopeInPageSection(string objectType, string objectName, string propertyName);
    public static string rsReportItemInScopedAggregate(string objectType, string objectName, string propertyName, string reportItemName);
    public static string rsMissingChartDataPoints(string objectType, string objectName, string propertyName);
    public static string rsMissingChartDataValueName(string objectType, string objectName, string propertyName, string index, string subPropertyName);
    public static string rsMissingCustomPropertyName(string objectType, string objectName, string propertyName, string index);
    public static string rsInvalidDataSetName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsMissingDataSetName(string objectType, string objectName, string propertyName);
    public static string rsMissingMIMEType(string objectType, string objectName, string propertyName);
    public static string rsMissingParameterDefault(string objectType, string objectName, string propertyName);
    public static string rsMultipleGroupExpressionsOnChartScalarAxis(string objectType, string objectName, string propertyName);
    public static string rsMultipleGroupingsOnChartScalarAxis(string objectType, string objectName, string propertyName);
    public static string rsMultiReportItemsInMatrixSection(string objectType, string objectName, string propertyName);
    public static string rsMultiReportItemsInTableCell(string objectType, string objectName, string propertyName);
    public static string rsMultiReportItemsInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsMultiReportItemsInCustomReportItem(string objectType, string objectName, string propertyName);
    public static string rsMultiStaticColumnsOrRows(string objectType, string objectName, string propertyName);
    public static string rsMultiStaticCategoriesOrSeries(string objectType, string objectName, string propertyName);
    public static string rsNegativeLeftWidth(string objectType, string objectName, string propertyName);
    public static string rsNegativeTopHeight(string objectType, string objectName, string propertyName);
    public static string rsNonAggregateInMatrixCell(string objectType, string objectName, string propertyName);
    public static string rsNotAReportDefinition(string objectType, string objectName, string propertyName);
    public static string rsNotACurrentReportDefinition(string objectType, string objectName, string propertyName, string namespaceValue);
    public static string rsOverlappingReportItems(string objectType, string objectName, string propertyName, string objectType2, string objectName2);
    public static string rsReportItemOutsideContainer(string objectType, string objectName, string propertyName);
    public static string rsParameterInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsPageBreakOnMatrixColumnGroup(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsPageBreakOnChartGroup(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsPageBreakOnGaugeGroup(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsPreviousAggregateInFilterExpression(string objectType, string objectName, string propertyName);
    public static string rsPreviousAggregateInGroupExpression(string objectType, string objectName, string propertyName);
    public static string rsPreviousAggregateInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsPreviousAggregateInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsPreviousAggregateInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsPreviousAggregateInSortExpression(string objectType, string objectName, string propertyName);
    public static string rsPreviousAggregateInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsRepeatWithNotPeerDataRegion(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsReportItemInFilterExpression(string objectType, string objectName, string propertyName);
    public static string rsReportItemInGroupExpression(string objectType, string objectName, string propertyName);
    public static string rsReportItemInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsReportItemInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsReportItemInSortExpression(string objectType, string objectName, string propertyName);
    public static string rsReportItemInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsReportItemInVariableExpression(string objectType, string objectName, string propertyName);
    public static string rsRowNumberInFilterExpression(string objectType, string objectName, string propertyName);
    public static string rsRowNumberInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsRowNumberInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsRowNumberInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsRowNumberInSortExpression(string objectType, string objectName, string propertyName);
    public static string rsRowNumberInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsRowNumberInVariableExpression(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInFilterExpression(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInGroupExpression(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInQueryParameterExpression(string objectType, string objectName, string propertyName, string dataSetName);
    public static string rsRunningValueInReportParameterExpression(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInSortExpression(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInReportLanguageExpression(string objectType, string objectName, string propertyName);
    public static string rsRunningValueInVariableExpression(string objectType, string objectName, string propertyName);
    public static string rsScopeInPageSectionExpression(string objectType, string objectName, string propertyName);
    public static string rsStaticGroupingOnChartScalarAxis(string objectType, string objectName, string propertyName);
    public static string rsToggleInPageSection(string objectType, string objectName, string propertyName);
    public static string rsUnsortedCategoryInAreaChart(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfMatrixCells(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfMatrixColumns(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfMatrixRows(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfChartDataPoints(string objectType, string objectName, string propertyName, string present, string expected);
    public static string rsWrongNumberOfChartSeries(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfChartDataPointsInSeries(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfDataValues(string objectType, string objectName, string propertyName, string present, string expected);
    public static string rsWrongNumberOfParameters(string objectType, string objectName, string propertyName, string functionName);
    public static string rsWrongNumberOfTableCells(string objectType, string objectName, string propertyName);
    public static string rsInvalidRecursiveAggregate(string objectType, string objectName, string propertyName);
    public static string rsInvalidAggregateRecursiveFlag(string objectType, string objectName, string propertyName);
    public static string rsPostSortAggregateInGroupFilterExpression(string objectType, string objectName, string propertyName);
    public static string rsPostSortAggregateInSortExpression(string objectType, string objectName, string propertyName);
    public static string rsPostSortAggregateInVariableExpression(string objectType, string objectName, string propertyName);
    public static string rsBookmarkInPageSection(string objectType, string objectName, string propertyName);
    public static string rsUnsupportedProtocol(string objectType, string objectName, string propertyName, string propertyValue, string protocolList);
    public static string rsInvalidVariableCount(string objectType, string objectName, string propertyName, string subPropertyName);
    public static string rsMissingExpression(string objectType, string objectName, string propertyName);
    public static string rsInvalidActionsCount(string objectType, string objectName, string propertyName, string SubPropertyName);
    public static string rsInvalidMeDotValueInExpression(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfTablixCornerRows(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfTablixCornerCells(string objectType, string objectName, string propertyName, string columnIndex);
    public static string rsWrongNumberOfTablixColumns(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfTablixCells(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfTablixRows(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixCornerCellSpan(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixCellCellSpan(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixCornerColumnSpans(string objectType, string objectName, string propertyName, string columnIndex);
    public static string rsInvalidTablixCornerRowSpans(string objectType, string objectName, string propertyName, string columnIndex);
    public static string rsHiddenTablixCornerCellContents(string objectType, string objectName, string propertyName);
    public static string rsInvalidSortNotAllowed(string objectType, string objectName, string propertyName, string otherProperty, string parentName);
    public static string rsInvalidFixedHeaderOnOppositeHierarchy(string objectType, string objectName, string propertyName, string otherPropertyName);
    public static string rsInvalidFixedDataColumnPosition(string objectType, string objectName, string propertyName, string otherPropertyName);
    public static string rsInvalidFixedDataRowPosition(string objectType, string objectName, string propertyName);
    public static string rsInvalidFixedDataNotContiguous(string objectType, string objectName, string propertyName, string rowOrColumnHierarchy);
    public static string rsInvalidFixedDataInHierarchy(string objectType, string objectName, string propertyName, string rowOrColumnHierarchy);
    public static string rsInvalidFixedDataBodyCellSpans(string objectType, string objectName, string rowIndex);
    public static string rsInvalidGroupAncestorIsDetail(string objectType, string objectName, string propertyName);
    public static string rsInvalidKeepWithGroupOnDynamicTablixMember(string objectType, string objectName, string propertyName, string subPropertyName, string neverValue);
    public static string rsInvalidKeepWithGroup(string objectType, string objectName, string propertyName, string subPropertyName, string expectedValue, string actualValue);
    public static string rsInvalidKeepWithGroupOnColumnTablixMember(string objectType, string objectName, string propertyName, string subPropertyName, string neverValue);
    public static string rsInvalidRepeatOnNewPageOnColumnTablixMember(string objectType, string objectName, string propertyName, string subPropertyName);
    public static string rsInvalidRepeatOnNewPage(string objectType, string objectName, string propertyName, string subPropertyName, string expectedValue, string actualValue);
    public static string rsInvalidTablixCellColSpans(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixCellColSpan(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixCellRowSpan(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixHeaderColSpan(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixHeaderRowSpan(string objectType, string objectName, string propertyName);
    public static string rsCellContentsNotOmitted(string objectType, string objectName, string propertyName);
    public static string rsCellContentsRequired(string objectType, string objectName, string propertyName);
    public static string rsInconsistentNumberofCellsInRow(string objectType, string objectName, string propertyName);
    public static string rsInvalidTablixHeaderSize(string objectType, string objectName, string propertyName, string subPropertyName, string number, string expectedSize, string actualSize, string rowOrColumn);
    public static string rsInvalidPreviousAggregateInTablixCell(string objectType, string objectName, string propertyName, string tablixName);
    public static string rsInvalidScopeInTablix(string objectType, string objectName, string propertyName, string tablixName);
    public static string rsInvalidTablixHeaders(string objectType, string objectName, string propertyName, string subPropertyName, string subSubPropertyName, string level);
    public static string rsNonAggregateInTablixCell(string objectType, string objectName, string propertyName);
    public static string rsInvalidInnerDataSetName(string objectType, string objectName, string propertyName, string expectedValue, string actualValue);
    public static string rsInvalidChartAxisNameNotCLSCompliant(string objectType, string objectName, string propertyName, string name);
    public static string rsInvalidChartAxisNameLength(string objectType, string objectName, string propertyName, string name, string maxLength);
    public static string rsSpecifiedNonValueAxisName(string objectType, string objectName, string propertyName, string name);
    public static string rsValueAxisNameNotFound(string objectType, string objectName, string propertyName, string name);
    public static string rsDuplicateVariableName(string objectType, string objectName, string propertyName, string name);
    public static string rsInvalidVariableNameNotCLSCompliant(string objectType, string objectName, string propertyName, string variableName);
    public static string rsInvalidVariableNameLength(string objectType, string objectName, string propertyName, string variableName);
    public static string rsDuplicateGroupingVariableName(string objectType, string objectName, string propertyName, string name, string groupingName);
    public static string rsInvalidGroupingVariableNameNotCLSCompliant(string objectType, string objectName, string propertyName, string variableName, string groupingName);
    public static string rsInvalidGroupingVariableNameLength(string objectType, string objectName, string propertyName, string variableName, string groupingName, string maxLength);
    public static string rsInvalidVariableReference(string objectType, string objectName, string propertyName, string variablePropertyName, string variableName);
    public static string rsInvalidReportItemInPageSection(string objectType, string objectName, string propertyName);
    public static string rsInvalidTargetScope(string objectType, string objectName, string propertyName, string scopeName);
    public static string rsInvalidOmittedTargetScope(string objectType, string objectName, string propertyName);
    public static string rsInvalidOmittedExpressionScope(string objectType, string objectName, string propertyName, string elementName);
    public static string rsInvalidExpressionScope(string objectType, string objectName, string propertyName, string scopeName);
    public static string rsInvalidTextboxInPageSection(string objectType, string objectName, string propertyName);
    public static string rsNonExistingScope(string objectType, string objectName, string propertyName, string scopeName);
    public static string rsInvalidExpressionScopeDataSet(string objectType, string objectName, string propertyName, string scopeName, string targetProperty);
    public static string rsInvalidSortExpressionScope(string objectType, string objectName, string propertyName, string scopeName);
    public static string rsIneffectiveSortExpressionScope(string objectType, string objectName, string propertyName, string scopeName);
    public static string rsMissingDataGrouping(string objectType, string objectName, string propertyName);
    public static string rsWrongNumberOfDataRows(string objectType, string objectName, string expectedNumber);
    public static string rsWrongNumberOfDataCellsInDataRow(string objectType, string objectName, string expectedNumber);
    public static string rsMissingDataGroupings(string objectType, string objectName, string propertyName);
    public static string rsMissingDataCells(string objectType, string objectName, string propertyName);
    public static string rsCRIMultiStaticColumnsOrRows(string objectType, string objectName, string propertyName);
    public static string rsCRIStaticWithSubgroups(string objectType, string objectName, string propertyName);
    public static string rsCRIMultiNonStaticGroups(string objectType, string objectName, string propertyName);
    public static string rsCRISubtotalNotSupported(string objectType, string objectName, string propertyName);
    public static string rsInvalidGrouping(string objectType, string objectName, string propertyName);
    public static string rsCRIInPageSection(string objectType, string objectName, string propertyName);
    public static string rsCRIRenderItemNull(string objectType, string objectName, string customControlType);
    public static string rsCRIRenderInstanceNull(string objectType, string objectName, string customControlType);
    public static string rsCRIRenderItemInstanceType(string objectType, string objectName, string customControlType, string customReportItemName, string expectedObjectType);
    public static string rsCRIRenderItemDefinitionName(string objectType, string objectName, string customControlType, string customReportItemName, string expectedDefinitionName);
    public static string rsCRIRenderItemProperties(string objectType, string objectName, string customControlType, string customReportItemName, string propertyName, string expectedCount, string actualCount);
    public static string rsCRIRenderItemDuplicateStyle(string objectType, string objectName, string customControlType, string customReportItemName, string styleName);
    public static string rsCRIRenderItemInvalidStyleType(string objectType, string objectName, string customControlType, string customReportItemName, string styleName);
    public static string rsCRIRenderItemInvalidStyle(string objectType, string objectName, string customControlType, string customReportItemName, string styleName);
    public static string rsCRIControlFailedToLoad(string objectType, string objectName, string customControlType);
    public static string rsCRIControlNotInstalled(string objectType, string objectName, string customControlType);
    public static string rsAggregateOfMixedDataTypes(string objectType, string objectName, string propertyName);
    public static string rsAggregateOfNonNumericData(string objectType, string objectName, string propertyName);
    public static string rsAggregateOfInvalidExpressionDataType(string objectType, string objectName, string propertyName);
    public static string rsCyclicExpression(string objectType, string objectName, string propertyName);
    public static string rsCyclicExpressionInReportVariable(string objectType, string objectName, string propertyName);
    public static string rsCyclicExpressionInGroupVariable(string objectType, string objectName, string propertyName);
    public static string rsErrorExecutingSubreport(string objectType, string objectName, string instanceID, string message);
    public static string rsInvalidExpressionDataType(string objectType, string objectName, string propertyName);
    public static string rsFieldErrorInExpression(string objectType, string objectName, string propertyName, string errorName);
    public static string rsInvalidValidValueList(string objectType, string objectName, string propertyName);
    public static string rsMinMaxOfNonSortableData(string objectType, string objectName, string propertyName);
    public static string rsRuntimeErrorInExpression(string objectType, string objectName, string propertyName, string message);
    public static string rsRuntimeUserProfileDependency(string objectType, string objectName, string propertyName);
    public static string rsMissingFieldInDataSet(string objectType, string objectName, string propertyName, string fieldName);
    public static string rsDataSetFieldTypeNotSupported(string objectType, string objectName, string propertyName, string fieldName);
    public static string rsErrorReadingDataSetField(string objectType, string objectName, string propertyName, string fieldName, string optionalInnerExceptionMessage);
    public static string rsErrorReadingFieldProperty(string objectType, string objectName, string propertyName, string fieldName, string extendedPropertyName, string optionalInnerExceptionMessage);
    public static string rsUnexpectedErrorInExpression(string objectType, string objectName, string propertyName);
    public static string rsWarningExecutingSubreport(string objectType, string objectName, string propertyName);
    public static string rsInvalidImageReference(string objectType, string objectName, string propertyName, string additionalMessage);
    public static string rsInvalidDatabaseImage(string objectType, string objectName, string propertyName);
    public static string rsComparisonError(string objectType, string objectName, string propertyName);
    public static string rsComparisonTypeError(string objectType, string objectName, string propertyName, string typeX, string typeY);
    public static string rsCollationDetectionFailed(string objectType, string objectName, string propertyName);
    public static string rsErrorLoadingExprHostAssembly(string objectType, string objectName, string propertyName, string details);
    public static string rsErrorInOnInit(string objectType, string objectName, string propertyName, string details);
    public static string rsUntrustedCodeModule(string objectType, string objectName, string propertyName, string assemblyName);
    public static string rsExceededMaxRecursionLevel(string subreportName);
    public static string rsEngineMismatchSubReport(string objectType, string objectName, string propertyName, string subreportName, string parentReportPath);
    public static string rsEngineMismatchParentReport(string objectType, string objectName, string propertyName, string subreportName, string parentReportPath);
    public static string rsMissingSubReport(string subreportName, string subreportPath);
    public static string rsSubReportDataRetrievalFailed(string subreportName, string subreportPath);
    public static string rsSubReportDataNotRetrieved(string subreportName, string subreportPath);
    public static string rsSubReportParametersNotSpecified(string subreportName, string subreportPath);
    public static string rsInvalidRichTextParseFailed(string objectType, string objectName, string markupType, string innerMessage);
    public static string rsInvalidCollationCultureName(string objectType, string objectName, string dataSourceType, string offendingValue);
    public static string rsParseErrorInvalidSize(string objectType, string objectName, string propertyName, string offendingValue, string charPosition);
    public static string rsParseErrorInvalidValue(string objectType, string objectName, string propertyName, string offendingValue, string charPosition);
    public static string rsParseErrorInvalidColor(string objectType, string objectName, string propertyName, string offendingValue, string charPosition);
    public static string rsParseErrorOutOfRangeSize(string objectType, string objectName, string propertyName, string offendingValue, string minValue, string maxValue);
    public static string rsInvalidEmptyImageReference(string objectType, string objectName, string propertyName);
    public static string rsFieldReference(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidBackgroundRepeat(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidBackgroundGradientType(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidBorderStyle(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidCalendar(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidCalendarForLanguage(string objectType, string objectName, string propertyName, string offendingValue, string language);
    public static string rsInvalidColor(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidDirection(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidDatabaseImageProperty(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidEmbeddedImageProperty(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidExternalImageProperty(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidFontStyle(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidFontWeight(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidFormatString(string objectType, string objectName, string propertyName, string message);
    public static string rsInvalidLanguage(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidMeasurementUnit(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidMIMEType(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidNumeralVariant(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidNumeralVariantForLanguage(string objectType, string objectName, string propertyName, string offendingValue, string language);
    public static string rsInvalidSize(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidTextAlign(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidTextDecoration(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidUnicodeBiDi(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidVerticalAlign(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidWritingMode(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsNegativeSize(string objectType, string objectName, string propertyName);
    public static string rsOutOfRangeSize(string objectType, string objectName, string propertyName, string offendingValue, string minValue, string maxValue);
    public static string rsPageNumberInBody(string objectType, string objectName, string propertyName);
    public static string rsPageNumberInScopedAggregate(string objectType, string objectName, string propertyName);
    public static string rsParameterReference(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsReportItemReference(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDataSetReference(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDataSourceReference(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsErrorLoadingCodeModule(string objectType, string objectName, string propertyName, string module, string details);
    public static string rsInvalidTextEffect(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidBackgroundHatchType(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidBackgroundImagePosition(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidTextOrientations(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidListStyle(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidMarkupType(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsFilterEvaluationError(string objectType, string objectName, string propertyName);
    public static string rsFilterFieldError(string objectType, string objectName, string propertyName, string errorName);
    public static string rsNoFieldDataAtIndex(int fieldIndex);
    public static string rsErrorOpeningConnection(string dataSourceName);
    public static string rsErrorImpersonatingUser(string dataSourceName);
    public static string rsDataExtensionWithoutConnectionExtension(string dataSourceName);
    public static string rsManagedDataProviderWithoutConnectionExtension(string dataSourceName);
    public static string rsErrorClosingConnection(string dataSourceName);
    public static string rsErrorRollbackTransaction(string dataSourceName);
    public static string rsErrorCommitTransaction(string dataSourceName);
    public static string rsErrorCreatingCommand(string dataSourceName);
    public static string rsErrorCreatingQueryParameter(string dataSetName);
    public static string rsErrorAddingMultiValueQueryParameter(string dataSetName);
    public static string rsErrorAddingQueryParameter(string dataSetName);
    public static string rsErrorSettingCommandText(string dataSetName);
    public static string rsErrorSettingCommandType(string dataSetName);
    public static string rsErrorSettingTransaction(string dataSetName);
    public static string rsErrorSettingQueryTimeout(string dataSetName);
    public static string rsErrorExecutingCommand(string dataSetName);
    public static string rsErrorCreatingDataReader(string dataSetName);
    public static string rsErrorReadingNextDataRow(string dataSetName);
    public static string rsErrorReadingDataField(string dataSetName);
    public static string rsErrorReadingDataAggregationField(string dataSetName);
    public static string rsInvalidChart(string chartName);
    public static string rsErrorDuringChartRendering(string chartName, string message);
    public static string rsOWCNotInstalled(string chartName);
    public static string rsUnsupportedURLProtocol(string url);
    public static string rsCRIProcessingError(string criName, string criType);
    public static string rsGaugePanelInvalidData(string gaugePanelName);
    public static string rsGaugePanelInvalidMinMaxScale(string gaugePanelName);
    public static string rsGaugePanelInvalidStartEndRange(string gaugePanelName);
    public static string rsInvalidRowGaugeMemberCannotBeDynamic(string objectType, string objectName, string propertyName, string subPropertyName, string groupName);
    public static string rsInvalidRowGaugeMemberCannotContainChildMember(string objectType, string objectName, string propertyName);
    public static string rsInvalidColumnGaugeMemberCannotContainMultipleChildMember(string objectType, string objectName, string propertyName);
    public static string rsDuplicateItemName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDuplicateChartAxisName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDuplicateChartLegendItemName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDuplicateChartLegendCustomItemCellName(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsDuplicateChartFormulaParameter(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidEnumValue(string objectType, string objectName, string propertyName, string offendingValue);
    public static string rsInvalidParameterValue(string value);
    public static string rsInvalidParameterRange(int value, int downLimit, int upperLimit);
    public static string rsNotInCollection(string elementName);
}
internal class Microsoft.ReportingServices.ReportProcessing.RunningValueInfo : DataAggregateInfo {
    private string m_scope;
    internal string Scope { get; internal set; }
    internal string get_Scope();
    internal void set_Scope(string value);
    internal RunningValueInfo DeepClone(InitializationContext context);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.RunningValueInfoList : ArrayList {
    internal RunningValueInfo Item { get; }
    internal RunningValueInfoList(int capacity);
    internal RunningValueInfo get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.RuntimeSortFilterEventInfo : object {
    private TextBox m_eventSource;
    private int m_oldUniqueName;
    private VariantList[] m_sortSourceScopeInfo;
    private bool m_sortDirection;
    private IScope m_eventSourceScope;
    private int m_eventSourceDetailIndex;
    private RuntimeDataRegionObjList m_detailScopes;
    private IntList m_detailScopeIndices;
    private IHierarchyObj m_eventTarget;
    private bool m_targetSortFilterInfoAdded;
    private RuntimeExpressionInfoList m_groupExpressionsInSortTarget;
    private ArrayList m_sortFilterExpressionScopeObjects;
    private int m_currentSortIndex;
    private int m_currentInstanceIndex;
    private ScopeLookupTable m_sortOrders;
    private bool m_processed;
    private int m_nullScopeCount;
    private int m_newUniqueName;
    private int m_page;
    private Hashtable m_peerSortFilters;
    internal TextBox EventSource { get; }
    internal IScope EventSourceScope { get; internal set; }
    internal int EventSourceDetailIndex { get; internal set; }
    internal RuntimeDataRegionObjList DetailScopes { get; internal set; }
    internal IntList DetailScopeIndices { get; internal set; }
    internal bool SortDirection { get; internal set; }
    internal VariantList[] SortSourceScopeInfo { get; }
    internal IHierarchyObj EventTarget { get; internal set; }
    internal bool TargetSortFilterInfoAdded { get; internal set; }
    internal bool Processed { get; internal set; }
    internal int OldUniqueName { get; internal set; }
    internal int NewUniqueName { get; internal set; }
    internal int Page { get; internal set; }
    internal Hashtable PeerSortFilters { get; internal set; }
    internal RuntimeSortFilterEventInfo(TextBox eventSource, int oldUniqueName, bool sortDirection, VariantList[] sortSourceScopeInfo);
    internal TextBox get_EventSource();
    internal IScope get_EventSourceScope();
    internal void set_EventSourceScope(IScope value);
    internal int get_EventSourceDetailIndex();
    internal void set_EventSourceDetailIndex(int value);
    internal RuntimeDataRegionObjList get_DetailScopes();
    internal void set_DetailScopes(RuntimeDataRegionObjList value);
    internal IntList get_DetailScopeIndices();
    internal void set_DetailScopeIndices(IntList value);
    internal bool get_SortDirection();
    internal void set_SortDirection(bool value);
    internal VariantList[] get_SortSourceScopeInfo();
    internal IHierarchyObj get_EventTarget();
    internal void set_EventTarget(IHierarchyObj value);
    internal bool get_TargetSortFilterInfoAdded();
    internal void set_TargetSortFilterInfoAdded(bool value);
    internal bool get_Processed();
    internal void set_Processed(bool value);
    internal int get_OldUniqueName();
    internal void set_OldUniqueName(int value);
    internal int get_NewUniqueName();
    internal void set_NewUniqueName(int value);
    internal int get_Page();
    internal void set_Page(int value);
    internal Hashtable get_PeerSortFilters();
    internal void set_PeerSortFilters(Hashtable value);
    internal void RegisterSortFilterExpressionScope(Int32& containerSortFilterExprScopeIndex, RuntimeDataRegionObj scopeObj, VariantList[] scopeValues, int sortFilterInfoIndex);
    internal void PrepareForSorting(ProcessingContext processingContext);
    private void CollectSortOrders();
    internal bool ProcessSorting(ProcessingContext processingContext);
    private void AddSortOrder(VariantList[] scopeValues, bool incrementCounter);
    internal object GetSortOrder(ReportRuntime runtime);
    internal void MatchEventSource(TextBox textBox, TextBoxInstance textBoxInstance, IScope containingScope, ProcessingContext processingContext);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.RuntimeSortFilterEventInfoList : ArrayList {
    internal RuntimeSortFilterEventInfo Item { get; }
    internal RuntimeSortFilterEventInfo get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.RuntimeUserSortTargetInfo : object {
    private BTreeNode m_sortTree;
    private AggregateRowList m_aggregateRows;
    private IntList m_sortFilterInfoIndices;
    private Hashtable m_targetForNonDetailSort;
    private Hashtable m_targetForDetailSort;
    internal BTreeNode SortTree { get; internal set; }
    internal AggregateRowList AggregateRows { get; internal set; }
    internal IntList SortFilterInfoIndices { get; internal set; }
    internal bool TargetForNonDetailSort { get; }
    internal RuntimeUserSortTargetInfo(IHierarchyObj owner, int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo);
    internal BTreeNode get_SortTree();
    internal void set_SortTree(BTreeNode value);
    internal AggregateRowList get_AggregateRows();
    internal void set_AggregateRows(AggregateRowList value);
    internal IntList get_SortFilterInfoIndices();
    internal void set_SortFilterInfoIndices(IntList value);
    internal bool get_TargetForNonDetailSort();
    internal void AddSortInfo(IHierarchyObj owner, int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo);
    internal void AddSortInfoIndex(int sortInfoIndex, RuntimeSortFilterEventInfo sortInfo);
    internal void ResetTargetForNonDetailSort();
    internal bool IsTargetForSort(int index, bool detailSort);
    internal void MarkSortInfoProcessed(RuntimeSortFilterEventInfoList runtimeSortFilterInfo, IHierarchyObj sortTarget);
    internal void EnterProcessUserSortPhase(ProcessingContext pc);
    internal void LeaveProcessUserSortPhase(ProcessingContext pc);
}
internal class Microsoft.ReportingServices.ReportProcessing.ScopeLookupTable : object {
    private object m_lookupTable;
    internal object LookupTable { get; internal set; }
    internal object get_LookupTable();
    internal void set_LookupTable(object value);
    internal void Clear();
    internal void Add(GroupingList scopeDefs, VariantList[] scopeValues, int value);
    private void GetNullScopeEntries(int nullScopes, Hashtable& hashEntries, Boolean& lookup);
    internal int Lookup(GroupingList scopeDefs, VariantList[] scopeValues);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ScopeNameValidator : NameValidator {
    internal bool Validate(bool isGrouping, string scopeName, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal bool Validate(bool isGrouping, string scopeName, ObjectType objectType, string objectName, ErrorContext errorContext, bool enforceCLSCompliance);
}
internal class Microsoft.ReportingServices.ReportProcessing.SenderInformation : object {
    private bool m_startHidden;
    private IntList m_receiverUniqueNames;
    private Int32[] m_containerUniqueNames;
    internal bool StartHidden { get; internal set; }
    internal IntList ReceiverUniqueNames { get; internal set; }
    internal Int32[] ContainerUniqueNames { get; internal set; }
    internal SenderInformation(bool startHidden, Int32[] containerUniqueNames);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal IntList get_ReceiverUniqueNames();
    internal void set_ReceiverUniqueNames(IntList value);
    internal Int32[] get_ContainerUniqueNames();
    internal void set_ContainerUniqueNames(Int32[] value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.SenderInformationHashtable : HashtableInstanceInfo {
    internal SenderInformation Item { get; internal set; }
    internal SenderInformationHashtable(int capacity);
    internal SenderInformation get_Item(int key);
    internal void set_Item(int key, SenderInformation value);
    internal void Add(int key, SenderInformation sender);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.SequenceIndex : object {
    internal static byte BitMask001;
    internal static byte BitMask255;
    private static SequenceIndex();
    internal static void SetBit(Byte[]& sequence, int sequenceIndex);
    internal static void ClearBit(Byte[]& sequence, int sequenceIndex);
    internal static bool GetBit(Byte[] sequence, int sequenceIndex, bool returnValueIfSequenceNull);
}
internal enum Microsoft.ReportingServices.ReportProcessing.Severity : Enum {
    public int value__;
    public static Severity Error;
    public static Severity Warning;
}
internal class Microsoft.ReportingServices.ReportProcessing.SimpleTextBoxInstanceInfo : InstanceInfo {
    private string m_formattedValue;
    private object m_originalValue;
    private ReportItem m_reportItemDef;
    internal string FormattedValue { get; internal set; }
    internal object OriginalValue { get; internal set; }
    internal SimpleTextBoxInstanceInfo(ProcessingContext pc, TextBox reportItemDef, TextBoxInstance owner, int index);
    internal SimpleTextBoxInstanceInfo(TextBox reportItemDef);
    internal SimpleTextBoxInstanceInfo(TextBox reportItemDef, TextBoxInstanceInfo instanceInfo);
    internal string get_FormattedValue();
    internal void set_FormattedValue(string value);
    internal object get_OriginalValue();
    internal void set_OriginalValue(object value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.SortedReportItemIndexList : ArrayList {
    internal int Item { get; }
    internal SortedReportItemIndexList(int capacity);
    public void Add(ReportItemList collection, int collectionIndex, bool sortVertically);
    internal int get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.SortFilterEventInfo : object {
    [ReferenceAttribute]
private TextBox m_eventSource;
    private VariantList[] m_eventSourceScopeInfo;
    internal TextBox EventSource { get; internal set; }
    internal VariantList[] EventSourceScopeInfo { get; internal set; }
    internal SortFilterEventInfo(TextBox eventSource);
    internal TextBox get_EventSource();
    internal void set_EventSource(TextBox value);
    internal VariantList[] get_EventSourceScopeInfo();
    internal void set_EventSourceScopeInfo(VariantList[] value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.SortFilterEventInfoHashtable : HashtableInstanceInfo {
    internal SortFilterEventInfo Item { get; }
    internal SortFilterEventInfoHashtable(int capacity);
    internal SortFilterEventInfo get_Item(int key);
    internal void Add(int key, SortFilterEventInfo val);
}
internal class Microsoft.ReportingServices.ReportProcessing.Sorting : object {
    private ExpressionInfoList m_sortExpressions;
    private BoolList m_sortDirections;
    private SortingExprHost m_exprHost;
    internal ExpressionInfoList SortExpressions { get; internal set; }
    internal BoolList SortDirections { get; internal set; }
    internal SortingExprHost ExprHost { get; }
    internal Sorting(ConstructionPhase phase);
    internal ExpressionInfoList get_SortExpressions();
    internal void set_SortExpressions(ExpressionInfoList value);
    internal BoolList get_SortDirections();
    internal void set_SortDirections(BoolList value);
    internal SortingExprHost get_ExprHost();
    internal void Initialize(InitializationContext context);
    internal void SetExprHost(SortingExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.StDev : Var {
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.StDevP : VarP {
    internal virtual object Result();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.StringList : ArrayList {
    internal string Item { get; internal set; }
    internal StringList(int capacity);
    internal string get_Item(int index);
    internal void set_Item(int index, string value);
}
internal class Microsoft.ReportingServices.ReportProcessing.StringResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal string Value;
}
internal class Microsoft.ReportingServices.ReportProcessing.Style : object {
    private StyleAttributeHashtable m_styleAttributes;
    private ExpressionInfoList m_expressionList;
    private StyleExprHost m_exprHost;
    private int m_customSharedStyleCount;
    internal StyleAttributeHashtable StyleAttributes { get; internal set; }
    internal ExpressionInfoList ExpressionList { get; internal set; }
    internal StyleExprHost ExprHost { get; }
    internal int CustomSharedStyleCount { get; internal set; }
    internal Style(ConstructionPhase phase);
    internal StyleAttributeHashtable get_StyleAttributes();
    internal void set_StyleAttributes(StyleAttributeHashtable value);
    internal ExpressionInfoList get_ExpressionList();
    internal void set_ExpressionList(ExpressionInfoList value);
    internal StyleExprHost get_ExprHost();
    internal int get_CustomSharedStyleCount();
    internal void set_CustomSharedStyleCount(int value);
    internal void AddAttribute(string name, ExpressionInfo expressionInfo);
    internal void Initialize(InitializationContext context);
    internal void SetStyleExprHost(StyleExprHost exprHost);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.StyleAttributeHashtable : Hashtable {
    internal AttributeInfo Item { get; }
    internal StyleAttributeHashtable(int capacity);
    private StyleAttributeHashtable(SerializationInfo info, StreamingContext context);
    internal AttributeInfo get_Item(string index);
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.StyleEnumConstants : object {
    internal static string None;
    internal static string Dotted;
    internal static string Dashed;
    internal static string DashDot;
    internal static string DashDotDot;
    internal static string Solid;
    internal static string Double;
    internal static string Groove;
    internal static string Ridge;
    internal static string Inset;
    internal static string WindowInset;
    internal static string Outset;
    internal static string LeftRight;
    internal static string TopBottom;
    internal static string Center;
    internal static string DiagonalLeft;
    internal static string DiagonalRight;
    internal static string HorizontalCenter;
    internal static string VerticalCenter;
    internal static string Repeat;
    internal static string NoRepeat;
    internal static string RepeatX;
    internal static string RepeatY;
    internal static string Clip;
    internal static string Fit;
    internal static string Normal;
    internal static string Italic;
    internal static string Thin;
    internal static string ExtraLight;
    internal static string Light;
    internal static string Lighter;
    internal static string Medium;
    internal static string SemiBold;
    internal static string Bold;
    internal static string Bolder;
    internal static string ExtraBold;
    internal static string Heavy;
    internal static string FontWeight100;
    internal static string FontWeight200;
    internal static string FontWeight300;
    internal static string FontWeight400;
    internal static string FontWeight500;
    internal static string FontWeight600;
    internal static string FontWeight700;
    internal static string FontWeight800;
    internal static string FontWeight900;
    internal static string Underline;
    internal static string Overline;
    internal static string LineThrough;
    internal static string General;
    internal static string Left;
    internal static string Right;
    internal static string Top;
    internal static string Middle;
    internal static string Bottom;
    internal static string LTR;
    internal static string RTL;
    internal static string LRTB;
    internal static string TBRL;
    internal static string Horizontal;
    internal static string Vertical;
    internal static string Embed;
    internal static string BiDi_Override;
    internal static string BiDiOverride;
    internal static string Gregorian;
    internal static string GregorianArabic;
    internal static string GregorianMiddleEastFrench;
    internal static string GregorianTransliteratedEnglish;
    internal static string GregorianTransliteratedFrench;
    internal static string GregorianUSEnglish;
    internal static string Hebrew;
    internal static string Hijri;
    internal static string Japanese;
    internal static string Korea;
    internal static string Korean;
    internal static string Taiwan;
    internal static string ThaiBuddhist;
    internal static string Julian;
    internal static string Default;
    internal static string BackwardDiagonal;
    internal static string Cross;
    internal static string DarkDownwardDiagonal;
    internal static string DarkHorizontal;
    internal static string DarkUpwardDiagonal;
    internal static string DarkVertical;
    internal static string DashedDownwardDiagonal;
    internal static string DashedHorizontal;
    internal static string DashedUpwardDiagonal;
    internal static string DashedVertical;
    internal static string DiagonalBrick;
    internal static string DiagonalCross;
    internal static string Divot;
    internal static string DottedDiamond;
    internal static string DottedGrid;
    internal static string ForwardDiagonal;
    internal static string HorizontalBrick;
    internal static string LargeCheckerBoard;
    internal static string LargeConfetti;
    internal static string LargeGrid;
    internal static string LightDownwardDiagonal;
    internal static string LightHorizontal;
    internal static string LightUpwardDiagonal;
    internal static string LightVertical;
    internal static string NarrowHorizontal;
    internal static string NarrowVertical;
    internal static string OutlinedDiamond;
    internal static string Percent05;
    internal static string Percent10;
    internal static string Percent20;
    internal static string Percent25;
    internal static string Percent30;
    internal static string Percent40;
    internal static string Percent50;
    internal static string Percent60;
    internal static string Percent70;
    internal static string Percent75;
    internal static string Percent80;
    internal static string Percent90;
    internal static string Plaid;
    internal static string Shingle;
    internal static string SmallCheckerBoard;
    internal static string SmallConfetti;
    internal static string SmallGrid;
    internal static string SolidDiamond;
    internal static string Sphere;
    internal static string Trellis;
    internal static string Wave;
    internal static string Weave;
    internal static string WideDownwardDiagonal;
    internal static string WideUpwardDiagonal;
    internal static string ZigZag;
    internal static string Shadow;
    internal static string Emboss;
    internal static string Frame;
    internal static string TopRight;
    internal static string TopLeft;
    internal static string BottomRight;
    internal static string BottomLeft;
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.StyleTranslator : object {
    private static bool CompareWithInvariantCulture(string strOne, string strTwo);
    internal static int TranslateStyle(StyleAttributeNames styleName, string styleString, IErrorContext errorContext, bool isChartStyle);
    internal static BorderStyles TranslateBorderStyle(string styleString, IErrorContext errorContext);
    internal static BorderStyles TranslateBorderStyle(string styleString, BorderStyles defaultStyle, IErrorContext errorContext);
    internal static BackgroundGradients TranslateBackgroundGradientType(string styleString, IErrorContext errorContext);
    internal static BackgroundRepeatTypes TranslateBackgroundRepeat(string styleString, IErrorContext errorContext, bool isChartStyle);
    internal static Positions TranslatePosition(string styleString, IErrorContext errorContext, bool isChartStyle);
    internal static FontStyles TranslateFontStyle(string styleString, IErrorContext errorContext);
    internal static FontWeights TranslateFontWeight(string styleString, IErrorContext errorContext);
    internal static TextDecorations TranslateTextDecoration(string styleString, IErrorContext errorContext);
    internal static TextAlignments TranslateTextAlign(string styleString, IErrorContext errorContext);
    internal static VerticalAlignments TranslateVerticalAlign(string styleString, IErrorContext errorContext);
    internal static Directions TranslateDirection(string styleString, IErrorContext errorContext);
    internal static WritingModes TranslateWritingMode(string styleString, IErrorContext errorContext);
    internal static UnicodeBiDiTypes TranslateUnicodeBiDi(string styleString, IErrorContext errorContext);
    internal static string TranslateCalendar(Calendars calendar);
    internal static Calendars TranslateCalendar(string styleString, IErrorContext errorContext);
    internal static BackgroundHatchTypes TranslateBackgroundHatchType(string styleValue, IErrorContext errorContext, bool isChartStyle);
    internal static TextEffects TranslateTextEffect(string styleValue, IErrorContext errorContext, bool isChartStyle);
}
internal class Microsoft.ReportingServices.ReportProcessing.SubReport : ReportItem {
    internal static UInt32 MaxSubReportLevel;
    private string m_reportPath;
    private ParameterValueList m_parameters;
    private ExpressionInfo m_noRows;
    private bool m_mergeTransactions;
    [ReferenceAttribute]
private GroupingList m_containingScopes;
    private bool m_isMatrixCellScope;
    private Status m_status;
    private string m_reportName;
    private string m_description;
    private Report m_report;
    private string m_stringUri;
    private ParameterInfoCollection m_parametersFromCatalog;
    private ScopeLookupTable m_dataSetUniqueNameMap;
    private string m_subReportScope;
    private bool m_isDetailScope;
    private PageBreakStates m_pagebreakState;
    private SubreportExprHost m_exprHost;
    private SubReportList m_detailScopeSubReports;
    private bool m_saveDataSetUniqueName;
    private Uri m_uri;
    private ICatalogItemContext m_reportContext;
    internal ObjectType ObjectType { get; }
    internal string ReportPath { get; internal set; }
    internal ParameterValueList Parameters { get; internal set; }
    internal ExpressionInfo NoRows { get; internal set; }
    internal bool MergeTransactions { get; internal set; }
    internal GroupingList ContainingScopes { get; internal set; }
    internal Status RetrievalStatus { get; internal set; }
    internal string ReportName { get; internal set; }
    internal string Description { get; internal set; }
    internal Report Report { get; internal set; }
    internal string StringUri { get; internal set; }
    internal ICatalogItemContext ReportContext { get; internal set; }
    internal ParameterInfoCollection ParametersFromCatalog { get; internal set; }
    internal Uri Uri { get; }
    internal SubreportExprHost SubReportExprHost { get; }
    internal string SubReportScope { get; internal set; }
    internal bool IsMatrixCellScope { get; internal set; }
    internal bool IsDetailScope { get; internal set; }
    internal SubReportList DetailScopeSubReports { get; internal set; }
    internal ScopeLookupTable DataSetUniqueNameMap { get; internal set; }
    internal bool SaveDataSetUniqueName { get; }
    internal SubReport(ReportItem parent);
    internal SubReport(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal string get_ReportPath();
    internal void set_ReportPath(string value);
    internal ParameterValueList get_Parameters();
    internal void set_Parameters(ParameterValueList value);
    internal ExpressionInfo get_NoRows();
    internal void set_NoRows(ExpressionInfo value);
    internal bool get_MergeTransactions();
    internal void set_MergeTransactions(bool value);
    internal GroupingList get_ContainingScopes();
    internal void set_ContainingScopes(GroupingList value);
    internal Status get_RetrievalStatus();
    internal void set_RetrievalStatus(Status value);
    internal string get_ReportName();
    internal void set_ReportName(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal Report get_Report();
    internal void set_Report(Report value);
    internal string get_StringUri();
    internal void set_StringUri(string value);
    internal ICatalogItemContext get_ReportContext();
    internal void set_ReportContext(ICatalogItemContext value);
    internal ParameterInfoCollection get_ParametersFromCatalog();
    internal void set_ParametersFromCatalog(ParameterInfoCollection value);
    internal Uri get_Uri();
    internal SubreportExprHost get_SubReportExprHost();
    internal string get_SubReportScope();
    internal void set_SubReportScope(string value);
    internal bool get_IsMatrixCellScope();
    internal void set_IsMatrixCellScope(bool value);
    internal bool get_IsDetailScope();
    internal void set_IsDetailScope(bool value);
    internal SubReportList get_DetailScopeSubReports();
    internal void set_DetailScopeSubReports(SubReportList value);
    internal ScopeLookupTable get_DataSetUniqueNameMap();
    internal void set_DataSetUniqueNameMap(ScopeLookupTable value);
    internal bool get_SaveDataSetUniqueName();
    internal virtual bool Initialize(InitializationContext context);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.HasPageBreaks(bool atStart);
    internal void UpdateSubReportScopes(UserSortFilterContext context);
    internal void AddDataSetUniqueName(VariantList[] scopeValues, int subReportUniqueName);
    internal int GetDataSetUniqueName(VariantList[] scopeValues);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.SubreportCallbackAdapter : object {
    private OnDemandSubReportCallback m_subreportCallback;
    private OnDemandSubReportDataSourcesCallback m_subreportDataSourcesCallback;
    private ErrorContext m_errorContext;
    public SubreportCallbackAdapter(OnDemandSubReportCallback subreportCallback, ErrorContext errorContext);
    public SubreportCallbackAdapter(OnDemandSubReportDataSourcesCallback dataSourcesCallback);
    public void SubReportCallback(ICatalogItemContext reportContext, string subreportPath, ICatalogItemContext& subreportContext, String& description, GetReportChunk& getCompiledDefinitionCallback, ParameterInfoCollection& parameters);
    public void SubReportDataSourcesCallback(ICatalogItemContext reportContext, string subreportPath, ICatalogItemContext& subreportContext, GetReportChunk& getCompiledDefinitionCallback, DataSourceInfoCollection& dataSources);
    public bool NeedsUpgrade(ReportProcessingFlags processingFlags);
}
internal class Microsoft.ReportingServices.ReportProcessing.SubReportInstance : ReportItemInstance {
    private ReportInstance m_reportInstance;
    private int m_startPage;
    private int m_endPage;
    internal ReportInstance ReportInstance { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal SubReportInstance(ProcessingContext pc, SubReport reportItemDef, int index);
    internal ReportInstance get_ReportInstance();
    internal void set_ReportInstance(ReportInstance value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    internal static Declaration GetDeclaration();
    protected virtual object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.SubReportInstanceInfo : ReportItemInstanceInfo {
    private string m_noRows;
    internal string NoRows { get; internal set; }
    internal SubReportInstanceInfo(ProcessingContext pc, SubReport reportItemDef, SubReportInstance owner, int index);
    internal SubReportInstanceInfo(SubReport reportItemDef);
    internal string get_NoRows();
    internal void set_NoRows(string value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
[ArrayOfReferencesAttribute]
internal class Microsoft.ReportingServices.ReportProcessing.SubReportList : ArrayList {
    internal SubReport Item { get; }
    internal SubReportList(int capacity);
    internal SubReport get_Item(int index);
    internal SubReportList Clone();
}
internal class Microsoft.ReportingServices.ReportProcessing.Subtotal : IDOwner {
    private bool m_autoDerived;
    private ReportItemCollection m_reportItems;
    private Style m_styleClass;
    private PositionType m_position;
    private string m_dataElementName;
    private DataElementOutputTypes m_dataElementOutput;
    private bool m_firstInstance;
    private string m_renderingModelID;
    private bool m_computed;
    internal bool AutoDerived { get; internal set; }
    internal ReportItemCollection ReportItems { get; internal set; }
    internal ReportItem ReportItem { get; }
    internal Style StyleClass { get; internal set; }
    internal PositionType Position { get; internal set; }
    internal bool FirstInstance { get; internal set; }
    internal string RenderingModelID { get; internal set; }
    internal bool Computed { get; internal set; }
    internal string DataElementName { get; internal set; }
    internal DataElementOutputTypes DataElementOutput { get; internal set; }
    internal Subtotal(int id, int idForReportItems, bool autoDerived);
    internal bool get_AutoDerived();
    internal void set_AutoDerived(bool value);
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal ReportItem get_ReportItem();
    internal Style get_StyleClass();
    internal void set_StyleClass(Style value);
    internal PositionType get_Position();
    internal void set_Position(PositionType value);
    internal bool get_FirstInstance();
    internal void set_FirstInstance(bool value);
    internal string get_RenderingModelID();
    internal void set_RenderingModelID(string value);
    internal bool get_Computed();
    internal void set_Computed(bool value);
    internal string get_DataElementName();
    internal void set_DataElementName(string value);
    internal DataElementOutputTypes get_DataElementOutput();
    internal void set_DataElementOutput(DataElementOutputTypes value);
    internal void RegisterReportItems(InitializationContext context);
    internal void Initialize(InitializationContext context);
    internal void UnregisterReportItems(InitializationContext context);
    internal void RegisterReceiver(InitializationContext context);
    private void DataRendererInitialize(InitializationContext context);
    internal void SetExprHost(StyleExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.Sum : DataAggregate {
    private DataTypeCode m_expressionType;
    protected DataTypeCode m_currentTotalType;
    protected object m_currentTotal;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.SupportabilityRIFVisualizer : object {
    internal static void DumpTablixes(Report report);
    private static void DumpTablix(Tablix tablix, StreamWriter stream);
    private static void DumpTablixMembers(List`1<TablixColumn> tablixColumns, Queue`1<TablixMember> members, StreamWriter stream, int lastLevel, int index);
    private static void DumpTablixMembers(TablixRowList tablixRows, TablixMember member, StreamWriter stream, int lastLevel, Int32& index);
    private static void DumpTablixMember(TablixMember member, StreamWriter stream);
}
internal class Microsoft.ReportingServices.ReportProcessing.Table : DataRegion {
    private TableColumnList m_tableColumns;
    private TableRowList m_headerRows;
    private bool m_headerRepeatOnNewPage;
    private TableGroup m_tableGroups;
    private TableDetail m_tableDetail;
    private TableGroup m_detailGroup;
    private TableRowList m_footerRows;
    private bool m_footerRepeatOnNewPage;
    private bool m_propagatedPageBreakAtStart;
    private bool m_groupPageBreakAtStart;
    private bool m_propagatedPageBreakAtEnd;
    private bool m_groupPageBreakAtEnd;
    private bool m_fillPage;
    private bool m_useOWC;
    private bool m_owcNonSharedStyles;
    private RunningValueInfoList m_runningValues;
    private string m_detailDataElementName;
    private string m_detailDataCollectionName;
    private DataElementOutputTypes m_detailDataElementOutput;
    private bool m_fixedHeader;
    private TableExprHost m_exprHost;
    private int m_currentPage;
    private bool m_hasFixedColumnHeaders;
    private Boolean[] m_columnsStartHidden;
    internal ObjectType ObjectType { get; }
    internal TableColumnList TableColumns { get; internal set; }
    internal TableRowList HeaderRows { get; internal set; }
    internal bool HeaderRepeatOnNewPage { get; internal set; }
    internal TableGroup TableGroups { get; internal set; }
    internal TableDetail TableDetail { get; internal set; }
    internal TableGroup DetailGroup { get; internal set; }
    internal TableRowList FooterRows { get; internal set; }
    internal bool FooterRepeatOnNewPage { get; internal set; }
    internal bool PropagatedPageBreakAtStart { get; internal set; }
    internal bool GroupBreakAtStart { get; internal set; }
    internal bool PropagatedPageBreakAtEnd { get; internal set; }
    internal bool GroupBreakAtEnd { get; internal set; }
    internal bool FillPage { get; internal set; }
    internal bool UseOWC { get; internal set; }
    internal bool OWCNonSharedStyles { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal string DetailDataElementName { get; internal set; }
    internal string DetailDataCollectionName { get; internal set; }
    internal DataElementOutputTypes DetailDataElementOutput { get; internal set; }
    internal TableExprHost TableExprHost { get; }
    internal int CurrentPage { get; internal set; }
    protected DataRegionExprHost DataRegionExprHost { get; }
    internal bool FixedHeader { get; internal set; }
    internal bool HasFixedColumnHeaders { get; internal set; }
    internal double HeaderHeightValue { get; }
    internal double DetailHeightValue { get; }
    internal Boolean[] ColumnsStartHidden { get; internal set; }
    internal Table(ReportItem parent);
    internal Table(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal TableColumnList get_TableColumns();
    internal void set_TableColumns(TableColumnList value);
    internal TableRowList get_HeaderRows();
    internal void set_HeaderRows(TableRowList value);
    internal bool get_HeaderRepeatOnNewPage();
    internal void set_HeaderRepeatOnNewPage(bool value);
    internal TableGroup get_TableGroups();
    internal void set_TableGroups(TableGroup value);
    internal TableDetail get_TableDetail();
    internal void set_TableDetail(TableDetail value);
    internal TableGroup get_DetailGroup();
    internal void set_DetailGroup(TableGroup value);
    internal TableRowList get_FooterRows();
    internal void set_FooterRows(TableRowList value);
    internal bool get_FooterRepeatOnNewPage();
    internal void set_FooterRepeatOnNewPage(bool value);
    internal bool get_PropagatedPageBreakAtStart();
    internal void set_PropagatedPageBreakAtStart(bool value);
    internal bool get_GroupBreakAtStart();
    internal void set_GroupBreakAtStart(bool value);
    internal bool get_PropagatedPageBreakAtEnd();
    internal void set_PropagatedPageBreakAtEnd(bool value);
    internal bool get_GroupBreakAtEnd();
    internal void set_GroupBreakAtEnd(bool value);
    internal bool get_FillPage();
    internal void set_FillPage(bool value);
    internal bool get_UseOWC();
    internal void set_UseOWC(bool value);
    internal bool get_OWCNonSharedStyles();
    internal void set_OWCNonSharedStyles(bool value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal string get_DetailDataElementName();
    internal void set_DetailDataElementName(string value);
    internal string get_DetailDataCollectionName();
    internal void set_DetailDataCollectionName(string value);
    internal DataElementOutputTypes get_DetailDataElementOutput();
    internal void set_DetailDataElementOutput(DataElementOutputTypes value);
    internal TableExprHost get_TableExprHost();
    internal int get_CurrentPage();
    internal void set_CurrentPage(int value);
    protected virtual DataRegionExprHost get_DataRegionExprHost();
    internal bool get_FixedHeader();
    internal void set_FixedHeader(bool value);
    internal bool get_HasFixedColumnHeaders();
    internal void set_HasFixedColumnHeaders(bool value);
    internal double get_HeaderHeightValue();
    internal double get_DetailHeightValue();
    internal Boolean[] get_ColumnsStartHidden();
    internal void set_ColumnsStartHidden(Boolean[] value);
    internal virtual bool Initialize(InitializationContext context);
    private void InternalInitialize(InitializationContext context);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal virtual void RegisterReceiver(InitializationContext context);
    internal void RegisterHeaderAndFooter(InitializationContext context);
    internal void UnRegisterHeaderAndFooter(InitializationContext context);
    private void InitializeTableColumns(InitializationContext context, Double& tableWidth, Boolean[]& tableColumnVisibility);
    private void RegisterTableColumnsReceiver(InitializationContext context);
    private void InitializeHeaderAndFooter(int numberOfColumns, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    private void RegisterHeaderAndFooterReceiver(InitializationContext context);
    private void InitializeTableGroupsOrDetail(int numberOfColumns, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    private void RegisterTableGroupsOrDetailReceiver(InitializationContext context);
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal void CalculatePropagatedFlags();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.TableColumn : object {
    private string m_width;
    private double m_widthValue;
    private Visibility m_visibility;
    private bool m_fixedHeader;
    private ReportSize m_widthForRendering;
    internal string Width { get; internal set; }
    internal double WidthValue { get; internal set; }
    internal Visibility Visibility { get; internal set; }
    internal ReportSize WidthForRendering { get; internal set; }
    internal bool FixedHeader { get; internal set; }
    internal string get_Width();
    internal void set_Width(string value);
    internal double get_WidthValue();
    internal void set_WidthValue(double value);
    internal Visibility get_Visibility();
    internal void set_Visibility(Visibility value);
    internal ReportSize get_WidthForRendering();
    internal void set_WidthForRendering(ReportSize value);
    internal bool get_FixedHeader();
    internal void set_FixedHeader(bool value);
    internal void Initialize(InitializationContext context);
    internal void RegisterReceiver(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.TableColumnInstance : object {
    private int m_uniqueName;
    private bool m_startHidden;
    internal int UniqueName { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal TableColumnInstance(ProcessingContext pc, TableColumn tableColumnDef, Table tableDef);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.TableColumnList : ArrayList {
    internal TableColumn Item { get; }
    internal TableColumnList(int capacity);
    internal TableColumn get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.TableDetail : IDOwner {
    private TableRowList m_detailRows;
    private Sorting m_sorting;
    private Visibility m_visibility;
    private RunningValueInfoList m_runningValues;
    private bool m_hasExprHost;
    private bool m_simpleDetailRows;
    private TableGroupExprHost m_exprHost;
    private bool m_startHidden;
    internal TableRowList DetailRows { get; internal set; }
    internal Sorting Sorting { get; internal set; }
    internal Visibility Visibility { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal bool HasExprHost { get; internal set; }
    internal bool SimpleDetailRows { get; internal set; }
    internal TableGroupExprHost ExprHost { get; }
    internal bool StartHidden { get; internal set; }
    internal TableDetail(int id);
    internal TableRowList get_DetailRows();
    internal void set_DetailRows(TableRowList value);
    internal Sorting get_Sorting();
    internal void set_Sorting(Sorting value);
    internal Visibility get_Visibility();
    internal void set_Visibility(Visibility value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal bool get_HasExprHost();
    internal void set_HasExprHost(bool value);
    internal bool get_SimpleDetailRows();
    internal void set_SimpleDetailRows(bool value);
    internal TableGroupExprHost get_ExprHost();
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal void Initialize(int numberOfColumns, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    private void InitializeDetailRows(int numberOfColumns, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    internal void RegisterReceiver(InitializationContext context);
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    internal void SetExprHost(TableGroupExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.TableDetailInstance : InstanceInfoOwner {
    private int m_uniqueName;
    private TableRowInstance[] m_detailRowInstances;
    [ReferenceAttribute]
private TableDetail m_tableDetailDef;
    internal int UniqueName { get; internal set; }
    internal TableDetail TableDetailDef { get; internal set; }
    internal TableRowInstance[] DetailRowInstances { get; internal set; }
    internal TableDetailInstance(ProcessingContext pc, TableDetail tableDetailDef, Table tableDef);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal TableDetail get_TableDetailDef();
    internal void set_TableDetailDef(TableDetail value);
    internal TableRowInstance[] get_DetailRowInstances();
    internal void set_DetailRowInstances(TableRowInstance[] value);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal static Declaration GetDeclaration();
    internal TableDetailInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
}
internal class Microsoft.ReportingServices.ReportProcessing.TableDetailInstanceInfo : InstanceInfo {
    private bool m_startHidden;
    internal bool StartHidden { get; internal set; }
    internal TableDetailInstanceInfo(ProcessingContext pc, TableDetail tableDetailDef, TableDetailInstance owner, Table tableDef);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.TableDetailInstanceList : ArrayList {
    internal TableDetailInstance Item { get; }
    internal TableDetailInstanceList(int capacity);
    internal TableDetailInstance get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.TableGroup : ReportHierarchyNode {
    private TableRowList m_headerRows;
    private bool m_headerRepeatOnNewPage;
    private TableRowList m_footerRows;
    private bool m_footerRepeatOnNewPage;
    private Visibility m_visibility;
    private bool m_propagatedPageBreakAtStart;
    private bool m_propagatedPageBreakAtEnd;
    private RunningValueInfoList m_runningValues;
    private bool m_hasExprHost;
    private TableGroupExprHost m_exprHost;
    private bool m_startHidden;
    private string m_renderingModelID;
    private int m_startPage;
    private int m_endPage;
    internal TableGroup SubGroup { get; internal set; }
    internal TableRowList HeaderRows { get; internal set; }
    internal bool HeaderRepeatOnNewPage { get; internal set; }
    internal TableRowList FooterRows { get; internal set; }
    internal bool FooterRepeatOnNewPage { get; internal set; }
    internal Visibility Visibility { get; internal set; }
    internal bool PropagatedPageBreakAtStart { get; internal set; }
    internal bool PropagatedPageBreakAtEnd { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal string RenderingModelID { get; internal set; }
    internal bool HasExprHost { get; internal set; }
    internal TableGroupExprHost ExprHost { get; }
    internal int StartPage { get; internal set; }
    internal int EndPage { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal double HeaderHeightValue { get; }
    internal double FooterHeightValue { get; }
    internal TableGroup(int id, Table tableDef);
    internal TableGroup get_SubGroup();
    internal void set_SubGroup(TableGroup value);
    internal TableRowList get_HeaderRows();
    internal void set_HeaderRows(TableRowList value);
    internal bool get_HeaderRepeatOnNewPage();
    internal void set_HeaderRepeatOnNewPage(bool value);
    internal TableRowList get_FooterRows();
    internal void set_FooterRows(TableRowList value);
    internal bool get_FooterRepeatOnNewPage();
    internal void set_FooterRepeatOnNewPage(bool value);
    internal Visibility get_Visibility();
    internal void set_Visibility(Visibility value);
    internal bool get_PropagatedPageBreakAtStart();
    internal void set_PropagatedPageBreakAtStart(bool value);
    internal bool get_PropagatedPageBreakAtEnd();
    internal void set_PropagatedPageBreakAtEnd(bool value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal string get_RenderingModelID();
    internal void set_RenderingModelID(string value);
    internal bool get_HasExprHost();
    internal void set_HasExprHost(bool value);
    internal TableGroupExprHost get_ExprHost();
    internal int get_StartPage();
    internal void set_StartPage(int value);
    internal int get_EndPage();
    internal void set_EndPage(int value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal double get_HeaderHeightValue();
    internal double get_FooterHeightValue();
    internal void Initialize(int numberOfColumns, TableDetail tableDetail, TableGroup detailGroup, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    internal void RegisterReceiver(InitializationContext context, TableDetail tableDetail);
    private void RegisterHeaderAndFooter(InitializationContext context);
    private void UnRegisterHeaderAndFooter(InitializationContext context);
    private void InitializeHeaderAndFooter(int numberOfColumns, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    private void RegisterHeaderAndFooterReceiver(InitializationContext context);
    private void InitializeSubGroupsOrDetail(int numberOfColumns, TableDetail tableDetail, TableGroup detailGroup, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    private void RegisterSubGroupsOrDetailReceiver(InitializationContext context, TableDetail tableDetail);
    internal void CalculatePropagatedFlags(Boolean& groupPageBreakAtStart, Boolean& groupPageBreakAtEnd);
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    private sealed virtual override bool Microsoft.ReportingServices.ReportProcessing.IPageBreakItem.IgnorePageBreaks();
    internal void SetExprHost(TableGroupExprHost exprHost, ObjectModelImpl reportObjectModel);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.TableGroupInstance : InstanceInfoOwner {
    private int m_uniqueName;
    private TableRowInstance[] m_headerRowInstances;
    private TableRowInstance[] m_footerRowInstances;
    private TableGroupInstanceList m_subGroupInstances;
    private TableDetailInstanceList m_tableDetailInstances;
    private RenderingPagesRangesList m_renderingPages;
    [ReferenceAttribute]
private TableGroup m_tableGroupDef;
    private int m_numberOfChildrenOnThisPage;
    internal int UniqueName { get; internal set; }
    internal TableGroup TableGroupDef { get; internal set; }
    internal TableRowInstance[] HeaderRowInstances { get; internal set; }
    internal TableRowInstance[] FooterRowInstances { get; internal set; }
    internal TableGroupInstanceList SubGroupInstances { get; internal set; }
    internal TableDetailInstanceList TableDetailInstances { get; internal set; }
    internal RenderingPagesRangesList ChildrenStartAndEndPages { get; internal set; }
    internal int NumberOfChildrenOnThisPage { get; internal set; }
    internal TableGroupInstance(ProcessingContext pc, TableGroup tableGroupDef);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal TableGroup get_TableGroupDef();
    internal void set_TableGroupDef(TableGroup value);
    internal TableRowInstance[] get_HeaderRowInstances();
    internal void set_HeaderRowInstances(TableRowInstance[] value);
    internal TableRowInstance[] get_FooterRowInstances();
    internal void set_FooterRowInstances(TableRowInstance[] value);
    internal TableGroupInstanceList get_SubGroupInstances();
    internal void set_SubGroupInstances(TableGroupInstanceList value);
    internal TableDetailInstanceList get_TableDetailInstances();
    internal void set_TableDetailInstances(TableDetailInstanceList value);
    internal RenderingPagesRangesList get_ChildrenStartAndEndPages();
    internal void set_ChildrenStartAndEndPages(RenderingPagesRangesList value);
    internal int get_NumberOfChildrenOnThisPage();
    internal void set_NumberOfChildrenOnThisPage(int value);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal static Declaration GetDeclaration();
    internal TableGroupInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
}
internal class Microsoft.ReportingServices.ReportProcessing.TableGroupInstanceInfo : InstanceInfo {
    private bool m_startHidden;
    private string m_label;
    private DataValueInstanceList m_customPropertyInstances;
    internal bool StartHidden { get; internal set; }
    internal string Label { get; internal set; }
    internal DataValueInstanceList CustomPropertyInstances { get; internal set; }
    internal TableGroupInstanceInfo(ProcessingContext pc, TableGroup tableGroupDef, TableGroupInstance owner);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal string get_Label();
    internal void set_Label(string value);
    internal DataValueInstanceList get_CustomPropertyInstances();
    internal void set_CustomPropertyInstances(DataValueInstanceList value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.TableGroupInstanceList : ArrayList {
    internal TableGroupInstance Item { get; }
    internal TableGroupInstanceList(int capacity);
    internal TableGroupInstance get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.TableInstance : ReportItemInstance {
    private TableRowInstance[] m_headerRowInstances;
    private TableGroupInstanceList m_tableGroupInstances;
    private TableDetailInstanceList m_tableDetailInstances;
    private TableRowInstance[] m_footerRowInstances;
    private RenderingPagesRangesList m_renderingPages;
    private int m_currentPage;
    private int m_numberOfChildrenOnThisPage;
    private int m_startPage;
    private int m_endPage;
    internal TableRowInstance[] HeaderRowInstances { get; internal set; }
    internal TableGroupInstanceList TableGroupInstances { get; internal set; }
    internal TableDetailInstanceList TableDetailInstances { get; internal set; }
    internal TableRowInstance[] FooterRowInstances { get; internal set; }
    internal RenderingPagesRangesList ChildrenStartAndEndPages { get; internal set; }
    internal int CurrentPage { get; internal set; }
    internal int NumberOfChildrenOnThisPage { get; internal set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.StartPage { get; private set; }
    private int Microsoft.ReportingServices.ReportProcessing.IPageItem.EndPage { get; private set; }
    internal TableInstance(ProcessingContext pc, Table reportItemDef);
    internal TableInstance(ProcessingContext pc, Table reportItemDef, TableDetailInstanceList tableDetailInstances, RenderingPagesRangesList renderingPages);
    internal TableRowInstance[] get_HeaderRowInstances();
    internal void set_HeaderRowInstances(TableRowInstance[] value);
    internal TableGroupInstanceList get_TableGroupInstances();
    internal void set_TableGroupInstances(TableGroupInstanceList value);
    internal TableDetailInstanceList get_TableDetailInstances();
    internal void set_TableDetailInstances(TableDetailInstanceList value);
    internal TableRowInstance[] get_FooterRowInstances();
    internal void set_FooterRowInstances(TableRowInstance[] value);
    internal RenderingPagesRangesList get_ChildrenStartAndEndPages();
    internal void set_ChildrenStartAndEndPages(RenderingPagesRangesList value);
    internal int get_CurrentPage();
    internal void set_CurrentPage(int value);
    internal int get_NumberOfChildrenOnThisPage();
    internal void set_NumberOfChildrenOnThisPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_StartPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_StartPage(int value);
    private sealed virtual override int Microsoft.ReportingServices.ReportProcessing.IPageItem.get_EndPage();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IPageItem.set_EndPage(int value);
    private void ConstructorHelper(ProcessingContext pc, Table reportItemDef);
    protected virtual object SearchChildren(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
}
internal class Microsoft.ReportingServices.ReportProcessing.TableInstanceInfo : ReportItemInstanceInfo {
    private TableColumnInstance[] m_columnInstances;
    private string m_noRows;
    internal TableColumnInstance[] ColumnInstances { get; internal set; }
    internal string NoRows { get; internal set; }
    internal TableInstanceInfo(ProcessingContext pc, Table reportItemDef, TableInstance owner);
    internal TableInstanceInfo(Table reportItemDef);
    internal TableColumnInstance[] get_ColumnInstances();
    internal void set_ColumnInstances(TableColumnInstance[] value);
    internal string get_NoRows();
    internal void set_NoRows(string value);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.TableRow : IDOwner {
    private ReportItemCollection m_reportItems;
    private IntList m_IDs;
    private IntList m_colSpans;
    private string m_height;
    private double m_heightValue;
    private Visibility m_visibility;
    private bool m_startHidden;
    private string m_renderingModelID;
    private ReportSize m_heightForRendering;
    private String[] m_renderingModelIDs;
    internal ReportItemCollection ReportItems { get; internal set; }
    internal IntList IDs { get; internal set; }
    internal IntList ColSpans { get; internal set; }
    internal string Height { get; internal set; }
    internal double HeightValue { get; internal set; }
    internal Visibility Visibility { get; internal set; }
    internal string RenderingModelID { get; internal set; }
    internal ReportSize HeightForRendering { get; internal set; }
    internal String[] RenderingModelIDs { get; internal set; }
    internal bool StartHidden { get; internal set; }
    internal TableRow(int id, int idForReportItems);
    internal ReportItemCollection get_ReportItems();
    internal void set_ReportItems(ReportItemCollection value);
    internal IntList get_IDs();
    internal void set_IDs(IntList value);
    internal IntList get_ColSpans();
    internal void set_ColSpans(IntList value);
    internal string get_Height();
    internal void set_Height(string value);
    internal double get_HeightValue();
    internal void set_HeightValue(double value);
    internal Visibility get_Visibility();
    internal void set_Visibility(Visibility value);
    internal string get_RenderingModelID();
    internal void set_RenderingModelID(string value);
    internal ReportSize get_HeightForRendering();
    internal void set_HeightForRendering(ReportSize value);
    internal String[] get_RenderingModelIDs();
    internal void set_RenderingModelIDs(String[] value);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal bool Initialize(bool registerRunningValues, int numberOfColumns, InitializationContext context, Double& tableHeight, Boolean[] tableColumnVisibility);
    internal void RegisterReceiver(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.TableRowInstance : InstanceInfoOwner {
    private int m_uniqueName;
    private ReportItemColInstance m_tableRowReportItemColInstance;
    [ReferenceAttribute]
private TableRow m_tableRowDef;
    internal int UniqueName { get; internal set; }
    internal ReportItemColInstance TableRowReportItemColInstance { get; internal set; }
    internal TableRow TableRowDef { get; internal set; }
    internal TableRowInstance(ProcessingContext pc, TableRow rowDef, Table tableDef, IndexedExprHost visibilityHiddenExprHost);
    internal int get_UniqueName();
    internal void set_UniqueName(int value);
    internal ReportItemColInstance get_TableRowReportItemColInstance();
    internal void set_TableRowReportItemColInstance(ReportItemColInstance value);
    internal TableRow get_TableRowDef();
    internal void set_TableRowDef(TableRow value);
    private sealed virtual override object Microsoft.ReportingServices.ReportProcessing.ISearchByUniqueName.Find(int targetUniqueName, NonComputedUniqueNames& nonCompNames, RenderingChunkManager chunkManager);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.BeginProcessContainer(ProcessingContext context);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideContainer.EndProcessContainer(ProcessingContext context);
    internal static Declaration GetDeclaration();
    internal TableRowInstanceInfo GetInstanceInfo(RenderingChunkManager chunkManager);
}
internal class Microsoft.ReportingServices.ReportProcessing.TableRowInstanceInfo : InstanceInfo {
    private bool m_startHidden;
    internal bool StartHidden { get; internal set; }
    internal TableRowInstanceInfo(ProcessingContext pc, TableRow rowDef, TableRowInstance owner, Table tableDef, IndexedExprHost rowVisibilityHiddenExprHost);
    internal bool get_StartHidden();
    internal void set_StartHidden(bool value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.TableRowList : ArrayList {
    internal TableRow Item { get; }
    internal TableRowList(int capacity);
    internal TableRow get_Item(int index);
    internal void Register(InitializationContext context);
    internal void UnRegister(InitializationContext context);
    internal double GetHeightValue();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.Tablix : DataRegion {
    private int m_columnCount;
    private int m_rowCount;
    protected DataAggregateInfoList m_cellAggregates;
    protected ProcessingInnerGroupings m_processingInnerGrouping;
    protected RunningValueInfoList m_runningValues;
    protected DataAggregateInfoList m_cellPostSortAggregates;
    protected RuntimeTablixGroupRootObj m_currentOuterHeadingGroupRoot;
    protected int m_innermostRowFilterLevel;
    protected int m_innermostColumnFilterLevel;
    protected Int32[] m_outerGroupingIndexes;
    protected AggregateRowInfo[] m_outerGroupingAggregateRowInfo;
    protected AggregateRowInfo m_tablixAggregateRowInfo;
    protected bool m_processCellRunningValues;
    protected bool m_processOutermostSTCellRunningValues;
    internal int ColumnCount { get; internal set; }
    internal int RowCount { get; internal set; }
    internal DataAggregateInfoList CellAggregates { get; internal set; }
    internal DataAggregateInfoList CellPostSortAggregates { get; internal set; }
    internal ProcessingInnerGroupings ProcessingInnerGrouping { get; internal set; }
    internal RunningValueInfoList RunningValues { get; internal set; }
    internal TablixHeadingList TablixColumns { get; }
    internal TablixHeadingList TablixRows { get; }
    internal RunningValueInfoList TablixCellRunningValues { get; }
    internal RuntimeTablixGroupRootObj CurrentOuterHeadingGroupRoot { get; internal set; }
    internal int InnermostRowFilterLevel { get; internal set; }
    internal int InnermostColumnFilterLevel { get; internal set; }
    internal Int32[] OuterGroupingIndexes { get; }
    internal bool ProcessCellRunningValues { get; internal set; }
    internal bool ProcessOutermostSTCellRunningValues { get; internal set; }
    internal Tablix(ReportItem parent);
    internal Tablix(int id, ReportItem parent);
    internal int get_ColumnCount();
    internal void set_ColumnCount(int value);
    internal int get_RowCount();
    internal void set_RowCount(int value);
    internal DataAggregateInfoList get_CellAggregates();
    internal void set_CellAggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_CellPostSortAggregates();
    internal void set_CellPostSortAggregates(DataAggregateInfoList value);
    internal ProcessingInnerGroupings get_ProcessingInnerGrouping();
    internal void set_ProcessingInnerGrouping(ProcessingInnerGroupings value);
    internal RunningValueInfoList get_RunningValues();
    internal void set_RunningValues(RunningValueInfoList value);
    internal abstract virtual TablixHeadingList get_TablixColumns();
    internal abstract virtual TablixHeadingList get_TablixRows();
    internal abstract virtual RunningValueInfoList get_TablixCellRunningValues();
    internal RuntimeTablixGroupRootObj get_CurrentOuterHeadingGroupRoot();
    internal void set_CurrentOuterHeadingGroupRoot(RuntimeTablixGroupRootObj value);
    internal int get_InnermostRowFilterLevel();
    internal void set_InnermostRowFilterLevel(int value);
    internal int get_InnermostColumnFilterLevel();
    internal void set_InnermostColumnFilterLevel(int value);
    internal Int32[] get_OuterGroupingIndexes();
    internal bool get_ProcessCellRunningValues();
    internal void set_ProcessCellRunningValues(bool value);
    internal bool get_ProcessOutermostSTCellRunningValues();
    internal void set_ProcessOutermostSTCellRunningValues(bool value);
    internal static void CopyAggregates(DataAggregateInfoList srcAggregates, DataAggregateInfoList targetAggregates);
    private sealed virtual override RunningValueInfoList Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.GetRunningValueList();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IRunningValueHolder.ClearIfEmpty();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetAggregateLists();
    private sealed virtual override DataAggregateInfoList[] Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.GetPostSortAggregateLists();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IAggregateHolder.ClearIfEmpty();
    internal void SkipStaticHeading(TablixHeadingList& tablixHeading, TablixHeadingList& staticHeading);
    internal TablixHeadingList GetOuterHeading();
    internal abstract virtual TablixHeadingList SkipStatics(TablixHeadingList headings);
    internal abstract virtual int GetDynamicHeadingCount(bool outerGroupings);
    internal void GetHeadingDefState(TablixHeadingList& outermostColumns, TablixHeadingList& outermostRows, TablixHeadingList& staticColumns, TablixHeadingList& staticRows);
    internal int CreateOuterGroupingIndexList();
    internal abstract virtual Hashtable GetOuterScopeNames(int dynamicLevel);
    internal void SaveTablixAggregateRowInfo(ProcessingContext pc);
    internal void RestoreTablixAggregateRowInfo(ProcessingContext pc);
    internal void SaveOuterGroupingAggregateRowInfo(int headingLevel, ProcessingContext pc);
    internal void SetCellAggregateRowInfo(int headingLevel, ProcessingContext pc);
    internal void ResetOutergGroupingAggregateRowInfo();
    internal static Declaration GetDeclaration();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.TablixHeading : ReportHierarchyNode {
    protected bool m_subtotal;
    protected bool m_isColumn;
    protected int m_level;
    protected bool m_hasExprHost;
    protected int m_headingSpan;
    protected int m_numberOfStatics;
    protected DataAggregateInfoList m_aggregates;
    protected DataAggregateInfoList m_postSortAggregates;
    protected DataAggregateInfoList m_recursiveAggregates;
    protected AggregatesImpl m_outermostSTCellRVCol;
    protected AggregatesImpl m_cellRVCol;
    protected AggregatesImpl[] m_outermostSTCellScopedRVCollections;
    protected AggregatesImpl[] m_cellScopedRVCollections;
    protected Hashtable[] m_cellScopeNames;
    internal ReportHierarchyNode InnerHierarchy { get; internal set; }
    internal bool Subtotal { get; internal set; }
    internal bool IsColumn { get; internal set; }
    internal int Level { get; internal set; }
    internal bool HasExprHost { get; internal set; }
    internal int HeadingSpan { get; internal set; }
    internal DataAggregateInfoList Aggregates { get; internal set; }
    internal DataAggregateInfoList PostSortAggregates { get; internal set; }
    internal DataAggregateInfoList RecursiveAggregates { get; internal set; }
    internal AggregatesImpl OutermostSTCellRVCol { get; internal set; }
    internal AggregatesImpl CellRVCol { get; internal set; }
    internal AggregatesImpl[] OutermostSTCellScopedRVCollections { get; internal set; }
    internal AggregatesImpl[] CellScopedRVCollections { get; internal set; }
    internal Hashtable[] CellScopeNames { get; internal set; }
    internal TablixHeading(int id, DataRegion dataRegionDef);
    internal ReportHierarchyNode get_InnerHierarchy();
    internal void set_InnerHierarchy(ReportHierarchyNode value);
    internal bool get_Subtotal();
    internal void set_Subtotal(bool value);
    internal bool get_IsColumn();
    internal void set_IsColumn(bool value);
    internal int get_Level();
    internal void set_Level(int value);
    internal bool get_HasExprHost();
    internal void set_HasExprHost(bool value);
    internal int get_HeadingSpan();
    internal void set_HeadingSpan(int value);
    internal DataAggregateInfoList get_Aggregates();
    internal void set_Aggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_PostSortAggregates();
    internal void set_PostSortAggregates(DataAggregateInfoList value);
    internal DataAggregateInfoList get_RecursiveAggregates();
    internal void set_RecursiveAggregates(DataAggregateInfoList value);
    internal AggregatesImpl get_OutermostSTCellRVCol();
    internal void set_OutermostSTCellRVCol(AggregatesImpl value);
    internal AggregatesImpl get_CellRVCol();
    internal void set_CellRVCol(AggregatesImpl value);
    internal AggregatesImpl[] get_OutermostSTCellScopedRVCollections();
    internal void set_OutermostSTCellScopedRVCollections(AggregatesImpl[] value);
    internal AggregatesImpl[] get_CellScopedRVCollections();
    internal void set_CellScopedRVCollections(AggregatesImpl[] value);
    internal Hashtable[] get_CellScopeNames();
    internal void set_CellScopeNames(Hashtable[] value);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.ReportProcessing.TablixHeadingList : ArrayList {
    internal TablixHeading Item { get; }
    internal TablixHeadingList(int capacity);
    internal TablixHeading get_Item(int index);
    internal abstract virtual TablixHeadingList InnerHeadings();
}
internal class Microsoft.ReportingServices.ReportProcessing.TextBox : ReportItem {
    private ExpressionInfo m_value;
    private string m_formula;
    private bool m_canGrow;
    private bool m_canShrink;
    private string m_hideDuplicates;
    private Action m_action;
    private bool m_isToggle;
    private ExpressionInfo m_initialToggleState;
    private bool m_valueReferenced;
    private bool m_recursiveSender;
    private bool m_dataElementStyleAttribute;
    [ReferenceAttribute]
private GroupingList m_containingScopes;
    private EndUserSort m_userSort;
    private bool m_isMatrixCellScope;
    private TypeCode m_valueType;
    private bool m_isSubReportTopLevelScope;
    private bool m_overrideReportDataElementStyle;
    private string m_textboxScope;
    private bool m_isDetailScope;
    private bool m_valueTypeSet;
    private VariantResult m_oldResult;
    private bool m_hasOldResult;
    private string m_formattedValue;
    private TextBoxExprHost m_exprHost;
    private bool m_sharedFormatSettings;
    private bool m_calendarValidated;
    private Calendar m_calendar;
    private UInt32 m_languageInstanceId;
    private int m_tableColumnPosition;
    private List`1<string> m_fieldsUsedInValueExpression;
    internal ObjectType ObjectType { get; }
    internal ExpressionInfo Value { get; internal set; }
    internal bool CanGrow { get; internal set; }
    internal bool CanShrink { get; internal set; }
    internal string HideDuplicates { get; internal set; }
    internal Action Action { get; internal set; }
    internal bool IsToggle { get; internal set; }
    internal ExpressionInfo InitialToggleState { get; internal set; }
    internal bool RecursiveSender { get; internal set; }
    internal TypeCode ValueType { get; internal set; }
    internal VariantResult OldResult { get; internal set; }
    internal bool IsSubReportTopLevelScope { get; internal set; }
    internal bool HasOldResult { get; internal set; }
    internal bool SharedFormatSettings { get; internal set; }
    internal string FormattedValue { get; internal set; }
    internal string Formula { get; internal set; }
    internal bool ValueReferenced { get; internal set; }
    internal bool CalendarValidated { get; internal set; }
    internal Calendar Calendar { get; internal set; }
    internal UInt32 LanguageInstanceId { get; internal set; }
    internal TextBoxExprHost TextBoxExprHost { get; }
    internal bool DataElementStyleAttribute { get; internal set; }
    internal GroupingList ContainingScopes { get; internal set; }
    internal EndUserSort UserSort { get; internal set; }
    internal bool IsMatrixCellScope { get; internal set; }
    internal bool OverrideReportDataElementStyle { get; internal set; }
    internal DataElementOutputTypes DataElementOutputDefault { get; }
    internal string TextBoxScope { get; internal set; }
    internal bool IsDetailScope { get; internal set; }
    internal int TableColumnPosition { get; internal set; }
    private Action Microsoft.ReportingServices.ReportProcessing.IActionOwner.Action { get; }
    private List`1<string> Microsoft.ReportingServices.ReportProcessing.IActionOwner.FieldsUsedInValueExpression { get; private set; }
    internal TextBox(ReportItem parent);
    internal TextBox(int id, ReportItem parent);
    internal virtual ObjectType get_ObjectType();
    internal ExpressionInfo get_Value();
    internal void set_Value(ExpressionInfo value);
    internal bool get_CanGrow();
    internal void set_CanGrow(bool value);
    internal bool get_CanShrink();
    internal void set_CanShrink(bool value);
    internal string get_HideDuplicates();
    internal void set_HideDuplicates(string value);
    internal Action get_Action();
    internal void set_Action(Action value);
    internal bool get_IsToggle();
    internal void set_IsToggle(bool value);
    internal ExpressionInfo get_InitialToggleState();
    internal void set_InitialToggleState(ExpressionInfo value);
    internal bool get_RecursiveSender();
    internal void set_RecursiveSender(bool value);
    internal TypeCode get_ValueType();
    internal void set_ValueType(TypeCode value);
    internal VariantResult get_OldResult();
    internal void set_OldResult(VariantResult value);
    internal bool get_IsSubReportTopLevelScope();
    internal void set_IsSubReportTopLevelScope(bool value);
    internal bool get_HasOldResult();
    internal void set_HasOldResult(bool value);
    internal bool get_SharedFormatSettings();
    internal void set_SharedFormatSettings(bool value);
    internal string get_FormattedValue();
    internal void set_FormattedValue(string value);
    internal string get_Formula();
    internal void set_Formula(string value);
    internal bool get_ValueReferenced();
    internal void set_ValueReferenced(bool value);
    internal bool get_CalendarValidated();
    internal void set_CalendarValidated(bool value);
    internal Calendar get_Calendar();
    internal void set_Calendar(Calendar value);
    internal UInt32 get_LanguageInstanceId();
    internal void set_LanguageInstanceId(UInt32 value);
    internal TextBoxExprHost get_TextBoxExprHost();
    internal bool get_DataElementStyleAttribute();
    internal void set_DataElementStyleAttribute(bool value);
    internal GroupingList get_ContainingScopes();
    internal void set_ContainingScopes(GroupingList value);
    internal EndUserSort get_UserSort();
    internal void set_UserSort(EndUserSort value);
    internal bool get_IsMatrixCellScope();
    internal void set_IsMatrixCellScope(bool value);
    internal bool get_OverrideReportDataElementStyle();
    internal void set_OverrideReportDataElementStyle(bool value);
    internal virtual DataElementOutputTypes get_DataElementOutputDefault();
    internal string get_TextBoxScope();
    internal void set_TextBoxScope(string value);
    internal bool get_IsDetailScope();
    internal void set_IsDetailScope(bool value);
    internal int get_TableColumnPosition();
    internal void set_TableColumnPosition(int value);
    private sealed virtual override Action Microsoft.ReportingServices.ReportProcessing.IActionOwner.get_Action();
    private sealed virtual override List`1<string> Microsoft.ReportingServices.ReportProcessing.IActionOwner.get_FieldsUsedInValueExpression();
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IActionOwner.set_FieldsUsedInValueExpression(List`1<string> value);
    internal virtual bool Initialize(InitializationContext context);
    internal void InitializeSortExpression(InitializationContext context, bool needsExplicitAggregateScope);
    internal void AddToScopeSortFilterList();
    internal IntList GetPeerSortFilters(bool create);
    private InScopeSortFilterHashtable GetSortFiltersInScope(bool create, bool inDetail);
    protected virtual void DataRendererInitialize(InitializationContext context);
    internal void SetValueType(object textBoxValue);
    internal virtual void SetExprHost(ReportExprHost reportExprHost, ObjectModelImpl reportObjectModel);
    internal virtual void ProcessDrillthroughAction(ProcessingContext processingContext, NonComputedUniqueNames nonCompNames);
    internal bool IsSimpleTextBox();
    internal bool IsSimpleTextBox(IntermediateFormatVersion intermediateFormatVersion);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.TextBoxInstance : ReportItemInstance {
    internal InstanceInfo InstanceInfo { get; }
    internal TextBoxInstance(ProcessingContext pc, TextBox reportItemDef, int index);
    internal InstanceInfo get_InstanceInfo();
    internal SimpleTextBoxInstanceInfo UpgradeToSimpleTextbox(TextBoxInstanceInfo instanceInfo, Boolean& isSimple);
    internal static Declaration GetDeclaration();
    internal virtual ReportItemInstanceInfo ReadInstanceInfo(IntermediateFormatReader reader);
    internal SimpleTextBoxInstanceInfo GetSimpleInstanceInfo(RenderingChunkManager chunkManager, bool inPageSection);
}
internal class Microsoft.ReportingServices.ReportProcessing.TextBoxInstanceInfo : ReportItemInstanceInfo {
    private string m_formattedValue;
    private object m_originalValue;
    private bool m_duplicate;
    private ActionInstance m_action;
    private bool m_initialToggleState;
    internal string FormattedValue { get; internal set; }
    internal object OriginalValue { get; internal set; }
    internal bool Duplicate { get; internal set; }
    internal ActionInstance Action { get; internal set; }
    internal bool InitialToggleState { get; internal set; }
    internal TextBoxInstanceInfo(ProcessingContext pc, TextBox reportItemDef, TextBoxInstance owner, int index);
    internal TextBoxInstanceInfo(TextBox reportItemDef);
    internal string get_FormattedValue();
    internal void set_FormattedValue(string value);
    internal object get_OriginalValue();
    internal void set_OriginalValue(object value);
    internal bool get_Duplicate();
    internal void set_Duplicate(bool value);
    internal ActionInstance get_Action();
    internal void set_Action(ActionInstance value);
    internal bool get_InitialToggleState();
    internal void set_InitialToggleState(bool value);
    private sealed virtual override void Microsoft.ReportingServices.ReportProcessing.IShowHideSender.ProcessSender(ProcessingContext context, int uniqueName);
    internal static Declaration GetDeclaration();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.TextBoxList : ArrayList {
    internal TextBox Item { get; }
    internal TextBoxList(int capacity);
    internal TextBox get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.ThreeDProperties : object {
    private bool m_enabled;
    private bool m_perspectiveProjectionMode;
    private int m_rotation;
    private int m_inclination;
    private int m_perspective;
    private int m_heightRatio;
    private int m_depthRatio;
    private ShadingTypes m_shading;
    private int m_gapDepth;
    private int m_wallThickness;
    private bool m_drawingStyleCube;
    private bool m_clustered;
    internal bool Enabled { get; internal set; }
    internal bool PerspectiveProjectionMode { get; internal set; }
    internal int Rotation { get; internal set; }
    internal int Inclination { get; internal set; }
    internal int Perspective { get; internal set; }
    internal int HeightRatio { get; internal set; }
    internal int DepthRatio { get; internal set; }
    internal ShadingTypes Shading { get; internal set; }
    internal int GapDepth { get; internal set; }
    internal int WallThickness { get; internal set; }
    internal bool DrawingStyleCube { get; internal set; }
    internal bool Clustered { get; internal set; }
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal bool get_PerspectiveProjectionMode();
    internal void set_PerspectiveProjectionMode(bool value);
    internal int get_Rotation();
    internal void set_Rotation(int value);
    internal int get_Inclination();
    internal void set_Inclination(int value);
    internal int get_Perspective();
    internal void set_Perspective(int value);
    internal int get_HeightRatio();
    internal void set_HeightRatio(int value);
    internal int get_DepthRatio();
    internal void set_DepthRatio(int value);
    internal ShadingTypes get_Shading();
    internal void set_Shading(ShadingTypes value);
    internal int get_GapDepth();
    internal void set_GapDepth(int value);
    internal int get_WallThickness();
    internal void set_WallThickness(int value);
    internal bool get_DrawingStyleCube();
    internal void set_DrawingStyleCube(bool value);
    internal bool get_Clustered();
    internal void set_Clustered(bool value);
    internal void Initialize(InitializationContext context);
    internal static Declaration GetDeclaration();
}
internal class Microsoft.ReportingServices.ReportProcessing.ToggleItemInfo : object {
    internal ObjectType ObjectType;
    internal string ObjectName;
    internal Visibility Visibility;
    internal string GroupName;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ToggleItemInfoList : ArrayList {
    internal ToggleItemInfo Item { get; }
    internal ToggleItemInfo get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.TokensHashtable : HashtableInstanceInfo {
    internal object Item { get; internal set; }
    internal TokensHashtable(int capacity);
    internal object get_Item(int key);
    internal void set_Item(int key, object value);
    internal void Add(int tokenID, object tokenValue);
}
internal class Microsoft.ReportingServices.ReportProcessing.UnhandledReportRenderingException : RSException {
    private UnhandledReportRenderingException(SerializationInfo info, StreamingContext context);
    internal UnhandledReportRenderingException(ReportRenderingException innerException);
    internal UnhandledReportRenderingException(Exception innerException);
}
internal class Microsoft.ReportingServices.ReportProcessing.Upgrade.Upgrader : object {
    internal static void UpgradeToCurrent(Report report);
    internal static bool UpgradeToCurrent(ReportSnapshot reportSnapshot, RenderingChunkManager chunkManager, CreateReportChunk createChunkCallback);
    internal static void UpgradeDatasetIDs(Report report);
    internal static bool CreateBookmarkDrillthroughChunks(ReportSnapshot reportSnapshot, RenderingChunkManager chunkManager, UpgradeManager upgradeManager);
    internal static void UpgradeToPageSectionsChunk(ReportSnapshot reportSnapshot, ICatalogItemContext reportContext, RenderingChunkManager chunkManager, CreateReportChunk createChunkCallback, IGetResource getResourceCallback, RenderingContext renderingContext, IDataProtection dataProtection);
    private static void SetRowPages(Int32[]& rowPages, int start, int span, int pageNumber);
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.ReportProcessing.UserLocationFlags : Enum {
    public int value__;
    public static UserLocationFlags None;
    public static UserLocationFlags ReportBody;
    public static UserLocationFlags ReportPageSection;
    public static UserLocationFlags ReportQueries;
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.ReportProcessing.UserProfileState : Enum {
    public int value__;
    public static UserProfileState None;
    public static UserProfileState InQuery;
    public static UserProfileState InReport;
    public static UserProfileState Both;
    public static UserProfileState OnDemandExpressions;
}
internal class Microsoft.ReportingServices.ReportProcessing.UserSortFilterContext : object {
    private TextBox m_currentSortFilterEventSource;
    private RuntimeSortFilterEventInfoList m_runtimeSortFilterInfo;
    private IScope m_currentContainingScope;
    private GroupingList m_containingScopes;
    private int m_dataSetID;
    private SubReportList m_detailScopeSubReports;
    private Int32[] m_inProcessUserSortPhase;
    internal TextBox CurrentSortFilterEventSource { get; internal set; }
    internal RuntimeSortFilterEventInfoList RuntimeSortFilterInfo { get; internal set; }
    internal int DataSetID { get; internal set; }
    internal IScope CurrentContainingScope { get; internal set; }
    internal GroupingList ContainingScopes { get; internal set; }
    internal SubReportList DetailScopeSubReports { get; internal set; }
    internal UserSortFilterContext(UserSortFilterContext copy);
    internal UserSortFilterContext(UserSortFilterContext parentContext, SubReport subReport);
    internal TextBox get_CurrentSortFilterEventSource();
    internal void set_CurrentSortFilterEventSource(TextBox value);
    internal RuntimeSortFilterEventInfoList get_RuntimeSortFilterInfo();
    internal void set_RuntimeSortFilterInfo(RuntimeSortFilterEventInfoList value);
    internal int get_DataSetID();
    internal void set_DataSetID(int value);
    internal IScope get_CurrentContainingScope();
    internal void set_CurrentContainingScope(IScope value);
    internal GroupingList get_ContainingScopes();
    internal void set_ContainingScopes(GroupingList value);
    internal SubReportList get_DetailScopeSubReports();
    internal void set_DetailScopeSubReports(SubReportList value);
    internal bool PopulateRuntimeSortFilterEventInfo(ProcessingContext pc, DataSet myDataSet);
    private Boolean[] SetSortFilterInfo(Boolean[] source, int count, int index);
    internal bool IsSortFilterTarget(Boolean[] isSortFilterTarget, IScope outerScope, IHierarchyObj target, RuntimeUserSortTargetInfo& userSortTargetInfo);
    internal void RegisterSortFilterExpressionScope(IScope container, RuntimeDataRegionObj scopeObj, Boolean[] isSortFilterExpressionScope);
    internal bool ProcessUserSort(ProcessingContext processingContext);
    private void ProcessUserSort(ProcessingContext processingContext, Boolean& processed, Boolean& canStop, Boolean& processedAny);
    internal void ProcessUserSortForTarget(ObjectModelImpl reportObjectModel, ReportRuntime reportRuntime, IHierarchyObj target, DataRowList& dataRows, bool targetForNonDetailSort);
    internal void EnterProcessUserSortPhase(int index);
    internal void LeaveProcessUserSortPhase(int index);
    internal bool InProcessUserSortPhase(int index);
    internal void UpdateContextFromDataSet(UserSortFilterContext dataSetContext);
}
internal class Microsoft.ReportingServices.ReportProcessing.Validator : object {
    internal static int DecimalPrecision;
    internal static double NormalMin;
    internal static double NegativeMin;
    internal static double NormalMax;
    internal static double BorderWidthMin;
    internal static double BorderWidthMax;
    internal static double FontSizeMin;
    internal static double FontSizeMax;
    internal static double PaddingMin;
    internal static double PaddingMax;
    internal static double LineHeightMin;
    internal static double LineHeightMax;
    private static Regex m_colorRegex;
    private static Regex m_colorRegexTransparency;
    private static Validator();
    internal static bool ValidateColor(string color, String& newColor, bool allowTransparency);
    internal static bool ValidateColor(string color, Color& c);
    internal static bool ValidateColor(string color, Color& c, bool allowTransparency);
    internal static void ParseColor(string color, Color& c);
    internal static void ParseColor(string color, Color& c, bool allowTransparency);
    private static void ColorFromArgb(string color, Color& c, bool allowTransparency);
    private static bool ValidateReportColor(string color, String& newColor, Color& c, bool allowTransparency);
    internal static bool ValidateSizeString(string sizeString, RVUnit& sizeValue);
    internal static bool ValidateSizeUnitType(RVUnit sizeValue);
    internal static bool ValidateSizeIsPositive(RVUnit sizeValue);
    internal static bool ValidateSizeValue(double sizeInMM, double minValue, double maxValue);
    internal static void ParseSize(string size, Double& sizeInMM);
    internal static bool ValidateEmbeddedImageName(string embeddedImageName, EmbeddedImageHashtable embeddedImages);
    internal static bool ValidateSpecificLanguage(string language, CultureInfo& culture);
    internal static bool ValidateLanguage(string language, CultureInfo& culture);
    internal static bool CreateCalendar(string calendarName, Calendar& calendar);
    internal static bool CreateCalendar(Calendars calendarType, Calendar& calendar);
    internal static bool ValidateCalendar(CultureInfo langauge, Calendars calendarType);
    internal static bool ValidateCalendar(CultureInfo langauge, string calendarName);
    private static bool ValidateCalendar(CultureInfo langauge, bool isGregorianSubType, Calendar calendar);
    internal static bool ValidateNumeralVariant(CultureInfo language, int numVariant);
    internal static bool ValidateColumns(int columns);
    internal static bool ValidateNumeralVariant(int numeralVariant);
    internal static bool ValidateBorderStyle(string borderStyle, String& borderStyleForLine);
    internal static bool ValidateMimeType(string mimeType);
    internal static bool ValidateBackgroundGradientType(string gradientType);
    internal static bool ValidateBackgroundRepeat(string repeat);
    internal static bool ValidateFontStyle(string fontStyle);
    internal static bool ValidateFontWeight(string fontWeight);
    internal static bool ValidateTextDecoration(string textDecoration);
    internal static bool ValidateTextAlign(string textAlign);
    internal static bool ValidateVerticalAlign(string verticalAlign);
    internal static bool ValidateDirection(string direction);
    internal static bool ValidateWritingMode(string writingMode);
    internal static bool ValidateUnicodeBiDi(string unicodeBiDi);
    internal static bool ValidateCalendar(string calendar);
    internal static bool CompareWithInvariantCulture(string strOne, string strTwo);
}
internal class Microsoft.ReportingServices.ReportProcessing.ValidValue : object {
    private object m_value;
    private string m_label;
    private string m_stringValue;
    private string m_cachedAutogenLabel;
    private bool m_labelAutoGenerated;
    private static Declaration m_Declaration;
    public object Value { get; public set; }
    public string Label { get; public set; }
    public string LabelRaw { get; public set; }
    public string StringValue { get; }
    public ValidValue(string validValue, string label);
    public ValidValue(object validValue, string label);
    private static ValidValue();
    public object get_Value();
    public void set_Value(object value);
    public string get_Label();
    public void set_Label(string value);
    internal void EnsureLabelIsGenerated();
    public string get_LabelRaw();
    public void set_LabelRaw(string value);
    public string get_StringValue();
    internal static Declaration GetDeclaration();
    internal static Declaration GetNewDeclaration();
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Serialize(IntermediateFormatWriter writer);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.Deserialize(IntermediateFormatReader reader);
    private sealed virtual override void Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.ResolveReferences(Dictionary`2<ObjectType, List`1<MemberReference>> memberReferencesCollection, Dictionary`2<int, IReferenceable> referenceableItems);
    private sealed virtual override ObjectType Microsoft.ReportingServices.ReportIntermediateFormat.Persistence.IPersistable.GetObjectType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportProcessing.ValidValueList : ArrayList {
    public ValidValue Item { get; }
    public ValidValueList(int capacity);
    public ValidValue get_Item(int index);
}
internal class Microsoft.ReportingServices.ReportProcessing.Var : VarBase {
    internal virtual object Result();
}
internal abstract class Microsoft.ReportingServices.ReportProcessing.VarBase : DataAggregate {
    private DataTypeCode m_expressionType;
    protected UInt32 m_currentCount;
    protected DataTypeCode m_sumOfXType;
    protected object m_sumOfX;
    protected object m_sumOfXSquared;
    internal virtual void Init();
    internal virtual void Update(Object[] expressions, IErrorContext iErrorContext);
}
internal class Microsoft.ReportingServices.ReportProcessing.VariantList : ArrayList {
    internal VariantList(int capacity);
}
internal class Microsoft.ReportingServices.ReportProcessing.VariantResult : ValueType {
    internal bool ErrorOccurred;
    internal DataFieldStatus FieldStatus;
    internal string ExceptionMessage;
    internal object Value;
    internal VariantResult(bool errorOccurred, object v);
}
internal class Microsoft.ReportingServices.ReportProcessing.VarP : VarBase {
    internal virtual object Result();
}
internal class Microsoft.ReportingServices.ReportProcessing.VBExpressionParser : ExpressionParser {
    private static string RunningValue;
    private static string RowNumber;
    private static string Previous;
    private static string Star;
    private ReportRegularExpressions m_regexes;
    private int m_numberOfAggregates;
    private int m_numberOfRunningValues;
    private bool m_bodyRefersToReportItems;
    private bool m_pageSectionRefersToReportItems;
    private ExpressionContext m_context;
    internal bool BodyRefersToReportItems { get; }
    internal bool PageSectionRefersToReportItems { get; }
    internal int NumberOfAggregates { get; }
    internal int LastID { get; }
    internal VBExpressionParser(ErrorContext errorContext);
    internal virtual CodeDomProvider GetCodeCompiler();
    internal virtual string GetCompilerArguments();
    internal virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context);
    internal virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, DetectionFlags flag, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    internal virtual ExpressionInfo ParseExpression(string expression, ExpressionContext context, Boolean& userCollectionReferenced);
    internal virtual void ConvertField2ComplexExpr(ExpressionInfo& info);
    internal virtual bool get_BodyRefersToReportItems();
    internal virtual bool get_PageSectionRefersToReportItems();
    internal virtual int get_NumberOfAggregates();
    internal virtual int get_LastID();
    private ExpressionInfo Lex(string expression, ExpressionContext context, String& vbExpression);
    private string GetReferencedReportParameters(string expression);
    private bool DetectUserReference(string expression);
    private void VBLex(string expression, bool isParameter, GrammarFlags grammarFlags, ExpressionInfo expressionInfo);
    private void EnforceRestrictions(String& expression, bool isParameter, GrammarFlags grammarFlags);
    private void GetReferencedReportItemNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedFieldNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedParameterNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedDataSetNames(string expression, ExpressionInfo expressionInfo);
    private void GetReferencedDataSourceNames(string expression, ExpressionInfo expressionInfo);
    private bool Detected(string expression, Regex detectionRegex);
    private int NumberOfTimesDetected(string expression, Regex detectionRegex);
    private void RemoveLineTerminators(String& expression, Regex detectionRegex);
    private void GetRunningValue(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, RunningValueInfo& runningValue);
    private void GetPreviousAggregate(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, RunningValueInfo& runningValue);
    private void GetRowNumber(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, RunningValueInfo& rowNumber);
    private string GetScope(string expression, bool allowNothing);
    private bool IsRecursive(string flag);
    private void GetAggregate(int currentPos, string functionName, string expression, bool isParameter, GrammarFlags grammarFlags, Int32& newPos, DataAggregateInfo& aggregate);
    private ExpressionInfo GetParameterExpression(string parameterExpression, GrammarFlags grammarFlags);
    private void GetArguments(int currentPos, string expression, Int32& newPos, List`1& arguments);
    private string CreateAggregateID();
}
internal class Microsoft.ReportingServices.ReportProcessing.Visibility : object {
    private ExpressionInfo m_hidden;
    private string m_toggle;
    private bool m_recursiveReceiver;
    private ToggleItemInfo m_toggleItemInfo;
    internal ExpressionInfo Hidden { get; internal set; }
    internal string Toggle { get; internal set; }
    internal bool RecursiveReceiver { get; internal set; }
    internal ExpressionInfo get_Hidden();
    internal void set_Hidden(ExpressionInfo value);
    internal string get_Toggle();
    internal void set_Toggle(string value);
    internal bool get_RecursiveReceiver();
    internal void set_RecursiveReceiver(bool value);
    internal void Initialize(InitializationContext context, bool isContainer, bool tableRowCol);
    internal ToggleItemInfo RegisterReceiver(InitializationContext context, bool isContainer);
    internal void UnRegisterReceiver(InitializationContext context);
    internal static SharedHiddenState GetSharedHidden(Visibility visibility);
    internal static bool HasToggle(Visibility visibility);
    internal static Declaration GetDeclaration();
    internal static bool IsOnePassHierarchyVisible(ReportItem reportItem);
    private static bool IsOnePassVisible(ReportItem reportItem);
    internal static bool IsVisible(ReportItem reportItem);
    internal static bool IsVisible(ReportItem reportItem, ReportItemInstance reportItemInstance, ReportItemInstanceInfo reportItemInstanceInfo);
    internal static bool IsVisible(Visibility visibility, bool startHidden);
    internal static bool IsVisible(SharedHiddenState state, bool hidden, bool hasToggle);
    internal static bool IsTableCellVisible(Boolean[] tableColumnsVisible, int startIndex, int colSpan);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportPublishing.AllowNullKeyDictionary`2 : object {
    private Dictionary`2<TKey, TValue> m_hashtable;
    private TValue m_valueForNullKey;
    internal TValue Item { get; internal set; }
    internal void Add(TKey key, TValue value);
    internal bool TryGetValue(TKey key, TValue& value);
    internal TValue get_Item(TKey key);
    internal void set_Item(TKey key, TValue value);
}
internal class Microsoft.ReportingServices.ReportPublishing.AutomaticSubtotalContext : ValueType {
    private string m_objectName;
    private ObjectType m_objectType;
    private LocationFlags m_location;
    private DataRegion m_currentDataRegion;
    private DataRegion m_currentDataRegionClone;
    private string m_currentScope;
    private List`1<ICreateSubtotals> m_createSubtotals;
    private Holder`1<int> m_startIndex;
    private Holder`1<int> m_currentIndex;
    private List`1<CellList> m_cellLists;
    private List`1<TablixColumn> m_tablixColumns;
    private RowList m_rows;
    private Dictionary`2<string, string> m_scopeNameMap;
    private Dictionary`2<string, string> m_reportItemNameMap;
    private Dictionary`2<string, string> m_aggregateMap;
    private Dictionary`2<string, string> m_variableNameMap;
    private List`1<ExpressionInfo> m_expressionsWithReportItemReferences;
    private List`1<Visibility> m_visibilitiesWithToggleToUpdate;
    private List`1<ReportItem> m_reportItemsWithRepeatWithToUpdate;
    private List`1<EndUserSort> m_endUserSortWithTarget;
    private Dictionary`2<string, ISortFilterScope> m_reportScopes;
    private List`1<ReportItemCollection> m_reportItemCollections;
    private List`1<IAggregateHolder> m_aggregateHolders;
    private List`1<IRunningValueHolder> m_runningValueHolders;
    private NameValidator m_reportItemNameValidator;
    private NameValidator m_scopeNameValidator;
    private NameValidator m_variableNameValidator;
    private Report m_report;
    private bool m_dynamicWithStaticPeerEncountered;
    private int m_headerLevel;
    private int m_originalColumnCount;
    private int m_originalRowCount;
    private Boolean[] m_headerLevelHasStaticArray;
    private Holder`1<int> m_variableSequenceIdCounter;
    private Holder`1<int> m_textboxSequenceIdCounter;
    internal LocationFlags Location { get; internal set; }
    internal ObjectType ObjectType { get; internal set; }
    internal string ObjectName { get; internal set; }
    internal DataRegion CurrentDataRegion { get; internal set; }
    internal DataRegion CurrentDataRegionClone { get; internal set; }
    internal string CurrentScope { get; internal set; }
    internal Boolean[] HeaderLevelHasStaticArray { get; internal set; }
    internal List`1<ICreateSubtotals> CreateSubtotalsDefinitions { get; }
    internal int StartIndex { get; internal set; }
    internal int CurrentIndex { get; internal set; }
    internal List`1<CellList> CellLists { get; internal set; }
    internal List`1<TablixColumn> TablixColumns { get; internal set; }
    internal RowList Rows { get; internal set; }
    internal bool DynamicWithStaticPeerEncountered { get; internal set; }
    internal int HeaderLevel { get; internal set; }
    internal int OriginalColumnCount { get; internal set; }
    internal int OriginalRowCount { get; internal set; }
    internal AutomaticSubtotalContext(Report report, List`1<ICreateSubtotals> createSubtotals, NameValidator reportItemNameValidator, NameValidator scopeNameValidator, NameValidator variableNameValidator, Dictionary`2<string, ISortFilterScope> reportScopes, List`1<ReportItemCollection> reportItemCollections, List`1<IAggregateHolder> aggregateHolders, List`1<IRunningValueHolder> runningValueHolders, Holder`1<int> variableSequenceIdCounter, Holder`1<int> textboxSequenceIdCounter);
    internal LocationFlags get_Location();
    internal void set_Location(LocationFlags value);
    internal ObjectType get_ObjectType();
    internal void set_ObjectType(ObjectType value);
    internal string get_ObjectName();
    internal void set_ObjectName(string value);
    internal DataRegion get_CurrentDataRegion();
    internal void set_CurrentDataRegion(DataRegion value);
    internal DataRegion get_CurrentDataRegionClone();
    internal void set_CurrentDataRegionClone(DataRegion value);
    internal string get_CurrentScope();
    internal void set_CurrentScope(string value);
    internal Boolean[] get_HeaderLevelHasStaticArray();
    internal void set_HeaderLevelHasStaticArray(Boolean[] value);
    internal List`1<ICreateSubtotals> get_CreateSubtotalsDefinitions();
    internal int get_StartIndex();
    internal void set_StartIndex(int value);
    internal int get_CurrentIndex();
    internal void set_CurrentIndex(int value);
    internal List`1<CellList> get_CellLists();
    internal void set_CellLists(List`1<CellList> value);
    internal List`1<TablixColumn> get_TablixColumns();
    internal void set_TablixColumns(List`1<TablixColumn> value);
    internal RowList get_Rows();
    internal void set_Rows(RowList value);
    internal bool get_DynamicWithStaticPeerEncountered();
    internal void set_DynamicWithStaticPeerEncountered(bool value);
    internal int get_HeaderLevel();
    internal void set_HeaderLevel(int value);
    internal int get_OriginalColumnCount();
    internal void set_OriginalColumnCount(int value);
    internal int get_OriginalRowCount();
    internal void set_OriginalRowCount(int value);
    internal int GenerateVariableSequenceID();
    internal int GenerateTextboxSequenceID();
    internal bool HasStaticPeerWithHeader(TablixMember member, Int32& spanDifference);
    internal void AddReportItemCollection(ReportItemCollection collection);
    internal void AddAggregateHolder(IAggregateHolder aggregateHolder);
    internal void AddRunningValueHolder(IRunningValueHolder runningValueHolder);
    internal string CreateUniqueReportItemName(string oldName, bool isClone);
    internal string CreateUniqueReportItemName(string oldName, bool emptyRectangle, bool isClone);
    internal string GetNewReportItemName(string oldName);
    internal string CreateAndRegisterUniqueGroupName(string oldName, bool isClone);
    internal string CreateUniqueVariableName(string oldName, bool isClone);
    internal string GetNewVariableName(string oldVariableName);
    internal string GetNewScopeName(string oldScopeName);
    internal void RegisterScopeName(string name);
    internal void RegisterScopeName(string oldName, string newName);
    internal string CreateAggregateID(string oldID);
    internal string GetNewAggregateID(string oldID);
    internal int GenerateID();
    internal void AdjustReferences();
    internal void ResetListsAndMaps();
    internal void AddSortTarget(string scopeName, ISortFilterScope target);
    internal bool TryGetNewSortTarget(string scopeName, ISortFilterScope& target);
    internal void AddExpressionThatReferencesReportItems(ExpressionInfo expression);
    internal void AddVisibilityWithToggleToUpdate(Visibility visibility);
    internal void AddReportItemWithRepeatWithToUpdate(ReportItem reportItem);
    internal void AddEndUserSort(EndUserSort endUserSort);
}
internal class Microsoft.ReportingServices.ReportPublishing.ChartObjectUniqueNameValidator : ChartOrCustomUniqueNameValidator {
    internal void Clear();
    internal virtual bool Validate(Severity severity, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
    internal virtual bool Validate(Severity severity, string propertyName, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
}
internal abstract class Microsoft.ReportingServices.ReportPublishing.ChartOrCustomUniqueNameValidator : UniqueNameValidator {
    internal abstract virtual bool Validate(Severity severity, string propertyName, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.CLSNameValidator : NameValidator {
    internal static bool ValidateDataElementName(String& elementName, string defaultName, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.CLSUniqueNameValidator : NameValidator {
    private ProcessingErrorCode m_errorCodeNotCLS;
    private ProcessingErrorCode m_errorCodeNotUnique;
    private ProcessingErrorCode m_errorCodeNameLength;
    private ProcessingErrorCode m_errorCodeCaseInsensitiveDuplicate;
    internal CLSUniqueNameValidator(ProcessingErrorCode errorCodeNotCLS, ProcessingErrorCode errorCodeNotUnique, ProcessingErrorCode errorCodeNameLength);
    internal CLSUniqueNameValidator(ProcessingErrorCode errorCodeNotCLS, ProcessingErrorCode errorCodeNotUnique, ProcessingErrorCode errorCodeNameLength, ProcessingErrorCode errorCodeCaseInsensitiveDuplicate);
    internal bool Validate(ObjectType objectType, string name, ErrorContext errorContext);
    internal bool Validate(string name, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal bool Validate(string name, string dataField, string dataSetName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.Constants : object {
    internal static string ActionPropertyContext;
    internal static string ActionDrillthroughPropertyContext;
    internal static string VisibilityPropertyContext;
    internal static string AccentSensitivity;
    internal static string Action;
    internal static string Actions;
    internal static string ActionInfo;
    internal static string ActiveXControl;
    internal static string AllowBlank;
    internal static string AltReportItem;
    internal static string Ascending;
    internal static string Author;
    internal static string AutoRefresh;
    internal static string BackgroundColor;
    internal static string BackgroundGradientEndColor;
    internal static string BackgroundGradientType;
    internal static string BackgroundImage;
    internal static string BackgroundImageSource;
    internal static string BackgroundImageValue;
    internal static string BackgroundImageMIMEType;
    internal static string BackgroundRepeat;
    internal static string BackgroundImageStreamName;
    internal static string Body;
    internal static string Bookmark;
    internal static string BookmarkLink;
    internal static string BorderColor;
    internal static string BorderColorLeft;
    internal static string BorderColorRight;
    internal static string BorderColorTop;
    internal static string BorderColorBottom;
    internal static string BorderStyle;
    internal static string BorderStyleLeft;
    internal static string BorderStyleRight;
    internal static string BorderStyleTop;
    internal static string BorderStyleBottom;
    internal static string BorderWidth;
    internal static string BorderWidthLeft;
    internal static string BorderWidthRight;
    internal static string BorderWidthTop;
    internal static string BorderWidthBottom;
    internal static string Bottom;
    internal static string BottomMargin;
    internal static string TextEffect;
    internal static string ShadowColor;
    internal static string ShadowOffset;
    internal static string BackgroundHatchType;
    internal static string TransparentColor;
    internal static string CanGrow;
    internal static string Calendar;
    internal static string CanShrink;
    internal static string CaseSensitivity;
    internal static string Cell;
    internal static string Chart;
    internal static string ChartSubType;
    internal static string Checkbox;
    internal static string Class;
    internal static string Classes;
    internal static string ClassID;
    internal static string ClassName;
    internal static string Code;
    internal static string CodeBase;
    internal static string CodeModule;
    internal static string CodeModules;
    internal static string Collation;
    internal static string Color;
    internal static string ColSpan;
    internal static string ColumnGrouping;
    internal static string ColumnGroupings;
    internal static string Columns;
    internal static string ColumnSpacing;
    internal static string CommandText;
    internal static string CommandType;
    internal static string ConnectionProperties;
    internal static string ConnectString;
    internal static string Corner;
    internal static string Custom;
    internal static string CustomData;
    internal static string CustomProperties;
    internal static string CustomProperty;
    internal static string CustomReportItem;
    internal static string DataCell;
    internal static string DataColumnGroupings;
    internal static string DataField;
    internal static string DataGrouping;
    internal static string DataGroupings;
    internal static string DataProvider;
    internal static string DataRowGroupings;
    internal static string DataRow;
    internal static string DataRows;
    internal static string DataSets;
    internal static string DataSet;
    internal static string DataSetName;
    internal static string DataSetReference;
    internal static string DataSource;
    internal static string DataSourceReference;
    internal static string DataSources;
    internal static string DataSourceName;
    internal static string DataType;
    internal static string Default;
    internal static string DefaultValue;
    internal static string Description;
    internal static string Detail;
    internal static string Details;
    internal static string Direction;
    internal static string Drillthrough;
    internal static string DrillthroughParameters;
    internal static string DrillthroughParamVal;
    internal static string DrillthroughReportName;
    internal static string DynamicColumns;
    internal static string DynamicRows;
    internal static string EmbeddedImage;
    internal static string EmbeddedImages;
    internal static string ExecutionTime;
    internal static string Fields;
    internal static string Field;
    internal static string FieldExtendedProperty;
    internal static string FillPage;
    internal static string Filter;
    internal static string FilterExpression;
    internal static string Filters;
    internal static string FilterValue;
    internal static string FilterValues;
    internal static string FontStyle;
    internal static string FontFamily;
    internal static string FontSize;
    internal static string FontWeight;
    internal static string Footer;
    internal static string Format;
    internal static string Function;
    internal static string Group;
    internal static string GroupExpressions;
    internal static string GroupExpression;
    internal static string Grouping;
    internal static string GroupsBeforeRowHeaders;
    internal static string Header;
    internal static string Height;
    internal static string Hidden;
    internal static string HideDuplicates;
    internal static string Hyperlink;
    internal static string Image;
    internal static string ImageData;
    internal static string ImageURL;
    internal static string InitialState;
    internal static string InstanceName;
    internal static string IntegratedSecurity;
    internal static string InteractiveHeight;
    internal static string InteractiveWidth;
    internal static string Item;
    internal static string Items;
    internal static string KanatypeSensitivity;
    internal static string KeepTogether;
    internal static string DocumentMapLabel;
    internal static string Label;
    internal static string LabelField;
    internal static string Language;
    internal static string LayoutDirection;
    internal static string Left;
    internal static string LeftMargin;
    internal static string Line;
    internal static string LineHeight;
    internal static string LinkToChild;
    internal static string List;
    internal static string Matrix;
    internal static string MatrixCell;
    internal static string MatrixCells;
    internal static string MatrixColumn;
    internal static string MatrixColumns;
    internal static string MatrixRow;
    internal static string MatrixRows;
    internal static string MergeTransactions;
    internal static string MIMEType;
    internal static string MultiValue;
    internal static string Name;
    internal static string Namespace;
    internal static string NoRows;
    internal static string Nullable;
    internal static string NumeralLanguage;
    internal static string NumeralVariant;
    internal static string Omit;
    internal static string Operator;
    internal static string OWCChart;
    internal static string OWCColumn;
    internal static string OWCColumns;
    internal static string OWCDefinition;
    internal static string PaddingLeft;
    internal static string PaddingRight;
    internal static string PaddingTop;
    internal static string PaddingBottom;
    internal static string PageHeight;
    internal static string PageWidth;
    internal static string PageBreakAtStart;
    internal static string PageBreakAtEnd;
    internal static string PageHeader;
    internal static string PageFooter;
    internal static string PageNumber;
    internal static string Parameters;
    internal static string Parameter;
    internal static string ParameterOmit;
    internal static string ParameterValue;
    internal static string ParameterValues;
    internal static string Parent;
    internal static string Position;
    internal static string PrintOnFirstPage;
    internal static string PrintOnLastPage;
    internal static string Prompt;
    internal static string Query;
    internal static string QueryParameters;
    internal static string QueryParameter;
    internal static string Rectangle;
    internal static string RepeatOnNewPage;
    internal static string RepeatWith;
    internal static string Report;
    internal static string ReportItems;
    internal static string ReportItem;
    internal static string ReportFolder;
    internal static string ReportName;
    internal static string ReportParameters;
    internal static string ReportParameter;
    internal static string ReportServerUrl;
    internal static string Right;
    internal static string RightMargin;
    internal static string RowGrouping;
    internal static string RowGroupings;
    internal static string RTL;
    internal static string SharedStyles;
    internal static string Sizing;
    internal static string Sort;
    internal static string SortBy;
    internal static string SortExpression;
    internal static string SortExpressions;
    internal static string SortExpressionScope;
    internal static string Sorting;
    internal static string SortTarget;
    internal static string Source;
    internal static string Static;
    internal static string StaticColumn;
    internal static string StaticColumns;
    internal static string StaticRow;
    internal static string StaticRows;
    internal static string Style;
    internal static string Styles;
    internal static string Subreport;
    internal static string Subtotals;
    internal static string Subtotal;
    internal static string Table;
    internal static string TableCells;
    internal static string TableCell;
    internal static string TableColumns;
    internal static string TableColumn;
    internal static string TableDetails;
    internal static string TableGroups;
    internal static string TableGroup;
    internal static string TableRow;
    internal static string TableRows;
    internal static string Textbox;
    internal static string TextDecoration;
    internal static string TextAlign;
    internal static string Timeout;
    internal static string ToggleImage;
    internal static string ToggleItem;
    internal static string ToolTip;
    internal static string Top;
    internal static string TopMargin;
    internal static string Total;
    internal static string TotalPages;
    internal static string Transaction;
    internal static string UnicodeBiDi;
    internal static string UsedInQuery;
    internal static string UserID;
    internal static string UserSort;
    internal static string ValidValue;
    internal static string ValidValues;
    internal static string Value;
    internal static string Values;
    internal static string ValueField;
    internal static string VerticalAlign;
    internal static string Visibility;
    internal static string Width;
    internal static string WidthSensitivity;
    internal static string WritingMode;
    internal static string ZIndex;
    internal static string ReportScope;
    internal static string CellScope;
    internal static string DataTransform;
    internal static string DataSchema;
    internal static string DataElementName;
    internal static string DataElementStyle;
    internal static string Attribute;
    internal static string DataElementOutput;
    internal static string DataCollectionName;
    internal static string DataInstanceName;
    internal static string DataInstanceElementOutput;
    internal static string CellDataElementName;
    internal static string CellDataElementOutput;
    internal static string ChartElementOutput;
    internal static string Collection;
    internal static string DetailDataElementName;
    internal static string DetailDataCollectionName;
    internal static string DetailDataElementOutput;
    internal static string Type;
    internal static string Subtype;
    internal static string SeriesGroupings;
    internal static string SeriesGrouping;
    internal static string CategoryGroupings;
    internal static string CategoryGrouping;
    internal static string HeadingLabel;
    internal static string ChartDataPoints;
    internal static string ChartDataPoint;
    internal static string ChartDataLabel;
    internal static string DataValue;
    internal static string ChartDataPointValues;
    internal static string X;
    internal static string Y;
    internal static string ChartDataPointValueSize;
    internal static string High;
    internal static string Low;
    internal static string Start;
    internal static string End;
    internal static string Mean;
    internal static string Median;
    internal static string ChartCategoryAxis;
    internal static string ChartValueAxis;
    internal static string FilterAxis;
    internal static string MultiChart;
    internal static string PointWidth;
    internal static string Palette;
    internal static string PaletteHatchBehavior;
    internal static string ChartThreeDProperties;
    internal static string DynamicSeries;
    internal static string StaticSeries;
    internal static string DynamicCategories;
    internal static string StaticCategories;
    internal static string StaticMember;
    internal static string Caption;
    internal static string ChartAxis;
    internal static string DataLabel;
    internal static string PlotType;
    internal static string ShowEquation;
    internal static string ShowRSquared;
    internal static string Crossbeam;
    internal static string Percent;
    internal static string Fixed;
    internal static string PlusMinus;
    internal static string Minus;
    internal static string Layout;
    internal static string MaxCount;
    internal static string SyncScale;
    internal static string Horizontal;
    internal static string Vertical;
    internal static string ProjectionMode;
    internal static string Rotation;
    internal static string Inclination;
    internal static string Perspective;
    internal static string DepthRatio;
    internal static string Shading;
    internal static string GapDepth;
    internal static string WallThickness;
    internal static string Origin;
    internal static string ChartMajorGridLines;
    internal static string ChartMinorGridLines;
    internal static string Visible;
    internal static string Margin;
    internal static string Interval;
    internal static string IntervalType;
    internal static string IntervalOffset;
    internal static string IntervalOffsetType;
    internal static string ChartMajorTickMarks;
    internal static string ChartMinorTickMarks;
    internal static string MarksAlwaysAtPlotEdge;
    internal static string Reverse;
    internal static string Location;
    internal static string Interlaced;
    internal static string InterlacedColor;
    internal static string LogScale;
    internal static string LogBase;
    internal static string HideLabels;
    internal static string Angle;
    internal static string Arrows;
    internal static string AllowLabelRotation;
    internal static string IncludeZero;
    internal static string LabelsAutoFitDisabled;
    internal static string MinFontSize;
    internal static string MaxFontSize;
    internal static string OffsetLabels;
    internal static string HideEndLabels;
    internal static string ChartAxisScaleBreak;
    internal static string Minimum;
    internal static string Maximum;
    internal static string SplitAxis;
    internal static string CrossAt;
    internal static string SplitStart;
    internal static string SplitEnd;
    internal static string Enabled;
    internal static string Clustered;
    internal static string Size;
    internal static string TitleCaption;
    internal static string Scalar;
    internal static string ChartData;
    internal static string ChartAreas;
    internal static string ChartArea;
    internal static string ChartSeries;
    internal static string ChartEmptyPoints;
    internal static string LegendName;
    internal static string LegendText;
    internal static string ChartAreaName;
    internal static string ValueAxisName;
    internal static string CategoryAxisName;
    internal static string ChartTitles;
    internal static string ChartTitle;
    internal static string ChartAxisTitle;
    internal static string ChartLegendTitle;
    internal static string ChartLegends;
    internal static string ChartLegend;
    internal static string ChartBorderSkin;
    internal static string ChartBorderSkinType;
    internal static string ColumnType;
    internal static string MinimumWidth;
    internal static string MaximumWidth;
    internal static string SeriesSymbolWidth;
    internal static string SeriesSymbolHeight;
    internal static string CellType;
    internal static string Text;
    internal static string CellSpan;
    internal static string ImageWidth;
    internal static string ImageHeight;
    internal static string SymbolHeight;
    internal static string SymbolWidth;
    internal static string Alignment;
    internal static string Up;
    internal static string Down;
    internal static string UpLeft;
    internal static string UpRight;
    internal static string DownLeft;
    internal static string DownRight;
    internal static string ChartMarker;
    internal static string ChartItemInLegend;
    internal static string Length;
    internal static string BreakLineType;
    internal static string CollapsibleSpaceThreshold;
    internal static string MaxNumberOfBreaks;
    internal static string Spacing;
    internal static string ChartCustomPaletteColors;
    internal static string ChartCustomPaletteColor;
    internal static string ChartCodeParameters;
    internal static string ChartCodeParameter;
    internal static string ChartNoDataMessage;
    internal static string ChartLegendColumns;
    internal static string ChartLegendColumn;
    internal static string ChartLegendColumnHeader;
    internal static string ChartLegendCustomItems;
    internal static string ChartLegendCustomItem;
    internal static string Separator;
    internal static string SeparatorColor;
    internal static string ChartLegendCustomItemCells;
    internal static string ChartLegendCustomItemCell;
    internal static string ChartStripLines;
    internal static string ChartStripLine;
    internal static string Title;
    internal static string TitleAngle;
    internal static string StripWidth;
    internal static string StripWidthType;
    internal static string ChartDerivedSeriesCollection;
    internal static string ChartDerivedSeries;
    internal static string SourceChartSeriesName;
    internal static string DerivedSeriesFormula;
    internal static string ChartFormulaParameters;
    internal static string ChartFormulaParameter;
    internal static string ChartSmartLabel;
    internal static string AllowOutSidePlotArea;
    internal static string CalloutBackColor;
    internal static string CalloutLineAnchor;
    internal static string CalloutLineColor;
    internal static string CalloutLineStyle;
    internal static string CalloutLineWidth;
    internal static string CalloutStyle;
    internal static string MarkerOverlapping;
    internal static string MaxMovingDistance;
    internal static string MinMovingDistance;
    internal static string ChartNoMoveDirections;
    internal static string Disabled;
    internal static string ChartElementPosition;
    internal static string ChartInnerPlotPosition;
    internal static string DockToChartArea;
    internal static string DockOffset;
    internal static string TitleSeparator;
    internal static string PreventFontShrink;
    internal static string PreventFontGrow;
    internal static string PreventLabelOffset;
    internal static string PreventWordWrap;
    internal static string VariableAutoInterval;
    internal static string LabelInterval;
    internal static string LabelIntervalType;
    internal static string LabelIntervalOffset;
    internal static string LabelIntervalOffsetType;
    internal static string ShowOverlapped;
    internal static string ChartAlignType;
    internal static string AlignWithChartArea;
    internal static string HideInLegend;
    internal static string AxisLabel;
    internal static string UseValueAsLabel;
    internal static string FixedHeader;
    internal static string URLProtocols;
    internal static string ErrorOverflowException;
    internal static string ErrorUnsupportedDatatype;
    internal static string GenericError;
    internal static string PageBreak;
    internal static string BreakLocation;
    internal static string Tablix;
    internal static string TablixCorner;
    internal static string TablixCornerRow;
    internal static string TablixCornerRows;
    internal static string TablixCornerCell;
    internal static string CellContents;
    internal static string TablixBody;
    internal static string TablixColumnHierarchy;
    internal static string TablixRowHierarchy;
    internal static string TablixMember;
    internal static string TablixMembers;
    internal static string TablixHeader;
    internal static string ReGroupExpressions;
    internal static string Variables;
    internal static string Variable;
    internal static string DeferVariableEvaluation;
    internal static string TablixColumn;
    internal static string TablixColumns;
    internal static string TablixRow;
    internal static string TablixRows;
    internal static string TablixCell;
    internal static string TablixCells;
    internal static string DynamicHeight;
    internal static string DynamicWidth;
    internal static string HideIfNoRows;
    internal static string InterpretSubtotalsAsDetails;
    internal static string FixedData;
    internal static string RowSpan;
    internal static string KeepWithGroup;
    internal static string RepeatColumnHeaders;
    internal static string RepeatRowHeaders;
    internal static string FixedColumnHeaders;
    internal static string FixedRowHeaders;
    internal static string NoRowsMessage;
    internal static string Page;
    internal static string ConsumeContainerWhitespace;
    internal static string ChartValueAxes;
    internal static string ChartCategoryAxes;
    internal static string ChartCategoryHierarchy;
    internal static string ChartSeriesHierarchy;
    internal static string ChartMembers;
    internal static string ChartMember;
    internal static string ChartSeriesCollection;
    internal static string OmitBorderOnPageBreak;
    internal static string Border;
    internal static string TopBorder;
    internal static string BottomBorder;
    internal static string LeftBorder;
    internal static string RightBorder;
    internal static string DataMember;
    internal static string DataMembers;
    internal static string DataColumnHierarchy;
    internal static string DataRowHierarchy;
    internal static string StreamName;
    internal static string True;
    internal static string False;
    internal static string None;
    internal static string Before;
    internal static string After;
    internal static string AxesView;
    internal static string Cursor;
    internal static string InnerPlotPosition;
    internal static string ChartAlignTypePosition;
    internal static string EquallySizedAxesFont;
    internal static string AlignOrientation;
    internal static string ChartTitleSeparator;
    internal static string ChartLegendSeparator;
    internal static string DockOutsideChartArea;
    internal static string AutoFitTextDisabled;
    internal static string HeaderSeparator;
    internal static string HeaderSeparatorColor;
    internal static string ColumnSeparator;
    internal static string ColumnSeparatorColor;
    internal static string InterlacedRows;
    internal static string InterlacedRowsColor;
    internal static string EquallySpacedItems;
    internal static string Reversed;
    internal static string MaxAutoSize;
    internal static string TextWrapThreshold;
    internal static string TextOrientation;
    internal static string Paragraphs;
    internal static string Paragraph;
    internal static string TextRuns;
    internal static string TextRun;
    internal static string MarkupType;
    internal static string LeftIndent;
    internal static string RightIndent;
    internal static string HangingIndent;
    internal static string SpaceBefore;
    internal static string SpaceAfter;
    internal static string ListStyle;
    internal static string ListLevel;
    internal static string Docking;
    internal static string DockingOffset;
    internal static string GaugePanel;
    internal static string GaugeMember;
    internal static string OffsetX;
    internal static string OffsetY;
    internal static string HueColor;
    internal static string Transparency;
    internal static string ClipImage;
    internal static string FrameStyle;
    internal static string FrameShape;
    internal static string FrameWidth;
    internal static string GlassEffect;
    internal static string FrameBackground;
    internal static string FrameImage;
    internal static string ClipContent;
    internal static string TopImage;
    internal static string AspectRatio;
    internal static string Formula;
    internal static string MinPercent;
    internal static string MaxPercent;
    internal static string AddConstant;
    internal static string LinearGauges;
    internal static string RadialGauges;
    internal static string NumericIndicators;
    internal static string StateIndicators;
    internal static string GaugeImages;
    internal static string GaugeLabels;
    internal static string AntiAliasing;
    internal static string AutoLayout;
    internal static string BackFrame;
    internal static string ShadowIntensity;
    internal static string TextAntiAliasingQuality;
    internal static string ParentItem;
    internal static string GaugeInputValue;
    internal static string BarStart;
    internal static string PointerImage;
    internal static string MarkerLength;
    internal static string MarkerStyle;
    internal static string Placement;
    internal static string SnappingEnabled;
    internal static string SnappingInterval;
    internal static string ScaleRanges;
    internal static string CustomLabels;
    internal static string Logarithmic;
    internal static string LogarithmicBase;
    internal static string MaximumValue;
    internal static string MinimumValue;
    internal static string Multiplier;
    internal static string GaugeMajorTickMarks;
    internal static string GaugeMinorTickMarks;
    internal static string MaximumPin;
    internal static string MinimumPin;
    internal static string ScaleLabels;
    internal static string TickMarksOnTop;
    internal static string GaugeScales;
    internal static string Orientation;
    internal static string Thermometer;
    internal static string StartMargin;
    internal static string EndMargin;
    internal static string DistanceFromScale;
    internal static string RotateLabel;
    internal static string CapImage;
    internal static string OnTop;
    internal static string Reflection;
    internal static string CapStyle;
    internal static string PivotX;
    internal static string PivotY;
    internal static string PointerCap;
    internal static string NeedleStyle;
    internal static string GaugePointers;
    internal static string Radius;
    internal static string StartAngle;
    internal static string SweepAngle;
    internal static string AllowUpsideDown;
    internal static string FontAngle;
    internal static string RotateLabels;
    internal static string ShowEndLabels;
    internal static string UseFontPercent;
    internal static string Enable;
    internal static string PinLabel;
    internal static string StartValue;
    internal static string EndValue;
    internal static string StartWidth;
    internal static string EndWidth;
    internal static string InRangeBarPointerColor;
    internal static string InRangeLabelColor;
    internal static string InRangeTickMarksColor;
    internal static string BulbOffset;
    internal static string BulbSize;
    internal static string ThermometerStyle;
    internal static string EnableGradient;
    internal static string GradientDensity;
    internal static string TickMarkImage;
    internal static string Shape;
    internal static string ResizeMode;
    internal static string TextShadowOffset;
    internal static string CustomLabel;
    internal static string TickMarkStyle;
    internal static string StateImage;
    internal static string RadialGauge;
    internal static string LinearGauge;
    internal static string GaugeImage;
    internal static string GaugeLabel;
    internal static string RadialPointer;
    internal static string LinearPointer;
    internal static string RadialScale;
    internal static string LinearScale;
    internal static string GaugeTickMarks;
    internal static string ScalePin;
    internal static string NumericIndicator;
    internal static string ScaleRange;
    internal static string StateIndicator;
    internal static string UpgradedYukonChart;
    internal static string XSINamespace;
    internal static string XsdResourceID;
}
internal class Microsoft.ReportingServices.ReportPublishing.Converter : object {
    internal static double Inches455;
    internal static double Pt1;
    internal static double Pc1;
    internal static double Pt200;
    internal static double PtPoint25;
    internal static double Pt20;
    internal static double Pt1000;
    internal static string FullDoubleFormatCode;
    internal static string ConvertSize(double size);
    internal static string ConvertSizeFromMM(double sizeValue, RVUnitType unitType);
    internal static double ConvertToMM(RVUnit unit);
}
internal class Microsoft.ReportingServices.ReportPublishing.CustomPropertyUniqueNameValidator : ChartOrCustomUniqueNameValidator {
    internal virtual bool Validate(Severity severity, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
    internal virtual bool Validate(Severity severity, string propertyName, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.DataSetInfo : object {
    private List`1<string> m_parameterNames;
    private bool m_isComplex;
    private int m_dataSetDefIndex;
    private int m_dataSourceIndex;
    private int m_dataSetIndex;
    private int m_calculatedFieldIndex;
    internal int DataSourceIndex { get; internal set; }
    internal int DataSetIndex { get; internal set; }
    internal int DataSetDefIndex { get; }
    internal bool IsComplex { get; }
    internal List`1<string> ParameterNames { get; }
    internal int CalculatedFieldIndex { get; internal set; }
    internal DataSetInfo(int index, bool isComplex, List`1<string> parameterNames);
    internal int get_DataSourceIndex();
    internal void set_DataSourceIndex(int value);
    internal int get_DataSetIndex();
    internal void set_DataSetIndex(int value);
    internal int get_DataSetDefIndex();
    internal bool get_IsComplex();
    internal List`1<string> get_ParameterNames();
    internal int get_CalculatedFieldIndex();
    internal void set_CalculatedFieldIndex(int value);
    internal void MergeFlagsFromDataSource(bool isComplex, List`1<string> datasourceParameterNames);
}
internal class Microsoft.ReportingServices.ReportPublishing.DataSetReference : object {
    private string m_dataSet;
    private string m_valueAlias;
    private string m_labelAlias;
    internal string DataSet { get; }
    internal string ValueAlias { get; }
    internal string LabelAlias { get; }
    internal DataSetReference(string dataSet, string valueAlias, string labelAlias);
    internal string get_DataSet();
    internal string get_ValueAlias();
    internal string get_LabelAlias();
}
internal class Microsoft.ReportingServices.ReportPublishing.DataSetValidator : object {
    internal static UInt32 LOCALE_SYSTEM_DEFAULT;
    private static DataSetValidator();
    internal static bool ValidateCollation(string collation, UInt32& lcid);
    internal static UInt32 LCIDfromRDLCollation(string collation);
    internal static UInt32 GetSQLSortCompareMask(bool caseSensitivity, bool accentSensitivity, bool kanatypeSensitivity, bool widthSensitivity);
    internal static void GetCompareFlagsfromAutoDetectedCollation(string autoCollation, Boolean& caseSensitivity, Boolean& accentSensitivity, Boolean& kanatypeSensitivity, Boolean& widthSensitivity);
}
internal class Microsoft.ReportingServices.ReportPublishing.DataSourceNameValidator : NameValidator {
    internal bool Validate(ObjectType objectType, string objectName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.DynamicParameter : object {
    private DataSetReference m_validValueDataSet;
    private DataSetReference m_defaultDataSet;
    private int m_index;
    private bool m_isComplex;
    internal DataSetReference ValidValueDataSet { get; }
    internal DataSetReference DefaultDataSet { get; }
    internal int Index { get; }
    internal bool IsComplex { get; }
    internal DynamicParameter(DataSetReference validValueDataSet, DataSetReference defaultDataSet, int index, bool isComplex);
    internal DataSetReference get_ValidValueDataSet();
    internal DataSetReference get_DefaultDataSet();
    internal int get_Index();
    internal bool get_IsComplex();
}
internal class Microsoft.ReportingServices.ReportPublishing.GaugePanelObjectUniqueNameValidator : ChartOrCustomUniqueNameValidator {
    internal void Clear();
    internal virtual bool Validate(Severity severity, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
    internal virtual bool Validate(Severity severity, string propertyName, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.Holder`1 : object {
    private T m_t;
    internal T Value { get; internal set; }
    internal T get_Value();
    internal void set_Value(T value);
}
[FlagsAttribute]
internal enum Microsoft.ReportingServices.ReportPublishing.LocationFlags : Enum {
    public int value__;
    public static LocationFlags None;
    public static LocationFlags InDataSet;
    public static LocationFlags InDataRegion;
    public static LocationFlags InGrouping;
    public static LocationFlags InDetail;
    public static LocationFlags InDynamicTablixCell;
    public static LocationFlags InPageSection;
    public static LocationFlags InTablixSubtotal;
    public static LocationFlags InTablixCellTopLevelItem;
    public static LocationFlags InTablix;
    public static LocationFlags InTablixGroupHeader;
    public static LocationFlags InStaticGrouping;
    public static LocationFlags InNonToggleableHiddenStaticTablixMember;
    public static LocationFlags InParameter;
    public static LocationFlags InTablixCell;
    public static LocationFlags InTablixRowHierarchy;
    public static LocationFlags InTablixColumnHierarchy;
}
internal abstract class Microsoft.ReportingServices.ReportPublishing.NameValidator : object {
    protected static int MAX_NAME_LENGTH;
    protected static string MAX_NAME_LENGTH_STRING;
    private static string m_identifierStart;
    private static string m_identifierExtend;
    private static Regex m_clsIdentifierRegex;
    protected Hashtable m_dictionary;
    private Hashtable m_dictionaryCaseInsensitive;
    protected NameValidator(bool caseInsensitiveComparison);
    private static NameValidator();
    protected static bool IsCLSCompliant(string name);
    protected bool IsUnique(string name);
    protected bool IsCaseInsensitiveDuplicate(string name);
    internal virtual bool Validate(string name);
}
internal class Microsoft.ReportingServices.ReportPublishing.ParameterNameValidator : NameValidator {
    internal bool Validate(string parameterName, ObjectType objectType, string objectName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.ProcessingValidator : object {
    internal static string ValidateColor(string color, IErrorContext errorContext, bool allowTransparency);
    internal static string ValidateSize(string size, IErrorContext errorContext);
    internal static string ValidateSize(string size, bool allowNegative, IErrorContext errorContext);
    internal static string ValidateBorderWidth(string size, IErrorContext errorContext);
    internal static string ValidateFontSize(string size, IErrorContext errorContext);
    internal static string ValidatePadding(string size, IErrorContext errorContext);
    internal static string ValidateLineHeight(string size, IErrorContext errorContext);
    private static string ValidateSize(string size, double minValue, double maxValue, bool allowNegative, IErrorContext errorContext);
    internal static string ValidateEmbeddedImageName(string embeddedImageName, Dictionary`2<string, ImageInfo> embeddedImages, IErrorContext errorContext);
    internal static string ValidateEmbeddedImageName(string embeddedImageName, Dictionary`2<string, ImageInfo> embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static string ValidateLanguage(string language, IErrorContext errorContext, CultureInfo& culture);
    internal static string ValidateSpecificLanguage(string language, IErrorContext errorContext, CultureInfo& culture);
    internal static object ValidateNumeralVariant(int numeralVariant, IErrorContext errorContext);
    internal static string ValidateMimeType(string mimeType, IErrorContext errorContext);
    internal static string ValidateMimeType(string mimeType, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static string ValidateBackgroundHatchType(string backgroundHatchType, IErrorContext errorContext);
    internal static string ValidateTextEffect(string textEffect, IErrorContext errorContext);
    internal static string ValidateBorderStyle(string borderStyle, ObjectType objectType, bool isDynamicImageSubElement, IErrorContext errorContext, bool isDefaultBorder);
    internal static string ValidateBackgroundGradientType(string gradientType, IErrorContext errorContext);
    internal static string ValidateBackgroundRepeat(string repeat, ObjectType objectType, IErrorContext errorContext);
    internal static string ValidateFontStyle(string fontStyle, IErrorContext errorContext);
    internal static string ValidateFontWeight(string fontWeight, IErrorContext errorContext);
    internal static string ValidateTextDecoration(string textDecoration, IErrorContext errorContext);
    internal static string ValidateTextAlign(string textAlign, IErrorContext errorContext);
    internal static string ValidateVerticalAlign(string verticalAlign, IErrorContext errorContext);
    internal static string ValidateDirection(string direction, IErrorContext errorContext);
    internal static string ValidateWritingMode(string writingMode, IErrorContext errorContext);
    internal static string ValidateUnicodeBiDi(string unicodeBiDi, IErrorContext errorContext);
    internal static string ValidateCalendar(string calendar, IErrorContext errorContext);
    internal static object ValidateCustomStyle(string styleName, object styleValue, IErrorContext errorContext);
    internal static object ValidateCustomStyle(string styleName, object styleValue, ObjectType objectType, IErrorContext errorContext);
    internal static string ValidateTextRunMarkupType(string value, IErrorContext errorContext);
    internal static string ValidateParagraphListStyle(string value, IErrorContext errorContext);
    internal static Nullable`1<int> ValidateParagraphListLevel(int value, IErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.PublishingContext : ValueType {
    private LocationFlags m_location;
    private ObjectType m_objectType;
    private string m_objectName;
    private string m_prefixPropertyName;
    internal LocationFlags Location { get; internal set; }
    internal ObjectType ObjectType { get; internal set; }
    internal string ObjectName { get; internal set; }
    internal string PrefixPropertyName { get; internal set; }
    internal PublishingContext(LocationFlags location, ObjectType objectType, string objectName);
    internal LocationFlags get_Location();
    internal void set_Location(LocationFlags value);
    internal ObjectType get_ObjectType();
    internal void set_ObjectType(ObjectType value);
    internal string get_ObjectName();
    internal void set_ObjectName(string value);
    internal string get_PrefixPropertyName();
    internal void set_PrefixPropertyName(string value);
    internal ExpressionContext CreateExpressionContext(ExpressionType expressionType, DataType constantType, string propertyName, string dataSetName);
    internal double ValidateSize(string size, string propertyName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.PublishingValidator : object {
    private static string m_invalidCharacters;
    private static PublishingValidator();
    internal static bool ValidateColor(ExpressionInfo color, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static void ValidateBorderColorNotTransparent(ObjectType objectType, string objectName, Style styleClass, string styleName, ErrorContext errorContext);
    internal static bool ValidateSize(string size, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateSize(string size, ObjectType objectType, string objectName, string propertyName, bool restrictMaxValue, ErrorContext errorContext, Double& sizeInMM, String& roundSize);
    internal static bool ValidateSize(string size, ObjectType objectType, string objectName, string propertyName, bool restrictMaxValue, bool allowNegative, ErrorContext errorContext, Double& sizeInMM, String& roundSize);
    internal static bool ValidateSize(ExpressionInfo size, double minValue, double maxValue, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateSize(string size, bool allowNegative, double minValue, double maxValue, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext, Double& validSizeInMM, String& newSize);
    internal static bool ValidateEmbeddedImageName(ExpressionInfo embeddedImageName, Dictionary`2<string, ImageInfo> embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateEmbeddedImageName(AttributeInfo embeddedImageName, Dictionary`2<string, ImageInfo> embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateEmbeddedImageName(string embeddedImageName, Dictionary`2<string, ImageInfo> embeddedImages, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateLanguage(ExpressionInfo language, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateSpecificLanguage(ExpressionInfo language, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext, CultureInfo& culture);
    internal static bool ValidateColumns(int columns, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateNumeralVariant(ExpressionInfo numeralVariant, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateMimeType(ExpressionInfo mimeType, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static bool ValidateMimeType(string mimeType, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateTextEffect(ExpressionInfo textEffect, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateBackgroundHatchType(ExpressionInfo backgroundHatchType, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidatePosition(ExpressionInfo position, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateBorderStyle(ExpressionInfo borderStyle, ObjectType objectType, string objectName, bool isDynamicElementSubElement, string propertyName, bool isDefaultBorder, ErrorContext errorContext);
    private static bool ValidateBackgroundGradientType(ExpressionInfo repeat, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateBackgroundRepeat(ExpressionInfo repeat, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateFontStyle(ExpressionInfo fontStyle, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateFontWeight(ExpressionInfo fontWeight, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateTextDecoration(ExpressionInfo textDecoration, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateTextAlign(ExpressionInfo textAlign, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateVerticalAlign(ExpressionInfo verticalAlign, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateDirection(ExpressionInfo direction, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateWritingMode(ExpressionInfo writingMode, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateUnicodeBiDi(ExpressionInfo unicodeBiDi, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static bool ValidateCalendar(ExpressionInfo calendar, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    private static void ValidateBackgroundImage(ExpressionInfo backgroundImageSource, ExpressionInfo backgroundImageValue, ExpressionInfo backgroundImageMIMEType, Style style, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal static Style ValidateAndCreateStyle(List`1<string> names, List`1<ExpressionInfo> values, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal static Style ValidateAndCreateStyle(List`1<string> names, List`1<ExpressionInfo> values, ObjectType objectType, string objectName, bool isDynamicImageSubElement, ErrorContext errorContext);
    internal static Style ValidateAndCreateStyle(List`1<string> names, List`1<ExpressionInfo> values, ObjectType objectType, string objectName, ErrorContext errorContext, bool checkForMeDotValue, Boolean& meDotValueReferenced);
    internal static Style ValidateAndCreateStyle(List`1<string> names, List`1<ExpressionInfo> values, ObjectType objectType, string objectName, bool isDynamicImageSubElement, ErrorContext errorContext, bool checkForMeDotValue, Boolean& meDotValueReferenced);
    internal static void ValidateCalendar(CultureInfo language, string calendar, ObjectType objectType, string ObjectName, string propertyName, ErrorContext errorContext);
    internal static void ValidateNumeralVariant(CultureInfo language, int numVariant, ObjectType objectType, string ObjectName, string propertyName, ErrorContext errorContext);
    internal static void ValidateTextRunMarkupType(string value, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static void ValidateParagraphListStyle(string value, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
    internal static string ValidateReportName(ICatalogItemContext reportContext, string reportName, ObjectType objectType, string objectName, string propertyName, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.RDLValidatingReader : XmlReader {
    private RdlElementStack m_rdlElementStack;
    private string m_validationNamespace;
    private XmlReader m_reader;
    private ValidationEventHandler ValidationEventHandler;
    internal int LineNumber { get; }
    internal int LinePosition { get; }
    public XmlReaderSettings Settings { get; }
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public XmlNameTable NameTable { get; }
    public string NamespaceURI { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    internal RDLValidatingReader(Stream stream, Stream schemaStream, string validationNamespace);
    internal int get_LineNumber();
    internal int get_LinePosition();
    private static int CompareWithInvariantCulture(string x, string y, bool ignoreCase);
    public bool Validate(String& message);
    private static void TraverseParticle(XmlSchemaParticle particle, ArrayList elementDeclsInContentModel);
    private void ValidationCallBack(object sender, ValidationEventArgs args);
    public virtual XmlReaderSettings get_Settings();
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual XmlNameTable get_NameTable();
    public virtual string get_NamespaceURI();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual void Close();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(string name);
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
}
internal class Microsoft.ReportingServices.ReportPublishing.ReportPublishing : object {
    private bool m_static;
    private bool m_interactive;
    private int m_idCounter;
    private int m_dataSetIndexCounter;
    private RmlValidatingReader m_reader;
    private CLSUniqueNameValidator m_reportItemNames;
    private VariableNameValidator m_variableNames;
    private ScopeNameValidator m_scopeNames;
    private ChartObjectUniqueNameValidator m_chartObjectUniqueNameValidator;
    private GaugePanelObjectUniqueNameValidator m_gaugePanelObjectUniqueNameValidator;
    private ICatalogItemContext m_reportContext;
    private IChunkFactory m_createChunkCallback;
    private CheckSharedDataSource m_checkDataSourceCallback;
    private string m_description;
    private DataSourceInfoCollection m_dataSources;
    private List`1<SubReport> m_subReports;
    private UserLocationFlags m_reportLocationFlags;
    private UserLocationFlags m_userReferenceLocation;
    private bool m_hasExternalImages;
    private bool m_hasHyperlinks;
    private bool m_pageSectionDrillthroughs;
    private List`1<DataRegion> m_nestedDataRegions;
    private SortedList`2<double, Pair`2<double, int>> m_headerLevelSizeList;
    private double m_firstCumulativeHeaderSize;
    private bool m_hasGrouping;
    private bool m_hasSorting;
    private bool m_hasUserSort;
    private bool m_hasGroupFilters;
    private bool m_hasSpecialRecursiveAggregates;
    private bool m_subReportMergeTransactions;
    private ExprHostCompiler m_reportCT;
    private bool m_hasImageStreams;
    private bool m_hasLabels;
    private bool m_hasBookmarks;
    private List`1<TextBox> m_textBoxesWithUserSortTarget;
    private List`1<ICreateSubtotals> m_createSubtotalsDefs;
    private Holder`1<int> m_variableSequenceIdCounter;
    private Holder`1<int> m_textboxSequenceIdCounter;
    private bool m_hasFilters;
    private List`1<DataSet> m_dataSets;
    private bool m_parametersNotUsedInQuery;
    private Hashtable m_usedInQueryInfos;
    private Hashtable m_reportParamUserProfile;
    private Hashtable m_dataSetQueryInfo;
    private ArrayList m_dynamicParameters;
    private CultureInfo m_reportLanguage;
    private bool m_hasUserSortPeerScopes;
    private Dictionary`2<string, ISortFilterScope> m_reportScopes;
    private StringDictionary m_dataSourceNames;
    private int m_dataRegionCount;
    private List`1<ReportItemCollection> m_reportItemCollectionList;
    private List`1<IAggregateHolder> m_aggregateHolderList;
    private List`1<IRunningValueHolder> m_runningValueHolderList;
    private string m_targetRDLNamespace;
    private Report m_report;
    private PublishingErrorContext m_errorContext;
    private Dictionary`2<AggregateTypes, Dictionary`2<string, Dictionary`2<string, DataAggregateInfo>>> m_aggregateHashByType;
    private Dictionary`2<AggregateTypes, Dictionary`2<string, AllowNullKeyDictionary`2<string, Dictionary`2<string, RunningValueInfo>>>> m_runningValueHashByType;
    internal Report CreateIntermediateFormat(ICatalogItemContext reportContext, Byte[] definition, IChunkFactory createChunkCallback, CheckSharedDataSource checkDataSourceCallback, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, PublishingErrorContext errorContext, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, IDataProtection dataProtection, String& description, String& language, ParameterInfoCollection& parameters, DataSourceInfoCollection& dataSources, UserLocationFlags& userReferenceLocation, ArrayList& dataSetsName, Boolean& hasExternalImages, Boolean& hasHyperlinks);
    private int GenerateID();
    private int GenerateVariableSequenceID();
    private int GenerateTextboxSequenceID();
    private void Phase1(ICatalogItemContext reportContext, Byte[] definition, IChunkFactory createChunkCallback, CheckSharedDataSource checkDataSourceCallback, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection, String& description, String& language, DataSourceInfoCollection& dataSources, Boolean& hasExternalImages, Boolean& hasHyperlinks);
    private void ReadReport(ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection);
    private Page ReadPage(PublishingContext context, Report report);
    private List`1<string> ReadCodeModules(PublishingContext context);
    private List`1<CodeClass> ReadClasses(PublishingContext context);
    private void ReadClass(List`1<CodeClass> codeClasses, CLSUniqueNameValidator instanceNameValidator, PublishingContext context);
    private void ReadBody(Report report, PublishingContext context);
    private PageSection ReadPageSection(bool isHeader, Report report, PublishingContext context);
    private void ReadReportItems(string propertyName, ReportItem parent, ReportItemCollection parentCollection, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget, Boolean& computed);
    private bool AddReportItemToParentCollection(ReportItem reportItem, ReportItemCollection parentCollection, bool isParentTablix);
    private void ReadReportItems(string propertyName, ReportItem parent, ReportItemCollection parentCollection, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private void ReadPageBreak(IPageBreak pageBreak, PublishingContext context);
    private void SetSortTargetForTextBoxes(List`1<TextBox> textBoxes, ISortFilterScope target);
    private SubReport ReadSubreport(ReportItem parent, PublishingContext context);
    private DataValueList ReadCustomProperties(PublishingContext context);
    private DataValueList ReadCustomProperties(PublishingContext context, Boolean& computed);
    private DataType ReadDataTypeAttribute();
    private PageBreakLocation ReadPageBreakLocation();
    private bool ReadDataElementStyle();
    private DataElementStyles ReadDataElementStyleRDL();
    private DataElementOutputTypes ReadDataElementOutput();
    private Action ReadActionInfo(PublishingContext context, StyleOwnerType styleOwnerType, Boolean& computed);
    private void ReadActionItemList(Action actionInfo, PublishingContext context, Boolean& computed);
    private ActionItem ReadActionItem(PublishingContext context, Boolean& computed, Int32& computedIndex, Boolean& missingLabel, Boolean& hasDrillthroughParameter);
    private void ReadDrillthrough(PublishingContext context, ActionItem actionItem, Boolean& computed);
    private ExpressionInfo ReadBookmarkExpression(PublishingContext context, Boolean& computedBookmark);
    private Chart ReadChart(ReportItem parent, PublishingContext context);
    private ChartMemberList ReadChartHierarchy(Chart chart, PublishingContext context, bool isCategoryHierarchy);
    private void SetCategoryOrSeriesSpans(ChartMemberList members, bool isCategoryHierarchy, int totalSpansFromLevel);
    private ChartMemberList ReadChartMembers(Chart chart, PublishingContext context, bool isCategoryHierarchy, int level, Int32& leafNodes, Int32& maxLevel);
    private ChartMember ReadChartMember(Chart chart, PublishingContext context, bool isCategoryHierarchy, int level, Int32& aLeafNodes, Int32& maxLevel);
    private void ChartFakeStaticSeries(Chart chart);
    private void ChartFakeStaticCategory(Chart chart);
    private void ReadChartTitle(Chart chart, ChartTitle title, bool isNoDataMessage, PublishingContext context);
    private ChartAxisTitle ReadChartAxisTitle(Chart chart, PublishingContext context);
    private ChartLegendTitle ReadChartLegendTitle(Chart chart, PublishingContext context);
    private List`1<ChartAxis> ReadValueAxes(Chart chart, PublishingContext context);
    private List`1<ChartAxis> ReadCategoryAxes(Chart chart, PublishingContext context);
    private List`1<ChartArea> ReadChartAreas(Chart chart, PublishingContext context);
    private List`1<ChartTitle> ReadChartTitles(Chart chart, PublishingContext context);
    private List`1<ChartLegend> ReadChartLegends(Chart chart, PublishingContext context);
    private ChartTickMarks ReadChartTickMarks(Chart chart, PublishingContext context, bool isMajor);
    private ChartAxis ReadAxis(Chart chart, PublishingContext context, bool isCategory);
    private ChartAxisScaleBreak ReadChartAxisScaleBreak(Chart chart, PublishingContext context);
    private List`1<ChartFormulaParameter> ReadChartFormulaParameters(Chart chart, ChartDerivedSeries chartDerivedSeries, PublishingContext context);
    private ChartFormulaParameter ReadChartFormulaParameter(Chart chart, ChartDerivedSeries chartDerivedSeries, PublishingContext context);
    private ChartNoMoveDirections ReadChartNoMoveDirections(Chart chart, ChartSeries chartSeries, PublishingContext context);
    private ChartLegendColumn ReadChartLegendColumn(Chart chart, PublishingContext context);
    private ChartElementPosition ReadChartElementPosition(Chart chart, PublishingContext context, string chartElementPositionName);
    private ChartSmartLabel ReadChartSmartLabel(Chart chart, ChartSeries chartSeries, PublishingContext context);
    private ChartLegendCustomItemCell ReadChartLegendCustomItemCell(Chart chart, PublishingContext context);
    private ChartLegendCustomItem ReadChartLegendCustomItem(Chart chart, PublishingContext context);
    private List`1<ChartLegendCustomItemCell> ReadChartLegendCustomItemCells(Chart chart, PublishingContext context);
    private ChartLegend ReadChartLegend(Chart chart, PublishingContext context);
    private List`1<ChartLegendColumn> ReadChartLegendColumns(Chart chart, PublishingContext context);
    private List`1<ChartLegendCustomItem> ReadChartLegendCustomItems(Chart chart, PublishingContext context);
    private List`1<ChartStripLine> ReadChartStripLines(Chart chart, PublishingContext context);
    private List`1<ChartDerivedSeries> ReadChartDerivedSeriesCollection(Chart chart, PublishingContext context);
    private ChartDerivedSeries ReadChartDerivedSeries(Chart chart, PublishingContext context);
    private ChartStripLine ReadChartStripLine(Chart chart, PublishingContext context);
    private ChartGridLines ReadGridLines(Chart chart, PublishingContext context, bool isMajor);
    private void ReadChartData(Chart chart, PublishingContext context, Boolean& hasAggregates);
    private ChartSeriesList ReadChartSeriesCollection(Chart chart, PublishingContext context, Boolean& hasAggregates);
    private ChartArea ReadChartArea(Chart chart, PublishingContext context);
    private ChartAlignType ReadChartAlignType(Chart chart, PublishingContext context);
    private ChartSeries ReadChartSeries(Chart chart, ChartDerivedSeries chartDerivedSeries, PublishingContext context, Boolean& hasAggregates);
    private ChartDataPointList ReadChartDataPoints(Chart chart, PublishingContext context, Boolean& hasAggregates);
    private ChartDataPoint ReadChartDataPoint(Chart chart, PublishingContext context, Boolean& hasAggregates);
    private ChartMarker ReadChartMarker(Chart chart, ChartSeries series, ChartDataPoint dataPoint, PublishingContext context);
    private ChartDataLabel ReadChartDataLabel(Chart chart, ChartSeries series, ChartDataPoint dataPoint, PublishingContext context);
    private ChartDataPointValues ReadChartDataPointValues(Chart chart, ChartDataPoint dataPoint, PublishingContext context);
    private ChartThreeDProperties ReadThreeDProperties(Chart chart, PublishingContext context);
    private List`1<ChartCustomPaletteColor> ReadChartCustomPaletteColors(Chart chart, PublishingContext context);
    private DataValueList ReadChartCodeParameters(PublishingContext context);
    private ChartItemInLegend ReadChartItemInLegend(Chart chart, ChartSeries series, ChartDataPoint dataPoint, PublishingContext context);
    private ChartEmptyPoints ReadChartEmptyPoints(Chart chart, ChartSeries series, PublishingContext context);
    private ChartLegendColumnHeader ReadChartLegendColumnHeader(Chart chart, PublishingContext context);
    private ChartBorderSkin ReadChartBorderSkin(Chart chart, PublishingContext context);
    private GaugePanel ReadGaugePanel(ReportItem parent, PublishingContext context);
    private void AddStaticGaugeMember(int ID, GaugePanel gaugePanel);
    private void AddStaticGaugeRowMember(int ID, GaugePanel gaugePanel);
    private void AddGaugeRow(int rowID, int cellID, GaugePanel gaugePanel);
    private GaugeMember ReadGaugeMember(GaugePanel gaugePanel, PublishingContext context, int level, Int32& aLeafNodes);
    private TopImage ReadTopImage(GaugePanel gaugePanel, PublishingContext context, string elementName);
    private PointerImage ReadPointerImage(GaugePanel gaugePanel, PublishingContext context);
    private FrameImage ReadFrameImage(GaugePanel gaugePanel, PublishingContext context);
    private CapImage ReadCapImage(GaugePanel gaugePanel, PublishingContext context);
    private BackFrame ReadBackFrame(GaugePanel gaugePanel, PublishingContext context);
    private FrameBackground ReadFrameBackground(GaugePanel gaugePanel, PublishingContext context);
    private CustomLabel ReadCustomLabel(GaugePanel gaugePanel, PublishingContext context);
    private List`1<CustomLabel> ReadCustomLabels(GaugePanel gaugePanel, PublishingContext context);
    private TickMarkStyle ReadTickMarkStyle(GaugePanel gaugePanel, PublishingContext context);
    private GaugeTickMarks ReadGaugeTickMarks(GaugePanel gaugePanel, PublishingContext context, string elementName);
    private GaugeImage ReadGaugeImage(GaugePanel gaugePanel, PublishingContext context);
    private List`1<GaugeImage> ReadGaugeImages(GaugePanel gaugePanel, PublishingContext context);
    private GaugeInputValue ReadGaugeInputValue(GaugePanel gaugePanel, PublishingContext context, string inputValueName);
    private GaugeLabel ReadGaugeLabel(GaugePanel gaugePanel, PublishingContext context);
    private List`1<GaugeLabel> ReadGaugeLabels(GaugePanel gaugePanel, PublishingContext context);
    private LinearGauge ReadLinearGauge(GaugePanel gaugePanel, PublishingContext context);
    private List`1<LinearGauge> ReadLinearGauges(GaugePanel gaugePanel, PublishingContext context);
    private LinearPointer ReadLinearPointer(GaugePanel gaugePanel, PublishingContext context);
    private List`1<LinearPointer> ReadLinearPointers(GaugePanel gaugePanel, PublishingContext context);
    private LinearScale ReadLinearScale(GaugePanel gaugePanel, PublishingContext context);
    private List`1<LinearScale> ReadLinearScales(GaugePanel gaugePanel, PublishingContext context);
    private NumericIndicator ReadNumericIndicator(GaugePanel gaugePanel, PublishingContext context);
    private List`1<NumericIndicator> ReadNumericIndicators(GaugePanel gaugePanel, PublishingContext context);
    private PinLabel ReadPinLabel(GaugePanel gaugePanel, PublishingContext context);
    private PointerCap ReadPointerCap(GaugePanel gaugePanel, PublishingContext context);
    private RadialGauge ReadRadialGauge(GaugePanel gaugePanel, PublishingContext context);
    private List`1<RadialGauge> ReadRadialGauges(GaugePanel gaugePanel, PublishingContext context);
    private RadialPointer ReadRadialPointer(GaugePanel gaugePanel, PublishingContext context);
    private List`1<RadialPointer> ReadRadialPointers(GaugePanel gaugePanel, PublishingContext context);
    private RadialScale ReadRadialScale(GaugePanel gaugePanel, PublishingContext context);
    private List`1<RadialScale> ReadRadialScales(GaugePanel gaugePanel, PublishingContext context);
    private ScaleLabels ReadScaleLabels(GaugePanel gaugePanel, PublishingContext context);
    private ScalePin ReadScalePin(GaugePanel gaugePanel, PublishingContext context, string elementName);
    private ScaleRange ReadScaleRange(GaugePanel gaugePanel, PublishingContext context);
    private List`1<ScaleRange> ReadScaleRanges(GaugePanel gaugePanel, PublishingContext context);
    private StateIndicator ReadStateIndicator(GaugePanel gaugePanel, PublishingContext context);
    private List`1<StateIndicator> ReadStateIndicators(GaugePanel gaugePanel, PublishingContext context);
    private Thermometer ReadThermometer(GaugePanel gaugePanel, PublishingContext context);
    private CustomReportItem ReadCustomReportItem(ReportItem parent, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget, ReportItem& altReportItem);
    private ReportItem ReadAltReportItem(ReportItem parent, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private void ReadCustomData(CustomReportItem crItem, PublishingContext context, Boolean& validName);
    private DataMemberList ReadCustomDataHierarchy(CustomReportItem crItem, PublishingContext context, bool isColumnHierarchy, Boolean& validName);
    private DataMemberList ReadCustomDataMembers(CustomReportItem crItem, PublishingContext context, bool isColumnHierarchy, int level, Int32& leafNodes, Boolean& validName);
    private DataMember ReadCustomDataMember(CustomReportItem crItem, PublishingContext context, bool isColumnHierarchy, int level, Int32& aLeafNodes, Boolean& validName);
    private CustomDataRowList ReadCustomDataRows(CustomReportItem crItem, PublishingContext context);
    private CustomDataRow ReadCustomDataRow(CustomReportItem crItem, PublishingContext context);
    private DataCell ReadCustomDataCell(CustomReportItem crItem, PublishingContext context);
    private DataValue ReadDataValue(bool isCustomProperty, bool nameRequired, int index, PublishingContext context);
    private DataValue ReadDataValue(bool isCustomProperty, bool nameRequired, int index, Boolean& isComputed, PublishingContext context);
    private void ReadConnectionProperties(DataSource dataSource, PublishingContext context, Boolean& hasComplexParams, List`1& parametersInQuery);
    private void ReadDataSets(PublishingContext context);
    private DataSet ReadDataSet(PublishingContext context);
    private ReportQuery ReadQuery(PublishingContext context, DataSetInfo& queryDataSetInfo);
    private CommandType ReadCommandType();
    private List`1<ParameterValue> ReadQueryParameters(PublishingContext context, Boolean& hasComplexParams, List`1& parametersInQuery);
    private ParameterValue ReadQueryParameter(PublishingContext context, Boolean& isComplex, List`1& parametersInQuery);
    private List`1<Field> ReadFields(PublishingContext context, Int32& calculatedFieldStartIndex);
    private Field ReadField(CLSUniqueNameValidator names, PublishingContext context);
    private List`1<Filter> ReadFilters(ExpressionType expressionType, PublishingContext context);
    private Filter ReadFilter(ExpressionType expressionType, PublishingContext context);
    private List`1<ExpressionInfoTypeValuePair> ReadFilterValues(ExpressionType expressionType, PublishingContext context);
    private Operators ReadOperator();
    private DataSetReference ReadDataSetReference();
    private List`1<DataSource> ReadDataSources(PublishingContext context, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection);
    private DataSource ReadDataSource(DataSourceNameValidator dataSourceNames, PublishingContext context, ResolveTemporaryDataSource resolveTemporaryDataSourceCallback, DataSourceInfoCollection originalDataSources, IDataProtection dataProtection);
    private Sorting ReadSortExpressions(bool isDataRowSortExpression, PublishingContext context);
    private void ReadSortExpression(Sorting sorting, bool isDataRowSortExpression, PublishingContext context);
    private bool ReadDirection();
    private bool CanMergeGroupingAndSorting(Grouping grouping, Sorting sorting);
    private Grouping ReadGrouping(PublishingContext context);
    private Grouping ReadGrouping(PublishingContext context, Boolean& validName);
    private void ReadGroupExpressions(List`1<ExpressionInfo> groupExpressions, PublishingContext context);
    private List`1<Variable> ReadVariables(PublishingContext context, bool isGrouping, string groupName);
    private Variable ReadVariable(PublishingContext context, bool isGrouping, string groupingName);
    private ExpressionInfo ReadExpression(string expression, string propertyName, string dataSetName, EvaluationMode mode, ExpressionType expressionType, DataType constantType, PublishingContext context);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, DataType constantType, PublishingContext context, Boolean& userCollectionReferenced);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, DataType constantType, PublishingContext context);
    private ExpressionInfo ReadExpression(string propertyName, ExpressionType expressionType, DataType constantType, PublishingContext context);
    private ExpressionInfo ReadExpression(string propertyName, ExpressionType expressionType, DataType constantType, PublishingContext context, Boolean& computed);
    private ExpressionInfo ReadDocumentMapLabelExpression(string propertyName, ExpressionType expressionType, DataType constantType, PublishingContext context);
    private ExpressionInfo ReadDocumentMapLabelExpression(string propertyName, ExpressionType expressionType, DataType constantType, PublishingContext context, Boolean& computed);
    private ExpressionInfo ReadBookmarkExpression(string propertyName, ExpressionType expressionType, DataType constantType, PublishingContext context);
    private ExpressionInfo ReadBookmarkExpression(string propertyName, ExpressionType expressionType, DataType constantType, PublishingContext context, Boolean& computed);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, DataType constantType, PublishingContext context, DetectionFlags flag, Boolean& reportParameterReferenced, String& reportParameterName);
    private ExpressionInfo ReadExpression(string propertyName, string dataSetName, ExpressionType expressionType, DataType constantType, PublishingContext context, DetectionFlags flag, Boolean& reportParameterReferenced, String& reportParameterName, Boolean& userCollectionReferenced);
    private bool CheckUserProfileDependency();
    private void SetUserProfileDependency();
    private EvaluationMode ReadEvaluationModeAttribute();
    private ExpressionInfo ReadToggleImage(PublishingContext context, Boolean& computed);
    private Image ReadImage(ReportItem parent, PublishingContext context);
    private SourceType ReadSource();
    private void ReadBackgroundImage(StyleInformation styleInfo, PublishingContext context, Boolean& computed);
    private Dictionary`2<string, ImageInfo> ReadEmbeddedImages(PublishingContext context);
    private void ReadEmbeddedImage(Dictionary`2<string, ImageInfo> embeddedImages, CLSUniqueNameValidator embeddedImageNames, PublishingContext context);
    private Sizings ReadSizing();
    private ExpressionInfo ReadQueryOrParameterExpression(PublishingContext context, DataType dataType, Boolean& isComplex, List`1& parametersInQuery);
    private List`1<ParameterDef> ReadReportParameters(PublishingContext context);
    private ParameterDef ReadReportParameter(CLSUniqueNameValidator reportParameterNames, Hashtable parameterNames, PublishingContext context, int count);
    private List`1<string> ReadDefaultValue(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex, DataSetReference& defaultDataSet);
    private List`1<string> ReadValues(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex);
    private bool ReadValidValues(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex, DataSetReference& validValueDataSet);
    private void ReadParameterValues(PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& isComplex, Boolean& containsExplicitNull);
    private ExpressionInfo ReadParameterExpression(string propertyName, PublishingContext context, ParameterDef parameter, Hashtable parameterNames, Boolean& dynamic, Boolean& isComplex);
    private List`1<ParameterValue> ReadParameters(PublishingContext context, bool doClsValidation);
    private List`1<ParameterValue> ReadParameters(PublishingContext context, bool omitAllowed, bool doClsValidation, Boolean& computed);
    private ParameterValue ReadParameter(ParameterNameValidator parameterNames, PublishingContext context, bool omitAllowed, bool doClsValidation, Boolean& computed);
    private TextBox ReadTextbox(ReportItem parent, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private List`1<Paragraph> ReadParagraphs(PublishingContext context, TextBox textbox, Boolean& computed);
    private Paragraph ReadParagraph(PublishingContext context, TextBox textbox, int index, Boolean& computed);
    private List`1<TextRun> ReadTextRuns(PublishingContext context, Paragraph paragraph, int paragraphIndex, Boolean& computed);
    private TextRun ReadTextRun(PublishingContext context, Paragraph paragraph, int paragraphIndex, int index, Boolean& computed);
    private void ReadUserSort(PublishingContext context, TextBox textbox, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private Rectangle ReadRectangle(ReportItem parent, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private Line ReadLine(ReportItem parent, PublishingContext context);
    private StyleInformation ReadStyle(PublishingContext context, Boolean& computed);
    private StyleInformation ReadStyle(PublishingContext context);
    private void ReadBorderAttributes(string borderLocation, StyleInformation styleInfo, PublishingContext context, Boolean& computed);
    private string ReadSize();
    private TriState ReadTriState();
    private Visibility ReadVisibility(PublishingContext context, Boolean& computed);
    private Visibility ReadVisibility(PublishingContext context);
    private Tablix ReadTablix(ReportItem parent, PublishingContext context);
    private TablixMemberList ReadTablixHierarchy(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget, bool isColumnHierarchy, Boolean& validName);
    private void ValidateHeaderSizesAndSetSpans(Tablix tablix, PublishingContext context, TablixMemberList members, bool isColumnHierarchy);
    private int GetTotalSpanCount();
    private bool ValidateHeaderSizes(PublishingContext context, TablixMemberList members, bool isColumnHierarchy, double ancestorHeaderSize, int consecutiveZeroHeightAncestorCount, Int32& rowOrColumnNumber, Int32& maxConsecutiveZeroHeightDescendentCount);
    private void SetHeaderSpans(PublishingContext context, TablixMemberList members, bool isColumnHierarchy, double ancestorHeaderSize, bool outerConsumedInnerZeroHeightLevel, int parentHeaderLevelPlusSpans, Boolean[] parentHeaderLevelHasStaticArray);
    private int GetSpans(TablixMember member, double ancestorHeaderSize, double headerSize, bool outerConsumedInnerZeroHeightLevel, Boolean& consumedInnerZeroHeightLevel);
    private TablixMemberList ReadTablixMembers(Tablix tablix, TablixMember parentMember, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget, bool isColumnHierarchy, int level, Int32& leafNodes, Boolean& validName, Boolean& innerMostMemberWithHeaderFound);
    private TablixMember ReadTablixMember(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget, bool isColumnHierarchy, int level, Int32& aLeafNodes, Boolean& isStaticWithHeader, Boolean& validName, Boolean& innerMostMemberWithHeaderFound);
    private TablixHeader ReadTablixHeader(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private void ReadTablixCorner(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private List`1<List`1<TablixCornerCell>> ReadTablixCornerRows(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private List`1<TablixCornerCell> ReadTablixCornerRow(Tablix tablix, PublishingContext context, Int32[] rowSpans, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private TablixCornerCell ReadTablixCornerCell(Tablix tablix, PublishingContext context, bool shouldBeEmpty, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private List`1<TablixColumn> ReadTablixColumns(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private TablixRow ReadTablixRow(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private TablixCellList ReadTablixCells(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private TablixCell ReadTablixCell(Tablix tablix, PublishingContext context, bool shouldBeEmpty, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private TablixColumn ReadTablixColumn(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private TablixRowList ReadTablixRows(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private void ReadTablixBody(Tablix tablix, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget);
    private ReportItem ReadCellContents(ReportItem parent, PublishingContext context, List`1<TextBox> textBoxesWithDefaultSortTarget, ReportItem& altCellContents, Nullable`1& colSpan, Nullable`1& rowSpan);
    private bool ReadLayoutDirection();
    private void Phase2();
    private void CreateAutomaticSubtotals();
    private void Phase3(ICatalogItemContext reportContext, ParameterInfoCollection& parameters, AppDomain compilationTempAppDomain, bool generateExpressionHostWithRefusedPermissions, Dictionary`2& groupingExprCountAtScope);
    private void InitializeParameters(InitializationContext context, ParameterInfoCollection& parameters);
    private void Phase4(Dictionary`2<string, int> groupingExprCountAtScope, ArrayList& dataSetsName);
    private void PopulateReportItemCollections();
    private void CompactAggregates(List`1& dataRegions);
    private bool CompactAggregates(List`1<DataAggregateInfo> aggregates, bool nonDataRegionScopedCellAggs, Dictionary`2<AggregateTypes, Dictionary`2<string, Dictionary`2<string, DataAggregateInfo>>> aggregateHashByType);
    private void CompactRunningValues(Dictionary`2<string, int> groupingExprCountAtScope);
    private void CompactRunningValueList(Dictionary`2<string, int> groupingExprCountAtScope, List`1<RunningValueInfo> runningValueList, bool nonDataRegionScopedCellRVs, Dictionary`2<AggregateTypes, Dictionary`2<string, AllowNullKeyDictionary`2<string, Dictionary`2<string, RunningValueInfo>>>> runningValueHashByType);
}
internal class Microsoft.ReportingServices.ReportPublishing.RmlValidatingReader : RDLValidatingReader {
    private CustomFlags m_custom;
    private PublishingErrorContext m_errorContext;
    private string m_targetRDLNamespace;
    internal RmlValidatingReader(Stream stream, Stream schemaStream, PublishingErrorContext errorContext, string targetRDLNamespace);
    public virtual bool Read();
    public virtual string ReadString();
    internal bool ReadBoolean();
    internal int ReadInteger();
    internal string ReadCustomXml();
    private void ValidationCallBack(object sender, ValidationEventArgs args);
}
internal class Microsoft.ReportingServices.ReportPublishing.ScopeNameValidator : NameValidator {
    internal bool Validate(bool isGrouping, string scopeName, ObjectType objectType, string objectName, ErrorContext errorContext);
    internal bool Validate(bool isGrouping, string scopeName, ObjectType objectType, string objectName, ErrorContext errorContext, bool enforceCLSCompliance);
}
internal class Microsoft.ReportingServices.ReportPublishing.StyleInformation : object {
    private List`1<string> m_names;
    private List`1<ExpressionInfo> m_values;
    private static Hashtable StyleNameIndexes;
    private static Boolean[0...,0...] AllowStyleAttributeByType;
    internal List`1<string> Names { get; }
    internal List`1<ExpressionInfo> Values { get; }
    private static StyleInformation();
    internal List`1<string> get_Names();
    internal List`1<ExpressionInfo> get_Values();
    internal void AddAttribute(string name, ExpressionInfo expression);
    internal void Filter(StyleOwnerType ownerType, bool hasNoRows);
    internal void FilterChartLegendTitleStyle();
    internal void FilterChartStripLineStyle();
    internal void FilterChartSeriesStyle();
    internal void FilterGaugeLabelStyle();
    private int MapStyleOwnerTypeToIndex(StyleOwnerType ownerType, bool hasNoRows);
    private int MapStyleNameToIndex(string name);
    private bool Allow(int styleName, int ownerType);
}
internal enum Microsoft.ReportingServices.ReportPublishing.StyleOwnerType : Enum {
    public int value__;
    public static StyleOwnerType Line;
    public static StyleOwnerType Rectangle;
    public static StyleOwnerType Checkbox;
    public static StyleOwnerType Image;
    public static StyleOwnerType ActiveXControl;
    public static StyleOwnerType List;
    public static StyleOwnerType Matrix;
    public static StyleOwnerType Table;
    public static StyleOwnerType OWCChart;
    public static StyleOwnerType Body;
    public static StyleOwnerType Chart;
    public static StyleOwnerType Tablix;
    public static StyleOwnerType GaugePanel;
    public static StyleOwnerType TextBox;
    public static StyleOwnerType Paragraph;
    public static StyleOwnerType TextRun;
    public static StyleOwnerType SubReport;
    public static StyleOwnerType Subtotal;
    public static StyleOwnerType PageSection;
}
internal abstract class Microsoft.ReportingServices.ReportPublishing.UniqueNameValidator : NameValidator {
    internal abstract virtual bool Validate(Severity severity, ObjectType objectType, string objectName, string propertyNameValue, ErrorContext errorContext);
}
internal class Microsoft.ReportingServices.ReportPublishing.Validator : object {
    internal static int DecimalPrecision;
    internal static int RoundingPrecision;
    internal static int TruncatePrecision;
    internal static int ParagraphListLevelMin;
    internal static int ParagraphListLevelMax;
    internal static double NormalMin;
    internal static double NegativeMin;
    internal static double NormalMax;
    internal static double BorderWidthMin;
    internal static double BorderWidthMax;
    internal static double FontSizeMin;
    internal static double FontSizeMax;
    internal static double PaddingMin;
    internal static double PaddingMax;
    internal static double LineHeightMin;
    internal static double LineHeightMax;
    private static Regex m_colorRegex;
    private static Regex m_colorRegexTransparency;
    private static Validator();
    internal static bool ValidateGaugeAntiAliasings(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeBarStarts(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeCapStyles(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeFrameShapes(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeFrameStyles(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeGlassEffects(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeInputValueFormulas(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeLabelPlacements(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeMarkerStyles(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeOrientations(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugePointerPlacements(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeThermometerStyles(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeTickMarkShapes(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateLinearPointerTypes(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateRadialPointerNeedleStyles(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateRadialPointerTypes(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateScaleRangePlacements(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateBackgroundGradientTypes(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateTextAntiAliasingQualities(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateGaugeResizeModes(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateImageSourceType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateMimeType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateColor(string color, String& newColor, bool allowTransparency);
    internal static bool ValidateColor(string color, Color& c, bool allowTransparency);
    internal static void ParseColor(string color, Color& c, bool allowTransparency);
    private static void ColorFromArgb(string color, Color& c, bool allowTransparency);
    private static bool ValidateReportColor(string color, String& newColor, Color& c, bool allowTransparency);
    internal static bool ValidateSize(string size, bool allowNegative, Double& sizeInMM);
    private static bool ValidateSize(string size, double minValue, double maxValue, Double& sizeInMM);
    internal static bool ValidateSizeString(string sizeString, RVUnit& sizeValue);
    internal static bool ValidateSizeUnitType(RVUnit sizeValue);
    internal static bool ValidateSizeIsPositive(RVUnit sizeValue);
    internal static bool ValidateSizeValue(double sizeInMM, double minValue, double maxValue);
    internal static void ParseSize(string size, Double& sizeInMM);
    internal static int CompareDoubles(double first, double second);
    internal static bool ValidateEmbeddedImageName(string embeddedImageName, Dictionary`2<string, ImageInfo> embeddedImages);
    internal static bool ValidateSpecificLanguage(string language, CultureInfo& culture);
    internal static bool ValidateLanguage(string language, CultureInfo& culture);
    private static bool CreateCalendar(string calendarName, Calendar& calendar);
    internal static bool ValidateCalendar(CultureInfo langauge, string calendarName);
    internal static bool ValidateNumeralVariant(CultureInfo language, int numVariant);
    internal static bool ValidateColumns(int columns);
    internal static bool ValidateNumeralVariant(int numeralVariant);
    internal static bool ValidatePalette(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidatePaletteHatchBehavior(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartIntervalType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartTickMarksType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartColumnType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartCellType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartCellAlignment(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartAllowOutsideChartArea(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartCalloutLineAnchor(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartCalloutLineStyle(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartCalloutStyle(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartCustomItemSeparator(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartSeriesFormula(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartSeriesType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartSeriesSubtype(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool IsValidChartSeriesSubType(string type, string subType);
    internal static bool ValidateChartAxisLocation(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartAxisArrow(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartBorderSkinType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartTitlePositions(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartAxisTitlePositions(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartTitleDockings(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartAxisLabelRotation(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartBreakLineType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartAutoBool(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartDataLabelPosition(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartMarkerType(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartThreeDProjectionMode(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateChartThreeDShading(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateBackgroundHatchType(string backgroundHatchType);
    internal static bool ValidatePosition(string position);
    internal static bool ValidateTextEffect(string textEffect);
    internal static bool IsDynamicImageReportItem(ObjectType objectType);
    internal static bool IsDynamicImageSubElement(IStyleContainer styleContainer);
    internal static bool ValidateBorderStyle(string borderStyle, bool isDefaultBorder, ObjectType objectType, bool isDynamicImageSubElement, String& validatedStyle);
    internal static bool ValidateImageSourceType(string val);
    internal static bool ValidateMimeType(string mimeType);
    internal static bool ValidateBackgroundGradientType(string gradientType);
    internal static bool ValidateBackgroundRepeat(string repeat, bool isChartStyle);
    internal static bool ValidateFontStyle(string fontStyle);
    internal static bool ValidateFontWeight(string fontWeight);
    internal static bool ValidateTextDecoration(string textDecoration);
    internal static bool ValidateTextAlign(string textAlign);
    internal static bool ValidateVerticalAlign(string verticalAlign);
    internal static bool ValidateDirection(string direction);
    internal static bool ValidateWritingMode(string writingMode);
    internal static bool ValidateUnicodeBiDi(string unicodeBiDi);
    internal static bool ValidateCalendar(string calendar);
    internal static bool CompareWithInvariantCulture(string strOne, string strTwo);
    internal static bool ValidateTextOrientations(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    private static void RegisterInvalidEnumValueError(string val, ErrorContext errorContext, PublishingContext context, string propertyName);
    internal static bool ValidateTextRunMarkupType(string value);
    internal static bool ValidateParagraphListStyle(string value);
    internal static bool ValidateParagraphListLevel(int value, Nullable`1& adjustedValue);
}
internal class Microsoft.ReportingServices.ReportPublishing.VariableNameValidator : NameValidator {
    internal bool Validate(string name, ObjectType objectType, string objectName, ErrorContext errorContext, bool isGrouping, string groupingName);
}
internal class Microsoft.ReportingServices.ReportRendering.Action : object {
    internal ActionType m_actionType;
    internal MemberBase m_members;
    internal NameValueCollection m_parameters;
    internal DrillthroughParameters m_parameterNameObjectCollection;
    public ReportUrl HyperLinkURL { get; }
    public ReportUrl DrillthroughReport { get; }
    internal DrillthroughParameters DrillthroughParameterNameObjectCollection { get; }
    public NameValueCollection DrillthroughParameters { get; public set; }
    public string DrillthroughID { get; }
    public string BookmarkLink { get; public set; }
    public string Label { get; public set; }
    internal ActionItem ActionDefinition { get; }
    internal ActionItemInstance ActionInstance { get; }
    internal ParameterValueList DrillthroughParameterValueList { get; }
    internal string DrillthroughPath { get; }
    private bool IsCustomControl { get; }
    private ActionRendering Rendering { get; }
    internal ActionProcessing Processing { get; }
    internal Action(ActionItem actionItemDef, ActionItemInstance actionItemInstance, string drillthroughId, RenderingContext renderingContext);
    public ReportUrl get_HyperLinkURL();
    public ReportUrl get_DrillthroughReport();
    internal DrillthroughParameters get_DrillthroughParameterNameObjectCollection();
    public NameValueCollection get_DrillthroughParameters();
    public void set_DrillthroughParameters(NameValueCollection value);
    public string get_DrillthroughID();
    public string get_BookmarkLink();
    public void set_BookmarkLink(string value);
    public string get_Label();
    public void set_Label(string value);
    internal ActionItem get_ActionDefinition();
    internal ActionItemInstance get_ActionInstance();
    internal ParameterValueList get_DrillthroughParameterValueList();
    internal string get_DrillthroughPath();
    private bool get_IsCustomControl();
    private ActionRendering get_Rendering();
    internal ActionProcessing get_Processing();
    public void SetHyperlinkAction(string hyperlink);
    public void SetHyperlinkAction(string hyperlink, string label);
    public void SetDrillthroughAction(string reportName);
    public void SetDrillthroughAction(string reportName, NameValueCollection parameters);
    public void SetDrillthroughAction(string reportName, NameValueCollection parameters, string label);
    public void SetBookmarkAction(string bookmark);
    public void SetBookmarkAction(string bookmark, string label);
    internal Action DeepClone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ActionCollection : object {
    private MemberBase m_members;
    public Action Item { get; }
    public int Count { get; }
    private bool IsCustomControl { get; }
    private ActionCollectionRendering Rendering { get; }
    private ActionCollectionProcessing Processing { get; }
    internal ActionCollection(ActionItemList actionItemList, ActionItemInstanceList actionItemInstanceList, string ownerUniqueName, RenderingContext renderingContext);
    public Action get_Item(int index);
    public int get_Count();
    public void Add(Action action);
    private bool get_IsCustomControl();
    private ActionCollectionRendering get_Rendering();
    private ActionCollectionProcessing get_Processing();
    internal ActionCollection DeepClone();
}
internal class Microsoft.ReportingServices.ReportRendering.ActionCollectionProcessing : MemberBase {
    internal ArrayList m_actions;
    internal ActionCollectionProcessing DeepClone();
}
internal class Microsoft.ReportingServices.ReportRendering.ActionCollectionRendering : MemberBase {
    internal ActionItemList m_actionList;
    internal ActionItemInstanceList m_actionInstanceList;
    internal RenderingContext m_renderingContext;
    internal Action[] m_actions;
    internal string m_ownerUniqueName;
}
internal class Microsoft.ReportingServices.ReportRendering.ActionInfo : object {
    private MemberBase m_members;
    public ActionCollection Actions { get; public set; }
    public ActionStyle Style { get; public set; }
    internal Action ActionInfoDef { get; }
    internal ActionInstance ActionInfoInstance { get; }
    private bool IsCustomControl { get; }
    private ActionInfoRendering Rendering { get; }
    private ActionInfoProcessing Processing { get; }
    internal ActionInfo(Action actionDef, ActionInstance actionInstance, string ownerUniqueName, RenderingContext renderingContext);
    public ActionCollection get_Actions();
    public void set_Actions(ActionCollection value);
    public ActionStyle get_Style();
    public void set_Style(ActionStyle value);
    internal Action get_ActionInfoDef();
    internal ActionInstance get_ActionInfoInstance();
    private bool get_IsCustomControl();
    private ActionInfoRendering get_Rendering();
    private ActionInfoProcessing get_Processing();
    internal ActionInfo DeepClone();
    internal void Deconstruct(int uniqueName, Action& action, ActionInstance& actionInstance, CustomReportItem context);
}
internal class Microsoft.ReportingServices.ReportRendering.ActionInfoProcessing : MemberBase {
    internal ActionStyle m_style;
    internal ActionCollection m_actionCollection;
    internal DataValueInstanceList m_sharedStyles;
    internal DataValueInstanceList m_nonSharedStyles;
    internal ActionInfoProcessing DeepClone();
}
internal class Microsoft.ReportingServices.ReportRendering.ActionInfoRendering : MemberBase {
    internal Action m_actionInfoDef;
    internal ActionInstance m_actionInfoInstance;
    internal RenderingContext m_renderingContext;
    internal ActionStyle m_style;
    internal ActionCollection m_actionCollection;
    internal string m_ownerUniqueName;
}
internal class Microsoft.ReportingServices.ReportRendering.ActionProcessing : MemberBase {
    internal string m_label;
    internal string m_action;
    internal ActionProcessing DeepClone();
}
internal class Microsoft.ReportingServices.ReportRendering.ActionRendering : MemberBase {
    internal ActionItem m_actionDef;
    internal ReportUrl m_actionURL;
    internal ActionItemInstance m_actionInstance;
    internal RenderingContext m_renderingContext;
    internal string m_drillthroughId;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ActionStyle : StyleBase {
    private ActionInfo m_actionInfo;
    public int Count { get; }
    public ICollection Keys { get; }
    public object Item { get; }
    public StyleProperties SharedProperties { get; }
    public StyleProperties NonSharedProperties { get; }
    internal ActionStyle(ActionInfo actionInfo, RenderingContext context);
    public virtual int get_Count();
    public virtual ICollection get_Keys();
    public virtual object get_Item(string styleName);
    public virtual StyleProperties get_SharedProperties();
    public virtual StyleProperties get_NonSharedProperties();
    private bool NeedPopulateSharedProps();
    private bool NeedPopulateNonSharedProps();
    internal virtual object GetStyleAttributeValue(string styleName, AttributeInfo attribute);
    internal virtual void PopulateStyleProperties(bool populateAll);
    private void PopulateNonSharedStyleProperties();
    private void InternalPopulateNonSharedStyleProperties(StyleAttributeHashtable styleAttributes);
    private object CreateProperty(string styleName, object styleValue);
}
internal enum Microsoft.ReportingServices.ReportRendering.ActionType : Enum {
    public int value__;
    public static ActionType None;
    public static ActionType HyperLink;
    public static ActionType DrillThrough;
    public static ActionType BookmarkLink;
}
internal class Microsoft.ReportingServices.ReportRendering.ActiveXControl : ReportItem {
    private ParameterCollection m_parameters;
    private ReportUrl m_codeBase;
    public string ClassID { get; }
    public ReportUrl CodeBase { get; }
    public ParameterCollection Parameters { get; }
    internal ActiveXControl(string uniqueName, int intUniqueName, ActiveXControl reportItemDef, ActiveXControlInstance reportItemInstance, RenderingContext renderingContext);
    public string get_ClassID();
    public ReportUrl get_CodeBase();
    public ParameterCollection get_Parameters();
}
internal class Microsoft.ReportingServices.ReportRendering.BackgroundImage : object {
    private InternalImage m_internalImage;
    public Byte[] ImageData { get; }
    public string MIMEType { get; }
    public string StreamName { get; }
    internal BackgroundImage(RenderingContext context, SourceType imageSource, object imageValue, string mimeType);
    public sealed virtual Byte[] get_ImageData();
    public sealed virtual string get_MIMEType();
    public sealed virtual string get_StreamName();
}
internal class Microsoft.ReportingServices.ReportRendering.Bookmark : object {
    private BookmarkInformation m_underlyingNode;
    private string m_bookmarkId;
    public string BookmarkId { get; }
    public string UniqueName { get; }
    public int Page { get; }
    internal Bookmark(string bookmarkId, BookmarkInformation underlyingNode);
    public string get_BookmarkId();
    public string get_UniqueName();
    public int get_Page();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.Bookmarks : object {
    private BookmarksHashtable m_reportBookmarks;
    public Bookmark Item { get; }
    public IDictionaryEnumerator BookmarksEnumerator { get; }
    internal Bookmarks(BookmarksHashtable reportBookmarks);
    public Bookmark get_Item(string bookmarkId);
    public IDictionaryEnumerator get_BookmarksEnumerator();
}
internal enum Microsoft.ReportingServices.ReportRendering.ChangeType : Enum {
    public int value__;
    public static ChangeType None;
    public static ChangeType Render;
    public static ChangeType Process;
    public static ChangeType Data;
    public static ChangeType Action;
}
internal class Microsoft.ReportingServices.ReportRendering.Chart : DataRegion {
    private ChartDataPointCollection m_datapoints;
    private ChartMemberCollection m_categories;
    private ChartMemberCollection m_series;
    private int m_categoryGroupingLevels;
    private ImageMapAreasCollection[] m_imageMapAreaCollection;
    private float m_scaleX;
    private float m_scaleY;
    public ChartDataPointCollection DataPointCollection { get; }
    public ChartMemberCollection CategoryMemberCollection { get; }
    public ChartMemberCollection SeriesMemberCollection { get; }
    public int DataPointCategoryCount { get; }
    public int DataPointSeriesCount { get; }
    public int CategoriesCount { get; }
    public int SeriesCount { get; }
    public bool NoRows { get; }
    internal ChartDataPointInstancesList DataPoints { get; }
    internal int CategoryGroupingLevels { get; }
    internal string InstanceInfoNoRowMessage { get; }
    internal ImageMapAreasCollection[] DataPointMapAreas { get; }
    internal float ScaleX { get; internal set; }
    internal float ScaleY { get; internal set; }
    internal Chart(int intUniqueName, Chart reportItemDef, ChartInstance reportItemInstance, RenderingContext renderingContext);
    public ChartDataPointCollection get_DataPointCollection();
    public ChartMemberCollection get_CategoryMemberCollection();
    public ChartMemberCollection get_SeriesMemberCollection();
    public int get_DataPointCategoryCount();
    public int get_DataPointSeriesCount();
    public int get_CategoriesCount();
    public int get_SeriesCount();
    public virtual bool get_NoRows();
    internal ChartDataPointInstancesList get_DataPoints();
    internal int get_CategoryGroupingLevels();
    internal virtual string get_InstanceInfoNoRowMessage();
    internal ImageMapAreasCollection[] get_DataPointMapAreas();
    internal float get_ScaleX();
    internal void set_ScaleX(float value);
    internal float get_ScaleY();
    internal void set_ScaleY(float value);
    public void SetDpi(int xDpi, int yDpi);
    public MemoryStream GetImage(Boolean& hasImageMap);
    public MemoryStream GetImage();
    public MemoryStream GetImage(ImageType type);
    public MemoryStream GetImage(ImageType type, Boolean& hasImageMap);
    private bool RenderChartImageMap();
}
internal class Microsoft.ReportingServices.ReportRendering.ChartDataPoint : object {
    private Chart m_owner;
    private int m_seriesIndex;
    private int m_categoryIndex;
    private ChartDataPointInstance m_chartDataPointInstance;
    private ChartDataPointInstanceInfo m_chartDataPointInstanceInfo;
    private CustomPropertyCollection m_customProperties;
    private ActionInfo m_actionInfo;
    public Object[] DataValues { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ImageMapAreasCollection MapAreas { get; }
    public ReportUrl HyperLinkURL { get; }
    public ReportUrl DrillthroughReport { get; }
    public NameValueCollection DrillthroughParameters { get; }
    public string BookmarkLink { get; }
    public ActionInfo ActionInfo { get; }
    internal ChartDataPointInstanceInfo InstanceInfo { get; }
    private ChartDataPoint ChartDataPointDefinition { get; }
    internal ChartDataPoint(Chart owner, int seriesIndex, int categoryIndex);
    public Object[] get_DataValues();
    public string get_DataElementName();
    public DataElementOutputTypes get_DataElementOutput();
    public CustomPropertyCollection get_CustomProperties();
    public ImageMapAreasCollection get_MapAreas();
    public ReportUrl get_HyperLinkURL();
    public ReportUrl get_DrillthroughReport();
    public NameValueCollection get_DrillthroughParameters();
    public string get_BookmarkLink();
    public ActionInfo get_ActionInfo();
    private int IndexDataPointDefinition(Chart chartDef);
    internal ChartDataPointInstanceInfo get_InstanceInfo();
    private ChartDataPoint get_ChartDataPointDefinition();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ChartDataPointCollection : object {
    private Chart m_owner;
    private int m_categoryCount;
    private int m_seriesCount;
    private ChartDataPoint m_firstDataPoint;
    private ChartSeriesDataPoints m_firstCategoryDataPoints;
    private ChartSeriesDataPoints m_firstSeriesDataPoints;
    private ChartSeriesDataPoints[] m_dataPoints;
    public ChartDataPoint Item { get; }
    public int Count { get; }
    public int SeriesCount { get; }
    public int CategoryCount { get; }
    internal ChartDataPointCollection(Chart owner, int seriesCount, int categoryCount);
    public ChartDataPoint get_Item(int series, int category);
    public int get_Count();
    public int get_SeriesCount();
    public int get_CategoryCount();
}
internal class Microsoft.ReportingServices.ReportRendering.ChartMember : Group {
    private ChartHeading m_headingDef;
    private ChartHeadingInstance m_headingInstance;
    private ChartHeadingInstanceInfo m_headingInstanceInfo;
    private ChartMemberCollection m_children;
    private ChartMember m_parent;
    private int m_index;
    private int m_cachedMemberDataPointIndex;
    public string ID { get; }
    internal TextBox ToggleParent { get; }
    public SharedHiddenState SharedHidden { get; }
    public bool IsToggleChild { get; }
    public bool Hidden { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public string Label { get; }
    public object MemberLabel { get; }
    public ChartMember Parent { get; }
    public bool IsInnerMostMember { get; }
    public ChartMemberCollection Children { get; }
    public int MemberDataPointIndex { get; }
    internal int CachedMemberDataPointIndex { get; }
    public int MemberHeadingSpan { get; }
    private bool IsFakedStatic { get; }
    public bool IsStatic { get; }
    public SortOrders SortOrder { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal ExpressionInfo LabelDefinition { get; }
    internal object LabelValue { get; }
    internal ChartHeadingInstanceInfo InstanceInfo { get; }
    internal ChartMember(Chart owner, ChartMember parent, ChartHeading headingDef, ChartHeadingInstance headingInstance, int index);
    public virtual string get_ID();
    internal virtual TextBox get_ToggleParent();
    public virtual SharedHiddenState get_SharedHidden();
    public virtual bool get_IsToggleChild();
    public virtual bool get_Hidden();
    public virtual CustomPropertyCollection get_CustomProperties();
    public virtual string get_Label();
    public object get_MemberLabel();
    public ChartMember get_Parent();
    public bool get_IsInnerMostMember();
    public ChartMemberCollection get_Children();
    public int get_MemberDataPointIndex();
    internal int get_CachedMemberDataPointIndex();
    public int get_MemberHeadingSpan();
    private bool get_IsFakedStatic();
    public bool get_IsStatic();
    public SortOrders get_SortOrder();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    internal ExpressionInfo get_LabelDefinition();
    internal object get_LabelValue();
    internal ChartHeadingInstanceInfo get_InstanceInfo();
    public DataElementOutputTypes DataElementOutputForStatic(ChartMember staticHeading);
    internal bool IsPlotTypeLine();
    private DataElementOutputTypes GetDataElementOutputTypeFromDataPoint(int seriesIndex, int categoryIndex);
    private DataElementOutputTypes GetDataElementOutputTypeForSeriesCategory(int index);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ChartMemberCollection : object {
    private Chart m_owner;
    private ChartHeading m_headingDef;
    private ChartHeadingInstanceList m_headingInstances;
    private ChartMember[] m_members;
    private ChartMember m_firstMember;
    private ChartMember m_parent;
    public ChartMember Item { get; }
    public int Count { get; }
    internal ChartMemberCollection(Chart owner, ChartMember parent, ChartHeading headingDef, ChartHeadingInstanceList headingInstances);
    public ChartMember get_Item(int index);
    public int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ChartSeriesDataPoints : object {
    private int m_count;
    private ChartDataPoint[] m_seriesCells;
    internal ChartDataPoint Item { get; internal set; }
    internal ChartSeriesDataPoints(int count);
    internal ChartDataPoint get_Item(int index);
    internal void set_Item(int index, ChartDataPoint value);
}
internal class Microsoft.ReportingServices.ReportRendering.CheckBox : ReportItem {
    public bool Value { get; }
    public bool HideDuplicates { get; }
    public bool Duplicate { get; }
    internal CheckBox(string uniqueName, int intUniqueName, CheckBox reportItemDef, CheckBoxInstance reportItemInstance, RenderingContext renderingContext);
    public bool get_Value();
    public bool get_HideDuplicates();
    public bool get_Duplicate();
}
internal class Microsoft.ReportingServices.ReportRendering.CustomData : object {
    private CustomReportItem m_owner;
    private DataCellCollection m_datacells;
    private DataGroupingCollection m_columns;
    private DataGroupingCollection m_rows;
    public bool NoRows { get; }
    public DataCellCollection DataCells { get; }
    public DataGroupingCollection DataColumnGroupings { get; }
    public DataGroupingCollection DataRowGroupings { get; }
    internal CustomData(CustomReportItem owner);
    public bool get_NoRows();
    public DataCellCollection get_DataCells();
    public DataGroupingCollection get_DataColumnGroupings();
    public DataGroupingCollection get_DataRowGroupings();
}
internal class Microsoft.ReportingServices.ReportRendering.CustomProperty : object {
    private string m_name;
    private object m_value;
    public string Name { get; }
    public object Value { get; }
    public CustomProperty(string name, object value);
    public string get_Name();
    public object get_Value();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.CustomPropertyCollection : object {
    private DataValueInstanceList m_instances;
    private DataValueList m_expressions;
    private bool m_isCustomControl;
    private bool m_populated;
    private Hashtable m_uniqueNames;
    private IntList m_expressionIndex;
    public CustomProperty Item { get; }
    public CustomProperty Item { get; }
    public int Count { get; }
    internal bool IsCustomControl { get; }
    internal CustomPropertyCollection(DataValueList expressions, DataValueInstanceList instances);
    public CustomProperty get_Item(string name);
    public CustomProperty get_Item(int index);
    public int get_Count();
    internal bool get_IsCustomControl();
    public void Add(string propertyName, object propertyValue);
    public void Add(CustomProperty property);
    internal CustomPropertyCollection DeepClone();
    private void Populate();
    internal void GetNameValue(int index, String& name, Object& value);
    internal void GetNameValueExpressions(int index, ExpressionInfo& nameExpression, ExpressionInfo& valueExpression, String& name, Object& value);
    private void InternalAdd(string name, object value);
    internal DataValueInstanceList Deconstruct();
}
internal class Microsoft.ReportingServices.ReportRendering.CustomReportItem : ReportItem {
    private ReportItem m_altReportItem;
    private CustomData m_customData;
    private bool m_isProcessing;
    private NonComputedUniqueNames[] m_childrenNonComputedUniqueNames;
    public string Type { get; }
    public ReportItem AltReportItem { get; }
    public CustomData CustomData { get; }
    public bool Hidden { get; }
    internal TextBox ToggleParent { get; }
    public bool IsToggleChild { get; }
    public object SharedRenderingInfo { get; public set; }
    public object RenderingInfo { get; public set; }
    internal CustomReportItem CriDefinition { get; }
    internal CustomReportItemInstance CriInstance { get; }
    internal RenderingContext RenderingContext { get; }
    internal CustomReportItem(CustomReportItem criDef, CustomReportItemInstance criInstance, CustomReportItemInstanceInfo instanceInfo);
    internal CustomReportItem(string uniqueName, int intUniqueName, ReportItem reportItemDef, ReportItemInstance reportItemInstance, RenderingContext renderingContext, NonComputedUniqueNames[] childrenNonComputedUniqueNames);
    public string get_Type();
    public ReportItem get_AltReportItem();
    public CustomData get_CustomData();
    public virtual bool get_Hidden();
    internal TextBox get_ToggleParent();
    public bool get_IsToggleChild();
    public virtual object get_SharedRenderingInfo();
    public virtual void set_SharedRenderingInfo(object value);
    public object get_RenderingInfo();
    public void set_RenderingInfo(object value);
    internal CustomReportItem get_CriDefinition();
    internal CustomReportItemInstance get_CriInstance();
    internal RenderingContext get_RenderingContext();
}
internal class Microsoft.ReportingServices.ReportRendering.DataCell : object {
    private CustomReportItem m_owner;
    private int m_rowIndex;
    private int m_columnIndex;
    private CustomReportItemCellInstance m_cellInstance;
    private DataValueCollection m_dataValueCollection;
    public DataValueCollection DataValues { get; }
    internal int ColumnIndex { get; }
    internal int RowIndex { get; }
    internal DataCell(CustomReportItem owner, int rowIndex, int columnIndex);
    public DataValueCollection get_DataValues();
    internal int get_ColumnIndex();
    internal int get_RowIndex();
    private DataValueCRIList GetCellDefinition();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.DataCellCollection : object {
    private CustomReportItem m_owner;
    private int m_columnsCount;
    private int m_rowsCount;
    private DataCell m_firstCell;
    private DataRowCells m_firstColumnCells;
    private DataRowCells m_firstRowCells;
    private DataRowCells[] m_cells;
    public DataCell Item { get; }
    public int Count { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    internal DataCellCollection(CustomReportItem owner, int rowsCount, int columnsCount);
    public DataCell get_Item(int row, int column);
    public int get_Count();
    public int get_RowCount();
    public int get_ColumnCount();
}
internal enum Microsoft.ReportingServices.ReportRendering.DataElementOutputTypes : Enum {
    public int value__;
    public static DataElementOutputTypes Output;
    public static DataElementOutputTypes NoOutput;
    public static DataElementOutputTypes ContentsOnly;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.DataGroupingCollection : object {
    private CustomReportItem m_owner;
    private CustomReportItemHeadingList m_headingDef;
    private CustomReportItemHeadingInstanceList m_headingInstances;
    private DataMemberCollection[] m_collections;
    private DataMemberCollection m_firstCollection;
    private DataMember m_parent;
    public DataMemberCollection Item { get; }
    public int Count { get; }
    internal DataGroupingCollection(CustomReportItem owner, DataMember parent, CustomReportItemHeadingList headingDef, CustomReportItemHeadingInstanceList headingInstances);
    public DataMemberCollection get_Item(int index);
    public int get_Count();
}
internal class Microsoft.ReportingServices.ReportRendering.DataMember : Group {
    private CustomReportItemHeading m_headingDef;
    private CustomReportItemHeadingInstance m_headingInstance;
    private DataGroupingCollection m_children;
    private DataMember m_parent;
    private bool m_isSubtotal;
    private int m_index;
    public string ID { get; }
    internal TextBox ToggleParent { get; }
    public bool IsToggleChild { get; }
    public SharedHiddenState SharedHidden { get; }
    public bool Hidden { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ValueCollection GroupValues { get; }
    public string Label { get; }
    public DataMember Parent { get; }
    public DataGroupingCollection Children { get; }
    public bool IsTotal { get; }
    public int MemberCellIndex { get; }
    public int MemberHeadingSpan { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public bool IsStatic { get; }
    internal DataMember(CustomReportItem owner, DataMember parent, CustomReportItemHeading headingDef, CustomReportItemHeadingInstance headingInstance, bool isSubtotal, int index);
    public virtual string get_ID();
    internal virtual TextBox get_ToggleParent();
    public virtual bool get_IsToggleChild();
    public virtual SharedHiddenState get_SharedHidden();
    public virtual bool get_Hidden();
    public virtual CustomPropertyCollection get_CustomProperties();
    public ValueCollection get_GroupValues();
    public virtual string get_Label();
    public DataMember get_Parent();
    public DataGroupingCollection get_Children();
    public bool get_IsTotal();
    public int get_MemberCellIndex();
    public int get_MemberHeadingSpan();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public bool get_IsStatic();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.DataMemberCollection : object {
    private CustomReportItem m_owner;
    private CustomReportItemHeading m_headingDef;
    private CustomReportItemHeadingInstanceList m_headingInstances;
    private DataMember[] m_members;
    private DataMember m_firstMember;
    private DataMember m_parent;
    private bool m_isSubtotal;
    public DataMember Item { get; }
    public int Count { get; }
    internal DataMemberCollection(CustomReportItem owner, DataMember parent, CustomReportItemHeading headingDef, bool headingDefIsStaticSubtotal, CustomReportItemHeadingInstanceList headingInstances);
    public DataMember get_Item(int index);
    public int get_Count();
}
internal abstract class Microsoft.ReportingServices.ReportRendering.DataRegion : ReportItem {
    public bool PageBreakAtEnd { get; }
    public bool PageBreakAtStart { get; }
    public bool KeepTogether { get; }
    public bool NoRows { get; }
    public string NoRowMessage { get; }
    internal string InstanceInfoNoRowMessage { get; }
    public string DataSetName { get; }
    internal DataRegion(int intUniqueName, ReportItem reportItemDef, ReportItemInstance reportItemInstance, RenderingContext renderingContext);
    public virtual bool get_PageBreakAtEnd();
    public virtual bool get_PageBreakAtStart();
    public virtual bool get_KeepTogether();
    public virtual bool get_NoRows();
    public string get_NoRowMessage();
    internal abstract virtual string get_InstanceInfoNoRowMessage();
    public string get_DataSetName();
    public Int32[] GetRepeatSiblings();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.DataRowCells : object {
    private int m_count;
    private DataCell[] m_rowCells;
    internal DataCell Item { get; internal set; }
    internal DataRowCells(int count);
    internal DataCell get_Item(int index);
    internal void set_Item(int index, DataCell value);
}
internal class Microsoft.ReportingServices.ReportRendering.DataValue : object {
    private string m_name;
    private object m_value;
    public string Name { get; }
    public object Value { get; }
    internal DataValue(string name, object value);
    public string get_Name();
    public object get_Value();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.DataValueCollection : object {
    private DataValueInstanceList m_instances;
    private DataValueCRIList m_expressions;
    public DataValue Item { get; }
    public int Count { get; }
    internal DataValueCollection(DataValueCRIList expressions, DataValueInstanceList instances);
    public DataValue get_Item(int index);
    public int get_Count();
}
internal class Microsoft.ReportingServices.ReportRendering.DocumentMapNode : object {
    private DocumentMapNode m_underlyingNode;
    private DocumentMapNode[] m_childrenWrappers;
    private object m_nonPersistedRenderingInfo;
    public string Label { get; }
    public string UniqueName { get; }
    public int Page { get; }
    public object NonPersistedRenderingInfo { get; public set; }
    public DocumentMapNode[] Children { get; }
    internal DocumentMapNode(DocumentMapNode underlyingNode);
    public string get_Label();
    public string get_UniqueName();
    public int get_Page();
    public object get_NonPersistedRenderingInfo();
    public void set_NonPersistedRenderingInfo(object value);
    public DocumentMapNode[] get_Children();
}
internal abstract class Microsoft.ReportingServices.ReportRendering.Group : object {
    protected ReportItem m_ownerItem;
    internal Grouping m_groupingDef;
    internal Visibility m_visibilityDef;
    protected int m_uniqueName;
    protected CustomPropertyCollection m_customProperties;
    public string Name { get; }
    public string ID { get; }
    public string UniqueName { get; }
    public string Label { get; }
    public bool PageBreakAtEnd { get; }
    public bool PageBreakAtStart { get; }
    public string Custom { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public bool Hidden { get; }
    public bool HasToggle { get; }
    public string ToggleItem { get; }
    internal TextBox ToggleParent { get; }
    public SharedHiddenState SharedHidden { get; }
    public bool IsToggleChild { get; }
    public string DataElementName { get; }
    public string DataCollectionName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal DataRegion OwnerDataRegion { get; }
    internal Group(CustomReportItem owner, Grouping groupingDef);
    internal Group(DataRegion owner, Grouping groupingDef, Visibility visibilityDef);
    public string get_Name();
    public abstract virtual string get_ID();
    public string get_UniqueName();
    public abstract virtual string get_Label();
    public virtual bool get_PageBreakAtEnd();
    public virtual bool get_PageBreakAtStart();
    public string get_Custom();
    public abstract virtual CustomPropertyCollection get_CustomProperties();
    public abstract virtual bool get_Hidden();
    public virtual bool get_HasToggle();
    public virtual string get_ToggleItem();
    internal virtual TextBox get_ToggleParent();
    public virtual SharedHiddenState get_SharedHidden();
    public virtual bool get_IsToggleChild();
    public virtual string get_DataElementName();
    public virtual string get_DataCollectionName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    internal DataRegion get_OwnerDataRegion();
}
internal interface Microsoft.ReportingServices.ReportRendering.IChartStream {
    public abstract virtual void Write(string theString);
}
internal interface Microsoft.ReportingServices.ReportRendering.ICustomReportItem {
    unknown CustomReportItem CustomItem {public set; }
    public ReportItem RenderItem { get; }
    public Action Action { get; }
    public abstract virtual void set_CustomItem(CustomReportItem value);
    public abstract virtual ReportItem get_RenderItem();
    public abstract virtual Action get_Action();
    public abstract virtual ChangeType Process();
}
internal interface Microsoft.ReportingServices.ReportRendering.IDeepCloneable {
    public abstract virtual ReportItem DeepClone();
}
internal interface Microsoft.ReportingServices.ReportRendering.IImage {
    public Byte[] ImageData { get; }
    public string MIMEType { get; }
    public string StreamName { get; }
    public abstract virtual Byte[] get_ImageData();
    public abstract virtual string get_MIMEType();
    public abstract virtual string get_StreamName();
}
internal class Microsoft.ReportingServices.ReportRendering.Image : ReportItem {
    private ImageBase m_internalImage;
    private ActionInfo m_actionInfo;
    private ImageMapAreasCollection m_imageMap;
    public Byte[] ImageData { get; public set; }
    public string MIMEType { get; public set; }
    public string StreamName { get; }
    public ReportUrl HyperLinkURL { get; }
    public ReportUrl DrillthroughReport { get; }
    public NameValueCollection DrillthroughParameters { get; }
    public string BookmarkLink { get; }
    public ActionInfo ActionInfo { get; public set; }
    public Sizings Sizing { get; public set; }
    public ImageMapAreasCollection ImageMap { get; public set; }
    private InternalImage Rendering { get; }
    internal ImageProcessing Processing { get; }
    public Image(string definitionName, string instanceName);
    internal Image(string uniqueName, int intUniqueName, Image reportItemDef, ImageInstance reportItemInstance, RenderingContext renderingContext);
    public sealed virtual Byte[] get_ImageData();
    public void set_ImageData(Byte[] value);
    public sealed virtual string get_MIMEType();
    public void set_MIMEType(string value);
    public sealed virtual string get_StreamName();
    public ReportUrl get_HyperLinkURL();
    public ReportUrl get_DrillthroughReport();
    public NameValueCollection get_DrillthroughParameters();
    public string get_BookmarkLink();
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public Sizings get_Sizing();
    public void set_Sizing(Sizings value);
    public ImageMapAreasCollection get_ImageMap();
    public void set_ImageMap(ImageMapAreasCollection value);
    private InternalImage get_Rendering();
    internal ImageProcessing get_Processing();
    private sealed virtual override ReportItem Microsoft.ReportingServices.ReportRendering.IDeepCloneable.DeepClone();
}
internal class Microsoft.ReportingServices.ReportRendering.ImageBase : object {
}
internal class Microsoft.ReportingServices.ReportRendering.ImageMapArea : object {
    private string m_id;
    private ImageMapAreaShape m_shape;
    private Single[] m_coordinates;
    private ActionInfo m_actionInfo;
    private MemberBase m_members;
    public string ID { get; public set; }
    public ActionInfo ActionInfo { get; public set; }
    public ImageMapAreaShape Shape { get; }
    public Single[] Coordinates { get; }
    private bool IsCustomControl { get; }
    private ImageMapAreaRendering Rendering { get; }
    internal ImageMapArea(ImageMapAreaInstance mapAreaInstance, RenderingContext renderingContext);
    public string get_ID();
    public void set_ID(string value);
    public ActionInfo get_ActionInfo();
    public void set_ActionInfo(ActionInfo value);
    public ImageMapAreaShape get_Shape();
    public Single[] get_Coordinates();
    private bool get_IsCustomControl();
    private ImageMapAreaRendering get_Rendering();
    public void SetCoordinates(ImageMapAreaShape shape, Single[] coordinates);
    internal ImageMapArea DeepClone();
    internal ImageMapAreaInstance Deconstruct(CustomReportItem context);
}
internal class Microsoft.ReportingServices.ReportRendering.ImageMapAreaProcessing : MemberBase {
}
internal class Microsoft.ReportingServices.ReportRendering.ImageMapAreaRendering : MemberBase {
    internal ImageMapAreaInstance m_mapAreaInstance;
    internal RenderingContext m_renderingContext;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ImageMapAreasCollection : object {
    private RenderingContext m_renderingContext;
    private ArrayList m_list;
    public ImageMapArea Item { get; }
    private bool IsChartOrCustomControlImageMap { get; }
    public int Count { get; }
    public ImageMapAreasCollection(int capacity);
    internal ImageMapAreasCollection(ImageMapAreaInstanceList mapAreasInstances, RenderingContext renderingContext);
    public ImageMapArea get_Item(int index);
    private bool get_IsChartOrCustomControlImageMap();
    public int get_Count();
    public void Add(ImageMapArea mapArea);
    internal ImageMapAreasCollection DeepClone();
    internal ImageMapAreaInstanceList Deconstruct(ProcessingContext processingContext, CustomReportItem context);
}
internal class Microsoft.ReportingServices.ReportRendering.ImageProcessing : ImageBase {
    internal Byte[] m_imageData;
    internal string m_mimeType;
    internal Sizings m_sizing;
    internal ImageProcessing DeepClone();
}
internal class Microsoft.ReportingServices.ReportRendering.InternalImage : ImageBase {
    private SourceType m_imageType;
    private object m_valueObject;
    private RenderingContext m_renderingContext;
    private bool m_transparent;
    private static Byte[] m_transparentImage;
    private Byte[] m_imageData;
    private string m_MIMEType;
    private WeakReference m_imageDataRef;
    private string m_streamName;
    private ImageMapAreaInstanceList m_imageMapAreas;
    internal Byte[] ImageData { get; }
    internal string MIMEType { get; }
    internal string StreamName { get; }
    internal ImageMapAreaInstanceList ImageMapAreaInstances { get; }
    private string ImageValue { get; }
    private ImageData Data { get; }
    internal static Byte[] TransparentImage { get; }
    internal InternalImage(SourceType imgType, string mimeType, object valueObject, RenderingContext rc);
    internal InternalImage(SourceType imgType, string mimeType, object valueObject, RenderingContext rc, bool brokenImage, ImageMapAreaInstanceList imageMapAreas);
    internal Byte[] get_ImageData();
    internal string get_MIMEType();
    internal string get_StreamName();
    internal ImageMapAreaInstanceList get_ImageMapAreaInstances();
    private string get_ImageValue();
    private ImageData get_Data();
    private static void ReadStream(Stream input, Byte[]& streamContents);
    internal static Byte[] get_TransparentImage();
    private void GetImageData(Byte[]& imageData, String& mimeType);
    private void GetImageInfo(String& streamName, String& mimeType);
    private void GetImageMimeType(String& mimeType);
    private string GetUrlString();
}
internal class Microsoft.ReportingServices.ReportRendering.Line : ReportItem {
    public bool Slant { get; }
    internal Line(string uniqueName, int intUniqueName, Line reportItemDef, LineInstance reportItemInstance, RenderingContext renderingContext);
    public bool get_Slant();
}
internal class Microsoft.ReportingServices.ReportRendering.List : DataRegion {
    private ListContentCollection m_contents;
    public bool PageBreakAtEnd { get; }
    public bool PageBreakAtStart { get; }
    public bool GroupBreakAtStart { get; }
    public bool GroupBreakAtEnd { get; }
    public ListContentCollection Contents { get; }
    public bool NoRows { get; }
    internal string InstanceInfoNoRowMessage { get; }
    internal List(int intUniqueName, List reportItemDef, ListInstance reportItemInstance, RenderingContext renderingContext);
    public virtual bool get_PageBreakAtEnd();
    public virtual bool get_PageBreakAtStart();
    public bool get_GroupBreakAtStart();
    public bool get_GroupBreakAtEnd();
    public ListContentCollection get_Contents();
    public virtual bool get_NoRows();
    internal virtual string get_InstanceInfoNoRowMessage();
    public bool IsListContentOnThisPage(int contentIndex, int pageNumber, int listStartPage, Int32& startPage, Int32& endPage);
    public void GetListContentOnPage(int page, int listStartPage, Int32& startChild, Int32& endChild);
    internal virtual bool Search(SearchContext searchContext);
    internal static bool SearchPartialList(ListContentCollection contents, SearchContext searchContext, int startChild, int endChild);
    internal static bool SearchFullList(ListContentCollection contents, SearchContext searchContext);
}
internal class Microsoft.ReportingServices.ReportRendering.ListContent : Group {
    private ListContentInstance m_listContentInstance;
    private ListContentInstanceInfo m_listContentInstanceInfo;
    private ReportItemCollection m_reportItemCollection;
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    public string ID { get; }
    public ReportItemCollection ReportItemCollection { get; }
    public string Label { get; }
    public bool InDocumentMap { get; }
    public bool Hidden { get; }
    public CustomPropertyCollection CustomProperties { get; }
    internal ListContentInstanceInfo InstanceInfo { get; }
    internal ListContent(List owner, int instanceIndex);
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    public virtual string get_ID();
    public ReportItemCollection get_ReportItemCollection();
    public virtual string get_Label();
    public sealed virtual bool get_InDocumentMap();
    public virtual bool get_Hidden();
    public virtual CustomPropertyCollection get_CustomProperties();
    internal ListContentInstanceInfo get_InstanceInfo();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ListContentCollection : object {
    private List m_owner;
    private ListContent[] m_listContents;
    private ListContent m_firstListContent;
    public ListContent Item { get; }
    public int Count { get; }
    internal ListContentCollection(List owner);
    public ListContent get_Item(int index);
    public int get_Count();
}
internal class Microsoft.ReportingServices.ReportRendering.Matrix : DataRegion {
    private ReportItem m_corner;
    private MatrixCellCollection m_cells;
    private MatrixMemberCollection m_columns;
    private MatrixMemberCollection m_rows;
    private int m_groupsBeforeRowHeaders;
    private int m_cellsBeforeRowHeaders;
    private SizeCollection m_cellWidths;
    private SizeCollection m_cellHeights;
    private bool m_noRows;
    private List`1<int> m_rowMemberMapping;
    private List`1<int> m_colMemberMapping;
    public MatrixLayoutDirection LayoutDirection { get; }
    public bool PageBreakAtEnd { get; }
    public bool PageBreakAtStart { get; }
    public bool GroupBreakAtStart { get; }
    public bool GroupBreakAtEnd { get; }
    public ReportItem Corner { get; }
    public MatrixCellCollection CellCollection { get; }
    public MatrixMemberCollection ColumnMemberCollection { get; }
    public MatrixMemberCollection RowMemberCollection { get; }
    public int CellColumns { get; }
    public int CellRows { get; }
    public int MatrixPages { get; }
    public int PageBreakRow { get; }
    public int Columns { get; }
    public int Rows { get; }
    public bool NoRows { get; }
    public int GroupsBeforeRowHeaders { get; }
    public int CellsBeforeRowHeaders { get; }
    public SizeCollection CellWidths { get; }
    public SizeCollection CellHeights { get; }
    public bool UseOWC { get; }
    internal string InstanceInfoNoRowMessage { get; }
    public bool RowGroupingFixedHeader { get; }
    public bool ColumnGroupingFixedHeader { get; }
    internal Matrix(int intUniqueName, Matrix reportItemDef, MatrixInstance reportItemInstance, RenderingContext renderingContext);
    public MatrixLayoutDirection get_LayoutDirection();
    public virtual bool get_PageBreakAtEnd();
    public virtual bool get_PageBreakAtStart();
    public bool get_GroupBreakAtStart();
    public bool get_GroupBreakAtEnd();
    public ReportItem get_Corner();
    public MatrixCellCollection get_CellCollection();
    public MatrixMemberCollection get_ColumnMemberCollection();
    public MatrixMemberCollection get_RowMemberCollection();
    public int get_CellColumns();
    public int get_CellRows();
    public int get_MatrixPages();
    public int get_PageBreakRow();
    public int get_Columns();
    public int get_Rows();
    public virtual bool get_NoRows();
    public int get_GroupsBeforeRowHeaders();
    public int get_CellsBeforeRowHeaders();
    public SizeCollection get_CellWidths();
    public SizeCollection get_CellHeights();
    public bool get_UseOWC();
    internal virtual string get_InstanceInfoNoRowMessage();
    public bool get_RowGroupingFixedHeader();
    public bool get_ColumnGroupingFixedHeader();
    public bool IsRowMemberOnThisPage(int groupIndex, int pageNumber, Int32& startPage, Int32& endPage);
    public void GetRowMembersOnPage(int page, Int32& startMember, Int32& endMember);
    internal virtual bool Search(SearchContext searchContext);
    private static void BuildHiddenColumns(MatrixMember member, IntList& hiddenColumns);
    private static bool HiddenColumn(IntList hiddenColumns, Int32& columnIndex, int cellIndex);
    private static bool SearchMatrixRowsContent(Matrix matrix, MatrixMember member, SearchContext searchContext, IntList hiddenColumns);
    private static bool SearchMatrixColumns(MatrixMemberCollection columns, IntList& hiddenColumns, SearchContext searchContext);
    private static bool SearchRangeCells(Matrix matrix, int indexRow, IntList hiddenColumns, SearchContext searchContext);
    private static bool SearchRowTotal(Matrix matrix, MatrixMemberCollection rowTotalChildren, IntList hiddenColumns, SearchContext searchContext);
    internal static List`1<int> CalculateMapping(MatrixHeading headingDef, MatrixHeadingInstanceList headingInstances, bool inParentSubtotal);
    private static bool IsEmpty(MatrixHeading headingDef, MatrixHeadingInstance headingInstance);
    private void CalculateGroupsCellsBeforeRowHeaders();
}
internal class Microsoft.ReportingServices.ReportRendering.MatrixCell : object {
    private Matrix m_owner;
    private int m_rowIndex;
    private int m_columnIndex;
    private MatrixCellInstance m_matrixCellInstance;
    private ReportItem m_cellReportItem;
    private MatrixCellInstanceInfo m_matrixCellInstanceInfo;
    public ReportItem ReportItem { get; }
    public string CellLabel { get; }
    public string ID { get; }
    public object SharedRenderingInfo { get; public set; }
    public DataElementOutputTypes DataElementOutput { get; }
    public string DataElementName { get; }
    internal int ColumnIndex { get; }
    internal int RowIndex { get; }
    private MatrixCellInstanceInfo InstanceInfo { get; }
    internal MatrixCell(Matrix owner, int rowIndex, int columnIndex);
    public ReportItem get_ReportItem();
    public string get_CellLabel();
    public string get_ID();
    public object get_SharedRenderingInfo();
    public void set_SharedRenderingInfo(object value);
    public DataElementOutputTypes get_DataElementOutput();
    public string get_DataElementName();
    internal int get_ColumnIndex();
    internal int get_RowIndex();
    private MatrixCellInstanceInfo get_InstanceInfo();
    private int IndexCellDefinition(Matrix matrixDef);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.MatrixCellCollection : object {
    private Matrix m_owner;
    private int m_columnsCount;
    private int m_rowsCount;
    private MatrixCell m_firstCell;
    private MatrixRowCells m_firstMatrixColumnCells;
    private MatrixRowCells m_firstMatrixRowCells;
    private MatrixRowCells[] m_cells;
    public MatrixCell Item { get; }
    public int Count { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    internal MatrixCellCollection(Matrix owner, int rowsCount, int columnsCount);
    public MatrixCell get_Item(int row, int column);
    public int get_Count();
    public int get_RowCount();
    public int get_ColumnCount();
}
internal enum Microsoft.ReportingServices.ReportRendering.MatrixLayoutDirection : Enum {
    public int value__;
    public static MatrixLayoutDirection LTR;
    public static MatrixLayoutDirection RTL;
}
internal class Microsoft.ReportingServices.ReportRendering.MatrixMember : Group {
    private MatrixHeading m_headingDef;
    private MatrixHeadingInstance m_headingInstance;
    private MatrixHeadingInstanceInfo m_headingInstanceInfo;
    private ReportItem m_reportItem;
    private MatrixMemberCollection m_children;
    private MatrixMember m_parent;
    private ReportSize m_width;
    private ReportSize m_height;
    private bool m_isSubtotal;
    private bool m_isParentSubTotal;
    private int m_index;
    private int m_cachedMemberCellIndex;
    public string ID { get; }
    public object SharedRenderingInfo { get; public set; }
    internal ReportSize Size { get; }
    internal TextBox ToggleParent { get; }
    public bool HasToggle { get; }
    public string ToggleItem { get; }
    public SharedHiddenState SharedHidden { get; }
    public bool IsToggleChild { get; }
    public bool Hidden { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public ReportItem ReportItem { get; }
    public string Label { get; }
    public bool InDocumentMap { get; }
    public MatrixMember Parent { get; }
    public MatrixMemberCollection Children { get; }
    public int MemberCellIndex { get; }
    internal int CachedMemberCellIndex { get; }
    public int ColumnSpan { get; }
    public int RowSpan { get; }
    public bool IsTotal { get; }
    public bool IsStatic { get; }
    public ReportSize Width { get; }
    public ReportSize Height { get; }
    public object GroupValue { get; }
    public SortOrders SortOrder { get; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal MatrixHeadingInstanceInfo InstanceInfo { get; }
    internal bool IsParentSubtotal { get; }
    internal MatrixMember(Matrix owner, MatrixMember parent, MatrixHeading headingDef, MatrixHeadingInstance headingInstance, bool isSubtotal, bool isParentSubTotal, int index);
    public virtual string get_ID();
    public object get_SharedRenderingInfo();
    public void set_SharedRenderingInfo(object value);
    internal ReportSize get_Size();
    internal virtual TextBox get_ToggleParent();
    public virtual bool get_HasToggle();
    public virtual string get_ToggleItem();
    public virtual SharedHiddenState get_SharedHidden();
    public virtual bool get_IsToggleChild();
    public virtual bool get_Hidden();
    public virtual CustomPropertyCollection get_CustomProperties();
    public ReportItem get_ReportItem();
    public virtual string get_Label();
    public sealed virtual bool get_InDocumentMap();
    public MatrixMember get_Parent();
    public MatrixMemberCollection get_Children();
    public int get_MemberCellIndex();
    internal int get_CachedMemberCellIndex();
    public int get_ColumnSpan();
    public int get_RowSpan();
    public bool get_IsTotal();
    public bool get_IsStatic();
    public ReportSize get_Width();
    public ReportSize get_Height();
    public object get_GroupValue();
    public SortOrders get_SortOrder();
    public virtual string get_DataElementName();
    public virtual DataElementOutputTypes get_DataElementOutput();
    internal MatrixHeadingInstanceInfo get_InstanceInfo();
    internal bool get_IsParentSubtotal();
    public DataElementOutputTypes DataElementOutputForStatic(MatrixMember staticHeading);
    public bool IsRowMemberOnThisPage(int memberIndex, int pageNumber, Int32& startPage, Int32& endPage);
    private DataElementOutputTypes GetDataElementOutputTypeFromCell(int rowIndex, int columnIndex);
    private DataElementOutputTypes GetDataElementOutputTypeForRowCol(int index);
    public void GetChildRowMembersOnPage(int page, Int32& startChild, Int32& endChild);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.MatrixMemberCollection : object {
    private Matrix m_owner;
    private MatrixHeading m_headingDef;
    private MatrixHeadingInstanceList m_headingInstances;
    private MatrixMember[] m_members;
    private MatrixMember m_firstMember;
    private MatrixMember m_parent;
    private int m_subTotalPosition;
    private bool m_isParentSubTotal;
    private List`1<int> m_memberMapping;
    public MatrixMember Item { get; }
    public int Count { get; }
    internal MatrixHeading MatrixHeadingDef { get; }
    internal MatrixMemberCollection(Matrix owner, MatrixMember parent, MatrixHeading headingDef, MatrixHeadingInstanceList headingInstances, List`1<int> memberMapping, bool isParentSubTotal);
    public MatrixMember get_Item(int index);
    public int get_Count();
    internal MatrixHeading get_MatrixHeadingDef();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.MatrixRowCells : object {
    private int m_count;
    private MatrixCell[] m_matrixRowCells;
    internal MatrixCell Item { get; internal set; }
    internal MatrixRowCells(int count);
    internal MatrixCell get_Item(int index);
    internal void set_Item(int index, MatrixCell value);
}
internal class Microsoft.ReportingServices.ReportRendering.MemberBase : object {
    private bool m_customControl;
    internal bool IsCustomControl { get; }
    internal MemberBase(bool isCustomControl);
    internal bool get_IsCustomControl();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.NewToOldReportSizeCollection : ReportSizeCollection {
    private ReportSizeCollection m_col;
    public ReportSize Item { get; public set; }
    public int Count { get; }
    internal NewToOldReportSizeCollection(ReportSizeCollection col);
    public virtual ReportSize get_Item(int index);
    public virtual void set_Item(int index, ReportSize value);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.ReportRendering.OWCChart : DataRegion {
    private OWCChartColumnCollection m_chartData;
    public OWCChartColumnCollection ChartData { get; }
    public string ChartDefinition { get; }
    public bool NoRows { get; }
    internal string InstanceInfoNoRowMessage { get; }
    internal OWCChart(int intUniqueName, OWCChart reportItemDef, OWCChartInstance reportItemInstance, RenderingContext renderingContext);
    public OWCChartColumnCollection get_ChartData();
    public string get_ChartDefinition();
    public virtual bool get_NoRows();
    internal virtual string get_InstanceInfoNoRowMessage();
    public void ChartDataXML(IChartStream chartStream);
    internal bool ProcessChartXMLPivotList(String& newDefinition, string chartDataUrl);
    public Metafile GetImage();
    public Byte[] GetChart();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.OWCChartColumn : object {
    private ChartColumn m_chartColumnDef;
    private ArrayList m_data;
    public string Name { get; }
    public object Item { get; }
    public int Count { get; }
    internal OWCChartColumn(ChartColumn chartColumnDef, ArrayList columnData);
    public string get_Name();
    public object get_Item(int index);
    public int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.OWCChartColumnCollection : object {
    private ReportItem m_owner;
    private OWCChart m_chartDef;
    private OWCChartInstance m_chartInstance;
    private OWCChartColumn[] m_chartData;
    public OWCChartColumn Item { get; }
    public int Count { get; }
    internal OWCChartColumnCollection(OWCChart chartDef, OWCChartInstance chartInstance, ReportItem owner);
    public OWCChartColumn get_Item(int index);
    public int get_Count();
}
internal abstract class Microsoft.ReportingServices.ReportRendering.Page : object {
    private PageSectionInstance m_pageHeaderInstance;
    private PageSectionInstance m_pageFooterInstance;
    private PageSection m_pageHeader;
    private PageSection m_pageFooter;
    internal PageSection PageSectionHeader { get; internal set; }
    internal PageSection PageSectionFooter { get; internal set; }
    internal PageSectionInstance HeaderInstance { get; }
    internal PageSectionInstance FooterInstance { get; }
    public PageSection Header { get; public set; }
    public PageSection Footer { get; public set; }
    protected Page(PageSection pageHeader, PageSection pageFooter);
    internal PageSection get_PageSectionHeader();
    internal void set_PageSectionHeader(PageSection value);
    internal PageSection get_PageSectionFooter();
    internal void set_PageSectionFooter(PageSection value);
    internal PageSectionInstance get_HeaderInstance();
    internal PageSectionInstance get_FooterInstance();
    public PageSection get_Header();
    public void set_Header(PageSection value);
    public PageSection get_Footer();
    public void set_Footer(PageSection value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.PageCollection : object {
    private PaginationInfo m_paginationDef;
    private Report m_report;
    public int TotalCount { get; public set; }
    public Page Item { get; public set; }
    public int Count { get; }
    internal PageCollection(PaginationInfo paginationDef, Report report);
    public int get_TotalCount();
    public void set_TotalCount(int value);
    public Page get_Item(int pageNumber);
    public void set_Item(int pageNumber, Page value);
    public int get_Count();
    public void Add(Page page);
    public void Clear();
    public void Insert(int index, Page page);
    public void RemoveAt(int index);
    internal PageSection GetHeader(PageSectionInstance headerInstance);
    internal PageSection GetFooter(PageSectionInstance footerInstance);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.PageReportItems : object {
    private ArrayList m_innerArrayList;
    public ReportItem Item { get; public set; }
    public int Count { get; }
    public ReportItem get_Item(int index);
    public void set_Item(int index, ReportItem value);
    public void Add(ReportItem value);
    public int get_Count();
    public void Clear();
}
internal class Microsoft.ReportingServices.ReportRendering.PageSection : ReportItem {
    internal static string PageHeaderUniqueNamePrefix;
    internal static string PageFooterUniqueNamePrefix;
    private ReportItemCollection m_reportItems;
    private PageSection m_pageSectionDef;
    private bool m_pageDef;
    private PageSectionInstance m_pageSectionInstance;
    public bool PrintOnFirstPage { get; }
    public bool PrintOnLastPage { get; }
    public ReportItemCollection ReportItemCollection { get; }
    internal PageSection(string uniqueName, PageSection pageSectionDef, PageSectionInstance pageSectionInstance, Report report, RenderingContext renderingContext, bool pageDef);
    public ReportItem Find(string uniqueName);
    internal virtual bool Search(SearchContext searchContext);
    public bool get_PrintOnFirstPage();
    public bool get_PrintOnLastPage();
    public ReportItemCollection get_ReportItemCollection();
}
internal class Microsoft.ReportingServices.ReportRendering.Rectangle : ReportItem {
    private NonComputedUniqueNames[] m_childrenNonComputedUniqueNames;
    private ReportItemCollection m_reportItemCollection;
    public object SharedRenderingInfo { get; public set; }
    public ReportItemCollection ReportItemCollection { get; }
    public bool PageBreakAtEnd { get; }
    public bool PageBreakAtStart { get; }
    public int LinkToChild { get; }
    internal Rectangle(string uniqueName, int intUniqueName, ReportItem reportItemDef, ReportItemInstance reportItemInstance, RenderingContext renderingContext, NonComputedUniqueNames[] childrenNonComputedUniqueNames);
    public virtual object get_SharedRenderingInfo();
    public virtual void set_SharedRenderingInfo(object value);
    public ReportItemCollection get_ReportItemCollection();
    public bool get_PageBreakAtEnd();
    public bool get_PageBreakAtStart();
    public virtual int get_LinkToChild();
    internal virtual bool Search(SearchContext searchContext);
}
internal class Microsoft.ReportingServices.ReportRendering.RenderingContext : object {
    private CommonInfo m_commonInfo;
    private bool m_inPageSection;
    private string m_prefix;
    private EventInformation m_eventInfo;
    private ReportSnapshot m_reportSnapshot;
    private Hashtable m_processedItems;
    private Hashtable m_cachedHiddenInfo;
    private Uri m_contextUri;
    private EmbeddedImageHashtable m_embeddedImages;
    private ImageStreamNames m_imageStreamNames;
    private MatrixHeadingInstance m_headingInstance;
    private ICatalogItemContext m_currentReportICatalogItemContext;
    private bool m_nativeAllCRITypes;
    private Hashtable m_nativeCRITypes;
    private IJobContext m_jobContext;
    private IDataProtection m_dataProtection;
    internal ICatalogItemContext TopLevelReportContext { get; }
    internal GetReportChunk GetChunkCallback { get; }
    internal GetChunkMimeType GetChunkMimeType { get; }
    internal StoreServerParameters StoreServerParameters { get; }
    internal string RendererID { get; }
    internal DateTime ExecutionTime { get; }
    internal string ReplacementRoot { get; }
    internal bool CacheState { get; internal set; }
    internal RenderingInfoManager RenderingInfoManager { get; }
    internal RenderingChunkManager ChunkManager { get; }
    internal IGetResource GetResourceCallback { get; }
    internal ReportRuntimeSetup ReportRuntimeSetup { get; }
    internal IntermediateFormatVersion IntermediateFormatVersion { get; }
    internal ImageStreamNames ImageStreamNames { get; }
    internal EmbeddedImageHashtable EmbeddedImages { get; }
    internal bool InPageSection { get; }
    internal string UniqueNamePrefix { get; }
    internal Uri ContextUri { get; }
    internal ReportSnapshot ReportSnapshot { get; }
    private SenderInformationHashtable ShowHideSenderInfo { get; }
    private ReceiverInformationHashtable ShowHideReceiverInfo { get; }
    internal MatrixHeadingInstance HeadingInstance { get; internal set; }
    internal UserProfileState AllowUserProfileState { get; }
    internal UserProfileState UsedUserProfileState { get; internal set; }
    internal ICatalogItemContext CurrentReportContext { get; }
    internal bool NativeAllCRITypes { get; internal set; }
    internal Hashtable NativeCRITypes { get; internal set; }
    internal IJobContext JobContext { get; }
    internal IDataProtection DataProtection { get; }
    internal bool ShowHideStateChanged { get; }
    internal RenderingContext(ReportSnapshot reportSnapshot, string rendererID, DateTime executionTime, EmbeddedImageHashtable embeddedImages, ImageStreamNames imageStreamNames, EventInformation eventInfo, ICatalogItemContext reportContext, Uri contextUri, NameValueCollection reportParameters, GetReportChunk getChunkCallback, RenderingChunkManager chunkManager, IGetResource getResourceCallback, GetChunkMimeType getChunkMimeType, StoreServerParameters storeServerParameters, bool retrieveRenderingInfo, UserProfileState allowUserProfileState, ReportRuntimeSetup reportRuntimeSetup, IJobContext jobContext, IDataProtection dataProtection);
    internal RenderingContext(RenderingContext copy, Uri contextUri, EmbeddedImageHashtable embeddedImages, ImageStreamNames imageStreamNames, ICatalogItemContext subreportICatalogItemContext);
    internal RenderingContext(RenderingContext copy, string prefix);
    internal ICatalogItemContext get_TopLevelReportContext();
    internal GetReportChunk get_GetChunkCallback();
    internal GetChunkMimeType get_GetChunkMimeType();
    internal StoreServerParameters get_StoreServerParameters();
    internal string get_RendererID();
    internal DateTime get_ExecutionTime();
    internal string get_ReplacementRoot();
    internal bool get_CacheState();
    internal void set_CacheState(bool value);
    internal RenderingInfoManager get_RenderingInfoManager();
    internal RenderingChunkManager get_ChunkManager();
    internal IGetResource get_GetResourceCallback();
    internal ReportRuntimeSetup get_ReportRuntimeSetup();
    internal IntermediateFormatVersion get_IntermediateFormatVersion();
    internal ImageStreamNames get_ImageStreamNames();
    internal EmbeddedImageHashtable get_EmbeddedImages();
    internal bool get_InPageSection();
    internal string get_UniqueNamePrefix();
    internal Uri get_ContextUri();
    internal ReportSnapshot get_ReportSnapshot();
    private SenderInformationHashtable get_ShowHideSenderInfo();
    private ReceiverInformationHashtable get_ShowHideReceiverInfo();
    internal MatrixHeadingInstance get_HeadingInstance();
    internal void set_HeadingInstance(MatrixHeadingInstance value);
    internal UserProfileState get_AllowUserProfileState();
    internal UserProfileState get_UsedUserProfileState();
    internal void set_UsedUserProfileState(UserProfileState value);
    internal ICatalogItemContext get_CurrentReportContext();
    internal bool get_NativeAllCRITypes();
    internal void set_NativeAllCRITypes(bool value);
    internal Hashtable get_NativeCRITypes();
    internal void set_NativeCRITypes(Hashtable value);
    internal IJobContext get_JobContext();
    internal IDataProtection get_DataProtection();
    internal ReportItem FindReportItemInBody(int uniqueName);
    internal bool IsItemHidden(int uniqueName, bool potentialSender);
    internal bool get_ShowHideStateChanged();
    internal bool IsToggleStateNegated(int uniqueName);
    internal bool IsToggleParent(int uniqueName);
    internal bool IsToggleChild(int uniqueName);
    internal TextBox GetToggleParent(int uniqueName);
    internal static bool GetDefinitionHidden(Visibility visibility);
    internal SortOptions GetSortState(int uniqueName);
    private bool RecursiveIsItemHidden(int uniqueName, bool potentialSender);
    private bool IsHidden(int uniqueName, bool startHidden);
    private bool IsHiddenNegated(int uniqueName);
    internal static void FindRange(RenderingPagesRangesList pagesRangesList, int startIndex, int endIndex, int page, Int32& startChild, Int32& endChild);
    internal static void FindRange(RenderingPagesRangesList pagesRangesList, int startIndex, int endIndex, int page, bool checkStart, bool checkEnd, Int32& startChild, Int32& endChild);
}
internal class Microsoft.ReportingServices.ReportRendering.RenderingInfoManager : object {
    private static string RenderingInfoChunkPrefix;
    private RenderingInfoRoot m_renderingInfoRoot;
    private string m_chunkName;
    internal Hashtable RenderingInfo { get; }
    internal Hashtable SharedRenderingInfo { get; }
    internal Hashtable PageSectionRenderingInfo { get; }
    internal PaginationInfo PaginationInfo { get; internal set; }
    private RenderingInfoRoot RenderingInfoRoot { get; }
    internal RenderingInfoManager(string rendererID, GetReportChunk getChunkCallback, bool retrieveRenderingInfo);
    internal Hashtable get_RenderingInfo();
    internal Hashtable get_SharedRenderingInfo();
    internal Hashtable get_PageSectionRenderingInfo();
    internal PaginationInfo get_PaginationInfo();
    internal void set_PaginationInfo(PaginationInfo value);
    private RenderingInfoRoot get_RenderingInfoRoot();
    internal void Save(CreateReportChunk createChunkCallback);
    private RenderingInfoRoot Deserialize(GetReportChunk getChunkCallback);
    private void Serialize(RenderingInfoRoot renderingInfoRoot, CreateReportChunk createChunkCallback);
}
internal class Microsoft.ReportingServices.ReportRendering.RenderingInfoRoot : object {
    private Hashtable m_renderingInfo;
    private Hashtable m_sharedRenderingInfo;
    private Hashtable m_pageSectionRenderingInfo;
    private PaginationInfo m_paginationInfo;
    internal Hashtable RenderingInfo { get; }
    internal Hashtable SharedRenderingInfo { get; }
    internal Hashtable PageSectionRenderingInfo { get; }
    internal PaginationInfo PaginationInfo { get; internal set; }
    internal Hashtable get_RenderingInfo();
    internal Hashtable get_SharedRenderingInfo();
    internal Hashtable get_PageSectionRenderingInfo();
    internal PaginationInfo get_PaginationInfo();
    internal void set_PaginationInfo(PaginationInfo value);
}
internal class Microsoft.ReportingServices.ReportRendering.Report : object {
    private Report m_reportDef;
    private ReportInstance m_reportInstance;
    private ReportInstanceInfo m_reportInstanceInfo;
    private RenderingContext m_renderingContext;
    private Rectangle m_reportBody;
    private PageSection m_pageHeader;
    private PageSection m_pageFooter;
    private PageCollection m_reportPagination;
    private string m_name;
    private string m_description;
    private ReportUrl m_reportUrl;
    private DocumentMapNode m_documentMapRoot;
    private ReportParameterCollection m_reportParameters;
    private string m_reportLanguage;
    private CustomPropertyCollection m_customProperties;
    private Bookmarks m_bookmarksInfo;
    private Nullable`1<bool> m_bodyStyleConstainsBorder;
    public string UniqueName { get; }
    public string ShowHideToggle { get; }
    public string SortItem { get; }
    public bool InDocumentMap { get; }
    public bool HasBookmarks { get; }
    public string Name { get; }
    internal DocumentMapNode DocumentMap { get; }
    internal Bookmarks ReportBookmarks { get; }
    public string Description { get; }
    public ReportUrl Location { get; }
    public string ReportLanguage { get; }
    public bool CacheState { get; public set; }
    public DateTime ExecutionTime { get; }
    public string Author { get; }
    public string DataSetName { get; }
    public bool NeedsHeaderFooterEvaluation { get; }
    public PageSection PageHeader { get; }
    public PageSection PageFooter { get; }
    public int AutoRefresh { get; }
    public ReportSize Width { get; }
    public ReportSize PageHeight { get; }
    public ReportSize PageWidth { get; }
    public int Columns { get; }
    public ReportSize ColumnSpacing { get; }
    public PageCollection Pages { get; }
    public ReportParameterCollection Parameters { get; }
    public Rectangle Body { get; }
    public ReportSize LeftMargin { get; }
    public ReportSize RightMargin { get; }
    public ReportSize TopMargin { get; }
    public ReportSize BottomMargin { get; }
    public object SharedRenderingInfo { get; public set; }
    public object RenderingInfo { get; public set; }
    public string Custom { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public string DataTransform { get; }
    public string DataSchema { get; }
    public string DataElementName { get; }
    public DataElementStyles DataElementStyle { get; }
    public bool ShowHideStateChanged { get; }
    internal Report ReportDef { get; }
    internal ReportInstance ReportInstance { get; }
    internal ReportInstanceInfo InstanceInfo { get; }
    internal RenderingContext RenderingContext { get; }
    public int NumberOfPages { get; }
    internal bool BodyHasBorderStyles { get; }
    internal Report(Report reportDef, ReportInstance reportInstance, RenderingContext renderingContext, string reportName, string description, CultureInfo defaultLanguage);
    private void AdjustBodyWhitespace();
    public string get_UniqueName();
    public string get_ShowHideToggle();
    public string get_SortItem();
    public sealed virtual bool get_InDocumentMap();
    public bool get_HasBookmarks();
    public string get_Name();
    internal DocumentMapNode get_DocumentMap();
    internal Bookmarks get_ReportBookmarks();
    public string get_Description();
    public ReportUrl get_Location();
    public string get_ReportLanguage();
    public bool get_CacheState();
    public void set_CacheState(bool value);
    public DateTime get_ExecutionTime();
    public string get_Author();
    public string get_DataSetName();
    public bool get_NeedsHeaderFooterEvaluation();
    public PageSection get_PageHeader();
    public PageSection get_PageFooter();
    public int get_AutoRefresh();
    public ReportSize get_Width();
    public ReportSize get_PageHeight();
    public ReportSize get_PageWidth();
    public int get_Columns();
    public ReportSize get_ColumnSpacing();
    public PageCollection get_Pages();
    public ReportParameterCollection get_Parameters();
    public Rectangle get_Body();
    public ReportSize get_LeftMargin();
    public ReportSize get_RightMargin();
    public ReportSize get_TopMargin();
    public ReportSize get_BottomMargin();
    public object get_SharedRenderingInfo();
    public void set_SharedRenderingInfo(object value);
    public object get_RenderingInfo();
    public void set_RenderingInfo(object value);
    public string get_Custom();
    public CustomPropertyCollection get_CustomProperties();
    public string get_DataTransform();
    public string get_DataSchema();
    public string get_DataElementName();
    public DataElementStyles get_DataElementStyle();
    public bool get_ShowHideStateChanged();
    internal Report get_ReportDef();
    internal ReportInstance get_ReportInstance();
    internal ReportInstanceInfo get_InstanceInfo();
    internal RenderingContext get_RenderingContext();
    public int get_NumberOfPages();
    internal bool get_BodyHasBorderStyles();
    public string StreamURL(bool useSessionId, string streamName);
    public ReportUrlBuilder GetReportUrlBuilder(string initialUrl, bool useReplacementRoot, bool addReportParameters);
    public bool GetResource(string resourcePath, Byte[]& resource, String& mimeType);
    public ReportItem Find(string uniqueName);
    public void EnableNativeCustomReportItem();
    public void EnableNativeCustomReportItem(string type);
    internal bool Search(int searchPage, string findValue);
}
internal class Microsoft.ReportingServices.ReportRendering.ReportColor : object {
    private string m_color;
    private Color m_GDIColor;
    private bool m_parsed;
    internal bool Parsed { get; }
    public ReportColor(Color color);
    public ReportColor(string color);
    internal ReportColor(string color, bool parsed);
    public virtual string ToString();
    public Color ToColor();
    internal void Validate();
    internal bool get_Parsed();
}
internal abstract class Microsoft.ReportingServices.ReportRendering.ReportItem : object {
    private string m_uniqueName;
    protected int m_intUniqueName;
    private Style m_style;
    private CustomPropertyCollection m_customProperties;
    protected bool m_canClick;
    protected bool m_canEdit;
    protected bool m_canDrag;
    protected bool m_dropTarget;
    private MemberBase m_members;
    public string Name { get; }
    public string ID { get; }
    public bool InDocumentMap { get; }
    public bool IsFullSize { get; }
    public string Label { get; public set; }
    public int LinkToChild { get; }
    public string Bookmark { get; public set; }
    public string UniqueName { get; }
    public ReportSize Height { get; public set; }
    public ReportSize Width { get; public set; }
    public ReportSize Top { get; public set; }
    public ReportSize Left { get; public set; }
    public int ZIndex { get; public set; }
    public Style Style { get; public set; }
    public string Custom { get; }
    public CustomPropertyCollection CustomProperties { get; public set; }
    public string ToolTip { get; public set; }
    public bool Hidden { get; public set; }
    public bool HasToggle { get; }
    public string ToggleItem { get; }
    internal TextBox ToggleParent { get; }
    public SharedHiddenState SharedHidden { get; public set; }
    public bool IsToggleChild { get; }
    public bool RepeatedSibling { get; }
    public object SharedRenderingInfo { get; public set; }
    public object RenderingInfo { get; public set; }
    public string DataElementName { get; }
    public DataElementOutputTypes DataElementOutput { get; }
    internal ReportItem ReportItemDef { get; }
    internal ReportItemInstance ReportItemInstance { get; }
    internal ReportItemInstanceInfo InstanceInfo { get; }
    internal RenderingContext RenderingContext { get; }
    internal MatrixHeadingInstance HeadingInstance { get; }
    private ReportItemRendering Rendering { get; }
    internal ReportItemProcessing Processing { get; }
    internal bool UseCache { get; }
    protected internal bool IsCustomControl { get; }
    internal bool SkipSearch { get; }
    protected ReportItem(string definitionName, string instanceName);
    internal ReportItem(CustomReportItem criDef, CustomReportItemInstance criInstance, CustomReportItemInstanceInfo instanceInfo);
    internal ReportItem(string uniqueName, int intUniqueName, ReportItem reportItemDef, ReportItemInstance reportItemInstance, RenderingContext renderingContext);
    public string get_Name();
    public string get_ID();
    public sealed virtual bool get_InDocumentMap();
    public bool get_IsFullSize();
    public string get_Label();
    public void set_Label(string value);
    public virtual int get_LinkToChild();
    public string get_Bookmark();
    public void set_Bookmark(string value);
    public string get_UniqueName();
    public ReportSize get_Height();
    public void set_Height(ReportSize value);
    public ReportSize get_Width();
    public void set_Width(ReportSize value);
    public ReportSize get_Top();
    public void set_Top(ReportSize value);
    public ReportSize get_Left();
    public void set_Left(ReportSize value);
    public int get_ZIndex();
    public void set_ZIndex(int value);
    public Style get_Style();
    public void set_Style(Style value);
    public string get_Custom();
    public CustomPropertyCollection get_CustomProperties();
    public void set_CustomProperties(CustomPropertyCollection value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public virtual bool get_Hidden();
    public virtual void set_Hidden(bool value);
    public bool get_HasToggle();
    public string get_ToggleItem();
    internal TextBox get_ToggleParent();
    public SharedHiddenState get_SharedHidden();
    public void set_SharedHidden(SharedHiddenState value);
    public bool get_IsToggleChild();
    public bool get_RepeatedSibling();
    public virtual object get_SharedRenderingInfo();
    public virtual void set_SharedRenderingInfo(object value);
    public object get_RenderingInfo();
    public void set_RenderingInfo(object value);
    public string get_DataElementName();
    public DataElementOutputTypes get_DataElementOutput();
    internal ReportItem get_ReportItemDef();
    internal ReportItemInstance get_ReportItemInstance();
    internal ReportItemInstanceInfo get_InstanceInfo();
    internal RenderingContext get_RenderingContext();
    internal MatrixHeadingInstance get_HeadingInstance();
    private ReportItemRendering get_Rendering();
    internal ReportItemProcessing get_Processing();
    internal bool get_UseCache();
    protected internal bool get_IsCustomControl();
    protected void DeepClone(ReportItem clone);
    internal virtual bool Search(SearchContext searchContext);
    internal bool get_SkipSearch();
    internal static int StringToInt(string intAsString);
    internal static ReportItem CreateItem(int indexIntoParentCollection, ReportItem reportItemDef, ReportItemInstance reportItemInstance, RenderingContext renderingContext, NonComputedUniqueNames nonComputedUniqueNames);
    internal static ReportItem CreateItem(string uniqueName, ReportItem reportItemDef, ReportItemInstance reportItemInstance, RenderingContext renderingContext, NonComputedUniqueNames nonComputedUniqueNames);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ReportItemCollection : object {
    private ReportItem[] m_reportItems;
    private ReportItemCollection m_reportItemColDef;
    private ReportItemColInstance m_reportItemColInstance;
    private NonComputedUniqueNames[] m_childrenNonComputedUniqueNames;
    private RenderingContext m_renderingContext;
    public ReportItem Item { get; }
    public int Count { get; }
    public object SharedRenderingInfo { get; public set; }
    internal ReportItemCollection(ReportItemCollection reportItemColDef, ReportItemColInstance reportItemColInstance, RenderingContext renderingContext, NonComputedUniqueNames[] childrenNonComputedUniqueNames);
    public ReportItem get_Item(int index);
    public int get_Count();
    public object get_SharedRenderingInfo();
    public void set_SharedRenderingInfo(object value);
    public void GetReportItemStartAndEndPages(int currentPage, int index, Int32& startPage, Int32& endPage);
    internal bool Search(SearchContext searchContext);
    private bool SearchRepeatedSiblings(DataRegion dataRegion, SearchContext searchContext);
}
internal class Microsoft.ReportingServices.ReportRendering.ReportItemProcessing : MemberBase {
    internal string DefinitionName;
    internal string Label;
    internal string Bookmark;
    internal string Tooltip;
    internal ReportSize Height;
    internal ReportSize Width;
    internal ReportSize Top;
    internal ReportSize Left;
    internal int ZIndex;
    internal bool Hidden;
    internal SharedHiddenState SharedHidden;
    internal DataValueInstanceList SharedStyles;
    internal DataValueInstanceList NonSharedStyles;
    internal ReportItemProcessing DeepClone();
}
internal class Microsoft.ReportingServices.ReportRendering.ReportItemRendering : MemberBase {
    internal RenderingContext m_renderingContext;
    internal ReportItem m_reportItemDef;
    internal ReportItemInstance m_reportItemInstance;
    internal ReportItemInstanceInfo m_reportItemInstanceInfo;
    internal MatrixHeadingInstance m_headingInstance;
}
internal class Microsoft.ReportingServices.ReportRendering.ReportParameter : object {
    private ParameterInfo m_underlyingParam;
    public string Name { get; }
    public TypeCode DataType { get; }
    public bool Nullable { get; }
    public bool MultiValue { get; }
    public bool AllowBlank { get; }
    public string Prompt { get; }
    public bool UsedInQuery { get; }
    public object Value { get; }
    public Object[] Values { get; }
    internal string StringValues { get; }
    internal ParameterInfo UnderlyingParam { get; }
    internal ReportParameter(ParameterInfo param);
    public string get_Name();
    public TypeCode get_DataType();
    public bool get_Nullable();
    public bool get_MultiValue();
    public bool get_AllowBlank();
    public string get_Prompt();
    public bool get_UsedInQuery();
    public object get_Value();
    public Object[] get_Values();
    internal string get_StringValues();
    internal ParameterInfo get_UnderlyingParam();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ReportParameterCollection : NameObjectCollectionBase {
    private NameValueCollection m_asNameValueCollection;
    private bool m_isValid;
    public ReportParameter Item { get; }
    public ReportParameter Item { get; }
    public NameValueCollection AsNameValueCollection { get; }
    public bool IsValid { get; }
    internal ReportParameterCollection(ParameterInfoCollection parameters);
    internal ReportParameterCollection(ParameterInfoCollection parameters, bool isValid);
    private void Init(ParameterInfoCollection parameters, bool isValid);
    public ReportParameter get_Item(string name);
    public ReportParameter get_Item(int index);
    public NameValueCollection get_AsNameValueCollection();
    public bool get_IsValid();
}
internal class Microsoft.ReportingServices.ReportRendering.ReportSize : object {
    private string m_size;
    private double m_sizeInMM;
    private bool m_parsed;
    internal bool Parsed { get; }
    public ReportSize(string size);
    internal ReportSize(string size, double sizeInMM);
    internal ReportSize(ReportSize newSize);
    internal ReportSize(string size, bool parsed);
    public virtual string ToString();
    public double ToMillimeters();
    public double ToInches();
    public double ToPoints();
    public double ToCentimeters();
    internal bool get_Parsed();
    internal void ParseSize();
    internal void Validate();
    internal ReportSize DeepClone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ReportSizeCollection : object {
    private ReportSize[] m_reportSizeCollection;
    public ReportSize Item { get; public set; }
    public int Count { get; }
    internal ReportSizeCollection(int count);
    public virtual ReportSize get_Item(int index);
    public virtual void set_Item(int index, ReportSize value);
    public virtual int get_Count();
}
internal class Microsoft.ReportingServices.ReportRendering.ReportUrl : object {
    private Uri m_pathUri;
    private string m_replacementRoot;
    private RenderingContext m_reportContext;
    private ICatalogItemContext m_newICatalogItemContext;
    internal ReportUrl(ICatalogItemContext catContext, string initialUrl);
    internal ReportUrl(RenderingContext reportContext, string initialUrl);
    internal ReportUrl(RenderingContext reportContext, string initialUrl, bool checkProtocol, NameValueCollection unparsedParameters, bool useReplacementRoot);
    internal static string BuildPathUri(ICatalogItemContext currentICatalogItemContext, string initialUrl, NameValueCollection unparsedParameters, ICatalogItemContext& newContext);
    internal static string BuildPathUri(ICatalogItemContext currentCatalogItemContext, bool checkProtocol, string initialUrl, NameValueCollection unparsedParameters, ICatalogItemContext& newContext);
    internal static ReportUrl BuildHyperLinkURL(string hyperLinkUrlValue, RenderingContext renderingContext);
    public virtual string ToString();
    public Uri ToUri();
    public ReportUrlBuilder GetUrlBuilder(string initialUrl, bool useReplacementRoot);
}
internal class Microsoft.ReportingServices.ReportRendering.ReportUrlBuilder : object {
    private string m_replacementRoot;
    private CatalogItemUrlBuilder m_catalogItemUrlBuilder;
    private bool m_hasReplacement;
    private bool m_useRepacementRoot;
    internal ReportUrlBuilder(RenderingContext reportContext, ICatalogItemContext changedContext, string initialUrl, string replacementRoot);
    internal ReportUrlBuilder(RenderingContext reportContext, string initialUrl, string replacementRoot);
    internal ReportUrlBuilder(RenderingContext reportContext, string initialUrl, bool useReplacementRoot, bool addReportParameters);
    public virtual string ToString();
    public Uri ToUri();
    public void AddReplacementRoot();
    public void AddParameters(NameValueCollection urlParameters, UrlParameterType parameterType);
    public void AddParameter(string name, string val, UrlParameterType parameterType);
}
internal class Microsoft.ReportingServices.ReportRendering.SearchContext : object {
    private int m_searchPage;
    private int m_itemStartPage;
    private int m_itemEndPage;
    private string m_findValue;
    internal int SearchPage { get; }
    internal string FindValue { get; }
    internal int ItemStartPage { get; internal set; }
    internal int ItemEndPage { get; internal set; }
    internal bool IsItemOnSearchPage { get; }
    internal SearchContext(int searchPage, string findValue, int itemStartPage, int itemEndPage);
    internal SearchContext(SearchContext copy);
    internal int get_SearchPage();
    internal string get_FindValue();
    internal int get_ItemStartPage();
    internal void set_ItemStartPage(int value);
    internal int get_ItemEndPage();
    internal void set_ItemEndPage(int value);
    internal bool get_IsItemOnSearchPage();
}
internal enum Microsoft.ReportingServices.ReportRendering.SharedHiddenState : Enum {
    public int value__;
    public static SharedHiddenState Always;
    public static SharedHiddenState Never;
    public static SharedHiddenState Sometimes;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.SizeCollection : object {
    private Matrix m_owner;
    private bool m_widthsCollection;
    private ReportSizeCollection m_reportSizeCollection;
    public ReportSize Item { get; }
    public int Count { get; }
    internal SizeCollection(Matrix owner, bool widthsCollection);
    public ReportSize get_Item(int index);
    public int get_Count();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.Style : StyleBase {
    private ReportItem m_reportItem;
    private ReportItem m_reportItemDef;
    private StyleDefaults m_styleDefaults;
    private static StyleDefaults NormalStyleDefaults;
    private static StyleDefaults LineStyleDefaults;
    public int Count { get; }
    public ICollection Keys { get; }
    public object Item { get; }
    public StyleProperties SharedProperties { get; }
    public StyleProperties NonSharedProperties { get; }
    internal Style(ReportItem reportItem, ReportItem reportItemDef, RenderingContext context);
    private static Style();
    public virtual int get_Count();
    public virtual ICollection get_Keys();
    public virtual object get_Item(string styleName);
    public virtual StyleProperties get_SharedProperties();
    public virtual StyleProperties get_NonSharedProperties();
    internal bool HasBackgroundImage(Boolean& isExpressionBased);
    internal AttributeInfo GetStyleDefinition(string styleName);
    internal AttributeInfo GetStyleDefinition(string styleName, String& expressionString);
    private bool NeedPopulateSharedProps();
    private bool NeedPopulateNonSharedProps();
    internal static object GetStyleValue(string styleName, Style styleDef, Object[] styleAttributeValues);
    internal static object GetStyleValue(string styleName, Style styleDef, Object[] styleAttributeValues, bool returnDefaultStyle);
    internal virtual object GetStyleAttributeValue(string styleName, AttributeInfo attribute);
    internal virtual void PopulateStyleProperties(bool populateAll);
    private void PopulateNonSharedStyleProperties();
    private void InternalPopulateNonSharedStyleProperties(StyleAttributeHashtable styleAttributes, bool isSubtotal);
    private object CreatePropertyOrReturnDefault(string styleName, object styleValue);
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.ReportRendering.StyleBase : object {
    protected static int StyleAttributeCount;
    protected static string BorderColor;
    protected static string BorderColorLeft;
    protected static string BorderColorRight;
    protected static string BorderColorTop;
    protected static string BorderColorBottom;
    protected static string BorderStyle;
    protected static string BorderStyleLeft;
    protected static string BorderStyleRight;
    protected static string BorderStyleTop;
    protected static string BorderStyleBottom;
    protected static string BorderWidth;
    protected static string BorderWidthLeft;
    protected static string BorderWidthRight;
    protected static string BorderWidthTop;
    protected static string BorderWidthBottom;
    protected static string BackgroundImage;
    protected static string BackgroundImageSource;
    protected static string BackgroundImageValue;
    protected static string BackgroundImageMIMEType;
    protected static string BackgroundColor;
    protected static string BackgroundGradientEndColor;
    protected static string BackgroundGradientType;
    protected static string BackgroundRepeat;
    protected static string FontStyle;
    protected static string FontFamily;
    protected static string FontSize;
    protected static string FontWeight;
    protected static string Format;
    protected static string TextDecoration;
    protected static string TextAlign;
    protected static string VerticalAlign;
    protected static string Color;
    protected static string PaddingLeft;
    protected static string PaddingRight;
    protected static string PaddingTop;
    protected static string PaddingBottom;
    protected static string LineHeight;
    protected static string Direction;
    protected static string WritingMode;
    protected static string Language;
    protected static string UnicodeBiDi;
    protected static string Calendar;
    protected static string NumeralLanguage;
    protected static string NumeralVariant;
    internal RenderingContext m_renderingContext;
    protected StyleProperties m_sharedProperties;
    protected StyleProperties m_nonSharedProperties;
    protected bool m_isCustomControlGenerated;
    public object Item { get; }
    public int Count { get; }
    public ICollection Keys { get; }
    public object Item { get; }
    public StyleProperties SharedProperties { get; public set; }
    public StyleProperties NonSharedProperties { get; public set; }
    protected bool IsCustomControl { get; }
    internal StyleBase(RenderingContext context);
    public object get_Item(int index);
    public virtual int get_Count();
    public virtual ICollection get_Keys();
    public bool ContainStyleProperty(string styleName);
    public abstract virtual object get_Item(string styleName);
    public virtual StyleProperties get_SharedProperties();
    public virtual void set_SharedProperties(StyleProperties value);
    public virtual StyleProperties get_NonSharedProperties();
    public virtual void set_NonSharedProperties(StyleProperties value);
    public IEnumerator GetEnumerator();
    internal static object GetStyleValueBase(string styleName, Style styleDef, Object[] styleAttributeValues);
    internal static object CreateStyleProperty(string styleName, object styleValue);
    internal abstract virtual object GetStyleAttributeValue(string styleName, AttributeInfo attribute);
    internal bool GetBackgroundImageSource(AttributeInfo sourceAttribute, SourceType& imageSource);
    internal bool GetBackgroundImageValue(AttributeInfo valueAttribute, Object& imageValue, Boolean& isExpression);
    internal bool GetBackgroundImageMIMEType(AttributeInfo mimeTypeAttribute, Object& mimeType, Boolean& isExpression);
    internal bool GetBackgroundImageRepeat(AttributeInfo repeatAttribute, Object& repeat, Boolean& isExpression);
    internal bool GetBackgroundImageProperties(AttributeInfo sourceAttribute, AttributeInfo valueAttribute, AttributeInfo mimeTypeAttribute, SourceType& imageSource, Object& imageValue, Boolean& isValueExpression, Object& mimeType, Boolean& isMimeTypeExpression);
    internal bool GetBackgroundImageProperties(AttributeInfo sourceAttribute, AttributeInfo valueAttribute, AttributeInfo mimeTypeAttribute, AttributeInfo repeatAttribute, SourceType& imageSource, Object& imageValue, Boolean& isValueExpression, Object& mimeType, Boolean& isMimeTypeExpression, Object& repeat, Boolean& isRepeatExpression);
    public void SetStyle(StyleName style, object value, bool isShared);
    internal void AddStyleProperty(string styleName, bool isExpression, bool needNonSharedProps, bool needSharedProps, object styleProperty);
    internal void SetStyleProperty(string styleName, bool isExpression, bool needNonSharedProps, bool needSharedProps, object styleProperty);
    internal abstract virtual void PopulateStyleProperties(bool populateAll);
    protected bool get_IsCustomControl();
    internal void ExtractRenderStyles(DataValueInstanceList& sharedStyles, DataValueInstanceList& nonSharedStyles);
}
internal class Microsoft.ReportingServices.ReportRendering.StyleEnumerator : object {
    private StyleProperties m_sharedProperties;
    private StyleProperties m_nonSharedProperties;
    private int m_total;
    private int m_current;
    public object Current { get; }
    internal StyleEnumerator(StyleProperties sharedProps, StyleProperties nonSharedProps);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.StyleProperties : object {
    private Hashtable m_nameMap;
    private ArrayList m_valueCollection;
    public object Item { get; }
    public object Item { get; }
    public int Count { get; }
    public ICollection Keys { get; }
    internal StyleProperties(int capacity);
    public object get_Item(int index);
    public object get_Item(string styleName);
    public int get_Count();
    public ICollection get_Keys();
    public bool ContainStyleProperty(string styleName);
    internal void Add(string name, object value);
    internal void Set(string name, object value);
    internal DataValueInstanceList ExtractRenderStyles();
    public sealed virtual object Clone();
}
internal class Microsoft.ReportingServices.ReportRendering.SubReport : ReportItem {
    private Report m_report;
    private bool m_processedWithError;
    public Report Report { get; }
    public bool ProcessedWithError { get; }
    public bool NoRows { get; }
    public string NoRowMessage { get; }
    internal SubReport(int intUniqueName, SubReport reportItemDef, SubReportInstance reportItemInstance, RenderingContext renderingContext, Report innerReport, bool processedWithError);
    public Report get_Report();
    public bool get_ProcessedWithError();
    public bool get_NoRows();
    public string get_NoRowMessage();
    internal virtual bool Search(SearchContext searchContext);
}
internal class Microsoft.ReportingServices.ReportRendering.Table : DataRegion {
    private TableGroupCollection m_tableGroups;
    private TableRowsCollection m_detailRows;
    private TableHeaderFooterRows m_headerRows;
    private TableHeaderFooterRows m_footerRows;
    private TableColumnCollection m_tableColumns;
    private bool m_calculatedFixedColumnHeaders;
    public bool PageBreakAtEnd { get; }
    public bool PageBreakAtStart { get; }
    public bool GroupBreakAtStart { get; }
    public bool GroupBreakAtEnd { get; }
    public TableColumnCollection Columns { get; }
    public TableGroupCollection TableGroups { get; }
    public TableHeaderFooterRows TableHeader { get; }
    public TableHeaderFooterRows TableFooter { get; }
    public TableRowsCollection DetailRows { get; }
    public string DetailDataElementName { get; }
    public string DetailDataCollectionName { get; }
    public DataElementOutputTypes DetailDataElementOutput { get; }
    public SharedHiddenState DetailSharedHidden { get; }
    public bool NoRows { get; }
    public bool UseOWC { get; }
    public bool ContainsNonSharedStyles { get; }
    internal string InstanceInfoNoRowMessage { get; }
    public bool FixedHeader { get; }
    internal bool HasFixedColumnHeaders { get; }
    internal Table TableDefinition { get; }
    internal Table(int intUniqueName, Table reportItemDef, TableInstance reportItemInstance, RenderingContext renderingContext);
    public virtual bool get_PageBreakAtEnd();
    public virtual bool get_PageBreakAtStart();
    public bool get_GroupBreakAtStart();
    public bool get_GroupBreakAtEnd();
    public TableColumnCollection get_Columns();
    public TableGroupCollection get_TableGroups();
    public TableHeaderFooterRows get_TableHeader();
    public TableHeaderFooterRows get_TableFooter();
    public TableRowsCollection get_DetailRows();
    public string get_DetailDataElementName();
    public string get_DetailDataCollectionName();
    public DataElementOutputTypes get_DetailDataElementOutput();
    public SharedHiddenState get_DetailSharedHidden();
    public virtual bool get_NoRows();
    public bool get_UseOWC();
    public bool get_ContainsNonSharedStyles();
    internal virtual string get_InstanceInfoNoRowMessage();
    public bool get_FixedHeader();
    internal bool get_HasFixedColumnHeaders();
    internal Table get_TableDefinition();
    internal virtual bool Search(SearchContext searchContext);
    private static int TableWithVisibleColumns(TableColumnCollection columns);
    private static bool SearchFullTable(Table table, SearchContext searchContext);
    private bool SearchPartialTable(Table table, SearchContext searchContext);
    private static bool SearchFullTableGroup(TableGroup tableGroup, TableColumnCollection columns, SearchContext searchContext);
    private static bool SearchPartialTableGroup(TableGroup group, TableColumnCollection columns, SearchContext searchContext);
    private static bool SearchTableRows(TableRowCollection tableRows, TableColumnCollection columns, SearchContext searchContext);
    private static bool SearchRowCells(TableCellCollection rowCells, TableColumnCollection columns, SearchContext searchContext);
    public bool IsGroupOnThisPage(int groupIndex, int pageNumber, Int32& startPage, Int32& endPage);
    public void GetDetailsOnThisPage(int pageIndex, Int32& start, Int32& numberOfDetails);
    public void GetTableGroupsOnPage(int page, Int32& startGroup, Int32& endGroup);
}
internal class Microsoft.ReportingServices.ReportRendering.TableCell : object {
    private Table m_tableDef;
    private int m_index;
    private TableCellCollection m_cells;
    public ReportItem ReportItem { get; }
    public int ColSpan { get; }
    public string ID { get; }
    public object SharedRenderingInfo { get; public set; }
    internal TableCell(Table tableDef, int index, TableCellCollection cells);
    public ReportItem get_ReportItem();
    public int get_ColSpan();
    public string get_ID();
    public object get_SharedRenderingInfo();
    public void set_SharedRenderingInfo(object value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.TableCellCollection : object {
    private Table m_table;
    private TableCell[] m_cells;
    private ReportItemCollection m_cellReportItems;
    private TableRow m_rowDef;
    private TableRowInstance m_rowInstance;
    public TableCell Item { get; }
    public int Count { get; }
    internal ReportItemCollection ReportItems { get; }
    internal IntList ColSpans { get; }
    internal TableRow RowDef { get; }
    internal RenderingContext RenderingContext { get; }
    internal TableCellCollection(Table table, TableRow rowDef, TableRowInstance rowInstance);
    public TableCell get_Item(int index);
    public int get_Count();
    internal ReportItemCollection get_ReportItems();
    internal IntList get_ColSpans();
    internal TableRow get_RowDef();
    internal RenderingContext get_RenderingContext();
}
internal class Microsoft.ReportingServices.ReportRendering.TableColumn : object {
    private Table m_owner;
    private TableColumn m_columnDef;
    private TableColumnInstance m_columnInstance;
    private int m_index;
    public string UniqueName { get; }
    public ReportSize Width { get; }
    public bool Hidden { get; }
    public bool HasToggle { get; }
    public string ToggleItem { get; }
    public TextBox ToggleParent { get; }
    public SharedHiddenState SharedHidden { get; }
    public bool IsToggleChild { get; }
    internal TableColumnInstance ColumnInstance { get; }
    public bool FixedHeader { get; }
    internal TableColumn ColumnDefinition { get; }
    internal TableColumn(Table owner, TableColumn columnDef, int index);
    public string get_UniqueName();
    public ReportSize get_Width();
    public bool get_Hidden();
    public bool get_HasToggle();
    public string get_ToggleItem();
    public TextBox get_ToggleParent();
    public SharedHiddenState get_SharedHidden();
    public bool get_IsToggleChild();
    internal TableColumnInstance get_ColumnInstance();
    public bool get_FixedHeader();
    internal TableColumn get_ColumnDefinition();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.TableColumnCollection : object {
    private Table m_owner;
    private TableColumnList m_columnDefs;
    private TableColumn[] m_columns;
    public TableColumn Item { get; }
    public int Count { get; }
    internal TableColumnCollection(Table owner, TableColumnList columnDefs);
    public TableColumn get_Item(int index);
    public int get_Count();
}
internal class Microsoft.ReportingServices.ReportRendering.TableDetailRow : TableRow {
    private TableDetailRowCollection m_detail;
    public bool Hidden { get; }
    public TextBox ToggleParent { get; }
    public bool HasToggle { get; }
    public string ToggleItem { get; }
    public SharedHiddenState SharedHidden { get; }
    public bool IsToggleChild { get; }
    internal TableDetailRow(Table owner, TableRow rowDef, TableRowInstance rowInstance, TableDetailRowCollection detail);
    public virtual bool get_Hidden();
    public virtual TextBox get_ToggleParent();
    public virtual bool get_HasToggle();
    public virtual string get_ToggleItem();
    public virtual SharedHiddenState get_SharedHidden();
    public virtual bool get_IsToggleChild();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.TableDetailRowCollection : TableRowCollection {
    private TableDetailInstance m_detailInstance;
    private TableDetailInstanceInfo m_detailInstanceInfo;
    public TableRow Item { get; }
    internal TableDetailInstance DetailInstance { get; }
    internal TableDetailInstanceInfo InstanceInfo { get; }
    internal bool Hidden { get; }
    internal TableDetailRowCollection(Table owner, TableRowList rowDefs, TableRowInstance[] rowInstances, TableDetailInstance detailInstance);
    public virtual TableRow get_Item(int index);
    internal TableDetailInstance get_DetailInstance();
    internal TableDetailInstanceInfo get_InstanceInfo();
    internal bool get_Hidden();
}
internal class Microsoft.ReportingServices.ReportRendering.TableGroup : Group {
    private TableGroup m_groupDef;
    private TableGroupInstance m_groupInstance;
    private TableGroupInstanceInfo m_groupInstanceInfo;
    private TableGroupCollection m_subGroups;
    private TableRowsCollection m_detailRows;
    private TableHeaderFooterRows m_headerRows;
    private TableHeaderFooterRows m_footerRows;
    private TableGroup m_parent;
    public string ID { get; }
    public string Label { get; }
    public bool InDocumentMap { get; }
    public TableHeaderFooterRows GroupHeader { get; }
    public TableHeaderFooterRows GroupFooter { get; }
    public bool PageBreakAtStart { get; }
    public bool PageBreakAtEnd { get; }
    public TableGroupCollection SubGroups { get; }
    public TableRowsCollection DetailRows { get; }
    public bool Hidden { get; }
    public CustomPropertyCollection CustomProperties { get; }
    public TableGroup Parent { get; }
    internal TableGroupInstanceInfo InstanceInfo { get; }
    internal TableGroup GroupDefinition { get; }
    internal TableGroup(Table owner, TableGroup parent, TableGroup groupDef, TableGroupInstance groupInstance);
    public virtual string get_ID();
    public virtual string get_Label();
    public sealed virtual bool get_InDocumentMap();
    public TableHeaderFooterRows get_GroupHeader();
    public TableHeaderFooterRows get_GroupFooter();
    public virtual bool get_PageBreakAtStart();
    public virtual bool get_PageBreakAtEnd();
    public TableGroupCollection get_SubGroups();
    public TableRowsCollection get_DetailRows();
    public virtual bool get_Hidden();
    public virtual CustomPropertyCollection get_CustomProperties();
    public TableGroup get_Parent();
    internal TableGroupInstanceInfo get_InstanceInfo();
    internal TableGroup get_GroupDefinition();
    public void GetDetailsOnThisPage(int pageIndex, Int32& start, Int32& numberOfDetails);
    public bool IsGroupOnThisPage(int groupIndex, int pageNumber, Int32& startPage, Int32& endPage);
    public void GetSubGroupsOnPage(int page, Int32& startGroup, Int32& endGroup);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.TableGroupCollection : object {
    private Table m_owner;
    private TableGroup m_groupDef;
    private TableGroupInstanceList m_groupInstances;
    private TableGroup[] m_groups;
    private TableGroup m_firstGroup;
    private TableGroup m_parent;
    public TableGroup Item { get; }
    public int Count { get; }
    internal TableGroup GroupDefinition { get; }
    internal TableGroupCollection(Table owner, TableGroup parent, TableGroup groupDef, TableGroupInstanceList groupInstances);
    public TableGroup get_Item(int index);
    public int get_Count();
    internal TableGroup get_GroupDefinition();
}
internal class Microsoft.ReportingServices.ReportRendering.TableHeaderFooterRows : TableRowCollection {
    private bool m_repeatOnNewPage;
    public bool RepeatOnNewPage { get; }
    internal TableHeaderFooterRows(Table owner, bool repeatOnNewPage, TableRowList rowDefs, TableRowInstance[] rowInstances);
    public bool get_RepeatOnNewPage();
}
internal class Microsoft.ReportingServices.ReportRendering.TableRow : object {
    internal Table m_owner;
    internal TableRow m_rowDef;
    internal TableRowInstance m_rowInstance;
    internal TableCellCollection m_rowCells;
    internal TableRowInstanceInfo m_tableRowInstanceInfo;
    public string ID { get; }
    public string UniqueName { get; }
    public object SharedRenderingInfo { get; public set; }
    public ReportSize Height { get; }
    public TableCellCollection TableCellCollection { get; }
    public bool Hidden { get; }
    public bool HasToggle { get; }
    public string ToggleItem { get; }
    public TextBox ToggleParent { get; }
    public SharedHiddenState SharedHidden { get; }
    public bool IsToggleChild { get; }
    internal TableRowInstanceInfo InstanceInfo { get; }
    internal TableRow(Table owner, TableRow rowDef, TableRowInstance rowInstance);
    public string get_ID();
    public string get_UniqueName();
    public object get_SharedRenderingInfo();
    public void set_SharedRenderingInfo(object value);
    public ReportSize get_Height();
    public TableCellCollection get_TableCellCollection();
    public virtual bool get_Hidden();
    public virtual bool get_HasToggle();
    public virtual string get_ToggleItem();
    public virtual TextBox get_ToggleParent();
    public virtual SharedHiddenState get_SharedHidden();
    public virtual bool get_IsToggleChild();
    internal TableRowInstanceInfo get_InstanceInfo();
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.ReportingServices.ReportRendering.TableRowCollection : object {
    internal Table m_owner;
    internal TableRowList m_rowDefs;
    internal TableRowInstance[] m_rowInstances;
    internal TableRow[] m_rows;
    public TableRow Item { get; }
    public int Count { get; }
    internal TableRowList DetailRowDefinitions { get; }
    internal TableRowCollection(Table owner, TableRowList rowDefs, TableRowInstance[] rowInstances);
    public virtual TableRow get_Item(int index);
    public int get_Count();
    internal TableRowList get_DetailRowDefinitions();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.TableRowsCollection : object {
    private Table m_owner;
    private TableDetail m_detailDef;
    private TableDetailInstanceList m_detailInstances;
    private TableDetailRowCollection[] m_rows;
    private TableDetailRowCollection m_firstRows;
    public TableDetailRowCollection Item { get; }
    public int Count { get; }
    internal TableDetail DetailDefinition { get; }
    internal TableRowsCollection(Table owner, TableDetail detailDef, TableDetailInstanceList detailInstances);
    public TableDetailRowCollection get_Item(int index);
    public int get_Count();
    internal TableDetail get_DetailDefinition();
}
internal class Microsoft.ReportingServices.ReportRendering.TextBox : ReportItem {
    private SimpleTextBoxInstanceInfo m_simpleInstanceInfo;
    private string m_value;
    private ActionInfo m_actionInfo;
    private object m_originalValue;
    internal SimpleTextBoxInstanceInfo SimpleInstanceInfo { get; }
    public DataElementStyles DataElementStyle { get; }
    public bool CanGrow { get; }
    public bool CanShrink { get; }
    public string Value { get; }
    public ReportUrl HyperLinkURL { get; }
    public ReportUrl DrillthroughReport { get; }
    public NameValueCollection DrillthroughParameters { get; }
    public string BookmarkLink { get; }
    public ActionInfo ActionInfo { get; }
    public bool Duplicate { get; }
    public bool HideDuplicates { get; }
    public string Formula { get; }
    public object OriginalValue { get; }
    public TypeCode SharedTypeCode { get; }
    public bool Hidden { get; }
    public bool IsToggleParent { get; }
    public bool IsSharedToggleParent { get; }
    public bool ToggleState { get; }
    public bool CanSort { get; }
    public SortOptions SortState { get; }
    internal TextBox(string uniqueName, int intUniqueName, TextBox reportItemDef, TextBoxInstance reportItemInstance, RenderingContext renderingContext);
    internal SimpleTextBoxInstanceInfo get_SimpleInstanceInfo();
    public DataElementStyles get_DataElementStyle();
    public bool get_CanGrow();
    public bool get_CanShrink();
    public string get_Value();
    public ReportUrl get_HyperLinkURL();
    public ReportUrl get_DrillthroughReport();
    public NameValueCollection get_DrillthroughParameters();
    public string get_BookmarkLink();
    public ActionInfo get_ActionInfo();
    public bool get_Duplicate();
    public bool get_HideDuplicates();
    public string get_Formula();
    public object get_OriginalValue();
    public TypeCode get_SharedTypeCode();
    public virtual bool get_Hidden();
    public bool get_IsToggleParent();
    public bool get_IsSharedToggleParent();
    public bool get_ToggleState();
    public bool get_CanSort();
    public SortOptions get_SortState();
    internal virtual bool Search(SearchContext searchContext);
    private bool SearchTextBox(string findValue);
}
internal enum Microsoft.ReportingServices.ReportRendering.UrlParameterType : Enum {
    public int value__;
    public static UrlParameterType ServerParameter;
    public static UrlParameterType ReportParameter;
    public static UrlParameterType RenderingParameter;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.ReportingServices.ReportRendering.ValueCollection : object {
    private ArrayList m_values;
    public object Item { get; }
    public int Count { get; }
    internal ValueCollection(int capacity);
    internal ValueCollection(ArrayList values);
    public object get_Item(int index);
    public int get_Count();
    internal void Add(object value);
}
internal class Microsoft.ReportingServices.SandboxCasPolicySettings : object {
    private PermissionSet m_basePermissions;
    private List`1<StrongName> m_fullTrustAssemblies;
    private ReadOnlyCollection`1<StrongName> m_fullTrustAssembliesReadOnly;
    public PermissionSet BasePermissions { get; public set; }
    public ReadOnlyCollection`1<StrongName> FullTrustAssemblies { get; }
    public PermissionSet get_BasePermissions();
    public void set_BasePermissions(PermissionSet value);
    public ReadOnlyCollection`1<StrongName> get_FullTrustAssemblies();
    public void AddFullTrustAssembly(StrongName assemblyName);
    public SandboxCasPolicySettings Copy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.ReportingServices.StandalonePreviewStore : PreviewStore {
    public virtual bool GetResource(string resourcePath, Byte[]& contents, String& mimeType);
    public virtual DataSourceInfo GetDataSource(string dataSourcePath);
    protected virtual ReportID GetReportIDForItem(CatalogItemContextBase itemContext);
    protected virtual Byte[] GetReportDefinition(ReportID reportId);
    protected virtual void SetCredentialsForEmbeddedDataSource(ReportID reportId, DataSourceInfo dataSource);
}
internal class Microsoft.ReportingServices.ViewerExtensionFactory : object {
    public sealed virtual bool IsRegisteredCustomReportItemExtension(string extensionType);
    public sealed virtual object GetNewCustomReportItemProcessingInstanceClass(string reportItemName);
    public sealed virtual IExtension GetNewRendererExtensionClass(string format);
}
internal class Microsoft.ReportingServices.ViewerJobContextImpl : object {
    private object m_sync;
    public object SyncRoot { get; }
    public TimeSpan TimeDataRetrieval { get; public set; }
    public TimeSpan TimeProcessing { get; public set; }
    public TimeSpan TimeRendering { get; public set; }
    public long RowCount { get; public set; }
    public string ExecutionId { get; }
    public sealed virtual object get_SyncRoot();
    public sealed virtual TimeSpan get_TimeDataRetrieval();
    public sealed virtual void set_TimeDataRetrieval(TimeSpan value);
    public sealed virtual TimeSpan get_TimeProcessing();
    public sealed virtual void set_TimeProcessing(TimeSpan value);
    public sealed virtual TimeSpan get_TimeRendering();
    public sealed virtual void set_TimeRendering(TimeSpan value);
    public sealed virtual long get_RowCount();
    public sealed virtual void set_RowCount(long value);
    public sealed virtual void SetAdditionalInfo(string name, string value);
    public sealed virtual void SetAdditionalInfo(string categoryName, string name, string value);
    public sealed virtual void AddAbortHelper(IAbortHelper abortHelper);
    public sealed virtual void RemoveAbortHelper();
    public sealed virtual void AddCommand(IDbCommand cmd);
    public sealed virtual void RemoveCommand(IDbCommand cmd);
    public sealed virtual void TryQueueWorkItem(WaitCallback callback, object state);
    public sealed virtual string get_ExecutionId();
}
internal class Microsoft.SqlServer.ReportingServices.SoapExceptionStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string MissingEndpoint { get; }
    public static string VersionMismatch { get; }
    public static string SOAPProxySource { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_MissingEndpoint();
    public static string get_VersionMismatch();
    public static string RSSoapMessageFormat(string message, string errorCode);
    public static string get_SOAPProxySource();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
