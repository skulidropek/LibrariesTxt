public class Microsoft.Rest.Azure.Authentication.ActiveDirectoryClientSettings : object {
    public static string EnableEbdMagicCookie;
    [CompilerGeneratedAttribute]
private PromptBehavior <PromptBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OwnerWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalQueryParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ClientRedirectUri>k__BackingField;
    public PromptBehavior PromptBehavior { get; public set; }
    public object OwnerWindow { get; public set; }
    public string AdditionalQueryParameters { get; public set; }
    public string ClientId { get; public set; }
    public Uri ClientRedirectUri { get; public set; }
    public ActiveDirectoryClientSettings(string clientId, Uri clientRedirectUri);
    [CompilerGeneratedAttribute]
public PromptBehavior get_PromptBehavior();
    [CompilerGeneratedAttribute]
public void set_PromptBehavior(PromptBehavior value);
    [CompilerGeneratedAttribute]
public object get_OwnerWindow();
    [CompilerGeneratedAttribute]
public void set_OwnerWindow(object value);
    [CompilerGeneratedAttribute]
public string get_AdditionalQueryParameters();
    [CompilerGeneratedAttribute]
public void set_AdditionalQueryParameters(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public Uri get_ClientRedirectUri();
    [CompilerGeneratedAttribute]
public void set_ClientRedirectUri(Uri value);
    public static ActiveDirectoryClientSettings UseCacheOrCookiesOnly(string clientId, Uri clientRedirectUri);
    public static ActiveDirectoryClientSettings UseCacheCookiesOrPrompt(string clientId, Uri clientRedirectUri);
    public static ActiveDirectoryClientSettings UsePromptOnly(string clientId, Uri clientRedirectUri);
}
public class Microsoft.Rest.Azure.Authentication.ActiveDirectoryServiceSettings : object {
    private Uri _authenticationEndpoint;
    private static ActiveDirectoryServiceSettings AzureSettings;
    private static ActiveDirectoryServiceSettings AzureChinaSettings;
    private static ActiveDirectoryServiceSettings AzureUSGovernmentSettings;
    private static ActiveDirectoryServiceSettings AzureGermanCloudSettings;
    [CompilerGeneratedAttribute]
private Uri <TokenAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateAuthority>k__BackingField;
    public static ActiveDirectoryServiceSettings Azure { get; }
    public static ActiveDirectoryServiceSettings AzureChina { get; }
    public static ActiveDirectoryServiceSettings AzureUSGovernment { get; }
    public static ActiveDirectoryServiceSettings AzureGermany { get; }
    public Uri AuthenticationEndpoint { get; public set; }
    public Uri TokenAudience { get; public set; }
    public bool ValidateAuthority { get; public set; }
    private static ActiveDirectoryServiceSettings();
    public static ActiveDirectoryServiceSettings get_Azure();
    public static ActiveDirectoryServiceSettings get_AzureChina();
    public static ActiveDirectoryServiceSettings get_AzureUSGovernment();
    public static ActiveDirectoryServiceSettings get_AzureGermany();
    public Uri get_AuthenticationEndpoint();
    public void set_AuthenticationEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_TokenAudience();
    [CompilerGeneratedAttribute]
public void set_TokenAudience(Uri value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAuthority();
    [CompilerGeneratedAttribute]
public void set_ValidateAuthority(bool value);
    private static Uri EnsureTrailingSlash(Uri authenticationEndpoint);
}
public class Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider : object {
    private AuthenticationContext _authenticationContext;
    private string _tokenAudience;
    private IApplicationAuthenticationProvider _authentications;
    private string _clientId;
    private DateTimeOffset _expiration;
    private string _accessToken;
    private string _accessTokenType;
    private static TimeSpan ExpirationThreshold;
    private Dictionary`2<string, string> _authData;
    protected bool AccessTokenExpired { get; }
    public ApplicationTokenProvider(AuthenticationContext context, string tokenAudience, ClientCredential credential, AuthenticationResult authenticationResult);
    public ApplicationTokenProvider(AuthenticationContext context, string tokenAudience, ClientAssertionCertificate certificate, AuthenticationResult authenticationResult);
    public ApplicationTokenProvider(AuthenticationContext context, string tokenAudience, string clientId, IApplicationAuthenticationProvider authenticationStore, AuthenticationResult authenticationResult);
    public ApplicationTokenProvider(AuthenticationContext context, string tokenAudience, string clientId, IApplicationAuthenticationProvider authenticationStore, AuthenticationResult authenticationResult, DateTimeOffset tokenExpiration);
    public ApplicationTokenProvider(Func`2<Dictionary`2<string, string>, Dictionary`2<string, string>> UpdateAuthData);
    private static ApplicationTokenProvider();
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__14")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, string secret);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__15")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, string secret, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__16")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, string secret, ActiveDirectoryServiceSettings settings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__17")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, string secret, ActiveDirectoryServiceSettings settings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__18")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, ClientCredential credential, ActiveDirectoryServiceSettings settings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__19")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, ClientCredential credential, ActiveDirectoryServiceSettings settings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__20")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, ClientCredential credential);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__21")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, ClientCredential credential, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__22")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, Byte[] certificate, string password);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__23")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, Byte[] certificate, string password, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__24")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, Byte[] certificate, string password, ActiveDirectoryServiceSettings settings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__25")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, Byte[] certificate, string password, ActiveDirectoryServiceSettings settings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__26")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, ClientAssertionCertificate certificate, ActiveDirectoryServiceSettings settings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentWithCertificateAsync>d__27")]
public static Task`1<ServiceClientCredentials> LoginSilentWithCertificateAsync(string domain, ClientAssertionCertificate certificate);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentWithCertificateAsync>d__28")]
public static Task`1<ServiceClientCredentials> LoginSilentWithCertificateAsync(string domain, ClientAssertionCertificate certificate, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentWithCertificateAsync>d__29")]
public static Task`1<ServiceClientCredentials> LoginSilentWithCertificateAsync(string domain, ClientAssertionCertificate certificate, ActiveDirectoryServiceSettings settings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__30")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, IApplicationAuthenticationProvider authenticationProvider);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__31")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, IApplicationAuthenticationProvider authenticationProvider, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__32")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, IApplicationAuthenticationProvider authenticationProvider, ActiveDirectoryServiceSettings settings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<LoginSilentAsync>d__33")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string domain, string clientId, IApplicationAuthenticationProvider authenticationProvider, ActiveDirectoryServiceSettings settings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.ApplicationTokenProvider/<GetAuthenticationHeaderAsync>d__34")]
public virtual Task`1<AuthenticationHeaderValue> GetAuthenticationHeaderAsync(CancellationToken cancellationToken);
    protected virtual bool get_AccessTokenExpired();
    private void Initialize(AuthenticationContext context, string tokenAudience, string clientId, IApplicationAuthenticationProvider authenticationStore, AuthenticationResult authenticationResult, DateTimeOffset tokenExpiration);
    private static AuthenticationContext GetAuthenticationContext(string domain, ActiveDirectoryServiceSettings serviceSettings, TokenCache cache);
}
public class Microsoft.Rest.Azure.Authentication.AuthenticationException : RestException {
    public AuthenticationException(string message);
    public AuthenticationException(string message, Exception innerException);
    internal AuthenticationException(string message, AdalException innerException);
    protected AuthenticationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Rest.Azure.Authentication.CertificateAuthenticationProvider : object {
    private Func`2<string, Task`1<ClientAssertionCertificate>> _assertionProvider;
    private bool _isCertRollOverEnabled;
    public CertificateAuthenticationProvider(Func`2<string, Task`1<ClientAssertionCertificate>> provider);
    public CertificateAuthenticationProvider(Byte[] certificate, string password);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.CertificateAuthenticationProvider/<AuthenticateAsync>d__5")]
public sealed virtual Task`1<AuthenticationResult> AuthenticateAsync(string clientId, string audience, AuthenticationContext context);
}
public interface Microsoft.Rest.Azure.Authentication.IApplicationAuthenticationProvider {
    public abstract virtual Task`1<AuthenticationResult> AuthenticateAsync(string clientId, string audience, AuthenticationContext context);
}
public class Microsoft.Rest.Azure.Authentication.Internal.MemoryApplicationAuthenticationProvider : object {
    private IDictionary`2<string, ClientCredential> _credentials;
    public MemoryApplicationAuthenticationProvider(ClientCredential credential);
    public void AddCredential(ClientCredential credential);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.Internal.MemoryApplicationAuthenticationProvider/<AuthenticateAsync>d__4")]
public sealed virtual Task`1<AuthenticationResult> AuthenticateAsync(string clientId, string audience, AuthenticationContext context);
}
public interface Microsoft.Rest.Azure.Authentication.IUserCredentialProvider {
    public abstract virtual Task`1<UserCredential> GetCredentialAsync(string username);
}
public class Microsoft.Rest.Azure.Authentication.UserTokenProvider : object {
    private string _tokenAudience;
    private AuthenticationContext _authenticationContext;
    private string _clientId;
    private UserIdentifier _userid;
    public static string CommonTenantId;
    public UserTokenProvider(AuthenticationContext context, string clientId, Uri tokenAudience, UserIdentifier userId);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__0")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(ActiveDirectoryClientSettings clientSettings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__1")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(ActiveDirectoryClientSettings clientSettings, string username, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__2")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(ActiveDirectoryClientSettings clientSettings, string username);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__3")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(ActiveDirectoryClientSettings clientSettings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__4")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__5")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, string username, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__6")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, string username);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__7")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__8")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, ActiveDirectoryServiceSettings serviceSettings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__9")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, ActiveDirectoryServiceSettings serviceSettings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__10")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, ActiveDirectoryServiceSettings serviceSettings, string username);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__11")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, ActiveDirectoryServiceSettings serviceSettings, string username, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__12")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, ActiveDirectoryServiceSettings serviceSettings, UserIdentifier userId, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__13")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, ActiveDirectoryServiceSettings serviceSettings, Func`1<TaskScheduler> taskScheduler);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginWithPromptAsync>d__14")]
public static Task`1<ServiceClientCredentials> LoginWithPromptAsync(string domain, ActiveDirectoryClientSettings clientSettings, ActiveDirectoryServiceSettings serviceSettings, UserIdentifier userId, TokenCache cache, Func`1<TaskScheduler> taskScheduler);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginSilentAsync>d__15")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string clientId, string domain, string username, string password);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginSilentAsync>d__16")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string clientId, string domain, string username, string password, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginSilentAsync>d__17")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string clientId, string domain, string username, string password, ActiveDirectoryServiceSettings serviceSettings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<LoginSilentAsync>d__18")]
public static Task`1<ServiceClientCredentials> LoginSilentAsync(string clientId, string domain, string username, string password, ActiveDirectoryServiceSettings serviceSettings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<CreateCredentialsFromCache>d__25")]
public static Task`1<ServiceClientCredentials> CreateCredentialsFromCache(string clientId, string domain, string username);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<CreateCredentialsFromCache>d__26")]
public static Task`1<ServiceClientCredentials> CreateCredentialsFromCache(string clientId, string domain, string username, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<CreateCredentialsFromCache>d__27")]
public static Task`1<ServiceClientCredentials> CreateCredentialsFromCache(string clientId, string domain, string username, ActiveDirectoryServiceSettings serviceSettings);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<CreateCredentialsFromCache>d__28")]
public static Task`1<ServiceClientCredentials> CreateCredentialsFromCache(string clientId, string domain, string username, ActiveDirectoryServiceSettings serviceSettings, TokenCache cache);
    [AsyncStateMachineAttribute("Microsoft.Rest.Azure.Authentication.UserTokenProvider/<GetAuthenticationHeaderAsync>d__29")]
public virtual Task`1<AuthenticationHeaderValue> GetAuthenticationHeaderAsync(CancellationToken cancellationToken);
    private static AuthenticationContext GetAuthenticationContext(string domain, ActiveDirectoryServiceSettings serviceSettings, TokenCache cache);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Rest.ClientRuntime.Azure.Authentication.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AuthenticationEndpointContainsQuery { get; }
    internal static string ErrorAcquiringToken { get; }
    internal static string ErrorRenewingToken { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AuthenticationEndpointContainsQuery();
    internal static string get_ErrorAcquiringToken();
    internal static string get_ErrorRenewingToken();
}
public static class Microsoft.Rest.ClientRuntime.Azure.Authentication.Utilities.Check : object {
    public static void NotNull(object argument, string argumentName);
    public static void NotEmptyNotNull(string argument, string argumentName);
    public static void FileExists(string filePath);
    public static void DirectoryExists(string dirPath);
    public static void Empty(IEnumerable`1<T> collection, bool expectedResult, string exceptionMessage);
}
