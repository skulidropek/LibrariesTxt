[AttributeUsageAttribute("256")]
public class FabActUtil.CommandLineParser.CommandLineArgumentAttribute : Attribute {
    private CommandLineArgumentType type;
    private string shortName;
    private string longName;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public CommandLineArgumentType Type { get; }
    public bool DefaultShortName { get; }
    public string ShortName { get; public set; }
    public bool DefaultLongName { get; }
    public string LongName { get; public set; }
    public string Description { get; public set; }
    public CommandLineArgumentAttribute(CommandLineArgumentType type);
    public CommandLineArgumentType get_Type();
    public bool get_DefaultShortName();
    public string get_ShortName();
    public void set_ShortName(string value);
    public bool get_DefaultLongName();
    public string get_LongName();
    public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
internal class FabActUtil.CommandLineParser.CommandLineArgumentParser : object {
    private ArrayList arguments;
    private Hashtable argumentMap;
    private Argument defaultArgument;
    private ErrorReporter reporter;
    public string Usage { get; }
    public CommandLineArgumentParser(Type argumentSpecification, ErrorReporter reporter);
    public string get_Usage();
    public bool Parse(String[] args, object destination);
    private static CommandLineArgumentAttribute GetAttribute(FieldInfo field);
    private static int IndentLength(int lineLength);
    private static string LongName(CommandLineArgumentAttribute attribute, FieldInfo field);
    private static string Description(CommandLineArgumentAttribute attribute);
    private static string ShortName(CommandLineArgumentAttribute attribute, FieldInfo field);
    private static bool ExplicitShortName(CommandLineArgumentAttribute attribute);
    private static Type ElementType(FieldInfo field);
    private static CommandLineArgumentType Flags(CommandLineArgumentAttribute attribute, FieldInfo field);
    private static bool IsCollectionType(Type type);
    private static bool IsValidElementType(Type type);
    private bool LexFileArguments(string fileName, String[]& argumentsStrings);
    private void ReportUnrecognizedArgument(string argument);
    private bool ParseArgumentList(String[] args, object destination);
}
[FlagsAttribute]
public enum FabActUtil.CommandLineParser.CommandLineArgumentType : Enum {
    public int value__;
    public static CommandLineArgumentType Required;
    public static CommandLineArgumentType Unique;
    public static CommandLineArgumentType Multiple;
    public static CommandLineArgumentType AtMostOnce;
    public static CommandLineArgumentType LastOccurenceWins;
    public static CommandLineArgumentType MultipleUnique;
}
public class FabActUtil.CommandLineParser.CommandLineUtility : object {
    public static string NewLine;
    public static bool ParseCommandLineArguments(String[] arguments, object destination);
    public static bool ParseCommandLineArguments(String[] arguments, object destination, ErrorReporter reporter);
    public static string CommandLineArgumentsUsage(Type argumentType);
}
[AttributeUsageAttribute("256")]
public class FabActUtil.CommandLineParser.DefaultCommandLineArgumentAttribute : CommandLineArgumentAttribute {
    public DefaultCommandLineArgumentAttribute(CommandLineArgumentType type);
}
public class FabActUtil.CommandLineParser.ErrorReporter : MulticastDelegate {
    public ErrorReporter(object object, IntPtr method);
    public virtual void Invoke(string message);
    public virtual IAsyncResult BeginInvoke(string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class FabActUtil.CommandLineParser.IndentedWriter : StreamWriter {
    private int indent;
    private string newLine;
    public string NewLine { get; }
    public int Indent { get; public set; }
    public IndentedWriter(Stream stream);
    public virtual string get_NewLine();
    public int get_Indent();
    public void set_Indent(int value);
    private static string GetNewLine(int indent);
}
internal class FabActUtil.Generator.AppParameterFileUpdater : object {
    private static string ParamNameFormat;
    private static string PartitionCountParamName;
    private static int LocalFiveNodeDefaultPartitionCount;
    private static int LocalOneNodeDefaultPartitionCount;
    private static string TargetReplicaSetSizeParamName;
    private static int LocalOneNodeDefaultTargetReplicaSetSize;
    private static string MinReplicaSetSizeParamName;
    private static int LocalOneNodeDefaultMinReplicaSetSize;
    internal static void AddServiceParameterValuesToLocalFiveNodeParamFile(Arguments arguments);
    internal static void AddServiceParameterValuesToLocalOneNodeParamFile(Arguments arguments);
    internal static void AddParameterValuesToLocalFiveNodeParamFile(Arguments arguments);
    internal static void AddParameterValuesToLocalOneNodeParamFile(Arguments arguments);
    internal static StartupServiceInstanceDefinitionTypeParameter[] MergeServiceParams(IEnumerable`1<StartupServiceInstanceDefinitionTypeParameter> existingItems, IEnumerable`1<StartupServiceInstanceDefinitionTypeParameter> newItems);
    internal static AppInstanceDefinitionTypeParameter[] MergeAppParams(IEnumerable`1<AppInstanceDefinitionTypeParameter> existingItems, IEnumerable`1<AppInstanceDefinitionTypeParameter> newItems);
}
internal class FabActUtil.Generator.ManifestGenerator : object {
    private static string DefaultPartitionCount;
    private static string NoneStatePersistenceTargetReplicaDefaultValue;
    private static string NoneStatePersistenceMinReplicaDefaultValue;
    private static string PersistedStateTargetReplicaDefaultValue;
    private static string PersistedStateMinReplicaDefaultValue;
    private static string ApplicationManifestFileName;
    private static string ServiceManifestFileName;
    private static string ConfigSettingsFileName;
    private static string ExtensionSchemaNamespace;
    private static string GeneratedServiceTypeExtensionName;
    private static string GeneratedNamesRootElementName;
    private static string GeneratedNamesAttributeName;
    private static string GeneratedDefaultServiceName;
    private static string GeneratedServiceEndpointName;
    private static string GeneratedServiceEndpointV2Name;
    private static string GeneratedServiceEndpointWrappedMessageStackName;
    private static string GeneratedReplicatorEndpointName;
    private static string GeneratedReplicatorConfigSectionName;
    private static string GeneratedReplicatorSecurityConfigSectionName;
    private static string GeneratedStoreConfigSectionName;
    private static string PartitionCountParamName;
    private static string MinReplicaSetSizeParamName;
    private static string TargetReplicaSetSizeParamName;
    private static string ParamNameFormat;
    private static string ParamNameUsageFormat;
    private static string GeneratedIdFormat;
    private static char GeneratedIdDelimiter;
    private static string DefaultSemanticVersion;
    private static Dictionary`2<string, Func`2<ActorTypeInformation, string>> GeneratedNameFunctions;
    private static Context toolContext;
    private static ManifestGenerator();
    internal static void Generate(Arguments arguments);
    private static StartupServicesManifestType MergeStartupServiceManifest(ApplicationManifestType applicationManifest);
    private static StartupServicesManifestTypeParameter[] ConvertToServiceParameters(ApplicationManifestTypeParameter[] appParameters);
    private static ApplicationManifestTypeParameter[] ConvertToAppParameters(StartupServicesManifestTypeParameter[] serviceParameters);
    private static StartupDefaultServicesType ConvertToStartupDefaultServicesType(DefaultServicesType defaultServices);
    private static DefaultServicesType ConvertToDefaultServicesType(StartupDefaultServicesType services);
    private static SettingsType CreateConfigSettings();
    private static SettingsType MergeConfigSettings(SettingsType configSettings);
    private static IEnumerable`1<SettingsTypeSection> CreateConfigSections(ActorTypeInformation actorTypeInfo);
    private static string GetLocalEseStoreConfigSectionName(ActorTypeInformation actorTypeInfo);
    private static string GetFabricServiceReplicatorConfigSectionName(ActorTypeInformation actorTypeInfo);
    private static string GetFabricServiceReplicatorSecurityConfigSectionName(ActorTypeInformation actorTypeInfo);
    private static SettingsTypeSection MergeConfigSection(SettingsTypeSection existingItem, SettingsTypeSection newItem);
    private static SettingsTypeSection[] MergeConfigSections(IEnumerable`1<SettingsTypeSection> existingItems, IEnumerable`1<SettingsTypeSection> newItems);
    private static SettingsTypeSectionParameter MergeConfigParameter(SettingsTypeSectionParameter existingItem, SettingsTypeSectionParameter newItem);
    private static SettingsTypeSectionParameter[] MergeConfigParameters(IEnumerable`1<SettingsTypeSectionParameter> existingItems, IEnumerable`1<SettingsTypeSectionParameter> newItems);
    private static ServiceManifestType CreateServiceManifest(SvcManifestEntryPointType serviceManifestEntryPointType);
    private static ServiceManifestType MergeServiceManifest(ServiceManifestType serviceManifest);
    private static Object[] MergeServiceTypes(ServiceManifestType existingServiceManifest, ServiceManifestType serviceManifest);
    private static object MergeServiceType(object existingItem, object newItem);
    private static ExtensionsTypeExtension MergeExtension(ExtensionsTypeExtension existingExtension, ExtensionsTypeExtension newExtension);
    private static ServiceTypeType CreateServiceTypeType(ActorTypeInformation actorTypeInfo);
    private static Dictionary`2<string, Func`2<ActorTypeInformation, string>> GetGeneratedNameFunctionForServiceEndpoint(ActorTypeInformation actorTypeInfo);
    private static List`1<EndpointType> CreateEndpointResourceBasedOnRemotingServer(ActorTypeInformation actorTypeInfo);
    private static ExtensionsTypeExtension[] CreateServiceTypeExtensions(ActorTypeInformation actorTypeInfo);
    private static XmlDocument CreateServiceTypeExtension(ActorTypeInformation actorTypeInfo, Dictionary`2<string, Func`2<ActorTypeInformation, string>> generatedNameFunctions);
    private static CodePackageType CreateCodePackage(SvcManifestEntryPointType serviceManifestEntryPointType);
    private static EntryPointDescriptionTypeExeHost CreateExeHostEntryPoint(Assembly assembly, SvcManifestEntryPointType serviceManifestEntryPointType);
    private static CodePackageType MergeCodePackage(CodePackageType existingItem, CodePackageType newItem);
    private static CodePackageType[] MergeCodePackages(IEnumerable`1<CodePackageType> existingItems, IEnumerable`1<CodePackageType> newItems);
    private static ConfigPackageType CreateConfigPackage();
    private static ConfigPackageType MergeConfigPackage(ConfigPackageType existingItem, ConfigPackageType newItem);
    private static ConfigPackageType[] MergeConfigPackages(IEnumerable`1<ConfigPackageType> existingItems, IEnumerable`1<ConfigPackageType> newItems);
    private static IEnumerable`1<EndpointType> CreateEndpointResources(ActorTypeInformation actorTypeInfo);
    private static string GetFabricServiceReplicatorEndpointName(ActorTypeInformation actorTypeInfo);
    private static string GetFabricServiceEndpointName(ActorTypeInformation actorTypeInfo);
    private static string GetFabricServiceV2EndpointName(ActorTypeInformation actorTypeInfo);
    private static string GetGeneratedServiceEndpointWrappedMessageStackName(ActorTypeInformation actorTypeInfo);
    private static EndpointType MergeEndpointResource(EndpointType existingItem, EndpointType newItem);
    private static EndpointType[] MergeEndpointResource(IEnumerable`1<EndpointType> existingItems, IEnumerable`1<EndpointType> newItems);
    private static ApplicationManifestType CreateApplicationManifest(ServiceManifestType serviceManifest);
    private static ApplicationManifestType MergeApplicationManifest(ApplicationManifestType applicationManifest, bool mergeServiceAndParameters);
    private static IList`1<DefaultServicesTypeService> CreateDefaultServices(ServiceManifestType serviceManifest);
    private static IList`1<ApplicationManifestTypeParameter> CreateDefaultParameter();
    private static DefaultServicesType MergeDefaultServices(DefaultServicesType existingItem, DefaultServicesType newItem);
    private static DefaultServicesTypeService CreateDefaultService(ActorTypeInformation actorTypeInfo, ServiceManifestType serviceManifest);
    private static IList`1<ApplicationManifestTypeParameter> CreateDefaultParameter(ActorTypeInformation actorTypeInfo);
    private static ApplicationManifestTypeParameter GetApplicationManifestTypeParameter(string name, string defaultValue);
    private static string GetFabricServiceName(ActorTypeInformation actorTypeInfo);
    private static ServiceType CreateStatefulDefaultService(ActorTypeInformation actorTypeInfo);
    private static void CreateStatefulDefaultServiceParameters(ActorTypeInformation actorTypeInfo, IList`1<ApplicationManifestTypeParameter> applicationManifestTypeParameters);
    private static string GetMinReplicaSetSize(ActorTypeInformation actorTypeInfo);
    private static string GetTargetReplicaSetSize(ActorTypeInformation actorTypeInfo);
    private static DefaultServicesTypeService MergeDefaultService(DefaultServicesTypeService existingItem, DefaultServicesTypeService newItem);
    private static ServiceTypeUniformInt64Partition MergeDefaultServicePartition(ServiceTypeUniformInt64Partition existingItem, ServiceTypeUniformInt64Partition newItem);
    private static ApplicationManifestTypeServiceManifestImport MergeServiceManifestImport(ApplicationManifestTypeServiceManifestImport existingItem, ApplicationManifestTypeServiceManifestImport newItem);
    private static ApplicationManifestTypeServiceManifestImport[] MergeServiceManifestImports(IEnumerable`1<ApplicationManifestTypeServiceManifestImport> existingItems, IEnumerable`1<ApplicationManifestTypeServiceManifestImport> newItems);
    private static ApplicationManifestTypeParameter MergeParameters(ApplicationManifestTypeParameter existingItem, ApplicationManifestTypeParameter newItem);
    private static ApplicationManifestTypeParameter[] MergeParameters(IEnumerable`1<ApplicationManifestTypeParameter> existingItems, IEnumerable`1<ApplicationManifestTypeParameter> newItems);
    private static T[] MergeItems(IEnumerable`1<T> existingItems, IEnumerable`1<T> newItems, Func`3<T, T, bool> isEquals, Func`3<T, T, T> itemMerge);
    private static T[] MergeItems(IEnumerable`1<T> existingItems, IEnumerable`1<T> newItems, Func`3<T, T, bool> isEquals, Func`3<T, T, T> itemMerge, Func`2<T, bool> shouldKeep);
    private static void InsertXmlCommentsAndWriteIfNeeded(string filePath, string existingContents, T value);
    private static string GetVersion();
    private static string GetStatePersistenceValueForActorService(string actorService);
}
internal enum FabActUtil.Generator.SvcManifestEntryPointType : Enum {
    public int value__;
    public static SvcManifestEntryPointType Exe;
    public static SvcManifestEntryPointType NoExtension;
    public static SvcManifestEntryPointType ExternalExecutable;
}
internal static class FabActUtil.Generator.Utility : object {
    private static int FileAttributeDirectory;
    private static int FileAttributeNormal;
    public static StreamReader CreateStreamReader(FileStream fileStream);
    public static StreamWriter CreateStreamWriter(FileStream fileStream);
    public static string LoadContents(string filePath);
    public static void WriteContents(FileStream stream, string contents);
    public static void WriteIfNeeded(string filePath, string existingContents, string newContents);
    public static void PerformPlaceholderReplacements(StringBuilder template, IDictionary`2<string, string> placeHolders);
    public static void WriteFile(string filePath, string fileContents);
    public static void EnsureParentFolder(string filePath);
    public static void EnsureFolder(string folderPath);
    public static string GetRelativePath(string fromPath, string toPath);
    private static int GetPathAttribute(string path);
    private static int PathRelativePathTo(StringBuilder pszPath, string pszFrom, int dwAttrFrom, string pszTo, int dwAttrTo);
}
internal static class FabActUtil.Generator.XmlSerializationUtility : object {
    public static string Serialize(T value);
    public static T Deserialize(string contents);
    public static XmlWriterSettings GetXmlWriterSettings();
    public static string InsertXmlComments(string existingContent, T value);
    private static string InsertXmlComments(string contentWithComments, string contentWithoutComments);
    private static XElement FindNodeInXDocument(XDocument xdoc, XElement nodeToFind);
}
public enum FabActUtil.OutputTarget : Enum {
    public int value__;
    public static OutputTarget Manifest;
}
internal class FabActUtil.Program : object {
    private static string assemblyResolvePath;
    private static int Main(String[] args);
    private static Assembly ResolveHandler(object sender, ResolveEventArgs args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class FabActUtil.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_BadArgumentValue { get; }
    internal static string Error_CannotOpenCommandLineArgumentFile { get; }
    internal static string Error_DuplicateArgumentValue { get; }
    internal static string Error_DuplicateCommandLineArgument { get; }
    internal static string Error_MissingRequiredArgument { get; }
    internal static string Error_MissingRequiredDefaultArgument { get; }
    internal static string Error_UnbalancedSlashes { get; }
    internal static string Error_UnrecognizedCommandLineArgument { get; }
    internal static string ErrorApplicationName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_BadArgumentValue();
    internal static string get_Error_CannotOpenCommandLineArgumentFile();
    internal static string get_Error_DuplicateArgumentValue();
    internal static string get_Error_DuplicateCommandLineArgument();
    internal static string get_Error_MissingRequiredArgument();
    internal static string get_Error_MissingRequiredDefaultArgument();
    internal static string get_Error_UnbalancedSlashes();
    internal static string get_Error_UnrecognizedCommandLineArgument();
    internal static string get_ErrorApplicationName();
}
internal class FabActUtil.Tool : object {
    public static void Run(ToolArguments arguments);
    private static void ProcessArguments(ToolContext context);
    private static void ProcessInput(ToolContext context);
    private static void GenerateOutput(ToolContext context);
    private static void GenerateManifest(ToolContext context);
    private static void AddParametersToLocalFiveNodeAppParamFile(ToolContext context);
    private static void AddParametersToLocalOneNodeAppParamFile(ToolContext context);
    private static void AddParametersToLocalFiveNodeServiceParamFile(ToolContext context);
    private static void AddParametersToLocalOneNodeServiceParamFile(ToolContext context);
    private static void LoadInputAssembly(ToolContext context);
    private static void LoadActors(ToolContext context);
    private static void LoadActors(Assembly inputAssembly, IList`1<string> actorFilters, IList`1<ActorTypeInformation> actorTypes);
    private static void CheckForDuplicateFabricServiceName(IDictionary`2<Type, ActorTypeInformation> actorTypeInfoTable, ActorTypeInformation actorTypeInformation);
    private static bool RemoveFrom(IList`1<string> list, string item, StringComparison comparision);
    private static string GetToolPath();
}
internal class FabActUtil.ToolArguments : object {
    [CommandLineArgumentAttribute("0")]
public string InputAssembly;
    [CommandLineArgumentAttribute("4")]
public String[] Actors;
    [CommandLineArgumentAttribute("0")]
public bool Recurse;
    [CommandLineArgumentAttribute("0")]
public OutputTarget Target;
    [CommandLineArgumentAttribute("0")]
public string OutputPath;
    [CommandLineArgumentAttribute("0")]
public string ApplicationPackagePath;
    [CommandLineArgumentAttribute("0")]
public string ServicePackagePath;
    [CommandLineArgumentAttribute("0")]
public string ApplicationPrefix;
    [CommandLineArgumentAttribute("0")]
public string ServicePackagePrefix;
    [CommandLineArgumentAttribute("0")]
public string Version;
    [CommandLineArgumentAttribute("0")]
public string Local5NodeAppParamFile;
    [CommandLineArgumentAttribute("0")]
public string Local1NodeAppParamFile;
    [CommandLineArgumentAttribute("0")]
public string AssemblyResolvePath;
    [CommandLineArgumentAttribute("0")]
public string ServiceManifestEntryPointType;
    [CommandLineArgumentAttribute("0")]
public string StartupServicesFilePath;
    [CommandLineArgumentAttribute("0")]
public string Local5NodeStartupServiceParamFile;
    [CommandLineArgumentAttribute("0")]
public string Local1NodeStartupServiceParamFile;
    internal bool IsValid();
}
internal class FabActUtil.ToolContext : object {
    [CompilerGeneratedAttribute]
private ToolArguments <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <InputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ActorTypeInformation> <ActorTypes>k__BackingField;
    public ToolArguments Arguments { get; public set; }
    public Assembly InputAssembly { get; public set; }
    public IList`1<ActorTypeInformation> ActorTypes { get; public set; }
    [CompilerGeneratedAttribute]
public ToolArguments get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ToolArguments value);
    [CompilerGeneratedAttribute]
public Assembly get_InputAssembly();
    [CompilerGeneratedAttribute]
public void set_InputAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public IList`1<ActorTypeInformation> get_ActorTypes();
    [CompilerGeneratedAttribute]
public void set_ActorTypes(IList`1<ActorTypeInformation> value);
}
