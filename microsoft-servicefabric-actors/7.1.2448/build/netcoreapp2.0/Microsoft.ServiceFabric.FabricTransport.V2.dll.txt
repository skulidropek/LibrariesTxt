internal class Microsoft.ServiceFabric.FabricTransport.V2.Client.FabricTransportCallbackHandlerBroker : object {
    private IFabricTransportCallbackMessageHandler callImpl;
    public FabricTransportCallbackHandlerBroker(IFabricTransportCallbackMessageHandler callImpl);
    public sealed virtual void HandleOneWay(IFabricTransportMessage message);
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.Client.FabricTransportClient : object {
    private IFabricTransportClient2 nativeClient;
    protected FabricTransportSettings settings;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionAddress>k__BackingField;
    private bool disposedValue;
    public FabricTransportSettings Settings { get; }
    public bool IsValid { get; public set; }
    public string ConnectionAddress { get; private set; }
    public FabricTransportClient(FabricTransportSettings transportSettings, string connectionAddress, IFabricTransportClientEventHandler eventHandler, IFabricTransportCallbackMessageHandler contract, IFabricTransportMessageDisposer messageMessageDisposer);
    public FabricTransportSettings get_Settings();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public string get_ConnectionAddress();
    [CompilerGeneratedAttribute]
private void set_ConnectionAddress(string value);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.FabricTransport.V2.Client.FabricTransportClient/<OpenAsync>d__13")]
public Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.FabricTransport.V2.Client.FabricTransportClient/<CloseAsync>d__14")]
public Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.FabricTransport.V2.Client.FabricTransportClient/<RequestResponseAsync>d__15")]
public Task`1<FabricTransportMessage> RequestResponseAsync(FabricTransportMessage requestMessage, TimeSpan timeout, Guid requestId);
    public virtual void SendOneWay(FabricTransportMessage message);
    private void CreateNativeClient(FabricTransportSettings transportSettings, string connectionAddress, IFabricTransportClientEventHandler eventHandler, IFabricTransportCallbackMessageHandler contract, IFabricTransportMessageDisposer messageMessageDisposer);
    private IFabricAsyncOperationContext BeginRequest(Guid requestId, FabricTransportMessage message, TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private FabricTransportMessage EndRequest(Guid requestId, IFabricAsyncOperationContext context);
    protected virtual void Dispose(bool disposing);
    public void Abort();
    private void internalAbort();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private IFabricAsyncOperationContext BeginOpen(TimeSpan connectTimeout, IFabricAsyncOperationCallback callback);
    private void EndOpen(IFabricAsyncOperationContext context);
    private IFabricAsyncOperationContext BeginClose(TimeSpan connectTimeout, IFabricAsyncOperationCallback callback);
    private void EndClose(IFabricAsyncOperationContext context);
    private bool IsSecurityMismatch();
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <OpenAsync>b__13_0(IFabricAsyncOperationCallback callback);
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <CloseAsync>b__14_0(IFabricAsyncOperationCallback callback);
    [CompilerGeneratedAttribute]
private void <Abort>b__23_0();
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.Client.FabricTransportClientConnectionEventHandlerBroker : object {
    private IFabricTransportClientEventHandler clientConnectionHandler;
    public FabricTransportClientConnectionEventHandlerBroker(IFabricTransportClientEventHandler clientConnectionHandler);
    private sealed virtual override void Microsoft.ServiceFabric.FabricTransport.V2.NativeFabricTransport.IFabricTransportClientEventHandler.OnConnected(IntPtr connectionAddress);
    private sealed virtual override void Microsoft.ServiceFabric.FabricTransport.V2.NativeFabricTransport.IFabricTransportClientEventHandler.OnDisconnected(IntPtr connectionAddress, int errorCode);
}
internal interface Microsoft.ServiceFabric.FabricTransport.V2.Client.IFabricTransportCallbackMessageHandler {
    public abstract virtual void OneWayMessage(FabricTransportMessage message);
}
internal interface Microsoft.ServiceFabric.FabricTransport.V2.Client.IFabricTransportClientEventHandler {
    public abstract virtual void OnConnected();
    public abstract virtual void OnDisconnected();
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.FabricTransportMessage : object {
    private FabricTransportRequestHeader requestHeader;
    private FabricTransportRequestBody requestBody;
    private object nativeInterfaceRoot;
    public FabricTransportMessage(FabricTransportRequestHeader requestHeader, FabricTransportRequestBody requestBody);
    public FabricTransportMessage(FabricTransportRequestHeader requestHeader, FabricTransportRequestBody requestBody, object nativeInterfaceRoot);
    public FabricTransportRequestBody GetBody();
    public FabricTransportRequestHeader GetHeader();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.FabricTransportRequestBody : object {
    private IEnumerable`1<ArraySegment`1<byte>> sendBuffers;
    private Action disposeAction;
    private Stream recievedStream;
    public FabricTransportRequestBody(IEnumerable`1<ArraySegment`1<byte>> sendBuffers, Action disposeAction);
    public FabricTransportRequestBody(Stream recievedStream);
    public IEnumerable`1<ArraySegment`1<byte>> GetBodyBuffers();
    public Stream GetRecievedStream();
    public void Dispose();
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.FabricTransportRequestHeader : object {
    private Stream recievedHeaderStream;
    private ArraySegment`1<byte> requestHeaderBuffer;
    private Action disposeAction;
    public FabricTransportRequestHeader(ArraySegment`1<byte> requestHeaderBuffer, Action disposeAction);
    public FabricTransportRequestHeader(Stream recievedHeaderStream);
    public ArraySegment`1<byte> GetSendBuffer();
    public Stream GetRecievedStream();
    public void Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.ServiceFabric.FabricTransport.V2.FabricTransportSettingsExtension : object {
    [ExtensionAttribute]
internal static IntPtr ToNativeV2(FabricTransportSettings transportSettings, PinCollection pin);
}
internal static class Microsoft.ServiceFabric.FabricTransport.V2.NativeFabricTransport : object {
    internal static IFabricTransportListener CreateFabricTransportListener(Guid& iid, IntPtr transportSettingsPtr, IntPtr listenerAddressPtr, IFabricTransportMessageHandler messageHandler, IFabricTransportConnectionHandler clientConnectionHandler, IFabricTransportMessageDisposer messageMessageDisposer);
    internal static IFabricTransportClient2 CreateFabricTransportClient(Guid& iid, IntPtr transportSettingsPtr, IntPtr connectionAddress, IFabricTransportCallbackMessageHandler callbackMessageHandler, IFabricTransportClientEventHandler connectionEventHandler, IFabricTransportMessageDisposer messageMessageDisposer);
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.NativeFabricTransportMessage : object {
    private PinCollection pin;
    private IntPtr nativeHeadersPtr;
    private IntPtr nativeBodyBuffersPtr;
    private bool disposedValue;
    private FabricTransportMessage message;
    private int length;
    public NativeFabricTransportMessage(FabricTransportMessage message);
    public static FabricTransportMessage ToFabricTransportMessage(IFabricTransportMessage message);
    private static FabricTransportRequestBody NativeMessageToFabricTransportBody(UInt32 count, IntPtr messageBuffer);
    private static FabricTransportRequestHeader NativeMessageToFabricTransportHeader(IntPtr headerBuffer);
    public static Byte[] GetBytesFromNative(IntPtr ptr);
    private static List`1<Tuple`2<UInt32, IntPtr>> GetBuffersPtr(UInt32 count, IntPtr messageBuffer);
    private static List`1<Tuple`2<UInt32, IntPtr>> GetHeaderBuffersPtr(IntPtr headerPtr);
    internal IntPtr CreateNativeBodyBytesPtr();
    internal FABRIC_TRANSPORT_MESSAGE_BUFFER[] CreateNativeBodyBytes();
    internal FABRIC_TRANSPORT_MESSAGE_BUFFER CreateNativeHeaderBytes();
    internal FABRIC_TRANSPORT_MESSAGE_BUFFER CreateNativeHeaderBytes(Byte[] bytes);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void GetHeaderAndBodyBuffer(IntPtr& HeaderPtr, UInt32& bufferlength, IntPtr& bufferPtr);
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.NativeFabricTransportMessageDisposer : object {
    public sealed virtual void Dispose(UInt32 count, IntPtr messages);
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.NativeMessageStream : Stream {
    private List`1<Tuple`2<UInt32, IntPtr>> bufferList;
    private int length;
    private int currentBufferIndex;
    private int currentBufferReadOffset;
    private bool disposedValue;
    private int position;
    private int currentBufferLength;
    private IntPtr currentChunk;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NativeMessageStream(List`1<Tuple`2<UInt32, IntPtr>> bufferList);
    private void Initialize();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void SetLength();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.Runtime.FabricTransportCallbackClient : object {
    private TimeSpan defaultTimeout;
    private IFabricTransportClientConnection nativeClientConnection;
    private string clientId;
    private bool disposedValue;
    public FabricTransportCallbackClient(IFabricTransportClientConnection nativeClientConnection);
    public string GetClientId();
    public void OneWayMessage(FabricTransportMessage requestBody);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.Runtime.FabricTransportConnectionHandlerBroker : object {
    private IFabricTransportConnectionHandler connectionHandler;
    public FabricTransportConnectionHandlerBroker(IFabricTransportConnectionHandler serviceConnectionHandler);
    public sealed virtual IFabricAsyncOperationContext BeginProcessConnect(IFabricTransportClientConnection nativeClientConnection, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndProcessConnect(IFabricAsyncOperationContext context);
    public sealed virtual IFabricAsyncOperationContext BeginProcessDisconnect(IntPtr nativeClientId, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndProcessDisconnect(IFabricAsyncOperationContext context);
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.Runtime.FabricTransportListener : object {
    private IFabricTransportListener nativeListner;
    private bool disposedValue;
    public FabricTransportListener(FabricTransportSettings transportSettings, FabricTransportListenerAddress listenerAddress, IFabricTransportMessageHandler serviceImplementation, IFabricTransportConnectionHandler remotingConnectionHandler);
    private void CreateNativeListener(IFabricTransportMessageHandler contract, FabricTransportSettings transportSettings, FabricTransportListenerAddress listenerAddress, IFabricTransportConnectionHandler connectionHandler);
    private IFabricAsyncOperationContext OpenBeginWrapper(IFabricAsyncOperationCallback callback);
    private string OpenEndWrapper(IFabricAsyncOperationContext context);
    public Task`1<string> OpenAsync(CancellationToken cancellationToken);
    public Task CloseAsync(CancellationToken cancellationToken);
    public void Abort();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <OpenAsync>b__5_0(IFabricAsyncOperationCallback callback);
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <CloseAsync>b__6_0(IFabricAsyncOperationCallback callback);
    [CompilerGeneratedAttribute]
private void <Abort>b__7_0();
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.Runtime.FabricTransportMessageHandlerBroker : object {
    private IFabricTransportMessageHandler service;
    private IFabricTransportConnectionHandler nativeConnectionHandler;
    public FabricTransportMessageHandlerBroker(IFabricTransportMessageHandler service, IFabricTransportConnectionHandler nativeConnectionHandler);
    public sealed virtual IFabricAsyncOperationContext BeginProcessRequest(IntPtr nativeClientId, IFabricTransportMessage message, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricTransportMessage EndProcessRequest(IFabricAsyncOperationContext context);
    public sealed virtual void HandleOneWay(IntPtr nativeClientId, IFabricTransportMessage message);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.FabricTransport.V2.Runtime.FabricTransportMessageHandlerBroker/<RequestResponseAsync>d__6")]
private Task`1<NativeFabricTransportMessage> RequestResponseAsync(string clientId, FabricTransportMessage fabricTransportMessage, TimeSpan timeout);
}
internal class Microsoft.ServiceFabric.FabricTransport.V2.Runtime.FabricTransportRequestContext : object {
    private string clientId;
    private Func`2<string, FabricTransportCallbackClient> callback;
    private FabricTransportCallbackClient callbackClient;
    public string ClientId { get; }
    public FabricTransportRequestContext(string clientId, Func`2<string, FabricTransportCallbackClient> getCallBack);
    public string get_ClientId();
    public FabricTransportCallbackClient GetCallbackClient();
}
internal interface Microsoft.ServiceFabric.FabricTransport.V2.Runtime.IFabricTransportConnectionHandler {
    public abstract virtual Task ConnectAsync(FabricTransportCallbackClient fabricTransportServiceRemotingCallback, TimeSpan timeout);
    public abstract virtual Task DisconnectAsync(string clientId, TimeSpan timeout);
    public abstract virtual FabricTransportCallbackClient GetCallBack(string clientId);
}
internal interface Microsoft.ServiceFabric.FabricTransport.V2.Runtime.IFabricTransportMessageHandler {
    public abstract virtual Task`1<FabricTransportMessage> RequestResponseAsync(FabricTransportRequestContext requestContext, FabricTransportMessage fabricTransportMessage);
    public abstract virtual void HandleOneWay(FabricTransportRequestContext requestContext, FabricTransportMessage requesTransportMessage);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.ServiceFabric.FabricTransport.V2.StringResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_ConnectionDenied { get; }
    internal static string Error_InvalidOperation { get; }
    internal static string ErrorClientCallbackChannelNotFound { get; }
    internal static string ErrorConfigFileNotFound { get; }
    internal static string ErrorConfigPackageNotFound { get; }
    internal static string ErrorInvalidAddress { get; }
    internal static string ErrorSectionNameNotFound { get; }
    internal static string ErrorServiceTooBusy { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_ConnectionDenied();
    internal static string get_Error_InvalidOperation();
    internal static string get_ErrorClientCallbackChannelNotFound();
    internal static string get_ErrorConfigFileNotFound();
    internal static string get_ErrorConfigPackageNotFound();
    internal static string get_ErrorInvalidAddress();
    internal static string get_ErrorSectionNameNotFound();
    internal static string get_ErrorServiceTooBusy();
}
