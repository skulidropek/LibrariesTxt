public class Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException : FabricException {
    public ActorConcurrencyLockTimeoutException(string message);
    public ActorConcurrencyLockTimeoutException(string message, Exception inner);
    private ActorConcurrencyLockTimeoutException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ServiceFabric.Actors.ActorDeletedException : FabricTransientException {
    public ActorDeletedException(string message);
    public ActorDeletedException(string message, Exception inner);
    private ActorDeletedException(SerializationInfo info, StreamingContext context);
}
[EventSourceAttribute]
internal class Microsoft.ServiceFabric.Actors.ActorEventSource : ServiceFabricEventSource {
    internal static ActorEventSource Instance;
    private static int ActorStateProviderUsageEventId;
    private static int CustomActorServiceUsageEventId;
    private static int ActorReminderRegisterationEventId;
    private static string ActorStateProviderUsageEventTraceFormat;
    private static string CustomActorServiceUsageEventTraceFormat;
    private static string ActorReminderRegisterationEventTraceFormat;
    private static string MigrationBaseFormat;
    private static int MigrationStartEventId;
    private static string MigrationStartEventFormat;
    private static int MigrationEndEventId;
    private static string MigrationEndEventFormat;
    private static int MigrationPhaseStartEventId;
    private static string MigrationPhaseStartEventFormat;
    private static int MigrationPhaseEndEventId;
    private static string MigrationPhaseEndEventFormat;
    private static int MigrationFailureEventId;
    private static string MigrationFailureEventFormat;
    private static int MigrationAbortEventId;
    private static string MigrationAbortEventFormat;
    private static ActorEventSource();
    [NonEventAttribute]
internal void WriteError(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteErrorWithId(string type, string id, string format, Object[] args);
    [NonEventAttribute]
internal void WriteWarning(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteWarningWithId(string type, string id, string format, Object[] args);
    [NonEventAttribute]
internal void WriteInfo(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteInfoWithId(string type, string id, string format, Object[] args);
    [NonEventAttribute]
internal void WriteNoise(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteNoiseWithId(string type, string id, string format, Object[] args);
    [NonEventAttribute]
internal void ActorStateProviderUsageEventWrapper(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string stateProviderName);
    [NonEventAttribute]
internal void CustomActorServiceUsageEventWrapper(string type, string clusterOsType, string runtimePlatform, string actorType, string actorServiceType);
    [NonEventAttribute]
internal void ActorReminderRegisterationEventWrapper(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string ownerActorId, string reminderPeriod, string reminderName);
    [EventAttribute("8")]
internal void MigrationStartEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string settingsJson);
    [EventAttribute("9")]
internal void MigrationEndEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string resultJson);
    [EventAttribute("10")]
internal void MigrationPhaseStartEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string inputJson);
    [EventAttribute("11")]
internal void MigrationPhaseEndEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string resultJson);
    [EventAttribute("12")]
internal void MigrationFailureEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string phase, string errorMsg);
    [EventAttribute("13")]
internal void MigrationAbortEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, bool userTriggered);
    [EventAttribute("1")]
private void InfoText(string id, string type, string message);
    [EventAttribute("2")]
private void WarningText(string id, string type, string message);
    [EventAttribute("3")]
private void ErrorText(string id, string type, string message);
    [EventAttribute("4")]
private void NoiseText(string id, string type, string message);
    [EventAttribute("5")]
private void ActorStateProviderUsageEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string stateProviderName);
    [EventAttribute("6")]
private void CustomActorServiceUsageEvent(string type, string clusterOsType, string runtimePlatform, string actorType, string actorServiceType);
    [EventAttribute("7")]
private void ActorReminderRegisterationEvent(string type, string clusterOsType, string runtimePlatform, string partitionId, string replicaId, string serviceName, string serviceTypeName, string applicationName, string applicationTypeName, string ownerActorId, string reminderPeriod, string reminderName);
}
[ExtensionAttribute]
public static class Microsoft.ServiceFabric.Actors.ActorExtensions : object {
    [ExtensionAttribute]
public static ActorId GetActorId(TIActor actor);
    [ExtensionAttribute]
public static ActorReference GetActorReference(IActor actor);
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Actors.ActorId : object {
    private static Random Rand;
    private static object RandLock;
    [DataMemberAttribute]
private ActorIdKind kind;
    [DataMemberAttribute]
private long longId;
    [DataMemberAttribute]
private Guid guidId;
    [DataMemberAttribute]
private string stringId;
    private String modreq(System.Runtime.CompilerServices.IsVolatile) stringRepresentation;
    private String modreq(System.Runtime.CompilerServices.IsVolatile) storageKey;
    private Nullable`1<long> partitionKey;
    public ActorIdKind Kind { get; }
    public ActorId(long id);
    public ActorId(Guid id);
    public ActorId(string id);
    private static ActorId();
    public ActorIdKind get_Kind();
    public static bool op_Equality(ActorId x, ActorId y);
    public static bool op_Inequality(ActorId x, ActorId y);
    public static ActorId CreateRandom();
    public long GetLongId();
    public Guid GetGuidId();
    public string GetStringId();
    public long GetPartitionKey();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ActorId other);
    public sealed virtual int CompareTo(ActorId other);
    internal static ActorId TryGetActorIdFromStorageKey(string storageKey);
    internal string GetStorageKey();
    internal long EstimateDataLength();
    private static bool EqualsContents(ActorId x, ActorId y);
    private static int CompareContents(ActorId x, ActorId y);
}
public enum Microsoft.ServiceFabric.Actors.ActorIdKind : Enum {
    public int value__;
    public static ActorIdKind Long;
    public static ActorIdKind Guid;
    public static ActorIdKind String;
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Actors.ActorReference : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListenerName>k__BackingField;
    [DataMemberAttribute]
public Uri ServiceUri { get; public set; }
    [DataMemberAttribute]
public ActorId ActorId { get; public set; }
    [DataMemberAttribute]
public string ListenerName { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
public void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public ActorId get_ActorId();
    [CompilerGeneratedAttribute]
public void set_ActorId(ActorId value);
    [CompilerGeneratedAttribute]
public string get_ListenerName();
    [CompilerGeneratedAttribute]
public void set_ListenerName(string value);
    public static ActorReference Get(object actor);
    public sealed virtual object Bind(Type actorInterfaceType);
    private static ActorReference GetActorReference(object actor);
}
internal static class Microsoft.ServiceFabric.Actors.ActorTelemetry : object {
    internal static void ActorServiceInitializeEvent(StatefulServiceContext context, string actorStateProviderReplicaType);
    internal static void CheckCustomActorServiceUsageEvent(Type actorType, Type actorServiceType);
    internal static void ActorReminderRegisterationEvent(StatefulServiceContext context, ActorReminder reminder);
    internal static void ActorServiceReplicaInstantiateEvent(StatefulServiceContext context);
    internal static void ActorServiceReplicaCloseEvent(StatefulServiceContext context);
    internal static void ActorStateProviderUsageEvent(StatefulServiceContext context, string actorStateProviderReplicaType);
    private static void ActorServiceLifecycleEvent(StatefulServiceContext context, string lifecycleEvent);
}
internal static class Microsoft.ServiceFabric.Actors.ActorTelemetryConstants : object {
    internal static string ActorStateProviderUsageEventName;
    internal static string CustomActorServiceUsageEventName;
    internal static string ActorReminderRegisterationEventName;
    internal static string ActorServiceKind;
    private static ActorTelemetryConstants();
}
internal static class Microsoft.ServiceFabric.Actors.ActorTrace : object {
    [CompilerGeneratedAttribute]
private static ActorEventSource <Source>k__BackingField;
    internal static ActorEventSource Source { get; }
    private static ActorTrace();
    [CompilerGeneratedAttribute]
internal static ActorEventSource get_Source();
    internal static string GetTraceIdForActor(Guid partitionId, long replicaId, ActorId actorId);
    internal static string GetTraceIdForReplica(Guid partitionId, long replicaId);
}
public abstract class Microsoft.ServiceFabric.Actors.Client.ActorProxy : ProxyBase {
    internal static ActorProxyFactory DefaultProxyFactory;
    private ActorServicePartitionClient servicePartitionClientV2;
    private RemotingClientVersion remotingClient;
    private ActorProxyGeneratorWith proxyGeneratorWith;
    private ActorServicePartitionClient servicePartitionClient;
    public ActorId ActorId { get; }
    public IActorServicePartitionClient ActorServicePartitionClient { get; }
    public IActorServicePartitionClient ActorServicePartitionClientV2 { get; }
    private static ActorProxy();
    public sealed virtual ActorId get_ActorId();
    public sealed virtual IActorServicePartitionClient get_ActorServicePartitionClient();
    public sealed virtual IActorServicePartitionClient get_ActorServicePartitionClientV2();
    public static TActorInterface Create(ActorId actorId, string applicationName, string serviceName, string listenerName);
    public static TActorInterface Create(ActorId actorId, Uri serviceUri, string listenerName);
    internal void Initialize(ActorServicePartitionClient client, IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory);
    internal virtual void InvokeImplV2(int interfaceId, int methodId, IServiceRemotingRequestMessageBody requestMsgBodyValue);
    internal virtual Task`1<IServiceRemotingResponseMessage> InvokeAsyncImplV2(int interfaceId, int methodId, string methodName, IServiceRemotingRequestMessageBody requestMsgBodyValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Client.ActorProxy/<SubscribeAsyncV2>d__17")]
internal Task SubscribeAsyncV2(Type eventType, object subscriber, TimeSpan resubscriptionInterval);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Client.ActorProxy/<UnsubscribeAsyncV2>d__18")]
internal Task UnsubscribeAsyncV2(Type eventType, object subscriber);
    internal virtual DataContractSerializer GetRequestMessageBodySerializer(int interfaceId);
    internal virtual DataContractSerializer GetResponseMessageBodySerializer(int interfaceId);
    internal virtual object GetResponseMessageBodyValue(object responseMessageBody);
    internal virtual object CreateRequestMessageBody(object requestMessageBodyValue);
    internal virtual Task`1<Byte[]> InvokeAsync(int interfaceId, int methodId, Byte[] requestMsgBodyBytes, CancellationToken cancellationToken);
    internal virtual void Invoke(int interfaceId, int methodId, Byte[] requestMsgBodyBytes);
    internal void Initialize(ActorProxyGeneratorWith actorProxyGeneratorWith, ActorServicePartitionClient actorServicePartitionClient);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Client.ActorProxy/<SubscribeAsync>d__26")]
internal Task SubscribeAsync(Type eventType, object subscriber, TimeSpan resubscriptionInterval);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Client.ActorProxy/<UnsubscribeAsync>d__27")]
internal Task UnsubscribeAsync(Type eventType, object subscriber);
    private void ResubscribeAsync(SubscriptionInfo info, TimeSpan resubscriptionInterval);
    private void ResubscribeAsyncV2(SubscriptionInfo info, TimeSpan resubscriptionInterval);
}
[ExtensionAttribute]
public static class Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions : object {
    private static TimeSpan DefaultResubscriptionInternal;
    private static ActorProxyEventExtensions();
    [ExtensionAttribute]
public static Task SubscribeAsync(IActorEventPublisher actorProxy, TEvent subscriber);
    [ExtensionAttribute]
public static Task SubscribeAsync(IActorEventPublisher actorProxy, TEvent subscriber, TimeSpan resubscriptionInterval);
    [ExtensionAttribute]
public static Task UnsubscribeAsync(IActorEventPublisher actorProxy, TEvent subscriber);
    private static Type GetEventInterface(Type eventHandlerType);
    private static bool IsEventInterface(Type userEventInterfaceType);
}
public class Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory : object {
    private object thisLock;
    private OperationRetrySettings retrySettings;
    private ActorProxyFactory proxyFactoryV1;
    private ActorProxyFactory proxyFactoryV2;
    private bool overrideListenerName;
    private string defaultListenerName;
    public ActorProxyFactory(OperationRetrySettings retrySettings);
    public ActorProxyFactory(Func`2<IServiceRemotingCallbackClient, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings);
    public ActorProxyFactory(Func`2<IServiceRemotingCallbackMessageHandler, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings);
    public sealed virtual TActorInterface CreateActorProxy(ActorId actorId, string applicationName, string serviceName, string listenerName);
    public sealed virtual TActorInterface CreateActorProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public sealed virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public sealed virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, long partitionKey, string listenerName);
    public void Dispose();
    internal object CreateActorProxy(Type actorInterfaceType, Uri serviceUri, ActorId actorId, string listenerName);
    private ActorRemotingProviderAttribute GetProviderAttribute(Type actorInterfaceType);
    private IActorProxyFactory GetOrSetProxyFactory(Type actorInterfaceType);
    private void OverrideDefaultListenerName(RemotingClientVersion remotingClientVersion);
    private string OverrideListenerNameIfConditionMet(string listenerName);
}
public class Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy : object {
    public static TServiceInterface Create(Uri serviceUri, ActorId actorId, string listenerName);
    public static TServiceInterface Create(Uri serviceUri, long partitionKey, string listenerName);
    public static IActorService Create(Uri serviceUri, ActorId actorId, string listenerName);
    public static IActorService Create(Uri serviceUri, long partitionKey, string listenerName);
}
internal class Microsoft.ServiceFabric.Actors.Client.FabricActorExceptionConvertor : object {
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception& actualException);
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception innerException, Exception& actualException);
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception[] innerExceptions, Exception& actualException);
}
public interface Microsoft.ServiceFabric.Actors.Client.IActorProxy {
    public ActorId ActorId { get; }
    public IActorServicePartitionClient ActorServicePartitionClient { get; }
    public IActorServicePartitionClient ActorServicePartitionClientV2 { get; }
    public abstract virtual ActorId get_ActorId();
    public abstract virtual IActorServicePartitionClient get_ActorServicePartitionClient();
    public abstract virtual IActorServicePartitionClient get_ActorServicePartitionClientV2();
}
public interface Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory {
    public abstract virtual TActorInterface CreateActorProxy(ActorId actorId, string applicationName, string serviceName, string listenerName);
    public abstract virtual TActorInterface CreateActorProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public abstract virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public abstract virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, long partitionKey, string listenerName);
}
internal class Microsoft.ServiceFabric.Actors.Client.Subscriber : object {
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    public ActorId ActorId { get; }
    public int EventId { get; }
    public object Instance { get; }
    public Subscriber(ActorId actorId, int eventId, object instance);
    [CompilerGeneratedAttribute]
public ActorId get_ActorId();
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public object get_Instance();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.ServiceFabric.Actors.Client.SubscriptionInfo : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Subscriber <Subscriber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    public Guid Id { get; }
    public Subscriber Subscriber { get; }
    public bool IsActive { get; public set; }
    public SubscriptionInfo(Subscriber subscriber);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public Subscriber get_Subscriber();
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActivationDiagnosticData : ValueType {
    internal bool IsActivationEvent;
    internal ActorId ActorId;
}
[EventSourceAttribute]
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource : EventSource {
    private static long AllKeywords;
    [CompilerGeneratedAttribute]
private static ActorFrameworkEventSource <Writer>k__BackingField;
    internal static ActorFrameworkEventSource Writer { get; }
    private static ActorFrameworkEventSource();
    [CompilerGeneratedAttribute]
internal static ActorFrameworkEventSource get_Writer();
    [NonEventAttribute]
internal void ReplicaChangeRoleToPrimary(ServiceContext serviceContext);
    [NonEventAttribute]
internal void ReplicaChangeRoleFromPrimary(ServiceContext serviceContext);
    [NonEventAttribute]
internal void ServiceInstanceOpen(ServiceContext serviceContext);
    [NonEventAttribute]
internal void ServiceInstanceClose(ServiceContext serviceContext);
    [NonEventAttribute]
internal void ActorActivated(string actorType, ActorId actorId, ServiceContext serviceContext);
    [NonEventAttribute]
internal void ActorDeactivated(string actorType, ActorId actorId, ServiceContext serviceContext);
    [NonEventAttribute]
internal bool IsActorMethodStartEventEnabled();
    [NonEventAttribute]
internal void ActorMethodStart(string methodName, string methodSignature, string actorType, ActorId actorId, ServiceContext serviceContext);
    [NonEventAttribute]
internal bool IsActorMethodStopEventEnabled();
    [NonEventAttribute]
internal void ActorMethodStop(long methodExecutionTimeTicks, string methodName, string methodSignature, string actorType, ActorId actorId, ServiceContext serviceContext);
    [NonEventAttribute]
internal void ActorMethodThrewException(string exception, long methodExecutionTimeTicks, string methodName, string methodSignature, string actorType, ActorId actorId, ServiceContext serviceContext);
    [NonEventAttribute]
internal bool IsActorSaveStateStartEventEnabled();
    [NonEventAttribute]
internal void ActorSaveStateStart(string actorType, ActorId actorId, ServiceContext serviceContext);
    [NonEventAttribute]
internal bool IsActorSaveStateStopEventEnabled();
    [NonEventAttribute]
internal void ActorSaveStateStop(long saveStateExecutionTimeTicks, string actorType, ActorId actorId, ServiceContext serviceContext);
    [NonEventAttribute]
internal bool IsPendingMethodCallsEventEnabled();
    [NonEventAttribute]
internal void ActorMethodCallsWaitingForLock(long countOfWaitingMethodCalls, string actorType, ActorId actorId, ServiceContext serviceContext);
    [EventAttribute("13")]
internal void ActorTypeRegistered(string actorType, string customeActorServiceType, string nodeName);
    [EventAttribute("14")]
internal void ActorTypeRegistrationFailed(string exception, string actorType, string customeActorServiceType, string nodeName);
    [EventAttribute("1")]
private void ReplicaChangeRoleToPrimary(long replicaId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("2")]
private void ReplicaChangeRoleFromPrimary(long replicaId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("3")]
private void ServiceInstanceOpen(long instanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("4")]
private void ServiceInstanceClose(long instanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("5")]
private void ActorActivated(string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("6")]
private void ActorDeactivated(string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("7")]
private void ActorMethodStart(string methodName, string methodSignature, string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("8")]
private void ActorMethodStop(long methodExecutionTimeTicks, string methodName, string methodSignature, string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("9")]
private void ActorMethodThrewException(string exception, long methodExecutionTimeTicks, string methodName, string methodSignature, string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("10")]
private void ActorSaveStateStart(string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("11")]
private void ActorSaveStateStop(long saveStateExecutionTimeTicks, string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [EventAttribute("12")]
private void ActorMethodCallsWaitingForLock(long countOfWaitingMethodCalls, string actorType, string actorId, ActorIdKind actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [NonEventAttribute]
private void WriteEvent(int eventId, long arg0, Guid arg1, string arg2, string arg3, string arg4, string arg5, string arg6);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg0, string arg1, int arg2, long arg3, Guid arg4, string arg5, string arg6, string arg7, string arg8, string arg9);
    [NonEventAttribute]
private void WriteEvent(int eventId, long arg0, string arg1, string arg2, int arg3, long arg4, Guid arg5, string arg6, string arg7, string arg8, string arg9, string arg10);
    [NonEventAttribute]
private void WriteActorMethodEvent(int eventId, string exception, long methodExecutionTimeTicks, string methodName, string methodSignature, string actorType, string actorId, int actorIdKind, long replicaOrInstanceId, Guid partitionId, string serviceName, string applicationName, string serviceTypeName, string applicationTypeName, string nodeName);
    [NonEventAttribute]
private void SetStringData(string str, Char* fixedStr, EventData& dataDesc);
    [NonEventAttribute]
private void SetLongData(Int64* fixedDataPtr, EventData& dataDesc);
    [NonEventAttribute]
private void SetIntData(Int32* fixedDataPtr, EventData& dataDesc);
    [NonEventAttribute]
private void SetGuidData(Guid* fixedDataPtr, EventData& dataDesc);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorLockContentionCounterWriter : FabricBaselessPerformanceCounterWriter {
    internal ActorLockContentionCounterWriter(FabricPerformanceCounterSetInstance counterSetInstance);
    internal void UpdateCounterValue(PendingActorMethodDiagnosticData pendingMethodData);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorMethodDiagnosticData : ValueType {
    internal ActorId ActorId;
    internal long InterfaceMethodKey;
    internal Nullable`1<TimeSpan> MethodExecutionTime;
    internal Exception Exception;
    internal RemotingListenerVersion RemotingListener;
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorMethodExceptionFrequencyCounterWriter : FabricBaselessPerformanceCounterWriter {
    internal ActorMethodExceptionFrequencyCounterWriter(FabricPerformanceCounterSetInstance counterSetInstance);
    internal void UpdateCounterValue(ActorMethodDiagnosticData methodData);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorMethodExecTimeCounterWriter : FabricPerformanceCounterWriter {
    internal ActorMethodExecTimeCounterWriter(FabricPerformanceCounterSetInstance counterSetInstance);
    internal void UpdateCounterValue(ActorMethodDiagnosticData methodData);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorMethodFrequencyCounterWriter : FabricBaselessPerformanceCounterWriter {
    internal ActorMethodFrequencyCounterWriter(FabricPerformanceCounterSetInstance counterSetInstance);
    internal void UpdateCounterValue();
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorMethodFriendlyNameBuilder : object {
    private Dictionary`2<Type, ActorInterfaceDescription> actorMethodDescriptions;
    private Dictionary`2<Type, ActorInterfaceDescription> actorMethodDescriptionsV2;
    internal ActorMethodFriendlyNameBuilder(ActorTypeInformation actorTypeInformation);
    internal void GetActorInterfaceMethodDescriptions(Type interfaceType, Int32& interfaceId, MethodDescription[]& actorInterfaceMethodDescriptions);
    internal void GetActorInterfaceMethodDescriptionsV2(Type interfaceType, Int32& interfaceId, MethodDescription[]& actorInterfaceMethodDescriptions);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorPerformanceCounters : object {
    internal static string ActorMethodCategoryName;
    internal static string ActorMethodInvocationsPerSecCounterName;
    internal static string ActorMethodExecTimeMillisecCounterName;
    internal static string ActorMethodExecTimeMillisecBaseCounterName;
    internal static string ActorMethodExceptionsPerSecCounterName;
    internal static string ActorCategoryName;
    internal static string ActorCallsWaitingForLockCounterName;
    internal static string ActorSaveStateTimeMillisecCounterName;
    internal static string ActorSaveStateTimeMillisecBaseCounterName;
    internal static string ActorOnActivateAsyncTimeMillisecCounterName;
    internal static string ActorOnActivateAsyncTimeMillisecBaseCounterName;
    internal static string ActorRequestProcessingTimeMillisecCounterName;
    internal static string ActorRequestProcessingTimeMillisecBaseCounterName;
    internal static string ActorLockAcquireWaitTimeMillisecCounterName;
    internal static string ActorLockAcquireWaitTimeMillisecBaseCounterName;
    internal static string ActorLockHoldTimeMillisecCounterName;
    internal static string ActorLockHoldTimeMillisecBaseCounterName;
    internal static string ActorRequestDeserializationTimeMillisecCounterName;
    internal static string ActorRequestDeserializationTimeMillisecBaseCounterName;
    internal static string ActorResponseSerializationTimeMillisecCounterName;
    internal static string ActorResponseSerializationTimeMillisecBaseCounterName;
    internal static string ActorLoadStateTimeMillisecCounterName;
    internal static string ActorLoadStateTimeMillisecBaseCounterName;
    internal static string ActorOutstandingRequestsCounterName;
    private static Dictionary`2<Tuple`2<string, string>, FabricPerformanceCounterType> CounterTypes;
    private static Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> CounterSets;
    private static ActorPerformanceCounters();
    public sealed virtual Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> GetCounterSets();
    internal static FabricPerformanceCounterType GetType(string categoryName, string counterName);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorSaveStateTimeCounterWriter : FabricPerformanceCounterWriter {
    internal ActorSaveStateTimeCounterWriter(FabricPerformanceCounterSetInstance counterSetInstance);
    internal void UpdateCounterValue(ActorStateDiagnosticData stateData);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ActorStateDiagnosticData : ValueType {
    internal ActorId ActorId;
    internal Nullable`1<TimeSpan> OperationTime;
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.ChangeRoleDiagnosticData : ValueType {
    internal ReplicaRole CurrentRole;
    internal ReplicaRole NewRole;
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.DiagnosticsEventManager : object {
    private ChangeRoleDiagnosticData changeRoleDiagnosticData;
    [CompilerGeneratedAttribute]
private ActorMethodFriendlyNameBuilder <ActorMethodFriendlyNameBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<ChangeRoleDiagnosticData> <OnActorChangeRole>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<ActivationDiagnosticData> <OnActorActivated>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<ActivationDiagnosticData> <OnActorDeactivated>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<PendingActorMethodDiagnosticData> <OnPendingActorMethodCallsUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<ActorMethodDiagnosticData> <OnActorMethodStart>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<ActorMethodDiagnosticData> <OnActorMethodFinish>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<ActorStateDiagnosticData> <OnSaveActorStateFinish>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<ActorStateDiagnosticData> <OnSaveActorStateStart>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent <OnActorRequestProcessingStart>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<TimeSpan> <OnActorRequestProcessingFinish>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<TimeSpan> <OnActorLockAcquired>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<TimeSpan> <OnActorLockReleased>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<TimeSpan> <OnActorRequestDeserializationFinish>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<TimeSpan> <OnActorResponseSerializationFinish>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<TimeSpan> <OnActorOnActivateAsyncFinish>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDiagnosticEvent`1<TimeSpan> <OnLoadActorStateFinish>k__BackingField;
    internal ActorMethodFriendlyNameBuilder ActorMethodFriendlyNameBuilder { get; private set; }
    internal OnDiagnosticEvent`1<ChangeRoleDiagnosticData> OnActorChangeRole { get; internal set; }
    internal OnDiagnosticEvent`1<ActivationDiagnosticData> OnActorActivated { get; internal set; }
    internal OnDiagnosticEvent`1<ActivationDiagnosticData> OnActorDeactivated { get; internal set; }
    internal OnDiagnosticEvent`1<PendingActorMethodDiagnosticData> OnPendingActorMethodCallsUpdated { get; internal set; }
    internal OnDiagnosticEvent`1<ActorMethodDiagnosticData> OnActorMethodStart { get; internal set; }
    internal OnDiagnosticEvent`1<ActorMethodDiagnosticData> OnActorMethodFinish { get; internal set; }
    internal OnDiagnosticEvent`1<ActorStateDiagnosticData> OnSaveActorStateFinish { get; internal set; }
    internal OnDiagnosticEvent`1<ActorStateDiagnosticData> OnSaveActorStateStart { get; internal set; }
    internal OnDiagnosticEvent OnActorRequestProcessingStart { get; internal set; }
    internal OnDiagnosticEvent`1<TimeSpan> OnActorRequestProcessingFinish { get; internal set; }
    internal OnDiagnosticEvent`1<TimeSpan> OnActorLockAcquired { get; internal set; }
    internal OnDiagnosticEvent`1<TimeSpan> OnActorLockReleased { get; internal set; }
    internal OnDiagnosticEvent`1<TimeSpan> OnActorRequestDeserializationFinish { get; internal set; }
    internal OnDiagnosticEvent`1<TimeSpan> OnActorResponseSerializationFinish { get; internal set; }
    internal OnDiagnosticEvent`1<TimeSpan> OnActorOnActivateAsyncFinish { get; internal set; }
    internal OnDiagnosticEvent`1<TimeSpan> OnLoadActorStateFinish { get; internal set; }
    internal DiagnosticsEventManager(ActorMethodFriendlyNameBuilder methodFriendlyNameBuilder);
    [CompilerGeneratedAttribute]
internal ActorMethodFriendlyNameBuilder get_ActorMethodFriendlyNameBuilder();
    [CompilerGeneratedAttribute]
private void set_ActorMethodFriendlyNameBuilder(ActorMethodFriendlyNameBuilder value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<ChangeRoleDiagnosticData> get_OnActorChangeRole();
    [CompilerGeneratedAttribute]
internal void set_OnActorChangeRole(OnDiagnosticEvent`1<ChangeRoleDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<ActivationDiagnosticData> get_OnActorActivated();
    [CompilerGeneratedAttribute]
internal void set_OnActorActivated(OnDiagnosticEvent`1<ActivationDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<ActivationDiagnosticData> get_OnActorDeactivated();
    [CompilerGeneratedAttribute]
internal void set_OnActorDeactivated(OnDiagnosticEvent`1<ActivationDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<PendingActorMethodDiagnosticData> get_OnPendingActorMethodCallsUpdated();
    [CompilerGeneratedAttribute]
internal void set_OnPendingActorMethodCallsUpdated(OnDiagnosticEvent`1<PendingActorMethodDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<ActorMethodDiagnosticData> get_OnActorMethodStart();
    [CompilerGeneratedAttribute]
internal void set_OnActorMethodStart(OnDiagnosticEvent`1<ActorMethodDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<ActorMethodDiagnosticData> get_OnActorMethodFinish();
    [CompilerGeneratedAttribute]
internal void set_OnActorMethodFinish(OnDiagnosticEvent`1<ActorMethodDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<ActorStateDiagnosticData> get_OnSaveActorStateFinish();
    [CompilerGeneratedAttribute]
internal void set_OnSaveActorStateFinish(OnDiagnosticEvent`1<ActorStateDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<ActorStateDiagnosticData> get_OnSaveActorStateStart();
    [CompilerGeneratedAttribute]
internal void set_OnSaveActorStateStart(OnDiagnosticEvent`1<ActorStateDiagnosticData> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent get_OnActorRequestProcessingStart();
    [CompilerGeneratedAttribute]
internal void set_OnActorRequestProcessingStart(OnDiagnosticEvent value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<TimeSpan> get_OnActorRequestProcessingFinish();
    [CompilerGeneratedAttribute]
internal void set_OnActorRequestProcessingFinish(OnDiagnosticEvent`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<TimeSpan> get_OnActorLockAcquired();
    [CompilerGeneratedAttribute]
internal void set_OnActorLockAcquired(OnDiagnosticEvent`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<TimeSpan> get_OnActorLockReleased();
    [CompilerGeneratedAttribute]
internal void set_OnActorLockReleased(OnDiagnosticEvent`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<TimeSpan> get_OnActorRequestDeserializationFinish();
    [CompilerGeneratedAttribute]
internal void set_OnActorRequestDeserializationFinish(OnDiagnosticEvent`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<TimeSpan> get_OnActorResponseSerializationFinish();
    [CompilerGeneratedAttribute]
internal void set_OnActorResponseSerializationFinish(OnDiagnosticEvent`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<TimeSpan> get_OnActorOnActivateAsyncFinish();
    [CompilerGeneratedAttribute]
internal void set_OnActorOnActivateAsyncFinish(OnDiagnosticEvent`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal OnDiagnosticEvent`1<TimeSpan> get_OnLoadActorStateFinish();
    [CompilerGeneratedAttribute]
internal void set_OnLoadActorStateFinish(OnDiagnosticEvent`1<TimeSpan> value);
    public static long GetInterfaceMethodKey(UInt32 interfaceId, UInt32 methodId);
    internal void ActorRequestProcessingStart();
    internal void ActorRequestProcessingFinish(DateTime startTime);
    internal void ActorRequestDeserializationFinish(DateTime startTime);
    internal void ActorResponseSerializationFinish(DateTime startTime);
    internal void ActorOnActivateAsyncStart(ActorBase actor);
    internal void ActorOnActivateAsyncFinish(ActorBase actor);
    internal void ActorMethodStart(long interfaceMethodKey, ActorBase actor, RemotingListenerVersion remotingListener);
    internal void ActorMethodFinish(long interfaceMethodKey, ActorBase actor, Exception e, RemotingListenerVersion remotingListener);
    internal void LoadActorStateStart(ActorBase actor);
    internal void LoadActorStateFinish(ActorBase actor);
    internal void SaveActorStateStart(ActorBase actor);
    internal void SaveActorStateFinish(ActorBase actor);
    internal DateTime AcquireActorLockStart(ActorBase actor);
    internal void AcquireActorLockFailed(ActorBase actor);
    internal DateTime AcquireActorLockFinish(ActorBase actor, DateTime actorLockAcquireStartTime);
    internal void ReleaseActorLock(Nullable`1<DateTime> actorLockHoldStartTime);
    internal void ActorChangeRole(ReplicaRole currentRole, ReplicaRole newRole);
    internal void ActorActivated(ActorBase actor);
    internal void ActorDeactivated(ActorBase actor);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.DiagnosticsManager : object {
    private DiagnosticsEventManager diagnosticsEventManager;
    private PerformanceCounterProviderV2 perfCounterProviderV2;
    private EventSourceProvider eventSourceProviderV2;
    private DiagnosticsEventManager Microsoft.ServiceFabric.Actors.Diagnostics.IDiagnosticsManager.DiagnosticsEventManager { get; }
    internal DiagnosticsManager(ActorService actorService);
    private sealed virtual override DiagnosticsEventManager Microsoft.ServiceFabric.Actors.Diagnostics.IDiagnosticsManager.get_DiagnosticsEventManager();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.DiagnosticsManagerActorContext : object {
    internal long PendingActorMethodCalls;
    private static int PreallocatedStopwatchCount;
    private ActorMethodDiagnosticData methodData;
    private Stopwatch stateStopwatch;
    private ActorStateDiagnosticData stateData;
    private ActivationDiagnosticData activationDiagnosticData;
    private Stopwatch onActivateAsyncStopwatch;
    private PendingActorMethodDiagnosticData pendingMethodDiagnosticData;
    private Stack`1<Stopwatch> preallocatedStopwatches;
    private Stack`1<Stopwatch> stopwatchStack;
    [CompilerGeneratedAttribute]
private long <LastReportedPendingActorMethodCalls>k__BackingField;
    internal ActorMethodDiagnosticData MethodData { get; }
    internal Stopwatch StateStopwatch { get; }
    internal ActorStateDiagnosticData StateData { get; }
    internal ActivationDiagnosticData ActivationDiagnosticData { get; }
    internal PendingActorMethodDiagnosticData PendingMethodDiagnosticData { get; }
    internal long LastReportedPendingActorMethodCalls { get; internal set; }
    internal Stopwatch OnActivateAsyncStopwatch { get; }
    internal ActorMethodDiagnosticData get_MethodData();
    internal Stopwatch get_StateStopwatch();
    internal ActorStateDiagnosticData get_StateData();
    internal ActivationDiagnosticData get_ActivationDiagnosticData();
    internal PendingActorMethodDiagnosticData get_PendingMethodDiagnosticData();
    [CompilerGeneratedAttribute]
internal long get_LastReportedPendingActorMethodCalls();
    [CompilerGeneratedAttribute]
internal void set_LastReportedPendingActorMethodCalls(long value);
    internal Stopwatch get_OnActivateAsyncStopwatch();
    internal Stopwatch GetOrCreateActorMethodStopwatch();
    internal void PushActorMethodStopwatch(Stopwatch stopwatch);
    internal Stopwatch PopActorMethodStopwatch();
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.EventSourceProvider : object {
    private ActorTypeInformation actorTypeInformation;
    private string actorType;
    private ServiceContext serviceContext;
    private ActorFrameworkEventSource writer;
    private Dictionary`2<long, ActorMethodInfo> actorMethodInfo;
    internal ActorTypeInformation ActorTypeInformation { get; }
    internal EventSourceProvider(ServiceContext serviceContext, ActorTypeInformation actorTypeInformation);
    internal ActorTypeInformation get_ActorTypeInformation();
    internal void RegisterWithDiagnosticsEventManager(DiagnosticsEventManager diagnosticsEventManager);
    internal virtual void InitializeActorMethodInfo(DiagnosticsEventManager diagnosticsEventManager);
    internal void InitializeActorMethodInfo(MethodDescription[] actorInterfaceMethodDescriptions, int interfaceId, Dictionary`2<long, ActorMethodInfo> actorMethodInfos);
    internal virtual ActorMethodInfo GetActorMethodInfo(long key, RemotingListenerVersion remotingListener);
    private void OnActorChangeRole(ChangeRoleDiagnosticData changeRoleData);
    private void OnActorActivated(ActivationDiagnosticData activationData);
    private void OnActorDeactivated(ActivationDiagnosticData activationData);
    private void OnActorMethodStart(ActorMethodDiagnosticData methodData);
    private void OnActorMethodFinish(ActorMethodDiagnosticData methodData);
    private void OnPendingActorMethodCallsUpdated(PendingActorMethodDiagnosticData pendingMethodData);
    private void OnSaveActorStateStart(ActorStateDiagnosticData stateData);
    private void OnSaveActorStateFinish(ActorStateDiagnosticData stateData);
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.EventSourceProviderV2 : EventSourceProvider {
    private Dictionary`2<long, ActorMethodInfo> actorMethodInfoV2;
    internal EventSourceProviderV2(ServiceContext serviceContext, ActorTypeInformation actorTypeInformation);
    internal virtual void InitializeActorMethodInfo(DiagnosticsEventManager diagnosticsEventManager);
    internal virtual ActorMethodInfo GetActorMethodInfo(long key, RemotingListenerVersion remotingListener);
}
internal interface Microsoft.ServiceFabric.Actors.Diagnostics.IDiagnosticsManager {
    public DiagnosticsEventManager DiagnosticsEventManager { get; }
    public abstract virtual DiagnosticsEventManager get_DiagnosticsEventManager();
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.MockDiagnosticsManager : object {
    private DiagnosticsEventManager diagnosticsEventManager;
    private DiagnosticsEventManager Microsoft.ServiceFabric.Actors.Diagnostics.IDiagnosticsManager.DiagnosticsEventManager { get; }
    internal MockDiagnosticsManager(ActorService actorService);
    private sealed virtual override DiagnosticsEventManager Microsoft.ServiceFabric.Actors.Diagnostics.IDiagnosticsManager.get_DiagnosticsEventManager();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.PendingActorMethodDiagnosticData : ValueType {
    internal ActorId ActorId;
    internal long PendingActorMethodCalls;
    internal long PendingActorMethodCallsDelta;
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.PerformanceCounterProvider : object {
    private static string TraceType;
    private static FabricPerformanceCounterSet actorCounterSet;
    private static Dictionary`2<string, FabricPerformanceCounterSet> avaiableFabricCounterSet;
    private Guid partitionId;
    private ActorTypeInformation actorTypeInformation;
    private string counterInstanceDifferentiator;
    private FabricPerformanceCounterSetInstance actorCounterSetInstance;
    private ActorLockContentionCounterWriter actorLockContentionCounterWriter;
    private ActorSaveStateTimeCounterWriter actorSaveStateTimeCounterWriter;
    private FabricAverageCount64PerformanceCounterWriter actorRequestProcessingTimeCounterWriter;
    private FabricAverageCount64PerformanceCounterWriter actorLockAcquireWaitTimeCounterWriter;
    private FabricAverageCount64PerformanceCounterWriter actorLockHoldTimeCounterWriter;
    private FabricAverageCount64PerformanceCounterWriter actorRequestDeserializationTimeCounterWriter;
    private FabricAverageCount64PerformanceCounterWriter actorResponseSerializationTimeCounterWriter;
    private FabricAverageCount64PerformanceCounterWriter actorOnActivateAsyncTimeCounterWriter;
    private FabricAverageCount64PerformanceCounterWriter actorLoadStateTimeCounterWriter;
    private FabricNumberOfItems64PerformanceCounterWriter actorOutstandingRequestsCounterWriter;
    private Dictionary`2<long, CounterInstanceData> actorMethodCounterInstanceData;
    internal Guid PartitionId { get; }
    internal ActorTypeInformation ActorTypeInformation { get; }
    private static PerformanceCounterProvider();
    internal PerformanceCounterProvider(Guid partitionId, ActorTypeInformation actorTypeInformation);
    internal Guid get_PartitionId();
    internal ActorTypeInformation get_ActorTypeInformation();
    public virtual void Dispose();
    internal static void InitializeAvailableCounterTypes();
    internal virtual MethodSpecificCounterWriters GetMethodSpecificCounterWriters(long interfaceMethodKey, RemotingListenerVersion remotingListener);
    internal void RegisterWithDiagnosticsEventManager(DiagnosticsEventManager diagnosticsEventManager);
    internal Dictionary`2<long, CounterInstanceData> CreateActorMethodCounterInstanceData(List`1<KeyValuePair`2<long, MethodInfo>> methodInfoList, PerformanceCounterInstanceNameBuilder percCounterInstanceNameBuilder);
    internal List`1<KeyValuePair`2<long, MethodInfo>> GetMethodInfo(MethodDescription[] actorInterfaceMethodDescriptions, int interfaceId);
    internal virtual void InitializeActorMethodInfo(DiagnosticsEventManager diagnosticsEventManager);
    private static void DumpCounterSetInfo(FabricPerformanceCounterSet counterSet, IEnumerable`1<FabricPerformanceCounterDefinition> activeCounters);
    private void CreateActorCounterWriters(string actorCounterInstanceName);
    private T CreateCounterWriter(string actorCounterInstanceName, Type writerType, Func`1<T> writerCreationCallback);
    private void OnActorMethodFinish(ActorMethodDiagnosticData methodData);
    private T CreateMethodCounterWriter(string instanceName, Type counterWriterType, FabricPerformanceCounterSetInstance instance, Func`2<FabricPerformanceCounterSetInstance, T> counterWriterCreationCallback);
    private void OnPendingActorMethodCallsUpdated(PendingActorMethodDiagnosticData pendingMethodData);
    private void OnSaveActorStateFinish(ActorStateDiagnosticData stateData);
    private void OnActorRequestProcessingStart();
    private void OnActorRequestProcessingFinish(TimeSpan processingTime);
    private void OnActorLockAcquired(TimeSpan lockAcquireWaitTime);
    private void OnActorLockReleased(TimeSpan lockHoldTime);
    private void OnActorRequestDeserializationFinish(TimeSpan deserializationTime);
    private void OnActorResponseSerializationFinish(TimeSpan serializationTime);
    private void OnActorOnActivateAsyncFinish(TimeSpan onActivateAsyncTime);
    private void OnLoadActorStateFinish(TimeSpan loadStateTime);
    private void LogCounterInstanceCreationResult(Type counterWriterType, string instanceName, Exception e);
    private MethodSpecificCounterWriters CreateCounterWriters(CounterInstanceData counterInstanceData, FabricPerformanceCounterSet actorMethodCounterSet);
    [CompilerGeneratedAttribute]
private ActorLockContentionCounterWriter <CreateActorCounterWriters>b__32_0();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateActorCounterWriters>b__32_1();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateActorCounterWriters>b__32_2();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateActorCounterWriters>b__32_3();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateActorCounterWriters>b__32_4();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateActorCounterWriters>b__32_5();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateActorCounterWriters>b__32_6();
    [CompilerGeneratedAttribute]
private ActorSaveStateTimeCounterWriter <CreateActorCounterWriters>b__32_7();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateActorCounterWriters>b__32_8();
    [CompilerGeneratedAttribute]
private FabricNumberOfItems64PerformanceCounterWriter <CreateActorCounterWriters>b__32_9();
}
internal class Microsoft.ServiceFabric.Actors.Diagnostics.PerformanceCounterProviderV2 : PerformanceCounterProvider {
    private string counterInstanceDifferentiatorV2;
    private Dictionary`2<long, CounterInstanceData> actorMethodCounterInstanceDataV2;
    internal PerformanceCounterProviderV2(Guid partitionId, ActorTypeInformation actorTypeInformation);
    public virtual void Dispose();
    internal virtual void InitializeActorMethodInfo(DiagnosticsEventManager diagnosticsEventManager);
    internal virtual MethodSpecificCounterWriters GetMethodSpecificCounterWriters(long interfaceMethodKey, RemotingListenerVersion remotingListener);
}
internal class Microsoft.ServiceFabric.Actors.FabricActorExceptionKnownTypes : object {
    public static IDictionary`2<string, ConvertorFuncs> ServiceExceptionConvertors;
    private static FabricActorExceptionKnownTypes();
    private static ServiceException ToServiceException(FabricException fabricEx);
    private static T FromServiceException(ServiceException serviceException, Exception[] innerExceptions);
    private static Exception[] GetInnerExceptions(Exception exception);
}
public static class Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat : object {
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) applicationName;
    public static string GetName(Type actorInterfaceType);
    public static string GetFabricServiceName(Type actorInterfaceType, string serviceName);
    public static Uri GetFabricServiceUri(Type actorInterfaceType, string applicationName, string serviceName);
    public static Uri GetFabricServiceUri(Type actorInterfaceType);
    public static Uri GetFabricServiceUri(Type actorInterfaceType, Uri applicationUri);
    public static Uri GetFabricServiceUri(Type actorInterfaceType, Uri applicationUri, string serviceName);
    public static string GetFabricServiceTypeName(Type actorImplementationType);
    public static string GetFabricServicePackageName(string servicePackageNamePrefix);
    public static string GetFabricServiceEndpointName(Type actorImplementationType);
    public static string GetFabricServiceV2EndpointName(Type actorImplementationType);
    public static string GetFabricServiceWrappedMessageEndpointName(Type actorImplementationType);
    public static string GetFabricServiceReplicatorEndpointName(Type actorImplementationType);
    public static string GetMigrationSourceEndpointName(Type actorImplementationType);
    public static string GetMigrationTargetEndpointName(Type actorImplementationType);
    public static string GetFabricServiceReplicatorConfigSectionName(Type actorImplementationType);
    public static string GetMigrationConfigSectionName(Type actorImplementationType);
    public static string GetFabricServiceTransportSettingsSectionName(Type actorImplementationType);
    public static string GetActorStateProviderSettingsSectionName(Type actorImplementationType);
    public static string GetFabricServiceReplicatorSecurityConfigSectionName(Type actorImplementationType);
    public static string GetLocalEseStoreConfigSectionName(Type actorImplementationType);
    public static string GetKeyValueStoreSettingsConfigSectionName(Type actorImplementationType);
    public static string GetConfigPackageName(Type actorImplementationType);
    public static string GetCodePackageName(Type actorImplementationType);
    public static string GetFabricServiceReplicatorSecurityCredentialTypeName(Type actorImplementationType);
    public static string GetFabricApplicationPackageName(string appPrefix);
    public static string GetFabricApplicationTypeName(string appPrefix);
    public static string GetFabricApplicationName(string appPrefix);
    internal static string GetCurrentFabricApplicationName();
    internal static string GetActorStateProviderOverrideSectionName();
    internal static string GetActorStateProviderOverrideKeyName();
    private static string GetFabricServiceName(string actorInterfaceTypeName);
    private static string GetFabricApplicationPrefix(string appPrefix);
    private static string GetActorImplName(Type actorImplType);
    private static string GetActorImplName(string actorImplTypeName);
    private static string GetActorServiceName(Type actorImplementationType);
    private static string GetName(string actorInterfaceTypeName);
}
internal class Microsoft.ServiceFabric.Actors.Helper : object {
    public static string GetCallContext();
}
public interface Microsoft.ServiceFabric.Actors.IActor {
}
public interface Microsoft.ServiceFabric.Actors.IActorEventPublisher {
}
public interface Microsoft.ServiceFabric.Actors.IActorEventPublisher`1 {
}
public interface Microsoft.ServiceFabric.Actors.IActorEvents {
}
internal interface Microsoft.ServiceFabric.Actors.IActorReference {
    public abstract virtual object Bind(Type actorType);
}
public interface Microsoft.ServiceFabric.Actors.IActorService {
    public abstract virtual Task`1<PagedResult`1<ActorInformation>> GetActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken);
    public abstract virtual Task DeleteActorAsync(ActorId actorId, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> GetRemindersAsync(ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
}
public class Microsoft.ServiceFabric.Actors.InvalidMigrationStateProviderException : FabricException {
    public InvalidMigrationStateProviderException(string message);
    public InvalidMigrationStateProviderException(string message, Exception inner);
    private InvalidMigrationStateProviderException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.ServiceFabric.Actors.InvalidReentrantCallException : FabricException {
    public InvalidReentrantCallException(string message);
    public InvalidReentrantCallException(string message, Exception inner);
    private InvalidReentrantCallException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ServiceFabric.Actors.Migration.ActorEventForwarder : object {
    private static string TraceType;
    private ActorService actorService;
    private string traceId;
    private EventSubscriptionCache subscriptionCache;
    private ActorEventSubscriberManager eventManager;
    public ActorEventForwarder(ActorService actorService, EventSubscriptionCache subscriptionCache);
    private static ActorEventForwarder();
    public sealed virtual void HandleOneWayMessage(IServiceRemotingRequestMessage requestMessage);
}
public class Microsoft.ServiceFabric.Actors.Migration.DefaultActorRequestForwarder : object {
    private static string TraceType;
    private ServiceRemotingPartitionClient remotingClient;
    private EventSubscriptionCache eventCache;
    private IServiceRemotingCallbackMessageHandler callbackHandler;
    private ActorService actorService;
    private string traceId;
    public DefaultActorRequestForwarder(ActorService actorService, RequestForwarderContext requestForwarderContext, string listenerName, Func`2<IServiceRemotingCallbackMessageHandler, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings);
    private static DefaultActorRequestForwarder();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Migration.DefaultActorRequestForwarder/<ForwardRequestResponseAsync>d__7")]
public sealed virtual Task`1<IServiceRemotingResponseMessage> ForwardRequestResponseAsync(IServiceRemotingRequestContext requestContext, IServiceRemotingRequestMessage requestMessage);
}
[DataContractAttribute]
[KnownTypeAttribute("System.Fabric.FabricErrorCode")]
public class Microsoft.ServiceFabric.Actors.Migration.ErrorResponse : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFabricError>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public FabricErrorCode ErrorCode { get; public set; }
    [DataMemberAttribute]
public string ExceptionType { get; public set; }
    [DataMemberAttribute]
public bool IsFabricError { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public FabricErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(FabricErrorCode value);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
public void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFabricError();
    [CompilerGeneratedAttribute]
public void set_IsFabricError(bool value);
}
internal class Microsoft.ServiceFabric.Actors.Migration.EventSubscriptionCache : object {
    private static string TraceType;
    private ConcurrentDictionary`2<Guid, IServiceRemotingCallbackClient> callbackClientMap;
    private string traceId;
    public EventSubscriptionCache(ActorService actorService, string traceId);
    private static EventSubscriptionCache();
    public void AddToCache(Guid subscriptionId, IServiceRemotingCallbackClient callbackClient);
    public void RemoveFromCache(Guid subscriptionId);
    public bool GetSubscription(Guid subscriptionId, IServiceRemotingCallbackClient& callbackClient);
}
public class Microsoft.ServiceFabric.Actors.Migration.Exceptions.ActorCallsDisallowedException : FabricException {
    public ActorCallsDisallowedException(string message);
    public ActorCallsDisallowedException(string message, Exception inner);
    private ActorCallsDisallowedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.ServiceFabric.Actors.Migration.Exceptions.AmbiguousActorIdDetectedException : FabricException {
    public AmbiguousActorIdDetectedException(string message);
    public AmbiguousActorIdDetectedException(string message, Exception inner);
    private AmbiguousActorIdDetectedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.ServiceFabric.Actors.Migration.Exceptions.InvalidMigrationConfigException : FabricException {
    public InvalidMigrationConfigException(string message);
    public InvalidMigrationConfigException(string message, Exception inner);
    private InvalidMigrationConfigException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.ServiceFabric.Actors.Migration.Exceptions.InvalidMigrationOperationException : FabricException {
    public InvalidMigrationOperationException(string message);
    public InvalidMigrationOperationException(string message, Exception inner);
    private InvalidMigrationOperationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.ServiceFabric.Actors.Migration.Exceptions.MigrationFrameworkNotInitializedException : FabricException {
    public MigrationFrameworkNotInitializedException(string message);
    public MigrationFrameworkNotInitializedException(string message, Exception inner);
    private MigrationFrameworkNotInitializedException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.ServiceFabric.Actors.Migration.IRequestForwarder {
    public abstract virtual Task`1<IServiceRemotingResponseMessage> ForwardRequestResponseAsync(IServiceRemotingRequestContext requestContext, IServiceRemotingRequestMessage requestMessage);
}
public enum Microsoft.ServiceFabric.Actors.Migration.MigrationPhase : Enum {
    public int value__;
    public static MigrationPhase None;
    public static MigrationPhase Copy;
    public static MigrationPhase Catchup;
    public static MigrationPhase Downtime;
    public static MigrationPhase Completed;
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Actors.Migration.MigrationResult : object {
    private static DataContractJsonSerializer serializer;
    [CompilerGeneratedAttribute]
private MigrationMode <MigrationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartDateTimeUTC>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndDateTimeUTC>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationState <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationPhase <CurrentPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <StartSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <EndSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastAppliedSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <NoOfKeysMigrated>k__BackingField;
    [CompilerGeneratedAttribute]
private PhaseResult[] <PhaseResults>k__BackingField;
    [DataMemberAttribute]
public MigrationMode MigrationMode { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> StartDateTimeUTC { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> EndDateTimeUTC { get; public set; }
    [DataMemberAttribute]
public MigrationState Status { get; public set; }
    [DataMemberAttribute]
public MigrationPhase CurrentPhase { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> StartSeqNum { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> EndSeqNum { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> LastAppliedSeqNum { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> NoOfKeysMigrated { get; public set; }
    [DataMemberAttribute]
public PhaseResult[] PhaseResults { get; public set; }
    private static MigrationResult();
    [CompilerGeneratedAttribute]
public MigrationMode get_MigrationMode();
    [CompilerGeneratedAttribute]
public void set_MigrationMode(MigrationMode value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartDateTimeUTC();
    [CompilerGeneratedAttribute]
public void set_StartDateTimeUTC(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndDateTimeUTC();
    [CompilerGeneratedAttribute]
public void set_EndDateTimeUTC(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public MigrationState get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(MigrationState value);
    [CompilerGeneratedAttribute]
public MigrationPhase get_CurrentPhase();
    [CompilerGeneratedAttribute]
public void set_CurrentPhase(MigrationPhase value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_StartSeqNum();
    [CompilerGeneratedAttribute]
public void set_StartSeqNum(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_EndSeqNum();
    [CompilerGeneratedAttribute]
public void set_EndSeqNum(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LastAppliedSeqNum();
    [CompilerGeneratedAttribute]
public void set_LastAppliedSeqNum(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_NoOfKeysMigrated();
    [CompilerGeneratedAttribute]
public void set_NoOfKeysMigrated(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public PhaseResult[] get_PhaseResults();
    [CompilerGeneratedAttribute]
public void set_PhaseResults(PhaseResult[] value);
    public virtual string ToString();
}
public enum Microsoft.ServiceFabric.Actors.Migration.MigrationState : Enum {
    public int value__;
    public static MigrationState None;
    public static MigrationState InProgress;
    public static MigrationState Completed;
    public static MigrationState Aborted;
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Actors.Migration.PhaseResult : object {
    private static DataContractJsonSerializer serializer;
    [CompilerGeneratedAttribute]
private DateTime <StartDateTimeUTC>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndDateTimeUTC>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LastAppliedSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationState <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WorkerCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Iteration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <NoOfKeysMigrated>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationPhase <Phase>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkerResult[] <WorkerResults>k__BackingField;
    [DataMemberAttribute]
public DateTime StartDateTimeUTC { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> EndDateTimeUTC { get; public set; }
    [DataMemberAttribute]
public long StartSeqNum { get; public set; }
    [DataMemberAttribute]
public long EndSeqNum { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> LastAppliedSeqNum { get; public set; }
    [DataMemberAttribute]
public MigrationState Status { get; public set; }
    [DataMemberAttribute]
public int WorkerCount { get; public set; }
    [DataMemberAttribute]
public int Iteration { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> NoOfKeysMigrated { get; public set; }
    [DataMemberAttribute]
public MigrationPhase Phase { get; public set; }
    [DataMemberAttribute]
public WorkerResult[] WorkerResults { get; public set; }
    private static PhaseResult();
    [CompilerGeneratedAttribute]
public DateTime get_StartDateTimeUTC();
    [CompilerGeneratedAttribute]
public void set_StartDateTimeUTC(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndDateTimeUTC();
    [CompilerGeneratedAttribute]
public void set_EndDateTimeUTC(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public long get_StartSeqNum();
    [CompilerGeneratedAttribute]
public void set_StartSeqNum(long value);
    [CompilerGeneratedAttribute]
public long get_EndSeqNum();
    [CompilerGeneratedAttribute]
public void set_EndSeqNum(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LastAppliedSeqNum();
    [CompilerGeneratedAttribute]
public void set_LastAppliedSeqNum(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public MigrationState get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(MigrationState value);
    [CompilerGeneratedAttribute]
public int get_WorkerCount();
    [CompilerGeneratedAttribute]
public void set_WorkerCount(int value);
    [CompilerGeneratedAttribute]
public int get_Iteration();
    [CompilerGeneratedAttribute]
public void set_Iteration(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_NoOfKeysMigrated();
    [CompilerGeneratedAttribute]
public void set_NoOfKeysMigrated(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public MigrationPhase get_Phase();
    [CompilerGeneratedAttribute]
public void set_Phase(MigrationPhase value);
    [CompilerGeneratedAttribute]
public WorkerResult[] get_WorkerResults();
    [CompilerGeneratedAttribute]
public void set_WorkerResults(WorkerResult[] value);
    public virtual string ToString();
}
public class Microsoft.ServiceFabric.Actors.Migration.RequestForwarderContext : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionKey <ServicePartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetReplicaSelector <ReplicaSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    public Uri ServiceUri { get; internal set; }
    public ServicePartitionKey ServicePartitionKey { get; internal set; }
    public TargetReplicaSelector ReplicaSelector { get; internal set; }
    public string TraceId { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
internal void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public ServicePartitionKey get_ServicePartitionKey();
    [CompilerGeneratedAttribute]
internal void set_ServicePartitionKey(ServicePartitionKey value);
    [CompilerGeneratedAttribute]
public TargetReplicaSelector get_ReplicaSelector();
    [CompilerGeneratedAttribute]
internal void set_ReplicaSelector(TargetReplicaSelector value);
    [CompilerGeneratedAttribute]
public string get_TraceId();
    [CompilerGeneratedAttribute]
internal void set_TraceId(string value);
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Actors.Query.ActorInformation : object {
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [DataMemberAttribute]
public ActorId ActorId { get; private set; }
    [DataMemberAttribute]
public bool IsActive { get; private set; }
    public ActorInformation(ActorId actorId, bool isActive);
    [CompilerGeneratedAttribute]
public ActorId get_ActorId();
    [CompilerGeneratedAttribute]
private void set_ActorId(ActorId value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Actors.Query.ContinuationToken : object {
    [CompilerGeneratedAttribute]
private object <Marker>k__BackingField;
    [DataMemberAttribute]
public object Marker { get; private set; }
    public ContinuationToken(object marker);
    [CompilerGeneratedAttribute]
public object get_Marker();
    [CompilerGeneratedAttribute]
private void set_Marker(object value);
}
[DataContractAttribute]
[KnownTypeAttribute("System.Collections.Generic.List`1<Microsoft.ServiceFabric.Actors.Query.ActorInformation>")]
public class Microsoft.ServiceFabric.Actors.Query.PagedResult`1 : object {
    internal static int MaxItemsToReturn;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ContinuationToken <ContinuationToken>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<T> Items { get; public set; }
    [DataMemberAttribute]
public ContinuationToken ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public ContinuationToken get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(ContinuationToken value);
}
[DataContractAttribute]
[KnownTypeAttribute("System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.List`1<Microsoft.ServiceFabric.Actors.Runtime.ActorReminderState>>>")]
public class Microsoft.ServiceFabric.Actors.Query.ReminderPagedResult`1 : object {
    private static int maxItemsToReturn;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ContinuationToken <ContinuationToken>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<T> Items { get; public set; }
    [DataMemberAttribute]
public ContinuationToken ContinuationToken { get; public set; }
    private static ReminderPagedResult`1();
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public ContinuationToken get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(ContinuationToken value);
    public static void SetDefaultPageSize(int newSize);
    internal static int GetDefaultPageSize();
}
public class Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException : FabricException {
    public ReentrancyModeDisallowedException(string message);
    public ReentrancyModeDisallowedException(string message, Exception inner);
    private ReentrancyModeDisallowedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException : FabricException {
    public ReentrantActorInvalidStateException(string message);
    public ReentrantActorInvalidStateException(string message, Exception inner);
    private ReentrantActorInvalidStateException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ServiceFabric.Actors.ReminderLoadInProgressException : FabricTransientException {
    public ReminderLoadInProgressException(string message);
    public ReminderLoadInProgressException(string message, Exception inner);
    private ReminderLoadInProgressException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.ServiceFabric.Actors.ReminderNotFoundException : FabricException {
    public ReminderNotFoundException(string message);
    public ReminderNotFoundException(string message, Exception inner);
    private ReminderNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.ActorDataContractSurrogate : object {
    public static IDataContractSurrogate Instance;
    private static ActorDataContractSurrogate();
    public sealed virtual Type GetDataContractType(Type type);
    public sealed virtual object GetObjectToSerialize(object obj, Type targetType);
    public sealed virtual object GetDeserializedObject(object obj, Type targetType);
    public sealed virtual object GetCustomDataToExport(Type clrType, Type dataContractType);
    public sealed virtual object GetCustomDataToExport(MemberInfo memberInfo, Type dataContractType);
    public sealed virtual void GetKnownCustomDataTypes(Collection`1<Type> customDataTypes);
    public sealed virtual Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData);
    public sealed virtual CodeTypeDeclaration ProcessImportedType(CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit);
}
internal static class Microsoft.ServiceFabric.Actors.Remoting.ActorLogicalCallContext : object {
    internal static string CallContextKey;
    public static bool IsPresent();
    public static bool TryGet(String& callContextValue);
    public static void Set(string callContextValue);
    public static void Clear();
}
internal static class Microsoft.ServiceFabric.Actors.Remoting.ActorMessageDispatch : object {
    public static int InterfaceId;
    public static int InterfaceIdV2;
    private static ActorMessageDispatch();
}
[AttributeUsageAttribute("1")]
public abstract class Microsoft.ServiceFabric.Actors.Remoting.ActorRemotingProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private RemotingClientVersion <RemotingClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private RemotingListenerVersion <RemotingListenerVersion>k__BackingField;
    public RemotingClientVersion RemotingClientVersion { get; public set; }
    public RemotingListenerVersion RemotingListenerVersion { get; public set; }
    [CompilerGeneratedAttribute]
public RemotingClientVersion get_RemotingClientVersion();
    [CompilerGeneratedAttribute]
public void set_RemotingClientVersion(RemotingClientVersion value);
    [CompilerGeneratedAttribute]
public RemotingListenerVersion get_RemotingListenerVersion();
    [CompilerGeneratedAttribute]
public void set_RemotingListenerVersion(RemotingListenerVersion value);
    public abstract virtual IServiceRemotingListener CreateServiceRemotingListener(ActorService actorService);
    public abstract virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackClient callbackClient);
    public abstract virtual Dictionary`2<string, Func`2<ActorService, IServiceRemotingListener>> CreateServiceRemotingListeners();
    public abstract virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackMessageHandler callbackMessageHandler);
    internal static ActorRemotingProviderAttribute GetProvider(IEnumerable`1<Type> types);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.Builder.ActorCodeBuilderNames : CodeBuilderNames {
    public ActorCodeBuilderNames(string prefix);
    public virtual string GetDataContractNamespace();
}
internal class Microsoft.ServiceFabric.Actors.Remoting.Builder.ActorEventCodeBuilderNames : CodeBuilderNames {
    public ActorEventCodeBuilderNames(string prefix);
    public virtual string GetDataContractNamespace();
}
public class Microsoft.ServiceFabric.Actors.Remoting.Client.ActorRemotingExceptionHandler : object {
    private sealed virtual override bool Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings, ExceptionHandlingResult& result);
}
internal static class Microsoft.ServiceFabric.Actors.Remoting.Constants : object {
    public static string Namespace;
}
internal class Microsoft.ServiceFabric.Actors.Remoting.Description.ActorEventInterfaceDescription : InterfaceDescription {
    private ActorEventInterfaceDescription(Type actorEventInterfaceType, bool useCRCIdForGeneration);
    public static ActorEventInterfaceDescription Create(Type actorEventInterfaceType);
    public static ActorEventInterfaceDescription CreateUsingCRCId(Type actorEventInterfaceType);
    private static void EnsureActorEventInterface(Type actorEventInterfaceType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.Description.ActorInterfaceDescription : InterfaceDescription {
    private ActorInterfaceDescription(Type actorInterfaceType, bool useCRCIdGeneration);
    public static ActorInterfaceDescription Create(Type actorInterfaceType);
    public static ActorInterfaceDescription CreateUsingCRCId(Type actorInterfaceType);
    private static void EnsureActorInterface(Type actorInterfaceType);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Remoting.EventSubscriptionRequestBody : object {
    [CompilerGeneratedAttribute]
private int <EventInterfaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SubscriptionId>k__BackingField;
    [DataMemberAttribute]
public int EventInterfaceId { get; public set; }
    [DataMemberAttribute]
public Guid SubscriptionId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_EventInterfaceId();
    [CompilerGeneratedAttribute]
public void set_EventInterfaceId(int value);
    [CompilerGeneratedAttribute]
public Guid get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(Guid value);
}
[AttributeUsageAttribute("1")]
public class Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute : ActorRemotingProviderAttribute {
    [CompilerGeneratedAttribute]
private long <MaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OperationTimeoutInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <KeepAliveTimeoutInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConnectTimeoutInMilliseconds>k__BackingField;
    public long MaxMessageSize { get; public set; }
    public long OperationTimeoutInSeconds { get; public set; }
    public long KeepAliveTimeoutInSeconds { get; public set; }
    public long ConnectTimeoutInMilliseconds { get; public set; }
    [CompilerGeneratedAttribute]
public long get_MaxMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSize(long value);
    [CompilerGeneratedAttribute]
public long get_OperationTimeoutInSeconds();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutInSeconds(long value);
    [CompilerGeneratedAttribute]
public long get_KeepAliveTimeoutInSeconds();
    [CompilerGeneratedAttribute]
public void set_KeepAliveTimeoutInSeconds(long value);
    [CompilerGeneratedAttribute]
public long get_ConnectTimeoutInMilliseconds();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeoutInMilliseconds(long value);
    public virtual IServiceRemotingListener CreateServiceRemotingListener(ActorService actorService);
    public virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackClient callbackClient);
    public virtual Dictionary`2<string, Func`2<ActorService, IServiceRemotingListener>> CreateServiceRemotingListeners();
    public virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackMessageHandler callbackMessageHandler);
    internal static FabricTransportRemotingListenerSettings GetActorListenerSettings(ActorService actorService);
    private FabricTransportRemotingListenerSettings InitializeListenerSettings(ActorService a);
    private long GetAndValidateMaxMessageSize(long maxMessageSize);
    private TimeSpan GetandValidateOperationTimeout(TimeSpan operationTimeout);
    private TimeSpan GetandValidateKeepAliveTimeout(TimeSpan keepAliveTimeout);
    private TimeSpan GetConnectTimeout(TimeSpan connectTimeout);
    [CompilerGeneratedAttribute]
private IServiceRemotingListener <CreateServiceRemotingListeners>b__19_0(ActorService actorService);
    [CompilerGeneratedAttribute]
private IServiceRemotingClientFactory <CreateServiceRemotingListeners>b__19_3(IServiceRemotingCallbackMessageHandler callbackMessageHandler);
    [CompilerGeneratedAttribute]
private IServiceRemotingListener <CreateServiceRemotingListeners>b__19_1(ActorService actorService);
    [CompilerGeneratedAttribute]
private IServiceRemotingClientFactory <CreateServiceRemotingListeners>b__19_5(IServiceRemotingCallbackMessageHandler callbackMessageHandler);
}
internal static class Microsoft.ServiceFabric.Actors.Remoting.Runtime.ActorServiceRemotingListener : object {
    public static ICommunicationListener CreateActorServiceRemotingListener(ActorService actorService);
}
internal static class Microsoft.ServiceFabric.Actors.Remoting.V1.ActorEventSubscription : object {
    public static DataContractSerializer Serializer;
    public static int InterfaceId;
    public static int SubscribeMethodId;
    public static int UnSubscribeMethodId;
    private static ActorEventSubscription();
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.ActorMessageBody : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [DataMemberAttribute]
public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
internal static class Microsoft.ServiceFabric.Actors.Remoting.V1.ActorMessageBodySerializer : object {
    private static IEnumerable`1<Type> DefaultKnownTypes;
    private static ActorMessageBodySerializer();
    public static DataContractSerializer GetActorMessageSerializer(IEnumerable`1<Type> knownTypes);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.ActorMessageHeaders : object {
    [DataMemberAttribute]
public int InterfaceId;
    [DataMemberAttribute]
public int MethodId;
    [DataMemberAttribute]
public ActorId ActorId;
    [DataMemberAttribute]
public string CallContext;
    private static string ActorMessageHeaderName;
    private static DataContractSerializer Serializer;
    private static ActorMessageHeaders();
    public static bool TryFromServiceMessageHeaders(ServiceRemotingMessageHeaders headers, ActorMessageHeaders& actorHeaders);
    public ServiceRemotingMessageHeaders ToServiceMessageHeaders();
    private static ActorMessageHeaders Deserialize(Byte[] headerBytes);
    private Byte[] Serialize();
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Builder.ActorCodeBuilder : CodeBuilder {
    private static ICodeBuilder Instance;
    private static object buildLock;
    private ICodeBuilder eventCodeBuilder;
    private MethodBodyTypesBuilder methodBodyTypesBuilder;
    private MethodDispatcherBuilder`1<ActorMethodDispatcherBase> methodDispatcherBuilder;
    private ActorProxyGeneratorBuilder proxyGeneratorBuilder;
    private static ActorCodeBuilder();
    public static ActorProxyGeneratorWith GetOrCreateProxyGenerator(Type actorInterfaceType);
    public static ActorMethodDispatcherBase GetOrCreateMethodDispatcher(Type actorInterfaceType);
    public static ActorEventProxyGeneratorWith GetOrCreateEventProxyGenerator(Type actorEventInterfaceType);
    protected virtual MethodDispatcherBuildResult BuildMethodDispatcher(Type interfaceType);
    protected virtual MethodBodyTypesBuildResult BuildMethodBodyTypes(Type interfaceType);
    protected virtual ProxyGeneratorBuildResult BuildProxyGenerator(Type interfaceType);
    [CompilerGeneratedAttribute]
private MethodDispatcherBase <BuildProxyGenerator>b__12_0(Type t);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Builder.ActorEventProxyGeneratorBuilder : ProxyGeneratorBuilder`2<ActorEventProxyGeneratorWith, ActorEventProxy> {
    public ActorEventProxyGeneratorBuilder(ICodeBuilder codeBuilder);
    protected virtual ActorEventProxyGeneratorWith CreateProxyGenerator(Type proxyInterfaceType, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap, Type proxyActivatorType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Builder.ActorEventProxyGeneratorWith : ProxyGeneratorWithSerializer {
    private IProxyActivator proxyActivator;
    public ActorEventProxyGeneratorWith(Type actorEventInterfaceType, IProxyActivator proxyActivator, IDictionary`2<int, IEnumerable`1<Type>> requestBodyTypes, IDictionary`2<int, IEnumerable`1<Type>> responseBodyTypes);
    public ActorEventProxy CreateActorEventProxy();
    private static IDictionary`2<int, DataContractSerializer> GetBodySerializers(IDictionary`2<int, IEnumerable`1<Type>> bodyTypes);
}
public abstract class Microsoft.ServiceFabric.Actors.Remoting.V1.Builder.ActorMethodDispatcherBase : MethodDispatcherBaseWithSerializer {
    internal virtual DataContractSerializer CreateRequestMessageBodySerializer(IEnumerable`1<Type> requestBodyValueTypes);
    internal virtual DataContractSerializer CreateResponseMessageBodySerializer(IEnumerable`1<Type> responseBodyValueTypes);
    internal virtual object GetRequestMessageBodyValue(object requestMessageBody);
    internal virtual object CreateResponseMessageBody(object responseMessageBodyValue);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Builder.ActorProxyGeneratorBuilder : ProxyGeneratorBuilder`2<ActorProxyGeneratorWith, ActorProxy> {
    public ActorProxyGeneratorBuilder(ICodeBuilder codeBuilder);
    protected virtual ActorProxyGeneratorWith CreateProxyGenerator(Type proxyInterfaceType, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap, Type proxyActivatorType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Builder.ActorProxyGeneratorWith : ProxyGeneratorWithSerializer {
    private IProxyActivator proxyActivator;
    public ActorProxyGeneratorWith(Type serviceProxyInterfaceType, IProxyActivator proxyActivator, IDictionary`2<int, IEnumerable`1<Type>> requestBodyTypes, IDictionary`2<int, IEnumerable`1<Type>> responseBodyTypes);
    public ActorProxy CreateActorProxy(ActorServicePartitionClient actorServicePartitionClient);
    private static IDictionary`2<int, DataContractSerializer> GetBodySerializers(IDictionary`2<int, IEnumerable`1<Type>> bodyTypes);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Client.ActorEventSubscriberManager : object {
    public static ActorEventSubscriberManager Instance;
    private ConcurrentDictionary`2<Subscriber, SubscriptionInfo> eventKeyToInfoMap;
    private ConcurrentDictionary`2<Guid, SubscriptionInfo> subscriptionIdToInfoMap;
    private ConcurrentDictionary`2<int, ActorMethodDispatcherBase> eventIdToDispatchersMap;
    private static ActorEventSubscriberManager();
    public void RegisterEventDispatchers(IEnumerable`1<ActorMethodDispatcherBase> eventDispatchers);
    public sealed virtual Task`1<Byte[]> RequestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public sealed virtual void OneWayMessage(ServiceRemotingMessageHeaders serviceMessageHeaders, Byte[] requestBody);
    public SubscriptionInfo RegisterSubscriber(ActorId actorId, Type eventInterfaceType, object instance);
    public bool TryUnregisterSubscriber(ActorId actorId, Type eventInterfaceType, object instance, SubscriptionInfo& info);
    private int GetAndEnsureEventId(Type eventInterfaceType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Client.ActorProxyFactory : object {
    private object thisLock;
    private Func`2<IServiceRemotingCallbackClient, IServiceRemotingClientFactory> createServiceRemotingClientFactory;
    private OperationRetrySettings retrySettings;
    private IServiceRemotingClientFactory modreq(System.Runtime.CompilerServices.IsVolatile) remotingClientFactory;
    public ActorProxyFactory(Func`2<IServiceRemotingCallbackClient, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings);
    public sealed virtual TActorInterface CreateActorProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public sealed virtual TActorInterface CreateActorProxy(ActorId actorId, string applicationName, string serviceName, string listenerName);
    public sealed virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public sealed virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, long partitionKey, string listenerName);
    public void Dispose();
    internal object CreateActorProxy(Type actorInterfaceType, Uri serviceUri, ActorId actorId, string listenerName);
    protected virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackClient callbackClient);
    private IServiceRemotingClientFactory CreateServiceRemotingClientFactory(Type actorInterfaceType);
    private IServiceRemotingClientFactory GetOrCreateServiceRemotingClientFactory(Type actorInterfaceType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Client.ActorServicePartitionClient : ServiceRemotingPartitionClient {
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    public ActorId ActorId { get; }
    public ActorServicePartitionClient(IServiceRemotingClientFactory remotingClientFactory, Uri serviceUri, ActorId actorId, string listenerName, OperationRetrySettings retrySettings);
    [CompilerGeneratedAttribute]
public sealed virtual ActorId get_ActorId();
    internal Task SubscribeAsync(int eventInterfaceId, Guid subscriberId);
    internal Task UnsubscribeAsync(int eventInterfaceId, Guid subscriberId);
    internal Task`1<Byte[]> InvokeAsync(ActorMessageHeaders headers, Byte[] requestMsgBody, CancellationToken cancellationToken);
}
public interface Microsoft.ServiceFabric.Actors.Remoting.V1.Client.IActorServicePartitionClient {
    public ActorId ActorId { get; }
    public abstract virtual ActorId get_ActorId();
}
public class Microsoft.ServiceFabric.Actors.Remoting.V1.FabricTransport.Client.FabricTransportActorRemotingClientFactory : FabricTransportServiceRemotingClientFactory {
    public FabricTransportActorRemotingClientFactory(IServiceRemotingCallbackClient callbackClient);
    public FabricTransportActorRemotingClientFactory(FabricTransportRemotingSettings fabricTransportRemotingSettings, IServiceRemotingCallbackClient callbackClient, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, string traceId);
    private static IEnumerable`1<IExceptionHandler> GetExceptionHandlers(IEnumerable`1<IExceptionHandler> exceptionHandlers);
}
public class Microsoft.ServiceFabric.Actors.Remoting.V1.FabricTransport.Runtime.FabricTransportActorServiceRemotingListener : FabricTransportServiceRemotingListener {
    public FabricTransportActorServiceRemotingListener(ActorService actorService, FabricTransportRemotingListenerSettings listenerSettings);
    public FabricTransportActorServiceRemotingListener(ServiceContext serviceContext, IServiceRemotingMessageHandler messageHandler, FabricTransportRemotingListenerSettings listenerSettings);
    private static ServiceContext GetContext(ActorService actorService);
    private static FabricTransportRemotingListenerSettings SetEndPointResourceName(FabricTransportRemotingListenerSettings listenerSettings, ActorService actorService);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V1.Runtime.ActorMethodDispatcherMap : object {
    private IDictionary`2<int, ActorMethodDispatcherBase> map;
    public ActorMethodDispatcherMap(ActorTypeInformation actorTypeInformation);
    public ActorMethodDispatcherBase GetDispatcher(int interfaceId, int methodId);
}
public class Microsoft.ServiceFabric.Actors.Remoting.V1.Runtime.ActorServiceRemotingDispatcher : ServiceRemotingDispatcher {
    private ActorService actorService;
    private ServiceRemotingCancellationHelper cancellationHelper;
    public ActorServiceRemotingDispatcher(ActorService actorService);
    public virtual Task`1<Byte[]> RequestResponseAsync(IServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBodyBytes);
    private static ServiceContext GetContext(ActorService actorService);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Remoting.V1.Runtime.ActorServiceRemotingDispatcher/<HandleSubscriptionRequestsAsync>d__5")]
private Task`1<Byte[]> HandleSubscriptionRequestsAsync(IServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, Byte[] requestMsgBodyBytes);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Remoting.V1.Runtime.ActorServiceRemotingDispatcher/<HandleActorMethodDispatchAsync>d__6")]
private Task`1<Byte[]> HandleActorMethodDispatchAsync(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestMsgBodyBytes);
    private Task`1<Byte[]> OnDispatch(ActorMessageHeaders actorMessageHeaders, Byte[] requestBodyBytes, CancellationToken cancellationToken);
}
public class Microsoft.ServiceFabric.Actors.Remoting.V2.ActorRemotingDataContractSerializationProvider : ServiceRemotingDataContractSerializationProvider {
    public ActorRemotingDataContractSerializationProvider(IBufferPoolManager bodyBufferPoolManager);
    protected internal virtual DataContractSerializer CreateRemotingRequestMessageBodyDataContractSerializer(Type remotingRequestType, IEnumerable`1<Type> knownTypes);
    protected internal virtual DataContractSerializer CreateRemotingResponseMessageBodyDataContractSerializer(Type remotingResponseType, IEnumerable`1<Type> knownTypes);
}
public class Microsoft.ServiceFabric.Actors.Remoting.V2.ActorRemotingDispatchHeaders : ServiceRemotingDispatchHeaders {
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActorInterfaceName>k__BackingField;
    public ActorId ActorId { get; public set; }
    public string CallContext { get; public set; }
    public string ActorInterfaceName { get; public set; }
    [CompilerGeneratedAttribute]
public ActorId get_ActorId();
    [CompilerGeneratedAttribute]
public void set_ActorId(ActorId value);
    [CompilerGeneratedAttribute]
public string get_CallContext();
    [CompilerGeneratedAttribute]
public void set_CallContext(string value);
    [CompilerGeneratedAttribute]
public string get_ActorInterfaceName();
    [CompilerGeneratedAttribute]
public void set_ActorInterfaceName(string value);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.ActorRemotingMessageHeaders : object {
    [CompilerGeneratedAttribute]
private int <MethodId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InterfaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallContext>k__BackingField;
    [DataMemberAttribute]
private Dictionary`2<string, Byte[]> headers;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [DataMemberAttribute]
public int MethodId { get; public set; }
    [DataMemberAttribute]
public int InterfaceId { get; public set; }
    [DataMemberAttribute]
public string InvocationId { get; public set; }
    [DataMemberAttribute]
public ActorId ActorId { get; public set; }
    [DataMemberAttribute]
public string CallContext { get; public set; }
    [DataMemberAttribute]
public string MethodName { get; public set; }
    [DataMemberAttribute]
public Guid RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_MethodId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MethodId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_InterfaceId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InterfaceId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InvocationId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InvocationId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ActorId get_ActorId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActorId(ActorId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CallContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CallContext(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_RequestId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestId(Guid value);
    public sealed virtual void AddHeader(string headerName, Byte[] headerValue);
    public sealed virtual bool TryGetHeaderValue(string headerName, Byte[]& headerValue);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.ActorRemotingMessageHeaderSerializer : ServiceRemotingMessageHeaderSerializer {
    public ActorRemotingMessageHeaderSerializer(int headerBufferSize, int headerBufferCount);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.ActorRemotingSerializationManager : ServiceRemotingMessageSerializersManager {
    public ActorRemotingSerializationManager(IServiceRemotingMessageSerializationProvider serializationProvider, IServiceRemotingMessageHeaderSerializer headerSerializer, bool useWrappedMessage);
    internal virtual CacheEntry CreateSerializers(int interfaceId);
    internal virtual InterfaceDetails GetInterfaceDetails(int interfaceId);
    private static IServiceRemotingMessageSerializationProvider GetSerializationProvider(IServiceRemotingMessageSerializationProvider serializationProvider, bool useWrappedMessage);
}
public class Microsoft.ServiceFabric.Actors.Remoting.V2.ActorRemotingWrappingDataContractSerializationProvider : WrappingServiceRemotingDataContractSerializationProvider {
    private static IEnumerable`1<Type> DefaultKnownTypes;
    public ActorRemotingWrappingDataContractSerializationProvider(IBufferPoolManager bodyBufferPoolManager);
    private static ActorRemotingWrappingDataContractSerializationProvider();
    protected virtual DataContractSerializer CreateRemotingRequestMessageBodyDataContractSerializer(Type remotingRequestType, IEnumerable`1<Type> knownTypes);
    protected virtual DataContractSerializer CreateRemotingResponseMessageBodyDataContractSerializer(Type remotingResponseType, IEnumerable`1<Type> knownTypes);
    private static IEnumerable`1<Type> AddDefaultKnownTypes(IEnumerable`1<Type> knownTypes);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.BasicDataContractActorHeaderSerializer : BasicDataContractHeaderSerializer {
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Builder.ActorCodeBuilder : CodeBuilder {
    internal static InterfaceDetailsStore InterfaceDetailsStore;
    private static ICodeBuilder Instance;
    private static object BuildLock;
    private ICodeBuilder eventCodeBuilder;
    private MethodBodyTypesBuilder methodBodyTypesBuilder;
    private MethodDispatcherBuilder`1<ActorMethodDispatcherBase> methodDispatcherBuilder;
    private ActorProxyGeneratorBuilder proxyGeneratorBuilder;
    private static ActorCodeBuilder();
    public static ActorProxyGenerator GetOrCreateProxyGenerator(Type actorInterfaceType);
    public static ActorMethodDispatcherBase GetOrCreateMethodDispatcher(Type actorInterfaceType);
    public static ActorEventProxyGenerator GetOrCreateEventProxyGenerator(Type actorEventInterfaceType);
    internal static bool TryGetKnownTypes(int interfaceId, InterfaceDetails& interfaceDetails);
    internal static bool TryGetKnownTypes(string interfaceName, InterfaceDetails& interfaceDetails);
    protected virtual MethodDispatcherBuildResult BuildMethodDispatcher(Type interfaceType);
    protected virtual MethodBodyTypesBuildResult BuildMethodBodyTypes(Type interfaceType);
    protected virtual ProxyGeneratorBuildResult BuildProxyGenerator(Type interfaceType);
    [CompilerGeneratedAttribute]
private MethodDispatcherBase <BuildProxyGenerator>b__15_0(Type t);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Builder.ActorEventProxyGenerator : ProxyGenerator {
    private IProxyActivator proxyActivator;
    private ActorEventProxyGeneratorWith actorV1EventProxyGeneratorW;
    public ActorEventProxyGenerator(Type proxyInterfaceType, IProxyActivator proxyActivator);
    public ActorEventProxy CreateActorEventProxy();
    internal void InitializeV1ProxyGenerator(ActorEventProxyGeneratorWith actorEventProxyGeneratorWith);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Builder.ActorEventProxyGeneratorBuilder : ProxyGeneratorBuilder`2<ActorEventProxyGenerator, ActorEventProxy> {
    private MethodInfo invokeMethodInfoV1;
    private ActorEventProxyGeneratorBuilder proxyGeneratorBuilderV1;
    public ActorEventProxyGeneratorBuilder(ICodeBuilder codeBuilder);
    public ProxyGeneratorBuildResult Build(Type proxyInterfaceType, IEnumerable`1<InterfaceDescription> interfaceDescriptions);
    protected virtual void AddInterfaceImplementations(TypeBuilder classBuilder, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap);
    protected virtual ActorEventProxyGenerator CreateProxyGenerator(Type proxyInterfaceType, Type proxyActivatorType);
    private void AddVoidMethodImplementationV1(ILGenerator ilGen, int interfaceIdV1, MethodDescription methodDescription, LocalBuilder requestBody);
    [CompilerGeneratedAttribute]
private MethodBodyTypesBuildResult <Build>b__3_1(InterfaceDescription d);
}
public abstract class Microsoft.ServiceFabric.Actors.Remoting.V2.Builder.ActorMethodDispatcherBase : MethodDispatcherBase {
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Builder.ActorProxyGenerator : ProxyGenerator {
    private IProxyActivator proxyActivator;
    public ActorProxyGenerator(Type proxyInterfaceType, IProxyActivator proxyActivator);
    public ActorProxy CreateActorProxy(ActorServicePartitionClient remotingPartitionClient, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Builder.ActorProxyGeneratorBuilder : ProxyGeneratorBuilder`2<ActorProxyGenerator, ActorProxy> {
    public ActorProxyGeneratorBuilder(ICodeBuilder codeBuilder);
    protected virtual ActorProxyGenerator CreateProxyGenerator(Type proxyInterfaceType, Type proxyActivatorType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Client.ActorEventSubscriberManager : object {
    public static ActorEventSubscriberManager Instance;
    private ConcurrentDictionary`2<Subscriber, SubscriptionInfo> eventKeyToInfoMap;
    private ConcurrentDictionary`2<Guid, SubscriptionInfo> subscriptionIdToInfoMap;
    private ConcurrentDictionary`2<int, ActorMethodDispatcherBase> eventIdToDispatchersMap;
    private static ActorEventSubscriberManager();
    public void RegisterEventDispatchers(IEnumerable`1<ActorMethodDispatcherBase> eventDispatchers);
    public sealed virtual void HandleOneWayMessage(IServiceRemotingRequestMessage requestMessage);
    public SubscriptionInfo RegisterSubscriber(ActorId actorId, Type eventInterfaceType, object instance);
    public bool TryUnregisterSubscriber(ActorId actorId, Type eventInterfaceType, object instance, SubscriptionInfo& info);
    private int GetAndEnsureEventId(Type eventInterfaceType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Client.ActorProxyFactory : object {
    private object thisLock;
    private OperationRetrySettings retrySettings;
    private Func`2<IServiceRemotingCallbackMessageHandler, IServiceRemotingClientFactory> createServiceRemotingClientFactory;
    private IServiceRemotingClientFactory modreq(System.Runtime.CompilerServices.IsVolatile) remotingClientFactory;
    public ActorProxyFactory(Func`2<IServiceRemotingCallbackMessageHandler, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings);
    public sealed virtual TActorInterface CreateActorProxy(ActorId actorId, string applicationName, string serviceName, string listenerName);
    public sealed virtual TActorInterface CreateActorProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public sealed virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, ActorId actorId, string listenerName);
    public void Dispose();
    public sealed virtual TServiceInterface CreateActorServiceProxy(Uri serviceUri, long partitionKey, string listenerName);
    internal object CreateActorProxy(Type actorInterfaceType, Uri serviceUri, ActorId actorId, string listenerName);
    private IServiceRemotingClientFactory GetOrCreateServiceRemotingClientFactory(Type actorInterfaceType);
    private IServiceRemotingClientFactory CreateServiceRemotingClientFactory(Type actorInterfaceType);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Client.ActorServicePartitionClient : ServiceRemotingPartitionClient {
    private IServiceRemotingMessageBodyFactory messageBodyFactory;
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    public ActorId ActorId { get; }
    public ActorServicePartitionClient(IServiceRemotingClientFactory remotingClientFactory, Uri serviceUri, ActorId actorId, string listenerName, OperationRetrySettings retrySettings);
    [CompilerGeneratedAttribute]
public sealed virtual ActorId get_ActorId();
    internal Task SubscribeAsync(int eventInterfaceId, Guid subscriberId);
    internal Task UnsubscribeAsync(int eventInterfaceId, Guid subscriberId);
}
public interface Microsoft.ServiceFabric.Actors.Remoting.V2.Client.IActorServicePartitionClient {
    public ActorId ActorId { get; }
    public abstract virtual ActorId get_ActorId();
}
public class Microsoft.ServiceFabric.Actors.Remoting.V2.FabricTransport.Client.FabricTransportActorRemotingClientFactory : FabricTransportServiceRemotingClientFactory {
    public FabricTransportActorRemotingClientFactory(IServiceRemotingCallbackMessageHandler callbackMessageHandler);
    public FabricTransportActorRemotingClientFactory(FabricTransportRemotingSettings fabricTransportRemotingSettings, IServiceRemotingCallbackMessageHandler callbackMessageHandler, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, string traceId, IServiceRemotingMessageSerializationProvider serializationProvider, IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    private static IEnumerable`1<IExceptionConvertor> GetExceptionConvertors(IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    private static IEnumerable`1<IExceptionHandler> GetExceptionHandlers(IEnumerable`1<IExceptionHandler> exceptionHandlers);
    private static ActorRemotingSerializationManager IntializeSerializationManager(IServiceRemotingMessageSerializationProvider serializationProvider, FabricTransportRemotingSettings settings);
}
public class Microsoft.ServiceFabric.Actors.Remoting.V2.FabricTransport.Runtime.FabricTransportActorServiceRemotingListener : FabricTransportServiceRemotingListener {
    public FabricTransportActorServiceRemotingListener(ActorService actorService, FabricTransportRemotingListenerSettings listenerSettings, IEnumerable`1<IExceptionConvertor> exceptionConvertors, Func`2<RequestForwarderContext, IRequestForwarder> requestForwarderFactory);
    public FabricTransportActorServiceRemotingListener(ActorService actorService, IServiceRemotingMessageSerializationProvider serializationProvider, FabricTransportRemotingListenerSettings listenerSettings, IEnumerable`1<IExceptionConvertor> exceptionConvertors, Func`2<RequestForwarderContext, IRequestForwarder> requestForwarderFactory);
    [ObsoleteAttribute("Deprecated, use FabricTransportActorServiceRemotingListener(ActorService, IServiceRemotingMessageHandler, FabricTransportRemotingListenerSettings, IServiceRemotingMessageSerializationProvider)")]
public FabricTransportActorServiceRemotingListener(ServiceContext serviceContext, IServiceRemotingMessageHandler messageHandler, FabricTransportRemotingListenerSettings listenerSettings, IServiceRemotingMessageSerializationProvider serializationProvider);
    public FabricTransportActorServiceRemotingListener(ActorService actorService, IServiceRemotingMessageHandler messageHandler, FabricTransportRemotingListenerSettings listenerSettings, IServiceRemotingMessageSerializationProvider serializationProvider, IEnumerable`1<IExceptionConvertor> exceptionConvertors, Func`2<RequestForwarderContext, IRequestForwarder> requestForwarderFactory);
    private static IServiceRemotingMessageHandler OverrideMessageHandlerIfRequired(ActorService actorService, IServiceRemotingMessageHandler messageHandler, Func`2<RequestForwarderContext, IRequestForwarder> requestForwarderFactory);
    private static IEnumerable`1<IExceptionConvertor> GetExceptionConvertors(IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    private static ActorRemotingSerializationManager InitializeSerializerManager(FabricTransportRemotingListenerSettings listenerSettings, IServiceRemotingMessageSerializationProvider serializationProvider);
    private static ServiceContext GetContext(ActorService actorService);
    private static FabricTransportRemotingListenerSettings SetEndPointResourceName(FabricTransportRemotingListenerSettings listenerSettings, ActorService actorService);
    private static ActorServiceRemotingDispatcher CreateActorRemotingDispatcher(ActorService actorService, FabricTransportRemotingListenerSettings listenerSettings);
}
public interface Microsoft.ServiceFabric.Actors.Remoting.V2.IActorRemotingMessageHeaders {
    public ActorId ActorId { get; public set; }
    public string CallContext { get; public set; }
    public abstract virtual ActorId get_ActorId();
    public abstract virtual void set_ActorId(ActorId value);
    public abstract virtual string get_CallContext();
    public abstract virtual void set_CallContext(string value);
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Runtime.ActorEventSubscription : object {
    public static string InterfaceName;
    public static string SubscribeMethodName;
    public static string UnSubscribeMethodName;
    public static int InterfaceId;
    public static int SubscribeMethodId;
    public static int UnSubscribeMethodId;
    private static ActorEventSubscription();
}
internal class Microsoft.ServiceFabric.Actors.Remoting.V2.Runtime.ActorMethodDispatcherMap : object {
    private IDictionary`2<int, ActorMethodDispatcherBase> map;
    public ActorMethodDispatcherMap(ActorTypeInformation actorTypeInformation);
    public ActorMethodDispatcherBase GetDispatcher(int interfaceId, int methodId);
}
public class Microsoft.ServiceFabric.Actors.Remoting.V2.Runtime.ActorServiceRemotingDispatcher : ServiceRemotingMessageDispatcher {
    private static string TraceType;
    private ActorService actorService;
    private ServiceRemotingCancellationHelper cancellationHelper;
    public ActorServiceRemotingDispatcher(ActorService actorService, IServiceRemotingMessageBodyFactory serviceRemotingRequestMessageBodyFactory);
    private static ActorServiceRemotingDispatcher();
    public virtual Task`1<IServiceRemotingResponseMessage> HandleRequestResponseAsync(IServiceRemotingRequestContext requestContext, IServiceRemotingRequestMessage requestMessage);
    public Task`1<IServiceRemotingResponseMessageBody> HandleRequestResponseAsync(ActorRemotingDispatchHeaders actorDispatchHeaders, IServiceRemotingRequestMessageBody requestBody, CancellationToken cancellationToken);
    private static ServiceContext GetContext(ActorService actorService);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Remoting.V2.Runtime.ActorServiceRemotingDispatcher/<HandleActorMethodDispatchAsync>d__7")]
private Task`1<IServiceRemotingResponseMessageBody> HandleActorMethodDispatchAsync(IActorRemotingMessageHeaders actorMessageHeaders, IServiceRemotingRequestMessageBody msgBody, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Remoting.V2.Runtime.ActorServiceRemotingDispatcher/<HandleActorMethodDispatchAsync>d__8")]
private Task`1<IServiceRemotingResponseMessage> HandleActorMethodDispatchAsync(IActorRemotingMessageHeaders messageHeaders, IServiceRemotingRequestMessageBody msgBody);
    private Task`1<IServiceRemotingResponseMessageBody> OnDispatch(IActorRemotingMessageHeaders actorMessageHeaders, IServiceRemotingRequestMessageBody requestBody, CancellationToken cancellationToken);
    private IActorRemotingMessageHeaders CreateActorHeader(ActorRemotingDispatchHeaders actorDispatchHeaders);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Remoting.V2.Runtime.ActorServiceRemotingDispatcher/<HandleSubscriptionRequestsAsync>d__11")]
private Task`1<IServiceRemotingResponseMessage> HandleSubscriptionRequestsAsync(IServiceRemotingRequestContext requestContext, IServiceRemotingRequestMessageHeader messageHeaders, IServiceRemotingRequestMessageBody requestMsgBody);
}
public abstract class Microsoft.ServiceFabric.Actors.Runtime.Actor : ActorBase {
    private IActorStateManager stateManager;
    public IActorStateManager StateManager { get; }
    protected Actor(ActorService actorService, ActorId actorId);
    public IActorStateManager get_StateManager();
    internal virtual Task OnResetStateAsyncInternal();
    internal virtual Task OnSaveStateAsyncInternal();
    internal virtual Task OnPostActivateAsync();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.Actor/<OnDeactivateInternalAsync>d__7")]
internal virtual Task OnDeactivateInternalAsync();
    protected Task SaveStateAsync();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.Actor/<DoSaveStateAsync>d__9")]
private Task DoSaveStateAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorActivator : object {
    private Func`3<ActorService, ActorId, ActorBase> factory;
    public ActorActivator(Func`3<ActorService, ActorId, ActorBase> factory);
    private sealed virtual override ActorBase Microsoft.ServiceFabric.Actors.Runtime.IActorActivator.Activate(ActorService actorService, ActorId actorId);
}
public abstract class Microsoft.ServiceFabric.Actors.Runtime.ActorBase : object {
    private static string TraceType;
    private IActorManager actorManager;
    private ActorId actorId;
    private DiagnosticsManagerActorContext diagnosticsContext;
    private string traceId;
    private List`1<IActorTimer> timers;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) markedForDeletion;
    [CompilerGeneratedAttribute]
private IdleObjectGcHandle <GcHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ActorConcurrencyLock <ConcurrencyLock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDummy>k__BackingField;
    public ActorId Id { get; }
    public string ApplicationName { get; }
    public Uri ServiceUri { get; }
    public ActorService ActorService { get; }
    internal IdleObjectGcHandle GcHandler { get; private set; }
    internal ActorConcurrencyLock ConcurrencyLock { get; private set; }
    internal bool IsDirty { get; internal set; }
    internal bool IsInitialized { get; internal set; }
    internal DiagnosticsManagerActorContext DiagnosticsContext { get; }
    internal bool MarkedForDeletion { get; internal set; }
    internal bool IsDummy { get; internal set; }
    internal IActorManager Manager { get; }
    internal ActorBase(ActorService actorService, ActorId actorId);
    public ActorId get_Id();
    public string get_ApplicationName();
    public Uri get_ServiceUri();
    public ActorService get_ActorService();
    [CompilerGeneratedAttribute]
internal IdleObjectGcHandle get_GcHandler();
    [CompilerGeneratedAttribute]
private void set_GcHandler(IdleObjectGcHandle value);
    [CompilerGeneratedAttribute]
internal ActorConcurrencyLock get_ConcurrencyLock();
    [CompilerGeneratedAttribute]
private void set_ConcurrencyLock(ActorConcurrencyLock value);
    [CompilerGeneratedAttribute]
internal bool get_IsDirty();
    [CompilerGeneratedAttribute]
internal void set_IsDirty(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
internal void set_IsInitialized(bool value);
    internal DiagnosticsManagerActorContext get_DiagnosticsContext();
    internal bool get_MarkedForDeletion();
    internal void set_MarkedForDeletion(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsDummy();
    [CompilerGeneratedAttribute]
internal void set_IsDummy(bool value);
    internal IActorManager get_Manager();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorBase/<OnActivateInternalAsync>d__43")]
internal Task OnActivateInternalAsync();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorBase/<OnDeactivateInternalAsync>d__44")]
internal virtual Task OnDeactivateInternalAsync();
    internal void OnInvokeFailedInternal();
    internal Task ResetStateAsyncInternal();
    internal Task SaveStateAsyncInternal();
    internal Task OnPreActorMethodAsyncInternal(ActorMethodContext actorMethodContext);
    internal Task OnPostActorMethodAsyncInternal(ActorMethodContext actorMethodContext);
    internal abstract virtual Task OnResetStateAsyncInternal();
    internal abstract virtual Task OnSaveStateAsyncInternal();
    internal abstract virtual Task OnPostActivateAsync();
    protected virtual Task OnActivateAsync();
    protected virtual Task OnDeactivateAsync();
    protected virtual Task OnPreActorMethodAsync(ActorMethodContext actorMethodContext);
    protected virtual Task OnPostActorMethodAsync(ActorMethodContext actorMethodContext);
    protected void UnregisterTimer(IActorTimer timer);
    protected TEvent GetEvent();
    protected IActorReminder GetReminder(string reminderName);
    protected Task UnregisterReminderAsync(IActorReminder reminder);
    protected IActorTimer RegisterTimer(Func`2<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period);
    protected Task`1<IActorReminder> RegisterReminderAsync(string reminderName, Byte[] state, TimeSpan dueTime, TimeSpan period);
    private void CheckIfReminderOperationIsPossible(string reminderName);
}
public enum Microsoft.ServiceFabric.Actors.Runtime.ActorCallType : Enum {
    public int value__;
    public static ActorCallType ActorInterfaceMethod;
    public static ActorCallType TimerMethod;
    public static ActorCallType ReminderMethod;
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencyLock : object {
    private SemaphoreSlim turnLock;
    private SemaphoreSlim reentrantLock;
    private string initialCallContext;
    private ActorReentrancyMode reentrancyMode;
    private TimeSpan turnLockTimeout;
    private Random turnLockTimeoutRandomizer;
    private ActorBase owner;
    private int turnLockWaitMaxRandomIntervalMillis;
    private int currentCallCount;
    private string currentCallContext;
    internal string Test_CurrentContext { get; }
    internal int Test_CurrentCount { get; }
    public ActorConcurrencyLock(ActorBase owner, ActorConcurrencySettings actorConcurrencySettings);
    internal string get_Test_CurrentContext();
    internal int get_Test_CurrentCount();
    public Task Acquire(string incomingCallContext, ActorDirtyStateHandler handler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencyLock/<Acquire>d__17")]
public Task Acquire(string incomingCallContext, ActorDirtyStateHandler handler, ActorReentrancyMode actorReentrancyMode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencyLock/<ReleaseContext>d__18")]
public Task ReleaseContext(string callContext);
    private static Random GetRandomizer(TimeSpan timeout, Int32& turnLockWaitMaxRandomIntervalMillis);
    private TimeSpan GetTurnLockWaitTimeout();
}
public class Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencySettings : object {
    private ActorReentrancyMode reentrancyMode;
    private TimeSpan lockTimeout;
    public ActorReentrancyMode ReentrancyMode { get; public set; }
    public TimeSpan LockTimeout { get; public set; }
    internal ActorConcurrencySettings(ActorConcurrencySettings other);
    public ActorReentrancyMode get_ReentrancyMode();
    public void set_ReentrancyMode(ActorReentrancyMode value);
    public TimeSpan get_LockTimeout();
    public void set_LockTimeout(TimeSpan value);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorEventManager : object {
    private IDictionary`2<InterfaceId, Type> eventIdToEventTypeMap;
    private ConcurrentDictionary`2<ActorId, ConcurrentDictionary`2<Type, ActorEventProxy>> actorIdToEventProxyMap;
    internal ActorEventManager(ActorTypeInformation actorTypeInformation);
    public sealed virtual Task SubscribeAsync(ActorId actorId, int eventInterfaceId, IActorEventSubscriberProxy subscriber);
    public sealed virtual ActorEventProxy GetActorEventProxy(ActorId actorId, Type eventType);
    public sealed virtual Task UnsubscribeAsync(ActorId actorId, int eventInterfaceId, Guid subscriberId);
    public sealed virtual Task ClearAllSubscriptions(ActorId actorId);
}
public abstract class Microsoft.ServiceFabric.Actors.Runtime.ActorEventProxy : ProxyBase {
    private ConcurrentDictionary`2<Guid, IActorEventSubscriberProxy> subscriberProxiesV2;
    private ConcurrentDictionary`2<Guid, IActorEventSubscriberProxy> subscriberProxiesV1;
    private ActorEventProxyGeneratorWith proxyGeneratorWith;
    internal void AddSubscriber(IActorEventSubscriberProxy subscriber);
    internal void RemoveSubscriber(Guid subscriberId);
    internal virtual Task`1<IServiceRemotingResponseMessage> InvokeAsyncImplV2(int interfaceId, int methodId, string methodName, IServiceRemotingRequestMessageBody requestMsgBodyValue, CancellationToken cancellationToken);
    internal virtual void InvokeImplV2(int interfaceId, int methodId, IServiceRemotingRequestMessageBody requestMsgBodyValue);
    internal void Initialize(ActorEventProxyGeneratorWith actorEventProxyGeneratorWith);
    internal virtual DataContractSerializer GetRequestMessageBodySerializer(int interfaceId);
    internal virtual DataContractSerializer GetResponseMessageBodySerializer(int interfaceId);
    internal virtual object GetResponseMessageBodyValue(object responseMessageBody);
    internal virtual object CreateRequestMessageBody(object requestMessageBodyValue);
    internal virtual Task`1<Byte[]> InvokeAsync(int interfaceId, int methodId, Byte[] requestMsgBodyBytes, CancellationToken cancellationToken);
    internal virtual void Invoke(int interfaceId, int methodId, Byte[] requestMsgBodyBytes);
    protected virtual IServiceRemotingRequestMessageBody CreateRequestMessageBodyV2(string interfaceName, string methodName, int parameterCount, object wrappedRequest);
    private static void SendTo(IActorEventSubscriberProxy subscriberProxy, int eventInterfaceId, int eventMethodId, IServiceRemotingRequestMessageBody messageBody);
    private static void SendTo(IActorEventSubscriberProxy subscriberProxy, int eventInterfaceId, int eventMethodId, Byte[] eventMsgBytes);
    private void SendToSubscribers(int eventInterfaceId, int eventMethodId, Byte[] eventMsgBytes);
    private void SendToSubscribers(int eventInterfaceId, int eventMethodId, IServiceRemotingRequestMessageBody messageBody);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorEventSubscriberProxy : object {
    private IServiceRemotingCallbackClient callback;
    private IServiceRemotingCallbackClient callbackV2;
    private Guid id;
    private RemotingListenerVersion remotingListener;
    private Guid Microsoft.ServiceFabric.Actors.Runtime.IActorEventSubscriberProxy.Id { get; }
    public RemotingListenerVersion RemotingListener { get; }
    public ActorEventSubscriberProxy(Guid id, IServiceRemotingCallbackClient callback);
    public ActorEventSubscriberProxy(Guid id, IServiceRemotingCallbackClient callback);
    private sealed virtual override Guid Microsoft.ServiceFabric.Actors.Runtime.IActorEventSubscriberProxy.get_Id();
    public sealed virtual RemotingListenerVersion get_RemotingListener();
    private sealed virtual override void Microsoft.ServiceFabric.Actors.Runtime.IActorEventSubscriberProxy.RaiseEvent(int eventInterfaceId, int eventMethodId, Byte[] eventMsgBody);
    public sealed virtual void RaiseEvent(int eventInterfaceId, int methodId, IServiceRemotingRequestMessageBody eventMsgBody);
    public sealed virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
}
public class Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings : object {
    private long scanIntervalInSeconds;
    private long idleTimeoutInSeconds;
    public long ScanIntervalInSeconds { get; }
    public long IdleTimeoutInSeconds { get; }
    public ActorGarbageCollectionSettings(long idleTimeoutInSeconds, long scanIntervalInSeconds);
    internal ActorGarbageCollectionSettings(ActorGarbageCollectionSettings settings);
    public long get_ScanIntervalInSeconds();
    public long get_IdleTimeoutInSeconds();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorManager : object {
    private static string TraceType;
    private static string ReceiveReminderMethodName;
    private string traceId;
    private ActorService actorService;
    private Random random;
    private ActorMethodContext reminderMethodContext;
    private ConcurrentDictionary`2<ActorId, ActorBase> activeActors;
    private ConcurrentDictionary`2<ActorId, ConcurrentDictionary`2<string, ActorReminder>> remindersByActorId;
    private DiagnosticsEventManager diagnosticsEventManager;
    private IActorEventManager eventManager;
    private IDiagnosticsManager diagnosticsManager;
    private bool isClosed;
    private Timer gcTimer;
    private Task loadRemindersTask;
    public ActorService ActorService { get; }
    public DiagnosticsEventManager DiagnosticsEventManager { get; }
    public bool IsClosed { get; }
    public bool HasRemindersLoaded { get; }
    public ActorEventSource TraceSource { get; }
    private IActorStateProvider StateProvider { get; }
    private IActorActivator ActorActivator { get; }
    internal ActorManager(ActorService actorService);
    public sealed virtual ActorService get_ActorService();
    public sealed virtual DiagnosticsEventManager get_DiagnosticsEventManager();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool get_HasRemindersLoaded();
    public sealed virtual ActorEventSource get_TraceSource();
    private IActorStateProvider get_StateProvider();
    private IActorActivator get_ActorActivator();
    public sealed virtual Task OpenAsync(IServicePartition partition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<CloseAsync>d__30")]
public sealed virtual Task CloseAsync(CancellationToken cancellationToken);
    public sealed virtual void Abort();
    public sealed virtual Task`1<Byte[]> InvokeAsync(ActorId actorId, int interfaceId, int methodId, string callContext, Byte[] requestMsgBody, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<DispatchToActorAsync>d__33`1")]
public sealed virtual Task`1<T> DispatchToActorAsync(ActorId actorId, ActorMethodContext actorMethodContext, bool createIfRequired, Func`3<ActorBase, CancellationToken, Task`1<T>> actorFunc, string callContext, bool timerCall, CancellationToken cancellationToken);
    public sealed virtual Task`1<IServiceRemotingResponseMessageBody> InvokeAsync(ActorId actorId, int interfaceId, int methodId, string callContext, IServiceRemotingRequestMessageBody requestMsgBody, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, CancellationToken cancellationToken);
    public sealed virtual Task SubscribeAsync(ActorId actorId, int eventInterfaceId, IActorEventSubscriberProxy subscriber);
    public sealed virtual Task UnsubscribeAsync(ActorId actorId, int eventInterfaceId, Guid subscriberId);
    public sealed virtual TEvent GetEvent(ActorId actorId);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<RegisterOrUpdateReminderAsync>d__38")]
public sealed virtual Task`1<IActorReminder> RegisterOrUpdateReminderAsync(ActorId actorId, string reminderName, Byte[] state, TimeSpan dueTime, TimeSpan period, bool saveState);
    public sealed virtual IActorReminder GetReminder(string reminderName, ActorId actorId);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<UnregisterReminderAsync>d__40")]
public sealed virtual Task UnregisterReminderAsync(string reminderName, ActorId actorId, bool removeFromStateProvider);
    public sealed virtual Task StartLoadingRemindersAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<FireReminderAsync>d__42")]
public sealed virtual Task FireReminderAsync(ActorReminder reminder);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<DeleteActorAsync>d__43")]
public sealed virtual Task DeleteActorAsync(string callContext, ActorId actorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<GetActorsFromStateProvider>d__44")]
public sealed virtual Task`1<PagedResult`1<ActorInformation>> GetActorsFromStateProvider(ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<GetRemindersFromStateProviderAsync>d__45")]
public sealed virtual Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> GetRemindersFromStateProviderAsync(ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    public sealed virtual string GetActorTraceId(ActorId actorId);
    internal ActorUseScope GetActor(ActorId actorId, bool createIfRequired, bool timerCall, bool createDummyActor);
    internal Task OnPreActivateAsync(ActorBase actor);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<OnPostActivateAsync>d__49")]
internal Task OnPostActivateAsync(ActorBase actor);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<HandleDirtyStateAsync>d__50")]
internal Task HandleDirtyStateAsync(ActorBase actor);
    internal ActorBase CreateDummyActor(ActorId actorId);
    internal Task OnPreInvokeAsync(ActorBase actor, ActorMethodContext actorMethodContext);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<OnPostInvokeAsync>d__53")]
internal Task OnPostInvokeAsync(ActorBase actor, ActorMethodContext actorMethodContext);
    internal bool Test_HasAnyReminders();
    internal bool Test_ReminderDictionaryHasEntry(ActorId actorId);
    private static bool ShouldInitialize(ActorBase actor);
    private static Task ResetStateAsync(ActorBase actor);
    private static Task SaveStateAsync(ActorBase actor);
    private Task`1<Byte[]> ActorMethodDispatch(ActorMethodDispatcherBase methodDispatcher, ActorBase actor, int interfaceId, int methodId, object requestBody, CancellationToken innerCancellationToken);
    private Task`1<IServiceRemotingResponseMessageBody> ActorMethodDispatch(ActorMethodDispatcherBase methodDispatcher, ActorBase actor, int interfaceId, int methodId, IServiceRemotingRequestMessageBody requestBody, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, CancellationToken innerCancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<DispatchToActorConcurrencyLockHeldAsync>d__61`1")]
private Task`1<T> DispatchToActorConcurrencyLockHeldAsync(ActorId actorId, ActorMethodContext actorMethodContext, ActorBase actor, Func`3<ActorBase, CancellationToken, Task`1<T>> actorFunc, string callContext, CancellationToken cancellationToken);
    private ActorUseScope GetExistingActor(ActorId actorId, bool timerUse);
    private ActorUseScope GetOrCreateActor(ActorId actorId, bool timerUse, bool createDummyActor);
    private ActorBase CreateActor(ActorId actorId, bool createDummyActor);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<InitializeAsync>d__65")]
private Task InitializeAsync(ActorBase actor);
    private void ArmGcTimer();
    private void RunGarbageCollection(object state);
    private Task DeactivateActorsAsync(IEnumerable`1<ActorBase> deactivatedActors);
    private Task OnPostDeactivateAsync(ActorBase actor);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<DeactivateActorAsync>d__70")]
private Task DeactivateActorAsync(ActorBase actor);
    private void ThrowIfClosed();
    private void ThrowIfMigrationInProgress();
    private void DisposeDiagnosticsManager();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<CleanupRemindersAsync>d__74")]
private Task CleanupRemindersAsync();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<LoadRemindersAsync>d__75")]
private Task LoadRemindersAsync(CancellationToken cancellationToken);
    private Task RegisterOrUpdateReminderAsync(ActorId actorId, IActorReminderState reminderState, bool saveState);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<RegisterOrUpdateReminderAsync>d__77")]
private Task RegisterOrUpdateReminderAsync(ActorReminder actorReminder, TimeSpan remainingDueTime, bool saveState);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<UpdateReminderLastCompletedTimeAsync>d__78")]
private Task UpdateReminderLastCompletedTimeAsync(ActorReminder reminder);
    private bool IsOneTimeReminder(IActorReminder reminder);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<UnregisterOneTimeReminderAsync>d__80")]
private Task UnregisterOneTimeReminderAsync(ActorReminder reminder);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<DeleteRemindersSafeAsync>d__81")]
private Task DeleteRemindersSafeAsync(ActorId actorId, List`1<string> remindersToDelete, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<<DispatchToActorAsync>b__33_0>d`1")]
[CompilerGeneratedAttribute]
private Task <DispatchToActorAsync>b__33_0(ActorBase innerActor);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManager/<<DeleteActorAsync>b__43_0>d")]
[CompilerGeneratedAttribute]
private Task <DeleteActorAsync>b__43_0(ActorBase innerActor);
    [CompilerGeneratedAttribute]
private ActorInformation <GetActorsFromStateProvider>b__44_0(ActorId x);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorManagerAdapter : object {
    [CompilerGeneratedAttribute]
private IActorManager <ActorManager>k__BackingField;
    internal IActorManager ActorManager { get; internal set; }
    [CompilerGeneratedAttribute]
internal IActorManager get_ActorManager();
    [CompilerGeneratedAttribute]
internal void set_ActorManager(IActorManager value);
    public Task OpenAsync(IServicePartition servicePartition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorManagerAdapter/<CloseAsync>d__5")]
public Task CloseAsync(CancellationToken cancellationToken);
    public void Abort();
}
public class Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext : ValueType {
    private string actorMethodName;
    private ActorCallType actorCallType;
    public string MethodName { get; }
    public ActorCallType CallType { get; }
    private ActorMethodContext(string methodName, ActorCallType callType);
    public string get_MethodName();
    public ActorCallType get_CallType();
    internal static ActorMethodContext CreateForActor(string methodName);
    internal static ActorMethodContext CreateForTimer(string methodName);
    internal static ActorMethodContext CreateForReminder(string methodName);
}
public enum Microsoft.ServiceFabric.Actors.Runtime.ActorReentrancyMode : Enum {
    public int value__;
    public static ActorReentrancyMode LogicalCallContext;
    public static ActorReentrancyMode Disallowed;
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorReminder : object {
    private static string TraceType;
    private TimeSpan minTimePeriod;
    private ActorId ownerActorId;
    private IActorManager actorManager;
    private string name;
    private TimeSpan dueTime;
    private TimeSpan period;
    private Byte[] state;
    private Timer timer;
    public string Name { get; }
    public Byte[] State { get; }
    public TimeSpan DueTime { get; }
    public TimeSpan Period { get; }
    internal ActorId OwnerActorId { get; }
    public ActorReminder(ActorId actorId, IActorManager actorManager, IActorReminder reminder);
    public ActorReminder(ActorId actorId, IActorManager actorManager, string reminderName, Byte[] reminderState, TimeSpan reminderDueTime, TimeSpan reminderPeriod);
    protected virtual override void Finalize();
    public sealed virtual string get_Name();
    public sealed virtual Byte[] get_State();
    public sealed virtual TimeSpan get_DueTime();
    public sealed virtual TimeSpan get_Period();
    internal ActorId get_OwnerActorId();
    public void Dispose();
    internal bool IsValid();
    internal void ArmTimer(TimeSpan newDueTime);
    internal void CancelTimer();
    private void Dispose(bool disposing);
    private void OnReminderCallback(object reminderState);
    private void ValidateDueTime(string argName, TimeSpan value);
    private void ValidatePeriod(string argName, TimeSpan value);
    [CompilerGeneratedAttribute]
private void <OnReminderCallback>b__27_0();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorReminderCollection : object {
    private ConcurrentDictionary`2<ActorId, IReadOnlyCollection`1<IActorReminderState>> reminderCollectionsByActorId;
    private IEnumerable`1<ActorId> System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.Keys { get; }
    private IEnumerable`1<IReadOnlyCollection`1<IActorReminderState>> System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.Values { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>>.Count { get; }
    private IReadOnlyCollection`1<IActorReminderState> System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.Item { get; }
    private sealed virtual override IEnumerable`1<ActorId> System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.get_Keys();
    private sealed virtual override IEnumerable`1<IReadOnlyCollection`1<IActorReminderState>> System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.get_Values();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>>.get_Count();
    private sealed virtual override IReadOnlyCollection`1<IActorReminderState> System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.get_Item(ActorId key);
    public void Add(ActorId actorId, IActorReminderState reminderState);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.ContainsKey(ActorId key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>.TryGetValue(ActorId key, IReadOnlyCollection`1& value);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<ActorId, IReadOnlyCollection`1<IActorReminderState>>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState>>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorReminderData : object {
    [CompilerGeneratedAttribute]
private ActorId <ActorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <State>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LogicalCreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [DataMemberAttribute]
internal ActorId ActorId { get; private set; }
    [DataMemberAttribute]
internal string Name { get; private set; }
    [DataMemberAttribute]
internal TimeSpan DueTime { get; private set; }
    [DataMemberAttribute]
internal TimeSpan Period { get; private set; }
    [DataMemberAttribute]
internal Byte[] State { get; private set; }
    [DataMemberAttribute]
internal TimeSpan LogicalCreationTime { get; private set; }
    [DataMemberAttribute]
internal bool IsReadOnly { get; private set; }
    public ActorReminderData(ActorId actorId, string name, TimeSpan dueTime, TimeSpan period, Byte[] state, TimeSpan logicalCreationTime);
    public ActorReminderData(ActorId actorId, IActorReminder reminder, TimeSpan logicalCreationTime);
    [CompilerGeneratedAttribute]
internal ActorId get_ActorId();
    [CompilerGeneratedAttribute]
private void set_ActorId(ActorId value);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_DueTime();
    [CompilerGeneratedAttribute]
private void set_DueTime(TimeSpan value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_Period();
    [CompilerGeneratedAttribute]
private void set_Period(TimeSpan value);
    [CompilerGeneratedAttribute]
internal Byte[] get_State();
    [CompilerGeneratedAttribute]
private void set_State(Byte[] value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_LogicalCreationTime();
    [CompilerGeneratedAttribute]
private void set_LogicalCreationTime(TimeSpan value);
    [CompilerGeneratedAttribute]
internal bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
    public long EstimateDataLength();
    public virtual string ToString();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorReminderDataSerializer : object {
    private static ushort DataVersionOne;
    private static ushort CurrentDataVersion;
    private static Encoding DataEncoding;
    private static ActorReminderDataSerializer();
    internal static Byte[] Serialize(ActorReminderData reminderData);
    internal static ActorReminderData Deserialize(Byte[] reminderDataBytes);
    private static int ComputeSizeInBytes(ActorReminderData reminderData);
    private static int ComputeActorIdSize(ActorId actorId);
    private static int ComputeStringSize(string str);
    private static int ComputeByteArraySize(Byte[] byteArr);
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Actors.Runtime.ActorReminderState : object {
    private static string TraceType;
    [DataMemberAttribute]
private ActorReminderData reminder;
    [DataMemberAttribute]
private TimeSpan nextDueTime;
    public TimeSpan RemainingDueTime { get; }
    public string Name { get; }
    public TimeSpan DueTime { get; }
    public TimeSpan Period { get; }
    public Byte[] State { get; }
    internal ActorReminderState(ActorReminderData reminder, TimeSpan currentLogicalTime, ReminderCompletedData reminderCompletedData);
    public sealed virtual TimeSpan get_RemainingDueTime();
    public sealed virtual string get_Name();
    public sealed virtual TimeSpan get_DueTime();
    public sealed virtual TimeSpan get_Period();
    public sealed virtual Byte[] get_State();
    private static TimeSpan ComputeRemainingTime(TimeSpan currentLogicalTime, TimeSpan createdOrLastCompletedTime, TimeSpan dueTimeOrPeriod);
}
public static class Microsoft.ServiceFabric.Actors.Runtime.ActorRuntime : object {
    private static string NodeName;
    private static ActorRuntime();
    public static Task RegisterActorAsync(TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorRuntime/<RegisterActorAsync>d__3`1")]
public static Task RegisterActorAsync(Func`3<StatefulServiceContext, ActorTypeInformation, ActorService> actorServiceFactory, TimeSpan timeout, CancellationToken cancellationToken);
}
public class Microsoft.ServiceFabric.Actors.Runtime.ActorService : StatefulServiceBase {
    private static string TraceType;
    private ActorTypeInformation actorTypeInformation;
    private IActorStateProvider stateProvider;
    private ActorServiceSettings settings;
    private IActorActivator actorActivator;
    private ActorManagerAdapter actorManagerAdapter;
    private Func`3<ActorBase, IActorStateProvider, IActorStateManager> stateManagerFactory;
    private ActorMethodDispatcherMap methodDispatcherMapV1;
    private ActorMethodFriendlyNameBuilder methodFriendlyNameBuilder;
    private ReplicaRole replicaRole;
    private ActorMethodDispatcherMap methodDispatcherMapV2;
    private IMigrationOrchestrator migrationOrchestrator;
    public ActorTypeInformation ActorTypeInformation { get; }
    public IActorStateProvider StateProvider { get; }
    public ActorServiceSettings Settings { get; }
    internal IActorActivator ActorActivator { get; }
    internal ActorMethodDispatcherMap MethodDispatcherMapV1 { get; internal set; }
    internal ActorMethodDispatcherMap MethodDispatcherMapV2 { get; internal set; }
    internal ActorMethodFriendlyNameBuilder MethodFriendlyNameBuilder { get; }
    internal IActorManager ActorManager { get; }
    internal bool AreActorCallsAllowed { get; }
    internal bool IsActorCallToBeForwarded { get; }
    internal IMigrationOrchestrator MigrationOrchestrator { get; }
    public ActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, Func`3<ActorService, ActorId, ActorBase> actorFactory, Func`3<ActorBase, IActorStateProvider, IActorStateManager> stateManagerFactory, IActorStateProvider stateProvider, ActorServiceSettings settings);
    internal ActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, MigrationSettings migrationSettings, Func`3<ActorService, ActorId, ActorBase> actorFactory, Func`3<ActorBase, IActorStateProvider, IActorStateManager> stateManagerFactory, IActorStateProvider stateProvider, ActorServiceSettings settings);
    internal ActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, IMigrationOrchestrator migrationOrchestrator, Func`3<ActorService, ActorId, ActorBase> actorFactory, Func`3<ActorBase, IActorStateProvider, IActorStateManager> stateManagerFactory, IActorStateProvider stateProvider, ActorServiceSettings settings);
    public ActorTypeInformation get_ActorTypeInformation();
    public IActorStateProvider get_StateProvider();
    public ActorServiceSettings get_Settings();
    internal IActorActivator get_ActorActivator();
    internal ActorMethodDispatcherMap get_MethodDispatcherMapV1();
    internal void set_MethodDispatcherMapV1(ActorMethodDispatcherMap value);
    internal ActorMethodDispatcherMap get_MethodDispatcherMapV2();
    internal void set_MethodDispatcherMapV2(ActorMethodDispatcherMap value);
    internal ActorMethodFriendlyNameBuilder get_MethodFriendlyNameBuilder();
    internal IActorManager get_ActorManager();
    internal bool get_AreActorCallsAllowed();
    internal bool get_IsActorCallToBeForwarded();
    internal IMigrationOrchestrator get_MigrationOrchestrator();
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task`1<PagedResult`1<ActorInformation>> Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken);
    private sealed virtual override Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> Microsoft.ServiceFabric.Actors.IActorService.GetRemindersAsync(ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorService/<StartRemindersIfNeededAsync>d__42")]
internal Task StartRemindersIfNeededAsync(bool actorCallsAllowed, CancellationToken cancellationToken);
    internal IActorStateManager CreateStateManager(ActorBase actor);
    internal void InitializeInternal(ActorMethodFriendlyNameBuilder methodNameBuilder);
    internal bool IsConfiguredForMigration();
    internal void ThrowIfActorCallsDisallowed();
    protected virtual IEnumerable`1<ServiceReplicaListener> CreateServiceReplicaListeners();
    protected void AddMigrationListener(IList`1<ServiceReplicaListener> serviceReplicaListeners);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorService/<RunAsync>d__49")]
protected virtual Task RunAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorService/<OnChangeRoleAsync>d__50")]
protected virtual Task OnChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorService/<OnCloseAsync>d__51")]
protected virtual Task OnCloseAsync(CancellationToken cancellationToken);
    protected virtual void OnAbort();
    private static IActorStateManager DefaultActorStateManagerFactory(ActorBase actorBase, IActorStateProvider actorStateProvider);
    private ActorBase DefaultActorFactory(ActorService actorService, ActorId actorId);
    [CompilerGeneratedAttribute]
private ICommunicationListener <AddMigrationListener>b__48_0(StatefulServiceContext _);
}
[AttributeUsageAttribute("4")]
public class Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    internal static ActorServiceAttribute Get(Type actorImplementationType);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorServiceFactory : object {
    private ActorTypeInformation actorTypeInformation;
    private ActorMethodFriendlyNameBuilder methodFriendlyNameBuilder;
    private Func`3<StatefulServiceContext, ActorTypeInformation, ActorService> actorServiceFactory;
    public ActorServiceFactory(ActorTypeInformation actorTypeInformation, ActorMethodFriendlyNameBuilder methodFriendlyNameBuilder, Func`3<StatefulServiceContext, ActorTypeInformation, ActorService> actorServiceFactory);
    public ActorService CreateActorService(StatefulServiceContext context);
}
public class Microsoft.ServiceFabric.Actors.Runtime.ActorServiceSettings : object {
    private ActorGarbageCollectionSettings actorGarbageCollectionSettings;
    private ActorConcurrencySettings actorConcurrencySettings;
    private ReminderSettings reminderSettings;
    public ActorGarbageCollectionSettings ActorGarbageCollectionSettings { get; public set; }
    public ActorConcurrencySettings ActorConcurrencySettings { get; public set; }
    public ReminderSettings ReminderSettings { get; public set; }
    public ActorGarbageCollectionSettings get_ActorGarbageCollectionSettings();
    public void set_ActorGarbageCollectionSettings(ActorGarbageCollectionSettings value);
    public ActorConcurrencySettings get_ActorConcurrencySettings();
    public void set_ActorConcurrencySettings(ActorConcurrencySettings value);
    public ReminderSettings get_ReminderSettings();
    public void set_ReminderSettings(ReminderSettings value);
    internal static ActorServiceSettings DeepCopyFromOrDefaultOnNull(ActorServiceSettings other);
}
public class Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange : object {
    private string stateName;
    private Type type;
    private object value;
    private StateChangeKind changeKind;
    public string StateName { get; }
    public Type Type { get; }
    public object Value { get; }
    public StateChangeKind ChangeKind { get; }
    public ActorStateChange(string stateName, Type type, object value, StateChangeKind changeKind);
    public string get_StateName();
    public Type get_Type();
    public object get_Value();
    public StateChangeKind get_ChangeKind();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager : object {
    private IActorStateProvider stateProvider;
    private Dictionary`2<string, StateMetadata> stateChangeTracker;
    private ActorBase actor;
    internal ActorStateManager(ActorBase actor, IActorStateProvider actorStateProvider);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<AddStateAsync>d__4`1")]
public sealed virtual Task AddStateAsync(string stateName, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<TryAddStateAsync>d__5`1")]
public sealed virtual Task`1<bool> TryAddStateAsync(string stateName, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<GetStateAsync>d__6`1")]
public sealed virtual Task`1<T> GetStateAsync(string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<TryGetStateAsync>d__7`1")]
public sealed virtual Task`1<ConditionalValue`1<T>> TryGetStateAsync(string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<SetStateAsync>d__8`1")]
public sealed virtual Task SetStateAsync(string stateName, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<RemoveStateAsync>d__9")]
public sealed virtual Task RemoveStateAsync(string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<TryRemoveStateAsync>d__10")]
public sealed virtual Task`1<bool> TryRemoveStateAsync(string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<ContainsStateAsync>d__11")]
public sealed virtual Task`1<bool> ContainsStateAsync(string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<GetOrAddStateAsync>d__12`1")]
public sealed virtual Task`1<T> GetOrAddStateAsync(string stateName, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<AddOrUpdateStateAsync>d__13`1")]
public sealed virtual Task`1<T> AddOrUpdateStateAsync(string stateName, T addValue, Func`3<string, T, T> updateValueFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<GetStateNamesAsync>d__14")]
public sealed virtual Task`1<IEnumerable`1<string>> GetStateNamesAsync(CancellationToken cancellationToken);
    public sealed virtual Task ClearCacheAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<SaveStateAsync>d__16")]
public sealed virtual Task SaveStateAsync(CancellationToken cancellationToken);
    private bool IsStateMarkedForRemove(string stateName);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateManager/<TryGetStateFromStateProviderAsync>d__18`1")]
private Task`1<ConditionalValue`1<T>> TryGetStateFromStateProviderAsync(string stateName, CancellationToken cancellationToken);
    private void ThrowIfClosed();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorStateProviderHelper : object {
    internal static string ActorPresenceStorageKeyPrefix;
    internal static string ReminderCompletedStorageKeyPrefix;
    private static long DefaultMaxPrimaryReplicationQueueSize;
    private static long DefaultMaxSecondaryReplicationQueueSize;
    private IActorStateProviderInternal owner;
    private bool CurrentReplicaRoleNotPrimary { get; }
    internal ActorStateProviderHelper(IActorStateProviderInternal owner);
    private bool get_CurrentReplicaRoleNotPrimary();
    internal static IActorStateProvider GetActorStateProviderOverride();
    internal static string CreateActorPresenceStorageKey(ActorId actorId);
    internal static DataContractSerializer CreateDataContractSerializer(Type actorStateType);
    internal static bool TryGetConfigSection(ICodePackageActivationContext activationContext, string configPackageName, string sectionName, ConfigurationSection& section);
    internal static TimeSpan GetTimeConfigInSecondsAsTimeSpan(ConfigurationSection section, string parameterName, TimeSpan defaultValue);
    internal static ReplicatorSettings GetActorReplicatorSettings(CodePackageActivationContext codePackage, Type actorImplType);
    internal static string CreateReminderCompletedStorageKey(ActorId actorId, string reminderName);
    internal static string CreateReminderCompletedStorageKeyPrefix(ActorId actorId);
    internal static ActorId GetActorIdFromPresenceStorageKey(string presenceStorageKey);
    internal static IActorStateProvider CreateDefaultStateProvider(ActorTypeInformation actorTypeInfo);
    internal Task ExecuteWithRetriesAsync(Func`1<Task> func, string functionNameTag, CancellationToken userCancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorStateProviderHelper/<ExecuteWithRetriesAsync>d__19`1")]
internal Task`1<TResult> ExecuteWithRetriesAsync(Func`1<Task`1<TResult>> func, string functionNameTag, CancellationToken userCancellationToken);
    internal Task`1<PagedResult`1<ActorId>> GetStoredActorIdsAsync(int itemsCount, ContinuationToken continuationToken, Func`1<IEnumerator`1<T>> getEnumeratorFunc, Func`2<T, string> getStorageKeyFunc, CancellationToken cancellationToken);
    internal bool GetContinuationPointByActorCount(long previousActorCount, IEnumerator`1<T> enumerator, CancellationToken cancellationToken);
    private bool GetContinuationPointByActorStorageKey(string lastSeenActorStorageKey, IEnumerator`1<T> enumerator, Func`2<T, string> getStorageKeyFunc, CancellationToken cancellationToken);
    private void EnsureSamePrimary(long roleChangeTracker);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorStateProviderSerializer : object {
    private ConcurrentDictionary`2<Type, DataContractSerializer> actorStateSerializerCache;
    internal Byte[] Serialize(Type stateType, T state);
    internal T Deserialize(Byte[] buffer);
}
internal abstract class Microsoft.ServiceFabric.Actors.Runtime.ActorStateProviderSettings : object {
    internal static string TransientErrorRetryDelayParameterName;
    internal static string OperationTimeoutParameterName;
    [CompilerGeneratedAttribute]
private TimeSpan <TransientErrorRetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <OperationTimeout>k__BackingField;
    public TimeSpan TransientErrorRetryDelay { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_TransientErrorRetryDelay();
    [CompilerGeneratedAttribute]
public void set_TransientErrorRetryDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_OperationTimeout();
    [CompilerGeneratedAttribute]
public void set_OperationTimeout(TimeSpan value);
    public virtual string ToString();
    protected virtual void LoadFromSection(ConfigurationSection section);
    protected void LoadFromSettings(ICodePackageActivationContext activationContext, string configPackageName, string sectionName);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorTimer : object {
    private ActorBase owner;
    private TimeSpan dueTime;
    private TimeSpan period;
    private object callbackState;
    private ActorMethodContext callbackMethodContext;
    private Timer timer;
    private Func`2<object, Task> asyncCallback;
    public TimeSpan DueTime { get; }
    public TimeSpan Period { get; }
    public ActorTimer(ActorBase owner, Func`2<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period);
    protected virtual override void Finalize();
    public sealed virtual TimeSpan get_DueTime();
    public sealed virtual TimeSpan get_Period();
    public sealed virtual void Dispose();
    private void OnTimerCallback(object state);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorTimer/<FireTimerAsync>d__15")]
private Task FireTimerAsync();
    private void CancelTimer();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ActorTimer/<DispatchTimerCallback>d__17")]
private Task`1<Byte[]> DispatchTimerCallback(ActorBase actor, CancellationToken cancellationToken);
    private void ArmTimer(TimeSpan timeSpan);
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Microsoft.ServiceFabric.Actors.Runtime.ActorTypeExtensions : object {
    [ExtensionAttribute]
public static Type[] GetActorInterfaces(Type type);
    [ExtensionAttribute]
public static Type[] GetActorEventInterfaces(Type type);
    [ExtensionAttribute]
public static bool IsActorInterface(Type actorInterfaceType);
    [ExtensionAttribute]
public static bool IsActor(Type actorType);
    [ExtensionAttribute]
public static bool IsRemindableActor(Type actorType);
    [ExtensionAttribute]
internal static Type GetNonActorParentType(Type type);
}
public class Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation : object {
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <InterfaceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <EventInterfaceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAbstract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemindable>k__BackingField;
    [CompilerGeneratedAttribute]
private StatePersistence <StatePersistence>k__BackingField;
    [CompilerGeneratedAttribute]
private RemotingListenerVersion <RemotingListenerVersion>k__BackingField;
    public Type ImplementationType { get; private set; }
    public IEnumerable`1<Type> InterfaceTypes { get; private set; }
    public IEnumerable`1<Type> EventInterfaceTypes { get; private set; }
    public string ServiceName { get; private set; }
    public bool IsAbstract { get; private set; }
    public bool IsRemindable { get; private set; }
    public StatePersistence StatePersistence { get; private set; }
    internal RemotingListenerVersion RemotingListenerVersion { get; private set; }
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
    [CompilerGeneratedAttribute]
private void set_ImplementationType(Type value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Type> get_InterfaceTypes();
    [CompilerGeneratedAttribute]
private void set_InterfaceTypes(IEnumerable`1<Type> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Type> get_EventInterfaceTypes();
    [CompilerGeneratedAttribute]
private void set_EventInterfaceTypes(IEnumerable`1<Type> value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAbstract();
    [CompilerGeneratedAttribute]
private void set_IsAbstract(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRemindable();
    [CompilerGeneratedAttribute]
private void set_IsRemindable(bool value);
    [CompilerGeneratedAttribute]
public StatePersistence get_StatePersistence();
    [CompilerGeneratedAttribute]
private void set_StatePersistence(StatePersistence value);
    [CompilerGeneratedAttribute]
internal RemotingListenerVersion get_RemotingListenerVersion();
    [CompilerGeneratedAttribute]
private void set_RemotingListenerVersion(RemotingListenerVersion value);
    public static bool TryGet(Type actorType, ActorTypeInformation& actorTypeInformation);
    public static ActorTypeInformation Get(Type actorType);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ActorUseScope : object {
    private bool timerUse;
    [CompilerGeneratedAttribute]
private ActorBase <Actor>k__BackingField;
    public ActorBase Actor { get; private set; }
    private ActorUseScope(ActorBase actor, bool timerUse);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public ActorBase get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(ActorBase value);
    public static ActorUseScope TryCreate(ActorBase actor, bool timerUse);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class Microsoft.ServiceFabric.Actors.Runtime.BinaryReaderWriterExtensions : object {
    public static byte NullPrefixByte;
    public static byte NotNullPrefixByte;
    private static int NegativeLength;
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, Guid guid);
    [ExtensionAttribute]
public static Guid ReadGuid(BinaryReader reader);
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, ActorId actorId);
    [ExtensionAttribute]
public static ActorId ReadActorId(BinaryReader reader);
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, TimeSpan timeSpan);
    [ExtensionAttribute]
public static TimeSpan ReadTimeSpan(BinaryReader reader);
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, DateTime dateTime);
    [ExtensionAttribute]
public static DateTime ReadDateTime(BinaryReader reader);
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, string str, Encoding encoding);
    [ExtensionAttribute]
public static string ReadString(BinaryReader reader, Encoding encoding);
    [ExtensionAttribute]
public static void WriteByteArray(BinaryWriter writer, Byte[] byteArr);
    [ExtensionAttribute]
public static Byte[] ReadByteArray(BinaryReader reader);
    [ExtensionAttribute]
public static void WriteNullPrefixByte(BinaryWriter writer);
    [ExtensionAttribute]
public static void WriteNotNullPrefixByte(BinaryWriter writer);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.DummyActor : ActorBase {
    internal DummyActor(ActorService actorService, ActorId actorId);
    internal virtual Task OnResetStateAsyncInternal();
    internal virtual Task OnSaveStateAsyncInternal();
    internal virtual Task OnPostActivateAsync();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.DummyServiceRemoingRequestMessageBody : object {
    public sealed virtual void SetParameter(int position, string parameName, object parameter);
    public sealed virtual object GetParameter(int position, string parameName, Type paramType);
}
public class Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException : FabricException {
    public DuplicateMessageException(string message);
    public DuplicateMessageException(string message, Exception inner);
    private DuplicateMessageException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.FabricActorExceptionConvertor : ExceptionConvertorBase {
    public virtual Exception[] GetInnerExceptions(Exception originalException);
    public virtual bool TryConvertToServiceException(Exception originalException, ServiceException& serviceException);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.GuidBytes : ValueType {
    public Guid Guid;
    public ulong First64Bits;
    public ulong Second64Bits;
    public GuidBytes(Guid guid);
    public GuidBytes(ulong first64Bits, ulong second64Bits);
}
internal interface Microsoft.ServiceFabric.Actors.Runtime.IActorActivator {
    public abstract virtual ActorBase Activate(ActorService actorService, ActorId actorId);
}
internal interface Microsoft.ServiceFabric.Actors.Runtime.IActorEventManager {
    public abstract virtual Task SubscribeAsync(ActorId actorId, int eventInterfaceId, IActorEventSubscriberProxy subscriber);
    public abstract virtual ActorEventProxy GetActorEventProxy(ActorId actorId, Type eventType);
    public abstract virtual Task UnsubscribeAsync(ActorId actorId, int eventInterfaceId, Guid subscriberId);
    public abstract virtual Task ClearAllSubscriptions(ActorId actorId);
}
internal interface Microsoft.ServiceFabric.Actors.Runtime.IActorEventSubscriberProxy {
    public Guid Id { get; }
    public RemotingListenerVersion RemotingListener { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual RemotingListenerVersion get_RemotingListener();
    public abstract virtual void RaiseEvent(int eventInterfaceId, int methodId, Byte[] eventMsgBody);
    public abstract virtual void RaiseEvent(int eventInterfaceId, int methodId, IServiceRemotingRequestMessageBody eventMsgBody);
    public abstract virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
}
internal interface Microsoft.ServiceFabric.Actors.Runtime.IActorManager {
    public ActorService ActorService { get; }
    public ActorEventSource TraceSource { get; }
    public bool HasRemindersLoaded { get; }
    public DiagnosticsEventManager DiagnosticsEventManager { get; }
    public bool IsClosed { get; }
    public abstract virtual ActorService get_ActorService();
    public abstract virtual ActorEventSource get_TraceSource();
    public abstract virtual bool get_HasRemindersLoaded();
    public abstract virtual DiagnosticsEventManager get_DiagnosticsEventManager();
    public abstract virtual bool get_IsClosed();
    public abstract virtual Task OpenAsync(IServicePartition partition, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual void Abort();
    public abstract virtual Task`1<Byte[]> InvokeAsync(ActorId actorId, int interfaceId, int methodId, string callContext, Byte[] requestMsgBody, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> DispatchToActorAsync(ActorId actorId, ActorMethodContext actorMethodContext, bool createIfRequired, Func`3<ActorBase, CancellationToken, Task`1<T>> actorFunc, string callContext, bool timerCall, CancellationToken cancellationToken);
    public abstract virtual Task`1<IServiceRemotingResponseMessageBody> InvokeAsync(ActorId actorId, int interfaceId, int methodId, string callContext, IServiceRemotingRequestMessageBody requestMsgBody, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, CancellationToken cancellationToken);
    public abstract virtual Task SubscribeAsync(ActorId actorId, int eventInterfaceId, IActorEventSubscriberProxy subscriber);
    public abstract virtual Task UnsubscribeAsync(ActorId actorId, int eventInterfaceId, Guid subscriberId);
    public abstract virtual TEvent GetEvent(ActorId actorId);
    public abstract virtual Task`1<IActorReminder> RegisterOrUpdateReminderAsync(ActorId actorId, string reminderName, Byte[] state, TimeSpan dueTime, TimeSpan period, bool saveState);
    public abstract virtual IActorReminder GetReminder(string reminderName, ActorId actorId);
    public abstract virtual Task UnregisterReminderAsync(string reminderName, ActorId actorId, bool removeFromStateProvider);
    public abstract virtual Task StartLoadingRemindersAsync(CancellationToken cancellationToken);
    public abstract virtual Task FireReminderAsync(ActorReminder reminder);
    public abstract virtual Task DeleteActorAsync(string callContext, ActorId actorId, CancellationToken cancellationToken);
    public abstract virtual Task`1<PagedResult`1<ActorInformation>> GetActorsFromStateProvider(ContinuationToken continuationToken, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> GetRemindersFromStateProviderAsync(ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    public abstract virtual string GetActorTraceId(ActorId actorId);
}
public interface Microsoft.ServiceFabric.Actors.Runtime.IActorReminder {
    public string Name { get; }
    public TimeSpan DueTime { get; }
    public TimeSpan Period { get; }
    public Byte[] State { get; }
    public abstract virtual string get_Name();
    public abstract virtual TimeSpan get_DueTime();
    public abstract virtual TimeSpan get_Period();
    public abstract virtual Byte[] get_State();
}
public interface Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection {
}
public interface Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState {
    public TimeSpan RemainingDueTime { get; }
    public abstract virtual TimeSpan get_RemainingDueTime();
}
public interface Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager {
    public abstract virtual Task AddStateAsync(string stateName, T value, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetStateAsync(string stateName, CancellationToken cancellationToken);
    public abstract virtual Task SetStateAsync(string stateName, T value, CancellationToken cancellationToken);
    public abstract virtual Task RemoveStateAsync(string stateName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryAddStateAsync(string stateName, T value, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryGetStateAsync(string stateName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryRemoveStateAsync(string stateName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ContainsStateAsync(string stateName, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetOrAddStateAsync(string stateName, T value, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> AddOrUpdateStateAsync(string stateName, T addValue, Func`3<string, T, T> updateValueFactory, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> GetStateNamesAsync(CancellationToken cancellationToken);
    public abstract virtual Task ClearCacheAsync(CancellationToken cancellationToken);
    public abstract virtual Task SaveStateAsync(CancellationToken cancellationToken);
}
public interface Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider {
    public abstract virtual void Initialize(ActorTypeInformation actorTypeInformation);
    public abstract virtual Task ActorActivatedAsync(ActorId actorId, CancellationToken cancellationToken);
    public abstract virtual Task ReminderCallbackCompletedAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> LoadStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    public abstract virtual Task SaveStateAsync(ActorId actorId, IReadOnlyCollection`1<ActorStateChange> stateChanges, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ContainsStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    public abstract virtual Task RemoveActorAsync(ActorId actorId, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> EnumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken);
    public abstract virtual Task`1<PagedResult`1<ActorId>> GetActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> GetRemindersAsync(int numItemsToReturn, ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    public abstract virtual Task SaveReminderAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    public abstract virtual Task DeleteReminderAsync(ActorId actorId, string reminderName, CancellationToken cancellationToken);
    public abstract virtual Task DeleteRemindersAsync(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames, CancellationToken cancellationToken);
    public abstract virtual Task`1<IActorReminderCollection> LoadRemindersAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal {
    public string TraceType { get; }
    public string TraceId { get; }
    public ReplicaRole CurrentReplicaRole { get; }
    public TimeSpan TransientErrorRetryDelay { get; }
    public TimeSpan OperationTimeout { get; }
    public TimeSpan CurrentLogicalTime { get; }
    public long RoleChangeTracker { get; }
    public abstract virtual string get_TraceType();
    public abstract virtual string get_TraceId();
    public abstract virtual ReplicaRole get_CurrentReplicaRole();
    public abstract virtual TimeSpan get_TransientErrorRetryDelay();
    public abstract virtual TimeSpan get_OperationTimeout();
    public abstract virtual TimeSpan get_CurrentLogicalTime();
    public abstract virtual long get_RoleChangeTracker();
}
public interface Microsoft.ServiceFabric.Actors.Runtime.IActorTimer {
    public TimeSpan DueTime { get; }
    public TimeSpan Period { get; }
    public abstract virtual TimeSpan get_DueTime();
    public abstract virtual TimeSpan get_Period();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.IdleObjectGcHandle : object {
    private long maxIdleCount;
    private object locker;
    private long idleCount;
    private long useCount;
    private long timerCount;
    private bool collected;
    private bool collectEarly;
    public bool IsGarbageCollected { get; }
    public IdleObjectGcHandle(long maxIdleCount);
    public bool get_IsGarbageCollected();
    public bool TryUse(bool timerCall);
    public void Unuse(bool timerCall);
    public bool TryCollect();
    public void MarkForEarlyCollection();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.InterfaceId : object {
    [CompilerGeneratedAttribute]
private int <V1Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <V2Id>k__BackingField;
    public int V1Id { get; }
    public int V2Id { get; }
    public InterfaceId(int v1Id, int v2Id);
    [CompilerGeneratedAttribute]
public int get_V1Id();
    [CompilerGeneratedAttribute]
public int get_V2Id();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal interface Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal {
    public abstract virtual ActorStateProviderHelper GetActorStateProviderHelper();
    public abstract virtual IReliableStateManagerReplica2 GetStateManager();
    public abstract virtual IReliableDictionary2`2<string, Byte[]> GetLogicalTimeDictionary();
    public abstract virtual IReliableDictionary2`2<string, Byte[]> GetActorPresenceDictionary();
    public abstract virtual IReliableDictionary2`2<string, Byte[]> GetReminderCompletedDictionary();
    public abstract virtual IReliableDictionary2`2<string, Byte[]> GetActorStateDictionary(ActorId actorId);
    public abstract virtual IReliableDictionary2`2<string, Byte[]> GetReminderDictionary(ActorId actorId);
}
public interface Microsoft.ServiceFabric.Actors.Runtime.IRemindable {
    public abstract virtual Task ReceiveReminderAsync(string reminderName, Byte[] state, TimeSpan dueTime, TimeSpan period);
}
public class Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider : KvsActorStateProviderBase {
    private LocalStoreSettings userDefinedLocalStoreSettings;
    private bool userDefinedEnableIncrementalBackup;
    private Nullable`1<int> userDefinedLogTruncationInterval;
    private KeyValueStoreReplicaSettings userDefinedKeyValueStoreReplicaSettings;
    public KvsActorStateProvider(ReplicatorSettings replicatorSettings, LocalStoreSettings localStoreSettings, KeyValueStoreReplicaSettings keyValueStoreReplicaSettings);
    public KvsActorStateProvider(bool enableIncrementalBackup, KeyValueStoreReplicaSettings keyValueStoreReplicaSettings);
    public KvsActorStateProvider(bool enableIncrementalBackup, int logTruncationIntervalInMinutes);
    private KvsActorStateProvider(ReplicatorSettings replicatorSettings, LocalStoreSettings localStoreSettings, KeyValueStoreReplicaSettings keyValueStoreReplicaSettings, bool enableIncrementalBackup, Nullable`1<int> logTruncationIntervalInMinutes);
    internal virtual KeyValueStoreReplica OnCreateAndInitializeReplica(StatefulServiceInitializationParameters initParams, Action`1<KeyValueStoreEnumerator> copyHandler, Action`1<IEnumerator`1<KeyValueStoreNotification>> replicationHandler, Func`2<CancellationToken, Task`1<bool>> onDataLossHandler, Func`2<CancellationToken, Task> restoreCompletedHandler);
    private LocalStoreSettings GetLocalStoreSettings();
    private KeyValueStoreReplicaSettings GetKvsReplicaSettings();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider_V2 : KvsActorStateProviderBase {
    internal virtual KeyValueStoreReplica OnCreateAndInitializeReplica(StatefulServiceInitializationParameters initParams, Action`1<KeyValueStoreEnumerator> copyHandler, Action`1<IEnumerator`1<KeyValueStoreNotification>> replicationHandler, Func`2<CancellationToken, Task`1<bool>> onDataLossHandler, Func`2<CancellationToken, Task> restoreCompletedHandler);
    private KeyValueStoreReplicaSettings_V2 GetKvsReplicaSettings();
}
public abstract class Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase : object {
    private static string ActorStorageKeyPrefix;
    private static string ReminderStorageKeyPrefix;
    private static string LogicalTimestampKey;
    private static string TraceType;
    private static string LocalBackupFolderName;
    private static string BackupRootFolderPrefix;
    private static string KvsHealthSourceId;
    private static string BackupCallbackSlowCancellationHealthProperty;
    private static int StateProviderInitRetryDelayMilliseconds;
    private static Byte[] ActorPresenceValue;
    private DataContractSerializer reminderSerializer;
    private DataContractSerializer reminderCompletedDataSerializer;
    private DataContractSerializer timestampSerializer;
    private VolatileLogicalTimeManager logicalTimeManager;
    private ActorStateProviderSerializer actorStateSerializer;
    private ActorStateProviderHelper actorStateProviderHelper;
    private ReplicatorSettings userDefinedReplicatorSettings;
    private SemaphoreSlim backupCallbackLock;
    private ReplicaRole replicaRole;
    private IStatefulServicePartition partition;
    private string traceId;
    private Func`2<CancellationToken, Task`1<bool>> onDataLossAsyncFunction;
    private Func`2<CancellationToken, Task> onRestoreCompletedAsyncFunction;
    private StatefulServiceInitializationParameters initParams;
    private ActorTypeInformation actorTypeInformation;
    private KeyValueStoreReplica storeReplica;
    private KvsActorStateProviderSettings stateProviderSettings;
    private long roleChangeTracker;
    private int isBackupInProgress;
    private CancellationTokenSource backupCallbackCts;
    private Task`1<bool> backupCallbackTask;
    private bool isClosingOrAborting;
    private bool isLogicalTimeManagerInitialized;
    private CancellationTokenSource stateProviderInitCts;
    private Task stateProviderInitTask;
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceType { get; }
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceId { get; }
    private ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentReplicaRole { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TransientErrorRetryDelay { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentLogicalTime { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.OperationTimeout { get; }
    private long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.RoleChangeTracker { get; }
    private Func`2<CancellationToken, Task`1<bool>> OnDataLossAsync { get; public set; }
    private Func`2<CancellationToken, Task> OnRestoreCompletedAsync { get; public set; }
    internal IStatefulServicePartition StatefulServicePartition { get; }
    internal StatefulServiceInitializationParameters InitParams { get; }
    internal ActorTypeInformation ActorTypeInformation { get; }
    internal KvsActorStateProviderBase(ReplicatorSettings replicatorSettings);
    private static KvsActorStateProviderBase();
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceType();
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceId();
    private sealed virtual override ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentReplicaRole();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TransientErrorRetryDelay();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentLogicalTime();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_OperationTimeout();
    private sealed virtual override long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_RoleChangeTracker();
    private Func`2<CancellationToken, Task`1<bool>> get_OnDataLossAsync();
    public sealed virtual void set_OnDataLossAsync(Func`2<CancellationToken, Task`1<bool>> value);
    private Func`2<CancellationToken, Task> get_OnRestoreCompletedAsync();
    public sealed virtual void set_OnRestoreCompletedAsync(Func`2<CancellationToken, Task> value);
    internal IStatefulServicePartition get_StatefulServicePartition();
    internal StatefulServiceInitializationParameters get_InitParams();
    internal ActorTypeInformation get_ActorTypeInformation();
    private sealed virtual override void Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(ActorTypeInformation actorTypeInformation);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(ActorId actorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-ReminderCallbackCompletedAsync>d__64")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(ActorId actorId, IReadOnlyCollection`1<ActorStateChange> stateChanges, CancellationToken cancellationToken);
    private sealed virtual override Task`1<bool> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task`1<IEnumerable`1<string>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task`1<PagedResult`1<ActorId>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-GetRemindersAsync>d__71")]
private sealed virtual override Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetRemindersAsync(int numItemsToReturn, ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-SaveReminderAsync>d__72")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(ActorId actorId, string reminderName, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteRemindersAsync(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-LoadRemindersAsync>d__75")]
private sealed virtual override Task`1<IActorReminderCollection> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters initializationParameters);
    private sealed virtual override Task`1<IReplicator> Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Data-IStateProviderReplica-ChangeRoleAsync>d__78")]
private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Data-IStateProviderReplica-CloseAsync>d__79")]
private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort();
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Data-IStateProviderReplica-BackupAsync>d__82")]
private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<Microsoft-ServiceFabric-Actors-Runtime-VolatileLogicalTimeManager-ISnapshotHandler-OnSnapshotAsync>d__85")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.VolatileLogicalTimeManager.ISnapshotHandler.OnSnapshotAsync(TimeSpan currentLogicalTime);
    private sealed virtual override object System.Fabric.IInternalStatefulServiceReplica.GetStatus();
    internal abstract virtual KeyValueStoreReplica OnCreateAndInitializeReplica(StatefulServiceInitializationParameters initParams, Action`1<KeyValueStoreEnumerator> copyHandler, Action`1<IEnumerator`1<KeyValueStoreNotification>> replicationHandler, Func`2<CancellationToken, Task`1<bool>> onDataLossHandler, Func`2<CancellationToken, Task> restoreCompletedHandler);
    internal ReplicatorSettings GetReplicatorSettings();
    internal KeyValueStoreReplica GetStoreReplica();
    internal ActorStateProviderHelper GetActorStateProviderHelper();
    internal void ReportPartitionHealth(HealthInformation healthInformation);
    private static string CreateActorStorageKey(ActorId actorId, string stateName);
    private static string CreateActorStorageKeyPrefix(ActorId actorId, string stateNamePrefix);
    private static string ExtractStateName(ActorId actorId, string storageKey);
    private static string CreateReminderStorageKey(ActorId actorId, string reminderName);
    private static string CreateReminderStorageKeyPrefix(ActorId actorId, string reminderNamePrefix);
    private static void PrepareBackupFolder(string backupFolder);
    private static Byte[] Serialize(DataContractSerializer serializer, T data);
    private static object Deserialize(DataContractSerializer serializer, Byte[] data);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<StartStateProviderInitializationAsync>d__100")]
private Task StartStateProviderInitializationAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<CancelStateProviderInitializationAsync>d__101")]
private Task CancelStateProviderInitializationAsync();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<InitializeAndStartLogicalTimeManagerAsync>d__102")]
private Task InitializeAndStartLogicalTimeManagerAsync(CancellationToken cancellationToken);
    private void StopLogicalTimeManager();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<WaitForReadStatusAsync>d__104")]
private Task WaitForReadStatusAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<EnsureLogicalTimeManagerInitializedAsync>d__105")]
private Task EnsureLogicalTimeManagerInitializedAsync(CancellationToken cancellationToken);
    private void OnCopyComplete(KeyValueStoreEnumerator enumerator);
    private void OnReplicationOperation(IEnumerator`1<KeyValueStoreNotification> notification);
    private void OnConfigurationPackageModified(object sender, PackageModifiedEventArgs`1<ConfigurationPackage> e);
    private void UpdateReplicatorSettings();
    private void EnsureReplicaIsPrimary();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<UserBackupCallbackHandler>d__111")]
private Task`1<bool> UserBackupCallbackHandler(StoreBackupInfo storeBackupInfo, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private string GetLocalBackupFolderPath();
    private void CleanupBackupFolder();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<CancelAndAwaitBackupCallbackIfAnyAsync>d__114")]
private Task CancelAndAwaitBackupCallbackIfAnyAsync();
    private void AcquireBackupLock();
    private void ReleaseBackupLock();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<AwaitBackupCallbackWithHealthReportingAsync>d__117")]
private Task AwaitBackupCallbackWithHealthReportingAsync();
    private void ReportBackupCallbackSlowCancellationHealth();
    private ReplicatorSettings LoadReplicatorSettings();
    private void LoadActorStateProviderSettings();
    private Byte[] SerializeReminder(ActorReminderData reminder);
    private Byte[] SerializeLogicalTimestamp(LogicalTimestamp timestamp);
    private Byte[] SerializeReminderCompletedData(ReminderCompletedData data);
    private ActorReminderData DeserializeReminder(Byte[] data);
    private LogicalTimestamp DeserializeLogicalTimeStamp(Byte[] data);
    private ReminderCompletedData DeserializeReminderCompletedData(Byte[] data);
    private void TryDeserializeAndApplyLogicalTimestamp(string key, Byte[] value);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<AddOrUpdateReminderAsync>d__128")]
private Task AddOrUpdateReminderAsync(string reminderKey, Byte[] state, string reminderCompletedKey);
    private Task DeleteRemindersInternalAsync(List`1<ReminderKeyInfo> reminderKeyInfoList, string functionNameTag, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<DeleteReminderAsync>d__130")]
private Task DeleteReminderAsync(IEnumerable`1<ReminderKeyInfo> reminderKeyInfoList);
    private List`1<ReminderKeyInfo> GetReminderKeyInfoList(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<UpdateOrAddAsync>d__132")]
private Task UpdateOrAddAsync(string key, Byte[] state);
    private Task`1<Dictionary`2<string, ReminderCompletedData>> GetReminderCompletedDataMapAsync(Transaction tx, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<EnumerateReminderAsync>d__134")]
private Task`1<IActorReminderCollection> EnumerateReminderAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderBase/<SaveStateAtomicallyAsync>d__135")]
private Task SaveStateAtomicallyAsync(IEnumerable`1<SerializedStateChange> serializedStateChanges, CancellationToken cancellationToken);
    private void RemoveKeysWithPrefixAsync(Transaction tx, string keyPrefix);
    private Task RemoveActorAtomicallyAsync(ActorId actorId, CancellationToken cancellationToken);
    private Task`1<IEnumerable`1<string>> GetStateNamesAsync(ActorId actorId, CancellationToken cancellationToken);
    private Task`1<PagedResult`1<ActorId>> GetStoredActorIdsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken);
    private Task`1<PagedResult`1<ActorId>> GetStoredActorIdsForKvsAsync(int itemsCount, ContinuationToken continuationToken, KeyValueStoreReplica replica, CancellationToken cancellationToken);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProviderSettings : ActorStateProviderSettings {
    private static string BackupCallbackSlowCancellationHealthReportTimeToLiveParameterName;
    private static string BackupCallbackExpectedCancellationTimeParameterName;
    [CompilerGeneratedAttribute]
private TimeSpan <BackupCallbackSlowCancellationHealthReportTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BackupCallbackExpectedCancellationTime>k__BackingField;
    public TimeSpan BackupCallbackSlowCancellationHealthReportTimeToLive { get; public set; }
    public TimeSpan BackupCallbackExpectedCancellationTime { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_BackupCallbackSlowCancellationHealthReportTimeToLive();
    [CompilerGeneratedAttribute]
public void set_BackupCallbackSlowCancellationHealthReportTimeToLive(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BackupCallbackExpectedCancellationTime();
    [CompilerGeneratedAttribute]
public void set_BackupCallbackExpectedCancellationTime(TimeSpan value);
    public static KvsActorStateProviderSettings LoadFrom(ICodePackageActivationContext activationContext, string configPackageName, string sectionName);
    public virtual string ToString();
    protected virtual void LoadFromSection(ConfigurationSection section);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Runtime.LogicalTimestamp : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Timestamp>k__BackingField;
    [DataMemberAttribute]
public TimeSpan Timestamp { get; private set; }
    public LogicalTimestamp(TimeSpan timestamp);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(TimeSpan value);
    public virtual string ToString();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.LogicalTimestampSerializer : object {
    private static ushort DataVersionOne;
    private static ushort CurrentDataVersion;
    private static Encoding DataEncoding;
    private static LogicalTimestampSerializer();
    internal static Byte[] Serialize(LogicalTimestamp logicalTimestamp);
    internal static LogicalTimestamp Deserialize(Byte[] logicalTimestampBytes);
    private static int ComputeSizeInBytes(LogicalTimestamp logicalTimestamp);
}
[AttributeUsageAttribute("4")]
public class Microsoft.ServiceFabric.Actors.Runtime.Migration.AmbiguousActorIdResolverAttribute : Attribute {
    [IteratorStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.Migration.AmbiguousActorIdResolverAttribute/<GetTypesWithAttribute>d__1")]
internal static IEnumerable`1<Type> GetTypesWithAttribute();
}
internal static class Microsoft.ServiceFabric.Actors.Runtime.Migration.Constants : object {
    internal static string MigrationListenerName;
    internal static string ForwardRequestHeaderName;
    private static Constants();
}
public interface Microsoft.ServiceFabric.Actors.Runtime.Migration.IAmbiguousActorIdResolver {
    public abstract virtual bool TryResolveActorIdAndStateName(string key, String& actorId);
}
internal interface Microsoft.ServiceFabric.Actors.Runtime.Migration.IMigrationOrchestrator {
    public abstract virtual IActorStateProvider GetMigrationActorStateProvider();
    public abstract virtual ICommunicationListener GetMigrationCommunicationListener();
    public abstract virtual IServiceRemotingMessageHandler GetMessageHandler(ActorService actorService, IServiceRemotingMessageHandler messageHandler, Func`2<RequestForwarderContext, IRequestForwarder> requestForwarderFactory);
    public abstract virtual Task StartMigrationAsync(bool userTriggered, CancellationToken cancellationToken);
    public abstract virtual Task StartDowntimeAsync(bool userTriggered, CancellationToken cancellationToken);
    public abstract virtual Task AbortMigrationAsync(bool userTriggered, CancellationToken cancellationToken);
    public abstract virtual bool AreActorCallsAllowed();
    public abstract virtual bool IsActorCallToBeForwarded();
    public abstract virtual void ThrowIfActorCallsDisallowed();
    public abstract virtual bool IsAutoStartMigration();
    public abstract virtual void RegisterCompletionCallback(Func`3<bool, CancellationToken, Task> completionCallback);
}
public enum Microsoft.ServiceFabric.Actors.Runtime.Migration.MigrationMode : Enum {
    public int value__;
    public static MigrationMode Auto;
    public static MigrationMode Manual;
}
internal static class Microsoft.ServiceFabric.Actors.Runtime.Migration.MigrationReflectionHelper : object {
    private static string TraceType;
    private static MigrationReflectionHelper();
    public static IMigrationOrchestrator GetMigrationOrchestrator(IActorStateProvider stateProvider, ActorTypeInformation actorTypeInfo, StatefulServiceContext serviceContext, MigrationSettings settings);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Runtime.Migration.MigrationSettings : object {
    private static string TraceType;
    [CompilerGeneratedAttribute]
private Uri <SourceServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TargetServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationMode <MigrationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationSourceOrchestrator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationTargetOrchestrator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MigrationConfigSectionName>k__BackingField;
    [DataMemberAttribute]
public Uri SourceServiceUri { get; public set; }
    [DataMemberAttribute]
public Uri TargetServiceUri { get; public set; }
    [DataMemberAttribute]
public MigrationMode MigrationMode { get; public set; }
    [DataMemberAttribute]
internal string MigrationSourceOrchestrator { get; internal set; }
    [DataMemberAttribute]
internal string MigrationTargetOrchestrator { get; internal set; }
    internal string MigrationConfigSectionName { get; private set; }
    private static MigrationSettings();
    [CompilerGeneratedAttribute]
public Uri get_SourceServiceUri();
    [CompilerGeneratedAttribute]
public void set_SourceServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_TargetServiceUri();
    [CompilerGeneratedAttribute]
public void set_TargetServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public MigrationMode get_MigrationMode();
    [CompilerGeneratedAttribute]
public void set_MigrationMode(MigrationMode value);
    [CompilerGeneratedAttribute]
internal string get_MigrationSourceOrchestrator();
    [CompilerGeneratedAttribute]
internal void set_MigrationSourceOrchestrator(string value);
    [CompilerGeneratedAttribute]
internal string get_MigrationTargetOrchestrator();
    [CompilerGeneratedAttribute]
internal void set_MigrationTargetOrchestrator(string value);
    [CompilerGeneratedAttribute]
internal string get_MigrationConfigSectionName();
    [CompilerGeneratedAttribute]
private void set_MigrationConfigSectionName(string value);
    internal virtual void LoadFrom(ICodePackageActivationContext codePackageActivationContext, string configSectionName);
    internal virtual void Validate(bool isSource);
}
internal static class Microsoft.ServiceFabric.Actors.Runtime.Migration.MigrationTelemetry : object {
    private static ActorEventSource EventSource;
    private static MigrationTelemetry();
    internal static void MigrationStartEvent(StatefulServiceContext context, string settingsJson);
    internal static void MigrationEndEvent(StatefulServiceContext context, string resultJson);
    internal static void MigrationPhaseStartEvent(StatefulServiceContext context, string inputJson);
    internal static void MigrationPhaseEndEvent(StatefulServiceContext context, string resultJson);
    internal static void MigrationFailureEvent(StatefulServiceContext context, string phase, string errorMsg);
    internal static void MigrationAbortEvent(StatefulServiceContext context, bool userTriggered);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.Migration.MigrationTelemetryConstants : object {
    internal static string MigrationStartEvent;
    internal static string MigrationEndEvent;
    internal static string MigrationPhaseStartEvent;
    internal static string MigrationPhaseEndEvent;
    internal static string MigrationFailureEvent;
    internal static string MigrationAbortEvent;
    private static MigrationTelemetryConstants();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.Migration.RequestForwardableRemotingDispatcher : object {
    private static string TraceType;
    private IServiceRemotingMessageHandler actualMessageHandler;
    private ActorService actorService;
    private IRequestForwarder requestForwarder;
    private ServiceRemotingCancellationHelper cancellationHelper;
    private string traceId;
    public RequestForwardableRemotingDispatcher(ActorService actorService, IServiceRemotingMessageHandler actualMessageHandler, IRequestForwarder requestForwarder);
    private static RequestForwardableRemotingDispatcher();
    public sealed virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
    public sealed virtual void HandleOneWayMessage(IServiceRemotingRequestMessage requestMessage);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.Migration.RequestForwardableRemotingDispatcher/<HandleRequestResponseAsync>d__9")]
public sealed virtual Task`1<IServiceRemotingResponseMessage> HandleRequestResponseAsync(IServiceRemotingRequestContext requestContext, IServiceRemotingRequestMessage requestMessage);
    public sealed virtual void Dispose();
}
public enum Microsoft.ServiceFabric.Actors.Runtime.Migration.StateMigration : Enum {
    public int value__;
    public static StateMigration None;
    public static StateMigration Source;
    public static StateMigration Target;
}
[AttributeUsageAttribute("4")]
public class Microsoft.ServiceFabric.Actors.Runtime.Migration.StateMigrationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private StateMigration <StateMigration>k__BackingField;
    public StateMigration StateMigration { get; private set; }
    public StateMigrationAttribute(StateMigration stateMigration);
    [CompilerGeneratedAttribute]
public StateMigration get_StateMigration();
    [CompilerGeneratedAttribute]
private void set_StateMigration(StateMigration value);
    internal static StateMigrationAttribute Get(Type actorType);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.MockActorEventManager : object {
    private IDictionary`2<int, Type> eventIdToEventTypeMap;
    private ConcurrentDictionary`2<ActorId, ConcurrentDictionary`2<Type, ActorEventProxy>> actorIdToEventProxyMap;
    internal MockActorEventManager(ActorTypeInformation actorTypeInformation);
    public sealed virtual Task SubscribeAsync(ActorId actorId, int eventInterfaceId, IActorEventSubscriberProxy subscriber);
    public sealed virtual ActorEventProxy GetActorEventProxy(ActorId actorId, Type eventType);
    public sealed virtual Task UnsubscribeAsync(ActorId actorId, int eventInterfaceId, Guid subscriberId);
    public sealed virtual Task ClearAllSubscriptions(ActorId actorId);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.MockActorManager : object {
    private ActorService actorService;
    private ConcurrentDictionary`2<ActorId, ConcurrentDictionary`2<string, ActorReminder>> remindersByActorId;
    private ActorEventSource traceSource;
    private IDiagnosticsManager diagnosticsManager;
    private IActorEventManager eventManager;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    public bool IsClosed { get; private set; }
    public ActorService ActorService { get; }
    public bool HasRemindersLoaded { get; }
    public ActorEventSource TraceSource { get; }
    public DiagnosticsEventManager DiagnosticsEventManager { get; }
    private IActorStateProvider StateProvider { get; }
    internal MockActorManager(ActorService actorService);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual ActorService get_ActorService();
    public sealed virtual bool get_HasRemindersLoaded();
    public sealed virtual ActorEventSource get_TraceSource();
    public sealed virtual DiagnosticsEventManager get_DiagnosticsEventManager();
    private IActorStateProvider get_StateProvider();
    public sealed virtual Task OpenAsync(IServicePartition partition, CancellationToken cancellationToken);
    public sealed virtual Task CloseAsync(CancellationToken cancellationToken);
    public sealed virtual void Abort();
    public sealed virtual Task`1<Byte[]> InvokeAsync(ActorId actorId, int interfaceId, int methodId, string callContext, Byte[] requestMsgBody, CancellationToken cancellationToken);
    public sealed virtual Task`1<IServiceRemotingResponseMessageBody> InvokeAsync(ActorId actorId, int interfaceId, int methodId, string callContext, IServiceRemotingRequestMessageBody requestMsgBody, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> DispatchToActorAsync(ActorId actorId, ActorMethodContext actorMethodContext, bool createIfRequired, Func`3<ActorBase, CancellationToken, Task`1<T>> actorFunc, string callContext, bool timerCall, CancellationToken cancellationToken);
    public sealed virtual Task SubscribeAsync(ActorId actorId, int eventInterfaceId, IActorEventSubscriberProxy subscriber);
    public sealed virtual Task UnsubscribeAsync(ActorId actorId, int eventInterfaceId, Guid subscriberId);
    public sealed virtual TEvent GetEvent(ActorId actorId);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.MockActorManager/<RegisterOrUpdateReminderAsync>d__29")]
public sealed virtual Task`1<IActorReminder> RegisterOrUpdateReminderAsync(ActorId actorId, string reminderName, Byte[] state, TimeSpan dueTime, TimeSpan period, bool saveState);
    public sealed virtual IActorReminder GetReminder(string reminderName, ActorId actorId);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.MockActorManager/<UnregisterReminderAsync>d__31")]
public sealed virtual Task UnregisterReminderAsync(string reminderName, ActorId actorId, bool removeFromStateProvider);
    public sealed virtual Task StartLoadingRemindersAsync(CancellationToken cancellationToken);
    public sealed virtual Task FireReminderAsync(ActorReminder reminder);
    public sealed virtual Task DeleteActorAsync(string callContext, ActorId actorId, CancellationToken cancellationToken);
    public sealed virtual Task`1<PagedResult`1<ActorInformation>> GetActorsFromStateProvider(ContinuationToken continuationToken, CancellationToken cancellationToken);
    public sealed virtual string GetActorTraceId(ActorId actorId);
    public sealed virtual Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> GetRemindersFromStateProviderAsync(ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.NullActorStateProvider : object {
    private static string TraceType;
    private static string ActorKeyPrefix;
    private static string ReminderKeyPrefix;
    private ConcurrentDictionary`2<string, object> stateDictionary;
    private ActorStateProviderHelper actorStateProviderHelper;
    private string traceId;
    private ReplicaRole currentRole;
    private StatefulServiceInitializationParameters initParams;
    private IStateReplicator2 replicator;
    private IStatefulServicePartition servicePartition;
    private ActorTypeInformation actorTypeInformation;
    private Func`2<CancellationToken, Task`1<bool>> onDataLoFunc;
    private Func`2<CancellationToken, Task> onRestoreCompFunc;
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceType { get; }
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceId { get; }
    private ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentReplicaRole { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TransientErrorRetryDelay { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentLogicalTime { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.OperationTimeout { get; }
    private long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.RoleChangeTracker { get; }
    unknown Func`2<CancellationToken, Task`1<bool>> Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync {private set; }
    unknown Func`2<CancellationToken, Task> Microsoft.ServiceFabric.Data.IStateProviderReplica2.OnRestoreCompletedAsync {private set; }
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceType();
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceId();
    private sealed virtual override ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentReplicaRole();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TransientErrorRetryDelay();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentLogicalTime();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_OperationTimeout();
    private sealed virtual override long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_RoleChangeTracker();
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.set_OnDataLossAsync(Func`2<CancellationToken, Task`1<bool>> value);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica2.set_OnRestoreCompletedAsync(Func`2<CancellationToken, Task> value);
    private sealed virtual override void Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(ActorTypeInformation actorTypeInfo);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(ActorId actorId, IReadOnlyCollection`1<ActorStateChange> stateChanges, CancellationToken cancellationToken);
    private sealed virtual override Task`1<bool> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task`1<IEnumerable`1<string>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task`1<PagedResult`1<ActorId>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.NullActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-GetRemindersAsync>d__41")]
private sealed virtual override Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetRemindersAsync(int numItemsToReturn, ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(ActorId actorId, IActorReminder state, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(ActorId actorId, string reminderName, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteRemindersAsync(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames, CancellationToken cancellationToken);
    private sealed virtual override Task`1<IActorReminderCollection> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters initializationParameters);
    private sealed virtual override Task`1<IReplicator> Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort();
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken);
    private sealed virtual override IOperationDataStream System.Fabric.IStateProvider.GetCopyContext();
    private sealed virtual override IOperationDataStream System.Fabric.IStateProvider.GetCopyState(long upToSequenceNumber, IOperationDataStream copyContext);
    private sealed virtual override long System.Fabric.IStateProvider.GetLastCommittedSequenceNumber();
    private sealed virtual override Task`1<bool> System.Fabric.IStateProvider.OnDataLossAsync(CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.IStateProvider.UpdateEpochAsync(Epoch epoch, long previousEpochLastSequenceNumber, CancellationToken cancellationToken);
    private static string CreateActorStorageKey(ActorId actorId, string stateName);
    private static string CreateActorStorageKeyPrefix(ActorId actorId, string stateNamePrefix);
    private static string CreateReminderStorageKey(ActorId actorId, string reminderName);
    private static string CreateReminderStorageKeyPrefix(ActorId actorId, string reminderNamePrefix);
    private static string ExtractStateName(ActorId actorId, string storageKey);
    private void StartSecondaryCopyAndReplicationPump();
    private void StartSecondaryReplicationPump();
    private void StartSecondaryPumpOperation(bool isCopy);
    private IOperationStream GetOperationStream(bool isCopy);
    private ReplicatorSettings GetReplicatorSettings();
    private IEnumerator`1<string> GetActorPresenceKeyEnumerator();
    private IEnumerator`1<ActorReminderData> GetActorReminderEnumerator(string prefix);
}
public class Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider : object {
    private static int StateProviderInitRetryDelayMilliseconds;
    private static int DefaultActorStateDictionaryCount;
    private static int DefaultReminderDictionaryCount;
    private static string TraceType;
    private static string LogicalTimestampKey;
    private static string ActorStateDictionaryNameFormat;
    private static string ReminderDictionaryNameFormat;
    private static string ActorPresenceDictionaryName;
    private static string ReminderCompletedDictionaryName;
    private static string LogicalTimeDictionaryName;
    private Byte[] actorPresenceValue;
    private ReliableStateManagerConfiguration userDefinedStateManagerConfig;
    private int userDefinedActorStateDictionaryCount;
    private int userDefinedReminderDictionaryCount;
    private ActorStateProviderHelper stateProviderHelper;
    private VolatileLogicalTimeManager logicalTimeManager;
    private ActorStateProviderSerializer actorStateSerializer;
    private string traceId;
    private ReplicaRole replicaRole;
    private IStatefulServicePartition servicePartition;
    private ActorTypeInformation actorTypeInformation;
    private Func`2<CancellationToken, Task`1<bool>> onDataLossAsyncFunc;
    private Func`2<CancellationToken, Task> onRestoreCompletedAsyncFunc;
    private StatefulServiceInitializationParameters initParams;
    private bool isLogicalTimeManagerInitialized;
    private bool isDictionariesInitialized;
    private Task stateProviderInitTask;
    private CancellationTokenSource stateProviderInitCts;
    private IReliableStateManagerReplica2 stateManager;
    private IReliableDictionary2`2<string, Byte[]> actorPresenceDictionary;
    private IReliableDictionary2`2<string, Byte[]> reminderCompletedDictionary;
    private IReliableDictionary2`2<string, Byte[]> logicalTimeDictionary;
    private IReliableDictionary2`2[] actorStateDictionaries;
    private IReliableDictionary2`2[] reminderDictionaries;
    private ReliableCollectionsActorStateProviderSettings stateProviderSettings;
    private long roleChangeTracker;
    unknown Func`2<CancellationToken, Task`1<bool>> Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync {private set; }
    unknown Func`2<CancellationToken, Task> Microsoft.ServiceFabric.Data.IStateProviderReplica2.OnRestoreCompletedAsync {private set; }
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceType { get; }
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceId { get; }
    private ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentReplicaRole { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TransientErrorRetryDelay { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentLogicalTime { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.OperationTimeout { get; }
    private long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.RoleChangeTracker { get; }
    public ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig);
    public ReliableCollectionsActorStateProvider(ReliableStateManagerConfiguration stateManagerConfig, int actorStateDictionaryCount, int reminderDictionaryCount);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.set_OnDataLossAsync(Func`2<CancellationToken, Task`1<bool>> value);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica2.set_OnRestoreCompletedAsync(Func`2<CancellationToken, Task> value);
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceType();
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceId();
    private sealed virtual override ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentReplicaRole();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TransientErrorRetryDelay();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentLogicalTime();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_OperationTimeout();
    private sealed virtual override long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_RoleChangeTracker();
    private sealed virtual override void Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(ActorTypeInformation actorTypeInformation);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-ActorActivatedAsync>d__58")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(ActorId actorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-ReminderCallbackCompletedAsync>d__59")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-LoadStateAsync>d__60`1")]
private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-SaveStateAsync>d__61")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(ActorId actorId, IReadOnlyCollection`1<ActorStateChange> stateChanges, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-ContainsStateAsync>d__62")]
private sealed virtual override Task`1<bool> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-RemoveActorAsync>d__63")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(ActorId actorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-EnumerateStateNamesAsync>d__64")]
private sealed virtual override Task`1<IEnumerable`1<string>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-GetActorsAsync>d__65")]
private sealed virtual override Task`1<PagedResult`1<ActorId>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-GetRemindersAsync>d__66")]
private sealed virtual override Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetRemindersAsync(int numItemsToReturn, ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-SaveReminderAsync>d__67")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-LoadRemindersAsync>d__68")]
private sealed virtual override Task`1<IActorReminderCollection> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-DeleteReminderAsync>d__69")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(ActorId actorId, string reminderName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-DeleteRemindersAsync>d__70")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteRemindersAsync(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-VolatileLogicalTimeManager-ISnapshotHandler-OnSnapshotAsync>d__71")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.VolatileLogicalTimeManager.ISnapshotHandler.OnSnapshotAsync(TimeSpan currentLogicalTime);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters initializationParameters);
    private sealed virtual override Task`1<IReplicator> Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Data-IStateProviderReplica-ChangeRoleAsync>d__74")]
private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<Microsoft-ServiceFabric-Data-IStateProviderReplica-CloseAsync>d__75")]
private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort();
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken);
    private sealed virtual override ActorStateProviderHelper Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal.GetActorStateProviderHelper();
    private sealed virtual override IReliableStateManagerReplica2 Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal.GetStateManager();
    private sealed virtual override IReliableDictionary2`2<string, Byte[]> Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal.GetLogicalTimeDictionary();
    private sealed virtual override IReliableDictionary2`2<string, Byte[]> Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal.GetActorPresenceDictionary();
    private sealed virtual override IReliableDictionary2`2<string, Byte[]> Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal.GetReminderCompletedDictionary();
    private sealed virtual override IReliableDictionary2`2<string, Byte[]> Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal.GetActorStateDictionary(ActorId actorId);
    private sealed virtual override IReliableDictionary2`2<string, Byte[]> Microsoft.ServiceFabric.Actors.Runtime.IReliableCollectionsActorStateProviderInternal.GetReminderDictionary(ActorId actorId);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<RemoveKeysWithPrefixAsync>d__88")]
private static Task RemoveKeysWithPrefixAsync(ITransaction tx, IReliableDictionary2`2<string, Byte[]> relDict, string keyPrefix, CancellationToken cancellationToken);
    private static T[] DictionaryToArray(Dictionary`2<int, T> dict);
    private static string CreateStorageKeyPrefix(ActorId actorId, string keyPrefix);
    private static string CreateStorageKey(ActorId actorId, string stateName);
    private static string GetStateNameFromStorageKey(ActorId actorId, string storageKey);
    private static ActorId GetActorIdFromPresenceStorageKey(string storageKey);
    private void LoadActorStateProviderSettings();
    private Task DeleteRemindersInternalAsync(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderKeys, string functionNameTag, CancellationToken cancellationToken);
    private IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> GetReminderKeys(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames, Int32& totalCount);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<EnsureStateProviderInitializedAsync>d__97")]
private Task EnsureStateProviderInitializedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<StartStateProviderInitializationAsync>d__98")]
private Task StartStateProviderInitializationAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<CancelStateProviderInitializationAsync>d__99")]
private Task CancelStateProviderInitializationAsync();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<WaitForWriteStatusAsync>d__100")]
private Task WaitForWriteStatusAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<InitializeReliableDictionariesAsync>d__101")]
private Task InitializeReliableDictionariesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<InitializeAndStartLogicalTimeManagerAsync>d__102")]
private Task InitializeAndStartLogicalTimeManagerAsync(CancellationToken cancellationToken);
    private Task`1<IReliableDictionary2`2<string, Byte[]>> GetOrAddDictionaryAsync(ITransaction tx, string dictionaryName);
    private Task`1<ConditionalValue`1<IReliableDictionary2`2<string, Byte[]>>> TryGetDictionaryAsync(string dictionaryName);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<GetOrAddDictionariesAsync>d__105")]
private Task`1<Dictionary`2<int, IReliableDictionary2`2<string, Byte[]>>> GetOrAddDictionariesAsync(ITransaction tx, string dictionaryNameFormat, int dictionaryCount);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<GetReminderCompletedDataMapAsync>d__106")]
private Task`1<Dictionary`2<string, ReminderCompletedData>> GetReminderCompletedDataMapAsync(Func`2<string, bool> filter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<EnumerateRemindersAsync>d__107")]
private Task EnumerateRemindersAsync(IReliableDictionary2`2<string, Byte[]> reminderDictionary, Dictionary`2<string, ReminderCompletedData> reminderCompletedDataDict, ActorReminderCollection reminderCollection, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<EnumerateRemindersAsync>d__108")]
private Task`1<IActorReminderCollection> EnumerateRemindersAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<SaveStateAtomicallyAsync>d__109")]
private Task SaveStateAtomicallyAsync(ActorId actorId, IEnumerable`1<SerializedStateChange> serializedStateChanges, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<GetStoredActorIdsAsync>d__110")]
private Task`1<PagedResult`1<ActorId>> GetStoredActorIdsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<GetContinuationPointByActorCount>d__111")]
private Task`1<bool> GetContinuationPointByActorCount(long previousActorCount, IAsyncEnumerator`1<string> enumerator, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<GetContinuationPointByActorStorageKey>d__112")]
private Task`1<bool> GetContinuationPointByActorStorageKey(string lastSeenActorStorageKey, IAsyncEnumerator`1<string> enumerator, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<RemoveActorAtomicallyAsync>d__113")]
private Task RemoveActorAtomicallyAsync(ActorId actorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<GetStateNamesAsync>d__114")]
private Task`1<IEnumerable`1<string>> GetStateNamesAsync(ActorId actorId);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProvider/<GetRemindersAsync>d__115")]
private Task`1<List`1<ActorReminderData>> GetRemindersAsync(IReliableDictionary2`2<string, Byte[]> reminderDictionary, Func`2<string, bool> filterFunc, CancellationToken cancellationToken);
    private void SortReminders(List`1<ActorReminderData> reminders);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ReliableCollectionsActorStateProviderSettings : ActorStateProviderSettings {
    public static ReliableCollectionsActorStateProviderSettings LoadFrom(ICodePackageActivationContext activationContext, string configPackageName, string sectionName);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Actors.Runtime.ReminderCompletedData : object {
    [DataMemberAttribute]
private TimeSpan logicalTime;
    [DataMemberAttribute]
private DateTime utcTime;
    public TimeSpan LogicalTime { get; }
    public DateTime UtcTime { get; }
    public ReminderCompletedData(TimeSpan logicalTime, DateTime utcTime);
    public TimeSpan get_LogicalTime();
    public DateTime get_UtcTime();
    public long EstimateDataLength();
    public virtual string ToString();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.ReminderCompletedDataSerializer : object {
    private static ushort DataVersionOne;
    private static ushort CurrentDataVersion;
    private static Encoding DataEncoding;
    private static ReminderCompletedDataSerializer();
    internal static Byte[] Serialize(ReminderCompletedData reminderCompletedData);
    internal static ReminderCompletedData Deserialize(Byte[] reminderDataBytes);
    private static int ComputeSizeInBytes(ReminderCompletedData reminderCompletedData);
}
public class Microsoft.ServiceFabric.Actors.Runtime.ReminderSettings : object {
    [CompilerGeneratedAttribute]
private bool <AutoDeleteOneTimeReminders>k__BackingField;
    public bool AutoDeleteOneTimeReminders { get; public set; }
    internal ReminderSettings(ReminderSettings reminderSettings);
    [CompilerGeneratedAttribute]
public bool get_AutoDeleteOneTimeReminders();
    [CompilerGeneratedAttribute]
public void set_AutoDeleteOneTimeReminders(bool value);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.SerializedStateChange : object {
    private StateChangeKind changeKind;
    private string key;
    private Byte[] serializedState;
    public StateChangeKind ChangeKind { get; }
    public string Key { get; }
    public Byte[] SerializedState { get; }
    public SerializedStateChange(StateChangeKind changeKind, string key, Byte[] serializedState);
    public StateChangeKind get_ChangeKind();
    public string get_Key();
    public Byte[] get_SerializedState();
}
public enum Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind : Enum {
    public int value__;
    public static StateChangeKind None;
    public static StateChangeKind Add;
    public static StateChangeKind Update;
    public static StateChangeKind Remove;
}
public enum Microsoft.ServiceFabric.Actors.Runtime.StatePersistence : Enum {
    public int value__;
    public static StatePersistence None;
    public static StatePersistence Volatile;
    public static StatePersistence Persisted;
}
[AttributeUsageAttribute("4")]
public class Microsoft.ServiceFabric.Actors.Runtime.StatePersistenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private StatePersistence <StatePersistence>k__BackingField;
    public StatePersistence StatePersistence { get; private set; }
    public StatePersistenceAttribute(StatePersistence statePersistence);
    [CompilerGeneratedAttribute]
public StatePersistence get_StatePersistence();
    [CompilerGeneratedAttribute]
private void set_StatePersistence(StatePersistence value);
    internal static StatePersistenceAttribute Get(Type actorType);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.TimeoutHelper : ValueType {
    private Stopwatch stopWatch;
    private TimeSpan originalTimeout;
    public bool HasRemainingTime { get; }
    public bool HasTimedOut { get; }
    public TimeoutHelper(TimeSpan timeout);
    public bool get_HasRemainingTime();
    public bool get_HasTimedOut();
}
public class Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider : object {
    private static string LogicalTimestampKey;
    private static string TraceType;
    private static int StateProviderInitRetryDelayMilliseconds;
    private static ActorStateData ActorPresenceValue;
    private VolatileActorStateTable`3<ActorStateType, string, ActorStateData> stateTable;
    private DataContractSerializer copyOrReplicationOperationSerializer;
    private VolatileLogicalTimeManager logicalTimeManager;
    private ActorStateProviderSerializer actorStateSerializer;
    private object replicationLock;
    private ActorStateProviderHelper actorStateProviderHelper;
    private ReplicatorSettings userDefinedReplicatorSettings;
    private SecondaryPump secondaryPump;
    private ActorTypeInformation actorTypeInformation;
    private FabricReplicator fabricReplicator;
    private IStateReplicator2 stateReplicator;
    private ReplicaRole replicaRole;
    private IStatefulServicePartition partition;
    private string traceId;
    private StatefulServiceInitializationParameters initParams;
    private VolatileActorStateProviderSettings stateProviderSettings;
    private long roleChangeTracker;
    private bool isLogicalTimeManagerInitialized;
    private CancellationTokenSource stateProviderInitCts;
    private Task stateProviderInitTask;
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task> <OnRestoreCompletedAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task`1<bool>> <OnDataLossAsync>k__BackingField;
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceType { get; }
    private string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TraceId { get; }
    private ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentReplicaRole { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.TransientErrorRetryDelay { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.CurrentLogicalTime { get; }
    private TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.OperationTimeout { get; }
    private long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.RoleChangeTracker { get; }
    private Func`2<CancellationToken, Task> OnRestoreCompletedAsync { get; public set; }
    private Func`2<CancellationToken, Task`1<bool>> OnDataLossAsync { get; public set; }
    public VolatileActorStateProvider(ReplicatorSettings replicatorSettings);
    private static VolatileActorStateProvider();
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceType();
    private sealed virtual override string Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TraceId();
    private sealed virtual override ReplicaRole Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentReplicaRole();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_TransientErrorRetryDelay();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_CurrentLogicalTime();
    private sealed virtual override TimeSpan Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_OperationTimeout();
    private sealed virtual override long Microsoft.ServiceFabric.Actors.Runtime.IActorStateProviderInternal.get_RoleChangeTracker();
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task> get_OnRestoreCompletedAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnRestoreCompletedAsync(Func`2<CancellationToken, Task> value);
    [CompilerGeneratedAttribute]
private Func`2<CancellationToken, Task`1<bool>> get_OnDataLossAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnDataLossAsync(Func`2<CancellationToken, Task`1<bool>> value);
    private sealed virtual override void Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(ActorTypeInformation actorTypeInfo);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-ActorActivatedAsync>d__50")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(ActorId actorId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-ReminderCallbackCompletedAsync>d__51")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-SaveStateAsync>d__53")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(ActorId actorId, IReadOnlyCollection`1<ActorStateChange> stateChanges, CancellationToken cancellationToken);
    private sealed virtual override Task`1<bool> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-RemoveActorAsync>d__55")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task`1<IEnumerable`1<string>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken);
    private sealed virtual override Task`1<PagedResult`1<ActorId>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-GetRemindersAsync>d__58")]
private sealed virtual override Task`1<ReminderPagedResult`1<KeyValuePair`2<ActorId, List`1<ActorReminderState>>>> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetRemindersAsync(int numItemsToReturn, ActorId actorId, ContinuationToken continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-SaveReminderAsync>d__59")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(ActorId actorId, string reminderName, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteRemindersAsync(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-IActorStateProvider-LoadRemindersAsync>d__62")]
private sealed virtual override Task`1<IActorReminderCollection> Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters initializationParameters);
    private sealed virtual override Task`1<IReplicator> Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Data-IStateProviderReplica-ChangeRoleAsync>d__65")]
private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Data-IStateProviderReplica-CloseAsync>d__66")]
private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort();
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken);
    private sealed virtual override IOperationDataStream System.Fabric.IStateProvider.GetCopyContext();
    private sealed virtual override IOperationDataStream System.Fabric.IStateProvider.GetCopyState(long upToSequenceNumber, IOperationDataStream copyContext);
    private sealed virtual override long System.Fabric.IStateProvider.GetLastCommittedSequenceNumber();
    private sealed virtual override Task`1<bool> System.Fabric.IStateProvider.OnDataLossAsync(CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.IStateProvider.UpdateEpochAsync(Epoch epoch, long previousEpochLastSequenceNumber, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<Microsoft-ServiceFabric-Actors-Runtime-VolatileLogicalTimeManager-ISnapshotHandler-OnSnapshotAsync>d__77")]
private sealed virtual override Task Microsoft.ServiceFabric.Actors.Runtime.VolatileLogicalTimeManager.ISnapshotHandler.OnSnapshotAsync(TimeSpan currentLogicalTime);
    internal static OperationData SerializeToOperationData(DataContractSerializer serializer, CopyOrReplicationOperation copyOrReplicationOperation);
    internal static DataContractSerializer CreateCopyOrReplicationOperationSerializer();
    private static string CreateReminderStorageKey(ActorId actorId, string reminderName);
    private static string CreateReminderStorageKeyPrefix(ActorId actorId, string reminderNamePrefix);
    private static string CreateActorStorageKey(ActorId actorId, string stateName);
    private static string CreateActorStorageKeyPrefix(ActorId actorId, string stateNamePrefix);
    private static string ExtractStateName(ActorId actorId, string storageKey);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<StartStateProviderInitializationAsync>d__85")]
private Task StartStateProviderInitializationAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<CancelStateProviderInitializationAsync>d__86")]
private Task CancelStateProviderInitializationAsync();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<InitializeAndStartLogicalTimeManagerAsync>d__87")]
private Task InitializeAndStartLogicalTimeManagerAsync(CancellationToken cancellationToken);
    private void StopLogicalTimeManager();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<WaitForReadStatusAsync>d__89")]
private Task WaitForReadStatusAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<EnsureLogicalTimeManagerInitializedAsync>d__90")]
private Task EnsureLogicalTimeManagerInitializedAsync(CancellationToken cancellationToken);
    private void LoadActorStateProviderSettings();
    private List`1<ActorStateDataWrapper<ActorStateType, string, ActorStateData>> GetReminderDataWrapperList(IReadOnlyDictionary`2<ActorId, IReadOnlyCollection`1<string>> reminderNames);
    private ReplicatorSettings GetReplicatorSettings();
    private ReplicatorSettings LoadReplicatorSettings();
    private void OnConfigurationPackageModified(object sender, PackageModifiedEventArgs`1<ConfigurationPackage> e);
    private Task ReplicateUpdateAsync(ActorStateType type, string key, ActorStateData data);
    private Task ReplicateStateChangesAsync(ActorStateDataWrapper<ActorStateType, string, ActorStateData> actorStateDataWrapper);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider/<ReplicateStateChangesAsync>d__98")]
private Task ReplicateStateChangesAsync(IEnumerable`1<ActorStateDataWrapper<ActorStateType, string, ActorStateData>> actorStateDataWrapperList);
    [CompilerGeneratedAttribute]
private IEnumerator`1<string> <Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync>b__57_0();
}
internal class Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProviderSettings : ActorStateProviderSettings {
    public static VolatileActorStateProviderSettings LoadFrom(ICodePackageActivationContext activationContext, string configPackageName, string sectionName);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateTable`3 : object {
    private Dictionary`2<TType, Dictionary`2<TKey, TableEntry<TType, TKey, TValue>>> committedEntriesTable;
    private Dictionary`2<long, ReplicationContext<TType, TKey, TValue>> pendingReplicationContexts;
    private LinkedList`1<ListEntry<TType, TKey, TValue>> committedEntriesList;
    private LinkedList`1<ListEntry<TType, TKey, TValue>> uncommittedEntriesList;
    private RwLock rwLock;
    public long GetHighestKnownSequenceNumber();
    public long GetHighestCommittedSequenceNumber();
    public void PrepareUpdate(IEnumerable`1<ActorStateDataWrapper<TType, TKey, TValue>> actorStateDataWrapperList, long sequenceNumber);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateTable`3/<CommitUpdateAsync>d__9")]
public Task CommitUpdateAsync(long sequenceNumber, Exception ex);
    public void ApplyUpdates(IEnumerable`1<ActorStateDataWrapper<TType, TKey, TValue>> actorStateDataList);
    public bool TryGetValue(TType type, TKey key, TValue& value);
    public IEnumerator`1<TKey> GetSortedStorageKeyEnumerator(TType type, Func`2<TKey, bool> filter);
    public IEnumerator`1<TValue> GetSortedValueEnumerator(TType type, Func`2<TKey, bool> filter, Comparison`1<TValue> comparer);
    public IReadOnlyDictionary`2<TKey, TValue> GetActorStateDictionary(TType type);
    public ActorStateEnumerator<TType, TKey, TValue> GetShallowCopiesEnumerator(TType type);
    public ActorStateEnumerator<TType, TKey, TValue> GetShallowCopiesEnumerator(long maxSequenceNumber);
    private void ApplyUpdate_UnderWriteLock(LinkedListNode`1<ListEntry<TType, TKey, TValue>> listNode);
}
internal class Microsoft.ServiceFabric.Actors.Runtime.VolatileLogicalTimeManager : object {
    private static long DefaultLogicalTimeSnapshotIntervalInSeconds;
    private Stopwatch stopwatch;
    private RwLock rwLock;
    private ISnapshotHandler handler;
    private TimeSpan snapshotInterval;
    private Timer timer;
    private TimeSpan lastSnapshot;
    private bool isRunning;
    public TimeSpan CurrentLogicalTime { get; public set; }
    public VolatileLogicalTimeManager(ISnapshotHandler handler);
    public VolatileLogicalTimeManager(ISnapshotHandler handler, TimeSpan snapshotInterval);
    public TimeSpan get_CurrentLogicalTime();
    public void set_CurrentLogicalTime(TimeSpan value);
    public void Start();
    public void Stop();
    internal TimeSpan Test_GetCurrentSnapshot();
    private void ArmTimer();
    private void ArmTimer_CallerHoldsLock();
    private void TimerCallback();
    private TimeSpan SnapshotCurrentLogicalTime();
    private TimeSpan GetCurrentLogicalTime_CallerHoldsLock();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(object o);
    [CompilerGeneratedAttribute]
private void <TimerCallback>b__19_0(Task t);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.ServiceFabric.Actors.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActorDeletedExceptionMessage { get; }
    internal static string ActorGCSettingsNotValid { get; }
    internal static string ActorGCSettingsValueOutOfRange { get; }
    internal static string ActorNotIRemindable { get; }
    internal static string ActorProxyOnlyMethod { get; }
    internal static string ActorStateAlreadyExists { get; }
    internal static string ActorStateAlreadyRemovedCurrentContext { get; }
    internal static string ConcurrencyLockTimedOut { get; }
    internal static string DeleteActorConflictWithLoadReminders { get; }
    internal static string Error_InvalidContinuationToken { get; }
    internal static string ErrorAbstractActorRegistrationNotAllowed { get; }
    internal static string ErrorActorMessageHeadersDeserializationFailed { get; }
    internal static string ErrorActorMethodDoesNotReturnTask { get; }
    internal static string ErrorActorMethodHasGenerics { get; }
    internal static string ErrorActorMethodHasOutRefOptionalParameter { get; }
    internal static string ErrorActorMethodHasVaArgParameter { get; }
    internal static string ErrorActorMethodHasVaArgs { get; }
    internal static string ErrorActorMethodsIsOverloaded { get; }
    internal static string ErrorActorNotFound { get; }
    internal static string ErrorActorStateNotSerializable { get; }
    internal static string ErrorApplicationName { get; }
    internal static string ErrorCasting { get; }
    internal static string ErrorDeserializeRemoteException { get; }
    internal static string ErrorDuplicateMessage { get; }
    internal static string ErrorEventInterface { get; }
    internal static string ErrorEventInterfaceMustBeIActorEvents { get; }
    internal static string ErrorEventMethodDoesNotReturnVoid { get; }
    internal static string ErrorEventMethodHasGenerics { get; }
    internal static string ErrorEventMethodHasOutRefOptionalParameter { get; }
    internal static string ErrorEventMethodHasVaArgParameter { get; }
    internal static string ErrorEventMethodHasVaArgs { get; }
    internal static string ErrorEventMethodsIsOverloaded { get; }
    internal static string ErrorEventNotSupportedByActor { get; }
    internal static string ErrorHighestSequenceNumberLessThanUpToSequenceNumber { get; }
    internal static string ErrorInvalidMethodId { get; }
    internal static string ErrorInvalidReminderAttribute { get; }
    internal static string ErrorMethodDispatcherNotFound { get; }
    internal static string ErrorMethodNotSupported { get; }
    internal static string ErrorMoreThanOneActorInterfaceFound { get; }
    internal static string ErrorNamedActorStateNotFound { get; }
    internal static string ErrorNoActorInterfaceFound { get; }
    internal static string ErrorNoActorServiceNameMultipleImpl { get; }
    internal static string ErrorNoActorServiceNameMultipleImplDerivation { get; }
    internal static string ErrorNoActorServiceNameMultipleInterfaces { get; }
    internal static string ErrorNoActorStateCallableConstructors { get; }
    internal static string ErrorNoActorStateConstructors { get; }
    internal static string ErrorNotAnActor { get; }
    internal static string ErrorNotAnActorInterface_DerivationCheck1 { get; }
    internal static string ErrorNotAnActorInterface_DerivationCheck2 { get; }
    internal static string ErrorNotAnActorInterface_InterfaceCheck { get; }
    internal static string ErrorOnDataLossAsyncReset { get; }
    internal static string ErrorOnRestoreCompletedAsyncReset { get; }
    internal static string ErrorReplicatorSettings { get; }
    internal static string event_ActorActivated { get; }
    internal static string event_ActorDeactivated { get; }
    internal static string event_ActorMethodCallsWaitingForLock { get; }
    internal static string event_ActorMethodStart { get; }
    internal static string event_ActorMethodStop { get; }
    internal static string event_ActorMethodThrewException { get; }
    internal static string event_ActorSaveStateStart { get; }
    internal static string event_ActorSaveStateStop { get; }
    internal static string event_ActorTypeRegistered { get; }
    internal static string event_ActorTypeRegistrationFailed { get; }
    internal static string event_ReplicaChangeRoleFromPrimary { get; }
    internal static string event_ReplicaChangeRoleToPrimary { get; }
    internal static string InvalidActorKind { get; }
    internal static string InvalidCallContextReleased { get; }
    internal static string InvalidIsReadOnlyNonExistingActorState { get; }
    internal static string InvalidReentrancyConfiguration { get; }
    internal static string InvalidReentrantCall { get; }
    internal static string InvalidStateChangeKind { get; }
    internal static string keyword_ActorMethod { get; }
    internal static string keyword_ActorState { get; }
    internal static string keyword_Default { get; }
    internal static string keyword_MetricActorMethodCallsWaitingForLock { get; }
    internal static string ReentrancyModeDisallowed { get; }
    internal static string ReentrantActorDirtyState { get; }
    internal static string ReminderNotFound { get; }
    internal static string ReminderNotSupported { get; }
    internal static string ScriptGeneratorInvalidContent { get; }
    internal static string TimerArgumentOutOfRange { get; }
    internal static string UnexpectedCounterType { get; }
    internal static string UnregisterReminderConflict { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActorDeletedExceptionMessage();
    internal static string get_ActorGCSettingsNotValid();
    internal static string get_ActorGCSettingsValueOutOfRange();
    internal static string get_ActorNotIRemindable();
    internal static string get_ActorProxyOnlyMethod();
    internal static string get_ActorStateAlreadyExists();
    internal static string get_ActorStateAlreadyRemovedCurrentContext();
    internal static string get_ConcurrencyLockTimedOut();
    internal static string get_DeleteActorConflictWithLoadReminders();
    internal static string get_Error_InvalidContinuationToken();
    internal static string get_ErrorAbstractActorRegistrationNotAllowed();
    internal static string get_ErrorActorMessageHeadersDeserializationFailed();
    internal static string get_ErrorActorMethodDoesNotReturnTask();
    internal static string get_ErrorActorMethodHasGenerics();
    internal static string get_ErrorActorMethodHasOutRefOptionalParameter();
    internal static string get_ErrorActorMethodHasVaArgParameter();
    internal static string get_ErrorActorMethodHasVaArgs();
    internal static string get_ErrorActorMethodsIsOverloaded();
    internal static string get_ErrorActorNotFound();
    internal static string get_ErrorActorStateNotSerializable();
    internal static string get_ErrorApplicationName();
    internal static string get_ErrorCasting();
    internal static string get_ErrorDeserializeRemoteException();
    internal static string get_ErrorDuplicateMessage();
    internal static string get_ErrorEventInterface();
    internal static string get_ErrorEventInterfaceMustBeIActorEvents();
    internal static string get_ErrorEventMethodDoesNotReturnVoid();
    internal static string get_ErrorEventMethodHasGenerics();
    internal static string get_ErrorEventMethodHasOutRefOptionalParameter();
    internal static string get_ErrorEventMethodHasVaArgParameter();
    internal static string get_ErrorEventMethodHasVaArgs();
    internal static string get_ErrorEventMethodsIsOverloaded();
    internal static string get_ErrorEventNotSupportedByActor();
    internal static string get_ErrorHighestSequenceNumberLessThanUpToSequenceNumber();
    internal static string get_ErrorInvalidMethodId();
    internal static string get_ErrorInvalidReminderAttribute();
    internal static string get_ErrorMethodDispatcherNotFound();
    internal static string get_ErrorMethodNotSupported();
    internal static string get_ErrorMoreThanOneActorInterfaceFound();
    internal static string get_ErrorNamedActorStateNotFound();
    internal static string get_ErrorNoActorInterfaceFound();
    internal static string get_ErrorNoActorServiceNameMultipleImpl();
    internal static string get_ErrorNoActorServiceNameMultipleImplDerivation();
    internal static string get_ErrorNoActorServiceNameMultipleInterfaces();
    internal static string get_ErrorNoActorStateCallableConstructors();
    internal static string get_ErrorNoActorStateConstructors();
    internal static string get_ErrorNotAnActor();
    internal static string get_ErrorNotAnActorInterface_DerivationCheck1();
    internal static string get_ErrorNotAnActorInterface_DerivationCheck2();
    internal static string get_ErrorNotAnActorInterface_InterfaceCheck();
    internal static string get_ErrorOnDataLossAsyncReset();
    internal static string get_ErrorOnRestoreCompletedAsyncReset();
    internal static string get_ErrorReplicatorSettings();
    internal static string get_event_ActorActivated();
    internal static string get_event_ActorDeactivated();
    internal static string get_event_ActorMethodCallsWaitingForLock();
    internal static string get_event_ActorMethodStart();
    internal static string get_event_ActorMethodStop();
    internal static string get_event_ActorMethodThrewException();
    internal static string get_event_ActorSaveStateStart();
    internal static string get_event_ActorSaveStateStop();
    internal static string get_event_ActorTypeRegistered();
    internal static string get_event_ActorTypeRegistrationFailed();
    internal static string get_event_ReplicaChangeRoleFromPrimary();
    internal static string get_event_ReplicaChangeRoleToPrimary();
    internal static string get_InvalidActorKind();
    internal static string get_InvalidCallContextReleased();
    internal static string get_InvalidIsReadOnlyNonExistingActorState();
    internal static string get_InvalidReentrancyConfiguration();
    internal static string get_InvalidReentrantCall();
    internal static string get_InvalidStateChangeKind();
    internal static string get_keyword_ActorMethod();
    internal static string get_keyword_ActorState();
    internal static string get_keyword_Default();
    internal static string get_keyword_MetricActorMethodCallsWaitingForLock();
    internal static string get_ReentrancyModeDisallowed();
    internal static string get_ReentrantActorDirtyState();
    internal static string get_ReminderNotFound();
    internal static string get_ReminderNotSupported();
    internal static string get_ScriptGeneratorInvalidContent();
    internal static string get_TimerArgumentOutOfRange();
    internal static string get_UnexpectedCounterType();
    internal static string get_UnregisterReminderConflict();
}
