[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.ServiceFabric.Services.Communication.AspNetCore.ApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseServiceFabricMiddleware(IApplicationBuilder builder, string urlSuffix);
    [ExtensionAttribute]
public static IApplicationBuilder UseServiceFabricReverseProxyIntegrationMiddleware(IApplicationBuilder builder);
}
public abstract class Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener : object {
    private ServiceContext serviceContext;
    private ICommunicationListener internalListener;
    private string urlSuffix;
    private bool configuredToUseUniqueServiceUrl;
    public ServiceContext ServiceContext { get; }
    public string UrlSuffix { get; }
    public AspNetCoreCommunicationListener(ServiceContext serviceContext, Func`3<string, AspNetCoreCommunicationListener, IWebHost> build);
    public AspNetCoreCommunicationListener(ServiceContext serviceContext, Func`3<string, AspNetCoreCommunicationListener, IHost> build);
    public ServiceContext get_ServiceContext();
    public string get_UrlSuffix();
    public virtual void Abort();
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    public virtual Task`1<string> OpenAsync(CancellationToken cancellationToken);
    internal void ConfigureToUseUniqueServiceUrl();
    protected internal abstract virtual string GetListenerUrl();
    protected EndpointResourceDescription GetEndpointResourceDescription(string endpointName);
}
internal class Microsoft.ServiceFabric.Services.Communication.AspNetCore.GenericHostCommunicationListener : object {
    private Func`3<string, AspNetCoreCommunicationListener, IHost> build;
    private ServiceContext serviceContext;
    private AspNetCoreCommunicationListener listener;
    private IHost host;
    public GenericHostCommunicationListener(Func`3<string, AspNetCoreCommunicationListener, IHost> build, AspNetCoreCommunicationListener listener);
    public sealed virtual void Abort();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Communication.AspNetCore.GenericHostCommunicationListener/<CloseAsync>d__6")]
public sealed virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Communication.AspNetCore.GenericHostCommunicationListener/<OpenAsync>d__7")]
public sealed virtual Task`1<string> OpenAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.ServiceFabric.Services.Communication.AspNetCore.PathStringExtensions : object {
    [ExtensionAttribute]
internal static bool StartsWithSegments(PathString pathString, PathString other, PathString& matched, PathString& remaining);
}
[FlagsAttribute]
public enum Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions : Enum {
    public int value__;
    public static ServiceFabricIntegrationOptions None;
    public static ServiceFabricIntegrationOptions UseUniqueServiceUrl;
    public static ServiceFabricIntegrationOptions UseReverseProxyIntegration;
}
public class Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware : object {
    private RequestDelegate next;
    private string urlSuffix;
    public ServiceFabricMiddleware(RequestDelegate next, string urlSuffix);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext context);
}
public class Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricReverseProxyIntegrationMiddleware : object {
    private static string XServiceFabricHeader;
    private static string XServiceFabricResourceNotFoundValue;
    private RequestDelegate next;
    public ServiceFabricReverseProxyIntegrationMiddleware(RequestDelegate next);
    public Task Invoke(HttpContext context);
}
internal class Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricSetupFilter : object {
    private string urlSuffix;
    private ServiceFabricIntegrationOptions options;
    internal ServiceFabricSetupFilter(string urlSuffix, ServiceFabricIntegrationOptions options);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.ServiceFabric.Services.Communication.AspNetCore.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string EndpointNameNotFoundExceptionMessage { get; }
    internal static string ErrorNoUrlFromAspNetCore { get; }
    internal static string HostNullExceptionMessage { get; }
    internal static string WebHostNullExceptionMessage { get; }
    internal static string WebServerNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_EndpointNameNotFoundExceptionMessage();
    internal static string get_ErrorNoUrlFromAspNetCore();
    internal static string get_HostNullExceptionMessage();
    internal static string get_WebHostNullExceptionMessage();
    internal static string get_WebServerNotFound();
}
[ExtensionAttribute]
public static class Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostBuilderServiceFabricExtension : object {
    private static string SettingName;
    private static WebHostBuilderServiceFabricExtension();
    [ExtensionAttribute]
public static IWebHostBuilder UseServiceFabricIntegration(IWebHostBuilder hostBuilder, AspNetCoreCommunicationListener listener, ServiceFabricIntegrationOptions options);
}
internal class Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostCommunicationListener : object {
    private Func`3<string, AspNetCoreCommunicationListener, IWebHost> build;
    private ServiceContext serviceContext;
    private AspNetCoreCommunicationListener listener;
    private IWebHost host;
    public WebHostCommunicationListener(Func`3<string, AspNetCoreCommunicationListener, IWebHost> build, AspNetCoreCommunicationListener listener);
    public sealed virtual void Abort();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostCommunicationListener/<CloseAsync>d__6")]
public sealed virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostCommunicationListener/<OpenAsync>d__7")]
public sealed virtual Task`1<string> OpenAsync(CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
