internal class Microsoft.ServiceFabric.ReliableCollection.Common.GCRoot : object {
    private static int objArrSize;
    private int count;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) capacity;
    private List`1<Object[]> objectList;
    private ConcurrentQueue`1<int> freeIndexes;
    public static IntPtr InvalidHandle;
    private Uri name;
    public GCRoot(Uri name);
    private static GCRoot();
    public int Add(object o);
    public void Remove(int index);
    public object Get(int index);
}
public interface Microsoft.ServiceFabric.ReliableCollection.Common.IAsyncEnumerable`1 {
    public abstract virtual Task`1<IAsyncEnumerator`1<T>> GetAsyncEnumerator(ITransaction txn);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.InteropLibs : object {
    internal static string ServiceLib;
    internal static string ReliableCollection;
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeBuffer : ValueType {
    internal IntPtr bytes;
    internal UInt32 length;
    internal IntPtr handle;
    internal static void Release(IntPtr handle);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeCancellationTokenSource : object {
    internal static void Release(IntPtr handle);
    internal static void Cancel(IntPtr nativeCts);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeConcurrentQueue : object {
    internal static int EnqueueAsync(IntPtr queue, IntPtr txn, IntPtr objhandle, Byte[] bytes, UInt32 bytesLength, long timeout, IntPtr* nativeCts, CallbackDelegateVoid callback, IntPtr tcshandle, Boolean& synchronousComplete);
    internal static int DequeueAsync(IntPtr queue, IntPtr txn, long timeout, IntPtr& objHandle, NativeBuffer* value, IntPtr* nativeCts, Boolean& succeeded, CallbackDelegateDequeueAsync callback, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int GetCount(IntPtr queue, Int64& count);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeStateProvider : object {
    internal static void AddRef(IntPtr stateProvider);
    internal static void Release(IntPtr stateProvider);
    internal static int GetInfo(IntPtr stateProvider, string lang, StateProviderInfo& stateProviderInfo);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeTest : object {
    private static string TestServiceLib;
    internal static void Initialize(string testName, bool allowRevovery, IntPtr& txnReplicator, IntPtr& partition, Guid& partitionId, Int64& replicaId);
    internal static void Cleanup();
    internal static void ResetReplica(IntPtr& txnReplicator);
    internal static void OpenReplica();
    internal static void RequestCheckpointAfterNextTransaction();
    internal static void Test_UseEnv(bool enable);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeTransaction : object {
    internal static void Release(IntPtr handle);
    internal static void Dispose(IntPtr handle);
    internal static void AddRef(IntPtr handle);
    internal static void Abort(IntPtr txn);
    internal static int CommitAsync(IntPtr nativetxn, CommitAsyncCompletionCallback _callbackDelegate, IntPtr tcshandle, Boolean& synchronousComplete);
    internal static int GetInfo(IntPtr nativetxn, TransactionInfo& info);
    internal static int GetVisibilitySequenceNumberAsync(IntPtr nativetxn, Int64& vsn, GetVisibilitySequenceNumberAsyncCompletionCallback callback, IntPtr tcshandle, Boolean& synchronousComplete);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeTransactionalReplicator : object {
    internal static int NewTransaction(IntPtr nativeHandle, IntPtr& txn);
    internal static int GetOrCreateStateProviderAsync(IntPtr nativeHandle, IntPtr txnHandle, string name, string lang, StateProviderInfo* stateProviderInfo, long timeout, IntPtr* nativeCancellationTokenSource, IntPtr& store, Boolean& alreadyExists, GetOrCreateStateProviderAsyncCallback del, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int GetStateProvider(IntPtr nativeHandle, string name, IntPtr& store);
    internal static int RemoveStateProviderAsyncInternal(IntPtr nativeHandle, IntPtr txnHandle, string name, long timeout, IntPtr* nativeCancellationTokenSource, AsyncCompletionCallback del, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int BackupAsync2(IntPtr nativeHandle, UploadAsyncCallback2 uploadAsyncCallback, Backup_Option backupOption, long timeout, IntPtr* nativeCancellationTokenSource, BackupAsyncCompletionCallback del, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int RestoreAsync(IntPtr nativeHandle, string backupFolder, Restore_Policy restore_policy, long timeout, IntPtr* nativeCancellationTokenSource, AsyncCompletionCallback del, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static void Release(IntPtr nativeHandle);
    internal static int CreateEnumerator(IntPtr nativeHandle, bool parentsOnly, IntPtr& enumeratorHandle);
    internal static int GetInfo(IntPtr nativeHandle, TxnReplicatorInfo& info);
    internal static int SetNotifyStateManagerChangeCallback(IntPtr replicatorHandle, NotifyStateManagerChangeCallback callback, CleanupContextCallback cleanupCallback, IntPtr context);
    internal static int SetNotifyTransactionChangeCallback(IntPtr replicatorHandle, NotifyTransactionChangeCallback callback, CleanupContextCallback cleanupCallback, IntPtr context);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.NativeTStore : object {
    internal static int AddAsync(IntPtr store, IntPtr txn, string key, IntPtr objhandle, Byte[] bytes, UInt32 bytesLength, long timeout, IntPtr* nativeCts, CallbackDelegateVoid callback, IntPtr tcshandle, Boolean& synchronousComplete);
    internal static int ConditionalGetAsync(IntPtr store, IntPtr txn, string key, long timeout, UInt32 lockmode, IntPtr& objHandle, NativeBuffer* value, Int64& versionSequenceNumber, IntPtr* nativeCts, Boolean& found, CallbackDelegateGetAsync callback, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int ConditionalUpdateAsync(IntPtr store, IntPtr txn, string key, IntPtr objhandle, Byte[] bytes, UInt32 bytesLength, long timeout, IntPtr* nativeCts, long conditionalVersion, Boolean& updated, CallbackDelegateUpdateAsync callback, IntPtr tcshandle, Boolean& synchronousComplete);
    internal static int ConditionalRemoveAsync(IntPtr store, IntPtr txn, string key, long timeout, IntPtr* nativeCts, long versionSequenceNumber, Boolean& removed, CallbackDelegateRemoveAsync callback, IntPtr tcshandle, Boolean& synchronousComplete);
    internal static void Release(IntPtr store);
    internal static void AddRef(IntPtr store);
    internal static int GetCount(IntPtr store, Int64& count);
    internal static int CreateKeyEnumeratorAsync(IntPtr store, IntPtr txn, string firstKey, string lastKey, IntPtr& enumerator, CallbackDelegateCreateEnumerator callback, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int CreateEnumeratorAsync(IntPtr store, IntPtr txn, IntPtr& enumerator, CallbackDelegateCreateEnumerator callback, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int ContainsKeyAsync(IntPtr store, IntPtr txn, string key, long timeout, UInt32 lockmode, IntPtr* nativeCts, Boolean& found, CallbackDelegateContainsKeyAsync callback, IntPtr tcsHandle, Boolean& synchronousComplete);
    internal static int SetNotifyStoreChangeCallback(IntPtr store, NotifyStoreChangeCallback callback, CleanupContextCallback cleanupCallback, IntPtr context);
    internal static int SetNotifyStoreChangeCallbackMask(IntPtr store, NotifyStoreChangeCallbackMask mask);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.SafeBufferHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeBufferHandle(IntPtr preexistingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.Service : object {
    internal static int ReliableCollectionService_Initialize(string serviceTypeName, int port, AddPartitionContextDelegate addCallback, RemovePartitionContextDelegate removeCallback);
    internal static int ReliableCollection_Initialize(ushort apiVersion);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.StateProviderInfo : ValueType {
    public UInt32 size;
    public StateProviderKind kind;
    public IntPtr langMetadata;
    public static StateProviderInfo FromStateProvider(TraceId traceId, IntPtr stateProviderHandle, Uri name, StateProviderKind expectedKind);
    public void DecodeForTStore(TraceId traceId, String& keyType, String& valueType);
    public static string EncodeForTStore(string keyType, string valueType);
    public static string EncodeForTStoreCompat(string keyType, string valueType);
    public void DecodeForTConcurrentQueue(String& valueType);
    public static string EncodeForTConcurrentQueue(string valueType);
    private static string GetSimpleTypeName(string typeName);
}
internal enum Microsoft.ServiceFabric.ReliableCollection.Common.Interop.StateProviderKind : Enum {
    public UInt32 value__;
    public static StateProviderKind TStore;
    public static StateProviderKind ConcurrentQueue;
    public static StateProviderKind ReliableDictionary_Compat;
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.TaskCompletionSourceBase`1 : TaskCompletionSource`1<T> {
    private string _errorMessage;
    private TraceId _traceId;
    internal TraceId TraceId { get; }
    internal string ErrorMessage { get; }
    public TaskCompletionSourceBase`1(TraceId traceId, string errorMessage);
    public void SetTaskResult(T value);
    public void SetTaskException(Exception exception);
    internal TraceId get_TraceId();
    internal string get_ErrorMessage();
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.Interop.TaskCompletionSourceInterop`1 : TaskCompletionSourceBase`1<T> {
    public TaskCompletionSourceInterop`1(TraceId traceId, string errorMessage);
    public virtual void SetResult(int hresult, T value);
}
internal interface Microsoft.ServiceFabric.ReliableCollection.Common.IOwnerFactory {
    public abstract virtual object CreateDictionary(TStore`1<TValue> store);
    public abstract virtual object CreateConcurrentQueue(TConcurrentQueue`1<TValue> queue);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.NativeCancellationTokenSourceHandle : object {
    private IntPtr handle;
    public IntPtr Handle { get; public set; }
    public NativeCancellationTokenSourceHandle(IntPtr handle);
    public void Cancel();
    public IntPtr get_Handle();
    public void set_Handle(IntPtr value);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.NativeStateProviderBase : NativeWrapper {
    private ReliableIdentityCache`1<IReliableState> _cache;
    private GCRoot _gcroot;
    private Uri name;
    private Guid _partitionId;
    private long _replicaId;
    [CompilerGeneratedAttribute]
private TraceId <TraceId>k__BackingField;
    internal GCRoot GcRoot { get; internal set; }
    public Uri Name { get; }
    internal TraceId TraceId { get; private set; }
    internal NativeStateProviderBase(IntPtr stateProvider, ReliableIdentityCache`1<IReliableState> cache, Uri name, GCRoot gcRoot, Guid partitionId, long replicaId);
    internal GCRoot get_GcRoot();
    internal void set_GcRoot(GCRoot value);
    public sealed virtual Uri get_Name();
    [CompilerGeneratedAttribute]
private void set_TraceId(TraceId value);
    [CompilerGeneratedAttribute]
internal TraceId get_TraceId();
    protected virtual void DisposeImpl(bool isDisposing);
    protected virtual void ReleaseHandle(IntPtr handle);
}
internal abstract class Microsoft.ServiceFabric.ReliableCollection.Common.NativeWrapper : object {
    private Object modreq(System.Runtime.CompilerServices.IsVolatile) _owner;
    private bool _ownsHandle;
    private IntPtr _handle;
    internal IntPtr NativeHandle { get; }
    internal object Owner { get; }
    internal NativeWrapper(IntPtr handle, bool ownsHandle);
    internal IntPtr get_NativeHandle();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void DisposeInternal(bool isDisposing);
    protected abstract virtual void ReleaseHandle(IntPtr handle);
    protected virtual void DisposeImpl(bool isDisposing);
    internal object get_Owner();
    internal object GetOrCreateOwner(Func`1<object> createOwnerCallback);
    internal virtual object GetOrCreateOwner(IOwnerFactory ownerFactory);
}
[EventSourceAttribute]
internal class Microsoft.ServiceFabric.ReliableCollection.Common.ReliableCollectionEventSource : EventSource {
    public static ReliableCollectionEventSource Log;
    private static ReliableCollectionEventSource();
    [EventAttribute("1")]
public void InteropError(string id, long replicaId, string message, int errorCode);
    [EventAttribute("2")]
public void Error(string id, long replicaId, string message);
    [EventAttribute("3")]
public void Info(string id, long replicaId, string message);
    [EventAttribute("4")]
public void InteropWarning(string id, long replicaId, string message, int errorCode);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.ReliableIdentityCache`1 : object {
    private ConcurrentDictionary`2<IntPtr, WeakReference`1<T>> m_cache;
    private ICollection`1<KeyValuePair`2<IntPtr, WeakReference`1<T>>> m_cacheAsCollection;
    internal T GetOrCreate(IntPtr& pHandle, Func`2<IntPtr, T> createCallback);
    internal void Add(IntPtr pHandle, T obj);
    internal T Get(IntPtr pHandle);
    internal void Remove(IntPtr pHandle, object toRemove);
    internal void ClearAll();
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.SerializationHelper : object {
    internal static Byte[] Serialize(IStateSerializer`1<TValue> serializer, TValue value);
    internal static TValue Deserialize(IStateSerializer`1<TValue> serializer, IntPtr bytes, UInt32 bytesLength);
    internal static UnmanagedMemoryStream GetMemoryStream(IntPtr nativeBytePtr, UInt32 bytesLength);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Common.TraceId : ValueType {
    public string Id;
    public long replicaId;
    public TraceId(string Id, long replicaId);
}
internal static class Microsoft.ServiceFabric.ReliableCollection.Common.Utility : object {
    internal static TaskCreationOptions TASK_CREATION_OPTIONS;
    public static void ThrowIfFailed(int hresult, TraceId traceId, string errorMessage);
    public static bool Failed(int hresult);
    public static Exception ConvertHResultToExceptionIfFailed(int hresult, TraceId traceId, string errorMessage);
}
internal interface Microsoft.ServiceFabric.ReliableCollection.Queue.ITaskCompletionSourceDequeueAsync {
    public abstract virtual void SetResult(int hresult, bool hasValue, IntPtr objHandle, IntPtr bytes, UInt32 bytesLength);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Queue.TaskCompletionSourceDequeueAsync`1 : TaskCompletionSourceBase`1<ConditionalValue`1<TValue>> {
    private TConcurrentQueue`1<TValue> _queue;
    public TaskCompletionSourceDequeueAsync`1(TConcurrentQueue`1<TValue> queue);
    public sealed virtual void SetResult(int hresult, bool hasValue, IntPtr objHandle, IntPtr bytes, UInt32 bytesLength);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Queue.TConcurrentQueue`1 : NativeStateProviderBase {
    private static CallbackDelegateVoid enqueueAsyncCompletionCallback;
    private static CallbackDelegateDequeueAsync dequeueAsyncCompletionCallack;
    [CompilerGeneratedAttribute]
private IStateSerializer`1<TValue> <ValueSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceId <TraceId>k__BackingField;
    public long Count { get; }
    internal IStateSerializer`1<TValue> ValueSerializer { get; private set; }
    internal TraceId TraceId { get; private set; }
    internal TConcurrentQueue`1(IntPtr queue, ReliableIdentityCache`1<IReliableState> cache, Uri name, GCRoot gcRoot, IStateSerializer`1<TValue> serializer, Guid partitionId, long replicaId);
    private static TConcurrentQueue`1();
    internal static TConcurrentQueue`1<TValue> ValidateAndCreate(IntPtr stateProviderHandle, ReliableIdentityCache`1<IReliableState> cache, Uri name, GCRoot gcRoot, IStateSerializer`1<TValue> serializer, Guid partitionId, long replicaId);
    public long get_Count();
    public Task EnqueueAsync(Transaction txn, TValue value, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public Task`1<ConditionalValue`1<TValue>> DequeueAsync(Transaction txn, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    internal virtual object GetOrCreateOwner(IOwnerFactory ownerFactory);
    [CompilerGeneratedAttribute]
private void set_ValueSerializer(IStateSerializer`1<TValue> value);
    [CompilerGeneratedAttribute]
internal IStateSerializer`1<TValue> get_ValueSerializer();
    [CompilerGeneratedAttribute]
private void set_TraceId(TraceId value);
    [CompilerGeneratedAttribute]
internal TraceId get_TraceId();
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.BackupAsyncCallbackContext : object {
    public TaskCompletionSourceInterop`1<object> tcs;
    public CancellationToken cancellationToken;
    public Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback;
    public BackupAsyncCallbackContext(TaskCompletionSourceInterop`1<object> tcs, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
}
internal interface Microsoft.ServiceFabric.ReliableCollection.Replicator.IStateSerializerResolver {
    public abstract virtual IStateSerializer`1<T> GetStateSerializer(Uri name);
}
internal interface Microsoft.ServiceFabric.ReliableCollection.Replicator.ITaskCompletionSourceGetOrAddStateProviderAsync {
    public abstract virtual void SetResult(int hresult, IntPtr nativeStateProvider);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.ReplicatorSettings : ValueType {
    public UInt32 Flags;
    public UInt32 RetryIntervalMilliseconds;
    public UInt32 BatchAcknowledgementIntervalMilliseconds;
    public IntPtr ReplicatorAddress;
    public bool RequireServiceAck;
    public UInt32 InitialReplicationQueueSize;
    public UInt32 MaxReplicationQueueSize;
    public UInt32 InitialCopyQueueSize;
    public UInt32 MaxCopyQueueSize;
    public IntPtr SecurityCredentials;
    public UInt32 MaxReplicationQueueMemorySize;
    public bool SecondaryClearAcknowledgedOperations;
    public UInt32 MaxReplicationMessageSize;
    public bool UseStreamFaultsAndEndOfStreamOperationAck;
    public UInt32 InitialPrimaryReplicationQueueSize;
    public UInt32 MaxPrimaryReplicationQueueSize;
    public UInt32 MaxPrimaryReplicationQueueMemorySize;
    public UInt32 InitialSecondaryReplicationQueueSize;
    public UInt32 MaxSecondaryReplicationQueueSize;
    public UInt32 MaxSecondaryReplicationQueueMemorySize;
    public UInt32 PrimaryWaitForPendingQuorumsTimeoutMilliseconds;
    public IntPtr ReplicatorListenAddress;
    public IntPtr ReplicatorPublishAddress;
}
internal enum Microsoft.ServiceFabric.ReliableCollection.Replicator.SerializationMode : Enum {
    public int value__;
    public static SerializationMode Managed;
    public static SerializationMode Native;
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.TaskCompletionSourceGetOrAddTConcurrentQueueAsync`1 : TaskCompletionSourceBase`1<TConcurrentQueue`1<TValue>> {
    private TransactionalReplicator _txnReplicator;
    private Uri _name;
    private IStateSerializer`1<TValue> _serializer;
    public TaskCompletionSourceGetOrAddTConcurrentQueueAsync`1(TransactionalReplicator transactionalReplicator, Uri name, IStateSerializer`1<TValue> serializer);
    public sealed virtual void SetResult(int hresult, IntPtr nativeStateProvider);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.TaskCompletionSourceGetOrAddTStoreAsync`1 : TaskCompletionSourceBase`1<TStore`1<TValue>> {
    private TransactionalReplicator _txnReplicator;
    private Uri _name;
    private IStateSerializer`1<TValue> _serializer;
    public TaskCompletionSourceGetOrAddTStoreAsync`1(TransactionalReplicator transactionalReplicator, Uri name, IStateSerializer`1<TValue> serializer);
    public sealed virtual void SetResult(int hresult, IntPtr nativeStateProvider);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.TaskCompletionSourceRemoveAsync : TaskCompletionSourceInterop`1<object> {
    private TransactionalReplicator txnReplicator;
    private Uri stateProviderName;
    public TaskCompletionSourceRemoveAsync(TransactionalReplicator transactionalReplicator, Uri name);
    public virtual void SetResult(int hresult, object o);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.Transaction : NativeWrapper {
    private static CommitAsyncCompletionCallback commitAsyncCompletionCallback;
    private static GetVisibilitySequenceNumberAsyncCompletionCallback getVisibilitySequenceNumberAsyncCompletionCallback;
    [CompilerGeneratedAttribute]
private TransactionalReplicator <TransactionalReplicator>k__BackingField;
    private ReliableIdentityCache`1<Transaction> _cache;
    public long CommitSequenceNumber { get; }
    public long TransactionId { get; }
    internal TransactionalReplicator TransactionalReplicator { get; internal set; }
    private Transaction(TransactionalReplicator transactionalReplicator, IntPtr nativetxn, ReliableIdentityCache`1<Transaction> cache);
    private static Transaction();
    internal static Transaction CreateTransaction(IntPtr& pHandle, TransactionalReplicator replicator, ReliableIdentityCache`1<Transaction> cache);
    internal static Transaction GetOrCreateTransaction(IntPtr pTransaction, TransactionalReplicator replicator, ReliableIdentityCache`1<Transaction> cache);
    protected virtual void ReleaseHandle(IntPtr pHandle);
    public Task CommitAsync();
    public void Abort();
    public Task`1<long> GetVisibilitySequenceNumberAsync();
    protected virtual void DisposeImpl(bool isDisposing);
    public long get_CommitSequenceNumber();
    public long get_TransactionId();
    private TransactionInfo GetInfo();
    [CompilerGeneratedAttribute]
internal TransactionalReplicator get_TransactionalReplicator();
    [CompilerGeneratedAttribute]
internal void set_TransactionalReplicator(TransactionalReplicator value);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.TransactionalReplicator : NativeWrapper {
    private static GetOrCreateStateProviderAsyncCallback getOrCreateStateProviderAsyncCompletionCallback;
    private static UploadAsyncCallback2 uploadAsyncCallback2;
    private static BackupAsyncCompletionCallback backupAsyncCompletionCallback;
    private static AsyncCompletionCallback asyncCompletionCallback;
    private static NotifyStateManagerChangeCallback s_notifyStateManagerChangeCallback;
    private static CleanupContextCallback s_cleanupContextCallback;
    private static NotifyTransactionChangeCallback s_notifyTransactionChangeCallback;
    private TimeSpan DefaultTimeout;
    private IntPtr partitionHandle;
    private Guid partitionId;
    private long replicaId;
    private ConcurrentDictionary`2<Uri, GCRoot> gcRootMap;
    private ConcurrentDictionary`2<Type, ReliableIdentityCache`1<IReliableState>> typedStateProviderCache;
    private ReliableIdentityCache`1<Transaction> transactionCache;
    private static string CSHARP;
    private static MethodInfo _getTStoreMethodInfo;
    private static MethodInfo _getTConcurrentQueueMethodInfo;
    private TraceId traceId;
    private SerializationMode serializationMode;
    internal Guid PartitionId { get; }
    internal long ReplicaId { get; }
    internal TraceId TraceId { get; }
    public TransactionalReplicator(IntPtr nativeHandle, IntPtr partitionHandle, Guid partitionId, long replicaId, bool ownsHandle, bool useIdentityCache, SerializationMode serializationMode);
    private static TransactionalReplicator();
    internal Transaction CreateTransaction();
    internal Transaction GetTransaction(IntPtr txnHandle);
    internal Task`1<TStore`1<TValue>> GetOrAddTStoreAsync(Transaction txn, Uri name, IStateSerializer`1<TValue> serializer, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    internal Task`1<TConcurrentQueue`1<TValue>> GetOrAddTConcurrentQueueAsync(Transaction txn, Uri name, IStateSerializer`1<TValue> serializer, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public TStore`1<TValue> GetTStore(Uri name, IStateSerializer`1<TValue> serializer);
    internal TConcurrentQueue`1<TValue> GetTConcurrentQueue(Uri name, IStateSerializer`1<TValue> serializer);
    public TStore`1<TValue> TryGetTStore(Uri name, IStateSerializer`1<TValue> serializer);
    public TConcurrentQueue`1<TValue> TryGetTConcurrentQueue(Uri name, IStateSerializer`1<TValue> serializer);
    private TStore`1<TValue> GetTStore(IntPtr& store, Uri name, IStateSerializer`1<TValue> serializer, bool shouldAddRef);
    private TConcurrentQueue`1<TValue> GetTConcurrentQueue(IntPtr& stateProvider, Uri name, IStateSerializer`1<TValue> serializer, bool shouldAddRef);
    internal TStore`1<TValue> GetTStore(IntPtr& stateProvider, Uri name, IStateSerializer`1<TValue> serializer);
    internal TConcurrentQueue`1<TValue> GetTConcurrentQueue(IntPtr& stateProvider, Uri name, IStateSerializer`1<TValue> serializer);
    internal TStore`1<TValue> GetTStore(IntPtr store, Uri name, IStateSerializer`1<TValue> serializer);
    internal TConcurrentQueue`1<TValue> GetTConcurrentQueue(IntPtr stateProvider, Uri name, IStateSerializer`1<TValue> serializer);
    private TStore`1<TValue> GetOrCreateTStoreFromIdentityCache(IntPtr& store, Uri name, IStateSerializerResolver stateSerializerResolver, bool shouldAddRef);
    private TConcurrentQueue`1<TValue> GetOrCreateTConcurrentQueueFromIdentityCache(IntPtr& stateProvider, Uri name, IStateSerializerResolver stateSerializerResolver, bool shouldAddRef);
    private IReliableState GetReliableState(IntPtr& stateProviderHandle, Uri name, IStateSerializerResolver stateSerializerResolver, bool shouldAddRef);
    internal IReliableState GetReliableState(IntPtr& stateProviderHandle, Uri name, IStateSerializerResolver stateSerializerResolver);
    internal IReliableState GetReliableState(IntPtr stateProviderHandle, Uri name, IStateSerializerResolver stateSerializerResolver);
    internal Task RemoveAsync(Transaction txn, Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public TransactionalReplicatorEnumerator GetAsyncEnumerator();
    public Task BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    internal Task RestoreAsync(string backupFolder, RestorePolicy restorePolicy, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public void SetNotifyStateManagerChangeCallback(object context, NotifyStateManagerChangeCallbackWithContext callback);
    public void UnsetNotifyStateManagerChangeCallback();
    public void SetNotifyTransactionChangeCallback(object context, NotifyTransactionChangeCallbackWithContext callback);
    public void UnsetNotifyTransactionChangeCallback();
    public long GetCurrentDataLossNumber();
    public long GetLastCommittedSequenceNumber();
    internal GCRoot dictionaryGCRoot(Uri name);
    internal bool removeDictionaryGCRoot(Uri name);
    internal Guid get_PartitionId();
    internal long get_ReplicaId();
    internal TraceId get_TraceId();
    protected virtual void DisposeImpl(bool isDisposing);
    protected virtual void ReleaseHandle(IntPtr handle);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Replicator.TransactionalReplicatorEnumerator : NativeWrapper {
    [CompilerGeneratedAttribute]
private IReliableState <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionalReplicator <TxnReplicator>k__BackingField;
    public IReliableState Current { get; private set; }
    internal TransactionalReplicator TxnReplicator { get; private set; }
    public TransactionalReplicatorEnumerator(IntPtr nativeHandle, TransactionalReplicator transactionalReplicator, bool addRefNeeded);
    [CompilerGeneratedAttribute]
public IReliableState get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(IReliableState value);
    protected virtual void ReleaseHandle(IntPtr handle);
    public Task`1<bool> MoveNextAsync(IStateSerializerResolver stateSerializerResolver, CancellationToken cancellationToken);
    public void Reset();
    [CompilerGeneratedAttribute]
internal TransactionalReplicator get_TxnReplicator();
    [CompilerGeneratedAttribute]
private void set_TxnReplicator(TransactionalReplicator value);
}
internal interface Microsoft.ServiceFabric.ReliableCollection.Store.ITaskCompletionSourceEnumeratorMoveNextAsync {
    public abstract virtual void SetResult(int hresult, bool advanced, IntPtr keyBuffer, IntPtr objHandle, IntPtr valueBytes, UInt32 valueLength, long versionSequenceNumber);
}
internal interface Microsoft.ServiceFabric.ReliableCollection.Store.ITaskCompletionSourceGetAsync {
    public abstract virtual void SetResult(int hresult, bool found, IntPtr objHandle, IntPtr bytes, UInt32 bytesLength, long versionSequenceNumber);
}
internal interface Microsoft.ServiceFabric.ReliableCollection.Store.ITaskCompletionSourceGetAsyncEnumerator {
    public abstract virtual void SetResult(int hresult, IntPtr nativeEnumerator);
}
public class Microsoft.ServiceFabric.ReliableCollection.Store.KeyValueTuple`1 : ValueType {
    private string _key;
    private V _value;
    private long _versionSequenceNumber;
    public string Key { get; public set; }
    public V Value { get; public set; }
    public long VersionSequenceNumber { get; public set; }
    public KeyValueTuple`1(string key, V value, long versionSequenceNumber);
    public string get_Key();
    public void set_Key(string value);
    public V get_Value();
    public void set_Value(V value);
    public long get_VersionSequenceNumber();
    public void set_VersionSequenceNumber(long value);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Store.StringKeysEnumerator : object {
    private bool disposedValue;
    private IntPtr _enumerator;
    private string current;
    private TraceId _traceId;
    public string Current { get; internal set; }
    private object System.Collections.IEnumerator.Current { get; }
    public StringKeysEnumerator(IntPtr nativeEnumerator, TraceId traceId);
    public sealed virtual string get_Current();
    internal void set_Current(string value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal class Microsoft.ServiceFabric.ReliableCollection.Store.TaskCompletionSourceEnumeratorMoveNextAsync`1 : TaskCompletionSourceBase`1<bool> {
    private TStoreKeyValueEnumerator`1<V> _enumerator;
    internal TaskCompletionSourceEnumeratorMoveNextAsync`1(TStoreKeyValueEnumerator`1<V> enumerator);
    public sealed virtual void SetResult(int hresult, bool advanced, IntPtr keyBuffer, IntPtr objHandle, IntPtr valueBytes, UInt32 valueLength, long versionSequenceNumber);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Store.TaskCompletionSourceGetAsync`1 : TaskCompletionSourceBase`1<ConditionalValue`1<Tuple`2<V, long>>> {
    private TStore`1<V> tstore;
    public TaskCompletionSourceGetAsync`1(TStore`1<V> tstore);
    public sealed virtual void SetResult(int hresult, bool found, IntPtr objHandle, IntPtr bytes, UInt32 bytesLength, long versionSequenceNumber);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Store.TaskCompletionSourceGetAsyncEnumerator`1 : TaskCompletionSourceBase`1<IAsyncEnumerator`1<KeyValueTuple`1<V>>> {
    private TStore`1<V> _reliableDictionary;
    public TaskCompletionSourceGetAsyncEnumerator`1(TStore`1<V> reliableDictionary);
    public sealed virtual void SetResult(int hresult, IntPtr nativeEnumerator);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Store.TStore`1 : NativeStateProviderBase {
    private static CallbackDelegateVoid addAsyncCompletionCallback;
    private static CallbackDelegateGetAsync conditionalGetAsyncCompletionCallack;
    private static CallbackDelegateUpdateAsync conditionalUpdateAsyncCompletionCallback;
    private static CallbackDelegateCreateEnumerator createKeyEnumeratorAsyncCompletionCallback;
    private static CallbackDelegateCreateEnumerator createEnumeratorAsyncCompletionCallback;
    private static CallbackDelegateContainsKeyAsync containsKeyAsyncCompletionCallback;
    internal static NotifyStoreChangeCallback s_notifyStoreChangeCallback;
    internal static CleanupContextCallback s_cleanupContextCallback;
    [CompilerGeneratedAttribute]
private IStateSerializer`1<TValue> <ValueSerializer>k__BackingField;
    private static CallbackDelegateRemoveAsync removeAsyncCompletionCallback;
    public long Count { get; }
    internal IStateSerializer`1<TValue> ValueSerializer { get; private set; }
    internal TStore`1(IntPtr store, ReliableIdentityCache`1<IReliableState> cache, Uri name, GCRoot gcRoot, IStateSerializer`1<TValue> serializer, Guid partitionId, long replicaId);
    private static TStore`1();
    internal static TStore`1<TValue> ValidateAndCreate(IntPtr stateProviderHandle, ReliableIdentityCache`1<IReliableState> cache, Uri name, GCRoot gcRoot, IStateSerializer`1<TValue> serializer, Guid partitionId, long replicaId);
    public Task AddAsync(Transaction txn, string key, TValue value, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public Task`1<ConditionalValue`1<Tuple`2<TValue, long>>> ConditionalGetAsync(Transaction txn, string key, LockMode lockMode, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public Task`1<bool> ConditionalUpdateAsync(Transaction txn, string key, TValue newValue, long comparisionVersionSequenceNumber, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public long get_Count();
    public Task`1<IEnumerator`1<string>> GetKeysEnumerator(Transaction txn, string firstKey, string lastKey);
    public Task`1<IAsyncEnumerator`1<KeyValueTuple`1<TValue>>> GetAsyncEnumerator(Transaction txn);
    public Task`1<bool> ConditionalRemoveAsync(Transaction txn, string key, long conditionalVersionSequenceNumber, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public Task`1<bool> ContainsKeyAsync(Transaction txn, string key, LockMode lockMode, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public void SetNotifyStoreChangeCallback(object context, NotifyStoreChangeCallbackWithContext<TValue> callback);
    public void UnsetNotifyStoreChangeCallback();
    public void SetNotifyStoreChangeCallbackMask(NotifyStoreChangeCallbackMask mask);
    [CompilerGeneratedAttribute]
internal IStateSerializer`1<TValue> get_ValueSerializer();
    [CompilerGeneratedAttribute]
private void set_ValueSerializer(IStateSerializer`1<TValue> value);
    internal virtual object GetOrCreateOwner(IOwnerFactory ownerFactory);
}
internal class Microsoft.ServiceFabric.ReliableCollection.Store.TStoreKeyValueEnumerator`1 : NativeWrapper {
    private static CallbackDelegateMoveNext moveNextAsyncCompletionCallback;
    private IntPtr _enumerator;
    private KeyValueTuple`1<V> current;
    private TStore`1<V> tstore;
    private TraceId traceId;
    public KeyValueTuple`1<V> Current { get; internal set; }
    internal IStateSerializer`1<V> Serializer { get; }
    internal GCRoot GcRoot { get; }
    internal TraceId TraceId { get; }
    public TStoreKeyValueEnumerator`1(IntPtr nativeEnumerator, TStore`1<V> tstore, TraceId traceId, bool ownsHandle);
    private static TStoreKeyValueEnumerator`1();
    public sealed virtual KeyValueTuple`1<V> get_Current();
    internal void set_Current(KeyValueTuple`1<V> value);
    protected virtual void ReleaseHandle(IntPtr handle);
    public sealed virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    public sealed virtual void Reset();
    internal IStateSerializer`1<V> get_Serializer();
    internal GCRoot get_GcRoot();
    internal TraceId get_TraceId();
}
