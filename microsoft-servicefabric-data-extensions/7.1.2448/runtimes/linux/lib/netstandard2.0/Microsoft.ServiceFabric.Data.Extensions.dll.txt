internal class Microsoft.ServiceFabric.Data.Extensions.AsyncEnumerator`1 : object {
    private IEnumerator`1<TSource> _enumerator;
    private static Task`1<bool> CompletedTrueTask;
    private static Task`1<bool> CompletedFalseTask;
    private bool _isDone;
    private TSource _current;
    public TSource Current { get; }
    public AsyncEnumerator`1(IEnumerator`1<TSource> enumerator);
    private static AsyncEnumerator`1();
    public sealed virtual TSource get_Current();
    public sealed virtual void Dispose();
    public sealed virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    public sealed virtual void Reset();
}
internal class Microsoft.ServiceFabric.Data.Extensions.BuiltInTypeSerializer`1 : object {
    private Func`2<BinaryReader, T> binaryReaderFunction;
    private Action`2<BinaryWriter, T> binaryWriterFunction;
    internal BuiltInTypeSerializer`1(Action`2<BinaryWriter, T> binaryWriterFunction, Func`2<BinaryReader, T> binaryReaderFunction);
    public static bool IsSupportedType();
    public sealed virtual T Read(BinaryReader binaryReader);
    public sealed virtual T Read(T baseValue, BinaryReader reader);
    public sealed virtual void Write(T value, BinaryWriter binaryWriter);
    public sealed virtual void Write(T currentValue, T newValue, BinaryWriter binaryWriter);
}
internal class Microsoft.ServiceFabric.Data.Extensions.BuiltInTypeSerializerBuilder : object {
    internal static BuiltInTypeSerializer`1<T> MakeBuiltInTypeSerializer();
}
internal class Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableConcurrentQueueImpl`1 : object {
    public TimeSpan DefaultTimeout;
    private TConcurrentQueue`1<TValue> _queue;
    private TransactionalReplicator _txnReplicator;
    public Uri Name { get; }
    public long Count { get; }
    private ReliableConcurrentQueueImpl`1(TConcurrentQueue`1<TValue> queue, TransactionalReplicator replicator);
    internal static ReliableConcurrentQueueImpl`1<TValue> UnsafeCreateReliableConcurrentQueueImpl(TConcurrentQueue`1<TValue> queue, TransactionalReplicator replicator);
    internal static IReliableConcurrentQueue`1<TValue> GetOrCreate(TConcurrentQueue`1<TValue> queue, TransactionalReplicator replicator);
    public sealed virtual Uri get_Name();
    public sealed virtual long get_Count();
    public sealed virtual Task EnqueueAsync(ITransaction tx, TValue value, CancellationToken cancellationToken, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableConcurrentQueueImpl`1/<TryDequeueAsync>d__11")]
public sealed virtual Task`1<ConditionalValue`1<TValue>> TryDequeueAsync(ITransaction tx, CancellationToken cancellationToken, Nullable`1<TimeSpan> timeout);
}
internal class Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2 : object {
    public CancellationToken DefaultCancellationToken;
    public TimeSpan DefaultTimeout;
    private TStore`1<TValue> _store;
    private TransactionalReplicator _txnReplicator;
    private Func`3<IReliableDictionary`2<TKey, TValue>, NotifyDictionaryRebuildEventArgs`2<TKey, TValue>, Task> _rebuildNotificationAsyncCallback;
    private EventHandler`1 modreq(System.Runtime.CompilerServices.IsVolatile) _dictionaryChanged;
    private object _eventLock;
    public long Count { get; }
    private Func`3<IReliableDictionary`2<TKey, TValue>, NotifyDictionaryRebuildEventArgs`2<TKey, TValue>, Task> RebuildNotificationAsyncCallback { get; public set; }
    public Uri Name { get; }
    private ReliableDictionaryImpl`2(TStore`1<TValue> store, TransactionalReplicator replicator);
    internal static ReliableDictionaryImpl`2<TKey, TValue> UnsafeCreateReliableDictionaryImpl(TStore`1<TValue> store, TransactionalReplicator replicator);
    internal static IReliableDictionary`2<TKey, TValue> GetOrCreate(TStore`1<TValue> dict, TransactionalReplicator replicator);
    public sealed virtual long get_Count();
    public sealed virtual void set_RebuildNotificationAsyncCallback(Func`3<IReliableDictionary`2<TKey, TValue>, NotifyDictionaryRebuildEventArgs`2<TKey, TValue>, Task> value);
    private Func`3<IReliableDictionary`2<TKey, TValue>, NotifyDictionaryRebuildEventArgs`2<TKey, TValue>, Task> get_RebuildNotificationAsyncCallback();
    private void UpdateDictionaryChangeEvent(object newRebuildCallback, object newDictionaryChangeEvent);
    public sealed virtual Uri get_Name();
    internal void TestSetDictionaryChange(EventHandler`1<NotifyDictionaryChangedEventArgs`2<TKey, TValue>> handler);
    private static void NotifyStoreChangeCallbackImpl(object context, IntPtr storeHandle, StoreChangeKind kind, IntPtr pData);
    public sealed virtual void add_DictionaryChanged(EventHandler`1<NotifyDictionaryChangedEventArgs`2<TKey, TValue>> value);
    public sealed virtual void remove_DictionaryChanged(EventHandler`1<NotifyDictionaryChangedEventArgs`2<TKey, TValue>> value);
    public sealed virtual Task AddAsync(ITransaction tx, TKey key, TValue value);
    public sealed virtual Task AddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory);
    public sealed virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<AddOrUpdateAsync>d__27")]
public sealed virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<AddOrUpdateAsync>d__28")]
public sealed virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task ClearAsync();
    public sealed virtual Task ClearAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key);
    public sealed virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key, LockMode lockMode);
    public sealed virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn);
    public sealed virtual Task`1<IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn, EnumerationMode enumerationMode);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<CreateEnumerableAsync>d__37")]
public sealed virtual Task`1<IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn, Func`2<TKey, bool> filter, EnumerationMode enumerationMode);
    public sealed virtual Task`1<IAsyncEnumerable`1<TKey>> CreateKeyEnumerableAsync(ITransaction txn);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<CreateKeyEnumerableAsync>d__39")]
public sealed virtual Task`1<IAsyncEnumerable`1<TKey>> CreateKeyEnumerableAsync(ITransaction txn, EnumerationMode enumerationMode);
    public sealed virtual Task`1<IAsyncEnumerable`1<TKey>> CreateKeyEnumerableAsync(ITransaction txn, EnumerationMode enumerationMode, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> GetCountAsync(ITransaction tx);
    public sealed virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> valueFactory);
    public sealed virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, TValue value);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<GetOrAddAsync>d__44")]
public sealed virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> valueFactory, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<GetOrAddAsync>d__45")]
public sealed virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task SetAsync(ITransaction tx, TKey key, TValue value);
    public sealed virtual Task SetAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> TryAddAsync(ITransaction tx, TKey key, TValue value);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<TryAddAsync>d__49")]
public sealed virtual Task`1<bool> TryAddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key);
    public sealed virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key, LockMode lockMode);
    public sealed virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<TryGetValueAsync>d__53")]
public sealed virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<ConditionalValue`1<TValue>> TryRemoveAsync(ITransaction tx, TKey key);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<TryRemoveAsync>d__55")]
public sealed virtual Task`1<ConditionalValue`1<TValue>> TryRemoveAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> TryUpdateAsync(ITransaction tx, TKey key, TValue newValue, TValue comparisonValue);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.Collections.ReliableDictionaryImpl`2/<TryUpdateAsync>d__57")]
public sealed virtual Task`1<bool> TryUpdateAsync(ITransaction tx, TKey key, TValue newValue, TValue comparisonValue, TimeSpan timeout, CancellationToken cancellationToken);
}
internal class Microsoft.ServiceFabric.Data.Extensions.DataContractStateSerializer`1 : object {
    private DataContractSerializer serializer;
    public sealed virtual T Read(BinaryReader binaryReader);
    public sealed virtual T Read(T baseValue, BinaryReader reader);
    public sealed virtual void Write(T value, BinaryWriter binaryWriter);
    public sealed virtual void Write(T currentValue, T newValue, BinaryWriter binaryWriter);
}
internal interface Microsoft.ServiceFabric.Data.Extensions.ISerializationManager {
    public abstract virtual IStateSerializer`1<T> GetStateSerializer(Uri name);
    public abstract virtual void RemoveStateSerializer();
    public abstract virtual void RemoveStateSerializer(Uri name);
    public abstract virtual bool TryAddStateSerializer(IStateSerializer`1<T> stateSerializer);
    public abstract virtual bool TryAddStateSerializer(Uri name, IStateSerializer`1<T> stateSerializer);
}
internal class Microsoft.ServiceFabric.Data.Extensions.NamedType : object {
    private static string AllNames;
    private static Uri allNamesUri;
    private Uri name;
    private Type type;
    public NamedType(Uri name, Type type);
    private static NamedType();
    public sealed virtual bool Equals(NamedType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.ServiceFabric.Data.Extensions.ReliableDictionaryAsyncEnumerable`2 : object {
    private IAsyncEnumerator`1<KeyValueTuple`1<TValue>> _asyncEnumerator;
    private Func`2<TKey, bool> _keyFilter;
    public ReliableDictionaryAsyncEnumerable`2(IAsyncEnumerator`1<KeyValueTuple`1<TValue>> asyncEnumerator, Func`2<TKey, bool> keyFilter);
    public sealed virtual IAsyncEnumerator`1<KeyValuePair`2<TKey, TValue>> GetAsyncEnumerator();
    private sealed virtual override IAsyncEnumerator`1<TKey> Microsoft.ServiceFabric.Data.IAsyncEnumerable<TKey>.GetAsyncEnumerator();
}
internal class Microsoft.ServiceFabric.Data.Extensions.ReliableDictionaryAsyncEnumerator`2 : object {
    private IAsyncEnumerator`1<KeyValueTuple`1<TValue>> _asyncEnumerator;
    private Func`2<TKey, bool> _keyFilter;
    private KeyValuePair`2<TKey, TValue> Microsoft.ServiceFabric.Data.IAsyncEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Current { get; }
    private TKey Microsoft.ServiceFabric.Data.IAsyncEnumerator<TKey>.Current { get; }
    public ReliableDictionaryAsyncEnumerator`2(IAsyncEnumerator`1<KeyValueTuple`1<TValue>> asyncEnumerator, Func`2<TKey, bool> keyFilter);
    private sealed virtual override KeyValuePair`2<TKey, TValue> Microsoft.ServiceFabric.Data.IAsyncEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current();
    private sealed virtual override TKey Microsoft.ServiceFabric.Data.IAsyncEnumerator<TKey>.get_Current();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableDictionaryAsyncEnumerator`2/<MoveNextAsync>d__7")]
public sealed virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.Data.Extensions.ReliableDictionaryKeyAsyncEnumerable`1 : object {
    private IAsyncEnumerator`1<TKey> _asyncEnumerator;
    public ReliableDictionaryKeyAsyncEnumerable`1(IAsyncEnumerator`1<TKey> asyncEnumerator);
    private sealed virtual override IAsyncEnumerator`1<TKey> Microsoft.ServiceFabric.Data.IAsyncEnumerable<TKey>.GetAsyncEnumerator();
}
internal class Microsoft.ServiceFabric.Data.Extensions.ReliableDictionaryKeyAsyncEnumerator`1 : object {
    private IAsyncEnumerator`1<TKey> _asyncEnumerator;
    private TKey Microsoft.ServiceFabric.Data.IAsyncEnumerator<TKey>.Current { get; }
    public ReliableDictionaryKeyAsyncEnumerator`1(IAsyncEnumerator`1<TKey> asyncEnumerator);
    private sealed virtual override TKey Microsoft.ServiceFabric.Data.IAsyncEnumerator<TKey>.get_Current();
    public sealed virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager : object {
    private static string TraceType;
    private TraceId _traceId;
    private TransactionalReplicator _txnReplicator;
    private ReliableStateManagerConfiguration _configuration;
    private static string ArbitraryUriPrefix;
    private StateManagerTypeCache _typeCache;
    private SerializationManager _serializationManager;
    private StatefulServiceInitializationParameters _initializationParameters;
    private static MethodInfo _createDictionaryMethodInfo;
    private static MethodInfo _createConcurrentQueueMethodInfo;
    [CompilerGeneratedAttribute]
private EventHandler`1<NotifyTransactionChangedEventArgs> _transactionChanged;
    private object _transactionChangedEventLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _IsNotifyTransactionChangeCallbackPending;
    private StateProviderFactory _stateProviderFactory;
    private FabricReplicator _primaryReplicator;
    private SerializationMode serializationMode;
    private EventHandler`1<NotifyStateManagerChangedEventArgs> _stateManagerChanged;
    private object _eventLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _IsNotifyNotifyStateManagerCallbackPending;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_initialized;
    private static object s_initLock;
    private Func`2<CancellationToken, Task`1<bool>> _dataLossAsyncHandler;
    internal TransactionalReplicator TxnReplicator { get; internal set; }
    unknown Func`2<CancellationToken, Task`1<bool>> Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync {private set; }
    unknown Func`2<CancellationToken, Task> Microsoft.ServiceFabric.Data.IStateProviderReplica2.OnRestoreCompletedAsync {private set; }
    public ReliableStateManager(StatefulServiceContext serviceContext, ReliableStateManagerConfiguration configuration);
    public ReliableStateManager(TransactionalReplicator txnReplicator);
    private static ReliableStateManager();
    [CompilerGeneratedAttribute]
private void add__transactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__transactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    internal TransactionalReplicator get_TxnReplicator();
    internal void set_TxnReplicator(TransactionalReplicator value);
    public sealed virtual void add_TransactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    public sealed virtual void remove_TransactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    public sealed virtual void add_StateManagerChanged(EventHandler`1<NotifyStateManagerChangedEventArgs> value);
    public sealed virtual void remove_StateManagerChanged(EventHandler`1<NotifyStateManagerChangedEventArgs> value);
    private sealed virtual override IAsyncEnumerator`1<IReliableState> Microsoft.ServiceFabric.Data.IAsyncEnumerable<Microsoft.ServiceFabric.Data.IReliableState>.GetAsyncEnumerator();
    private static void NotifyStateManagerChangeCallbackImpl(object context, IntPtr replicatorHandle, StateManagerChangeKind kind, IntPtr pData);
    private static void NotifyTransactionChangeCallbackImpl(object context, IntPtr replicatorHandle, TransactionChangeKind kind, IntPtr pData);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.set_OnDataLossAsync(Func`2<CancellationToken, Task`1<bool>> value);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica2.set_OnRestoreCompletedAsync(Func`2<CancellationToken, Task> value);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort();
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<IReplicator> Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters initializationParameters);
    public sealed virtual ITransaction CreateTransaction();
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction txn, Uri name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction txn, Uri name);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Uri name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Uri name);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction txn, string name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction txn, string name);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(string name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(string name);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager/<GetOrAddAsyncInternal>d__63`1")]
private Task`1<T> GetOrAddAsyncInternal(Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager/<GetOrAddAsyncInternal>d__64`1")]
private Task`1<T> GetOrAddAsyncInternal(ITransaction txn, Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager/<GetOrCreateReliableDictionaryInternalAsync>d__65`1")]
private Task`1<object> GetOrCreateReliableDictionaryInternalAsync(ITransaction txn, Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken, bool getOnly);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager/<GetOrCreateReliableConcurrentQueueInternalAsync>d__66`1")]
private Task`1<object> GetOrCreateReliableConcurrentQueueInternalAsync(ITransaction txn, Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken, bool getOnly);
    public sealed virtual Task RemoveAsync(ITransaction txn, Uri name, TimeSpan timeout);
    public sealed virtual Task RemoveAsync(ITransaction txn, Uri name);
    public sealed virtual Task RemoveAsync(Uri name, TimeSpan timeout);
    public sealed virtual Task RemoveAsync(Uri name);
    public sealed virtual Task RemoveAsync(ITransaction txn, string name, TimeSpan timeout);
    public sealed virtual Task RemoveAsync(ITransaction txn, string name);
    public sealed virtual Task RemoveAsync(string name, TimeSpan timeout);
    public sealed virtual Task RemoveAsync(string name);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager/<RemoveAsyncInternal>d__75")]
private Task RemoveAsyncInternal(Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    private Task RemoveAsyncInternal(ITransaction txn, Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public sealed virtual bool TryAddStateSerializer(IStateSerializer`1<T> stateSerializer);
    public bool TryAddStateSerializer(Uri name, IStateSerializer`1<T> stateSerializer);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager/<Microsoft-ServiceFabric-Data-IReliableStateManager-TryGetAsync>d__79`1")]
private sealed virtual override Task`1<ConditionalValue`1<T>> Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Uri name);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Data.Extensions.ReliableStateManager/<GetInternalAsync>d__80`1")]
private Task`1<T> GetInternalAsync(ITransaction txn, Uri name, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken, bool getOnly);
    private sealed virtual override Task`1<ConditionalValue`1<T>> Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(string name);
    private object GetReliableDictionaryInternal(Uri name);
    private object GetReliableDictionaryInternal(IntPtr storeHandle, Uri name);
    internal Uri GetUriName(string name);
    private Task`1<object> GetOrCreateReliableDictionaryAsync(ITransaction txn, Uri name, Type valueDataType, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken, bool getOnly);
    public void UpdateReplicatorSettings(ReliableStateManagerReplicatorSettings reliableStateManagerReplicatorSettings);
    public long GetCurrentDataLossNumber();
    public long GetLastCommittedSequenceNumber();
    private Task`1<object> GetOrCreateReliableConcurrentQueueAsync(ITransaction txn, Uri name, Type valueDataType, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken, bool getOnly);
}
internal static class Microsoft.ServiceFabric.Data.Extensions.ReliableStateManagerReplicatorSettingsUtil : object {
    internal static TxnReplicator_Settings ToNative(ReliableStateManagerReplicatorSettings settings, PinCollection pin);
}
internal class Microsoft.ServiceFabric.Data.Extensions.SerializationManager : object {
    private ConcurrentDictionary`2<NamedType, object> serializerDictionary;
    public sealed virtual IStateSerializer`1<T> GetStateSerializer(Uri name);
    public sealed virtual void RemoveStateSerializer();
    public sealed virtual void RemoveStateSerializer(Uri name);
    public sealed virtual bool TryAddStateSerializer(IStateSerializer`1<T> stateSerializer);
    public sealed virtual bool TryAddStateSerializer(Uri name, IStateSerializer`1<T> stateSerializer);
}
internal class Microsoft.ServiceFabric.Data.Extensions.StateManagerTypeCache : object {
    private Dictionary`2<Type, Type> defaultTypeTemplateMap;
    private ConcurrentDictionary`2<Type, Type> typeCache;
    public Type GetConcreteType(Type type);
}
internal class Microsoft.ServiceFabric.Data.Extensions.TransactionImpl : object {
    private Transaction _transaction;
    public long CommitSequenceNumber { get; }
    public long TransactionId { get; }
    internal Transaction ReplicatorTransaction { get; internal set; }
    private TransactionImpl(Transaction transaction);
    internal static TransactionImpl GetOrCreate(Transaction transaction);
    public sealed virtual Task CommitAsync();
    public sealed virtual void Abort();
    public sealed virtual Task`1<long> GetVisibilitySequenceNumberAsync();
    public sealed virtual long get_CommitSequenceNumber();
    public sealed virtual long get_TransactionId();
    internal Transaction get_ReplicatorTransaction();
    internal void set_ReplicatorTransaction(Transaction value);
    public sealed virtual void Dispose();
}
internal class System.Fabric.DataLossHandlerBroker : object {
    private Func`2<CancellationToken, Task`1<bool>> onDataLossAsyncFunc;
    public DataLossHandlerBroker(Func`2<CancellationToken, Task`1<bool>> onDataLossAsyncFunc);
    public sealed virtual IFabricAsyncOperationContext BeginOnDataLoss(IFabricAsyncOperationCallback callback);
    public sealed virtual sbyte EndOnDataLoss(IFabricAsyncOperationContext context);
    [CompilerGeneratedAttribute]
private Task <BeginOnDataLoss>b__2_0(CancellationToken cancellationToken);
}
internal static class System.Fabric.Interop.NativeRuntimeExtension : object {
    private static string InteropLib;
    internal static int GetTxnReplicator(long replicaId, IFabricStatefulServicePartition statefulServicePartition, IFabricDataLossHandler fabricDataLossHandler, TxnReplicator_Settings* replicatorSettings, string configPackageName, string replicatorSettingsSectionName, string replicatorSecuritySectionName, IFabricReplicator& primaryReplicator, IntPtr& txnReplicator);
    internal static int UpdateReplicatorSettings(IFabricReplicator primaryReplicator, TxnReplicator_Settings* replicatorSettings);
}
internal class System.Fabric.Interop.TxnReplicator_Settings : ValueType {
    public ulong Flags;
    public UInt32 RetryIntervalMilliseconds;
    public UInt32 BatchAcknowledgementIntervalMilliseconds;
    public IntPtr ReplicatorAddress;
    public UInt32 InitialCopyQueueSize;
    public UInt32 MaxCopyQueueSize;
    public IntPtr SecurityCredentials;
    public int SecondaryClearAcknowledgedOperations;
    public UInt32 MaxReplicationMessageSize;
    public UInt32 InitialPrimaryReplicationQueueSize;
    public UInt32 MaxPrimaryReplicationQueueSize;
    public UInt32 MaxPrimaryReplicationQueueMemorySize;
    public UInt32 InitialSecondaryReplicationQueueSize;
    public UInt32 MaxSecondaryReplicationQueueSize;
    public UInt32 MaxSecondaryReplicationQueueMemorySize;
    public IntPtr ReplicatorListenAddress;
    public IntPtr ReplicatorPublishAddress;
    public UInt32 MaxStreamSizeInMB;
    public UInt32 MaxMetadataSizeInKB;
    public UInt32 MaxRecordSizeInKB;
    public UInt32 MaxWriteQueueDepthInKB;
    public UInt32 CheckpointThresholdInMB;
    public UInt32 MaxAccumulatedBackupLogSizeInMB;
    public int OptimizeForLocalSSD;
    public int OptimizeLogForLowerDiskUsage;
    public UInt32 SlowApiMonitoringDurationSeconds;
    public UInt32 MinLogSizeInMB;
    public UInt32 TruncationThresholdFactor;
    public UInt32 ThrottlingThresholdFactor;
    public IntPtr SharedLogId;
    public IntPtr SharedLogPath;
}
[FlagsAttribute]
internal enum System.Fabric.Interop.TxnReplicator_Settings_Flags : Enum {
    public ulong value__;
    public static TxnReplicator_Settings_Flags None;
    public static TxnReplicator_Settings_Flags RetryInterval;
    public static TxnReplicator_Settings_Flags BatchAcknowledgementInterval;
    public static TxnReplicator_Settings_Flags ReplicatorAddress;
    public static TxnReplicator_Settings_Flags InitialCopyQueueSize;
    public static TxnReplicator_Settings_Flags MaxCopyQueueSize;
    public static TxnReplicator_Settings_Flags SecurityCredentials;
    public static TxnReplicator_Settings_Flags SecondaryClearAcknowledgedOperations;
    public static TxnReplicator_Settings_Flags MaxReplicationMessageSize;
    public static TxnReplicator_Settings_Flags InitialPrimaryReplicationQueueSize;
    public static TxnReplicator_Settings_Flags MaxPrimaryReplicationQueueSize;
    public static TxnReplicator_Settings_Flags MaxPrimaryReplicationQueueMemorySize;
    public static TxnReplicator_Settings_Flags InitialSecondaryReplicationQueueSize;
    public static TxnReplicator_Settings_Flags MaxSecondaryReplicationQueueSize;
    public static TxnReplicator_Settings_Flags MaxSecondaryReplicationQueueMemorySize;
    public static TxnReplicator_Settings_Flags ReplicatorListenAddress;
    public static TxnReplicator_Settings_Flags ReplicatorPublishAddress;
    public static TxnReplicator_Settings_Flags MaxStreamSize;
    public static TxnReplicator_Settings_Flags MaxMetadataSize;
    public static TxnReplicator_Settings_Flags MaxRecordSize;
    public static TxnReplicator_Settings_Flags MaxWriteQueueDepth;
    public static TxnReplicator_Settings_Flags CheckpointThreshold;
    public static TxnReplicator_Settings_Flags MaxAccumulatedBackupLogSize;
    public static TxnReplicator_Settings_Flags OptimizeForLocalSSD;
    public static TxnReplicator_Settings_Flags OptimizeLogForLowerDiskUsage;
    public static TxnReplicator_Settings_Flags SlowApiMonitoringDuration;
    public static TxnReplicator_Settings_Flags MinLogSize;
    public static TxnReplicator_Settings_Flags TruncationThresholdFactor;
    public static TxnReplicator_Settings_Flags ThrottlingThresholdFactor;
    public static TxnReplicator_Settings_Flags SharedLogId;
    public static TxnReplicator_Settings_Flags SharedLogPath;
}
