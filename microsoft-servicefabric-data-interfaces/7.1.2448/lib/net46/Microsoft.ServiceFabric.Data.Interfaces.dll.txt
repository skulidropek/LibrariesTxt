public class Microsoft.ServiceFabric.Data.BackupDescription : ValueType {
    private BackupOption option;
    private Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback;
    public BackupOption Option { get; }
    public Func`3<BackupInfo, CancellationToken, Task`1<bool>> BackupCallback { get; }
    public BackupDescription(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    public BackupDescription(BackupOption option, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    public BackupOption get_Option();
    public Func`3<BackupInfo, CancellationToken, Task`1<bool>> get_BackupCallback();
}
public class Microsoft.ServiceFabric.Data.BackupInfo : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private BackupOption <Option>k__BackingField;
    [CompilerGeneratedAttribute]
private BackupVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <BackupId>k__BackingField;
    [CompilerGeneratedAttribute]
private BackupVersion <StartBackupVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentBackupId>k__BackingField;
    public string Directory { get; private set; }
    public BackupOption Option { get; private set; }
    public BackupVersion Version { get; private set; }
    public Guid BackupId { get; private set; }
    public BackupVersion StartBackupVersion { get; private set; }
    public Guid ParentBackupId { get; private set; }
    public BackupInfo(string directory, BackupOption option, BackupVersion version);
    public BackupInfo(string directory, BackupOption option, BackupVersion version, BackupVersion startBackupVersion, Guid backupId, Guid parentBackupId);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
private void set_Directory(string value);
    [CompilerGeneratedAttribute]
public BackupOption get_Option();
    [CompilerGeneratedAttribute]
private void set_Option(BackupOption value);
    [CompilerGeneratedAttribute]
public BackupVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(BackupVersion value);
    [CompilerGeneratedAttribute]
public Guid get_BackupId();
    [CompilerGeneratedAttribute]
private void set_BackupId(Guid value);
    [CompilerGeneratedAttribute]
public BackupVersion get_StartBackupVersion();
    [CompilerGeneratedAttribute]
private void set_StartBackupVersion(BackupVersion value);
    [CompilerGeneratedAttribute]
public Guid get_ParentBackupId();
    [CompilerGeneratedAttribute]
private void set_ParentBackupId(Guid value);
    public virtual string ToString();
}
public enum Microsoft.ServiceFabric.Data.BackupOption : Enum {
    public int value__;
    public static BackupOption Full;
    public static BackupOption Incremental;
}
public enum Microsoft.ServiceFabric.Data.Collections.EnumerationMode : Enum {
    public int value__;
    public static EnumerationMode Unordered;
    public static EnumerationMode Ordered;
}
public interface Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1 {
    public abstract virtual Task`1<long> GetCountAsync(ITransaction tx);
    public abstract virtual Task ClearAsync();
}
public interface Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1 {
    public long Count { get; }
    public abstract virtual Task EnqueueAsync(ITransaction tx, T value, CancellationToken cancellationToken, Nullable`1<TimeSpan> timeout);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryDequeueAsync(ITransaction tx, CancellationToken cancellationToken, Nullable`1<TimeSpan> timeout);
    public abstract virtual long get_Count();
}
public interface Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2 {
    unknown Func`3<IReliableDictionary`2<TKey, TValue>, NotifyDictionaryRebuildEventArgs`2<TKey, TValue>, Task> RebuildNotificationAsyncCallback {public set; }
    public abstract virtual void set_RebuildNotificationAsyncCallback(Func`3<IReliableDictionary`2<TKey, TValue>, NotifyDictionaryRebuildEventArgs`2<TKey, TValue>, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DictionaryChanged(EventHandler`1<NotifyDictionaryChangedEventArgs`2<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DictionaryChanged(EventHandler`1<NotifyDictionaryChangedEventArgs`2<TKey, TValue>> value);
    public abstract virtual Task AddAsync(ITransaction tx, TKey key, TValue value);
    public abstract virtual Task AddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory);
    public abstract virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory);
    public abstract virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task ClearAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key);
    public abstract virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key, LockMode lockMode);
    public abstract virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ContainsKeyAsync(ITransaction tx, TKey key, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn);
    public abstract virtual Task`1<IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn, EnumerationMode enumerationMode);
    public abstract virtual Task`1<IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn, Func`2<TKey, bool> filter, EnumerationMode enumerationMode);
    public abstract virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> valueFactory);
    public abstract virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, TValue value);
    public abstract virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, Func`2<TKey, TValue> valueFactory, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<TValue> GetOrAddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryAddAsync(ITransaction tx, TKey key, TValue value);
    public abstract virtual Task`1<bool> TryAddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key);
    public abstract virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key, LockMode lockMode);
    public abstract virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConditionalValue`1<TValue>> TryGetValueAsync(ITransaction tx, TKey key, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConditionalValue`1<TValue>> TryRemoveAsync(ITransaction tx, TKey key);
    public abstract virtual Task`1<ConditionalValue`1<TValue>> TryRemoveAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryUpdateAsync(ITransaction tx, TKey key, TValue newValue, TValue comparisonValue);
    public abstract virtual Task`1<bool> TryUpdateAsync(ITransaction tx, TKey key, TValue newValue, TValue comparisonValue, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task SetAsync(ITransaction tx, TKey key, TValue value);
    public abstract virtual Task SetAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken);
}
public interface Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2 {
    public long Count { get; }
    public abstract virtual Task`1<IAsyncEnumerable`1<TKey>> CreateKeyEnumerableAsync(ITransaction txn);
    public abstract virtual Task`1<IAsyncEnumerable`1<TKey>> CreateKeyEnumerableAsync(ITransaction txn, EnumerationMode enumerationMode);
    public abstract virtual Task`1<IAsyncEnumerable`1<TKey>> CreateKeyEnumerableAsync(ITransaction txn, EnumerationMode enumerationMode, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual long get_Count();
}
public interface Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1 {
    public abstract virtual Task EnqueueAsync(ITransaction tx, T item);
    public abstract virtual Task EnqueueAsync(ITransaction tx, T item, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryDequeueAsync(ITransaction tx);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryDequeueAsync(ITransaction tx, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryPeekAsync(ITransaction tx);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryPeekAsync(ITransaction tx, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryPeekAsync(ITransaction tx, LockMode lockMode);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryPeekAsync(ITransaction tx, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncEnumerable`1<T>> CreateEnumerableAsync(ITransaction tx);
}
public enum Microsoft.ServiceFabric.Data.Collections.LockMode : Enum {
    public int value__;
    public static LockMode Default;
    public static LockMode Update;
}
public class Microsoft.ServiceFabric.Data.Collections.QueueFullException : FabricTransientException {
    public QueueFullException(string msg);
    public QueueFullException(string msg, Exception innerException);
}
public class Microsoft.ServiceFabric.Data.ConditionalValue`1 : ValueType {
    private bool hasValue;
    private TValue value;
    public bool HasValue { get; }
    public TValue Value { get; }
    public ConditionalValue`1(bool hasValue, TValue value);
    public bool get_HasValue();
    public TValue get_Value();
}
public interface Microsoft.ServiceFabric.Data.IAsyncEnumerable`1 {
    public abstract virtual IAsyncEnumerator`1<T> GetAsyncEnumerator();
}
public interface Microsoft.ServiceFabric.Data.IAsyncEnumerator`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
    public abstract virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    public abstract virtual void Reset();
}
public interface Microsoft.ServiceFabric.Data.IReliableState {
    public Uri Name { get; }
    public abstract virtual Uri get_Name();
}
public interface Microsoft.ServiceFabric.Data.IReliableStateManager {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateManagerChanged(EventHandler`1<NotifyStateManagerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateManagerChanged(EventHandler`1<NotifyStateManagerChangedEventArgs> value);
    public abstract virtual bool TryAddStateSerializer(IStateSerializer`1<T> stateSerializer);
    public abstract virtual ITransaction CreateTransaction();
    public abstract virtual Task`1<T> GetOrAddAsync(ITransaction tx, Uri name, TimeSpan timeout);
    public abstract virtual Task`1<T> GetOrAddAsync(ITransaction tx, Uri name);
    public abstract virtual Task`1<T> GetOrAddAsync(Uri name, TimeSpan timeout);
    public abstract virtual Task`1<T> GetOrAddAsync(Uri name);
    public abstract virtual Task`1<T> GetOrAddAsync(ITransaction tx, string name, TimeSpan timeout);
    public abstract virtual Task`1<T> GetOrAddAsync(ITransaction tx, string name);
    public abstract virtual Task`1<T> GetOrAddAsync(string name, TimeSpan timeout);
    public abstract virtual Task`1<T> GetOrAddAsync(string name);
    public abstract virtual Task RemoveAsync(ITransaction tx, Uri name, TimeSpan timeout);
    public abstract virtual Task RemoveAsync(ITransaction tx, Uri name);
    public abstract virtual Task RemoveAsync(Uri name, TimeSpan timeout);
    public abstract virtual Task RemoveAsync(Uri name);
    public abstract virtual Task RemoveAsync(ITransaction tx, string name, TimeSpan timeout);
    public abstract virtual Task RemoveAsync(ITransaction tx, string name);
    public abstract virtual Task RemoveAsync(string name, TimeSpan timeout);
    public abstract virtual Task RemoveAsync(string name);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryGetAsync(Uri name);
    public abstract virtual Task`1<ConditionalValue`1<T>> TryGetAsync(string name);
}
public interface Microsoft.ServiceFabric.Data.IReliableStateManagerReplica {
}
public interface Microsoft.ServiceFabric.Data.IReliableStateManagerReplica2 {
}
internal interface Microsoft.ServiceFabric.Data.IReliableStream {
}
public interface Microsoft.ServiceFabric.Data.IStateProviderReplica {
    unknown Func`2<CancellationToken, Task`1<bool>> OnDataLossAsync {public set; }
    public abstract virtual void set_OnDataLossAsync(Func`2<CancellationToken, Task`1<bool>> value);
    public abstract virtual void Initialize(StatefulServiceInitializationParameters initializationParameters);
    public abstract virtual Task`1<IReplicator> OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    public abstract virtual Task ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual void Abort();
    public abstract virtual Task BackupAsync(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    public abstract virtual Task BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    public abstract virtual Task RestoreAsync(string backupFolderPath);
    public abstract virtual Task RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken);
}
public interface Microsoft.ServiceFabric.Data.IStateProviderReplica2 {
    unknown Func`2<CancellationToken, Task> OnRestoreCompletedAsync {public set; }
    public abstract virtual void set_OnRestoreCompletedAsync(Func`2<CancellationToken, Task> value);
}
public interface Microsoft.ServiceFabric.Data.IStateSerializer`1 {
    public abstract virtual T Read(BinaryReader binaryReader);
    public abstract virtual void Write(T value, BinaryWriter binaryWriter);
    public abstract virtual T Read(T baseValue, BinaryReader binaryReader);
    public abstract virtual void Write(T baseValue, T targetValue, BinaryWriter binaryWriter);
}
public interface Microsoft.ServiceFabric.Data.ITransaction {
    public long CommitSequenceNumber { get; }
    public long TransactionId { get; }
    public abstract virtual long get_CommitSequenceNumber();
    public abstract virtual Task CommitAsync();
    public abstract virtual void Abort();
    public abstract virtual long get_TransactionId();
    public abstract virtual Task`1<long> GetVisibilitySequenceNumberAsync();
}
public enum Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction : Enum {
    public int value__;
    public static NotifyDictionaryChangedAction Add;
    public static NotifyDictionaryChangedAction Update;
    public static NotifyDictionaryChangedAction Remove;
    public static NotifyDictionaryChangedAction Clear;
    public static NotifyDictionaryChangedAction Rebuild;
}
public abstract class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2 : EventArgs {
    private NotifyDictionaryChangedAction action;
    public NotifyDictionaryChangedAction Action { get; }
    public NotifyDictionaryChangedEventArgs`2(NotifyDictionaryChangedAction action);
    public NotifyDictionaryChangedAction get_Action();
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryClearEventArgs`2 : NotifyDictionaryChangedEventArgs`2<TKey, TValue> {
    private long commitSequenceNumber;
    public long CommitSequenceNumber { get; }
    public NotifyDictionaryClearEventArgs`2(long commitSequenceNumber);
    public long get_CommitSequenceNumber();
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2 : NotifyDictionaryTransactionalEventArgs`2<TKey, TValue> {
    private TKey key;
    private TValue value;
    public TKey Key { get; }
    public TValue Value { get; }
    public NotifyDictionaryItemAddedEventArgs`2(ITransaction transaction, TKey key, TValue value);
    public TKey get_Key();
    public TValue get_Value();
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemRemovedEventArgs`2 : NotifyDictionaryTransactionalEventArgs`2<TKey, TValue> {
    private TKey key;
    public TKey Key { get; }
    public NotifyDictionaryItemRemovedEventArgs`2(ITransaction transaction, TKey key);
    public TKey get_Key();
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2 : NotifyDictionaryTransactionalEventArgs`2<TKey, TValue> {
    private TKey key;
    private TValue value;
    public TKey Key { get; }
    public TValue Value { get; }
    public NotifyDictionaryItemUpdatedEventArgs`2(ITransaction transaction, TKey key, TValue value);
    public TKey get_Key();
    public TValue get_Value();
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2 : NotifyDictionaryChangedEventArgs`2<TKey, TValue> {
    private IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>> enumerableState;
    public IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>> State { get; }
    public NotifyDictionaryRebuildEventArgs`2(IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>> enumerableState);
    public IAsyncEnumerable`1<KeyValuePair`2<TKey, TValue>> get_State();
}
public abstract class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryTransactionalEventArgs`2 : NotifyDictionaryChangedEventArgs`2<TKey, TValue> {
    private ITransaction transaction;
    public ITransaction Transaction { get; }
    public NotifyDictionaryTransactionalEventArgs`2(ITransaction transaction, NotifyDictionaryChangedAction action);
    public ITransaction get_Transaction();
}
public enum Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction : Enum {
    public int value__;
    public static NotifyStateManagerChangedAction Add;
    public static NotifyStateManagerChangedAction Remove;
    public static NotifyStateManagerChangedAction Rebuild;
}
public abstract class Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs : EventArgs {
    private NotifyStateManagerChangedAction action;
    public NotifyStateManagerChangedAction Action { get; }
    public NotifyStateManagerChangedEventArgs(NotifyStateManagerChangedAction action);
    public NotifyStateManagerChangedAction get_Action();
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs : NotifyStateManagerChangedEventArgs {
    private IAsyncEnumerable`1<IReliableState> reliableStates;
    public IAsyncEnumerable`1<IReliableState> ReliableStates { get; }
    public NotifyStateManagerRebuildEventArgs(IAsyncEnumerable`1<IReliableState> reliableStates);
    public IAsyncEnumerable`1<IReliableState> get_ReliableStates();
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs : NotifyStateManagerChangedEventArgs {
    private ITransaction transaction;
    private IReliableState reliableState;
    public ITransaction Transaction { get; }
    public IReliableState ReliableState { get; }
    public NotifyStateManagerSingleEntityChangedEventArgs(ITransaction transaction, IReliableState reliableState, NotifyStateManagerChangedAction action);
    public ITransaction get_Transaction();
    public IReliableState get_ReliableState();
}
public enum Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedAction : Enum {
    public int value__;
    public static NotifyTransactionChangedAction Commit;
}
public class Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs : EventArgs {
    private NotifyTransactionChangedAction action;
    private ITransaction transaction;
    public NotifyTransactionChangedAction Action { get; }
    public ITransaction Transaction { get; }
    public NotifyTransactionChangedEventArgs(ITransaction transaction, NotifyTransactionChangedAction action);
    public NotifyTransactionChangedAction get_Action();
    public ITransaction get_Transaction();
}
public class Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration : object {
    private static string DefaultConfigPackageName;
    private static string DefaultReplicatorSecuritySectionName;
    private static string DefaultReplicatorSettingsSectionName;
    [CompilerGeneratedAttribute]
private ReliableStateManagerReplicatorSettings <ReplicatorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigPackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorSecuritySectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorSettingsSectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task> <OnInitializeStateSerializersEvent>k__BackingField;
    public ReliableStateManagerReplicatorSettings ReplicatorSettings { get; private set; }
    public string ConfigPackageName { get; private set; }
    public string ReplicatorSecuritySectionName { get; private set; }
    public string ReplicatorSettingsSectionName { get; private set; }
    public Func`1<Task> OnInitializeStateSerializersEvent { get; private set; }
    public ReliableStateManagerConfiguration(string configPackageName, string replicatorSecuritySectionName, string replicatorSettingsSectionName, Func`1<Task> onInitializeStateSerializersEvent);
    public ReliableStateManagerConfiguration(ReliableStateManagerReplicatorSettings replicatorSettings, Func`1<Task> onInitializeStateSerializersEvent);
    private ReliableStateManagerConfiguration(ReliableStateManagerReplicatorSettings replicatorSettings, string configPackageName, string replicatorSecuritySectionName, string replicatorSettingsSectionName, Func`1<Task> onInitializeStateSerializersEvent);
    [CompilerGeneratedAttribute]
public ReliableStateManagerReplicatorSettings get_ReplicatorSettings();
    [CompilerGeneratedAttribute]
private void set_ReplicatorSettings(ReliableStateManagerReplicatorSettings value);
    [CompilerGeneratedAttribute]
public string get_ConfigPackageName();
    [CompilerGeneratedAttribute]
private void set_ConfigPackageName(string value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorSecuritySectionName();
    [CompilerGeneratedAttribute]
private void set_ReplicatorSecuritySectionName(string value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorSettingsSectionName();
    [CompilerGeneratedAttribute]
private void set_ReplicatorSettingsSectionName(string value);
    [CompilerGeneratedAttribute]
public Func`1<Task> get_OnInitializeStateSerializersEvent();
    [CompilerGeneratedAttribute]
private void set_OnInitializeStateSerializersEvent(Func`1<Task> value);
}
public class Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <BatchAcknowledgementInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorListenAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorPublishAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityCredentials <SecurityCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InitialCopyQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxCopyQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReplicationMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InitialPrimaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxPrimaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxPrimaryReplicationQueueMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InitialSecondaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxSecondaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxSecondaryReplicationQueueMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedLogId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedLogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxStreamSizeInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxMetadataSizeInKB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRecordSizeInKB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxWriteQueueDepthInKB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CheckpointThresholdInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxAccumulatedBackupLogSizeInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OptimizeForLocalSSD>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OptimizeLogForLowerDiskUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SecondaryClearAcknowledgedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SlowApiMonitoringDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinLogSizeInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TruncationThresholdFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ThrottlingThresholdFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LogTruncationIntervalSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableIncrementalBackupsAcrossReplicas>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableSendWindowSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxReplicationQueueSendWindowSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxCopyQueueSendWindowSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseIndividualHeapPerReplica>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <InitialReplicaHeapSizeInKB>k__BackingField;
    public Nullable`1<TimeSpan> RetryInterval { get; public set; }
    public Nullable`1<TimeSpan> BatchAcknowledgementInterval { get; public set; }
    public string ReplicatorAddress { get; public set; }
    public string ReplicatorListenAddress { get; public set; }
    public string ReplicatorPublishAddress { get; public set; }
    public SecurityCredentials SecurityCredentials { get; public set; }
    public Nullable`1<long> InitialCopyQueueSize { get; public set; }
    public Nullable`1<long> MaxCopyQueueSize { get; public set; }
    public Nullable`1<long> MaxReplicationMessageSize { get; public set; }
    public Nullable`1<long> InitialPrimaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxPrimaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxPrimaryReplicationQueueMemorySize { get; public set; }
    public Nullable`1<long> InitialSecondaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxSecondaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxSecondaryReplicationQueueMemorySize { get; public set; }
    public string SharedLogId { get; public set; }
    public string SharedLogPath { get; public set; }
    public Nullable`1<int> MaxStreamSizeInMB { get; public set; }
    public Nullable`1<int> MaxMetadataSizeInKB { get; public set; }
    public Nullable`1<int> MaxRecordSizeInKB { get; public set; }
    public Nullable`1<int> MaxWriteQueueDepthInKB { get; public set; }
    public Nullable`1<int> CheckpointThresholdInMB { get; public set; }
    public Nullable`1<int> MaxAccumulatedBackupLogSizeInMB { get; public set; }
    public Nullable`1<bool> OptimizeForLocalSSD { get; public set; }
    public Nullable`1<bool> OptimizeLogForLowerDiskUsage { get; public set; }
    public Nullable`1<bool> SecondaryClearAcknowledgedOperations { get; public set; }
    public Nullable`1<TimeSpan> SlowApiMonitoringDuration { get; public set; }
    public Nullable`1<int> MinLogSizeInMB { get; public set; }
    public Nullable`1<int> TruncationThresholdFactor { get; public set; }
    public Nullable`1<int> ThrottlingThresholdFactor { get; public set; }
    public Nullable`1<int> LogTruncationIntervalSeconds { get; public set; }
    internal Nullable`1<bool> EnableIncrementalBackupsAcrossReplicas { get; internal set; }
    internal Nullable`1<bool> EnableSendWindowSizeInBytes { get; internal set; }
    internal Nullable`1<UInt32> MaxReplicationQueueSendWindowSizeInBytes { get; internal set; }
    internal Nullable`1<UInt32> MaxCopyQueueSendWindowSizeInBytes { get; internal set; }
    internal Nullable`1<bool> UseIndividualHeapPerReplica { get; internal set; }
    internal Nullable`1<UInt32> InitialReplicaHeapSizeInKB { get; internal set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RetryInterval();
    [CompilerGeneratedAttribute]
public void set_RetryInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_BatchAcknowledgementInterval();
    [CompilerGeneratedAttribute]
public void set_BatchAcknowledgementInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorAddress();
    [CompilerGeneratedAttribute]
public void set_ReplicatorAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorListenAddress();
    [CompilerGeneratedAttribute]
public void set_ReplicatorListenAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorPublishAddress();
    [CompilerGeneratedAttribute]
public void set_ReplicatorPublishAddress(string value);
    [CompilerGeneratedAttribute]
public SecurityCredentials get_SecurityCredentials();
    [CompilerGeneratedAttribute]
public void set_SecurityCredentials(SecurityCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InitialCopyQueueSize();
    [CompilerGeneratedAttribute]
public void set_InitialCopyQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxCopyQueueSize();
    [CompilerGeneratedAttribute]
public void set_MaxCopyQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReplicationMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxReplicationMessageSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InitialPrimaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_InitialPrimaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxPrimaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_MaxPrimaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxPrimaryReplicationQueueMemorySize();
    [CompilerGeneratedAttribute]
public void set_MaxPrimaryReplicationQueueMemorySize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InitialSecondaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_InitialSecondaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxSecondaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_MaxSecondaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxSecondaryReplicationQueueMemorySize();
    [CompilerGeneratedAttribute]
public void set_MaxSecondaryReplicationQueueMemorySize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_SharedLogId();
    [CompilerGeneratedAttribute]
public void set_SharedLogId(string value);
    [CompilerGeneratedAttribute]
public string get_SharedLogPath();
    [CompilerGeneratedAttribute]
public void set_SharedLogPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxStreamSizeInMB();
    [CompilerGeneratedAttribute]
public void set_MaxStreamSizeInMB(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxMetadataSizeInKB();
    [CompilerGeneratedAttribute]
public void set_MaxMetadataSizeInKB(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRecordSizeInKB();
    [CompilerGeneratedAttribute]
public void set_MaxRecordSizeInKB(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxWriteQueueDepthInKB();
    [CompilerGeneratedAttribute]
public void set_MaxWriteQueueDepthInKB(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CheckpointThresholdInMB();
    [CompilerGeneratedAttribute]
public void set_CheckpointThresholdInMB(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAccumulatedBackupLogSizeInMB();
    [CompilerGeneratedAttribute]
public void set_MaxAccumulatedBackupLogSizeInMB(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OptimizeForLocalSSD();
    [CompilerGeneratedAttribute]
public void set_OptimizeForLocalSSD(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OptimizeLogForLowerDiskUsage();
    [CompilerGeneratedAttribute]
public void set_OptimizeLogForLowerDiskUsage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SecondaryClearAcknowledgedOperations();
    [CompilerGeneratedAttribute]
public void set_SecondaryClearAcknowledgedOperations(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SlowApiMonitoringDuration();
    [CompilerGeneratedAttribute]
public void set_SlowApiMonitoringDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinLogSizeInMB();
    [CompilerGeneratedAttribute]
public void set_MinLogSizeInMB(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TruncationThresholdFactor();
    [CompilerGeneratedAttribute]
public void set_TruncationThresholdFactor(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ThrottlingThresholdFactor();
    [CompilerGeneratedAttribute]
public void set_ThrottlingThresholdFactor(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LogTruncationIntervalSeconds();
    [CompilerGeneratedAttribute]
public void set_LogTruncationIntervalSeconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_EnableIncrementalBackupsAcrossReplicas();
    [CompilerGeneratedAttribute]
internal void set_EnableIncrementalBackupsAcrossReplicas(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_EnableSendWindowSizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_EnableSendWindowSizeInBytes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_MaxReplicationQueueSendWindowSizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_MaxReplicationQueueSendWindowSizeInBytes(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_MaxCopyQueueSendWindowSizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_MaxCopyQueueSendWindowSizeInBytes(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_UseIndividualHeapPerReplica();
    [CompilerGeneratedAttribute]
internal void set_UseIndividualHeapPerReplica(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_InitialReplicaHeapSizeInKB();
    [CompilerGeneratedAttribute]
internal void set_InitialReplicaHeapSizeInKB(Nullable`1<UInt32> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static bool InternalEquals(ReliableStateManagerReplicatorSettings old, ReliableStateManagerReplicatorSettings updated);
}
public class Microsoft.ServiceFabric.Data.RestoreContext : ValueType {
    private IStateProviderReplica stateProviderReplica;
    public RestoreContext(IStateProviderReplica stateProviderReplica);
    public Task RestoreAsync(RestoreDescription restoreDescription);
    public Task RestoreAsync(RestoreDescription restoreDescription, CancellationToken cancellationToken);
}
public class Microsoft.ServiceFabric.Data.RestoreDescription : ValueType {
    private string backupFolderPath;
    private RestorePolicy restorePolicy;
    public string BackupFolderPath { get; }
    public RestorePolicy Policy { get; }
    public RestoreDescription(string backupFolderPath);
    public RestoreDescription(string backupFolderPath, RestorePolicy restorePolicy);
    public string get_BackupFolderPath();
    public RestorePolicy get_Policy();
}
public enum Microsoft.ServiceFabric.Data.RestorePolicy : Enum {
    public int value__;
    public static RestorePolicy Safe;
    public static RestorePolicy Force;
}
