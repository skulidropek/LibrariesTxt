internal static class Microsoft.ServiceFabric.Data.DataAssemblyResolver : object {
    private static String[] KnownDlls;
    private static DataAssemblyResolver();
    internal static Assembly OnAssemblyResolve(object sender, ResolveEventArgs args);
}
internal static class Microsoft.ServiceFabric.Data.DataConstants : object {
    public static string GetCurrentDataLossNumberMethodName;
    public static string GetLastCommittedSequenceNumberInfoMethodName;
}
internal static class Microsoft.ServiceFabric.Data.DataTrace : object {
    internal static ExtensionsEvents Source;
    private static DataTrace();
}
public class Microsoft.ServiceFabric.Data.ReliableStateManager : object {
    private static string TraceType;
    private IReliableStateManagerReplica2 _impl;
    private bool useNativeReliableStateManager;
    private static string SectionName;
    private static string EnableNativeReliableStateManager;
    private static string Test_LoadEnableNativeReliableStateManager;
    private EventHandler`1<NotifyTransactionChangedEventArgs> userTransactionChangedEventHandler;
    private object eventHandlerRegistrationLock;
    private bool isTransactionEventHandlerRegistered;
    private EventHandler`1<NotifyStateManagerChangedEventArgs> userStateManagerChangedEventHandler;
    private bool isStateManagerEventHandlerRegistered;
    private bool isClosingOrAborting;
    internal IStateProviderReplica2 Replica { get; }
    unknown Func`2<CancellationToken, Task`1<bool>> OnDataLossAsync {public set; }
    unknown Func`2<CancellationToken, Task> OnRestoreCompletedAsync {public set; }
    private static ReliableStateManager();
    public ReliableStateManager(StatefulServiceContext serviceContext, ReliableStateManagerConfiguration configuration);
    internal IStateProviderReplica2 get_Replica();
    public sealed virtual void add_TransactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    public sealed virtual void remove_TransactionChanged(EventHandler`1<NotifyTransactionChangedEventArgs> value);
    public sealed virtual void add_StateManagerChanged(EventHandler`1<NotifyStateManagerChangedEventArgs> value);
    public sealed virtual void remove_StateManagerChanged(EventHandler`1<NotifyStateManagerChangedEventArgs> value);
    public sealed virtual IAsyncEnumerator`1<IReliableState> GetAsyncEnumerator();
    public sealed virtual Task BackupAsync(Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    private sealed virtual override Task`1<ConditionalValue`1<T>> Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(string name);
    private sealed virtual override Task`1<ConditionalValue`1<T>> Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Uri name);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(string name);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(string name, TimeSpan timeout);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction tx, string name);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction tx, string name, TimeSpan timeout);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri name);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri name, TimeSpan timeout);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction tx, Uri name);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction tx, Uri name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(string name);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(string name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction tx, string name);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction tx, string name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Uri name);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Uri name, TimeSpan timeout);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction tx, Uri name);
    private sealed virtual override Task`1<T> Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(ITransaction tx, Uri name, TimeSpan timeout);
    private sealed virtual override ITransaction Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction();
    private sealed virtual override bool Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(IStateSerializer`1<T> stateSerializer);
    public sealed virtual Task RestoreAsync(string backupFolderPath);
    public sealed virtual Task RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken);
    public sealed virtual Task BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback);
    public sealed virtual void set_OnDataLossAsync(Func`2<CancellationToken, Task`1<bool>> value);
    public sealed virtual void set_OnRestoreCompletedAsync(Func`2<CancellationToken, Task> value);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters initializationParameters);
    private sealed virtual override Task`1<IReplicator> Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort();
    private void OnTransactionChangedHandler(object sender, NotifyTransactionChangedEventArgs args);
    private void OnStateManagerChangedHandler(object sender, NotifyStateManagerChangedEventArgs args);
    private void RegisterTransactionEventHandlerIfNecessary();
    private void RegisterStateManagerEventHandlerIfNecessary();
    private void UnRegisterTransactionEventHandlerIfNecessary();
    private void UnRegisterStateManagerEventHandlerIfNecessary();
    private void CleanUpEventHandlers();
    private void ThrowIfClosingOrAbortingCallerHoldsLock();
    private static string GetNativeRunConfigurationSettingFromConfigPackage(StatefulServiceContext serviceContext, ReliableStateManagerConfiguration configuration);
    private static string GetNativeRunConfigurationSettingFromClusterManifest();
    private static bool GetNativeRunConfigurationSetting(StatefulServiceContext serviceContext, ReliableStateManagerConfiguration configuration);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.ServiceFabric.Data.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_TypeLoadAssembly { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_TypeLoadAssembly();
}
