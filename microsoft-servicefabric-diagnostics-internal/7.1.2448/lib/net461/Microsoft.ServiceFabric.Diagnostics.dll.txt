internal class Microsoft.ServiceFabric.Diagnostics.Tracing.Config.SettingsConfigReader : object {
    private static string TraceLevelKey;
    private static string IncludeEventKey;
    private static string ExcludeEventKey;
    private static string KeywordsKey;
    private ConfigurationSection configSection;
    internal SettingsConfigReader(ConfigurationSection configSection);
    internal string ReadIncludeEventKey();
    internal string ReadExcludeEventKey();
    internal string ReadTraceLevelKey();
    internal string ReadKeywordsKey();
    private string GetValueForParameter(string key);
}
internal class Microsoft.ServiceFabric.Diagnostics.Tracing.Config.TraceConfig : object {
    private static string TraceEventsSectionPrefix;
    private static EventLevel DefaultTracingLevel;
    private static EventKeywords DefaultKeyword;
    private Char[] filterValueSeparatorArray;
    private string traceEventsSectionName;
    private string packageName;
    private TraceSinkFilter sinkFilter;
    [CompilerGeneratedAttribute]
private Action OnFilterUpdate;
    internal TraceConfig(string eventSourceName, string packageName);
    [CompilerGeneratedAttribute]
internal void add_OnFilterUpdate(Action value);
    [CompilerGeneratedAttribute]
internal void remove_OnFilterUpdate(Action value);
    internal bool GetEventEnabledStatus(EventLevel level, EventKeywords keywords, string eventName);
    private void UpdateSettings(ConfigurationSettings configurationSettings, bool firstTimeInitialization);
    private void OnConfigurationPackageModified(object sender, PackageModifiedEventArgs`1<ConfigurationPackage> e);
    private EventLevel ConvertLevel(int level);
    private void InitializeEventTrace(ConfigurationSection configSection, bool firstTimeInitialization);
    private void ProcessEventList(TraceSinkFilter traceSinkFilter, string eventList, FilterType filterType);
}
internal class Microsoft.ServiceFabric.Diagnostics.Tracing.Filter.TraceSinkFilter : object {
    private Dictionary`2<string, FilterType> eventList;
    private EventLevel level;
    private EventKeywords keywords;
    unknown EventLevel Level {internal set; }
    unknown EventKeywords Keywords {internal set; }
    internal TraceSinkFilter(EventLevel level, EventKeywords keywords);
    internal void set_Level(EventLevel value);
    internal void set_Keywords(EventKeywords value);
    internal void AddFilter(string eventName, FilterType filterType);
    internal bool CheckEnabledStatus(EventLevel level, EventKeywords keywords, string eventName);
}
internal abstract class Microsoft.ServiceFabric.Diagnostics.Tracing.ServiceFabricEventSource : EventSource {
    private static string DefaultPackageName;
    private ReadOnlyDictionary`2<int, TraceEvent> eventDescriptors;
    private TraceConfig configMgr;
    private string eventSourceName;
    protected ServiceFabricEventSource(string configPackageName);
    [NonEventAttribute]
protected void WriteEvent(int eventId);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1, Variant param2);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1, Variant param2, Variant param3);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7);
    [NonEventAttribute]
protected void WriteEvent(int eventId, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8);
    [NonEventAttribute]
private ReadOnlyDictionary`2<int, TraceEvent> GenerateEventDescriptors(Type eventSourceType);
    [NonEventAttribute]
private void VariantWrite(int eventId, int argCount, Variant v0, Variant v1, Variant v2, Variant v3, Variant v4, Variant v5, Variant v6, Variant v7, Variant v8);
}
[EventSourceAttribute]
internal class Microsoft.ServiceFabric.Diagnostics.Tracing.ServiceFabricStringEventSource : ServiceFabricEventSource {
    internal static ServiceFabricStringEventSource Instance;
    private static ServiceFabricStringEventSource();
    [NonEventAttribute]
internal void WriteError(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteErrorWithId(string type, string id, string format, Object[] args);
    [NonEventAttribute]
internal void WriteWarning(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteWarningWithId(string type, string id, string format, Object[] args);
    [NonEventAttribute]
internal void WriteInfo(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteInfoWithId(string type, string id, string format, Object[] args);
    [NonEventAttribute]
internal void WriteNoise(string type, string format, Object[] args);
    [NonEventAttribute]
internal void WriteNoiseWithId(string type, string id, string format, Object[] args);
    [EventAttribute("1")]
private void InfoText(string id, string type, string message);
    [EventAttribute("2")]
private void WarningText(string id, string type, string message);
    [EventAttribute("3")]
private void ErrorText(string id, string type, string message);
    [EventAttribute("4")]
private void NoiseText(string id, string type, string message);
}
internal class Microsoft.ServiceFabric.Diagnostics.Tracing.Writer.EventData : ValueType {
    internal ulong DataPointer;
    internal UInt32 Size;
    internal int Reserved;
}
internal class Microsoft.ServiceFabric.Diagnostics.Tracing.Writer.EventDataArrayBuilder : ValueType {
    internal static int TraceEventMaximumSize;
    internal static int BasicTypeAllocationBufferSize;
    private EventData* eventData;
    private UInt32 totalEventSize;
    private EventData* eventDataPtr;
    private Byte* currentBuffer;
    internal EventDataArrayBuilder(EventData* eventData, Byte* dataBuffer);
    internal void AddEventData(Variant variant);
    internal EventData* ToEventDataArray(Char* v0, Char* v1, Char* v2, Char* v3, Char* v4, Char* v5, Char* v6, Char* v7, Char* v8);
    internal bool IsValid();
    private void SetStringDataPointers(Char* v0, Char* v1, Char* v2, Char* v3, Char* v4, Char* v5, Char* v6, Char* v7, Char* v8);
    private void EncodeVariant(Variant data, EventData* dataDescriptor, Byte* dataBuffer);
}
internal class Microsoft.ServiceFabric.Diagnostics.Tracing.Writer.TraceEvent : object {
    private string eventName;
    private EventLevel level;
    private EventKeywords keywords;
    private TraceConfig configMgr;
    private string message;
    private bool filterState;
    public string Message { get; }
    public string EventName { get; }
    public EventLevel Level { get; }
    internal TraceEvent(string eventName, EventLevel level, EventKeywords keywords, string message, TraceConfig configMgr, bool hasId, int typeFieldIndex);
    public string get_Message();
    public string get_EventName();
    public EventLevel get_Level();
    internal void UpdateSinkEnabledStatus();
    internal bool IsEventSinkEnabled();
}
internal class Microsoft.ServiceFabric.Diagnostics.Tracing.Writer.Variant : ValueType {
    private static int SizeOfGuid;
    private ValuesVariant val;
    private string str;
    private byte size;
    private VariantType variantType;
    internal UInt32 Size { get; }
    private Variant(ValuesVariant val, string str, byte size, VariantType variantType);
    internal UInt32 get_Size();
    public static Variant op_Implicit(bool value);
    public static Variant op_Implicit(byte value);
    public static Variant op_Implicit(sbyte value);
    public static Variant op_Implicit(short value);
    public static Variant op_Implicit(ushort value);
    public static Variant op_Implicit(int value);
    public static Variant op_Implicit(UInt32 value);
    public static Variant op_Implicit(long value);
    public static Variant op_Implicit(ulong value);
    public static Variant op_Implicit(double value);
    public static Variant op_Implicit(Guid value);
    public static Variant op_Implicit(DateTime value);
    public static Variant op_Implicit(string value);
    internal bool IsString();
    internal string ConvertToString();
    internal Guid ConvertToGuid();
    internal DateTime ConvertToDateTime();
    internal object ToObject();
}
