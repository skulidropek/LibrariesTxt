internal class Microsoft.ServiceFabric.Services.Remoting.Builder.BuildResult : object {
    private CodeBuilderContext buildContext;
    public CodeBuilderContext BuildContext { get; }
    protected BuildResult(CodeBuilderContext buildContext);
    public CodeBuilderContext get_BuildContext();
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilder : object {
    private Dictionary`2<Type, MethodBodyTypesBuildResult> methodBodyTypesBuildResultMap;
    private Dictionary`2<Type, MethodDispatcherBuildResult> methodDispatcherBuildResultMap;
    private Dictionary`2<Type, ProxyGeneratorBuildResult> proxyGeneratorBuildResultMap;
    private ICodeBuilderNames codeBuilderNames;
    private ICodeBuilderNames Microsoft.ServiceFabric.Services.Remoting.Builder.ICodeBuilder.Names { get; }
    protected CodeBuilder(ICodeBuilderNames codeBuilderNames);
    private sealed virtual override ICodeBuilderNames Microsoft.ServiceFabric.Services.Remoting.Builder.ICodeBuilder.get_Names();
    private sealed virtual override MethodDispatcherBuildResult Microsoft.ServiceFabric.Services.Remoting.Builder.ICodeBuilder.GetOrBuilderMethodDispatcher(Type interfaceType);
    private sealed virtual override MethodBodyTypesBuildResult Microsoft.ServiceFabric.Services.Remoting.Builder.ICodeBuilder.GetOrBuildMethodBodyTypes(Type interfaceType);
    private sealed virtual override ProxyGeneratorBuildResult Microsoft.ServiceFabric.Services.Remoting.Builder.ICodeBuilder.GetOrBuildProxyGenerator(Type interfaceType);
    protected void UpdateMethodDispatcherBuildMap(Type interfaceType, MethodDispatcherBuildResult result);
    protected bool TryGetMethodDispatcher(Type interfaceType, MethodDispatcherBuildResult& builderMethodDispatcher);
    protected void UpdateProxyGeneratorMap(Type interfaceType, ProxyGeneratorBuildResult result);
    protected bool TryGetProxyGenerator(Type interfaceType, ProxyGeneratorBuildResult& orBuildProxyGenerator);
    protected abstract virtual MethodDispatcherBuildResult BuildMethodDispatcher(Type interfaceType);
    protected abstract virtual MethodBodyTypesBuildResult BuildMethodBodyTypes(Type interfaceType);
    protected abstract virtual ProxyGeneratorBuildResult BuildProxyGenerator(Type interfaceType);
}
[AttributeUsageAttribute("1029")]
public class Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <EnableDebugging>k__BackingField;
    public bool EnableDebugging { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableDebugging();
    [CompilerGeneratedAttribute]
public void set_EnableDebugging(bool value);
    internal static bool IsDebuggingEnabled(Type type);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderContext : object {
    private string assemblyNamespace;
    private AssemblyBuilder assemblyBuilder;
    private ModuleBuilder moduleBuilder;
    private bool enableDebugging;
    public AssemblyBuilder AssemblyBuilder { get; }
    public ModuleBuilder ModuleBuilder { get; }
    public string AssemblyNamespace { get; }
    public CodeBuilderContext(string assemblyName, string assemblyNamespace, bool enableDebugging);
    public AssemblyBuilder get_AssemblyBuilder();
    public ModuleBuilder get_ModuleBuilder();
    public string get_AssemblyNamespace();
    public void Complete();
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderModule : object {
    private ICodeBuilder codeBuilder;
    protected ICodeBuilder CodeBuilder { get; }
    protected CodeBuilderModule(ICodeBuilder codeBuilder);
    protected ICodeBuilder get_CodeBuilder();
    protected static IReadOnlyDictionary`2<int, string> GetMethodNameMap(InterfaceDescription interfaceDescription);
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderNames : object {
    private string namePrefix;
    public string InterfaceId { get; }
    public string MethodId { get; }
    public string RetVal { get; }
    public string RequestBody { get; }
    protected CodeBuilderNames(string namePrefix);
    public sealed virtual string get_InterfaceId();
    public sealed virtual string get_MethodId();
    public sealed virtual string get_RetVal();
    public sealed virtual string get_RequestBody();
    public sealed virtual string GetMethodBodyTypesAssemblyName(Type interfaceType);
    public sealed virtual string GetMethodBodyTypesAssemblyNamespace(Type interfaceType);
    public sealed virtual string GetRequestBodyTypeName(string methodName);
    public sealed virtual string GetResponseBodyTypeName(string methodName);
    public sealed virtual string GetMethodDispatcherAssemblyName(Type interfaceType);
    public sealed virtual string GetMethodDispatcherAssemblyNamespace(Type interfaceType);
    public sealed virtual string GetMethodDispatcherClassName(Type interfaceType);
    public sealed virtual string GetProxyAssemblyName(Type interfaceType);
    public sealed virtual string GetProxyAssemblyNamespace(Type interfaceType);
    public sealed virtual string GetProxyClassName(Type interfaceType);
    public sealed virtual string GetProxyActivatorClassName(Type interfaceType);
    public abstract virtual string GetDataContractNamespace();
}
internal static class Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderUtils : object {
    private static ConstructorInfo DcAttrCtorInfo;
    private static PropertyInfo DcAttrNamePropInfo;
    private static PropertyInfo DcAttrNamespacePropInfo;
    private static ConstructorInfo DmAttrCtorInfo;
    private static PropertyInfo DmAttrIsRequiredPropInfo;
    private static Object[] EmptyObjectArray;
    private static CodeBuilderUtils();
    public static AssemblyBuilder CreateAssemblyBuilder(string assemblyName, bool saveOnDisk);
    public static ModuleBuilder CreateModuleBuilder(AssemblyBuilder assemblyBuilder, string moduleName, bool saveOnDisk);
    public static TypeBuilder CreateClassBuilder(ModuleBuilder moduleBuilder, string ns, string className, Type baseType);
    public static TypeBuilder CreateClassBuilder(ModuleBuilder moduleBuilder, string ns, string className, IEnumerable`1<Type> interfaces);
    public static TypeBuilder CreateClassBuilder(ModuleBuilder moduleBuilder, string ns, string className, Type baseType, IEnumerable`1<Type> interfaces);
    public static FieldBuilder CreateFieldBuilder(TypeBuilder typeBuilder, Type fieldType, string fieldName);
    public static MethodBuilder CreatePublicMethodBuilder(TypeBuilder typeBuilder, string methodName);
    public static MethodBuilder CreatePublicMethodBuilder(TypeBuilder typeBuilder, string methodName, Type returnType, Type[] parameterTypes);
    public static MethodBuilder CreateProtectedMethodBuilder(TypeBuilder typeBuilder, string methodName, Type returnType, Type[] parameterTypes);
    public static MethodBuilder CreateExplitInterfaceMethodBuilder(TypeBuilder typeBuilder, MethodInfo interfaceMethod);
    public static TypeBuilder CreateDataContractTypeBuilder(ModuleBuilder moduleBuilder, string ns, string typeName, string dcNamespace, string dcName);
    public static void AddDataMemberField(TypeBuilder dcTypeBuilder, Type fieldType, string fieldName);
    private static void AddDataContractAttribute(TypeBuilder typeBuilder, string dcNamespace, string dcName);
    private static CustomAttributeBuilder CreateCustomDataContractAttributeBuilder(string dcNamespace, string dcName);
    private static CustomAttributeBuilder CreateCustomDataMemberAttributeBuilder();
}
internal interface Microsoft.ServiceFabric.Services.Remoting.Builder.ICodeBuilder {
    public ICodeBuilderNames Names { get; }
    public abstract virtual ICodeBuilderNames get_Names();
    public abstract virtual MethodDispatcherBuildResult GetOrBuilderMethodDispatcher(Type interfaceType);
    public abstract virtual MethodBodyTypesBuildResult GetOrBuildMethodBodyTypes(Type interfaceType);
    public abstract virtual ProxyGeneratorBuildResult GetOrBuildProxyGenerator(Type interfaceType);
}
internal interface Microsoft.ServiceFabric.Services.Remoting.Builder.ICodeBuilderNames {
    public string InterfaceId { get; }
    public string MethodId { get; }
    public string RetVal { get; }
    public string RequestBody { get; }
    public abstract virtual string get_InterfaceId();
    public abstract virtual string get_MethodId();
    public abstract virtual string get_RetVal();
    public abstract virtual string get_RequestBody();
    public abstract virtual string GetMethodBodyTypesAssemblyName(Type interfaceType);
    public abstract virtual string GetMethodBodyTypesAssemblyNamespace(Type interfaceType);
    public abstract virtual string GetRequestBodyTypeName(string methodName);
    public abstract virtual string GetResponseBodyTypeName(string methodName);
    public abstract virtual string GetDataContractNamespace();
    public abstract virtual string GetMethodDispatcherAssemblyName(Type interfaceType);
    public abstract virtual string GetMethodDispatcherAssemblyNamespace(Type interfaceType);
    public abstract virtual string GetMethodDispatcherClassName(Type interfaceType);
    public abstract virtual string GetProxyAssemblyName(Type interfaceType);
    public abstract virtual string GetProxyAssemblyNamespace(Type interfaceType);
    public abstract virtual string GetProxyClassName(Type interfaceType);
    public abstract virtual string GetProxyActivatorClassName(Type interfaceType);
}
public interface Microsoft.ServiceFabric.Services.Remoting.Builder.IProxyActivator {
    public abstract virtual ProxyBase CreateInstance();
}
internal class Microsoft.ServiceFabric.Services.Remoting.Builder.MethodBodyTypes : object {
    [CompilerGeneratedAttribute]
private Type <RequestBodyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResponseBodyType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCancellationTokenArgument>k__BackingField;
    public Type RequestBodyType { get; public set; }
    public Type ResponseBodyType { get; public set; }
    public bool HasCancellationTokenArgument { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_RequestBodyType();
    [CompilerGeneratedAttribute]
public void set_RequestBodyType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ResponseBodyType();
    [CompilerGeneratedAttribute]
public void set_ResponseBodyType(Type value);
    [CompilerGeneratedAttribute]
public bool get_HasCancellationTokenArgument();
    [CompilerGeneratedAttribute]
public void set_HasCancellationTokenArgument(bool value);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Builder.MethodBodyTypesBuilder : CodeBuilderModule {
    public MethodBodyTypesBuilder(ICodeBuilder codeBuilder);
    public MethodBodyTypesBuildResult Build(InterfaceDescription interfaceDescription);
    private static MethodBodyTypes Build(ICodeBuilderNames codeBuilderNames, CodeBuilderContext context, MethodDescription methodDescription);
    private static Type BuildRequestBodyType(ICodeBuilderNames codeBuilderNames, CodeBuilderContext context, MethodDescription methodDescription);
    private static Type BuildResponseBodyType(ICodeBuilderNames codeBuilderNames, CodeBuilderContext context, MethodDescription methodDescription);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Builder.MethodBodyTypesBuildResult : BuildResult {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MethodBodyTypes> <MethodBodyTypesMap>k__BackingField;
    public IDictionary`2<string, MethodBodyTypes> MethodBodyTypesMap { get; public set; }
    public MethodBodyTypesBuildResult(CodeBuilderContext buildContext);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, MethodBodyTypes> get_MethodBodyTypesMap();
    [CompilerGeneratedAttribute]
public void set_MethodBodyTypesMap(IDictionary`2<string, MethodBodyTypes> value);
    public IEnumerable`1<Type> GetRequestBodyTypes();
    public IEnumerable`1<Type> GetResponseBodyTypes();
}
public abstract class Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase : object {
    private int interfaceId;
    private IReadOnlyDictionary`2<int, string> methodNameMap;
    public int InterfaceId { get; }
    public int get_InterfaceId();
    public abstract virtual Task`1<object> DispatchAsync(object objectImplementation, int methodId, object requestBody, CancellationToken cancellationToken);
    public abstract virtual void Dispatch(object objectImplementation, int methodId, object messageBody);
    public string GetMethodName(int methodId);
    internal void SetInterfaceId(int interfaceId);
    internal void SetMethodNameMap(IReadOnlyDictionary`2<int, string> methodNameMap);
    protected Task`1<object> ContinueWith(Task task);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBuildResult : BuildResult {
    [CompilerGeneratedAttribute]
private Type <MethodDispatcherType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDispatcherBase <MethodDispatcher>k__BackingField;
    public Type MethodDispatcherType { get; public set; }
    public MethodDispatcherBase MethodDispatcher { get; public set; }
    public MethodDispatcherBuildResult(CodeBuilderContext buildContext);
    [CompilerGeneratedAttribute]
public Type get_MethodDispatcherType();
    [CompilerGeneratedAttribute]
public void set_MethodDispatcherType(Type value);
    [CompilerGeneratedAttribute]
public MethodDispatcherBase get_MethodDispatcher();
    [CompilerGeneratedAttribute]
public void set_MethodDispatcher(MethodDispatcherBase value);
}
public abstract class Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase : object {
    private IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory;
    internal IServiceRemotingMessageBodyFactory ServiceRemotingMessageBodyFactory { get; internal set; }
    internal IServiceRemotingMessageBodyFactory get_ServiceRemotingMessageBodyFactory();
    internal void set_ServiceRemotingMessageBodyFactory(IServiceRemotingMessageBodyFactory value);
    internal abstract virtual DataContractSerializer GetRequestMessageBodySerializer(int interfaceId);
    internal abstract virtual DataContractSerializer GetResponseMessageBodySerializer(int interfaceId);
    internal abstract virtual object GetResponseMessageBodyValue(object responseMessageBody);
    internal abstract virtual object CreateRequestMessageBody(object requestMessageBodyValue);
    internal abstract virtual Task`1<Byte[]> InvokeAsync(int interfaceId, int methodId, Byte[] requestMsgBodyBytes, CancellationToken cancellationToken);
    internal abstract virtual void Invoke(int interfaceId, int methodId, Byte[] requestMsgBodyBytes);
    internal void InitializeV2(IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory);
    internal abstract virtual void InvokeImplV2(int interfaceId, int methodId, IServiceRemotingRequestMessageBody requestMsgBodyValue);
    internal abstract virtual Task`1<IServiceRemotingResponseMessage> InvokeAsyncImplV2(int interfaceId, int methodId, string methodName, IServiceRemotingRequestMessageBody requestMsgBodyValue, CancellationToken cancellationToken);
    protected void Invoke(int interfaceId, int methodId, object requestMsgBodyValue);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase/<InvokeAsync>d__15")]
protected Task`1<object> InvokeAsync(int interfaceId, int methodId, object requestMsgBodyValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase/<ContinueWithResult>d__16`1")]
protected Task`1<TRetval> ContinueWithResult(int interfaceId, int methodId, Task`1<object> task);
    protected abstract virtual object GetReturnValue(int interfaceId, int methodId, object responseBody);
    protected Task ContinueWith(Task`1<object> task);
    protected virtual IServiceRemotingRequestMessageBody CreateRequestMessageBodyV2(string interfaceName, string methodName, int parameterCount, object wrappedRequest);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase/<ContinueWithResultV2>d__20`1")]
protected Task`1<TRetval> ContinueWithResultV2(int interfaceId, int methodId, Task`1<IServiceRemotingResponseMessageBody> task);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase/<InvokeAsyncV2>d__21")]
protected Task`1<IServiceRemotingResponseMessageBody> InvokeAsyncV2(int interfaceId, int methodId, string methodName, IServiceRemotingRequestMessageBody requestMsgBodyValue, CancellationToken cancellationToken);
    protected void InvokeV2(int interfaceId, int methodId, IServiceRemotingRequestMessageBody requestMsgBodyValue);
    protected bool CheckIfItsWrappedRequest(IServiceRemotingRequestMessageBody requestMessage);
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyGenerator : object {
    private Type proxyInterfaceType;
    public Type ProxyInterfaceType { get; }
    protected ProxyGenerator(Type proxyInterfaceType);
    public Type get_ProxyInterfaceType();
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyGeneratorBuilder`2 : CodeBuilderModule {
    private Type proxyBaseType;
    private MethodInfo invokeAsyncMethodInfo;
    private MethodInfo invokeMethodInfo;
    private MethodInfo continueWithResultMethodInfo;
    private MethodInfo continueWithMethodInfo;
    protected ProxyGeneratorBuilder`2(ICodeBuilder codeBuilder);
    public ProxyGeneratorBuildResult Build(Type proxyInterfaceType, IEnumerable`1<InterfaceDescription> interfaceDescriptions);
    protected virtual void AddInterfaceImplementations(TypeBuilder classBuilder, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap);
    protected virtual void AddAsyncMethodImplementation(TypeBuilder classBuilder, int interfaceId, MethodDescription methodDescription, MethodBodyTypes methodBodyTypes);
    protected abstract virtual TProxyGenerator CreateProxyGenerator(Type proxyInterfaceType, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap, Type proxyActivatorType);
    private static void AddCreateInstanceMethod(TypeBuilder classBuilder, Type proxyType);
    private Type BuildProxyActivatorType(CodeBuilderContext context, Type proxyInterfaceType, Type proxyType);
    private void AddVoidMethodImplementation(TypeBuilder classBuilder, int interfaceId, MethodDescription methodDescription, MethodBodyTypes methodBodyTypes);
    private Type BuildProxyType(CodeBuilderContext context, Type proxyInterfaceType, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap);
    private void AddGetReturnValueMethod(TypeBuilder classBuilder, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap);
    private void AddIfInterfaceIdAndMethodIdReturnRetvalBlock(ILGenerator ilGen, Label elseLabel, int interfaceId, int methodId, Type responseBodyType);
    [CompilerGeneratedAttribute]
private MethodBodyTypesBuildResult <Build>b__6_1(InterfaceDescription d);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyGeneratorBuildResult : BuildResult {
    [CompilerGeneratedAttribute]
private Type <ProxyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProxyActivatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private ProxyGenerator <ProxyGenerator>k__BackingField;
    public Type ProxyType { get; public set; }
    public Type ProxyActivatorType { get; public set; }
    public ProxyGenerator ProxyGenerator { get; public set; }
    public ProxyGeneratorBuildResult(CodeBuilderContext buildContext);
    [CompilerGeneratedAttribute]
public Type get_ProxyType();
    [CompilerGeneratedAttribute]
public void set_ProxyType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ProxyActivatorType();
    [CompilerGeneratedAttribute]
public void set_ProxyActivatorType(Type value);
    [CompilerGeneratedAttribute]
public ProxyGenerator get_ProxyGenerator();
    [CompilerGeneratedAttribute]
public void set_ProxyGenerator(ProxyGenerator value);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Builder.ServiceCodeBuilderNames : CodeBuilderNames {
    public virtual string GetDataContractNamespace();
}
public interface Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy {
    public Type ServiceInterfaceType { get; }
    public IServiceRemotingPartitionClient ServicePartitionClient { get; }
    public IServiceRemotingPartitionClient ServicePartitionClient2 { get; }
    public abstract virtual Type get_ServiceInterfaceType();
    public abstract virtual IServiceRemotingPartitionClient get_ServicePartitionClient();
    public abstract virtual IServiceRemotingPartitionClient get_ServicePartitionClient2();
}
public interface Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxyFactory {
    public abstract virtual TServiceInterface CreateServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    public abstract virtual TServiceInterface CreateNonIServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
}
public abstract class Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy : ProxyBase {
    private static ServiceProxyFactory DefaultProxyFactory;
    private ServiceProxyGeneratorWith proxyGeneratorV1;
    private ServiceRemotingPartitionClient partitionClient;
    private ServiceRemotingPartitionClient partitionClientV2;
    [CompilerGeneratedAttribute]
private Type <ServiceInterfaceType>k__BackingField;
    public Type ServiceInterfaceType { get; private set; }
    public IServiceRemotingPartitionClient ServicePartitionClient { get; }
    public IServiceRemotingPartitionClient ServicePartitionClient2 { get; }
    private static ServiceProxy();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceInterfaceType();
    [CompilerGeneratedAttribute]
private void set_ServiceInterfaceType(Type value);
    public sealed virtual IServiceRemotingPartitionClient get_ServicePartitionClient();
    public sealed virtual IServiceRemotingPartitionClient get_ServicePartitionClient2();
    public static TServiceInterface Create(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    internal void Initialize(ServiceProxyGeneratorWith generatorWith, ServiceRemotingPartitionClient client);
    internal virtual DataContractSerializer GetRequestMessageBodySerializer(int interfaceId);
    internal virtual DataContractSerializer GetResponseMessageBodySerializer(int interfaceId);
    internal virtual object GetResponseMessageBodyValue(object responseMessageBody);
    internal virtual object CreateRequestMessageBody(object requestMessageBodyValue);
    internal virtual Task`1<Byte[]> InvokeAsync(int interfaceId, int methodId, Byte[] requestMsgBodyBytes, CancellationToken cancellationToken);
    internal virtual void Invoke(int interfaceId, int methodId, Byte[] requestMsgBodyBytes);
    internal void Initialize(ServiceProxyGenerator proxyGenerator, ServiceRemotingPartitionClient client, IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory);
    internal virtual Task`1<IServiceRemotingResponseMessage> InvokeAsyncImplV2(int interfaceId, int methodId, string methodName, IServiceRemotingRequestMessageBody requestMsgBodyValue, CancellationToken cancellationToken);
    internal virtual void InvokeImplV2(int interfaceId, int methodId, IServiceRemotingRequestMessageBody requestMsgBodyValue);
}
public class Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory : object {
    private object thisLock;
    private OperationRetrySettings retrySettings;
    private ServiceProxyFactory proxyFactoryV1;
    private ServiceProxyFactory proxyFactoryV2;
    private bool overrideListenerName;
    private string defaultListenerName;
    public ServiceProxyFactory(OperationRetrySettings retrySettings);
    public ServiceProxyFactory(Func`2<IServiceRemotingCallbackClient, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings, Action`1<IServiceRemotingClientFactory> disposeFactory);
    public ServiceProxyFactory(Func`2<IServiceRemotingCallbackMessageHandler, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings, Action`1<IServiceRemotingClientFactory> disposeFactory);
    public sealed virtual TServiceInterface CreateServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    public sealed virtual TServiceInterface CreateNonIServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    public void Dispose();
    private ServiceRemotingProviderAttribute GetProviderAttribute(Type serviceInterfaceType);
    private string GetDefaultListenerName(string listenerName, RemotingClientVersion remotingClientVersion);
    private string OverrideListenerNameIfConditionMet(string listenerName);
}
public class Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler : object {
    private static string TraceType;
    private string traceId;
    public ServiceRemotingExceptionHandler(string traceId);
    private static ServiceRemotingExceptionHandler();
    private sealed virtual override bool Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings, ExceptionHandlingResult& result);
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.Description.InterfaceDescription : object {
    private Type remotedInterfaceType;
    private bool useCRCIdGeneration;
    private int interfaceId;
    private int interfaceIdV1;
    private MethodDescription[] methods;
    public int V1Id { get; }
    public int Id { get; }
    public Type InterfaceType { get; }
    public MethodDescription[] Methods { get; }
    protected InterfaceDescription(string remotedInterfaceKindName, Type remotedInterfaceType, bool useCRCIdGeneration, MethodReturnCheck methodReturnCheck);
    public int get_V1Id();
    public int get_Id();
    public Type get_InterfaceType();
    public MethodDescription[] get_Methods();
    private static void EnsureNotGeneric(string remotedInterfaceKindName, Type remotedInterfaceType);
    private static MethodDescription[] GetMethodDescriptions(string remotedInterfaceKindName, Type remotedInterfaceType, MethodReturnCheck methodReturnCheck, bool useCRCIdGeneration);
    private static void EnsureValidMethods(string remotedInterfaceKindName, Type remotedInterfaceType, MethodReturnCheck methodReturnCheck);
    private static void EnsureNotOverloaded(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo, ISet`1<string> methodNameSet);
    private static void EnsureNotGeneric(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo);
    private static void EnsureNotVariableArgs(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo);
    private static void EnsureReturnsTask(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo);
    private static void EnsureReturnsVoid(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo);
    private static void ThrowArgumentExceptionForMethodChecks(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo, string resourceName);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Description.MethodArgumentDescription : object {
    private ParameterInfo parameterInfo;
    public string Name { get; }
    public Type ArgumentType { get; }
    private MethodArgumentDescription(ParameterInfo parameterInfo);
    public string get_Name();
    public Type get_ArgumentType();
    internal static MethodArgumentDescription Create(string remotedInterfaceKindName, MethodInfo methodInfo, ParameterInfo parameter);
    private static void EnsureNotVariableLength(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo, ParameterInfo param);
    private static void EnsureNotOutRefOptional(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo, ParameterInfo param);
    private static void ThrowArgumentExceptionForParamChecks(string remotedInterfaceKindName, Type remotedInterfaceType, MethodInfo methodInfo, ParameterInfo param, string resourceName);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Description.MethodDescription : object {
    private MethodInfo methodInfo;
    private int methodId;
    private MethodArgumentDescription[] arguments;
    private bool hasCancellationToken;
    private bool useCRCIdGeneration;
    private int methodIdV1;
    public int Id { get; }
    public int V1Id { get; }
    public string Name { get; }
    public Type ReturnType { get; }
    public bool HasCancellationToken { get; }
    public MethodArgumentDescription[] Arguments { get; }
    public MethodInfo MethodInfo { get; }
    private MethodDescription(MethodInfo methodInfo, MethodArgumentDescription[] arguments, bool hasCancellationToken, bool useCRCIdGeneration);
    public int get_Id();
    public int get_V1Id();
    public string get_Name();
    public Type get_ReturnType();
    public bool get_HasCancellationToken();
    public MethodArgumentDescription[] get_Arguments();
    public MethodInfo get_MethodInfo();
    internal static MethodDescription Create(string remotedInterfaceKindName, MethodInfo methodInfo, bool useCRCIdGeneration);
}
internal enum Microsoft.ServiceFabric.Services.Remoting.Description.MethodReturnCheck : Enum {
    public int value__;
    public static MethodReturnCheck EnsureReturnsTask;
    public static MethodReturnCheck EnsureReturnsVoid;
}
internal class Microsoft.ServiceFabric.Services.Remoting.Description.ServiceInterfaceDescription : InterfaceDescription {
    private ServiceInterfaceDescription(Type serviceInterfaceType, bool useCRCIdGeneration);
    public static ServiceInterfaceDescription Create(Type serviceInterfaceType);
    public static ServiceInterfaceDescription CreateUsingCRCId(Type serviceInterfaceType, bool checkForServiceInterface);
    private static void EnsureServiceInterface(Type serviceInterfaceType);
}
internal static class Microsoft.ServiceFabric.Services.Remoting.Description.TypeUtility : object {
    public static bool IsTaskType(Type type);
    public static bool IsVoidType(Type type);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Diagnostic.PerformanceCounterInstanceNameBuilder : object {
    private static int MaxCounterInstanceNameLen;
    private static int defaultMaxInstanceNameVariablePartsLen;
    private string counterInstanceDifferentiator;
    private int maxMethodInfoLen;
    private Guid partitionId;
    internal static int DefaultMaxInstanceNameVariablePartsLen { get; internal set; }
    internal PerformanceCounterInstanceNameBuilder(Guid partitionId, string counterInstanceDifferentiator, int maxInstanceNameVariablePartsLen);
    private static PerformanceCounterInstanceNameBuilder();
    internal static int get_DefaultMaxInstanceNameVariablePartsLen();
    internal static void set_DefaultMaxInstanceNameVariablePartsLen(int value);
    internal IEnumerable`1<KeyValuePair`2<long, string>> GetMethodCounterInstanceNames(IEnumerable`1<KeyValuePair`2<long, MethodInfo>> actorMethodInfo);
    private Dictionary`2<long, MethodNameBuilder> CreateMethodNameBuilders(IEnumerable`1<KeyValuePair`2<long, MethodInfo>> actorMethodInfo);
    private string FormatMethodParameters(MethodInfo methodInfo);
    private void ComputeMethodRanks(IEnumerable`1<MethodNameBuilder> methodNameBuilders);
    private void ComputeMaxMethodNameLength(IEnumerable`1<MethodNameBuilder> methodNameBuilders);
    private Dictionary`2<string, int> CreateMethodOverloadMap(IEnumerable`1<MethodNameBuilder> methodNameBuilders);
    private void ComputeMethodNameInCounterInstanceName(IEnumerable`1<MethodNameBuilder> methodNameBuilders, Dictionary`2<string, int> methodOverloads);
    private string ComputeTruncatedMethodName(MethodNameBuilder methodNameBuilder);
    private void PrepareMethodNamePartForTruncation(string fullNameOfMethodNamePart, MethodNameParts methodNamePart, int minLengthToQualifyForTruncation, List`1<MethodNameParts> partsToTruncate, Int32& availableSpaceForTruncatedParts, String& truncatedNameOfMethodNamePart);
    private string TruncateTypeOrMethod(string typeOrMethod, int maxSizeOfTruncatedPart);
    private string TruncateParams(ParameterInfo[] parameterInfo, int maxSizeOfTruncatedPart);
    private IEnumerable`1<KeyValuePair`2<long, string>> ComputeCounterInstanceNames(Dictionary`2<long, MethodNameBuilder> methodNameBuilders);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Diagnostic.ServicePerformanceCounterProvider : object {
    internal FabricAverageCount64PerformanceCounterWriter ServiceRequestProcessingTimeCounterWriter;
    internal FabricAverageCount64PerformanceCounterWriter ServiceRequestDeserializationTimeCounterWriter;
    internal FabricAverageCount64PerformanceCounterWriter ServiceResponseSerializationTimeCounterWriter;
    internal FabricNumberOfItems64PerformanceCounterWriter ServiceOutstandingRequestsCounterWriter;
    private static string TraceType;
    private static int MaxDigits;
    private static FabricPerformanceCounterSet serviceCounterSet;
    private static FabricPerformanceCounterSet serviceMethodCounterSet;
    private bool generateCounterforServiceCategory;
    private FabricPerformanceCounterSetInstance serviceCounterSetInstance;
    private Guid partitionId;
    private string counterInstanceDifferentiator;
    private Dictionary`2<long, CounterInstanceData> serviceMethodCounterInstanceData;
    private IEnumerable`1<ServiceInterfaceDescription> serviceInterfaceDescriptions;
    private static ServicePerformanceCounterProvider();
    public ServicePerformanceCounterProvider(Guid partitionId, long replicaOrInstanceId, List`1<ServiceInterfaceDescription> interfaceDescriptions, bool generateCounterforServiceCategory);
    public sealed virtual void Dispose();
    internal void OnServiceMethodFinish(int interfaceId, int methodId, TimeSpan executionTime, Exception ex);
    private static void InitializeAvailableCounterTypes();
    private static FabricPerformanceCounterSet CreateCounterSet(Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> counterSetDefinitions, string categoryName);
    private static void DumpCounterSetInfo(FabricPerformanceCounterSet counterSet, IEnumerable`1<FabricPerformanceCounterDefinition> activeCounters);
    private static long GetInterfaceMethodKey(int interfaceId, int methodId);
    private void InitializeServiceMethodInfo();
    private MethodSpecificCounterWriters InitializeMethodCounterInstanceData(string instanceName);
    private void CreateserviceCounterWriters(string serviceCounterInstanceName);
    private T CreateMethodCounterWriter(string instanceName, Type counterWriterType, FabricPerformanceCounterSetInstance instance, Func`2<FabricPerformanceCounterSetInstance, T> counterWriterCreationCallback);
    private T CreateCounterWriter(string serviceCounterInstanceName, Type writerType, Func`1<T> writerCreationCallback);
    private void LogCounterInstanceCreationResult(Type counterWriterType, string instanceName, Exception e);
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateserviceCounterWriters>b__24_0();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateserviceCounterWriters>b__24_1();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateserviceCounterWriters>b__24_2();
    [CompilerGeneratedAttribute]
private FabricNumberOfItems64PerformanceCounterWriter <CreateserviceCounterWriters>b__24_3();
}
internal class Microsoft.ServiceFabric.Services.Remoting.Diagnostic.ServiceRemotingPerformanceCounters : object {
    internal static string ServiceMethodCategoryName;
    internal static string ServiceMethodInvocationsPerSecCounterName;
    internal static string ServiceMethodExecTimeMillisecCounterName;
    internal static string ServiceMethodExecTimeMillisecBaseCounterName;
    internal static string ServiceMethodExceptionsPerSecCounterName;
    internal static string ServiceCategoryName;
    internal static string ServiceRequestProcessingTimeMillisecCounterName;
    internal static string ServiceRequestProcessingTimeMillisecBaseCounterName;
    internal static string ServiceRequestDeserializationTimeMillisecCounterName;
    internal static string ServiceRequestDeserializationTimeMillisecBaseCounterName;
    internal static string ServiceResponseSerializationTimeMillisecCounterName;
    internal static string ServiceResponseSerializationTimeMillisecBaseCounterName;
    internal static string ServiceOutstandingRequestsCounterName;
    private static Dictionary`2<Tuple`2<string, string>, FabricPerformanceCounterType> CounterTypes;
    private static Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> CounterSets;
    private static ServiceRemotingPerformanceCounters();
    public sealed virtual Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> GetCounterSets();
    internal static FabricPerformanceCounterType GetType(string categoryName, string counterName);
}
internal class Microsoft.ServiceFabric.Services.Remoting.FabricTransport.ExceptionHandler : object {
    private sealed virtual override bool Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings, ExceptionHandlingResult& result);
    private static bool TryHandleFabricException(FabricException fabricException, OperationRetrySettings retrySettings, ExceptionHandlingResult& result);
}
public class Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings : object {
    internal static string DefaultSectionName;
    private static string Tracetype;
    private FabricTransportSettings fabricTransportSettings;
    private int headerBufferSize;
    private int headerMaxBufferCount;
    private bool useWrappedMessage;
    [CompilerGeneratedAttribute]
private ExceptionDeserialization <ExceptionDeserializationTechnique>k__BackingField;
    public ExceptionDeserialization ExceptionDeserializationTechnique { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    public TimeSpan KeepAliveTimeout { get; public set; }
    public TimeSpan ConnectTimeout { get; public set; }
    public long MaxMessageSize { get; public set; }
    public long MaxQueueSize { get; public set; }
    public long MaxConcurrentCalls { get; public set; }
    public int HeaderBufferSize { get; public set; }
    public int HeaderMaxBufferCount { get; public set; }
    public SecurityCredentials SecurityCredentials { get; public set; }
    public bool UseWrappedMessage { get; public set; }
    internal FabricTransportRemotingSettings(FabricTransportSettings fabricTransportSettings);
    private static FabricTransportRemotingSettings();
    [CompilerGeneratedAttribute]
public ExceptionDeserialization get_ExceptionDeserializationTechnique();
    [CompilerGeneratedAttribute]
public void set_ExceptionDeserializationTechnique(ExceptionDeserialization value);
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    public TimeSpan get_KeepAliveTimeout();
    public void set_KeepAliveTimeout(TimeSpan value);
    public TimeSpan get_ConnectTimeout();
    public void set_ConnectTimeout(TimeSpan value);
    public long get_MaxMessageSize();
    public void set_MaxMessageSize(long value);
    public long get_MaxQueueSize();
    public void set_MaxQueueSize(long value);
    public long get_MaxConcurrentCalls();
    public void set_MaxConcurrentCalls(long value);
    public int get_HeaderBufferSize();
    public void set_HeaderBufferSize(int value);
    public int get_HeaderMaxBufferCount();
    public void set_HeaderMaxBufferCount(int value);
    public SecurityCredentials get_SecurityCredentials();
    public void set_SecurityCredentials(SecurityCredentials value);
    public bool get_UseWrappedMessage();
    public void set_UseWrappedMessage(bool value);
    public static FabricTransportRemotingSettings LoadFrom(string sectionName, string filepath, string configPackageName);
    public static bool TryLoadFrom(string sectionName, FabricTransportRemotingSettings& settings, string filepath, string configPackageName);
    internal static FabricTransportRemotingSettings GetDefault(string sectionName);
    internal FabricTransportSettings GetInternalSettings();
}
public class Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportServiceRemotingProviderAttribute : ServiceRemotingProviderAttribute {
    [CompilerGeneratedAttribute]
private long <MaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OperationTimeoutInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <KeepAliveTimeoutInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConnectTimeoutInMilliseconds>k__BackingField;
    public long MaxMessageSize { get; public set; }
    public long OperationTimeoutInSeconds { get; public set; }
    public long KeepAliveTimeoutInSeconds { get; public set; }
    public long ConnectTimeoutInMilliseconds { get; public set; }
    [CompilerGeneratedAttribute]
public long get_MaxMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSize(long value);
    [CompilerGeneratedAttribute]
public long get_OperationTimeoutInSeconds();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutInSeconds(long value);
    [CompilerGeneratedAttribute]
public long get_KeepAliveTimeoutInSeconds();
    [CompilerGeneratedAttribute]
public void set_KeepAliveTimeoutInSeconds(long value);
    [CompilerGeneratedAttribute]
public long get_ConnectTimeoutInMilliseconds();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeoutInMilliseconds(long value);
    public virtual IServiceRemotingListener CreateServiceRemotingListener(ServiceContext serviceContext, IService serviceImplementation);
    public virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackClient callbackClient);
    public virtual Dictionary`2<string, Func`3<ServiceContext, IService, IServiceRemotingListener>> CreateServiceRemotingListeners();
    public virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactoryV2(IServiceRemotingCallbackMessageHandler callbackMessageHandler);
    internal FabricTransportRemotingListenerSettings GetListenerSettings(ServiceContext serviceContext);
    private long GetAndValidateMaxMessageSize(long maxMessageSize);
    private TimeSpan GetAndValidateOperationTimeout(TimeSpan operationTimeout);
    private TimeSpan GetKeepAliveTimeout(TimeSpan keepAliveTimeout);
    private TimeSpan GetConnectTimeout(TimeSpan connectTimeout);
    [CompilerGeneratedAttribute]
private IServiceRemotingListener <CreateServiceRemotingListeners>b__19_0(ServiceContext serviceContext, IService serviceImplementation);
    [CompilerGeneratedAttribute]
private IServiceRemotingListener <CreateServiceRemotingListeners>b__19_1(ServiceContext serviceContext, IService serviceImplementation);
}
internal class Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportCallbackNotFoundException : FabricException {
    public FabricTransportCallbackNotFoundException(string message);
}
public class Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportRemotingListenerSettings : object {
    private static string Tracetype;
    private static int DefaultRemotingExceptionDepth;
    private FabricTransportListenerSettings listenerSettings;
    private int headerBufferSize;
    private int headerMaxBufferCount;
    private bool useWrappedMessage;
    private int remotingExceptionDepth;
    [CompilerGeneratedAttribute]
private ExceptionSerialization <ExceptionSerializationTechnique>k__BackingField;
    public ExceptionSerialization ExceptionSerializationTechnique { get; public set; }
    public string EndpointResourceName { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    public TimeSpan KeepAliveTimeout { get; public set; }
    public long MaxMessageSize { get; public set; }
    public long MaxQueueSize { get; public set; }
    public long MaxConcurrentCalls { get; public set; }
    public int HeaderBufferSize { get; public set; }
    public int HeaderMaxBufferCount { get; public set; }
    public SecurityCredentials SecurityCredentials { get; public set; }
    public bool UseWrappedMessage { get; public set; }
    public int RemotingExceptionDepth { get; public set; }
    internal static object DefaultEndpointResourceName { get; }
    private FabricTransportRemotingListenerSettings(FabricTransportListenerSettings listenerSettings);
    private static FabricTransportRemotingListenerSettings();
    [CompilerGeneratedAttribute]
public ExceptionSerialization get_ExceptionSerializationTechnique();
    [CompilerGeneratedAttribute]
public void set_ExceptionSerializationTechnique(ExceptionSerialization value);
    public string get_EndpointResourceName();
    public void set_EndpointResourceName(string value);
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    public TimeSpan get_KeepAliveTimeout();
    public void set_KeepAliveTimeout(TimeSpan value);
    public long get_MaxMessageSize();
    public void set_MaxMessageSize(long value);
    public long get_MaxQueueSize();
    public void set_MaxQueueSize(long value);
    public long get_MaxConcurrentCalls();
    public void set_MaxConcurrentCalls(long value);
    public int get_HeaderBufferSize();
    public void set_HeaderBufferSize(int value);
    public int get_HeaderMaxBufferCount();
    public void set_HeaderMaxBufferCount(int value);
    public SecurityCredentials get_SecurityCredentials();
    public void set_SecurityCredentials(SecurityCredentials value);
    public bool get_UseWrappedMessage();
    public void set_UseWrappedMessage(bool value);
    public int get_RemotingExceptionDepth();
    public void set_RemotingExceptionDepth(int value);
    internal static object get_DefaultEndpointResourceName();
    public static FabricTransportRemotingListenerSettings LoadFrom(string sectionName, string configPackageName);
    public static bool TryLoadFrom(string sectionName, FabricTransportRemotingListenerSettings& remotingListenerSettings, string configPackageName);
    internal static FabricTransportRemotingListenerSettings GetDefault(string sectionName);
    internal FabricTransportListenerSettings GetInternalSettings();
}
internal class Microsoft.ServiceFabric.Services.Remoting.Helper : object {
    public static bool IsEitherRemotingV2(RemotingClientVersion remotingClient);
    public static bool IsEitherRemotingV2(RemotingListenerVersion remotingListener);
    public static bool IsRemotingV2(RemotingClientVersion remotingClient);
    public static bool IsRemotingV2(RemotingListenerVersion remotingListener);
    public static bool IsRemotingV2_1(RemotingListenerVersion remotingListener);
    public static bool IsRemotingV2_1(RemotingClientVersion remotingClient);
    public static bool IsRemotingV1(RemotingListenerVersion remotingListener);
    public static bool IsRemotingV1(RemotingClientVersion remotingListener);
}
public interface Microsoft.ServiceFabric.Services.Remoting.IService {
}
public enum Microsoft.ServiceFabric.Services.Remoting.RemotingClientVersion : Enum {
    public int value__;
    public static RemotingClientVersion V1;
    public static RemotingClientVersion V2;
    public static RemotingClientVersion V2_1;
}
[FlagsAttribute]
public enum Microsoft.ServiceFabric.Services.Remoting.RemotingListenerVersion : Enum {
    public int value__;
    public static RemotingListenerVersion V1;
    public static RemotingListenerVersion V2;
    public static RemotingListenerVersion V2_1;
}
internal class Microsoft.ServiceFabric.Services.Remoting.Runtime.CancellationTokenResult : object {
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTknSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancellationTokenValid>k__BackingField;
    public CancellationTokenSource CancellationTknSource { get; public set; }
    public bool CancellationTokenValid { get; public set; }
    [CompilerGeneratedAttribute]
public CancellationTokenSource get_CancellationTknSource();
    [CompilerGeneratedAttribute]
public void set_CancellationTknSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
public bool get_CancellationTokenValid();
    [CompilerGeneratedAttribute]
public void set_CancellationTokenValid(bool value);
}
public interface Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener {
}
internal class Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationHelper : object {
    private static string TraceType;
    private ConcurrentDictionary`2<int, ServiceRemotingCancellationTracker> requestCancellationTracker;
    private string traceId;
    public ServiceRemotingCancellationHelper(string traceId);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationHelper/<CancelRequestAsync>d__4")]
public Task CancelRequestAsync(int interfaceId, int methodId, string callContext);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationHelper/<DispatchRequest>d__5`1")]
public Task`1<T> DispatchRequest(int interfaceId, int methodId, string callContext, Func`2<CancellationToken, Task`1<T>> dispatchFunc);
    private ServiceRemotingCancellationTracker GetCancellationTracker(int interfaceId);
}
internal class Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker : object {
    private ConcurrentDictionary`2<int, MethodCallTracker> methodCallTrackerDictionary;
    public Task`1<CancellationTokenSource> GetOrAddCancellationTokenSource(int methodId, string callId);
    public Task`1<CancellationTokenResult> TryGetCancellationTokenSource(int methodId, string callId);
    public Task TryRemoveCancellationTokenSource(int methodId, string callId);
}
[ExtensionAttribute]
public static class Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions : object {
    [ExtensionAttribute]
public static IServiceRemotingListener CreateServiceRemotingListener(TStatefulService serviceImplementation, StatefulServiceContext serviceContext);
    [ExtensionAttribute]
public static IServiceRemotingListener CreateServiceRemotingListener(TStatelessService serviceImplementation, StatelessServiceContext serviceContext);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceReplicaListener> CreateServiceRemotingReplicaListeners(TStatefulService serviceImplementation);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceInstanceListener> CreateServiceRemotingInstanceListeners(TStatelessService serviceImplementation);
    private static IServiceRemotingListener CreateServiceRemotingListener(ServiceContext serviceContext, object serviceImplementation);
}
public class Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <InterfaceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAbstract>k__BackingField;
    public IEnumerable`1<Type> InterfaceTypes { get; private set; }
    public Type ImplementationType { get; private set; }
    public bool IsAbstract { get; private set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<Type> get_InterfaceTypes();
    [CompilerGeneratedAttribute]
private void set_InterfaceTypes(IEnumerable`1<Type> value);
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
    [CompilerGeneratedAttribute]
private void set_ImplementationType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsAbstract();
    [CompilerGeneratedAttribute]
private void set_IsAbstract(bool value);
    public static bool TryGet(Type serviceType, ServiceTypeInformation& serviceTypeInformation);
    public static ServiceTypeInformation Get(Type serviceType);
}
[AttributeUsageAttribute("1")]
public abstract class Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private RemotingClientVersion <RemotingClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private RemotingListenerVersion <RemotingListenerVersion>k__BackingField;
    public RemotingClientVersion RemotingClientVersion { get; public set; }
    public RemotingListenerVersion RemotingListenerVersion { get; public set; }
    internal static string DefaultV2listenerName { get; }
    internal static string DefaultWrappedMessageStackListenerName { get; }
    [CompilerGeneratedAttribute]
public RemotingClientVersion get_RemotingClientVersion();
    [CompilerGeneratedAttribute]
public void set_RemotingClientVersion(RemotingClientVersion value);
    [CompilerGeneratedAttribute]
public RemotingListenerVersion get_RemotingListenerVersion();
    [CompilerGeneratedAttribute]
public void set_RemotingListenerVersion(RemotingListenerVersion value);
    internal static string get_DefaultV2listenerName();
    internal static string get_DefaultWrappedMessageStackListenerName();
    public abstract virtual IServiceRemotingListener CreateServiceRemotingListener(ServiceContext serviceContext, IService serviceImplementation);
    public abstract virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackClient callbackClient);
    public abstract virtual Dictionary`2<string, Func`3<ServiceContext, IService, IServiceRemotingListener>> CreateServiceRemotingListeners();
    public abstract virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactoryV2(IServiceRemotingCallbackMessageHandler callbackMessageHandler);
    internal static ServiceRemotingProviderAttribute GetProvider(IEnumerable`1<Type> types);
}
[ExtensionAttribute]
internal static class Microsoft.ServiceFabric.Services.Remoting.ServiceTypeExtensions : object {
    [ExtensionAttribute]
public static Type[] GetServiceInterfaces(Type serviceType);
    [ExtensionAttribute]
public static Type[] GetAllBaseInterfaces(Type serviceType);
    [ExtensionAttribute]
internal static Type GetNonServiceParentInterface(Type type);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_InvalidOperation { get; }
    internal static string ErrorClientCallbackChannelNotFound { get; }
    internal static string ErrorDeserializationFailure { get; }
    internal static string ErrorExceptionSerializationFailed1 { get; }
    internal static string ErrorExceptionSerializationFailed2 { get; }
    internal static string ErrorHeaderAlreadyExists { get; }
    internal static string ErrorInterfaceNotImplemented { get; }
    internal static string ErrorInvalidAddress { get; }
    internal static string ErrorMethodNotImplemented { get; }
    internal static string ErrorMethodNotSupportedInRemotingV1 { get; }
    internal static string ErrorMissingMethod { get; }
    internal static string ErrorNoServiceInterfaceFound { get; }
    internal static string ErrorNotAServiceInterface_DerivationCheck1 { get; }
    internal static string ErrorNotAServiceInterface_DerivationCheck2 { get; }
    internal static string ErrorNotAServiceInterface_InterfaceCheck { get; }
    internal static string ErrorRemotedInterfaceIsGeneric { get; }
    internal static string ErrorRemotedMethodCancellationTokenOutOfOrder { get; }
    internal static string ErrorRemotedMethodDoesNotReturnTask { get; }
    internal static string ErrorRemotedMethodDoesNotReturnVoid { get; }
    internal static string ErrorRemotedMethodHasGenerics { get; }
    internal static string ErrorRemotedMethodHasOutRefOptionalParameter { get; }
    internal static string ErrorRemotedMethodHasVaArgParameter { get; }
    internal static string ErrorRemotedMethodHasVaArgs { get; }
    internal static string ErrorRemotedMethodsIsOverloaded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_InvalidOperation();
    internal static string get_ErrorClientCallbackChannelNotFound();
    internal static string get_ErrorDeserializationFailure();
    internal static string get_ErrorExceptionSerializationFailed1();
    internal static string get_ErrorExceptionSerializationFailed2();
    internal static string get_ErrorHeaderAlreadyExists();
    internal static string get_ErrorInterfaceNotImplemented();
    internal static string get_ErrorInvalidAddress();
    internal static string get_ErrorMethodNotImplemented();
    internal static string get_ErrorMethodNotSupportedInRemotingV1();
    internal static string get_ErrorMissingMethod();
    internal static string get_ErrorNoServiceInterfaceFound();
    internal static string get_ErrorNotAServiceInterface_DerivationCheck1();
    internal static string get_ErrorNotAServiceInterface_DerivationCheck2();
    internal static string get_ErrorNotAServiceInterface_InterfaceCheck();
    internal static string get_ErrorRemotedInterfaceIsGeneric();
    internal static string get_ErrorRemotedMethodCancellationTokenOutOfOrder();
    internal static string get_ErrorRemotedMethodDoesNotReturnTask();
    internal static string get_ErrorRemotedMethodDoesNotReturnVoid();
    internal static string get_ErrorRemotedMethodHasGenerics();
    internal static string get_ErrorRemotedMethodHasOutRefOptionalParameter();
    internal static string get_ErrorRemotedMethodHasVaArgParameter();
    internal static string get_ErrorRemotedMethodHasVaArgs();
    internal static string get_ErrorRemotedMethodsIsOverloaded();
}
public abstract class Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBaseWithSerializer : MethodDispatcherBase {
    private DataContractSerializer requestBodySerializer;
    private DataContractSerializer responseBodySerializer;
    public virtual Task`1<object> DispatchAsync(object objectImplementation, int methodId, object requestBody, CancellationToken cancellationToken);
    public virtual void Dispatch(object objectImplementation, int methodId, object messageBody);
    internal void SetRequestKnownTypes(IEnumerable`1<Type> requestBodyTypes, IEnumerable`1<Type> responseBodyTypes);
    internal void Initialize(InterfaceDescription description, IReadOnlyDictionary`2<int, string> methodMap, IEnumerable`1<Type> requestBodyTypes, IEnumerable`1<Type> responseBodyTypes);
    internal object DeserializeRequestMessageBody(Byte[] requestMsgBodyBytes);
    internal Byte[] SerializeResponseMessageBody(object responseMsgBody);
    internal abstract virtual DataContractSerializer CreateRequestMessageBodySerializer(IEnumerable`1<Type> requestBodyValueTypes);
    internal abstract virtual DataContractSerializer CreateResponseMessageBodySerializer(IEnumerable`1<Type> responseBodyValueTypes);
    internal abstract virtual object CreateResponseMessageBody(object responseMessageBodyValue);
    internal abstract virtual object GetRequestMessageBodyValue(object requestMessageBody);
    protected Task`1<object> ContinueWithResult(int methodId, Task`1<TRetval> task);
    protected abstract virtual object CreateResponseBody(int methodId, object retval);
    protected abstract virtual Task`1<object> OnDispatchAsync(int methodId, object remotedObject, object requestBody, CancellationToken cancellationToken);
    protected abstract virtual void OnDispatch(int methodId, object remotedObject, object messageBody);
    [CompilerGeneratedAttribute]
private object <DispatchAsync>b__2_0(Task`1<object> t);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.Builder.MethodDispatcherBuilder`1 : CodeBuilderModule {
    private Type methodDispatcherBaseType;
    private MethodInfo continueWithResultMethodInfo;
    private MethodInfo continueWithMethodInfo;
    public MethodDispatcherBuilder`1(ICodeBuilder codeBuilder);
    public MethodDispatcherBuildResult Build(InterfaceDescription interfaceDescription);
    private void AddCreateResponseBodyMethod(TypeBuilder classBuilder, InterfaceDescription interfaceDescription, MethodBodyTypesBuildResult methodBodyTypesBuildResult);
    private void AddIfMethodIdCreateResponseBlock(ILGenerator ilGen, Label elseLabel, int methodId, Type responseType);
    private void AddOnDispatchAsyncMethod(TypeBuilder classBuilder, InterfaceDescription interfaceDescription, MethodBodyTypesBuildResult methodBodyTypesBuildResult);
    private void AddIfMethodIdInvokeAsyncBlock(ILGenerator ilGen, Label elseLabel, LocalBuilder castedObject, MethodDescription methodDescription, MethodBodyTypes methodBodyTypes);
    private void AddOnDispatchMethod(TypeBuilder classBuilder, InterfaceDescription interfaceDescription, MethodBodyTypesBuildResult methodBodyTypesBuildResult);
    private void AddIfMethodIdInvokeBlock(ILGenerator ilGen, Label elseLabel, LocalBuilder castedObject, MethodDescription methodDescription, Type requestBodyType);
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.V1.Builder.ProxyGeneratorWithSerializer : ProxyGenerator {
    private IDictionary`2<int, DataContractSerializer> requestMessageBodySerializers;
    private IDictionary`2<int, DataContractSerializer> responseMessageBodySerializers;
    protected ProxyGeneratorWithSerializer(Type proxyInterfaceType, IDictionary`2<int, DataContractSerializer> requestMessageBodySerializers, IDictionary`2<int, DataContractSerializer> responseMessageBodySerializers);
    public DataContractSerializer GetRequestMessageBodySerializer(int interfaceId);
    public DataContractSerializer GetResponseMessageBodySerializer(int interfaceId);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.Builder.ServiceCodeBuilder : CodeBuilder {
    private static ICodeBuilder Instance;
    private static object BuildLock;
    private MethodBodyTypesBuilder methodBodyTypesBuilder;
    private MethodDispatcherBuilder`1<ServiceMethodDispatcherBase> methodDispatcherBuilder;
    private ServiceProxyGeneratorBuilder proxyGeneratorBuilder;
    private static ServiceCodeBuilder();
    public static ServiceProxyGeneratorWith GetOrCreateProxyGenerator(Type serviceInterfaceType);
    public static ServiceMethodDispatcherBase GetOrCreateMethodDispatcher(Type serviceInterfaceType);
    protected virtual MethodDispatcherBuildResult BuildMethodDispatcher(Type interfaceType);
    protected virtual MethodBodyTypesBuildResult BuildMethodBodyTypes(Type interfaceType);
    protected virtual ProxyGeneratorBuildResult BuildProxyGenerator(Type interfaceType);
}
public abstract class Microsoft.ServiceFabric.Services.Remoting.V1.Builder.ServiceMethodDispatcherBase : MethodDispatcherBaseWithSerializer {
    internal virtual DataContractSerializer CreateRequestMessageBodySerializer(IEnumerable`1<Type> requestBodyValueTypes);
    internal virtual DataContractSerializer CreateResponseMessageBodySerializer(IEnumerable`1<Type> responseBodyValueTypes);
    internal virtual object GetRequestMessageBodyValue(object requestMessageBody);
    internal virtual object CreateResponseMessageBody(object responseMessageBodyValue);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.Builder.ServiceProxyGeneratorBuilder : ProxyGeneratorBuilder`2<ServiceProxyGeneratorWith, ServiceProxy> {
    public ServiceProxyGeneratorBuilder(ICodeBuilder codeBuilder);
    protected virtual ServiceProxyGeneratorWith CreateProxyGenerator(Type proxyInterfaceType, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap, Type proxyActivatorType);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.Builder.ServiceProxyGeneratorWith : ProxyGeneratorWithSerializer {
    private IProxyActivator proxyActivator;
    public ServiceProxyGeneratorWith(Type serviceProxyInterfaceType, IProxyActivator proxyActivator, IDictionary`2<int, IEnumerable`1<Type>> requestBodyTypes, IDictionary`2<int, IEnumerable`1<Type>> responseBodyTypes);
    public ServiceProxy CreateServiceProxy(ServiceRemotingPartitionClient remotingPartitionClient);
    private static IDictionary`2<int, DataContractSerializer> GetBodySerializers(IDictionary`2<int, IEnumerable`1<Type>> bodyTypes);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient {
    public abstract virtual Task`1<Byte[]> RequestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public abstract virtual void SendOneWay(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClientFactory {
}
public interface Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingPartitionClient {
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceProxyFactory : object {
    private object thisLock;
    private Func`2<IServiceRemotingCallbackClient, IServiceRemotingClientFactory> createServiceRemotingClientFactory;
    private OperationRetrySettings retrySettings;
    private Action`1<IServiceRemotingClientFactory> disposeFactory;
    private IServiceRemotingClientFactory modreq(System.Runtime.CompilerServices.IsVolatile) remotingClientFactory;
    public ServiceProxyFactory(Func`2<IServiceRemotingCallbackClient, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings, Action`1<IServiceRemotingClientFactory> disposeFactory);
    public sealed virtual TServiceInterface CreateNonIServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    public sealed virtual TServiceInterface CreateServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    public void Dispose();
    protected virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackClient callbackClient);
    private IServiceRemotingClientFactory CreateServiceRemotingClientFactory(Type serviceInterfaceType);
    private IServiceRemotingClientFactory GetOrCreateServiceRemotingClientFactory(Type serviceInterfaceType);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceRemotingPartitionClient : ServicePartitionClient`1<IServiceRemotingClient> {
    private static string TraceType;
    public ServiceRemotingPartitionClient(IServiceRemotingClientFactory remotingClientFactory, Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V1.Client.ServiceRemotingPartitionClient/<InvokeAsync>d__2")]
internal Task`1<Byte[]> InvokeAsync(ServiceRemotingMessageHeaders headers, Byte[] requestMsgBody, CancellationToken cancellationToken);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.DummyNativeClient : FabricTransportClient {
    public virtual Task`1<FabricTransportReplyMessage> RequestResponseAsync(Byte[] header, Byte[] requestBody, TimeSpan timeout);
    public virtual void SendOneWay(Byte[] messageHeaders, Byte[] requestBody);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportRemotingCallbackMessageHandler : object {
    private IServiceRemotingCallbackClient remotingCallbackClient;
    private DataContractSerializer serializer;
    public FabricTransportRemotingCallbackMessageHandler(IServiceRemotingCallbackClient remotingCallbackClient);
    public sealed virtual Task`1<Byte[]> RequestResponseAsync(Byte[] headers, Byte[] requestBody);
    public sealed virtual void OneWayMessage(Byte[] headers, Byte[] requestBody);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportRemotingClientConnectionHandler : object {
    private IServiceRemotingClient remotingClient;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> ClientConnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> ClientDisconnected;
    unknown string ListenerName {public set; }
    unknown ResolvedServicePartition ResolvedServicePartition {public set; }
    unknown ResolvedServiceEndpoint Endpoint {public set; }
    [CompilerGeneratedAttribute]
public void add_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void remove_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void add_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void remove_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    public void set_ListenerName(string value);
    public void set_ResolvedServicePartition(ResolvedServicePartition value);
    public void set_Endpoint(ResolvedServiceEndpoint value);
    private sealed virtual override void Microsoft.ServiceFabric.FabricTransport.Client.IFabricTransportClientConnectionHandler.OnConnected();
    private sealed virtual override void Microsoft.ServiceFabric.FabricTransport.Client.IFabricTransportClientConnectionHandler.OnDisconnected();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClient : object {
    private DataContractSerializer serializer;
    private FabricTransportClient nativeClient;
    private FabricTransportSettings settings;
    private ResolvedServicePartition resolvedServicePartition;
    private ResolvedServiceEndpoint resolvedServiceEndpoint;
    private string listenerName;
    [CompilerGeneratedAttribute]
private FabricTransportRemotingClientConnectionHandler <RemotingClientConnectionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public FabricTransportRemotingClientConnectionHandler RemotingClientConnectionHandler { get; private set; }
    public string ConnectionAddress { get; private set; }
    public bool IsValid { get; private set; }
    private ResolvedServicePartition Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.ResolvedServicePartition { get; private set; }
    private string Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.ListenerName { get; private set; }
    private ResolvedServiceEndpoint Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.Endpoint { get; private set; }
    public FabricTransportServiceRemotingClient(FabricTransportClient nativeClient, FabricTransportRemotingClientConnectionHandler remotingClientConnectionHandler);
    [CompilerGeneratedAttribute]
public FabricTransportRemotingClientConnectionHandler get_RemotingClientConnectionHandler();
    [CompilerGeneratedAttribute]
private void set_RemotingClientConnectionHandler(FabricTransportRemotingClientConnectionHandler value);
    [CompilerGeneratedAttribute]
public string get_ConnectionAddress();
    [CompilerGeneratedAttribute]
private void set_ConnectionAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    private sealed virtual override ResolvedServicePartition Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.get_ResolvedServicePartition();
    private sealed virtual override void Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.set_ResolvedServicePartition(ResolvedServicePartition value);
    private sealed virtual override string Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.get_ListenerName();
    private sealed virtual override void Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.set_ListenerName(string value);
    private sealed virtual override ResolvedServiceEndpoint Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.get_Endpoint();
    private sealed virtual override void Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.set_Endpoint(ResolvedServiceEndpoint value);
    private sealed virtual override Task`1<Byte[]> Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient.RequestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    private sealed virtual override void Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient.SendOneWay(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public void Abort();
}
public class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory : object {
    private FabricTransportServiceRemotingClientFactoryImpl impl;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> ClientConnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> ClientDisconnected;
    public FabricTransportServiceRemotingClientFactory(FabricTransportRemotingSettings fabricTransportRemotingSettings, IServiceRemotingCallbackClient callbackClient, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, string traceId);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    public void Dispose();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory/<Microsoft-ServiceFabric-Services-Communication-Client-ICommunicationClientFactory<Microsoft-ServiceFabric-Services-Remoting-V1-Client-IServiceRemotingClient>-GetClientAsync>d__9")]
private sealed virtual override Task`1<IServiceRemotingClient> Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient>.GetClientAsync(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactory/<Microsoft-ServiceFabric-Services-Communication-Client-ICommunicationClientFactory<Microsoft-ServiceFabric-Services-Remoting-V1-Client-IServiceRemotingClient>-GetClientAsync>d__10")]
private sealed virtual override Task`1<IServiceRemotingClient> Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient>.GetClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken);
    private sealed virtual override Task`1<OperationRetryControl> Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<Microsoft.ServiceFabric.Services.Remoting.V1.Client.IServiceRemotingClient>.ReportOperationExceptionAsync(IServiceRemotingClient client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings, CancellationToken cancellationToken);
    private static IEnumerable`1<IExceptionHandler> GetExceptionHandlers(IEnumerable`1<IExceptionHandler> exceptionHandlers, string traceId);
    private void OnClientConnected(object sender, CommunicationClientEventArgs`1<IServiceRemotingClient> e);
    private void OnClientDisconnected(object sender, CommunicationClientEventArgs`1<IServiceRemotingClient> e);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl : CommunicationClientFactoryBase`1<FabricTransportServiceRemotingClient> {
    private FabricTransportRemotingSettings settings;
    private FabricTransportRemotingCallbackMessageHandler fabricTransportRemotingCallbackMessageHandler;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> FabricTransportClientConnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> FabricTransportClientDisconnected;
    public FabricTransportServiceRemotingClientFactoryImpl(FabricTransportRemotingSettings fabricTransportRemotingSettings, IServiceRemotingCallbackClient callbackHandler, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, string traceId);
    [CompilerGeneratedAttribute]
public void add_FabricTransportClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void remove_FabricTransportClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void add_FabricTransportClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void remove_FabricTransportClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    protected virtual Task`1<FabricTransportServiceRemotingClient> CreateClientAsync(string endpoint, CancellationToken cancellationToken);
    protected virtual void AbortClient(FabricTransportServiceRemotingClient remotingClient);
    protected virtual bool ValidateClient(FabricTransportServiceRemotingClient remotingClient);
    protected virtual bool ValidateClient(string endpoint, FabricTransportServiceRemotingClient remotingClient);
    private static IEnumerable`1<IExceptionHandler> GetExceptionHandlers(IEnumerable`1<IExceptionHandler> exceptionHandlers);
    private void OnFabricTransportClientConnected(object sender, CommunicationClientEventArgs`1<IServiceRemotingClient> e);
    private void OnFabricTransportClientDisconnected(object sender, CommunicationClientEventArgs`1<IServiceRemotingClient> e);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportMessagingHandler : object {
    private IServiceRemotingMessageHandler messageHandler;
    private DataContractSerializer serializer;
    public FabricTransportMessagingHandler(IServiceRemotingMessageHandler messageHandler);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportMessagingHandler/<RequestResponseAsync>d__3")]
public sealed virtual Task`1<FabricTransportReplyMessage> RequestResponseAsync(FabricTransportRequestContext requestContext, Byte[] headers, Byte[] requestBody);
    public sealed virtual void HandleOneWay(FabricTransportRequestContext requestContext, Byte[] headers, Byte[] requestBody);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingCallback : object {
    private TimeSpan defaultTimeout;
    private FabricTransportCallbackClient transportCallbackClient;
    private DataContractSerializer serializer;
    private string clientId;
    private bool disposedValue;
    public FabricTransportServiceRemotingCallback(FabricTransportCallbackClient transportCallbackClient);
    protected virtual override void Finalize();
    public sealed virtual Task`1<Byte[]> RequestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public sealed virtual void OneWayMessage(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public string GetClientId();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingConnectionHandler : object {
    private ConcurrentDictionary`2<string, FabricTransportCallbackClient> clientCallbackConnection;
    public sealed virtual Task ConnectAsync(FabricTransportCallbackClient fabricTransportServiceRemotingCallback, TimeSpan timeout);
    public sealed virtual Task DisconnectAsync(string clientId, TimeSpan timeout);
    private sealed virtual override FabricTransportCallbackClient Microsoft.ServiceFabric.FabricTransport.Runtime.IFabricTransportConnectionHandler.GetCallBack(string clientId);
    private void AddCallBackConnection(FabricTransportCallbackClient fabricTransportServiceRemotingCallback);
    private void RemoveCallBackConnection(string clientId);
}
public class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener : object {
    private FabricTransportListener nativeListener;
    private IServiceRemotingMessageHandler messageHandler;
    private string listenAddress;
    private string publishAddress;
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IService serviceImplementation);
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IService serviceImplementation, string listenerSettingsConfigSectionName);
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IService serviceImplementation, FabricTransportRemotingListenerSettings listenerSettings);
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IServiceRemotingMessageHandler messageHandler);
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IServiceRemotingMessageHandler messageHandler, string listenerSettingsConfigSectionName);
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IServiceRemotingMessageHandler messageHandler, FabricTransportRemotingListenerSettings listenerSettings);
    private sealed virtual override Task`1<string> Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingListener/<Microsoft-ServiceFabric-Services-Communication-Runtime-ICommunicationListener-CloseAsync>d__11")]
private sealed virtual override Task Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort();
    private FabricTransportListener CreateNativeListener(FabricTransportRemotingListenerSettings listenerSettings, IServiceRemotingMessageHandler messageHandler, ServiceContext serviceContext);
    private void Dispose();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V1.FabricTransport.Runtime.FabricTransportServiceRemotingRequestContext : object {
    private FabricTransportRequestContext requestContext;
    private string id;
    private IServiceRemotingCallbackClient callback;
    public FabricTransportServiceRemotingRequestContext(FabricTransportRequestContext requestContext);
    public sealed virtual IServiceRemotingCallbackClient GetCallbackClient();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V1.IServiceRemotingCallbackClient {
    public abstract virtual Task`1<Byte[]> RequestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public abstract virtual void OneWayMessage(ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Services.Remoting.V1.RemoteExceptionInformation : object {
    private static DataContractSerializer Serializer;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [DataMemberAttribute]
public Byte[] Data { get; private set; }
    public RemoteExceptionInformation(Byte[] data);
    private static RemoteExceptionInformation();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    public static RemoteExceptionInformation FromException(Exception exception);
    public static bool ToException(RemoteExceptionInformation remoteExceptionInformation, Exception& result);
    private static bool TryDeserializeException(Byte[] data, Exception& result);
    private static bool TryDeserializeServiceException(Byte[] data, Exception& result);
    private static bool TryDeserializeExceptionData(Byte[] data, ServiceExceptionData& result);
    private static RemoteExceptionInformation FromExceptionString(Exception exception);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingMessageHandler {
    public abstract virtual Task`1<Byte[]> RequestResponseAsync(IServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public abstract virtual void HandleOneWay(IServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.IServiceRemotingRequestContext {
    public abstract virtual IServiceRemotingCallbackClient GetCallbackClient();
}
public class Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher : object {
    private IService service;
    private ServiceRemotingCancellationHelper cancellationHelper;
    private Dictionary`2<int, ServiceMethodDispatcherBase> methodDispatcherMap;
    private ServicePerformanceCounterProvider servicePerformanceCounterProvider;
    public ServiceRemotingDispatcher(ServiceContext serviceContext, IService service);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V1.Runtime.ServiceRemotingDispatcher/<RequestResponseAsync>d__5")]
public virtual Task`1<Byte[]> RequestResponseAsync(IServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public virtual void HandleOneWay(IServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, Byte[] requestBody);
    public sealed virtual void Dispose();
    internal bool IsCancellationRequest(ServiceRemotingMessageHeaders messageHeaders);
    private Task`1<Byte[]> OnDispatch(ServiceRemotingMessageHeaders headers, Byte[] requestBodyBytes, CancellationToken cancellationToken);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageBody : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [DataMemberAttribute]
public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[DataContractAttribute]
public class Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders : object {
    internal static string CancellationHeaderName;
    [DataMemberAttribute]
private Dictionary`2<string, Byte[]> headers;
    [CompilerGeneratedAttribute]
private int <MethodId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InterfaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationId>k__BackingField;
    [DataMemberAttribute]
public int MethodId { get; public set; }
    [DataMemberAttribute]
public int InterfaceId { get; public set; }
    [DataMemberAttribute]
public string InvocationId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MethodId();
    [CompilerGeneratedAttribute]
public void set_MethodId(int value);
    [CompilerGeneratedAttribute]
public int get_InterfaceId();
    [CompilerGeneratedAttribute]
public void set_InterfaceId(int value);
    [CompilerGeneratedAttribute]
public string get_InvocationId();
    [CompilerGeneratedAttribute]
public void set_InvocationId(string value);
    public static Byte[] Serialize(DataContractSerializer serializer, ServiceRemotingMessageHeaders msg);
    public static ServiceRemotingMessageHeaders Deserialize(DataContractSerializer serializer, Byte[] buffer);
    public void AddHeader(string headerName, Byte[] headerValue);
    public bool TryGetHeaderValue(string headerName, Byte[]& headerValue);
}
internal static class Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageSerializer : object {
    public static DataContractSerializer GetMessageBodySerializer(IEnumerable`1<Type> knownTypes);
    public static DataContractSerializer GetMessageHeaderSerializer();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.BasicDataContractHeaderSerializer : object {
    private DataContractSerializer requestHeaderSerializer;
    private DataContractSerializer responseHeaderSerializer;
    public BasicDataContractHeaderSerializer(DataContractSerializer headerRequestSerializer);
    public sealed virtual IMessageHeader SerializeRequestHeader(IServiceRemotingRequestMessageHeader serviceRemotingRequestMessageHeader);
    public sealed virtual IServiceRemotingRequestMessageHeader DeserializeRequestHeaders(IMessageHeader messageHeader);
    public sealed virtual IMessageHeader SerializeResponseHeader(IServiceRemotingResponseMessageHeader serviceRemotingResponseMessageHeader);
    public sealed virtual IServiceRemotingResponseMessageHeader DeserializeResponseHeaders(IMessageHeader messageHeader);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.InterfaceDetails : object {
    [CompilerGeneratedAttribute]
private Type <ServiceInterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <RequestKnownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ResponseKnownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <RequestWrappedKnownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ResponseWrappedKnownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <MethodNames>k__BackingField;
    public Type ServiceInterfaceType { get; internal set; }
    public int Id { get; internal set; }
    public List`1<Type> RequestKnownTypes { get; internal set; }
    public List`1<Type> ResponseKnownTypes { get; internal set; }
    public IEnumerable`1<Type> RequestWrappedKnownTypes { get; internal set; }
    public IEnumerable`1<Type> ResponseWrappedKnownTypes { get; internal set; }
    public Dictionary`2<string, int> MethodNames { get; internal set; }
    [CompilerGeneratedAttribute]
public Type get_ServiceInterfaceType();
    [CompilerGeneratedAttribute]
internal void set_ServiceInterfaceType(Type value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_RequestKnownTypes();
    [CompilerGeneratedAttribute]
internal void set_RequestKnownTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ResponseKnownTypes();
    [CompilerGeneratedAttribute]
internal void set_ResponseKnownTypes(List`1<Type> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Type> get_RequestWrappedKnownTypes();
    [CompilerGeneratedAttribute]
internal void set_RequestWrappedKnownTypes(IEnumerable`1<Type> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Type> get_ResponseWrappedKnownTypes();
    [CompilerGeneratedAttribute]
internal void set_ResponseWrappedKnownTypes(IEnumerable`1<Type> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_MethodNames();
    [CompilerGeneratedAttribute]
internal void set_MethodNames(Dictionary`2<string, int> value);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.InterfaceDetailsStore : object {
    private static string TraceType;
    private ConcurrentDictionary`2<int, InterfaceDetails> knownTypesMap;
    private ConcurrentDictionary`2<string, int> interfaceIdMapping;
    public bool TryGetKnownTypes(int interfaceId, InterfaceDetails& interfaceDetails);
    public bool TryGetKnownTypes(string interfaceName, InterfaceDetails& interfaceDetails);
    public void UpdateKnownTypeDetail(InterfaceDescription interfaceDescription, MethodBodyTypesBuildResult methodBodyTypesBuildResult);
    private void UpdateKnownTypes(int interfaceId, string interfaceName, InterfaceDetails knownTypes);
}
public abstract class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase : MethodDispatcherBase {
    public Task`1<IServiceRemotingResponseMessageBody> DispatchAsync(object objectImplementation, int methodId, IServiceRemotingRequestMessageBody requestBody, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, CancellationToken cancellationToken);
    public void Dispatch(object objectImplementation, int methodId, IServiceRemotingRequestMessageBody requestMessageBody);
    public virtual Task`1<object> DispatchAsync(object objectImplementation, int methodId, object requestBody, CancellationToken cancellationToken);
    public virtual void Dispatch(object objectImplementation, int methodId, object messageBody);
    internal void Initialize(InterfaceDescription description, IReadOnlyDictionary`2<int, string> methodMap);
    protected IServiceRemotingResponseMessageBody CreateResponseMessageBody(string interfaceName, string methodName, int methodId, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, object response);
    protected abstract virtual Task`1<IServiceRemotingResponseMessageBody> OnDispatchAsync(int methodId, object remotedObject, IServiceRemotingRequestMessageBody requestBody, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, CancellationToken cancellationToken);
    protected abstract virtual void OnDispatch(int methodId, object remotedObject, IServiceRemotingRequestMessageBody requestBody);
    protected Task`1<IServiceRemotingResponseMessageBody> ContinueWithResult(string interfaceName, string methodName, int methodId, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, Task`1<TRetVal> task);
    protected bool CheckIfItsWrappedRequest(IServiceRemotingRequestMessageBody requestMessage);
    protected abstract virtual object CreateWrappedResponseBody(int methodId, object retVal);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBuilder`1 : CodeBuilderModule {
    private Type methodDispatcherBaseType;
    private MethodInfo continueWithResultMethodInfo;
    private MethodInfo continueWithMethodInfo;
    private MethodInfo checkIfitsWrapped;
    public MethodDispatcherBuilder`1(ICodeBuilder codeBuilder);
    public MethodDispatcherBuildResult Build(InterfaceDescription interfaceDescription);
    private static void AddIfNotWrapMsgGetParameter(ILGenerator ilGen, LocalBuilder castedObject, MethodDescription methodDescription, Type requestBody);
    private static void AddIfWrapMsgGetParameters(ILGenerator ilGen, LocalBuilder castedObject, MethodBodyTypes methodBodyTypes);
    private void AddOnDispatchMethod(TypeBuilder classBuilder, InterfaceDescription interfaceDescription, MethodBodyTypesBuildResult methodBodyTypesBuildResult);
    private void AddIfMethodIdInvokeBlock(ILGenerator ilGen, Label elseLabel, LocalBuilder castedObject, MethodDescription methodDescription, string interfaceName, MethodBodyTypes methodBodyTypes);
    private void AddOnDispatchAsyncMethod(TypeBuilder classBuilder, InterfaceDescription interfaceDescription, MethodBodyTypesBuildResult methodBodyTypesBuildResult);
    private void AddIfMethodIdInvokeAsyncBlock(ILGenerator ilGen, Label elseLabel, LocalBuilder castedObject, MethodDescription methodDescription, string interfaceName, MethodBodyTypes methodBodyTypes);
    private void AddACheckIfItsWrappedMessage(ILGenerator ilGen, Label elseLabelforWrapped);
    private void AddCreateResponseBodyMethod(TypeBuilder classBuilder, InterfaceDescription interfaceDescription, MethodBodyTypesBuildResult methodBodyTypesBuildResult);
    private void AddIfMethodIdCreateResponseBlock(ILGenerator ilGen, Label elseLabel, int methodId, Type responseType);
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.ProxyGeneratorBuilder`2 : ProxyGeneratorBuilder`2<TProxyGenerator, TProxy> {
    private Type proxyBaseType;
    private MethodInfo createMessage;
    private MethodInfo invokeAsyncMethodInfo;
    private MethodInfo invokeMethodInfo;
    private MethodInfo continueWithResultMethodInfo;
    private MethodInfo continueWithMethodInfo;
    private MethodInfo checkIfitsWrapped;
    protected Type ProxyBaseType { get; }
    public ProxyGeneratorBuilder`2(ICodeBuilder codeBuilder);
    protected Type get_ProxyBaseType();
    internal static LocalBuilder CreateWrappedRequestBody(MethodDescription methodDescription, MethodBodyTypes methodBodyTypes, ILGenerator ilGen, ParameterInfo[] parameters);
    internal void AddVoidMethodImplementation2(ILGenerator ilGen, int interfaceDescriptionId, MethodDescription methodDescription, LocalBuilder wrappedRequestBody, string interfaceName);
    protected virtual TProxyGenerator CreateProxyGenerator(Type proxyInterfaceType, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap, Type proxyActivatorType);
    protected virtual void AddInterfaceImplementations(TypeBuilder classBuilder, IDictionary`2<InterfaceDescription, MethodBodyTypesBuildResult> methodBodyTypesResultsMap);
    protected abstract virtual TProxyGenerator CreateProxyGenerator(Type proxyInterfaceType, Type proxyActivatorType);
    private void AddAsyncMethodImplementation(TypeBuilder classBuilder, int interfaceId, MethodDescription methodDescription, MethodBodyTypes methodBodyTypes, string interfaceName);
    private void SetParameterIfNeeded(ILGenerator ilGen, LocalBuilder requestMessage, int parameterLength, ParameterInfo[] parameters);
    private LocalBuilder CreateRequestRemotingMessageBody(MethodDescription methodDescription, string interfaceName, ILGenerator ilGen, int parameterLength, LocalBuilder wrappedRequestBody);
    private void AddIfInterfaceIdAndMethodIdReturnRetvalBlock(ILGenerator ilGen, Label elseLabel, int interfaceId, int methodId, Type responseBodyType);
    private void AddVoidMethodImplementation(TypeBuilder classBuilder, int interfaceDescriptionId, MethodDescription methodDescription, MethodBodyTypes methodBodyTypes, string interfaceName);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.ServiceCodeBuilder : CodeBuilder {
    internal static InterfaceDetailsStore InterfaceDetailsStore;
    private static ICodeBuilder Instance;
    private static object BuildLock;
    private MethodBodyTypesBuilder methodBodyTypesBuilder;
    private MethodDispatcherBuilder`1<MethodDispatcherBase> methodDispatcherBuilder;
    private ServiceProxyGeneratorBuilder proxyGeneratorBuilder;
    private static ServiceCodeBuilder();
    public static MethodDispatcherBase GetOrCreateMethodDispatcher(Type serviceInterfaceType);
    public static MethodDispatcherBase GetOrCreateMethodDispatcherForNonMarkerInterface(Type serviceInterfaceType);
    internal static ServiceProxyGenerator GetOrCreateProxyGenerator(Type serviceInterfaceType);
    internal static ServiceProxyGenerator GetOrCreateProxyGeneratorForNonServiceInterface(Type serviceInterfaceType);
    internal static bool TryGetKnownTypes(int interfaceId, InterfaceDetails& interfaceDetails);
    internal static bool TryGetKnownTypes(string interfaceName, InterfaceDetails& interfaceDetails);
    internal ProxyGeneratorBuildResult BuildProxyGeneratorForNonMarkerInterface(Type interfaceType);
    protected virtual MethodDispatcherBuildResult BuildMethodDispatcher(Type interfaceType);
    protected virtual MethodBodyTypesBuildResult BuildMethodBodyTypes(Type interfaceType);
    protected virtual ProxyGeneratorBuildResult BuildProxyGenerator(Type interfaceType);
    private MethodDispatcherBuildResult BuildMethodDispatcherForNonServiceInterface(Type interfaceType);
    private MethodDispatcherBuildResult BuildMethodDispatcherResult(ServiceInterfaceDescription servicenterfaceDescription);
    private ProxyGeneratorBuildResult CreateProxyGeneratorBuildResult(Type interfaceType, IEnumerable`1<InterfaceDescription> servicenterfaceDescriptions);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.ServiceProxyGenerator : ProxyGenerator {
    private IProxyActivator proxyActivator;
    public ServiceProxyGenerator(Type type, IProxyActivator createInstance);
    public ServiceProxy CreateServiceProxy(ServiceRemotingPartitionClient remotingPartitionClient, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Builder.ServiceProxyGeneratorBuilder : ProxyGeneratorBuilder`2<ServiceProxyGenerator, ServiceProxy> {
    public ServiceProxyGeneratorBuilder(ICodeBuilder codeBuilder);
    protected virtual ServiceProxyGenerator CreateProxyGenerator(Type proxyInterfaceType, Type proxyActivatorType);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.CacheEntry : object {
    private IServiceRemotingRequestMessageBodySerializer requestBodySerializer;
    private IServiceRemotingResponseMessageBodySerializer responseBodySerializer;
    public IServiceRemotingRequestMessageBodySerializer RequestBodySerializer { get; }
    public IServiceRemotingResponseMessageBodySerializer ResponseBodySerializer { get; }
    public CacheEntry(IServiceRemotingRequestMessageBodySerializer requestBodySerializer, IServiceRemotingResponseMessageBodySerializer responseBodySerializer);
    public IServiceRemotingRequestMessageBodySerializer get_RequestBodySerializer();
    public IServiceRemotingResponseMessageBodySerializer get_ResponseBodySerializer();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Client.ExceptionConversionHandler : object {
    private static string TraceEventType;
    private IEnumerable`1<IExceptionConvertor> convertors;
    private FabricTransportRemotingSettings remotingSettings;
    public ExceptionConversionHandler(IEnumerable`1<IExceptionConvertor> convertors, FabricTransportRemotingSettings remotingSettings);
    private static ExceptionConversionHandler();
    public Exception FromServiceException(ServiceException serviceException);
    public ServiceException FromRemoteException2(RemoteException2 remoteEx);
    public RemoteException2 DeserializeRemoteException2(Byte[] buffer);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.Client.ExceptionConversionHandler/<DeserializeRemoteExceptionAndThrowAsync>d__7")]
public Task DeserializeRemoteExceptionAndThrowAsync(Stream stream);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Client.FabricExceptionConvertor : object {
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception& actualException);
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception innerException, Exception& actualException);
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception[] innerExceptions, Exception& actualException);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Client.IExceptionConvertor {
    public abstract virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception& actualException);
    public abstract virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception innerException, Exception& actualException);
    public abstract virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception[] innerExceptions, Exception& actualException);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler {
    public abstract virtual void HandleOneWayMessage(IServiceRemotingRequestMessage requestMessage);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient {
    public abstract virtual Task`1<IServiceRemotingResponseMessage> RequestResponseAsync(IServiceRemotingRequestMessage requestRequestMessage);
    public abstract virtual void SendOneWay(IServiceRemotingRequestMessage requestMessage);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory {
    public abstract virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingPartitionClient {
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceProxyFactory : object {
    private object thisLock;
    private Func`2<IServiceRemotingCallbackMessageHandler, IServiceRemotingClientFactory> createServiceRemotingClientFactory;
    private OperationRetrySettings retrySettings;
    private Action`1<IServiceRemotingClientFactory> disposeFactory;
    private IServiceRemotingClientFactory modreq(System.Runtime.CompilerServices.IsVolatile) remotingClientFactory;
    public ServiceProxyFactory(Func`2<IServiceRemotingCallbackMessageHandler, IServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings, Action`1<IServiceRemotingClientFactory> disposeFactory);
    public sealed virtual TServiceInterface CreateServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    public sealed virtual TServiceInterface CreateNonIServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName);
    public void Dispose();
    protected virtual IServiceRemotingClientFactory CreateServiceRemotingClientFactory(IServiceRemotingCallbackMessageHandler callbackClient);
    private TServiceInterface CreateServiceProxy(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName, Type serviceInterfaceType, ServiceProxyGenerator proxyGenerator);
    private IServiceRemotingClientFactory CreateServiceRemotingClientFactory(Type serviceInterfaceType);
    private IServiceRemotingClientFactory GetOrCreateServiceRemotingClientFactory(Type serviceInterfaceType);
}
public static class Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceRemotingClientEvents : object {
    [CompilerGeneratedAttribute]
private static EventHandler SendRequest;
    [CompilerGeneratedAttribute]
private static EventHandler ReceiveResponse;
    [CompilerGeneratedAttribute]
public static void add_SendRequest(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_SendRequest(EventHandler value);
    [CompilerGeneratedAttribute]
public static void add_ReceiveResponse(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_ReceiveResponse(EventHandler value);
    internal static void RaiseSendRequest(IServiceRemotingRequestMessage request, Uri serviceUri, string methodName);
    internal static void RaiseRecieveResponse(IServiceRemotingResponseMessage response, IServiceRemotingRequestMessage request);
    internal static void RaiseExceptionResponse(Exception ex, IServiceRemotingRequestMessage request);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceRemotingPartitionClient : ServicePartitionClient`1<IServiceRemotingClient> {
    private static string TraceType;
    public ServiceRemotingPartitionClient(IServiceRemotingClientFactory remotingClientFactory, Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceRemotingPartitionClient/<InvokeAsync>d__2")]
public Task`1<IServiceRemotingResponseMessage> InvokeAsync(IServiceRemotingRequestMessage remotingRequestMessage, string methodName, CancellationToken cancellationToken);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Client.SystemExceptionConvertor : object {
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception& actualException);
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception innerException, Exception& actualException);
    public sealed virtual bool TryConvertFromServiceException(ServiceException serviceException, Exception[] innerExceptions, Exception& actualException);
}
internal static class Microsoft.ServiceFabric.Services.Remoting.V2.Constants : object {
    public static string ServiceCommunicationNamespace;
    public static int DefaultHeaderBufferSize;
    public static int DefaultHeaderMaxBufferCount;
    public static int DefaultMessageBufferSize;
    public static int DefaultMaxBufferCount;
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.DataContractRemotingMessageFactory : object {
    public sealed virtual IServiceRemotingRequestMessageBody CreateRequest(string interfaceName, string methodName, int numberOfParameters, object wrappedRequest);
    public sealed virtual IServiceRemotingResponseMessageBody CreateResponse(string interfaceName, string methodName, object wrappedResponse);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Diagnostic.ServiceRemotingPerformanceCounterProvider : object {
    private static string TraceType;
    private static int MaxDigits;
    private static FabricPerformanceCounterSet serviceCounterSet;
    private FabricPerformanceCounterSetInstance serviceCounterSetInstance;
    private Guid partitionId;
    private string counterInstanceDifferentiator;
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <ServiceRequestProcessingTimeCounterWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <ServiceRequestDeserializationTimeCounterWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <ServiceResponseSerializationTimeCounterWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricNumberOfItems64PerformanceCounterWriter <ServiceOutstandingRequestsCounterWriter>k__BackingField;
    internal FabricAverageCount64PerformanceCounterWriter ServiceRequestProcessingTimeCounterWriter { get; private set; }
    internal FabricAverageCount64PerformanceCounterWriter ServiceRequestDeserializationTimeCounterWriter { get; private set; }
    internal FabricAverageCount64PerformanceCounterWriter ServiceResponseSerializationTimeCounterWriter { get; private set; }
    internal FabricNumberOfItems64PerformanceCounterWriter ServiceOutstandingRequestsCounterWriter { get; private set; }
    private static ServiceRemotingPerformanceCounterProvider();
    public ServiceRemotingPerformanceCounterProvider(Guid partitionId, long replicaOrInstanceId);
    [CompilerGeneratedAttribute]
internal FabricAverageCount64PerformanceCounterWriter get_ServiceRequestProcessingTimeCounterWriter();
    [CompilerGeneratedAttribute]
private void set_ServiceRequestProcessingTimeCounterWriter(FabricAverageCount64PerformanceCounterWriter value);
    [CompilerGeneratedAttribute]
internal FabricAverageCount64PerformanceCounterWriter get_ServiceRequestDeserializationTimeCounterWriter();
    [CompilerGeneratedAttribute]
private void set_ServiceRequestDeserializationTimeCounterWriter(FabricAverageCount64PerformanceCounterWriter value);
    [CompilerGeneratedAttribute]
internal FabricAverageCount64PerformanceCounterWriter get_ServiceResponseSerializationTimeCounterWriter();
    [CompilerGeneratedAttribute]
private void set_ServiceResponseSerializationTimeCounterWriter(FabricAverageCount64PerformanceCounterWriter value);
    [CompilerGeneratedAttribute]
internal FabricNumberOfItems64PerformanceCounterWriter get_ServiceOutstandingRequestsCounterWriter();
    [CompilerGeneratedAttribute]
private void set_ServiceOutstandingRequestsCounterWriter(FabricNumberOfItems64PerformanceCounterWriter value);
    public sealed virtual void Dispose();
    private static void InitializeAvailableCounterTypes();
    private static FabricPerformanceCounterSet CreateCounterSet(Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> counterSetDefinitions, string categoryName);
    private static void DumpCounterSetInfo(FabricPerformanceCounterSet counterSet, IEnumerable`1<FabricPerformanceCounterDefinition> activeCounters);
    private void CreateserviceCounterWriters(string serviceCounterInstanceName);
    private T CreateCounterWriter(string serviceCounterInstanceName, Type writerType, Func`1<T> writerCreationCallback);
    private void LogCounterInstanceCreationResult(Type counterWriterType, string instanceName, Exception e);
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateserviceCounterWriters>b__28_0();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateserviceCounterWriters>b__28_1();
    [CompilerGeneratedAttribute]
private FabricAverageCount64PerformanceCounterWriter <CreateserviceCounterWriters>b__28_2();
    [CompilerGeneratedAttribute]
private FabricNumberOfItems64PerformanceCounterWriter <CreateserviceCounterWriters>b__28_3();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Diagnostic.ServiceRemotingPerformanceCounters : object {
    internal static string ServiceCategoryName;
    internal static string ServiceRequestProcessingTimeMillisecCounterName;
    internal static string ServiceRequestProcessingTimeMillisecBaseCounterName;
    internal static string ServiceRequestDeserializationTimeMillisecCounterName;
    internal static string ServiceRequestDeserializationTimeMillisecBaseCounterName;
    internal static string ServiceResponseSerializationTimeMillisecCounterName;
    internal static string ServiceResponseSerializationTimeMillisecBaseCounterName;
    internal static string ServiceOutstandingRequestsCounterName;
    private static Dictionary`2<Tuple`2<string, string>, FabricPerformanceCounterType> CounterTypes;
    private static Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> CounterSets;
    private static ServiceRemotingPerformanceCounters();
    public sealed virtual Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> GetCounterSets();
    internal static FabricPerformanceCounterType GetType(string categoryName, string counterName);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricExceptionKnownTypes : object {
    public static IDictionary`2<string, ConvertorFuncs> ServiceExceptionConvertors;
    private static FabricExceptionKnownTypes();
    private static ServiceException ToServiceException(FabricException fabricEx);
    private static T FromServiceException(ServiceException serviceException, Exception[] innerExceptions);
    private static Exception[] GetInnerExceptions(Exception exception);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.DummyFabricTransportRemotingClient : FabricTransportServiceRemotingClient {
    public DummyFabricTransportRemotingClient(ServiceRemotingMessageSerializersManager serializersManager, FabricTransportClient fabricTransportClient);
    public Task`1<IServiceRemotingRequestMessage> RequestResponseAsync(IServiceRemotingRequestMessage requestRequestMessage);
    public void SendOneWay(IServiceRemotingRequestMessage requestMessage);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportRemotingCallbackMessageHandler : object {
    private ServiceRemotingMessageSerializersManager manager;
    private IServiceRemotingCallbackMessageHandler remotingCallbackClient;
    public FabricTransportRemotingCallbackMessageHandler(IServiceRemotingCallbackMessageHandler remotingCallbackClient, ServiceRemotingMessageSerializersManager manager);
    public sealed virtual void OneWayMessage(FabricTransportMessage message);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportRemotingClientEventHandler : object {
    private FabricTransportServiceRemotingClient remotingClient;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient>> ClientConnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient>> ClientDisconnected;
    unknown string ListenerName {public set; }
    unknown ResolvedServicePartition ResolvedServicePartition {public set; }
    unknown ResolvedServiceEndpoint Endpoint {public set; }
    [CompilerGeneratedAttribute]
public void add_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void remove_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void add_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public void remove_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient>> value);
    public void set_ListenerName(string value);
    public void set_ResolvedServicePartition(ResolvedServicePartition value);
    public void set_Endpoint(ResolvedServiceEndpoint value);
    private sealed virtual override void Microsoft.ServiceFabric.FabricTransport.V2.Client.IFabricTransportClientEventHandler.OnConnected();
    private sealed virtual override void Microsoft.ServiceFabric.FabricTransport.V2.Client.IFabricTransportClientEventHandler.OnDisconnected();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClient : object {
    private ServiceRemotingMessageSerializersManager serializersManager;
    private FabricTransportClient fabricTransportClient;
    private FabricTransportRemotingClientEventHandler remotingHandler;
    private ResolvedServicePartition resolvedServicePartition;
    private string listenerName;
    private ResolvedServiceEndpoint resolvedServiceEndpoint;
    private ExceptionConversionHandler exceptionConversionHandler;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public bool IsValid { get; private set; }
    public object ConnectionAddress { get; }
    public ResolvedServicePartition ResolvedServicePartition { get; public set; }
    public string ListenerName { get; public set; }
    public ResolvedServiceEndpoint Endpoint { get; public set; }
    internal FabricTransportServiceRemotingClient(ServiceRemotingMessageSerializersManager serializersManager, FabricTransportClient fabricTransportClient, FabricTransportRemotingClientEventHandler remotingHandler, FabricTransportRemotingSettings remotingSettings, IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    public object get_ConnectionAddress();
    public sealed virtual ResolvedServicePartition get_ResolvedServicePartition();
    public sealed virtual void set_ResolvedServicePartition(ResolvedServicePartition value);
    public sealed virtual string get_ListenerName();
    public sealed virtual void set_ListenerName(string value);
    public sealed virtual ResolvedServiceEndpoint get_Endpoint();
    public sealed virtual void set_Endpoint(ResolvedServiceEndpoint value);
    public Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClient/<RequestResponseAsync>d__24")]
public sealed virtual Task`1<IServiceRemotingResponseMessage> RequestResponseAsync(IServiceRemotingRequestMessage remotingRequestRequestMessage);
    public sealed virtual void SendOneWay(IServiceRemotingRequestMessage requestMessage);
    public void Abort();
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory : object {
    private FabricTransportServiceRemotingClientFactoryImpl clientFactoryImpl;
    private IServiceRemotingMessageBodyFactory remotingMessageBodyFactory;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> ClientConnected;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> ClientDisconnected;
    public FabricTransportServiceRemotingClientFactory(FabricTransportRemotingSettings remotingSettings, IServiceRemotingCallbackMessageHandler remotingCallbackMessageHandler, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, string traceId, IServiceRemotingMessageSerializationProvider serializationProvider, IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    internal FabricTransportServiceRemotingClientFactory(ServiceRemotingMessageSerializersManager serializersManager, FabricTransportRemotingSettings remotingSettings, IServiceRemotingCallbackMessageHandler remotingCallbackMessageHandler, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, IEnumerable`1<IExceptionConvertor> exceptionConvertors, string traceId);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ClientConnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ClientDisconnected(EventHandler`1<CommunicationClientEventArgs`1<IServiceRemotingClient>> value);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory/<GetClientAsync>d__10")]
public sealed virtual Task`1<IServiceRemotingClient> GetClientAsync(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory/<GetClientAsync>d__11")]
public sealed virtual Task`1<IServiceRemotingClient> GetClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken);
    public sealed virtual Task`1<OperationRetryControl> ReportOperationExceptionAsync(IServiceRemotingClient client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings, CancellationToken cancellationToken);
    public sealed virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
    public void Dispose();
    private void Initialize(FabricTransportRemotingSettings remotingSettings, IServiceRemotingCallbackMessageHandler remotingCallbackMessageHandler, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, IEnumerable`1<IExceptionConvertor> exceptionConvertors, string traceId, IServiceRemotingMessageSerializationProvider serializationProvider, IServiceRemotingMessageHeaderSerializer headerSerializer);
    private void Initialize(FabricTransportRemotingSettings remotingSettings, IServiceRemotingCallbackMessageHandler remotingCallbackMessageHandler, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, IEnumerable`1<IExceptionConvertor> exceptionConvertors, string traceId, IServiceRemotingMessageBodyFactory messageBodyFactory, ServiceRemotingMessageSerializersManager serializersManager);
    private void OnClientConnected(object sender, CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient> e);
    private void OnClientDisconnected(object sender, CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient> e);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactoryImpl : CommunicationClientFactoryBase`1<FabricTransportServiceRemotingClient> {
    private IFabricTransportCallbackMessageHandler fabricTransportRemotingCallbackMessageHandler;
    private ServiceRemotingMessageSerializersManager serializersManager;
    private FabricTransportRemotingSettings settings;
    private NativeFabricTransportMessageDisposer disposer;
    private IEnumerable`1<IExceptionConvertor> exceptionConvertors;
    public FabricTransportServiceRemotingClientFactoryImpl(ServiceRemotingMessageSerializersManager serializersManager, FabricTransportRemotingSettings remotingSettings, IServiceRemotingCallbackMessageHandler remotingCallbackMessageHandler, IServicePartitionResolver servicePartitionResolver, IEnumerable`1<IExceptionHandler> exceptionHandlers, IEnumerable`1<IExceptionConvertor> exceptionConvertors, string traceId);
    protected virtual void AbortClient(FabricTransportServiceRemotingClient client);
    protected virtual Task OpenClient(FabricTransportServiceRemotingClient client, CancellationToken cancellationToken);
    protected virtual Task`1<FabricTransportServiceRemotingClient> CreateClientAsync(string endpoint, CancellationToken cancellationToken);
    protected virtual bool ValidateClient(FabricTransportServiceRemotingClient remotingClient);
    protected virtual bool ValidateClient(string endpoint, FabricTransportServiceRemotingClient remotingClient);
    private static IEnumerable`1<IExceptionConvertor> GetExceptionConvertors(IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    private static IEnumerable`1<IExceptionHandler> GetExceptionHandlers(IEnumerable`1<IExceptionHandler> exceptionHandlers);
    private void OnFabricTransportClientConnected(object sender, CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient> e);
    private void OnFabricTransportClientDisconnected(object sender, CommunicationClientEventArgs`1<FabricTransportServiceRemotingClient> e);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportMessageHandler : object {
    private static string TraceType;
    private IServiceRemotingMessageHandler remotingMessageHandler;
    private ServiceRemotingMessageSerializersManager serializersManager;
    private Guid partitionId;
    private long replicaOrInstanceId;
    private ServiceRemotingPerformanceCounterProvider serviceRemotingPerformanceCounterProvider;
    private IServiceRemotingMessageHeaderSerializer headerSerializer;
    private ExceptionConversionHandler exceptionConvertorHandler;
    public FabricTransportMessageHandler(IServiceRemotingMessageHandler remotingMessageHandler, ServiceRemotingMessageSerializersManager serializersManager, ExceptionConversionHandler exceptionConvertorHandler, Guid partitionId, long replicaOrInstanceId);
    private static FabricTransportMessageHandler();
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportMessageHandler/<RequestResponseAsync>d__9")]
public sealed virtual Task`1<FabricTransportMessage> RequestResponseAsync(FabricTransportRequestContext requestContext, FabricTransportMessage fabricTransportMessage);
    public sealed virtual void HandleOneWay(FabricTransportRequestContext requestContext, FabricTransportMessage requesTransportMessage);
    public void Dispose();
    private FabricTransportMessage CreateFabricTransportExceptionMessage(Exception ex);
    private FabricTransportMessage CreateFabricTransportMessage(IServiceRemotingResponseMessage retval, int interfaceId, Stopwatch stopwatch);
    private IServiceRemotingRequestMessage CreateRemotingRequestMessage(FabricTransportMessage fabricTransportMessage, Stopwatch stopwatch);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportRemotingConnectionHandler : object {
    private ConcurrentDictionary`2<string, FabricTransportCallbackClient> clientCallbackConnection;
    public sealed virtual Task ConnectAsync(FabricTransportCallbackClient fabricTransportServiceRemotingCallback, TimeSpan timeout);
    public sealed virtual Task DisconnectAsync(string clientId, TimeSpan timeout);
    private sealed virtual override FabricTransportCallbackClient Microsoft.ServiceFabric.FabricTransport.V2.Runtime.IFabricTransportConnectionHandler.GetCallBack(string clientId);
    private void AddCallBackConnection(FabricTransportCallbackClient fabricTransportServiceRemotingCallback);
    private void RemoveCallBackConnection(string clientId);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingCallbackClient : object {
    private FabricTransportCallbackClient fabricTransportCallbackClient;
    private ServiceRemotingMessageSerializersManager serializersManager;
    private IServiceRemotingMessageBodyFactory remotingMessageBodyFactory;
    public FabricTransportServiceRemotingCallbackClient(FabricTransportCallbackClient fabricTransportCallbackClient, ServiceRemotingMessageSerializersManager serializersManager);
    public sealed virtual void SendOneWay(IServiceRemotingRequestMessage requestMessage);
    public sealed virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener : object {
    private static string DefaultV2ListenerEndpointResourceName;
    private static string DefaultWrappedMessageListenerEndpointResourceName;
    private FabricTransportMessageHandler transportMessageHandler;
    private string listenAddress;
    private string publishAddress;
    private FabricTransportListener fabricTransportlistener;
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IService serviceImplementation, FabricTransportRemotingListenerSettings remotingListenerSettings, IServiceRemotingMessageSerializationProvider serializationProvider, IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    public FabricTransportServiceRemotingListener(ServiceContext serviceContext, IServiceRemotingMessageHandler serviceRemotingMessageHandler, FabricTransportRemotingListenerSettings remotingListenerSettings, IServiceRemotingMessageSerializationProvider serializationProvider, IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    internal FabricTransportServiceRemotingListener(ServiceContext serviceContext, IServiceRemotingMessageHandler serviceRemotingMessageHandler, ServiceRemotingMessageSerializersManager serializersManager, FabricTransportRemotingListenerSettings remotingListenerSettings, IEnumerable`1<IExceptionConvertor> exceptionConvertors);
    private static FabricTransportServiceRemotingListener();
    public sealed virtual Task`1<string> OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingListener/<CloseAsync>d__10")]
public sealed virtual Task CloseAsync(CancellationToken cancellationToken);
    public sealed virtual void Abort();
    private static ServiceRemotingMessageSerializersManager InitializeSerializersManager(IServiceRemotingMessageSerializationProvider serializationProvider, FabricTransportRemotingListenerSettings listenerSettings);
    private static IServiceRemotingMessageBodyFactory GetMessageBodyFactory(IServiceRemotingMessageSerializationProvider serializationProvider, FabricTransportRemotingListenerSettings remotingListenerSettings);
    private void Dispose();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportServiceRemotingRequestContext : object {
    private FabricTransportRequestContext requestContext;
    private ServiceRemotingMessageSerializersManager serializersManager;
    private string id;
    private IServiceRemotingCallbackClient callback;
    public FabricTransportServiceRemotingRequestContext(FabricTransportRequestContext requestContext, ServiceRemotingMessageSerializersManager serializersManager);
    public sealed virtual IServiceRemotingCallbackClient GetCallBackClient();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory {
    public abstract virtual IServiceRemotingRequestMessageBody CreateRequest(string interfaceName, string methodName, int numberOfParameters, object wrappedRequestObject);
    public abstract virtual IServiceRemotingResponseMessageBody CreateResponse(string interfaceName, string methodName, object wrappedResponseObject);
}
internal interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageHeaderSerializer {
    public abstract virtual IMessageHeader SerializeRequestHeader(IServiceRemotingRequestMessageHeader serviceRemotingRequestMessageHeader);
    public abstract virtual IServiceRemotingRequestMessageHeader DeserializeRequestHeaders(IMessageHeader messageHeader);
    public abstract virtual IMessageHeader SerializeResponseHeader(IServiceRemotingResponseMessageHeader serviceRemotingResponseMessageHeader);
    public abstract virtual IServiceRemotingResponseMessageHeader DeserializeResponseHeaders(IMessageHeader messageHeader);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageSerializationProvider {
    public abstract virtual IServiceRemotingMessageBodyFactory CreateMessageBodyFactory();
    public abstract virtual IServiceRemotingRequestMessageBodySerializer CreateRequestMessageSerializer(Type serviceInterfaceType, IEnumerable`1<Type> requestWrappedTypes, IEnumerable`1<Type> requestBodyTypes);
    public abstract virtual IServiceRemotingResponseMessageBodySerializer CreateResponseMessageSerializer(Type serviceInterfaceType, IEnumerable`1<Type> responseWrappedTypes, IEnumerable`1<Type> responseBodyTypes);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage {
    public abstract virtual IServiceRemotingRequestMessageHeader GetHeader();
    public abstract virtual IServiceRemotingRequestMessageBody GetBody();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBody {
    public abstract virtual void SetParameter(int position, string parameName, object parameter);
    public abstract virtual object GetParameter(int position, string parameName, Type paramType);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBodySerializer {
    public abstract virtual IOutgoingMessageBody Serialize(IServiceRemotingRequestMessageBody serviceRemotingRequestMessageBody);
    public abstract virtual IServiceRemotingRequestMessageBody Deserialize(IIncomingMessageBody messageBody);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageHeader {
    public Guid RequestId { get; public set; }
    public int MethodId { get; public set; }
    public int InterfaceId { get; public set; }
    public string InvocationId { get; public set; }
    public string MethodName { get; public set; }
    public abstract virtual Guid get_RequestId();
    public abstract virtual void set_RequestId(Guid value);
    public abstract virtual int get_MethodId();
    public abstract virtual void set_MethodId(int value);
    public abstract virtual int get_InterfaceId();
    public abstract virtual void set_InterfaceId(int value);
    public abstract virtual string get_InvocationId();
    public abstract virtual void set_InvocationId(string value);
    public abstract virtual string get_MethodName();
    public abstract virtual void set_MethodName(string value);
    public abstract virtual void AddHeader(string headerName, Byte[] headerValue);
    public abstract virtual bool TryGetHeaderValue(string headerName, Byte[]& headerValue);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessage {
    public abstract virtual IServiceRemotingResponseMessageHeader GetHeader();
    public abstract virtual IServiceRemotingResponseMessageBody GetBody();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBody {
    public abstract virtual void Set(object response);
    public abstract virtual object Get(Type paramType);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBodySerializer {
    public abstract virtual IOutgoingMessageBody Serialize(IServiceRemotingResponseMessageBody serviceRemotingResponseMessageBody);
    public abstract virtual IServiceRemotingResponseMessageBody Deserialize(IIncomingMessageBody messageBody);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageHeader {
    public abstract virtual void AddHeader(string headerName, Byte[] headerValue);
    public abstract virtual bool TryGetHeaderValue(string headerName, Byte[]& headerValue);
    public abstract virtual bool CheckIfItsEmpty();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.Allocator : object {
    private int segmentSize;
    public Allocator(int segmentSize);
    public ArraySegment`1<byte> GetSegment();
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.BufferPoolManager : object {
    private static int DefaultSegmentSize;
    private static int DefaultBufferLimit;
    private SynchronizedPool`1<PooledBuffer> bufferPool;
    private Allocator allocator;
    private int limit;
    public BufferPoolManager(int segmentSize, int bufferLimit);
    public sealed virtual IPooledBuffer TakeBuffer();
    public sealed virtual bool ReturnBuffer(IPooledBuffer buffer);
    private ArraySegment`1<byte> CreateSegment();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.DisposableStream : Stream {
    private Stream streamImplementation;
    private bool disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DisposableStream(Stream streamImplementation);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IBufferPoolManager {
    public abstract virtual IPooledBuffer TakeBuffer();
    public abstract virtual bool ReturnBuffer(IPooledBuffer buffer);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IIncomingMessageBody {
    public abstract virtual Stream GetReceivedBuffer();
}
internal interface Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IMessageHeader {
    public abstract virtual ArraySegment`1<byte> GetSendBuffer();
    public abstract virtual Stream GetReceivedBuffer();
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageBody : object {
    private Stream receivedBufferStream;
    private bool isDisposed;
    public IncomingMessageBody(Stream receivedBufferStream);
    public sealed virtual Stream GetReceivedBuffer();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IncomingMessageHeader : object {
    private Stream receivedBufferStream;
    private bool isDisposed;
    public IncomingMessageHeader(Stream receivedBufferStream);
    public sealed virtual ArraySegment`1<byte> GetSendBuffer();
    public sealed virtual Stream GetReceivedBuffer();
    public sealed virtual void Dispose();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IOutgoingMessageBody {
    public abstract virtual IEnumerable`1<ArraySegment`1<byte>> GetSendBuffers();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.IPooledBuffer {
    public ArraySegment`1<byte> Value { get; }
    public int ContentLength { get; public set; }
    public abstract virtual ArraySegment`1<byte> get_Value();
    public abstract virtual int get_ContentLength();
    public abstract virtual void set_ContentLength(int value);
    public abstract virtual bool Release();
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageBody : object {
    private IEnumerable`1<ArraySegment`1<byte>> bodyBuffers;
    private IEnumerable`1<IPooledBuffer> pooledBodyBuffers;
    private bool isDisposed;
    public OutgoingMessageBody(IEnumerable`1<IPooledBuffer> outgoingPooledBodyBuffers);
    public OutgoingMessageBody(IEnumerable`1<ArraySegment`1<byte>> outgoingBodyBuffers);
    public sealed virtual IEnumerable`1<ArraySegment`1<byte>> GetSendBuffers();
    public sealed virtual void Dispose();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.OutgoingMessageHeader : object {
    private IPooledBuffer pooledBuffer;
    private ArraySegment`1<byte> outgoingBuffer;
    private bool isDisposed;
    public OutgoingMessageHeader(IEnumerable`1<IPooledBuffer> pooledBuffers);
    public OutgoingMessageHeader(ArraySegment`1<byte> buffer);
    public sealed virtual Stream GetReceivedBuffer();
    public sealed virtual ArraySegment`1<byte> GetSendBuffer();
    public sealed virtual void Dispose();
    private ArraySegment`1<byte> CreateAndReleaseBuffer(IEnumerable`1<IPooledBuffer> pooledBuffers);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.PooledBuffer : object {
    private IBufferPoolManager manager;
    private bool isRelease;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentLength>k__BackingField;
    public ArraySegment`1<byte> Value { get; public set; }
    public int ContentLength { get; public set; }
    public PooledBuffer(IBufferPoolManager manager, ArraySegment`1<byte> segment, int lengthUsed);
    [CompilerGeneratedAttribute]
public sealed virtual ArraySegment`1<byte> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ContentLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentLength(int value);
    public void ResetBuffer();
    public sealed virtual bool Release();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.SegmentedPoolMemoryStream : Stream {
    private IBufferPoolManager bufferPoolManager;
    private List`1<IPooledBuffer> writeBuffers;
    private bool canRead;
    private bool canSeek;
    private bool canWrite;
    private long position;
    private int bufferSize;
    private int currentBufferOffset;
    private IPooledBuffer currentBuffer;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SegmentedPoolMemoryStream(IBufferPoolManager bufferPoolManager);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public IEnumerable`1<IPooledBuffer> GetBuffers();
    private void Initialize();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Messaging.SegmentedReadMemoryStream : Stream {
    private IEnumerable`1<ArraySegment`1<byte>> readbuffers;
    private int bufferNum;
    private int bufferOffset;
    private long length;
    private bool canRead;
    private bool canSeek;
    private bool canWrite;
    private long position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SegmentedReadMemoryStream(IEnumerable`1<ArraySegment`1<byte>> readbuffers);
    public SegmentedReadMemoryStream(ArraySegment`1<byte> readbuffer);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void SetLength();
    private void Initialize();
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.PooledBufferMessageBodySerializer`2 : object {
    private ServiceRemotingDataContractSerializationProvider serializationProvider;
    private IBufferPoolManager bufferPoolManager;
    private DataContractSerializer serializer;
    public PooledBufferMessageBodySerializer`2(ServiceRemotingDataContractSerializationProvider serializationProvider, IBufferPoolManager bufferPoolManager, DataContractSerializer serializer);
    private sealed virtual override IOutgoingMessageBody Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBodySerializer.Serialize(IServiceRemotingRequestMessageBody serviceRemotingRequestMessageBody);
    private sealed virtual override IServiceRemotingRequestMessageBody Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessageBodySerializer.Deserialize(IIncomingMessageBody messageBody);
    private sealed virtual override IOutgoingMessageBody Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBodySerializer.Serialize(IServiceRemotingResponseMessageBody serviceRemotingResponseMessageBody);
    private sealed virtual override IServiceRemotingResponseMessageBody Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessageBodySerializer.Deserialize(IIncomingMessageBody messageBody);
    private XmlDictionaryWriter CreateXmlDictionaryWriter(Stream outputStream);
    private XmlDictionaryReader CreateXmlDictionaryReader(Stream inputStream);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.V2.RemoteException : object {
    private static DataContractSerializer ServiceExceptionDataSerializer;
    private static BinaryFormatter binaryFormatter;
    [CompilerGeneratedAttribute]
private List`1<ArraySegment`1<byte>> <Data>k__BackingField;
    [DataMemberAttribute]
public List`1<ArraySegment`1<byte>> Data { get; private set; }
    private static RemoteException();
    public RemoteException(List`1<ArraySegment`1<byte>> buffers);
    [CompilerGeneratedAttribute]
public List`1<ArraySegment`1<byte>> get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(List`1<ArraySegment`1<byte>> value);
    public static RemoteException FromException(Exception exception);
    public static bool ToException(Stream bufferedStream, Exception& result);
    internal static bool TryDeserializeExceptionData(Stream data, ServiceExceptionData& result);
    internal static List`1<ArraySegment`1<byte>> FromExceptionString(Exception exception);
    private static bool TryDeserializeException(Stream data, Exception& result);
    private static bool TryDeserializeServiceException(Stream data, Exception& result);
    private static object DeserializeServiceExceptionData(Stream buffer);
    private static Byte[] SerializeServiceExceptionData(ServiceExceptionData msg);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.V2.RemoteException2 : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RemoteException2> <InnerExceptions>k__BackingField;
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string StackTrace { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Data { get; public set; }
    [DataMemberAttribute]
public List`1<RemoteException2> InnerExceptions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<RemoteException2> get_InnerExceptions();
    [CompilerGeneratedAttribute]
public void set_InnerExceptions(List`1<RemoteException2> value);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ExceptionConversionHandler : object {
    private static string TraceEventType;
    private IEnumerable`1<IExceptionConvertor> convertors;
    private FabricTransportRemotingListenerSettings listenerSettings;
    public ExceptionConversionHandler(IEnumerable`1<IExceptionConvertor> convertors, FabricTransportRemotingListenerSettings listenerSettings);
    private static ExceptionConversionHandler();
    public ServiceException ToServiceException(Exception originalException, int currentDepth);
    public ServiceException ToServiceException(Exception originalException);
    public RemoteException2 ToRemoteException(ServiceException serviceException);
    public List`1<ArraySegment`1<byte>> SerializeRemoteException(RemoteException2 remoteException);
    public List`1<ArraySegment`1<byte>> SerializeRemoteException(Exception exception);
}
internal abstract class Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ExceptionConvertorBase : object {
    public virtual Exception[] GetInnerExceptions(Exception originalException);
    public abstract virtual bool TryConvertToServiceException(Exception originalException, ServiceException& serviceException);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.FabricExceptionConvertor : ExceptionConvertorBase {
    public virtual Exception[] GetInnerExceptions(Exception originalException);
    public virtual bool TryConvertToServiceException(Exception originalException, ServiceException& serviceException);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IExceptionConvertor {
    public abstract virtual bool TryConvertToServiceException(Exception originalException, ServiceException& serviceException);
    public abstract virtual Exception[] GetInnerExceptions(Exception exception);
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingCallbackClient {
    public abstract virtual void SendOneWay(IServiceRemotingRequestMessage requestMessage);
    public abstract virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingMessageHandler {
    public abstract virtual Task`1<IServiceRemotingResponseMessage> HandleRequestResponseAsync(IServiceRemotingRequestContext requestContext, IServiceRemotingRequestMessage requestMessage);
    public abstract virtual void HandleOneWayMessage(IServiceRemotingRequestMessage requestMessage);
    public abstract virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
}
public interface Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IServiceRemotingRequestContext {
    public abstract virtual IServiceRemotingCallbackClient GetCallBackClient();
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher : object {
    private static string TraceType;
    private ServiceRemotingCancellationHelper cancellationHelper;
    private Dictionary`2<int, MethodDispatcherBase> methodDispatcherMap;
    private object serviceImplementation;
    private IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory;
    private ServicePerformanceCounterProvider servicePerformanceCounterProvider;
    public ServiceRemotingMessageDispatcher(IEnumerable`1<Type> remotingTypes, ServiceContext serviceContext, object serviceImplementation, IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory);
    public ServiceRemotingMessageDispatcher(ServiceContext serviceContext, IService serviceImplementation, IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory);
    private static ServiceRemotingMessageDispatcher();
    public virtual Task`1<IServiceRemotingResponseMessageBody> HandleRequestResponseAsync(ServiceRemotingDispatchHeaders requestMessageDispatchHeaders, IServiceRemotingRequestMessageBody requestMessageBody, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher/<HandleRequestResponseAsync>d__9")]
public virtual Task`1<IServiceRemotingResponseMessage> HandleRequestResponseAsync(IServiceRemotingRequestContext requestContext, IServiceRemotingRequestMessage requestMessage);
    public virtual void HandleOneWayMessage(IServiceRemotingRequestMessage requestMessage);
    public sealed virtual IServiceRemotingMessageBodyFactory GetRemotingMessageBodyFactory();
    public sealed virtual void Dispose();
    internal bool IsCancellationRequest(IServiceRemotingRequestMessageHeader requestMessageHeaders);
    private Task`1<IServiceRemotingResponseMessage> OnDispatch(IServiceRemotingRequestMessageHeader requestMessageHeaders, IServiceRemotingRequestMessageBody requestBody, CancellationToken cancellationToken);
    private IServiceRemotingRequestMessageHeader CreateServiceRemotingRequestMessageHeader(ServiceRemotingDispatchHeaders serviceRemotingDispatchHeaders);
    private void Initialize(ServiceContext serviceContext, object serviceImplementation, IEnumerable`1<Type> remotedInterfaces, bool nonServiceInterface, IServiceRemotingMessageBodyFactory serviceRemotingMessageBodyFactory);
    [AsyncStateMachineAttribute("Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher/<HandleRequestResponseAsync>d__17")]
private Task`1<IServiceRemotingResponseMessageBody> HandleRequestResponseAsync(IServiceRemotingRequestMessageHeader remotingRequestMessageHeader, IServiceRemotingRequestMessageBody requestMessageBody, CancellationToken cancellationToken);
}
public static class Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingServiceEvents : object {
    [CompilerGeneratedAttribute]
private static EventHandler ReceiveRequest;
    [CompilerGeneratedAttribute]
private static EventHandler SendResponse;
    [CompilerGeneratedAttribute]
public static void add_ReceiveRequest(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_ReceiveRequest(EventHandler value);
    [CompilerGeneratedAttribute]
public static void add_SendResponse(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_SendResponse(EventHandler value);
    internal static void RaiseReceiveRequest(IServiceRemotingRequestMessage request, string methodName);
    internal static void RaiseSendResponse(IServiceRemotingResponseMessage response, IServiceRemotingRequestMessage request);
    internal static void RaiseExceptionResponse(Exception ex, IServiceRemotingRequestMessage request);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.SystemExceptionConvertor : ExceptionConvertorBase {
    public virtual Exception[] GetInnerExceptions(Exception originalException);
    public virtual bool TryConvertToServiceException(Exception originalException, ServiceException& serviceException);
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDataContractSerializationProvider : object {
    private IBufferPoolManager bodyBufferPoolManager;
    public ServiceRemotingDataContractSerializationProvider(IBufferPoolManager bodyBufferPoolManager);
    public sealed virtual IServiceRemotingRequestMessageBodySerializer CreateRequestMessageSerializer(Type serviceInterfaceType, IEnumerable`1<Type> methodParameterTypes, IEnumerable`1<Type> wrappedMessageTypes);
    public sealed virtual IServiceRemotingResponseMessageBodySerializer CreateResponseMessageSerializer(Type serviceInterfaceType, IEnumerable`1<Type> methodReturnTypes, IEnumerable`1<Type> wrappedMessageTypes);
    public sealed virtual IServiceRemotingMessageBodyFactory CreateMessageBodyFactory();
    internal IServiceRemotingRequestMessageBodySerializer CreateRemotingRequestMessageSerializer(DataContractSerializer serializer);
    internal IServiceRemotingResponseMessageBodySerializer CreateRemotingResponseMessageSerializer(DataContractSerializer serializer);
    protected internal virtual DataContractSerializer CreateRemotingRequestMessageBodyDataContractSerializer(Type remotingRequestType, IEnumerable`1<Type> knownTypes);
    protected internal virtual DataContractSerializer CreateRemotingResponseMessageBodyDataContractSerializer(Type remotingResponseType, IEnumerable`1<Type> knownTypes);
    protected internal virtual XmlDictionaryWriter CreateXmlDictionaryWriter(Stream outputStream);
    protected internal virtual XmlDictionaryReader CreateXmlDictionaryReader(Stream inputStream);
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingDispatchHeaders : object {
    [CompilerGeneratedAttribute]
private string <ServiceInterfaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string ServiceInterfaceName { get; public set; }
    public string MethodName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceInterfaceName();
    [CompilerGeneratedAttribute]
public void set_ServiceInterfaceName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingFailedResponseEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceRemotingRequestMessage <Request>k__BackingField;
    public Exception Error { get; private set; }
    public IServiceRemotingRequestMessage Request { get; private set; }
    public ServiceRemotingFailedResponseEventArgs(Exception ex, IServiceRemotingRequestMessage request);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public IServiceRemotingRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IServiceRemotingRequestMessage value);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingMessageHeaderSerializer : object {
    private IBufferPoolManager bufferPoolManager;
    private DataContractSerializer requestHeaderSerializer;
    private DataContractSerializer responseHeaderSerializer;
    public ServiceRemotingMessageHeaderSerializer(IBufferPoolManager bufferPoolManager);
    public ServiceRemotingMessageHeaderSerializer(IBufferPoolManager bufferPoolManager, DataContractSerializer headerRequestSerializer);
    public sealed virtual IMessageHeader SerializeRequestHeader(IServiceRemotingRequestMessageHeader serviceRemotingRequestMessageHeader);
    public sealed virtual IServiceRemotingRequestMessageHeader DeserializeRequestHeaders(IMessageHeader messageHeader);
    public sealed virtual IMessageHeader SerializeResponseHeader(IServiceRemotingResponseMessageHeader serviceRemotingResponseMessageHeader);
    public sealed virtual IServiceRemotingResponseMessageHeader DeserializeResponseHeaders(IMessageHeader messageHeader);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingMessageSerializersManager : object {
    private ConcurrentDictionary`2<int, CacheEntry> cachedBodySerializers;
    private IServiceRemotingMessageHeaderSerializer headerSerializer;
    private IServiceRemotingMessageSerializationProvider serializationProvider;
    public ServiceRemotingMessageSerializersManager(IServiceRemotingMessageSerializationProvider serializationProvider, IServiceRemotingMessageHeaderSerializer headerSerializer, bool useWrappedMessage);
    public IServiceRemotingMessageSerializationProvider GetSerializationProvider();
    public IServiceRemotingMessageHeaderSerializer GetHeaderSerializer();
    public IServiceRemotingRequestMessageBodySerializer GetRequestBodySerializer(int interfaceId);
    public IServiceRemotingResponseMessageBodySerializer GetResponseBodySerializer(int interfaceId);
    internal virtual CacheEntry CreateSerializers(int interfaceId);
    internal virtual InterfaceDetails GetInterfaceDetails(int interfaceId);
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IServiceRemotingRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public IServiceRemotingRequestMessage Request { get; private set; }
    public Uri ServiceUri { get; private set; }
    public string MethodName { get; private set; }
    public ServiceRemotingRequestEventArgs(IServiceRemotingRequestMessage request, string methodName);
    public ServiceRemotingRequestEventArgs(IServiceRemotingRequestMessage request, Uri targetUri, string methodName);
    [CompilerGeneratedAttribute]
public IServiceRemotingRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IServiceRemotingRequestMessage value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
private void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestMessage : object {
    private IServiceRemotingRequestMessageHeader header;
    private IServiceRemotingRequestMessageBody msgBody;
    public ServiceRemotingRequestMessage(IServiceRemotingRequestMessageHeader header, IServiceRemotingRequestMessageBody msgBody);
    public sealed virtual IServiceRemotingRequestMessageHeader GetHeader();
    public sealed virtual IServiceRemotingRequestMessageBody GetBody();
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestMessageBody : object {
    [DataMemberAttribute]
private Dictionary`2<string, object> parameters;
    public ServiceRemotingRequestMessageBody(int parameterInfos);
    public sealed virtual void SetParameter(int position, string paramName, object parameter);
    public sealed virtual object GetParameter(int position, string paramName, Type paramType);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingRequestMessageHeader : object {
    internal static string CancellationHeaderName;
    [DataMemberAttribute]
private Dictionary`2<string, Byte[]> headers;
    [CompilerGeneratedAttribute]
private int <MethodId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InterfaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [DataMemberAttribute]
public int MethodId { get; public set; }
    [DataMemberAttribute]
public int InterfaceId { get; public set; }
    [DataMemberAttribute]
public string InvocationId { get; public set; }
    [DataMemberAttribute]
public string MethodName { get; public set; }
    [DataMemberAttribute]
public Guid RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_MethodId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MethodId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_InterfaceId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InterfaceId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InvocationId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InvocationId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_RequestId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestId(Guid value);
    public sealed virtual void AddHeader(string headerName, Byte[] headerValue);
    public sealed virtual bool TryGetHeaderValue(string headerName, Byte[]& headerValue);
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingResponseEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IServiceRemotingResponseMessage <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceRemotingRequestMessage <Request>k__BackingField;
    public IServiceRemotingResponseMessage Response { get; private set; }
    public IServiceRemotingRequestMessage Request { get; private set; }
    public ServiceRemotingResponseEventArgs(IServiceRemotingResponseMessage response, IServiceRemotingRequestMessage request);
    [CompilerGeneratedAttribute]
public IServiceRemotingResponseMessage get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(IServiceRemotingResponseMessage value);
    [CompilerGeneratedAttribute]
public IServiceRemotingRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IServiceRemotingRequestMessage value);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingResponseMessage : object {
    private IServiceRemotingResponseMessageHeader header;
    private IServiceRemotingResponseMessageBody msgBody;
    public ServiceRemotingResponseMessage(IServiceRemotingResponseMessageHeader header, IServiceRemotingResponseMessageBody msgBody);
    public sealed virtual IServiceRemotingResponseMessageHeader GetHeader();
    public sealed virtual IServiceRemotingResponseMessageBody GetBody();
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingResponseMessageBody : object {
    [DataMemberAttribute]
private object response;
    public sealed virtual void Set(object response);
    public sealed virtual object Get(Type paramType);
}
[DataContractAttribute]
internal class Microsoft.ServiceFabric.Services.Remoting.V2.ServiceRemotingResponseMessageHeader : object {
    [DataMemberAttribute]
private Dictionary`2<string, Byte[]> headers;
    public sealed virtual void AddHeader(string headerName, Byte[] headerValue);
    public sealed virtual bool CheckIfItsEmpty();
    public sealed virtual bool TryGetHeaderValue(string headerName, Byte[]& headerValue);
}
internal class Microsoft.ServiceFabric.Services.Remoting.V2.SystemExceptionKnownTypes : object {
    public static IDictionary`2<string, ConvertorFuncs> ServiceExceptionConvertors;
    private static SystemExceptionKnownTypes();
    private static Exception[] GetInnerExceptions(Exception exception);
    private static Exception[] GetInnerExceptions(ReflectionTypeLoadException exception);
    private static Exception[] GetInnerExceptions(AggregateException exception);
    private static ServiceException ToServiceException(Exception exception);
    private static ServiceException ToServiceException(ArgumentException exception);
    private static AggregateException AggregateExceptionFromServiceEx(ServiceException serviceException, Exception[] innerExceptions);
    private static ArgumentException ArgumentExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(ArgumentNullException exception);
    private static ArgumentNullException ArgumentNullExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(ObjectDisposedException exception);
    private static ObjectDisposedException ObjectDisposedExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(BadImageFormatException exception);
    private static BadImageFormatException BadImageFormatExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(ReflectionTypeLoadException exception);
    private static ReflectionTypeLoadException ReflectionTypeLoadExceptionFromServiceEx(ServiceException serviceException, Exception[] innerExceptions);
    private static ServiceException ToServiceException(MissingSatelliteAssemblyException exception);
    private static MissingSatelliteAssemblyException MissingSatelliteAssemblyExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(ExternalException exception);
    private static ExternalException ExternalExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(TypeInitializationException exception);
    private static TypeInitializationException TypeInitializationExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static InvalidCastException InvalidCastExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(TypeLoadException exception);
    private static TypeLoadException TypeLoadExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static ServiceException ToServiceException(FileNotFoundException exception);
    private static FileNotFoundException FileNotFoundExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static IOException IOExceptionFromServiceEx(ServiceException serviceException, Exception innerException);
    private static T FromServiceException(ServiceException serviceException, Exception[] innerExceptions);
}
public class Microsoft.ServiceFabric.Services.Remoting.V2.WrappingServiceRemotingDataContractSerializationProvider : object {
    private ServiceRemotingDataContractSerializationProvider internalprovider;
    public WrappingServiceRemotingDataContractSerializationProvider(IBufferPoolManager bodyBufferPoolManager);
    public sealed virtual IServiceRemotingMessageBodyFactory CreateMessageBodyFactory();
    public sealed virtual IServiceRemotingRequestMessageBodySerializer CreateRequestMessageSerializer(Type serviceInterfaceType, IEnumerable`1<Type> methodParameterTypes, IEnumerable`1<Type> wrappedMessageTypes);
    public sealed virtual IServiceRemotingResponseMessageBodySerializer CreateResponseMessageSerializer(Type serviceInterfaceType, IEnumerable`1<Type> methodReturnTypes, IEnumerable`1<Type> wrappedMessageTypes);
    protected internal virtual XmlDictionaryWriter CreateXmlDictionaryWriter(Stream outputStream);
    protected internal virtual XmlDictionaryReader CreateXmlDictionaryReader(Stream inputStream);
    protected virtual DataContractSerializer CreateRemotingRequestMessageBodyDataContractSerializer(Type remotingRequestType, IEnumerable`1<Type> knownTypes);
    protected virtual DataContractSerializer CreateRemotingResponseMessageBodyDataContractSerializer(Type remotingResponseType, IEnumerable`1<Type> knownTypes);
}
[DataContractAttribute]
public abstract class WrappedMessage : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [DataMemberAttribute]
public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[DataContractAttribute]
internal class WrappedRemotingMessageBody : WrappedMessage {
    public sealed virtual void SetParameter(int position, string parameName, object parameter);
    public sealed virtual object GetParameter(int position, string parameName, Type paramType);
    public sealed virtual void Set(object response);
    public sealed virtual object Get(Type paramType);
}
internal class WrappedRequestMessageFactory : object {
    public sealed virtual IServiceRemotingRequestMessageBody CreateRequest(string interfaceName, string methodName, int numberOfParameters, object wrappedRequestObject);
    public sealed virtual IServiceRemotingResponseMessageBody CreateResponse(string interfaceName, string methodName, object wrappedResponseObject);
}
