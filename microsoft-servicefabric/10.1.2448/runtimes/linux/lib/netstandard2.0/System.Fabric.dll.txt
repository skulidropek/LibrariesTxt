public class System.Fabric.ApplicationUpgradeProgress : object {
    private IFabricApplicationUpgradeProgressResult2 nativeProgress;
    private UpgradeDomainProgress currentProgress;
    [CompilerGeneratedAttribute]
private ApplicationUpgradeDescription <UpgradeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationUpgradeState <UpgradeState>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<UpgradeDomainStatus> <UpgradeDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<UpgradeUnitStatus> <UpgradeUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private RollingUpgradeMode <RollingUpgradeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextUpgradeDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CurrentUpgradeDomainDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FailureTimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UpgradeFailureReason> <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradeDomainProgress <UpgradeDomainProgressAtFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeStatusDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckElapsedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private MonitoredUpgradeHealthCheckPhase <HealthCheckPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HealthCheckFlips>k__BackingField;
    public ApplicationUpgradeDescription UpgradeDescription { get; internal set; }
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeName { get; internal set; }
    public string TargetApplicationTypeVersion { get; internal set; }
    public ApplicationUpgradeState UpgradeState { get; internal set; }
    public ReadOnlyCollection`1<UpgradeDomainStatus> UpgradeDomains { get; internal set; }
    public ReadOnlyCollection`1<UpgradeUnitStatus> UpgradeUnits { get; internal set; }
    public RollingUpgradeMode RollingUpgradeMode { get; internal set; }
    public string NextUpgradeDomain { get; internal set; }
    [JsonCustomizationAttribute]
public TimeSpan UpgradeDuration { get; internal set; }
    [JsonCustomizationAttribute]
public TimeSpan CurrentUpgradeDomainDuration { get; internal set; }
    [JsonCustomizationAttribute]
public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [JsonCustomizationAttribute]
public UpgradeDomainProgress CurrentUpgradeDomainProgress { get; internal set; }
    public UpgradeUnitsProgress CurrentUpgradeUnitsProgress { get; }
    [JsonCustomizationAttribute]
public Nullable`1<DateTime> StartTimestampUtc { get; internal set; }
    [JsonCustomizationAttribute]
public Nullable`1<DateTime> FailureTimestampUtc { get; internal set; }
    [JsonCustomizationAttribute]
public Nullable`1<UpgradeFailureReason> FailureReason { get; internal set; }
    [JsonCustomizationAttribute]
public UpgradeDomainProgress UpgradeDomainProgressAtFailure { get; internal set; }
    [JsonCustomizationAttribute]
public string UpgradeStatusDetails { get; internal set; }
    public bool IsNodeByNode { get; }
    public TimeSpan HealthCheckElapsedTime { get; internal set; }
    public MonitoredUpgradeHealthCheckPhase HealthCheckPhase { get; internal set; }
    public long HealthCheckFlips { get; internal set; }
    internal IFabricApplicationUpgradeProgressResult2 InnerProgress { get; }
    internal ApplicationUpgradeProgress(IFabricApplicationUpgradeProgressResult2 nativeProgress);
    [CompilerGeneratedAttribute]
public ApplicationUpgradeDescription get_UpgradeDescription();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDescription(ApplicationUpgradeDescription value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetApplicationTypeVersion();
    [CompilerGeneratedAttribute]
internal void set_TargetApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public ApplicationUpgradeState get_UpgradeState();
    [CompilerGeneratedAttribute]
internal void set_UpgradeState(ApplicationUpgradeState value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<UpgradeDomainStatus> get_UpgradeDomains();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomains(ReadOnlyCollection`1<UpgradeDomainStatus> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<UpgradeUnitStatus> get_UpgradeUnits();
    [CompilerGeneratedAttribute]
internal void set_UpgradeUnits(ReadOnlyCollection`1<UpgradeUnitStatus> value);
    [CompilerGeneratedAttribute]
public RollingUpgradeMode get_RollingUpgradeMode();
    [CompilerGeneratedAttribute]
internal void set_RollingUpgradeMode(RollingUpgradeMode value);
    [CompilerGeneratedAttribute]
public string get_NextUpgradeDomain();
    [CompilerGeneratedAttribute]
internal void set_NextUpgradeDomain(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeDuration();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CurrentUpgradeDomainDuration();
    [CompilerGeneratedAttribute]
internal void set_CurrentUpgradeDomainDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    public UpgradeDomainProgress get_CurrentUpgradeDomainProgress();
    internal void set_CurrentUpgradeDomainProgress(UpgradeDomainProgress value);
    public UpgradeUnitsProgress get_CurrentUpgradeUnitsProgress();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTimestampUtc();
    [CompilerGeneratedAttribute]
internal void set_StartTimestampUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FailureTimestampUtc();
    [CompilerGeneratedAttribute]
internal void set_FailureTimestampUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UpgradeFailureReason> get_FailureReason();
    [CompilerGeneratedAttribute]
internal void set_FailureReason(Nullable`1<UpgradeFailureReason> value);
    [CompilerGeneratedAttribute]
public UpgradeDomainProgress get_UpgradeDomainProgressAtFailure();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomainProgressAtFailure(UpgradeDomainProgress value);
    [CompilerGeneratedAttribute]
public string get_UpgradeStatusDetails();
    [CompilerGeneratedAttribute]
internal void set_UpgradeStatusDetails(string value);
    public bool get_IsNodeByNode();
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckElapsedTime();
    [CompilerGeneratedAttribute]
internal void set_HealthCheckElapsedTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public MonitoredUpgradeHealthCheckPhase get_HealthCheckPhase();
    [CompilerGeneratedAttribute]
internal void set_HealthCheckPhase(MonitoredUpgradeHealthCheckPhase value);
    [CompilerGeneratedAttribute]
public long get_HealthCheckFlips();
    [CompilerGeneratedAttribute]
internal void set_HealthCheckFlips(long value);
    public virtual string ToString();
    internal IFabricApplicationUpgradeProgressResult2 get_InnerProgress();
    public ReadOnlyCollection`1<UpgradeDomainStatus> GetChangedUpgradeDomains(ApplicationUpgradeProgress previousProgress);
}
public enum System.Fabric.ApplicationUpgradeState : Enum {
    public int value__;
    public static ApplicationUpgradeState Invalid;
    public static ApplicationUpgradeState RollingBackInProgress;
    public static ApplicationUpgradeState RollingBackCompleted;
    public static ApplicationUpgradeState RollingForwardPending;
    public static ApplicationUpgradeState RollingForwardInProgress;
    public static ApplicationUpgradeState RollingForwardCompleted;
    public static ApplicationUpgradeState Failed;
    public static ApplicationUpgradeState RollingBackPending;
}
internal class System.Fabric.AssemblyResolver : object {
    private static Char[] Separators;
    private Dictionary`2<string, List`1<AssemblyResolutionEntry>> resolutionEntries;
    private bool disposed;
    private static AssemblyResolver();
    public void AddApplicationBinariesPath(string path);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private Assembly OnResolveAssembly(object sender, ResolveEventArgs args);
}
internal class System.Fabric.AtomicGroupStatefulServicePartition : StatefulServicePartition {
    private IFabricServiceGroupPartition nativeServiceGroupPartition;
    internal AtomicGroupStatefulServicePartition(IFabricStatefulServicePartition nativeStatefulPartition, IFabricServiceGroupPartition nativeServiceGroupPartition, ServicePartitionInformation partitionInfo);
    public sealed virtual T ResolveMember(Uri name);
}
internal class System.Fabric.AtomicGroupStateProviderBroker : StateProviderBroker {
    private IAtomicGroupStateProvider atomicGroupStateProvider;
    public AtomicGroupStateProviderBroker(IStateProvider stateProvider, IAtomicGroupStateProvider atomicGroupStateProvider);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricAtomicGroupStateProvider.BeginAtomicGroupCommit(long atomicGroupId, long commitSequenceNumber, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeRuntime.IFabricAtomicGroupStateProvider.EndAtomicGroupCommit(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricAtomicGroupStateProvider.BeginAtomicGroupRollback(long atomicGroupId, long rollbackSequenceNumber, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeRuntime.IFabricAtomicGroupStateProvider.EndAtomicGroupRollback(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricAtomicGroupStateProvider.BeginUndoProgress(long fromCommitSequenceNumber, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeRuntime.IFabricAtomicGroupStateProvider.EndUndoProgress(IFabricAsyncOperationContext context);
}
internal class System.Fabric.AtomicGroupStateReplicator : StateReplicator {
    private IFabricAtomicGroupStateReplicator nativeAtomicGroupStateReplicator;
    public AtomicGroupStateReplicator(IFabricAtomicGroupStateReplicator nativeAtomicGroupStateReplicator, IFabricStateReplicator nativeStateReplicator, IOperationDataFactory nativeOperationDataFactory);
    public sealed virtual long CreateAtomicGroup();
    public sealed virtual Task`1<long> ReplicateAtomicGroupOperationAsync(long atomicGroupId, OperationData operationData, CancellationToken cancellationToken, Int64& sequenceNumber);
    public sealed virtual Task`1<long> ReplicateAtomicGroupCommitAsync(long atomicGroupId, CancellationToken cancellationToken, Int64& commitSequenceNumber);
    public sealed virtual Task`1<long> ReplicateAtomicGroupRollbackAsync(long atomicGroupId, CancellationToken cancellationToken, Int64& rollbackSequenceNumber);
    private long ReplicateBeginWrapper(long atomicGroupId, OperationData operationData, IFabricAsyncOperationCallback callback, IFabricAsyncOperationContext& context);
    private long ReplicateEndWrapper(IFabricAsyncOperationContext context);
    private long CommitBeginWrapper(long atomicGroupId, IFabricAsyncOperationCallback callback, IFabricAsyncOperationContext& context);
    private long CommitEndWrapper(IFabricAsyncOperationContext context);
    private long RollbackBeginWrapper(long atomicGroupId, IFabricAsyncOperationCallback callback, IFabricAsyncOperationContext& context);
    private long RollbackEndWrapper(IFabricAsyncOperationContext context);
}
public enum System.Fabric.AuthorizedConnectionKeyType : Enum {
    public int value__;
    public static AuthorizedConnectionKeyType Invalid;
    public static AuthorizedConnectionKeyType Base64DERCertificate;
}
internal class System.Fabric.BackupRestore.BackupInfo : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private BackupOption <Option>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <BackupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentBackupId>k__BackingField;
    [CompilerGeneratedAttribute]
private BackupVersion <IndexBackupVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private BackupVersion <LastBackupVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <BackupChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BackupIndex>k__BackingField;
    public string Directory { get; public set; }
    public BackupOption Option { get; public set; }
    public Guid BackupId { get; public set; }
    public Guid ParentBackupId { get; public set; }
    public BackupVersion IndexBackupVersion { get; public set; }
    public BackupVersion LastBackupVersion { get; public set; }
    public Guid BackupChainId { get; public set; }
    public long BackupIndex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public BackupOption get_Option();
    [CompilerGeneratedAttribute]
public void set_Option(BackupOption value);
    [CompilerGeneratedAttribute]
public Guid get_BackupId();
    [CompilerGeneratedAttribute]
public void set_BackupId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ParentBackupId();
    [CompilerGeneratedAttribute]
public void set_ParentBackupId(Guid value);
    [CompilerGeneratedAttribute]
public BackupVersion get_IndexBackupVersion();
    [CompilerGeneratedAttribute]
public void set_IndexBackupVersion(BackupVersion value);
    [CompilerGeneratedAttribute]
public BackupVersion get_LastBackupVersion();
    [CompilerGeneratedAttribute]
public void set_LastBackupVersion(BackupVersion value);
    [CompilerGeneratedAttribute]
public Guid get_BackupChainId();
    [CompilerGeneratedAttribute]
public void set_BackupChainId(Guid value);
    [CompilerGeneratedAttribute]
public long get_BackupIndex();
    [CompilerGeneratedAttribute]
public void set_BackupIndex(long value);
}
public enum System.Fabric.BackupRestore.BackupOption : Enum {
    public int value__;
    public static BackupOption Full;
    public static BackupOption Incremental;
}
internal class System.Fabric.BackupRestore.BackupRestoreManagerFactory : object {
    private static string SystemFabricBackupRestoreAssemblyName;
    private static string TraceType;
    private static String[] KnownDlls;
    private static BackupRestoreManagerFactory();
    private static Assembly LoadFromFabricCodePath(object sender, ResolveEventArgs args);
    internal static IBackupRestoreManager GetBackupRestoreManager(IBackupRestoreReplica replica);
}
internal class System.Fabric.BackupRestore.BackupVersion : ValueType {
    public static BackupVersion InvalidBackupVersion;
    private Epoch _epoch;
    private long _lsn;
    public Epoch Epoch { get; private set; }
    public long Lsn { get; private set; }
    public BackupVersion(Epoch epoch, long lsn);
    private static BackupVersion();
    public Epoch get_Epoch();
    private void set_Epoch(Epoch value);
    public long get_Lsn();
    private void set_Lsn(long value);
    public sealed virtual int CompareTo(BackupVersion other);
    public sealed virtual bool Equals(BackupVersion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal interface System.Fabric.BackupRestore.IBackupRestoreManager {
    public abstract virtual void Initialize(StatefulServiceInitializationParameters initializationParameters);
    public abstract virtual Task OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    public abstract virtual Task ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual void Abort();
    public abstract virtual Task`1<bool> OnDataLossAsync(CancellationToken cancellationToken);
}
internal interface System.Fabric.BackupRestore.IBackupRestoreReplica {
    public abstract virtual Task BackupAsync(BackupOption backupOption, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback, CancellationToken cancellationToken);
    public abstract virtual Task RestoreAsync(string backupFolderPath, bool forceRestore, CancellationToken cancellationToken);
    public abstract virtual Task`1<Byte[]> GetBackupMetadataAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task SaveBackupMetadataAsync(Byte[] metadata, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task ClearBackupMetadataAsync(TimeSpan timeout);
}
public enum System.Fabric.BlockListType : Enum {
    public int value__;
    public static BlockListType Service;
    public static BlockListType Overall;
    public static BlockListType PreferredPrimary;
    public static BlockListType PlacementTags;
    public static BlockListType RunningTags;
}
[ExtensionAttribute]
public static class System.Fabric.BlockListTypeUtility : object {
    [ExtensionAttribute]
public static string GetString(BlockListType listType);
    public static Nullable`1<BlockListType> FromString(string blockListTypeStr);
}
public abstract class System.Fabric.ByteSerializable : object {
    private static string TraceType;
    public virtual Byte[] ToBytes();
    public virtual void FromBytes(Byte[] data);
    public abstract virtual void Write(BinaryWriter bw);
    public abstract virtual void Read(BinaryReader br);
}
internal static class System.Fabric.Chaos.Common.ChaosConstants : object {
    public static string PreAssertAmble;
    public static string PostAssertAmble;
    public static string DummyFMCodePackageVersion;
    public static string DummyCMCodePackageVersion;
    public static string DummyNSCodePackageVersion;
    public static string NodeNameUsingIdPrefix;
    public static int StringLengthLimit;
    public static int MaxNumberOfStartChaosContextEntries;
    public static string KeyForDummyContextEntry;
    public static string ValueForDummyContextEntry;
    public static string ServiceFabricChaosInternalContextKeyPrefix;
    public static string EnableForcedAssertKey;
    public static string EnableForceMoveOfReplicaKey;
    public static string ChaosShouldFaultSystemKey;
    public static string MaxNumberOfRetriesInGetClusterSnapshotActionKey;
    public static string FailoverAfterChaosFaultsKey;
    public static string DisableInputValidationForChaosTargetFilterKey;
    public static int DefaultMaxNumberOfRetriesInGetClusterSnapshotAction;
    public static string ManagedClientTypeName;
    public static string RestClientTypeName;
    public static string NativeClientTypeName;
    public static HashSet`1<string> ReservedKeys;
    public static HashSet`1<string> UpgradingInfrastructureJobStatus;
    public static string InfrastructureServiceType;
    public static string InfrastructureServiceGetCurrentStateCommand;
    public static string InfrastructureServiceGetJobsCommand;
    public static string StartNode_InvalidActionType_TelemetryId;
    public static string StartNode_InvalidNodeName_TelemetryId;
    public static string StopNode_InvalidActionType_TelemetryId;
    public static string StopNode_InvalidNodeName_TelemetryId;
    public static string RestartNode_InvalidActionType_TelemetryId;
    public static string RestartNode_InvalidNodeName_TelemetryId;
    public static string FaultCodePackage_CodepackageEntityInTransition_TelemetryId;
    public static string FaultCodePackage_NullNode_TelemetryId;
    public static string FaultCodePackage_FaultedNode_TelemetryId;
    public static string FaultCodePackage_PartitionNotFaultTolerant_TelemetryId;
    public static string FaultNode_NodeInTransition_TelemetryId;
    public static string FaultNode_UnsafeNode_TelemetryId;
    public static string MoveReplica_Unavailable_TelemetryId;
    public static string MoveReplica_PartitionNotFaultTolerant_TelemetryId;
    public static string MoveReplica_InvalidNode_TelemetryId;
    public static string FaultReplica_ReplicaInTransition_TelemetryId;
    public static string FaultReplica_PartitionNotFaultTolerant_TelemetryId;
    public static string MarkReplciaAsInTransition_UnavailableTargetNode_TelemetryId;
    public static string MarkReplicaAsInTransition_UnavailableSourceNode_TelemetryId;
    public static string ClearReplicaOfExclusionFlags_UnavailableSourceCodePackage_TelemetryId;
    public static string MarkReplicaAsInTransition_NodeFaulted_TelemetryId;
    public static string MarkReplicaAsInTransition_CodepackageFaulted_TelemetryId;
    public static string MarkAllUnsafeEntities_NodeNotFoundForCodePackage_TelemetryId;
    public static string GetClusterSnapshotAction_MaximumNumberOfRetriesAchieved_TelemetryId;
    public static string ClearCodePackageOfExclusionFlags_DeployedReplicaNotFound_TelemetryId;
    public static string UnexpectedNumberOfInternalChaosParametersCtor_TelemetryId;
    public static string ChaosScheduler_StateResetOnRestart_TelemetryId;
    public static double RequestTimeoutFactorDefault;
    public static long MaxConcurrentFaultsDefault;
    public static TimeSpan RequestTimeoutDefault;
    public static TimeSpan OperationTimeoutDefault;
    public static TimeSpan DefaultClusterStabilizationTimeout;
    public static TimeSpan WaitTimeBetweenIterationsDefault;
    public static TimeSpan WaitTimeBetweenFaultsDefault;
    public static ClusterHealthPolicy ClusterHealthPolicyDefault;
    public static Dictionary`2<Type, HashSet`1<FabricErrorCode>> ExpectedExceptionTypeMap;
    public static string ChaosScheduler_DefaultParameterKey;
    public static int SchedulerCycleWaitIntervalMilliseconds;
    public static int SchedulerLockWaitMilliseconds;
    public static DateTime FileTimeMinDateTime;
    [DecimalConstantAttribute("1", "0", "0", "0", "62")]
public static decimal ApiVersion62;
    [DecimalConstantAttribute("1", "0", "0", "0", "62")]
public static decimal ApiVersionCurrent;
    public static string DateTimeFormat_ISO8601;
    private static ChaosConstants();
}
[ExtensionAttribute]
internal static class System.Fabric.Chaos.Common.ChaosUtility : object {
    public static string TraceType;
    public static string IEnumerableInterfaceName;
    public static char ListElementSeparator;
    public static char NamespaceSeparator;
    [CompilerGeneratedAttribute]
private static bool <EngineAssertEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ForcedEngineAssertEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ForcedMoveOfReplicaEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DisableOptimizationForValidationFailedEvent>k__BackingField;
    public static Dictionary`2<Type, int> ChaosEventTypeToIntMap;
    public static bool EngineAssertEnabled { get; public set; }
    public static bool ForcedEngineAssertEnabled { get; public set; }
    public static bool ForcedMoveOfReplicaEnabled { get; public set; }
    public static bool DisableOptimizationForValidationFailedEvent { get; public set; }
    private static ChaosUtility();
    [CompilerGeneratedAttribute]
public static bool get_EngineAssertEnabled();
    [CompilerGeneratedAttribute]
public static void set_EngineAssertEnabled(bool value);
    [CompilerGeneratedAttribute]
public static bool get_ForcedEngineAssertEnabled();
    [CompilerGeneratedAttribute]
public static void set_ForcedEngineAssertEnabled(bool value);
    [CompilerGeneratedAttribute]
public static bool get_ForcedMoveOfReplicaEnabled();
    [CompilerGeneratedAttribute]
public static void set_ForcedMoveOfReplicaEnabled(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DisableOptimizationForValidationFailedEvent();
    [CompilerGeneratedAttribute]
public static void set_DisableOptimizationForValidationFailedEvent(bool value);
    public static FABRIC_CHAOS_EVENT_KIND GetNativeEventType(ChaosEvent e);
    public static ChaosEvent FromNativeEvent(FABRIC_CHAOS_EVENT nativeEvent);
    public static string MakeLengthNotMultipleOfFour(string reason);
    public static string MakeLengthNotMultipleOfFourIgnoreReasonLength(string reason);
    public static string Compress(string text);
    public static string Decompress(string compressedText);
    public static void ThrowOrAssertIfTrue(string id, bool condition, string message, ClusterStateSnapshot snapshot);
    [ExtensionAttribute]
public static void SetPublicProperty(object destinationObject, PropertyInfo destinationProperty, object src);
    [ExtensionAttribute]
public static object GetValueOfPublicProperty(object src, string propertyName);
    public static void VisitObject(object obj, string name, string value, ObjectVisitMode mode);
    public static NativeFILETIME ToNativeFILETIMENormalTimeStamp(DateTime dateTime);
    private static void Helper(object obj, string name, string value, ObjectVisitMode mode, HashSet`1<string> visited);
    private static bool MatchSuffix(string haystack, string needle);
    private static IList GetList(Type T, string value, char separator);
    private static IList CreateList(Type type);
}
[DataContractAttribute]
internal abstract class System.Fabric.Chaos.Common.CoordinatorStateData : object {
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobBlockingPolicy>k__BackingField;
    [DataMemberAttribute]
public string Mode { get; public set; }
    [DataMemberAttribute]
public string JobBlockingPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public string get_JobBlockingPolicy();
    [CompilerGeneratedAttribute]
public void set_JobBlockingPolicy(string value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.CoordinatorStateDataParallel : CoordinatorStateData {
    [CompilerGeneratedAttribute]
private JobSummary[] <Jobs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobDocumentIncarnation>k__BackingField;
    [DataMemberAttribute]
public JobSummary[] Jobs { get; public set; }
    [DataMemberAttribute]
public string JobDocumentIncarnation { get; public set; }
    [CompilerGeneratedAttribute]
public JobSummary[] get_Jobs();
    [CompilerGeneratedAttribute]
public void set_Jobs(JobSummary[] value);
    [CompilerGeneratedAttribute]
public string get_JobDocumentIncarnation();
    [CompilerGeneratedAttribute]
public void set_JobDocumentIncarnation(string value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.CoordinatorStateDataSerial : CoordinatorStateData {
    [CompilerGeneratedAttribute]
private string <InfrastructureTaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastKnownJobState>k__BackingField;
    [CompilerGeneratedAttribute]
private InfrastructureTaskStateData <LastKnownTask>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagementNotificationData <ManagementNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsManagementNotificationAvailable>k__BackingField;
    [DataMemberAttribute]
public string InfrastructureTaskId { get; public set; }
    [DataMemberAttribute]
public string LastKnownJobState { get; public set; }
    [DataMemberAttribute]
public InfrastructureTaskStateData LastKnownTask { get; public set; }
    [DataMemberAttribute]
public ManagementNotificationData ManagementNotification { get; public set; }
    [DataMemberAttribute]
public bool IsManagementNotificationAvailable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InfrastructureTaskId();
    [CompilerGeneratedAttribute]
public void set_InfrastructureTaskId(string value);
    [CompilerGeneratedAttribute]
public string get_LastKnownJobState();
    [CompilerGeneratedAttribute]
public void set_LastKnownJobState(string value);
    [CompilerGeneratedAttribute]
public InfrastructureTaskStateData get_LastKnownTask();
    [CompilerGeneratedAttribute]
public void set_LastKnownTask(InfrastructureTaskStateData value);
    [CompilerGeneratedAttribute]
public ManagementNotificationData get_ManagementNotification();
    [CompilerGeneratedAttribute]
public void set_ManagementNotification(ManagementNotificationData value);
    [CompilerGeneratedAttribute]
public bool get_IsManagementNotificationAvailable();
    [CompilerGeneratedAttribute]
public void set_IsManagementNotificationAvailable(bool value);
}
internal class System.Fabric.Chaos.Common.Exceptions.ChaosInconsistentClusterSnapshotException : Exception {
    public ChaosInconsistentClusterSnapshotException(string message);
    public ChaosInconsistentClusterSnapshotException(string message, Exception inner);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.ImpactedRoleInstance : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UD>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ImpactTypes>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string UD { get; public set; }
    [DataMemberAttribute]
public String[] ImpactTypes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_UD();
    [CompilerGeneratedAttribute]
public void set_UD(string value);
    [CompilerGeneratedAttribute]
public String[] get_ImpactTypes();
    [CompilerGeneratedAttribute]
public void set_ImpactTypes(String[] value);
}
internal static class System.Fabric.Chaos.Common.InfrastructureServiceMode : object {
    public static string Serial;
    public static string Parallel;
}
internal class System.Fabric.Chaos.Common.InfrastructureStatus : object {
    [CompilerGeneratedAttribute]
private CoordinatorStateData <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private JobCollectionData <Jobs>k__BackingField;
    public CoordinatorStateData CurrentState { get; public set; }
    public JobCollectionData Jobs { get; public set; }
    [CompilerGeneratedAttribute]
public CoordinatorStateData get_CurrentState();
    [CompilerGeneratedAttribute]
public void set_CurrentState(CoordinatorStateData value);
    [CompilerGeneratedAttribute]
public JobCollectionData get_Jobs();
    [CompilerGeneratedAttribute]
public void set_Jobs(JobCollectionData value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.InfrastructureTaskStateData : object {
    [CompilerGeneratedAttribute]
private long <TaskInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeTaskDescriptionData[] <TaskDescription>k__BackingField;
    [DataMemberAttribute]
public long TaskInstanceId { get; public set; }
    [DataMemberAttribute]
public NodeTaskDescriptionData[] TaskDescription { get; public set; }
    [CompilerGeneratedAttribute]
public long get_TaskInstanceId();
    [CompilerGeneratedAttribute]
public void set_TaskInstanceId(long value);
    [CompilerGeneratedAttribute]
public NodeTaskDescriptionData[] get_TaskDescription();
    [CompilerGeneratedAttribute]
public void set_TaskDescription(NodeTaskDescriptionData[] value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.JobCollectionData : object {
    [CompilerGeneratedAttribute]
private JobData[] <Jobs>k__BackingField;
    [DataMemberAttribute]
public JobData[] Jobs { get; public set; }
    [CompilerGeneratedAttribute]
public JobData[] get_Jobs();
    [CompilerGeneratedAttribute]
public void set_Jobs(JobData[] value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.JobData : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailedStatus>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Status { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public string ContextId { get; public set; }
    [DataMemberAttribute]
public string DetailedStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_ContextId();
    [CompilerGeneratedAttribute]
public void set_ContextId(string value);
    [CompilerGeneratedAttribute]
public string get_DetailedStatus();
    [CompilerGeneratedAttribute]
public void set_DetailedStatus(string value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.JobStepSummary : object {
    [CompilerGeneratedAttribute]
private string <AcknowledgementStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImpactStep>k__BackingField;
    [CompilerGeneratedAttribute]
private ImpactedRoleInstance[] <CurrentlyImpactedRoleInstances>k__BackingField;
    [DataMemberAttribute]
public string AcknowledgementStatus { get; public set; }
    [DataMemberAttribute]
public string ActionStatus { get; public set; }
    [DataMemberAttribute]
public string ImpactStep { get; public set; }
    [DataMemberAttribute]
public ImpactedRoleInstance[] CurrentlyImpactedRoleInstances { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AcknowledgementStatus();
    [CompilerGeneratedAttribute]
public void set_AcknowledgementStatus(string value);
    [CompilerGeneratedAttribute]
public string get_ActionStatus();
    [CompilerGeneratedAttribute]
public void set_ActionStatus(string value);
    [CompilerGeneratedAttribute]
public string get_ImpactStep();
    [CompilerGeneratedAttribute]
public void set_ImpactStep(string value);
    [CompilerGeneratedAttribute]
public ImpactedRoleInstance[] get_CurrentlyImpactedRoleInstances();
    [CompilerGeneratedAttribute]
public void set_CurrentlyImpactedRoleInstances(ImpactedRoleInstance[] value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.JobSummary : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImpactAction>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RoleInstancesToBeImpacted>k__BackingField;
    [CompilerGeneratedAttribute]
private JobStepSummary <JobStep>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string ContextId { get; public set; }
    [DataMemberAttribute]
public string JobStatus { get; public set; }
    [DataMemberAttribute]
public string ImpactAction { get; public set; }
    [DataMemberAttribute]
public String[] RoleInstancesToBeImpacted { get; public set; }
    [DataMemberAttribute]
public JobStepSummary JobStep { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ContextId();
    [CompilerGeneratedAttribute]
public void set_ContextId(string value);
    [CompilerGeneratedAttribute]
public string get_JobStatus();
    [CompilerGeneratedAttribute]
public void set_JobStatus(string value);
    [CompilerGeneratedAttribute]
public string get_ImpactAction();
    [CompilerGeneratedAttribute]
public void set_ImpactAction(string value);
    [CompilerGeneratedAttribute]
public String[] get_RoleInstancesToBeImpacted();
    [CompilerGeneratedAttribute]
public void set_RoleInstancesToBeImpacted(String[] value);
    [CompilerGeneratedAttribute]
public JobStepSummary get_JobStep();
    [CompilerGeneratedAttribute]
public void set_JobStep(JobStepSummary value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.ManagementNotificationData : object {
    [CompilerGeneratedAttribute]
private string <NotificationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NotificationDeadline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveJobStepId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveJobId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveJobType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActiveJobIncludesTopologyChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveJobStepTargetUD>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobStepImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Incarnation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveJobDetailedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveJobContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveJobStepStatus>k__BackingField;
    [DataMemberAttribute]
public string NotificationId { get; public set; }
    [DataMemberAttribute]
public string NotificationStatus { get; public set; }
    [DataMemberAttribute]
public string NotificationType { get; public set; }
    [DataMemberAttribute]
public DateTime NotificationDeadline { get; public set; }
    [DataMemberAttribute]
public string ActiveJobStepId { get; public set; }
    [DataMemberAttribute]
public string ActiveJobId { get; public set; }
    [DataMemberAttribute]
public string ActiveJobType { get; public set; }
    [DataMemberAttribute]
public bool ActiveJobIncludesTopologyChange { get; public set; }
    [DataMemberAttribute]
public int ActiveJobStepTargetUD { get; public set; }
    [DataMemberAttribute]
public string JobStepImpact { get; public set; }
    [DataMemberAttribute]
public ulong Incarnation { get; public set; }
    [DataMemberAttribute]
public string ActiveJobDetailedStatus { get; public set; }
    [DataMemberAttribute]
public string ActiveJobContextId { get; public set; }
    [DataMemberAttribute]
public string ActiveJobStepStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NotificationId();
    [CompilerGeneratedAttribute]
public void set_NotificationId(string value);
    [CompilerGeneratedAttribute]
public string get_NotificationStatus();
    [CompilerGeneratedAttribute]
public void set_NotificationStatus(string value);
    [CompilerGeneratedAttribute]
public string get_NotificationType();
    [CompilerGeneratedAttribute]
public void set_NotificationType(string value);
    [CompilerGeneratedAttribute]
public DateTime get_NotificationDeadline();
    [CompilerGeneratedAttribute]
public void set_NotificationDeadline(DateTime value);
    [CompilerGeneratedAttribute]
public string get_ActiveJobStepId();
    [CompilerGeneratedAttribute]
public void set_ActiveJobStepId(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveJobId();
    [CompilerGeneratedAttribute]
public void set_ActiveJobId(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveJobType();
    [CompilerGeneratedAttribute]
public void set_ActiveJobType(string value);
    [CompilerGeneratedAttribute]
public bool get_ActiveJobIncludesTopologyChange();
    [CompilerGeneratedAttribute]
public void set_ActiveJobIncludesTopologyChange(bool value);
    [CompilerGeneratedAttribute]
public int get_ActiveJobStepTargetUD();
    [CompilerGeneratedAttribute]
public void set_ActiveJobStepTargetUD(int value);
    [CompilerGeneratedAttribute]
public string get_JobStepImpact();
    [CompilerGeneratedAttribute]
public void set_JobStepImpact(string value);
    [CompilerGeneratedAttribute]
public ulong get_Incarnation();
    [CompilerGeneratedAttribute]
public void set_Incarnation(ulong value);
    [CompilerGeneratedAttribute]
public string get_ActiveJobDetailedStatus();
    [CompilerGeneratedAttribute]
public void set_ActiveJobDetailedStatus(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveJobContextId();
    [CompilerGeneratedAttribute]
public void set_ActiveJobContextId(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveJobStepStatus();
    [CompilerGeneratedAttribute]
public void set_ActiveJobStepStatus(string value);
}
[DataContractAttribute]
internal class System.Fabric.Chaos.Common.NodeTaskDescriptionData : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskType>k__BackingField;
    [DataMemberAttribute]
public string NodeName { get; public set; }
    [DataMemberAttribute]
public string TaskType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_TaskType();
    [CompilerGeneratedAttribute]
public void set_TaskType(string value);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosDescription : object {
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private ChaosStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosParameters <ChaosParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosScheduleStatus <ScheduleStatus>k__BackingField;
    [DataMemberAttribute]
public ChaosStatus Status { get; private set; }
    [DataMemberAttribute]
public ChaosParameters ChaosParameters { get; private set; }
    [DataMemberAttribute]
public ChaosScheduleStatus ScheduleStatus { get; private set; }
    public ChaosDescription(ChaosStatus chaosStatus, ChaosParameters chaosParameters, ChaosScheduleStatus chaosScheduleStatus);
    [CompilerGeneratedAttribute]
public ChaosStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ChaosStatus value);
    [CompilerGeneratedAttribute]
public ChaosParameters get_ChaosParameters();
    [CompilerGeneratedAttribute]
private void set_ChaosParameters(ChaosParameters value);
    [CompilerGeneratedAttribute]
public ChaosScheduleStatus get_ScheduleStatus();
    [CompilerGeneratedAttribute]
private void set_ScheduleStatus(ChaosScheduleStatus value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ChaosDescription FromNative(IntPtr pointer);
}
public abstract class System.Fabric.Chaos.DataStructures.ChaosEvent : ByteSerializable {
    private static string TraceType;
    [CompilerGeneratedAttribute]
private DateTime <TimeStampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [DataMemberAttribute]
public DateTime TimeStampUtc { get; internal set; }
    [DataMemberAttribute]
public string Kind { get; internal set; }
    internal ChaosEvent(string kind, DateTime timeStamp);
    [CompilerGeneratedAttribute]
public DateTime get_TimeStampUtc();
    [CompilerGeneratedAttribute]
internal void set_TimeStampUtc(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
internal void set_Kind(string value);
    public virtual Byte[] ToBytes();
    protected void WriteInheritedMembers(BinaryWriter bw);
    protected void ReadInheritedMembers(BinaryReader br);
    public abstract virtual void Write(BinaryWriter bw);
    public abstract virtual void Read(BinaryReader br);
    internal abstract virtual IntPtr ToNative(PinCollection pin);
    public virtual string ToString();
    private void WriteEventType(BinaryWriter bw);
}
internal class System.Fabric.Chaos.DataStructures.ChaosEventsDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private ChaosEventsSegmentFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientType>k__BackingField;
    public ChaosEventsSegmentFilter Filter { get; private set; }
    internal string ClientType { get; internal set; }
    public ChaosEventsDescription(ChaosEventsSegmentFilter filter, string continuationToken, long maxResults);
    [CompilerGeneratedAttribute]
public ChaosEventsSegmentFilter get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(ChaosEventsSegmentFilter value);
    [CompilerGeneratedAttribute]
internal string get_ClientType();
    [CompilerGeneratedAttribute]
internal void set_ClientType(string value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ChaosEventsDescription CreateFromNative(IntPtr nativeRaw);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosEventsSegment : object {
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private List`1<ChaosEvent> <History>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [DataMemberAttribute]
public List`1<ChaosEvent> History { get; private set; }
    [DataMemberAttribute]
public string ContinuationToken { get; private set; }
    internal ChaosEventsSegment(List`1<ChaosEvent> history, string continuationToken);
    [CompilerGeneratedAttribute]
public List`1<ChaosEvent> get_History();
    [CompilerGeneratedAttribute]
private void set_History(List`1<ChaosEvent> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
private void set_ContinuationToken(string value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    private static IntPtr ToNativeEvents(PinCollection pin, List`1<ChaosEvent> history);
    internal static ChaosEventsSegment FromNative(IntPtr pointer);
    private static List`1<ChaosEvent> FromNativeEvents(IntPtr pointer);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosEventsSegmentFilter : ByteSerializable {
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTimeUtc>k__BackingField;
    [DataMemberAttribute]
public DateTime StartTimeUtc { get; private set; }
    [DataMemberAttribute]
public DateTime EndTimeUtc { get; private set; }
    public ChaosEventsSegmentFilter(DateTime startTimeUtc, DateTime endTimeUtc);
    [CompilerGeneratedAttribute]
public DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
private void set_StartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTimeUtc();
    [CompilerGeneratedAttribute]
private void set_EndTimeUtc(DateTime value);
    public virtual string ToString();
    internal bool Match(long key);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ChaosEventsSegmentFilter FromNative(IntPtr pointer);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
internal enum System.Fabric.Chaos.DataStructures.ChaosEventType : Enum {
    public int value__;
    public static ChaosEventType Invalid;
    public static ChaosEventType Started;
    public static ChaosEventType ExecutingFaults;
    public static ChaosEventType Waiting;
    public static ChaosEventType ValidationFailed;
    public static ChaosEventType TestError;
    public static ChaosEventType Stopped;
}
public class System.Fabric.Chaos.DataStructures.ChaosParameters : ByteSerializable {
    private static string TraceType;
    private double requestTimeoutFactor;
    private bool populated;
    private Dictionary`2<string, string> contextDictionary;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitTimeBetweenIterations>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionGeneratorParameters <ActionGeneratorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxClusterStabilizationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxConcurrentFaults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMoveReplicaFaults>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitTimeBetweenFaults>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <OperationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeToRun>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterHealthPolicy <ClusterHealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosTargetFilter <ChaosTargetFilter>k__BackingField;
    [DataMemberAttribute]
public TimeSpan WaitTimeBetweenIterations { get; public set; }
    internal ActionGeneratorParameters ActionGeneratorParameters { get; internal set; }
    [DataMemberAttribute]
public TimeSpan MaxClusterStabilizationTimeout { get; public set; }
    [DataMemberAttribute]
public long MaxConcurrentFaults { get; public set; }
    [DataMemberAttribute]
public bool EnableMoveReplicaFaults { get; public set; }
    [DataMemberAttribute]
public TimeSpan WaitTimeBetweenFaults { get; public set; }
    internal TimeSpan OperationTimeout { get; internal set; }
    internal double RequestTimeoutFactor { get; }
    internal TimeSpan RequestTimeout { get; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Context { get; internal set; }
    [DataMemberAttribute]
public TimeSpan TimeToRun { get; internal set; }
    [DataMemberAttribute]
public ClusterHealthPolicy ClusterHealthPolicy { get; internal set; }
    public ChaosTargetFilter ChaosTargetFilter { get; public set; }
    public ChaosParameters(long maxConcurrentFaults, Nullable`1<TimeSpan> timeToRun);
    public ChaosParameters(TimeSpan maxClusterStabilizationTimeout, long maxConcurrentFaults, bool enableMoveReplicaFaults, Nullable`1<TimeSpan> timeToRun);
    public ChaosParameters(TimeSpan maxClusterStabilizationTimeout, long maxConcurrentFaults, bool enableMoveReplicaFaults, TimeSpan timeToRun, Dictionary`2<string, string> context);
    public ChaosParameters(TimeSpan maxClusterStabilizationTimeout, long maxConcurrentFaults, bool enableMoveReplicaFaults, TimeSpan timeToRun, Dictionary`2<string, string> context, TimeSpan waitTimeBetweenIterations, TimeSpan waitTimeBetweenFaults);
    public ChaosParameters(TimeSpan maxClusterStabilizationTimeout, long maxConcurrentFaults, bool enableMoveReplicaFaults, TimeSpan timeToRun, Dictionary`2<string, string> context, TimeSpan waitTimeBetweenIterations, TimeSpan waitTimeBetweenFaults, ClusterHealthPolicy clusterHealthPolicy);
    internal ChaosParameters(TimeSpan maxClusterStabilizationTimeout, long maxConcurrentFaults, bool enableMoveReplicaFaults, TimeSpan timeToRun, Dictionary`2<string, string> context, bool disableStartStopNodeFaults, TimeSpan waitTimeBetweenIterations, TimeSpan waitTimeBetweenFaults, ClusterHealthPolicy clusterHealthPolicy);
    internal ChaosParameters(ChaosParameters other);
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitTimeBetweenIterations();
    [CompilerGeneratedAttribute]
public void set_WaitTimeBetweenIterations(TimeSpan value);
    [CompilerGeneratedAttribute]
internal ActionGeneratorParameters get_ActionGeneratorParameters();
    [CompilerGeneratedAttribute]
internal void set_ActionGeneratorParameters(ActionGeneratorParameters value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxClusterStabilizationTimeout();
    [CompilerGeneratedAttribute]
public void set_MaxClusterStabilizationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_MaxConcurrentFaults();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentFaults(long value);
    [CompilerGeneratedAttribute]
public bool get_EnableMoveReplicaFaults();
    [CompilerGeneratedAttribute]
public void set_EnableMoveReplicaFaults(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitTimeBetweenFaults();
    [CompilerGeneratedAttribute]
public void set_WaitTimeBetweenFaults(TimeSpan value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_OperationTimeout();
    [CompilerGeneratedAttribute]
internal void set_OperationTimeout(TimeSpan value);
    internal double get_RequestTimeoutFactor();
    internal TimeSpan get_RequestTimeout();
    public Dictionary`2<string, string> get_Context();
    internal void set_Context(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeToRun();
    [CompilerGeneratedAttribute]
internal void set_TimeToRun(TimeSpan value);
    [CompilerGeneratedAttribute]
public ClusterHealthPolicy get_ClusterHealthPolicy();
    [CompilerGeneratedAttribute]
internal void set_ClusterHealthPolicy(ClusterHealthPolicy value);
    [CompilerGeneratedAttribute]
public ChaosTargetFilter get_ChaosTargetFilter();
    [CompilerGeneratedAttribute]
public void set_ChaosTargetFilter(ChaosTargetFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
    public void RehydratePropertiesNotInCtorFrom(ChaosParameters source);
    internal static ChaosParameters CreateFromNative(IntPtr nativeRaw);
    private void ReadClusterHealthPolicy(BinaryReader br, ClusterHealthPolicy policy);
    private void WriteClusterHealthPolicy(BinaryWriter bw, ClusterHealthPolicy policy);
    private void ValidateArguments(long maxConcurrentFaults, Dictionary`2<string, string> context, TimeSpan maxClusterStabilizationTimeout, TimeSpan timeToRun, TimeSpan waitTimeBetweenIterations, TimeSpan waitTimeBetweenFaults);
    private void ApplyUpdatesFromContextIfAvailable(Dictionary`2<string, string> context);
}
public class System.Fabric.Chaos.DataStructures.ChaosReport : object {
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private ChaosParameters <ChaosParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ChaosEvent> <History>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [DataMemberAttribute]
public ChaosParameters ChaosParameters { get; internal set; }
    [DataMemberAttribute]
public ChaosStatus Status { get; internal set; }
    [DataMemberAttribute]
public List`1<ChaosEvent> History { get; internal set; }
    [DataMemberAttribute]
public string ContinuationToken { get; internal set; }
    public ChaosReport(ChaosParameters chaosParameters, ChaosStatus status, List`1<ChaosEvent> history, string continuationToken);
    [CompilerGeneratedAttribute]
public ChaosParameters get_ChaosParameters();
    [CompilerGeneratedAttribute]
internal void set_ChaosParameters(ChaosParameters value);
    [CompilerGeneratedAttribute]
public ChaosStatus get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(ChaosStatus value);
    [CompilerGeneratedAttribute]
public List`1<ChaosEvent> get_History();
    [CompilerGeneratedAttribute]
internal void set_History(List`1<ChaosEvent> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
internal void set_ContinuationToken(string value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    private static IntPtr ToNativeHistory(PinCollection pin, List`1<ChaosEvent> history);
    internal static ChaosReport FromNative(IntPtr pointer);
    private static List`1<ChaosEvent> FromNativeHistory(IntPtr pointer);
}
public class System.Fabric.Chaos.DataStructures.ChaosReportFilter : ByteSerializable {
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTimeUtc>k__BackingField;
    public DateTime StartTimeUtc { get; internal set; }
    public DateTime EndTimeUtc { get; private set; }
    public ChaosReportFilter(DateTime startTimeUtc, DateTime endTimeUtc);
    [CompilerGeneratedAttribute]
public DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_StartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTimeUtc();
    [CompilerGeneratedAttribute]
private void set_EndTimeUtc(DateTime value);
    public virtual string ToString();
    internal bool Match(long key);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ChaosReportFilter FromNative(IntPtr pointer);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosSchedule : ByteSerializable {
    public static List`1<DayOfWeek> AllDaysOfWeek;
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExpiryDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ChaosParameters> <ChaosParametersDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ChaosScheduleJob> <Jobs>k__BackingField;
    [DataMemberAttribute]
public DateTime StartDate { get; private set; }
    [DataMemberAttribute]
public DateTime ExpiryDate { get; private set; }
    [DataMemberAttribute]
public Dictionary`2<string, ChaosParameters> ChaosParametersDictionary { get; private set; }
    [DataMemberAttribute]
public List`1<ChaosScheduleJob> Jobs { get; private set; }
    public ChaosSchedule(DateTime startDate, DateTime expiryDate, Dictionary`2<string, ChaosParameters> chaosParametersDictionary, List`1<ChaosScheduleJob> jobs);
    private static ChaosSchedule();
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
private void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ExpiryDate();
    [CompilerGeneratedAttribute]
private void set_ExpiryDate(DateTime value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ChaosParameters> get_ChaosParametersDictionary();
    [CompilerGeneratedAttribute]
private void set_ChaosParametersDictionary(Dictionary`2<string, ChaosParameters> value);
    [CompilerGeneratedAttribute]
public List`1<ChaosScheduleJob> get_Jobs();
    [CompilerGeneratedAttribute]
private void set_Jobs(List`1<ChaosScheduleJob> value);
    public virtual string ToString();
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
    internal static ChaosSchedule FromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
    private static IntPtr ToNativeParametersMap(PinCollection pinCollection, Dictionary`2<string, ChaosParameters> parametersDictionary);
    private static IntPtr ToNativeJobsList(PinCollection pinCollection, List`1<ChaosScheduleJob> jobs);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosScheduleDescription : ByteSerializable {
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosSchedule <Schedule>k__BackingField;
    [DataMemberAttribute]
public int Version { get; private set; }
    [DataMemberAttribute]
internal ChaosSchedule Schedule { get; private set; }
    public ChaosScheduleDescription(int version, ChaosSchedule schedule);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    [CompilerGeneratedAttribute]
internal ChaosSchedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(ChaosSchedule value);
    internal void IncrementVersion();
    public virtual void Write(BinaryWriter bw);
    public virtual void Read(BinaryReader br);
    public virtual string ToString();
    internal static ChaosScheduleDescription FromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosScheduleJob : ByteSerializable {
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private string <ChaosParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosScheduleJobActiveDays <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ChaosScheduleTimeRangeUtc> <Times>k__BackingField;
    [DataMemberAttribute]
public string ChaosParameters { get; private set; }
    [DataMemberAttribute]
public ChaosScheduleJobActiveDays Days { get; private set; }
    [DataMemberAttribute]
public List`1<ChaosScheduleTimeRangeUtc> Times { get; private set; }
    public ChaosScheduleJob(string chaosParameters, ChaosScheduleJobActiveDays days, List`1<ChaosScheduleTimeRangeUtc> times);
    [CompilerGeneratedAttribute]
public string get_ChaosParameters();
    [CompilerGeneratedAttribute]
private void set_ChaosParameters(string value);
    [CompilerGeneratedAttribute]
public ChaosScheduleJobActiveDays get_Days();
    [CompilerGeneratedAttribute]
private void set_Days(ChaosScheduleJobActiveDays value);
    [CompilerGeneratedAttribute]
public List`1<ChaosScheduleTimeRangeUtc> get_Times();
    [CompilerGeneratedAttribute]
private void set_Times(List`1<ChaosScheduleTimeRangeUtc> value);
    public virtual string ToString();
    internal string ToStringIndented(int indentLevel);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
    internal static ChaosScheduleJob FromNative(FABRIC_CHAOS_SCHEDULE_JOB* pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosScheduleJobActiveDays : ByteSerializable {
    private static string TraceComponent;
    private Dictionary`2<DayOfWeek, bool> activeDays;
    [DataMemberAttribute]
public bool Sunday { get; private set; }
    [DataMemberAttribute]
public bool Monday { get; private set; }
    [DataMemberAttribute]
public bool Tuesday { get; private set; }
    [DataMemberAttribute]
public bool Wednesday { get; private set; }
    [DataMemberAttribute]
public bool Thursday { get; private set; }
    [DataMemberAttribute]
public bool Friday { get; private set; }
    [DataMemberAttribute]
public bool Saturday { get; private set; }
    public ChaosScheduleJobActiveDays(HashSet`1<DayOfWeek> activeDaysSet);
    public ChaosScheduleJobActiveDays(ChaosScheduleJobActiveDays other);
    public bool get_Sunday();
    private void set_Sunday(bool value);
    public bool get_Monday();
    private void set_Monday(bool value);
    public bool get_Tuesday();
    private void set_Tuesday(bool value);
    public bool get_Wednesday();
    private void set_Wednesday(bool value);
    public bool get_Thursday();
    private void set_Thursday(bool value);
    public bool get_Friday();
    private void set_Friday(bool value);
    public bool get_Saturday();
    private void set_Saturday(bool value);
    public bool GetDayValueByEnum(DayOfWeek day);
    public bool NoActiveDays();
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
    public virtual string ToString();
    internal static ChaosScheduleJobActiveDays FromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Chaos.DataStructures.ChaosScheduleStatus : Enum {
    public int value__;
    public static ChaosScheduleStatus Invalid;
    public static ChaosScheduleStatus Active;
    public static ChaosScheduleStatus Expired;
    public static ChaosScheduleStatus Pending;
    public static ChaosScheduleStatus Stopped;
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosScheduleTimeRangeUtc : ByteSerializable {
    public static ChaosScheduleTimeRangeUtc WholeDay;
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private ChaosScheduleTimeUtc <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosScheduleTimeUtc <EndTime>k__BackingField;
    [DataMemberAttribute]
public ChaosScheduleTimeUtc StartTime { get; private set; }
    [DataMemberAttribute]
public ChaosScheduleTimeUtc EndTime { get; private set; }
    internal ChaosScheduleTimeRangeUtc(ChaosScheduleTimeRangeUtc other);
    public ChaosScheduleTimeRangeUtc(ChaosScheduleTimeUtc startTime, ChaosScheduleTimeUtc endTime);
    private static ChaosScheduleTimeRangeUtc();
    [CompilerGeneratedAttribute]
public ChaosScheduleTimeUtc get_StartTime();
    [CompilerGeneratedAttribute]
private void set_StartTime(ChaosScheduleTimeUtc value);
    [CompilerGeneratedAttribute]
public ChaosScheduleTimeUtc get_EndTime();
    [CompilerGeneratedAttribute]
private void set_EndTime(ChaosScheduleTimeUtc value);
    public virtual string ToString();
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
    internal static ChaosScheduleTimeRangeUtc FromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static IntPtr ToNativeList(PinCollection pinCollection, List`1<ChaosScheduleTimeRangeUtc> times);
}
[DataContractAttribute]
public class System.Fabric.Chaos.DataStructures.ChaosScheduleTimeUtc : ByteSerializable {
    public static ChaosScheduleTimeUtc StartOfDay;
    public static ChaosScheduleTimeUtc EndOfDay;
    private static string TraceComponent;
    [CompilerGeneratedAttribute]
private int <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minute>k__BackingField;
    [DataMemberAttribute]
public int Hour { get; private set; }
    [DataMemberAttribute]
public int Minute { get; private set; }
    public ChaosScheduleTimeUtc(int hour, int minute);
    public ChaosScheduleTimeUtc(ChaosScheduleTimeUtc other);
    private static ChaosScheduleTimeUtc();
    [CompilerGeneratedAttribute]
public int get_Hour();
    [CompilerGeneratedAttribute]
private void set_Hour(int value);
    [CompilerGeneratedAttribute]
public int get_Minute();
    [CompilerGeneratedAttribute]
private void set_Minute(int value);
    public static bool op_GreaterThan(ChaosScheduleTimeUtc operand1, ChaosScheduleTimeUtc operand2);
    public static bool op_LessThan(ChaosScheduleTimeUtc operand1, ChaosScheduleTimeUtc operand2);
    public static bool op_GreaterThanOrEqual(ChaosScheduleTimeUtc operand1, ChaosScheduleTimeUtc operand2);
    public static bool op_LessThanOrEqual(ChaosScheduleTimeUtc operand1, ChaosScheduleTimeUtc operand2);
    public static bool op_Equality(ChaosScheduleTimeUtc operand1, ChaosScheduleTimeUtc operand2);
    public static bool op_Inequality(ChaosScheduleTimeUtc operand1, ChaosScheduleTimeUtc operand2);
    public sealed virtual int CompareTo(ChaosScheduleTimeUtc other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ChaosScheduleTimeUtc other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual void Write(BinaryWriter bw);
    public virtual void Read(BinaryReader br);
    internal static ChaosScheduleTimeUtc FromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Chaos.DataStructures.ChaosStatus : Enum {
    public int value__;
    public static ChaosStatus None;
    public static ChaosStatus Running;
    public static ChaosStatus Stopped;
}
public class System.Fabric.Chaos.DataStructures.ChaosTargetFilter : ByteSerializable {
    private static string EntitySeparator;
    [CompilerGeneratedAttribute]
private IList`1<string> <NodeTypeInclusionList>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ApplicationInclusionList>k__BackingField;
    public IList`1<string> NodeTypeInclusionList { get; public set; }
    public IList`1<string> ApplicationInclusionList { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_NodeTypeInclusionList();
    [CompilerGeneratedAttribute]
public void set_NodeTypeInclusionList(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ApplicationInclusionList();
    [CompilerGeneratedAttribute]
public void set_ApplicationInclusionList(IList`1<string> value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ChaosTargetFilter FromNative(IntPtr pointer);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
public class System.Fabric.Chaos.DataStructures.ExecutingFaultsEvent : ChaosEvent {
    private static string TraceType;
    private List`1<string> faultList;
    [DataMemberAttribute]
public List`1<string> Faults { get; internal set; }
    public ExecutingFaultsEvent(DateTime timeStampUtc, List`1<string> faults);
    public List`1<string> get_Faults();
    internal void set_Faults(List`1<string> value);
    public virtual string ToString();
    internal static ExecutingFaultsEvent FromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pinCollection);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
public class System.Fabric.Chaos.DataStructures.StartedEvent : ChaosEvent {
    private static string TraceType;
    [CompilerGeneratedAttribute]
private ChaosParameters <ChaosParameters>k__BackingField;
    [DataMemberAttribute]
public ChaosParameters ChaosParameters { get; internal set; }
    public StartedEvent(DateTime timeStamp, ChaosParameters chaosParameters);
    [CompilerGeneratedAttribute]
public ChaosParameters get_ChaosParameters();
    [CompilerGeneratedAttribute]
internal void set_ChaosParameters(ChaosParameters value);
    public virtual string ToString();
    internal static StartedEvent FromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pinCollection);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
public class System.Fabric.Chaos.DataStructures.StoppedEvent : ChaosEvent {
    private static string TraceType;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [DataMemberAttribute]
public string Reason { get; internal set; }
    internal StoppedEvent(DateTime timeStamp, string reason);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
internal void set_Reason(string value);
    public virtual string ToString();
    internal static StoppedEvent FromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pinCollection);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
public class System.Fabric.Chaos.DataStructures.TestErrorEvent : ChaosEvent {
    private static string TraceType;
    private string reason;
    [DataMemberAttribute]
public string Reason { get; internal set; }
    internal TestErrorEvent(DateTime timeStampUtc, string reason);
    public string get_Reason();
    internal void set_Reason(string value);
    public virtual string ToString();
    internal static TestErrorEvent FromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pinCollection);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
public class System.Fabric.Chaos.DataStructures.ValidationFailedEvent : ChaosEvent {
    private static string TraceType;
    private string reason;
    [DataMemberAttribute]
public string Reason { get; private set; }
    internal ValidationFailedEvent(DateTime timeStampUtc, string reason);
    public string get_Reason();
    private void set_Reason(string value);
    public virtual string ToString();
    internal static ValidationFailedEvent FromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pinCollection);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
public class System.Fabric.Chaos.DataStructures.WaitingEvent : ChaosEvent {
    private static string TraceType;
    private string reason;
    [DataMemberAttribute]
public string Reason { get; internal set; }
    internal WaitingEvent(DateTime timeStamp, string reason);
    public string get_Reason();
    internal void set_Reason(string value);
    public virtual string ToString();
    internal static WaitingEvent FromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pinCollection);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
}
internal abstract class System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorBase : object {
    internal ExtensionsEvents Log;
    protected internal RandomExtensions RandomExt;
    protected Random Random;
    private List`1<StateTransitionAction> actionsQueue;
    [CompilerGeneratedAttribute]
private string <TraceType>k__BackingField;
    protected string TraceType { get; protected set; }
    protected internal ActionGeneratorBase(Random random);
    [CompilerGeneratedAttribute]
protected virtual string get_TraceType();
    [CompilerGeneratedAttribute]
protected virtual void set_TraceType(string value);
    public IList`1<StateTransitionAction> GetNextActions(ClusterStateSnapshot stateInfo, Guid activityId);
    internal virtual IList`1<StateTransitionAction> GetPendingActions(ClusterStateSnapshot stateInfo, Guid activityId);
    protected abstract virtual void GenerateAndEnqueueRandomActions(ClusterStateSnapshot stateInfo, Guid activityId);
    protected void EnqueueAction(StateTransitionAction action);
    protected void EnqueueActions(IList`1<StateTransitionAction> actions);
    private List`1<StateTransitionAction> DequeueActions();
}
internal class System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters : ByteSerializable {
    public static double NodeFaultActionWeightDefault;
    public static double ServiceFaultActionWeightDefault;
    public static double WorkloadActionWeightDefault;
    public static double SystemFaultActionWeightDefault;
    [CompilerGeneratedAttribute]
private long <MaxConcurrentFaults>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NodeFaultActionWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ServiceFaultActionWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WorkloadActionWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SystemFaultActionWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeFaultActionGeneratorParameters <NodeFaultActionsParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceFaultActionGeneratorParameters <ServiceFaultActionsParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkloadActionGeneratorParameters <WorkloadParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private SystemFaultActionGeneratorParameters <SystemServiceFaultParameters>k__BackingField;
    public long MaxConcurrentFaults { get; public set; }
    public double NodeFaultActionWeight { get; public set; }
    public double ServiceFaultActionWeight { get; public set; }
    public double WorkloadActionWeight { get; public set; }
    public double SystemFaultActionWeight { get; public set; }
    public NodeFaultActionGeneratorParameters NodeFaultActionsParameters { get; public set; }
    public ServiceFaultActionGeneratorParameters ServiceFaultActionsParameters { get; public set; }
    public WorkloadActionGeneratorParameters WorkloadParameters { get; public set; }
    public SystemFaultActionGeneratorParameters SystemServiceFaultParameters { get; public set; }
    [CompilerGeneratedAttribute]
public long get_MaxConcurrentFaults();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentFaults(long value);
    [CompilerGeneratedAttribute]
public double get_NodeFaultActionWeight();
    [CompilerGeneratedAttribute]
public void set_NodeFaultActionWeight(double value);
    [CompilerGeneratedAttribute]
public double get_ServiceFaultActionWeight();
    [CompilerGeneratedAttribute]
public void set_ServiceFaultActionWeight(double value);
    [CompilerGeneratedAttribute]
public double get_WorkloadActionWeight();
    [CompilerGeneratedAttribute]
public void set_WorkloadActionWeight(double value);
    [CompilerGeneratedAttribute]
public double get_SystemFaultActionWeight();
    [CompilerGeneratedAttribute]
public void set_SystemFaultActionWeight(double value);
    [CompilerGeneratedAttribute]
public NodeFaultActionGeneratorParameters get_NodeFaultActionsParameters();
    [CompilerGeneratedAttribute]
public void set_NodeFaultActionsParameters(NodeFaultActionGeneratorParameters value);
    [CompilerGeneratedAttribute]
public ServiceFaultActionGeneratorParameters get_ServiceFaultActionsParameters();
    [CompilerGeneratedAttribute]
public void set_ServiceFaultActionsParameters(ServiceFaultActionGeneratorParameters value);
    [CompilerGeneratedAttribute]
public WorkloadActionGeneratorParameters get_WorkloadParameters();
    [CompilerGeneratedAttribute]
public void set_WorkloadParameters(WorkloadActionGeneratorParameters value);
    [CompilerGeneratedAttribute]
public SystemFaultActionGeneratorParameters get_SystemServiceFaultParameters();
    [CompilerGeneratedAttribute]
public void set_SystemServiceFaultParameters(SystemFaultActionGeneratorParameters value);
    public bool ValidateParameters(String& errorMessage);
    public sealed virtual void Read(BinaryReader br);
    public sealed virtual void Write(BinaryWriter bw);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.ActionTranslator : object {
    private static string TraceType;
    private static ExtensionsEvents Log;
    private Action`1<string> reportFunction;
    public ActionTranslator(Action`1<string> reportFunction);
    private static ActionTranslator();
    public IDictionary`2<FabricTestAction, StateTransitionAction> GetCommandsMap(IList`1<StateTransitionAction> ragActions);
    public FabricTestAction GetCommandForActions(StateTransitionAction ragAction);
    private FabricTestAction GetStartNodeAction(NodeStateTransitionAction ragAction);
    private FabricTestAction GetStopNodeAction(NodeStateTransitionAction ragAction);
    private FabricTestAction GetRestartNodeAction(NodeStateTransitionAction ragAction);
    private FabricTestAction GetRemoveReplicaAction(ReplicaStateTransitionAction ragAction);
    private FabricTestAction GetRestartReplicaAction(ReplicaStateTransitionAction ragAction);
    private FabricTestAction GetRestartCodePackageAction(RestartCodePackageStateTransitionAction ragAction);
    private FabricTestAction GetMovePrimaryReplicaAction(MovePrimaryReplicaStateTransitionAction ragAction);
    private FabricTestAction GetMoveSecondaryReplicaAction(MoveSecondaryReplicaStateTransitionAction ragAction);
    private FabricTestAction GetMoveInstanceAction(MoveInstanceStateTransitionAction ragAction);
    private FabricTestAction GetMoveAuxiliaryReplicaAction(MoveAuxiliaryReplicaStateTransitionAction ragAction);
}
internal class System.Fabric.Chaos.RandomActionGenerator.ApplicationEntity : object {
    private static string TraceType;
    [CompilerGeneratedAttribute]
private ClusterStateSnapshot <ClusterSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private Application <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ServiceEntity> <ServiceList>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CodePackageEntity> <CodePackages>k__BackingField;
    public ClusterStateSnapshot ClusterSnapshot { get; internal set; }
    public Application Application { get; internal set; }
    public IList`1<ServiceEntity> ServiceList { get; private set; }
    public IList`1<CodePackageEntity> CodePackages { get; private set; }
    public ApplicationEntity(Application application, ClusterStateSnapshot clusterSnapshot);
    [CompilerGeneratedAttribute]
public ClusterStateSnapshot get_ClusterSnapshot();
    [CompilerGeneratedAttribute]
internal void set_ClusterSnapshot(ClusterStateSnapshot value);
    [CompilerGeneratedAttribute]
public Application get_Application();
    [CompilerGeneratedAttribute]
internal void set_Application(Application value);
    [CompilerGeneratedAttribute]
public IList`1<ServiceEntity> get_ServiceList();
    [CompilerGeneratedAttribute]
private void set_ServiceList(IList`1<ServiceEntity> value);
    [CompilerGeneratedAttribute]
public IList`1<CodePackageEntity> get_CodePackages();
    [CompilerGeneratedAttribute]
private void set_CodePackages(IList`1<CodePackageEntity> value);
    public ServiceEntity AddService(Service service);
    public CodePackageEntity AddCodePackage(DeployedCodePackage codePackage, string nodeName, DeployedServicePackageHealth health);
    public CodePackageEntity GetCodePackagEntityForReplica(ReplicaEntity replicaEntity);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Fabric.Chaos.RandomActionGenerator.ApplicationEntityList : object {
    private IList`1<ApplicationEntity> list;
    private ClusterStateSnapshot clusterStateSnapshot;
    public ApplicationEntity Item { get; }
    public int Count { get; }
    public ApplicationEntityList(ClusterStateSnapshot clusterStateSnapshot);
    public ApplicationEntity AddApplication(Application application);
    public ApplicationEntity get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<ApplicationEntity> GetEnumerator();
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
internal enum System.Fabric.Chaos.RandomActionGenerator.ClusterEntityFlags : Enum {
    public int value__;
    public static ClusterEntityFlags None;
    public static ClusterEntityFlags Faulted;
    public static ClusterEntityFlags Unavailable;
    public static ClusterEntityFlags Unsafe;
    public static ClusterEntityFlags Excluded;
}
internal class System.Fabric.Chaos.RandomActionGenerator.ClusterStateSnapshot : object {
    private static string TraceType;
    private static string Preamble;
    private static string Postamble;
    private static int TraceEventSizeLimit;
    [CompilerGeneratedAttribute]
private Guid <ClusterSnapshotId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeModeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkloadList <WorkloadList>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeEntityList <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationEntityList <Applications>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldFaultSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SnapshotTraceEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ChaosTargetFilterPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, NodeId> <NodeNameToNodeIdMap>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<NodeId, string> <NodeIdToNodeNameMap>k__BackingField;
    public Guid ClusterSnapshotId { get; private set; }
    public bool UnsafeModeEnabled { get; private set; }
    public WorkloadList WorkloadList { get; public set; }
    public NodeEntityList Nodes { get; private set; }
    public ApplicationEntityList Applications { get; private set; }
    internal bool ShouldFaultSystem { get; private set; }
    internal bool SnapshotTraceEnabled { get; internal set; }
    internal bool ChaosTargetFilterPresent { get; internal set; }
    internal static Dictionary`2<string, NodeId> NodeNameToNodeIdMap { get; internal set; }
    internal static Dictionary`2<NodeId, string> NodeIdToNodeNameMap { get; internal set; }
    public ClusterStateSnapshot(bool unsafeModeEnabled, bool shouldFaultSystem);
    [CompilerGeneratedAttribute]
public Guid get_ClusterSnapshotId();
    [CompilerGeneratedAttribute]
private void set_ClusterSnapshotId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_UnsafeModeEnabled();
    [CompilerGeneratedAttribute]
private void set_UnsafeModeEnabled(bool value);
    [CompilerGeneratedAttribute]
public WorkloadList get_WorkloadList();
    [CompilerGeneratedAttribute]
public void set_WorkloadList(WorkloadList value);
    [CompilerGeneratedAttribute]
public NodeEntityList get_Nodes();
    [CompilerGeneratedAttribute]
private void set_Nodes(NodeEntityList value);
    [CompilerGeneratedAttribute]
public ApplicationEntityList get_Applications();
    [CompilerGeneratedAttribute]
private void set_Applications(ApplicationEntityList value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldFaultSystem();
    [CompilerGeneratedAttribute]
private void set_ShouldFaultSystem(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SnapshotTraceEnabled();
    [CompilerGeneratedAttribute]
internal void set_SnapshotTraceEnabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ChaosTargetFilterPresent();
    [CompilerGeneratedAttribute]
internal void set_ChaosTargetFilterPresent(bool value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, NodeId> get_NodeNameToNodeIdMap();
    [CompilerGeneratedAttribute]
internal static void set_NodeNameToNodeIdMap(Dictionary`2<string, NodeId> value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<NodeId, string> get_NodeIdToNodeNameMap();
    [CompilerGeneratedAttribute]
internal static void set_NodeIdToNodeNameMap(Dictionary`2<NodeId, string> value);
    public void MarkAllUnsafeEntities();
    private void MarkPartitionAsUnsafe(PartitionEntity partitionEntity);
    public IEnumerable`1<CodePackageEntity> GetAllCodePackages();
    public IEnumerable`1<NodeEntity> GetFaultableNodes();
    public IEnumerable`1<CodePackageEntity> GetFaultableCodePackages();
    public IEnumerable`1<ReplicaEntity> GetFaultableReplicas(Nullable`1<bool> isStateful, Nullable`1<bool> hasPersistedState);
    public virtual string ToString();
    public void WriteToTrace(string traceType, int chunkSize, string customPreamble, string customPostamble, Guid activityId);
    private IEnumerable`1<PartitionEntity> GetFaultablePartitions(Nullable`1<bool> isStateful, Nullable`1<bool> hasPersistedState);
    private IEnumerable`1<PartitionEntity> GetAllPartitions(Nullable`1<bool> isStateful, Nullable`1<bool> hasPersistedState, bool excludeSystemServices);
    private IEnumerable`1<ServiceEntity> GetAllServices();
    internal void PopulateNodeMaps(IEnumerable`1<NodeInfo> nodes);
    internal void ApplyChaosTargetFilter(ChaosTargetFilter chaosTargetFilter);
    private void ApplyChaosTargetInclusionFilters(ChaosTargetFilter chaosTargetFilter);
    private void ApplyNodeTypeInclusionFilter(IList`1<string> nodetypeInclusionList);
    private void ApplyApplicationInclusionFilter(IList`1<string> applicationInclusionList);
    internal static bool IsSystemApplication(ApplicationEntity app);
    internal static bool IsSystemServiceReplica(DeployedServiceReplica replica);
    internal static bool IsDummyCodePackage(CodePackageEntity cp);
    internal static bool MatchNodesByNameOrId(string nodeName1, string nodeName2);
    [CompilerGeneratedAttribute]
private bool <GetAllCodePackages>b__47_0(ApplicationEntity app);
    [CompilerGeneratedAttribute]
private bool <GetFaultableNodes>b__48_0(NodeEntity n);
}
internal class System.Fabric.Chaos.RandomActionGenerator.CodePackageEntity : object {
    private static string TraceType;
    private static long InvalidReplicaId;
    private DeployedServicePackageHealth health;
    [CompilerGeneratedAttribute]
private ApplicationEntity <ParentApplicationEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedCodePackage <CodePackageResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterEntityFlags <CodePackageFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PartitionEntity> <DeployedPartitions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DeployedReplicaId>k__BackingField;
    public ApplicationEntity ParentApplicationEntity { get; private set; }
    public DeployedCodePackage CodePackageResult { get; private set; }
    public DeployedServicePackageHealth Health { get; }
    public string NodeName { get; private set; }
    public bool IsAvailableToFault { get; }
    public bool IsUnsafeToFault { get; }
    public ClusterEntityFlags CodePackageFlags { get; private set; }
    public IList`1<PartitionEntity> DeployedPartitions { get; private set; }
    public long DeployedReplicaId { get; public set; }
    public CodePackageEntity(DeployedCodePackage codePackageResult, string nodeName, ApplicationEntity applicationEntity, DeployedServicePackageHealth health);
    [CompilerGeneratedAttribute]
public ApplicationEntity get_ParentApplicationEntity();
    [CompilerGeneratedAttribute]
private void set_ParentApplicationEntity(ApplicationEntity value);
    [CompilerGeneratedAttribute]
public DeployedCodePackage get_CodePackageResult();
    [CompilerGeneratedAttribute]
private void set_CodePackageResult(DeployedCodePackage value);
    public DeployedServicePackageHealth get_Health();
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    public bool get_IsAvailableToFault();
    public bool get_IsUnsafeToFault();
    [CompilerGeneratedAttribute]
public ClusterEntityFlags get_CodePackageFlags();
    [CompilerGeneratedAttribute]
private void set_CodePackageFlags(ClusterEntityFlags value);
    [CompilerGeneratedAttribute]
public IList`1<PartitionEntity> get_DeployedPartitions();
    [CompilerGeneratedAttribute]
private void set_DeployedPartitions(IList`1<PartitionEntity> value);
    [CompilerGeneratedAttribute]
public long get_DeployedReplicaId();
    [CompilerGeneratedAttribute]
public void set_DeployedReplicaId(long value);
    public void MarkCodePackageAsUnsafeToFault();
    public void MarkCodePackageAsUnavailableForFaults();
    public void MarkCodePackageAsExcludedFromFaults();
    public bool IsExcludedForFaults();
    public void ClearCodePackageOfExclusionFlags();
    public void FaultCodePackage(Guid activityId);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <FaultCodePackage>b__39_0(NodeEntity n);
}
internal class System.Fabric.Chaos.RandomActionGenerator.GetClusterStateSnapshotAction : FabricTestAction`1<ClusterStateSnapshot> {
    private static string TraceType;
    private static string ExceptionDelimeter;
    private static string Tab;
    private static string ReplicaViewFormat;
    private static string ReplicaViewPrintFormat;
    private static Random UniformRandomNumberGenerator;
    [CompilerGeneratedAttribute]
private double <TelemetrySamplingProbability>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldFaultSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumNumberOfRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private ChaosTargetFilter <ChaosTargetFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <ServiceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <PartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <ReplicaCount>k__BackingField;
    internal double TelemetrySamplingProbability { get; internal set; }
    internal bool ShouldFaultSystem { get; internal set; }
    internal int MaximumNumberOfRetries { get; internal set; }
    internal ChaosTargetFilter ChaosTargetFilter { get; internal set; }
    internal Type ActionHandlerType { get; }
    internal static int ServiceCount { get; internal set; }
    internal static int PartitionCount { get; internal set; }
    internal static int ReplicaCount { get; internal set; }
    internal GetClusterStateSnapshotAction(double chaosSnapshotTelemetrySamplingProbability, bool shouldFaultSystem, int maximumNumberOfRetries, ChaosTargetFilter chaosTargetFilter);
    private static GetClusterStateSnapshotAction();
    [CompilerGeneratedAttribute]
internal double get_TelemetrySamplingProbability();
    [CompilerGeneratedAttribute]
internal void set_TelemetrySamplingProbability(double value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldFaultSystem();
    [CompilerGeneratedAttribute]
internal void set_ShouldFaultSystem(bool value);
    [CompilerGeneratedAttribute]
internal int get_MaximumNumberOfRetries();
    [CompilerGeneratedAttribute]
internal void set_MaximumNumberOfRetries(int value);
    [CompilerGeneratedAttribute]
internal ChaosTargetFilter get_ChaosTargetFilter();
    [CompilerGeneratedAttribute]
internal void set_ChaosTargetFilter(ChaosTargetFilter value);
    internal virtual Type get_ActionHandlerType();
    [CompilerGeneratedAttribute]
internal static int get_ServiceCount();
    [CompilerGeneratedAttribute]
internal static void set_ServiceCount(int value);
    [CompilerGeneratedAttribute]
internal static int get_PartitionCount();
    [CompilerGeneratedAttribute]
internal static void set_PartitionCount(int value);
    [CompilerGeneratedAttribute]
internal static int get_ReplicaCount();
    [CompilerGeneratedAttribute]
internal static void set_ReplicaCount(int value);
}
internal class System.Fabric.Chaos.RandomActionGenerator.IsClusterUpgradingAction : FabricTestAction`1<bool> {
    internal Type ActionHandlerType { get; }
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Chaos.RandomActionGenerator.IsInfrastructureUpgradingAction : FabricTestAction`1<bool> {
    private static string TraceType;
    internal Type ActionHandlerType { get; }
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Chaos.RandomActionGenerator.MoveAuxiliaryReplicaStateTransitionAction : MoveReplicaStateTransitionAction {
    [CompilerGeneratedAttribute]
private string <NodeFrom>k__BackingField;
    public string NodeFrom { get; public set; }
    public MoveAuxiliaryReplicaStateTransitionAction(Uri serviceUri, Guid partitionId, string nodeFrom, string nodeTo, Guid groupId);
    [CompilerGeneratedAttribute]
public string get_NodeFrom();
    [CompilerGeneratedAttribute]
public void set_NodeFrom(string value);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.MoveInstanceStateTransitionAction : MoveReplicaStateTransitionAction {
    [CompilerGeneratedAttribute]
private string <NodeFrom>k__BackingField;
    public string NodeFrom { get; public set; }
    public MoveInstanceStateTransitionAction(Uri serviceUri, Guid partitionId, string nodeFrom, string nodeTo, Guid groupId);
    [CompilerGeneratedAttribute]
public string get_NodeFrom();
    [CompilerGeneratedAttribute]
public void set_NodeFrom(string value);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.MovePrimaryReplicaStateTransitionAction : MoveReplicaStateTransitionAction {
    public MovePrimaryReplicaStateTransitionAction(Uri serviceUri, Guid partitionId, string nodeTo, Guid groupId);
}
internal abstract class System.Fabric.Chaos.RandomActionGenerator.MoveReplicaStateTransitionAction : StateTransitionAction {
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceMove>k__BackingField;
    public Uri ServiceUri { get; private set; }
    public Guid PartitionId { get; private set; }
    public string NodeTo { get; private set; }
    public bool ForceMove { get; private set; }
    protected MoveReplicaStateTransitionAction(Uri serviceUri, Guid partitionId, string nodeTo, StateTransitionActionType type, bool forceMove, Guid groupId);
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
private void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public string get_NodeTo();
    [CompilerGeneratedAttribute]
private void set_NodeTo(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceMove();
    [CompilerGeneratedAttribute]
private void set_ForceMove(bool value);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.MoveSecondaryReplicaStateTransitionAction : MoveReplicaStateTransitionAction {
    [CompilerGeneratedAttribute]
private string <NodeFrom>k__BackingField;
    public string NodeFrom { get; public set; }
    public MoveSecondaryReplicaStateTransitionAction(Uri serviceUri, Guid partitionId, string nodeFrom, string nodeTo, Guid groupId);
    [CompilerGeneratedAttribute]
public string get_NodeFrom();
    [CompilerGeneratedAttribute]
public void set_NodeFrom(string value);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.NodeEntity : object {
    private static string TraceType;
    [CompilerGeneratedAttribute]
private ClusterStateSnapshot <ClusterSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeInfo <CurrentNodeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterEntityFlags <NodeFlags>k__BackingField;
    public ClusterStateSnapshot ClusterSnapshot { get; internal set; }
    public NodeInfo CurrentNodeInfo { get; private set; }
    public bool IsAvailableToFault { get; }
    public bool IsUnsafeToFault { get; }
    public ClusterEntityFlags NodeFlags { get; private set; }
    public NodeEntity(NodeInfo nodeInfo, ClusterStateSnapshot clusterSnapshot);
    [CompilerGeneratedAttribute]
public ClusterStateSnapshot get_ClusterSnapshot();
    [CompilerGeneratedAttribute]
internal void set_ClusterSnapshot(ClusterStateSnapshot value);
    [CompilerGeneratedAttribute]
public NodeInfo get_CurrentNodeInfo();
    [CompilerGeneratedAttribute]
private void set_CurrentNodeInfo(NodeInfo value);
    public bool get_IsAvailableToFault();
    public bool get_IsUnsafeToFault();
    [CompilerGeneratedAttribute]
public ClusterEntityFlags get_NodeFlags();
    [CompilerGeneratedAttribute]
private void set_NodeFlags(ClusterEntityFlags value);
    public void MarkNodeAsUnsafeToFault();
    public void MarkNodeAsUnavailableForFaults();
    public void MarkNodeAsExcludedForFaults();
    public bool IsExcludedForFaults();
    public void ClearNodeOfExclusionFlags();
    public void FaultNode(Guid activityId);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Fabric.Chaos.RandomActionGenerator.NodeEntityList : object {
    private IList`1<NodeEntity> list;
    private ClusterStateSnapshot stateSnapshot;
    public NodeEntity Item { get; }
    public int Count { get; }
    public NodeEntityList(ClusterStateSnapshot stateSnapshot);
    public void AddNodes(IEnumerable`1<NodeInfo> nodeList);
    public NodeEntity get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<NodeEntity> GetEnumerator();
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal NodeEntity FindMatchingNodeEntity(string nodeName);
}
internal class System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGenerator : ActionGeneratorBase {
    private static int maxTrialPerActionGeneration;
    private NodeFaultActionGeneratorParameters testParameters;
    private WeightedDice`1<NodeFaultCategory> nodeFaultCategoryChooser;
    public NodeFaultActionGenerator(NodeFaultActionGeneratorParameters testParameters, Random random);
    protected virtual void GenerateAndEnqueueRandomActions(ClusterStateSnapshot stateInfo, Guid activityId);
    private void GenerateAndEnqueueRandomActions(IReadOnlyCollection`1<NodeEntity> nodeList, bool unsafeModeEnabled, Guid clusterSnapshotId, Guid activityId);
    private StateTransitionAction CreateNodeFaultAction(NodeFaultInformationHelper nodeStateHelper, Guid clusterSnapshotId, Guid activityId);
    private NodeStateTransitionAction CreateOneNodeFaultAction(NodeFaultInformationHelper nodeStateHelper, Guid clusterSnapshotId, Guid activityId);
}
internal class System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters : ByteSerializable {
    public static double MinLiveNodesRatioDefault;
    public static double MinLiveSeedNodesRatioDefault;
    public static double RestartNodeFaultWeightDefault;
    public static double StartStopNodeFaultWeightDefault;
    [CompilerGeneratedAttribute]
private double <MinLiveNodesRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinLiveSeedNodesRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RestartNodeFaultWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartStopNodeFaultWeight>k__BackingField;
    public double MinLiveNodesRatio { get; public set; }
    public double MinLiveSeedNodesRatio { get; public set; }
    public double RestartNodeFaultWeight { get; public set; }
    public double StartStopNodeFaultWeight { get; public set; }
    [CompilerGeneratedAttribute]
public double get_MinLiveNodesRatio();
    [CompilerGeneratedAttribute]
public void set_MinLiveNodesRatio(double value);
    [CompilerGeneratedAttribute]
public double get_MinLiveSeedNodesRatio();
    [CompilerGeneratedAttribute]
public void set_MinLiveSeedNodesRatio(double value);
    [CompilerGeneratedAttribute]
public double get_RestartNodeFaultWeight();
    [CompilerGeneratedAttribute]
public void set_RestartNodeFaultWeight(double value);
    [CompilerGeneratedAttribute]
public double get_StartStopNodeFaultWeight();
    [CompilerGeneratedAttribute]
public void set_StartStopNodeFaultWeight(double value);
    public bool ValidateParameters(String& errorMessage);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.NodeFaultInformationHelper : object {
    private static string TraceType;
    private Random random;
    private double minLiveNodesRatio;
    private double minLiveSeedNodesRatio;
    [CompilerGeneratedAttribute]
private IEnumerable`1<NodeEntity> <ClusterNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<string, bool> <LiveSeedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<string, bool> <DownSeedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<string, bool> <LiveNonSeedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<string, bool> <DownNonSeedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LiveExcludedNodesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LiveExcludedSeedNodesCount>k__BackingField;
    public IEnumerable`1<NodeEntity> ClusterNodes { get; private set; }
    public SortedList`2<string, bool> LiveSeedNodes { get; private set; }
    public SortedList`2<string, bool> DownSeedNodes { get; private set; }
    public SortedList`2<string, bool> LiveNonSeedNodes { get; private set; }
    public SortedList`2<string, bool> DownNonSeedNodes { get; private set; }
    public int ClusterNodesCount { get; }
    public int SeedNodesCount { get; }
    public int NonSeedNodesCount { get; }
    public int MinLiveNodesCount { get; }
    public int MinLiveSeedNodesCount { get; }
    public int LiveNodesCount { get; }
    public int FaultReadyLiveNodesCount { get; }
    public int DownNodesCount { get; }
    public int LiveSeedNodesCount { get; }
    public int FaultReadyLiveSeedNodesCount { get; }
    public int DownSeedNodesCount { get; }
    public int LiveNonSeedNodesCount { get; }
    public int DownNonSeedNodesCount { get; }
    public int LiveExcludedNodesCount { get; }
    public int LiveExcludedSeedNodesCount { get; }
    public bool IsRingUnHealthy { get; }
    public NodeFaultInformationHelper(IReadOnlyCollection`1<NodeEntity> clusterNodes, double minLiveNodesRatio, double minLiveSeedNodesRatio, bool unsafeModeEnabled, Random random);
    [CompilerGeneratedAttribute]
public IEnumerable`1<NodeEntity> get_ClusterNodes();
    [CompilerGeneratedAttribute]
private void set_ClusterNodes(IEnumerable`1<NodeEntity> value);
    [CompilerGeneratedAttribute]
public SortedList`2<string, bool> get_LiveSeedNodes();
    [CompilerGeneratedAttribute]
private void set_LiveSeedNodes(SortedList`2<string, bool> value);
    [CompilerGeneratedAttribute]
public SortedList`2<string, bool> get_DownSeedNodes();
    [CompilerGeneratedAttribute]
private void set_DownSeedNodes(SortedList`2<string, bool> value);
    [CompilerGeneratedAttribute]
public SortedList`2<string, bool> get_LiveNonSeedNodes();
    [CompilerGeneratedAttribute]
private void set_LiveNonSeedNodes(SortedList`2<string, bool> value);
    [CompilerGeneratedAttribute]
public SortedList`2<string, bool> get_DownNonSeedNodes();
    [CompilerGeneratedAttribute]
private void set_DownNonSeedNodes(SortedList`2<string, bool> value);
    public int get_ClusterNodesCount();
    public int get_SeedNodesCount();
    public int get_NonSeedNodesCount();
    public int get_MinLiveNodesCount();
    public int get_MinLiveSeedNodesCount();
    public int get_LiveNodesCount();
    public int get_FaultReadyLiveNodesCount();
    public int get_DownNodesCount();
    public int get_LiveSeedNodesCount();
    public int get_FaultReadyLiveSeedNodesCount();
    public int get_DownSeedNodesCount();
    public int get_LiveNonSeedNodesCount();
    public int get_DownNonSeedNodesCount();
    [CompilerGeneratedAttribute]
public int get_LiveExcludedNodesCount();
    [CompilerGeneratedAttribute]
public int get_LiveExcludedSeedNodesCount();
    public bool get_IsRingUnHealthy();
    public NodeEntity GetDownNodeToFault(Guid activityId);
    public NodeEntity GetUpNodeToFault(Guid activityId);
    private SortedList`2<string, bool> GetSortedListNodesInfo(bool isSeedNode, bool isUp);
    private KeyValuePair`2<T, X> GetRandomFrom(IEnumerable`1<KeyValuePair`2<T, X>> enumerable);
}
internal abstract class System.Fabric.Chaos.RandomActionGenerator.NodeStateTransitionAction : StateTransitionAction {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeInstanceId>k__BackingField;
    public string NodeName { get; private set; }
    public long NodeInstanceId { get; private set; }
    protected NodeStateTransitionAction(string nodeName, long nodeInstanceId, StateTransitionActionType type, Guid groupId);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public long get_NodeInstanceId();
    [CompilerGeneratedAttribute]
private void set_NodeInstanceId(long value);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.PartitionEntity : object {
    [CompilerGeneratedAttribute]
private ServiceEntity <ParentServiceEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private Partition <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStateful>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TargetReplicaSetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinReplicaSetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <AuxiliaryReplicaCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaEntity> <ReplicaList>k__BackingField;
    public ServiceEntity ParentServiceEntity { get; private set; }
    public Partition Partition { get; private set; }
    public Guid Guid { get; }
    public bool IsStateful { get; private set; }
    public long TargetReplicaSetSize { get; private set; }
    public long MinReplicaSetSize { get; private set; }
    public Nullable`1<long> AuxiliaryReplicaCount { get; private set; }
    public long MinLiveReplicaThreshold { get; }
    public IList`1<ReplicaEntity> ReplicaList { get; private set; }
    public PartitionEntity(Partition partition, ServiceEntity serviceEntity);
    [CompilerGeneratedAttribute]
public ServiceEntity get_ParentServiceEntity();
    [CompilerGeneratedAttribute]
private void set_ParentServiceEntity(ServiceEntity value);
    [CompilerGeneratedAttribute]
public Partition get_Partition();
    [CompilerGeneratedAttribute]
private void set_Partition(Partition value);
    public Guid get_Guid();
    [CompilerGeneratedAttribute]
public bool get_IsStateful();
    [CompilerGeneratedAttribute]
private void set_IsStateful(bool value);
    [CompilerGeneratedAttribute]
public long get_TargetReplicaSetSize();
    [CompilerGeneratedAttribute]
private void set_TargetReplicaSetSize(long value);
    [CompilerGeneratedAttribute]
public long get_MinReplicaSetSize();
    [CompilerGeneratedAttribute]
private void set_MinReplicaSetSize(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_AuxiliaryReplicaCount();
    [CompilerGeneratedAttribute]
private void set_AuxiliaryReplicaCount(Nullable`1<long> value);
    public long get_MinLiveReplicaThreshold();
    [CompilerGeneratedAttribute]
public IList`1<ReplicaEntity> get_ReplicaList();
    [CompilerGeneratedAttribute]
private void set_ReplicaList(IList`1<ReplicaEntity> value);
    public long GetPartitionFaultTolerance();
    public IReadOnlyCollection`1<ReplicaEntity> GetFaultReadyReplicaList();
    private IReadOnlyCollection`1<ReplicaEntity> GetAvailableReplicaList();
    private IReadOnlyCollection`1<ReplicaEntity> GetSafeReplicaList();
    public ReplicaEntity AddReplica(Replica replica);
    public virtual string ToString();
    internal ReplicaEntity FindReplicaEntityGivenNodeName(string nodeName);
    internal ReplicaEntity GetReplicaEntity(long replicaId);
    private string GetReplicasAsString(IList`1<ReplicaEntity> replicaEntities);
}
internal class System.Fabric.Chaos.RandomActionGenerator.RandomExtensions : object {
    private Dictionary`2<string, UInt32> nameSuffixCounter;
    private Random random;
    public RandomExtensions(Random random);
    public UInt32 NextUint(UInt32 max);
    public UInt32 NextUint(UInt32 min, UInt32 max);
    public bool ChooseFirstSet(int size1, int size2);
    public T ChooseRandomItemOrDefault(ICollection`1<T> items);
}
internal class System.Fabric.Chaos.RandomActionGenerator.RemoveReplicaStateTransitionAction : ReplicaStateTransitionAction {
    public RemoveReplicaStateTransitionAction(Uri serviceUri, Guid partitionId, long replicaId, Guid groupId);
}
internal class System.Fabric.Chaos.RandomActionGenerator.ReplicaEntity : object {
    private static string TraceType;
    [CompilerGeneratedAttribute]
private Replica <Replica>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionEntity <ParentPartitionEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterEntityFlags <ReplicaFlags>k__BackingField;
    public Replica Replica { get; private set; }
    public PartitionEntity ParentPartitionEntity { get; private set; }
    public ClusterEntityFlags ReplicaFlags { get; private set; }
    public bool IsAvailableToFault { get; }
    public bool IsUnsafeToFault { get; }
    public ReplicaEntity(Replica replica, PartitionEntity partitionEntity);
    [CompilerGeneratedAttribute]
public Replica get_Replica();
    [CompilerGeneratedAttribute]
private void set_Replica(Replica value);
    [CompilerGeneratedAttribute]
public PartitionEntity get_ParentPartitionEntity();
    [CompilerGeneratedAttribute]
private void set_ParentPartitionEntity(PartitionEntity value);
    [CompilerGeneratedAttribute]
public ClusterEntityFlags get_ReplicaFlags();
    [CompilerGeneratedAttribute]
private void set_ReplicaFlags(ClusterEntityFlags value);
    public void MoveReplica(string nodeName, Guid activityId);
    public void MarkReplicaAsUnsafeToFault();
    public void FaultReplica(bool faultedDueToCodePackageFault, Guid activityId);
    public void MarkReplicaAsExcludedFromFault();
    public bool IsExcludedForFaults();
    public void ClearReplicaOfExclusionFlags();
    public bool get_IsAvailableToFault();
    public bool get_IsUnsafeToFault();
    public virtual string ToString();
    private void MarkReplicaAsInTransitionInternal(Guid activityId);
}
internal abstract class System.Fabric.Chaos.RandomActionGenerator.ReplicaStateTransitionAction : StateTransitionAction {
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    public Uri ServiceUri { get; private set; }
    public Guid PartitionId { get; private set; }
    public long ReplicaId { get; private set; }
    protected ReplicaStateTransitionAction(Uri serviceUri, Guid partitionId, long replicaId, StateTransitionActionType type, Guid groupId);
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
private void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
private void set_ReplicaId(long value);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.RestartCodePackageStateTransitionAction : StateTransitionAction {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    public string NodeName { get; private set; }
    public Uri ApplicationName { get; private set; }
    public string ServiceManifestName { get; private set; }
    public string ServicePackageActivationId { get; private set; }
    public string CodePackageName { get; private set; }
    public RestartCodePackageStateTransitionAction(string nodeName, Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, Guid groupId);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
private void set_CodePackageName(string value);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.RestartNodeStateTransitionAction : NodeStateTransitionAction {
    public RestartNodeStateTransitionAction(string nodeName, long nodeInstanceId, Guid groupId);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.RestartReplicaStateTransitionAction : ReplicaStateTransitionAction {
    public RestartReplicaStateTransitionAction(Uri serviceUri, Guid partitionId, long replicaId, Guid groupId);
}
internal class System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator : ActionGeneratorBase {
    private ActionGeneratorParameters testParameters;
    private WeightedDice`1<ActionCategory> actionCategoryChooser;
    private WeightedDice`1<FaultCategory> faultCategoryChooser;
    private NodeFaultActionGenerator nodeFaultActionsManager;
    private ServiceFaultActionGenerator serviceFaultActionsManager;
    private WorkloadActionGenerator workloadActionsManager;
    private SystemFaultActionGenerator systemFaultActionGenerator;
    private bool initialSetup;
    public RootActionGenerator(ActionGeneratorParameters testParameters, Random random);
    internal virtual IList`1<StateTransitionAction> GetPendingActions(ClusterStateSnapshot stateInfo, Guid activityId);
    protected virtual void GenerateAndEnqueueRandomActions(ClusterStateSnapshot stateSnapshot, Guid activityId);
    private IList`1<StateTransitionAction> GenerateRandomFaults(ClusterStateSnapshot stateSnapshot, Guid activityId);
    private IEnumerable`1<FaultCategory> GenerateFaultCategories();
    private IList`1<StateTransitionAction> GenerateActionsUsingActionsManager(ActionGeneratorBase actionManager, ClusterStateSnapshot stateSnapshot, Guid activityId);
    private void InitializeCategoryWeights();
}
internal class System.Fabric.Chaos.RandomActionGenerator.ServiceEntity : object {
    [CompilerGeneratedAttribute]
private ApplicationEntity <ParentApplicationEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private Service <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PartitionEntity> <PartitionList>k__BackingField;
    public ApplicationEntity ParentApplicationEntity { get; internal set; }
    public Service Service { get; internal set; }
    public IList`1<PartitionEntity> PartitionList { get; private set; }
    public bool IsStateful { get; }
    public bool HasPersistedState { get; }
    public ServiceEntity(Service service, ApplicationEntity applicationEntity);
    [CompilerGeneratedAttribute]
public ApplicationEntity get_ParentApplicationEntity();
    [CompilerGeneratedAttribute]
internal void set_ParentApplicationEntity(ApplicationEntity value);
    [CompilerGeneratedAttribute]
public Service get_Service();
    [CompilerGeneratedAttribute]
internal void set_Service(Service value);
    [CompilerGeneratedAttribute]
public IList`1<PartitionEntity> get_PartitionList();
    [CompilerGeneratedAttribute]
private void set_PartitionList(IList`1<PartitionEntity> value);
    public bool get_IsStateful();
    public bool get_HasPersistedState();
    public PartitionEntity AddPartition(Partition partition);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGenerator : ActionGeneratorBase {
    private int maxTrialPerActionGeneration;
    private ClusterStateSnapshot stateSnapshot;
    private ServiceFaultActionGeneratorParameters testParameters;
    private WeightedDice`1<ServiceFaultCategory> serviceFaultCategoryChooser;
    public ServiceFaultActionGenerator(ServiceFaultActionGeneratorParameters testParameters, Random random);
    protected virtual void GenerateAndEnqueueRandomActions(ClusterStateSnapshot stateSnapshot, Guid activityId);
    private void CreateAndEnqueueServiceFaultActions(Guid activityId);
    private List`1<StateTransitionAction> GenerateServiceFaultActions(Guid activityId);
    private StateTransitionAction GenerateOneRestartCodePackageAction(Guid activityId);
    private StateTransitionAction GenerateOneMovePrimaryAction(Guid activityId);
    private StateTransitionAction GenerateOneMoveSecondaryAction(Guid activityId);
    private StateTransitionAction GenerateOneMoveInstanceAction(Guid activityId);
    private StateTransitionAction GenerateOneMoveAuxiliaryAction(Guid activityId);
    private bool SelectReadyPrimary(ReplicaEntity replica);
    private bool SelectReadySecondary(ReplicaEntity replica);
    private bool SelectReadyInstance(ReplicaEntity replica);
    private bool SelectReadyAuxiliary(ReplicaEntity replica);
    private StateTransitionAction GenerateOneRemoveReplicaAction(Guid activityId);
    private StateTransitionAction GenerateOneRestartReplicaAction(Guid activityId);
}
internal class System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGeneratorParameters : ByteSerializable {
    public static double RestartReplicaFaultWeightDefault;
    public static double RemoveReplicaFaultWeightDefault;
    public static double RestartCodePackageFaultWeightDefault;
    public static double MovePrimaryFaultWeightDefault;
    public static double MoveSecondaryFaultWeightDefault;
    public static double MoveInstanceFaultWeightDefault;
    public static double MoveAuxiliaryFaultWeightDefault;
    [CompilerGeneratedAttribute]
private double <RestartReplicaFaultWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RemoveReplicaFaultWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RestartCodePackageFaultWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MovePrimaryFaultWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MoveSecondaryFaultWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MoveInstanceFaultWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MoveAuxiliaryFaultWeight>k__BackingField;
    public double RestartReplicaFaultWeight { get; public set; }
    public double RemoveReplicaFaultWeight { get; public set; }
    public double RestartCodePackageFaultWeight { get; public set; }
    public double MovePrimaryFaultWeight { get; public set; }
    public double MoveSecondaryFaultWeight { get; public set; }
    public double MoveInstanceFaultWeight { get; public set; }
    public double MoveAuxiliaryFaultWeight { get; public set; }
    [CompilerGeneratedAttribute]
public double get_RestartReplicaFaultWeight();
    [CompilerGeneratedAttribute]
public void set_RestartReplicaFaultWeight(double value);
    [CompilerGeneratedAttribute]
public double get_RemoveReplicaFaultWeight();
    [CompilerGeneratedAttribute]
public void set_RemoveReplicaFaultWeight(double value);
    [CompilerGeneratedAttribute]
public double get_RestartCodePackageFaultWeight();
    [CompilerGeneratedAttribute]
public void set_RestartCodePackageFaultWeight(double value);
    [CompilerGeneratedAttribute]
public double get_MovePrimaryFaultWeight();
    [CompilerGeneratedAttribute]
public void set_MovePrimaryFaultWeight(double value);
    [CompilerGeneratedAttribute]
public double get_MoveSecondaryFaultWeight();
    [CompilerGeneratedAttribute]
public void set_MoveSecondaryFaultWeight(double value);
    [CompilerGeneratedAttribute]
public double get_MoveInstanceFaultWeight();
    [CompilerGeneratedAttribute]
public void set_MoveInstanceFaultWeight(double value);
    [CompilerGeneratedAttribute]
public double get_MoveAuxiliaryFaultWeight();
    [CompilerGeneratedAttribute]
public void set_MoveAuxiliaryFaultWeight(double value);
    public bool ValidateParameters(String& errorMessage);
    public virtual void Read(BinaryReader br);
    public virtual void Write(BinaryWriter bw);
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.StartNodeStateTransitionAction : NodeStateTransitionAction {
    public StartNodeStateTransitionAction(string nodeName, long nodeInstanceId, Guid groupId);
}
[ExtensionAttribute]
internal static class System.Fabric.Chaos.RandomActionGenerator.StateInfoExtensionMethods : object {
    [ExtensionAttribute]
public static int GetPartitionCount(ApplicationEntityList applications, Uri serviceName);
    [ExtensionAttribute]
public static ReadOnlyCollection`1<ServiceEntity> GetAllServiceInstances(ApplicationEntityList applications);
    [ExtensionAttribute]
public static ReadOnlyCollection`1<Uri> GetAllServiceNames(ApplicationEntityList applications);
    [ExtensionAttribute]
public static Uri ServiceName(ServiceEntity svcInfo);
    [ExtensionAttribute]
public static Uri ApplicationName(ApplicationEntity appInfo);
    [ExtensionAttribute]
public static bool IsStateful(ServiceKind serviceKind);
    public static T DefaultOnNullException(Func`1<T> funcToRun);
}
internal abstract class System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction : object {
    [CompilerGeneratedAttribute]
private Guid <StateTransitionActionGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <StateTransitionActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private StateTransitionActionType <ActionType>k__BackingField;
    public Guid StateTransitionActionGroupId { get; public set; }
    public Guid StateTransitionActionId { get; public set; }
    public StateTransitionActionType ActionType { get; private set; }
    public StateTransitionAction(StateTransitionActionType actionType, Guid groupId, Guid actionId);
    [CompilerGeneratedAttribute]
public Guid get_StateTransitionActionGroupId();
    [CompilerGeneratedAttribute]
public void set_StateTransitionActionGroupId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_StateTransitionActionId();
    [CompilerGeneratedAttribute]
public void set_StateTransitionActionId(Guid value);
    [CompilerGeneratedAttribute]
public StateTransitionActionType get_ActionType();
    [CompilerGeneratedAttribute]
private void set_ActionType(StateTransitionActionType value);
    public virtual string ToString();
}
internal enum System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType : Enum {
    public int value__;
    public static StateTransitionActionType FmRebuild;
    public static StateTransitionActionType NodeUp;
    public static StateTransitionActionType NodeDown;
    public static StateTransitionActionType NodeRestart;
    public static StateTransitionActionType CodePackageRestart;
    public static StateTransitionActionType StartWorkload;
    public static StateTransitionActionType StopWorkload;
    public static StateTransitionActionType RemoveReplica;
    public static StateTransitionActionType RestartReplica;
    public static StateTransitionActionType MovePrimary;
    public static StateTransitionActionType MoveSecondary;
    public static StateTransitionActionType MoveInstance;
    public static StateTransitionActionType MoveAuxiliary;
    public static StateTransitionActionType MAX;
}
internal class System.Fabric.Chaos.RandomActionGenerator.StopNodeStateTransitionAction : NodeStateTransitionAction {
    public StopNodeStateTransitionAction(string nodeName, long nodeInstanceId, Guid groupId);
}
internal class System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator : ActionGeneratorBase {
    private SystemFaultActionGeneratorParameters testParameters;
    private ClusterStateSnapshot stateSnapshot;
    private WeightedDice`1<SystemFaultCategory> systemFaultCategoryChooser;
    public SystemFaultActionGenerator(SystemFaultActionGeneratorParameters testParameters, Random random);
    protected virtual void GenerateAndEnqueueRandomActions(ClusterStateSnapshot stateInfo, Guid activityId);
    private void GenerateAndEnqueueRandomActions(Guid activityId);
    private StateTransitionAction CreateSystemFaultAction(Guid activityId);
    private SystemStateTransitionAction CreateOneSystemFaultAction(Guid activityId);
}
internal class System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters : object {
    public static double FmRebuildFaultWeightDefault;
    [CompilerGeneratedAttribute]
private double <FmRebuildFaultWeight>k__BackingField;
    public double FmRebuildFaultWeight { get; public set; }
    [CompilerGeneratedAttribute]
public double get_FmRebuildFaultWeight();
    [CompilerGeneratedAttribute]
public void set_FmRebuildFaultWeight(double value);
    public bool ValidateParameters(String& errorMessage);
}
internal class System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction : StateTransitionAction {
    private SystemStateTransitionAction(StateTransitionActionType actionType);
    public static SystemStateTransitionAction CreateFmRebuildStateTransitionAction();
    public virtual string ToString();
}
internal class System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1 : object {
    private Dictionary`2<T, double> faceToWeight;
    private SortedList`2<double, T> rangeTree;
    private double maxRange;
    private Random random;
    public WeightedDice`1(Random random);
    public T NextRoll();
    public void AddNewFace(T faceId, double weight);
    private void UpdateRangeTree();
}
internal class System.Fabric.Chaos.RandomActionGenerator.WorkloadActionGenerator : ActionGeneratorBase {
    private double workloadScriptDefaultWeight;
    private WorkloadActionGeneratorParameters testParameters;
    private WeightedDice`1<string> workloadDice;
    public WorkloadActionGenerator(WorkloadActionGeneratorParameters parameters, Random random);
    internal virtual IList`1<StateTransitionAction> GetPendingActions(ClusterStateSnapshot stateInfo, Guid activityId);
    protected virtual void GenerateAndEnqueueRandomActions(ClusterStateSnapshot stateSnapShot, Guid activityId);
    protected void GenerateAndEnqueueRandomActions(WorkloadList workloadInfo, Guid activityId);
    private IList`1<StateTransitionAction> GetPendingActions(WorkloadList workloadInfo, Guid activityId);
    private void UpdateDice(WorkloadList workloadInfo);
}
internal class System.Fabric.Chaos.RandomActionGenerator.WorkloadActionGeneratorParameters : object {
    [CompilerGeneratedAttribute]
private List`1<string> <WorkloadScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<double> <WorkloadScriptsWeights>k__BackingField;
    public List`1<string> WorkloadScripts { get; public set; }
    public List`1<double> WorkloadScriptsWeights { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_WorkloadScripts();
    [CompilerGeneratedAttribute]
public void set_WorkloadScripts(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<double> get_WorkloadScriptsWeights();
    [CompilerGeneratedAttribute]
public void set_WorkloadScriptsWeights(List`1<double> value);
    public bool ValidateParameters(String& errorMessage);
}
internal class System.Fabric.Chaos.RandomActionGenerator.WorkloadList : object {
    private IDictionary`2<string, bool> workloadScriptStatus;
    public IEnumerable`1<string> Workloads { get; }
    public WorkloadList(IEnumerable`1<string> workloadScriptBaseNames);
    public IEnumerable`1<string> get_Workloads();
    public bool GetWorkLoadState(string workloadName);
    public void FlipWorkloadState(string workloadName);
}
internal class System.Fabric.Chaos.RandomActionGenerator.WorkloadStateTransitionAction : StateTransitionAction {
    [CompilerGeneratedAttribute]
private string <WorkloadName>k__BackingField;
    public string WorkloadName { get; private set; }
    private WorkloadStateTransitionAction(string workloadName, StateTransitionActionType actionType);
    [CompilerGeneratedAttribute]
public string get_WorkloadName();
    [CompilerGeneratedAttribute]
private void set_WorkloadName(string value);
    public static WorkloadStateTransitionAction CreateStartWorkloadAction(string workloadName);
    public static WorkloadStateTransitionAction CreateStopWorkloadAction(string workloadName);
    public virtual string ToString();
}
internal class System.Fabric.ChaosReportResult : object {
    private IntPtr nativeResult;
    private PinCollection pinCollection;
    private bool disposed;
    public ChaosReportResult(ChaosReport report);
    public sealed virtual IntPtr get_ChaosReportResult();
    public sealed virtual void Dispose();
}
public class System.Fabric.CheckExistsPropertyOperation : PropertyBatchOperation {
    [CompilerGeneratedAttribute]
private bool <ExistenceCheck>k__BackingField;
    public bool ExistenceCheck { get; internal set; }
    public CheckExistsPropertyOperation(string propertyName, bool existenceCheck);
    [CompilerGeneratedAttribute]
public bool get_ExistenceCheck();
    [CompilerGeneratedAttribute]
internal void set_ExistenceCheck(bool value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public class System.Fabric.CheckSequencePropertyOperation : PropertyBatchOperation {
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    public long SequenceNumber { get; internal set; }
    public CheckSequencePropertyOperation(string propertyName, long sequenceNumber);
    [CompilerGeneratedAttribute]
public long get_SequenceNumber();
    [CompilerGeneratedAttribute]
internal void set_SequenceNumber(long value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public class System.Fabric.CheckValuePropertyOperation : PropertyBatchOperation {
    [CompilerGeneratedAttribute]
private object <PropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyTypeId <PropertyType>k__BackingField;
    public object PropertyValue { get; internal set; }
    public PropertyTypeId PropertyType { get; internal set; }
    public CheckValuePropertyOperation(string propertyName, Byte[] value);
    public CheckValuePropertyOperation(string propertyName, long value);
    public CheckValuePropertyOperation(string propertyName, Guid value);
    public CheckValuePropertyOperation(string propertyName, string value);
    public CheckValuePropertyOperation(string propertyName, double value);
    private CheckValuePropertyOperation(string propertyName, PropertyTypeId typeId, object value);
    [CompilerGeneratedAttribute]
public object get_PropertyValue();
    [CompilerGeneratedAttribute]
internal void set_PropertyValue(object value);
    [CompilerGeneratedAttribute]
public PropertyTypeId get_PropertyType();
    [CompilerGeneratedAttribute]
internal void set_PropertyType(PropertyTypeId value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public class System.Fabric.ClaimsCredentials : SecurityCredentials {
    private IList`1<string> serverCommonNames;
    private IList`1<string> serverThumbprints;
    private IList`1<string> issuerThumbprints;
    private string localClaims;
    private ProtectionLevel protectionLevel;
    public string LocalClaims { get; public set; }
    public IList`1<string> ServerCommonNames { get; private set; }
    public IList`1<string> ServerThumbprints { get; private set; }
    public IList`1<string> IssuerThumbprints { get; private set; }
    public ProtectionLevel ProtectionLevel { get; public set; }
    public string get_LocalClaims();
    public void set_LocalClaims(string value);
    public IList`1<string> get_ServerCommonNames();
    private void set_ServerCommonNames(IList`1<string> value);
    public IList`1<string> get_ServerThumbprints();
    private void set_ServerThumbprints(IList`1<string> value);
    public IList`1<string> get_IssuerThumbprints();
    private void set_IssuerThumbprints(IList`1<string> value);
    public ProtectionLevel get_ProtectionLevel();
    public void set_ProtectionLevel(ProtectionLevel value);
    internal static ClaimsCredentials CreateFromNative(FABRIC_CLAIMS_CREDENTIALS* nativeCredentials);
}
internal class System.Fabric.ClusterEndpointSecuritySettingsChangeNotifier : object {
    private static string TraceType;
    private List`1<string> FabricNodeSectionSecurityKeyNames;
    private List`1<string> SecuritySectionSecurityKeyNames;
    private List`1<string> ExtendedSecuritySectionNames;
    private string endpoint;
    private Action`1<string> updateReplicatorSettingsAction;
    private NativeConfigStore configStore;
    public ClusterEndpointSecuritySettingsChangeNotifier(string endpoint, Action`1<string> updateReplicatorSettingsAction);
    public sealed virtual bool OnUpdate(string section, string key);
    public sealed virtual bool CheckUpdate(string sectionName, string keyName, string value, bool isEncrypted);
    public sealed virtual bool IsOverrideAllowed(string sectionName, string keyName, bool force);
    private bool ContainsRelevantSecuritySetting(string section, string key);
}
public class System.Fabric.CodePackage : object {
    [CompilerGeneratedAttribute]
private CodePackageDescription <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private RunAsPolicyDescription <SetupEntryPointRunAsPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private RunAsPolicyDescription <EntryPointRunAsPolicy>k__BackingField;
    public CodePackageDescription Description { get; }
    public string Path { get; }
    public RunAsPolicyDescription SetupEntryPointRunAsPolicy { get; internal set; }
    public RunAsPolicyDescription EntryPointRunAsPolicy { get; internal set; }
    internal CodePackage(CodePackageDescription description);
    [CompilerGeneratedAttribute]
public CodePackageDescription get_Description();
    public string get_Path();
    [CompilerGeneratedAttribute]
public RunAsPolicyDescription get_SetupEntryPointRunAsPolicy();
    [CompilerGeneratedAttribute]
internal void set_SetupEntryPointRunAsPolicy(RunAsPolicyDescription value);
    [CompilerGeneratedAttribute]
public RunAsPolicyDescription get_EntryPointRunAsPolicy();
    [CompilerGeneratedAttribute]
internal void set_EntryPointRunAsPolicy(RunAsPolicyDescription value);
    internal static CodePackage CreateFromNative(IFabricCodePackage nativePackage);
}
public class System.Fabric.CodePackageActivationContext : object {
    private IFabricCodePackageActivationContext6 nativeActivationContext;
    private long codePackageChangeHandlerId;
    private long configPackageChangeHandlerId;
    private long dataPackageChangeHandlerId;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageAddedEventArgs`1<CodePackageDescription>> CodePackageAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageRemovedEventArgs`1<CodePackageDescription>> CodePackageRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageModifiedEventArgs`1<CodePackageDescription>> CodePackageModified;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackageDescription>> ConfigurationPackageAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackageDescription>> ConfigurationPackageRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackageDescription>> ConfigurationPackageModified;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageAddedEventArgs`1<DataPackageDescription>> DataPackageAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageRemovedEventArgs`1<DataPackageDescription>> DataPackageRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageModifiedEventArgs`1<DataPackageDescription>> DataPackageModified;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageAddedEventArgs`1<CodePackage>> CodePackageAddedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageRemovedEventArgs`1<CodePackage>> CodePackageRemovedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageModifiedEventArgs`1<CodePackage>> CodePackageModifiedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackage>> ConfigurationPackageAddedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackage>> ConfigurationPackageRemovedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackage>> ConfigurationPackageModifiedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageAddedEventArgs`1<DataPackage>> DataPackageAddedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageRemovedEventArgs`1<DataPackage>> DataPackageRemovedEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageModifiedEventArgs`1<DataPackage>> DataPackageModifiedEvent;
    [CompilerGeneratedAttribute]
private string <WorkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceListenAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePublishAddress>k__BackingField;
    public string WorkDirectory { get; internal set; }
    public string LogDirectory { get; internal set; }
    public string TempDirectory { get; internal set; }
    public string ContextId { get; internal set; }
    public string CodePackageName { get; internal set; }
    public string CodePackageVersion { get; internal set; }
    public string ApplicationName { get; internal set; }
    public string ApplicationTypeName { get; internal set; }
    public string ServiceListenAddress { get; internal set; }
    public string ServicePublishAddress { get; internal set; }
    internal IFabricCodePackageActivationContext NativeActivationContext { get; }
    internal CodePackageActivationContext(IFabricCodePackageActivationContext6 nativeActivationContext);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public void add_CodePackageAdded(EventHandler`1<PackageAddedEventArgs`1<CodePackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_CodePackageAdded(EventHandler`1<PackageAddedEventArgs`1<CodePackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_CodePackageRemoved(EventHandler`1<PackageRemovedEventArgs`1<CodePackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_CodePackageRemoved(EventHandler`1<PackageRemovedEventArgs`1<CodePackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_CodePackageModified(EventHandler`1<PackageModifiedEventArgs`1<CodePackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_CodePackageModified(EventHandler`1<PackageModifiedEventArgs`1<CodePackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_ConfigurationPackageAdded(EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationPackageAdded(EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_ConfigurationPackageRemoved(EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationPackageRemoved(EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_ConfigurationPackageModified(EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigurationPackageModified(EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_DataPackageAdded(EventHandler`1<PackageAddedEventArgs`1<DataPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_DataPackageAdded(EventHandler`1<PackageAddedEventArgs`1<DataPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_DataPackageRemoved(EventHandler`1<PackageRemovedEventArgs`1<DataPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_DataPackageRemoved(EventHandler`1<PackageRemovedEventArgs`1<DataPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void add_DataPackageModified(EventHandler`1<PackageModifiedEventArgs`1<DataPackageDescription>> value);
    [CompilerGeneratedAttribute]
public void remove_DataPackageModified(EventHandler`1<PackageModifiedEventArgs`1<DataPackageDescription>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CodePackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CodePackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CodePackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CodePackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CodePackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CodePackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigurationPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigurationPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigurationPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigurationPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigurationPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigurationPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkDirectory();
    [CompilerGeneratedAttribute]
internal void set_WorkDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LogDirectory();
    [CompilerGeneratedAttribute]
internal void set_LogDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TempDirectory();
    [CompilerGeneratedAttribute]
internal void set_TempDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContextId();
    [CompilerGeneratedAttribute]
internal void set_ContextId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodePackageName();
    [CompilerGeneratedAttribute]
internal void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodePackageVersion();
    [CompilerGeneratedAttribute]
internal void set_CodePackageVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServiceListenAddress();
    [CompilerGeneratedAttribute]
internal void set_ServiceListenAddress(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServicePublishAddress();
    [CompilerGeneratedAttribute]
internal void set_ServicePublishAddress(string value);
    internal IFabricCodePackageActivationContext get_NativeActivationContext();
    public sealed virtual KeyedCollection`2<string, ServiceTypeDescription> GetServiceTypes();
    public sealed virtual KeyedCollection`2<string, ServiceGroupTypeDescription> GetServiceGroupTypes();
    public sealed virtual ApplicationPrincipalsDescription GetApplicationPrincipals();
    public sealed virtual KeyedCollection`2<string, EndpointResourceDescription> GetEndpoints();
    public sealed virtual IList`1<string> GetCodePackageNames();
    public sealed virtual IList`1<string> GetConfigurationPackageNames();
    public sealed virtual IList`1<string> GetDataPackageNames();
    public sealed virtual EndpointResourceDescription GetEndpoint(string endpointName);
    public sealed virtual CodePackage GetCodePackageObject(string packageName);
    public sealed virtual ConfigurationPackage GetConfigurationPackageObject(string packageName);
    public sealed virtual DataPackage GetDataPackageObject(string packageName);
    [ObsoleteAttribute("Use GetCodePackageObject method.")]
public CodePackageDescription GetCodePackage(string packageName);
    [ObsoleteAttribute("Use GetConfigurationPackageObject method.")]
public ConfigurationPackageDescription GetConfigurationPackage(string packageName);
    [ObsoleteAttribute("Use GetDataPackageObject method.")]
public DataPackageDescription GetDataPackage(string packageName);
    public sealed virtual string GetServiceManifestName();
    public sealed virtual string GetServiceManifestVersion();
    public sealed virtual void ReportApplicationHealth(HealthInformation healthInfo);
    public sealed virtual void ReportApplicationHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public sealed virtual void ReportDeployedApplicationHealth(HealthInformation healthInfo);
    public sealed virtual void ReportDeployedApplicationHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public sealed virtual void ReportDeployedServicePackageHealth(HealthInformation healthInfo);
    public sealed virtual void ReportDeployedServicePackageHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public sealed virtual string GetDirectory(string logicalDirectoryName);
    public sealed virtual void Dispose();
    internal static CodePackageActivationContext CreateFromNative(IFabricCodePackageActivationContext6 nativeContext);
    private void ThrowIfDisposed();
    private void Dispose(bool disposing);
    private KeyedCollection`2<string, ServiceTypeDescription> GetServiceTypesHelper();
    private KeyedCollection`2<string, ServiceGroupTypeDescription> GetServiceGroupTypesHelper();
    private ApplicationPrincipalsDescription GetApplicationPrincipalsHelper();
    private KeyedCollection`2<string, EndpointResourceDescription> GetEndpointsHelper();
    private EndpointResourceDescription GetEndpointHelper(string endpointName);
    private IList`1<string> GetCodePackageNamesHelper();
    private IList`1<string> GetConfigurationPackageNamesHelper();
    private IList`1<string> GetDataPackageNamesHelper();
    private CodePackage GetCodePackageHelper(string packageName);
    private CodePackageDescription GetCodePackageDescriptionHelper(string packageName);
    private ConfigurationPackage GetConfigurationPackageHelper(string packageName);
    private ConfigurationPackageDescription GetConfigurationPackageDescriptionHelper(string packageName);
    private DataPackage GetDataPackageHelper(string packageName);
    private DataPackageDescription GetDataPackageDescriptionHelper(string packageName);
    private string GetServiceManifestNameHelper();
    private string GetServiceManifestVersionHelper();
    private void ReportApplicationHealthHelper(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private void ReportDeployedApplicationHealthHelper(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private void ReportDeployedServicePackageHealthHelper(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private string GetDirectoryHelper(string logicalDirectoryName);
    private void RaiseCodePackageAddedEvent(PackageAddedEventArgs`1<CodePackage> eventArgs);
    private void RaiseCodePackageRemovedEvent(PackageRemovedEventArgs`1<CodePackage> eventArgs);
    private void RaiseCodePackageModifiedEvent(PackageModifiedEventArgs`1<CodePackage> eventArgs);
    private void RaiseConfigurationPackageAddedEvent(PackageAddedEventArgs`1<ConfigurationPackage> eventArgs);
    private void RaiseConfigurationPackageRemovedEvent(PackageRemovedEventArgs`1<ConfigurationPackage> eventArgs);
    private void RaiseConfigurationPackageModifiedEvent(PackageModifiedEventArgs`1<ConfigurationPackage> eventArgs);
    private void RaiseDataPackageAddedEvent(PackageAddedEventArgs`1<DataPackage> eventArgs);
    private void RaiseDataPackageRemovedEvent(PackageRemovedEventArgs`1<DataPackage> eventArgs);
    private void RaiseDataPackageModifiedEvent(PackageModifiedEventArgs`1<DataPackage> eventArgs);
    [CompilerGeneratedAttribute]
private string <GetServiceManifestName>b__117_0();
    [CompilerGeneratedAttribute]
private string <GetServiceManifestVersion>b__118_0();
}
public class System.Fabric.CodePackageActivationInformation : object {
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionPolicyDescription <ExecutionPolicy>k__BackingField;
    public string CodePackageName { get; }
    public ExecutionPolicyDescription ExecutionPolicy { get; }
    public CodePackageActivationInformation(string codePackageName, ExecutionPolicyDescription executionPolicy);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
public ExecutionPolicyDescription get_ExecutionPolicy();
    internal static IntPtr ToNativeList(PinCollection pin, IList`1<CodePackageActivationInformation> cpActivationInfoList);
    internal void ToNative(PinCollection pin, FABRIC_CODE_PACKAGE_ACTIVATION_INFORMATION& nativeDesc);
}
public class System.Fabric.CodePackageActivator : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    private IFabricCodePackageActivator2 nativeActivator;
    private ulong codePackageEventHandlerId;
    private CodePackageNotificationBroker notificationBroker;
    [CompilerGeneratedAttribute]
private EventHandler`1<CodePackageEventArgs> CodePackageEvent;
    internal CodePackageActivator(IFabricCodePackageActivator2 nativeActivator);
    public Task ActivateCodePackageAsync(IList`1<string> codePackageNames, IDictionary`2<string, string> environment, TimeSpan timeout, CancellationToken cancellationToken);
    public Task ActivateCodePackageAsync(IList`1<CodePackageActivationInformation> cpActivationInfoList, IDictionary`2<string, string> environment, TimeSpan timeout, CancellationToken cancellationToken);
    public Task DeactivateCodePackageAsync(IList`1<string> codePackageNames, TimeSpan timeout, CancellationToken cancellationToken);
    public void AbortCodePackage(IList`1<string> codePackageNames);
    [CompilerGeneratedAttribute]
public void add_CodePackageEvent(EventHandler`1<CodePackageEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CodePackageEvent(EventHandler`1<CodePackageEventArgs> value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    private void Dispose(bool disposing);
    private void RaiseCodePackageEvent(CodePackageEventArgs codePackageEventArgs);
    private IFabricAsyncOperationContext ActivateCodePackageBeginWrapper(IList`1<string> codePackageNames, IDictionary`2<string, string> environment, TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private IFabricAsyncOperationContext ActivateCodePackageBeginWrapper(IList`1<CodePackageActivationInformation> cpActivationInfoList, IDictionary`2<string, string> environment, TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private void ActivateCodePackageEndWrapper(IFabricAsyncOperationContext context);
    private IFabricAsyncOperationContext DeactivateCodePackageBeginWrapper(IList`1<string> codePackageNames, TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private void DeactivateCodePackageEndWrapper(IFabricAsyncOperationContext context);
    private void AbortCodePackageHelper(IList`1<string> codePackageNames);
}
[DataContractAttribute]
public class System.Fabric.CodePackageDebugParameters : object {
    [DataMemberAttribute]
internal string ServiceManifestName;
    [DataMemberAttribute]
internal string CodePackageName;
    [DataMemberAttribute]
internal string ConfigPackageName;
    [DataMemberAttribute]
internal string DataPackageName;
    [DataMemberAttribute]
internal string EntryPointType;
    [DataMemberAttribute]
internal string DebugExePath;
    [DataMemberAttribute]
internal string DebugArguments;
    [DataMemberAttribute]
internal string CodePackageLinkFolder;
    [DataMemberAttribute]
internal string ConfigPackageLinkFolder;
    [DataMemberAttribute]
internal string DataPackageLinkFolder;
    [DataMemberAttribute]
internal string LockFile;
    [DataMemberAttribute]
internal string WorkingFolder;
    [DataMemberAttribute]
internal string DebugParametersFile;
    [DataMemberAttribute]
internal string EnvironmentBlock;
    [DataMemberAttribute]
internal ContainerDebugParameters ContainerDebugParams;
    [DataMemberAttribute]
internal bool DisableReliableCollectionReplicationMode;
    internal CodePackageDebugParameters(string serviceManifestName, string codePackageName, string configPackageName, string dataPackageName, string entryPointType, string debugExePath, string debugArguments, string codePackageLinkFolder, string configPackageLinkFolder, string dataPackageLinkFolder, string lockFile, string workingFolder, string debugParametersFile, string environmentBlock, ContainerDebugParameters containerDebugParams, bool disableReliableCollectionReplicationMode);
    internal static List`1<CodePackageDebugParameters> CreateFrom(string debugParameters);
    public static string GetDebugParameters(CodePackageDebugParameters[] debugParameters);
}
public class System.Fabric.CodePackageEventDescription : object {
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSetupEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainerHost>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePackageEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeStampInTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public string CodePackageName { get; internal set; }
    public bool IsSetupEntryPoint { get; internal set; }
    public bool IsContainerHost { get; internal set; }
    public CodePackageEventType EventType { get; internal set; }
    public long TimeStampInTicks { get; internal set; }
    public long SequenceNumber { get; internal set; }
    public IDictionary`2<string, string> Properties { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
internal void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSetupEntryPoint();
    [CompilerGeneratedAttribute]
internal void set_IsSetupEntryPoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsContainerHost();
    [CompilerGeneratedAttribute]
internal void set_IsContainerHost(bool value);
    [CompilerGeneratedAttribute]
public CodePackageEventType get_EventType();
    [CompilerGeneratedAttribute]
internal void set_EventType(CodePackageEventType value);
    [CompilerGeneratedAttribute]
public long get_TimeStampInTicks();
    [CompilerGeneratedAttribute]
internal void set_TimeStampInTicks(long value);
    [CompilerGeneratedAttribute]
public long get_SequenceNumber();
    [CompilerGeneratedAttribute]
internal void set_SequenceNumber(long value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
internal void set_Properties(IDictionary`2<string, string> value);
    internal static CodePackageEventDescription CreateFromNative(IntPtr nativePtr);
}
public enum System.Fabric.CodePackageEventType : Enum {
    public int value__;
    public static CodePackageEventType Invalid;
    public static CodePackageEventType Failed;
    public static CodePackageEventType Started;
    public static CodePackageEventType Ready;
    public static CodePackageEventType Health;
    public static CodePackageEventType Stopped;
    public static CodePackageEventType Terminated;
    public static CodePackageEventType RanToCompletion;
}
internal static class System.Fabric.Common.AccountHelper : object {
    private static int InvalidUserNameOrPasswordError;
    private static string UPNDelimiter;
    private static string DLNDelimiter;
    public static bool TryParseUserAccountName(string accountName, bool isManagedServiceAccount, String& userName, String& domainName);
    public static WindowsIdentity CreateWindowsIdentity(string userName, string domainName, SecureString password, bool isManagedServiceAccount, LogonType logonType, LogonProvider logonProvider);
    public static WindowsIdentity CreateWindowsIdentity(string userName, string domainName, string password, bool isManagedServiceAccount, LogonType logonType, LogonProvider logonProvider);
    public static WindowsIdentity CreateWindowsIdentity(string userName, string domainName, IntPtr password, bool isManagedServiceAccount, LogonType logonType, LogonProvider logonProvider);
    public static SafeAccessTokenHandle CreateSafeAccessTokenHandle(string userName, string domainName, SecureString password, bool isManagedServiceAccount, LogonType logonType, LogonProvider logonProvider);
    public static SafeAccessTokenHandle CreateSafeAccessTokenHandle(string userName, string domainName, string password, bool isManagedServiceAccount, LogonType logonType, LogonProvider logonProvider);
    public static SafeAccessTokenHandle CreateSafeAccessTokenHandle(string userName, string domainName, IntPtr password, bool isManagedServiceAccount, LogonType logonType, LogonProvider logonProvider);
    private static IntPtr CreateUserHandle(string userName, string domainName, IntPtr password, bool isManagedServiceAccount, LogonType logonType, LogonProvider logonProvider);
    public static bool IsAdminUser();
    public static string SecureStringToString(SecureString secStr);
}
internal static class System.Fabric.Common.AppTrace : object {
    private static ExtensionsEvents traceSource;
    public static ExtensionsEvents TraceSource { get; }
    private static AppTrace();
    public static ExtensionsEvents get_TraceSource();
}
internal static class System.Fabric.Common.AsyncWaiter : object {
    public static Task WaitAsync(TimeSpan duration);
    public static Task WaitAsync(TimeSpan duration, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Fabric.Common.ByteSerializationHelper : object {
    private static string TraceType;
    [ExtensionAttribute]
public static Byte[] ToBytes(TimeSpan timeSpan);
    [ExtensionAttribute]
public static void FromBytes(TimeSpan timeSpan, Byte[] data);
    [ExtensionAttribute]
public static Byte[] ToBytes(DateTime timeStamp);
    [ExtensionAttribute]
public static void FromBytes(DateTime timeStamp, Byte[] data);
    public static ChaosEvent GetEventFromBytes(Byte[] data);
    public static ChaosReportFilter GetReportFilterFromBytes(Byte[] data);
}
internal class System.Fabric.Common.CabFileCreator : object {
    private static MemAllocMethod FciAllocMemHandler;
    private static MemFreeMethod FdiFreeMemHandler;
    private static FCIOpenMethod FciOpenMethod;
    private static FCICloseMethod FciCloseMethod;
    private static FCIReadMethod FciReadMethod;
    private static FCIWriteMethod FciWriteMethod;
    private static FCIDeleteMethod FciDlDeleteMethod;
    private static FCIFilePlacedMethod FciFilePlacedMethod;
    private static FCISeekMethod FciSeekMethod;
    private static FCIGetTempFileMethod FciGetTempFileMethod;
    private static FCIGetNextCabMethod FciGetNextCabMethod;
    private static FCIStatusMethod FciStatusMethod;
    private static FCIGetOpenInfoMethod FciGetOpenInfoMethod;
    private static GCHandle CustomDataHandle;
    private CabError error;
    private CustomCabData customData;
    private bool disposed;
    private IntPtr fciContext;
    private static CabFileCreator();
    public void CreateFciContext(string cabFileName);
    public bool AddFile(string fileName);
    public bool FlushCabinet();
    private static int CabFilePlaced(CompressionInfo currentCab, string fileName, int fileSize, bool continuation, IntPtr data);
    private static IntPtr GetOpenInfo(string fileName, Int32& date, Int32& time, Int16& attributes, Int32& error, IntPtr data);
    private static int CabStatusChanged(FCIStatusType statusType, int size1, int size2, IntPtr data);
    private static bool GetNextCabinet(CompressionInfo currentCab, int previousCab, IntPtr data);
    private static bool GetTempFile(IntPtr tempFileName, int tempNameSize, IntPtr data);
    public static FileAccess FileAccessFromOpenFlag(int openFlag);
    public static FileMode FileModeFromOpenFlag(int modeFlag);
    public static FileShare FileShareFromModeFlag(int modeFlag);
    public static SeekOrigin SeekOriginFromType(int type);
    public static short AttributeFlagsFromFileAttributes(FileAttributes attributes);
    public static FileAttributes FileAttributesFromFlags(short flags);
    public static int ConvertDate(DateTime date);
    public static int ConvertTime(DateTime time);
    private static IntPtr Open(string fileName, int flag, int mode, Int32& error, IntPtr data);
    private static int Read(IntPtr fileHandle, Byte[] buffer, int count, Int32& error, IntPtr data);
    private static int Write(IntPtr fileHandle, Byte[] buffer, int count, Int32& error, IntPtr data);
    private static int Seek(IntPtr fileHandle, int distance, int seekType, Int32& error, IntPtr data);
    private static int Close(IntPtr fileHandle, Int32& error, IntPtr data);
    private static int Delete(string fileName, Int32& error, IntPtr data);
    private static IntPtr MemAlloc(int cb);
    private static void MemFree(IntPtr mem);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class System.Fabric.Common.CabFileOperations : object {
    public static string GetCabVersion(string cabPath);
    public static string GetCabVersion(string cabPath, string workingDirectory);
    public static void ExtractFiltered(string cabPath, string extractPath, String[] filters, bool inclusive);
    public static bool IsCabFile(string cabPath);
}
public class System.Fabric.Common.CertificateManager : object {
    private static string TraceType;
    private static string SubjectAlternativeNameExtensionOidStr;
    private static string SubjectAlternativeNameExtensionOidStr2;
    private static string SubjectAlternativeNameExtensionChoiceStr;
    private static CertificateManager();
    internal static void GenerateSelfSignedCertAndImportToStore(string subName, string store, StoreLocation storeLocation, string DNS, DateTime expirationDate);
    internal static void GenerateSelfSignedCertAndSaveAsPFX(string subName, string fileName, string password, string DNS, DateTime expirationDate);
    internal static void DeleteCertificateFromStore(string certName, string store, StoreLocation storeLocation, bool isExactMatch);
    internal static X509Certificate2Collection FindMatchingCertificates(FabricCertificateType certificateDeclaration, bool selectMostRecentOnlyFromMultipleMatches, bool excludeExpired, bool excludeNoPrivateKeyCert);
    private static List`1<string> ParseFindValuesFromDeclaration(FabricCertificateType certificateDeclaration, IsCertificateAMatchForFindValue& certMatchingFn);
    internal static bool TryValidateX509Certificate(X509Certificate2 certificate, IsCertificateAMatchForFindValue matchingFn, string expectedFindValue, X509CertificateChainValidator chainValidator);
    public static ServiceFabricRole ValidateX509Certificate(X509Certificate2 certificate);
    public static X509Certificate2 FindRuntimeCertificate(ServiceFabricRole role);
    private static bool TryParseSubjectFromCertExtension(X509Extension x509Extension, String[]& subjects);
    internal static bool TryParseSubjectFromSANFindValue(string x509FindValue, String& subject);
    internal static bool IsMatchByThumbprint(X509Certificate2 enumeratedCert, string x509FindValue);
    internal static bool IsMatchBySubjectCommonName(X509Certificate2 enumeratedCert, string x509FindValue);
    internal static bool IsMatchByExtension(X509Certificate2 enumeratedCert, string x509findValue);
    internal static bool AnyMatch(X509Certificate2 enumeratedCert, string x509FindValue);
}
internal class System.Fabric.Common.CleanTestStateAction : FabricTestAction {
    internal Type ActionHandlerType { get; }
    internal virtual Type get_ActionHandlerType();
}
internal static class System.Fabric.Common.Constants : object {
    public static string EventStoreConnection;
    public static string TestabilityFabricClientName;
    public static string ActionReliableDictionaryName;
    public static string HistoryReliableDictionaryName;
    public static string PathToFabricCode;
    public static string FabricExe;
    public static string FabricManagementServiceModelAssemblyName;
    public static string TargetInformationFileName;
    public static string StoreFolder;
    public static string WindowsFabricStoreFolder;
    public static string SystemApplicationName;
    public static Guid FmPartitionId;
    public static string ClusterManagerServiceName;
    public static string DSTSTokenValidationServiceName;
    public static string FailoverManagerServiceName;
    public static string FaultAnalysisServiceName;
    public static string FileStoreServiceName;
    public static string ImageStoreServiceName;
    public static string InfrastructureServiceName;
    public static string NamespaceManagerServiceName;
    public static string NamingServiceName;
    public static string RepairManagerServiceName;
    public static string TokenValidationServiceName;
    public static string UpgradeServiceName;
    public static string DnsServiceName;
    public static string BackupRestoreService;
    public static string ResourceMonitorServce;
    public static string CentralSecretService;
    public static string LocalSecretService;
    public static string EventStoreService;
    public static string GatewayResourceManager;
    public static string ManagedIdentityTokenService;
    public static string InfrastructureServiceManagerSectionName;
    public static string IsIsMgrEnabled;
    public static List`1<Uri> SystemServiceList;
    public static int ErrorMessageMaxCharLength;
    public static int MinInstanceCountDefault;
    public static int MinInstancePercentageDefault;
    public static string PreAssertAmble;
    public static string PostAssertAmble;
    public static string DummyFMCodePackageVersion;
    public static string DummyCMCodePackageVersion;
    public static string DummyNSCodePackageVersion;
    public static string NodeNameUsingIdPrefix;
    public static TimeSpan DefaultChaosSnapshotRecaptureBackoffInterval;
    private static Constants();
}
internal class System.Fabric.Common.EnableEndpointV2Utility : object {
    public static bool GetValue(NativeConfigStore configStore);
}
internal class System.Fabric.Common.ExpressionException : Exception {
    public ExpressionException(string message);
    public ExpressionException(string message, Exception inner);
}
internal class System.Fabric.Common.FabricAssemblyResolver : object {
    public static string DataImplAssemblyName;
    public static String[] KnownDlls;
    private static FabricAssemblyResolver();
    public static Assembly ResolveAssembly(string assemblyName);
}
internal class System.Fabric.Common.FabricAverageCount64PerformanceCounterWriter : FabricPerformanceCounterWriter {
    internal FabricAverageCount64PerformanceCounterWriter(FabricPerformanceCounterSetInstance instance, string counterName, string baseCounterName);
    internal void UpdateCounterValue(long delta);
}
internal abstract class System.Fabric.Common.FabricBaselessPerformanceCounterWriter : object {
    protected FabricPerformanceCounter Counter;
    protected bool IsInitialized { get; }
    protected FabricBaselessPerformanceCounterWriter(FabricPerformanceCounterSetInstance instance, string counterName);
    protected virtual bool get_IsInitialized();
}
[ExtensionAttribute]
internal static class System.Fabric.Common.FabricCertificateTypeExtensions : object {
    [ExtensionAttribute]
public static string ToString(FabricCertificateType certDeclaration);
}
internal class System.Fabric.Common.FabricClientRetryErrors : object {
    public static Lazy`1<FabricClientRetryErrors> All;
    public static Lazy`1<FabricClientRetryErrors> GetEntityHealthFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> MoveSecondaryFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> MoveInstanceFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> MoveAuxiliaryFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> MovePrimaryFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> RemoveReplicaErrors;
    public static Lazy`1<FabricClientRetryErrors> RestartReplicaErrors;
    public static Lazy`1<FabricClientRetryErrors> ReportCompletionErrors;
    public static Lazy`1<FabricClientRetryErrors> GetPartitionListFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> GetClusterManifestFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> ProvisionFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> UpgradeFabricErrors;
    public static Lazy`1<FabricClientRetryErrors> RemoveUnreliableTransportBehaviorErrors;
    public static Lazy`1<FabricClientRetryErrors> StartNodeErrors;
    public static Lazy`1<FabricClientRetryErrors> GetDeployedClusterEntityErrors;
    [CompilerGeneratedAttribute]
private IList`1<Type> <RetryableExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FabricErrorCode> <RetryableFabricErrorCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Type> <RetrySuccessExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FabricErrorCode> <RetrySuccessFabricErrorCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UInt32> <InternalRetrySuccessFabricErrorCodes>k__BackingField;
    public IList`1<Type> RetryableExceptions { get; private set; }
    public IList`1<FabricErrorCode> RetryableFabricErrorCodes { get; private set; }
    public IList`1<Type> RetrySuccessExceptions { get; private set; }
    public IList`1<FabricErrorCode> RetrySuccessFabricErrorCodes { get; private set; }
    public IList`1<UInt32> InternalRetrySuccessFabricErrorCodes { get; private set; }
    private static FabricClientRetryErrors();
    [CompilerGeneratedAttribute]
public IList`1<Type> get_RetryableExceptions();
    [CompilerGeneratedAttribute]
private void set_RetryableExceptions(IList`1<Type> value);
    [CompilerGeneratedAttribute]
public IList`1<FabricErrorCode> get_RetryableFabricErrorCodes();
    [CompilerGeneratedAttribute]
private void set_RetryableFabricErrorCodes(IList`1<FabricErrorCode> value);
    [CompilerGeneratedAttribute]
public IList`1<Type> get_RetrySuccessExceptions();
    [CompilerGeneratedAttribute]
private void set_RetrySuccessExceptions(IList`1<Type> value);
    [CompilerGeneratedAttribute]
public IList`1<FabricErrorCode> get_RetrySuccessFabricErrorCodes();
    [CompilerGeneratedAttribute]
private void set_RetrySuccessFabricErrorCodes(IList`1<FabricErrorCode> value);
    [CompilerGeneratedAttribute]
public IList`1<UInt32> get_InternalRetrySuccessFabricErrorCodes();
    [CompilerGeneratedAttribute]
private void set_InternalRetrySuccessFabricErrorCodes(IList`1<UInt32> value);
    private void PopulateDefautlValues();
    public bool IsRetryable(Exception e);
}
internal static class System.Fabric.Common.FabricClientRetryHelper : object {
    private static string TraceType;
    private static TimeSpan DefaultOperationTimeout;
    private static FabricClientRetryHelper();
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__2")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__3")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action, TimeSpan operationTimeout);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__4")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action, FabricClientRetryErrors errors);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__5")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action, FabricClientRetryErrors errors, TimeSpan operationTimeout);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__6")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__7")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action, TimeSpan operationTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__8")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action, FabricClientRetryErrors errors, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__9")]
public static Task ExecuteFabricActionWithRetryAsync(Func`1<Task> action, FabricClientRetryErrors errors, TimeSpan operationTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__10`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__11`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function, TimeSpan operationTimeout);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__12`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function, FabricClientRetryErrors errors);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__13`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function, FabricClientRetryErrors errors, TimeSpan operationTimeout);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__14`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__15`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function, TimeSpan operationTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__16`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function, FabricClientRetryErrors errors, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricClientRetryHelper/<ExecuteFabricActionWithRetryAsync>d__17`1")]
public static Task`1<T> ExecuteFabricActionWithRetryAsync(Func`1<Task`1<T>> function, FabricClientRetryErrors errors, TimeSpan operationTimeout, CancellationToken cancellationToken);
    private static bool HandleException(Exception e, FabricClientRetryErrors errors, Boolean& retryElseSuccess);
}
internal class System.Fabric.Common.FabricCluster : object {
    private FabricClient fabricClient;
    public FabricCluster(FabricClient fabricClient);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricCluster/<GetLatestNodeInfoAsync>d__2")]
public Task`1<IEnumerable`1<NodeInfo>> GetLatestNodeInfoAsync(TimeSpan requestTimeout, TimeSpan operationTimeout, CancellationToken cancellationToken);
    public static long GetWriteQuorumSize(long replicaSetSize);
}
internal class System.Fabric.Common.FabricDirectory : object {
    internal static void CreateDirectory(string path);
    internal static String[] GetDirectories(string path);
    internal static String[] GetDirectories(string path, string pattern);
    internal static String[] GetDirectories(string path, string pattern, SearchOption option);
    internal static String[] GetDirectories(string path, string pattern, bool getFullPath, SearchOption option);
    internal static String[] GetFiles(string path);
    internal static String[] GetFiles(string path, string pattern);
    internal static String[] GetFiles(string path, string pattern, SearchOption option);
    internal static String[] GetFiles(string path, string pattern, bool getFullPath, SearchOption option);
    internal static void Copy(string src, string des, bool overwrite);
    internal static void Rename(string src, string des, bool overwrite);
    internal static bool Exists(string path);
    internal static void Delete(string path);
    internal static void Delete(string path, bool recursive);
    internal static void Delete(string path, bool recursive, bool deleteReadOnlyFiles);
    internal static bool IsSymbolicLink(string path);
    private static void CreateHelper(string path);
    private static String[] GetDirectoriesHelper(string path, string pattern, bool getFullPath, SearchOption option);
    private static String[] GetFilesHelper(string path, string pattern, bool getFullPath, SearchOption option);
    private static void CopyHelper(string src, string des, bool overwrite);
    private static void RenameHelper(string src, string des, bool overwrite);
    private static bool ExistsHelper(string path);
    private static void DeleteHelper(string path, bool recursive, bool deleteReadOnlyFiles);
    private static bool IsSymbolicLinkHelper(string path);
}
internal class System.Fabric.Common.FabricEnvironment : object {
    internal static LinuxPackageManagerType GetLinuxPackageManagerType();
    public static string GetRoot();
    public static string GetRoot(string machineName);
    public static string GetBinRoot();
    public static string GetBinRoot(string machineName);
    public static string GetCodePath();
    public static string GetCodePath(string machineName);
    public static string GetDataRoot();
    public static string GetDataRoot(string machineName);
    public static string GetLogRoot();
    public static string GetLogRoot(string machineName);
    public static void SetFabricRoot(string root);
    public static void SetFabricRoot(string root, string machineName);
    public static void SetFabricBinRoot(string binRoot);
    public static void SetFabricBinRoot(string binRoot, string machineName);
    public static void SetFabricCodePath(string codePath);
    public static void SetFabricCodePath(string codePath, string machineName);
    public static void SetDataRoot(string dataRoot);
    public static void SetDataRoot(string dataRoot, string machineName);
    public static void SetLogRoot(string logRoot);
    public static void SetLogRoot(string logRoot, string machineName);
    public static void SetEnableCircularTraceSession(bool enableCircularTraceSession);
    public static void SetEnableCircularTraceSession(bool enableCircularTraceSession, string machineName);
    public static void SetEnableUnsupportedPreviewFeatures(bool enableUnsupportedPreviewFeatures, string machineName);
    public static void SetIsSFVolumeDiskServiceEnabled(bool isSFVolumeDiskServiceEnabled, string machineName);
    public static void SetDisableKernelDriver(bool disableKernelDriver, string machineName);
    public static void SetFabricTraceFileSizeInMB(UInt32 fabricTraceFileSizeInMB, string machineName);
    public static void SetLeaseTraceFileSizeInMB(UInt32 leaseTraceFileSizeInMB, string machineName);
    public static bool GetEnableCircularTraceSession();
    public static bool GetEnableCircularTraceSession(string machineName);
    public static void SetSfInstalledMoby(string fileContents);
    private static LinuxPackageManagerType GetLinuxPackageManagerTypeHelper();
    private static string GetRootHelper(string machineName);
    private static string GetBinRootHelper(string machineName);
    private static string GetCodePathHelper(string machineName);
    private static string GetDataRootHelper(string machineName);
    private static string GetLogRootHelper(string machineName);
    private static void SetFabricRootHelper(string root, string machineName);
    private static void SetFabricBinRootHelper(string binRoot, string machineName);
    private static void SetFabricCodePathHelper(string codePath, string machineName);
    private static void SetDataRootHelper(string dataRoot, string machineName);
    private static void SetLogRootHelper(string logRoot, string machineName);
    private static void SetEnableCircularTraceSessionHelper(bool enableCircularTraceSession, string machineName);
    private static void SetFabricTraceFileSizeInMBHelper(UInt32 fabricTraceFileSizeInMB, string machineName);
    private static void SetLeaseTraceFileSizeInMBHelper(UInt32 leaseTraceFileSizeInMB, string machineName);
    private static void SetEnableUnsupportedPreviewFeaturesHelper(bool enableUnsupportedPreviewFeatures, string machineName);
    private static void SetIsSFVolumeDiskServiceEnabledHelper(bool isSFVolumeDiskServiceEnabled, string machineName);
    private static void SetDisableKernelDriverHelper(bool disableKernelDriver, string machineName);
    private static void SetSfInstalledMobyHelper(string fileContents);
    private static bool GetEnableCircularTraceSessionHelper(string machineName);
}
internal class System.Fabric.Common.FabricFile : object {
    public static bool SetFileInformationByHandle(SafeHandle hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, FileInformation& FileInformation, int dwBufferSize);
    public static bool SetFileInformationByHandle(SafeHandle hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, FILE_BASIC_INFO& lpFileInformation, int dwBufferSize);
    internal static FileStream Create(string path);
    internal static FileStream Open(string path, FileMode fileMode);
    internal static FileStream Open(string path, FileMode fileMode, FileAccess fileAccess);
    internal static FileStream Open(string path, FileMode fileMode, FileAccess fileAccess, FileShare fileShare);
    internal static FileStream Open(string path, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, int cacheSize, FileOptions fileOptions);
    internal static void Copy(string src, string des, bool overwrite);
    internal static void Move(string src, string des);
    internal static bool Exists(string path);
    internal static void Delete(string path);
    internal static void SetLastWriteTime(string path, DateTime lastWriteTime);
    internal static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    internal static bool CreateHardLink(string fileName, string existingFileName);
    internal static void Delete(string path, bool deleteReadonly);
    internal static long GetSize(string path);
    internal static DateTime GetLastWriteTime(string path);
    internal static string GetVersionInfo(string path);
    internal static void RemoveReadOnlyAttribute(string path);
    private static void CopyHelper(string src, string des, bool overwrite);
    private static void MoveHelper(string src, string des);
    private static void UpdateFilePermission(string filePath);
    private static FileStream OpenHelper(string path, FileMode fileMode, FileAccess fileAccess, FileShare fileShare);
    private static FileStream OpenHelper(string path, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, int cacheSize, FileOptions fileOptions);
    private static void SetLastWriteTimeHelper(string path, long lastWriteTime);
    private static bool ExistsHelper(string path);
    private static void RemoveReadOnlyAttributeHelper(string path);
    private static void ReplaceHelper(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    private static bool CreateHardLinkHelper(string fileName, string existingFileName);
    private static long GetSizeHelper(string path);
    private static DateTime GetLastWriteTimeHelper(string path);
    private static string GetVersionInfoHelper(string path);
    private static void DeleteHelper(string path, bool deleteReadonly);
    private static FABRIC_FILE_MODE ToNative(FileMode mode);
    private static FABRIC_FILE_ACCESS ToNative(FileAccess access);
    private static FABRIC_FILE_SHARE ToNative(FileShare share);
    private static FABRIC_FILE_ATTRIBUTES ToNative(FileOptions options);
}
internal class System.Fabric.Common.FabricNumberOfItems64PerformanceCounterWriter : FabricBaselessPerformanceCounterWriter {
    internal FabricNumberOfItems64PerformanceCounterWriter(FabricPerformanceCounterSetInstance instance, string counterName);
    internal void UpdateCounterValue(long delta);
}
internal class System.Fabric.Common.FabricPath : object {
    internal static string GetUncPath(string path);
    internal static string GetDirectoryName(string path);
    internal static string GetFullPath(string path);
    private static string GetUncPathHelper(string path);
    private static string GetDirectoryNameHelper(string path);
    private static string GetFullPathHelper(string path);
}
internal class System.Fabric.Common.FabricPerformanceCounter : SafeHandle {
    public bool IsInvalid { get; }
    public FabricPerformanceCounter(IntPtr instanceHandle, int index);
    public void Increment();
    public void Decrement();
    public void IncrementBy(long val);
    public long GetValue();
    public void SetValue(long val);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal enum System.Fabric.Common.FabricPerformanceCounterCategoryType : Enum {
    public int value__;
    public static FabricPerformanceCounterCategoryType Unknown;
    public static FabricPerformanceCounterCategoryType SingleInstance;
    public static FabricPerformanceCounterCategoryType MultiInstance;
}
internal class System.Fabric.Common.FabricPerformanceCounterDefinition : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricPerformanceCounterType <CounterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Attributes>k__BackingField;
    public int Id { get; private set; }
    public int BaseId { get; private set; }
    public string Name { get; private set; }
    public string Description { get; private set; }
    public FabricPerformanceCounterType CounterType { get; private set; }
    public string Symbol { get; private set; }
    public IEnumerable`1<string> Attributes { get; private set; }
    public FabricPerformanceCounterDefinition(int id, int baseId, string name, string description, FabricPerformanceCounterType counterType, string symbol, IEnumerable`1<string> attributes);
    public FabricPerformanceCounterDefinition(int id, string name, string description, FabricPerformanceCounterType counterType, string symbol);
    public FabricPerformanceCounterDefinition(int id, int baseId, string name, string description, FabricPerformanceCounterType counterType, string symbol);
    public FabricPerformanceCounterDefinition(int id, string name, string description, FabricPerformanceCounterType counterType, string symbol, IEnumerable`1<string> attributes);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_BaseId();
    [CompilerGeneratedAttribute]
private void set_BaseId(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public FabricPerformanceCounterType get_CounterType();
    [CompilerGeneratedAttribute]
private void set_CounterType(FabricPerformanceCounterType value);
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
private void set_Symbol(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IEnumerable`1<string> value);
}
internal class System.Fabric.Common.FabricPerformanceCounterInterop : object {
    public static IntPtr CreateCounterSet(FabricPerformanceCounterSetDefinition counterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition> counters);
    public static void DeleteCounterSet(IntPtr counterSetHandle);
    public static IntPtr CreateCounterSetInstance(IntPtr counterSetHandle, string instanceName);
    public static void SetCounterRefValue(IntPtr counterInstanceHandle, int id, IntPtr counterAddress);
    public static void DeleteCounterSetInstance(IntPtr counterInstanceHandle);
}
internal class System.Fabric.Common.FabricPerformanceCounterSet : SafeHandle {
    public FabricPerformanceCounterSetDefinition CounterSetDefinition;
    internal IntPtr CounterSetDefinitionPtr;
    internal Dictionary`2<string, int> CounterNameToId;
    public bool IsInvalid { get; }
    public FabricPerformanceCounterSet(FabricPerformanceCounterSetDefinition setDefinition, IEnumerable`1<FabricPerformanceCounterDefinition> counters);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    public FabricPerformanceCounterSetInstance CreateCounterSetInstance(string instanceName);
}
internal class System.Fabric.Common.FabricPerformanceCounterSetDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricPerformanceCounterCategoryType <CategoryType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    public string Name { get; private set; }
    public string Description { get; private set; }
    public FabricPerformanceCounterCategoryType CategoryType { get; private set; }
    public Guid Guid { get; private set; }
    public string Symbol { get; private set; }
    public FabricPerformanceCounterSetDefinition(string name, string description, FabricPerformanceCounterCategoryType categoryType, Guid guid, string symbol);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public FabricPerformanceCounterCategoryType get_CategoryType();
    [CompilerGeneratedAttribute]
private void set_CategoryType(FabricPerformanceCounterCategoryType value);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
private void set_Symbol(string value);
}
internal class System.Fabric.Common.FabricPerformanceCounterSetInstance : SafeHandle {
    private Dictionary`2<string, FabricPerformanceCounter> counterNameToCounter;
    public bool IsInvalid { get; }
    internal FabricPerformanceCounterSetInstance(FabricPerformanceCounterSet counterSet, string instanceName);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    public FabricPerformanceCounter GetPerformanceCounter(string counterName);
}
internal enum System.Fabric.Common.FabricPerformanceCounterType : Enum {
    public int value__;
    public static FabricPerformanceCounterType NumberOfItemsHEX32;
    public static FabricPerformanceCounterType NumberOfItemsHEX64;
    public static FabricPerformanceCounterType NumberOfItems32;
    public static FabricPerformanceCounterType NumberOfItems64;
    public static FabricPerformanceCounterType CounterDelta32;
    public static FabricPerformanceCounterType CounterDelta64;
    public static FabricPerformanceCounterType SampleCounter;
    public static FabricPerformanceCounterType CountPerTimeInterval32;
    public static FabricPerformanceCounterType CountPerTimeInterval64;
    public static FabricPerformanceCounterType RateOfCountsPerSecond32;
    public static FabricPerformanceCounterType RateOfCountsPerSecond64;
    public static FabricPerformanceCounterType RawFraction;
    public static FabricPerformanceCounterType CounterTimer;
    public static FabricPerformanceCounterType Timer100Ns;
    public static FabricPerformanceCounterType SampleFraction;
    public static FabricPerformanceCounterType CounterTimerInverse;
    public static FabricPerformanceCounterType Timer100NsInverse;
    public static FabricPerformanceCounterType CounterMultiTimer;
    public static FabricPerformanceCounterType CounterMultiTimer100Ns;
    public static FabricPerformanceCounterType CounterMultiTimerInverse;
    public static FabricPerformanceCounterType CounterMultiTimer100NsInverse;
    public static FabricPerformanceCounterType AverageTimer32;
    public static FabricPerformanceCounterType ElapsedTime;
    public static FabricPerformanceCounterType AverageCount64;
    public static FabricPerformanceCounterType SampleBase;
    public static FabricPerformanceCounterType AverageBase;
    public static FabricPerformanceCounterType RawBase;
    public static FabricPerformanceCounterType CounterMultiBase;
}
internal abstract class System.Fabric.Common.FabricPerformanceCounterWriter : FabricBaselessPerformanceCounterWriter {
    protected FabricPerformanceCounter CounterBase;
    protected bool IsInitialized { get; }
    protected FabricPerformanceCounterWriter(FabricPerformanceCounterSetInstance instance, string counterName, string baseCounterName);
    protected virtual bool get_IsInitialized();
}
internal static class System.Fabric.Common.FabricServiceModel : object {
    public static NodeId GetNodeIdFromNodeName(string nodeName, string rolesForWhichToUseV1Generator, bool useV2NodeIdGenerator, string nodeIdGeneratorVersion);
    private static NodeId GetNodeIdFromNodeNameHelper(string nodeName, string rolesForWhichToUseV1Generator, bool useV2NodeIdGenerator, string nodeIdGeneratorVersion);
}
internal abstract class System.Fabric.Common.FabricTestAction : object {
    protected static int DefaultActionTimeoutSec;
    protected static int DefaultRequestTimeoutSec;
    [CompilerGeneratedAttribute]
private TimeSpan <ActionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestTimeout>k__BackingField;
    public TimeSpan ActionTimeout { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    internal Type ActionHandlerType { get; }
    private static FabricTestAction();
    [CompilerGeneratedAttribute]
public TimeSpan get_ActionTimeout();
    [CompilerGeneratedAttribute]
public void set_ActionTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestTimeout(TimeSpan value);
    internal abstract virtual Type get_ActionHandlerType();
}
internal abstract class System.Fabric.Common.FabricTestAction`1 : FabricTestAction {
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public TResult Result { get; public set; }
    [CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(TResult value);
}
internal class System.Fabric.Common.FabricTestActionExecutor : object {
    private FabricTestContext testContext;
    private static string TraceSource;
    internal FabricTestActionExecutor(FabricTestContext testContext);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricTestActionExecutor/<RunAsync>d__3")]
public Task RunAsync(FabricTestAction action, CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricTestActionExecutor/<RunAsync>d__4")]
public Task RunAsync(FabricTestAction action);
}
internal abstract class System.Fabric.Common.FabricTestActionHandler : object {
    internal abstract virtual Task ExecuteAsync(FabricTestContext testContext, object action, CancellationToken cancellationToken);
}
internal abstract class System.Fabric.Common.FabricTestActionHandler`1 : FabricTestActionHandler {
    private CancellationTokenSource cancellationTokenSource;
    protected static string TraceType;
    [CompilerGeneratedAttribute]
private string <ResultTraceString>k__BackingField;
    protected ExtensionsEvents ActionTraceSource { get; }
    protected string ResultTraceString { get; protected set; }
    protected ExtensionsEvents get_ActionTraceSource();
    [CompilerGeneratedAttribute]
protected string get_ResultTraceString();
    [CompilerGeneratedAttribute]
protected void set_ResultTraceString(string value);
    [AsyncStateMachineAttribute("System.Fabric.Common.FabricTestActionHandler`1/<ExecuteAsync>d__8")]
internal virtual Task ExecuteAsync(FabricTestContext testContext, object action, CancellationToken cancellationToken);
    protected abstract virtual Task ExecuteActionAsync(FabricTestContext testContext, TAction action, CancellationToken cancellationToken);
}
internal class System.Fabric.Common.FabricTestContext : object {
    private Dictionary`2<string, object> extensionProperties;
    [CompilerGeneratedAttribute]
private FabricTestActionExecutor <ActionExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private Random <Random>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricCluster <FabricCluster>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricClient <FabricClient>k__BackingField;
    public FabricTestActionExecutor ActionExecutor { get; private set; }
    public Random Random { get; private set; }
    public FabricCluster FabricCluster { get; private set; }
    public FabricClient FabricClient { get; private set; }
    public Dictionary`2<string, object> ExtensionProperties { get; }
    public FabricTestContext(FabricClient fabricClient);
    [CompilerGeneratedAttribute]
public FabricTestActionExecutor get_ActionExecutor();
    [CompilerGeneratedAttribute]
private void set_ActionExecutor(FabricTestActionExecutor value);
    [CompilerGeneratedAttribute]
public Random get_Random();
    [CompilerGeneratedAttribute]
private void set_Random(Random value);
    [CompilerGeneratedAttribute]
public FabricCluster get_FabricCluster();
    [CompilerGeneratedAttribute]
private void set_FabricCluster(FabricCluster value);
    [CompilerGeneratedAttribute]
public FabricClient get_FabricClient();
    [CompilerGeneratedAttribute]
private void set_FabricClient(FabricClient value);
    public Dictionary`2<string, object> get_ExtensionProperties();
}
internal static class System.Fabric.Common.FileSignatureVerifier : object {
    public static bool IsSignatureValid(string filename);
}
internal static class System.Fabric.Common.FxCop : object {
}
internal static class System.Fabric.Common.GatewayResourceManagerTrace : object {
    private static ExtensionsEvents traceSource;
    public static ExtensionsEvents TraceSource { get; }
    private static GatewayResourceManagerTrace();
    public static ExtensionsEvents get_TraceSource();
}
internal class System.Fabric.Common.GetSelectedPartitionStateAction : FabricTestAction`1<SelectedPartition> {
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    public PartitionSelector PartitionSelector { get; public set; }
    internal Type ActionHandlerType { get; }
    public GetSelectedPartitionStateAction(PartitionSelector partitionSelector);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.GetSelectedReplicaStateAction : FabricTestAction`1<Tuple`2<SelectedReplica, Replica>> {
    [CompilerGeneratedAttribute]
private ReplicaSelector <ReplicaSelector>k__BackingField;
    public ReplicaSelector ReplicaSelector { get; public set; }
    internal Type ActionHandlerType { get; }
    public GetSelectedReplicaStateAction(ReplicaSelector replicaSelector);
    [CompilerGeneratedAttribute]
public ReplicaSelector get_ReplicaSelector();
    [CompilerGeneratedAttribute]
public void set_ReplicaSelector(ReplicaSelector value);
    internal virtual Type get_ActionHandlerType();
}
[ExtensionAttribute]
internal static class System.Fabric.Common.Helpers : object {
    public static int LINUX_USER_READ;
    public static int LINUX_USER_WRITE;
    public static int LINUX_USER_EXECUTE;
    public static int LINUX_GROUP_READ;
    public static int LINUX_GROUP_WRITE;
    public static int LINUX_GROUP_EXECUTE;
    public static int LINUX_OTHER_READ;
    public static int LINUX_OTHER_WRITE;
    public static int LINUX_OTHER_EXECUTE;
    public static int LINUX_DEFAULT_PERMISSION;
    private static Dictionary`2<string, bool> localMachineCache_;
    private static IPAddress[] localIPs_;
    private static object localIPsLock_;
    private static Helpers();
    public static Nullable`1<bool> IsStatefulService(Type serviceTypeImplementation);
    public static string GetCurrentClusterManifestPath(string dataRoot);
    public static string GetInfrastructureManifestPath(string dataRoot);
    internal static string GetNodeResourcePath(string dataRoot, DeploymentSpecificationResourceDelegate resoucePathRetrievalMethod);
    internal static string GetStackTrace();
    [ExtensionAttribute]
internal static T GetService(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static T GetRequiredService(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static void ForEach(Collection`1<TItem> items, Action`1<TItem> body);
    [ExtensionAttribute]
internal static void ForEach(IList`1<TItem> items, Action`1<TItem> body);
    [ExtensionAttribute]
internal static void ForEach(IEnumerable`1<TItem> items, Action`1<TItem> body);
    [ExtensionAttribute]
internal static void RemoveValueIf(SortedList`2<TKey, TValue> sortedList, Func`2<TValue, bool> body);
    [ExtensionAttribute]
internal static void AddRange(IDictionary`2<TKey, TValue> dictionary, IEnumerable`1<KeyValuePair`2<TKey, TValue>> keyValuePairs);
    [ExtensionAttribute]
internal static T GetAttribute(Type type);
    [ExtensionAttribute]
internal static List`1<T> GetAttributes(Type type);
    internal static void DeleteDirectoryIfExist(string directory, string machineName);
    internal static void CreateDirectoryIfNotExist(string directory, string machineName);
    internal static string GetRemotePath(string path, string machineName);
    internal static string GetRemotePathIfNotLocalMachine(string path, string machineName);
    private static string TranslateIPV6ToLiteralAddress(string ipv6);
    internal static bool isIPV6(string ip);
    internal static bool isIPV6AddressAndNoBracket(string ip);
    internal static string AddBracketsAroundIPV6(string ip);
    internal static void CopyDirectory(string sourcePath, string destPath);
    internal static string CreateQualifiedNameForAssembly(string assemblyName, string typeName);
    internal static string GetNewTempPath();
    internal static string GetNewTempPath(string basePath);
    internal static void PerformWithRetry(Action action, Type[] exceptionTypes, TimeSpan retryInterval, int retryCount, bool logEnabled);
    internal static void PerformWithRetry(Action action, Type[] exceptionTypes, TimeSpan retryInterval, TimeSpan timeout);
    internal static bool IsLocalIpAddress(string hostName);
    [AsyncStateMachineAttribute("System.Fabric.Common.Helpers/<IsLocalIpAddressAsync>d__43")]
internal static Task`1<bool> IsLocalIpAddressAsync(string hostName);
    internal static void UpdateFilePermission(string filePath, int filePermission);
    internal static string GetMachine();
}
internal interface System.Fabric.Common.IConfigStore {
    public bool IgnoreUpdateFailures { get; public set; }
    public abstract virtual ICollection`1<string> GetSections(string partialSectionName);
    public abstract virtual ICollection`1<string> GetKeys(string sectionName, string partialKeyName);
    public abstract virtual string ReadUnencryptedString(string sectionName, string keyName);
    public abstract virtual string ReadString(string sectionName, string keyName, Boolean& isEncrypted);
    public abstract virtual bool get_IgnoreUpdateFailures();
    public abstract virtual void set_IgnoreUpdateFailures(bool value);
}
internal interface System.Fabric.Common.IConfigStore2 {
    public abstract virtual ICollection`1<string> GetAllKeys(string sectionName);
}
internal interface System.Fabric.Common.IConfigStoreUpdateHandler {
    public abstract virtual bool OnUpdate(string sectionName, string keyName);
    public abstract virtual bool CheckUpdate(string sectionName, string keyName, string value, bool isEncrypted);
}
internal interface System.Fabric.Common.IConfigStoreUpdateHandler2 {
    public abstract virtual bool IsOverrideAllowed(string sectionName, string keyName, bool force);
}
internal interface System.Fabric.Common.IFabricPerformanceCountersDefinition {
    public abstract virtual Dictionary`2<FabricPerformanceCounterSetDefinition, IEnumerable`1<FabricPerformanceCounterDefinition>> GetCounterSets();
}
internal class System.Fabric.Common.ImageModel.BuildLayoutSpecification : object {
    private IFabricBuildLayoutSpecification2 nativeBuildLayout;
    private BuildLayoutSpecification(IFabricBuildLayoutSpecification2 nativeBuildLayout);
    public static BuildLayoutSpecification Create();
    public void SetRoot(string value);
    public string GetRoot();
    public string GetApplicationManifestFile();
    public string GetServiceManifestFile(string serviceManifestName);
    public string GetServiceManifestChecksumFile(string serviceManifestName);
    public string GetCodePackageFolder(string serviceManifestName, string codePackageName);
    public string GetCodePackageChecksumFile(string serviceManifestName, string codePackageName);
    public string GetConfigPackageFolder(string serviceManifestName, string configPackageName);
    public string GetConfigPackageChecksumFile(string serviceManifestName, string configPackageName);
    public string GetDataPackageFolder(string serviceManifestName, string dataPackageName);
    public string GetDataPackageChecksumFile(string serviceManifestName, string dataPackageName);
    public string GetSettingsFile(string configPackageFolder);
    public string GetSubPackageArchiveFile(string packageFolder);
    public string GetChecksumFile(string fileOrDirectoryName);
    private static BuildLayoutSpecification CreateHelper();
    private void SetRootHelper(string value);
    private string GetRootHelper();
    private string GetApplicationManifestFileHelper();
    private string GetServiceManifestFileHelper(string serviceManifestName);
    private string GetServiceManifestChecksumFileHelper(string serviceManifestName);
    private string GetCodePackageFolderHelper(string serviceManifestName, string codePackageName);
    private string GetCodePackageChecksumFileHelper(string serviceManifestName, string codePackageName);
    private string GetConfigPackageFolderHelper(string serviceManifestName, string configPackageName);
    private string GetConfigPackageChecksumFileHelper(string serviceManifestName, string configPackageName);
    private string GetDataPackageFolderHelper(string serviceManifestName, string dataPackageName);
    private string GetDataPackageChecksumFileHelper(string serviceManifestName, string dataPackageName);
    private string GetSettingsFileHelper(string configPackageFolder);
    private string GetSubPackageArchiveFileHelper(string packageFolder);
    private string GetChecksumFileHelper(string fileOrDirectoryName);
}
internal class System.Fabric.Common.ImageModel.FabricDeploymentSpecification : object {
    private IFabricDeploymentSpecification nativeFabricDeployment;
    private FabricDeploymentSpecification(IFabricDeploymentSpecification nativeFabricDeployment);
    public static FabricDeploymentSpecification Create();
    public void SetDataRoot(string value);
    public string GetDataRoot();
    public void SetLogRoot(string value);
    public string GetLogRoot();
    public string GetLogFolder();
    public string GetTracesFolder();
    public string GetCrashDumpsFolder();
    public string GetApplicationCrashDumpsFolder();
    public string GetAppInstanceDataFolder();
    public string GetPerformanceCountersBinaryFolder();
    public string GetTargetInformationFile();
    public string GetNodeFolder(string nodeName);
    public string GetFabricFolder(string nodeName);
    public string GetCurrentClusterManifestFile(string nodeName);
    public string GetVersionedClusterManifestFile(string nodeName, string version);
    public string GetInstallerScriptFile(string nodeName);
    public string GetInstallerLogFile(string nodeName, string codeVersion);
    public string GetInfrastructureManfiestFile(string nodeName);
    public string GetConfigurationDeploymentFolder(string nodeName, string configVersion);
    public string GetDataDeploymentFolder(string nodeName);
    public string GetCodeDeploymentFolder(string nodeName, string service);
    public string GetInstalledBinaryFolder(string installationFolder, string service);
    public string GetWorkFolder(string nodeName);
    public string GetCurrentFabricPackageFile(string nodeName);
    public string GetVersionedFabricPackageFile(string nodeName, string version);
    public string GetQueryTraceFolder();
    public void SetEnableCircularTraceSession(bool value);
    public bool GetEnableCircularTraceSession();
    private static FabricDeploymentSpecification CreateHelper();
    private void SetDataRootHelper(string value);
    private string GetDataRootHelper();
    private void SetLogRootHelper(string value);
    private string GetLogRootHelper();
    private string GetLogFolderHelper();
    private string GetTracesFolderHelper();
    private string GetCrashDumpsFolderHelper();
    private string GetApplicationCrashDumpsFolderHelper();
    private string GetAppInstanceDataFolderHelper();
    private string GetPerformanceCountersBinaryFolderHelper();
    private string GetTargetInformationFileHelper();
    private string GetNodeFolderHelper(string nodeName);
    private string GetFabricFolderHelper(string nodeName);
    private string GetCurrentClusterManifestFileHelper(string nodeName);
    private string GetVersionedClusterManifestFileHelper(string nodeName, string version);
    private string GetInstallerScriptFileHelper(string nodeName);
    private string GetInstallerLogFileHelper(string nodeName, string codeVersion);
    private string GetInfrastructureManfiestFileHelper(string nodeName);
    private string GetConfigurationDeploymentFolderHelper(string nodeName, string configVersion);
    private string GetDataDeploymentFolderHelper(string nodeName);
    private string GetCodeDeploymentFolderHelper(string nodeName, string service);
    private string GetInstalledBinaryFolderHelper(string installationFolder, string service);
    private string GetWorkFolderHelper(string nodeName);
    private string GetCurrentFabricPackageFileHelper(string nodeName);
    private string GetVersionedFabricPackageFileHelper(string nodeName, string version);
    private string GetQueryTraceFolderHelper();
    private bool GetEnableCircularTraceSessionHelper();
    private void SetEnableCircularTraceSessionHelper(bool value);
    [CompilerGeneratedAttribute]
private string <GetLogFolder>b__7_0();
    [CompilerGeneratedAttribute]
private string <GetTracesFolder>b__8_0();
    [CompilerGeneratedAttribute]
private string <GetCrashDumpsFolder>b__9_0();
    [CompilerGeneratedAttribute]
private string <GetApplicationCrashDumpsFolder>b__10_0();
    [CompilerGeneratedAttribute]
private string <GetAppInstanceDataFolder>b__11_0();
    [CompilerGeneratedAttribute]
private string <GetPerformanceCountersBinaryFolder>b__12_0();
    [CompilerGeneratedAttribute]
private string <GetTargetInformationFile>b__13_0();
    [CompilerGeneratedAttribute]
private string <GetQueryTraceFolder>b__28_0();
    [CompilerGeneratedAttribute]
private bool <GetEnableCircularTraceSession>b__30_0();
}
internal static class System.Fabric.Common.ImageModel.NativeImageModel : object {
    public static IFabricBuildLayoutSpecification FabricCreateBuildLayoutSpecification(Guid& riid);
    public static IFabricStoreLayoutSpecification FabricCreateStoreLayoutSpecification(Guid& riid);
    public static IFabricRunLayoutSpecification FabricCreateRunLayoutSpecification(Guid& riid);
    public static IFabricWinFabStoreLayoutSpecification FabricCreateWinFabStoreLayoutSpecification(Guid& riid);
    public static IFabricDeploymentSpecification FabricCreateFabricDeploymentSpecification(Guid& riid);
}
internal class System.Fabric.Common.ImageModel.RunLayoutSpecification : object {
    private IFabricRunLayoutSpecification nativeRunLayout;
    private RunLayoutSpecification(IFabricRunLayoutSpecification nativeRunLayout);
    public static RunLayoutSpecification Create();
    public void SetRoot(string value);
    public string GetApplicationLogFolder(string applicationId);
    public string GetApplicationPackageFile(string applicationId, string applicationRolloutVersion);
    public string GetServicePackageFile(string applicationId, string servicePackageName, string servicePackageRolloutVersion);
    public string GetDataPackageFolder(string applicationId, string servicePackageName, string dataPackageName, string dataPackageVersion, bool isSharedPackage);
    public string GetCodePackageFolder(string applicationId, string servicePackageName, string codePackageName, string codePackageVersion, bool isSharedPackage);
    private static RunLayoutSpecification CreateHelper();
    private void SetRootHelper(string value);
    private string GetApplicationLogFolderHelper(string applicationId);
    private string GetApplicationPackageFileHelper(string applicationId, string applicationRolloutVersion);
    private string GetServicePackageFileHelper(string applicationId, string servicePackageName, string servicePackageRolloutVersion);
    private string GetDataPackageFolderHelper(string applicationId, string servicePackageName, string dataPackageName, string dataPackageVersion, bool isSharedPackage);
    private string GetCodePackageFolderHelper(string applicationId, string servicePackageName, string codePackageName, string codePackageVersion, bool isSharedPackage);
}
internal class System.Fabric.Common.ImageModel.StoreLayoutSpecification : object {
    private IFabricStoreLayoutSpecification2 nativeStoreLayout;
    private StoreLayoutSpecification(IFabricStoreLayoutSpecification2 nativeStoreLayout);
    public static StoreLayoutSpecification Create();
    public void SetRoot(string value);
    public string GetRoot();
    public string GetApplicationManifestFile(string applicationTypeName, string applicationTypeVersion);
    public string GetApplicationInstanceFile(string applicationTypeName, string applicationId, string applicationInstanceVersion);
    public string GetApplicationPackageFile(string applicationTypeName, string applicationId, string applicationRolloutVersion);
    public string GetServicePackageFile(string applicationTypeName, string applicationId, string servicePackageName, string servicePackageRolloutVersion);
    public string GetServiceManifestFile(string applicationTypeName, string serviceManifestName, string serviceManifestVersion);
    public string GetServiceManifestChecksumFile(string applicationTypeName, string serviceManifestName, string serviceManifestVersion);
    public string GetCodePackageFolder(string applicationTypeName, string servicePackageName, string codePackageName, string codePackageVersion);
    public string GetCodePackageChecksumFile(string applicationTypeName, string servicePackageName, string codePackageName, string codePackageVersion);
    public string GetConfigPackageFolder(string applicationTypeName, string servicePackageName, string configPackageName, string configPackageVersion);
    public string GetConfigPackageChecksumFile(string applicationTypeName, string servicePackageName, string configPackageName, string configPackageVersion);
    public string GetDataPackageFolder(string applicationTypeName, string servicePackageName, string dataPackageName, string dataPackageVersion);
    public string GetDataPackageChecksumFile(string applicationTypeName, string servicePackageName, string dataPackageName, string dataPackageVersion);
    public string GetSettingsFile(string configPackageFolder);
    public string GetSubPackageArchiveFile(string packageFolder);
    private static StoreLayoutSpecification CreateHelper();
    private void SetRootHelper(string value);
    private string GetRootHelper();
    private string GetApplicationManifestFileHelper(string applicationTypeName, string applicationTypeVersion);
    private string GetApplicationInstanceFileHelper(string applicationTypeName, string applicationId, string applicationInstanceVersion);
    private string GetApplicationPackageFileHelper(string applicationTypeName, string applicationId, string applicationRolloutVersion);
    private string GetServicePackageFileHelper(string applicationTypeName, string applicationId, string servicePackageName, string servicePackageRolloutVersion);
    private string GetServiceManifestFileHelper(string applicationTypeName, string serviceManifestName, string serviceManifestVersion);
    private string GetServiceManifestChecksumFileHelper(string applicationTypeName, string serviceManifestName, string serviceManifestVersion);
    private string GetCodePackageFolderHelper(string applicationTypeName, string serviceManifestName, string codePackageName, string codePackageVersion);
    private string GetCodePackageChecksumFileHelper(string applicationTypeName, string serviceManifestName, string codePackageName, string codePackageVersion);
    private string GetConfigPackageFolderHelper(string applicationTypeName, string serviceManifestName, string configPackageName, string configPackageVersion);
    private string GetConfigPackageChecksumFileHelper(string applicationTypeName, string serviceManifestName, string configPackageName, string configPackageVersion);
    private string GetDataPackageFolderHelper(string applicationTypeName, string serviceManifestName, string dataPackageName, string dataPackageVersion);
    private string GetDataPackageChecksumFileHelper(string applicationTypeName, string serviceManifestName, string dataPackageName, string dataPackageVersion);
    private string GetSettingsFileHelper(string configPackageFolder);
    private string GetSubPackageArchiveFileHelper(string packageFolder);
}
internal class System.Fabric.Common.ImageModel.WinFabStoreLayoutSpecification : object {
    private IFabricWinFabStoreLayoutSpecification nativeWinFabStoreLayout;
    private WinFabStoreLayoutSpecification(IFabricWinFabStoreLayoutSpecification nativeStoreLayout);
    public static WinFabStoreLayoutSpecification Create();
    public void SetRoot(string value);
    public string GetRoot();
    public string GetPatchFile(string version);
    public string GetCabPatchFile(string version);
    public string GetCodePackageFolder(string version);
    public string GetClusterManifestFile(string clusterManifestVersion);
    private static WinFabStoreLayoutSpecification CreateHelper();
    private void SetRootHelper(string value);
    private string GetRootHelper();
    private string GetPatchFileHelper(string version);
    private string GetCabPatchFileHelper(string version);
    private string GetCodePackageFolderHelper(string version);
    private string GetClusterManifestFileHelper(string clusterManifestVersion);
}
internal class System.Fabric.Common.InvokeDataLossAction : FabricTestAction`1<InvokeDataLossResult> {
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private DataLossMode <DataLossMode>k__BackingField;
    public PartitionSelector PartitionSelector { get; public set; }
    public DataLossMode DataLossMode { get; public set; }
    internal Type ActionHandlerType { get; }
    public InvokeDataLossAction(PartitionSelector partitionSelector, DataLossMode dataLossMode);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    [CompilerGeneratedAttribute]
public DataLossMode get_DataLossMode();
    [CompilerGeneratedAttribute]
public void set_DataLossMode(DataLossMode value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.InvokeQuorumLossAction : FabricTestAction`1<InvokeQuorumLossResult> {
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private QuorumLossMode <QuorumLossMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QuorumLossDuration>k__BackingField;
    public PartitionSelector PartitionSelector { get; public set; }
    public QuorumLossMode QuorumLossMode { get; public set; }
    public TimeSpan QuorumLossDuration { get; public set; }
    internal Type ActionHandlerType { get; }
    public InvokeQuorumLossAction(PartitionSelector partitionSelector, QuorumLossMode QuorumLossMode, TimeSpan QuorumLossDuration);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    [CompilerGeneratedAttribute]
public QuorumLossMode get_QuorumLossMode();
    [CompilerGeneratedAttribute]
public void set_QuorumLossMode(QuorumLossMode value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QuorumLossDuration();
    [CompilerGeneratedAttribute]
public void set_QuorumLossDuration(TimeSpan value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.ItemList`1 : Collection`1<TItem> {
    [CompilerGeneratedAttribute]
private bool <MayContainNullValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MayContainDuplicates>k__BackingField;
    private bool MayContainNullValues { get; private set; }
    private bool MayContainDuplicates { get; private set; }
    public ItemList`1(IList`1<TItem> list);
    public ItemList`1(bool mayContainNullValues, bool mayContainDuplicates);
    public ItemList`1(bool mayContainNullValues, bool mayContainDuplicates, IList`1<TItem> list);
    [CompilerGeneratedAttribute]
private bool get_MayContainNullValues();
    [CompilerGeneratedAttribute]
private void set_MayContainNullValues(bool value);
    [CompilerGeneratedAttribute]
private bool get_MayContainDuplicates();
    [CompilerGeneratedAttribute]
private void set_MayContainDuplicates(bool value);
    public IList`1<TItem> AsReadOnly();
    protected virtual void InsertItem(int index, TItem item);
    protected virtual void SetItem(int index, TItem item);
    private void ValidateInsertOrAdd(int index, TItem item);
}
internal class System.Fabric.Common.KeyedItemCollection`2 : KeyedCollection`2<TKey, TItem> {
    private Func`2<TItem, TKey> getKey;
    protected internal KeyedItemCollection`2(Func`2<TItem, TKey> getKeyCallback);
    protected internal KeyedItemCollection`2(Func`2<TItem, TKey> getKeyCallback, IEqualityComparer`1<TKey> comparer);
    protected internal KeyedItemCollection`2(Func`2<TItem, TKey> getKeyCallback, IEqualityComparer`1<TKey> comparer, int dictionaryCreationThreshold);
    protected virtual TKey GetKeyForItem(TItem item);
}
public enum System.Fabric.Common.LinuxPackageManagerType : Enum {
    public int value__;
    public static LinuxPackageManagerType Unknown;
    public static LinuxPackageManagerType Deb;
    public static LinuxPackageManagerType Rpm;
}
internal class System.Fabric.Common.Monitoring.ExpiredApiCall : object {
    private bool shouldReportHealth;
    private FabricApiCallDescription apiDescription;
    public bool ShouldReportHealth { get; }
    public FabricApiCallDescription ApiDescription { get; }
    public ExpiredApiCall(bool shouldReportHealth, FabricApiCallDescription apiDescription);
    public bool get_ShouldReportHealth();
    public FabricApiCallDescription get_ApiDescription();
}
internal class System.Fabric.Common.Monitoring.FabricApiCallDescription : object {
    private FabricMonitoringData monitoringData;
    private FabricMonitoringParameters monitoringParameters;
    private bool hasExpired;
    private IStatefulServicePartition partition;
    public FabricMonitoringData MonitoringData { get; public set; }
    public FabricMonitoringParameters MonitoringParameters { get; public set; }
    public IStatefulServicePartition Partition { get; public set; }
    public bool HasExpired { get; }
    public FabricApiCallDescription(FabricMonitoringData data, FabricMonitoringParameters parameters, IStatefulServicePartition statefulServicePartition);
    public FabricMonitoringData get_MonitoringData();
    public void set_MonitoringData(FabricMonitoringData value);
    public FabricMonitoringParameters get_MonitoringParameters();
    public void set_MonitoringParameters(FabricMonitoringParameters value);
    public IStatefulServicePartition get_Partition();
    public void set_Partition(IStatefulServicePartition value);
    public bool get_HasExpired();
    public bool IsFirstExpiry();
    public HealthInformation GetHealthInformation_Slow();
    public HealthInformation GetHealthInformation_OK();
}
internal class System.Fabric.Common.Monitoring.FabricApiMonitoringComponent : object {
    private static string ApiSlowTraceType;
    private static string ApiStopTraceType;
    private static string ApiStartTraceType;
    private ConcurrentDictionary`2<FabricApiCallDescription, byte> store;
    private TimeSpan scanInterval;
    private Timer timer;
    private object timerLock;
    private bool timerEnabled;
    private MonitoringComponentParameters componentParameters;
    private Action`1<FabricApiCallDescription> apiStartTraceCallback;
    private Action`1<FabricApiCallDescription> apiSlowTraceCallback;
    private Action`1<FabricApiCallDescription> apiStopTraceCallback;
    internal FabricApiMonitoringComponent(MonitoringComponentParameters parameters, Action`1<FabricApiCallDescription> startTraceCallback, Action`1<FabricApiCallDescription> slowTraceCallback, Action`1<FabricApiCallDescription> stopTraceCallback);
    private static FabricApiMonitoringComponent();
    public void StartMonitoring(FabricApiCallDescription description);
    public void StopMonitoring(FabricApiCallDescription description);
    internal int Test_GetCount();
    private void DefaultApiSlowTraceCallback(FabricApiCallDescription apiCall);
    private void DefaultApiStopTraceCallback(FabricApiCallDescription apiCall);
    private void DefaultApiStartTraceCallback(FabricApiCallDescription apiCall);
    private void OnTimer(object sender);
    private void StartTimerIfNeeded();
    private void StopTimerIfNeeded();
    private void ReportSlowHealthIfEnabled(IEnumerable`1<ExpiredApiCall> expiredItems);
    private List`1<ExpiredApiCall> FindExpiredItems();
    private void AddApiCallToStore(FabricApiCallDescription description);
    private void TraceSlowIfEnabled(IEnumerable`1<ExpiredApiCall> callbackItems);
    private void TraceFabricApiStartMonitoringIfEnabled(FabricApiCallDescription description);
    private void TraceFabricApiStopMonitoringIfEnabled(FabricApiCallDescription description);
}
internal class System.Fabric.Common.Monitoring.FabricMonitoringData : object {
    private long replicaId;
    private long replicaInstanceId;
    private NodeId nodeId;
    private Guid partitionid;
    private Stopwatch startTime;
    private string apiName;
    private string apiProperty;
    private ServiceContext context;
    public Guid Partitionid { get; }
    public string ApiName { get; }
    public Stopwatch StartTime { get; public set; }
    public long ReplicaInstanceId { get; }
    public long ReplicaId { get; }
    public string ApiProperty { get; }
    public ServiceContext Context { get; public set; }
    public FabricMonitoringData(long replicaId, long replicaInstanceId, NodeId nodeId, Guid partitionId, string apiName, string apiProperty);
    public FabricMonitoringData(ServiceContext context, string apiName, string apiProperty);
    public Guid get_Partitionid();
    public string get_ApiName();
    public Stopwatch get_StartTime();
    public void set_StartTime(Stopwatch value);
    public long get_ReplicaInstanceId();
    public long get_ReplicaId();
    public string get_ApiProperty();
    public ServiceContext get_Context();
    public void set_Context(ServiceContext value);
}
internal class System.Fabric.Common.Monitoring.FabricMonitoringParameters : object {
    private bool isHealthReportEnabled;
    private bool isApiSlowTraceEnabled;
    private bool isApiLifeCycleTraceEnabled;
    private TimeSpan apiSlowDuration;
    public bool IsHealthReportEnabled { get; }
    public bool IsApiSlowTraceEnabled { get; }
    public bool IsApiLifeCycleTraceEnabled { get; }
    public TimeSpan ApiSlowDuration { get; }
    public FabricMonitoringParameters(bool isHealthReportEnabled, bool isApiSlowTraceEnabled, bool isApiLifeCycleTraceEnabled, TimeSpan apiSlowDuration);
    public bool get_IsHealthReportEnabled();
    public bool get_IsApiSlowTraceEnabled();
    public bool get_IsApiLifeCycleTraceEnabled();
    public TimeSpan get_ApiSlowDuration();
}
internal class System.Fabric.Common.Monitoring.MonitoringComponentParameters : object {
    private Action`1<FabricApiCallDescription> slowHealthReportCallback;
    private Action`1<FabricApiCallDescription> clearSlowHealthReportCallback;
    private TimeSpan scanInterval;
    public Action`1<FabricApiCallDescription> ClearSlowHealthReportCallback { get; public set; }
    public Action`1<FabricApiCallDescription> SlowHealthReportCallback { get; public set; }
    public TimeSpan ScanInterval { get; public set; }
    public MonitoringComponentParameters(TimeSpan interval, Action`1<FabricApiCallDescription> slowHealthReport, Action`1<FabricApiCallDescription> clearSlowHealthReport);
    public Action`1<FabricApiCallDescription> get_ClearSlowHealthReportCallback();
    public void set_ClearSlowHealthReportCallback(Action`1<FabricApiCallDescription> value);
    public Action`1<FabricApiCallDescription> get_SlowHealthReportCallback();
    public void set_SlowHealthReportCallback(Action`1<FabricApiCallDescription> value);
    public TimeSpan get_ScanInterval();
    public void set_ScanInterval(TimeSpan value);
    private void DefaultSlowHealthCallback(FabricApiCallDescription apiCall);
    private void DefaultClearSlowHealthReportCallback(FabricApiCallDescription apiCall);
}
internal class System.Fabric.Common.MoveAuxiliaryAction : FabricTestAction`1<MoveAuxiliaryResult> {
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentAuxiliaryNodeName>k__BackingField;
    public static string TraceSource;
    [CompilerGeneratedAttribute]
private string <NewAuxiliaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    public bool IgnoreConstraints { get; public set; }
    public string CurrentAuxiliaryNodeName { get; public set; }
    public string NewAuxiliaryNodeName { get; public set; }
    public PartitionSelector PartitionSelector { get; public set; }
    internal Type ActionHandlerType { get; }
    public MoveAuxiliaryAction(string currentAuxiliaryNodeName, string newAuxiliaryNodeName, PartitionSelector partitionSelector, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
public void set_IgnoreConstraints(bool value);
    [CompilerGeneratedAttribute]
public string get_CurrentAuxiliaryNodeName();
    [CompilerGeneratedAttribute]
public void set_CurrentAuxiliaryNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewAuxiliaryNodeName();
    [CompilerGeneratedAttribute]
public void set_NewAuxiliaryNodeName(string value);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.MoveAuxiliaryDescription : object {
    [CompilerGeneratedAttribute]
private MoveAuxiliaryDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public MoveAuxiliaryDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public MoveAuxiliaryDescription(MoveAuxiliaryDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public MoveAuxiliaryDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(MoveAuxiliaryDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal enum System.Fabric.Common.MoveAuxiliaryDescriptionKind : Enum {
    public int value__;
    public static MoveAuxiliaryDescriptionKind Invalid;
    public static MoveAuxiliaryDescriptionKind UsingNodeName;
    public static MoveAuxiliaryDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.MoveAuxiliaryDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <CurrentAuxiliaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewAuxiliaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    public string CurrentAuxiliaryNodeName { get; internal set; }
    public string NewAuxiliaryNodeName { get; internal set; }
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    public bool IgnoreConstraints { get; internal set; }
    public MoveAuxiliaryDescriptionUsingNodeName(string currentAuxiliaryNodeName, string newAuxiliaryNodeName, Uri serviceName, Guid partitionId, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public string get_CurrentAuxiliaryNodeName();
    [CompilerGeneratedAttribute]
internal void set_CurrentAuxiliaryNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewAuxiliaryNodeName();
    [CompilerGeneratedAttribute]
internal void set_NewAuxiliaryNodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
internal void set_IgnoreConstraints(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static MoveAuxiliaryDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.MoveInstanceAction : FabricTestAction`1<MoveInstanceResult> {
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentInstanceNodeName>k__BackingField;
    public static string TraceSource;
    [CompilerGeneratedAttribute]
private string <NewInstanceNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    public bool IgnoreConstraints { get; public set; }
    public string CurrentInstanceNodeName { get; public set; }
    public string NewInstanceNodeName { get; public set; }
    public PartitionSelector PartitionSelector { get; public set; }
    internal Type ActionHandlerType { get; }
    public MoveInstanceAction(string currentInstanceNodeName, string newInstanceNodeName, PartitionSelector partitionSelector, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
public void set_IgnoreConstraints(bool value);
    [CompilerGeneratedAttribute]
public string get_CurrentInstanceNodeName();
    [CompilerGeneratedAttribute]
public void set_CurrentInstanceNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewInstanceNodeName();
    [CompilerGeneratedAttribute]
public void set_NewInstanceNodeName(string value);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.MoveInstanceDescription : object {
    [CompilerGeneratedAttribute]
private MoveInstanceDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public MoveInstanceDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public MoveInstanceDescription(MoveInstanceDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public MoveInstanceDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(MoveInstanceDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal enum System.Fabric.Common.MoveInstanceDescriptionKind : Enum {
    public int value__;
    public static MoveInstanceDescriptionKind Invalid;
    public static MoveInstanceDescriptionKind UsingNodeName;
    public static MoveInstanceDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.MoveInstanceDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <CurrentInstanceNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewInstanceNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    public string CurrentInstanceNodeName { get; internal set; }
    public string NewInstanceNodeName { get; internal set; }
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    public bool IgnoreConstraints { get; internal set; }
    public MoveInstanceDescriptionUsingNodeName(string currentInstanceNodeName, string newInstanceNodeName, Uri serviceName, Guid partitionId, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public string get_CurrentInstanceNodeName();
    [CompilerGeneratedAttribute]
internal void set_CurrentInstanceNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewInstanceNodeName();
    [CompilerGeneratedAttribute]
internal void set_NewInstanceNodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
internal void set_IgnoreConstraints(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static MoveInstanceDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.MovePrimaryAction : FabricTestAction`1<MovePrimaryResult> {
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    public static string TraceSource;
    public bool IgnoreConstraints { get; public set; }
    public string NodeName { get; public set; }
    public PartitionSelector PartitionSelector { get; public set; }
    internal Type ActionHandlerType { get; }
    public MovePrimaryAction(string nodeName, PartitionSelector partitionSelector, bool ignoreConstraints);
    public MovePrimaryAction(PartitionSelector paritionSelector, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
public void set_IgnoreConstraints(bool value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.MovePrimaryDescription2 : object {
    [CompilerGeneratedAttribute]
private MovePrimaryDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public MovePrimaryDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public MovePrimaryDescription2(MovePrimaryDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public MovePrimaryDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(MovePrimaryDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal enum System.Fabric.Common.MovePrimaryDescriptionKind : Enum {
    public int value__;
    public static MovePrimaryDescriptionKind Invalid;
    public static MovePrimaryDescriptionKind UsingNodeName;
    public static MovePrimaryDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.MovePrimaryDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <NewPrimaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    public string NewPrimaryNodeName { get; internal set; }
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    public bool IgnoreConstraints { get; internal set; }
    public MovePrimaryDescriptionUsingNodeName(string newPrimaryNodeName, Uri serviceName, Guid partitionId, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public string get_NewPrimaryNodeName();
    [CompilerGeneratedAttribute]
internal void set_NewPrimaryNodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
internal void set_IgnoreConstraints(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static MovePrimaryDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.MoveSecondaryAction : FabricTestAction`1<MoveSecondaryResult> {
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentSecondaryNodeName>k__BackingField;
    public static string TraceSource;
    [CompilerGeneratedAttribute]
private string <NewSecondaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    public bool IgnoreConstraints { get; public set; }
    public string CurrentSecondaryNodeName { get; public set; }
    public string NewSecondaryNodeName { get; public set; }
    public PartitionSelector PartitionSelector { get; public set; }
    internal Type ActionHandlerType { get; }
    public MoveSecondaryAction(string currentSecondaryNodeName, string newSecondaryNodeName, PartitionSelector partitionSelector, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
public void set_IgnoreConstraints(bool value);
    [CompilerGeneratedAttribute]
public string get_CurrentSecondaryNodeName();
    [CompilerGeneratedAttribute]
public void set_CurrentSecondaryNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewSecondaryNodeName();
    [CompilerGeneratedAttribute]
public void set_NewSecondaryNodeName(string value);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.MoveSecondaryDescription2 : object {
    [CompilerGeneratedAttribute]
private MoveSecondaryDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public MoveSecondaryDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public MoveSecondaryDescription2(MoveSecondaryDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public MoveSecondaryDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(MoveSecondaryDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal enum System.Fabric.Common.MoveSecondaryDescriptionKind : Enum {
    public int value__;
    public static MoveSecondaryDescriptionKind Invalid;
    public static MoveSecondaryDescriptionKind UsingNodeName;
    public static MoveSecondaryDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.MoveSecondaryDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <CurrentSecondaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSecondaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConstraints>k__BackingField;
    public string CurrentSecondaryNodeName { get; internal set; }
    public string NewSecondaryNodeName { get; internal set; }
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    public bool IgnoreConstraints { get; internal set; }
    public MoveSecondaryDescriptionUsingNodeName(string currentSecondaryNodeName, string newSecondaryNodeName, Uri serviceName, Guid partitionId, bool ignoreConstraints);
    [CompilerGeneratedAttribute]
public string get_CurrentSecondaryNodeName();
    [CompilerGeneratedAttribute]
internal void set_CurrentSecondaryNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewSecondaryNodeName();
    [CompilerGeneratedAttribute]
internal void set_NewSecondaryNodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConstraints();
    [CompilerGeneratedAttribute]
internal void set_IgnoreConstraints(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static MoveSecondaryDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.NativeConfigStore : object {
    private IFabricConfigStore2 nativeConfigStore;
    public bool IgnoreUpdateFailures { get; public set; }
    private NativeConfigStore(IFabricConfigStore2 nativeConfigStore);
    public static NativeConfigStore FabricGetConfigStore();
    public static NativeConfigStore FabricGetConfigStore(IConfigStoreUpdateHandler2 updateHandler);
    public static SecureString DecryptText(string encryptedValue);
    public static SecureString DecryptText(string encryptedValue, StoreLocation storeLocation);
    public static string EncryptText(string text, string certThumbPrint, string certStoreName);
    public static string EncryptText(string text, string certThumbPrint, string certStoreName, StoreLocation certStoreLocation, string algorithmOid);
    public static string EncryptTextByCertFile(string text, string certFilePath, string algorithmOid);
    public sealed virtual ICollection`1<string> GetSections(string partialSectionName);
    public sealed virtual ICollection`1<string> GetKeys(string sectionName, string partialKeyName);
    public sealed virtual ICollection`1<string> GetAllKeys(string sectionName);
    public sealed virtual string ReadUnencryptedString(string sectionName, string keyName);
    public bool ReadUnencryptedBool(string sectionName, string keyName, ExtensionsEvents traceSource, string traceType, bool throwIfInvalid);
    public sealed virtual string ReadString(string sectionName, string keyName, Boolean& isEncrypted);
    public sealed virtual bool get_IgnoreUpdateFailures();
    public sealed virtual void set_IgnoreUpdateFailures(bool value);
    private static NativeConfigStore CreateHelper(IFabricConfigStoreUpdateHandler2 updateHandler);
    private static SecureString DecryptTextHelper(string encryptedValue, StoreLocation storeLocation);
    private static string EncryptTextHelper(string text, string certThumbPrint, string certStoreName, StoreLocation storeLocation, string algorithmOid);
    private static string EncryptValueHelper(string text, string certFilePath, string algorithmOid);
    private string ReadStringHelper(string sectionName, string keyName, Boolean& isEncrypted);
    private ICollection`1<string> GetKeysHelper(string sectionName, string partialKeyName);
    private ICollection`1<string> GetSectionsHelper(string partialSectionName);
    private bool get_IgnoreUpdateFailuresHelper();
    private void set_IgnoreUpdateFailuresHelper(bool value);
    [CompilerGeneratedAttribute]
private bool <get_IgnoreUpdateFailures>b__16_0();
}
internal static class System.Fabric.Common.NativeHelper : object {
    public static string SERVICE_ACCOUNT_PASSWORD;
    private static NativeHelper();
    public static bool LogonUser(string userName, string domainName, IntPtr password, LogonType logonType, LogonProvider logonProvider, IntPtr& token);
    public static bool CloseHandle(IntPtr handle);
    public static int system(string command);
    public static int chmod(string path, int mode);
    public static int geteuid();
    public static UInt32 MsiOpenDatabase(string szDatabasePath, IntPtr phPersist, IntPtr& phDatabase);
    public static int MsiDatabaseOpenViewW(IntPtr hDatabase, string szQuery, IntPtr& phView);
    public static int MsiViewExecute(IntPtr hView, IntPtr hRecord);
    public static UInt32 MsiViewFetch(IntPtr hView, IntPtr& hRecord);
    public static int MsiRecordGetString(IntPtr hRecord, int iField, StringBuilder szValueBuf, Int32& pcchValueBuf);
    public static IntPtr MsiCreateRecord(UInt32 cParams);
    public static UInt32 MsiCloseHandle(IntPtr hAny);
    public static IntPtr FCICreate(CabError erf, FCIFilePlacedMethod filePlaced, MemAllocMethod malloc, MemFreeMethod free, FCIOpenMethod open, FCIReadMethod read, FCIWriteMethod write, FCICloseMethod close, FCISeekMethod seek, FCIDeleteMethod delete, FCIGetTempFileMethod getTempFile, CompressionInfo cab, IntPtr data);
    public static bool FCIAddFile(IntPtr fciHandle, string sourceFileName, string destFileName, bool execute, FCIGetNextCabMethod getNextCabinet, FCIStatusMethod status, FCIGetOpenInfoMethod getOpenInfo, short compressionFlags);
    public static bool FCIFlushCabinet(IntPtr fciHandle, bool getNextCab, FCIGetNextCabMethod getNextCabinet, FCIStatusMethod status);
    public static bool FCIFlushFolder(IntPtr fciHandle, FCIGetNextCabMethod getNextCabinet, FCIStatusMethod status);
    public static bool FCIDestroy(IntPtr fciHandle);
    public static PdhStatus PdhValidatePath(string counterPath);
}
internal static class System.Fabric.Common.NetworkHelper : object {
    public static IPAddress[] GetIPAddresses(bool noDns);
    public static IPAddress[] GetIPAddresses(string hostName, bool noDns);
    public static string GetIPV4Address(IPAddress[] ipAddresses);
    public static string GetIPV4Address(bool noDns);
    public static string GetIPV4Address(string hostName, bool noDns);
    public static string AddSurroundingBracketsToIPv6Endpoint(string endpoint, bool endpointIncludesPort);
}
internal class System.Fabric.Common.NodeInfo : object {
    public static string ClientConnectionEndpoint;
    public static string HttpGatewayEndpoint;
    public static string HttpGatewayTokenAuthEndpoint;
    [CompilerGeneratedAttribute]
private string <IPAddressOrFQDN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeId <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSeedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <FaultDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNodeUp>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeType>k__BackingField;
    public string IPAddressOrFQDN { get; private set; }
    public string NodeName { get; private set; }
    public NodeId NodeId { get; private set; }
    public BigInteger NodeInstanceId { get; private set; }
    public bool IsSeedNode { get; public set; }
    public string UpgradeDomain { get; public set; }
    public Uri FaultDomain { get; public set; }
    public bool IsNodeUp { get; public set; }
    public HealthState HealthState { get; public set; }
    public string NodeType { get; public set; }
    private NodeInfo(string ipAddessOrFQDN, string nodeName, NodeId nodeId, BigInteger instanceId, bool isSeedNode, HealthState healthState);
    [CompilerGeneratedAttribute]
public string get_IPAddressOrFQDN();
    [CompilerGeneratedAttribute]
private void set_IPAddressOrFQDN(string value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public NodeId get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(NodeId value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstanceId();
    [CompilerGeneratedAttribute]
private void set_NodeInstanceId(BigInteger value);
    [CompilerGeneratedAttribute]
public bool get_IsSeedNode();
    [CompilerGeneratedAttribute]
public void set_IsSeedNode(bool value);
    [CompilerGeneratedAttribute]
public string get_UpgradeDomain();
    [CompilerGeneratedAttribute]
public void set_UpgradeDomain(string value);
    [CompilerGeneratedAttribute]
public Uri get_FaultDomain();
    [CompilerGeneratedAttribute]
public void set_FaultDomain(Uri value);
    [CompilerGeneratedAttribute]
public bool get_IsNodeUp();
    [CompilerGeneratedAttribute]
public void set_IsNodeUp(bool value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
public void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public string get_NodeType();
    [CompilerGeneratedAttribute]
public void set_NodeType(string value);
    internal static NodeInfo CreateNodeInfo(Node nodeResult);
    public virtual string ToString();
    public NodeInfo Clone();
    public sealed virtual bool Equals(NodeInfo other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class System.Fabric.Common.ParallelExtensions : object {
    [ExtensionAttribute]
public static Task ForEachAsync(IEnumerable`1<T> source, int dop, Func`2<T, Task> body);
}
[DefaultMemberAttribute("Item")]
internal class System.Fabric.Common.ReadOnlyDictionary`2 : object {
    private Dictionary`2<TKey, TValue> dictionary;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ReadOnlyDictionary`2(Dictionary`2<TKey, TValue> dictionary);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Fabric.Common.ReleaseAssert : object {
    private static string TraceSource;
    public static void Assert(bool cond, string msg);
    public static void Assert(bool cond, string format, T arg0);
    public static void Assert(bool cond, string format, T arg0, U arg1);
    public static void Assert(bool cond, string format, T arg0, U arg1, V arg2);
    public static void AssertIfNot(bool cond, string format, Object[] args);
    public static void AssertIf(bool cond, string format, Object[] args);
    public static void AssertIfNull(object argument, string argumentName);
    public static void Failfast(string format, Object[] args);
    public static void Fail(string format, Object[] args);
    public static void IsTrue(bool condition, string format, Object[] args);
    public static void IsTrue(bool condition, string format);
    public static void IsTrue(bool condition, string format, T1 t1);
    public static void IsTrue(bool condition, string format, T1 t1, T2 t2);
    public static void IsTrue(bool condition, string format, T1 t1, T2 t2, T3 t3);
    public static void IsTrue(bool condition, string format, T1 t1, T2 t2, T3 t3, T4 t4);
    public static void IsTrue(bool condition, string format, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);
    public static void IsTrue(bool condition, string format, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6);
    public static void IsTrue(bool condition, string format, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7);
    public static void IsTrue(bool condition, string format, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8);
    public static void IsTrue(bool condition);
}
internal class System.Fabric.Common.RemoveReplicaAction : FabricTestAction`1<RemoveReplicaResult> {
    private static string TraceSource;
    [CompilerGeneratedAttribute]
private bool <ForceRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaSelector <ReplicaSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ReplicaId>k__BackingField;
    public bool ForceRemove { get; public set; }
    public ReplicaSelector ReplicaSelector { get; public set; }
    public CompletionMode CompletionMode { get; public set; }
    public string NodeName { get; public set; }
    public Nullable`1<Guid> PartitionId { get; public set; }
    public Nullable`1<long> ReplicaId { get; public set; }
    internal Type ActionHandlerType { get; }
    public RemoveReplicaAction(ReplicaSelector replicaSelector);
    [CompilerGeneratedAttribute]
public bool get_ForceRemove();
    [CompilerGeneratedAttribute]
public void set_ForceRemove(bool value);
    [CompilerGeneratedAttribute]
public ReplicaSelector get_ReplicaSelector();
    [CompilerGeneratedAttribute]
public void set_ReplicaSelector(ReplicaSelector value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
public void set_CompletionMode(CompletionMode value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ReplicaId();
    [CompilerGeneratedAttribute]
public void set_ReplicaId(Nullable`1<long> value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.ReportCompletionAction : FabricTestAction`1<ReportCompletionResult> {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    public string NodeName { get; public set; }
    public Guid PartitionId { get; public set; }
    public long ReplicaId { get; public set; }
    internal Type ActionHandlerType { get; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
public void set_ReplicaId(long value);
    internal virtual Type get_ActionHandlerType();
}
[ExtensionAttribute]
internal static class System.Fabric.Common.Requires : object {
    [ExtensionAttribute]
public static void ThrowIfNull(object argument, string argumentName);
    [ExtensionAttribute]
public static void ThrowIfNullOrWhiteSpace(string argument, string argumentName);
    public static void CheckUInt32ArgumentLimits(long argument, string argumentName);
    public static void CheckPercentageArgument(byte argument, string argumentName);
    [ExtensionAttribute]
private static void Throw(Exception exception);
    public static ArgumentRequirements`1<T> Argument(string name, T value);
}
internal class System.Fabric.Common.RestartDeployedCodePackageAction : FabricTestAction`1<RestartDeployedCodePackageResult> {
    private static string TraceSource;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CodePackageInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaSelector <ReplicaSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    public Uri ApplicationName { get; public set; }
    public string NodeName { get; public set; }
    public string ServiceManifestName { get; public set; }
    public string ServicePackageActivationId { get; public set; }
    public string CodePackageName { get; public set; }
    public long CodePackageInstanceId { get; public set; }
    public ReplicaSelector ReplicaSelector { get; public set; }
    public CompletionMode CompletionMode { get; public set; }
    internal Type ActionHandlerType { get; }
    public RestartDeployedCodePackageAction(string nodeName, Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, long codePackageInstanceId);
    public RestartDeployedCodePackageAction(Uri applicationName, ReplicaSelector replicaSelector);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
public void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
public void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public long get_CodePackageInstanceId();
    [CompilerGeneratedAttribute]
public void set_CodePackageInstanceId(long value);
    [CompilerGeneratedAttribute]
public ReplicaSelector get_ReplicaSelector();
    [CompilerGeneratedAttribute]
public void set_ReplicaSelector(ReplicaSelector value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
public void set_CompletionMode(CompletionMode value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.RestartDeployedCodePackageDescription2 : object {
    [CompilerGeneratedAttribute]
private RestartDeployedCodePackageDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public RestartDeployedCodePackageDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public RestartDeployedCodePackageDescription2(RestartDeployedCodePackageDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public RestartDeployedCodePackageDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(RestartDeployedCodePackageDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal enum System.Fabric.Common.RestartDeployedCodePackageDescriptionKind : Enum {
    public int value__;
    public static RestartDeployedCodePackageDescriptionKind Invalid;
    public static RestartDeployedCodePackageDescriptionKind UsingNodeName;
    public static RestartDeployedCodePackageDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.RestartDeployedCodePackageDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CodePackageInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    public string NodeName { get; internal set; }
    public Uri ApplicationName { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string CodePackageName { get; internal set; }
    public long CodePackageInstanceId { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public RestartDeployedCodePackageDescriptionUsingNodeName(string nodeName, Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, long codePackageInstanceId);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
internal void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public long get_CodePackageInstanceId();
    [CompilerGeneratedAttribute]
internal void set_CodePackageInstanceId(long value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static RestartDeployedCodePackageDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.RestartNodeAction : FabricTestAction`1<RestartNodeResult> {
    private static string TraceSource;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaSelector <ReplicaSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateFabricDump>k__BackingField;
    public string NodeName { get; public set; }
    public BigInteger NodeInstance { get; public set; }
    public ReplicaSelector ReplicaSelector { get; public set; }
    public CompletionMode CompletionMode { get; public set; }
    public bool CreateFabricDump { get; public set; }
    internal Type ActionHandlerType { get; }
    public RestartNodeAction(string nodeName, BigInteger nodeInstance);
    public RestartNodeAction(string nodeName, BigInteger nodeInstance, bool createFabricDump);
    public RestartNodeAction(ReplicaSelector replicaSelector);
    public RestartNodeAction(ReplicaSelector replicaSelector, bool createFabricDump);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
public void set_NodeInstance(BigInteger value);
    [CompilerGeneratedAttribute]
public ReplicaSelector get_ReplicaSelector();
    [CompilerGeneratedAttribute]
public void set_ReplicaSelector(ReplicaSelector value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
public void set_CompletionMode(CompletionMode value);
    [CompilerGeneratedAttribute]
public bool get_CreateFabricDump();
    [CompilerGeneratedAttribute]
public void set_CreateFabricDump(bool value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.RestartNodeDescription2 : object {
    [CompilerGeneratedAttribute]
private RestartNodeDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public RestartNodeDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public RestartNodeDescription2(RestartNodeDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public RestartNodeDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(RestartNodeDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal enum System.Fabric.Common.RestartNodeDescriptionKind : Enum {
    public int value__;
    public static RestartNodeDescriptionKind Invalid;
    public static RestartNodeDescriptionKind UsingNodeName;
    public static RestartNodeDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.RestartNodeDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateFabricDump>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    public string NodeName { get; internal set; }
    public BigInteger NodeInstance { get; internal set; }
    public bool ShouldCreateFabricDump { get; internal set; }
    public CompletionMode CompletionMode { get; internal set; }
    public RestartNodeDescriptionUsingNodeName(string nodeName, BigInteger nodeInstance, bool shouldCreateFabricDump, CompletionMode completionMode);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
internal void set_NodeInstance(BigInteger value);
    [CompilerGeneratedAttribute]
public bool get_ShouldCreateFabricDump();
    [CompilerGeneratedAttribute]
internal void set_ShouldCreateFabricDump(bool value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
internal void set_CompletionMode(CompletionMode value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static RestartNodeDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.RestartPartitionAction : FabricTestAction`1<RestartPartitionResult> {
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private RestartPartitionMode <RestartPartitionMode>k__BackingField;
    public PartitionSelector PartitionSelector { get; public set; }
    public RestartPartitionMode RestartPartitionMode { get; public set; }
    internal Type ActionHandlerType { get; }
    public RestartPartitionAction(PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    [CompilerGeneratedAttribute]
public RestartPartitionMode get_RestartPartitionMode();
    [CompilerGeneratedAttribute]
public void set_RestartPartitionMode(RestartPartitionMode value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.RestartReplicaAction : FabricTestAction`1<RestartReplicaResult> {
    [CompilerGeneratedAttribute]
private ReplicaSelector <ReplicaSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ReplicaId>k__BackingField;
    public ReplicaSelector ReplicaSelector { get; public set; }
    public CompletionMode CompletionMode { get; public set; }
    public string NodeName { get; public set; }
    public Nullable`1<Guid> PartitionId { get; public set; }
    public Nullable`1<long> ReplicaId { get; public set; }
    internal Type ActionHandlerType { get; }
    public RestartReplicaAction(ReplicaSelector replicaSelector);
    [CompilerGeneratedAttribute]
public ReplicaSelector get_ReplicaSelector();
    [CompilerGeneratedAttribute]
public void set_ReplicaSelector(ReplicaSelector value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
public void set_CompletionMode(CompletionMode value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ReplicaId();
    [CompilerGeneratedAttribute]
public void set_ReplicaId(Nullable`1<long> value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.SchemaLocation : object {
    private static string ServiceFabricSchemaFileName;
    public static string GetWindowsFabricSchemaLocation();
}
[AttributeUsageAttribute("64")]
internal class System.Fabric.Common.Serialization.DerivedTypeResolverAttribute : Attribute {
    private string resolverPropertyName;
    public string ResolverJsonPropertyName { get; }
    public DerivedTypeResolverAttribute(string resolverJsonPropertyName);
    public string get_ResolverJsonPropertyName();
}
[AttributeUsageAttribute("32767")]
internal class System.Fabric.Common.Serialization.JsonCustomizationAttribute : Attribute {
    private Nullable`1<int> appearanceOrder;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIgnored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonConverterTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReCreateMember>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultValueIgnored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvertAsJsonArray>k__BackingField;
    public string PropertyName { get; public set; }
    public bool IsIgnored { get; public set; }
    public string JsonConverterTypeName { get; public set; }
    public bool ReCreateMember { get; public set; }
    public int AppearanceOrder { get; public set; }
    public bool IsDefaultValueIgnored { get; public set; }
    public bool ConvertAsJsonArray { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIgnored();
    [CompilerGeneratedAttribute]
public void set_IsIgnored(bool value);
    [CompilerGeneratedAttribute]
public string get_JsonConverterTypeName();
    [CompilerGeneratedAttribute]
public void set_JsonConverterTypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReCreateMember();
    [CompilerGeneratedAttribute]
public void set_ReCreateMember(bool value);
    public int get_AppearanceOrder();
    public void set_AppearanceOrder(int value);
    public Nullable`1<int> GetAppearanceOrder();
    [CompilerGeneratedAttribute]
public bool get_IsDefaultValueIgnored();
    [CompilerGeneratedAttribute]
public void set_IsDefaultValueIgnored(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConvertAsJsonArray();
    [CompilerGeneratedAttribute]
public void set_ConvertAsJsonArray(bool value);
}
internal class System.Fabric.Common.Serialization.JsonPropertyNames : object {
    public static string ArmMetadata;
    public static string ArmResourceId;
    public static string Address;
    public static string ApplicationMetadata;
    public static string ApplicationHealthPolicy;
    public static string ApplicationHealthPolicyMap;
    public static string ApplicationIdentityReference;
    public static string ApplicationTypeBuildPath;
    public static string ApplicationTypeHealthPolicyMap;
    public static string ApplicationTypeMetadata;
    public static string ApplicationTypeProvisionTimestamp;
    public static string Async;
    public static string BufferedCapacity;
    public static string ClusterHealthPolicy;
    public static string ClusterUpgradeHealthPolicy;
    public static string CodePackageEntryPointStatistics;
    public static string CodeVersion;
    public static string ConfigurationVersion;
    public static string ConfigVersion;
    public static string CorrelationScheme;
    public static string CurrentConfigurationEpoch;
    public static string Count;
    public static string DataLossVersion;
    public static string DefaultParameterList;
    public static string Extensions;
    public static string HealthCheckRetryTimeoutInMilliseconds;
    public static string HealthCheckStableDurationInMilliseconds;
    public static string HealthCheckWaitDurationInMilliseconds;
    public static string UpgradeDurationInMilliseconds;
    public static string UpgradeDomainDurationInMilliseconds;
    public static string UpgradeSortOrder;
    public static string DomainName;
    public static string Id;
    public static string InitializationData;
    public static string InstanceId;
    public static string IpAddressOrFQDN;
    public static string Key;
    public static string Kind;
    public static string LastActivationTime;
    public static string LastExitTime;
    public static string LastSuccessfulActivationTime;
    public static string LastSuccessfulExitTime;
    public static string LoadMetricInformation;
    public static string LoadMetrics;
    public static string MainEntryPoint;
    public static string ManagedKeyVaultReferenceParameter;
    public static string ManagedKeyVaultReferenceParameterList;
    public static string ManifestVersion;
    public static string MaxNodeLoadId;
    public static string MinNodeLoadId;
    public static string Name;
    public static string Names;
    public static string NextActivationTime;
    public static string NodeDeactivationIntent;
    public static string NodeDeactivationDescription;
    public static string NodeDeactivationTask;
    public static string NodeDeactivationTaskType;
    public static string NodeDeactivationStatus;
    public static string NodeDeactivationTaskId;
    public static string NodeLoadMetricInformation;
    public static string NodeTypeHealthPolicyMap;
    public static string NodeUpTimeInSeconds;
    public static string ParameterName;
    public static string Parameters;
    public static string PartitionDescription;
    public static string PartitionId;
    public static string PartitionScheme;
    public static string PlacementConstraints;
    public static string RemainingBufferedCapacity;
    public static string RemainingUnbufferedCapacity;
    public static string ReplicaId;
    public static string ReportedLoad;
    public static string RollingUpgradeMode;
    public static string ServiceGroupMemberDescription;
    public static string ServiceGroupTypeMemberDescription;
    public static string ServiceKind;
    public static string ServiceLoadMetrics;
    public static string ServiceMetadata;
    public static string ServicePartitionKind;
    public static string ServicePlacementPolicies;
    public static string IsServiceDisabled;
    public static string DefaultMoveCost;
    public static string ServicePackageActivationMode;
    public static string DefaultLoad;
    public static string IsDefaultMoveCostSpecified;
    public static string IsIsSingletonReplicaMoveAllowedDuringUpgradeSpecified;
    public static string IsSingletonReplicaMoveAllowedDuringUpgrade;
    public static string IsRestoreReplicaLocationAfterUpgradeSpecified;
    public static string RestoreReplicaLocationAfterUpgrade;
    public static string InstanceLifecycleDescription;
    public static string ReplicaLifecycleDescription;
    public static string ServiceSensitivityDescription;
    public static string Status;
    public static string StatusDetails;
    public static string Type;
    public static string TypeName;
    public static string TypeVersion;
    public static string ServiceTags;
    public static string UpgradeDomainTimeoutInMilliseconds;
    public static string UpgradeKind;
    public static string UpgradeReplicaSetCheckTimeoutInSeconds;
    public static string ReplicaSetCheckTimeoutInMilliseconds;
    public static string InstanceCloseDelayDurationInSeconds;
    public static string UpgradeTimeoutInMilliseconds;
    public static string Version;
    public static string StoreRelativePath;
    public static string FileCount;
    public static string FileSize;
    public static string FileVersion;
    public static string ModifiedDate;
    public static string VersionNumber;
    public static string EpochDataLossNumber;
    public static string StoreFiles;
    public static string StoreFolders;
    public static string RemoteLocation;
    public static string StartPosition;
    public static string EndPosition;
    public static string SessionId;
    public static string ExpectedRanges;
    public static string UploadSessions;
    public static string ContinuationToken;
    public static string NetworkType;
    public static string NetworkName;
    public static string NetworkConfiguration;
    public static string NetworkAddressPrefix;
    public static string NetworkStatus;
    public static string ApplicationNetworkType;
    public static string NetworkDescription;
    public static string ServiceNetworkType;
    public static string ApplicationNetwork;
    public static string ServiceNetwork;
    public static string SectionName;
    public static string ParameterValue;
    public static string ServiceHostUpgradeImpact;
    public static string ValidationDetails;
}
public enum System.Fabric.Common.ServiceFabricRole : Enum {
    public int value__;
    public static ServiceFabricRole None;
    public static ServiceFabricRole UserClient;
    public static ServiceFabricRole AdminClient;
    public static ServiceFabricRole ElevatedAdminClient;
    public static ServiceFabricRole Server;
    public static ServiceFabricRole Cluster;
}
internal class System.Fabric.Common.ServiceQueryClient : object {
    private static string TraceSource;
    internal static TimeSpan RequestTimeoutDefault;
    internal static TimeSpan RetryWaitTimeoutDefault;
    private static string SystemApplicationName;
    private Uri serviceName;
    private bool isSystemService;
    private ValidationCheckFlag checkFlags;
    private TimeSpan operationTimeout;
    private TimeSpan requestTimeout;
    private SemaphoreSlim asyncMutex;
    private SynchronizedModifyOnce`1<bool> isStateful;
    private SynchronizedModifyOnce`1<int> partitionCount;
    private SynchronizedModifyOnce`1<int> targetReplicaSetSize;
    [CompilerGeneratedAttribute]
private FabricTestContext <TestContext>k__BackingField;
    private FabricTestContext TestContext { get; private set; }
    public ServiceQueryClient(Uri serviceName, FabricTestContext testContext, ValidationCheckFlag checkFlags, TimeSpan operationTimeout, TimeSpan requestTimeout);
    private static ServiceQueryClient();
    [CompilerGeneratedAttribute]
private FabricTestContext get_TestContext();
    [CompilerGeneratedAttribute]
private void set_TestContext(FabricTestContext value);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<GetPartitionsAsync>d__18")]
public Task`1<ServicePartitionList> GetPartitionsAsync(CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<GetReplicasAsync>d__19")]
public Task`1<ServiceReplicaList> GetReplicasAsync(Guid partitionId, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<ValidateHealthAsync>d__20")]
public Task ValidateHealthAsync(TimeSpan maximumStabilizationTimeout, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<ValidateHealthAsync>d__21")]
public Task ValidateHealthAsync(TimeSpan maximumStabilizationTimeout, TimeSpan retryWait, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<ValidateHealthWithReportAsync>d__22")]
public Task`1<ValidationReport> ValidateHealthWithReportAsync(TimeSpan maximumStabilizationTimeout, TimeSpan retryWait, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<GetUnhealthyItemsAsync>d__23")]
private Task`1<string> GetUnhealthyItemsAsync(ServiceHealth serviceHealth, TimeoutHelper timer, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<EnsureStabilityAsync>d__24")]
public Task EnsureStabilityAsync(TimeSpan maximumStabilizationTimeout, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<EnsureStabilityAsync>d__25")]
public Task EnsureStabilityAsync(TimeSpan maximumStabilizationTimeout, TimeSpan retryWait, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<EnsureStabilityWithReportAsync>d__26")]
public Task`1<ValidationReport> EnsureStabilityWithReportAsync(TimeSpan maximumStabilizationTimeout, TimeSpan retryWait, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<QueryPartitionAndReplicaResultAsyncStateful>d__27")]
public Task`1<Dictionary`2<Partition, StatefulServiceReplica[]>> QueryPartitionAndReplicaResultAsyncStateful(CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<QueryPartitionAndReplicaResultAsyncStateless>d__28")]
public Task`1<Dictionary`2<Partition, StatelessServiceInstance[]>> QueryPartitionAndReplicaResultAsyncStateless(TimeSpan timeout, CancellationToken ct);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<QueryLocationsAsync>d__29")]
public Task`1<Dictionary`2<Partition, Replica[]>> QueryLocationsAsync(CancellationToken ct);
    private int GetExpectedReplicaSetSize(IEnumerable`1<NodeInfo> nodes);
    private bool CheckReplicaSetSize(Guid partitionId, int actual, DateTime startTime, IEnumerable`1<NodeInfo> nodes, StringBuilder errorString);
    private bool ValidatePartitionCount(int totalPartitionsFound);
    [AsyncStateMachineAttribute("System.Fabric.Common.ServiceQueryClient/<LoadPartitionAndReplicaCountAsync>d__33")]
private Task LoadPartitionAndReplicaCountAsync(CancellationToken ct);
}
internal class System.Fabric.Common.StartNodeAction : FabricTestAction`1<StartNodeResult> {
    private static string TraceSource;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPAddressOrFQDN>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClusterConnectionPort>k__BackingField;
    public string NodeName { get; public set; }
    public BigInteger NodeInstance { get; public set; }
    public CompletionMode CompletionMode { get; public set; }
    public string IPAddressOrFQDN { get; public set; }
    public int ClusterConnectionPort { get; public set; }
    internal Type ActionHandlerType { get; }
    public StartNodeAction(string nodeName, BigInteger nodeInstance);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
public void set_NodeInstance(BigInteger value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
public void set_CompletionMode(CompletionMode value);
    [CompilerGeneratedAttribute]
public string get_IPAddressOrFQDN();
    [CompilerGeneratedAttribute]
public void set_IPAddressOrFQDN(string value);
    [CompilerGeneratedAttribute]
public int get_ClusterConnectionPort();
    [CompilerGeneratedAttribute]
public void set_ClusterConnectionPort(int value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.StartNodeDescription2 : object {
    [CompilerGeneratedAttribute]
private StartNodeDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public StartNodeDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public StartNodeDescription2(StartNodeDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public StartNodeDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(StartNodeDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static StartNodeDescription2 CreateFromNative(IntPtr nativeRaw);
}
internal enum System.Fabric.Common.StartNodeDescriptionKind : Enum {
    public int value__;
    public static StartNodeDescriptionKind Invalid;
    public static StartNodeDescriptionKind UsingNodeName;
    public static StartNodeDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.StartNodeDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddressOrFQDN>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClusterConnectionPort>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    public string NodeName { get; internal set; }
    public BigInteger NodeInstance { get; internal set; }
    public string IpAddressOrFQDN { get; internal set; }
    public int ClusterConnectionPort { get; internal set; }
    public CompletionMode CompletionMode { get; internal set; }
    public StartNodeDescriptionUsingNodeName(string nodeName, BigInteger nodeInstance, string ipAddressOrFQDN, int clusterConnectionPort, CompletionMode completionMode);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
internal void set_NodeInstance(BigInteger value);
    [CompilerGeneratedAttribute]
public string get_IpAddressOrFQDN();
    [CompilerGeneratedAttribute]
internal void set_IpAddressOrFQDN(string value);
    [CompilerGeneratedAttribute]
public int get_ClusterConnectionPort();
    [CompilerGeneratedAttribute]
internal void set_ClusterConnectionPort(int value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
internal void set_CompletionMode(CompletionMode value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static StartNodeDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.StopNodeAction : FabricTestAction`1<StopNodeResult> {
    private static string TraceSource;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    public string NodeName { get; public set; }
    public BigInteger NodeInstance { get; public set; }
    public CompletionMode CompletionMode { get; public set; }
    internal Type ActionHandlerType { get; }
    public StopNodeAction(string nodeName, BigInteger nodeInstance);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
public void set_NodeInstance(BigInteger value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
public void set_CompletionMode(CompletionMode value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.StopNodeDescription2 : object {
    [CompilerGeneratedAttribute]
private StopNodeDescriptionKind <DescriptionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public StopNodeDescriptionKind DescriptionKind { get; internal set; }
    public object Value { get; internal set; }
    public StopNodeDescription2(StopNodeDescriptionKind descriptionKind, object value);
    [CompilerGeneratedAttribute]
public StopNodeDescriptionKind get_DescriptionKind();
    [CompilerGeneratedAttribute]
internal void set_DescriptionKind(StopNodeDescriptionKind value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static StopNodeDescription2 CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Common.StopNodeDescriptionInternal : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StopDurationInSeconds>k__BackingField;
    public string NodeName { get; private set; }
    public BigInteger NodeInstance { get; private set; }
    public int StopDurationInSeconds { get; private set; }
    public StopNodeDescriptionInternal(string nodeName, BigInteger nodeInstance, int stopDurationInSeconds);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
private void set_NodeInstance(BigInteger value);
    [CompilerGeneratedAttribute]
public int get_StopDurationInSeconds();
    [CompilerGeneratedAttribute]
private void set_StopDurationInSeconds(int value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static StopNodeDescriptionInternal CreateFromNative(IntPtr nativeRaw);
}
internal enum System.Fabric.Common.StopNodeDescriptionKind : Enum {
    public int value__;
    public static StopNodeDescriptionKind Invalid;
    public static StopNodeDescriptionKind UsingNodeName;
    public static StopNodeDescriptionKind UsingReplicaSelector;
}
internal class System.Fabric.Common.StopNodeDescriptionUsingNodeName : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionMode <CompletionMode>k__BackingField;
    public string NodeName { get; internal set; }
    public BigInteger NodeInstance { get; internal set; }
    public CompletionMode CompletionMode { get; internal set; }
    public StopNodeDescriptionUsingNodeName(string nodeName, BigInteger nodeInstance, CompletionMode completionMode);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
internal void set_NodeInstance(BigInteger value);
    [CompilerGeneratedAttribute]
public CompletionMode get_CompletionMode();
    [CompilerGeneratedAttribute]
internal void set_CompletionMode(CompletionMode value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static StopNodeDescriptionUsingNodeName CreateFromNative(IntPtr nativeRaw);
}
internal static class System.Fabric.Common.StringHelper : object {
    public static string Format(string messageFormat, Object[] args);
}
internal class System.Fabric.Common.SynchronizedBufferPool`1 : object {
    private static int MaxSize;
    private Func`1<T> itemFactory;
    private SynchronizedPool`1<T> innerPool;
    public SynchronizedBufferPool`1(Func`1<T> itemFactory, int limit);
    public void OnClear();
    public T Take();
    internal void Return(T item);
}
internal class System.Fabric.Common.SynchronizedPool`1 : object {
    private static int maxPendingEntries;
    private static int maxPromotionFailures;
    private static int maxReturnsBeforePromotion;
    private static int maxThreadItemsPerProcessor;
    private Entry[] entries;
    private GlobalPool<T> globalPool;
    private int maxCount;
    private PendingEntry[] pending;
    private int promotionFailures;
    private object ThisLock { get; }
    public SynchronizedPool`1(int maxCount);
    private object get_ThisLock();
    public void Clear();
    private void HandlePromotionFailure(int thisThreadID);
    private bool PromoteThread(int thisThreadID);
    private void RecordReturnToGlobalPool(int thisThreadID);
    private void RecordTakeFromGlobalPool(int thisThreadID);
    public bool Return(T value);
    private bool ReturnToPerThreadPool(int thisThreadID, T value);
    private bool ReturnToGlobalPool(int thisThreadID, T value);
    public T Take();
    private T TakeFromPerThreadPool(int thisThreadID);
    private T TakeFromGlobalPool(int thisThreadID);
}
internal class System.Fabric.Common.TempDirectory : object {
    private static UInt32 DefaultRetryCount;
    private UInt32 deleteRetryCount;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    public string FullPath { get; }
    public TempDirectory(UInt32 deleteRetryCount);
    public TempDirectory(string workingDirectory, UInt32 deleteRetryCount);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <Dispose>b__7_0();
}
internal class System.Fabric.Common.TempFile : object {
    private static UInt32 DefaultRetryCount;
    private UInt32 deleteRetryCount;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    public string FullPath { get; }
    public TempFile(UInt32 deleteRetryCount);
    public TempFile(string workingDirectory, UInt32 deleteRetryCount);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <Dispose>b__7_0();
}
internal static class System.Fabric.Common.TemplateHelper : object {
    public static string ApplyTemplate(string templatedData, NameValueCollection collection);
}
internal static class System.Fabric.Common.TestabilityTrace : object {
    private static ExtensionsEvents traceSource;
    public static ExtensionsEvents TraceSource { get; }
    private static TestabilityTrace();
    public static ExtensionsEvents get_TraceSource();
}
internal static class System.Fabric.Common.ThrowIf : object {
    public static void OutOfRange(TValue value, TValue min, TValue max, string name);
    public static TValue Null(TValue value, string name);
    public static void NotEqual(string actual, string expected);
    public static void NotEqual(T actual, T expected, string messsage);
    public static void Equal(T actual, T unexpected, string message);
    public static void Fail(string format, Object[] args);
    public static void IsTrue(bool condition, string format, Object[] args);
    public static void IsFalse(bool condition, string format, Object[] args);
    public static void NullOrEmpty(string value, string name);
    public static void NullOrEmpty(IEnumerable`1<TItem> items, string name);
    public static void Empty(Guid value, string name);
}
internal class System.Fabric.Common.TimeoutHelper : object {
    private DateTime deadline;
    public TimeoutHelper(TimeSpan timeout);
    public static bool HasExpired(TimeoutHelper timeoutHelper);
    public TimeSpan GetRemainingTime();
    public void ThrowIfExpired();
}
internal class System.Fabric.Common.Tracing.AgeBasedCache`2 : object {
    public static int MaxCacheCount;
    public static int DefaultCleanupDurationInSec;
    public static int MaxNoActivityLifeSpanForTimerInSec;
    private static AgeBasedCache`2 modreq(System.Runtime.CompilerServices.IsVolatile) singleInstance;
    private static object syncRoot;
    private TimeSpan noActivityLifeSpanForTimer;
    private bool disposed;
    private DateTimeOffset lastTimeOfAddOrUpdateToCache;
    private IDictionary`2<TKey, CacheValue`1<TKey, TValue, TValue>> store;
    private Timer clearCacheTimer;
    private ReaderWriterLockSlim rwLock;
    private TimeSpan cacheCleanDuration;
    private Action onTimerInactivated;
    public static AgeBasedCache`2<TKey, TValue> DefaultInstance { get; }
    public long Count { get; }
    private AgeBasedCache`2(TimeSpan durationBetweenCacheCleans, TimeSpan maxTimerInactivity, Action timerInactivated);
    private static AgeBasedCache`2();
    public static AgeBasedCache`2<TKey, TValue> get_DefaultInstance();
    internal static AgeBasedCache`2<TKey, TValue> CreateInstanceForTestingOnly(TimeSpan durationBetweenCacheCleans, TimeSpan maxTimerInactivity, Action timerInactivated);
    public sealed virtual bool TryAddOrUpdate(TKey key, TValue value, TimeSpan itemLife, Action`1<TValue> onExpireCallback);
    public sealed virtual void RemoveIfPresent(TKey key);
    public sealed virtual long get_Count();
    public sealed virtual void Clear();
    private void RemoveExpiredValues(object state);
    private void RemoveUnlocked(TKey key);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal enum System.Fabric.Common.Tracing.EventChannel : Enum {
    public byte value__;
    public static EventChannel Admin;
    public static EventChannel Operational;
    public static EventChannel Analytic;
    public static EventChannel Debug;
    public static EventChannel Audit;
    public static EventChannel Telemetry;
}
internal class System.Fabric.Common.Tracing.EventConstants : object {
    public static string AnalysisCategory;
    public static string ChaosCategory;
    public static string CorrelationCategory;
    public static string LifeCycle;
    public static string FailureCategory;
}
internal class System.Fabric.Common.Tracing.EventData : ValueType {
    internal ulong DataPointer;
    internal UInt32 Size;
    internal int Reserved;
}
internal class System.Fabric.Common.Tracing.EventDataArrayBuilder : ValueType {
    internal static int TraceEventMaximumSize;
    internal static int BasicTypeAllocationBufferSize;
    private EventData* eventData;
    private UInt32 totalEventSize;
    private EventData* eventDataPtr;
    private Byte* currentBuffer;
    internal EventDataArrayBuilder(EventData* eventData, Byte* dataBuffer);
    internal void AddEventData(Variant variant);
    private void AddStringEventData(Variant variant, int index);
    internal bool AddEventDataWithTruncation(int argCount, Variant& v1, Variant& v2, Variant& v3, Variant& v4, Variant& v5, Variant& v6, Variant& v7, Variant& v8, Variant& v9, Variant& v10, Variant& v11, Variant& v12, Variant& v13, Variant& v14, Variant& v15, Variant& v16);
    private void RemoveStringEventData(int index);
    internal bool TruncateStringVariants(Variant& v0, Variant& v1, Variant& v2, Variant& v3, Variant& v4, Variant& v5, Variant& v6, Variant& v7, Variant& v8, Variant& v9, Variant& v10, Variant& v11, Variant& v12, Variant& v13, Variant& v14, Variant& v15);
    internal EventData* ToEventDataArray(Char* v0, Char* v1, Char* v2, Char* v3, Char* v4, Char* v5, Char* v6, Char* v7, Char* v8, Char* v9, Char* v10, Char* v11, Char* v12, Char* v13, Char* v14, Char* v15);
    internal bool IsValid();
    private void SetStringDataPointers(Char* v0, Char* v1, Char* v2, Char* v3, Char* v4, Char* v5, Char* v6, Char* v7, Char* v8, Char* v9, Char* v10, Char* v11, Char* v12, Char* v13, Char* v14, Char* v15);
    private static void EncodeVariant(Variant data, EventData* dataDescriptor, Byte* dataBuffer);
    private int GetAverageStringVariantLength(Variant& v0, Variant& v1, Variant& v2, Variant& v3, Variant& v4, Variant& v5, Variant& v6, Variant& v7, Variant& v8, Variant& v9, Variant& v10, Variant& v11, Variant& v12, Variant& v13, Variant& v14, Variant& v15);
    private void TruncateStringVariant(Variant& v, int index, int averageStringVariantLength);
    private int GetOverflow();
}
[AttributeUsageAttribute("64")]
internal class System.Fabric.Common.Tracing.EventExtendedMetadataAttribute : Attribute {
    public static IList`1<MetadataField> MetadataFields;
    [CompilerGeneratedAttribute]
private TableEntityKind <TableEntityKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicEventName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    public TableEntityKind TableEntityKind { get; public set; }
    public string PublicEventName { get; public set; }
    public string Category { get; public set; }
    public EventExtendedMetadataAttribute(TableEntityKind table, string publicEventName, string category);
    private static EventExtendedMetadataAttribute();
    [CompilerGeneratedAttribute]
public TableEntityKind get_TableEntityKind();
    [CompilerGeneratedAttribute]
public void set_TableEntityKind(TableEntityKind value);
    [CompilerGeneratedAttribute]
public string get_PublicEventName();
    [CompilerGeneratedAttribute]
public void set_PublicEventName(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
}
internal class System.Fabric.Common.Tracing.EventProviderManifestGenerator : object {
    private StringBuilder eventsSection;
    private StringBuilder templatesSection;
    private StringBuilder mapsSection;
    private StringBuilder tasksSection;
    private StringBuilder keywordsSection;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFile>k__BackingField;
    private Dictionary`2<UInt32, Dictionary`2<string, UInt32>> stringTable;
    public Guid Guid { get; }
    public string Name { get; }
    public string Message { get; }
    public string Symbol { get; }
    public string TargetFile { get; }
    public StringBuilder EventsSectionWriter { get; }
    public StringBuilder TemplatesSectionWriter { get; }
    public StringBuilder MapsSectionWriter { get; }
    public StringBuilder TasksSectionWriter { get; }
    public StringBuilder KeywordsSectionWriter { get; }
    public EventProviderManifestGenerator(Guid guid, string name, string message, string symbol, string targetFile);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
public string get_TargetFile();
    public StringBuilder get_EventsSectionWriter();
    public StringBuilder get_TemplatesSectionWriter();
    public StringBuilder get_MapsSectionWriter();
    public StringBuilder get_TasksSectionWriter();
    public StringBuilder get_KeywordsSectionWriter();
    public string StringResource(string original);
    internal void WriteContents(TextWriter writer);
    internal void WriteChannels(TextWriter writer);
}
[EventSourceAttribute]
internal class System.Fabric.Common.Tracing.FabricEvents : FabricEventSource {
    public static EventTask EventSourceTaskId;
    private static Lazy`1<FabricEvents> SingletonEvents;
    [CompilerGeneratedAttribute]
private static IVariantEventWriter <VariantEventWriterOverride>k__BackingField;
    internal static string ProviderName { get; }
    internal static string ProviderMessage { get; }
    internal static string ProviderSymbol { get; }
    internal static Guid ProviderId { get; }
    internal static string TraceManifestAssemblyName { get; }
    internal static bool IsRunningAsManagedSystemService { get; }
    public static FabricEvents Events { get; }
    private static IVariantEventWriter VariantEventWriterOverride { get; public set; }
    private static FabricEvents();
    internal static string get_ProviderName();
    internal static string get_ProviderMessage();
    internal static string get_ProviderSymbol();
    internal static Guid get_ProviderId();
    internal static string get_TraceManifestAssemblyName();
    internal static bool get_IsRunningAsManagedSystemService();
    internal static string GetManagedClusterName();
    public static FabricEvents get_Events();
    [CompilerGeneratedAttribute]
public static void set_VariantEventWriterOverride(IVariantEventWriter value);
    [CompilerGeneratedAttribute]
private static IVariantEventWriter get_VariantEventWriterOverride();
    [ProvisionalMetadataAttribute]
[EventAttribute("23060")]
public void TestProvisionalTraceChainStart(int arg1, string arg2);
    [ProvisionalMetadataAttribute]
[EventAttribute("23063")]
public void TestProvisionalTraceChainEnd(int arg1, string arg2, string arg3);
    [EventAttribute("23064")]
public void ServicePackageActivatedNotifyDca(int version, string nodeName, string runLayoutRoot, string applicationId, string applicationVersion, string servicePackageName, string servicePackageVersion);
    [EventAttribute("23065")]
public void ServicePackageDeactivatedNotifyDca(int version, string nodeName, string applicationId, string servicePackageName);
    [EventAttribute("23066")]
public void ServicePackageUpgradedNotifyDca(int version, string nodeName, string runLayoutRoot, string applicationId, string applicationVersion, string servicePackageName, string servicePackageVersion);
    [EventAttribute("23067")]
public void TestStructuredTrace0();
    [EventAttribute("23068")]
public void TestStructuredTrace1(int arg1);
    [EventAttribute("23069")]
public void TestStructuredTrace2(int arg1, string arg2);
    [EventAttribute("23070")]
public void TestStructuredTrace3(int arg1, string arg2, DateTime arg3);
    [EventAttribute("23071")]
public void TestStructuredTrace4(int arg1, string arg2, DateTime arg3, Guid arg4);
    [EventAttribute("23072")]
public void TestStructuredTrace5(int arg1, string arg2, DateTime arg3, Guid arg4, ulong arg5);
    [EventAttribute("23073")]
public void TestStructuredTrace6(int arg1, string arg2, DateTime arg3, Guid arg4, ulong arg5, byte arg6);
    [EventAttribute("23074")]
public void TestStructuredTrace7(int arg1, string arg2, DateTime arg3, Guid arg4, ulong arg5, byte arg6, bool arg7);
    [EventAttribute("23075")]
public void TestStructuredTrace8(int arg1, string arg2, DateTime arg3, Guid arg4, ulong arg5, byte arg6, bool arg7, short arg8);
    [EventAttribute("59908")]
public void PluginDisposed(string SectionName);
    [EventAttribute("59909")]
public void ServicePackageInactive(int version, string nodeName, string applicationId, string servicePackageName);
    [EventAttribute("59910")]
public void WindowsFabricCrashDumpFound(string id);
    [EventAttribute("59911")]
public void PluginConfigurationTelemetry(long pluginsEnabled);
    [EventAttribute("59912")]
public void AppPluginConfigurationTelemetry(string applicationInstanceIdHash, long pluginsEnabled);
    [EventAttribute("59913")]
public void DiskSpaceManagerGlobalPolicyStats(bool isSafeDeletion, long deleteSuccessfulFiles, long deleteAttemptedFiles, long bytesDeleted, long bytesGoal, double oldestFileInMinutes);
    [EventAttribute("59914")]
public void EtlPassPerformance(string traceType, double passTimeInSeconds, long etwEventsProcessed);
    [EventAttribute("59915")]
public void EtlPassBacklogPerformance(string traceType, long backlogSize);
    [EventAttribute("59916")]
public void TraceSessionStats(string traceSessionName, long eventsLostCount, DateTime startTime, DateTime endTime);
    [EventAttribute("59917")]
public void DCAException(string exceptionIdentifier);
    [EventAttribute("59918")]
public void DCAUnhandledException(string exceptionTypeName, string exceptionInformation);
    [EventAttribute("59919")]
public void DiskSpaceManagerDiskUsage(string user, string folderName, long totalSize);
    [EventAttribute("59920")]
public void DCAPerformanceTelemetry(double cpuUsage, double memoryUsageInMB);
    [EventAttribute("59921")]
public void DCAHandledException(string src, string exMessage);
    [EventAttribute("59922")]
public void DCADotNetStuckTimersDetected(int currentTickCount, int lastTimerFired);
    [EventAttribute("59923")]
public void ROSCrashDumpFound(string id);
    [EventAttribute("61700")]
public void Initialize_DistributedDictionary(string id, string keyType, string valueType, string keySerializerType, string valueSerializerType, string behavior);
    [EventAttribute("61957")]
public void Initialize_DistributedQueue(string id, string keySerializerType, string valueType, string valueSerializerType);
    [EventAttribute("61958")]
public void EnqueueAsync(string id, long transactionId, long tailPointer);
    [EventAttribute("61959")]
public void DequeueAsync(string id, long transactionId, long headPointer);
    [EventAttribute("61960")]
public void GetCountAsync(string id, long transactionId, long count);
    [EventAttribute("61961")]
public void EnqueueAsyncCompensationFailed(string id, long transactionId, long tailPointer, string exception);
    [EventAttribute("61962")]
public void DequeueAsyncCompensationFailed(string id, long transactionId, long headPointer, string exception);
    [EventAttribute("62469")]
public void CreateStream(string id, string StreamName, string Quota, string Target, string StreamId);
    [EventAttribute("62470")]
public void DuplicateStreamName(string id, string StreamName, string Target, string StreamId);
    [EventAttribute("62471")]
public void InboundStreamRequested(string id, string StreamName, string StreamId, string Source);
    [EventAttribute("62472")]
public void CompleteOpenStreamProtocol(string id, string StreamId, string Response);
    [EventAttribute("62473")]
public void CompleteCloseStreamProtocol(string id, string StreamId, string Response);
    [EventAttribute("62474")]
public void RegisterInboundStream(string id, string StreamName, string StreamId, string Source);
    [EventAttribute("62475")]
public void ResetPartnerStreams(string id, string Partner);
    [EventAttribute("62476")]
public void PausePartnerStreams(string id, string Partner);
    [EventAttribute("62477")]
public void RestartPartnerStreams(string id, string Partner);
    [EventAttribute("62478")]
public void RecoverPartnerStreams(string id, string PartitionKey);
    [EventAttribute("62481")]
public void SendingResetPartnerStreams(string id, string Partner);
    [EventAttribute("62482")]
public void GetLastSequenceNumberSent(string id, string StreamId, long SequenceNumber);
    [EventAttribute("62484")]
public void GetAcceptanceOutcome(string id, string StreamId, string Acceptance);
    [EventAttribute("62485")]
public void OpenStream(string id, string StreamId, string Target);
    [EventAttribute("62486")]
public void CloseStream(string id, string StreamId);
    [EventAttribute("62487")]
public void OpenStreamFailure(string id, string StreamId, string Target);
    [EventAttribute("62488")]
public void CloseStreamFailure(string id, string StreamId);
    [EventAttribute("62489")]
public void Receive(string id, string StreamId, long SequenceNumber, string TransactionId);
    [EventAttribute("62490")]
public void Send(string id, string StreamId, long SequenceNumber, string TransactionId);
    [EventAttribute("62491")]
public void OpenRequestSent(string id, string StreamId);
    [EventAttribute("62492")]
public void CloseRequestSent(string id, string StreamId, long SequenceNumber);
    [EventAttribute("62493")]
public void AckReceived(string id, string StreamId, long SequenceNumber);
    [EventAttribute("62494")]
public void WireMessageReceived(string id, string StreamId, long SequenceNumber, string MessageKind);
    [EventAttribute("62495")]
public void WireMessageSent(string id, string StreamId, long SequenceNumber, string MessageKind);
    [EventAttribute("62496")]
public void DataMessageDelivery(string id, string StreamId, long SequenceNumber, string TransactionId);
    [EventAttribute("62497")]
public void MessageDroppedAsDuplicate(string id, string StreamId, long SequenceNumber);
    [EventAttribute("62498")]
public void CompleteOpenStream(string id, string StreamId, string Response);
    [EventAttribute("62499")]
public void CompleteCloseStream(string id, string StreamId, string Response);
    [EventAttribute("62500")]
public void SyncPointWait(string id, string Key, string Timeout);
    [EventAttribute("62501")]
public void CloseInboundStream(string id, string StreamId, long SequenceNumber, string TransactionId);
    [EventAttribute("62502")]
public void InboundStreamClosed(string id, string StreamId, long SequenceNumber);
    [EventAttribute("62503")]
public void SetCloseMessageSequenceNumber(string id, string StreamId, long SequenceNumber, string TransactionId);
    [EventAttribute("62504")]
public void NotPrimaryException(string id, string StreamId, string TransactionId);
    [EventAttribute("62505")]
public void ReceiveFailure(string id, string StreamId, long SequenceNumber, string TransactionId);
    [EventAttribute("62506")]
public void SendFailure(string id, string StreamId, long SequenceNumber, string TransactionId);
    [EventAttribute("62507")]
public void Pause(string id, string StreamId, string State);
    [EventAttribute("62508")]
public void OpenOnRestart(string id, string StreamId);
    [EventAttribute("62509")]
public void CloseOnRestart(string id, string StreamId);
    [EventAttribute("62510")]
public void RestartOutbound(string id, string StreamId, string State);
    [EventAttribute("62511")]
public void RestartInbound(string id, string StreamId, string State);
    [EventAttribute("62512")]
public void DeleteEndpointProperty(string id, string PartitionKey);
    [EventAttribute("62513")]
public void RegisterEndpointProperty(string id, string PartitionKey, string PartitionInfo);
    [EventAttribute("62514")]
public void GetEndpointProperty(string id, string PartitionKey, string Endpoint);
    [EventAttribute("62515")]
public void SetupSession(string id, string PartitionKey, string Endpoint, string SessionId);
    [EventAttribute("62516")]
public void ClearOutboundSession(string id, string PartitionKey, string SessionId);
    [EventAttribute("62517")]
public void AcceptInboundSession(string id, string PartitionKey, string SessionId);
    [EventAttribute("62518")]
public void FindOrCreateOutboundSession(string id, string PartitionKey, string SessionId);
    [EventAttribute("62519")]
public void SessionAbortedByPartner(string id, string PartitionKey, string SessionId);
    [EventAttribute("62520")]
public void ResolveTargetPartition(string id, string BaseKey, string ResolvedKey);
    [EventAttribute("62521")]
public void FindOrCreateOutboundSessionDriver(string id, string PartitionKey);
    [EventAttribute("62522")]
public void ClearOutboundSessionDriver(string id, string PartitionKey);
    [EventAttribute("62523")]
public void SessionSendFailure(string id, string SessionId);
    [EventAttribute("62524")]
public void SessionReceiveFailure(string id, string SessionId);
    [EventAttribute("62525")]
public void StreamNotFoundForInboundWireMessage(string id, string StreamId, long SequenceNumber, string MessageKind);
    [EventAttribute("62526")]
public void ReplicatorTransactionTransientException(string id, string Context, string TransactionId);
    [EventAttribute("62527")]
public void GetStreamParameterException(string id, string Context);
    [EventAttribute("62528")]
public void ChangeRole_ReliableStream(string id, string OldRole, string NewRole, string Era);
    [EventAttribute("62529")]
public void OpenStreamManager(string id, string Role, string Era);
    [EventAttribute("62530")]
public void CloseStreamManager(string id, string Role, string Era);
    [EventAttribute("62531")]
public void AbortStreamManager(string id, string Role, string Era);
    [EventAttribute("62532")]
public void ChangeRoleSetEventFailure(string id, string Context, string Era);
    [EventAttribute("62533")]
public void StartAsPrimary(string id, string Era);
    [EventAttribute("62534")]
public void RegisterStores(string id, string Era);
    [EventAttribute("62535")]
public void Register(string id, string Era);
    [EventAttribute("62536")]
public void InitializeCommunication(string id, string Era);
    [EventAttribute("62537")]
public void ShutdownCommunication(string id, string Role);
    [EventAttribute("62538")]
public void GetSingletonStreamManager(string id, string Era);
    [EventAttribute("62539")]
public void DeleteStream(string id, string StreamId);
    [EventAttribute("62540")]
public void DeleteStreamFailure(string id, string StreamId);
    [EventAttribute("62541")]
public void DeleteOnRestart(string id, string StreamId);
    [EventAttribute("62542")]
public void DeleteOutboundStreamFromConsolidatedStore(string id, string StreamId);
    [EventAttribute("62543")]
public void DeleteInboundStreamFromConsolidatedStore(string id, string StreamId);
    [EventAttribute("62544")]
public void CompleteDeleteStreamProtocol(string id, string StreamId, string Response);
    [EventAttribute("62545")]
public void CompleteDeleteStream(string id, string StreamId, string Response);
    [EventAttribute("62546")]
public void DeleteInboundStreamRequested(string id, string StreamId, string Source);
    [EventAttribute("62547")]
public void DeleteInboundStream(string id, string StreamId);
    [EventAttribute("62548")]
public void DeleteRequestSent(string id, string StreamId);
    [EventAttribute("62549")]
public void OutboundStreamDeleted(string id, string StreamId);
    [EventAttribute("62550")]
public void GetOutboundStream(string id, string Era, string Stream);
    [EventAttribute("62551")]
public void GetInboundStream(string id, string Era, string Stream);
    [EventAttribute("62552")]
public void GetDeleteSequenceNumber(string id, string StreamId, long DeleteSequenceNumber);
    [EventAttribute("62553")]
public void DoesOutboundStreamExistsInConsolidatedStore(string id, string Era, string Stream);
    [EventAttribute("61688")]
public void PreloadValues(string id, int numberOfParallelTasks, bool isStarting, long durationInMs);
    [EventAttribute("61689")]
public void RebuildNotification(string id, bool isStarting, long durationInMs);
    [EventAttribute("61690")]
public void CreateComponentEnumerableAsync(string id, long txnId, byte isolationLevel, int readMode, long visibilitySequenceNumber);
    [EventAttribute("61691")]
public void PrepareCheckpointAsyncCompleted(string id, long count);
    [EventAttribute("61693")]
public void CompleteCheckpointAsync(string id, string message);
    [EventAttribute("61694")]
public void CompleteCheckpointAsyncWarning(string id, long totalInMs, long replaceTimeInMs, long swapTimeInMs, long computeTimeInMs, long deleteTimeInMs);
    [EventAttribute("61695")]
public void CompleteCheckpointAsyncCompleted(string id, long totalInMs, long replaceTimeInMs, long swapTimeInMs, long computeTimeInMs, long deleteTimeInMs);
    [EventAttribute("61444")]
public void Constructor(string id, string keyType, string valueType, string behavior, bool allowSecondaryReads);
    [EventAttribute("61445")]
public void Error_AddAsync(string id, ulong key, long transaction);
    [EventAttribute("61446")]
public void AcceptAddAsync(string id, long transaction, ulong key, int value);
    [EventAttribute("61447")]
public void AcceptClearAsync(string id, long transaction);
    [EventAttribute("61448")]
public void Error_ConditionalUpdateAsync(string id, ulong key, long transaction, string reason);
    [EventAttribute("61451")]
public void GetOrAddAsync(string id, byte lock_value, ulong key, long txn, int timeout);
    [EventAttribute("61454")]
public void AcceptGetOrAddAsync(string id, long transaction, ulong key, int value);
    [EventAttribute("61455")]
public void Error_UpdateWithOutputAsync(string id, ulong key, long transaction, string reason);
    [EventAttribute("61459")]
public void ApplyAsync(string id, long LSN, long commitLSN, long txn, long role, long context);
    [EventAttribute("61460")]
public void Unlock(string id, long transaction);
    [EventAttribute("61461")]
public void Commit_Unlock(string id, long transaction);
    [EventAttribute("61464")]
public void Done_Unlock(string id, long transaction);
    [EventAttribute("61465")]
public void Abort_Unlock(string id, long transaction, long primaryOperationCount);
    [EventAttribute("61466")]
public void OnPrimaryApplyAsync(string id, long sequenceNumber, long transaction);
    [EventAttribute("61467")]
public void OnSecondaryUndoFalseProgressAsync(string id, string transactionFound, long sequenceNumber, long transaction);
    [EventAttribute("61468")]
public void OnUndoFalseProgressAsync(string id, long sequenceNumber, long transaction, ulong key, int storeModificationType);
    [EventAttribute("61470")]
public void OnSecondaryApplyAsync(string id, string transactionFound, long sequenceNumber, long transaction);
    [EventAttribute("61471")]
public void OnApplyAddAsync(string id, long sequenceNumber, long transaction, ulong key, int value, long count, string applyType);
    [EventAttribute("61472")]
public void OnApplyUpdateAsync(string id, long sequenceNumber, long transaction, ulong key, int value, string applyType);
    [EventAttribute("61473")]
public void OnApplyRemoveAsync(string id, long sequenceNumber, long transaction, ulong key, long count, string applyType);
    [EventAttribute("61474")]
public void OnApplyClearAsync(string id, long sequenceNumber, long transaction);
    [EventAttribute("61475")]
public void OnRecoveryApplyAsync(string id, string transactionFound, long sequenceNumber, long transaction);
    [EventAttribute("61476")]
public void FixupDanglingStoreTransactionIfNeeded(string id, long transaction);
    [EventAttribute("61480")]
public void Error_ConditionalRemoveAsync(string id, ulong key, long transaction, string reason);
    [EventAttribute("61481")]
public void AcceptConditionalRemoveAsync(string id, long transaction, ulong key);
    [EventAttribute("61485")]
public void OpenAsync(string id, string phase);
    [EventAttribute("61486")]
public void Error_OpenAsync(string id, string phase);
    [EventAttribute("61487")]
public void CloseAsync(string id, string phase);
    [EventAttribute("61488")]
public void Abort_TStore(string id, string phase);
    [EventAttribute("61489")]
public void OnCleanup(string id, string phase);
    [EventAttribute("61490")]
public void CheckpointAsync(string id, string phase);
    [EventAttribute("61576")]
public void CheckpointDataAsync(string id, long totalCount, long activeCount, long deletedKeyCount, long fileId);
    [EventAttribute("61491")]
public void RecoverCheckpointAsync(string id, string phase, long count, long checkpointLSN);
    [EventAttribute("61492")]
public void OnRecoveryCompletedAsync(string id, string phase);
    [EventAttribute("61493")]
public void RemoveStateAsync(string id, string phase, long stateproviderid);
    [EventAttribute("61494")]
public void OnDataLossAsync(string id, string phase);
    [EventAttribute("61495")]
public void GetCurrentState_TStore(string id, string phase, int copyStream);
    [EventAttribute("61496")]
public void Bytes_GetCurrentState(string id, string phase, int copyStream, long byteCount);
    [EventAttribute("61497")]
public void BeginSettingCurrentState(string id, string phase);
    [EventAttribute("61498")]
public void EndSettingCurrentState(string id, string phase);
    [EventAttribute("61499")]
public void Bytes_SetCurrentState(string id, string phase, int byteCount);
    [EventAttribute("61500")]
public void CopyAsync(string id, string phase);
    [EventAttribute("61501")]
public void Info_CopyAsync(string id, long visibility, long dataLossSequenceNumber, long replicationSequenceNumber);
    [EventAttribute("61502")]
public void RecoverCopyStateAsync(string id, string phase, long count);
    [EventAttribute("61503")]
public void StillOpen_CheckpointAsync(string id, string kind, long transaction);
    [EventAttribute("61504")]
public void Info_CheckpointAsync(string id, long visibility, long replicationSequenceNumber);
    [EventAttribute("61505")]
public void ThrowIfNot(string id, string kind, long tracer, string status, string role);
    [EventAttribute("61506")]
public void DehydrateAsync(string id, string kind, long replicationSequenceNumber);
    [EventAttribute("61508")]
public void Error_DehydrateAsync(string id, string reason, string msg);
    [EventAttribute("61509")]
public void HydrateAsync(string id, string kind, Guid partionId, long replicaId, long replicationSequenceNumber);
    [EventAttribute("61511")]
public void Error_HydrateAsync(string id, string reason, string msg);
    [EventAttribute("61512")]
public void Error_ReplicateOperationAsync(string id, long transaction, string msg);
    [EventAttribute("61513")]
public void Retry_ReplicateOperationAsync(string id, long transaction, int backoff);
    [EventAttribute("61514")]
public void FireNotifications(string id, long transaction);
    [EventAttribute("61515")]
public void Error_FireNotifications(string id, string msg);
    [EventAttribute("61516")]
public void FireEarlyNotifications(string id, bool kind);
    [EventAttribute("61517")]
public void Error_FireEarlyNotifications(string id, string msg);
    [EventAttribute("61518")]
public void Error_CheckpointAsync(string id, string file, string msg);
    [EventAttribute("61519")]
public void Error_OnUndoFalseProgressAsync(string id, long transaction, string reason);
    [EventAttribute("61520")]
public void Error_OnApplyAddAsync(string id, long transaction, string reason, string applyType);
    [EventAttribute("61521")]
public void Error_OnApplyRemoveAsync(string id, long transaction, string reason, string applyType);
    [EventAttribute("61522")]
public void Error_OnApplyUpdateAsync(string id, long transaction, string reason, string applyType);
    [EventAttribute("61523")]
public void ClearLocks(string id, long transaction);
    [EventAttribute("61524")]
public void PrimeLocksAsync(string id, byte lock_value, long txn, int timeout);
    [EventAttribute("61525")]
public void ChangeRoleAsync(string id, string phase, string role);
    [EventAttribute("61526")]
public void ConditionalGetAsyncError(string id, double checkSystemTimerResolution);
    [EventAttribute("61530")]
public void RemoveAllAsync(string id, string phase);
    [EventAttribute("61531")]
public void TrimAsync(string id, string phase);
    [EventAttribute("61532")]
public void TrimVersion(string id, string key, long vsn, string versions);
    [EventAttribute("61533")]
public void WaitUnlock(string id, long count);
    [EventAttribute("61534")]
public void BackupCheckpointAsync(string id, string folder, string message);
    [EventAttribute("61535")]
public void RestoreCheckpointAsync(string id, string folder, string message);
    [EventAttribute("61536")]
public void Error_CopyAsync(string id, string reason, string msg);
    [EventAttribute("61537")]
public void Complete_CopyAsync(string id, string phase);
    [EventAttribute("61538")]
public void Size_CopyAsync(string id, int size);
    [EventAttribute("61539")]
public void OpenKeyCheckpointFile(string id, string filename, string state);
    [EventAttribute("61540")]
public void ProcessVersionCopyOperationData(string id, string directory, int bytes);
    [EventAttribute("61541")]
public void ProcessVersionCopyOperationMsg(string id, int version);
    [EventAttribute("61542")]
public void ProcessVersionCopyOperationProtocol(string id, string directory, int version);
    [EventAttribute("61543")]
public void ProcessMetadataTableCopyOperation(string id, string directory, int bytes);
    [EventAttribute("61544")]
public void ProcessStartKeyFileCopyOperation(string id, string directory, string filename, int bytes);
    [EventAttribute("61545")]
public void ProcessWriteKeyFileCopyOperation(string id, string directory, string filename, int bytes);
    [EventAttribute("61546")]
public void ProcessEndKeyFileCopyOperation(string id, string directory, string filename, long size);
    [EventAttribute("61547")]
public void ProcessStartValueFileCopyOperation(string id, string directory, string filename, int bytes);
    [EventAttribute("61548")]
public void ProcessWriteValueFileCopyOperation(string id, string directory, string filename, int bytes);
    [EventAttribute("61550")]
public void ProcessEndValueFileCopyOperation(string id, string directory, string filename, long size);
    [EventAttribute("61551")]
public void DiagnosticsError(string id, string message, DateTime TimeUTC);
    [EventAttribute("61552")]
public void DiagnosticsMsg(string id, string message, string stackTrace, DateTime TimeUTC);
    [EventAttribute("61553")]
public void StartingConsolidating(string id, int consolidating);
    [EventAttribute("61554")]
public void CompletedConsolidating(string id, long oldcount, long deltacount, long newcount);
    [EventAttribute("61555")]
public void MergeAsync(string id, string phase);
    [EventAttribute("61556")]
public void SafeFileReplace(string id, string ex, string exType);
    [EventAttribute("61557")]
public void ValueCheckpointFileAsyncOpen(string id, string status, string filename);
    [EventAttribute("61558")]
public void ProcessExceptionWarning(string id, string message, string exception);
    [EventAttribute("61559")]
public void ProcessExceptionError(string id, string message, string exception);
    [EventAttribute("61560")]
public void Warning_ReplicateOperationAsync(string id, long transaction, string msg);
    [EventAttribute("61561")]
public void FileMetadataDeleteKeyValue(string id, string KeyFile, string ValueFile);
    [EventAttribute("61562")]
public void MetadataTableTrimFilesStart(string id, string directory);
    [EventAttribute("61563")]
public void MetadataTableTrimFilesToDelete(string id, string file);
    [EventAttribute("61564")]
public void MetadataTableTrimFilesDeleting(string id, string TableFile);
    [EventAttribute("61565")]
public void MetadataTableTrimFilesComplete(string id, string directory);
    [EventAttribute("61482")]
public void ConditionalGetAsync(string id, string lockMode, long transaction, ulong key, byte isolation, long lcsn);
    [EventAttribute("61567")]
public void TStoreEnableFlags(string id, bool EnableSweep, string SweepThreshold, bool EnableBackgroundConsolidation, bool EnableStrict2PL);
    [EventAttribute("61568")]
public void SweepStarting(string id);
    [EventAttribute("61569")]
public void SweepCompleted(string id);
    [EventAttribute("61574")]
public void AppendToDeltaDifferentialState_SlowConsolidation(string id, int Index, int DefaultNumberOfDeltasTobeConsolidated);
    [EventAttribute("61575")]
public void CompleteCheckpointAsync_ResetNextMetadataTableDone(string id, long fileCount);
    [EventAttribute("62480")]
public void RecoverOutboundStream(string id, string StreamName, string StreamId, string State, string Target);
    [EventAttribute("62479")]
public void RecoverInboundStream(string id, string StreamName, string StreamId, string State, string Source);
    [EventAttribute("61479")]
public void AcquireStoreModificationLocksAsync(string id, byte lock_value, ulong store, long txn, int timeout, long hints, byte isolation);
    [EventAttribute("61483")]
public void NotFound_ConditionalGetAsync(string id, string lockMode, long transaction, ulong key, byte isolation, long lcsn, string reason);
    [EventAttribute("61484")]
public void Found_ConditionalGetAsync(string id, string lockMode, long transaction, ulong key, byte isolation, long lcsn);
    [EventAttribute("61449")]
public void Skip_ConditionalUpdateAsync(string id, ulong key, int oldValue, int newValue, long transaction);
    [EventAttribute("61450")]
public void AcceptConditionalUpdateAsync(string id, long transaction, ulong key, int value);
    [EventAttribute("61457")]
public void AcceptUpdateWithOutputAsync(string id, long transaction, ulong key, int value);
    [EventAttribute("61458")]
public void AcceptAddOrUpdateAsync(string id, string operationType, long transaction, ulong key, int value);
    [EventAttribute("61452")]
public void AcquireKeyModificationLocksAsync(string id, string context, byte lock_value, ulong key, long txn, int timeout, long hints);
    [EventAttribute("61453")]
public void NoLock_AcquireKeyModificationLocksAsync(string id, string context, ulong key, long txn);
    [EventAttribute("61478")]
public void NoLock_AcquireKeyReadLocksAsync(string id, string context, ulong key, long txn, int timeout, long hints, byte isolation);
    [EventAttribute("61477")]
public void AcquireKeyReadLocksAsync(string id, string context, byte lock_value, ulong key, long txn, int timeout, long hints, byte isolation);
    [EventAttribute("61507")]
public void ThrowIfNotReadable(string id, string kind, long txnId, string status, string role, bool isConsistent);
    [EventAttribute("61577")]
public void RecoverConsolidatedAsync(string id, int fileCount);
    [EventAttribute("61578")]
public void MergeKeyCheckpointFilesAsync(string id, string phase);
    [EventAttribute("61579")]
public void StoreDiagnosticError(string id, string errMsg);
    [EventAttribute("61587")]
public void KeyTypeTelemetry(Guid id, long replicaId, double customKeyTypePercentage);
    [EventAttribute("64481")]
public void AbortFailed(string id, long stateProviderId, string message, string stacktrace);
    [EventAttribute("64282")]
public void Abort_TStateManager(string id, string message);
    [EventAttribute("64288")]
public void AddOperation(string id, string stateProvider, long transactionId);
    [EventAttribute("64417")]
public void AddSingleStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64406")]
public void AddSingleStateProviderBegin(string id, string stateProviderName);
    [EventAttribute("64416")]
public void AddSingleStateProviderEnd(string id, long stateProvider);
    [EventAttribute("64418")]
public void AddSingleStateProviderKeyExists(string id, long stateProvider, long transactionId);
    [EventAttribute("64281")]
public void ApiAbort(string id, string message);
    [EventAttribute("64266")]
public void ApiChangeRole(string id, string oldRole, string newRole);
    [EventAttribute("64267")]
public void ApiChangeRoleEnd(string id);
    [EventAttribute("64276")]
public void ApiClose(string id, string message);
    [EventAttribute("64262")]
public void ApiOpen(string id, string message);
    [EventAttribute("64323")]
public void ApplyOnPrimaryDeleteStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64322")]
public void ApplyOnPrimaryInsertStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64355")]
public void ApplyOnRecoveryDeleteStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64344")]
public void ApplyOnRecoveryInsertStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64345")]
public void StateProviderCount(string id, int activeCounter);
    [EventAttribute("64339")]
public void ApplyOnRecoveryInsertStateProviderSkipped(string id, long stateProvider);
    [EventAttribute("64329")]
public void ApplyOnSecondaryDeleteStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64333")]
public void ApplyOnSecondaryFalseProgressUndoDeleteStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64332")]
public void ApplyOnSecondaryFalseProgressUndoInsertStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64324")]
public void ApplyOnSecondaryInsertStateProvider(string id, long stateProvider, long transactionId);
    [EventAttribute("64328")]
public void ApplyOnSecondaryInsertStateProviderSkipped(string id, long stateProvider);
    [EventAttribute("64334")]
public void ApplyOnSecondarySoftDeleteStateProvider(string id, long stateProvider);
    [EventAttribute("64340")]
public void ApiBackupBegin(string id);
    [EventAttribute("64341")]
public void ApiBackupEnd(string id);
    [EventAttribute("64367")]
public void BeginSetCurrentLocalState(string id);
    [EventAttribute("64390")]
public void BeginSetCurrentLocalStateAddStateProvider(string id, long stateProvider);
    [EventAttribute("64350")]
public void ApiBeginSettingCurrentState(string id);
    [EventAttribute("64289")]
public void BeginTransaction(string id, long stateProvider, long transactionId);
    [EventAttribute("64268")]
public void ChangeRole_TStateManager(string id);
    [EventAttribute("64429")]
public void ChangeRoleOnStateProviders(string id, string replicaRole);
    [EventAttribute("64428")]
public void ChangeRoleOnStateProvidersAcquireLock(string id, string replicaRole);
    [EventAttribute("64362")]
public void CleanupMetadataLsn(string id, long lsn);
    [EventAttribute("64389")]
public void CleanupMetadataRemoveStateProvider(string id, long stateProvider);
    [EventAttribute("64427")]
public void CloseStateProvider(string id, long stateProvider);
    [EventAttribute("64335")]
public void ApiCompleteCheckpointBegin(string id);
    [EventAttribute("64336")]
public void ApiCompleteCheckpointEnd(string id);
    [EventAttribute("64382")]
public void CompleteCheckpointOnLocalStateBegin(string id);
    [EventAttribute("64383")]
public void CompleteCheckpointOnLocalStateEnd(string id);
    [EventAttribute("64384")]
public void CompleteCheckpointOnLocalStateNoRenameNeeded(string id);
    [EventAttribute("64391")]
public void CopyToLocalStateAddStateProvider(string id, long stateProvider);
    [EventAttribute("64392")]
public void CopyToLocalStateCreateStateProvider(string id, long stateProvider);
    [EventAttribute("64393")]
public void CopyToLocalStateDeleteStateProvider(string id, long stateProvider);
    [EventAttribute("64351")]
public void ApiEndSettingCurrentState(string id);
    [EventAttribute("64260")]
public void Exception_TStateManager(string id, string exception);
    [EventAttribute("64261")]
public void ExceptionWarning(string id, string exception);
    [EventAttribute("64424")]
public void GetChildrenBegin(string id);
    [EventAttribute("64426")]
public void GetChildrenDuplicateFound(string id, string childName);
    [EventAttribute("64425")]
public void GetChildrenEnd(string id);
    [EventAttribute("64366")]
public void GetCurrentState_TStateManager(string id, long stateProvider, int metadataMode);
    [EventAttribute("64346")]
public void ApiGetCurrentStateBegin(string id);
    [EventAttribute("64347")]
public void ApiGetCurrentStateEnd(string id, long countOfStream);
    [EventAttribute("64375")]
public void GetCurrentStateNull(string id, long stateProvider);
    [EventAttribute("64462")]
public void MetadataSerializerGetMetadataError(string id, string message);
    [EventAttribute("64423")]
public void GetOrAddStateProvider(string id, string stateProvider);
    [EventAttribute("64415")]
public void InitializeStateProvider(string id, string stateProvider, string replicaRole);
    [EventAttribute("64422")]
public void InitializeStateProvidersAcquireLock(string id, long stateProvider, int replicaRole);
    [EventAttribute("64374")]
public void LocalStateCheckpoint(string id, long fileSize);
    [EventAttribute("64372")]
public void LocalStateCheckpointBegin(string id);
    [EventAttribute("64373")]
public void LocalStateCheckpointEnd(string id);
    [EventAttribute("64394")]
public void LocalStateRecoverCheckpointAddStateProvider(string id, long stateProvider);
    [EventAttribute("64376")]
public void LocalStateRecoverCheckpointBegin(string id);
    [EventAttribute("64395")]
public void LocalStateRecoverCheckpointDeleteStateProvider(string id, long stateProvider);
    [EventAttribute("64378")]
public void LocalStateRecoverCheckpointEmptyFile(string id);
    [EventAttribute("64480")]
public void LockContextReleaseReadLock(string id, string key, long transactionId);
    [EventAttribute("64479")]
public void LockContextReleaseWriteLock(string id, string key, long transactionId);
    [EventAttribute("64458")]
public void MetadataSerializerDeserializeCount(string id, int metadataCount, int activeCount, int deleteCount);
    [EventAttribute("64459")]
public void MetadataSerializerDeserializeError(string id, string message);
    [EventAttribute("64472")]
public void MetadataManagerAcquireReadLockException(string id, string key, long tx, string exceptionMessage, string stackTrace);
    [EventAttribute("64471")]
public void MetadataManagerAcquireWriteLockException(string id, string key, long tx, string exceptionMessage, string stackTrace);
    [EventAttribute("64474")]
public void StateProviderMetadataManagerLockForRead(string id, string key, long stateProviderId, long transactionId);
    [EventAttribute("64473")]
public void StateProviderMetadataManagerLockForWrite(string id, string key, long stateProviderId, long transactionId);
    [EventAttribute("64478")]
public void StateProviderMetadataManagerReleaseLock(string id, string key, long transactionId);
    [EventAttribute("64477")]
public void StateProviderMetadataManagerRemoveLock(string id, string key, long transactionId);
    [EventAttribute("64475")]
public void StateProviderMetadataManagerUnlock(string id, long transactionId);
    [EventAttribute("64476")]
public void StateProviderMetadataManagerUnlockDelete(string id, string key, long transactionId);
    [EventAttribute("64456")]
public void MetadataSerializerSerializeCount(string id, int metadataCount);
    [EventAttribute("64468")]
public void NamedOperationDataCollectionGetNext(string id);
    [EventAttribute("64470")]
public void NamedOperationDataDeserializeError(string id, string message);
    [EventAttribute("64306")]
public void OnApply(string id, string stateProvider, long transactionId);
    [EventAttribute("64309")]
public void OnApplyInsertStateProviderSkipped(string id, long stateProviderId);
    [EventAttribute("64308")]
public void OnApplyNameError(string id, long transactionId);
    [EventAttribute("64310")]
public void OnApplyVersionError(string id, int deserializedVersion, int currentVersion);
    [EventAttribute("64284")]
public void OnDataLoss(string id, bool shouldRestore);
    [EventAttribute("64337")]
public void ApiOnRecoveryCompletedBegin(string id);
    [EventAttribute("64338")]
public void ApiOnRecoveryCompletedEnd(string id);
    [EventAttribute("64263")]
public void Open(string id, string message);
    [EventAttribute("64388")]
public void PerformCheckpointAddStateProvider(string id, long stateProvider);
    [EventAttribute("64330")]
public void ApiPerformCheckpointBegin(string id);
    [EventAttribute("64331")]
public void ApiPerformCheckpointEnd(string id);
    [EventAttribute("64326")]
public void ApiPrepareCheckpointBegin(string id);
    [EventAttribute("64327")]
public void ApiPrepareCheckpointEnd(string id);
    [EventAttribute("64386")]
public void RecoverStateProvider(string id, long stateProvider);
    [EventAttribute("64357")]
public void RecoverStateProviders(string id);
    [EventAttribute("64363")]
public void RemoveStateOnStateProvider(string id, long stateProvider);
    [EventAttribute("64412")]
public void RemoveSingleStateProviderBeforeReplication(string id);
    [EventAttribute("64410")]
public void RemoveSingleStateProviderBegin(string id, string stateProviderName);
    [EventAttribute("64419")]
public void RemoveSingleStateProviderEnd(string id, long stateProvider);
    [EventAttribute("64421")]
public void RemoveSingleStateProviderKeyNotFound(string id, long stateProvider, long transactionId);
    [EventAttribute("64325")]
public void ReplicateOperationRetry(string id, long transactionId, int backOffDelay);
    [EventAttribute("64464")]
public void ReplicationMetadataDeserializeError(string id, string message);
    [EventAttribute("64342")]
public void ApiRestoreBegin(string id);
    [EventAttribute("64343")]
public void ApiRestoreEnd(string id);
    [EventAttribute("64387")]
public void RestoreStateProvider(string id, long stateProvider);
    [EventAttribute("64359")]
public void RestoreStateProviders(string id, string backupDirectory);
    [EventAttribute("64381")]
public void SetCurrentState(string id, long stateProvider);
    [EventAttribute("64354")]
public void SetCurrentStateDeserializationError(string id);
    [EventAttribute("64385")]
public void SetCurrentStateSkipped(string id, long stateProvider);
    [EventAttribute("64467")]
public void StateManagerCopyStreamGetNext(string id, int stateProviderCount);
    [EventAttribute("64466")]
public void StateManagerRestoreCheckpointAsync(string id, string message);
    [EventAttribute("64431")]
public void ThrowIfStateProviderIsNotRegistered(string id, string stateProviderName, string StateManagerName);
    [EventAttribute("64432")]
public void ThrowIfNotValid(string id, string message);
    [EventAttribute("64290")]
public void Unlock_TStateManager(string id, long stateProvider);
    [EventAttribute("64364")]
public void UnlockOnLocalState(string id, long transactionId);
    [EventAttribute("64365")]
public void UnlockOnLocalStateInvalidContext(string id);
    [EventAttribute("64258")]
public void TStateManager_InfoText(string id, string type, string message);
    [EventAttribute("64482")]
public void RemoveUnreferencedStateProvidersStart(string id, string directory);
    [EventAttribute("64483")]
public void RemoveUnreferencedStateProvidersEnd(string id, string directory);
    [EventAttribute("64484")]
public void UnreferencedStateProvidersToBeDeleted(string id, string directory);
    [EventAttribute("64485")]
public void UnreferencedStateProvidersBeingDeleted(string id, string directory);
    [EventAttribute("64486")]
public void UnreferencedStateProvidersTimer(string id, double timedifference);
    [EventAttribute("64433")]
public void ServiceChangeRoleFailed(string id);
    [EventAttribute("64434")]
public void DynamicStateManagerAddStateProvider(string id, long StateProviderId);
    [EventAttribute("64435")]
public void DynamicStateManagerGetOrAddStateProvider(string id, long StateProviderId);
    [EventAttribute("64436")]
public void DiagnosticError(string id, string errMsg);
    [EventAttribute("63755")]
public void AbortTx(string id, string message, string recordType, long LSN, long PSN, ulong Position, long Tx);
    [EventAttribute("63869")]
public void AcceptBackup(string id, Guid backupId, int backupOption, string localBackupFolder);
    [EventAttribute("63819")]
public void AcceptBarrier(string id, long lsn);
    [EventAttribute("63792")]
public void AcceptBeginTransaction(string id, long txid, long lsn);
    [EventAttribute("63823")]
public void AcceptEndTransaction(string id, long txid, long lsn, bool committed);
    [EventAttribute("63793")]
public void AcceptOperation(string id, long txid, long lsn);
    [EventAttribute("63870")]
public void AcceptRestore(string id, Guid restoreId, string indexingRecordEpoch, long indexingRecordLsn, string highestBackupRecordEpoch, long highestBackupRecordLsn, int numberOfBackups, string backupFolder);
    [EventAttribute("63867")]
public void AcceptSingleOperationTransaction(string id, long txid, long lsn);
    [EventAttribute("63750")]
public void Api(string id, string message);
    [EventAttribute("63804")]
public void ApplyCallbackAtomicOperationRecord(string id, int Stream, long lsn, long psn, ulong position, long tx, bool redoonly);
    [EventAttribute("63805")]
public void ApplyCallbackBarrierRecord(string id, int Stream, long lsn, long psn, ulong position);
    [EventAttribute("63866")]
public void ApplyCallbackSingleOperationTransaction(string id, int Stream, long lsn, long psn, ulong position, long tx);
    [EventAttribute("63802")]
public void ApplyCallbackTransactionRecord(string id, int Stream, long psn, long tx);
    [EventAttribute("63803")]
public void ApplyCallbackTransactionRecordNoise(string id, int Stream, UInt32 recordType, long lsn, long psn, ulong position, long tx);
    [EventAttribute("63784")]
public void BackupAsync(string id, Guid backupId, string message);
    [EventAttribute("63786")]
public void BackupAsyncCompleted(string id, Guid backupId, string option, string folder, long dataLossNumber, long configurationNumber, long lsn);
    [EventAttribute("63895")]
public void BackupException(string id, Guid backupId, string exceptionType, string message, string stack);
    [EventAttribute("63785")]
public void BackupReplicatorCompleted(string id, Guid backupId, long indexLsn, long lastDN, long lastCN, long lastLsn, UInt32 count, UInt32 size, long time);
    [EventAttribute("63797")]
public void Checkpoint(string id, string action, int state, long lsn, long psn, ulong position, long earliestpendinglsn);
    [EventAttribute("63818")]
public void CheckpointAbortOldTx(string id, int count, long stopLSN, long startLSN, long lSN);
    [EventAttribute("63762")]
public void CopyOrBuildReplica(string id, string message);
    [EventAttribute("63751")]
public void CopyStreamFinished(string id, int numberOfRecords);
    [EventAttribute("63768")]
public void CopyStreamGetNext(string id, string message);
    [EventAttribute("63769")]
public void CopyStreamGetNextNoise(string id, string message);
    [EventAttribute("63767")]
public void CopyStreamMetadata(string id, string message);
    [EventAttribute("63815")]
public void DrainReplicationBlocked(string id, string opType, long lsn, ulong bytes, long percent);
    [EventAttribute("63816")]
public void DrainReplicationContinue(string id, ulong bytes, long percent);
    [EventAttribute("63774")]
public void DrainCopyFlush(string id, long number, long lsn, long acksRemaining);
    [EventAttribute("63760")]
public void DrainCopyNoise(string id, long lsn, long acksPending);
    [EventAttribute("63759")]
public void DrainCopyReceive(string id, long number, string recordType, long lsn, long acksRemaining);
    [EventAttribute("63775")]
public void DrainReplicationFlush(string id, long number, long lsn, long acksRemaining, long bytesRemaining);
    [EventAttribute("63758")]
public void DrainReplicationNoise(string id, long ackedLSN, long acksPending, long bytesPending);
    [EventAttribute("63801")]
public void DrainReplicationReceive(string id, long number, UInt32 recordType, long lsn, long acksRemaining);
    [EventAttribute("63776")]
public void DrainStart(string id, string message);
    [EventAttribute("63761")]
public void DrainStateNoise(string id, string message, string record);
    [EventAttribute("63764")]
public void Error(string id, string message);
    [EventAttribute("63798")]
public void FlushedRecordsCallback(string id, UInt32 recordType, long lsn, long psn, ulong position);
    [EventAttribute("63806")]
public void FlushedRecordsCallbackFailed(string id, UInt32 recordType, long lsn, long psn, ulong position);
    [EventAttribute("63754")]
public void GetLogRecordsToCopy(string id, ulong startingLSN, ulong endingLSN);
    [EventAttribute("63796")]
public void GroupCommitWarning(string id, string exceptionandMessage, int HResult, string stacktrace, string recordtype, long LSN, long PSN, string RecordStableLSN, string CurrentStableLSN);
    [EventAttribute("63790")]
public void Lock(string id, string lockName, string requestersName, string message);
    [EventAttribute("63770")]
public void LogManager(string id, string message);
    [EventAttribute("63771")]
public void LogManagerExceptionError(string id, string method, string recordType, string message, int hresult, string stack);
    [EventAttribute("63772")]
public void LogManagerExceptionInfo(string id, string method, string recordType, string message, int hresult, string stack);
    [EventAttribute("63813")]
public void LogManagerNoOpRecordsCallback(string id, string recordType, long lsn, long psn, ulong position);
    [EventAttribute("63814")]
public void LogManagerNoOpRecordsCallbackFailed(string id, string recordType, long lsn, long psn, ulong position);
    [EventAttribute("63791")]
public void LogRecordsMap(string id, string logRecordType, long lsn, string message);
    [EventAttribute("63773")]
public void PhysicalLogWriterFlushAsync(string id, string waitedRecordType, long waitedRecordLsn, long waitedRecordPsn, ulong waitedRecordPosition, string flushedType, long flushedLsn, long flushedPsn, ulong flushedPosition);
    [EventAttribute("63782")]
public void PhysicalLogWriterFlushStart(string id, int count, long startingPSN);
    [EventAttribute("63783")]
public void PrimaryFullCopyInitiated(string id, string message);
    [EventAttribute("63794")]
public void ProcessBarrierRecord(string id, int stream, long psn, long recordstablelsn, long currentstablelsn);
    [EventAttribute("63795")]
public void ProcessBarrierRecordException(string id, string stream, int message, long psn, long recordstablelsn, long currentstablelsn);
    [EventAttribute("63808")]
public void ProcessedLogicalRecord(string id, int stream, long psn);
    [EventAttribute("63809")]
public void ProcessedLogicalRecordSkip(string id, int stream, long psn);
    [EventAttribute("63810")]
public void ProcessedPhysicalRecord(string id, int stream, string recordType, long lsn, long psn, ulong position);
    [EventAttribute("63811")]
public void ProcessedPhysicalRecordSkip(string id, int stream, long psn);
    [EventAttribute("63763")]
public void ProcessLoggedRecords(string id, int count, long fromlsn, long tolsn, long frompsn, long topsn);
    [EventAttribute("63749")]
public void QuiesceReplicaActivityAsync(string id, string role, string message);
    [EventAttribute("63799")]
public void RecordProcessedImmediately(string id, int stream, string info, long psn);
    [EventAttribute("63800")]
public void RecordProcessedImmediatelyNoise(string id, int stream, long psn);
    [EventAttribute("63787")]
public void RestoreAsync(string id, Guid restoreId, string message);
    [EventAttribute("63788")]
public void RestoreCompleted(string id, Guid restoreId, string folder, long dataLossNumber, long configurationNumber, long tailLsn, long stateManagerRestoreTimeInMs, long replicatorRestoreTimeInMs, long totalRestoreTimeInMs);
    [EventAttribute("63896")]
public void RestoreException(string id, Guid restoreId, string exceptionType, string message, string stack);
    [EventAttribute("63789")]
public void RestoreOperationAsync(string id, string recordType, long backupLogPosition, long lsn, long psn, long lastPhysicalLogRecordPsn);
    [EventAttribute("63897")]
public void SetBackupLogRecord(string id, long lsn, long psn, ulong recordPosition, long dataloss, long configuration, long highestBackedupLsn);
    [EventAttribute("64005")]
public void Exception_TStatefulServiceReplica(string id, string method, string recordType, string message, int hresult, string stack);
    [EventAttribute("64004")]
public void Lifecycle(string id, string message);
    [EventAttribute("63894")]
public void TestSettingModified(string id, string setting, string value);
    [EventAttribute("63817")]
public void TruncateHeadApply(string id, string state, long lsn, long psn, ulong position, long headlsn, long headpsn, ulong headposition);
    [EventAttribute("63822")]
public void TruncateHeadInitiate(string id, long lsn, long psn, ulong position, long headlsn, long headpsn, ulong headposition, bool isStable);
    [EventAttribute("63820")]
public void TruncateHeadProcess(string id, long lsn, long psn, ulong position, long headlsn, long headpsn, ulong headposition, bool truncateperformed, string truncationstate);
    [EventAttribute("63779")]
public void TruncateTailAtomicOperation(string id, long lsn, long psn, ulong position, long tx);
    [EventAttribute("63780")]
public void TruncateTailBarrier(string id, long lsn, long psn, ulong position);
    [EventAttribute("63756")]
public void TruncateTail(string id, long lsn);
    [EventAttribute("63821")]
public void TruncateTailDone(string id, string recordType, long lsn, long psn, ulong position);
    [EventAttribute("63778")]
public void TruncateTailOperationRecord(string id, string recordType, long lsn, long psn, ulong position, long tx);
    [EventAttribute("63868")]
public void TruncateTailSingleOperationTransactionRecord(string id, string operation, long lsn, long psn, ulong position, long tx);
    [EventAttribute("63777")]
public void TruncateTailTransactionRecord(string id, string operation, long lsn, long psn, ulong position, long tx);
    [EventAttribute("63781")]
public void TruncateTailUpdateEpoch(string id, long dataloss, long config, long lsn, long psn, ulong position);
    [EventAttribute("63766")]
public void UpdatedReplicatorSettings(string id, string oldSettings, string newSettings);
    [EventAttribute("63757")]
public void UpdateEpoch(string id, string message, long dataloss, long config, long lsn, string role);
    [EventAttribute("63752")]
public void WaitForLogFlushUptoLsn(string id, string message, long awaitLSN, long tailLSN);
    [EventAttribute("63748")]
public void WaitForProcessing(string id, string recordType, long numberofRecords);
    [EventAttribute("63807")]
public void WaitForProcessingDone(string id, string function, UInt32 recordType, long lsn, long psn, ulong position);
    [EventAttribute("63753")]
public void WakeupWaitingStreams(string id, long flushedLSN);
    [EventAttribute("63765")]
public void Warning(string id, string message);
    [EventAttribute("63824")]
public void PhysicalLogWriterFlushEnd(string id, ulong bytes, long count, int latencysensitive, long milliseconds, long serializationMilliseconds, double avgbytespersec, double avglatencyms, long writePosition);
    [EventAttribute("63825")]
public void PhysicalLogWriterFlushEndWarning(string id, ulong bytes, long count, int latencysensitive, long milliseconds, long serializationMilliseconds, double avgbytespersec, double avglatencyms, long writePosition);
    [EventAttribute("63826")]
public void Telemetry(Guid id, long replicaId, double commitRate, long commitCount);
    [EventAttribute("63827")]
public void MetricManagerTelemetry(Guid id, long replicaId, long diskSizeInMB, long numberOfStateProviders);
    [EventAttribute("63828")]
public void ProcessLogHeadTruncationDone(string id, long LSN, long PSN, ulong position, long numFreeLinkCalls, long numTrueFreeLinkCalls);
    [EventAttribute("57346")]
public void ManagedGeneral_InfoText(string id, string type, string message);
    [EventAttribute("57602")]
public void ManagementCommon_InfoText(string id, string type, string message);
    [EventAttribute("57858")]
public void ImageStoreClient_InfoText(string id, string type, string message);
    [EventAttribute("58114")]
public void FabricHost_InfoText(string id, string type, string message);
    [EventAttribute("58370")]
public void FabricDeployer_InfoText(string id, string type, string message);
    [EventAttribute("58882")]
public void Test_InfoText(string id, string type, string message);
    [EventAttribute("59138")]
public void AzureLogCollector_InfoText(string id, string type, string message);
    [EventAttribute("59394")]
public void SystemFabric_InfoText(string id, string type, string message);
    [EventAttribute("59650")]
public void ImageBuilder_InfoText(string id, string type, string message);
    [EventAttribute("59906")]
public void FabricDCA_InfoText(string id, string type, string message);
    [EventAttribute("60162")]
public void FabricHttpGateway_InfoText(string id, string type, string message);
    [EventAttribute("60418")]
public void InfrastructureService_InfoText(string id, string type, string message);
    [EventAttribute("60674")]
public void ManagedTokenValidationService_InfoText(string id, string type, string message);
    [EventAttribute("60930")]
public void DSTSClient_InfoText(string id, string type, string message);
    [EventAttribute("61442")]
public void TStore_InfoText(string id, string type, string message);
    [EventAttribute("61698")]
public void DistributedDictionary_InfoText(string id, string type, string message);
    [EventAttribute("61954")]
public void DistributedQueue_InfoText(string id, string type, string message);
    [EventAttribute("62210")]
public void Wave_InfoText(string id, string type, string message);
    [EventAttribute("6658")]
public void ReliableStream_InfoText(string id, string type, string message);
    [EventAttribute("62722")]
public void DistributedVersionedDictionary_InfoText(string id, string type, string message);
    [EventAttribute("62978")]
public void Testability_InfoText(string id, string type, string message);
    [EventAttribute("63234")]
public void RandomActionGenerator_InfoText(string id, string type, string message);
    [EventAttribute("63746")]
public void TReplicator_InfoText(string id, string type, string message);
    [EventAttribute("64002")]
public void TStatefulServiceReplica_InfoText(string id, string type, string message);
    [EventAttribute("64514")]
public void ActorFramework_InfoText(string id, string type, string message);
    [EventAttribute("64770")]
public void WRP_InfoText(string id, string type, string message);
    [EventAttribute("65026")]
public void ServiceFramework_InfoText(string id, string type, string message);
    [EventAttribute("65282")]
public void FaultAnalysisService_InfoText(string id, string type, string message);
    [EventAttribute("65285")]
public void UpgradeOrchestrationService_InfoText(string id, string type, string message);
    [EventAttribute("57345")]
public void ManagedGeneral_WarningText(string id, string type, string message);
    [EventAttribute("57601")]
public void ManagementCommon_WarningText(string id, string type, string message);
    [EventAttribute("57857")]
public void ImageStoreClient_WarningText(string id, string type, string message);
    [EventAttribute("58113")]
public void FabricHost_WarningText(string id, string type, string message);
    [EventAttribute("58369")]
public void FabricDeployer_WarningText(string id, string type, string message);
    [EventAttribute("58881")]
public void Test_WarningText(string id, string type, string message);
    [EventAttribute("59137")]
public void AzureLogCollector_WarningText(string id, string type, string message);
    [EventAttribute("59393")]
public void SystemFabric_WarningText(string id, string type, string message);
    [EventAttribute("59649")]
public void ImageBuilder_WarningText(string id, string type, string message);
    [EventAttribute("59905")]
public void FabricDCA_WarningText(string id, string type, string message);
    [EventAttribute("60161")]
public void FabricHttpGateway_WarningText(string id, string type, string message);
    [EventAttribute("60417")]
public void InfrastructureService_WarningText(string id, string type, string message);
    [EventAttribute("60673")]
public void ManagedTokenValidationService_WarningText(string id, string type, string message);
    [EventAttribute("60929")]
public void DSTSClient_WarningText(string id, string type, string message);
    [EventAttribute("61441")]
public void TStore_WarningText(string id, string type, string message);
    [EventAttribute("61697")]
public void DistributedDictionary_WarningText(string id, string type, string message);
    [EventAttribute("61953")]
public void DistributedQueue_WarningText(string id, string type, string message);
    [EventAttribute("62209")]
public void Wave_WarningText(string id, string type, string message);
    [EventAttribute("6657")]
public void ReliableStream_WarningText(string id, string type, string message);
    [EventAttribute("62721")]
public void DistributedVersionedDictionary_WarningText(string id, string type, string message);
    [EventAttribute("62977")]
public void Testability_WarningText(string id, string type, string message);
    [EventAttribute("63233")]
public void RandomActionGenerator_WarningText(string id, string type, string message);
    [EventAttribute("63745")]
public void TReplicator_WarningText(string id, string type, string message);
    [EventAttribute("64001")]
public void TStatefulServiceReplica_WarningText(string id, string type, string message);
    [EventAttribute("64257")]
public void TStateManager_WarningText(string id, string type, string message);
    [EventAttribute("64513")]
public void ActorFramework_WarningText(string id, string type, string message);
    [EventAttribute("64769")]
public void WRP_WarningText(string id, string type, string message);
    [EventAttribute("65025")]
public void ServiceFramework_WarningText(string id, string type, string message);
    [EventAttribute("65281")]
public void FaultAnalysisService_WarningText(string id, string type, string message);
    [EventAttribute("65286")]
public void UpgradeOrchestrationService_WarningText(string id, string type, string message);
    [EventAttribute("57344")]
public void ManagedGeneral_ErrorText(string id, string type, string message);
    [EventAttribute("57600")]
public void ManagementCommon_ErrorText(string id, string type, string message);
    [EventAttribute("57856")]
public void ImageStoreClient_ErrorText(string id, string type, string message);
    [EventAttribute("58112")]
public void FabricHost_ErrorText(string id, string type, string message);
    [EventAttribute("58368")]
public void FabricDeployer_ErrorText(string id, string type, string message);
    [EventAttribute("58880")]
public void Test_ErrorText(string id, string type, string message);
    [EventAttribute("59136")]
public void AzureLogCollector_ErrorText(string id, string type, string message);
    [EventAttribute("59392")]
public void SystemFabric_ErrorText(string id, string type, string message);
    [EventAttribute("59648")]
public void ImageBuilder_ErrorText(string id, string type, string message);
    [EventAttribute("59904")]
public void FabricDCA_ErrorText(string id, string type, string message);
    [EventAttribute("60160")]
public void FabricHttpGateway_ErrorText(string id, string type, string message);
    [EventAttribute("60416")]
public void InfrastructureService_ErrorText(string id, string type, string message);
    [EventAttribute("60672")]
public void ManagedTokenValidationService_ErrorText(string id, string type, string message);
    [EventAttribute("60928")]
public void DSTSClient_ErrorText(string id, string type, string message);
    [EventAttribute("61440")]
public void TStore_ErrorText(string id, string type, string message);
    [EventAttribute("61696")]
public void DistributedDictionary_ErrorText(string id, string type, string message);
    [EventAttribute("61952")]
public void DistributedQueue_ErrorText(string id, string type, string message);
    [EventAttribute("62208")]
public void Wave_ErrorText(string id, string type, string message);
    [EventAttribute("6656")]
public void ReliableStream_ErrorText(string id, string type, string message);
    [EventAttribute("62720")]
public void DistributedVersionedDictionary_ErrorText(string id, string type, string message);
    [EventAttribute("62976")]
public void Testability_ErrorText(string id, string type, string message);
    [EventAttribute("63232")]
public void RandomActionGenerator_ErrorText(string id, string type, string message);
    [EventAttribute("63744")]
public void TReplicator_ErrorText(string id, string type, string message);
    [EventAttribute("64000")]
public void TStatefulServiceReplica_ErrorText(string id, string type, string message);
    [EventAttribute("64256")]
public void TStateManager_ErrorText(string id, string type, string message);
    [EventAttribute("64512")]
public void ActorFramework_ErrorText(string id, string type, string message);
    [EventAttribute("64768")]
public void WRP_ErrorText(string id, string type, string message);
    [EventAttribute("65024")]
public void ServiceFramework_ErrorText(string id, string type, string message);
    [EventAttribute("65280")]
public void FaultAnalysisService_ErrorText(string id, string type, string message);
    [EventAttribute("65287")]
public void UpgradeOrchestrationService_ErrorText(string id, string type, string message);
    [EventAttribute("57347")]
public void ManagedGeneral_NoiseText(string id, string type, string message);
    [EventAttribute("57603")]
public void ManagementCommon_NoiseText(string id, string type, string message);
    [EventAttribute("57859")]
public void ImageStoreClient_NoiseText(string id, string type, string message);
    [EventAttribute("58115")]
public void FabricHost_NoiseText(string id, string type, string message);
    [EventAttribute("58371")]
public void FabricDeployer_NoiseText(string id, string type, string message);
    [EventAttribute("58883")]
public void Test_NoiseText(string id, string type, string message);
    [EventAttribute("59139")]
public void AzureLogCollector_NoiseText(string id, string type, string message);
    [EventAttribute("59395")]
public void SystemFabric_NoiseText(string id, string type, string message);
    [EventAttribute("59651")]
public void ImageBuilder_NoiseText(string id, string type, string message);
    [EventAttribute("59907")]
public void FabricDCA_NoiseText(string id, string type, string message);
    [EventAttribute("60163")]
public void FabricHttpGateway_NoiseText(string id, string type, string message);
    [EventAttribute("60419")]
public void InfrastructureService_NoiseText(string id, string type, string message);
    [EventAttribute("60675")]
public void ManagedTokenValidationService_NoiseText(string id, string type, string message);
    [EventAttribute("60931")]
public void DSTSClient_NoiseText(string id, string type, string message);
    [EventAttribute("61443")]
public void TStore_NoiseText(string id, string type, string message);
    [EventAttribute("61699")]
public void DistributedDictionary_NoiseText(string id, string type, string message);
    [EventAttribute("61955")]
public void DistributedQueue_NoiseText(string id, string type, string message);
    [EventAttribute("62211")]
public void Wave_NoiseText(string id, string type, string message);
    [EventAttribute("6659")]
public void ReliableStream_NoiseText(string id, string type, string message);
    [EventAttribute("62723")]
public void DistributedVersionedDictionary_NoiseText(string id, string type, string message);
    [EventAttribute("62979")]
public void Testability_NoiseText(string id, string type, string message);
    [EventAttribute("63235")]
public void RandomActionGenerator_NoiseText(string id, string type, string message);
    [EventAttribute("63747")]
public void TReplicator_NoiseText(string id, string type, string message);
    [EventAttribute("64003")]
public void TStatefulServiceReplica_NoiseText(string id, string type, string message);
    [EventAttribute("64259")]
public void TStateManager_NoiseText(string id, string type, string message);
    [EventAttribute("64515")]
public void ActorFramework_NoiseText(string id, string type, string message);
    [EventAttribute("64771")]
public void WRP_NoiseText(string id, string type, string message);
    [EventAttribute("65027")]
public void ServiceFramework_NoiseText(string id, string type, string message);
    [EventAttribute("65283")]
public void FaultAnalysisService_NoiseText(string id, string type, string message);
    [EventAttribute("65284")]
public void UpgradeOrchestrationService_NoiseText(string id, string type, string message);
    [EventAttribute("58626")]
public void SystemFabricDeployer_InfoText(string id, string type, string message);
    [EventAttribute("58625")]
public void SystemFabricDeployer_WarningText(string id, string type, string message);
    [EventAttribute("58624")]
public void SystemFabricDeployer_ErrorText(string id, string type, string message);
    [EventAttribute("58627")]
public void SystemFabricDeployer_NoiseText(string id, string type, string message);
    [EventAttribute("65288")]
public void BackupRestoreService_NoiseText(string id, string type, string message);
    [EventAttribute("65289")]
public void BackupRestoreService_InfoText(string id, string type, string message);
    [EventAttribute("65290")]
public void BackupRestoreService_WarningText(string id, string type, string message);
    [EventAttribute("65291")]
public void BackupRestoreService_ErrorText(string id, string type, string message);
    [EventAttribute("65292")]
public void BackupCopier_NoiseText(string id, string type, string message);
    [EventAttribute("65293")]
public void BackupCopier_InfoText(string id, string type, string message);
    [EventAttribute("65294")]
public void BackupCopier_WarningText(string id, string type, string message);
    [EventAttribute("65295")]
public void BackupCopier_ErrorText(string id, string type, string message);
    [EventAttribute("65152")]
public void ApiMonitor_InfoText(string id, string type, string message);
    [EventAttribute("65153")]
public void ApiMonitor_WarningText(string id, string type, string message);
    [EventAttribute("65154")]
public void ApiMonitor_ErrorText(string id, string type, string message);
    [EventAttribute("65155")]
public void ApiMonitor_NoiseText(string id, string type, string message);
    [EventAttribute("65156")]
public void FabricApiStartMonitoring(string id, string apiName, Guid partitionId, long replicaId);
    [EventAttribute("65157")]
public void FabricApiStopMonitoring(string id, string apiName, Guid partitionId, long replicaId, double elapsedTime);
    [EventAttribute("65158")]
public void FabricApiSlowTrace(string id, string apiName, Guid partitionId, long replicaId, double elapsedTime);
    [EventAttribute("65159")]
public void FabricApiInvokeHealthReport(string id, string apiName, Guid partitionId);
    [EventAttribute("65160")]
public void ThrowIfStateProviderIdIsNotRegistered(string id, long stateProviderId, string StateManagerName);
    [EventAttribute("63616")]
public void ReliableConcurrentQueue_EnqueueQueueFull(string id, int capacity);
    [EventAttribute("63617")]
public void ReliableConcurrentQueue_Enqueue(string id, long transactionId, long listElementId, long timeTaken, int linkedCount, int dataStoreSize);
    [EventAttribute("63618")]
public void ReliableConcurrentQueue_EnqueueFailed(string id, long transactionId, string listElementId, string exception);
    [EventAttribute("63619")]
public void ReliableConcurrentQueue_Dequeue(string id, long transactionId, long listElementId, long timeTaken, int linkedCount, int dataStoreSize);
    [EventAttribute("63620")]
public void ReliableConcurrentQueue_DequeueFailed(string id, long transactionId, string listElementId, string exception);
    [EventAttribute("63621")]
public void ReliableConcurrentQueue_InvalidListElementState(string id, string listElement, string unlockSource);
    [EventAttribute("63622")]
public void ReliableConcurrentQueue_NullTransaction(string id);
    [EventAttribute("63623")]
public void ReliableConcurrentQueue_InvalidTransaction(string id, long transactionId);
    [EventAttribute("63624")]
public void ReliableConcurrentQueue_ExceptionWarning(string id, string exception);
    [EventAttribute("63625")]
public void ReliableConcurrentQueue_ExceptionError(string id, string exception);
    [EventAttribute("63626")]
public void ReliableConcurrentQueue_Closing(string id);
    [EventAttribute("63627")]
public void ReliableConcurrentQueue_ApiNoise(string id, string apiName);
    [EventAttribute("63628")]
public void ReliableConcurrentQueue_ApiInfo(string id, string apiName);
    [EventAttribute("63629")]
public void ReliableConcurrentQueue_ChangeRole(string id, string currentRole, string newRole);
    [EventAttribute("63630")]
public void ReliableConcurrentQueue_SetCurrentState(string id, bool complete);
    [EventAttribute("63631")]
public void ReliableConcurrentQueue_IgnoreReplay(string id, string listElement, string scenario);
    [EventAttribute("63632")]
public void ReliableConcurrentQueue_NoCheckpoint(string id, string path);
    [EventAttribute("63633")]
public void ReliableConcurrentQueue_ReadCheckpointError(string id, string exception);
    [EventAttribute("63634")]
public void ReliableConcurrentQueue_CopyNextFrameError(string id, string exception);
    [EventAttribute("63635")]
public void ReliableConcurrentQueue_ApplyAsync(string id, long lsn, long commitLsn, long txid, long role, long kind, short operationType);
    [EventAttribute("63636")]
public void ReliableConcurrentQueue_ThrowIfNot(string id, string kind, string api, long tracer, string status, string role);
    [EventAttribute("63637")]
public void ReliableConcurrentQueue_Info(string id, string api, string message);
    [EventAttribute("63638")]
public void ReliableConcurrentQueue_Unlock(string id, short unlockSource, long transactionid, long listElementId, short listElementState, long totalTime);
    [EventAttribute("63639")]
public void ReliableConcurrentQueue_PrepareCheckpointStarted(string id, long lsn);
    [EventAttribute("63640")]
public void ReliableConcurrentQueue_PerformCheckpointStarted(string id, long lsn);
    [EventAttribute("63641")]
public void ReliableConcurrentQueue_CompleteCheckpointStarted(string id, long lsn);
    [EventAttribute("63642")]
public void ReliableConcurrentQueue_PrepareCheckpointCompleted(string id, long lsn, int linkedCount, int dataStoreSize, bool isNoop, long timeTaken);
    [EventAttribute("63643")]
public void ReliableConcurrentQueue_PerformCheckpointCompleted(string id, long lsn, long countWritten, long timeTaken);
    [EventAttribute("63644")]
public void ReliableConcurrentQueue_CompleteCheckpointCompleted(string id, long lsn, long timeTaken);
    [EventAttribute("63645")]
public void ReliableConcurrentQueue_RecoverCheckpointCompleted(string id, int dataStoreSize, long timeTaken);
    [EventAttribute("63646")]
public void ReliableConcurrentQueue_DequeueTimeout(string id, long transactionId);
    [EventAttribute("60420")]
public void InfrastructureServiceAggregatedEvent(string id, string message);
    [EventAttribute("64969")]
public void ChaosFound(string id, bool foundChaos, bool isRunning, long timestampUtcOfLastStartInTicks);
    [EventAttribute("64997")]
public void ChaosExecutingFaults(string id, long timestampUtcInTicks, long faultCount, string faultString);
    [EventAttribute("64951")]
public void ChaosEngineError(string id, string message);
    [EventAttribute("64937")]
public void ChaosSnapshot(string id, int nodeCount, int appCount, int serviceCount, int partitionCount, int replicaCount, double snapshotTimeInSeconds, double unsafeMarkingTimeInSeconds, int retryCount);
    [EventAttribute("64927")]
public void ChaosStop(string id, long timeStampUtcInTicks, int manual);
    [EventAttribute("64921")]
public void ChaosStart(string id, long timeStampUtcInTicks, long maxConcurrentFaults, double timeToRunInSeconds, double maxClusterStabilizationTimeoutInSeconds, double waitTimeBetweenIterationsInSeconds, double waitTimeBetweenFaultsInSeconds);
    [EventAttribute("64919")]
public void ChaosValidationFailed(string id, long timeStampUtcInTicks, string reason);
    [EventAttribute("65003")]
[EventExtendedMetadataAttribute("4", "PartitionPrimaryMoveAnalysis", "Analysis")]
public void PrimaryMoveAnalysisEvent(Guid eventInstanceId, Guid partitionId, DateTime whenMoveCompleted, double analysisDelayInSeconds, double analysisDurationInSeconds, string previousNode, string currentNode, string reason, string correlatedTraceRecords);
    [EventAttribute("50021")]
[EventExtendedMetadataAttribute("1", "ChaosStarted", "Chaos")]
public void ChaosStartedEvent(Guid eventInstanceId, long maxConcurrentFaults, double timeToRunInSeconds, double maxClusterStabilizationTimeoutInSeconds, double waitTimeBetweenIterationsInSeconds, double waitTimeBetweenFautlsInSeconds, bool moveReplicaFaultEnabled, string includedNodeTypeList, string includedApplicationList, string clusterHealthPolicy, string chaosContext);
    [EventAttribute("50023")]
[EventExtendedMetadataAttribute("1", "ChaosStopped", "Chaos")]
public void ChaosStoppedEvent(Guid eventInstanceId, string reason);
    [EventAttribute("50033")]
[EventExtendedMetadataAttribute("2", "ChaosNodeRestartScheduled", "Chaos")]
public void ChaosRestartNodeFaultScheduledEvent(Guid eventInstanceId, string nodeName, long nodeInstanceId, Guid faultGroupId, Guid faultId);
    [EventAttribute("50047")]
[EventExtendedMetadataAttribute("5", "ChaosReplicaRestartScheduled", "Chaos")]
public void ChaosRestartReplicaFaultScheduledEvent(Guid eventInstanceId, Guid partitionId, long replicaId, Guid faultGroupId, Guid faultId, string serviceUri);
    [EventAttribute("50051")]
[EventExtendedMetadataAttribute("5", "ChaosReplicaRemovalScheduled", "Chaos")]
public void ChaosRemoveReplicaFaultScheduledEvent(Guid eventInstanceId, Guid partitionId, long replicaId, Guid faultGroupId, Guid faultId, string serviceUri);
    [EventAttribute("50053")]
[EventExtendedMetadataAttribute("3", "ChaosCodePackageRestartScheduled", "Chaos")]
public void ChaosRestartCodePackageFaultScheduledEvent(Guid eventInstanceId, string applicationName, Guid faultGroupId, Guid faultId, string nodeName, string serviceManifestName, string codePackageName, string servicePackageActivationId);
    [EventAttribute("50069")]
[EventExtendedMetadataAttribute("4", "ChaosPartitionPrimaryMoveScheduled", "Chaos")]
public void ChaosMovePrimaryFaultScheduledEvent(Guid eventInstanceId, Guid partitionId, Guid faultGroupId, Guid faultId, string serviceName, string nodeTo, bool forcedMove);
    [EventAttribute("50077")]
[EventExtendedMetadataAttribute("4", "ChaosPartitionSecondaryMoveScheduled", "Chaos")]
public void ChaosMoveSecondaryFaultScheduledEvent(Guid eventInstanceId, Guid partitionId, Guid faultGroupId, Guid faultId, string serviceName, string sourceNode, string destinationNode, bool forcedMove);
    [EventAttribute("50078")]
[EventExtendedMetadataAttribute("4", "ChaosPartitionInstanceMoveScheduled", "Chaos")]
public void ChaosMoveInstanceFaultScheduledEvent(Guid eventInstanceId, Guid partitionId, Guid faultGroupId, Guid faultId, string serviceName, string sourceNode, string destinationNode, bool forcedMove);
    [EventAttribute("50079")]
[EventExtendedMetadataAttribute("4", "ChaosPartitionAuxiliaryMoveScheduled", "Chaos")]
public void ChaosMoveAuxiliaryFaultScheduledEvent(Guid eventInstanceId, Guid partitionId, Guid faultGroupId, Guid faultId, string serviceName, string sourceNode, string destinationNode, bool forcedMove);
    [EventAttribute("65004")]
public void EventStoreQueryStat(string entityType, string apiVersion, DateTime paramStartTime, DateTime paramEndTime, bool paramIsIdentifierPresent, string paramEventTypes, bool skipCorrelationLookup, double queryExecutionTimeMs, int queryItemCount);
    [EventAttribute("65005")]
public void EventStoreUnsupportedUri(string message);
    [EventAttribute("65006")]
public void EventStoreFailed(string queryArgs, string failure);
    [EventAttribute("65007")]
public void EventStoreCacheMiss(string cacheName, DateTime cacheStartTime, DateTime cacheEndTime, DateTime queryStartTime, DateTime queryEndTime);
    [EventAttribute("65008")]
public void EventStoreCacheTelemetry(string cacheName, int cacheItemCount, double cacheDurationHours);
    [EventAttribute("65009")]
public void EventStorePerfTelemetry(int memoryUsageMb);
    [EventAttribute("65011")]
[EventExtendedMetadataAttribute("6", "Correlation", "Correlation")]
public void CorrelationOperational(Guid eventInstanceId, Guid relatedFromId, string relatedFromType, Guid relatedToId, string relatedToType);
    [EventAttribute("65310")]
public void ManagedHosting_NoiseText(string id, string type, string message);
    [EventAttribute("65311")]
public void ManagedHosting_InfoText(string id, string type, string message);
    [EventAttribute("65312")]
public void ManagedHosting_WarningText(string id, string type, string message);
    [EventAttribute("65313")]
public void ManagedHosting_ErrorText(string id, string type, string message);
    [EventAttribute("65400")]
public void GatewayResourceManager_NoiseText(string id, string type, string message);
    [EventAttribute("65401")]
public void GatewayResourceManager_InfoText(string id, string type, string message);
    [EventAttribute("65402")]
public void GatewayResourceManager_WarningText(string id, string type, string message);
    [EventAttribute("65403")]
public void GatewayResourceManager_ErrorText(string id, string type, string message);
    [EventAttribute("65404")]
public void ManagedIdentityTokenService_NoiseText(string id, string type, string message);
    [EventAttribute("65405")]
public void ManagedIdentityTokenService_InfoText(string id, string type, string message);
    [EventAttribute("65406")]
public void ManagedIdentityTokenService_WarningText(string id, string type, string message);
    [EventAttribute("65407")]
public void ManagedIdentityTokenService_ErrorText(string id, string type, string message);
    [NonEventAttribute]
internal EventTask GetEventTask(string taskName);
    [NonEventAttribute]
protected virtual ReadOnlyDictionary`2<string, EventTask> GenerateTaskMap();
}
internal abstract class System.Fabric.Common.Tracing.FabricEventSource : EventSource {
    protected ReadOnlyDictionary`2<int, TraceEvent> eventDescriptors;
    protected ReadOnlyDictionary`2<string, EventTask> taskMap;
    [CompilerGeneratedAttribute]
private bool <IsManagedSystemServiceEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedClusterName>k__BackingField;
    public bool IsManagedSystemServiceEvent { get; private set; }
    public string ManagedClusterName { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsManagedSystemServiceEvent();
    [CompilerGeneratedAttribute]
private void set_IsManagedSystemServiceEvent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ManagedClusterName();
    [CompilerGeneratedAttribute]
private void set_ManagedClusterName(string value);
    [NonEventAttribute]
internal string GetEventTaskName(EventTask eventTask);
    [NonEventAttribute]
protected abstract virtual ReadOnlyDictionary`2<string, EventTask> GenerateTaskMap();
    [NonEventAttribute]
protected ReadOnlyDictionary`2<int, TraceEvent> GenerateEventDescriptors(IVariantEventWriter variantEventWriter);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11, Variant param12);
    [NonEventAttribute]
protected static void WriteEvent(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11, Variant param12, Variant param13);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11, Variant param12);
    [NonEventAttribute]
private static void WriteEventInternal(TraceEvent eventDescriptor, Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11, Variant param12, Variant param13);
    [NonEventAttribute]
public sealed virtual void VariantWrite(GenericEventDescriptor& genericEventDescriptor, int argCount, Variant v1, Variant v2, Variant v3, Variant v4, Variant v5, Variant v6, Variant v7, Variant v8, Variant v9, Variant v10, Variant v11, Variant v12, Variant v13, Variant v14, Variant v15, Variant v16);
    [NonEventAttribute]
public sealed virtual void VariantWriteLinuxUnstructured(GenericEventDescriptor& genericEventDescriptor, int argCount, Variant v0, Variant v1, Variant v2, Variant v3, Variant v4, Variant v5, Variant v6, Variant v7, Variant v8, Variant v9, Variant v10, Variant v11, Variant v12, Variant v13);
    private string GetTypeFromIndex(int index, Variant v0, Variant v1, Variant v2, Variant v3, Variant v4, Variant v5, Variant v6, Variant v7, Variant v8, Variant v9, Variant v10, Variant v11, Variant v12, Variant v13);
    [NonEventAttribute]
public sealed virtual bool IsEnabled(byte level, long keywords);
    public static EventChannel ChannelToUse(EventAttribute eventAttribute, EventExtendedMetadataAttribute extended);
    public static string FormatStringToUse(EventAttribute eventAttribute, EventExtendedMetadataAttribute extended);
    private static ushort GetFormatArgumentsCount(string format);
    private static string ShiftFormatArguments(string format, ushort indicesDifference);
}
internal static class System.Fabric.Common.Tracing.FabricEventSourceConstants : object {
    public static string OperationalChannelTableNameSuffix;
    public static string OperationalChannelEventNameFormat;
}
internal class System.Fabric.Common.Tracing.GenericEventDescriptor : ValueType {
    private int m_traceloggingId;
    private ushort m_id;
    private byte m_version;
    private byte m_channel;
    private byte m_level;
    private byte m_opcode;
    private ushort m_task;
    private long m_keywords;
    public int EventId { get; }
    public byte Version { get; }
    public byte Channel { get; }
    public byte Level { get; }
    public byte Opcode { get; }
    public int Task { get; }
    public long Keywords { get; }
    public GenericEventDescriptor(int id, byte version, byte channel, byte level, byte opcode, int task, long keywords);
    public int get_EventId();
    public byte get_Version();
    public byte get_Channel();
    public byte get_Level();
    public byte get_Opcode();
    public int get_Task();
    public long get_Keywords();
}
internal interface System.Fabric.Common.Tracing.ICache`2 {
    public long Count { get; }
    public abstract virtual bool TryAddOrUpdate(TKey key, TValue value, TimeSpan itemLife, Action`1<TValue> onExpireCallback);
    public abstract virtual void RemoveIfPresent(TKey key);
    public abstract virtual long get_Count();
    public abstract virtual void Clear();
}
internal interface System.Fabric.Common.Tracing.IGenericEventSink {
    public abstract virtual void SetPath(string filename);
    public abstract virtual void SetOption(string option);
    public abstract virtual void Write(string processName, string v1, string v2, EventLevel informational, string formattedMessage);
}
internal interface System.Fabric.Common.Tracing.IVariantEventWriter {
    public bool IsManagedSystemServiceEvent { get; }
    public string ManagedClusterName { get; }
    public abstract virtual void VariantWrite(GenericEventDescriptor& genericEventDescriptor, int argCount, Variant v0, Variant v1, Variant v2, Variant v3, Variant v4, Variant v5, Variant v6, Variant v7, Variant v8, Variant v9, Variant v10, Variant v11, Variant v12, Variant v13, Variant v14, Variant v15);
    public abstract virtual void VariantWriteLinuxUnstructured(GenericEventDescriptor& genericEventDescriptor, int argCount, Variant v0, Variant v1, Variant v2, Variant v3, Variant v4, Variant v5, Variant v6, Variant v7, Variant v8, Variant v9, Variant v10, Variant v11, Variant v12, Variant v13);
    public abstract virtual bool IsEnabled(byte level, long keywords);
    public abstract virtual bool get_IsManagedSystemServiceEvent();
    public abstract virtual string get_ManagedClusterName();
}
[FlagsAttribute]
internal enum System.Fabric.Common.Tracing.Position : Enum {
    public int value__;
    public static Position None;
    public static Position Zero;
    public static Position One;
    public static Position Two;
    public static Position Three;
    public static Position Four;
    public static Position Five;
    public static Position Six;
    public static Position Seven;
    public static Position Eight;
    public static Position Nine;
    public static Position Ten;
    public static Position Eleven;
    public static Position Twelve;
    public static Position Thirteen;
}
[AttributeUsageAttribute("64")]
internal class System.Fabric.Common.Tracing.ProvisionalMetadataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Position <PositionOfIdElements>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProvisionalTimeInMs>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <PositionToExcludeFromTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlushAndClose>k__BackingField;
    public Position PositionOfIdElements { get; public set; }
    public UInt32 ProvisionalTimeInMs { get; public set; }
    public Position PositionToExcludeFromTrace { get; public set; }
    public bool FlushAndClose { get; public set; }
    [CompilerGeneratedAttribute]
public Position get_PositionOfIdElements();
    [CompilerGeneratedAttribute]
public void set_PositionOfIdElements(Position value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProvisionalTimeInMs();
    [CompilerGeneratedAttribute]
public void set_ProvisionalTimeInMs(UInt32 value);
    [CompilerGeneratedAttribute]
public Position get_PositionToExcludeFromTrace();
    [CompilerGeneratedAttribute]
public void set_PositionToExcludeFromTrace(Position value);
    [CompilerGeneratedAttribute]
public bool get_FlushAndClose();
    [CompilerGeneratedAttribute]
public void set_FlushAndClose(bool value);
}
public enum System.Fabric.Common.Tracing.TableEntityKind : Enum {
    public byte value__;
    public static TableEntityKind Unknown;
    public static TableEntityKind Cluster;
    public static TableEntityKind Nodes;
    public static TableEntityKind Applications;
    public static TableEntityKind Partitions;
    public static TableEntityKind Replicas;
    public static TableEntityKind Correlation;
}
internal static class System.Fabric.Common.Tracing.TraceConfig : object {
    private static string SectionName;
    private static string TraceEtwSectionName;
    private static string TraceFileSectionName;
    private static string TraceConsoleSectionName;
    private static string TraceLevelKey;
    private static string TraceSamplingKey;
    private static string TraceProvisionalFeatureStatus;
    private static string FiltersKey;
    private static string PathKey;
    private static string OptionKey;
    private static string CommonSectionName;
    private static string LinuxStructuredTracesEnabledParamName;
    private static bool LinuxStructuredTracesEnabled;
    private static Char[] FilterValueSeparatorArray;
    private static object SyncLock;
    private static ConfigUpdateHandler UpdateHandler;
    private static ReadOnlyCollection`1<TraceSinkFilter> SinkFilters;
    private static IConfigReader configReader;
    [CompilerGeneratedAttribute]
private static Action`1<TraceSinkType> OnFilterUpdate;
    [CompilerGeneratedAttribute]
private static Action`1<bool> OnLinuxStructuredTracesEnabledUpdate;
    private static TraceConfig();
    [CompilerGeneratedAttribute]
public static void add_OnFilterUpdate(Action`1<TraceSinkType> value);
    [CompilerGeneratedAttribute]
public static void remove_OnFilterUpdate(Action`1<TraceSinkType> value);
    [CompilerGeneratedAttribute]
public static void add_OnLinuxStructuredTracesEnabledUpdate(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public static void remove_OnLinuxStructuredTracesEnabledUpdate(Action`1<bool> value);
    public static void InitializeFromConfigStore(bool forceUpdate);
    public static void InitializeFromConfigStore(IConfigReader configReaderOverride);
    public static void SetDefaultLevel(TraceSinkType sinkType, EventLevel level);
    public static void SetDefaultSamplingRatio(TraceSinkType sinkType, double samplingRatio);
    public static bool AddFilter(TraceSinkType sinkType, string filter);
    public static bool RemoveFilter(TraceSinkType sinkType, string source);
    public static bool GetEventEnabledStatus(TraceSinkType sinkType, EventLevel level, EventTask taskId, string eventName);
    public static int GetEventSamplingRatio(TraceSinkType sinkType, EventLevel level, EventTask taskId, string eventName);
    public static bool GetEventProvisionalFeatureStatus(TraceSinkType sinkType);
    public static bool GetLinuxStructuredTracesEnabled();
    private static bool InternalAddFilter(TraceSinkType sinkType, string filter);
    private static TraceSinkFilter[] CreateSinkFilters();
    private static void SetDefaultConfigFilters(IReadOnlyList`1<TraceSinkFilter> filters);
    private static EventLevel ConvertLevel(int level);
    private static int ConvertSamplingRatio(double ratio);
    private static void InitializeTraceLevel(IConfigReader configStore, string configSection, TraceSinkType sinkType);
    private static void InitializeTraceProvisionalFeatureStatus(IConfigReader configStore, string configSection, TraceSinkType sinkType);
    private static void InitializeTraceSamplingRatio(IConfigReader configStore, string configSection, TraceSinkType sinkType);
    private static void InitializeFilters(IConfigReader configStore, string configSection, TraceSinkType sinkType);
    private static void InitializeTraceSink(string section);
    private static void InitializeEtwTrace(IConfigReader configStore);
    private static void InitializeTextTrace(IConfigReader configStore);
    private static void InitializeConsoleTrace(IConfigReader configStore);
    private static void InitializeLinuxStructuredTraceEnabled();
    private static bool InternalRemoveFilter(TraceSinkType sinkType, string taskName);
    private static bool InternalAddFilter(TraceSinkType sink, string taskName, string eventName, EventLevel level, int samplingRatio);
}
internal class System.Fabric.Common.Tracing.TraceConsoleEventSink : object {
    private static object SyncLock;
    private static TraceConsoleEventSink();
    public sealed virtual void SetOption(string option);
    public sealed virtual void SetPath(string filename);
    public sealed virtual void Write(string processName, string v1, string v2, EventLevel informational, string formattedMessage);
}
internal static class System.Fabric.Common.Tracing.TraceConsoleSink : object {
    private static object SyncLock;
    private static TraceConsoleSink();
    public static void Write(EventLevel level, string text);
}
internal class System.Fabric.Common.Tracing.TraceEvent : object {
    public static ushort MaxFieldsPerEvent;
    public static ulong AdminChannelKeywordMask;
    public static ulong DebugChannelKeywordMask;
    public static ulong OperationalChannelKeywordMask;
    private static byte version;
    private static string FabricTracesTestKeywordEnvironmentVariable;
    private static ulong TestKeyword;
    private static int samplingCount;
    private IVariantEventWriter variantEventWriter;
    private EventTask taskId;
    private string taskName;
    private string eventName;
    private EventLevel level;
    private string format;
    private Boolean[] filterStates;
    internal bool hasId;
    internal int typeFieldIndex;
    private GenericEventDescriptor descriptor;
    private int samplingRatio;
    private bool isProvisionalFeatureEnabled;
    private bool isProvisionalEvent;
    private AgeBasedCache`2<VariantId, Variant[]> provisionalCache;
    private ProvisionalMetadataAttribute provisionalData;
    private Int32[] idPositions;
    private Int32[] toExcludePosition;
    public EventExtendedMetadataAttribute ExtendedMetadata;
    private bool linuxStructuredTracesEnabled;
    public string Message { get; }
    public string EventName { get; }
    public EventLevel Level { get; }
    public EventTask TaskId { get; }
    private bool IsProvisionalEnabled { get; }
    public TraceEvent(IVariantEventWriter variantEventWriter, EventTask taskId, ushort eventId, string eventName, EventLevel level, EventOpcode opcode, EventChannel channel, EventKeywords keywords, string format, bool hasId, ProvisionalMetadataAttribute provisionalAttribute, int typeFieldIndex, EventExtendedMetadataAttribute extendedMetadataAttribute);
    private static TraceEvent();
    public string get_Message();
    public string get_EventName();
    public EventLevel get_Level();
    public EventTask get_TaskId();
    private bool get_IsProvisionalEnabled();
    public void UpdateSinkEnabledStatus(TraceSinkType sinkType, bool enabled);
    public void UpdateSinkSamplingRatio(TraceSinkType sinkType, int newSamplingRatio);
    public void UpdateProvisionalFeatureStatus(TraceSinkType sinkType, bool isEnabled);
    private static ulong InitializeTestKeyword();
    public bool AreFlatSinksEnabled();
    public void WriteToFlatEventSinks(Variant[] variants);
    public bool IsEtwSinkEnabled();
    internal void UpdateLinuxStructuredTracesEnabled(bool enabled);
    internal bool IsLinuxStructuredTracesEnabled();
    public void WriteToEtwSink();
    public void WriteToEtwSink(Variant param0);
    public void WriteToEtwSink(Variant param0, Variant param1);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11, Variant param12);
    public void WriteToEtwSink(Variant param0, Variant param1, Variant param2, Variant param3, Variant param4, Variant param5, Variant param6, Variant param7, Variant param8, Variant param9, Variant param10, Variant param11, Variant param12, Variant param13);
    private void PopulatePositions();
    private static Int32[] GetSetPositions(Position positions);
    private void WriteProvisional(Variant[] variants);
    private void FlushProvisional(Variant[] variants);
    private static Variant[] ExceptPositions(Variant[] variants, Int32[] indexToRemove);
    public static int GetSetBitCount(int value);
    private bool IsFileSinkEnabled();
    private bool IsConsoleSinkEnabled();
}
internal class System.Fabric.Common.Tracing.TraceFieldDescription : ValueType {
    private string name;
    private string inType;
    private string outType;
    public string Name { get; }
    public string InType { get; }
    public string OutType { get; }
    private TraceFieldDescription(string name, string inType, string outType);
    public string get_Name();
    public string get_InType();
    public string get_OutType();
    public static TraceFieldDescription Create(string name, Type type, bool isHex);
}
internal class System.Fabric.Common.Tracing.TraceFilterDescription : object {
    private EventTask traceTaskId;
    private string traceEventName;
    private EventLevel level;
    private int samplingRatio;
    public EventLevel Level { get; }
    public int SamplingRatio { get; }
    public TraceFilterDescription(EventTask taskId, string eventName, EventLevel level, int samplingRatio);
    public EventLevel get_Level();
    public int get_SamplingRatio();
    public bool Matches(EventTask taskId, string eventName);
    public int StaticCheck(EventTask taskId, string eventName);
}
internal class System.Fabric.Common.Tracing.TraceManifestGenerator : object {
    private StringBuilder resourcesSection;
    private Dictionary`2<UInt32, Dictionary`2<string, UInt32>> stringTable;
    private List`1<EventProviderManifestGenerator> providers;
    internal EventProviderManifestGenerator defaultProvider;
    public TraceManifestGenerator(Guid defaultGuid, string defaultName, string defaultMessage, string defaultSymbol, string defaultTargetFile);
    public void AddEventProviderManifestGenerator(EventProviderManifestGenerator provider);
    public string StringResource(string original);
    public void Merge(string inputFile);
    public void Write(string path);
    private static void OutputTag(StringBuilder writer, int offset, XPathNavigator navigator, string name, String[] attributes);
    private static void OutputSection(StringBuilder writer, int offset, XPathNodeIterator nodes, string name, String[] attributes);
    private void WriteResources(TextWriter writer);
}
internal class System.Fabric.Common.Tracing.TraceSinkFilter : object {
    private static bool DefaultProvisionalFeatureState;
    private TraceSinkType sinkType;
    private List`1<TraceFilterDescription> filters;
    private EventLevel defaultLevel;
    private int defaultSamplingRatio;
    private bool isProvisionalFeatureEnabledForCurrentSinkType;
    public TraceSinkType SinkType { get; }
    public bool ProvisionalFeatureStatus { get; public set; }
    public EventLevel DefaultLevel { get; public set; }
    public int DefaultSamplingRatio { get; public set; }
    public TraceSinkFilter(TraceSinkType sinkType, EventLevel defaultLevel);
    public TraceSinkType get_SinkType();
    public bool get_ProvisionalFeatureStatus();
    public void set_ProvisionalFeatureStatus(bool value);
    public EventLevel get_DefaultLevel();
    public void set_DefaultLevel(EventLevel value);
    public int get_DefaultSamplingRatio();
    public void set_DefaultSamplingRatio(int value);
    public void AddFilter(EventTask taskId, string eventName, EventLevel level, int samplingRatio);
    public void RemoveFilter(EventTask taskId, string eventName);
    public void ClearFilters();
    public bool StaticCheck(EventLevel level, EventTask taskId, string eventName, Int32& samplingRatio);
}
internal enum System.Fabric.Common.Tracing.TraceSinkType : Enum {
    public byte value__;
    public static TraceSinkType ETW;
    public static TraceSinkType TextFile;
    public static TraceSinkType Console;
    public static TraceSinkType Max;
}
internal static class System.Fabric.Common.Tracing.TraceTextFileSink : object {
    private static int MaxFilesToKeep;
    private static string Extension;
    private static string DefaultTraceType;
    private static object SyncLock;
    private static bool isEnabled;
    private static string option;
    private static DateTime segmentTime;
    private static List`1<TraceWriterInfo> traceWriters;
    internal static bool IsEnabled { get; }
    private static TraceTextFileSink();
    internal static bool get_IsEnabled();
    public static void SetPath(string traceType, string path);
    public static void SetPath(string path);
    public static void SetOption(string option);
    internal static void Write(string taskName, string eventName, string id, EventLevel level, string text);
    private static void SetPathInternal(string traceType, string path);
    private static string ConvertLevelToString(EventLevel level);
    private static void CloseTraceWriters();
    private static void CloseTraceWriter(TraceWriterInfo twi);
    private static void Close(TraceWriterInfo twi);
    private static void Close();
    private static void CalculateSegmentTime(DateTime now);
    private static void Open(TraceWriterInfo twi);
    private static UInt32 GetCurrentThreadId();
}
internal static class System.Fabric.Common.Tracing.TraceViaNative : object {
    public static void WriteUnstructured(string taskName, string eventName, string id, ushort level, string text);
    public static void WriteStructured(GenericEventDescriptor& eventDescriptor, ulong userDataCount, EventDataDescriptor* eventDataPtr);
}
internal class System.Fabric.Common.Tracing.Variant : ValueType {
    private static int SizeOfGuid;
    private ValuesVariant val;
    private string str;
    private byte size;
    private VariantType variantType;
    internal UInt32 Size { get; }
    private Variant(ValuesVariant val, string str, byte size, VariantType variantType);
    internal UInt32 get_Size();
    public static Variant op_Implicit(bool value);
    public static Variant op_Implicit(byte value);
    public static Variant op_Implicit(sbyte value);
    public static Variant op_Implicit(short value);
    public static Variant op_Implicit(ushort value);
    public static Variant op_Implicit(int value);
    public static Variant op_Implicit(UInt32 value);
    public static Variant op_Implicit(long value);
    public static Variant op_Implicit(ulong value);
    public static Variant op_Implicit(double value);
    public static Variant op_Implicit(Guid value);
    public static Variant op_Implicit(DateTime value);
    public static Variant op_Implicit(string value);
    public sealed virtual bool Equals(Variant other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal bool IsString();
    internal bool IsDefaultValue();
    internal string ConvertToString();
    internal bool ConvertToBoolean();
    internal byte ConvertToByte();
    internal sbyte ConvertToSByte();
    internal short ConvertToInt16();
    internal ushort ConvertToUInt16();
    internal int ConvertToInt32();
    internal UInt32 ConvertToUInt32();
    internal long ConvertToInt64();
    internal ulong ConvertToUInt64();
    internal Guid ConvertToGuid();
    internal DateTime ConvertToDateTime();
    internal object ToObject();
}
internal class System.Fabric.Common.Tracing.VariantId : object {
    private Variant[] variantArgs;
    private int currentIndex;
    public VariantId(int count);
    public void AddIdElement(Variant oneVariant);
    public sealed virtual bool Equals(VariantId other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Fabric.Common.UnreliableTransportBehavior : object {
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ProbabilityToApply>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DelaySpan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ApplyCount>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <Filters>k__BackingField;
    public static string PartitionId;
    public string Destination { get; internal set; }
    public string ActionName { get; internal set; }
    public double ProbabilityToApply { get; internal set; }
    public TimeSpan Delay { get; internal set; }
    public TimeSpan DelaySpan { get; internal set; }
    public int Priority { get; internal set; }
    public int ApplyCount { get; internal set; }
    public NameValueCollection Filters { get; internal set; }
    internal UnreliableTransportBehavior(string destination, string actionName, double probabilityToApply, Nullable`1<TimeSpan> delay, Nullable`1<TimeSpan> delaySpan, int priority, int applyCount);
    private static UnreliableTransportBehavior();
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
internal void set_Destination(string value);
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
internal void set_ActionName(string value);
    [CompilerGeneratedAttribute]
public double get_ProbabilityToApply();
    [CompilerGeneratedAttribute]
internal void set_ProbabilityToApply(double value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
internal void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DelaySpan();
    [CompilerGeneratedAttribute]
internal void set_DelaySpan(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
internal void set_Priority(int value);
    [CompilerGeneratedAttribute]
public int get_ApplyCount();
    [CompilerGeneratedAttribute]
internal void set_ApplyCount(int value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_Filters();
    [CompilerGeneratedAttribute]
internal void set_Filters(NameValueCollection value);
    public void AddFilterForPartitionId(Guid replicaId);
}
internal static class System.Fabric.Common.UpgradeOrchestrationTrace : object {
    private static ExtensionsEvents traceSource;
    public static ExtensionsEvents TraceSource { get; }
    private static UpgradeOrchestrationTrace();
    public static ExtensionsEvents get_TraceSource();
}
internal static class System.Fabric.Common.UpgradeTrace : object {
    private static ExtensionsEvents traceSource;
    public static ExtensionsEvents TraceSource { get; }
    private static UpgradeTrace();
    public static ExtensionsEvents get_TraceSource();
}
internal abstract class System.Fabric.Common.ValidateAction : FabricTestAction {
    private static HashSet`1<string> ResolvableAssemblyNames;
    private static Dictionary`2<string, Assembly> CachedAssemblies;
    [CompilerGeneratedAttribute]
private TimeSpan <MaximumStabilizationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationCheckFlag <CheckFlag>k__BackingField;
    public TimeSpan MaximumStabilizationTimeout { get; public set; }
    public ValidationCheckFlag CheckFlag { get; public set; }
    private static ValidateAction();
    [CompilerGeneratedAttribute]
public TimeSpan get_MaximumStabilizationTimeout();
    [CompilerGeneratedAttribute]
public void set_MaximumStabilizationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public ValidationCheckFlag get_CheckFlag();
    [CompilerGeneratedAttribute]
public void set_CheckFlag(ValidationCheckFlag value);
    private static Assembly LoadFromFabricCodePath(object sender, ResolveEventArgs args);
}
internal class System.Fabric.Common.ValidateAllServicesAction : ValidateAction {
    internal Type ActionHandlerType { get; }
    public ValidateAllServicesAction(TimeSpan maximumStabilizationTimeout);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.ValidateApplicationServicesAction : ValidateAction {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    public Uri ApplicationName { get; public set; }
    internal Type ActionHandlerType { get; }
    public ValidateApplicationServicesAction(Uri applicationName, TimeSpan maximumStabilizationTimeout);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.ValidateClusterAction : ValidateAction {
    internal Type ActionHandlerType { get; }
    public ValidateClusterAction(TimeSpan maximumStabilizationTimeout);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.ValidateServiceAction : ValidateAction {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    public Uri ServiceName { get; public set; }
    internal Type ActionHandlerType { get; }
    public ValidateServiceAction(Uri serviceName, TimeSpan maximumStabilizationTimeout);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(Uri value);
    internal virtual Type get_ActionHandlerType();
}
internal class System.Fabric.Common.ValidateSystemServicesAction : ValidateAction {
    internal static ExtensionsEvents Trace;
    private static Uri SystemApplicationName;
    internal Type ActionHandlerType { get; }
    public ValidateSystemServicesAction(TimeSpan maximumStabilizationTimeout);
    private static ValidateSystemServicesAction();
    internal virtual Type get_ActionHandlerType();
}
[FlagsAttribute]
internal enum System.Fabric.Common.ValidationCheckFlag : Enum {
    public int value__;
    public static ValidationCheckFlag Default;
    public static ValidationCheckFlag CheckError;
    public static ValidationCheckFlag CheckWarning;
    public static ValidationCheckFlag CheckTargetReplicaSetSize;
    public static ValidationCheckFlag CheckInBuildReplica;
    public static ValidationCheckFlag CheckQuorumLoss;
    public static ValidationCheckFlag All;
    public static ValidationCheckFlag AllButQuorumLoss;
}
internal class System.Fabric.Common.ValidationReport : object {
    public static ValidationReport Default;
    private bool validationFailed;
    private string failureReason;
    public bool ValidationFailed { get; }
    public string FailureReason { get; }
    public ValidationReport(bool failed, string reason);
    private static ValidationReport();
    public bool get_ValidationFailed();
    public string get_FailureReason();
}
[ExtensionAttribute]
internal static class System.Fabric.Common.WinFabricServiceModelExtensions : object {
    [ExtensionAttribute]
public static bool IsStateful(ServiceKind serviceKind);
    [ExtensionAttribute]
public static bool IsStateful(Service service);
    [ExtensionAttribute]
public static bool IsStateful(ServiceDescription serviceDesc);
    [ExtensionAttribute]
public static int TotalReplicasOrInstances(ServiceDescription serviceDesc);
    [ExtensionAttribute]
public static ServiceDescription GetClone(ServiceDescription serviceDesc);
    [ExtensionAttribute]
public static StatefulServiceDescription GetCloneStateful(StatefulServiceDescription other);
    [ExtensionAttribute]
public static StatelessServiceDescription GetCloneStateless(StatelessServiceDescription other);
    [ExtensionAttribute]
public static void CopyFrom(ServiceDescription dest, ServiceDescription copySrc);
    [ExtensionAttribute]
public static ServiceCorrelationDescription GetClone(ServiceCorrelationDescription other);
    [ExtensionAttribute]
public static StatefulServiceLoadMetricDescription GetClone(StatefulServiceLoadMetricDescription other);
    [ExtensionAttribute]
public static StatelessServiceLoadMetricDescription GetClone(StatelessServiceLoadMetricDescription other);
    [ExtensionAttribute]
public static ServicePlacementPolicyDescription GetClone(ServicePlacementPolicyDescription other);
    [ExtensionAttribute]
public static PartitionSchemeDescription GetClone(PartitionSchemeDescription partitionSchemeDesc);
    [ExtensionAttribute]
public static void AddNames(NamedPartitionSchemeDescription partitionSchemeDesc, IEnumerable`1<string> names);
    [ExtensionAttribute]
public static int TotalPartitions(PartitionSchemeDescription partitionSchemeDesc);
    [ExtensionAttribute]
public static Guid PartitionId(Partition partition);
    [ExtensionAttribute]
public static ServicePartitionKind ServicePartitionKind(Partition partition);
    [ExtensionAttribute]
public static long LowKey(ServicePartitionInformation partition);
    [ExtensionAttribute]
public static long HighKey(ServicePartitionInformation partition);
    [ExtensionAttribute]
public static string Name(ServicePartitionInformation partition);
    [ExtensionAttribute]
public static long LowKey(Partition partition);
    [ExtensionAttribute]
public static long HighKey(Partition partition);
    [ExtensionAttribute]
public static string Name(Partition partition);
    [ExtensionAttribute]
public static IList`1<ApplicationParameter> ToIList(ApplicationParameterList appParams);
    [ExtensionAttribute]
public static void AddRangeNullSafe(ICollection`1<T> dest, IEnumerable`1<T> sourceNullAsEmpty);
    [ExtensionAttribute]
public static bool IsNodeUp(Node node);
    public static T DefaultOnNullException(Func`1<T> funcToRun);
}
internal static class System.Fabric.Common.X509CertificateBuilder : object {
    internal static string PrivateKeyBeginMarker;
    internal static string CertificateBeginMarker;
    private static Char[] Separators;
    private static X509CertificateBuilder();
    public static X509Certificate2 FromPfx(string path);
    public static X509Certificate2 FromPem(string file1, string file2);
    public static X509Certificate2 FromCer(string certFilePath);
    public static X509Certificate2 FromFileList(string filePath, List`1<string> filePaths);
}
internal static class System.Fabric.Common.X509CertificateEnumerator : object {
    public static string LinuxCertStorePath;
    private static string TraceType;
    private static HashSet`1<string> CertExtensions;
    private static X509CertificateEnumerator();
    public static X509Certificate2Collection Enumerate(StoreLocation location, string name);
    private static X509Certificate2Collection EnumerateFromStore(StoreLocation location, string name);
    private static X509Certificate2Collection EnumerateFromDirectory(string path);
    private static Dictionary`2<string, List`1<string>> CollectCertificateFiles(string path);
    private static X509Certificate2Collection TryCreateX509CertificateFromFiles(List`1<string> probableCertFiles);
}
internal class System.Fabric.Common.X509ClusterSecuritySettings : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeIpAddressOrFQDN>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ServiceFabricRole, List`1<X509CredentialValidationRule>> <CertificateValidationRules>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ServiceFabricRole, FabricCertificateType> <CertificatePresentationRules>k__BackingField;
    private static string TraceType;
    private IConfigStore2 configStore;
    private static X509ClusterSecuritySettings instance;
    private static object InstanceCreationLockObject;
    private Dictionary`2<ServiceFabricRole, string> ThumbprintPinningRuleNamesToRoleMap;
    private Dictionary`2<ServiceFabricRole, string> CommonNameRuleNamesToRoleMap;
    private Dictionary`2<ServiceFabricRole, string> SubjectIssuerSectionNamesToRoleMap;
    private Dictionary`2<ServiceFabricRole, string> IssuerStoreSectionNamesToRoleMap;
    [CompilerGeneratedAttribute]
private CredentialType <ServerAuthCredentialType>k__BackingField;
    public string NodeName { get; private set; }
    public string NodeIpAddressOrFQDN { get; private set; }
    public DateTimeOffset LastUpdate { get; private set; }
    public Dictionary`2<ServiceFabricRole, List`1<X509CredentialValidationRule>> CertificateValidationRules { get; private set; }
    public Dictionary`2<ServiceFabricRole, FabricCertificateType> CertificatePresentationRules { get; private set; }
    private CredentialType ServerAuthCredentialType { get; private set; }
    private X509ClusterSecuritySettings(IConfigStore2 newConfigStore);
    private static X509ClusterSecuritySettings();
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NodeIpAddressOrFQDN();
    [CompilerGeneratedAttribute]
private void set_NodeIpAddressOrFQDN(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_LastUpdate();
    [CompilerGeneratedAttribute]
private void set_LastUpdate(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ServiceFabricRole, List`1<X509CredentialValidationRule>> get_CertificateValidationRules();
    [CompilerGeneratedAttribute]
private void set_CertificateValidationRules(Dictionary`2<ServiceFabricRole, List`1<X509CredentialValidationRule>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ServiceFabricRole, FabricCertificateType> get_CertificatePresentationRules();
    [CompilerGeneratedAttribute]
private void set_CertificatePresentationRules(Dictionary`2<ServiceFabricRole, FabricCertificateType> value);
    public static X509ClusterSecuritySettings RuntimeConfiguration(IConfigStore2 newConfigStore);
    [CompilerGeneratedAttribute]
private CredentialType get_ServerAuthCredentialType();
    [CompilerGeneratedAttribute]
private void set_ServerAuthCredentialType(CredentialType value);
    private string GetNodeName();
    private string GetNodeIpAddrOrFqdn();
    private sealed virtual override bool System.Fabric.Common.IConfigStoreUpdateHandler.OnUpdate(string sectionName, string keyName);
    private sealed virtual override bool System.Fabric.Common.IConfigStoreUpdateHandler.CheckUpdate(string sectionName, string keyName, string value, bool isEncrypted);
    private sealed virtual override bool System.Fabric.Common.IConfigStoreUpdateHandler2.IsOverrideAllowed(string sectionName, string keyName, bool force);
    private Dictionary`2<ServiceFabricRole, List`1<X509CredentialValidationRule>> LoadCertificateValidationDeclarations();
    private Dictionary`2<ServiceFabricRole, FabricCertificateType> LoadCertificatePresentationRules();
    private FabricCertificateType LoadCertificatePresentationRule(string certFindValueFabricNodeConfigPropertName, string certFindTypeFabricNodeConfigPropertName, string certStoreNameFabricNodeConfigPropertName, string certFindValue2ndFabricNodeConfigPropertName, string certTypeName);
    private void SetConfigStore(IConfigStore2 newConfigStore, bool force);
    private void InitializeFromConfig();
}
internal abstract class System.Fabric.Common.X509CredentialValidationRule : object {
    [CompilerGeneratedAttribute]
private X509ChainStatusFlags <UserSpecifiedX509ChainStatusFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleName>k__BackingField;
    public X509ChainStatusFlags UserSpecifiedX509ChainStatusFlags { get; }
    public string RuleName { get; }
    public X509CredentialValidationRule(string ruleName, string allowedValues, string secondaryAllowedValues, UInt32 userProvidedX509ChainStatusFlags);
    public abstract virtual bool IsValidX509Credential(X509Certificate2 certificate, String& description);
    public abstract virtual X509CertificateChainValidator ToX509CertificateChainValidator();
    [CompilerGeneratedAttribute]
public X509ChainStatusFlags get_UserSpecifiedX509ChainStatusFlags();
    [CompilerGeneratedAttribute]
public string get_RuleName();
    public string LogAttemptToValidate(X509Certificate2 cert);
    public string LogSuccessfulValidation(X509Certificate2 cert);
    public string LogFailedValidation(X509Certificate2 cert, string reason);
    public abstract virtual string ToString();
    public static List`1<string> CommaSeparatedValuesStringToList(string csvStr);
}
internal static class System.Fabric.Common.X509CredentialValidationRulesUtility : object {
    public static string TraceTag;
    private static X509CredentialValidationRulesUtility();
    public static void WriteWarning(string format, Object[] args);
    public static void WriteError(string format, Object[] args);
    public static void WriteInfo(string format, Object[] args);
}
internal class System.Fabric.Common.X509IssuerStoreCredentialValidationRule : X509CredentialValidationRule {
    private string subjectCommonName;
    private List`1<string> trustedIssuerStores;
    private string unprocessedTrustedIssuerStores;
    public X509IssuerStoreCredentialValidationRule(string ruleName, string allowedValues, string secondaryAllowedValues, UInt32 userProvidedX509ChainStatusFlags);
    public virtual bool IsValidX509Credential(X509Certificate2 credential, String& description);
    public virtual X509CertificateChainValidator ToX509CertificateChainValidator();
    public virtual string ToString();
}
internal class System.Fabric.Common.X509SubjectAndIssuerCredentialValidationRule : X509CredentialValidationRule {
    private string subjectCommonName;
    private List`1<string> authorizedIssuerThumbprints;
    private string unprocessedIssuerThumbprints;
    public X509SubjectAndIssuerCredentialValidationRule(string ruleName, string allowedValues, string secondaryAllowedValues, UInt32 userProvidedX509ChainStatusFlags);
    public virtual bool IsValidX509Credential(X509Certificate2 credential, String& description);
    public virtual X509CertificateChainValidator ToX509CertificateChainValidator();
    public virtual string ToString();
    public bool Intersects(X509SubjectAndIssuerCredentialValidationRule right);
}
internal class System.Fabric.Common.X509ThumbprintPinningCredentialValidationRule : X509CredentialValidationRule {
    private string unprocessedPinnedThumbprints;
    private List`1<string> pinnedThumbprints;
    private bool allowExpired;
    public X509ThumbprintPinningCredentialValidationRule(string ruleName, string allowedValues, string secondaryAllowedValues, bool allowExpired, UInt32 userProvidedX509ChainStatusFlags);
    public virtual bool IsValidX509Credential(X509Certificate2 credential, String& description);
    public virtual X509CertificateChainValidator ToX509CertificateChainValidator();
    public virtual string ToString();
}
public enum System.Fabric.CompletionMode : Enum {
    public int value__;
    public static CompletionMode Invalid;
    public static CompletionMode DoNotVerify;
    public static CompletionMode Verify;
}
public class System.Fabric.ComposeDeploymentUpgradeProgress : object {
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradePolicyDescription <UpgradePolicyDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ComposeDeploymentUpgradeState <UpgradeState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextUpgradeDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<UpgradeDomainStatus> <UpgradeDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CurrentUpgradeDomainDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <ApplicationUnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradeDomainProgress <CurrentUpgradeDomainProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FailureTimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UpgradeFailureReason> <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradeDomainProgress <UpgradeDomainProgressAtFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeStatusDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationUpgradeStatusDetails>k__BackingField;
    public string DeploymentName { get; internal set; }
    public Uri ApplicationName { get; internal set; }
    public UpgradePolicyDescription UpgradePolicyDescription { get; public set; }
    public string TargetApplicationTypeVersion { get; internal set; }
    public ComposeDeploymentUpgradeState UpgradeState { get; internal set; }
    public string NextUpgradeDomain { get; internal set; }
    public ReadOnlyCollection`1<UpgradeDomainStatus> UpgradeDomains { get; internal set; }
    public TimeSpan UpgradeDuration { get; internal set; }
    public TimeSpan CurrentUpgradeDomainDuration { get; internal set; }
    public IList`1<HealthEvaluation> ApplicationUnhealthyEvaluations { get; internal set; }
    public UpgradeDomainProgress CurrentUpgradeDomainProgress { get; internal set; }
    public Nullable`1<DateTime> StartTimestampUtc { get; internal set; }
    public Nullable`1<DateTime> FailureTimestampUtc { get; internal set; }
    public Nullable`1<UpgradeFailureReason> FailureReason { get; internal set; }
    public UpgradeDomainProgress UpgradeDomainProgressAtFailure { get; internal set; }
    public string UpgradeStatusDetails { get; internal set; }
    public string ApplicationUpgradeStatusDetails { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_DeploymentName();
    [CompilerGeneratedAttribute]
internal void set_DeploymentName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public UpgradePolicyDescription get_UpgradePolicyDescription();
    [CompilerGeneratedAttribute]
public void set_UpgradePolicyDescription(UpgradePolicyDescription value);
    [CompilerGeneratedAttribute]
public string get_TargetApplicationTypeVersion();
    [CompilerGeneratedAttribute]
internal void set_TargetApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public ComposeDeploymentUpgradeState get_UpgradeState();
    [CompilerGeneratedAttribute]
internal void set_UpgradeState(ComposeDeploymentUpgradeState value);
    [CompilerGeneratedAttribute]
public string get_NextUpgradeDomain();
    [CompilerGeneratedAttribute]
internal void set_NextUpgradeDomain(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<UpgradeDomainStatus> get_UpgradeDomains();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomains(ReadOnlyCollection`1<UpgradeDomainStatus> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeDuration();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CurrentUpgradeDomainDuration();
    [CompilerGeneratedAttribute]
internal void set_CurrentUpgradeDomainDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_ApplicationUnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_ApplicationUnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public UpgradeDomainProgress get_CurrentUpgradeDomainProgress();
    [CompilerGeneratedAttribute]
internal void set_CurrentUpgradeDomainProgress(UpgradeDomainProgress value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTimestampUtc();
    [CompilerGeneratedAttribute]
internal void set_StartTimestampUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FailureTimestampUtc();
    [CompilerGeneratedAttribute]
internal void set_FailureTimestampUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UpgradeFailureReason> get_FailureReason();
    [CompilerGeneratedAttribute]
internal void set_FailureReason(Nullable`1<UpgradeFailureReason> value);
    [CompilerGeneratedAttribute]
public UpgradeDomainProgress get_UpgradeDomainProgressAtFailure();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomainProgressAtFailure(UpgradeDomainProgress value);
    [CompilerGeneratedAttribute]
public string get_UpgradeStatusDetails();
    [CompilerGeneratedAttribute]
internal void set_UpgradeStatusDetails(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationUpgradeStatusDetails();
    [CompilerGeneratedAttribute]
internal void set_ApplicationUpgradeStatusDetails(string value);
    public virtual string ToString();
    internal static ComposeDeploymentUpgradeProgress CreateFromNative(IFabricComposeDeploymentUpgradeProgressResult nativeResult);
}
public enum System.Fabric.ComposeDeploymentUpgradeState : Enum {
    public int value__;
    public static ComposeDeploymentUpgradeState Invalid;
    public static ComposeDeploymentUpgradeState ProvisioningTarget;
    public static ComposeDeploymentUpgradeState RollingForwardInProgress;
    public static ComposeDeploymentUpgradeState RollingForwardPending;
    public static ComposeDeploymentUpgradeState UnprovisioningCurrent;
    public static ComposeDeploymentUpgradeState RollingForwardCompleted;
    public static ComposeDeploymentUpgradeState RollingBackInProgress;
    public static ComposeDeploymentUpgradeState UnprovisioningTarget;
    public static ComposeDeploymentUpgradeState RollingBackCompleted;
    public static ComposeDeploymentUpgradeState Failed;
    public static ComposeDeploymentUpgradeState RollingBackPending;
}
public class System.Fabric.ConfigurationPackage : object {
    [CompilerGeneratedAttribute]
private ConfigurationPackageDescription <Description>k__BackingField;
    public ConfigurationPackageDescription Description { get; }
    public string Path { get; }
    public ConfigurationSettings Settings { get; internal set; }
    internal ConfigurationPackage(ConfigurationPackageDescription description);
    [CompilerGeneratedAttribute]
public ConfigurationPackageDescription get_Description();
    public string get_Path();
    public ConfigurationSettings get_Settings();
    internal void set_Settings(ConfigurationSettings value);
    internal static ConfigurationPackage CreateFromNative(IFabricConfigurationPackage nativePackage);
}
internal class System.Fabric.ContainerActivationArgs : object {
    [CompilerGeneratedAttribute]
private bool <IsUserLocalSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppHostId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerDescription <ContainerDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessDescription <ProcessDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FabricBinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GatewayIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GatewayIpAddresses>k__BackingField;
    internal bool IsUserLocalSystem { get; internal set; }
    internal string AppHostId { get; internal set; }
    internal string NodeId { get; internal set; }
    internal ContainerDescription ContainerDescription { get; internal set; }
    internal ProcessDescription ProcessDescription { get; internal set; }
    internal string FabricBinPath { get; internal set; }
    internal string GatewayIpAddress { get; internal set; }
    internal List`1<string> GatewayIpAddresses { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_IsUserLocalSystem();
    [CompilerGeneratedAttribute]
internal void set_IsUserLocalSystem(bool value);
    [CompilerGeneratedAttribute]
internal string get_AppHostId();
    [CompilerGeneratedAttribute]
internal void set_AppHostId(string value);
    [CompilerGeneratedAttribute]
internal string get_NodeId();
    [CompilerGeneratedAttribute]
internal void set_NodeId(string value);
    [CompilerGeneratedAttribute]
internal ContainerDescription get_ContainerDescription();
    [CompilerGeneratedAttribute]
internal void set_ContainerDescription(ContainerDescription value);
    [CompilerGeneratedAttribute]
internal ProcessDescription get_ProcessDescription();
    [CompilerGeneratedAttribute]
internal void set_ProcessDescription(ProcessDescription value);
    [CompilerGeneratedAttribute]
internal string get_FabricBinPath();
    [CompilerGeneratedAttribute]
internal void set_FabricBinPath(string value);
    [CompilerGeneratedAttribute]
internal string get_GatewayIpAddress();
    [CompilerGeneratedAttribute]
internal void set_GatewayIpAddress(string value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_GatewayIpAddresses();
    [CompilerGeneratedAttribute]
internal void set_GatewayIpAddresses(List`1<string> value);
    internal static ContainerActivationArgs CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerActivatorServiceBroker : object {
    private IContainerActivatorService activatorService;
    private static InteropApi ValidateAsyncApi;
    internal ContainerActivatorServiceBroker(IContainerActivatorService activator);
    private static ContainerActivatorServiceBroker();
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.StartEventMonitoring(sbyte isContainerServiceManaged, ulong sinceTime);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.BeginActivateContainer(IntPtr activationParams, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricStringResult System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.EndActivateContainer(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.BeginDeactivateContainer(IntPtr deactivationParams, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.EndDeactivateContainer(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.BeginDownloadImages(IntPtr images, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.EndDownloadImages(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.BeginDeleteImages(IntPtr images, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.EndDeleteImages(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.BeginInvokeContainerApi(IntPtr apiExecArgs, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricContainerApiExecutionResult System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService.EndInvokeContainerApi(IFabricAsyncOperationContext context);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.StartEventMonitoring(sbyte isContainerServiceManaged, ulong sinceTime);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.BeginActivateContainer(IntPtr activationParams, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricStringResult System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.EndActivateContainer(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.BeginDeactivateContainer(IntPtr deactivationParams, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.EndDeactivateContainer(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.BeginDownloadImages(IntPtr images, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.EndDownloadImages(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.BeginDeleteImages(IntPtr images, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.EndDeleteImages(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.BeginInvokeContainerApi(IntPtr apiExecArgs, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricContainerApiExecutionResult System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.EndInvokeContainerApi(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.BeginContainerUpdateRoutes(IntPtr updateRouteArgs, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerActivatorService2.EndContainerUpdateRoutes(IFabricAsyncOperationContext context);
}
internal class System.Fabric.ContainerApiExecutionArgs : object {
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpVerb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestBody>k__BackingField;
    internal string ContainerName { get; internal set; }
    internal string HttpVerb { get; internal set; }
    internal string UriPath { get; internal set; }
    internal string ContentType { get; internal set; }
    internal string RequestBody { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ContainerName();
    [CompilerGeneratedAttribute]
internal void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
internal string get_HttpVerb();
    [CompilerGeneratedAttribute]
internal void set_HttpVerb(string value);
    [CompilerGeneratedAttribute]
internal string get_UriPath();
    [CompilerGeneratedAttribute]
internal void set_UriPath(string value);
    [CompilerGeneratedAttribute]
internal string get_ContentType();
    [CompilerGeneratedAttribute]
internal void set_ContentType(string value);
    [CompilerGeneratedAttribute]
internal string get_RequestBody();
    [CompilerGeneratedAttribute]
internal void set_RequestBody(string value);
    internal static ContainerApiExecutionArgs CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerApiExecutionResponse : object {
    [CompilerGeneratedAttribute]
private ushort <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ResponseBody>k__BackingField;
    internal ushort StatusCode { get; internal set; }
    internal string ContentType { get; internal set; }
    internal string ContentEncoding { get; internal set; }
    internal Byte[] ResponseBody { get; internal set; }
    [CompilerGeneratedAttribute]
internal ushort get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(ushort value);
    [CompilerGeneratedAttribute]
internal string get_ContentType();
    [CompilerGeneratedAttribute]
internal void set_ContentType(string value);
    [CompilerGeneratedAttribute]
internal string get_ContentEncoding();
    [CompilerGeneratedAttribute]
internal void set_ContentEncoding(string value);
    [CompilerGeneratedAttribute]
internal Byte[] get_ResponseBody();
    [CompilerGeneratedAttribute]
internal void set_ResponseBody(Byte[] value);
    internal IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.ContainerDeactivationArgs : object {
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConfiguredForAutoRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainerRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGracefulDeactivation>k__BackingField;
    internal string ContainerName { get; internal set; }
    internal bool ConfiguredForAutoRemove { get; internal set; }
    internal bool IsContainerRoot { get; internal set; }
    internal string CgroupName { get; internal set; }
    internal bool IsGracefulDeactivation { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ContainerName();
    [CompilerGeneratedAttribute]
internal void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
internal bool get_ConfiguredForAutoRemove();
    [CompilerGeneratedAttribute]
internal void set_ConfiguredForAutoRemove(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsContainerRoot();
    [CompilerGeneratedAttribute]
internal void set_IsContainerRoot(bool value);
    [CompilerGeneratedAttribute]
internal string get_CgroupName();
    [CompilerGeneratedAttribute]
internal void set_CgroupName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsGracefulDeactivation();
    [CompilerGeneratedAttribute]
internal void set_IsGracefulDeactivation(bool value);
    internal static ContainerDeactivationArgs CreateFromNative(IntPtr nativePtr);
}
[DataContractAttribute]
public class System.Fabric.ContainerDebugParameters : object {
    [DataMemberAttribute]
internal String[] Entrypoint;
    [DataMemberAttribute]
internal String[] Volumes;
    [DataMemberAttribute]
internal String[] EnvVars;
    [DataMemberAttribute]
internal String[] Labels;
    internal ContainerDebugParameters(String[] entryPoints, String[] volumes, String[] envVars, String[] labels);
}
internal class System.Fabric.ContainerDescription : object {
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeploymentFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeWorkFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerNetworkConfigDescription <ContainerNetworkConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerIsolationMode <IsolationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PortBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerLogConfigDescription <LogConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContainerVolumeDescription> <Volumes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContainerLabelDescription> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DnsServers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SecurityOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryCredentialDescription <RepositoryCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerHealthConfigDescription <HealthConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunInteractive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainerRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <BindMounts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveServiceFabricRuntimeAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultRepositoryCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTokenAuthenticationCredentials>k__BackingField;
    internal string ApplicationName { get; internal set; }
    internal string ServiceName { get; internal set; }
    internal string ApplicationId { get; internal set; }
    internal string ContainerName { get; internal set; }
    internal string DeploymentFolder { get; internal set; }
    internal string NodeWorkFolder { get; internal set; }
    internal ContainerNetworkConfigDescription ContainerNetworkConfig { get; internal set; }
    internal string EntryPoint { get; internal set; }
    internal string HostName { get; internal set; }
    internal string GroupContainerName { get; internal set; }
    internal ContainerIsolationMode IsolationMode { get; internal set; }
    internal IDictionary`2<string, string> PortBindings { get; internal set; }
    internal ContainerLogConfigDescription LogConfig { get; internal set; }
    internal List`1<ContainerVolumeDescription> Volumes { get; internal set; }
    internal List`1<ContainerLabelDescription> Labels { get; internal set; }
    internal List`1<string> DnsServers { get; internal set; }
    internal List`1<string> SecurityOptions { get; internal set; }
    internal RepositoryCredentialDescription RepositoryCredential { get; internal set; }
    internal ContainerHealthConfigDescription HealthConfig { get; internal set; }
    internal bool AutoRemove { get; internal set; }
    internal bool RunInteractive { get; internal set; }
    internal bool IsContainerRoot { get; internal set; }
    internal string CodePackageName { get; internal set; }
    internal string ServicePackageActivationId { get; internal set; }
    internal string PartitionId { get; internal set; }
    internal IDictionary`2<string, string> BindMounts { get; internal set; }
    internal bool RemoveServiceFabricRuntimeAccess { get; internal set; }
    internal bool UseDefaultRepositoryCredentials { get; internal set; }
    internal bool UseTokenAuthenticationCredentials { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
internal string get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
internal string get_ApplicationId();
    [CompilerGeneratedAttribute]
internal void set_ApplicationId(string value);
    [CompilerGeneratedAttribute]
internal string get_ContainerName();
    [CompilerGeneratedAttribute]
internal void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
internal string get_DeploymentFolder();
    [CompilerGeneratedAttribute]
internal void set_DeploymentFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_NodeWorkFolder();
    [CompilerGeneratedAttribute]
internal void set_NodeWorkFolder(string value);
    [CompilerGeneratedAttribute]
internal ContainerNetworkConfigDescription get_ContainerNetworkConfig();
    [CompilerGeneratedAttribute]
internal void set_ContainerNetworkConfig(ContainerNetworkConfigDescription value);
    [CompilerGeneratedAttribute]
internal string get_EntryPoint();
    [CompilerGeneratedAttribute]
internal void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
internal string get_HostName();
    [CompilerGeneratedAttribute]
internal void set_HostName(string value);
    [CompilerGeneratedAttribute]
internal string get_GroupContainerName();
    [CompilerGeneratedAttribute]
internal void set_GroupContainerName(string value);
    [CompilerGeneratedAttribute]
internal ContainerIsolationMode get_IsolationMode();
    [CompilerGeneratedAttribute]
internal void set_IsolationMode(ContainerIsolationMode value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_PortBindings();
    [CompilerGeneratedAttribute]
internal void set_PortBindings(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal ContainerLogConfigDescription get_LogConfig();
    [CompilerGeneratedAttribute]
internal void set_LogConfig(ContainerLogConfigDescription value);
    [CompilerGeneratedAttribute]
internal List`1<ContainerVolumeDescription> get_Volumes();
    [CompilerGeneratedAttribute]
internal void set_Volumes(List`1<ContainerVolumeDescription> value);
    [CompilerGeneratedAttribute]
internal List`1<ContainerLabelDescription> get_Labels();
    [CompilerGeneratedAttribute]
internal void set_Labels(List`1<ContainerLabelDescription> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_DnsServers();
    [CompilerGeneratedAttribute]
internal void set_DnsServers(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_SecurityOptions();
    [CompilerGeneratedAttribute]
internal void set_SecurityOptions(List`1<string> value);
    [CompilerGeneratedAttribute]
internal RepositoryCredentialDescription get_RepositoryCredential();
    [CompilerGeneratedAttribute]
internal void set_RepositoryCredential(RepositoryCredentialDescription value);
    [CompilerGeneratedAttribute]
internal ContainerHealthConfigDescription get_HealthConfig();
    [CompilerGeneratedAttribute]
internal void set_HealthConfig(ContainerHealthConfigDescription value);
    [CompilerGeneratedAttribute]
internal bool get_AutoRemove();
    [CompilerGeneratedAttribute]
internal void set_AutoRemove(bool value);
    [CompilerGeneratedAttribute]
internal bool get_RunInteractive();
    [CompilerGeneratedAttribute]
internal void set_RunInteractive(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsContainerRoot();
    [CompilerGeneratedAttribute]
internal void set_IsContainerRoot(bool value);
    [CompilerGeneratedAttribute]
internal string get_CodePackageName();
    [CompilerGeneratedAttribute]
internal void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
internal string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
internal string get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_BindMounts();
    [CompilerGeneratedAttribute]
internal void set_BindMounts(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal bool get_RemoveServiceFabricRuntimeAccess();
    [CompilerGeneratedAttribute]
internal void set_RemoveServiceFabricRuntimeAccess(bool value);
    [CompilerGeneratedAttribute]
internal bool get_UseDefaultRepositoryCredentials();
    [CompilerGeneratedAttribute]
internal void set_UseDefaultRepositoryCredentials(bool value);
    [CompilerGeneratedAttribute]
internal bool get_UseTokenAuthenticationCredentials();
    [CompilerGeneratedAttribute]
internal void set_UseTokenAuthenticationCredentials(bool value);
    internal static ContainerDescription CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerDnsConfigDescription : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <NameServers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SearchDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Options>k__BackingField;
    internal IList`1<string> NameServers { get; internal set; }
    internal string LocalDomain { get; internal set; }
    internal IList`1<string> SearchDomains { get; internal set; }
    internal IList`1<string> Options { get; internal set; }
    [CompilerGeneratedAttribute]
internal IList`1<string> get_NameServers();
    [CompilerGeneratedAttribute]
internal void set_NameServers(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_LocalDomain();
    [CompilerGeneratedAttribute]
internal void set_LocalDomain(string value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_SearchDomains();
    [CompilerGeneratedAttribute]
internal void set_SearchDomains(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_Options();
    [CompilerGeneratedAttribute]
internal void set_Options(IList`1<string> value);
    internal static ContainerDnsConfigDescription CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerDriverOptionDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    internal string Name { get; internal set; }
    internal string Value { get; internal set; }
    internal bool IsEncrypted { get; internal set; }
    internal string Type { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsEncrypted();
    [CompilerGeneratedAttribute]
internal void set_IsEncrypted(bool value);
    [CompilerGeneratedAttribute]
internal string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    internal static ContainerDriverOptionDescription CreateFromNative(FABRIC_CONTAINER_DRIVER_OPTION_DESCRIPTION nativeDescription);
    internal static List`1<ContainerDriverOptionDescription> CreateFromNativeList(IntPtr nativeListPtr);
}
internal class System.Fabric.ContainerEventDescription : object {
    [CompilerGeneratedAttribute]
private ContainerEventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TimeStampInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHealthy>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ExitCode>k__BackingField;
    internal ContainerEventType EventType { get; internal set; }
    internal string ContainerId { get; internal set; }
    internal string ExecID { get; internal set; }
    internal string ContainerName { get; internal set; }
    internal ulong TimeStampInSeconds { get; internal set; }
    internal bool IsHealthy { get; internal set; }
    internal UInt32 ExitCode { get; internal set; }
    [CompilerGeneratedAttribute]
internal ContainerEventType get_EventType();
    [CompilerGeneratedAttribute]
internal void set_EventType(ContainerEventType value);
    [CompilerGeneratedAttribute]
internal string get_ContainerId();
    [CompilerGeneratedAttribute]
internal void set_ContainerId(string value);
    [CompilerGeneratedAttribute]
internal string get_ExecID();
    [CompilerGeneratedAttribute]
internal void set_ExecID(string value);
    [CompilerGeneratedAttribute]
internal string get_ContainerName();
    [CompilerGeneratedAttribute]
internal void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
internal ulong get_TimeStampInSeconds();
    [CompilerGeneratedAttribute]
internal void set_TimeStampInSeconds(ulong value);
    [CompilerGeneratedAttribute]
internal bool get_IsHealthy();
    [CompilerGeneratedAttribute]
internal void set_IsHealthy(bool value);
    [CompilerGeneratedAttribute]
internal UInt32 get_ExitCode();
    [CompilerGeneratedAttribute]
internal void set_ExitCode(UInt32 value);
    internal static IntPtr ToNativeList(PinCollection pin, List`1<ContainerEventDescription> eventDescList);
    internal void ToNative(PinCollection pin, FABRIC_CONTAINER_EVENT_DESCRIPTION& nativeDesc);
}
internal class System.Fabric.ContainerEventNotification : object {
    [CompilerGeneratedAttribute]
private ulong <SinceTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UntilTime>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContainerEventDescription> <EventList>k__BackingField;
    internal ulong SinceTime { get; internal set; }
    internal ulong UntilTime { get; internal set; }
    internal List`1<ContainerEventDescription> EventList { get; internal set; }
    [CompilerGeneratedAttribute]
internal ulong get_SinceTime();
    [CompilerGeneratedAttribute]
internal void set_SinceTime(ulong value);
    [CompilerGeneratedAttribute]
internal ulong get_UntilTime();
    [CompilerGeneratedAttribute]
internal void set_UntilTime(ulong value);
    [CompilerGeneratedAttribute]
internal List`1<ContainerEventDescription> get_EventList();
    [CompilerGeneratedAttribute]
internal void set_EventList(List`1<ContainerEventDescription> value);
    internal IntPtr ToNative(PinCollection pin);
}
internal enum System.Fabric.ContainerEventType : Enum {
    public int value__;
    public static ContainerEventType None;
    public static ContainerEventType Stop;
    public static ContainerEventType Die;
    public static ContainerEventType Health;
    public static ContainerEventType ExecDie;
}
internal class System.Fabric.ContainerHealthConfigDescription : object {
    [CompilerGeneratedAttribute]
private bool <IncludeDockerHealthStatusInSystemHealthReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RestartContainerOnUnhealthyDockerHealthStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatContainerUnhealthyStatusAsError>k__BackingField;
    internal bool IncludeDockerHealthStatusInSystemHealthReport { get; internal set; }
    internal bool RestartContainerOnUnhealthyDockerHealthStatus { get; internal set; }
    internal bool TreatContainerUnhealthyStatusAsError { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_IncludeDockerHealthStatusInSystemHealthReport();
    [CompilerGeneratedAttribute]
internal void set_IncludeDockerHealthStatusInSystemHealthReport(bool value);
    [CompilerGeneratedAttribute]
internal bool get_RestartContainerOnUnhealthyDockerHealthStatus();
    [CompilerGeneratedAttribute]
internal void set_RestartContainerOnUnhealthyDockerHealthStatus(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TreatContainerUnhealthyStatusAsError();
    [CompilerGeneratedAttribute]
internal void set_TreatContainerUnhealthyStatusAsError(bool value);
    internal static ContainerHealthConfigDescription CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerImageDescription : object {
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryCredentialDescription <RepositoryCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultRepositoryCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTokenAuthenticationCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryAuthenticationDescription <RepositoryAuthentication>k__BackingField;
    internal string ImageName { get; internal set; }
    internal RepositoryCredentialDescription RepositoryCredential { get; internal set; }
    internal bool UseDefaultRepositoryCredentials { get; internal set; }
    internal bool UseTokenAuthenticationCredentials { get; internal set; }
    internal RepositoryAuthenticationDescription RepositoryAuthentication { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ImageName();
    [CompilerGeneratedAttribute]
internal void set_ImageName(string value);
    [CompilerGeneratedAttribute]
internal RepositoryCredentialDescription get_RepositoryCredential();
    [CompilerGeneratedAttribute]
internal void set_RepositoryCredential(RepositoryCredentialDescription value);
    [CompilerGeneratedAttribute]
internal bool get_UseDefaultRepositoryCredentials();
    [CompilerGeneratedAttribute]
internal void set_UseDefaultRepositoryCredentials(bool value);
    [CompilerGeneratedAttribute]
internal bool get_UseTokenAuthenticationCredentials();
    [CompilerGeneratedAttribute]
internal void set_UseTokenAuthenticationCredentials(bool value);
    [CompilerGeneratedAttribute]
internal RepositoryAuthenticationDescription get_RepositoryAuthentication();
    [CompilerGeneratedAttribute]
internal void set_RepositoryAuthentication(RepositoryAuthenticationDescription value);
    internal static ContainerImageDescription CreateFromNative(IntPtr nativePtr);
    internal static ContainerImageDescription CreateFromNative(FABRIC_CONTAINER_IMAGE_DESCRIPTION nativeDescription);
    internal static List`1<ContainerImageDescription> CreateFromNativeList(IntPtr nativePtr);
}
internal enum System.Fabric.ContainerIsolationMode : Enum {
    public int value__;
    public static ContainerIsolationMode Unknown;
    public static ContainerIsolationMode Process;
    public static ContainerIsolationMode HyperV;
}
internal class System.Fabric.ContainerLabelDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public static ContainerLabelDescription CreateFromNative(FABRIC_CONTAINER_LABEL_DESCRIPTION nativeDescription);
    public static List`1<ContainerLabelDescription> CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerLogConfigDescription : object {
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContainerDriverOptionDescription> <DriverOpts>k__BackingField;
    internal string Driver { get; internal set; }
    internal List`1<ContainerDriverOptionDescription> DriverOpts { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Driver();
    [CompilerGeneratedAttribute]
internal void set_Driver(string value);
    [CompilerGeneratedAttribute]
internal List`1<ContainerDriverOptionDescription> get_DriverOpts();
    [CompilerGeneratedAttribute]
internal void set_DriverOpts(List`1<ContainerDriverOptionDescription> value);
    internal static ContainerLogConfigDescription CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerNetworkConfigDescription : object {
    [CompilerGeneratedAttribute]
private string <OpenNetworkAssignedIp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <OverlayNetworkResources>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PortBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerNetworkType <NetworkType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NetworkResource> <NetworkResources>k__BackingField;
    internal string OpenNetworkAssignedIp { get; internal set; }
    internal IDictionary`2<string, string> OverlayNetworkResources { get; internal set; }
    internal IDictionary`2<string, string> PortBindings { get; internal set; }
    internal string NodeId { get; internal set; }
    internal string NodeName { get; internal set; }
    internal string NodeIpAddress { get; internal set; }
    public ContainerNetworkType NetworkType { get; public set; }
    public List`1<NetworkResource> NetworkResources { get; public set; }
    [CompilerGeneratedAttribute]
internal string get_OpenNetworkAssignedIp();
    [CompilerGeneratedAttribute]
internal void set_OpenNetworkAssignedIp(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_OverlayNetworkResources();
    [CompilerGeneratedAttribute]
internal void set_OverlayNetworkResources(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_PortBindings();
    [CompilerGeneratedAttribute]
internal void set_PortBindings(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal string get_NodeId();
    [CompilerGeneratedAttribute]
internal void set_NodeId(string value);
    [CompilerGeneratedAttribute]
internal string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
internal string get_NodeIpAddress();
    [CompilerGeneratedAttribute]
internal void set_NodeIpAddress(string value);
    [CompilerGeneratedAttribute]
public ContainerNetworkType get_NetworkType();
    [CompilerGeneratedAttribute]
public void set_NetworkType(ContainerNetworkType value);
    [CompilerGeneratedAttribute]
public List`1<NetworkResource> get_NetworkResources();
    [CompilerGeneratedAttribute]
public void set_NetworkResources(List`1<NetworkResource> value);
    internal static ContainerNetworkConfigDescription CreateFromNative(IntPtr nativePtr);
}
internal enum System.Fabric.ContainerNetworkType : Enum {
    public int value__;
    public static ContainerNetworkType Other;
    public static ContainerNetworkType Open;
    public static ContainerNetworkType Isolated;
    public static ContainerNetworkType Delegated;
}
internal class System.Fabric.ContainerUpdateRouteArgs : object {
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerNetworkType <NetworkType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GatewayIpAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainerRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupName>k__BackingField;
    internal string ContainerId { get; internal set; }
    internal string ContainerName { get; internal set; }
    internal string ApplicationId { get; internal set; }
    internal string ApplicationName { get; internal set; }
    public ContainerNetworkType NetworkType { get; public set; }
    internal List`1<string> GatewayIpAddresses { get; internal set; }
    internal bool AutoRemove { get; internal set; }
    internal bool IsContainerRoot { get; internal set; }
    internal string CgroupName { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ContainerId();
    [CompilerGeneratedAttribute]
internal void set_ContainerId(string value);
    [CompilerGeneratedAttribute]
internal string get_ContainerName();
    [CompilerGeneratedAttribute]
internal void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ApplicationId();
    [CompilerGeneratedAttribute]
internal void set_ApplicationId(string value);
    [CompilerGeneratedAttribute]
internal string get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public ContainerNetworkType get_NetworkType();
    [CompilerGeneratedAttribute]
public void set_NetworkType(ContainerNetworkType value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_GatewayIpAddresses();
    [CompilerGeneratedAttribute]
internal void set_GatewayIpAddresses(List`1<string> value);
    [CompilerGeneratedAttribute]
internal bool get_AutoRemove();
    [CompilerGeneratedAttribute]
internal void set_AutoRemove(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsContainerRoot();
    [CompilerGeneratedAttribute]
internal void set_IsContainerRoot(bool value);
    [CompilerGeneratedAttribute]
internal string get_CgroupName();
    [CompilerGeneratedAttribute]
internal void set_CgroupName(string value);
    internal static ContainerUpdateRouteArgs CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ContainerVolumeDescription : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContainerDriverOptionDescription> <DriverOpts>k__BackingField;
    internal string Source { get; internal set; }
    internal string Destination { get; internal set; }
    internal string Driver { get; internal set; }
    internal bool IsReadOnly { get; internal set; }
    internal List`1<ContainerDriverOptionDescription> DriverOpts { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(string value);
    [CompilerGeneratedAttribute]
internal string get_Destination();
    [CompilerGeneratedAttribute]
internal void set_Destination(string value);
    [CompilerGeneratedAttribute]
internal string get_Driver();
    [CompilerGeneratedAttribute]
internal void set_Driver(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
internal void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
internal List`1<ContainerDriverOptionDescription> get_DriverOpts();
    [CompilerGeneratedAttribute]
internal void set_DriverOpts(List`1<ContainerDriverOptionDescription> value);
    internal static ContainerVolumeDescription CreateFromNative(FABRIC_CONTAINER_VOLUME_DESCRIPTION nativeDescription);
    internal static List`1<ContainerVolumeDescription> CreateFromNative(IntPtr nativePtr);
}
internal enum System.Fabric.CopyFlag : Enum {
    public int value__;
    public static CopyFlag CopyIfDifferent;
    public static CopyFlag AtomicCopy;
    public static CopyFlag AtomicCopySkipIfExists;
}
public enum System.Fabric.CredentialType : Enum {
    public int value__;
    public static CredentialType None;
    public static CredentialType X509;
    public static CredentialType Windows;
    public static CredentialType Claims;
}
public enum System.Fabric.DataLossMode : Enum {
    public int value__;
    public static DataLossMode Invalid;
    public static DataLossMode PartialDataLoss;
    public static DataLossMode FullDataLoss;
}
public class System.Fabric.DataPackage : object {
    [CompilerGeneratedAttribute]
private DataPackageDescription <Description>k__BackingField;
    public DataPackageDescription Description { get; }
    public string Path { get; }
    internal DataPackage(DataPackageDescription description);
    [CompilerGeneratedAttribute]
public DataPackageDescription get_Description();
    public string get_Path();
    internal static DataPackage CreateFromNative(IFabricDataPackage nativePackage);
}
internal class System.Fabric.DefaultServiceFactory : object {
    private Type serviceImplementationType;
    internal Type ServiceImplementationType { get; }
    public DefaultServiceFactory(Type serviceImplementationType);
    internal Type get_ServiceImplementationType();
    public sealed virtual IStatefulServiceReplica CreateReplica(string serviceType, Uri serviceName, Byte[] initializationData, Guid partitionId, long instanceId);
    public sealed virtual IStatelessServiceInstance CreateInstance(string serviceType, Uri serviceName, Byte[] initializationData, Guid partitionId, long instanceId);
    private T CreateHelper(string serviceType, Uri serviceName, Byte[] initializationData, Guid partitionId, long instanceId, bool isStatefulCreate);
}
public class System.Fabric.DeletePropertyOperation : PropertyBatchOperation {
    public DeletePropertyOperation(string propertyName);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public enum System.Fabric.DeploymentStatus : Enum {
    public int value__;
    public static DeploymentStatus Invalid;
    public static DeploymentStatus Downloading;
    public static DeploymentStatus Activating;
    public static DeploymentStatus Active;
    public static DeploymentStatus Upgrading;
    public static DeploymentStatus Deactivating;
    public static DeploymentStatus RanToCompletion;
    public static DeploymentStatus Failed;
}
public class System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism : ScalingMechanismDescription {
    [CompilerGeneratedAttribute]
private int <MinPartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScaleIncrement>k__BackingField;
    public int MinPartitionCount { get; public set; }
    public int MaxPartitionCount { get; public set; }
    public int ScaleIncrement { get; public set; }
    internal AddRemoveIncrementalNamedPartitionScalingMechanism(AddRemoveIncrementalNamedPartitionScalingMechanism other);
    [CompilerGeneratedAttribute]
public int get_MinPartitionCount();
    [CompilerGeneratedAttribute]
public void set_MinPartitionCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxPartitionCount();
    [CompilerGeneratedAttribute]
public void set_MaxPartitionCount(int value);
    [CompilerGeneratedAttribute]
public int get_ScaleIncrement();
    [CompilerGeneratedAttribute]
public void set_ScaleIncrement(int value);
    internal static AddRemoveIncrementalNamedPartitionScalingMechanism CreateFromNative(FABRIC_SCALING_MECHANISM policy);
    public virtual string ToString();
    internal virtual void ToNative(PinCollection pinCollection, FABRIC_SCALING_MECHANISM& scalingMechanism);
}
[FlagsAttribute]
public enum System.Fabric.Description.ApplicationDefinitionKindFilter : Enum {
    public int value__;
    public static ApplicationDefinitionKindFilter Default;
    public static ApplicationDefinitionKindFilter All;
    public static ApplicationDefinitionKindFilter ServiceFabricApplicationDescription;
    public static ApplicationDefinitionKindFilter Compose;
    public static ApplicationDefinitionKindFilter MeshApplicationDescription;
}
public class System.Fabric.Description.ApplicationDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <ApplicationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinimumNodes>k__BackingField;
    public IList`1<ApplicationMetricDescription> Metrics;
    [CompilerGeneratedAttribute]
private ManagedApplicationIdentityDescription <ManagedApplicationIdentity>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; public set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeName { get; public set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeVersion { get; public set; }
    [JsonCustomizationAttribute]
public NameValueCollection ApplicationParameters { get; private set; }
    [JsonCustomizationAttribute]
private ApplicationParameterList ParameterList { get; private set; }
    public long MaximumNodes { get; public set; }
    public long MinimumNodes { get; public set; }
    public ManagedApplicationIdentityDescription ManagedApplicationIdentity { get; public set; }
    public ApplicationDescription(Uri applicationName, string applicationTypeName, string applicationTypeVersion);
    public ApplicationDescription(Uri applicationName, string applicationTypeName, string applicationTypeVersion, NameValueCollection applicationParameters);
    public ApplicationDescription(Uri applicationName, string applicationTypeName, string applicationTypeVersion, NameValueCollection applicationParameters, ManagedApplicationIdentityDescription managedApplicationIdentity);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersion();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_ApplicationParameters();
    [CompilerGeneratedAttribute]
private void set_ApplicationParameters(NameValueCollection value);
    private ApplicationParameterList get_ParameterList();
    private void set_ParameterList(ApplicationParameterList value);
    [CompilerGeneratedAttribute]
public long get_MaximumNodes();
    [CompilerGeneratedAttribute]
public void set_MaximumNodes(long value);
    [CompilerGeneratedAttribute]
public long get_MinimumNodes();
    [CompilerGeneratedAttribute]
public void set_MinimumNodes(long value);
    [CompilerGeneratedAttribute]
public ManagedApplicationIdentityDescription get_ManagedApplicationIdentity();
    [CompilerGeneratedAttribute]
public void set_ManagedApplicationIdentity(ManagedApplicationIdentityDescription value);
    internal static void Validate(ApplicationDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ApplicationHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceHealthStatesFilter <ServicesFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedApplicationHealthStatesFilter <DeployedApplicationsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthStatisticsFilter <HealthStatisticsFilter>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public ApplicationHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public ServiceHealthStatesFilter ServicesFilter { get; public set; }
    public DeployedApplicationHealthStatesFilter DeployedApplicationsFilter { get; public set; }
    public ApplicationHealthStatisticsFilter HealthStatisticsFilter { get; public set; }
    public ApplicationHealthQueryDescription(Uri applicationName);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    [CompilerGeneratedAttribute]
public ServiceHealthStatesFilter get_ServicesFilter();
    [CompilerGeneratedAttribute]
public void set_ServicesFilter(ServiceHealthStatesFilter value);
    [CompilerGeneratedAttribute]
public DeployedApplicationHealthStatesFilter get_DeployedApplicationsFilter();
    [CompilerGeneratedAttribute]
public void set_DeployedApplicationsFilter(DeployedApplicationHealthStatesFilter value);
    [CompilerGeneratedAttribute]
public ApplicationHealthStatisticsFilter get_HealthStatisticsFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStatisticsFilter(ApplicationHealthStatisticsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.ApplicationLoadInformationQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    public string ApplicationName { get; public set; }
    public ApplicationLoadInformationQueryDescription(string applicationName);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ApplicationMetricDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeReservationCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumNodeCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalApplicationCapacity>k__BackingField;
    public string Name { get; public set; }
    public long NodeReservationCapacity { get; public set; }
    public long MaximumNodeCapacity { get; public set; }
    public long TotalApplicationCapacity { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_NodeReservationCapacity();
    [CompilerGeneratedAttribute]
public void set_NodeReservationCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_MaximumNodeCapacity();
    [CompilerGeneratedAttribute]
public void set_MaximumNodeCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_TotalApplicationCapacity();
    [CompilerGeneratedAttribute]
public void set_TotalApplicationCapacity(long value);
    internal static void Validate(ApplicationMetricDescription description, long maximumNodes);
    internal void ToNative(PinCollection pinCollection, FABRIC_APPLICATION_METRIC_DESCRIPTION& nativeDescription);
    internal static ApplicationMetricDescription CreateFromNative(FABRIC_APPLICATION_METRIC_DESCRIPTION nativeDescription);
}
internal class System.Fabric.Description.ApplicationNameQueryDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    public Uri ServiceName { get; private set; }
    public ApplicationNameQueryDescription(Uri serviceName);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ApplicationNetworkQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    public Uri ApplicationName { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    internal static void Validate(ApplicationNetworkQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Description.ApplicationPackageCleanupPolicy : Enum {
    public int value__;
    public static ApplicationPackageCleanupPolicy Invalid;
    public static ApplicationPackageCleanupPolicy Default;
    public static ApplicationPackageCleanupPolicy Automatic;
    public static ApplicationPackageCleanupPolicy Manual;
}
public class System.Fabric.Description.ApplicationParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonCustomizationAttribute]
public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string ToString();
    internal void ToNative(PinCollection pinCollection, FABRIC_APPLICATION_PARAMETER& nativeParameter);
    internal static ApplicationParameter CreateFromNative(FABRIC_APPLICATION_PARAMETER nativeParameter);
}
public class System.Fabric.Description.ApplicationParameterList : KeyedCollection`2<string, ApplicationParameter> {
    public ApplicationParameterList(IEqualityComparer`1<string> comparer);
    public ApplicationParameterList(IEqualityComparer`1<string> comparer, int dictionaryCreationThreshold);
    internal ApplicationParameterList(NameValueCollection collection);
    public virtual string ToString();
    internal static ApplicationParameterList FromNative(IntPtr nativeListPtr);
    internal static ApplicationParameterList FromNative(FABRIC_APPLICATION_PARAMETER_LIST* nativeList);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal IDictionary`2<string, string> AsDictionary();
    internal NameValueCollection AsNameValueCollection();
    protected virtual string GetKeyForItem(ApplicationParameter item);
}
public class System.Fabric.Description.ApplicationPrincipalsDescription : object {
    [CompilerGeneratedAttribute]
private IList`1<SecurityUserDescription> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SecurityGroupDescription> <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedIdentityDescriptionList <ManagedIdentities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenServiceEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultIdentity>k__BackingField;
    public IList`1<SecurityUserDescription> Users { get; private set; }
    public IList`1<SecurityGroupDescription> Groups { get; private set; }
    public ManagedIdentityDescriptionList ManagedIdentities { get; private set; }
    public string TokenServiceEndpoint { get; private set; }
    public string DefaultIdentity { get; private set; }
    internal ApplicationPrincipalsDescription(IList`1<SecurityUserDescription> users, IList`1<SecurityGroupDescription> groups);
    [CompilerGeneratedAttribute]
public IList`1<SecurityUserDescription> get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(IList`1<SecurityUserDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<SecurityGroupDescription> get_Groups();
    [CompilerGeneratedAttribute]
private void set_Groups(IList`1<SecurityGroupDescription> value);
    [CompilerGeneratedAttribute]
public ManagedIdentityDescriptionList get_ManagedIdentities();
    [CompilerGeneratedAttribute]
private void set_ManagedIdentities(ManagedIdentityDescriptionList value);
    [CompilerGeneratedAttribute]
public string get_TokenServiceEndpoint();
    [CompilerGeneratedAttribute]
private void set_TokenServiceEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultIdentity();
    [CompilerGeneratedAttribute]
private void set_DefaultIdentity(string value);
    internal static ApplicationPrincipalsDescription CreateFromNative(FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION* nativeDescription);
}
public class System.Fabric.Description.ApplicationQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private Uri <ApplicationNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeApplicationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeManagedApplicationIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationDefinitionKindFilter <ApplicationDefinitionKindFilter>k__BackingField;
    public Uri ApplicationNameFilter { get; public set; }
    public string ApplicationTypeNameFilter { get; public set; }
    public bool ExcludeApplicationParameters { get; public set; }
    public bool ExcludeManagedApplicationIdentity { get; public set; }
    public ApplicationDefinitionKindFilter ApplicationDefinitionKindFilter { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationNameFilter(Uri value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeNameFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeApplicationParameters();
    [CompilerGeneratedAttribute]
public void set_ExcludeApplicationParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeManagedApplicationIdentity();
    [CompilerGeneratedAttribute]
public void set_ExcludeManagedApplicationIdentity(bool value);
    [CompilerGeneratedAttribute]
public ApplicationDefinitionKindFilter get_ApplicationDefinitionKindFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationDefinitionKindFilter(ApplicationDefinitionKindFilter value);
    private static void ExclusiveFilterHelper(bool isValid, Boolean& hasFilterSet);
    internal static void Validate(ApplicationQueryDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
[FlagsAttribute]
public enum System.Fabric.Description.ApplicationTypeDefinitionKindFilter : Enum {
    public int value__;
    public static ApplicationTypeDefinitionKindFilter Default;
    public static ApplicationTypeDefinitionKindFilter All;
    public static ApplicationTypeDefinitionKindFilter ServiceFabricApplicationPackage;
    public static ApplicationTypeDefinitionKindFilter Compose;
    public static ApplicationTypeDefinitionKindFilter MeshApplicationDescription;
}
internal class System.Fabric.Description.ApplicationTypeQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeNameFilter>k__BackingField;
    public string ApplicationTypeNameFilter { get; public set; }
    public ApplicationTypeQueryDescription(string filter);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeNameFilter(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ApplicationUpdateDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveApplicationCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaximumNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinimumNodes>k__BackingField;
    public IList`1<ApplicationMetricDescription> Metrics;
    public Uri ApplicationName { get; public set; }
    public bool RemoveApplicationCapacity { get; public set; }
    public Nullable`1<long> MaximumNodes { get; public set; }
    public Nullable`1<long> MinimumNodes { get; public set; }
    public ApplicationUpdateDescription(Uri applicationName);
    public ApplicationUpdateDescription(Uri applicationName, bool removeApplicationCapacity, long minimumNodes, long maximumNodes, IList`1<ApplicationMetricDescription> metrics);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public bool get_RemoveApplicationCapacity();
    [CompilerGeneratedAttribute]
public void set_RemoveApplicationCapacity(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaximumNodes();
    [CompilerGeneratedAttribute]
public void set_MaximumNodes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MinimumNodes();
    [CompilerGeneratedAttribute]
public void set_MinimumNodes(Nullable`1<long> value);
    internal static void Validate(ApplicationUpdateDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ApplicationUpgradeDescription : object {
    private ApplicationParameterList parameters;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradePolicyDescription <UpgradePolicyDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <ApplicationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedApplicationIdentityDescription <ManagedApplicationIdentity>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; public set; }
    public string TargetApplicationTypeVersion { get; public set; }
    [JsonCustomizationAttribute]
public UpgradePolicyDescription UpgradePolicyDescription { get; public set; }
    [JsonCustomizationAttribute]
public NameValueCollection ApplicationParameters { get; private set; }
    [JsonCustomizationAttribute]
private ApplicationParameterList Parameters { get; private set; }
    public ManagedApplicationIdentityDescription ManagedApplicationIdentity { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_TargetApplicationTypeVersion();
    [CompilerGeneratedAttribute]
public void set_TargetApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public UpgradePolicyDescription get_UpgradePolicyDescription();
    [CompilerGeneratedAttribute]
public void set_UpgradePolicyDescription(UpgradePolicyDescription value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_ApplicationParameters();
    [CompilerGeneratedAttribute]
private void set_ApplicationParameters(NameValueCollection value);
    private ApplicationParameterList get_Parameters();
    private void set_Parameters(ApplicationParameterList value);
    [CompilerGeneratedAttribute]
public ManagedApplicationIdentityDescription get_ManagedApplicationIdentity();
    [CompilerGeneratedAttribute]
public void set_ManagedApplicationIdentity(ManagedApplicationIdentityDescription value);
    internal static void Validate(ApplicationUpgradeDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ApplicationUpgradeDescription FromNative(IntPtr descriptionPtr);
}
public class System.Fabric.Description.ApplicationUpgradeUpdateDescription : UpgradeUpdateDescriptionBase {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; public set; }
    [JsonCustomizationAttribute]
public ApplicationHealthPolicy HealthPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    internal static void Validate(ApplicationUpgradeUpdateDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.AuthorizedConnectionRequest : object {
    [CompilerGeneratedAttribute]
private string <ClientPublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ClientPort>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizedConnectionKeyType <KeyType>k__BackingField;
    public string ClientPublicKey { get; internal set; }
    public string ClientAddress { get; internal set; }
    public UInt32 ClientPort { get; internal set; }
    public AuthorizedConnectionKeyType KeyType { get; internal set; }
    public AuthorizedConnectionRequest(string clientPublicKey, string clientAddress, UInt32 clientPort, AuthorizedConnectionKeyType keyType);
    [CompilerGeneratedAttribute]
public string get_ClientPublicKey();
    [CompilerGeneratedAttribute]
internal void set_ClientPublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_ClientAddress();
    [CompilerGeneratedAttribute]
internal void set_ClientAddress(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ClientPort();
    [CompilerGeneratedAttribute]
internal void set_ClientPort(UInt32 value);
    [CompilerGeneratedAttribute]
public AuthorizedConnectionKeyType get_KeyType();
    [CompilerGeneratedAttribute]
internal void set_KeyType(AuthorizedConnectionKeyType value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.AuthorizedConnectionResult : object {
    [CompilerGeneratedAttribute]
private string <ServerPublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ServerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <AuthorizedConnectionIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizedConnectionKeyType <KeyType>k__BackingField;
    public string ServerPublicKey { get; internal set; }
    public string ServerAddress { get; internal set; }
    public UInt32 ServerPort { get; internal set; }
    public Guid AuthorizedConnectionIdentifier { get; internal set; }
    public AuthorizedConnectionKeyType KeyType { get; internal set; }
    public AuthorizedConnectionResult(string serverPublicKey, string serverAddress, UInt32 serverPort, Guid authorizedConnectionIdentifier, AuthorizedConnectionKeyType keyType);
    [CompilerGeneratedAttribute]
public string get_ServerPublicKey();
    [CompilerGeneratedAttribute]
internal void set_ServerPublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_ServerAddress();
    [CompilerGeneratedAttribute]
internal void set_ServerAddress(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ServerPort();
    [CompilerGeneratedAttribute]
internal void set_ServerPort(UInt32 value);
    [CompilerGeneratedAttribute]
public Guid get_AuthorizedConnectionIdentifier();
    [CompilerGeneratedAttribute]
internal void set_AuthorizedConnectionIdentifier(Guid value);
    [CompilerGeneratedAttribute]
public AuthorizedConnectionKeyType get_KeyType();
    [CompilerGeneratedAttribute]
internal void set_KeyType(AuthorizedConnectionKeyType value);
    internal static AuthorizedConnectionResult CreateFromNative(IFabricAuthorizedConnectionResult nativeParameter);
    internal static AuthorizedConnectionResult CreateFromNative(FABRIC_AUTHORIZED_CONNECTION_RESULT nativeParameter);
}
public class System.Fabric.Description.AveragePartitionLoadScalingTrigger : ScalingTriggerDescription {
    [CompilerGeneratedAttribute]
private string <MetricName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerLoadThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperLoadThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ScaleInterval>k__BackingField;
    public string MetricName { get; public set; }
    public double LowerLoadThreshold { get; public set; }
    public double UpperLoadThreshold { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> ScaleInterval { get; public set; }
    [JsonCustomizationAttribute]
private int ScaleIntervalInSeconds { get; private set; }
    internal AveragePartitionLoadScalingTrigger(AveragePartitionLoadScalingTrigger other);
    [CompilerGeneratedAttribute]
public string get_MetricName();
    [CompilerGeneratedAttribute]
public void set_MetricName(string value);
    [CompilerGeneratedAttribute]
public double get_LowerLoadThreshold();
    [CompilerGeneratedAttribute]
public void set_LowerLoadThreshold(double value);
    [CompilerGeneratedAttribute]
public double get_UpperLoadThreshold();
    [CompilerGeneratedAttribute]
public void set_UpperLoadThreshold(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ScaleInterval();
    [CompilerGeneratedAttribute]
public void set_ScaleInterval(Nullable`1<TimeSpan> value);
    private int get_ScaleIntervalInSeconds();
    private void set_ScaleIntervalInSeconds(int value);
    public virtual string ToString();
    internal virtual void ToNative(PinCollection pinCollection, FABRIC_SCALING_TRIGGER& scalingTrigger);
    internal static AveragePartitionLoadScalingTrigger CreateFromNative(FABRIC_SCALING_TRIGGER policy);
}
public class System.Fabric.Description.AverageServiceLoadScalingTrigger : ScalingTriggerDescription {
    [CompilerGeneratedAttribute]
private string <MetricName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LowerLoadThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpperLoadThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOnlyPrimaryLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ScaleInterval>k__BackingField;
    public string MetricName { get; public set; }
    public double LowerLoadThreshold { get; public set; }
    public double UpperLoadThreshold { get; public set; }
    public bool UseOnlyPrimaryLoad { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> ScaleInterval { get; public set; }
    private int ScaleIntervalInSeconds { get; private set; }
    internal AverageServiceLoadScalingTrigger(AverageServiceLoadScalingTrigger other);
    [CompilerGeneratedAttribute]
public string get_MetricName();
    [CompilerGeneratedAttribute]
public void set_MetricName(string value);
    [CompilerGeneratedAttribute]
public double get_LowerLoadThreshold();
    [CompilerGeneratedAttribute]
public void set_LowerLoadThreshold(double value);
    [CompilerGeneratedAttribute]
public double get_UpperLoadThreshold();
    [CompilerGeneratedAttribute]
public void set_UpperLoadThreshold(double value);
    [CompilerGeneratedAttribute]
public bool get_UseOnlyPrimaryLoad();
    [CompilerGeneratedAttribute]
public void set_UseOnlyPrimaryLoad(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ScaleInterval();
    [CompilerGeneratedAttribute]
public void set_ScaleInterval(Nullable`1<TimeSpan> value);
    private int get_ScaleIntervalInSeconds();
    private void set_ScaleIntervalInSeconds(int value);
    public virtual string ToString();
    internal virtual void ToNative(PinCollection pinCollection, FABRIC_SCALING_TRIGGER& scalingTrigger);
    internal static AverageServiceLoadScalingTrigger CreateFromNative(FABRIC_SCALING_TRIGGER policy);
}
public class System.Fabric.Description.BlockListQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockListType <BlockListType>k__BackingField;
    public Uri ServiceName { get; internal set; }
    public BlockListType BlockListType { get; internal set; }
    public BlockListQueryDescription(Uri serviceName);
    public BlockListQueryDescription(Uri serviceName, BlockListType listType);
    public BlockListQueryDescription(Uri serviceName, BlockListType listType, long maxResults, string continuationToken);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public BlockListType get_BlockListType();
    [CompilerGeneratedAttribute]
internal void set_BlockListType(BlockListType value);
    internal static void Validate(BlockListQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.CancelTestCommandDescription : object {
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    public Guid OperationId { get; internal set; }
    public bool Force { get; internal set; }
    public CancelTestCommandDescription(Guid operationId, bool force);
    [CompilerGeneratedAttribute]
public Guid get_OperationId();
    [CompilerGeneratedAttribute]
internal void set_OperationId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
internal void set_Force(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static CancelTestCommandDescription CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Description.ClaimDescription : object {
    private string claimType;
    private string issuer;
    private string originalIssuer;
    private string subject;
    private string value;
    private string valueType;
    public string ClaimType { get; }
    public string Issuer { get; }
    public string OriginalIssuer { get; }
    public string Subject { get; }
    public string Value { get; }
    public string ValueType { get; }
    public ClaimDescription(string claimType, string issuer, string originalIssuer, string subject, string value, string valueType);
    public string get_ClaimType();
    public string get_Issuer();
    public string get_OriginalIssuer();
    public string get_Subject();
    public string get_Value();
    public string get_ValueType();
    internal void ToNative(PinCollection pin, FABRIC_TOKEN_CLAIM& description);
}
internal class System.Fabric.Description.ClaimDescriptionList : object {
    private ClaimDescription[] claims;
    private int count;
    public void AddClaims(List`1<ClaimDescription> claims);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Description.ClusterHealthChunkQueryDescription : object {
    [CompilerGeneratedAttribute]
private ClusterHealthPolicy <ClusterHealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicyMap <ApplicationHealthPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ApplicationHealthStateFilter> <ApplicationFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NodeHealthStateFilter> <NodeFilters>k__BackingField;
    [JsonCustomizationAttribute]
public ClusterHealthPolicy ClusterHealthPolicy { get; public set; }
    public ApplicationHealthPolicyMap ApplicationHealthPolicies { get; internal set; }
    public IList`1<ApplicationHealthStateFilter> ApplicationFilters { get; internal set; }
    public IList`1<NodeHealthStateFilter> NodeFilters { get; internal set; }
    [CompilerGeneratedAttribute]
public ClusterHealthPolicy get_ClusterHealthPolicy();
    [CompilerGeneratedAttribute]
public void set_ClusterHealthPolicy(ClusterHealthPolicy value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicyMap get_ApplicationHealthPolicies();
    [CompilerGeneratedAttribute]
internal void set_ApplicationHealthPolicies(ApplicationHealthPolicyMap value);
    [CompilerGeneratedAttribute]
public IList`1<ApplicationHealthStateFilter> get_ApplicationFilters();
    [CompilerGeneratedAttribute]
internal void set_ApplicationFilters(IList`1<ApplicationHealthStateFilter> value);
    [CompilerGeneratedAttribute]
public IList`1<NodeHealthStateFilter> get_NodeFilters();
    [CompilerGeneratedAttribute]
internal void set_NodeFilters(IList`1<NodeHealthStateFilter> value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ClusterHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private ClusterHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeHealthStatesFilter <NodesFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthStatesFilter <ApplicationsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicyMap <ApplicationHealthPolicyMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterHealthStatisticsFilter <HealthStatisticsFilter>k__BackingField;
    public ClusterHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public NodeHealthStatesFilter NodesFilter { get; public set; }
    public ApplicationHealthStatesFilter ApplicationsFilter { get; public set; }
    public ApplicationHealthPolicyMap ApplicationHealthPolicyMap { get; private set; }
    public ClusterHealthStatisticsFilter HealthStatisticsFilter { get; public set; }
    [CompilerGeneratedAttribute]
public ClusterHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ClusterHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    [CompilerGeneratedAttribute]
public NodeHealthStatesFilter get_NodesFilter();
    [CompilerGeneratedAttribute]
public void set_NodesFilter(NodeHealthStatesFilter value);
    [CompilerGeneratedAttribute]
public ApplicationHealthStatesFilter get_ApplicationsFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationsFilter(ApplicationHealthStatesFilter value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicyMap get_ApplicationHealthPolicyMap();
    [CompilerGeneratedAttribute]
private void set_ApplicationHealthPolicyMap(ApplicationHealthPolicyMap value);
    [CompilerGeneratedAttribute]
public ClusterHealthStatisticsFilter get_HealthStatisticsFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStatisticsFilter(ClusterHealthStatisticsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ClusterManifestQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <ClusterManifestVersion>k__BackingField;
    public string ClusterManifestVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClusterManifestVersion();
    [CompilerGeneratedAttribute]
public void set_ClusterManifestVersion(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.CodePackageDescription : PackageDescription {
    [CompilerGeneratedAttribute]
private ExeHostEntryPointDescription <SetupEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryPointDescription <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShared>k__BackingField;
    public ExeHostEntryPointDescription SetupEntryPoint { get; internal set; }
    public EntryPointDescription EntryPoint { get; internal set; }
    public bool IsShared { get; internal set; }
    [CompilerGeneratedAttribute]
public ExeHostEntryPointDescription get_SetupEntryPoint();
    [CompilerGeneratedAttribute]
internal void set_SetupEntryPoint(ExeHostEntryPointDescription value);
    [CompilerGeneratedAttribute]
public EntryPointDescription get_EntryPoint();
    [CompilerGeneratedAttribute]
internal void set_EntryPoint(EntryPointDescription value);
    [CompilerGeneratedAttribute]
public bool get_IsShared();
    [CompilerGeneratedAttribute]
internal void set_IsShared(bool value);
    internal static CodePackageDescription CreateFromNative(FABRIC_CODE_PACKAGE_DESCRIPTION nativeDescription, string path);
}
public enum System.Fabric.Description.CodePackageEntryPointKind : Enum {
    public int value__;
    public static CodePackageEntryPointKind Invalid;
    public static CodePackageEntryPointKind None;
    public static CodePackageEntryPointKind Exe;
    public static CodePackageEntryPointKind DllHost;
    public static CodePackageEntryPointKind Container;
}
internal class System.Fabric.Description.ComposeDeploymentDescriptionWrapper : object {
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComposeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerRepositoryUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerRepositoryPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRepositoryPasswordEncrypted>k__BackingField;
    public string DeploymentName { get; private set; }
    public string ComposeFilePath { get; private set; }
    public string ContainerRepositoryUserName { get; public set; }
    public string ContainerRepositoryPassword { get; public set; }
    public bool IsRepositoryPasswordEncrypted { get; public set; }
    public ComposeDeploymentDescriptionWrapper(string deploymentName, string composeFilePath);
    [CompilerGeneratedAttribute]
public string get_DeploymentName();
    [CompilerGeneratedAttribute]
private void set_DeploymentName(string value);
    [CompilerGeneratedAttribute]
public string get_ComposeFilePath();
    [CompilerGeneratedAttribute]
private void set_ComposeFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerRepositoryUserName();
    [CompilerGeneratedAttribute]
public void set_ContainerRepositoryUserName(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerRepositoryPassword();
    [CompilerGeneratedAttribute]
public void set_ContainerRepositoryPassword(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRepositoryPasswordEncrypted();
    [CompilerGeneratedAttribute]
public void set_IsRepositoryPasswordEncrypted(bool value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.ComposeDeploymentRollbackDescriptionWrapper : object {
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    public string DeploymentName { get; private set; }
    public ComposeDeploymentRollbackDescriptionWrapper(string deploymentName);
    [CompilerGeneratedAttribute]
public string get_DeploymentName();
    [CompilerGeneratedAttribute]
private void set_DeploymentName(string value);
    internal IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.Description.ComposeDeploymentStatusQueryDescriptionWrapper : object {
    [CompilerGeneratedAttribute]
private string <DeploymentNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxResults>k__BackingField;
    public string DeploymentNameFilter { get; public set; }
    public string ContinuationToken { get; public set; }
    public long MaxResults { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DeploymentNameFilter();
    [CompilerGeneratedAttribute]
public void set_DeploymentNameFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public long get_MaxResults();
    [CompilerGeneratedAttribute]
public void set_MaxResults(long value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.ComposeDeploymentUpgradeDescriptionWrapper : object {
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ComposeFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerRegistryUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerRegistryPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRegistryPasswordEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradePolicyDescription <UpgradePolicyDescription>k__BackingField;
    public string DeploymentName { get; private set; }
    public String[] ComposeFilePaths { get; private set; }
    public string ContainerRegistryUserName { get; private set; }
    public string ContainerRegistryPassword { get; private set; }
    public bool IsRegistryPasswordEncrypted { get; private set; }
    public UpgradePolicyDescription UpgradePolicyDescription { get; private set; }
    public ComposeDeploymentUpgradeDescriptionWrapper(string deploymentName, String[] composeFilePaths, UpgradePolicyDescription upgradePolicyDescription);
    public ComposeDeploymentUpgradeDescriptionWrapper(string deploymentName, String[] composeFilePaths, UpgradePolicyDescription upgradePolicyDescription, string containerRegistryUserName, string containerRegistryPassword, bool isRegistryPasswordEncrypted);
    [CompilerGeneratedAttribute]
public string get_DeploymentName();
    [CompilerGeneratedAttribute]
private void set_DeploymentName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ComposeFilePaths();
    [CompilerGeneratedAttribute]
private void set_ComposeFilePaths(String[] value);
    [CompilerGeneratedAttribute]
public string get_ContainerRegistryUserName();
    [CompilerGeneratedAttribute]
private void set_ContainerRegistryUserName(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerRegistryPassword();
    [CompilerGeneratedAttribute]
private void set_ContainerRegistryPassword(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRegistryPasswordEncrypted();
    [CompilerGeneratedAttribute]
private void set_IsRegistryPasswordEncrypted(bool value);
    [CompilerGeneratedAttribute]
public UpgradePolicyDescription get_UpgradePolicyDescription();
    [CompilerGeneratedAttribute]
private void set_UpgradePolicyDescription(UpgradePolicyDescription value);
    internal static void Validate(ComposeDeploymentUpgradeDescriptionWrapper description);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ComposeDeploymentUpgradeDescriptionWrapper FromNative(IntPtr descriptionPtr);
}
public class System.Fabric.Description.ConfigParameterOverride : object {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistAcrossUpgrade>k__BackingField;
    public string SectionName { get; internal set; }
    public string ParameterName { get; internal set; }
    public string ParameterValue { get; internal set; }
    public Nullable`1<TimeSpan> Timeout { get; internal set; }
    public bool PersistAcrossUpgrade { get; internal set; }
    public ConfigParameterOverride(string sectionName, string parameterName, string parameterValue, Nullable`1<TimeSpan> timeout, bool persistAcrossUpgrade);
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
internal void set_SectionName(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
internal void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterValue();
    [CompilerGeneratedAttribute]
internal void set_ParameterValue(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
internal void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_PersistAcrossUpgrade();
    [CompilerGeneratedAttribute]
internal void set_PersistAcrossUpgrade(bool value);
    internal static ConfigParameterOverride CreateFromNative(FABRIC_CONFIGURATION_PARAMETER_OVERRIDE nativeParameter);
    internal IntPtr ToNative(PinCollection pinCollection, FABRIC_CONFIGURATION_PARAMETER_OVERRIDE& nativeDescription);
    private static UInt32 ToNativeTimeInSeconds(Nullable`1<TimeSpan> time);
    private static TimeSpan FromNativeTimeInSeconds(double time);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Description.ConfigParameterOverrideList : object {
    private IList`1<ConfigParameterOverride> list;
    public ConfigParameterOverride Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ConfigParameterOverrideList(IList`1<ConfigParameterOverride> input);
    public sealed virtual int IndexOf(ConfigParameterOverride item);
    public sealed virtual void Insert(int index, ConfigParameterOverride item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ConfigParameterOverride get_Item(int index);
    public sealed virtual void set_Item(int index, ConfigParameterOverride value);
    public sealed virtual void Add(ConfigParameterOverride item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ConfigParameterOverride item);
    public sealed virtual void CopyTo(ConfigParameterOverride[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ConfigParameterOverride item);
    public sealed virtual IEnumerator`1<ConfigParameterOverride> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ConfigParameterOverrideList CreateFromNativeListResult(IFabricGetGetConfigurationOverridesListResult result);
    internal static ConfigParameterOverrideList FromNative(FABRIC_CONFIGURATION_PARAMETER_OVERRIDE_LIST* nativeList);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ConfigurationPackageDescription : PackageDescription {
    [CompilerGeneratedAttribute]
private ConfigurationSettings <Settings>k__BackingField;
    public ConfigurationSettings Settings { get; internal set; }
    [CompilerGeneratedAttribute]
public ConfigurationSettings get_Settings();
    [CompilerGeneratedAttribute]
internal void set_Settings(ConfigurationSettings value);
    internal static ConfigurationPackageDescription CreateFromNative(FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION nativeDescription, string path, ConfigurationSettings settings);
}
public class System.Fabric.Description.ConfigurationProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MustOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Name { get; internal set; }
    public string Value { get; internal set; }
    public bool MustOverride { get; internal set; }
    public bool IsEncrypted { get; internal set; }
    public string Type { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_MustOverride();
    [CompilerGeneratedAttribute]
internal void set_MustOverride(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEncrypted();
    [CompilerGeneratedAttribute]
internal void set_IsEncrypted(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    public SecureString DecryptValue();
    internal static ConfigurationProperty CreateFromNative(IntPtr nativeRaw);
    private SecureString DecryptValueHelper(string encryptedValue);
    [CompilerGeneratedAttribute]
private SecureString <DecryptValue>b__21_0();
}
public class System.Fabric.Description.ConfigurationSection : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyedCollection`2<string, ConfigurationProperty> <Parameters>k__BackingField;
    public string Name { get; internal set; }
    public KeyedCollection`2<string, ConfigurationProperty> Parameters { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public KeyedCollection`2<string, ConfigurationProperty> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(KeyedCollection`2<string, ConfigurationProperty> value);
    internal static ConfigurationSection CreateFromNative(IntPtr nativeSectionRaw);
}
public class System.Fabric.Description.ConfigurationSettings : object {
    [CompilerGeneratedAttribute]
private KeyedCollection`2<string, ConfigurationSection> <Sections>k__BackingField;
    public KeyedCollection`2<string, ConfigurationSection> Sections { get; private set; }
    [CompilerGeneratedAttribute]
public KeyedCollection`2<string, ConfigurationSection> get_Sections();
    [CompilerGeneratedAttribute]
private void set_Sections(KeyedCollection`2<string, ConfigurationSection> value);
    internal static ConfigurationSettings CreateFromNative(IntPtr nativeRaw);
}
public class System.Fabric.Description.ConfigurationUpgradeDescription : object {
    private byte maxPercentUnhealthyApplications;
    private byte maxPercentUnhealthyNodes;
    private byte maxPercentDeltaUnhealthyNodes;
    private byte maxPercentUpgradeDomainDeltaUnhealthyNodes;
    [CompilerGeneratedAttribute]
private string <ClusterConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckRetryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckStableDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeDomainTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicyMap <ApplicationHealthPolicies>k__BackingField;
    public string ClusterConfiguration { get; internal set; }
    public TimeSpan HealthCheckRetryTimeout { get; public set; }
    public TimeSpan HealthCheckWaitDuration { get; public set; }
    public TimeSpan HealthCheckStableDuration { get; public set; }
    public TimeSpan UpgradeDomainTimeout { get; public set; }
    public TimeSpan UpgradeTimeout { get; public set; }
    public byte MaxPercentUnhealthyApplications { get; public set; }
    public byte MaxPercentUnhealthyNodes { get; public set; }
    public byte MaxPercentDeltaUnhealthyNodes { get; public set; }
    public byte MaxPercentUpgradeDomainDeltaUnhealthyNodes { get; public set; }
    public ApplicationHealthPolicyMap ApplicationHealthPolicies { get; internal set; }
    public ConfigurationUpgradeDescription(string clusterConfiguration);
    [CompilerGeneratedAttribute]
public string get_ClusterConfiguration();
    [CompilerGeneratedAttribute]
internal void set_ClusterConfiguration(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckRetryTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthCheckRetryTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckWaitDuration();
    [CompilerGeneratedAttribute]
public void set_HealthCheckWaitDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckStableDuration();
    [CompilerGeneratedAttribute]
public void set_HealthCheckStableDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeDomainTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeDomainTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeTimeout(TimeSpan value);
    public byte get_MaxPercentUnhealthyApplications();
    public void set_MaxPercentUnhealthyApplications(byte value);
    public byte get_MaxPercentUnhealthyNodes();
    public void set_MaxPercentUnhealthyNodes(byte value);
    public byte get_MaxPercentDeltaUnhealthyNodes();
    public void set_MaxPercentDeltaUnhealthyNodes(byte value);
    public byte get_MaxPercentUpgradeDomainDeltaUnhealthyNodes();
    public void set_MaxPercentUpgradeDomainDeltaUnhealthyNodes(byte value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicyMap get_ApplicationHealthPolicies();
    [CompilerGeneratedAttribute]
internal void set_ApplicationHealthPolicies(ApplicationHealthPolicyMap value);
    public virtual string ToString();
    internal string ToStringDescription();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ConfigurationUpgradeDescription CreateFromNative(IntPtr nativeRaw);
    private static TimeSpan FromNativeTimeInSeconds(UInt32 time);
}
public class System.Fabric.Description.ContainerHostEntryPointDescription : EntryPointDescription {
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    public string ImageName { get; internal set; }
    public string Commands { get; internal set; }
    public string EntryPoint { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ImageName();
    [CompilerGeneratedAttribute]
internal void set_ImageName(string value);
    [CompilerGeneratedAttribute]
public string get_Commands();
    [CompilerGeneratedAttribute]
internal void set_Commands(string value);
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
internal void set_EntryPoint(string value);
    public virtual string ToString();
    internal static ContainerHostEntryPointDescription CreateFromNative(IntPtr entryPointDescriptionPtr);
}
public class System.Fabric.Description.DataPackageDescription : PackageDescription {
    internal static DataPackageDescription CreateFromNative(FABRIC_DATA_PACKAGE_DESCRIPTION nativeDescription, string path);
}
public class System.Fabric.Description.DeleteApplicationDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceDelete>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public bool ForceDelete { get; public set; }
    public DeleteApplicationDescription(Uri applicationName);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public bool get_ForceDelete();
    [CompilerGeneratedAttribute]
public void set_ForceDelete(bool value);
    internal IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.Description.DeleteComposeDeploymentDescriptionWrapper : object {
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    public string DeploymentName { get; private set; }
    public DeleteComposeDeploymentDescriptionWrapper(string deploymentName);
    [CompilerGeneratedAttribute]
public string get_DeploymentName();
    [CompilerGeneratedAttribute]
private void set_DeploymentName(string value);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Description.DeleteNetworkDescription : object {
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [JsonCustomizationAttribute]
public string NetworkName { get; public set; }
    public DeleteNetworkDescription(string networkName);
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
public void set_NetworkName(string value);
    internal static void Validate(DeleteNetworkDescription deleteDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.DeleteServiceDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceDelete>k__BackingField;
    public Uri ServiceName { get; private set; }
    public bool ForceDelete { get; public set; }
    public DeleteServiceDescription(Uri serviceName);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public bool get_ForceDelete();
    [CompilerGeneratedAttribute]
public void set_ForceDelete(bool value);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Description.DeployedApplicationHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedServicePackageHealthStatesFilter <DeployedServicePackagesFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedApplicationHealthStatisticsFilter <HealthStatisticsFilter>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public string NodeName { get; internal set; }
    public ApplicationHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public DeployedServicePackageHealthStatesFilter DeployedServicePackagesFilter { get; public set; }
    public DeployedApplicationHealthStatisticsFilter HealthStatisticsFilter { get; public set; }
    public DeployedApplicationHealthQueryDescription(Uri applicationName, string nodeName);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    [CompilerGeneratedAttribute]
public DeployedServicePackageHealthStatesFilter get_DeployedServicePackagesFilter();
    [CompilerGeneratedAttribute]
public void set_DeployedServicePackagesFilter(DeployedServicePackageHealthStatesFilter value);
    [CompilerGeneratedAttribute]
public DeployedApplicationHealthStatisticsFilter get_HealthStatisticsFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStatisticsFilter(DeployedApplicationHealthStatisticsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.DeployedApplicationQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationNameFilter>k__BackingField;
    public string NodeName { get; public set; }
    public Uri ApplicationNameFilter { get; public set; }
    public DeployedApplicationQueryDescription(string nodeName, Uri applicationNameFilter);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationNameFilter(Uri value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.DeployedCodePackageQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCodePackageUsageStats>k__BackingField;
    public string NodeName { get; public set; }
    public Uri ApplicationName { get; public set; }
    public string ServiceManifestNameFilter { get; public set; }
    public string CodePackageNameFilter { get; public set; }
    public bool IncludeCodePackageUsageStats { get; public set; }
    public DeployedCodePackageQueryDescription(string nodeName, Uri applicationName, string serviceManifestNameFilter, string codePackageNameFilter, bool includeCodePackageUsageStats);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestNameFilter(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageNameFilter();
    [CompilerGeneratedAttribute]
public void set_CodePackageNameFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCodePackageUsageStats();
    [CompilerGeneratedAttribute]
public void set_IncludeCodePackageUsageStats(bool value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.DeployedNetworkCodePackageQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageNameFilter>k__BackingField;
    public string NodeName { get; public set; }
    public string NetworkName { get; public set; }
    public Uri ApplicationNameFilter { get; public set; }
    public string ServiceManifestNameFilter { get; public set; }
    public string CodePackageNameFilter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
public void set_NetworkName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationNameFilter(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestNameFilter(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageNameFilter();
    [CompilerGeneratedAttribute]
public void set_CodePackageNameFilter(string value);
    internal static void Validate(DeployedNetworkCodePackageQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.DeployedNetworkQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public string NodeName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    internal static void Validate(DeployedNetworkQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.DeployedServicePackageHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public string NodeName { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public ApplicationHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public DeployedServicePackageHealthQueryDescription(Uri applicationName, string nodeName, string serviceManifestName);
    public DeployedServicePackageHealthQueryDescription(Uri applicationName, string nodeName, string serviceManifestName, string servicePackageActivationId);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.DeployedServicePackageQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestNameFilter>k__BackingField;
    public string NodeName { get; public set; }
    public Uri ApplicationName { get; public set; }
    public string ServiceManifestNameFilter { get; public set; }
    public DeployedServicePackageQueryDescription(string nodeName, Uri applicationName, string serviceManifestNameFilter);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestNameFilter(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.DeployedServiceReplicaDetailQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    public string NodeName { get; public set; }
    public Guid PartitionId { get; public set; }
    public long ReplicaId { get; public set; }
    public DeployedServiceReplicaDetailQueryDescription(string nodeName, Guid partitionId, long replicaId);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
public void set_ReplicaId(long value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.DeployedServiceReplicaQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionIdFilter>k__BackingField;
    public string NodeName { get; public set; }
    public Uri ApplicationName { get; public set; }
    public string ServiceManifestNameFilter { get; public set; }
    public Guid PartitionIdFilter { get; public set; }
    public DeployedServiceReplicaQueryDescription(string nodeName, Uri applicationName, string serviceManifestNameFilter, Guid partitionIdFilter);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestNameFilter(string value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionIdFilter();
    [CompilerGeneratedAttribute]
public void set_PartitionIdFilter(Guid value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.DeployedServiceTypeQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeNameFilter>k__BackingField;
    public string NodeName { get; public set; }
    public Uri ApplicationName { get; public set; }
    public string ServiceManifestNameFilter { get; public set; }
    public string ServiceTypeNameFilter { get; public set; }
    public DeployedServiceTypeQueryDescription(string nodeName, Uri applicationName, string serviceManifestNameFilter, string codePackageNameFilter);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestNameFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeNameFilter(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.DescriptionExtension : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    internal string Key { get; internal set; }
    internal string Value { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [CompilerGeneratedAttribute]
internal string get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(string value);
    internal static Tuple`2<string, string> CreateFromNative(IntPtr nativeRaw);
    internal static IEnumerable`1<Tuple`2<string, string>> CreateFromNativeList(IntPtr extensionListPtr);
}
public class System.Fabric.Description.DllHostEntryPointDescription : EntryPointDescription {
    [CompilerGeneratedAttribute]
private DllHostIsolationPolicy <IsolationPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<DllHostHostedDllDescription> <HostedDlls>k__BackingField;
    public DllHostIsolationPolicy IsolationPolicy { get; internal set; }
    public ICollection`1<DllHostHostedDllDescription> HostedDlls { get; internal set; }
    [CompilerGeneratedAttribute]
public DllHostIsolationPolicy get_IsolationPolicy();
    [CompilerGeneratedAttribute]
internal void set_IsolationPolicy(DllHostIsolationPolicy value);
    [CompilerGeneratedAttribute]
public ICollection`1<DllHostHostedDllDescription> get_HostedDlls();
    [CompilerGeneratedAttribute]
internal void set_HostedDlls(ICollection`1<DllHostHostedDllDescription> value);
    public virtual string ToString();
    internal static DllHostEntryPointDescription CreateFromNative(IntPtr nativeDescriptionPtr);
}
public class System.Fabric.Description.DllHostHostedDllDescription : object {
    [CompilerGeneratedAttribute]
private DllHostHostedDllKind <Kind>k__BackingField;
    public DllHostHostedDllKind Kind { get; private set; }
    protected DllHostHostedDllDescription(DllHostHostedDllKind kind);
    [CompilerGeneratedAttribute]
public DllHostHostedDllKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(DllHostHostedDllKind value);
    internal static DllHostHostedDllDescription CreateFromNative(IntPtr nativeDescriptionPtr);
}
public enum System.Fabric.Description.DllHostHostedDllKind : Enum {
    public int value__;
    public static DllHostHostedDllKind Invalid;
    public static DllHostHostedDllKind Unmanaged;
    public static DllHostHostedDllKind Managed;
}
public class System.Fabric.Description.DllHostHostedManagedDllDescription : DllHostHostedDllDescription {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    public string AssemblyName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
internal void set_AssemblyName(string value);
    public virtual string ToString();
    internal static DllHostHostedManagedDllDescription CreateFromNative(IntPtr nativeDescriptionPtr);
}
public class System.Fabric.Description.DllHostHostedUnmanagedDllDescription : DllHostHostedDllDescription {
    [CompilerGeneratedAttribute]
private string <DllName>k__BackingField;
    public string DllName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_DllName();
    [CompilerGeneratedAttribute]
internal void set_DllName(string value);
    public virtual string ToString();
    internal static DllHostHostedUnmanagedDllDescription CreateFromNative(IntPtr nativeDescriptionPtr);
}
public enum System.Fabric.Description.DllHostIsolationPolicy : Enum {
    public int value__;
    public static DllHostIsolationPolicy Invalid;
    public static DllHostIsolationPolicy SharedDomain;
    public static DllHostIsolationPolicy DedicatedDomain;
    public static DllHostIsolationPolicy DedicatedProcess;
}
public enum System.Fabric.Description.EndpointProtocol : Enum {
    public int value__;
    public static EndpointProtocol Http;
    public static EndpointProtocol Https;
    public static EndpointProtocol Tcp;
    public static EndpointProtocol Udp;
}
public class System.Fabric.Description.EndpointResourceDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointProtocol <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointType <EndpointType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddressOrFqdn>k__BackingField;
    public string Name { get; public set; }
    public EndpointProtocol Protocol { get; public set; }
    public EndpointType EndpointType { get; public set; }
    public string Certificate { get; public set; }
    public int Port { get; internal set; }
    public string UriScheme { get; public set; }
    public string PathSuffix { get; public set; }
    public string CodePackageName { get; public set; }
    public string IpAddressOrFqdn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public EndpointProtocol get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(EndpointProtocol value);
    [CompilerGeneratedAttribute]
public EndpointType get_EndpointType();
    [CompilerGeneratedAttribute]
public void set_EndpointType(EndpointType value);
    [CompilerGeneratedAttribute]
public string get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
internal void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_UriScheme();
    [CompilerGeneratedAttribute]
public void set_UriScheme(string value);
    [CompilerGeneratedAttribute]
public string get_PathSuffix();
    [CompilerGeneratedAttribute]
public void set_PathSuffix(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
public void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public string get_IpAddressOrFqdn();
    [CompilerGeneratedAttribute]
public void set_IpAddressOrFqdn(string value);
    internal static EndpointResourceDescription CreateFromNative(IntPtr native);
}
public enum System.Fabric.Description.EndpointType : Enum {
    public int value__;
    public static EndpointType Input;
    public static EndpointType Internal;
}
public abstract class System.Fabric.Description.EntryPointDescription : object {
    [CompilerGeneratedAttribute]
private CodePackageEntryPointKind <Kind>k__BackingField;
    public CodePackageEntryPointKind Kind { get; internal set; }
    protected EntryPointDescription(CodePackageEntryPointKind kind);
    [CompilerGeneratedAttribute]
public CodePackageEntryPointKind get_Kind();
    [CompilerGeneratedAttribute]
internal void set_Kind(CodePackageEntryPointKind value);
    internal static EntryPointDescription CreateFromNative(IntPtr entryPointDescriptionPtr);
}
public class System.Fabric.Description.ExeHostEntryPointDescription : EntryPointDescription {
    private static long DefaultConsoleRedirectionFileRetentionCount;
    private static long DefaultConsoleRedirectionFileMaxSizeInKb;
    private long periodicInterval;
    [CompilerGeneratedAttribute]
private string <Program>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ExeHostWorkingFolder <WorkingFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExternalExecutable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConsoleRedirectionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConsoleRedirectionFileRetentionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConsoleRedirectionFileMaxSizeInKb>k__BackingField;
    public string Program { get; internal set; }
    public string Arguments { get; internal set; }
    public ExeHostWorkingFolder WorkingFolder { get; internal set; }
    public bool IsExternalExecutable { get; internal set; }
    public bool ConsoleRedirectionEnabled { get; internal set; }
    public long ConsoleRedirectionFileRetentionCount { get; internal set; }
    public long ConsoleRedirectionFileMaxSizeInKb { get; internal set; }
    public long PeriodicInterval { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Program();
    [CompilerGeneratedAttribute]
internal void set_Program(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
internal void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public ExeHostWorkingFolder get_WorkingFolder();
    [CompilerGeneratedAttribute]
internal void set_WorkingFolder(ExeHostWorkingFolder value);
    [CompilerGeneratedAttribute]
public bool get_IsExternalExecutable();
    [CompilerGeneratedAttribute]
internal void set_IsExternalExecutable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConsoleRedirectionEnabled();
    [CompilerGeneratedAttribute]
internal void set_ConsoleRedirectionEnabled(bool value);
    [CompilerGeneratedAttribute]
public long get_ConsoleRedirectionFileRetentionCount();
    [CompilerGeneratedAttribute]
internal void set_ConsoleRedirectionFileRetentionCount(long value);
    [CompilerGeneratedAttribute]
public long get_ConsoleRedirectionFileMaxSizeInKb();
    [CompilerGeneratedAttribute]
internal void set_ConsoleRedirectionFileMaxSizeInKb(long value);
    public long get_PeriodicInterval();
    internal void set_PeriodicInterval(long value);
    public virtual string ToString();
    internal static ExeHostEntryPointDescription CreateFromNative(IntPtr entryPointDescriptionPtr);
}
public enum System.Fabric.Description.ExeHostWorkingFolder : Enum {
    public int value__;
    public static ExeHostWorkingFolder Invalid;
    public static ExeHostWorkingFolder Work;
    public static ExeHostWorkingFolder CodePackage;
    public static ExeHostWorkingFolder CodeBase;
}
public class System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription : ProvisionApplicationTypeDescriptionBase {
    public static string SfpkgExtension;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationPackageDownloadUri>k__BackingField;
    public string ApplicationTypeName { get; private set; }
    public string ApplicationTypeVersion { get; private set; }
    public Uri ApplicationPackageDownloadUri { get; private set; }
    public ExternalStoreProvisionApplicationTypeDescription(Uri applicationPackageDownloadUri, string applicationTypeName, string applicationTypeVersion);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersion();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationPackageDownloadUri();
    [CompilerGeneratedAttribute]
private void set_ApplicationPackageDownloadUri(Uri value);
    public virtual string ToString();
    internal static void CheckIfValidApplicationPackageDownloadUri(Uri applicationPackageDownloadUri);
    internal virtual IntPtr ToNativeValue(PinCollection pin);
}
public class System.Fabric.Description.FabricUpgradeDescription : object {
    [CompilerGeneratedAttribute]
private string <TargetCodeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetConfigVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradePolicyDescription <UpgradePolicyDescription>k__BackingField;
    [JsonCustomizationAttribute]
public string TargetCodeVersion { get; public set; }
    [JsonCustomizationAttribute]
public string TargetConfigVersion { get; public set; }
    [JsonCustomizationAttribute]
public UpgradePolicyDescription UpgradePolicyDescription { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetCodeVersion();
    [CompilerGeneratedAttribute]
public void set_TargetCodeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetConfigVersion();
    [CompilerGeneratedAttribute]
public void set_TargetConfigVersion(string value);
    [CompilerGeneratedAttribute]
public UpgradePolicyDescription get_UpgradePolicyDescription();
    [CompilerGeneratedAttribute]
public void set_UpgradePolicyDescription(UpgradePolicyDescription value);
    internal static void Validate(FabricUpgradeDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static FabricUpgradeDescription FromNative(IntPtr descriptionPtr);
}
public class System.Fabric.Description.FabricUpgradeUpdateDescription : UpgradeUpdateDescriptionBase {
    [CompilerGeneratedAttribute]
private ClusterHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableDeltaHealthEvaluation>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterUpgradeHealthPolicy <UpgradeHealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicyMap <ApplicationHealthPolicyMap>k__BackingField;
    [JsonCustomizationAttribute]
public ClusterHealthPolicy HealthPolicy { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<bool> EnableDeltaHealthEvaluation { get; public set; }
    [JsonCustomizationAttribute]
public ClusterUpgradeHealthPolicy UpgradeHealthPolicy { get; public set; }
    [JsonCustomizationAttribute]
public ApplicationHealthPolicyMap ApplicationHealthPolicyMap { get; public set; }
    [CompilerGeneratedAttribute]
public ClusterHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ClusterHealthPolicy value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableDeltaHealthEvaluation();
    [CompilerGeneratedAttribute]
public void set_EnableDeltaHealthEvaluation(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ClusterUpgradeHealthPolicy get_UpgradeHealthPolicy();
    [CompilerGeneratedAttribute]
public void set_UpgradeHealthPolicy(ClusterUpgradeHealthPolicy value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicyMap get_ApplicationHealthPolicyMap();
    [CompilerGeneratedAttribute]
public void set_ApplicationHealthPolicyMap(ApplicationHealthPolicyMap value);
    internal static void Validate(FabricUpgradeUpdateDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.GetChaosReportDescription : object {
    [CompilerGeneratedAttribute]
private ChaosReportFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientType>k__BackingField;
    public ChaosReportFilter Filter { get; private set; }
    public string ContinuationToken { get; internal set; }
    internal string ClientType { get; internal set; }
    public GetChaosReportDescription(ChaosReportFilter filter, string continuationToken);
    [CompilerGeneratedAttribute]
public ChaosReportFilter get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(ChaosReportFilter value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
internal void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
internal string get_ClientType();
    [CompilerGeneratedAttribute]
internal void set_ClientType(string value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static GetChaosReportDescription CreateFromNative(IntPtr nativeRaw);
}
public class System.Fabric.Description.ImageStoreListDescription : object {
    [CompilerGeneratedAttribute]
private string <RemoteLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecursive>k__BackingField;
    public string RemoteLocation { get; private set; }
    public string ContinuationToken { get; private set; }
    public bool IsRecursive { get; private set; }
    public ImageStoreListDescription(string remoteLocation, string continuationToken, bool isRecursive);
    [CompilerGeneratedAttribute]
public string get_RemoteLocation();
    [CompilerGeneratedAttribute]
private void set_RemoteLocation(string value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
private void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRecursive();
    [CompilerGeneratedAttribute]
private void set_IsRecursive(bool value);
    internal void ToNative(PinCollection pinCollection, FABRIC_IMAGE_STORE_LIST_DESCRIPTION& description);
}
internal class System.Fabric.Description.InfrastructureTaskDescription : object {
    [CompilerGeneratedAttribute]
private Guid <SourcePartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<NodeTaskDescription> <NodeTasks>k__BackingField;
    public Guid SourcePartitionId { get; private set; }
    public string TaskId { get; private set; }
    public long InstanceId { get; private set; }
    public ReadOnlyCollection`1<NodeTaskDescription> NodeTasks { get; private set; }
    public InfrastructureTaskDescription(string taskId, long instanceId, ReadOnlyCollection`1<NodeTaskDescription> nodeTasks);
    public InfrastructureTaskDescription(Guid sourcePartitionId, string taskId, long instanceId, ReadOnlyCollection`1<NodeTaskDescription> nodeTasks);
    [CompilerGeneratedAttribute]
public Guid get_SourcePartitionId();
    [CompilerGeneratedAttribute]
private void set_SourcePartitionId(Guid value);
    [CompilerGeneratedAttribute]
public string get_TaskId();
    [CompilerGeneratedAttribute]
private void set_TaskId(string value);
    [CompilerGeneratedAttribute]
public long get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(long value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<NodeTaskDescription> get_NodeTasks();
    [CompilerGeneratedAttribute]
private void set_NodeTasks(ReadOnlyCollection`1<NodeTaskDescription> value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static InfrastructureTaskDescription FromNative(IntPtr nativePtr);
    private static IntPtr ToNativeNodeTasks(PinCollection pinCollection, ReadOnlyCollection`1<NodeTaskDescription> nodeTasks);
    private static ReadOnlyCollection`1<NodeTaskDescription> FromNativeNodeTasks(IntPtr nativePtr);
    private static FABRIC_NODE_TASK_TYPE ToNativeTaskType(NodeTask taskType);
    private static NodeTask FromNativeTaskType(FABRIC_NODE_TASK_TYPE taskType);
}
public class System.Fabric.Description.InstanceLifecycleDescription : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RestoreReplicaLocationAfterUpgrade>k__BackingField;
    internal bool IsRestoreReplicaLocationAfterUpgradeSpecified { get; }
    [JsonCustomizationAttribute]
public Nullable`1<bool> RestoreReplicaLocationAfterUpgrade { get; public set; }
    internal InstanceLifecycleDescription(InstanceLifecycleDescription other);
    internal bool get_IsRestoreReplicaLocationAfterUpgradeSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RestoreReplicaLocationAfterUpgrade();
    [CompilerGeneratedAttribute]
public void set_RestoreReplicaLocationAfterUpgrade(Nullable`1<bool> value);
    internal void ToNative(PinCollection pinCollection, INSTANCE_LIFECYCLE_DESCRIPTION& instanceLifecycleDescription);
    internal static InstanceLifecycleDescription CreateFromNative(IntPtr intPtr);
    public virtual string ToString();
}
internal class System.Fabric.Description.InvokeDataLossDescription : object {
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private DataLossMode <DataLossMode>k__BackingField;
    public Guid OperationId { get; internal set; }
    public PartitionSelector PartitionSelector { get; internal set; }
    public DataLossMode DataLossMode { get; public set; }
    public InvokeDataLossDescription(Guid operationId, PartitionSelector partitionSelector, DataLossMode dataLossMode);
    [CompilerGeneratedAttribute]
public Guid get_OperationId();
    [CompilerGeneratedAttribute]
internal void set_OperationId(Guid value);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
internal void set_PartitionSelector(PartitionSelector value);
    [CompilerGeneratedAttribute]
public DataLossMode get_DataLossMode();
    [CompilerGeneratedAttribute]
public void set_DataLossMode(DataLossMode value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static InvokeDataLossDescription CreateFromNative(IntPtr nativeRaw);
}
internal class System.Fabric.Description.InvokeQuorumLossDescription : object {
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private QuorumLossMode <QuorumLossMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QuorumLossDuration>k__BackingField;
    public Guid OperationId { get; internal set; }
    public PartitionSelector PartitionSelector { get; internal set; }
    public QuorumLossMode QuorumLossMode { get; public set; }
    public TimeSpan QuorumLossDuration { get; public set; }
    public InvokeQuorumLossDescription(Guid operationId, PartitionSelector partitionSelector, QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration);
    [CompilerGeneratedAttribute]
public Guid get_OperationId();
    [CompilerGeneratedAttribute]
internal void set_OperationId(Guid value);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
internal void set_PartitionSelector(PartitionSelector value);
    [CompilerGeneratedAttribute]
public QuorumLossMode get_QuorumLossMode();
    [CompilerGeneratedAttribute]
public void set_QuorumLossMode(QuorumLossMode value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QuorumLossDuration();
    [CompilerGeneratedAttribute]
public void set_QuorumLossDuration(TimeSpan value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static InvokeQuorumLossDescription CreateFromNative(IntPtr nativeRaw);
}
public class System.Fabric.Description.LoadedPartitionInformationQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <MetricName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Ordering <Ordering>k__BackingField;
    public string MetricName { get; internal set; }
    public Uri ServiceName { get; internal set; }
    public Ordering Ordering { get; internal set; }
    public LoadedPartitionInformationQueryDescription(string metricName, Uri serviceName);
    public LoadedPartitionInformationQueryDescription(string metricName, Uri serviceName, Ordering ordering, long maxResults, string continuationToken);
    [CompilerGeneratedAttribute]
public string get_MetricName();
    [CompilerGeneratedAttribute]
internal void set_MetricName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Ordering get_Ordering();
    [CompilerGeneratedAttribute]
internal void set_Ordering(Ordering value);
    internal static void Validate(LoadedPartitionInformationQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.LocalNetworkConfigurationDescription : object {
    [CompilerGeneratedAttribute]
private string <NetworkAddressPrefix>k__BackingField;
    [JsonCustomizationAttribute]
public string NetworkAddressPrefix { get; public set; }
    public LocalNetworkConfigurationDescription(string networkAddressPrefix);
    [CompilerGeneratedAttribute]
public string get_NetworkAddressPrefix();
    [CompilerGeneratedAttribute]
public void set_NetworkAddressPrefix(string value);
    internal static void Validate(LocalNetworkConfigurationDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static LocalNetworkConfigurationDescription FromNative(IntPtr descriptionPtr);
}
public class System.Fabric.Description.LocalNetworkDescription : NetworkDescription {
    [CompilerGeneratedAttribute]
private LocalNetworkConfigurationDescription <NetworkConfiguration>k__BackingField;
    [JsonCustomizationAttribute]
public LocalNetworkConfigurationDescription NetworkConfiguration { get; public set; }
    public LocalNetworkDescription(LocalNetworkConfigurationDescription networkConfigurationDescription);
    [CompilerGeneratedAttribute]
public LocalNetworkConfigurationDescription get_NetworkConfiguration();
    [CompilerGeneratedAttribute]
public void set_NetworkConfiguration(LocalNetworkConfigurationDescription value);
    internal static void Validate(LocalNetworkDescription description);
    internal virtual IntPtr ToNative(PinCollection pinCollection, FABRIC_NETWORK_TYPE& networkType);
}
public class System.Fabric.Description.ManagedApplicationIdentityDescription : object {
    [CompilerGeneratedAttribute]
private ManagedIdentityDescriptionList <ManagedIdentities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenServiceEndpoint>k__BackingField;
    public ManagedIdentityDescriptionList ManagedIdentities { get; public set; }
    public string TokenServiceEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public ManagedIdentityDescriptionList get_ManagedIdentities();
    [CompilerGeneratedAttribute]
public void set_ManagedIdentities(ManagedIdentityDescriptionList value);
    [CompilerGeneratedAttribute]
public string get_TokenServiceEndpoint();
    [CompilerGeneratedAttribute]
public void set_TokenServiceEndpoint(string value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ManagedApplicationIdentityDescription FromNative(IntPtr nativeApplicationIdentity);
    private static ManagedApplicationIdentityDescription FromNative(FABRIC_MANAGED_APPLICATION_IDENTITY_DESCRIPTION* nativeApplicationIdentity);
}
public class System.Fabric.Description.ManagedIdentityDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalId>k__BackingField;
    public string Name { get; public set; }
    public string PrincipalId { get; public set; }
    public ManagedIdentityDescription(string name, string principalId);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_PrincipalId();
    [CompilerGeneratedAttribute]
public void set_PrincipalId(string value);
    internal static ManagedIdentityDescription FromNative(IntPtr native);
    internal static ManagedIdentityDescription FromNative(FABRIC_MANAGED_IDENTITY_DESCRIPTION* nativeDescription);
    internal void ToNative(PinCollection pinCollection, FABRIC_MANAGED_IDENTITY_DESCRIPTION& nativeDescription);
}
public class System.Fabric.Description.ManagedIdentityDescriptionList : KeyedCollection`2<string, ManagedIdentityDescription> {
    public ManagedIdentityDescriptionList(IEqualityComparer`1<string> comparer);
    public ManagedIdentityDescriptionList(IEqualityComparer`1<string> comparer, int dictionaryCreationThreshold);
    public virtual string ToString();
    internal static ManagedIdentityDescriptionList FromNative(IntPtr nativeListPtr);
    internal static ManagedIdentityDescriptionList FromNative(FABRIC_MANAGED_IDENTITY_DESCRIPTION_LIST* nativeList);
    internal IntPtr ToNative(PinCollection pinCollection);
    protected virtual string GetKeyForItem(ManagedIdentityDescription item);
}
public class System.Fabric.Description.MetricLoadDescription : object {
    [CompilerGeneratedAttribute]
private string <MetricName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CurrentLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <PredictedLoad>k__BackingField;
    public string MetricName { get; internal set; }
    public Nullable`1<long> CurrentLoad { get; internal set; }
    internal bool IsCurrentLoadSpecified { get; }
    public Nullable`1<long> PredictedLoad { get; internal set; }
    internal bool IsPredictedLoadSpecified { get; }
    public MetricLoadDescription(string metricName, Nullable`1<long> currentLoad, Nullable`1<long> predictedLoad);
    [CompilerGeneratedAttribute]
public string get_MetricName();
    [CompilerGeneratedAttribute]
internal void set_MetricName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CurrentLoad();
    [CompilerGeneratedAttribute]
internal void set_CurrentLoad(Nullable`1<long> value);
    internal bool get_IsCurrentLoadSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_PredictedLoad();
    [CompilerGeneratedAttribute]
internal void set_PredictedLoad(Nullable`1<long> value);
    internal bool get_IsPredictedLoadSpecified();
    internal static void Validate(MetricLoadDescription description);
    internal static void Validate(IList`1<MetricLoadDescription> metricLoadDescriptions);
    internal IntPtr ToNative(PinCollection pinCollection, FABRIC_METRIC_LOAD_DESCRIPTION& nativeDescription);
}
public class System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription : MonitoredRollingUpgradePolicyDescription {
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [JsonCustomizationAttribute]
public ApplicationHealthPolicy HealthPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    internal static MonitoredRollingApplicationUpgradePolicyDescription FromNative(IntPtr policyPtr);
    internal virtual IntPtr HealthPolicy_ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription : MonitoredRollingUpgradePolicyDescription {
    [CompilerGeneratedAttribute]
private ClusterHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDeltaHealthEvaluation>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterUpgradeHealthPolicy <UpgradeHealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicyMap <ApplicationHealthPolicyMap>k__BackingField;
    [JsonCustomizationAttribute]
public ClusterHealthPolicy HealthPolicy { get; public set; }
    public bool EnableDeltaHealthEvaluation { get; public set; }
    [JsonCustomizationAttribute]
public ClusterUpgradeHealthPolicy UpgradeHealthPolicy { get; public set; }
    public ApplicationHealthPolicyMap ApplicationHealthPolicyMap { get; internal set; }
    [CompilerGeneratedAttribute]
public ClusterHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ClusterHealthPolicy value);
    [CompilerGeneratedAttribute]
public bool get_EnableDeltaHealthEvaluation();
    [CompilerGeneratedAttribute]
public void set_EnableDeltaHealthEvaluation(bool value);
    [CompilerGeneratedAttribute]
public ClusterUpgradeHealthPolicy get_UpgradeHealthPolicy();
    [CompilerGeneratedAttribute]
public void set_UpgradeHealthPolicy(ClusterUpgradeHealthPolicy value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicyMap get_ApplicationHealthPolicyMap();
    [CompilerGeneratedAttribute]
internal void set_ApplicationHealthPolicyMap(ApplicationHealthPolicyMap value);
    internal static MonitoredRollingFabricUpgradePolicyDescription FromNative(IntPtr policyPtr);
    internal virtual IntPtr HealthPolicy_ToNative(PinCollection pinCollection);
    internal virtual IntPtr ReservedEx_ToNative(PinCollection pinCollection);
}
[KnownTypeAttribute("System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription")]
[KnownTypeAttribute("System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription")]
public abstract class System.Fabric.Description.MonitoredRollingUpgradePolicyDescription : RollingUpgradePolicyDescription {
    [CompilerGeneratedAttribute]
private RollingUpgradeMonitoringPolicy <MonitoringPolicy>k__BackingField;
    public RollingUpgradeMonitoringPolicy MonitoringPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public RollingUpgradeMonitoringPolicy get_MonitoringPolicy();
    [CompilerGeneratedAttribute]
public void set_MonitoringPolicy(RollingUpgradeMonitoringPolicy value);
    internal virtual void Validate();
    internal UInt32 FromUpdateDescription(UpgradeUpdateDescriptionBase updateDescription);
    internal virtual IntPtr Reserved_ToNative(PinCollection pinCollection);
    internal abstract virtual IntPtr HealthPolicy_ToNative(PinCollection pinCollection);
    internal virtual IntPtr ReservedEx_ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.NamedPartitionSchemeDescription : PartitionSchemeDescription {
    [CompilerGeneratedAttribute]
private IList`1<string> <PartitionNames>k__BackingField;
    [JsonCustomizationAttribute]
public IList`1<string> PartitionNames { get; private set; }
    private int Count { get; }
    internal NamedPartitionSchemeDescription(IList`1<string> partitionNames);
    internal NamedPartitionSchemeDescription(NamedPartitionSchemeDescription other);
    [CompilerGeneratedAttribute]
public IList`1<string> get_PartitionNames();
    [CompilerGeneratedAttribute]
private void set_PartitionNames(IList`1<string> value);
    private int get_Count();
    internal static NamedPartitionSchemeDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Description.NamedRepartitionDescription : RepartitionDescription {
    [CompilerGeneratedAttribute]
private IList`1<string> <NamesToAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <NamesToRemove>k__BackingField;
    public IList`1<string> NamesToAdd { get; private set; }
    public IList`1<string> NamesToRemove { get; private set; }
    public NamedRepartitionDescription(IEnumerable`1<string> namesToAdd, IEnumerable`1<string> namesToRemove);
    [CompilerGeneratedAttribute]
public IList`1<string> get_NamesToAdd();
    [CompilerGeneratedAttribute]
private void set_NamesToAdd(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_NamesToRemove();
    [CompilerGeneratedAttribute]
private void set_NamesToRemove(IList`1<string> value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_PARTITION_KIND& kind);
}
public class System.Fabric.Description.NetworkApplicationQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationNameFilter>k__BackingField;
    public string NetworkName { get; public set; }
    public Uri ApplicationNameFilter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
public void set_NetworkName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationNameFilter(Uri value);
    internal static void Validate(NetworkApplicationQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
[KnownTypeAttribute("System.Fabric.Description.LocalNetworkDescription")]
public abstract class System.Fabric.Description.NetworkDescription : object {
    [CompilerGeneratedAttribute]
private NetworkType <NetworkType>k__BackingField;
    [JsonCustomizationAttribute]
public NetworkType NetworkType { get; private set; }
    protected NetworkDescription(NetworkType networkType);
    [CompilerGeneratedAttribute]
public NetworkType get_NetworkType();
    [CompilerGeneratedAttribute]
private void set_NetworkType(NetworkType value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_NETWORK_TYPE& networkType);
    [DerivedTypeResolverAttribute("NetworkType")]
internal static Type ResolveDerivedClass(NetworkType networkType);
    internal static void Validate(NetworkDescription description);
}
public class System.Fabric.Description.NetworkNodeQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeNameFilter>k__BackingField;
    public string NetworkName { get; public set; }
    public string NodeNameFilter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
public void set_NetworkName(string value);
    [CompilerGeneratedAttribute]
public string get_NodeNameFilter();
    [CompilerGeneratedAttribute]
public void set_NodeNameFilter(string value);
    internal static void Validate(NetworkNodeQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.NetworkQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NetworkNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private NetworkStatusFilter <NetworkStatusFilter>k__BackingField;
    public string NetworkNameFilter { get; public set; }
    public NetworkStatusFilter NetworkStatusFilter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NetworkNameFilter();
    [CompilerGeneratedAttribute]
public void set_NetworkNameFilter(string value);
    [CompilerGeneratedAttribute]
public NetworkStatusFilter get_NetworkStatusFilter();
    [CompilerGeneratedAttribute]
public void set_NetworkStatusFilter(NetworkStatusFilter value);
    internal static void Validate(NetworkQueryDescription queryDescription);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.NodeHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    public string NodeName { get; internal set; }
    public ClusterHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public NodeHealthQueryDescription(string nodeName);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public ClusterHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ClusterHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.NodeLoadInformationQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public string NodeName { get; public set; }
    public NodeLoadInformationQueryDescription(string nodeName);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.NodeQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NodeNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeStatusFilter <NodeStatusFilter>k__BackingField;
    public string NodeNameFilter { get; public set; }
    public NodeStatusFilter NodeStatusFilter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NodeNameFilter();
    [CompilerGeneratedAttribute]
public void set_NodeNameFilter(string value);
    [CompilerGeneratedAttribute]
public NodeStatusFilter get_NodeStatusFilter();
    [CompilerGeneratedAttribute]
public void set_NodeStatusFilter(NodeStatusFilter value);
    internal IntPtr ToNative(PinCollection pinCollection);
    public virtual string ToString();
}
public class System.Fabric.Description.NodeStartDescription : NodeTransitionDescription {
    public NodeStartDescription(Guid operationId, string nodeName, BigInteger nodeInstanceId);
    internal static NodeStartDescription CreateFromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_NODE_TRANSITION_TYPE& nodeTransitionType);
}
public class System.Fabric.Description.NodeStopDescription : NodeTransitionDescription {
    private int stopDurationInSeconds;
    public int StopDurationInSeconds { get; }
    public NodeStopDescription(Guid operationId, string nodeName, BigInteger nodeInstanceId, int stopDurationInSeconds);
    public int get_StopDurationInSeconds();
    public virtual string ToString();
    internal static NodeStopDescription CreateFromNative(IntPtr nativeRaw);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_NODE_TRANSITION_TYPE& nodeTransitionType);
}
internal enum System.Fabric.Description.NodeTask : Enum {
    public byte value__;
    public static NodeTask Invalid;
    public static NodeTask Restart;
    public static NodeTask Relocate;
    public static NodeTask Remove;
}
internal class System.Fabric.Description.NodeTaskDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeTask <TaskType>k__BackingField;
    public string NodeName { get; public set; }
    public NodeTask TaskType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public NodeTask get_TaskType();
    [CompilerGeneratedAttribute]
public void set_TaskType(NodeTask value);
    public static bool AreEqual(ReadOnlyCollection`1<NodeTaskDescription> left, ReadOnlyCollection`1<NodeTaskDescription> right);
}
public abstract class System.Fabric.Description.NodeTransitionDescription : object {
    private NodeTransitionType nodeTransitionType;
    private Guid operationId;
    private string nodeName;
    private BigInteger nodeInstanceId;
    public NodeTransitionType NodeTransitionType { get; }
    public Guid OperationId { get; }
    public string NodeName { get; }
    public BigInteger NodeInstanceId { get; }
    protected NodeTransitionDescription(NodeTransitionType nodeTransitionType, Guid operationId, string nodeName, BigInteger nodeInstanceId);
    public NodeTransitionType get_NodeTransitionType();
    public Guid get_OperationId();
    public string get_NodeName();
    public BigInteger get_NodeInstanceId();
    public virtual string ToString();
    internal static NodeTransitionDescription CreateFromNative(IntPtr native);
    internal IntPtr ToNative(PinCollection pin);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_NODE_TRANSITION_TYPE& nodeTransitionType);
}
public abstract class System.Fabric.Description.PackageDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Name { get; internal set; }
    public string Version { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string ServiceManifestVersion { get; internal set; }
    public string Path { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestVersion();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
internal void set_Path(string value);
}
public class System.Fabric.Description.PagedApplicationTypeQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeApplicationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxResults>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationTypeDefinitionKindFilter <ApplicationTypeDefinitionKindFilter>k__BackingField;
    public string ApplicationTypeNameFilter { get; public set; }
    public string ApplicationTypeVersionFilter { get; public set; }
    public string ContinuationToken { get; public set; }
    public bool ExcludeApplicationParameters { get; public set; }
    public long MaxResults { get; public set; }
    public ApplicationTypeDefinitionKindFilter ApplicationTypeDefinitionKindFilter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeNameFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersionFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeVersionFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeApplicationParameters();
    [CompilerGeneratedAttribute]
public void set_ExcludeApplicationParameters(bool value);
    [CompilerGeneratedAttribute]
public long get_MaxResults();
    [CompilerGeneratedAttribute]
public void set_MaxResults(long value);
    [CompilerGeneratedAttribute]
public ApplicationTypeDefinitionKindFilter get_ApplicationTypeDefinitionKindFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeDefinitionKindFilter(ApplicationTypeDefinitionKindFilter value);
    internal static void Validate(PagedApplicationTypeQueryDescription description);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.PagedDeployedApplicationQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeHealthState>k__BackingField;
    public string NodeName { get; public set; }
    public Uri ApplicationNameFilter { get; public set; }
    public bool IncludeHealthState { get; public set; }
    public PagedDeployedApplicationQueryDescription(string nodeName);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationNameFilter(Uri value);
    [CompilerGeneratedAttribute]
public bool get_IncludeHealthState();
    [CompilerGeneratedAttribute]
public void set_IncludeHealthState(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.PagedDeployedServicePackageQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeHealthState>k__BackingField;
    public string NodeName { get; public set; }
    public Uri ApplicationName { get; public set; }
    public string ServiceManifestNameFilter { get; public set; }
    public bool IncludeHealthState { get; public set; }
    public PagedDeployedServicePackageQueryDescription(string nodeName, Uri applicationName);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestNameFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeHealthState();
    [CompilerGeneratedAttribute]
public void set_IncludeHealthState(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public abstract class System.Fabric.Description.PagedQueryDescriptionBase : object {
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxResults>k__BackingField;
    public string ContinuationToken { get; public set; }
    public Nullable`1<long> MaxResults { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxResults();
    [CompilerGeneratedAttribute]
public void set_MaxResults(Nullable`1<long> value);
    public virtual string ToString();
    internal IntPtr ToNativePagingDescription(PinCollection pinCollection);
    internal static void ValidatePaging(PagedQueryDescriptionBase description);
}
public class System.Fabric.Description.PartitionHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaHealthStatesFilter <ReplicasFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionHealthStatisticsFilter <HealthStatisticsFilter>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public ApplicationHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public ReplicaHealthStatesFilter ReplicasFilter { get; public set; }
    public PartitionHealthStatisticsFilter HealthStatisticsFilter { get; public set; }
    public PartitionHealthQueryDescription(Guid partitionId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    [CompilerGeneratedAttribute]
public ReplicaHealthStatesFilter get_ReplicasFilter();
    [CompilerGeneratedAttribute]
public void set_ReplicasFilter(ReplicaHealthStatesFilter value);
    [CompilerGeneratedAttribute]
public PartitionHealthStatisticsFilter get_HealthStatisticsFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStatisticsFilter(PartitionHealthStatisticsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.PartitionInstanceCountScaleMechanism : ScalingMechanismDescription {
    [CompilerGeneratedAttribute]
private int <MinInstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxInstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScaleIncrement>k__BackingField;
    public int MinInstanceCount { get; public set; }
    public int MaxInstanceCount { get; public set; }
    public int ScaleIncrement { get; public set; }
    internal PartitionInstanceCountScaleMechanism(PartitionInstanceCountScaleMechanism other);
    [CompilerGeneratedAttribute]
public int get_MinInstanceCount();
    [CompilerGeneratedAttribute]
public void set_MinInstanceCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxInstanceCount();
    [CompilerGeneratedAttribute]
public void set_MaxInstanceCount(int value);
    [CompilerGeneratedAttribute]
public int get_ScaleIncrement();
    [CompilerGeneratedAttribute]
public void set_ScaleIncrement(int value);
    internal static PartitionInstanceCountScaleMechanism CreateFromNative(FABRIC_SCALING_MECHANISM policy);
    public virtual string ToString();
    internal virtual void ToNative(PinCollection pinCollection, FABRIC_SCALING_MECHANISM& scalingMechanism);
}
internal class System.Fabric.Description.PartitionLoadInformationQueryDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public Guid PartitionId { get; public set; }
    public PartitionLoadInformationQueryDescription(Guid partitionId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Guid value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.PartitionMetricLoadDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MetricLoadDescription> <PrimaryReplicaLoadEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MetricLoadDescription> <SecondaryReplicasOrInstancesLoadEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaMetricLoadDescription> <SecondaryReplicaOrInstanceLoadEntriesPerNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MetricLoadDescription> <AuxiliaryReplicasLoadEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaMetricLoadDescription> <AuxiliaryReplicaLoadEntriesPerNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MetricLoadDescription> <MaximumReplicaLoadEntries>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public IList`1<MetricLoadDescription> PrimaryReplicaLoadEntries { get; internal set; }
    public IList`1<MetricLoadDescription> SecondaryReplicasOrInstancesLoadEntries { get; internal set; }
    public IList`1<ReplicaMetricLoadDescription> SecondaryReplicaOrInstanceLoadEntriesPerNode { get; internal set; }
    public IList`1<MetricLoadDescription> AuxiliaryReplicasLoadEntries { get; internal set; }
    public IList`1<ReplicaMetricLoadDescription> AuxiliaryReplicaLoadEntriesPerNode { get; internal set; }
    public IList`1<MetricLoadDescription> MaximumReplicaLoadEntries { get; internal set; }
    public PartitionMetricLoadDescription(Guid partitionId, IList`1<MetricLoadDescription> primaryReplicaLoadEntries, IList`1<MetricLoadDescription> secondaryReplicasOrInstancesLoadEntries, IList`1<ReplicaMetricLoadDescription> secondaryReplicaOrInstanceLoadEntriesPerNode);
    public PartitionMetricLoadDescription(Guid partitionId, IList`1<MetricLoadDescription> primaryReplicaLoadEntries, IList`1<MetricLoadDescription> secondaryReplicasOrInstancesLoadEntries, IList`1<ReplicaMetricLoadDescription> secondaryReplicaOrInstanceLoadEntriesPerNode, IList`1<MetricLoadDescription> maximumReplicaLoadEntries);
    public PartitionMetricLoadDescription(Guid partitionId, IList`1<MetricLoadDescription> primaryReplicaLoadEntries, IList`1<MetricLoadDescription> secondaryReplicasOrInstancesLoadEntries, IList`1<ReplicaMetricLoadDescription> secondaryReplicaOrInstanceLoadEntriesPerNode, IList`1<MetricLoadDescription> auxiliaryReplicasLoadEntries, IList`1<ReplicaMetricLoadDescription> auxiliaryReplicaLoadEntriesPerNode);
    public PartitionMetricLoadDescription(Guid partitionId, IList`1<MetricLoadDescription> primaryReplicaLoadEntries, IList`1<MetricLoadDescription> secondaryReplicasOrInstancesLoadEntries, IList`1<ReplicaMetricLoadDescription> secondaryReplicaOrInstanceLoadEntriesPerNode, IList`1<MetricLoadDescription> auxiliaryReplicasLoadEntries, IList`1<ReplicaMetricLoadDescription> auxiliaryReplicaLoadEntriesPerNode, IList`1<MetricLoadDescription> maximumReplicaLoadEntries);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public IList`1<MetricLoadDescription> get_PrimaryReplicaLoadEntries();
    [CompilerGeneratedAttribute]
internal void set_PrimaryReplicaLoadEntries(IList`1<MetricLoadDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<MetricLoadDescription> get_SecondaryReplicasOrInstancesLoadEntries();
    [CompilerGeneratedAttribute]
internal void set_SecondaryReplicasOrInstancesLoadEntries(IList`1<MetricLoadDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<ReplicaMetricLoadDescription> get_SecondaryReplicaOrInstanceLoadEntriesPerNode();
    [CompilerGeneratedAttribute]
internal void set_SecondaryReplicaOrInstanceLoadEntriesPerNode(IList`1<ReplicaMetricLoadDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<MetricLoadDescription> get_AuxiliaryReplicasLoadEntries();
    [CompilerGeneratedAttribute]
internal void set_AuxiliaryReplicasLoadEntries(IList`1<MetricLoadDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<ReplicaMetricLoadDescription> get_AuxiliaryReplicaLoadEntriesPerNode();
    [CompilerGeneratedAttribute]
internal void set_AuxiliaryReplicaLoadEntriesPerNode(IList`1<ReplicaMetricLoadDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<MetricLoadDescription> get_MaximumReplicaLoadEntries();
    [CompilerGeneratedAttribute]
internal void set_MaximumReplicaLoadEntries(IList`1<MetricLoadDescription> value);
    internal static void Validate(PartitionMetricLoadDescription description);
    internal IntPtr ToNative(PinCollection pinCollection, FABRIC_PARTITION_METRIC_LOAD_DESCRIPTION& nativeDescription);
    private static IntPtr ToNativeAllReplicasOrInstancesLoadEntries(PinCollection pinCollection, IList`1<MetricLoadDescription> replicaOrInstancesLoadEntries);
    internal static IntPtr ToNativeSpecificReplicaOrInstanceLoadEntries(PinCollection pinCollection, IList`1<ReplicaMetricLoadDescription> specificReplicaOrInstancesLoadEntries);
}
public class System.Fabric.Description.PartitionMoveCostDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MoveCost> <PrimaryReplicaMoveCostEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MoveCost> <SecondaryReplicasOrInstancesMoveCostEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaMoveCostDescription> <SecondaryReplicaOrInstanceMoveCostEntriesPerNode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MoveCost> <AuxiliaryReplicasMoveCostEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaMoveCostDescription> <AuxiliaryReplicaMoveCostEntriesPerNode>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public Nullable`1<MoveCost> PrimaryReplicaMoveCostEntry { get; internal set; }
    public Nullable`1<MoveCost> SecondaryReplicasOrInstancesMoveCostEntry { get; internal set; }
    public IList`1<ReplicaMoveCostDescription> SecondaryReplicaOrInstanceMoveCostEntriesPerNode { get; internal set; }
    public Nullable`1<MoveCost> AuxiliaryReplicasMoveCostEntry { get; internal set; }
    public IList`1<ReplicaMoveCostDescription> AuxiliaryReplicaMoveCostEntriesPerNode { get; internal set; }
    public PartitionMoveCostDescription(Guid partitionId, Nullable`1<MoveCost> primaryReplicaMoveCostEntry, Nullable`1<MoveCost> secondaryReplicasOrInstancesMoveCostEntry, IList`1<ReplicaMoveCostDescription> secondaryReplicaOrInstanceMoveCostEntriesPerNode, Nullable`1<MoveCost> auxiliaryReplicasMoveCostEntry, IList`1<ReplicaMoveCostDescription> auxiliaryReplicaMoveCostEntriesPerNode);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<MoveCost> get_PrimaryReplicaMoveCostEntry();
    [CompilerGeneratedAttribute]
internal void set_PrimaryReplicaMoveCostEntry(Nullable`1<MoveCost> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MoveCost> get_SecondaryReplicasOrInstancesMoveCostEntry();
    [CompilerGeneratedAttribute]
internal void set_SecondaryReplicasOrInstancesMoveCostEntry(Nullable`1<MoveCost> value);
    [CompilerGeneratedAttribute]
public IList`1<ReplicaMoveCostDescription> get_SecondaryReplicaOrInstanceMoveCostEntriesPerNode();
    [CompilerGeneratedAttribute]
internal void set_SecondaryReplicaOrInstanceMoveCostEntriesPerNode(IList`1<ReplicaMoveCostDescription> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MoveCost> get_AuxiliaryReplicasMoveCostEntry();
    [CompilerGeneratedAttribute]
internal void set_AuxiliaryReplicasMoveCostEntry(Nullable`1<MoveCost> value);
    [CompilerGeneratedAttribute]
public IList`1<ReplicaMoveCostDescription> get_AuxiliaryReplicaMoveCostEntriesPerNode();
    [CompilerGeneratedAttribute]
internal void set_AuxiliaryReplicaMoveCostEntriesPerNode(IList`1<ReplicaMoveCostDescription> value);
    internal static void Validate(PartitionMoveCostDescription description);
    internal IntPtr ToNative(PinCollection pinCollection, FABRIC_PARTITION_MOVE_COST_DESCRIPTION& nativeDescription);
    internal static FABRIC_MOVE_COST ToNativeMoveCost(MoveCost moveCost);
    internal static IntPtr ToNativeReplicaOrInstanceMoveCostEntries(PinCollection pinCollection, IList`1<ReplicaMoveCostDescription> replicaOrInstancesMoveCostEntries);
}
internal class System.Fabric.Description.PartitionQueryDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionIdFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public Uri ServiceName { get; public set; }
    public Guid PartitionIdFilter { get; public set; }
    public string ContinuationToken { get; public set; }
    public PartitionQueryDescription(Uri serviceName, Guid partitionIdFilter);
    public PartitionQueryDescription(Guid partitionIdFilter);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionIdFilter();
    [CompilerGeneratedAttribute]
public void set_PartitionIdFilter(Guid value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Description.PartitionScheme : Enum {
    public int value__;
    public static PartitionScheme Invalid;
    public static PartitionScheme Singleton;
    public static PartitionScheme UniformInt64Range;
    public static PartitionScheme Named;
}
[KnownTypeAttribute("System.Fabric.Description.SingletonPartitionSchemeDescription")]
[KnownTypeAttribute("System.Fabric.Description.UniformInt64RangePartitionSchemeDescription")]
[KnownTypeAttribute("System.Fabric.Description.NamedPartitionSchemeDescription")]
public abstract class System.Fabric.Description.PartitionSchemeDescription : object {
    [CompilerGeneratedAttribute]
private PartitionScheme <Scheme>k__BackingField;
    [JsonCustomizationAttribute]
public PartitionScheme Scheme { get; private set; }
    protected PartitionSchemeDescription(PartitionScheme scheme);
    protected PartitionSchemeDescription(PartitionSchemeDescription other);
    [CompilerGeneratedAttribute]
public PartitionScheme get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(PartitionScheme value);
    internal PartitionSchemeDescription GetCopy();
    internal static PartitionSchemeDescription CreateFromNative(FABRIC_PARTITION_SCHEME scheme, IntPtr ptr);
    internal abstract virtual IntPtr ToNative(PinCollection pin);
    [DerivedTypeResolverAttribute("PartitionScheme")]
internal static Type ResolveDerivedClass(PartitionScheme scheme);
}
public class System.Fabric.Description.ProvisionApplicationTypeDescription : ProvisionApplicationTypeDescriptionBase {
    [CompilerGeneratedAttribute]
private string <BuildPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationPackageCleanupPolicy <ApplicationPackageCleanupPolicy>k__BackingField;
    [JsonCustomizationAttribute]
public string BuildPath { get; private set; }
    public ApplicationPackageCleanupPolicy ApplicationPackageCleanupPolicy { get; public set; }
    public ProvisionApplicationTypeDescription(string buildPath);
    [CompilerGeneratedAttribute]
public string get_BuildPath();
    [CompilerGeneratedAttribute]
private void set_BuildPath(string value);
    [CompilerGeneratedAttribute]
public ApplicationPackageCleanupPolicy get_ApplicationPackageCleanupPolicy();
    [CompilerGeneratedAttribute]
public void set_ApplicationPackageCleanupPolicy(ApplicationPackageCleanupPolicy value);
    public virtual string ToString();
    internal virtual IntPtr ToNativeValue(PinCollection pin);
}
[KnownTypeAttribute("System.Fabric.Description.ProvisionApplicationTypeDescription")]
[KnownTypeAttribute("System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription")]
public abstract class System.Fabric.Description.ProvisionApplicationTypeDescriptionBase : object {
    [CompilerGeneratedAttribute]
private ProvisionApplicationTypeKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Async>k__BackingField;
    [JsonCustomizationAttribute]
public ProvisionApplicationTypeKind Kind { get; private set; }
    public bool Async { get; public set; }
    protected ProvisionApplicationTypeDescriptionBase(ProvisionApplicationTypeKind kind);
    [CompilerGeneratedAttribute]
public ProvisionApplicationTypeKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ProvisionApplicationTypeKind value);
    [CompilerGeneratedAttribute]
public bool get_Async();
    [CompilerGeneratedAttribute]
public void set_Async(bool value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal abstract virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public enum System.Fabric.Description.ProvisionApplicationTypeKind : Enum {
    public int value__;
    public static ProvisionApplicationTypeKind Invalid;
    public static ProvisionApplicationTypeKind ImageStorePath;
    public static ProvisionApplicationTypeKind ExternalStore;
}
[KnownTypeAttribute("System.Fabric.Description.NamedRepartitionDescription")]
public abstract class System.Fabric.Description.RepartitionDescription : object {
    [CompilerGeneratedAttribute]
private PartitionScheme <PartitionKind>k__BackingField;
    public PartitionScheme PartitionKind { get; private set; }
    protected RepartitionDescription(PartitionScheme kind);
    [CompilerGeneratedAttribute]
public PartitionScheme get_PartitionKind();
    [CompilerGeneratedAttribute]
private void set_PartitionKind(PartitionScheme value);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_PARTITION_KIND& kind);
}
public class System.Fabric.Description.ReplicaHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaOrInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public long ReplicaOrInstanceId { get; internal set; }
    public ApplicationHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public ReplicaHealthQueryDescription(Guid partitionId, long replicaOrInstanceId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaOrInstanceId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaOrInstanceId(long value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ReplicaLifecycleDescription : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSingletonReplicaMoveAllowedDuringUpgrade>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RestoreReplicaLocationAfterUpgrade>k__BackingField;
    internal bool IsIsSingletonReplicaMoveAllowedDuringUpgradeSpecified { get; }
    [JsonCustomizationAttribute]
public Nullable`1<bool> IsSingletonReplicaMoveAllowedDuringUpgrade { get; public set; }
    internal bool IsRestoreReplicaLocationAfterUpgradeSpecified { get; }
    [JsonCustomizationAttribute]
public Nullable`1<bool> RestoreReplicaLocationAfterUpgrade { get; public set; }
    internal ReplicaLifecycleDescription(ReplicaLifecycleDescription other);
    internal bool get_IsIsSingletonReplicaMoveAllowedDuringUpgradeSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSingletonReplicaMoveAllowedDuringUpgrade();
    [CompilerGeneratedAttribute]
public void set_IsSingletonReplicaMoveAllowedDuringUpgrade(Nullable`1<bool> value);
    internal bool get_IsRestoreReplicaLocationAfterUpgradeSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RestoreReplicaLocationAfterUpgrade();
    [CompilerGeneratedAttribute]
public void set_RestoreReplicaLocationAfterUpgrade(Nullable`1<bool> value);
    internal void ToNative(PinCollection pinCollection, REPLICA_LIFECYCLE_DESCRIPTION& replicaLifecycleDescription);
    internal static ReplicaLifecycleDescription CreateFromNative(IntPtr intPtr);
    public virtual string ToString();
}
internal class System.Fabric.Description.ReplicaLoadInformationQueryDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaOrInstanceId>k__BackingField;
    public Guid PartitionId { get; public set; }
    public long ReplicaOrInstanceId { get; public set; }
    public ReplicaLoadInformationQueryDescription(Guid partitionId, long replicaOrInstanceId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaOrInstanceId();
    [CompilerGeneratedAttribute]
public void set_ReplicaOrInstanceId(long value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ReplicaMetricLoadDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MetricLoadDescription> <ReplicaOrInstanceLoadEntries>k__BackingField;
    public string NodeName { get; internal set; }
    public IList`1<MetricLoadDescription> ReplicaOrInstanceLoadEntries { get; internal set; }
    public ReplicaMetricLoadDescription(string nodeName, IList`1<MetricLoadDescription> replicaOrInstanceLoadEntries);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<MetricLoadDescription> get_ReplicaOrInstanceLoadEntries();
    [CompilerGeneratedAttribute]
internal void set_ReplicaOrInstanceLoadEntries(IList`1<MetricLoadDescription> value);
    internal static void Validate(ReplicaMetricLoadDescription description);
    internal static void Validate(IList`1<ReplicaMetricLoadDescription> replicaMetricLoadDescriptions);
    internal IntPtr ToNative(PinCollection pinCollection, FABRIC_REPLICA_METRIC_LOAD_DESCRIPTION& nativeDescription);
    internal static IntPtr ToNativeReplicaOrInstanceLoadEntries(PinCollection pinCollection, IList`1<MetricLoadDescription> replicaOrInstanceLoadEntries);
}
public class System.Fabric.Description.ReplicaMoveCostDescription : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private MoveCost <ReplicaOrInstanceMoveCostEntry>k__BackingField;
    public string NodeName { get; internal set; }
    public MoveCost ReplicaOrInstanceMoveCostEntry { get; internal set; }
    public ReplicaMoveCostDescription(string nodeName, MoveCost replicaOrInstanceMoveCostEntry);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public MoveCost get_ReplicaOrInstanceMoveCostEntry();
    [CompilerGeneratedAttribute]
internal void set_ReplicaOrInstanceMoveCostEntry(MoveCost value);
    internal static void Validate(ReplicaMoveCostDescription description);
    internal static void Validate(IList`1<ReplicaMoveCostDescription> replicaMoveCostDescriptions);
    internal IntPtr ToNative(PinCollection pinCollection, FABRIC_REPLICA_MOVE_COST_DESCRIPTION& nativeDescription);
}
internal class System.Fabric.Description.ReplicaQueryDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaIdFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceReplicaStatusFilter <ReplicaStatusFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public Guid PartitionId { get; public set; }
    public long ReplicaIdFilter { get; public set; }
    public ServiceReplicaStatusFilter ReplicaStatusFilter { get; public set; }
    public string ContinuationToken { get; public set; }
    public ReplicaQueryDescription(Guid partitionId, long replicaIdFilter, ServiceReplicaStatusFilter replicaStatusFilter);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaIdFilter();
    [CompilerGeneratedAttribute]
public void set_ReplicaIdFilter(long value);
    [CompilerGeneratedAttribute]
public ServiceReplicaStatusFilter get_ReplicaStatusFilter();
    [CompilerGeneratedAttribute]
public void set_ReplicaStatusFilter(ServiceReplicaStatusFilter value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.RestartPartitionDescription : object {
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private RestartPartitionMode <RestartPartitionMode>k__BackingField;
    public Guid OperationId { get; internal set; }
    public PartitionSelector PartitionSelector { get; internal set; }
    public RestartPartitionMode RestartPartitionMode { get; public set; }
    public RestartPartitionDescription(Guid operationId, PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode);
    [CompilerGeneratedAttribute]
public Guid get_OperationId();
    [CompilerGeneratedAttribute]
internal void set_OperationId(Guid value);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
internal void set_PartitionSelector(PartitionSelector value);
    [CompilerGeneratedAttribute]
public RestartPartitionMode get_RestartPartitionMode();
    [CompilerGeneratedAttribute]
public void set_RestartPartitionMode(RestartPartitionMode value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static RestartPartitionDescription CreateFromNative(IntPtr nativeRaw);
}
public class System.Fabric.Description.RollingUpgradeMonitoringPolicy : object {
    [CompilerGeneratedAttribute]
private UpgradeFailureAction <FailureAction>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckStableDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckRetryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeDomainTimeout>k__BackingField;
    public UpgradeFailureAction FailureAction { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan HealthCheckWaitDuration { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan HealthCheckStableDuration { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan HealthCheckRetryTimeout { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan UpgradeTimeout { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan UpgradeDomainTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public UpgradeFailureAction get_FailureAction();
    [CompilerGeneratedAttribute]
public void set_FailureAction(UpgradeFailureAction value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckWaitDuration();
    [CompilerGeneratedAttribute]
public void set_HealthCheckWaitDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckStableDuration();
    [CompilerGeneratedAttribute]
public void set_HealthCheckStableDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckRetryTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthCheckRetryTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeDomainTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeDomainTimeout(TimeSpan value);
    internal void Validate();
    internal static bool AreEqual(RollingUpgradeMonitoringPolicy left, RollingUpgradeMonitoringPolicy right);
    internal static RollingUpgradeMonitoringPolicy FromNative(IntPtr nativePolicyPtr);
    internal virtual IntPtr ToNative(PinCollection pinCollection);
    private void LoadFromConfigHelper();
    private static UInt32 ToNativeTimeInSeconds(TimeSpan time);
    private static TimeSpan FromNativeTimeInSeconds(UInt32 time);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class System.Fabric.Description.RollingUpgradePolicyDescription : UpgradePolicyDescription {
    [CompilerGeneratedAttribute]
private RollingUpgradeMode <UpgradeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRestart>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeReplicaSetCheckTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradeSortOrder <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InstanceCloseDelayDuration>k__BackingField;
    [JsonCustomizationAttribute]
public RollingUpgradeMode UpgradeMode { get; public set; }
    public bool ForceRestart { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan UpgradeReplicaSetCheckTimeout { get; public set; }
    [JsonCustomizationAttribute]
public UpgradeSortOrder SortOrder { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan InstanceCloseDelayDuration { get; public set; }
    [CompilerGeneratedAttribute]
public RollingUpgradeMode get_UpgradeMode();
    [CompilerGeneratedAttribute]
public void set_UpgradeMode(RollingUpgradeMode value);
    [CompilerGeneratedAttribute]
public bool get_ForceRestart();
    [CompilerGeneratedAttribute]
public void set_ForceRestart(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeReplicaSetCheckTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeReplicaSetCheckTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public UpgradeSortOrder get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(UpgradeSortOrder value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InstanceCloseDelayDuration();
    [CompilerGeneratedAttribute]
public void set_InstanceCloseDelayDuration(TimeSpan value);
    internal virtual void Validate();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static RollingUpgradePolicyDescription FromNative(IntPtr policyPtr);
    internal void FromNativeHelper(IntPtr policyPtr);
    internal virtual IntPtr Reserved_ToNative(PinCollection pinCollection);
    private static TimeSpan GetMaxTimeSpanValueForNative();
    [CompilerGeneratedAttribute]
internal static IntPtr <ToNative>g__Coalesce|22_0(IntPtr a, <>c__DisplayClass22_0& );
}
public class System.Fabric.Description.RunAsPolicyDescription : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public string UserName { get; private set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
    internal static RunAsPolicyDescription CreateFromNative(FABRIC_RUNAS_POLICY_DESCRIPTION nativeDescription);
}
[KnownTypeAttribute("System.Fabric.Description.AddRemoveIncrementalNamedPartitionScalingMechanism")]
[KnownTypeAttribute("System.Fabric.Description.PartitionInstanceCountScaleMechanism")]
public abstract class System.Fabric.Description.ScalingMechanismDescription : object {
    [CompilerGeneratedAttribute]
private ScalingMechanismKind <Kind>k__BackingField;
    [JsonCustomizationAttribute]
public ScalingMechanismKind Kind { get; private set; }
    protected ScalingMechanismDescription(ScalingMechanismKind kind);
    [CompilerGeneratedAttribute]
public ScalingMechanismKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ScalingMechanismKind value);
    internal static ScalingMechanismDescription GetCopy(ScalingMechanismDescription other);
    internal abstract virtual void ToNative(PinCollection pinCollection, FABRIC_SCALING_MECHANISM& scalingMechanism);
    internal static ScalingMechanismDescription CreateFromNative(FABRIC_SCALING_MECHANISM mechanism);
    [DerivedTypeResolverAttribute("Kind")]
internal static Type ResolveDerivedClass(ScalingMechanismKind kind);
}
public enum System.Fabric.Description.ScalingMechanismKind : Enum {
    public int value__;
    public static ScalingMechanismKind Invalid;
    public static ScalingMechanismKind ScalePartitionInstanceCount;
    public static ScalingMechanismKind AddRemoveIncrementalNamedPartition;
}
public class System.Fabric.Description.ScalingPolicyDescription : object {
    [CompilerGeneratedAttribute]
private ScalingMechanismDescription <ScalingMechanism>k__BackingField;
    [CompilerGeneratedAttribute]
private ScalingTriggerDescription <ScalingTrigger>k__BackingField;
    public ScalingMechanismDescription ScalingMechanism { get; public set; }
    public ScalingTriggerDescription ScalingTrigger { get; public set; }
    public ScalingPolicyDescription(ScalingMechanismDescription mechanism, ScalingTriggerDescription trigger);
    [CompilerGeneratedAttribute]
public ScalingMechanismDescription get_ScalingMechanism();
    [CompilerGeneratedAttribute]
public void set_ScalingMechanism(ScalingMechanismDescription value);
    [CompilerGeneratedAttribute]
public ScalingTriggerDescription get_ScalingTrigger();
    [CompilerGeneratedAttribute]
public void set_ScalingTrigger(ScalingTriggerDescription value);
    internal static ScalingPolicyDescription GetCopy(ScalingPolicyDescription other);
    internal IntPtr ToNative(PinCollection pinCollection, FABRIC_SCALING_POLICY& scalingPolicy);
    internal static ScalingPolicyDescription CreateFromNative(IntPtr intPtr);
    public virtual string ToString();
}
[KnownTypeAttribute("System.Fabric.Description.AveragePartitionLoadScalingTrigger")]
[KnownTypeAttribute("System.Fabric.Description.AverageServiceLoadScalingTrigger")]
public abstract class System.Fabric.Description.ScalingTriggerDescription : object {
    [CompilerGeneratedAttribute]
private ScalingTriggerKind <Kind>k__BackingField;
    [JsonCustomizationAttribute]
public ScalingTriggerKind Kind { get; private set; }
    protected ScalingTriggerDescription(ScalingTriggerKind kind);
    [CompilerGeneratedAttribute]
public ScalingTriggerKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ScalingTriggerKind value);
    internal abstract virtual void ToNative(PinCollection pinCollection, FABRIC_SCALING_TRIGGER& scalingTrigger);
    internal static ScalingTriggerDescription CreateFromNative(FABRIC_SCALING_TRIGGER trigger);
    internal static ScalingTriggerDescription GetCopy(ScalingTriggerDescription other);
    [DerivedTypeResolverAttribute("Kind")]
internal static Type ResolveDerivedClass(ScalingTriggerKind kind);
}
public enum System.Fabric.Description.ScalingTriggerKind : Enum {
    public int value__;
    public static ScalingTriggerKind Invalid;
    public static ScalingTriggerKind AveragePartitionLoadTrigger;
    public static ScalingTriggerKind AverageServiceLoadTrigger;
}
public class System.Fabric.Description.SecurityGroupDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityIdentifier <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DomainGroupMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SystemGroupMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DomainUserMembers>k__BackingField;
    public string Name { get; private set; }
    public SecurityIdentifier Sid { get; private set; }
    public IList`1<string> DomainGroupMembers { get; private set; }
    public IList`1<string> SystemGroupMembers { get; private set; }
    public IList`1<string> DomainUserMembers { get; private set; }
    internal SecurityGroupDescription(string name, SecurityIdentifier sid, IList`1<string> domainGroupMembers, IList`1<string> systemGroupMembers, IList`1<string> domainUserMembers);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public SecurityIdentifier get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(SecurityIdentifier value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DomainGroupMembers();
    [CompilerGeneratedAttribute]
private void set_DomainGroupMembers(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SystemGroupMembers();
    [CompilerGeneratedAttribute]
private void set_SystemGroupMembers(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DomainUserMembers();
    [CompilerGeneratedAttribute]
private void set_DomainUserMembers(IList`1<string> value);
    internal static SecurityGroupDescription CreateFromNative(IntPtr native);
}
public class System.Fabric.Description.SecurityUserDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityIdentifier <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ParentSystemGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ParentApplicationGroups>k__BackingField;
    public string Name { get; private set; }
    public SecurityIdentifier Sid { get; private set; }
    public IList`1<string> ParentSystemGroups { get; private set; }
    public IList`1<string> ParentApplicationGroups { get; private set; }
    internal SecurityUserDescription(string name, SecurityIdentifier sid, IList`1<string> parentSystemGroups, IList`1<string> parentApplicationGroups);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public SecurityIdentifier get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(SecurityIdentifier value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ParentSystemGroups();
    [CompilerGeneratedAttribute]
private void set_ParentSystemGroups(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ParentApplicationGroups();
    [CompilerGeneratedAttribute]
private void set_ParentApplicationGroups(IList`1<string> value);
    internal static SecurityUserDescription CreateFromNative(IntPtr native);
}
public class System.Fabric.Description.ServiceCorrelationDescription : object {
    private Uri serviceName;
    private ServiceCorrelationScheme scheme;
    public Uri ServiceName { get; public set; }
    public ServiceCorrelationScheme Scheme { get; public set; }
    internal ServiceCorrelationDescription(ServiceCorrelationDescription other);
    public Uri get_ServiceName();
    public void set_ServiceName(Uri value);
    public ServiceCorrelationScheme get_Scheme();
    public void set_Scheme(ServiceCorrelationScheme value);
    internal static void Validate(ServiceCorrelationDescription serviceCorrelationDescription);
    internal static ServiceCorrelationDescription CreateFromNative(IntPtr nativePtr);
    internal void ToNative(PinCollection pin, FABRIC_SERVICE_CORRELATION_DESCRIPTION& description);
    public virtual string ToString();
}
public enum System.Fabric.Description.ServiceCorrelationScheme : Enum {
    public int value__;
    public static ServiceCorrelationScheme Invalid;
    public static ServiceCorrelationScheme Affinity;
    public static ServiceCorrelationScheme AlignedAffinity;
    public static ServiceCorrelationScheme NonAlignedAffinity;
}
[KnownTypeAttribute("System.Fabric.Description.StatelessServiceDescription")]
[KnownTypeAttribute("System.Fabric.Description.StatefulServiceDescription")]
public abstract class System.Fabric.Description.ServiceDescription : object {
    private KeyedCollection`2<string, ServiceLoadMetricDescription> metrics;
    private List`1<ServiceCorrelationDescription> correlations;
    private List`1<ServicePlacementPolicyDescription> placementPolicies;
    private MoveCost defaultMoveCost;
    private bool isDefaultMoveCostSpecified;
    private List`1<ScalingPolicyDescription> scalingPolicies;
    private ServiceTagsCollection serviceTags;
    [CompilerGeneratedAttribute]
private ServiceDescriptionKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlacementConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionSchemeDescription <PartitionSchemeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitializationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceDnsName>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePackageActivationMode <ServicePackageActivationMode>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceDescriptionKind Kind { get; private set; }
    [JsonCustomizationAttribute]
public string PlacementConstraints { get; public set; }
    public string ServiceTypeName { get; public set; }
    public Uri ApplicationName { get; public set; }
    public Uri ServiceName { get; public set; }
    [JsonCustomizationAttribute]
public PartitionSchemeDescription PartitionSchemeDescription { get; public set; }
    [JsonCustomizationAttribute]
public Byte[] InitializationData { get; public set; }
    [JsonCustomizationAttribute]
public KeyedCollection`2<string, ServiceLoadMetricDescription> Metrics { get; public set; }
    [JsonCustomizationAttribute]
public IList`1<ServiceCorrelationDescription> Correlations { get; }
    [JsonCustomizationAttribute]
public IList`1<ServicePlacementPolicyDescription> PlacementPolicies { get; }
    [JsonCustomizationAttribute]
public bool IsDefaultMoveCostSpecified { get; }
    [JsonCustomizationAttribute]
public MoveCost DefaultMoveCost { get; public set; }
    [JsonCustomizationAttribute]
public string ServiceDnsName { get; public set; }
    public IList`1<ScalingPolicyDescription> ScalingPolicies { get; }
    [JsonCustomizationAttribute]
public ServiceTagsCollection ServiceTags { get; public set; }
    public ServicePackageActivationMode ServicePackageActivationMode { get; public set; }
    protected ServiceDescription(ServiceDescriptionKind kind);
    protected ServiceDescription(ServiceDescription other);
    [CompilerGeneratedAttribute]
public ServiceDescriptionKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ServiceDescriptionKind value);
    [CompilerGeneratedAttribute]
public string get_PlacementConstraints();
    [CompilerGeneratedAttribute]
public void set_PlacementConstraints(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public PartitionSchemeDescription get_PartitionSchemeDescription();
    [CompilerGeneratedAttribute]
public void set_PartitionSchemeDescription(PartitionSchemeDescription value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitializationData();
    [CompilerGeneratedAttribute]
public void set_InitializationData(Byte[] value);
    public KeyedCollection`2<string, ServiceLoadMetricDescription> get_Metrics();
    public void set_Metrics(KeyedCollection`2<string, ServiceLoadMetricDescription> value);
    public IList`1<ServiceCorrelationDescription> get_Correlations();
    public IList`1<ServicePlacementPolicyDescription> get_PlacementPolicies();
    public bool get_IsDefaultMoveCostSpecified();
    public MoveCost get_DefaultMoveCost();
    public void set_DefaultMoveCost(MoveCost value);
    [CompilerGeneratedAttribute]
public string get_ServiceDnsName();
    [CompilerGeneratedAttribute]
public void set_ServiceDnsName(string value);
    public IList`1<ScalingPolicyDescription> get_ScalingPolicies();
    public ServiceTagsCollection get_ServiceTags();
    public void set_ServiceTags(ServiceTagsCollection value);
    [CompilerGeneratedAttribute]
public ServicePackageActivationMode get_ServicePackageActivationMode();
    [CompilerGeneratedAttribute]
public void set_ServicePackageActivationMode(ServicePackageActivationMode value);
    private void CopyFrom(ServiceDescription other);
    internal static void Validate(ServiceDescription serviceDescription);
    internal static ServiceDescription CreateFromNative(IntPtr native);
    internal Tuple`2<UInt32, IntPtr> ToNativeCorrelations(PinCollection pin);
    internal Tuple`2<UInt32, IntPtr> ToNativePolicies(PinCollection pin);
    internal Tuple`2<UInt32, IntPtr> ToNativeScalingPolicies(PinCollection pin);
    internal FABRIC_MOVE_COST ToNativeDefaultMoveCost();
    internal void ParseLoadMetrics(UInt32 count, IntPtr array);
    internal void ParseCorrelations(UInt32 count, IntPtr array);
    internal void ParsePlacementPolicies(UInt32 count, IntPtr array);
    internal void ParseDefaultMoveCost(FABRIC_MOVE_COST defaultMoveCost);
    internal void ParseScalingPolicies(UInt32 count, IntPtr array);
    internal IntPtr ToNative(PinCollection pin);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_DESCRIPTION_KIND& kind);
    [DerivedTypeResolverAttribute("ServiceKind")]
internal static Type ResolveDerivedClass(ServiceDescriptionKind kind);
}
public enum System.Fabric.Description.ServiceDescriptionKind : Enum {
    public int value__;
    public static ServiceDescriptionKind Invalid;
    public static ServiceDescriptionKind Stateless;
    public static ServiceDescriptionKind Stateful;
}
public class System.Fabric.Description.ServiceFromTemplateDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceDnsName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePackageActivationMode <ServicePackageActivationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitializationData>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public Uri ServiceName { get; private set; }
    public string ServiceDnsName { get; private set; }
    public string ServiceTypeName { get; private set; }
    public ServicePackageActivationMode ServicePackageActivationMode { get; private set; }
    [JsonCustomizationAttribute]
public Byte[] InitializationData { get; private set; }
    public ServiceFromTemplateDescription(Uri applicationName, Uri serviceName, string serviceDnsName, string serviceTypeName, ServicePackageActivationMode servicePackageActivationMode, Byte[] initializationData);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceDnsName();
    [CompilerGeneratedAttribute]
private void set_ServiceDnsName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
private void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public ServicePackageActivationMode get_ServicePackageActivationMode();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationMode(ServicePackageActivationMode value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitializationData();
    [CompilerGeneratedAttribute]
private void set_InitializationData(Byte[] value);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Description.ServiceGroupDescription : object {
    [CompilerGeneratedAttribute]
private IList`1<ServiceGroupMemberDescription> <MemberDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceDescription <ServiceDescription>k__BackingField;
    public IList`1<ServiceGroupMemberDescription> MemberDescriptions { get; public set; }
    public ServiceDescription ServiceDescription { get; public set; }
    public ServiceGroupDescription(ServiceDescription serviceDescription);
    [CompilerGeneratedAttribute]
public IList`1<ServiceGroupMemberDescription> get_MemberDescriptions();
    [CompilerGeneratedAttribute]
public void set_MemberDescriptions(IList`1<ServiceGroupMemberDescription> value);
    [CompilerGeneratedAttribute]
public ServiceDescription get_ServiceDescription();
    [CompilerGeneratedAttribute]
public void set_ServiceDescription(ServiceDescription value);
    internal static void Validate(ServiceGroupDescription description);
    internal static ServiceGroupDescription CreateFromNative(IFabricServiceGroupDescriptionResult nativeResult);
}
public class System.Fabric.Description.ServiceGroupFromTemplateDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePackageActivationMode <ServicePackageActivationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitializationData>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public Uri ServiceName { get; private set; }
    public string ServiceTypeName { get; private set; }
    [JsonCustomizationAttribute]
public ServicePackageActivationMode ServicePackageActivationMode { get; private set; }
    [JsonCustomizationAttribute]
public Byte[] InitializationData { get; private set; }
    public ServiceGroupFromTemplateDescription(Uri applicationName, Uri serviceName, string serviceTypeName, ServicePackageActivationMode servicePackageActivationMode, Byte[] initializationData);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
private void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public ServicePackageActivationMode get_ServicePackageActivationMode();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationMode(ServicePackageActivationMode value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitializationData();
    [CompilerGeneratedAttribute]
private void set_InitializationData(Byte[] value);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Description.ServiceGroupMemberDescription : object {
    private List`1<ServiceLoadMetricDescription> metrics;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitializationData>k__BackingField;
    public string ServiceTypeName { get; public set; }
    public Uri ServiceName { get; public set; }
    [JsonCustomizationAttribute]
public Byte[] InitializationData { get; public set; }
    [JsonCustomizationAttribute]
public IList`1<ServiceLoadMetricDescription> Metrics { get; }
    public ServiceGroupMemberDescription(string serviceTypeName, Uri serviceName, Byte[] initializationData);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitializationData();
    [CompilerGeneratedAttribute]
public void set_InitializationData(Byte[] value);
    public IList`1<ServiceLoadMetricDescription> get_Metrics();
    internal static void Validate(ServiceGroupMemberDescription serviceGroupMemberDescription);
    internal static ServiceGroupMemberDescription CreateFromNative(IntPtr nativeDescriptionPtr, bool isStateful);
}
internal class System.Fabric.Description.ServiceGroupMemberQueryDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceNameFilter>k__BackingField;
    public Uri ApplicationName { get; public set; }
    public Uri ServiceNameFilter { get; public set; }
    public ServiceGroupMemberQueryDescription(Uri applicationName, Uri serviceNameFilter);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceNameFilter(Uri value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal class System.Fabric.Description.ServiceGroupMemberTypeQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceGroupTypeNameFilter>k__BackingField;
    public string ApplicationTypeName { get; public set; }
    public string ApplicationTypeVersion { get; public set; }
    public string ServiceGroupTypeNameFilter { get; public set; }
    public ServiceGroupMemberTypeQueryDescription(string applicationTypeName, string applicationTypeVersion, string serviceGroupTypeNameFilter);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersion();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceGroupTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceGroupTypeNameFilter(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ServiceGroupTypeDescription : object {
    [CompilerGeneratedAttribute]
private ServiceTypeDescription <ServiceTypeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ServiceGroupTypeMemberDescription> <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseImplicitFactory>k__BackingField;
    public ServiceTypeDescription ServiceTypeDescription { get; public set; }
    [JsonCustomizationAttribute]
public ICollection`1<ServiceGroupTypeMemberDescription> Members { get; private set; }
    public bool UseImplicitFactory { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceTypeDescription get_ServiceTypeDescription();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeDescription(ServiceTypeDescription value);
    [CompilerGeneratedAttribute]
public ICollection`1<ServiceGroupTypeMemberDescription> get_Members();
    [CompilerGeneratedAttribute]
private void set_Members(ICollection`1<ServiceGroupTypeMemberDescription> value);
    [CompilerGeneratedAttribute]
public bool get_UseImplicitFactory();
    [CompilerGeneratedAttribute]
public void set_UseImplicitFactory(bool value);
    internal static ServiceGroupTypeDescription CreateFromNative(IntPtr descriptionPtr);
}
public class System.Fabric.Description.ServiceGroupTypeMemberDescription : object {
    private KeyedItemCollection`2<string, ServiceLoadMetricDescription> loadMetrics;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    public string ServiceTypeName { get; public set; }
    public KeyedCollection`2<string, ServiceLoadMetricDescription> LoadMetrics { get; }
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeName(string value);
    public KeyedCollection`2<string, ServiceLoadMetricDescription> get_LoadMetrics();
    internal static ServiceGroupTypeMemberDescription CreateFromNative(IntPtr descriptionPtr, bool isStateful);
}
public class System.Fabric.Description.ServiceGroupUpdateDescription : object {
    [CompilerGeneratedAttribute]
private ServiceUpdateDescription <ServiceUpdateDescription>k__BackingField;
    public ServiceUpdateDescription ServiceUpdateDescription { get; public set; }
    public ServiceGroupUpdateDescription(ServiceUpdateDescription updateDescription);
    [CompilerGeneratedAttribute]
public ServiceUpdateDescription get_ServiceUpdateDescription();
    [CompilerGeneratedAttribute]
public void set_ServiceUpdateDescription(ServiceUpdateDescription value);
}
public class System.Fabric.Description.ServiceHealthQueryDescription : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthPolicy <HealthPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthEventsFilter <EventsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionHealthStatesFilter <PartitionsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceHealthStatisticsFilter <HealthStatisticsFilter>k__BackingField;
    public Uri ServiceName { get; internal set; }
    public ApplicationHealthPolicy HealthPolicy { get; public set; }
    public HealthEventsFilter EventsFilter { get; public set; }
    public PartitionHealthStatesFilter PartitionsFilter { get; public set; }
    public ServiceHealthStatisticsFilter HealthStatisticsFilter { get; public set; }
    public ServiceHealthQueryDescription(Uri serviceName);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public ApplicationHealthPolicy get_HealthPolicy();
    [CompilerGeneratedAttribute]
public void set_HealthPolicy(ApplicationHealthPolicy value);
    [CompilerGeneratedAttribute]
public HealthEventsFilter get_EventsFilter();
    [CompilerGeneratedAttribute]
public void set_EventsFilter(HealthEventsFilter value);
    [CompilerGeneratedAttribute]
public PartitionHealthStatesFilter get_PartitionsFilter();
    [CompilerGeneratedAttribute]
public void set_PartitionsFilter(PartitionHealthStatesFilter value);
    [CompilerGeneratedAttribute]
public ServiceHealthStatisticsFilter get_HealthStatisticsFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStatisticsFilter(ServiceHealthStatisticsFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Description.ServiceHostUpgradeImpact : Enum {
    public int value__;
    public static ServiceHostUpgradeImpact Invalid;
    public static ServiceHostUpgradeImpact None;
    public static ServiceHostUpgradeImpact ServiceHostRestart;
    public static ServiceHostUpgradeImpact UnexpectedServiceHostRestart;
}
public class System.Fabric.Description.ServiceLoadMetricDescription : object {
    private string name;
    private int primaryDefaultLoad;
    private int secondaryDefaultLoad;
    private int auxiliaryDefaultLoad;
    private int maximumLoad;
    [CompilerGeneratedAttribute]
private ServiceLoadMetricWeight <Weight>k__BackingField;
    public string Name { get; public set; }
    public ServiceLoadMetricWeight Weight { get; public set; }
    [ObsoleteAttribute("PrimaryDefaultLoad in ServiceLoadMetricDescription is deprecated, please use StatefulServiceLoadMetricDescription instead.", "False")]
public int PrimaryDefaultLoad { get; public set; }
    [ObsoleteAttribute("SecondaryDefaultLoad in ServiceLoadMetricDescription is deprecated, please use StatefulServiceLoadMetricDescription instead.", "False")]
public int SecondaryDefaultLoad { get; public set; }
    [ObsoleteAttribute("AuxiliaryDefaultLoad in ServiceLoadMetricDescription is deprecated, please use StatefulServiceLoadMetricDescription instead.", "False")]
public int AuxiliaryDefaultLoad { get; public set; }
    [ObsoleteAttribute("MaximumLoad in ServiceLoadMetricDescription is deprecated, please use StatefulServiceLoadMetricDescription instead.", "False")]
public int MaximumLoad { get; public set; }
    internal ServiceLoadMetricDescription(string name, ServiceLoadMetricWeight loadMetricWeight);
    internal ServiceLoadMetricDescription(string name, int primaryDefaultLoad, int secondaryDefaultLoad, ServiceLoadMetricWeight loadMetricWeight, int auxiliaryDefaultLoad, int maximumLoad);
    internal ServiceLoadMetricDescription(ServiceLoadMetricDescription other);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ServiceLoadMetricWeight get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(ServiceLoadMetricWeight value);
    public int get_PrimaryDefaultLoad();
    public void set_PrimaryDefaultLoad(int value);
    public int get_SecondaryDefaultLoad();
    public void set_SecondaryDefaultLoad(int value);
    public int get_AuxiliaryDefaultLoad();
    public void set_AuxiliaryDefaultLoad(int value);
    public int get_MaximumLoad();
    public void set_MaximumLoad(int value);
    internal static void Validate(ServiceLoadMetricDescription serviceLoadMetricDescription);
    internal static void CopyFrom(KeyedCollection`2<string, ServiceLoadMetricDescription> source, KeyedCollection`2<string, ServiceLoadMetricDescription> target);
    internal void ToNative(PinCollection pin, FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION& native);
    internal static ServiceLoadMetricDescription CreateFromNative(IntPtr nativeRaw, bool isStateful);
    public string ToString(bool isStateful);
}
public enum System.Fabric.Description.ServiceLoadMetricWeight : Enum {
    public int value__;
    public static ServiceLoadMetricWeight Zero;
    public static ServiceLoadMetricWeight Low;
    public static ServiceLoadMetricWeight Medium;
    public static ServiceLoadMetricWeight High;
}
internal class System.Fabric.Description.ServiceNameQueryDescription : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public Guid PartitionId { get; private set; }
    public ServiceNameQueryDescription(Guid partitionId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ServiceNotificationFilterDescription : object {
    [CompilerGeneratedAttribute]
private Uri <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchPrimaryChangeOnly>k__BackingField;
    public Uri Name { get; public set; }
    public bool MatchNamePrefix { get; public set; }
    public bool MatchPrimaryChangeOnly { get; public set; }
    public ServiceNotificationFilterDescription(Uri name, bool matchNamePrefix, bool matchPrimaryChangeOnly);
    [CompilerGeneratedAttribute]
public Uri get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(Uri value);
    [CompilerGeneratedAttribute]
public bool get_MatchNamePrefix();
    [CompilerGeneratedAttribute]
public void set_MatchNamePrefix(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchPrimaryChangeOnly();
    [CompilerGeneratedAttribute]
public void set_MatchPrimaryChangeOnly(bool value);
    internal IntPtr ToNative(PinCollection pin);
}
public enum System.Fabric.Description.ServicePackageActivationMode : Enum {
    public int value__;
    public static ServicePackageActivationMode SharedProcess;
    public static ServicePackageActivationMode ExclusiveProcess;
}
public class System.Fabric.Description.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription : ServicePlacementPolicyDescription {
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    private string DomainName { get; private set; }
    internal ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription(ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription other);
    [CompilerGeneratedAttribute]
private string get_DomainName();
    [CompilerGeneratedAttribute]
private void set_DomainName(string value);
    internal static ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PLACEMENT_POLICY_TYPE& type);
    public virtual string ToString();
}
public class System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription : ServicePlacementPolicyDescription {
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    public string DomainName { get; public set; }
    internal ServicePlacementInvalidDomainPolicyDescription(ServicePlacementInvalidDomainPolicyDescription other);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    internal static ServicePlacementInvalidDomainPolicyDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PLACEMENT_POLICY_TYPE& type);
    public virtual string ToString();
}
public class System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription : ServicePlacementPolicyDescription {
    internal ServicePlacementNonPartiallyPlaceServicePolicyDescription(ServicePlacementNonPartiallyPlaceServicePolicyDescription other);
    internal static ServicePlacementNonPartiallyPlaceServicePolicyDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PLACEMENT_POLICY_TYPE& type);
    public virtual string ToString();
}
[KnownTypeAttribute("System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription")]
[KnownTypeAttribute("System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription")]
[KnownTypeAttribute("System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription")]
[KnownTypeAttribute("System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription")]
[KnownTypeAttribute("System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription")]
[KnownTypeAttribute("System.Fabric.Description.ServicePlacementAllowMultipleStatelessInstancesOnNodePolicyDescription")]
public abstract class System.Fabric.Description.ServicePlacementPolicyDescription : object {
    [CompilerGeneratedAttribute]
private ServicePlacementPolicyType <Type>k__BackingField;
    public ServicePlacementPolicyType Type { get; public set; }
    public ServicePlacementPolicyDescription(ServicePlacementPolicyType type);
    protected ServicePlacementPolicyDescription(ServicePlacementPolicyDescription other);
    [CompilerGeneratedAttribute]
public ServicePlacementPolicyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ServicePlacementPolicyType value);
    internal ServicePlacementPolicyDescription GetCopy();
    internal static ServicePlacementPolicyDescription CreateFromNative(IntPtr nativePtr);
    internal IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION& nativePolicy);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_PLACEMENT_POLICY_TYPE& type);
    [DerivedTypeResolverAttribute("Type")]
internal static Type ResolveDerivedClass(ServicePlacementPolicyType type);
}
public enum System.Fabric.Description.ServicePlacementPolicyType : Enum {
    public int value__;
    public static ServicePlacementPolicyType Invalid;
    public static ServicePlacementPolicyType InvalidDomain;
    public static ServicePlacementPolicyType RequireDomain;
    public static ServicePlacementPolicyType PreferPrimaryDomain;
    public static ServicePlacementPolicyType RequireDomainDistribution;
    public static ServicePlacementPolicyType NonPartiallyPlaceService;
    public static ServicePlacementPolicyType AllowMultipleStatelessInstancesOnNode;
}
public class System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription : ServicePlacementPolicyDescription {
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    public string DomainName { get; public set; }
    internal ServicePlacementPreferPrimaryDomainPolicyDescription(ServicePlacementPreferPrimaryDomainPolicyDescription other);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    internal static ServicePlacementPreferPrimaryDomainPolicyDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PLACEMENT_POLICY_TYPE& type);
    public virtual string ToString();
}
public class System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription : ServicePlacementPolicyDescription {
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    public string DomainName { get; public set; }
    internal ServicePlacementRequiredDomainPolicyDescription(ServicePlacementRequiredDomainPolicyDescription other);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    internal static ServicePlacementRequiredDomainPolicyDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PLACEMENT_POLICY_TYPE& type);
    public virtual string ToString();
}
public class System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription : ServicePlacementPolicyDescription {
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    private string DomainName { get; private set; }
    internal ServicePlacementRequireDomainDistributionPolicyDescription(ServicePlacementRequireDomainDistributionPolicyDescription other);
    [CompilerGeneratedAttribute]
private string get_DomainName();
    [CompilerGeneratedAttribute]
private void set_DomainName(string value);
    internal static ServicePlacementRequireDomainDistributionPolicyDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PLACEMENT_POLICY_TYPE& type);
    public virtual string ToString();
}
public class System.Fabric.Description.ServiceQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeNameFilter>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public Uri ServiceNameFilter { get; public set; }
    public string ServiceTypeNameFilter { get; public set; }
    public ServiceQueryDescription(Uri applicationName);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceNameFilter(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeNameFilter(string value);
    internal static void Validate(ServiceQueryDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.ServiceSensitivityDescription : object {
    private UInt32 _primaryDefaultSensitivity;
    private UInt32 _secondaryDefaultSensitivity;
    private UInt32 _auxiliaryDefaultSensitivity;
    private bool _isMaximumSensitivity;
    public UInt32 PrimaryDefaultSensitivity { get; public set; }
    public UInt32 SecondaryDefaultSensitivity { get; public set; }
    public UInt32 AuxiliaryDefaultSensitivity { get; public set; }
    public bool IsMaximumSensitivity { get; public set; }
    public ServiceSensitivityDescription(UInt32 PrimaryDefaultSensitivity, UInt32 SecondaryDefaultSensitivity, UInt32 AuxiliaryDefaultSensitivity, bool IsMaximumSensitivity);
    internal ServiceSensitivityDescription(ServiceSensitivityDescription other);
    public UInt32 get_PrimaryDefaultSensitivity();
    public void set_PrimaryDefaultSensitivity(UInt32 value);
    public UInt32 get_SecondaryDefaultSensitivity();
    public void set_SecondaryDefaultSensitivity(UInt32 value);
    public UInt32 get_AuxiliaryDefaultSensitivity();
    public void set_AuxiliaryDefaultSensitivity(UInt32 value);
    public bool get_IsMaximumSensitivity();
    public void set_IsMaximumSensitivity(bool value);
    internal void ToNative(PinCollection pinCollection, SERVICE_SENSITIVITY_DESCRIPTION& serviceSensitivityDescriptionNative);
    internal static ServiceSensitivityDescription CreateFromNative(IntPtr intPtr);
    public string ToString(bool isStateful);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Fabric.Description.ServiceTagsCollection : object {
    [CompilerGeneratedAttribute]
private List`1<string> <TagsRequiredToPlace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TagsRequiredToRun>k__BackingField;
    public List`1<string> TagsRequiredToPlace { get; public set; }
    public List`1<string> TagsRequiredToRun { get; public set; }
    public ServiceTagsCollection(List`1<string> tagsRequiredToPlace, List`1<string> tagsRequiredToRun);
    [CompilerGeneratedAttribute]
public List`1<string> get_TagsRequiredToPlace();
    [CompilerGeneratedAttribute]
public void set_TagsRequiredToPlace(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TagsRequiredToRun();
    [CompilerGeneratedAttribute]
public void set_TagsRequiredToRun(List`1<string> value);
    public void AddTagsRequiredToPlace(string tag);
    public void AddTagsRequiredToRun(string tag);
    internal ServiceTagsCollection GetCopy();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ServiceTagsCollection CreateFromNative(IntPtr intPtr);
    public virtual string ToString();
}
[KnownTypeAttribute("System.Fabric.Description.StatelessServiceTypeDescription")]
[KnownTypeAttribute("System.Fabric.Description.StatefulServiceTypeDescription")]
public abstract class System.Fabric.Description.ServiceTypeDescription : object {
    private KeyedItemCollection`2<string, ServiceLoadMetricDescription> loadMetrics;
    private Dictionary`2<string, string> extensions;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceDescriptionKind <ServiceTypeKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlacementConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServicePlacementPolicyDescription> <Policies>k__BackingField;
    public string ServiceTypeName { get; public set; }
    [JsonCustomizationAttribute]
public ServiceDescriptionKind ServiceTypeKind { get; public set; }
    public string PlacementConstraints { get; public set; }
    public KeyedCollection`2<string, ServiceLoadMetricDescription> LoadMetrics { get; }
    [JsonCustomizationAttribute]
public IDictionary`2<string, string> Extensions { get; }
    [JsonCustomizationAttribute]
protected internal IList`1<KeyValuePair`2<string, string>> Extensions_ { get; protected internal set; }
    [JsonCustomizationAttribute]
public List`1<ServicePlacementPolicyDescription> Policies { get; public set; }
    protected internal bool IsStateful { get; }
    protected internal ServiceTypeDescription(ServiceDescriptionKind kind);
    protected internal ServiceTypeDescription(ServiceTypeDescription other);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public ServiceDescriptionKind get_ServiceTypeKind();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeKind(ServiceDescriptionKind value);
    [CompilerGeneratedAttribute]
public string get_PlacementConstraints();
    [CompilerGeneratedAttribute]
public void set_PlacementConstraints(string value);
    public KeyedCollection`2<string, ServiceLoadMetricDescription> get_LoadMetrics();
    public IDictionary`2<string, string> get_Extensions();
    protected internal IList`1<KeyValuePair`2<string, string>> get_Extensions_();
    protected internal void set_Extensions_(IList`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public List`1<ServicePlacementPolicyDescription> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(List`1<ServicePlacementPolicyDescription> value);
    protected internal bool get_IsStateful();
    private void CopyFrom(ServiceTypeDescription other);
    internal static bool TryCreateFromNative(IntPtr descriptionPtr, ServiceTypeDescription& serviceTypeDescription);
    internal static ServiceTypeDescription CreateFromNative(IntPtr descriptionPtr);
    protected internal void ReadCommonProperties(IntPtr serviceTypeName, IntPtr placementConstraints, IntPtr loadMetricsList, IntPtr descriptionExtensionList);
    internal void ParsePlacementPolicies(UInt32 count, IntPtr array);
    [DerivedTypeResolverAttribute("IsStateful")]
internal static Type ResolveDerivedClass(bool isStateful);
}
internal class System.Fabric.Description.ServiceTypeQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeNameFilter>k__BackingField;
    public string ApplicationTypeName { get; public set; }
    public string ApplicationTypeVersion { get; public set; }
    public string ServiceTypeNameFilter { get; public set; }
    public ServiceTypeQueryDescription(string applicationTypeName, string applicationTypeVersion, string serviceTypeNameFilter);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersion();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceTypeNameFilter(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public abstract class System.Fabric.Description.ServiceUpdateDescription : object {
    [CompilerGeneratedAttribute]
private ServiceDescriptionKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlacementConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyedCollection`2<string, ServiceLoadMetricDescription> <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ServiceCorrelationDescription> <Correlations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ServicePlacementPolicyDescription> <PlacementPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private RepartitionDescription <RepartitionDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MoveCost> <DefaultMoveCost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceDnsName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ScalingPolicyDescription> <ScalingPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceTagsCollection <ServiceTags>k__BackingField;
    public ServiceDescriptionKind Kind { get; private set; }
    public string PlacementConstraints { get; public set; }
    [JsonCustomizationAttribute]
public KeyedCollection`2<string, ServiceLoadMetricDescription> Metrics { get; public set; }
    public IList`1<ServiceCorrelationDescription> Correlations { get; public set; }
    public IList`1<ServicePlacementPolicyDescription> PlacementPolicies { get; public set; }
    public RepartitionDescription RepartitionDescription { get; public set; }
    public Nullable`1<MoveCost> DefaultMoveCost { get; public set; }
    public string ServiceDnsName { get; public set; }
    public IList`1<ScalingPolicyDescription> ScalingPolicies { get; public set; }
    public ServiceTagsCollection ServiceTags { get; public set; }
    protected ServiceUpdateDescription(ServiceDescriptionKind kind);
    [CompilerGeneratedAttribute]
public ServiceDescriptionKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ServiceDescriptionKind value);
    [CompilerGeneratedAttribute]
public string get_PlacementConstraints();
    [CompilerGeneratedAttribute]
public void set_PlacementConstraints(string value);
    [CompilerGeneratedAttribute]
public KeyedCollection`2<string, ServiceLoadMetricDescription> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(KeyedCollection`2<string, ServiceLoadMetricDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<ServiceCorrelationDescription> get_Correlations();
    [CompilerGeneratedAttribute]
public void set_Correlations(IList`1<ServiceCorrelationDescription> value);
    [CompilerGeneratedAttribute]
public IList`1<ServicePlacementPolicyDescription> get_PlacementPolicies();
    [CompilerGeneratedAttribute]
public void set_PlacementPolicies(IList`1<ServicePlacementPolicyDescription> value);
    [CompilerGeneratedAttribute]
public RepartitionDescription get_RepartitionDescription();
    [CompilerGeneratedAttribute]
public void set_RepartitionDescription(RepartitionDescription value);
    [CompilerGeneratedAttribute]
public Nullable`1<MoveCost> get_DefaultMoveCost();
    [CompilerGeneratedAttribute]
public void set_DefaultMoveCost(Nullable`1<MoveCost> value);
    [CompilerGeneratedAttribute]
public string get_ServiceDnsName();
    [CompilerGeneratedAttribute]
public void set_ServiceDnsName(string value);
    [CompilerGeneratedAttribute]
public IList`1<ScalingPolicyDescription> get_ScalingPolicies();
    [CompilerGeneratedAttribute]
public void set_ScalingPolicies(IList`1<ScalingPolicyDescription> value);
    [CompilerGeneratedAttribute]
public ServiceTagsCollection get_ServiceTags();
    [CompilerGeneratedAttribute]
public void set_ServiceTags(ServiceTagsCollection value);
    internal IntPtr ToNative(PinCollection pin);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_DESCRIPTION_KIND& kind);
    internal Tuple`2<UInt32, IntPtr> ToNativeCorrelations(PinCollection pin);
    internal Tuple`2<UInt32, IntPtr> ToNativePolicies(PinCollection pin);
    internal Tuple`2<UInt32, IntPtr> ToNativeScalingPolicies(PinCollection pin);
    internal void ParseLoadMetrics(UInt32 count, IntPtr array);
    internal void ParseCorrelations(UInt32 count, IntPtr array);
    internal void ParsePlacementPolicies(UInt32 count, IntPtr array);
    internal void ParseScalingPolicies(UInt32 count, IntPtr array);
}
internal class System.Fabric.Description.SetChaosScheduleDescription : object {
    [CompilerGeneratedAttribute]
private ChaosScheduleDescription <ChaosScheduleDescription>k__BackingField;
    public ChaosScheduleDescription ChaosScheduleDescription { get; public set; }
    public SetChaosScheduleDescription(ChaosScheduleDescription chaosScheduleDescription);
    [CompilerGeneratedAttribute]
public ChaosScheduleDescription get_ChaosScheduleDescription();
    [CompilerGeneratedAttribute]
public void set_ChaosScheduleDescription(ChaosScheduleDescription value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static SetChaosScheduleDescription CreateFromNative(IntPtr nativeRaw);
}
public class System.Fabric.Description.SingletonPartitionSchemeDescription : PartitionSchemeDescription {
    internal SingletonPartitionSchemeDescription(SingletonPartitionSchemeDescription other);
    internal static SingletonPartitionSchemeDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.Description.StartChaosDescription : object {
    [CompilerGeneratedAttribute]
private ChaosParameters <ChaosParameters>k__BackingField;
    public ChaosParameters ChaosParameters { get; public set; }
    public StartChaosDescription(ChaosParameters chaosTestScenarioParameters);
    [CompilerGeneratedAttribute]
public ChaosParameters get_ChaosParameters();
    [CompilerGeneratedAttribute]
public void set_ChaosParameters(ChaosParameters value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static StartChaosDescription CreateFromNative(IntPtr nativeRaw);
}
public class System.Fabric.Description.StartNodePoisonDescription : object {
    private string nodeId;
    private BigInteger nodeInstanceId;
    private List`1<string> neighbors;
    public string NodeId { get; }
    public BigInteger NodeInstanceId { get; }
    public List`1<string> Neighbors { get; }
    public StartNodePoisonDescription(string nodeId, BigInteger nodeInstanceId, List`1<string> neighbors);
    public string get_NodeId();
    public BigInteger get_NodeInstanceId();
    public List`1<string> get_Neighbors();
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.Description.StartNodeTransitionDescription : object {
    [CompilerGeneratedAttribute]
private Guid <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeTransitionType <NodeTransitionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstanceId>k__BackingField;
    public Guid OperationId { get; internal set; }
    public NodeTransitionType NodeTransitionType { get; internal set; }
    public string NodeName { get; internal set; }
    public BigInteger NodeInstanceId { get; public set; }
    public StartNodeTransitionDescription(Guid operationId, NodeTransitionType nodeTransitionType, string nodeName, BigInteger nodeInstanceId);
    [CompilerGeneratedAttribute]
public Guid get_OperationId();
    [CompilerGeneratedAttribute]
internal void set_OperationId(Guid value);
    [CompilerGeneratedAttribute]
public NodeTransitionType get_NodeTransitionType();
    [CompilerGeneratedAttribute]
internal void set_NodeTransitionType(NodeTransitionType value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstanceId();
    [CompilerGeneratedAttribute]
public void set_NodeInstanceId(BigInteger value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static StartNodeTransitionDescription CreateFromNative(IntPtr nativeRaw);
}
public class System.Fabric.Description.StatefulServiceDescription : ServiceDescription {
    [CompilerGeneratedAttribute]
private bool <HasPersistedState>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetReplicaSetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinReplicaSetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ReplicaRestartWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <QuorumLossWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <StandByReplicaKeepDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ServicePlacementTimeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DropSourceReplicaOnMove>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaLifecycleDescription <ReplicaLifecycleDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AuxiliaryReplicaCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceSensitivityDescription <ServiceSensitivityDescription>k__BackingField;
    private FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS flags;
    public bool HasPersistedState { get; public set; }
    public int TargetReplicaSetSize { get; public set; }
    public int MinReplicaSetSize { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> ReplicaRestartWaitDuration { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> QuorumLossWaitDuration { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> StandByReplicaKeepDuration { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> ServicePlacementTimeLimit { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<bool> DropSourceReplicaOnMove { get; public set; }
    [JsonCustomizationAttribute]
public ReplicaLifecycleDescription ReplicaLifecycleDescription { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<int> AuxiliaryReplicaCount { get; public set; }
    [JsonCustomizationAttribute]
private int ReplicaRestartWaitDurationSeconds { get; private set; }
    [JsonCustomizationAttribute]
private int QuorumLossWaitDurationSeconds { get; private set; }
    [JsonCustomizationAttribute]
private int StandByReplicaKeepDurationSeconds { get; private set; }
    [JsonCustomizationAttribute]
private int ServicePlacementTimeLimitSeconds { get; private set; }
    [JsonCustomizationAttribute]
public ServiceSensitivityDescription ServiceSensitivityDescription { get; public set; }
    internal FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS Flags { get; internal set; }
    internal StatefulServiceDescription(StatefulServiceDescription other);
    [CompilerGeneratedAttribute]
public bool get_HasPersistedState();
    [CompilerGeneratedAttribute]
public void set_HasPersistedState(bool value);
    [CompilerGeneratedAttribute]
public int get_TargetReplicaSetSize();
    [CompilerGeneratedAttribute]
public void set_TargetReplicaSetSize(int value);
    [CompilerGeneratedAttribute]
public int get_MinReplicaSetSize();
    [CompilerGeneratedAttribute]
public void set_MinReplicaSetSize(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ReplicaRestartWaitDuration();
    [CompilerGeneratedAttribute]
public void set_ReplicaRestartWaitDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_QuorumLossWaitDuration();
    [CompilerGeneratedAttribute]
public void set_QuorumLossWaitDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_StandByReplicaKeepDuration();
    [CompilerGeneratedAttribute]
public void set_StandByReplicaKeepDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ServicePlacementTimeLimit();
    [CompilerGeneratedAttribute]
public void set_ServicePlacementTimeLimit(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DropSourceReplicaOnMove();
    [CompilerGeneratedAttribute]
public void set_DropSourceReplicaOnMove(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ReplicaLifecycleDescription get_ReplicaLifecycleDescription();
    [CompilerGeneratedAttribute]
public void set_ReplicaLifecycleDescription(ReplicaLifecycleDescription value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AuxiliaryReplicaCount();
    [CompilerGeneratedAttribute]
public void set_AuxiliaryReplicaCount(Nullable`1<int> value);
    private int get_ReplicaRestartWaitDurationSeconds();
    private void set_ReplicaRestartWaitDurationSeconds(int value);
    private int get_QuorumLossWaitDurationSeconds();
    private void set_QuorumLossWaitDurationSeconds(int value);
    private int get_StandByReplicaKeepDurationSeconds();
    private void set_StandByReplicaKeepDurationSeconds(int value);
    private int get_ServicePlacementTimeLimitSeconds();
    private void set_ServicePlacementTimeLimitSeconds(int value);
    [CompilerGeneratedAttribute]
public ServiceSensitivityDescription get_ServiceSensitivityDescription();
    [CompilerGeneratedAttribute]
public void set_ServiceSensitivityDescription(ServiceSensitivityDescription value);
    internal FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS get_Flags();
    internal void set_Flags(FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS value);
    internal static StatefulServiceDescription CreateFromNative(IntPtr native);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_DESCRIPTION_KIND& kind);
    internal void ValidateDefaultMetricValue();
}
public class System.Fabric.Description.StatefulServiceLoadMetricDescription : ServiceLoadMetricDescription {
    public int PrimaryDefaultLoad { get; public set; }
    public int SecondaryDefaultLoad { get; public set; }
    public int AuxiliaryDefaultLoad { get; public set; }
    public int MaximumLoad { get; public set; }
    internal StatefulServiceLoadMetricDescription(string name, int primaryDefaultLoad, int secondaryDefaultLoad, ServiceLoadMetricWeight loadMetricWeight, int auxiliaryDefaultLoad, int maximumLoad);
    internal StatefulServiceLoadMetricDescription(StatefulServiceLoadMetricDescription other);
    public int get_PrimaryDefaultLoad();
    public void set_PrimaryDefaultLoad(int value);
    public int get_SecondaryDefaultLoad();
    public void set_SecondaryDefaultLoad(int value);
    public int get_AuxiliaryDefaultLoad();
    public void set_AuxiliaryDefaultLoad(int value);
    public int get_MaximumLoad();
    public void set_MaximumLoad(int value);
    public virtual string ToString();
}
public class System.Fabric.Description.StatefulServiceTypeDescription : ServiceTypeDescription {
    [CompilerGeneratedAttribute]
private bool <HasPersistedState>k__BackingField;
    public bool HasPersistedState { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasPersistedState();
    [CompilerGeneratedAttribute]
public void set_HasPersistedState(bool value);
    internal static StatefulServiceTypeDescription CreateFromNative(IntPtr descriptionPtr);
}
public class System.Fabric.Description.StatefulServiceUpdateDescription : ServiceUpdateDescription {
    private Nullable`1<TimeSpan> replicaRestartWaitDuration;
    private Nullable`1<TimeSpan> quorumLossWaitDuration;
    private Nullable`1<TimeSpan> standByReplicaKeepDuration;
    private Nullable`1<TimeSpan> servicePlacementTimeLimit;
    private Nullable`1<bool> dropSourceReplicaOnMove;
    private Nullable`1<int> auxiliaryReplicaCount;
    private ReplicaLifecycleDescription replicaLifecycleDescription;
    private ServiceSensitivityDescription serviceSensitivityDescription;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TargetReplicaSetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinReplicaSetSize>k__BackingField;
    public Nullable`1<int> TargetReplicaSetSize { get; public set; }
    public Nullable`1<int> MinReplicaSetSize { get; public set; }
    public Nullable`1<TimeSpan> ReplicaRestartWaitDuration { get; public set; }
    public Nullable`1<TimeSpan> QuorumLossWaitDuration { get; public set; }
    public Nullable`1<TimeSpan> StandByReplicaKeepDuration { get; public set; }
    public Nullable`1<TimeSpan> ServicePlacementTimeLimit { get; public set; }
    public Nullable`1<bool> DropSourceReplicaOnMove { get; public set; }
    public ReplicaLifecycleDescription ReplicaLifecycleDescription { get; public set; }
    public Nullable`1<int> AuxiliaryReplicaCount { get; public set; }
    public ServiceSensitivityDescription ServiceSensitivityDescription { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TargetReplicaSetSize();
    [CompilerGeneratedAttribute]
public void set_TargetReplicaSetSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinReplicaSetSize();
    [CompilerGeneratedAttribute]
public void set_MinReplicaSetSize(Nullable`1<int> value);
    public Nullable`1<TimeSpan> get_ReplicaRestartWaitDuration();
    public void set_ReplicaRestartWaitDuration(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_QuorumLossWaitDuration();
    public void set_QuorumLossWaitDuration(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_StandByReplicaKeepDuration();
    public void set_StandByReplicaKeepDuration(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_ServicePlacementTimeLimit();
    public void set_ServicePlacementTimeLimit(Nullable`1<TimeSpan> value);
    public Nullable`1<bool> get_DropSourceReplicaOnMove();
    public void set_DropSourceReplicaOnMove(Nullable`1<bool> value);
    public ReplicaLifecycleDescription get_ReplicaLifecycleDescription();
    public void set_ReplicaLifecycleDescription(ReplicaLifecycleDescription value);
    public Nullable`1<int> get_AuxiliaryReplicaCount();
    public void set_AuxiliaryReplicaCount(Nullable`1<int> value);
    public ServiceSensitivityDescription get_ServiceSensitivityDescription();
    public void set_ServiceSensitivityDescription(ServiceSensitivityDescription value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_DESCRIPTION_KIND& kind);
}
public class System.Fabric.Description.StatelessServiceDescription : ServiceDescription {
    [CompilerGeneratedAttribute]
private int <InstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinInstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinInstancePercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <InstanceCloseDelayDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <InstanceRestartWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceLifecycleDescription <InstanceLifecycleDescription>k__BackingField;
    public int InstanceCount { get; public set; }
    public int MinInstanceCount { get; public set; }
    public int MinInstancePercentage { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> InstanceCloseDelayDuration { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> InstanceRestartWaitDuration { get; public set; }
    [JsonCustomizationAttribute]
public InstanceLifecycleDescription InstanceLifecycleDescription { get; public set; }
    [JsonCustomizationAttribute]
private int InstanceCloseDelayDurationSeconds { get; private set; }
    [JsonCustomizationAttribute]
private int InstanceRestartWaitDurationSeconds { get; private set; }
    internal StatelessServiceDescription(StatelessServiceDescription other);
    [CompilerGeneratedAttribute]
public int get_InstanceCount();
    [CompilerGeneratedAttribute]
public void set_InstanceCount(int value);
    [CompilerGeneratedAttribute]
public int get_MinInstanceCount();
    [CompilerGeneratedAttribute]
public void set_MinInstanceCount(int value);
    [CompilerGeneratedAttribute]
public int get_MinInstancePercentage();
    [CompilerGeneratedAttribute]
public void set_MinInstancePercentage(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_InstanceCloseDelayDuration();
    [CompilerGeneratedAttribute]
public void set_InstanceCloseDelayDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_InstanceRestartWaitDuration();
    [CompilerGeneratedAttribute]
public void set_InstanceRestartWaitDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public InstanceLifecycleDescription get_InstanceLifecycleDescription();
    [CompilerGeneratedAttribute]
public void set_InstanceLifecycleDescription(InstanceLifecycleDescription value);
    private int get_InstanceCloseDelayDurationSeconds();
    private void set_InstanceCloseDelayDurationSeconds(int value);
    private int get_InstanceRestartWaitDurationSeconds();
    private void set_InstanceRestartWaitDurationSeconds(int value);
    internal static StatelessServiceDescription CreateFromNative(IntPtr native);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_DESCRIPTION_KIND& kind);
    internal void ValidateDefaultMetricValue();
}
public class System.Fabric.Description.StatelessServiceLoadMetricDescription : ServiceLoadMetricDescription {
    [JsonCustomizationAttribute]
public int DefaultLoad { get; public set; }
    internal StatelessServiceLoadMetricDescription(string name, int defaultLoad, ServiceLoadMetricWeight loadMetricWeight);
    internal StatelessServiceLoadMetricDescription(StatelessServiceLoadMetricDescription other);
    public int get_DefaultLoad();
    public void set_DefaultLoad(int value);
    public virtual string ToString();
}
public class System.Fabric.Description.StatelessServiceTypeDescription : ServiceTypeDescription {
    [CompilerGeneratedAttribute]
private bool <UseImplicitHost>k__BackingField;
    public bool UseImplicitHost { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseImplicitHost();
    [CompilerGeneratedAttribute]
public void set_UseImplicitHost(bool value);
    internal static StatelessServiceTypeDescription CreateFromNative(IntPtr descriptionPtr);
}
public class System.Fabric.Description.StatelessServiceUpdateDescription : ServiceUpdateDescription {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <InstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinInstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinInstancePercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <InstanceCloseDelayDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <InstanceRestartWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceLifecycleDescription <InstanceLifecycleDescription>k__BackingField;
    public Nullable`1<int> InstanceCount { get; public set; }
    public Nullable`1<int> MinInstanceCount { get; public set; }
    public Nullable`1<int> MinInstancePercentage { get; public set; }
    public Nullable`1<TimeSpan> InstanceCloseDelayDuration { get; public set; }
    public Nullable`1<TimeSpan> InstanceRestartWaitDuration { get; public set; }
    public InstanceLifecycleDescription InstanceLifecycleDescription { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_InstanceCount();
    [CompilerGeneratedAttribute]
public void set_InstanceCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinInstanceCount();
    [CompilerGeneratedAttribute]
public void set_MinInstanceCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinInstancePercentage();
    [CompilerGeneratedAttribute]
public void set_MinInstancePercentage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_InstanceCloseDelayDuration();
    [CompilerGeneratedAttribute]
public void set_InstanceCloseDelayDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_InstanceRestartWaitDuration();
    [CompilerGeneratedAttribute]
public void set_InstanceRestartWaitDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public InstanceLifecycleDescription get_InstanceLifecycleDescription();
    [CompilerGeneratedAttribute]
public void set_InstanceLifecycleDescription(InstanceLifecycleDescription value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_SERVICE_DESCRIPTION_KIND& kind);
}
internal class System.Fabric.Description.TestCommandListDescription : object {
    [CompilerGeneratedAttribute]
private TestCommandStateFilter <TestCommandStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private TestCommandTypeFilter <TestCommandTypeFilter>k__BackingField;
    public TestCommandStateFilter TestCommandStateFilter { get; internal set; }
    public TestCommandTypeFilter TestCommandTypeFilter { get; internal set; }
    public TestCommandListDescription(TestCommandStateFilter commandStateFilter, TestCommandTypeFilter commandTypeFilter);
    [CompilerGeneratedAttribute]
public TestCommandStateFilter get_TestCommandStateFilter();
    [CompilerGeneratedAttribute]
internal void set_TestCommandStateFilter(TestCommandStateFilter value);
    [CompilerGeneratedAttribute]
public TestCommandTypeFilter get_TestCommandTypeFilter();
    [CompilerGeneratedAttribute]
internal void set_TestCommandTypeFilter(TestCommandTypeFilter value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static TestCommandListDescription CreateFromNative(IntPtr nativePtr);
}
public class System.Fabric.Description.UniformInt64RangePartitionSchemeDescription : PartitionSchemeDescription {
    [CompilerGeneratedAttribute]
private int <PartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LowKey>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighKey>k__BackingField;
    [JsonCustomizationAttribute]
public int PartitionCount { get; public set; }
    public long LowKey { get; public set; }
    public long HighKey { get; public set; }
    public UniformInt64RangePartitionSchemeDescription(int partitionCount);
    public UniformInt64RangePartitionSchemeDescription(int partitionCount, long lowKey, long highKey);
    internal UniformInt64RangePartitionSchemeDescription(UniformInt64RangePartitionSchemeDescription other);
    [CompilerGeneratedAttribute]
public int get_PartitionCount();
    [CompilerGeneratedAttribute]
public void set_PartitionCount(int value);
    [CompilerGeneratedAttribute]
public long get_LowKey();
    [CompilerGeneratedAttribute]
public void set_LowKey(long value);
    [CompilerGeneratedAttribute]
public long get_HighKey();
    [CompilerGeneratedAttribute]
public void set_HighKey(long value);
    internal static UniformInt64RangePartitionSchemeDescription CreateFromNative(IntPtr nativePtr);
    internal virtual IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.Description.UnplacedReplicaInformationQueryDescription : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyQueryPrimaries>k__BackingField;
    public string ServiceName { get; public set; }
    public Guid PartitionId { get; public set; }
    public bool OnlyQueryPrimaries { get; public set; }
    public UnplacedReplicaInformationQueryDescription(string serviceName, Guid partitionId, bool onlyQueryPrimaries);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
public void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_OnlyQueryPrimaries();
    [CompilerGeneratedAttribute]
public void set_OnlyQueryPrimaries(bool value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.UnprovisionApplicationTypeDescription : object {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Async>k__BackingField;
    public string ApplicationTypeName { get; private set; }
    public string ApplicationTypeVersion { get; private set; }
    public bool Async { get; public set; }
    public UnprovisionApplicationTypeDescription(string applicationTypeName, string applicationTypeVersion);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersion();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_Async();
    [CompilerGeneratedAttribute]
public void set_Async(bool value);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Description.UpdatePartitionLoadQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private IList`1<PartitionMetricLoadDescription> <PartitionMetricLoadDescriptionList>k__BackingField;
    public IList`1<PartitionMetricLoadDescription> PartitionMetricLoadDescriptionList { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<PartitionMetricLoadDescription> get_PartitionMetricLoadDescriptionList();
    [CompilerGeneratedAttribute]
public void set_PartitionMetricLoadDescriptionList(IList`1<PartitionMetricLoadDescription> value);
    internal static void Validate(UpdatePartitionLoadQueryDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Description.UpdatePartitionMoveCostQueryDescription : PagedQueryDescriptionBase {
    [CompilerGeneratedAttribute]
private IList`1<PartitionMoveCostDescription> <PartitionMoveCostDescriptionList>k__BackingField;
    public IList`1<PartitionMoveCostDescription> PartitionMoveCostDescriptionList { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<PartitionMoveCostDescription> get_PartitionMoveCostDescriptionList();
    [CompilerGeneratedAttribute]
public void set_PartitionMoveCostDescriptionList(IList`1<PartitionMoveCostDescription> value);
    internal static void Validate(UpdatePartitionMoveCostQueryDescription description);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Description.UpgradeKind : Enum {
    public int value__;
    public static UpgradeKind Invalid;
    public static UpgradeKind Rolling;
    public static UpgradeKind Rolling_ForceRestart;
    public static UpgradeKind Rolling_NotificationOnly;
}
public abstract class System.Fabric.Description.UpgradePolicyDescription : object {
    [CompilerGeneratedAttribute]
private UpgradeKind <Kind>k__BackingField;
    [JsonCustomizationAttribute]
public UpgradeKind Kind { get; private set; }
    protected UpgradePolicyDescription(UpgradeKind kind);
    [CompilerGeneratedAttribute]
public UpgradeKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(UpgradeKind value);
    internal abstract virtual void Validate();
}
public abstract class System.Fabric.Description.UpgradeUpdateDescriptionBase : object {
    [CompilerGeneratedAttribute]
private Nullable`1<RollingUpgradeMode> <UpgradeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceRestart>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <UpgradeReplicaSetCheckTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UpgradeFailureAction> <FailureAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <HealthCheckWaitDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <HealthCheckStableDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <HealthCheckRetryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <UpgradeTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <UpgradeDomainTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <InstanceCloseDelayDuration>k__BackingField;
    [JsonCustomizationAttribute]
public Nullable`1<RollingUpgradeMode> UpgradeMode { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<bool> ForceRestart { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> UpgradeReplicaSetCheckTimeout { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<UpgradeFailureAction> FailureAction { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> HealthCheckWaitDuration { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> HealthCheckStableDuration { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> HealthCheckRetryTimeout { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> UpgradeTimeout { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> UpgradeDomainTimeout { get; public set; }
    [JsonCustomizationAttribute]
public Nullable`1<TimeSpan> InstanceCloseDelayDuration { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<RollingUpgradeMode> get_UpgradeMode();
    [CompilerGeneratedAttribute]
public void set_UpgradeMode(Nullable`1<RollingUpgradeMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForceRestart();
    [CompilerGeneratedAttribute]
public void set_ForceRestart(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_UpgradeReplicaSetCheckTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeReplicaSetCheckTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UpgradeFailureAction> get_FailureAction();
    [CompilerGeneratedAttribute]
public void set_FailureAction(Nullable`1<UpgradeFailureAction> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_HealthCheckWaitDuration();
    [CompilerGeneratedAttribute]
public void set_HealthCheckWaitDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_HealthCheckStableDuration();
    [CompilerGeneratedAttribute]
public void set_HealthCheckStableDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_HealthCheckRetryTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthCheckRetryTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_UpgradeTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_UpgradeDomainTimeout();
    [CompilerGeneratedAttribute]
public void set_UpgradeDomainTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_InstanceCloseDelayDuration();
    [CompilerGeneratedAttribute]
public void set_InstanceCloseDelayDuration(Nullable`1<TimeSpan> value);
}
public class System.Fabric.Description.ValidateFabricUpgradeResult : object {
    [CompilerGeneratedAttribute]
private ServiceHostUpgradeImpact <ServiceHostUpgradeImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationDetails>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceHostUpgradeImpact ServiceHostUpgradeImpact { get; public set; }
    [JsonCustomizationAttribute]
public string ValidationDetails { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceHostUpgradeImpact get_ServiceHostUpgradeImpact();
    [CompilerGeneratedAttribute]
public void set_ServiceHostUpgradeImpact(ServiceHostUpgradeImpact value);
    [CompilerGeneratedAttribute]
public string get_ValidationDetails();
    [CompilerGeneratedAttribute]
public void set_ValidationDetails(string value);
}
public enum System.Fabric.DisableServiceFlag : Enum {
    public int value__;
    public static DisableServiceFlag Invalid;
    public static DisableServiceFlag RemoveData;
}
public enum System.Fabric.EntryPointStatus : Enum {
    public int value__;
    public static EntryPointStatus Invalid;
    public static EntryPointStatus Pending;
    public static EntryPointStatus Starting;
    public static EntryPointStatus Started;
    public static EntryPointStatus Stopping;
    public static EntryPointStatus Stopped;
}
public class System.Fabric.Epoch : ValueType {
    private long dataLossNumber;
    private long configurationNumber;
    [JsonCustomizationAttribute]
public long DataLossNumber { get; public set; }
    [JsonCustomizationAttribute]
public long ConfigurationNumber { get; public set; }
    public Epoch(long dataLossNumber, long configurationNumber);
    public long get_DataLossNumber();
    public void set_DataLossNumber(long value);
    public long get_ConfigurationNumber();
    public void set_ConfigurationNumber(long value);
    public static bool op_Equality(Epoch left, Epoch right);
    public static bool op_Inequality(Epoch left, Epoch right);
    public static bool op_LessThan(Epoch left, Epoch right);
    public static bool op_LessThanOrEqual(Epoch left, Epoch right);
    public static bool op_GreaterThan(Epoch left, Epoch right);
    public static bool op_GreaterThanOrEqual(Epoch left, Epoch right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Epoch other);
    public sealed virtual int CompareTo(Epoch other);
    internal static Epoch FromNative(IntPtr epochIntPtr);
    internal static Epoch FromNative(FABRIC_EPOCH nativeEpoch);
    internal void ToNative(FABRIC_EPOCH& native);
}
public class System.Fabric.ExecutionPolicyDescription : object {
    [CompilerGeneratedAttribute]
private ExecutionPolicyExecutionType <ExecutionType>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionPolicyRestartPolicy <RestartPolicy>k__BackingField;
    public ExecutionPolicyExecutionType ExecutionType { get; }
    public ExecutionPolicyRestartPolicy RestartPolicy { get; }
    public ExecutionPolicyDescription(ExecutionPolicyExecutionType executionType, ExecutionPolicyRestartPolicy restartPolicy);
    [CompilerGeneratedAttribute]
public ExecutionPolicyExecutionType get_ExecutionType();
    [CompilerGeneratedAttribute]
public ExecutionPolicyRestartPolicy get_RestartPolicy();
    internal IntPtr ToNative(PinCollection pin);
}
public enum System.Fabric.ExecutionPolicyExecutionType : Enum {
    public int value__;
    public static ExecutionPolicyExecutionType RunAlways;
    public static ExecutionPolicyExecutionType RunToCompletion;
}
public enum System.Fabric.ExecutionPolicyRestartPolicy : Enum {
    public int value__;
    public static ExecutionPolicyRestartPolicy Always;
    public static ExecutionPolicyRestartPolicy OnFailure;
    public static ExecutionPolicyRestartPolicy Never;
}
public class System.Fabric.FabricBackupDirectoryNotEmptyException : FabricException {
    public FabricBackupDirectoryNotEmptyException(string message);
    public FabricBackupDirectoryNotEmptyException(string message, Exception inner);
    protected FabricBackupDirectoryNotEmptyException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricBackupInProgressException : FabricException {
    public FabricBackupInProgressException(string message);
    public FabricBackupInProgressException(string message, Exception inner);
    protected FabricBackupInProgressException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricBackupNotFoundException : FabricException {
    public FabricBackupNotFoundException(string message);
    public FabricBackupNotFoundException(string message, Exception inner);
    protected FabricBackupNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricCannotConnectException : FabricException {
    public FabricCannotConnectException(string message);
    public FabricCannotConnectException(string message, Exception inner, FabricErrorCode errorCode);
    private FabricCannotConnectException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricChaosAlreadyRunningException : FabricException {
    public FabricChaosAlreadyRunningException(string message);
    public FabricChaosAlreadyRunningException(string message, Exception inner);
    protected FabricChaosAlreadyRunningException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricChaosEngineException : FabricException {
    public FabricChaosEngineException(string message);
    public FabricChaosEngineException(string message, Exception inner);
    protected FabricChaosEngineException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricClient : object {
    internal static TimeSpan DefaultTimeout;
    private static ExtensionsEvents traceSource;
    private bool disposed;
    private IFabricClientSettings2 nativeClientSettings;
    private IFabricPropertyManagementClient2 nativePropertyClient;
    private IFabricServiceManagementClient8 nativeServiceClient;
    private IFabricServiceGroupManagementClient4 nativeServiceGroupClient;
    private IFabricApplicationManagementClient10 nativeApplicationClient;
    private IFabricClusterManagementClient16 nativeClusterClient;
    private IFabricQueryClient13 nativeQueryClient;
    private IFabricHealthClient4 nativeHealthClient;
    private IFabricInfrastructureServiceClient nativeInfraServiceClient;
    private IFabricTestManagementClient5 nativeTestManagementClient;
    private IFabricTestManagementClientInternal3 nativeTestManagementClientInternal;
    private IFabricFaultManagementClient3 nativeFaultManagementClient;
    private IFabricSecretStoreClient nativeSecretStoreClient;
    private IFabricManagedIdentityClient nativeManagedIdentityTokenServiceClient;
    private IFabricRepairManagementClient2 nativeRepairClient;
    private IFabricFaultManagementClientInternal nativeFaultManagementClientInternal;
    private IFabricNetworkManagementClient nativeNetworkManagementClient;
    private ApplicationManagementClient applicationManager;
    private ComposeDeploymentClient composeDeploymentManager;
    private ServiceManagementClient serviceManager;
    private PropertyManagementClient propertyManager;
    private ClusterManagementClient clusterManager;
    private QueryClient queryManager;
    private HealthClient healthManager;
    private ServiceGroupManagementClient serviceGroupManager;
    private InfrastructureServiceClient infraServiceClient;
    private RepairManagementClient repairManager;
    private ImageStoreClient imageStoreClient;
    private SecretStoreClient secretStoreClient;
    private ManagedIdentityTokenServiceClient managedIdentityTokenServiceClient;
    private TestManagementClient testManagementClient;
    private FaultManagementClient faultManagementClient;
    private NetworkManagementClient networkManagementClient;
    private SecurityCredentials credential;
    private String[] hostEndpoints;
    private object syncLock;
    private Dictionary`2<string, IImageStore> imageStoreMap;
    private static string ImageStoreConnectionFabricType;
    private static TimeSpan NativeImageStoreDefaultTimeout;
    public Uri FabricSystemApplication;
    [CompilerGeneratedAttribute]
private EventHandler ClientConnected;
    [CompilerGeneratedAttribute]
private EventHandler ClientDisconnected;
    [CompilerGeneratedAttribute]
private ClaimsRetrievalEventHandler ClaimsRetrieval;
    public PropertyManagementClient PropertyManager { get; }
    public ServiceManagementClient ServiceManager { get; }
    public ServiceGroupManagementClient ServiceGroupManager { get; }
    public ApplicationManagementClient ApplicationManager { get; }
    public ComposeDeploymentClient ComposeDeploymentManager { get; }
    public ClusterManagementClient ClusterManager { get; }
    public RepairManagementClient RepairManager { get; }
    public QueryClient QueryManager { get; }
    public HealthClient HealthManager { get; }
    internal ImageStoreClient ImageStore { get; }
    public SecretStoreClient SecretStore { get; }
    public ManagedIdentityTokenServiceClient ManagedIdentityTokenService { get; }
    public InfrastructureServiceClient InfrastructureManager { get; }
    public TestManagementClient TestManager { get; }
    public FaultManagementClient FaultManager { get; }
    public NetworkManagementClient NetworkManager { get; }
    public FabricClientSettings Settings { get; }
    internal IFabricPropertyManagementClient2 NativePropertyClient { get; }
    internal SecurityCredentials Credentials { get; }
    internal String[] HostEndpoints { get; }
    public FabricClient(FabricClientRole clientRole);
    public FabricClient(FabricClientSettings settings);
    public FabricClient(String[] hostEndpoints);
    public FabricClient(SecurityCredentials credential, String[] hostEndpoints);
    public FabricClient(FabricClientSettings settings, String[] hostEndpoints);
    public FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints);
    [ObsoleteAttribute("Deprecated", "True")]
public FabricClient(TimeSpan keepAliveInterval, String[] hostEndpoints);
    [ObsoleteAttribute("Deprecated", "True")]
public FabricClient(SecurityCredentials credential, TimeSpan keepAliveInterval, String[] hostEndpoints);
    private static FabricClient();
    public PropertyManagementClient get_PropertyManager();
    public ServiceManagementClient get_ServiceManager();
    public ServiceGroupManagementClient get_ServiceGroupManager();
    public ApplicationManagementClient get_ApplicationManager();
    public ComposeDeploymentClient get_ComposeDeploymentManager();
    public ClusterManagementClient get_ClusterManager();
    public RepairManagementClient get_RepairManager();
    public QueryClient get_QueryManager();
    public HealthClient get_HealthManager();
    internal ImageStoreClient get_ImageStore();
    public SecretStoreClient get_SecretStore();
    public ManagedIdentityTokenServiceClient get_ManagedIdentityTokenService();
    public InfrastructureServiceClient get_InfrastructureManager();
    public TestManagementClient get_TestManager();
    public FaultManagementClient get_FaultManager();
    public NetworkManagementClient get_NetworkManager();
    public FabricClientSettings get_Settings();
    internal IFabricPropertyManagementClient2 get_NativePropertyClient();
    internal SecurityCredentials get_Credentials();
    internal String[] get_HostEndpoints();
    public void UpdateSettings(FabricClientSettings settings);
    public void UpdateSecurityCredentials(SecurityCredentials credentials);
    internal void InitializeFabricClient(SecurityCredentials credentialArg, TimeSpan keepAliveInterval, String[] hostEndpointsArg);
    internal void InitializeFabricClient(SecurityCredentials credentialArg, FabricClientSettings newSettings, String[] hostEndpointsArg);
    internal void InitializeFabricClient(FabricClientRole clientRole);
    internal IImageStore GetImageStore(string imageStoreConnectionString);
    internal static TimeSpan GetImageStoreDefaultTimeout(string imageStoreConnectionString);
    private static string DecryptText(string text, StoreLocation storeLocation);
    private void CreateManagedClients();
    private void CreateNativeClient(IEnumerable`1<string> connectionStringsLocal);
    private void CreateNativeClient(FabricClientRole clientRole);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private bool IsDisposed();
    internal void ThrowIfDisposed();
    internal void OnNotification(ServiceNotification notification);
    [CompilerGeneratedAttribute]
public void add_ClientConnected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClientConnected(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ClientDisconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClientDisconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ClaimsRetrieval(ClaimsRetrievalEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClaimsRetrieval(ClaimsRetrievalEventHandler value);
    internal void OnClientConnected(GatewayInformation info);
    internal void OnClientDisconnected(GatewayInformation info);
    internal string OnClaimsRetrieval(AzureActiveDirectoryMetadata metadata);
    internal FabricClientSettings GetFabricClientSettingsInternal();
    internal void UpdateFabricClientSettingsInternal(FabricClientSettings settings);
    internal void SetSecurityCredentialsInternal(SecurityCredentials credentials);
    internal void SetKeepAliveInternal(TimeSpan keepAliveInterval);
    internal static object NormalizePartitionKey(object partitionKey);
    internal static FABRIC_CLIENT_ROLE ToNativeFabricClientRole(FabricClientRole clientRole);
    [CompilerGeneratedAttribute]
private FabricClientSettings <get_Settings>b__78_0();
    [CompilerGeneratedAttribute]
private void <UpdateSecurityCredentials>b__96_0();
}
public enum System.Fabric.FabricClientRole : Enum {
    public int value__;
    public static FabricClientRole Unknown;
    public static FabricClientRole User;
    public static FabricClientRole Admin;
}
public class System.Fabric.FabricClientSettings : object {
    [CompilerGeneratedAttribute]
private string <ClientFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PartitionLocationCacheLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PartitionLocationCacheBucketCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ServiceChangePollInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectionInitializationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectionIdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthOperationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthReportSendInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthReportRetrySendInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <NotificationGatewayConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <NotificationCacheUpdateTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AuthTokenBufferSize>k__BackingField;
    public string ClientFriendlyName { get; public set; }
    public long PartitionLocationCacheLimit { get; public set; }
    public long PartitionLocationCacheBucketCount { get; public set; }
    public TimeSpan ServiceChangePollInterval { get; public set; }
    public TimeSpan ConnectionInitializationTimeout { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public TimeSpan ConnectionIdleTimeout { get; public set; }
    public TimeSpan HealthOperationTimeout { get; public set; }
    public TimeSpan HealthReportSendInterval { get; public set; }
    public TimeSpan HealthReportRetrySendInterval { get; public set; }
    public TimeSpan NotificationGatewayConnectionTimeout { get; public set; }
    public TimeSpan NotificationCacheUpdateTimeout { get; public set; }
    public long AuthTokenBufferSize { get; public set; }
    internal FabricClientSettings(bool skipLoadFromDefaultConfig);
    [CompilerGeneratedAttribute]
public string get_ClientFriendlyName();
    [CompilerGeneratedAttribute]
public void set_ClientFriendlyName(string value);
    [CompilerGeneratedAttribute]
public long get_PartitionLocationCacheLimit();
    [CompilerGeneratedAttribute]
public void set_PartitionLocationCacheLimit(long value);
    [CompilerGeneratedAttribute]
public long get_PartitionLocationCacheBucketCount();
    [CompilerGeneratedAttribute]
public void set_PartitionLocationCacheBucketCount(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ServiceChangePollInterval();
    [CompilerGeneratedAttribute]
public void set_ServiceChangePollInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectionInitializationTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionInitializationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectionIdleTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionIdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthOperationTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthOperationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthReportSendInterval();
    [CompilerGeneratedAttribute]
public void set_HealthReportSendInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthReportRetrySendInterval();
    [CompilerGeneratedAttribute]
public void set_HealthReportRetrySendInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_NotificationGatewayConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_NotificationGatewayConnectionTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_NotificationCacheUpdateTimeout();
    [CompilerGeneratedAttribute]
public void set_NotificationCacheUpdateTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_AuthTokenBufferSize();
    [CompilerGeneratedAttribute]
public void set_AuthTokenBufferSize(long value);
    internal void Validate();
    internal IntPtr ToNative(PinCollection pin);
    internal static FabricClientSettings FromNative(IFabricClientSettingsResult nativeSettings);
    private void LoadFromConfigHelper();
    private void FromNative(IntPtr nativeSettingsPtr);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
public class System.Fabric.FabricConnectionDeniedException : FabricException {
    public FabricConnectionDeniedException(FabricErrorCode errorCode);
    public FabricConnectionDeniedException(string message);
    public FabricConnectionDeniedException(string message, FabricErrorCode errorCode);
    public FabricConnectionDeniedException(string message, Exception inner);
    public FabricConnectionDeniedException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricConnectionDeniedException(SerializationInfo info, StreamingContext context);
    protected FabricConnectionDeniedException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public static class System.Fabric.FabricConstants : object {
    public static string FabricRegistryKeyPath;
    public static string FabricFileRegistryPathRegKeyName;
}
internal class System.Fabric.FabricContainerActivatorServiceAgent : object {
    internal static TimeSpan DefaultTimeout;
    private IFabricContainerActivatorServiceAgent2 nativeManager;
    private static FabricContainerActivatorServiceAgent();
    private void CreateNativeAgent();
    public void RegisterContainerActivatorService(IContainerActivatorService service);
    public void ProcessContainerEvents(ContainerEventNotification notification);
    private void RegisterContainerActivatorServiceHelper(IContainerActivatorService service);
    private void ProcessContainerEventsHelper(ContainerEventNotification notification);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
internal class System.Fabric.FabricContainerApiExecutionResult : object {
    private IntPtr nativeResult;
    private PinCollection pinCollection;
    private bool disposed;
    internal FabricContainerApiExecutionResult(ContainerApiExecutionResponse response);
    private sealed virtual override IntPtr System.Fabric.Interop.NativeContainerActivatorService.IFabricContainerApiExecutionResult.get_Result();
    public sealed virtual void Dispose();
}
public class System.Fabric.FabricDeleteBackupFileFailedException : FabricException {
    public FabricDeleteBackupFileFailedException(string message);
    public FabricDeleteBackupFileFailedException(string message, Exception inner);
    protected FabricDeleteBackupFileFailedException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricElementAlreadyExistsException : FabricException {
    public FabricElementAlreadyExistsException(FabricErrorCode errorCode);
    public FabricElementAlreadyExistsException(string message);
    public FabricElementAlreadyExistsException(string message, FabricErrorCode errorCode);
    public FabricElementAlreadyExistsException(string message, Exception inner);
    public FabricElementAlreadyExistsException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricElementAlreadyExistsException(SerializationInfo info, StreamingContext context);
    protected FabricElementAlreadyExistsException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricElementNotFoundException : FabricException {
    public FabricElementNotFoundException(FabricErrorCode errorCode);
    public FabricElementNotFoundException(string message);
    public FabricElementNotFoundException(string message, FabricErrorCode errorCode);
    public FabricElementNotFoundException(string message, Exception inner);
    public FabricElementNotFoundException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricElementNotFoundException(SerializationInfo info, StreamingContext context);
    protected FabricElementNotFoundException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricEndpointNotFoundException : FabricException {
    public FabricEndpointNotFoundException(string message);
    public FabricEndpointNotFoundException(string message, Exception inner);
    private FabricEndpointNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum System.Fabric.FabricErrorCode : Enum {
    public long value__;
    public static FabricErrorCode Unknown;
    public static FabricErrorCode InvalidPartitionKey;
    public static FabricErrorCode UserRoleClientCertificateNotConfigured;
    public static FabricErrorCode NameAlreadyExists;
    public static FabricErrorCode ServiceAlreadyExists;
    public static FabricErrorCode ServiceGroupAlreadyExists;
    public static FabricErrorCode ApplicationTypeProvisionInProgress;
    public static FabricErrorCode ApplicationTypeAlreadyExists;
    public static FabricErrorCode ApplicationAlreadyExists;
    public static FabricErrorCode NameNotFound;
    public static FabricErrorCode PropertyNotFound;
    public static FabricErrorCode PropertyValueEmpty;
    public static FabricErrorCode ServiceNotFound;
    public static FabricErrorCode AuxiliaryFeatureDisabled;
    public static FabricErrorCode ServiceGroupNotFound;
    public static FabricErrorCode ApplicationTypeNotFound;
    public static FabricErrorCode ApplicationTypeInUse;
    public static FabricErrorCode ApplicationNotFound;
    public static FabricErrorCode ServiceTypeNotFound;
    public static FabricErrorCode ServiceManifestNotFound;
    public static FabricErrorCode NameNotEmpty;
    public static FabricErrorCode NodeNotFound;
    public static FabricErrorCode NodeTypeNotFound;
    public static FabricErrorCode NodeIsUp;
    public static FabricErrorCode NotPrimary;
    public static FabricErrorCode NoWriteQuorum;
    public static FabricErrorCode ReconfigurationPending;
    public static FabricErrorCode ReplicationQueueFull;
    public static FabricErrorCode ReplicationOperationTooLarge;
    public static FabricErrorCode InvalidAtomicGroup;
    public static FabricErrorCode ServiceOffline;
    public static FabricErrorCode PartitionNotFound;
    public static FabricErrorCode ServiceMetadataMismatch;
    public static FabricErrorCode ServiceAffinityChainNotSupported;
    public static FabricErrorCode WriteConflict;
    public static FabricErrorCode ApplicationUpgradeValidationError;
    public static FabricErrorCode ServiceTypeMismatch;
    public static FabricErrorCode ServiceTemplateNotFound;
    public static FabricErrorCode ServiceTypeAlreadyRegistered;
    public static FabricErrorCode ServiceTypeNotRegistered;
    public static FabricErrorCode ApplicationUpgradeInProgress;
    public static FabricErrorCode ApplicationUpdateInProgress;
    public static FabricErrorCode UpgradeDomainAlreadyCompleted;
    public static FabricErrorCode FabricVersionNotFound;
    public static FabricErrorCode FabricVersionInUse;
    public static FabricErrorCode FabricVersionAlreadyExists;
    public static FabricErrorCode FabricAlreadyInTargetVersion;
    public static FabricErrorCode FabricNotUpgrading;
    public static FabricErrorCode FabricUpgradeInProgress;
    public static FabricErrorCode FabricUpgradeValidationError;
    public static FabricErrorCode FabricHealthMaxReportsReached;
    public static FabricErrorCode FabricHealthStaleReport;
    public static FabricErrorCode FabricHealthEntityNotFound;
    public static FabricErrorCode ServiceTooBusy;
    public static FabricErrorCode CommunicationError;
    public static FabricErrorCode GatewayNotReachable;
    public static FabricErrorCode ObjectClosed;
    public static FabricErrorCode PropertyCheckFailed;
    public static FabricErrorCode EnumerationCompleted;
    public static FabricErrorCode ConfigurationSectionNotFound;
    public static FabricErrorCode ConfigurationParameterNotFound;
    public static FabricErrorCode InvalidConfiguration;
    public static FabricErrorCode ImageBuilderValidationError;
    public static FabricErrorCode ImageBuilderReservedDirectoryError;
    public static FabricErrorCode ReplicaDoesNotExist;
    public static FabricErrorCode ProcessDeactivated;
    public static FabricErrorCode ProcessAborted;
    public static FabricErrorCode InvalidAddress;
    public static FabricErrorCode InvalidNameUri;
    public static FabricErrorCode ValueTooLarge;
    public static FabricErrorCode DirectoryNotFound;
    public static FabricErrorCode PathTooLong;
    public static FabricErrorCode FileNotFound;
    public static FabricErrorCode NotReady;
    public static FabricErrorCode OperationTimedOut;
    public static FabricErrorCode OperationNotComplete;
    public static FabricErrorCode CodePackageNotFound;
    public static FabricErrorCode ConfigurationPackageNotFound;
    public static FabricErrorCode DataPackageNotFound;
    public static FabricErrorCode EndpointResourceNotFound;
    public static FabricErrorCode InvalidCredentialType;
    public static FabricErrorCode InvalidX509FindType;
    public static FabricErrorCode InvalidX509StoreLocation;
    public static FabricErrorCode InvalidX509StoreName;
    public static FabricErrorCode InvalidX509Thumbprint;
    public static FabricErrorCode InvalidProtectionLevel;
    public static FabricErrorCode InvalidX509Store;
    public static FabricErrorCode InvalidSubjectName;
    public static FabricErrorCode InvalidAllowedCommonNameList;
    public static FabricErrorCode InvalidCredentials;
    public static FabricErrorCode DecryptionFailed;
    public static FabricErrorCode EncryptionFailed;
    public static FabricErrorCode CorruptedImageStoreObjectFound;
    public static FabricErrorCode ImageBuilderUnexpectedError;
    public static FabricErrorCode ImageBuilderTimeoutError;
    public static FabricErrorCode ImageBuilderAccessDeniedError;
    public static FabricErrorCode ImageBuilderInvalidMsiFile;
    public static FabricErrorCode ImageStoreIOException;
    public static FabricErrorCode ImageStoreAcquireFileLockFailed;
    public static FabricErrorCode InvalidServiceType;
    public static FabricErrorCode ApplicationNotUpgrading;
    public static FabricErrorCode ApplicationAlreadyInTargetVersion;
    public static FabricErrorCode KeyTooLarge;
    public static FabricErrorCode KeyNotFound;
    public static FabricErrorCode SequenceNumberCheckFailed;
    public static FabricErrorCode TransactionNotActive;
    public static FabricErrorCode TransactionTooLarge;
    public static FabricErrorCode MultithreadedTransactionsNotAllowed;
    public static FabricErrorCode TransactionAborted;
    public static FabricErrorCode ReliableSessionTransportStartupFailure;
    public static FabricErrorCode ReliableSessionAlreadyExists;
    public static FabricErrorCode ReliableSessionCannotConnect;
    public static FabricErrorCode ReliableSessionManagerExists;
    public static FabricErrorCode ReliableSessionRejected;
    public static FabricErrorCode ReliableSessionNotFound;
    public static FabricErrorCode ReliableSessionQueueEmpty;
    public static FabricErrorCode ReliableSessionQuotaExceeded;
    public static FabricErrorCode ReliableSessionServiceFaulted;
    public static FabricErrorCode ReliableSessionManagerAlreadyListening;
    public static FabricErrorCode ReliableSessionManagerNotFound;
    public static FabricErrorCode ReliableSessionManagerNotListening;
    public static FabricErrorCode ReliableSessionInvalidTargetPartition;
    public static FabricErrorCode RepairTaskAlreadyExists;
    public static FabricErrorCode RepairTaskNotFound;
    public static FabricErrorCode InstanceIdMismatch;
    public static FabricErrorCode NodeHasNotStoppedYet;
    public static FabricErrorCode InsufficientClusterCapacity;
    public static FabricErrorCode ConstraintKeyUndefined;
    public static FabricErrorCode InvalidPackageSharingPolicy;
    public static FabricErrorCode PreDeploymentNotAllowed;
    public static FabricErrorCode InvalidBackupSetting;
    public static FabricErrorCode InvalidReplicaOperation;
    public static FabricErrorCode InvalidReplicaStateForReplicaOperation;
    public static FabricErrorCode MissingFullBackup;
    public static FabricErrorCode BackupInProgress;
    public static FabricErrorCode PLBNotReady;
    public static FabricErrorCode DuplicateServiceNotificationFilterName;
    public static FabricErrorCode InvalidPartitionOperation;
    public static FabricErrorCode AlreadyPrimaryReplica;
    public static FabricErrorCode AlreadySecondaryReplica;
    public static FabricErrorCode AlreadyInstance;
    public static FabricErrorCode AlreadyAuxiliaryReplica;
    public static FabricErrorCode AsyncOperationNotComplete;
    public static FabricErrorCode BackupDirectoryNotEmpty;
    public static FabricErrorCode ForceNotSupportedForReplicaControlOperation;
    public static FabricErrorCode ConnectionDenied;
    public static FabricErrorCode ServerAuthenticationFailed;
    public static FabricErrorCode FabricCannotConnect;
    public static FabricErrorCode FabricConnectionClosedByRemoteEnd;
    public static FabricErrorCode FabricMessageTooLarge;
    public static FabricErrorCode ConstraintNotSatisfied;
    public static FabricErrorCode FabricEndpointNotFound;
    public static FabricErrorCode DuplicateWaitObject;
    public static FabricErrorCode EntryPointNotFound;
    public static FabricErrorCode DeleteBackupFileFailed;
    public static FabricErrorCode OperationCanceled;
    public static FabricErrorCode InvalidTestCommandState;
    public static FabricErrorCode TestCommandOperationIdAlreadyExists;
    public static FabricErrorCode ChaosAlreadyRunning;
    public static FabricErrorCode CMOperationFailed;
    public static FabricErrorCode FabricDataRootNotFound;
    public static FabricErrorCode InvalidRestoreData;
    public static FabricErrorCode DuplicateBackups;
    public static FabricErrorCode InvalidBackupChain;
    public static FabricErrorCode StopInProgress;
    public static FabricErrorCode AlreadyStopped;
    public static FabricErrorCode NodeIsDown;
    public static FabricErrorCode NodeTransitionInProgress;
    public static FabricErrorCode InvalidInstanceId;
    public static FabricErrorCode InvalidDuration;
    public static FabricErrorCode InvalidBackup;
    public static FabricErrorCode RestoreSafeCheckFailed;
    public static FabricErrorCode ConfigUpgradeFailed;
    public static FabricErrorCode UploadSessionRangeNotSatisfiable;
    public static FabricErrorCode UploadSessionIdConflict;
    public static FabricErrorCode InvalidPartitionSelector;
    public static FabricErrorCode InvalidReplicaSelector;
    public static FabricErrorCode DnsServiceNotFound;
    public static FabricErrorCode InvalidDnsName;
    public static FabricErrorCode DnsNameInUse;
    public static FabricErrorCode ComposeDeploymentAlreadyExists;
    public static FabricErrorCode ComposeDeploymentNotFound;
    public static FabricErrorCode InvalidForStatefulServices;
    public static FabricErrorCode InvalidForStatelessServices;
    public static FabricErrorCode OnlyValidForStatefulPersistentServices;
    public static FabricErrorCode InvalidUploadSessionId;
    public static FabricErrorCode BackupNotEnabled;
    public static FabricErrorCode BackupEnabled;
    public static FabricErrorCode BackupPolicyDoesNotExist;
    public static FabricErrorCode BackupPolicyAlreayExists;
    public static FabricErrorCode RestoreAlreadyInProgress;
    public static FabricErrorCode RestoreSourceTargetPartitionMismatch;
    public static FabricErrorCode FaultAnalysisServiceNotEnabled;
    public static FabricErrorCode ContainerNotFound;
    public static FabricErrorCode ObjectDisposed;
    public static FabricErrorCode NotReadable;
    public static FabricErrorCode InvalidOperation;
    public static FabricErrorCode SingleInstanceApplicationAlreadyExists;
    public static FabricErrorCode SingleInstanceApplicationNotFound;
    public static FabricErrorCode VolumeAlreadyExists;
    public static FabricErrorCode VolumeNotFound;
    public static FabricErrorCode InvalidServiceScalingPolicy;
    public static FabricErrorCode DatabaseMigrationInProgress;
    public static FabricErrorCode CentralSecretServiceGenericError;
    public static FabricErrorCode ComposeDeploymentNotUpgrading;
    public static FabricErrorCode SecretInvalid;
    public static FabricErrorCode SecretVersionAlreadyExists;
    public static FabricErrorCode SingleInstanceApplicationUpgradeInProgress;
    public static FabricErrorCode OperationNotSupported;
    public static FabricErrorCode NetworkNotFound;
    public static FabricErrorCode NetworkInUse;
    public static FabricErrorCode EndpointNotReferenced;
    public static FabricErrorCode CopyAborted;
    public static FabricErrorCode IncompatibleRunToCompletion;
    public static FabricErrorCode VersionStoreOutOfMemory;
    public static FabricErrorCode BackupNotFound;
    public static FabricErrorCode SkipRestoreOperation;
    public static FabricErrorCode StoreOutOfSessions;
    public static FabricErrorCode RestoreWaitingForUserIntervention;
    public static FabricErrorCode DatabaseFilesCorrupted;
    public static FabricErrorCode InsufficientMaxLoadCapacity;
    public static FabricErrorCode StoreDiskError;
    public static FabricErrorCode ServiceAlreadyInRequestedState;
    public static FabricErrorCode DisableEnableServiceFeatureDisabled;
    public static FabricErrorCode MaxAllowedDisabledServicesReached;
    public static FabricErrorCode ServiceDisabled;
    public static FabricErrorCode ServiceDisableInProgress;
    public static FabricErrorCode StoreOutOfLongValueIDs;
    public static FabricErrorCode StoreOutOfInstances;
}
public class System.Fabric.FabricException : Exception {
    [CompilerGeneratedAttribute]
private FabricErrorCode <ErrorCode>k__BackingField;
    public FabricErrorCode ErrorCode { get; private set; }
    public FabricException(FabricErrorCode errorCode);
    public FabricException(string message);
    public FabricException(string message, FabricErrorCode errorCode);
    public FabricException(string message, Exception inner);
    public FabricException(string message, Exception inner, FabricErrorCode errorCode);
    public FabricException(string message, int hresult);
    public FabricException(string message, Exception inner, int hresult);
    protected FabricException(SerializationInfo info, StreamingContext context);
    protected FabricException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
    [CompilerGeneratedAttribute]
public FabricErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(FabricErrorCode value);
    private void SetErrorCode(int hresult);
    private void SetErrorCode(FabricErrorCode errorCode);
}
internal class System.Fabric.FabricFaultAnalysisServiceAgent : object {
    internal static TimeSpan DefaultTimeout;
    private static Lazy`1<FabricFaultAnalysisServiceAgent> agent;
    private IFabricFaultAnalysisServiceAgent nativeAgent;
    public static FabricFaultAnalysisServiceAgent Instance { get; }
    private static FabricFaultAnalysisServiceAgent();
    public static FabricFaultAnalysisServiceAgent get_Instance();
    private void CreateNativeAgent();
    public string RegisterFaultAnalysisService(Guid partitionId, long replicaId, IFaultAnalysisService service);
    public void UnregisterFaultAnalysisService(Guid partitionId, long replicaId);
    private string RegisterFaultAnalysisServiceHelper(Guid partitionId, long replicaId, IFaultAnalysisService service);
    private void UnregisterFaultAnalysisServiceHelper(Guid partitionId, long replicaId);
}
internal class System.Fabric.FabricGatewayResourceManagerAgent : object {
    internal static TimeSpan DefaultTimeout;
    private static Lazy`1<FabricGatewayResourceManagerAgent> agent;
    private IFabricGatewayResourceManagerAgent nativeAgent;
    public static FabricGatewayResourceManagerAgent Instance { get; }
    private static FabricGatewayResourceManagerAgent();
    public static FabricGatewayResourceManagerAgent get_Instance();
    private void CreateNativeAgent();
    public string RegisterGatewayResourceManager(Guid partitionId, long replicaId, IGatewayResourceManager service);
    public void UnregisterGatewayResourceManager(Guid partitionId, long replicaId);
    private string RegisterGatewayResourceManagerHelper(Guid partitionId, long replicaId, IGatewayResourceManager service);
    private void UnregisterGatewayResourceManagerHelper(Guid partitionId, long replicaId);
}
internal class System.Fabric.FabricImageBuilderAgent : object {
    internal static TimeSpan DefaultTimeout;
    private static Lazy`1<FabricImageBuilderAgent> agent;
    private IFabricImageBuilderAgent nativeAgent;
    public static FabricImageBuilderAgent Instance { get; }
    private static FabricImageBuilderAgent();
    public static FabricImageBuilderAgent get_Instance();
    private void CreateNativeAgent();
    public void RegisterImageBuilder(IImageBuilder service);
    public void UnregisterImageBuilder();
    public Task InitialConnectionAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private void RegisterImageBuilderHelper(IImageBuilder service);
    private void UnregisterImageBuilderHelper();
    private IFabricAsyncOperationContext InitialConnectionOperationBeginWrapper(TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private void InitialConnectionOperationEndWrapper(IFabricAsyncOperationContext context);
    [CompilerGeneratedAttribute]
private void <UnregisterImageBuilder>b__8_0();
}
internal class System.Fabric.FabricImageBuilderReservedDirectoryException : FabricException {
    private string fileName;
    public string Message { get; }
    public FabricImageBuilderReservedDirectoryException(string message, FabricErrorCode errorCode);
    public FabricImageBuilderReservedDirectoryException(string message, string fileName, FabricErrorCode errorCode);
    public FabricImageBuilderReservedDirectoryException(string message, Exception inner, FabricErrorCode errorCode);
    public FabricImageBuilderReservedDirectoryException(string message, string fileName, Exception inner, FabricErrorCode errorCode);
    public virtual string get_Message();
}
public class System.Fabric.FabricImageStoreException : FabricException {
    public FabricImageStoreException(FabricErrorCode errorCode);
    public FabricImageStoreException(string message);
    public FabricImageStoreException(string message, FabricErrorCode errorCode);
    public FabricImageStoreException(string message, Exception inner);
    public FabricImageStoreException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricImageStoreException(SerializationInfo info, StreamingContext context);
    protected FabricImageStoreException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
internal class System.Fabric.FabricInfrastructureServiceAgent : object {
    internal static TimeSpan DefaultTimeout;
    private IFabricInfrastructureServiceAgent nativeAgent;
    private static FabricInfrastructureServiceAgent();
    private void CreateNativeAgent();
    public void RegisterInfrastructureServiceFactory(IStatefulServiceFactory factory);
    public string RegisterInfrastructureService(Guid partitionId, long replicaId, IInfrastructureService service);
    public void UnregisterInfrastructureService(Guid partitionId, long replicaId);
    public Task StartInfrastructureTask(InfrastructureTaskDescription description);
    public Task StartInfrastructureTaskAsync(InfrastructureTaskDescription description, TimeSpan timeout, CancellationToken cancellationToken);
    public Task FinishInfrastructureTask(string taskId, long instanceId);
    public Task FinishInfrastructureTaskAsync(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
    public Task`1<InfrastructureTaskQueryResult> QueryInfrastructureTask();
    public Task`1<InfrastructureTaskQueryResult> QueryInfrastructureTaskAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private string RegisterInfrastructureServiceHelper(Guid partitionId, long replicaId, IInfrastructureService service);
    private void UnregisterInfrastructureServiceHelper(Guid partitionId, long replicaId);
    private Task StartInfrastructureTaskAsyncHelper(InfrastructureTaskDescription description, TimeSpan timeout, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext StartInfrastructureTaskBeginWrapper(InfrastructureTaskDescription description, TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private void StartInfrastructureTaskEndWrapper(IFabricAsyncOperationContext context);
    private Task FinishInfrastructureTaskAsyncHelper(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext FinishInfrastructureTaskBeginWrapper(string taskId, long instanceId, TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private void FinishInfrastructureTaskEndWrapper(IFabricAsyncOperationContext context);
    private Task`1<InfrastructureTaskQueryResult> QueryInfrastructureTaskAsyncHelper(TimeSpan timeout, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext QueryInfrastructureTaskBeginWrapper(TimeSpan timeout, IFabricAsyncOperationCallback callback);
    private InfrastructureTaskQueryResult QueryInfrastructureTaskEndWrapper(IFabricAsyncOperationContext context);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class System.Fabric.FabricInsufficientMaxLoadCapacityException : FabricException {
    public FabricInsufficientMaxLoadCapacityException(string message);
    public FabricInsufficientMaxLoadCapacityException(string message, Exception inner);
    protected FabricInsufficientMaxLoadCapacityException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricInvalidAddressException : FabricException {
    public FabricInvalidAddressException(FabricErrorCode errorCode);
    public FabricInvalidAddressException(string message);
    public FabricInvalidAddressException(string message, FabricErrorCode errorCode);
    public FabricInvalidAddressException(string message, Exception inner);
    public FabricInvalidAddressException(string message, Exception inner, FabricErrorCode errorCode);
    private FabricInvalidAddressException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricInvalidAtomicGroupException : FabricException {
    public FabricInvalidAtomicGroupException(FabricErrorCode errorCode);
    public FabricInvalidAtomicGroupException(string message);
    public FabricInvalidAtomicGroupException(string message, FabricErrorCode errorCode);
    public FabricInvalidAtomicGroupException(string message, Exception inner);
    public FabricInvalidAtomicGroupException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricInvalidAtomicGroupException(SerializationInfo info, StreamingContext context);
    protected FabricInvalidAtomicGroupException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricInvalidForStatefulServicesException : FabricException {
    public FabricInvalidForStatefulServicesException(string message);
    public FabricInvalidForStatefulServicesException(string message, FabricErrorCode errorCode);
    public FabricInvalidForStatefulServicesException(string message, Exception inner);
    public FabricInvalidForStatefulServicesException(string message, Exception inner, FabricErrorCode errorCode);
}
public class System.Fabric.FabricInvalidForStatelessServicesException : FabricException {
    public FabricInvalidForStatelessServicesException(string message);
    public FabricInvalidForStatelessServicesException(string message, FabricErrorCode errorCode);
    public FabricInvalidForStatelessServicesException(string message, Exception inner);
    public FabricInvalidForStatelessServicesException(string message, Exception inner, FabricErrorCode errorCode);
}
public class System.Fabric.FabricInvalidPartitionKeyException : FabricException {
    public FabricInvalidPartitionKeyException(FabricErrorCode errorCode);
    public FabricInvalidPartitionKeyException(string message);
    public FabricInvalidPartitionKeyException(string message, FabricErrorCode errorCode);
    public FabricInvalidPartitionKeyException(string message, Exception inner);
    public FabricInvalidPartitionKeyException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricInvalidPartitionKeyException(SerializationInfo info, StreamingContext context);
    protected FabricInvalidPartitionKeyException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricInvalidPartitionSelectorException : FabricException {
    public FabricInvalidPartitionSelectorException(string message);
    public FabricInvalidPartitionSelectorException(string message, FabricErrorCode errorCode);
    public FabricInvalidPartitionSelectorException(string message, Exception inner);
}
public class System.Fabric.FabricInvalidReplicaSelectorException : FabricException {
    public FabricInvalidReplicaSelectorException(string message);
    public FabricInvalidReplicaSelectorException(string message, FabricErrorCode errorCode);
    public FabricInvalidReplicaSelectorException(string message, Exception inner);
}
public class System.Fabric.FabricInvalidTestCommandStateException : FabricException {
    public FabricInvalidTestCommandStateException(string message);
    public FabricInvalidTestCommandStateException(string message, Exception inner);
    protected FabricInvalidTestCommandStateException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricMessageTooLargeException : FabricException {
    public FabricMessageTooLargeException(string message);
    public FabricMessageTooLargeException(string message, Exception inner);
    private FabricMessageTooLargeException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricMissingFullBackupException : FabricException {
    public FabricMissingFullBackupException(string message);
    public FabricMissingFullBackupException(string message, Exception inner);
    protected FabricMissingFullBackupException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricNotPrimaryException : FabricException {
    public FabricNotPrimaryException(FabricErrorCode errorCode);
    public FabricNotPrimaryException(string message);
    public FabricNotPrimaryException(string message, FabricErrorCode errorCode);
    public FabricNotPrimaryException(string message, Exception inner);
    public FabricNotPrimaryException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricNotPrimaryException(SerializationInfo info, StreamingContext context);
    protected FabricNotPrimaryException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricNotReadableException : FabricTransientException {
    public FabricNotReadableException(string message);
    public FabricNotReadableException(string message, Exception inner);
    protected FabricNotReadableException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricObjectClosedException : FabricException {
    public FabricObjectClosedException(FabricErrorCode errorCode);
    public FabricObjectClosedException(string message);
    public FabricObjectClosedException(string message, FabricErrorCode errorCode);
    public FabricObjectClosedException(string message, Exception inner);
    public FabricObjectClosedException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricObjectClosedException(SerializationInfo info, StreamingContext context);
    protected FabricObjectClosedException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricOnlyValidForStatefulPersistentServicesException : FabricException {
    public FabricOnlyValidForStatefulPersistentServicesException(string message);
    public FabricOnlyValidForStatefulPersistentServicesException(string message, FabricErrorCode errorCode);
    public FabricOnlyValidForStatefulPersistentServicesException(string message, Exception inner);
    public FabricOnlyValidForStatefulPersistentServicesException(string message, Exception inner, FabricErrorCode errorCode);
}
public class System.Fabric.FabricOrchestrationUpgradeProgress : object {
    [CompilerGeneratedAttribute]
private FabricUpgradeState <UpgradeState>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProgressStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    public FabricUpgradeState UpgradeState { get; internal set; }
    public UInt32 ProgressStatus { get; internal set; }
    public string ConfigVersion { get; internal set; }
    public string Details { get; internal set; }
    [CompilerGeneratedAttribute]
public FabricUpgradeState get_UpgradeState();
    [CompilerGeneratedAttribute]
internal void set_UpgradeState(FabricUpgradeState value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProgressStatus();
    [CompilerGeneratedAttribute]
internal void set_ProgressStatus(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ConfigVersion();
    [CompilerGeneratedAttribute]
internal void set_ConfigVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
internal void set_Details(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static FabricOrchestrationUpgradeProgress FromNative(IntPtr pointer);
}
internal enum System.Fabric.FabricPackageType : Enum {
    public int value__;
    public static FabricPackageType MSI;
    public static FabricPackageType XCopyPackage;
}
public class System.Fabric.FabricPeriodicBackupNotEnabledException : FabricException {
    public FabricPeriodicBackupNotEnabledException(string message);
    public FabricPeriodicBackupNotEnabledException(string message, Exception inner);
    protected FabricPeriodicBackupNotEnabledException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricReplicationOperationTooLargeException : FabricException {
    public FabricReplicationOperationTooLargeException(string message);
    public FabricReplicationOperationTooLargeException(string message, Exception inner);
    protected FabricReplicationOperationTooLargeException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricReplicator : object {
    public static long UnknownSequenceNumber;
    public static long InvalidAtomicGroupId;
    private IReplicator internalReplicator;
    private StateReplicator stateReplicator;
    public IStateReplicator StateReplicator { get; }
    public IStateReplicator2 StateReplicator2 { get; }
    internal IFabricReplicator NativeReplicator { get; }
    internal FabricReplicator(IFabricReplicator nativeReplicator, IFabricStateReplicator nativeStateReplicator, IOperationDataFactory operationDataFactory);
    internal FabricReplicator(IFabricReplicator nativeReplicator);
    public IStateReplicator get_StateReplicator();
    public IStateReplicator2 get_StateReplicator2();
    internal IFabricReplicator get_NativeReplicator();
    private sealed virtual override Task`1<string> System.Fabric.IReplicator.OpenAsync(CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.IReplicator.ChangeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.IReplicator.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IReplicator.Abort();
    private sealed virtual override long System.Fabric.IReplicator.GetCurrentProgress();
    private sealed virtual override long System.Fabric.IReplicator.GetCatchUpCapability();
    private sealed virtual override Task System.Fabric.IReplicator.UpdateEpochAsync(Epoch epoch, CancellationToken cancellationToken);
    private sealed virtual override Task`1<bool> System.Fabric.IPrimaryReplicator.OnDataLossAsync(CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration);
    private sealed virtual override Task System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration);
    private sealed virtual override Task System.Fabric.IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IPrimaryReplicator.RemoveReplica(long replicaId);
    private static StateReplicator CreateStateReplicator(IFabricStateReplicator nativeStateReplicator, IOperationDataFactory nativeOperationDataFactory);
}
public class System.Fabric.FabricRestoreSafeCheckFailedException : FabricException {
    public FabricRestoreSafeCheckFailedException(string message);
    public FabricRestoreSafeCheckFailedException(string message, Exception inner);
    protected FabricRestoreSafeCheckFailedException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricRuntime : object {
    private static TimeSpan DefaultFabricRuntimeCreationTimeout;
    private CodePackageActivationContext codePackageActivationContext;
    private Action fabricExitCallback;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    private IFabricRuntime nativeRuntime;
    [CompilerGeneratedAttribute]
private static NativeFabricRuntimeFactory <FabricRuntimeFactory>k__BackingField;
    internal static NativeFabricRuntimeFactory FabricRuntimeFactory { get; internal set; }
    internal CodePackageActivationContext CodePackageActivationContext { get; }
    internal IFabricRuntime NativeRuntimeObject { get; internal set; }
    private static FabricRuntime();
    internal FabricRuntime(CodePackageActivationContext codePackageActivationContext, Action fabricExitCallback);
    internal FabricRuntime(IFabricRuntime fabricRuntime, CodePackageActivationContext codePackageActivationContext);
    [CompilerGeneratedAttribute]
internal static NativeFabricRuntimeFactory get_FabricRuntimeFactory();
    [CompilerGeneratedAttribute]
internal static void set_FabricRuntimeFactory(NativeFabricRuntimeFactory value);
    internal CodePackageActivationContext get_CodePackageActivationContext();
    internal IFabricRuntime get_NativeRuntimeObject();
    internal void set_NativeRuntimeObject(IFabricRuntime value);
    public static CodePackageActivationContext GetActivationContext();
    public static Task`1<CodePackageActivationContext> GetActivationContextAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public static CodePackageActivator GetCodePackageActivator();
    public static Task`1<CodePackageActivator> GetCodePackageActivatorAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public static NodeContext GetNodeContext();
    public static Task`1<NodeContext> GetNodeContextAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public static FabricRuntime Create();
    public static FabricRuntime Create(Action fabricExitCallback);
    public static Task`1<FabricRuntime> CreateAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public static Task`1<FabricRuntime> CreateAsync(Action fabricExitCallback, TimeSpan timeout, CancellationToken cancellationToken);
    public void RegisterServiceType(string serviceTypeName, Type serviceTypeImplementation);
    public void RegisterStatelessServiceFactory(string serviceTypeName, IStatelessServiceFactory factory);
    public void RegisterStatefulServiceFactory(string serviceTypeName, IStatefulServiceFactory factory);
    public void RegisterServiceGroupFactory(string serviceGroupTypeName, ServiceGroupFactory factory);
    public Task RegisterServiceTypeAsync(string serviceTypeName, Type serviceTypeImplementation, TimeSpan timeout, CancellationToken cancellationToken);
    public Task RegisterStatelessServiceFactoryAsync(string serviceTypeName, IStatelessServiceFactory factory, TimeSpan timeout, CancellationToken cancellationToken);
    public Task RegisterStatefulServiceFactoryAsync(string serviceTypeName, IStatefulServiceFactory factory, TimeSpan timeout, CancellationToken cancellationToken);
    public Task RegisterServiceGroupFactoryAsync(string serviceGroupTypeName, ServiceGroupFactory factory, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private static Task`1<FabricRuntime> CreateAsyncHelper(Action fabricExitCallback, TimeSpan timeout, CancellationToken cancellationToken);
    private static CodePackageActivationContext GetCodePackageActivationContextForRuntimeCreation();
    private static void ValidateParametersForRegisterServiceGroupFactory(string serviceGroupTypeName, ServiceGroupFactory serviceGroupFactory);
    private static void ValidateParametersForRegisterServiceFactory(string serviceTypeName, object serviceFactory);
    private static bool ValidateParametersForRegisterServiceType(string serviceTypeName, Type serviceTypeImplementation);
    private void Dispose(bool disposing);
    private void ThrowIfDisposed();
    private void RegisterServiceTypeHelper(bool isStateful, string serviceTypeName, Type serviceTypeImplementation);
    private void RegisterServiceFactoryHelper(bool isStateful, string serviceTypeName, object factory);
    private void InternalRegisterServiceFactory(bool isStateful, string serviceType, ServiceFactoryBroker serviceFactoryBroker);
    private void InternalRegisterServiceGroupFactory(string serviceGroupType, ServiceGroupFactory serviceGroupFactory);
    private Task RegisterServiceFactoryAsyncHelper(bool isStateful, string serviceType, object serviceFactory, UInt32 timeoutMs, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext RegisterServiceFactoryBeginWrapper(bool isStateful, string serviceType, object serviceFactory, UInt32 timeoutMs, IFabricAsyncOperationCallback callback);
    private void RegisterServiceFactoryEndWrapper(bool isStateful, IFabricAsyncOperationContext context);
    private Task RegisterServiceGroupFactoryAsyncHelper(string serviceGroupTypeName, ServiceGroupFactory factory, UInt32 timeoutMs, CancellationToken cancellationToken);
    private IFabricServiceGroupFactory CreateServiceGroupFactoryHelper(ServiceGroupFactory factory);
    private IFabricAsyncOperationContext RegisterServiceGroupFactoryBeginWrapper(string serviceGroupTypeName, IFabricServiceGroupFactory factory, UInt32 timeoutMs, IFabricAsyncOperationCallback callback);
    private void RegisterServiceGroupFactoryEndWrapper(IFabricAsyncOperationContext context);
    private void OnFabricExited();
}
public class System.Fabric.FabricServerAuthenticationFailedException : FabricException {
    public FabricServerAuthenticationFailedException(FabricErrorCode errorCode);
    public FabricServerAuthenticationFailedException(string message);
    public FabricServerAuthenticationFailedException(string message, FabricErrorCode errorCode);
    public FabricServerAuthenticationFailedException(string message, Exception inner);
    public FabricServerAuthenticationFailedException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricServerAuthenticationFailedException(SerializationInfo info, StreamingContext context);
    protected FabricServerAuthenticationFailedException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricServiceNotFoundException : FabricElementNotFoundException {
    public FabricServiceNotFoundException(string message);
    public FabricServiceNotFoundException(string message, Exception inner);
    private FabricServiceNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricSkipRestoreOperationException : FabricException {
    public FabricSkipRestoreOperationException(string message);
    public FabricSkipRestoreOperationException(string message, Exception inner);
    protected FabricSkipRestoreOperationException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.FabricTestCommandOperationIdAlreadyExistsException : FabricException {
    public FabricTestCommandOperationIdAlreadyExistsException(string message);
    public FabricTestCommandOperationIdAlreadyExistsException(string message, Exception inner);
    protected FabricTestCommandOperationIdAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
internal class System.Fabric.FabricTokenClaimResult : object {
    private ClaimDescriptionList claimsResult;
    internal FabricTokenClaimResult(ClaimDescriptionList claims);
    private sealed virtual override IntPtr System.Fabric.Interop.NativeTokenValidationService.IFabricTokenClaimResult.get_Result();
}
internal class System.Fabric.FabricTokenServiceMetadataResult : object {
    private TokenServiceMetadata serviceMetadata;
    internal FabricTokenServiceMetadataResult(TokenServiceMetadata serviceMetadata);
    private sealed virtual override IntPtr System.Fabric.Interop.NativeTokenValidationService.IFabricTokenServiceMetadataResult.get_Result();
}
internal class System.Fabric.FabricTokenValidationServiceAgent : object {
    internal static TimeSpan DefaultTimeout;
    private IFabricTokenValidationServiceAgent nativeAgent;
    private static FabricTokenValidationServiceAgent();
    private void CreateNativeAgent();
    public string RegisterTokenValidationService(Guid partitionId, long replicaId, ITokenValidationService service);
    public void UnregisterTokenValidationService(Guid partitionId, long replicaId);
    private string RegisterTokenValidationServiceHelper(Guid partitionId, long replicaId, ITokenValidationService service);
    private void UnregisterTokenValidationServiceHelper(Guid partitionId, long replicaId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class System.Fabric.FabricTransientException : FabricException {
    public FabricTransientException(FabricErrorCode errorCode);
    public FabricTransientException(string message);
    public FabricTransientException(string message, FabricErrorCode errorCode);
    public FabricTransientException(string message, Exception inner);
    public FabricTransientException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricTransientException(SerializationInfo info, StreamingContext context);
    protected FabricTransientException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
public class System.Fabric.FabricUpgradeOrchestrationServiceState : object {
    [CompilerGeneratedAttribute]
private string <CurrentCodeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCodeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PendingUpgradeType>k__BackingField;
    public string CurrentCodeVersion { get; internal set; }
    public string CurrentManifestVersion { get; internal set; }
    public string TargetCodeVersion { get; internal set; }
    public string TargetManifestVersion { get; internal set; }
    public string PendingUpgradeType { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_CurrentCodeVersion();
    [CompilerGeneratedAttribute]
internal void set_CurrentCodeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentManifestVersion();
    [CompilerGeneratedAttribute]
internal void set_CurrentManifestVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCodeVersion();
    [CompilerGeneratedAttribute]
internal void set_TargetCodeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetManifestVersion();
    [CompilerGeneratedAttribute]
internal void set_TargetManifestVersion(string value);
    [CompilerGeneratedAttribute]
public string get_PendingUpgradeType();
    [CompilerGeneratedAttribute]
internal void set_PendingUpgradeType(string value);
    internal static FabricUpgradeOrchestrationServiceState FromNative(IntPtr pointer);
}
public class System.Fabric.FabricUpgradeProgress : object {
    private IFabricUpgradeProgressResult3 nativeProgress;
    private UpgradeDomainProgress currentProgress;
    [CompilerGeneratedAttribute]
private FabricUpgradeDescription <UpgradeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCodeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetConfigVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricUpgradeState <UpgradeState>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<UpgradeDomainStatus> <UpgradeDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<UpgradeUnitStatus> <UpgradeUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private RollingUpgradeMode <RollingUpgradeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextUpgradeDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CurrentUpgradeDomainDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FailureTimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UpgradeFailureReason> <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradeDomainProgress <UpgradeDomainProgressAtFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HealthCheckElapsedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private MonitoredUpgradeHealthCheckPhase <HealthCheckPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HealthCheckFlips>k__BackingField;
    public FabricUpgradeDescription UpgradeDescription { get; internal set; }
    public string TargetCodeVersion { get; internal set; }
    public string TargetConfigVersion { get; internal set; }
    public FabricUpgradeState UpgradeState { get; internal set; }
    public ReadOnlyCollection`1<UpgradeDomainStatus> UpgradeDomains { get; internal set; }
    public ReadOnlyCollection`1<UpgradeUnitStatus> UpgradeUnits { get; internal set; }
    public RollingUpgradeMode RollingUpgradeMode { get; internal set; }
    public string NextUpgradeDomain { get; internal set; }
    public TimeSpan UpgradeDuration { get; internal set; }
    public TimeSpan CurrentUpgradeDomainDuration { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public UpgradeDomainProgress CurrentUpgradeDomainProgress { get; internal set; }
    public UpgradeUnitsProgress CurrentUpgradeUnitsProgress { get; }
    public Nullable`1<DateTime> StartTimestampUtc { get; internal set; }
    public Nullable`1<DateTime> FailureTimestampUtc { get; internal set; }
    public Nullable`1<UpgradeFailureReason> FailureReason { get; internal set; }
    public UpgradeDomainProgress UpgradeDomainProgressAtFailure { get; internal set; }
    public bool IsNodeByNode { get; }
    public TimeSpan HealthCheckElapsedTime { get; internal set; }
    public MonitoredUpgradeHealthCheckPhase HealthCheckPhase { get; internal set; }
    public long HealthCheckFlips { get; internal set; }
    internal IFabricUpgradeProgressResult3 InnerProgress { get; }
    internal FabricUpgradeProgress(IFabricUpgradeProgressResult3 nativeProgress);
    [CompilerGeneratedAttribute]
public FabricUpgradeDescription get_UpgradeDescription();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDescription(FabricUpgradeDescription value);
    [CompilerGeneratedAttribute]
public string get_TargetCodeVersion();
    [CompilerGeneratedAttribute]
internal void set_TargetCodeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetConfigVersion();
    [CompilerGeneratedAttribute]
internal void set_TargetConfigVersion(string value);
    [CompilerGeneratedAttribute]
public FabricUpgradeState get_UpgradeState();
    [CompilerGeneratedAttribute]
internal void set_UpgradeState(FabricUpgradeState value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<UpgradeDomainStatus> get_UpgradeDomains();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomains(ReadOnlyCollection`1<UpgradeDomainStatus> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<UpgradeUnitStatus> get_UpgradeUnits();
    [CompilerGeneratedAttribute]
internal void set_UpgradeUnits(ReadOnlyCollection`1<UpgradeUnitStatus> value);
    [CompilerGeneratedAttribute]
public RollingUpgradeMode get_RollingUpgradeMode();
    [CompilerGeneratedAttribute]
internal void set_RollingUpgradeMode(RollingUpgradeMode value);
    [CompilerGeneratedAttribute]
public string get_NextUpgradeDomain();
    [CompilerGeneratedAttribute]
internal void set_NextUpgradeDomain(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeDuration();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CurrentUpgradeDomainDuration();
    [CompilerGeneratedAttribute]
internal void set_CurrentUpgradeDomainDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    public UpgradeDomainProgress get_CurrentUpgradeDomainProgress();
    internal void set_CurrentUpgradeDomainProgress(UpgradeDomainProgress value);
    public UpgradeUnitsProgress get_CurrentUpgradeUnitsProgress();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTimestampUtc();
    [CompilerGeneratedAttribute]
internal void set_StartTimestampUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FailureTimestampUtc();
    [CompilerGeneratedAttribute]
internal void set_FailureTimestampUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UpgradeFailureReason> get_FailureReason();
    [CompilerGeneratedAttribute]
internal void set_FailureReason(Nullable`1<UpgradeFailureReason> value);
    [CompilerGeneratedAttribute]
public UpgradeDomainProgress get_UpgradeDomainProgressAtFailure();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomainProgressAtFailure(UpgradeDomainProgress value);
    public bool get_IsNodeByNode();
    [CompilerGeneratedAttribute]
public TimeSpan get_HealthCheckElapsedTime();
    [CompilerGeneratedAttribute]
internal void set_HealthCheckElapsedTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public MonitoredUpgradeHealthCheckPhase get_HealthCheckPhase();
    [CompilerGeneratedAttribute]
internal void set_HealthCheckPhase(MonitoredUpgradeHealthCheckPhase value);
    [CompilerGeneratedAttribute]
public long get_HealthCheckFlips();
    [CompilerGeneratedAttribute]
internal void set_HealthCheckFlips(long value);
    public virtual string ToString();
    internal IFabricUpgradeProgressResult3 get_InnerProgress();
    public ReadOnlyCollection`1<UpgradeDomainStatus> GetChangedUpgradeDomains(FabricUpgradeProgress previousProgress);
}
public enum System.Fabric.FabricUpgradeState : Enum {
    public int value__;
    public static FabricUpgradeState Invalid;
    public static FabricUpgradeState RollingBackInProgress;
    public static FabricUpgradeState RollingBackCompleted;
    public static FabricUpgradeState RollingForwardPending;
    public static FabricUpgradeState RollingForwardInProgress;
    public static FabricUpgradeState RollingForwardCompleted;
    public static FabricUpgradeState Failed;
    public static FabricUpgradeState RollingBackPending;
}
public class System.Fabric.FabricValidationException : FabricException {
    public FabricValidationException(FabricErrorCode errorCode);
    public FabricValidationException(string message);
    public FabricValidationException(string message, FabricErrorCode errorCode);
    public FabricValidationException(string message, Exception inner);
    public FabricValidationException(string message, Exception inner, FabricErrorCode errorCode);
    protected FabricValidationException(SerializationInfo info, StreamingContext context);
    protected FabricValidationException(SerializationInfo info, StreamingContext context, FabricErrorCode errorCode);
}
internal static class System.Fabric.FabricValidatorConstants : object {
    public static string FabricUpgradeDefaultInstanceId;
    public static string FabricUpgradeDefaultTargetVersion;
    public static string SQLVoteType;
    public static string FileShareVoteType;
    public static string AzureBlobVoteType;
    public static string FabricImageStoreConnectionStringPrefix;
    public static string XStoreImageStoreConnectionStringPrefix;
    public static string DsmsXStoreImageStoreConnectionStringPrefix;
    public static string FileImageStoreConnectionStringPrefix;
    public static string LocalHostAddressPrefix;
    public static string DefaultTag;
    public static string DefaultTableStoreTableName;
    public static string DefaultFileStoreTraceLocation;
    public static string DefaultFileStoreCrashDumpLocation;
    public static string DCAService;
    public static string NodeType;
    public static string NodeName;
    public static string UpgradeDomain;
    public static string FaultDomain;
    public static string Certificates;
    public static string ClusterCertificate;
    public static string ClientCertificate;
    public static string ServerCertificate;
    public static string Endpoints;
    public static string ApplicationEndpoints;
    public static string CredentialTypeNone;
    public static string CredentialTypeX509;
    public static string CredentialTypeWindows;
    public static string RunAsAccountTypeDomainUser;
    public static string RunAsAccountTypeManagedService;
    public static string RunAsAccountTypeNetworkService;
    public static string RunAsAccountTypeLocalService;
    public static string RunAsAccountTypeLocalSystem;
    public static string ConfigurationsFileName;
    public static string WindowsUpdateServiceCoordinatorType;
    public static string WindowsAutoBaseUpgradeCoordinatorType;
    public static string ServerRestartCoordinatorType;
    public static string Provider_DSTS;
    public static string HttpAppGatewayPolicyNone;
    public static string HttpAppGatewayServiceCommonNameAndIssuer;
    public static string RunningInSFICMode;
    public static string UseFileTransferTransportForDownload;
    public static string UseFileTransferTransportForUpload;
    public static string UseFileTransferTransportForReplication;
    public static string PruneContainerImages;
    public static string ContainerImageDeletionEnabled;
}
public abstract class System.Fabric.FabricWorkerEntryPoint : object {
    private DllHostHostedManagedDllDescription assemblyDescription;
    private FabricRuntime runtime;
    private CodePackageActivationContext activationContext;
    internal static FabricWorkerEntryPoint CreateFromAssemblyDescription(DllHostHostedDllDescription hostedDllDescription);
    internal void InvokeActivate(FabricRuntime runtime, CodePackageActivationContext activationContext);
    internal void InvokeDeactivate();
    protected abstract virtual void Activate(FabricRuntime runtime, CodePackageActivationContext activationContext);
    protected virtual void Deactivate();
    private static FabricWorkerEntryPoint CreateFromAssemblyName(string assemblyName);
    private static Type GetEntryPointTypeFromAssembly(Assembly assembly);
}
internal class System.Fabric.FaultAnalysisServiceBroker : object {
    private static string TraceType;
    private static InteropApi ThreadErrorMessageSetter;
    private IFaultAnalysisService service;
    internal IFaultAnalysisService Service { get; }
    internal FaultAnalysisServiceBroker(IFaultAnalysisService service);
    private static FaultAnalysisServiceBroker();
    internal IFaultAnalysisService get_Service();
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.BeginStartPartitionDataLoss(IntPtr invokeDataLossDescription, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.EndPartitionDataLoss(IFabricAsyncOperationContext context);
    private Task InvokeDataLossAsync(InvokeDataLossDescription dataLossDescription, TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.BeginGetPartitionDataLossProgress(Guid operationId, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricPartitionDataLossProgressResult System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.EndGetPartitionDataLossProgress(IFabricAsyncOperationContext context);
    private Task`1<PartitionDataLossProgress> GetInvokeDataLossProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.BeginStartPartitionQuorumLoss(IntPtr invokeQuorumLossDescription, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.EndPartitionQuorumLoss(IFabricAsyncOperationContext context);
    private Task InvokeQuorumLossAsync(InvokeQuorumLossDescription quorumLossDescription, TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.BeginGetPartitionQuorumLossProgress(Guid operationId, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricPartitionQuorumLossProgressResult System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.EndGetPartitionQuorumLossProgress(IFabricAsyncOperationContext context);
    private Task`1<PartitionQuorumLossProgress> GetInvokeQuorumLossProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginStartPartitionRestart(IntPtr restartPartitionDescription, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndStartPartitionRestart(IFabricAsyncOperationContext context);
    private Task RestartPartitionAsync(RestartPartitionDescription restartPartitionDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginGetPartitionRestartProgress(Guid operationId, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricPartitionRestartProgressResult EndGetPartitionRestartProgress(IFabricAsyncOperationContext context);
    private Task`1<PartitionRestartProgress> GetRestartPartitionProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginGetTestCommandStatusList(IntPtr description, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricTestCommandStatusResult EndGetTestCommandStatusList(IFabricAsyncOperationContext context);
    private Task`1<TestCommandQueryResult> GetTestCommandListAsync(TestCommandListDescription description, TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.BeginCancelTestCommand(IntPtr description, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.EndCancelTestCommand(IFabricAsyncOperationContext context);
    private Task CancelTestCommandAsync(CancelTestCommandDescription description, TimeSpan timeout, CancellationToken cancellationToken);
    private Task`1<NodeTransitionProgress> GetNodeTransitionProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginStartChaos(IntPtr startChaosDescription, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndStartChaos(IFabricAsyncOperationContext context);
    private Task StartChaosAsync(StartChaosDescription startChaosDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginStopChaos(UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndStopChaos(IFabricAsyncOperationContext context);
    private Task StopChaosAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginGetChaosReport(IntPtr getChaosReportDescription, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricChaosReportResult EndGetChaosReport(IFabricAsyncOperationContext context);
    private Task`1<ChaosReport> GetChaosReportAsync(GetChaosReportDescription getChaosReportDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginGetStoppedNodeList(UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricStringResult EndGetStoppedNodeList(IFabricAsyncOperationContext context);
    private Task`1<string> GetStoppedNodeListAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.BeginStartNodeTransition(IntPtr description, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeFaultAnalysisService.IFabricFaultAnalysisService.EndStartNodeTransition(IFabricAsyncOperationContext context);
    private Task StartNodeTransitionAsync(NodeTransitionDescription description, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual IFabricAsyncOperationContext BeginGetNodeTransitionProgress(Guid operationId, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricNodeTransitionProgressResult EndGetNodeTransitionProgress(IFabricAsyncOperationContext context);
    public sealed virtual IFabricAsyncOperationContext BeginCallSystemService(IntPtr action, IntPtr inputBlob, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricStringResult EndCallSystemService(IFabricAsyncOperationContext context);
    private Task`1<string> CallSystemServiceAsync(string action, string inputBlob, TimeSpan timeout, CancellationToken cancellationToken);
}
public enum System.Fabric.FaultType : Enum {
    public int value__;
    public static FaultType Invalid;
    public static FaultType Permanent;
    public static FaultType Transient;
}
public class System.Fabric.GatewayInformation : object {
    [CompilerGeneratedAttribute]
private string <NodeAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeId <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public string NodeAddress { get; private set; }
    public NodeId NodeId { get; private set; }
    public BigInteger NodeInstanceId { get; private set; }
    public string NodeName { get; private set; }
    [CompilerGeneratedAttribute]
public string get_NodeAddress();
    [CompilerGeneratedAttribute]
private void set_NodeAddress(string value);
    [CompilerGeneratedAttribute]
public NodeId get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(NodeId value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstanceId();
    [CompilerGeneratedAttribute]
private void set_NodeInstanceId(BigInteger value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    internal static GatewayInformation FromNative(IFabricGatewayInformationResult nativeResult);
}
internal class System.Fabric.GatewayResourceManagerBroker : object {
    private static string TraceType;
    private static InteropApi ThreadErrorMessageSetter;
    private IGatewayResourceManager service;
    internal IGatewayResourceManager Service { get; }
    internal GatewayResourceManagerBroker(IGatewayResourceManager service);
    private static GatewayResourceManagerBroker();
    internal IGatewayResourceManager get_Service();
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeGatewayResourceManager.IFabricGatewayResourceManager.BeginUpdateOrCreateGatewayResource(IntPtr resourceDescription, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricStringResult System.Fabric.Interop.NativeGatewayResourceManager.IFabricGatewayResourceManager.EndUpdateOrCreateGatewayResource(IFabricAsyncOperationContext context);
    private Task`1<string> UpdateOrCreateAsync(string resourceDescription, TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeGatewayResourceManager.IFabricGatewayResourceManager.BeginQueryGatewayResources(IntPtr queryDescription, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricStringListResult System.Fabric.Interop.NativeGatewayResourceManager.IFabricGatewayResourceManager.EndQueryGatewayResources(IFabricAsyncOperationContext context);
    private Task`1<List`1<string>> QueryGatewayResourcesAsync(string queryDescription, TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeGatewayResourceManager.IFabricGatewayResourceManager.BeginDeleteGatewayResource(IntPtr resourceName, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeGatewayResourceManager.IFabricGatewayResourceManager.EndDeleteGatewayResource(IFabricAsyncOperationContext context);
    private Task DeleteGatewayResourceAsync(string description, TimeSpan timeout, CancellationToken cancellationToken);
}
public class System.Fabric.GetPropertyOperation : PropertyBatchOperation {
    [CompilerGeneratedAttribute]
private bool <IncludeValue>k__BackingField;
    public bool IncludeValue { get; internal set; }
    public GetPropertyOperation(string propertyName);
    public GetPropertyOperation(string propertyName, bool includeValue);
    [CompilerGeneratedAttribute]
public bool get_IncludeValue();
    [CompilerGeneratedAttribute]
internal void set_IncludeValue(bool value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public class System.Fabric.Health.ApplicationHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ServiceHealthState> <ServiceHealthStates>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DeployedApplicationHealthState> <DeployedApplicationHealthStates>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatistics <HealthStatistics>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    public IList`1<ServiceHealthState> ServiceHealthStates { get; internal set; }
    public IList`1<DeployedApplicationHealthState> DeployedApplicationHealthStates { get; internal set; }
    [JsonCustomizationAttribute]
public HealthStatistics HealthStatistics { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public IList`1<ServiceHealthState> get_ServiceHealthStates();
    [CompilerGeneratedAttribute]
internal void set_ServiceHealthStates(IList`1<ServiceHealthState> value);
    [CompilerGeneratedAttribute]
public IList`1<DeployedApplicationHealthState> get_DeployedApplicationHealthStates();
    [CompilerGeneratedAttribute]
internal void set_DeployedApplicationHealthStates(IList`1<DeployedApplicationHealthState> value);
    [CompilerGeneratedAttribute]
public HealthStatistics get_HealthStatistics();
    [CompilerGeneratedAttribute]
internal void set_HealthStatistics(HealthStatistics value);
    public virtual string ToString();
    internal static ApplicationHealth FromNativeResult(IFabricApplicationHealthResult nativeResult);
    private static ApplicationHealth FromNative(FABRIC_APPLICATION_HEALTH* nativeHealth);
}
public class System.Fabric.Health.ApplicationHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static ApplicationHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.ApplicationHealthPolicy : object {
    internal static ApplicationHealthPolicy Default;
    private bool considerWarningAsError;
    private byte maxPercentUnhealthyDeployedApplications;
    private ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy;
    private Dictionary`2<string, ServiceTypeHealthPolicy> serviceTypeHealthPolicyMap;
    public bool ConsiderWarningAsError { get; public set; }
    public byte MaxPercentUnhealthyDeployedApplications { get; public set; }
    [JsonCustomizationAttribute]
public ServiceTypeHealthPolicy DefaultServiceTypeHealthPolicy { get; public set; }
    [JsonCustomizationAttribute]
public IDictionary`2<string, ServiceTypeHealthPolicy> ServiceTypeHealthPolicyMap { get; }
    private static ApplicationHealthPolicy();
    public bool get_ConsiderWarningAsError();
    public void set_ConsiderWarningAsError(bool value);
    public byte get_MaxPercentUnhealthyDeployedApplications();
    public void set_MaxPercentUnhealthyDeployedApplications(byte value);
    public virtual string ToString();
    public ServiceTypeHealthPolicy get_DefaultServiceTypeHealthPolicy();
    public void set_DefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy value);
    public IDictionary`2<string, ServiceTypeHealthPolicy> get_ServiceTypeHealthPolicyMap();
    internal static bool AreEqual(ApplicationHealthPolicy current, ApplicationHealthPolicy other);
    internal static ApplicationHealthPolicy FromNative(IntPtr nativeApplicationHealthPolicyPtr);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Health.ApplicationHealthPolicyMap : Dictionary`2<Uri, ApplicationHealthPolicy> {
    [JsonCustomizationAttribute]
internal List`1<KeyValuePair`2<Uri, ApplicationHealthPolicy>> ApplicationHealthPolicyMapWrapper { get; internal set; }
    public virtual string ToString();
    internal List`1<KeyValuePair`2<Uri, ApplicationHealthPolicy>> get_ApplicationHealthPolicyMapWrapper();
    internal void set_ApplicationHealthPolicyMapWrapper(List`1<KeyValuePair`2<Uri, ApplicationHealthPolicy>> value);
    internal static bool AreEqual(ApplicationHealthPolicyMap current, ApplicationHealthPolicyMap other);
    internal IntPtr ToNative(PinCollection pin);
    internal void FromNative(IntPtr nativeApplicationHealthPolicyMapPtr);
    [CompilerGeneratedAttribute]
private void <set_ApplicationHealthPolicyMapWrapper>b__4_0(KeyValuePair`2<Uri, ApplicationHealthPolicy> kv);
}
public class System.Fabric.Health.ApplicationHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public ApplicationHealthReport(Uri applicationName, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.ApplicationHealthState : EntityHealthState {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    public virtual string ToString();
    internal static IList`1<ApplicationHealthState> FromNativeList(IntPtr nativeListPtr);
    internal static ApplicationHealthState FromNative(FABRIC_APPLICATION_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.ApplicationHealthStateChunk : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceHealthStateChunkList <ServiceHealthStateChunks>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedApplicationHealthStateChunkList <DeployedApplicationHealthStateChunks>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public string ApplicationTypeName { get; internal set; }
    public HealthState HealthState { get; internal set; }
    public ServiceHealthStateChunkList ServiceHealthStateChunks { get; internal set; }
    public DeployedApplicationHealthStateChunkList DeployedApplicationHealthStateChunks { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public ServiceHealthStateChunkList get_ServiceHealthStateChunks();
    [CompilerGeneratedAttribute]
internal void set_ServiceHealthStateChunks(ServiceHealthStateChunkList value);
    [CompilerGeneratedAttribute]
public DeployedApplicationHealthStateChunkList get_DeployedApplicationHealthStateChunks();
    [CompilerGeneratedAttribute]
internal void set_DeployedApplicationHealthStateChunks(DeployedApplicationHealthStateChunkList value);
    public virtual string ToString();
    internal static ApplicationHealthStateChunk FromNative(FABRIC_APPLICATION_HEALTH_STATE_CHUNK nativeApplicationHealthStateChunk);
}
public class System.Fabric.Health.ApplicationHealthStateChunkList : HealthStateChunkList`1<ApplicationHealthStateChunk> {
    internal ApplicationHealthStateChunkList(IList`1<ApplicationHealthStateChunk> list);
    internal static ApplicationHealthStateChunkList CreateFromNativeList(IntPtr nativeListPtr);
}
public class System.Fabric.Health.ApplicationHealthStateFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ServiceHealthStateFilter> <ServiceFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DeployedApplicationHealthStateFilter> <DeployedApplicationFilters>k__BackingField;
    public HealthStateFilter HealthStateFilter { get; public set; }
    [JsonCustomizationAttribute]
public Uri ApplicationNameFilter { get; public set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeNameFilter { get; public set; }
    public IList`1<ServiceHealthStateFilter> ServiceFilters { get; internal set; }
    public IList`1<DeployedApplicationHealthStateFilter> DeployedApplicationFilters { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilter(HealthStateFilter value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationNameFilter(Uri value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeNameFilter();
    [CompilerGeneratedAttribute]
public void set_ApplicationTypeNameFilter(string value);
    [CompilerGeneratedAttribute]
public IList`1<ServiceHealthStateFilter> get_ServiceFilters();
    [CompilerGeneratedAttribute]
internal void set_ServiceFilters(IList`1<ServiceHealthStateFilter> value);
    [CompilerGeneratedAttribute]
public IList`1<DeployedApplicationHealthStateFilter> get_DeployedApplicationFilters();
    [CompilerGeneratedAttribute]
internal void set_DeployedApplicationFilters(IList`1<DeployedApplicationHealthStateFilter> value);
    public virtual string ToString();
    internal void ToNative(PinCollection pinCollection, FABRIC_APPLICATION_HEALTH_STATE_FILTER& publicFilter);
    internal static IntPtr ToNativeList(PinCollection pinCollection, IList`1<ApplicationHealthStateFilter> applicationList);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Health.ApplicationHealthStateList : object {
    private IList`1<ApplicationHealthState> list;
    public ApplicationHealthState Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ApplicationHealthStateList(IList`1<ApplicationHealthState> list);
    public sealed virtual int IndexOf(ApplicationHealthState item);
    public sealed virtual void Insert(int index, ApplicationHealthState item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ApplicationHealthState get_Item(int index);
    public sealed virtual void set_Item(int index, ApplicationHealthState value);
    public sealed virtual void Add(ApplicationHealthState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ApplicationHealthState item);
    public sealed virtual void CopyTo(ApplicationHealthState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ApplicationHealthState item);
    public sealed virtual IEnumerator`1<ApplicationHealthState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ApplicationHealthStateList FromNativeList(FABRIC_APPLICATION_HEALTH_STATE_LIST* nativeList);
}
public class System.Fabric.Health.ApplicationHealthStatesFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.ApplicationHealthStatisticsFilter : object {
    [CompilerGeneratedAttribute]
private bool <ExcludeHealthStatistics>k__BackingField;
    public bool ExcludeHealthStatistics { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExcludeHealthStatistics();
    [CompilerGeneratedAttribute]
public void set_ExcludeHealthStatistics(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.ApplicationsHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyApplications>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyApplications { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyApplications();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyApplications(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static ApplicationsHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyApplications>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public string ApplicationTypeName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyApplications { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyApplications();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyApplications(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static ApplicationTypeApplicationsHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.ApplicationTypeHealthPolicyMap : Dictionary`2<string, byte> {
    [JsonCustomizationAttribute]
internal List`1<KeyValuePair`2<string, byte>> ApplicationTypeHealthPolicyMapWrapper { get; internal set; }
    internal List`1<KeyValuePair`2<string, byte>> get_ApplicationTypeHealthPolicyMapWrapper();
    internal void set_ApplicationTypeHealthPolicyMapWrapper(List`1<KeyValuePair`2<string, byte>> value);
    public void Add(string appTypeName, byte value);
    public virtual string ToString();
    internal static bool AreEqual(ApplicationTypeHealthPolicyMap current, ApplicationTypeHealthPolicyMap other);
    internal IntPtr ToNative(PinCollection pin);
    internal void FromNative(IntPtr nativeApplicationTypeHealthPolicyMapPtr);
    [CompilerGeneratedAttribute]
private void <set_ApplicationTypeHealthPolicyMapWrapper>b__3_0(KeyValuePair`2<string, byte> kv);
}
public class System.Fabric.Health.ClusterHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private IList`1<NodeHealthState> <NodeHealthStates>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ApplicationHealthState> <ApplicationHealthStates>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatistics <HealthStatistics>k__BackingField;
    public IList`1<NodeHealthState> NodeHealthStates { get; internal set; }
    public IList`1<ApplicationHealthState> ApplicationHealthStates { get; internal set; }
    [JsonCustomizationAttribute]
public HealthStatistics HealthStatistics { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<NodeHealthState> get_NodeHealthStates();
    [CompilerGeneratedAttribute]
internal void set_NodeHealthStates(IList`1<NodeHealthState> value);
    [CompilerGeneratedAttribute]
public IList`1<ApplicationHealthState> get_ApplicationHealthStates();
    [CompilerGeneratedAttribute]
internal void set_ApplicationHealthStates(IList`1<ApplicationHealthState> value);
    [CompilerGeneratedAttribute]
public HealthStatistics get_HealthStatistics();
    [CompilerGeneratedAttribute]
internal void set_HealthStatistics(HealthStatistics value);
    public virtual string ToString();
    internal static ClusterHealth FromNativeResult(IFabricClusterHealthResult nativeResult);
    private static ClusterHealth FromNative(FABRIC_CLUSTER_HEALTH* nativeClusterHealth);
}
public class System.Fabric.Health.ClusterHealthChunk : object {
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeHealthStateChunkList <NodeHealthStateChunks>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationHealthStateChunkList <ApplicationHealthStateChunks>k__BackingField;
    public HealthState HealthState { get; internal set; }
    public NodeHealthStateChunkList NodeHealthStateChunks { get; internal set; }
    public ApplicationHealthStateChunkList ApplicationHealthStateChunks { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public NodeHealthStateChunkList get_NodeHealthStateChunks();
    [CompilerGeneratedAttribute]
internal void set_NodeHealthStateChunks(NodeHealthStateChunkList value);
    [CompilerGeneratedAttribute]
public ApplicationHealthStateChunkList get_ApplicationHealthStateChunks();
    [CompilerGeneratedAttribute]
internal void set_ApplicationHealthStateChunks(ApplicationHealthStateChunkList value);
    public virtual string ToString();
    internal static ClusterHealthChunk FromNativeResult(IFabricGetClusterHealthChunkResult nativeResult);
    internal static ClusterHealthChunk FromNative(FABRIC_CLUSTER_HEALTH_CHUNK nativeClusterHealthChunk);
}
public class System.Fabric.Health.ClusterHealthPolicy : object {
    internal static ClusterHealthPolicy Default;
    private bool considerWarningAsError;
    private byte maxPercentUnhealthyNodes;
    private byte maxPercentUnhealthyApplications;
    private ApplicationTypeHealthPolicyMap applicationTypeHealthPolicyMap;
    private NodeTypeHealthPolicyMap nodeTypeHealthPolicyMap;
    public bool ConsiderWarningAsError { get; public set; }
    public byte MaxPercentUnhealthyNodes { get; public set; }
    public byte MaxPercentUnhealthyApplications { get; public set; }
    [JsonCustomizationAttribute]
public ApplicationTypeHealthPolicyMap ApplicationTypeHealthPolicyMap { get; }
    [JsonCustomizationAttribute]
public NodeTypeHealthPolicyMap NodeTypeHealthPolicyMap { get; public set; }
    private static ClusterHealthPolicy();
    public bool get_ConsiderWarningAsError();
    public void set_ConsiderWarningAsError(bool value);
    public byte get_MaxPercentUnhealthyNodes();
    public void set_MaxPercentUnhealthyNodes(byte value);
    public byte get_MaxPercentUnhealthyApplications();
    public void set_MaxPercentUnhealthyApplications(byte value);
    public virtual string ToString();
    public ApplicationTypeHealthPolicyMap get_ApplicationTypeHealthPolicyMap();
    public NodeTypeHealthPolicyMap get_NodeTypeHealthPolicyMap();
    public void set_NodeTypeHealthPolicyMap(NodeTypeHealthPolicyMap value);
    internal static bool AreEqual(ClusterHealthPolicy current, ClusterHealthPolicy other);
    internal static ClusterHealthPolicy FromNative(IntPtr nativeClusterHealthPolicyPtr);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Health.ClusterHealthReport : HealthReport {
    public ClusterHealthReport(HealthInformation healthInformation);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.ClusterHealthStatisticsFilter : object {
    [CompilerGeneratedAttribute]
private bool <ExcludeHealthStatistics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSystemApplicationHealthStatistics>k__BackingField;
    public bool ExcludeHealthStatistics { get; public set; }
    public bool IncludeSystemApplicationHealthStatistics { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExcludeHealthStatistics();
    [CompilerGeneratedAttribute]
public void set_ExcludeHealthStatistics(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSystemApplicationHealthStatistics();
    [CompilerGeneratedAttribute]
public void set_IncludeSystemApplicationHealthStatistics(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.ClusterUpgradeHealthPolicy : object {
    internal static ClusterUpgradeHealthPolicy Default;
    private byte maxPercentDeltaUnhealthyNodes;
    private byte maxPercentUpgradeDomainDeltaUnhealthyNodes;
    public byte MaxPercentDeltaUnhealthyNodes { get; public set; }
    public byte MaxPercentUpgradeDomainDeltaUnhealthyNodes { get; public set; }
    private static ClusterUpgradeHealthPolicy();
    public byte get_MaxPercentDeltaUnhealthyNodes();
    public void set_MaxPercentDeltaUnhealthyNodes(byte value);
    public byte get_MaxPercentUpgradeDomainDeltaUnhealthyNodes();
    public void set_MaxPercentUpgradeDomainDeltaUnhealthyNodes(byte value);
    internal static bool AreEqual(ClusterUpgradeHealthPolicy current, ClusterUpgradeHealthPolicy other);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ClusterUpgradeHealthPolicy FromNative(IntPtr nativeClusterUpgradeHealthPolicyPtr);
}
public class System.Fabric.Health.DeltaNodesCheckHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private long <BaselineErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BaselineTotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentDeltaUnhealthyNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public long BaselineErrorCount { get; internal set; }
    public long BaselineTotalCount { get; internal set; }
    public long TotalCount { get; internal set; }
    public byte MaxPercentDeltaUnhealthyNodes { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_BaselineErrorCount();
    [CompilerGeneratedAttribute]
internal void set_BaselineErrorCount(long value);
    [CompilerGeneratedAttribute]
public long get_BaselineTotalCount();
    [CompilerGeneratedAttribute]
internal void set_BaselineTotalCount(long value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentDeltaUnhealthyNodes();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentDeltaUnhealthyNodes(byte value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static DeltaNodesCheckHealthEvaluation FromNative(IntPtr nativeDeltaNodesCheckHealthEvaluationPtr);
}
public class System.Fabric.Health.DeployedApplicationHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DeployedServicePackageHealthState> <DeployedServicePackageHealthStates>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatistics <HealthStatistics>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    public string NodeName { get; internal set; }
    public IList`1<DeployedServicePackageHealthState> DeployedServicePackageHealthStates { get; internal set; }
    [JsonCustomizationAttribute]
public HealthStatistics HealthStatistics { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<DeployedServicePackageHealthState> get_DeployedServicePackageHealthStates();
    [CompilerGeneratedAttribute]
internal void set_DeployedServicePackageHealthStates(IList`1<DeployedServicePackageHealthState> value);
    [CompilerGeneratedAttribute]
public HealthStatistics get_HealthStatistics();
    [CompilerGeneratedAttribute]
internal void set_HealthStatistics(HealthStatistics value);
    public virtual string ToString();
    internal static DeployedApplicationHealth FromNativeResult(IFabricDeployedApplicationHealthResult nativeResult);
    private static DeployedApplicationHealth FromNative(FABRIC_DEPLOYED_APPLICATION_HEALTH* nativeHealth);
}
public class System.Fabric.Health.DeployedApplicationHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    public string NodeName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static DeployedApplicationHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.DeployedApplicationHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public string NodeName { get; private set; }
    public DeployedApplicationHealthReport(Uri applicationName, string nodeName, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.DeployedApplicationHealthState : EntityHealthState {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public string NodeName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    public virtual string ToString();
    internal static IList`1<DeployedApplicationHealthState> FromNativeList(IntPtr nativeListPtr);
    internal static DeployedApplicationHealthState FromNative(FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.DeployedApplicationHealthStateChunk : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedServicePackageHealthStateChunkList <DeployedServicePackageHealthStateChunks>k__BackingField;
    public string NodeName { get; internal set; }
    public HealthState HealthState { get; internal set; }
    public DeployedServicePackageHealthStateChunkList DeployedServicePackageHealthStateChunks { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public DeployedServicePackageHealthStateChunkList get_DeployedServicePackageHealthStateChunks();
    [CompilerGeneratedAttribute]
internal void set_DeployedServicePackageHealthStateChunks(DeployedServicePackageHealthStateChunkList value);
    public virtual string ToString();
    internal static DeployedApplicationHealthStateChunk FromNative(FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK nativeDeployedApplicationHealthStateChunk);
}
public class System.Fabric.Health.DeployedApplicationHealthStateChunkList : HealthStateChunkList`1<DeployedApplicationHealthStateChunk> {
    internal DeployedApplicationHealthStateChunkList(IList`1<DeployedApplicationHealthStateChunk> list);
    internal static DeployedApplicationHealthStateChunkList CreateFromNativeList(IntPtr nativeListPtr);
}
public class System.Fabric.Health.DeployedApplicationHealthStateFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DeployedServicePackageHealthStateFilter> <DeployedServicePackageFilters>k__BackingField;
    public HealthStateFilter HealthStateFilter { get; public set; }
    [JsonCustomizationAttribute]
public string NodeNameFilter { get; public set; }
    public IList`1<DeployedServicePackageHealthStateFilter> DeployedServicePackageFilters { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilter(HealthStateFilter value);
    [CompilerGeneratedAttribute]
public string get_NodeNameFilter();
    [CompilerGeneratedAttribute]
public void set_NodeNameFilter(string value);
    [CompilerGeneratedAttribute]
public IList`1<DeployedServicePackageHealthStateFilter> get_DeployedServicePackageFilters();
    [CompilerGeneratedAttribute]
internal void set_DeployedServicePackageFilters(IList`1<DeployedServicePackageHealthStateFilter> value);
    public virtual string ToString();
    internal static IntPtr ToNativeList(PinCollection pinCollection, IList`1<DeployedApplicationHealthStateFilter> deployedApplicationList);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Health.DeployedApplicationHealthStateList : object {
    private IList`1<DeployedApplicationHealthState> list;
    public DeployedApplicationHealthState Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal DeployedApplicationHealthStateList(IList`1<DeployedApplicationHealthState> list);
    public sealed virtual int IndexOf(DeployedApplicationHealthState item);
    public sealed virtual void Insert(int index, DeployedApplicationHealthState item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DeployedApplicationHealthState get_Item(int index);
    public sealed virtual void set_Item(int index, DeployedApplicationHealthState value);
    public sealed virtual void Add(DeployedApplicationHealthState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DeployedApplicationHealthState item);
    public sealed virtual void CopyTo(DeployedApplicationHealthState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(DeployedApplicationHealthState item);
    public sealed virtual IEnumerator`1<DeployedApplicationHealthState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static DeployedApplicationHealthStateList FromNativeList(FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST* nativeList);
}
public class System.Fabric.Health.DeployedApplicationHealthStatesFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.DeployedApplicationHealthStatisticsFilter : object {
    [CompilerGeneratedAttribute]
private bool <ExcludeHealthStatistics>k__BackingField;
    public bool ExcludeHealthStatistics { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExcludeHealthStatistics();
    [CompilerGeneratedAttribute]
public void set_ExcludeHealthStatistics(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.DeployedApplicationsHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyDeployedApplications>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyDeployedApplications { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyDeployedApplications();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyDeployedApplications(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static DeployedApplicationsHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.DeployedServicePackageHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public string NodeName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    public virtual string ToString();
    internal static DeployedServicePackageHealth FromNativeResult(IFabricDeployedServicePackageHealthResult nativeResult);
    private static DeployedServicePackageHealth FromNative(FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH* nativeHealth);
}
public class System.Fabric.Health.DeployedServicePackageHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    public string NodeName { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static DeployedServicePackageHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.DeployedServicePackageHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public string ServiceManifestName { get; private set; }
    public string ServicePackageActivationId { get; private set; }
    public string NodeName { get; private set; }
    public DeployedServicePackageHealthReport(Uri applicationName, string serviceManifestName, string nodeName, HealthInformation healthInformation);
    public DeployedServicePackageHealthReport(Uri applicationName, string serviceManifestName, string servicePackageActivationId, string nodeName, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.DeployedServicePackageHealthState : EntityHealthState {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public string NodeName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    public virtual string ToString();
    internal static IList`1<DeployedServicePackageHealthState> FromNativeList(IntPtr nativeListPtr);
    internal static DeployedServicePackageHealthState FromNative(FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.DeployedServicePackageHealthStateChunk : object {
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    public string ServiceManifestName { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public HealthState HealthState { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    public virtual string ToString();
    internal static DeployedServicePackageHealthStateChunk FromNative(FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK nativeDeployedServicePackageHealthStateChunk);
}
public class System.Fabric.Health.DeployedServicePackageHealthStateChunkList : HealthStateChunkList`1<DeployedServicePackageHealthStateChunk> {
    internal DeployedServicePackageHealthStateChunkList(IList`1<DeployedServicePackageHealthStateChunk> list);
    internal static DeployedServicePackageHealthStateChunkList CreateFromNativeList(IntPtr nativeListPtr);
}
public class System.Fabric.Health.DeployedServicePackageHealthStateFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationIdFilter>k__BackingField;
    public HealthStateFilter HealthStateFilter { get; public set; }
    [JsonCustomizationAttribute]
public string ServiceManifestNameFilter { get; public set; }
    [JsonCustomizationAttribute]
public string ServicePackageActivationIdFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilter(HealthStateFilter value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestNameFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationIdFilter();
    [CompilerGeneratedAttribute]
public void set_ServicePackageActivationIdFilter(string value);
    public virtual string ToString();
    internal static IntPtr ToNativeList(PinCollection pinCollection, IList`1<DeployedServicePackageHealthStateFilter> deployedServicePackageList);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Health.DeployedServicePackageHealthStateList : object {
    private IList`1<DeployedServicePackageHealthState> list;
    public DeployedServicePackageHealthState Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal DeployedServicePackageHealthStateList(IList`1<DeployedServicePackageHealthState> list);
    public sealed virtual int IndexOf(DeployedServicePackageHealthState item);
    public sealed virtual void Insert(int index, DeployedServicePackageHealthState item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DeployedServicePackageHealthState get_Item(int index);
    public sealed virtual void set_Item(int index, DeployedServicePackageHealthState value);
    public sealed virtual void Add(DeployedServicePackageHealthState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DeployedServicePackageHealthState item);
    public sealed virtual void CopyTo(DeployedServicePackageHealthState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(DeployedServicePackageHealthState item);
    public sealed virtual IEnumerator`1<DeployedServicePackageHealthState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static DeployedServicePackageHealthStateList FromNativeList(FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST* nativeList);
}
public class System.Fabric.Health.DeployedServicePackageHealthStatesFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.DeployedServicePackagesHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static DeployedServicePackagesHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public abstract class System.Fabric.Health.EntityHealth : object {
    [CompilerGeneratedAttribute]
private HealthState <AggregatedHealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvent> <HealthEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public HealthState AggregatedHealthState { get; internal set; }
    public IList`1<HealthEvent> HealthEvents { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthState get_AggregatedHealthState();
    [CompilerGeneratedAttribute]
internal void set_AggregatedHealthState(HealthState value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvent> get_HealthEvents();
    [CompilerGeneratedAttribute]
internal void set_HealthEvents(IList`1<HealthEvent> value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    protected void AddUnhealthyEvaluationsString(StringBuilder sb);
}
public abstract class System.Fabric.Health.EntityHealthState : object {
    [CompilerGeneratedAttribute]
private HealthState <AggregatedHealthState>k__BackingField;
    public HealthState AggregatedHealthState { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthState get_AggregatedHealthState();
    [CompilerGeneratedAttribute]
internal void set_AggregatedHealthState(HealthState value);
}
public enum System.Fabric.Health.EntityKind : Enum {
    public int value__;
    public static EntityKind Invalid;
    public static EntityKind Replica;
    public static EntityKind Partition;
    public static EntityKind Node;
    public static EntityKind Service;
    public static EntityKind Application;
    public static EntityKind DeployedApplication;
    public static EntityKind DeployedServicePackage;
    public static EntityKind Cluster;
}
public class System.Fabric.Health.EntityKindHealthStateCount : object {
    [CompilerGeneratedAttribute]
private EntityKind <EntityKind>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStateCount <HealthStateCount>k__BackingField;
    public EntityKind EntityKind { get; internal set; }
    public HealthStateCount HealthStateCount { get; internal set; }
    [CompilerGeneratedAttribute]
public EntityKind get_EntityKind();
    [CompilerGeneratedAttribute]
internal void set_EntityKind(EntityKind value);
    [CompilerGeneratedAttribute]
public HealthStateCount get_HealthStateCount();
    [CompilerGeneratedAttribute]
internal void set_HealthStateCount(HealthStateCount value);
    public virtual string ToString();
    internal static EntityKindHealthStateCount FromNative(FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT nativeEntityKindHealthStateCount);
}
public class System.Fabric.Health.EventHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private HealthEvent <UnhealthyEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConsiderWarningAsError>k__BackingField;
    public HealthEvent UnhealthyEvent { get; internal set; }
    public bool ConsiderWarningAsError { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthEvent get_UnhealthyEvent();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvent(HealthEvent value);
    [CompilerGeneratedAttribute]
public bool get_ConsiderWarningAsError();
    [CompilerGeneratedAttribute]
internal void set_ConsiderWarningAsError(bool value);
    internal static EventHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public abstract class System.Fabric.Health.HealthEvaluation : object {
    [CompilerGeneratedAttribute]
private HealthEvaluationKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <AggregatedHealthState>k__BackingField;
    [JsonCustomizationAttribute]
public HealthEvaluationKind Kind { get; private set; }
    public string Description { get; internal set; }
    public HealthState AggregatedHealthState { get; internal set; }
    protected HealthEvaluation(HealthEvaluationKind kind);
    [CompilerGeneratedAttribute]
public HealthEvaluationKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(HealthEvaluationKind value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    [CompilerGeneratedAttribute]
public HealthState get_AggregatedHealthState();
    [CompilerGeneratedAttribute]
internal void set_AggregatedHealthState(HealthState value);
    public virtual string ToString();
    internal static HealthEvaluation FromNativeValue(FABRIC_HEALTH_EVALUATION nativeHealthEvaluation);
    internal static List`1<HealthEvaluation> FromNativeList(IntPtr nativeHealthEvaluationPtr);
    internal static Type GetDerivedHealthEvaluationClassTypeFromKind(HealthEvaluationKind kind);
}
public enum System.Fabric.Health.HealthEvaluationKind : Enum {
    public int value__;
    public static HealthEvaluationKind Invalid;
    public static HealthEvaluationKind Event;
    public static HealthEvaluationKind Replicas;
    public static HealthEvaluationKind Partitions;
    public static HealthEvaluationKind DeployedServicePackages;
    public static HealthEvaluationKind DeployedApplications;
    public static HealthEvaluationKind Services;
    public static HealthEvaluationKind Nodes;
    public static HealthEvaluationKind Applications;
    public static HealthEvaluationKind SystemApplication;
    public static HealthEvaluationKind UpgradeDomainDeployedApplications;
    public static HealthEvaluationKind UpgradeDomainNodes;
    public static HealthEvaluationKind Replica;
    public static HealthEvaluationKind Partition;
    public static HealthEvaluationKind DeployedServicePackage;
    public static HealthEvaluationKind DeployedApplication;
    public static HealthEvaluationKind Service;
    public static HealthEvaluationKind Node;
    public static HealthEvaluationKind Application;
    public static HealthEvaluationKind DeltaNodesCheck;
    public static HealthEvaluationKind UpgradeDomainDeltaNodesCheck;
    public static HealthEvaluationKind ApplicationTypeApplications;
    public static HealthEvaluationKind NodeTypeNodes;
}
public class System.Fabric.Health.HealthEvent : object {
    [CompilerGeneratedAttribute]
private DateTime <SourceUtcTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModifiedUtcTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpired>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastOkTransitionAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWarningTransitionAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastErrorTransitionAt>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthInformation <HealthInformation>k__BackingField;
    public DateTime SourceUtcTimestamp { get; internal set; }
    public DateTime LastModifiedUtcTimestamp { get; internal set; }
    public bool IsExpired { get; internal set; }
    public DateTime LastOkTransitionAt { get; internal set; }
    public DateTime LastWarningTransitionAt { get; internal set; }
    public DateTime LastErrorTransitionAt { get; internal set; }
    [JsonCustomizationAttribute]
public HealthInformation HealthInformation { get; internal set; }
    [CompilerGeneratedAttribute]
public DateTime get_SourceUtcTimestamp();
    [CompilerGeneratedAttribute]
internal void set_SourceUtcTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastModifiedUtcTimestamp();
    [CompilerGeneratedAttribute]
internal void set_LastModifiedUtcTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsExpired();
    [CompilerGeneratedAttribute]
internal void set_IsExpired(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LastOkTransitionAt();
    [CompilerGeneratedAttribute]
internal void set_LastOkTransitionAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastWarningTransitionAt();
    [CompilerGeneratedAttribute]
internal void set_LastWarningTransitionAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastErrorTransitionAt();
    [CompilerGeneratedAttribute]
internal void set_LastErrorTransitionAt(DateTime value);
    [CompilerGeneratedAttribute]
public HealthInformation get_HealthInformation();
    [CompilerGeneratedAttribute]
internal void set_HealthInformation(HealthInformation value);
    public virtual string ToString();
    internal static HealthEvent FromNative(FABRIC_HEALTH_EVENT nativeHealthEvent);
    internal static List`1<HealthEvent> FromNativeList(IntPtr nativeHealthEventsPtr);
    internal static bool AreEqual(HealthEvent a, HealthEvent b);
}
public class System.Fabric.Health.HealthEventsFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.HealthInformation : object {
    public static long UnknownSequenceNumber;
    public static long AutoSequenceNumber;
    private TimeSpan timeToLive;
    private long sequenceNumber;
    [CompilerGeneratedAttribute]
private string <HealthReportId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveWhenExpired>k__BackingField;
    public string HealthReportId { get; public set; }
    public string SourceId { get; internal set; }
    public string Property { get; internal set; }
    public HealthState HealthState { get; internal set; }
    public string Description { get; public set; }
    [JsonCustomizationAttribute]
public TimeSpan TimeToLive { get; public set; }
    public bool RemoveWhenExpired { get; public set; }
    public long SequenceNumber { get; public set; }
    public HealthInformation(string sourceId, string property, HealthState healthState);
    [CompilerGeneratedAttribute]
public string get_HealthReportId();
    [CompilerGeneratedAttribute]
public void set_HealthReportId(string value);
    [CompilerGeneratedAttribute]
public string get_SourceId();
    [CompilerGeneratedAttribute]
internal void set_SourceId(string value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
internal void set_Property(string value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public TimeSpan get_TimeToLive();
    public void set_TimeToLive(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_RemoveWhenExpired();
    [CompilerGeneratedAttribute]
public void set_RemoveWhenExpired(bool value);
    public long get_SequenceNumber();
    public void set_SequenceNumber(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pin);
    internal static HealthInformation FromNative(IntPtr nativeHealthInformationPtr);
    internal static HealthInformation FromNative(FABRIC_HEALTH_INFORMATION nativeHealthInformation);
    internal static bool AreEqual(HealthInformation a, HealthInformation b);
}
[KnownTypeAttribute("System.Fabric.Health.ApplicationHealthReport")]
[KnownTypeAttribute("System.Fabric.Health.ClusterHealthReport")]
[KnownTypeAttribute("System.Fabric.Health.NodeHealthReport")]
[KnownTypeAttribute("System.Fabric.Health.PartitionHealthReport")]
[KnownTypeAttribute("System.Fabric.Health.ServiceHealthReport")]
[KnownTypeAttribute("System.Fabric.Health.StatelessServiceInstanceHealthReport")]
[KnownTypeAttribute("System.Fabric.Health.StatefulServiceReplicaHealthReport")]
public abstract class System.Fabric.Health.HealthReport : object {
    [CompilerGeneratedAttribute]
private HealthReportKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthInformation <HealthInformation>k__BackingField;
    public HealthReportKind Kind { get; private set; }
    public HealthInformation HealthInformation { get; internal set; }
    protected HealthReport(HealthReportKind kind, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public HealthReportKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(HealthReportKind value);
    [CompilerGeneratedAttribute]
public HealthInformation get_HealthInformation();
    [CompilerGeneratedAttribute]
internal void set_HealthInformation(HealthInformation value);
    internal abstract virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal IntPtr ToNative(PinCollection pinCollection);
}
internal static class System.Fabric.Health.HealthReportIds : object {
    public static string DCAInsufficientSpace70;
    public static string DCADiskSpaceUsageIsAboveQuota;
    private static string Runtime_70;
    private static string DCA;
    private static HealthReportIds();
    private static string CreateHealthReportId(string component, string runtimeVersion, string id);
}
public enum System.Fabric.Health.HealthReportKind : Enum {
    public int value__;
    public static HealthReportKind Invalid;
    public static HealthReportKind StatefulServiceReplica;
    public static HealthReportKind StatelessServiceInstance;
    public static HealthReportKind Partition;
    public static HealthReportKind Node;
    public static HealthReportKind Service;
    public static HealthReportKind Application;
    public static HealthReportKind DeployedApplication;
    public static HealthReportKind DeployedServicePackage;
    public static HealthReportKind Cluster;
}
public class System.Fabric.Health.HealthReportSendOptions : object {
    [CompilerGeneratedAttribute]
private bool <Immediate>k__BackingField;
    public bool Immediate { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Immediate();
    [CompilerGeneratedAttribute]
public void set_Immediate(bool value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Health.HealthState : Enum {
    public int value__;
    public static HealthState Invalid;
    public static HealthState Ok;
    public static HealthState Warning;
    public static HealthState Error;
    public static HealthState Unknown;
}
[DefaultMemberAttribute("Item")]
public abstract class System.Fabric.Health.HealthStateChunkList`1 : object {
    private IList`1<T> list;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public T Item { get; public set; }
    public long TotalCount { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected HealthStateChunkList`1(IList`1<T> list);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(long value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class System.Fabric.Health.HealthStateChunkListHelper : object {
    [ExtensionAttribute]
public static T[] ToArray(HealthStateChunkList`1<T> list);
}
public class System.Fabric.Health.HealthStateCount : object {
    [CompilerGeneratedAttribute]
private long <OkCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WarningCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ErrorCount>k__BackingField;
    public long OkCount { get; internal set; }
    public long WarningCount { get; internal set; }
    public long ErrorCount { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_OkCount();
    [CompilerGeneratedAttribute]
internal void set_OkCount(long value);
    [CompilerGeneratedAttribute]
public long get_WarningCount();
    [CompilerGeneratedAttribute]
internal void set_WarningCount(long value);
    [CompilerGeneratedAttribute]
public long get_ErrorCount();
    [CompilerGeneratedAttribute]
internal void set_ErrorCount(long value);
    public virtual string ToString();
    internal static HealthStateCount FromNative(IntPtr nativeHealthStateCountPtr);
}
[FlagsAttribute]
public enum System.Fabric.Health.HealthStateFilter : Enum {
    public long value__;
    public static HealthStateFilter Default;
    public static HealthStateFilter None;
    public static HealthStateFilter Ok;
    public static HealthStateFilter Warning;
    public static HealthStateFilter Error;
    public static HealthStateFilter All;
}
public class System.Fabric.Health.HealthStatistics : object {
    [CompilerGeneratedAttribute]
private IList`1<EntityKindHealthStateCount> <HealthStateCountList>k__BackingField;
    public IList`1<EntityKindHealthStateCount> HealthStateCountList { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<EntityKindHealthStateCount> get_HealthStateCountList();
    [CompilerGeneratedAttribute]
internal void set_HealthStateCountList(IList`1<EntityKindHealthStateCount> value);
    public virtual string ToString();
    internal static HealthStatistics CreateFromNative(IntPtr nativeHealthStatisticsPtr);
}
public class System.Fabric.Health.NodeHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [JsonCustomizationAttribute]
public string NodeName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    public virtual string ToString();
    internal static NodeHealth FromNativeResult(IFabricNodeHealthResult nativeResult);
    private static NodeHealth FromNative(FABRIC_NODE_HEALTH* nativeHealth);
}
public class System.Fabric.Health.NodeHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public string NodeName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static NodeHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.NodeHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public string NodeName { get; private set; }
    public NodeHealthReport(string nodeName, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.NodeHealthState : EntityHealthState {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [JsonCustomizationAttribute]
public string NodeName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    public virtual string ToString();
    internal static IList`1<NodeHealthState> FromNativeList(IntPtr nativeListPtr);
    internal static NodeHealthState FromNative(FABRIC_NODE_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.NodeHealthStateChunk : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    public string NodeName { get; internal set; }
    public HealthState HealthState { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    public virtual string ToString();
    internal static NodeHealthStateChunk FromNative(FABRIC_NODE_HEALTH_STATE_CHUNK nativeNodeHealthStateChunk);
}
public class System.Fabric.Health.NodeHealthStateChunkList : HealthStateChunkList`1<NodeHealthStateChunk> {
    internal NodeHealthStateChunkList(IList`1<NodeHealthStateChunk> list);
    internal static NodeHealthStateChunkList CreateFromNativeList(IntPtr nativeListPtr);
}
public class System.Fabric.Health.NodeHealthStateFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeNameFilter>k__BackingField;
    public HealthStateFilter HealthStateFilter { get; public set; }
    [JsonCustomizationAttribute]
public string NodeNameFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilter(HealthStateFilter value);
    [CompilerGeneratedAttribute]
public string get_NodeNameFilter();
    [CompilerGeneratedAttribute]
public void set_NodeNameFilter(string value);
    public virtual string ToString();
    internal static IntPtr ToNativeList(PinCollection pinCollection, IList`1<NodeHealthStateFilter> nodeList);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Health.NodeHealthStateList : object {
    private IList`1<NodeHealthState> list;
    public NodeHealthState Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal NodeHealthStateList(IList`1<NodeHealthState> list);
    public sealed virtual int IndexOf(NodeHealthState item);
    public sealed virtual void Insert(int index, NodeHealthState item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual NodeHealthState get_Item(int index);
    public sealed virtual void set_Item(int index, NodeHealthState value);
    public sealed virtual void Add(NodeHealthState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NodeHealthState item);
    public sealed virtual void CopyTo(NodeHealthState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(NodeHealthState item);
    public sealed virtual IEnumerator`1<NodeHealthState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static NodeHealthStateList FromNativeList(FABRIC_NODE_HEALTH_STATE_LIST* nativeList);
}
public class System.Fabric.Health.NodeHealthStatesFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.NodesHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyNodes { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyNodes();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyNodes(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static NodesHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.NodeTypeHealthPolicyMap : Dictionary`2<string, byte> {
    [JsonCustomizationAttribute]
internal List`1<KeyValuePair`2<string, byte>> NodeTypeHealthPolicyMapWrapper { get; private set; }
    internal List`1<KeyValuePair`2<string, byte>> get_NodeTypeHealthPolicyMapWrapper();
    private void set_NodeTypeHealthPolicyMapWrapper(List`1<KeyValuePair`2<string, byte>> value);
    public void Add(string nodeTypeName, byte value);
    public virtual string ToString();
    internal static bool AreEqual(NodeTypeHealthPolicyMap current, NodeTypeHealthPolicyMap other);
    internal IntPtr ToNative(PinCollection pin);
    internal void FromNative(IntPtr nativeNodeTypeHealthPolicyMapPtr);
    [CompilerGeneratedAttribute]
private void <set_NodeTypeHealthPolicyMapWrapper>b__3_0(KeyValuePair`2<string, byte> kv);
}
public class System.Fabric.Health.NodeTypeNodesHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private string <NodeTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public string NodeTypeName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyNodes { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeTypeName();
    [CompilerGeneratedAttribute]
internal void set_NodeTypeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyNodes();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyNodes(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static NodeTypeNodesHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.PartitionHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaHealthState> <ReplicaHealthStates>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatistics <HealthStatistics>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public IList`1<ReplicaHealthState> ReplicaHealthStates { get; internal set; }
    [JsonCustomizationAttribute]
public HealthStatistics HealthStatistics { get; internal set; }
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public IList`1<ReplicaHealthState> get_ReplicaHealthStates();
    [CompilerGeneratedAttribute]
internal void set_ReplicaHealthStates(IList`1<ReplicaHealthState> value);
    [CompilerGeneratedAttribute]
public HealthStatistics get_HealthStatistics();
    [CompilerGeneratedAttribute]
internal void set_HealthStatistics(HealthStatistics value);
    public virtual string ToString();
    internal static PartitionHealth FromNativeResult(IFabricPartitionHealthResult nativeResult);
    private static PartitionHealth FromNative(FABRIC_PARTITION_HEALTH* nativeHealth);
}
public class System.Fabric.Health.PartitionHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static PartitionHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.PartitionHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public Guid PartitionId { get; private set; }
    public PartitionHealthReport(Guid partitionId, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.PartitionHealthState : EntityHealthState {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public Guid PartitionId { get; internal set; }
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    public virtual string ToString();
    internal static IList`1<PartitionHealthState> FromNativeList(IntPtr nativeListPtr);
    internal static PartitionHealthState FromNative(FABRIC_PARTITION_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.PartitionHealthStateChunk : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaHealthStateChunkList <ReplicaHealthStateChunks>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public HealthState HealthState { get; internal set; }
    public ReplicaHealthStateChunkList ReplicaHealthStateChunks { get; internal set; }
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public ReplicaHealthStateChunkList get_ReplicaHealthStateChunks();
    [CompilerGeneratedAttribute]
internal void set_ReplicaHealthStateChunks(ReplicaHealthStateChunkList value);
    public virtual string ToString();
    internal static PartitionHealthStateChunk FromNative(FABRIC_PARTITION_HEALTH_STATE_CHUNK nativePartitionHealthStateChunk);
}
public class System.Fabric.Health.PartitionHealthStateChunkList : HealthStateChunkList`1<PartitionHealthStateChunk> {
    internal PartitionHealthStateChunkList(IList`1<PartitionHealthStateChunk> list);
    internal static PartitionHealthStateChunkList CreateFromNativeList(IntPtr nativeListPtr);
}
public class System.Fabric.Health.PartitionHealthStateFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionIdFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaHealthStateFilter> <ReplicaFilters>k__BackingField;
    public HealthStateFilter HealthStateFilter { get; public set; }
    public Guid PartitionIdFilter { get; public set; }
    public IList`1<ReplicaHealthStateFilter> ReplicaFilters { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilter(HealthStateFilter value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionIdFilter();
    [CompilerGeneratedAttribute]
public void set_PartitionIdFilter(Guid value);
    [CompilerGeneratedAttribute]
public IList`1<ReplicaHealthStateFilter> get_ReplicaFilters();
    [CompilerGeneratedAttribute]
internal void set_ReplicaFilters(IList`1<ReplicaHealthStateFilter> value);
    public virtual string ToString();
    internal static IntPtr ToNativeList(PinCollection pinCollection, IList`1<PartitionHealthStateFilter> partitionList);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Health.PartitionHealthStateList : object {
    private IList`1<PartitionHealthState> list;
    public PartitionHealthState Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal PartitionHealthStateList(IList`1<PartitionHealthState> list);
    public sealed virtual int IndexOf(PartitionHealthState item);
    public sealed virtual void Insert(int index, PartitionHealthState item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual PartitionHealthState get_Item(int index);
    public sealed virtual void set_Item(int index, PartitionHealthState value);
    public sealed virtual void Add(PartitionHealthState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(PartitionHealthState item);
    public sealed virtual void CopyTo(PartitionHealthState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(PartitionHealthState item);
    public sealed virtual IEnumerator`1<PartitionHealthState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static PartitionHealthStateList FromNativeList(FABRIC_PARTITION_HEALTH_STATE_LIST* nativeList);
}
public class System.Fabric.Health.PartitionHealthStatesFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.PartitionHealthStatisticsFilter : object {
    [CompilerGeneratedAttribute]
private bool <ExcludeHealthStatistics>k__BackingField;
    public bool ExcludeHealthStatistics { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExcludeHealthStatistics();
    [CompilerGeneratedAttribute]
public void set_ExcludeHealthStatistics(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.PartitionsHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyPartitionsPerService>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyPartitionsPerService { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyPartitionsPerService();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyPartitionsPerService(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static PartitionsHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
[KnownTypeAttribute("System.Fabric.Health.StatefulServiceReplicaHealth")]
[KnownTypeAttribute("System.Fabric.Health.StatelessServiceInstanceHealth")]
public abstract class System.Fabric.Health.ReplicaHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private ServiceKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceKind Kind { get; private set; }
    public Guid PartitionId { get; internal set; }
    [JsonCustomizationAttribute]
public long Id { get; internal set; }
    internal ReplicaHealth(ServiceKind kind);
    [CompilerGeneratedAttribute]
public ServiceKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ServiceKind value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(long value);
    public virtual string ToString();
    internal static ReplicaHealth FromNativeResult(IFabricReplicaHealthResult nativeResult);
    private static ReplicaHealth FromNative(FABRIC_REPLICA_HEALTH* nativeHealth);
}
public class System.Fabric.Health.ReplicaHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaOrInstanceId>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public long ReplicaOrInstanceId { get; internal set; }
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public long get_ReplicaOrInstanceId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaOrInstanceId(long value);
    internal static ReplicaHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
[KnownTypeAttribute("System.Fabric.Health.StatefulServiceReplicaHealthState")]
[KnownTypeAttribute("System.Fabric.Health.StatelessServiceInstanceHealthState")]
public abstract class System.Fabric.Health.ReplicaHealthState : EntityHealthState {
    [CompilerGeneratedAttribute]
private ServiceKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceKind Kind { get; private set; }
    public Guid PartitionId { get; internal set; }
    [JsonCustomizationAttribute]
public long Id { get; internal set; }
    protected ReplicaHealthState(ServiceKind kind);
    [CompilerGeneratedAttribute]
public ServiceKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ServiceKind value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(long value);
    internal static IList`1<ReplicaHealthState> FromNativeList(IntPtr nativeListPtr);
    internal static ReplicaHealthState FromNative(FABRIC_REPLICA_HEALTH_STATE nativeState);
    [DerivedTypeResolverAttribute("ServiceKind")]
internal static Type ResolveDerivedClass(ServiceKind kind);
}
public class System.Fabric.Health.ReplicaHealthStateChunk : object {
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaOrInstanceId>k__BackingField;
    public HealthState HealthState { get; internal set; }
    public long ReplicaOrInstanceId { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public long get_ReplicaOrInstanceId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaOrInstanceId(long value);
    public virtual string ToString();
    internal static ReplicaHealthStateChunk FromNative(FABRIC_REPLICA_HEALTH_STATE_CHUNK nativeReplicaHealthStateChunk);
}
public class System.Fabric.Health.ReplicaHealthStateChunkList : HealthStateChunkList`1<ReplicaHealthStateChunk> {
    internal ReplicaHealthStateChunkList(IList`1<ReplicaHealthStateChunk> list);
    internal static ReplicaHealthStateChunkList CreateFromNativeList(IntPtr nativeListPtr);
}
public class System.Fabric.Health.ReplicaHealthStateFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaOrInstanceIdFilter>k__BackingField;
    public HealthStateFilter HealthStateFilter { get; public set; }
    public long ReplicaOrInstanceIdFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilter(HealthStateFilter value);
    [CompilerGeneratedAttribute]
public long get_ReplicaOrInstanceIdFilter();
    [CompilerGeneratedAttribute]
public void set_ReplicaOrInstanceIdFilter(long value);
    public virtual string ToString();
    internal static IntPtr ToNativeList(PinCollection pinCollection, IList`1<ReplicaHealthStateFilter> replicaList);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Health.ReplicaHealthStateList : object {
    private IList`1<ReplicaHealthState> list;
    public ReplicaHealthState Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ReplicaHealthStateList(IList`1<ReplicaHealthState> list);
    public sealed virtual int IndexOf(ReplicaHealthState item);
    public sealed virtual void Insert(int index, ReplicaHealthState item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ReplicaHealthState get_Item(int index);
    public sealed virtual void set_Item(int index, ReplicaHealthState value);
    public sealed virtual void Add(ReplicaHealthState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ReplicaHealthState item);
    public sealed virtual void CopyTo(ReplicaHealthState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ReplicaHealthState item);
    public sealed virtual IEnumerator`1<ReplicaHealthState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ReplicaHealthStateList FromNativeList(FABRIC_REPLICA_HEALTH_STATE_LIST* nativeList);
}
public class System.Fabric.Health.ReplicaHealthStatesFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.ReplicasHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyReplicasPerPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyReplicasPerPartition { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyReplicasPerPartition();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyReplicasPerPartition(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static ReplicasHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.ServiceHealth : EntityHealth {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PartitionHealthState> <PartitionHealthStates>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatistics <HealthStatistics>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ServiceName { get; internal set; }
    public IList`1<PartitionHealthState> PartitionHealthStates { get; internal set; }
    [JsonCustomizationAttribute]
public HealthStatistics HealthStatistics { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public IList`1<PartitionHealthState> get_PartitionHealthStates();
    [CompilerGeneratedAttribute]
internal void set_PartitionHealthStates(IList`1<PartitionHealthState> value);
    [CompilerGeneratedAttribute]
public HealthStatistics get_HealthStatistics();
    [CompilerGeneratedAttribute]
internal void set_HealthStatistics(HealthStatistics value);
    public virtual string ToString();
    internal static ServiceHealth FromNativeResult(IFabricServiceHealthResult nativeResult);
    private static ServiceHealth FromNative(FABRIC_SERVICE_HEALTH* nativeHealth);
}
public class System.Fabric.Health.ServiceHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public Uri ServiceName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static ServiceHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.ServiceHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    public Uri ServiceName { get; private set; }
    public ServiceHealthReport(Uri serviceName, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.ServiceHealthState : EntityHealthState {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    public Uri ServiceName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    public virtual string ToString();
    internal static IList`1<ServiceHealthState> FromNativeList(IntPtr nativeListPtr);
    internal static ServiceHealthState FromNative(FABRIC_SERVICE_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.ServiceHealthStateChunk : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionHealthStateChunkList <PartitionHealthStateChunks>k__BackingField;
    public Uri ServiceName { get; internal set; }
    public HealthState HealthState { get; internal set; }
    public PartitionHealthStateChunkList PartitionHealthStateChunks { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public PartitionHealthStateChunkList get_PartitionHealthStateChunks();
    [CompilerGeneratedAttribute]
internal void set_PartitionHealthStateChunks(PartitionHealthStateChunkList value);
    public virtual string ToString();
    internal static ServiceHealthStateChunk FromNative(FABRIC_SERVICE_HEALTH_STATE_CHUNK nativeServiceHealthStateChunk);
}
public class System.Fabric.Health.ServiceHealthStateChunkList : HealthStateChunkList`1<ServiceHealthStateChunk> {
    internal ServiceHealthStateChunkList(IList`1<ServiceHealthStateChunk> list);
    internal static ServiceHealthStateChunkList CreateFromNativeList(IntPtr nativeListPtr);
}
public class System.Fabric.Health.ServiceHealthStateFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceNameFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PartitionHealthStateFilter> <PartitionFilters>k__BackingField;
    public HealthStateFilter HealthStateFilter { get; public set; }
    [JsonCustomizationAttribute]
public Uri ServiceNameFilter { get; public set; }
    public IList`1<PartitionHealthStateFilter> PartitionFilters { get; internal set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilter();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilter(HealthStateFilter value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceNameFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceNameFilter(Uri value);
    [CompilerGeneratedAttribute]
public IList`1<PartitionHealthStateFilter> get_PartitionFilters();
    [CompilerGeneratedAttribute]
internal void set_PartitionFilters(IList`1<PartitionHealthStateFilter> value);
    public virtual string ToString();
    internal static IntPtr ToNativeList(PinCollection pinCollection, IList`1<ServiceHealthStateFilter> serviceList);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Health.ServiceHealthStateList : object {
    private IList`1<ServiceHealthState> list;
    public ServiceHealthState Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ServiceHealthStateList(IList`1<ServiceHealthState> list);
    public sealed virtual int IndexOf(ServiceHealthState item);
    public sealed virtual void Insert(int index, ServiceHealthState item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ServiceHealthState get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceHealthState value);
    public sealed virtual void Add(ServiceHealthState item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceHealthState item);
    public sealed virtual void CopyTo(ServiceHealthState[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ServiceHealthState item);
    public sealed virtual IEnumerator`1<ServiceHealthState> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ServiceHealthStateList FromNativeList(FABRIC_SERVICE_HEALTH_STATE_LIST* nativeList);
}
public class System.Fabric.Health.ServiceHealthStatesFilter : object {
    [CompilerGeneratedAttribute]
private HealthStateFilter <HealthStateFilterValue>k__BackingField;
    public HealthStateFilter HealthStateFilterValue { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Use HealthStateFilterValue instead.")]
public long HealthStateFilter { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStateFilter get_HealthStateFilterValue();
    [CompilerGeneratedAttribute]
public void set_HealthStateFilterValue(HealthStateFilter value);
    public long get_HealthStateFilter();
    public void set_HealthStateFilter(long value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.ServiceHealthStatisticsFilter : object {
    [CompilerGeneratedAttribute]
private bool <ExcludeHealthStatistics>k__BackingField;
    public bool ExcludeHealthStatistics { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExcludeHealthStatistics();
    [CompilerGeneratedAttribute]
public void set_ExcludeHealthStatistics(bool value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Health.ServicesHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyServices>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public string ServiceTypeName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyServices { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
internal void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyServices();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyServices(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static ServicesHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.ServiceTypeHealthPolicy : object {
    private byte maxPercentUnhealthyServices;
    private byte maxPercentUnhealthyPartitionsPerService;
    private byte maxPercentUnhealthyReplicasPerPartition;
    public byte MaxPercentUnhealthyServices { get; public set; }
    public byte MaxPercentUnhealthyPartitionsPerService { get; public set; }
    public byte MaxPercentUnhealthyReplicasPerPartition { get; public set; }
    public byte get_MaxPercentUnhealthyServices();
    public void set_MaxPercentUnhealthyServices(byte value);
    public byte get_MaxPercentUnhealthyPartitionsPerService();
    public void set_MaxPercentUnhealthyPartitionsPerService(byte value);
    public byte get_MaxPercentUnhealthyReplicasPerPartition();
    public void set_MaxPercentUnhealthyReplicasPerPartition(byte value);
    public virtual string ToString();
    internal static bool AreEqualWithNullAsDefault(ServiceTypeHealthPolicy current, ServiceTypeHealthPolicy other);
    internal static bool AreEqual(ServiceTypeHealthPolicy current, ServiceTypeHealthPolicy other);
    internal static ServiceTypeHealthPolicy FromNative(IntPtr nativeServiceTypeHealthPolicyPtr);
    internal IntPtr ToNative(PinCollection pin);
    internal static void FromNativeMap(IntPtr nativeServiceTypeHealthPolicyMapPtr, IDictionary`2<string, ServiceTypeHealthPolicy> map);
    internal static IntPtr ToNativeMap(PinCollection pin, IDictionary`2<string, ServiceTypeHealthPolicy> map);
}
public class System.Fabric.Health.StatefulServiceReplicaHealth : ReplicaHealth {
    public long ReplicaId { get; internal set; }
    public long get_ReplicaId();
    internal void set_ReplicaId(long value);
    internal static StatefulServiceReplicaHealth FromNative(FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH* nativeHealth);
}
public class System.Fabric.Health.StatefulServiceReplicaHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    public Guid PartitionId { get; private set; }
    public long ReplicaId { get; private set; }
    public StatefulServiceReplicaHealthReport(Guid partitionId, long replicaId, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
private void set_ReplicaId(long value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.StatefulServiceReplicaHealthState : ReplicaHealthState {
    public long ReplicaId { get; internal set; }
    public long get_ReplicaId();
    internal void set_ReplicaId(long value);
    internal static StatefulServiceReplicaHealthState FromNative(FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.StatelessServiceInstanceHealth : ReplicaHealth {
    public long InstanceId { get; internal set; }
    public long get_InstanceId();
    internal void set_InstanceId(long value);
    internal static StatelessServiceInstanceHealth FromNative(FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH* nativeHealth);
}
public class System.Fabric.Health.StatelessServiceInstanceHealthReport : HealthReport {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InstanceId>k__BackingField;
    public Guid PartitionId { get; private set; }
    public long InstanceId { get; private set; }
    public StatelessServiceInstanceHealthReport(Guid partitionId, long instanceId, HealthInformation healthInformation);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(long value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
}
public class System.Fabric.Health.StatelessServiceInstanceHealthState : ReplicaHealthState {
    [JsonCustomizationAttribute]
public long InstanceId { get; internal set; }
    public long get_InstanceId();
    internal void set_InstanceId(long value);
    internal static StatelessServiceInstanceHealthState FromNative(FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE nativeState);
}
public class System.Fabric.Health.SystemApplicationHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static SystemApplicationHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private string <UpgradeDomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BaselineErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BaselineTotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUpgradeDomainDeltaUnhealthyNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    public string UpgradeDomainName { get; internal set; }
    public long BaselineErrorCount { get; internal set; }
    public long BaselineTotalCount { get; internal set; }
    public long TotalCount { get; internal set; }
    public byte MaxPercentUpgradeDomainDeltaUnhealthyNodes { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UpgradeDomainName();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomainName(string value);
    [CompilerGeneratedAttribute]
public long get_BaselineErrorCount();
    [CompilerGeneratedAttribute]
internal void set_BaselineErrorCount(long value);
    [CompilerGeneratedAttribute]
public long get_BaselineTotalCount();
    [CompilerGeneratedAttribute]
internal void set_BaselineTotalCount(long value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUpgradeDomainDeltaUnhealthyNodes();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUpgradeDomainDeltaUnhealthyNodes(byte value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    internal static UpgradeDomainDeltaNodesCheckHealthEvaluation FromNative(IntPtr nativeUpgradeDomainDeltaNodesCheckHealthEvaluationPtr);
}
public class System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private string <UpgradeDomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyDeployedApplications>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public string UpgradeDomainName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyDeployedApplications { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UpgradeDomainName();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomainName(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyDeployedApplications();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyDeployedApplications(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static UpgradeDomainDeployedApplicationsHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
public class System.Fabric.Health.UpgradeDomainNodesHealthEvaluation : HealthEvaluation {
    [CompilerGeneratedAttribute]
private string <UpgradeDomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HealthEvaluation> <UnhealthyEvaluations>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxPercentUnhealthyNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    public string UpgradeDomainName { get; internal set; }
    public IList`1<HealthEvaluation> UnhealthyEvaluations { get; internal set; }
    public byte MaxPercentUnhealthyNodes { get; internal set; }
    public long TotalCount { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UpgradeDomainName();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomainName(string value);
    [CompilerGeneratedAttribute]
public IList`1<HealthEvaluation> get_UnhealthyEvaluations();
    [CompilerGeneratedAttribute]
internal void set_UnhealthyEvaluations(IList`1<HealthEvaluation> value);
    [CompilerGeneratedAttribute]
public byte get_MaxPercentUnhealthyNodes();
    [CompilerGeneratedAttribute]
internal void set_MaxPercentUnhealthyNodes(byte value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(long value);
    internal static UpgradeDomainNodesHealthEvaluation FromNative(IntPtr nativeHealthEvaluationValuePtr);
}
internal static class System.Fabric.Hosting.Configuration.ConfigurationStrings : object {
    public static string ThreadPoolThreadCount;
    public static string AppDomainManagerType;
    public static string AppDomainManagerAssembly;
}
internal class System.Fabric.Hosting.FabricHostEntryPoint : object {
    private AssemblyResolver assemblyResolver;
    private Dictionary`2<string, ActivatedCodePackage> activeCodePackages;
    private bool disposed;
    public int ActiveCodePackageCount { get; }
    public sealed virtual int get_ActiveCodePackageCount();
    public sealed virtual void Start(string logDirectory, string workDirectory, string appDomainConfigFilePath, string hostEntryPointManagerUniqueId);
    public sealed virtual void ActivateCodePackage(string activationContextId, string codePackageNameToActivate, IntPtr nativeCodePackageActivationContext, IntPtr nativeFabricRuntime);
    public sealed virtual void DeactivateCodePackage(string activationContextId);
    public sealed virtual void Stop();
    public sealed virtual void Dispose();
    internal void ActivateCodePackageInternal(string activationContextId, string codePackageName, CodePackageActivationContext activationContext, IFabricRuntime fabricRuntimePointer);
    private void ThrowIfDisposed();
    private void Dispose(bool disposing);
}
internal interface System.Fabric.Hosting.IFabricHostEntryPoint {
    public int ActiveCodePackageCount { get; }
    public abstract virtual int get_ActiveCodePackageCount();
    public abstract virtual void Start(string logDirectory, string workDirectory, string appDomainConfigFilePath, string hostEntryPointManagerUniqueId);
    public abstract virtual void ActivateCodePackage(string activationContextId, string codePackageNameToActivate, IntPtr nativeCodePackageActivationContext, IntPtr nativeFabricRuntime);
    public abstract virtual void DeactivateCodePackage(string activationContextId);
    public abstract virtual void Stop();
}
[ComVisibleAttribute("True")]
[GuidAttribute("918C9669-A03B-4A1D-8FEB-C732B1C0AF73")]
[InterfaceTypeAttribute("1")]
internal interface System.Fabric.Hosting.IHostEntryPointManager {
    public abstract virtual void Start(string configurationFilePath);
    public abstract virtual void Stop();
    public abstract virtual int GetOrCreateAppDomainForCodePackage(string activationContextId, int isolationPolicy, string logDirectory, string workDirectory);
    public abstract virtual IFabricAsyncOperationContext BeginActivate(string activationContextId, string logDirectory, string workDirectory, string codePackageNameToActivate, string codePackageDirectory, int isolationPolicy, IntPtr codePackageActivationContext, IntPtr fabricRuntime, IFabricAsyncOperationCallback asyncOperationCallback);
    public abstract virtual void EndActivate(IntPtr asyncOperationContext);
    public abstract virtual IFabricAsyncOperationContext BeginDeactivate(string activationContextId, IFabricAsyncOperationCallback asyncOperationCallback);
    public abstract virtual void EndDeactivate(IntPtr asyncOperationContext, Int32& appDomainId, String& codePackageDirectory, String& workDirectory);
}
internal class System.Fabric.HostingSettings : object {
    [CompilerGeneratedAttribute]
private string <ContainerPackageRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerFabricBinRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerFabricLogRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerAppDeploymentRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContainerNetwork>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNatNetwork>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DockerRequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DockerTraceSensitiveValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableContainerLogMount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableContainerRuntimeRequestTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ContainerImageDownloadTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ContainerDeactivationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerDeactivationRetryDelayInSec>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerTerminationMaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerEventManagerMaxContinuousFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerEventManagerFailureBackoffInSec>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDockerHealthCheckIntegration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerServiceNamedPipeOrUnixSocketAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeadContainerCleanupUntilInMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerCleanupScanIntervalInMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContainerRepositoryAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContainerRepositoryPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultContainerRepositoryPasswordEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerRepositoryCredentialTokenEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultMSIEndpointForTokenAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultACRTokenCacheTimeInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContainerRepositoryPasswordType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDockerRequestRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LocalNatIpProviderEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalNatIpProviderNetworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCriContainerRuntimeEnabledOnAnyNodeType>k__BackingField;
    internal string ContainerPackageRootFolder { get; private set; }
    internal string ContainerFabricBinRootFolder { get; private set; }
    internal string ContainerFabricLogRootFolder { get; private set; }
    internal string ContainerAppDeploymentRootFolder { get; private set; }
    internal string DefaultContainerNetwork { get; private set; }
    internal string DefaultNatNetwork { get; private set; }
    internal TimeSpan DockerRequestTimeout { get; private set; }
    internal bool DockerTraceSensitiveValues { get; private set; }
    internal bool EnableContainerLogMount { get; private set; }
    internal bool EnableContainerRuntimeRequestTracing { get; private set; }
    internal TimeSpan ContainerImageDownloadTimeout { get; private set; }
    internal TimeSpan ContainerDeactivationTimeout { get; private set; }
    internal int ContainerDeactivationRetryDelayInSec { get; private set; }
    internal int ContainerTerminationMaxRetryCount { get; private set; }
    internal int ContainerEventManagerMaxContinuousFailure { get; private set; }
    internal int ContainerEventManagerFailureBackoffInSec { get; private set; }
    internal bool EnableDockerHealthCheckIntegration { get; private set; }
    internal string ContainerServiceNamedPipeOrUnixSocketAddress { get; private set; }
    internal int DeadContainerCleanupUntilInMinutes { get; private set; }
    internal int ContainerCleanupScanIntervalInMinutes { get; private set; }
    internal string DefaultContainerRepositoryAccountName { get; private set; }
    internal string DefaultContainerRepositoryPassword { get; private set; }
    internal bool IsDefaultContainerRepositoryPasswordEncrypted { get; private set; }
    internal string ContainerRepositoryCredentialTokenEndPoint { get; private set; }
    internal string DefaultMSIEndpointForTokenAuthentication { get; private set; }
    internal TimeSpan DefaultACRTokenCacheTimeInSeconds { get; private set; }
    internal string DefaultContainerRepositoryPasswordType { get; private set; }
    internal bool DisableDockerRequestRetry { get; private set; }
    internal bool LocalNatIpProviderEnabled { get; private set; }
    internal string LocalNatIpProviderNetworkName { get; private set; }
    internal bool IsCriContainerRuntimeEnabledOnAnyNodeType { get; private set; }
    [CompilerGeneratedAttribute]
internal string get_ContainerPackageRootFolder();
    [CompilerGeneratedAttribute]
private void set_ContainerPackageRootFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_ContainerFabricBinRootFolder();
    [CompilerGeneratedAttribute]
private void set_ContainerFabricBinRootFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_ContainerFabricLogRootFolder();
    [CompilerGeneratedAttribute]
private void set_ContainerFabricLogRootFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_ContainerAppDeploymentRootFolder();
    [CompilerGeneratedAttribute]
private void set_ContainerAppDeploymentRootFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_DefaultContainerNetwork();
    [CompilerGeneratedAttribute]
private void set_DefaultContainerNetwork(string value);
    [CompilerGeneratedAttribute]
internal string get_DefaultNatNetwork();
    [CompilerGeneratedAttribute]
private void set_DefaultNatNetwork(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_DockerRequestTimeout();
    [CompilerGeneratedAttribute]
private void set_DockerRequestTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal bool get_DockerTraceSensitiveValues();
    [CompilerGeneratedAttribute]
private void set_DockerTraceSensitiveValues(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableContainerLogMount();
    [CompilerGeneratedAttribute]
private void set_EnableContainerLogMount(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableContainerRuntimeRequestTracing();
    [CompilerGeneratedAttribute]
private void set_EnableContainerRuntimeRequestTracing(bool value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_ContainerImageDownloadTimeout();
    [CompilerGeneratedAttribute]
private void set_ContainerImageDownloadTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_ContainerDeactivationTimeout();
    [CompilerGeneratedAttribute]
private void set_ContainerDeactivationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal int get_ContainerDeactivationRetryDelayInSec();
    [CompilerGeneratedAttribute]
private void set_ContainerDeactivationRetryDelayInSec(int value);
    [CompilerGeneratedAttribute]
internal int get_ContainerTerminationMaxRetryCount();
    [CompilerGeneratedAttribute]
private void set_ContainerTerminationMaxRetryCount(int value);
    [CompilerGeneratedAttribute]
internal int get_ContainerEventManagerMaxContinuousFailure();
    [CompilerGeneratedAttribute]
private void set_ContainerEventManagerMaxContinuousFailure(int value);
    [CompilerGeneratedAttribute]
internal int get_ContainerEventManagerFailureBackoffInSec();
    [CompilerGeneratedAttribute]
private void set_ContainerEventManagerFailureBackoffInSec(int value);
    [CompilerGeneratedAttribute]
internal bool get_EnableDockerHealthCheckIntegration();
    [CompilerGeneratedAttribute]
private void set_EnableDockerHealthCheckIntegration(bool value);
    [CompilerGeneratedAttribute]
internal string get_ContainerServiceNamedPipeOrUnixSocketAddress();
    [CompilerGeneratedAttribute]
private void set_ContainerServiceNamedPipeOrUnixSocketAddress(string value);
    [CompilerGeneratedAttribute]
internal int get_DeadContainerCleanupUntilInMinutes();
    [CompilerGeneratedAttribute]
private void set_DeadContainerCleanupUntilInMinutes(int value);
    [CompilerGeneratedAttribute]
internal int get_ContainerCleanupScanIntervalInMinutes();
    [CompilerGeneratedAttribute]
private void set_ContainerCleanupScanIntervalInMinutes(int value);
    [CompilerGeneratedAttribute]
internal string get_DefaultContainerRepositoryAccountName();
    [CompilerGeneratedAttribute]
private void set_DefaultContainerRepositoryAccountName(string value);
    [CompilerGeneratedAttribute]
internal string get_DefaultContainerRepositoryPassword();
    [CompilerGeneratedAttribute]
private void set_DefaultContainerRepositoryPassword(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultContainerRepositoryPasswordEncrypted();
    [CompilerGeneratedAttribute]
private void set_IsDefaultContainerRepositoryPasswordEncrypted(bool value);
    [CompilerGeneratedAttribute]
internal string get_ContainerRepositoryCredentialTokenEndPoint();
    [CompilerGeneratedAttribute]
private void set_ContainerRepositoryCredentialTokenEndPoint(string value);
    [CompilerGeneratedAttribute]
internal string get_DefaultMSIEndpointForTokenAuthentication();
    [CompilerGeneratedAttribute]
private void set_DefaultMSIEndpointForTokenAuthentication(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_DefaultACRTokenCacheTimeInSeconds();
    [CompilerGeneratedAttribute]
private void set_DefaultACRTokenCacheTimeInSeconds(TimeSpan value);
    [CompilerGeneratedAttribute]
internal string get_DefaultContainerRepositoryPasswordType();
    [CompilerGeneratedAttribute]
private void set_DefaultContainerRepositoryPasswordType(string value);
    [CompilerGeneratedAttribute]
internal bool get_DisableDockerRequestRetry();
    [CompilerGeneratedAttribute]
private void set_DisableDockerRequestRetry(bool value);
    [CompilerGeneratedAttribute]
internal bool get_LocalNatIpProviderEnabled();
    [CompilerGeneratedAttribute]
private void set_LocalNatIpProviderEnabled(bool value);
    [CompilerGeneratedAttribute]
internal string get_LocalNatIpProviderNetworkName();
    [CompilerGeneratedAttribute]
private void set_LocalNatIpProviderNetworkName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsCriContainerRuntimeEnabledOnAnyNodeType();
    [CompilerGeneratedAttribute]
private void set_IsCriContainerRuntimeEnabledOnAnyNodeType(bool value);
    internal static HostingSettings LoadHostingSettings();
}
public enum System.Fabric.HostIsolationMode : Enum {
    public int value__;
    public static HostIsolationMode None;
    public static HostIsolationMode Process;
    public static HostIsolationMode HyperV;
}
public enum System.Fabric.HostType : Enum {
    public int value__;
    public static HostType Invalid;
    public static HostType ExeHost;
    public static HostType ContainerHost;
}
public interface System.Fabric.IAtomicGroupStateProvider {
    public abstract virtual Task AtomicGroupCommitAsync(long atomicGroupId, long commitSequenceNumber, CancellationToken cancellationToken);
    public abstract virtual Task AtomicGroupRollbackAsync(long atomicGroupId, long rollbackSequenceNumber, CancellationToken cancellationToken);
    public abstract virtual Task AtomicGroupUndoProgressAsync(long fromCommitSequenceNumber, CancellationToken cancellationToken);
}
public interface System.Fabric.IAtomicGroupStateReplicator {
    public abstract virtual long CreateAtomicGroup();
    public abstract virtual Task`1<long> ReplicateAtomicGroupOperationAsync(long atomicGroupId, OperationData operationData, CancellationToken cancellationToken, Int64& sequenceNumber);
    public abstract virtual Task`1<long> ReplicateAtomicGroupCommitAsync(long atomicGroupId, CancellationToken cancellationToken, Int64& commitSequenceNumber);
    public abstract virtual Task`1<long> ReplicateAtomicGroupRollbackAsync(long atomicGroupId, CancellationToken cancellationToken, Int64& rollbackSequenceNumber);
}
public interface System.Fabric.IByteSerializable {
    public abstract virtual Byte[] ToBytes();
    public abstract virtual void FromBytes(Byte[] data);
}
public interface System.Fabric.ICodePackageActivationContext {
    public string WorkDirectory { get; }
    public string LogDirectory { get; }
    public string TempDirectory { get; }
    public string ContextId { get; }
    public string CodePackageName { get; }
    public string CodePackageVersion { get; }
    public string ApplicationName { get; }
    public string ApplicationTypeName { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CodePackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CodePackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CodePackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CodePackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CodePackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CodePackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<CodePackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigurationPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigurationPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigurationPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigurationPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigurationPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigurationPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<ConfigurationPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataPackageAddedEvent(EventHandler`1<PackageAddedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataPackageRemovedEvent(EventHandler`1<PackageRemovedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<DataPackage>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataPackageModifiedEvent(EventHandler`1<PackageModifiedEventArgs`1<DataPackage>> value);
    public abstract virtual string get_WorkDirectory();
    public abstract virtual string get_LogDirectory();
    public abstract virtual string get_TempDirectory();
    public abstract virtual string get_ContextId();
    public abstract virtual string get_CodePackageName();
    public abstract virtual string get_CodePackageVersion();
    public abstract virtual string get_ApplicationName();
    public abstract virtual string get_ApplicationTypeName();
    public abstract virtual KeyedCollection`2<string, ServiceTypeDescription> GetServiceTypes();
    public abstract virtual KeyedCollection`2<string, ServiceGroupTypeDescription> GetServiceGroupTypes();
    public abstract virtual ApplicationPrincipalsDescription GetApplicationPrincipals();
    public abstract virtual KeyedCollection`2<string, EndpointResourceDescription> GetEndpoints();
    public abstract virtual EndpointResourceDescription GetEndpoint(string endpointName);
    public abstract virtual IList`1<string> GetCodePackageNames();
    public abstract virtual IList`1<string> GetConfigurationPackageNames();
    public abstract virtual IList`1<string> GetDataPackageNames();
    public abstract virtual CodePackage GetCodePackageObject(string packageName);
    public abstract virtual ConfigurationPackage GetConfigurationPackageObject(string packageName);
    public abstract virtual DataPackage GetDataPackageObject(string packageName);
    public abstract virtual string GetServiceManifestName();
    public abstract virtual string GetServiceManifestVersion();
    public abstract virtual void ReportApplicationHealth(HealthInformation healthInfo);
    public abstract virtual void ReportApplicationHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public abstract virtual void ReportDeployedApplicationHealth(HealthInformation healthInfo);
    public abstract virtual void ReportDeployedApplicationHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public abstract virtual void ReportDeployedServicePackageHealth(HealthInformation healthInfo);
    public abstract virtual void ReportDeployedServicePackageHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
}
public interface System.Fabric.ICodePackageActivationContext2 {
    public string ServiceListenAddress { get; }
    public string ServicePublishAddress { get; }
    public abstract virtual string get_ServiceListenAddress();
    public abstract virtual string get_ServicePublishAddress();
}
public interface System.Fabric.ICodePackageActivationContext3 {
    public abstract virtual string GetDirectory(string logicalDirectoryName);
}
internal interface System.Fabric.IContainerActivatorService {
    public abstract virtual void StartEventMonitoring(bool isContainerServiceManaged, ulong sinceTime);
    public abstract virtual Task`1<string> ActivateContainerAsync(ContainerActivationArgs activationArgs, TimeSpan timeout);
    public abstract virtual Task ExecuteUpdateRoutesAsync(ContainerUpdateRouteArgs updateRouteArgs, TimeSpan timeout);
    public abstract virtual Task DeactivateContainerAsync(ContainerDeactivationArgs deactivationArgs, TimeSpan timeout);
    public abstract virtual Task DownloadImagesAsync(List`1<ContainerImageDescription> imageDescriptions, TimeSpan timeout);
    public abstract virtual Task DeleteImagesAsync(List`1<string> imagesNames, TimeSpan timeout);
    public abstract virtual Task`1<ContainerApiExecutionResponse> InvokeContainerApiAsync(ContainerApiExecutionArgs apiExecArgs, TimeSpan timeout);
}
internal interface System.Fabric.IFaultAnalysisService {
    public abstract virtual Task InvokeDataLossAsync(InvokeDataLossDescription invokeDataLossDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<PartitionDataLossProgress> GetInvokeDataLossProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task InvokeQuorumLossAsync(InvokeQuorumLossDescription invokeQuorumLossDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<PartitionQuorumLossProgress> GetInvokeQuorumLossProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task RestartPartitionAsync(RestartPartitionDescription restartPartitionDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<PartitionRestartProgress> GetRestartPartitionProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<TestCommandQueryResult> GetTestCommandListAsync(TestCommandListDescription operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task CancelTestCommandAsync(CancelTestCommandDescription description, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetStoppedNodeListAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task StartNodeTransitionAsync(NodeTransitionDescription description, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<NodeTransitionProgress> GetNodeTransitionProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task StartChaosAsync(StartChaosDescription startChaosDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task StopChaosAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<ChaosReport> GetChaosReportAsync(GetChaosReportDescription getChaosReportDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> CallSystemService(string action, string inpubBlob, TimeSpan timeout, CancellationToken cancellationToken);
}
internal interface System.Fabric.IGatewayResourceManager {
    public abstract virtual Task`1<string> UpdateOrCreateAsync(string resourceDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<string>> QueryAsync(string queryDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(string resourceName, TimeSpan timeout, CancellationToken cancellationToken);
}
public interface System.Fabric.IImageBuilder {
    public abstract virtual Task ImageBuilderCommand(string command, TimeSpan timeout, CancellationToken cancellationToken);
}
public interface System.Fabric.IImageStoreProgressHandler {
    public abstract virtual TimeSpan GetUpdateInterval();
    public abstract virtual void UpdateProgress(long completedItems, long totalItems, ProgressUnitType itemType);
}
internal interface System.Fabric.IInfrastructureService {
    public abstract virtual Task`1<string> RunCommandAsync(bool isAdminCommand, string command, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task ReportStartTaskSuccessAsync(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task ReportFinishTaskSuccessAsync(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task ReportTaskFailureAsync(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
}
internal interface System.Fabric.IInternalStatefulServiceReplica {
    public abstract virtual object GetStatus();
}
internal class System.Fabric.ImageBuilderBroker : object {
    private static string TraceType;
    private static InteropApi ThreadErrorMessageSetter;
    private IImageBuilder service;
    internal IImageBuilder Service { get; }
    internal ImageBuilderBroker(IImageBuilder service);
    private static ImageBuilderBroker();
    internal IImageBuilder get_Service();
    public sealed virtual IFabricAsyncOperationContext BeginImageBuilderCommand(IntPtr command, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndImageBuilderCommand(IFabricAsyncOperationContext context);
    private Task ImageBuilderCommand(string command, TimeSpan timeout, CancellationToken cancellationToken);
}
internal class System.Fabric.ImageStore.ChecksumUtility : object {
    public static string ComputeHash(Stream stream);
    public static string ComputeHash(string resourcePath, bool imageStoreServiceEnabled);
    public static Byte[] ComputeHashOnDirectory(string directory, bool imageStoreServiceEnabled);
    private static Byte[] ComputeHashOnFile(string file);
    private static Byte[] ComputeHashOnStream(Stream stream);
}
internal class System.Fabric.ImageStore.DsmsXStoreProxy : XStoreProxy {
    private static string SystemFabricManagementAssemblyName;
    private static string DsmsTypeNamespace;
    private static string SchemaTag;
    public DsmsXStoreProxy(string imageStoreUri, string localRoot);
    private static DsmsXStoreProxy();
    public static bool IsDsmsXStoreUri(string imageStoreUri);
    protected virtual void Initialize(string imageStoreUri, string localRoot);
}
internal static class System.Fabric.ImageStore.ExceptionHandler : object {
    public static bool IsFatalException(Exception e);
    public static bool IsIOException(Exception e);
}
internal class System.Fabric.ImageStore.FabricImageStoreIOException : Exception {
    public FabricImageStoreIOException(string message);
    public FabricImageStoreIOException(Exception inner);
    public FabricImageStoreIOException(string message, Exception inner);
    protected FabricImageStoreIOException(SerializationInfo info, StreamingContext context);
}
internal class System.Fabric.ImageStore.FileImageStore : object {
    public static string SchemeTag;
    private static ExtensionsEvents traceSource;
    private static string TraceType;
    private FileProviderParameters storeParams;
    private string rootUri;
    private string localRoot;
    private ImageStoreAccessDescription accessDescription;
    internal static ExtensionsEvents TraceSource { get; }
    public string RootUri { get; }
    private static FileImageStore();
    public FileImageStore(string uri, string localRoot, ImageStoreAccessDescription accessDescription);
    internal static ExtensionsEvents get_TraceSource();
    public sealed virtual string get_RootUri();
    internal static bool IsFileStoreUri(string imageStoreUri);
    public sealed virtual void UploadContent(string storeDestination, string localSource, TimeSpan timeout, CopyFlag copyFlag, bool acquireSourceReaderLock);
    public sealed virtual void UploadContent(string storeDestination, string localSource, IImageStoreProgressHandler handler, TimeSpan timeout, CopyFlag copyFlag, bool acquireSourceReaderLock);
    public sealed virtual Task UploadContentAsync(string storeDestination, string localSource, TimeSpan timeout, CopyFlag copyFlag, bool acquireSourceReaderLock);
    public sealed virtual void CopyContent(string storeSource, string storeDestination, TimeSpan timeout, String[] skipFiles, CopyFlag copyFlag, bool checkMarkFile);
    public sealed virtual Task CopyContentAsync(string storeSource, string storeDestination, TimeSpan timeout, String[] skipFiles, CopyFlag copyFlag, bool checkMakeFile);
    public sealed virtual void DownloadContent(string storeSource, string localDestination, TimeSpan timeout, CopyFlag copyFlag);
    public sealed virtual void DownloadContent(string storeSource, string localDestination, IImageStoreProgressHandler handler, TimeSpan timeout, CopyFlag copyFlag);
    public sealed virtual Task DownloadContentAsync(string storeSource, string localDestination, TimeSpan timeout, CopyFlag copyFlag);
    public sealed virtual IEnumerable`1<string> ListContent(string storeSource, TimeSpan timeout);
    public sealed virtual ImageStorePagedRelativePath ListPagedContent(ImageStoreListDescription listDescription, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.FileImageStore/<ListContentAsync>d__24")]
public sealed virtual Task`1<IEnumerable`1<string>> ListContentAsync(string storeSource, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.FileImageStore/<ListPagedContentAsync>d__25")]
public sealed virtual Task`1<ImageStorePagedRelativePath> ListPagedContentAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public sealed virtual ImageStoreContent ListContentWithDetails(string storeSource, bool isRecursive, TimeSpan timeout);
    public sealed virtual ImageStorePagedContent ListPagedContentWithDetails(ImageStoreListDescription listDescription, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.FileImageStore/<ListContentWithDetailsAsync>d__28")]
public sealed virtual Task`1<ImageStoreContent> ListContentWithDetailsAsync(string storeSource, bool isRecursive, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.FileImageStore/<ListPagedContentWithDetailsAsync>d__29")]
public sealed virtual Task`1<ImageStorePagedContent> ListPagedContentWithDetailsAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public sealed virtual bool DoesContentExist(string tag, TimeSpan timeout);
    public sealed virtual Task`1<bool> DoesContentExistAsync(string tag, TimeSpan timeout);
    public sealed virtual void DeleteContent(string tag, TimeSpan timeout);
    public sealed virtual Task DeleteContentAsync(string tag, TimeSpan timeout);
    private void CopyCallerHoldsReaderLock(string source, string destination, CopyFlag copyFlag, TimeoutHelper helper);
    private string CreateAndAclDirectory();
    private string ConvertTagToSMBPath(string tag);
    private string GetLocalPath(string tag);
    private string GetStoreRelativePathFromFullName(string fullName, string storeSource);
    private ImageStoreFile ConvertToImageStoreFile(string fullFilePath, string storeSource);
    private ImageStoreFolder ConvertToImageStoreFolder(string fullFilePath, string storeSource);
    [IteratorStateMachineAttribute("System.Fabric.ImageStore.FileImageStore/<GetAllFiles>d__41")]
private IEnumerable`1<ImageStoreFile> GetAllFiles(string directory, string storeSource);
    [IteratorStateMachineAttribute("System.Fabric.ImageStore.FileImageStore/<GetAllDirectories>d__42")]
private IEnumerable`1<ImageStoreFolder> GetAllDirectories(string directory, string storeSource);
    [IteratorStateMachineAttribute("System.Fabric.ImageStore.FileImageStore/<GetAllFileFullNames>d__43")]
private IEnumerable`1<string> GetAllFileFullNames(string dir, TimeSpan timeout);
    private int GetFileCount(string directory);
    private ImageStoreContent GetFilesAndSubFolders(string directory, string storeSource, TimeSpan timeout);
}
internal class System.Fabric.ImageStore.FileLock : object {
    public static string ReaderLockExtension;
    public static string WriterLockExtension;
    private static string TraceTag;
    private ExtensionsEvents traceSource;
    private FileStream writerStream;
    private FileStream readerStream;
    private string path;
    private bool isReaderLock;
    private string writerLockPath;
    private string readerLockPath;
    private string operation;
    public FileLock(string path, bool isReaderLock);
    public static bool DoesWriterLockExist(string path);
    public bool Acquire(bool traceOnFailureAllowed);
    public bool Acquire(TimeSpan timeout);
    public bool Release();
    public sealed virtual void Dispose();
    private void CreateDirectoryPath(string path);
}
internal class System.Fabric.ImageStore.FileReaderLock : FileLock {
    public FileReaderLock(string path);
}
internal class System.Fabric.ImageStore.FileWriterLock : FileLock {
    public FileWriterLock(string path);
}
internal class System.Fabric.ImageStore.FolderCopy : object {
    private static string NewExtension;
    private static string OldExtension;
    private static string ClassName;
    private static int MaxRetryAttempts;
    private static Random Randomizer;
    private CopyFlag copyFlag;
    private Dictionary`2<string, bool> filterExtensions;
    private int workItemsInProgress;
    private ManualResetEvent asyncEvent;
    private ManualResetEvent internalCopyAsyncEvent;
    private int failedItems;
    private bool skipCopy;
    private ExtensionsEvents traceSource;
    private bool disposed;
    public int FailedToCopy { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public FolderCopy(CopyFlag flag, IEnumerable`1<string> filterExtensions);
    private static FolderCopy();
    public int get_FailedToCopy();
    public WaitHandle get_AsyncWaitHandle();
    public static void MoveFileWithRetry(string sourceFilePath, string destinationFilePath);
    public void Copy(string source, string destination);
    public void BeginCopy(string source, string destination);
    public bool AreFilesDifferent(string firstFilename, string secondFilename);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    private static void TryDeleteFile(string filePath);
    private void ThrowIfDisposed();
    private void EndCopy(object state);
    private void CopyItem(object state);
    private void CopyFolder(string sourceDir, string destinationDir);
    private void QueueCopyItem(string srcDir, string destDir, string itemName, bool isDirectory);
    private void CopyFile(string source, string destination);
    private void DecrementWorkItem();
    private bool ShouldCopy(string source);
    private void RenameFolder(string srcFolderName, string dstFolderName);
}
internal interface System.Fabric.ImageStore.IImageStore {
    public string RootUri { get; }
    public abstract virtual string get_RootUri();
    public abstract virtual void UploadContent(string remoteDestination, string localSource, TimeSpan timeout, CopyFlag imageCopyFlag, bool acquireSourceReaderLock);
    public abstract virtual void UploadContent(string remoteDestination, string localSource, IImageStoreProgressHandler progressHandler, TimeSpan timeout, CopyFlag imageCopyFlag, bool acquireSourceReaderLock);
    public abstract virtual Task UploadContentAsync(string remoteDestination, string localSource, TimeSpan timeout, CopyFlag imageCopyFlag, bool acquireSourceReaderLock);
    public abstract virtual void CopyContent(string remoteSource, string remoteDestination, TimeSpan timeout, String[] skipFiles, CopyFlag imageCopyFlag, bool checkFolderMarkFile);
    public abstract virtual Task CopyContentAsync(string remoteSource, string remoteDestination, TimeSpan timeout, String[] skipFiles, CopyFlag imageCopyFlag, bool checkFolderMarkFile);
    public abstract virtual void DownloadContent(string remoteSource, string localDestination, TimeSpan timeout, CopyFlag imageCopyFlag);
    public abstract virtual void DownloadContent(string remoteSource, string localDestination, IImageStoreProgressHandler progressHandler, TimeSpan timeout, CopyFlag imageCopyFlag);
    public abstract virtual Task DownloadContentAsync(string remoteSource, string localDestination, TimeSpan timeout, CopyFlag imageCopyFlag);
    public abstract virtual IEnumerable`1<string> ListContent(string remoteLocation, TimeSpan timeout);
    public abstract virtual Task`1<IEnumerable`1<string>> ListContentAsync(string remoteLocation, TimeSpan timeout);
    public abstract virtual ImageStorePagedRelativePath ListPagedContent(ImageStoreListDescription listDescription, TimeSpan timeout);
    public abstract virtual Task`1<ImageStorePagedRelativePath> ListPagedContentAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public abstract virtual ImageStoreContent ListContentWithDetails(string remoteLocation, bool isRecursive, TimeSpan timeout);
    public abstract virtual Task`1<ImageStoreContent> ListContentWithDetailsAsync(string remoteLocation, bool isRecursive, TimeSpan timeout);
    public abstract virtual ImageStorePagedContent ListPagedContentWithDetails(ImageStoreListDescription listDescription, TimeSpan timeout);
    public abstract virtual Task`1<ImageStorePagedContent> ListPagedContentWithDetailsAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public abstract virtual bool DoesContentExist(string remoteLocation, TimeSpan timeout);
    public abstract virtual Task`1<bool> DoesContentExistAsync(string remoteLocation, TimeSpan timeout);
    public abstract virtual void DeleteContent(string remoteLocation, TimeSpan timeout);
    public abstract virtual Task DeleteContentAsync(string remoteLocation, TimeSpan timeout);
}
internal class System.Fabric.ImageStore.ImageStoreAccessDescription : object {
    [CompilerGeneratedAttribute]
private bool <HasReadAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWriteAccess>k__BackingField;
    public bool HasReadAccess { get; private set; }
    public bool HasWriteAccess { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_HasReadAccess();
    [CompilerGeneratedAttribute]
private void set_HasReadAccess(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasWriteAccess();
    [CompilerGeneratedAttribute]
private void set_HasWriteAccess(bool value);
    private bool CheckAccess(string localRoot, FileAccess access);
}
internal static class System.Fabric.ImageStore.ImageStoreConfig : object {
    public static int XStoreMinTransferBPS;
    private static ImageStoreConfig();
}
internal class System.Fabric.ImageStore.ImageStoreConstants : object {
    public static string FabricNodeSection;
    public static string WorkingDirKey;
    public static string NativeImageStoreConnectionString;
    public static string AccountTypeKey;
    public static string AccountNameKey;
    public static string AccountPasswordKey;
    public static string DomainUser_AccountType;
    public static string ManagedServiceAccount_AccountType;
}
internal class System.Fabric.ImageStore.ImageStoreContent : object {
    [CompilerGeneratedAttribute]
private List`1<ImageStoreFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ImageStoreFolder> <Folders>k__BackingField;
    public List`1<ImageStoreFile> Files { get; public set; }
    public List`1<ImageStoreFolder> Folders { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ImageStoreFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<ImageStoreFile> value);
    [CompilerGeneratedAttribute]
public List`1<ImageStoreFolder> get_Folders();
    [CompilerGeneratedAttribute]
public void set_Folders(List`1<ImageStoreFolder> value);
    internal void CreateFromNative(FABRIC_IMAGE_STORE_CONTENT_QUERY_RESULT* result);
    internal void CreateFromNativeFileList(FABRIC_IMAGE_STORE_FILE_INFO_QUERY_RESULT_LIST* nativeList);
    internal void CreateFromNativeFolderList(FABRIC_IMAGE_STORE_FOLDER_INFO_QUERY_RESULT_LIST* nativeList);
}
internal class System.Fabric.ImageStore.ImageStoreFactory : object {
    internal static IImageStore CreateImageStore(string imageStoreUri, string localRoot, string workingDirectory, bool isInternal);
    internal static IImageStore CreateImageStore(string imageStoreUri, string localRoot, String[] connectionStrings, SecurityCredentials credentials, string workingDirectory, bool isInternal);
    public static void ParseFileImageStoreConnectionString(string imageStoreConnectionString, String& rootUri, String& accountName, String& accountPassword, Boolean& isManagedServiceAccount);
}
internal class System.Fabric.ImageStore.ImageStoreFile : object {
    [CompilerGeneratedAttribute]
private string <StoreRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    public ImageStoreVersionInfo VersionInfo;
    public string StoreRelativePath { get; private set; }
    public string FileVersion { get; private set; }
    public long FileSize { get; private set; }
    public DateTime ModifiedDate { get; private set; }
    internal ImageStoreFile(string storeRelativePath, string fileVersion, long fileSize, DateTime modifiedDate);
    [CompilerGeneratedAttribute]
public string get_StoreRelativePath();
    [CompilerGeneratedAttribute]
private void set_StoreRelativePath(string value);
    [CompilerGeneratedAttribute]
public string get_FileVersion();
    [CompilerGeneratedAttribute]
private void set_FileVersion(string value);
    [CompilerGeneratedAttribute]
public long get_FileSize();
    [CompilerGeneratedAttribute]
private void set_FileSize(long value);
    [CompilerGeneratedAttribute]
public DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
private void set_ModifiedDate(DateTime value);
    internal static ImageStoreFile CreateFromNative(FABRIC_IMAGE_STORE_FILE_INFO_QUERY_RESULT_ITEM nativeResultItem);
    public virtual string ToString();
}
internal class System.Fabric.ImageStore.ImageStoreFolder : object {
    [CompilerGeneratedAttribute]
private string <StoreRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileCount>k__BackingField;
    public ImageStoreVersionInfo VersionInfo;
    public string StoreRelativePath { get; private set; }
    public int FileCount { get; public set; }
    public ImageStoreFolder(string storeRelativePath, int fileCount);
    [CompilerGeneratedAttribute]
public string get_StoreRelativePath();
    [CompilerGeneratedAttribute]
private void set_StoreRelativePath(string value);
    [CompilerGeneratedAttribute]
public int get_FileCount();
    [CompilerGeneratedAttribute]
public void set_FileCount(int value);
    internal static ImageStoreFolder CreateFromNative(FABRIC_IMAGE_STORE_FOLDER_INFO_QUERY_RESULT_ITEM nativeResultItem);
    public virtual string ToString();
}
internal class System.Fabric.ImageStore.ImageStorePagedContent : object {
    [CompilerGeneratedAttribute]
private List`1<ImageStoreFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ImageStoreFolder> <Folders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public List`1<ImageStoreFile> Files { get; public set; }
    public List`1<ImageStoreFolder> Folders { get; public set; }
    public string ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ImageStoreFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<ImageStoreFile> value);
    [CompilerGeneratedAttribute]
public List`1<ImageStoreFolder> get_Folders();
    [CompilerGeneratedAttribute]
public void set_Folders(List`1<ImageStoreFolder> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    internal void CreateFromNative(FABRIC_IMAGE_STORE_PAGED_CONTENT_QUERY_RESULT* result);
    internal void CreateFromNativeFileList(FABRIC_IMAGE_STORE_FILE_INFO_QUERY_RESULT_LIST* nativeList);
    internal void CreateFromNativeFolderList(FABRIC_IMAGE_STORE_FOLDER_INFO_QUERY_RESULT_LIST* nativeList);
}
internal class System.Fabric.ImageStore.ImageStorePagedRelativePath : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public IList`1<string> RelativePath { get; public set; }
    public string ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    internal void CreateFromNative(FABRIC_IMAGE_STORE_PAGED_RELATIVEPATH_QUERY_RESULT* result);
}
internal enum System.Fabric.ImageStore.ImageStoreProviderType : Enum {
    public int value__;
    public static ImageStoreProviderType Invalid;
    public static ImageStoreProviderType AzureStorage;
    public static ImageStoreProviderType FileShare;
    public static ImageStoreProviderType ImageStoreService;
}
public class System.Fabric.ImageStore.ImageStoreUtility : object {
    public static string Sha256;
    public static string Sha256Tag;
    public static string GenerateSfpkg(string appPackageRootDirectory, string destinationDirectory, bool applyCompression, string sfpkgName);
    public static void ExpandSfpkg(string sfpkgFilePath, string appPackageRootDirectory);
    public static bool HasAlgorithmTag(string hash);
    public static string ComputeHash(string algorithm, string path, bool ignoreCase);
    public static void ArchiveApplicationPackage(string appPackageRootDirectory, IImageStoreProgressHandler progressHandler);
    public static bool TryExtractApplicationPackage(string appPackageRootDirectory, IImageStoreProgressHandler progressHandler);
    public static void GenerateApplicationPackageChecksumFiles(string appPackageRootDirectory, IImageStoreProgressHandler progressHandler, bool isImageStoreServiceEnabled);
    internal static ImageStoreProviderType GetImageStoreProviderType(string imageStoreConnectionString);
    internal static void WriteStringToFile(string fileName, string value, bool writeLine, Encoding encoding);
    private static void GenerateChecksumFile(string fileOrDirectoryPath, BuildLayoutSpecification layoutSpecification, bool isImageStoreServiceEnabled);
    private static string GenerateSfpkgHelper(string appPackageRootDirectory, string destinationDirectory, bool applyCompression, string sfpkgName);
    private static void ExpandSfpkgHelper(string sfpkgFilePath, string appPackageRootDirectory);
    private static string ComputeHashHelper(string algorithm, string path, bool ignoreCase);
    private static void ArchiveApplicationPackageHelper(string appPackageRootDirectory, IImageStoreProgressHandler progressHandler);
    private static bool ExtractApplicationPackageHelper(string appPackageRootDirectory, IImageStoreProgressHandler progressHandler);
}
internal class System.Fabric.ImageStore.ImageStoreVersionInfo : object {
    private List`1<string> applicationVersions;
    private List`1<string> serviceManifestVersions;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    public string ServiceManifestName { get; private set; }
    public string ServiceManifestVersion { get; }
    public string ApplicationVersion { get; }
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    public string get_ServiceManifestVersion();
    public string get_ApplicationVersion();
    private void ConfigApplicationVersion(string applicationVersion);
    public void ConfigVersionInfo(string serviceManifestName, string serviceManifestVerison, string applicationVersion);
}
internal class System.Fabric.ImageStore.NativeImageStoreClient : object {
    public static string SchemeTag;
    private IFabricNativeImageStoreClient3 nativeClient;
    public string RootUri { get; }
    public NativeImageStoreClient(bool isInternal);
    public NativeImageStoreClient(String[] connectionStrings, bool isInternal);
    public NativeImageStoreClient(String[] connectionStrings, bool isInternal, string workingDirectory, SecurityCredentials credentials);
    public sealed virtual string get_RootUri();
    public static bool IsNativeImageStoreUri(string imageStoreUri);
    public sealed virtual void UploadContent(string remoteDestination, string localSource, IImageStoreProgressHandler progressHandler, TimeSpan timeout, CopyFlag imageCopyFlag, bool acquireSourceReaderLock);
    public sealed virtual void UploadContent(string remoteDestination, string localSource, TimeSpan timeout, CopyFlag imageCopyFlag, bool acquireSourceReaderLock);
    public sealed virtual Task UploadContentAsync(string storeDestination, string localSource, TimeSpan timeout, CopyFlag copyFlag, bool acquireSourceReaderLock);
    public sealed virtual void CopyContent(string remoteSource, string remoteDestination, TimeSpan timeout, String[] skipFiles, CopyFlag imageCopyFlag, bool checkMarkFile);
    public sealed virtual Task CopyContentAsync(string storeSource, string storeDestination, TimeSpan timeout, String[] skipFiles, CopyFlag copyFlag, bool checkMarkFile);
    public sealed virtual void DownloadContent(string remoteSource, string localDestination, TimeSpan timeout, CopyFlag imageCopyFlag);
    public sealed virtual void DownloadContent(string remoteSource, string localDestination, IImageStoreProgressHandler progressHandler, TimeSpan timeout, CopyFlag imageCopyFlag);
    public sealed virtual Task DownloadContentAsync(string storeSource, string localDestination, TimeSpan timeout, CopyFlag copyFlag);
    public sealed virtual IEnumerable`1<string> ListContent(string remoteLocation, TimeSpan timeout);
    public sealed virtual ImageStorePagedRelativePath ListPagedContent(ImageStoreListDescription listDescription, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.NativeImageStoreClient/<ListContentAsync>d__18")]
public sealed virtual Task`1<IEnumerable`1<string>> ListContentAsync(string storeSource, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.NativeImageStoreClient/<ListPagedContentAsync>d__19")]
public sealed virtual Task`1<ImageStorePagedRelativePath> ListPagedContentAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public sealed virtual ImageStoreContent ListContentWithDetails(string remoteLocation, bool isRecursive, TimeSpan timeout);
    public sealed virtual ImageStorePagedContent ListPagedContentWithDetails(ImageStoreListDescription listDescription, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.NativeImageStoreClient/<ListContentWithDetailsAsync>d__22")]
public sealed virtual Task`1<ImageStoreContent> ListContentWithDetailsAsync(string storeSource, bool isRecursive, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.NativeImageStoreClient/<ListPagedContentWithDetailsAsync>d__23")]
public sealed virtual Task`1<ImageStorePagedContent> ListPagedContentWithDetailsAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public sealed virtual bool DoesContentExist(string remoteLocation, TimeSpan timeout);
    public sealed virtual Task`1<bool> DoesContentExistAsync(string tag, TimeSpan timeout);
    public sealed virtual void DeleteContent(string remoteLocation, TimeSpan timeout);
    public sealed virtual Task DeleteContentAsync(string tag, TimeSpan timeout);
    private void CreateNativeClient(IEnumerable`1<string> connectionStrings, bool isInternal, string workingDirectory, SecurityCredentials credentials);
    internal void SetSecurityCredentialsWrapper(SecurityCredentials credentials);
    private void UploadContentWrapper(string remoteDestination, string localSource, IImageStoreProgressHandler progressHandler, UInt32 timeoutMilliseconds, CopyFlag imageCopyFlag);
    private void CopyContentWrapper(string remoteSource, string remoteDestination, UInt32 timeoutMilliseconds, String[] skipFiles, CopyFlag imageCopyFlag, bool checkMarkFile);
    private void DownloadContentWrapper(string remoteSource, string localDestination, IImageStoreProgressHandler progressHandler, UInt32 timeoutMilliseconds, CopyFlag imageCopyFlag);
    private IEnumerable`1<string> ListContentWrapper(string remoteLocation, UInt32 timeoutMilliseconds);
    private ImageStorePagedRelativePath ListPagedContentWrapper(ImageStoreListDescription listDescription, UInt32 timeoutMilliseconds);
    private ImageStoreContent ListContentWithDetailsWrapper(string remoteLocation, bool isRecursive, UInt32 timeoutMilliseconds);
    private ImageStorePagedContent ListPagedContentWithDetailsWrapper(ImageStoreListDescription listDescription, UInt32 timeoutMilliseconds);
    private static ImageStorePagedRelativePath FromNativeFiles(IntPtr nativePtr);
    private static ImageStoreContent FromNativeContent(IntPtr nativePtr);
    private static ImageStorePagedContent FromNativePagedContent(IntPtr nativePtr);
    private bool DoesContentExistWrapper(string remoteLocation, UInt32 timeoutMilliseconds);
    private void DeleteContentWrapper(string remoteLocation, UInt32 timeoutMilliseconds);
    private FABRIC_IMAGE_STORE_COPY_FLAG ToNative(CopyFlag flag);
}
internal class System.Fabric.ImageStore.NativeImageStoreProgressEventHandlerBroker : object {
    private IImageStoreProgressHandler progressHandler;
    public NativeImageStoreProgressEventHandlerBroker(IImageStoreProgressHandler progressHandler);
    private sealed virtual override void System.Fabric.Interop.NativeImageStore.IFabricNativeImageStoreProgressEventHandler.GetUpdateInterval(IntPtr milliseconds);
    private sealed virtual override void System.Fabric.Interop.NativeImageStore.IFabricNativeImageStoreProgressEventHandler.OnUpdateProgress(ulong completedItems, ulong totalItems, FABRIC_PROGRESS_UNIT_TYPE itemType);
}
internal class System.Fabric.ImageStore.XStoreProxy : object {
    private static string SystemFabricManagementAssemblyName;
    private static string XStoreTypeNamespace;
    private static string XstoreSchemaTag;
    private string XStoreUri;
    protected Type XStoreType;
    protected object XStore;
    public string RootUri { get; }
    private static XStoreProxy();
    public XStoreProxy(string imageStoreUri, string localRoot);
    public static bool IsXStoreUri(string imageStoreUri);
    protected static Assembly LoadFromFabricCodePath(object sender, ResolveEventArgs args);
    public sealed virtual string get_RootUri();
    protected virtual void Initialize(string imageStoreUri, string localRoot);
    public sealed virtual void UploadContent(string remoteDestination, string localSource, TimeSpan timeout, CopyFlag copyFlag, bool acquireSourceReaderLock);
    public sealed virtual void UploadContent(string remoteDestination, string localSource, IImageStoreProgressHandler handler, TimeSpan timeout, CopyFlag copyFlag, bool acquireSourceReaderLock);
    public sealed virtual Task UploadContentAsync(string remoteDestination, string localSource, TimeSpan timeout, CopyFlag copyFlag, bool acquireSourceReaderLock);
    public sealed virtual void CopyContent(string remoteSource, string remoteDestination, TimeSpan timeout, String[] skipFiles, CopyFlag copyFlag, bool checkMarkFile);
    public sealed virtual Task CopyContentAsync(string storeSource, string storeDestination, TimeSpan timeout, String[] skipFiles, CopyFlag copyFlag, bool checkMakeFile);
    public sealed virtual void DownloadContent(string remoteSource, string localDestination, TimeSpan timeout, CopyFlag copyFlag);
    public sealed virtual void DownloadContent(string remoteSource, string localDestination, IImageStoreProgressHandler handler, TimeSpan timeout, CopyFlag copyFlag);
    public sealed virtual Task DownloadContentAsync(string storeSource, string localDestination, TimeSpan timeout, CopyFlag copyFlag);
    public sealed virtual IEnumerable`1<string> ListContent(string remoteLocation, TimeSpan timeout);
    public sealed virtual ImageStorePagedRelativePath ListPagedContent(ImageStoreListDescription listDescription, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.XStoreProxy/<ListContentAsync>d__23")]
public sealed virtual Task`1<IEnumerable`1<string>> ListContentAsync(string storeSource, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.XStoreProxy/<ListPagedContentAsync>d__24")]
public sealed virtual Task`1<ImageStorePagedRelativePath> ListPagedContentAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public sealed virtual ImageStoreContent ListContentWithDetails(string remoteLocation, bool isRecursive, TimeSpan timeout);
    public sealed virtual ImageStorePagedContent ListPagedContentWithDetails(ImageStoreListDescription listDescription, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.XStoreProxy/<ListContentWithDetailsAsync>d__27")]
public sealed virtual Task`1<ImageStoreContent> ListContentWithDetailsAsync(string storeSource, bool isRecursive, TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Fabric.ImageStore.XStoreProxy/<ListPagedContentWithDetailsAsync>d__28")]
public sealed virtual Task`1<ImageStorePagedContent> ListPagedContentWithDetailsAsync(ImageStoreListDescription listDescription, TimeSpan timeout);
    public sealed virtual bool DoesContentExist(string remoteLocation, TimeSpan timeout);
    public sealed virtual Task`1<bool> DoesContentExistAsync(string remoteLocation, TimeSpan timeout);
    public sealed virtual void DeleteContent(string remoteLocation, TimeSpan timeout);
    public sealed virtual Task DeleteContentAsync(string remoteLocation, TimeSpan timeout);
    private void CheckForReservedImageStoreFolders(string remoteDestination);
}
public interface System.Fabric.IMemoryManagedOperationData {
}
internal interface System.Fabric.INativeCredentialConverter {
    public abstract virtual IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.InfrastructureServiceBroker : object {
    private IInfrastructureService service;
    internal IInfrastructureService Service { get; }
    internal InfrastructureServiceBroker(IInfrastructureService service);
    internal IInfrastructureService get_Service();
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.BeginRunCommand(sbyte isAdminCommand, IntPtr command, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricStringResult System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.EndRunCommand(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.BeginReportStartTaskSuccess(IntPtr taskId, long instanceId, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.EndReportStartTaskSuccess(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.BeginReportFinishTaskSuccess(IntPtr taskId, long instanceId, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.EndReportFinishTaskSuccess(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.BeginReportTaskFailure(IntPtr taskId, long instanceId, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeInfrastructureService.IFabricInfrastructureService.EndReportTaskFailure(IFabricAsyncOperationContext context);
    private Task`1<string> RunCommandAsync(bool isAdminCommand, string command, TimeSpan timeout, CancellationToken cancellationToken);
    private Task ReportStartTaskSuccessAsync(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
    private Task ReportFinishTaskSuccessAsync(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
    private Task ReportTaskFailureAsync(string taskId, long instanceId, TimeSpan timeout, CancellationToken cancellationToken);
}
public class System.Fabric.Int64RangePartitionInformation : ServicePartitionInformation {
    [CompilerGeneratedAttribute]
private long <LowKey>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighKey>k__BackingField;
    public long LowKey { get; internal set; }
    public long HighKey { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_LowKey();
    [CompilerGeneratedAttribute]
internal void set_LowKey(long value);
    [CompilerGeneratedAttribute]
public long get_HighKey();
    [CompilerGeneratedAttribute]
internal void set_HighKey(long value);
    internal static Int64RangePartitionInformation FromNative(FABRIC_INT64_RANGE_PARTITION_INFORMATION* nativePartition);
    internal virtual string GetPartitionInformationString();
}
internal class System.Fabric.InternalFabricReplicator : object {
    public static long UnknownSequenceNumber;
    public static long InvalidAtomicGroupId;
    private IFabricReplicator nativeReplicator;
    internal IFabricReplicator NativeReplicator { get; }
    private IFabricPrimaryReplicator PrimaryReplicator { get; }
    internal InternalFabricReplicator(IFabricReplicator nativeReplicator);
    internal IFabricReplicator get_NativeReplicator();
    private IFabricPrimaryReplicator get_PrimaryReplicator();
    private sealed virtual override Task`1<string> System.Fabric.IReplicator.OpenAsync(CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.IReplicator.ChangeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.IReplicator.UpdateEpochAsync(Epoch epoch, CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.IReplicator.CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IReplicator.Abort();
    private sealed virtual override long System.Fabric.IReplicator.GetCurrentProgress();
    private sealed virtual override long System.Fabric.IReplicator.GetCatchUpCapability();
    private sealed virtual override Task`1<bool> System.Fabric.IPrimaryReplicator.OnDataLossAsync(CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration);
    private sealed virtual override Task System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration);
    private sealed virtual override Task System.Fabric.IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken);
    private sealed virtual override void System.Fabric.IPrimaryReplicator.RemoveReplica(long replicaId);
    private Task`1<string> OpenAsyncHelper(CancellationToken cancellationToken);
    private IFabricAsyncOperationContext OpenBeginWrapper(IFabricAsyncOperationCallback callback);
    private string OpenEndWrapper(IFabricAsyncOperationContext context);
    private Task ChangeRoleAsyncHelper(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext ChangeRoleBeginWrapper(Epoch epoch, ReplicaRole role, IFabricAsyncOperationCallback callback);
    private void ChangeRoleEndWrapper(IFabricAsyncOperationContext context);
    private Task CloseAsyncHelper(CancellationToken cancellationToken);
    private IFabricAsyncOperationContext CloseBeginWrapper(IFabricAsyncOperationCallback callback);
    private void CloseEndWrapper(IFabricAsyncOperationContext context);
    private Task`1<bool> OnDataLossAsyncHelper(CancellationToken cancellationToken);
    private IFabricAsyncOperationContext OnDataLossBeginWrapper(IFabricAsyncOperationCallback callback);
    private bool OnDataLossEndWrapper(IFabricAsyncOperationContext context);
    private Task WaitForCatchUpQuorumAsyncHelper(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext WaitForCatchUpQuorumBeginWrapper(ReplicaSetQuorumMode quorumMode, IFabricAsyncOperationCallback callback);
    private void WaitForCatchUpQuorumEndWrapper(IFabricAsyncOperationContext context);
    private Task BuildReplicaAsyncHelper(ReplicaInformation replicaInfo, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext BuildReplicaBeginWrapper(ReplicaInformation replicaInfo, IFabricAsyncOperationCallback callback);
    private void BuildReplicaEndWrapper(IFabricAsyncOperationContext context);
    private Task UpdateEpochAsyncHelper(Epoch epoch, CancellationToken cancellationToken);
    private IFabricAsyncOperationContext UpdateEpochBeginWrapper(Epoch epoch, IFabricAsyncOperationCallback callback);
    private void UpdateEpochEndWrapper(IFabricAsyncOperationContext context);
    private void UpdateCatchUpReplicaSetConfigurationHelper(ReplicaSetConfiguration current, ReplicaSetConfiguration previous);
    private void UpdateCurrentReplicaSetConfigurationHelper(ReplicaSetConfiguration current);
    private long GetCurrentProgressHelper();
    private long GetCatchupCapabilityHelper();
    private void RemoveReplicaHelper(long replicaId);
    [CompilerGeneratedAttribute]
private void <System.Fabric.IReplicator.Abort>b__12_0();
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <OpenAsyncHelper>b__21_0(IFabricAsyncOperationCallback callback);
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <CloseAsyncHelper>b__27_0(IFabricAsyncOperationCallback callback);
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <OnDataLossAsyncHelper>b__30_0(IFabricAsyncOperationCallback callback);
}
internal class System.Fabric.Interop.AsyncCallOutAdapter2`1 : object {
    private string functionTag;
    private Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc;
    private Func`2<IFabricAsyncOperationContext, TResult> endFunc;
    private InteropExceptionTracePolicy tracePolicy;
    private SharedNativeObject`1<IFabricAsyncOperationContext> nativeContext;
    private TaskCompletionSource`1<TResult> tcs;
    private bool runContinuationsAsynchronously;
    private string traceId;
    private IDisposable cancellationTokenRegistration;
    private bool isCompleted;
    private bool wasCancelled;
    private AsyncCallOutAdapter2`1(string functionTag, Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Func`2<IFabricAsyncOperationContext, TResult> endFunc, InteropExceptionTracePolicy tracePolicy, bool runContinuationsAsynchronously);
    public static Task`1<TResult> WrapNativeAsyncInvoke(string functionTag, Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Func`2<IFabricAsyncOperationContext, TResult> endFunc, InteropExceptionTracePolicy tracePolicy, CancellationToken cancellationToken, bool runContinuationsAsynchronously);
    private Task`1<TResult> Start(CancellationToken cancellationToken);
    private void RegisterForCancellation(CancellationToken token);
    private void RegisterForCancellation(IFabricAsyncOperationContext context, CancellationToken token);
    private void Finish(IFabricAsyncOperationContext context, bool expectedCompletedSynchronously);
    private void DisposeCancelCallbackRegistrationOnAsyncOperationCompletion();
    private void FailTask(Exception e);
    private void Cancel();
    private void Cancel(IFabricAsyncOperationContext context);
    private sealed virtual override void System.Fabric.Interop.NativeCommon.IFabricAsyncOperationCallback.Invoke(IFabricAsyncOperationContext context);
    private void InitializeSharedContext(IFabricAsyncOperationContext context);
    private void TraceException(Exception ex, string format, Object[] args);
    [CompilerGeneratedAttribute]
private void <Start>b__13_0(IFabricAsyncOperationContext inner);
    [CompilerGeneratedAttribute]
private void <System.Fabric.Interop.NativeCommon.IFabricAsyncOperationCallback.Invoke>b__21_0(IFabricAsyncOperationContext inner);
}
internal class System.Fabric.Interop.AsyncTaskCallInAdapter : object {
    private Task callbackContinuation;
    private Task userTask;
    private InteropApi interopApi;
    private string functionTag;
    private int completedSynchronously;
    private IFabricAsyncOperationCallback nativeCallback;
    private CancellationTokenSource cancellationTokenSource;
    private int wasEndCalled;
    [CompilerGeneratedAttribute]
private static ReleaseComObjectWrapper <ReleaseComObjectWrapperInstance>k__BackingField;
    internal static ReleaseComObjectWrapper ReleaseComObjectWrapperInstance { get; internal set; }
    private static AsyncTaskCallInAdapter();
    public AsyncTaskCallInAdapter(IFabricAsyncOperationCallback callback, Task userTask, InteropApi interopApi, CancellationTokenSource cancellationTokenSource, string functionTag);
    [CompilerGeneratedAttribute]
internal static ReleaseComObjectWrapper get_ReleaseComObjectWrapperInstance();
    [CompilerGeneratedAttribute]
internal static void set_ReleaseComObjectWrapperInstance(ReleaseComObjectWrapper value);
    public static void End(IFabricAsyncOperationContext nativeContext);
    public static TResult End(IFabricAsyncOperationContext nativeContext);
    public sealed virtual sbyte CompletedSynchronously();
    public sealed virtual sbyte IsCompleted();
    public sealed virtual IFabricAsyncOperationCallback get_Callback();
    public sealed virtual void Cancel();
    private static AsyncTaskCallInAdapter EndHelper(IFabricAsyncOperationContext nativeContext);
    private void ProcessNativeCallback();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(Task t);
}
[FlagsAttribute]
internal enum System.Fabric.Interop.EnumerationStatus : Enum {
    public int value__;
    public static EnumerationStatus Invalid;
    public static EnumerationStatus BestEffortMoreData;
    public static EnumerationStatus ConsistentMoreData;
    public static EnumerationStatus BestEffortFinished;
    public static EnumerationStatus ConsistentFinished;
    public static EnumerationStatus ValidMask;
    public static EnumerationStatus BestEffortMask;
    public static EnumerationStatus ConsistentMask;
    public static EnumerationStatus MoreDataMask;
    public static EnumerationStatus FinishedMask;
}
public class System.Fabric.Interop.EventDataDescriptor : ValueType {
    public ulong DataPointer;
    public UInt32 Size;
    internal int Reserved;
}
internal class System.Fabric.Interop.InteropApi : object {
    public static InteropApi Default;
    [CompilerGeneratedAttribute]
private bool <CopyExceptionDetailsToThreadErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldIncludeStackTraceInThreadErrorMessage>k__BackingField;
    public bool CopyExceptionDetailsToThreadErrorMessage { get; public set; }
    public bool ShouldIncludeStackTraceInThreadErrorMessage { get; public set; }
    private static InteropApi();
    [CompilerGeneratedAttribute]
public bool get_CopyExceptionDetailsToThreadErrorMessage();
    [CompilerGeneratedAttribute]
public void set_CopyExceptionDetailsToThreadErrorMessage(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldIncludeStackTraceInThreadErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ShouldIncludeStackTraceInThreadErrorMessage(bool value);
    public void HandleException(Exception ex);
    private static string GetExceptionInfoString(Type type, int HResult);
    private static string GetErrorStackTrace(Exception ex);
    private static string CreateThreadErrorMessage(Exception ex, bool includeStackTrace);
}
internal static class System.Fabric.Interop.InteropExceptionMap : object {
    [CompilerGeneratedAttribute]
private static IDictionary`2<int, Func`3<Exception, string, Exception>> <NativeToManagedConversion>k__BackingField;
    public static IDictionary`2<int, Func`3<Exception, string, Exception>> NativeToManagedConversion { get; private set; }
    private static InteropExceptionMap();
    [CompilerGeneratedAttribute]
public static IDictionary`2<int, Func`3<Exception, string, Exception>> get_NativeToManagedConversion();
    [CompilerGeneratedAttribute]
private static void set_NativeToManagedConversion(IDictionary`2<int, Func`3<Exception, string, Exception>> value);
}
internal enum System.Fabric.Interop.InteropExceptionTracePolicy : Enum {
    public int value__;
    public static InteropExceptionTracePolicy None;
    public static InteropExceptionTracePolicy Info;
    public static InteropExceptionTracePolicy Warning;
    public static InteropExceptionTracePolicy WarningExceptInfoForTransient;
    public static InteropExceptionTracePolicy Default;
}
internal static class System.Fabric.Interop.InteropHelpers : object {
    private static string TraceComponent;
    internal static Exception TranslateError(int errorCode);
    internal static Exception TranslateError(int errorCode, string message);
    internal static FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE ToNativeServicePackageActivationMode(ServicePackageActivationMode activationMode);
    internal static ServicePackageActivationMode FromNativeServicePackageActivationMode(FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE nativeActivationMode);
    internal static ContainerIsolationMode FromNativeContainerIsolationMode(FABRIC_CONTAINER_ISOLATION_MODE nativeIsolationMode);
    internal static ContainerNetworkType FromNativeContainerNetworkType(FABRIC_CONTAINER_NETWORK_TYPE nativeContainerNetworkType);
    internal static FABRIC_CONTAINER_EVENT_TYPE ToNativeContainerEventType(ContainerEventType eventType);
    internal static FABRIC_EXECUTION_POLICY_EXECUTION_TYPE ToNativeExecutionPolicyExecutionType(ExecutionPolicyExecutionType executionType);
    internal static FABRIC_EXECUTION_POLICY_RESTART_POLICY ToNativeExecutionPolicyRestartPolicy(ExecutionPolicyRestartPolicy restartPolicy);
}
internal interface System.Fabric.Interop.IPinNode {
    public abstract virtual IntPtr AddrOfPinnedObject();
}
internal static class System.Fabric.Interop.Kernel32Types : object {
}
internal static class System.Fabric.Interop.NativeClient : object {
    internal static IFabricPropertyManagementClient2 FabricCreateClient(ushort connectionStringsSize, IntPtr connectionStrings, Guid& iid);
    internal static IFabricPropertyManagementClient2 FabricCreateLocalClient(Guid& iid);
    internal static IFabricPropertyManagementClient2 FabricCreateClient2(ushort connectionStringsSize, IntPtr connectionStrings, IFabricServiceNotificationEventHandler notificationhandler, Guid& iid);
    internal static IFabricPropertyManagementClient2 FabricCreateLocalClient2(IFabricServiceNotificationEventHandler notificationhandler, Guid& iid);
    internal static IFabricPropertyManagementClient2 FabricCreateClient3(ushort connectionStringsSize, IntPtr connectionStrings, IFabricServiceNotificationEventHandler notificationhandler, IFabricClientConnectionEventHandler connectionHandler, Guid& iid);
    internal static IFabricPropertyManagementClient2 FabricCreateLocalClient3(IFabricServiceNotificationEventHandler notificationhandler, IFabricClientConnectionEventHandler connectionHandler, Guid& iid);
    internal static IFabricPropertyManagementClient2 FabricCreateLocalClient4(IFabricServiceNotificationEventHandler notificationhandler, IFabricClientConnectionEventHandler connectionHandler, FABRIC_CLIENT_ROLE clientRole, Guid& iid);
    internal static IFabricGetRollingUpgradeMonitoringPolicyResult FabricGetDefaultRollingUpgradeMonitoringPolicy();
}
internal static class System.Fabric.Interop.NativeClientInternal : object {
    internal static IFabricClientSettingsResult GetFabricClientDefaultSettings();
}
internal static class System.Fabric.Interop.NativeCommon : object {
    internal static IFabricConfigStore2 FabricGetConfigStore(Guid& riid, IFabricConfigStoreUpdateHandler2 updateHandler);
    internal static IFabricStringResult FabricEncryptText(IntPtr text, IntPtr certThumbPrint, IntPtr certStoreName, FABRIC_X509_STORE_LOCATION certStoreLocation, IntPtr algorithmOid);
    internal static IFabricStringResult FabricEncryptText2(IntPtr text, IntPtr certFilePath, IntPtr algorithmOid);
    internal static IFabricStringResult FabricDecryptText(IntPtr encryptedValue, FABRIC_X509_STORE_LOCATION certStoreLocation);
    internal static sbyte FabricIsValidExpression(IntPtr expression);
    internal static void GetLinuxPackageManagerType(Int32& packageManagerType);
    internal static IFabricStringResult FabricGetRoot2(IntPtr machineName);
    internal static IFabricStringResult FabricGetRoot();
    internal static IFabricStringResult FabricGetBinRoot2(IntPtr machineName);
    internal static IFabricStringResult FabricGetBinRoot();
    internal static IFabricStringResult FabricGetCodePath2(IntPtr machineName);
    internal static IFabricStringResult FabricGetCodePath();
    internal static IFabricStringResult FabricGetDataRoot2(IntPtr machineName);
    internal static IFabricStringResult FabricGetDataRoot();
    internal static IFabricStringResult FabricGetLogRoot2(IntPtr machineName);
    internal static IFabricStringResult FabricGetLogRoot();
    internal static void FabricDirectoryCreate(IntPtr path);
    internal static IFabricStringListResult FabricDirectoryGetDirectories(IntPtr path, IntPtr pattern, sbyte getFullPath, sbyte topDirectoryOnly);
    internal static IFabricStringListResult FabricDirectoryGetFiles(IntPtr path, IntPtr pattern, sbyte getFullPath, sbyte topDirectoryOnly);
    internal static void FabricDirectoryCopy(IntPtr src, IntPtr des, sbyte overwrite);
    internal static void FabricDirectoryRename(IntPtr src, IntPtr des, sbyte overwrite);
    internal static void FabricDirectoryExists(IntPtr path, SByte& isExisted);
    internal static void FabricDirectoryDelete(IntPtr path, sbyte recursive, sbyte deleteReadOnlyFiles);
    internal static void FabricDirectoryIsSymbolicLink(IntPtr path, SByte& result);
    internal static void FabricSetRoot2(IntPtr root, IntPtr machineName);
    internal static void FabricSetRoot(IntPtr root);
    internal static void FabricSetBinRoot2(IntPtr binRoot, IntPtr machineName);
    internal static void FabricSetBinRoot(IntPtr binRoot);
    internal static void FabricSetCodePath2(IntPtr codePath, IntPtr machineName);
    internal static void FabricSetCodePath(IntPtr codePath);
    internal static void FabricSetDataRoot2(IntPtr dataRoot, IntPtr machineName);
    internal static void FabricSetDataRoot(IntPtr dataRoot);
    internal static void FabricSetLogRoot2(IntPtr logRoot, IntPtr machineName);
    internal static void FabricSetLogRoot(IntPtr logRoot);
    internal static IFabricStringResult FabricGetLastErrorMessage();
    internal static long FabricSetLastErrorMessage(IntPtr message);
    internal static void FabricFileOpen(IntPtr path, FABRIC_FILE_MODE fileMode, FABRIC_FILE_ACCESS fileAccess, FABRIC_FILE_SHARE fileShare, IntPtr& fileHandle);
    internal static void FabricFileOpenEx(IntPtr path, FABRIC_FILE_MODE fileMode, FABRIC_FILE_ACCESS fileAccess, FABRIC_FILE_SHARE fileShare, FABRIC_FILE_ATTRIBUTES fileAttributes, IntPtr& fileHandle);
    internal static void FabricFileCopy(IntPtr src, IntPtr des, sbyte overwrite);
    internal static void FabricFileMove(IntPtr src, IntPtr des);
    internal static void FabricFileExists(IntPtr path, SByte& isExisted);
    internal static void FabricFileDelete(IntPtr path, sbyte deleteReadonly);
    internal static void FabricFileRemoveReadOnlyAttribute(IntPtr path);
    internal static void FabricFileReplace(IntPtr replacedFileName, IntPtr replacementFileName, IntPtr backupFileName, sbyte ignoreMergeErrors);
    internal static void FabricFileCreateHardLink(IntPtr fileName, IntPtr existingFileName, SByte& succeeded);
    internal static void FabricFileGetSize(IntPtr path, Int64& size);
    internal static void FabricFileGetLastWriteTime(IntPtr path, NativeFILETIME& lastWriteTime);
    internal static IFabricStringResult FabricFileGetVersionInfo(IntPtr path);
    internal static IFabricStringResult FabricGetUncPath(IntPtr path);
    internal static IFabricStringResult FabricGetDirectoryName(IntPtr path);
    internal static IFabricStringResult FabricGetFullPath(IntPtr path);
    internal static void FabricGetNodeIdFromNodeName(IntPtr nodeName, IntPtr rolesForWhichToUseV1Generator, sbyte useV2NodeIdGenerator, IntPtr nodeIdGeneratorVersion, FABRIC_NODE_ID& nodeId);
    internal static void WriteManagedTrace(IntPtr taskName, IntPtr eventName, IntPtr id, ushort level, IntPtr text);
    internal static void WriteManagedStructuredTrace(FABRIC_ETW_TRACE_EVENT_PAYLOAD& eventPayload);
    internal static void CabExtractFiltered(IntPtr cabPath, IntPtr extractPath, IntPtr filters, sbyte inclusive);
    internal static sbyte IsCabFile(IntPtr cabPath);
    internal static void FabricPerfCounterCreateCounterSet(IntPtr counterSetInitializer, IntPtr& counterSetHandle);
    internal static void FabricPerfCounterCreateCounterSetInstance(IntPtr hCounterSet, IntPtr instanceName, IntPtr& counterSetInstanceHandle);
    internal static void FabricPerfCounterSetPerformanceCounterRefValue(IntPtr hCounterSetInstance, int id, IntPtr counterAddress);
    internal static void FabricPerfCounterDeleteCounterSetInstance(IntPtr hCounterSetInstance);
    internal static void FabricPerfCounterDeleteCounterSet(IntPtr hCounterSet);
    internal static void GenerateSelfSignedCertAndImportToStore(IntPtr subName, IntPtr storeName, IntPtr profile, IntPtr DNS, NativeFILETIME expireDate);
    internal static void GenerateSelfSignedCertAndSaveAsPFX(IntPtr subName, IntPtr fileName, IntPtr password, IntPtr DNS, NativeFILETIME expireDate);
    internal static void DeleteCertificateFromStore(IntPtr certName, IntPtr store, IntPtr profile, sbyte isExactMatch);
    internal static void VerifyFileSignature(IntPtr filename, SByte& isValid);
    internal static void FabricSetEnableCircularTraceSession(bool enableCircularTraceSession);
    internal static void FabricSetEnableCircularTraceSession2(bool enableCircularTraceSession, IntPtr machineName);
    internal static bool FabricGetEnableCircularTraceSession();
    internal static bool FabricGetEnableCircularTraceSession2(IntPtr machineName);
    internal static void FabricSetFabricTraceFileSizeInMB(UInt32 fabricTraceFileSizeInMB);
    internal static void FabricSetFabricTraceFileSizeInMB2(UInt32 fabricTraceFileSizeInMB, IntPtr machineName);
    internal static UInt32 FabricGetFabricTraceFileSizeInMB();
    internal static UInt32 FabricGetFabricTraceFileSizeInMB2(IntPtr machineName);
    internal static void FabricSetLeaseTraceFileSizeInMB(UInt32 leaseTraceFileSizeInMB);
    internal static void FabricSetLeaseTraceFileSizeInMB2(UInt32 leaseTraceFileSizeInMB, IntPtr machineName);
    internal static UInt32 FabricGetLeaseTraceFileSizeInMB();
    internal static UInt32 FabricGetLeaseTraceFileSizeInMB2(IntPtr machineName);
    internal static void FabricSetEnableUnsupportedPreviewFeatures(bool enableUnsupportedPreviewFeatures);
    internal static void FabricSetEnableUnsupportedPreviewFeatures2(bool enableUnsupportedPreviewFeatures, IntPtr machineName);
    internal static void FabricSetIsSFVolumeDiskServiceEnabled(bool isSFVolumeDiskServiceEnabled);
    internal static void FabricSetIsSFVolumeDiskServiceEnabled2(bool isSFVolumeDiskServiceEnabled, IntPtr machineName);
    internal static void FabricSetDisableKernelDriver(bool disableKernelDriver);
    internal static void FabricSetDisableKernelDriver2(bool disableKernelDriver, IntPtr machineName);
    internal static void FabricSetSfInstalledMoby(IntPtr fileContents);
}
internal static class System.Fabric.Interop.NativeContainerActivatorService : object {
    internal static IFabricContainerActivatorServiceAgent2 CreateFabricContainerActivatorServiceAgent(Guid& iid);
    internal static IFabricHostingSettingsResult LoadHostingSettings();
}
internal static class System.Fabric.Interop.NativeFaultAnalysisService : object {
    internal static IFabricFaultAnalysisServiceAgent CreateFabricFaultAnalysisServiceAgent(Guid& iid);
}
internal static class System.Fabric.Interop.NativeGatewayResourceManager : object {
    internal static IFabricGatewayResourceManagerAgent CreateFabricGatewayResourceManagerAgent(Guid& iid);
}
internal static class System.Fabric.Interop.NativeGatewayResourceManagerTypes : object {
}
internal static class System.Fabric.Interop.NativeImageBuilder : object {
    internal static IFabricImageBuilderAgent CreateFabricImageBuilderAgent(Guid& iid);
}
internal static class System.Fabric.Interop.NativeImageStore : object {
    internal static IFabricNativeImageStoreClient FabricCreateNativeImageStoreClient(bool isInternal, IntPtr workingDirectory, ushort connectionStringsSize, IntPtr connectionStrings, Guid& iid);
    internal static IFabricNativeImageStoreClient FabricCreateLocalNativeImageStoreClient(bool isInternal, IntPtr workingDirectory, Guid& iid);
    internal static void ArchiveApplicationPackage(IntPtr appPackageRootDirectory, IFabricNativeImageStoreProgressEventHandler progressEventHandler);
    internal static bool TryExtractApplicationPackage(IntPtr appPackageRootDirectory, IFabricNativeImageStoreProgressEventHandler progressEventHandler);
    internal static IFabricStringResult GenerateSfpkg(IntPtr appPackageRootDirectory, IntPtr destinationDirectory, sbyte applyCompression, IntPtr sfPkgName);
    internal static void ExpandSfpkg(IntPtr sfPkgFilePath, IntPtr appPackageRootDirectory);
    internal static IFabricStringResult ComputeHash(IntPtr algorithm, IntPtr path, sbyte ignoreCase);
}
internal static class System.Fabric.Interop.NativeInfrastructureService : object {
    internal static IFabricInfrastructureServiceAgent CreateFabricInfrastructureServiceAgent(Guid& iid);
}
internal static class System.Fabric.Interop.NativeRuntime : object {
    internal static IFabricAsyncOperationContext FabricBeginCreateRuntime(Guid& riid, IFabricProcessExitHandler exitHandler, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    internal static IFabricRuntime FabricEndCreateRuntime(IFabricAsyncOperationContext context);
    internal static IFabricRuntime FabricCreateRuntime(Guid& riid);
    internal static IFabricAsyncOperationContext FabricBeginGetActivationContext(Guid& riid, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    internal static IFabricCodePackageActivationContext6 FabricEndGetActivationContext(IFabricAsyncOperationContext context);
    internal static IFabricCodePackageActivationContext6 FabricGetActivationContext(Guid& riid);
    internal static IFabricAsyncOperationContext FabricBeginGetNodeContext(UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    internal static IFabricNodeContextResult2 FabricEndGetNodeContext(IFabricAsyncOperationContext context);
    internal static IFabricNodeContextResult2 FabricGetNodeContext();
    internal static IFabricReplicatorSettingsResult FabricLoadReplicatorSettings(IFabricCodePackageActivationContext codePackageActivationContext, IntPtr configurationPackageName, IntPtr sectionName);
    internal static IFabricEseLocalStoreSettingsResult FabricLoadEseLocalStoreSettings(IFabricCodePackageActivationContext codePackageActivationContext, IntPtr configurationPackageName, IntPtr sectionName);
    internal static IFabricSecurityCredentialsResult FabricLoadSecurityCredentials(IFabricCodePackageActivationContext codePackageActivationContext, IntPtr configurationPackageName, IntPtr sectionName);
    internal static IFabricKeyValueStoreReplica4 FabricCreateKeyValueStoreReplica4(Guid& riid, IntPtr storeName, Guid partitionId, long replicaId, IntPtr serviceName, IntPtr fabricReplicatorSettings, FABRIC_LOCAL_STORE_KIND localStoreKind, IntPtr localStorageSettings, IFabricStoreEventHandler storeEventHandler, IFabricSecondaryEventHandler secondaryEventHandler, FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE notificationMode);
    internal static IFabricKeyValueStoreReplica8 FabricCreateKeyValueStoreReplica5(Guid& riid, IntPtr storeName, Guid partitionId, long replicaId, IntPtr serviceName, IntPtr fabricReplicatorSettings, IntPtr kvsSettings, FABRIC_LOCAL_STORE_KIND localStoreKind, IntPtr localStorageSettings, IFabricStoreEventHandler storeEventHandler, IFabricSecondaryEventHandler secondaryEventHandler);
    internal static IFabricKeyValueStoreReplica8 FabricCreateKeyValueStoreReplica_V2(Guid& riid, Guid partitionId, long replicaId, IntPtr storeSettings, IntPtr replicatorSettings, IFabricStoreEventHandler storeEventHandler, IFabricSecondaryEventHandler secondaryEventHandler);
    internal static int FabricBeginReplicate3(IntPtr fabricInternalManagedReplicator, int count, IntPtr buffersAddress, IntPtr endReplicateCallbackPtr, IntPtr tcsHandlePtr, Int64& sequenceNumber);
    internal static IntPtr FabricGetDataFromOperationData(IntPtr operationData, UInt32& countAllocatedByNative);
    internal static IFabricAsyncOperationContext FabricBeginGetCodePackageActivator(Guid& riid, UInt32 timeoutMilliseconds, IFabricAsyncOperationCallback callback);
    internal static IFabricCodePackageActivator2 FabricEndGetCodePackageActivator(IFabricAsyncOperationContext context);
    internal static IFabricCodePackageActivator2 FabricGetCodePackageActivator(Guid& riid);
}
internal static class System.Fabric.Interop.NativeRuntimeInternal : object {
    internal static IFabricKeyValueStoreReplicaSettingsResult GetFabricKeyValueStoreReplicaDefaultSettings();
    internal static IFabricKeyValueStoreReplicaSettings_V2Result GetFabricKeyValueStoreReplicaDefaultSettings_V2(IntPtr workingDirectory, IntPtr sharedLogDirectory, IntPtr sharedLogFileName, Guid sharedLogGuid);
    internal static IFabricSharedLogSettingsResult GetFabricSharedLogDefaultSettings(IntPtr workingDirectory, IntPtr sharedLogDirectory, IntPtr sharedLogFileName, Guid sharedLogGuid);
    internal static IFabricSecurityCredentialsResult FabricLoadClusterSecurityCredentials();
    internal static IFabricStringResult FabricGetRuntimeDllVersion();
}
internal static class System.Fabric.Interop.NativeTokenValidationService : object {
    internal static IFabricTokenValidationServiceAgent CreateFabricTokenValidationServiceAgent(Guid& iid);
    internal static IFabricStringMapResult GetDefaultAzureActiveDirectoryConfigurations();
}
internal static class System.Fabric.Interop.NativeTypes : object {
    internal static long FABRIC_INVALID_ATOMIC_GROUP_ID;
    internal static long FABRIC_INVALID_SEQUENCE_NUMBER;
    internal static long FABRIC_AUTO_SEQUENCE_NUMBER;
    internal static long FABRIC_INVALID_INSTANCE_ID;
    internal static ulong FABRIC_INVALID_NODE_INSTANCE_ID;
    internal static UInt32 FABRIC_INVALID_OPERATION_INDEX;
    internal static long FABRIC_IGNORE_SEQUENCE_NUMBER_CHECK;
    internal static UInt32 FABRIC_HEALTH_REPORT_INFINITE_TTL;
    internal static string FABRIC_SECURITY_ROLE_NAME_AUTHENTICATED_USERS;
    internal static string FABRIC_SECURITY_ROLE_NAME_ADMINISTRATOR;
    internal static UInt32 FABRIC_INFINITE_DURATION;
    private static Byte[] EmptyByteArray;
    private static NativeFILETIME MinNativeFILETIME;
    private static NativeTypes();
    public static DateTime FromNativeFILETIME(NativeFILETIME filetime);
    public static DateTime FromNativeTicks(long ticks);
    public static Nullable`1<DateTime> FromNullableNativeFILETIME(NativeFILETIME filetime);
    public static NativeFILETIME ToNativeFILETIME(DateTime dateTime);
    public static long ToNativeTicks(DateTime dateTime);
    public static sbyte ToBOOLEAN(bool flag);
    public static bool FromBOOLEAN(sbyte flag);
    public static Byte[] FromNativeBytes(IntPtr p, UInt32 size);
    public static Tuple`2<UInt32, IntPtr> ToNativeBytes(PinCollection pin, Byte[] data);
    public static Tuple`2<UInt32, IntPtr> ToNativeLoadMetrics(PinCollection pin, IList`1<ServiceLoadMetricDescription> metrics);
    public static string FromNativeString(IFabricStringResult result);
    public static SecureString FromNativeToSecureString(IFabricStringResult nativeResult);
    public static SecureString FromNativeToSecureString(IntPtr nativeString);
    public static string FromNativeString(IntPtr p);
    public static string FromNativeStringPointer(IntPtr p);
    public static IDictionary`2<string, string> FromNativeStringMap(IFabricStringMapResult nativeResult);
    internal static IDictionary`2<string, string> FromNativeStringPairList(IntPtr nativePtr);
    internal static IntPtr ToNativeStringPairList(PinCollection pin, IDictionary`2<string, string> stringPairList);
    public static Uri FromNativeUri(IntPtr p);
    public static List`1<string> FromNativeStringList(FABRIC_STRING_LIST stringList);
    public static List`1<string> FromNativeStringList(IntPtr nativePtr);
    public static IntPtr ToNativeStringList(PinCollection pin, IList`1<string> stringList);
    public static IntPtr ToNativeStringPointerArray(PinCollection pin, IList`1<string> stringList);
    private static int GetNativeStringLength(IntPtr stringIntPtr);
    public static NodeId FromNativeNodeId(FABRIC_NODE_ID nativeNodeId);
    public static FABRIC_NODE_ID ToNativeNodeId(NodeId nodeId);
}
internal class System.Fabric.Interop.OperationDataFactoryWrapper : object {
    private IOperationDataFactory operationDataFactory;
    public OperationDataFactoryWrapper(IOperationDataFactory operationDataFactory);
    public IFabricOperationData CreateOperationData(OperationData data);
    public IntPtr CreateOperationData2(OperationData data);
    private IFabricOperationData CreateNativeOperationData(OperationData data, UInt32[] sizes);
    private IntPtr CreateNativeOperationData2(IOperationData data, UInt32[] sizes);
    private UInt32[] GetOperationDataSize(OperationData data);
    private IntPtr GetNativeOperationDataPointer(UInt32[] sizes);
    private void CopyOperationDataToNativeBuffers(IOperationData data, UInt32[] sizes, IntPtr nativeBuffersRaw, UInt32 countAllocatedByNative);
}
internal class System.Fabric.Interop.PinArray : object {
    private SafePinHandle arrayHandle;
    private IPinNode[] nodes;
    private IntPtr[] pinnedItems;
    public int Count { get; }
    public PinArray(IEnumerable enumerable, PinCallback pinCallback);
    public int get_Count();
    public sealed virtual IntPtr AddrOfPinnedObject();
    public sealed virtual void Dispose();
    private int CountItems(IEnumerable enumerable);
}
internal class System.Fabric.Interop.PinBlittable : object {
    private SafePinHandle handle;
    private object item;
    private IntPtr address;
    public PinBlittable(object item);
    public PinBlittable(Uri uri);
    public static PinBlittable Create(object item);
    public static PinBlittable Create(Uri uri);
    public sealed virtual IntPtr AddrOfPinnedObject();
    public sealed virtual void Dispose();
}
internal class System.Fabric.Interop.PinCollection : Collection`1<IPinNode> {
    public IntPtr AddBlittable(object item);
    public IntPtr AddObject(IPinNode pin);
    public IntPtr AddObject(string pin);
    public IntPtr AddObject(Uri uri);
    public IntPtr AddObject(SecureString secureString);
    public virtual IntPtr AddrOfPinnedObject();
    public sealed virtual void Dispose();
}
internal class System.Fabric.Interop.SafePinHandle : SafeHandle {
    public bool IsInvalid { get; }
    public SafePinHandle(object target);
    public virtual bool get_IsInvalid();
    public IntPtr AddrOfPinnedObject();
    protected virtual bool ReleaseHandle();
}
internal class System.Fabric.Interop.SecureStringPinNode : object {
    private IntPtr stringPtr;
    public SecureStringPinNode(SecureString secureString);
    protected virtual override void Finalize();
    public sealed virtual IntPtr AddrOfPinnedObject();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class System.Fabric.Interop.SharedNativeObject`1 : object {
    private T sharedNativeObject;
    private ReferenceCount<T> referenceCount;
    private string typeName;
    private string traceType;
    public SharedNativeObject`1(string traceType);
    public bool TryInitialize(T nativeObject);
    public T TryAcquire();
    public void Release();
    public void TryAcquireAndInvoke(Action`1<T> action);
    private long GetCurrentCount();
}
internal class System.Fabric.Interop.StringCollectionResult : ItemList`1<string> {
    private StringCollectionResult(bool mayContainDuplicates);
    internal static StringCollectionResult FromNative(IFabricStringListResult innerCollection);
    internal static StringCollectionResult FromNative(IFabricStringListResult innerCollection, bool mayContainDuplicates);
}
internal class System.Fabric.Interop.StringListResult : object {
    private PinCollection pinCollection;
    private UInt32 count;
    private IntPtr items;
    public StringListResult(IList`1<string> list);
    public sealed virtual IntPtr GetStrings(UInt32& itemCount);
}
internal class System.Fabric.Interop.StringResult : object {
    private IPinNode pin;
    public StringResult(string s);
    public static string FromNative(IFabricStringResult nativeResult);
    public static SecureString FromNativeToSecureString(IFabricStringResult nativeResult);
    public sealed virtual IntPtr get_String();
}
internal static class System.Fabric.Interop.Utility : object {
    private static double MaxValidTimeSpanMilliseconds;
    public static void ReleaseFail(string format, Object[] args);
    public static void ReleaseAssert(bool cond, string format, Object[] args);
    public static UInt32 ToMilliseconds(TimeSpan timespan, string argumentName);
    public static Exception TranslateCOMExceptionToManaged(COMException e, string functionTag);
    public static COMException TryTranslateExceptionToCOM(Exception e);
    public static Exception TryTranslateManagedExceptionToCOM(Exception e);
    public static Exception TranslateArgumentException(ArgumentException e);
    private static string GetErrorDetails();
    public static void TryTranslateManagedExceptionToCOMAndThrow(Exception e);
    public static IFabricAsyncOperationContext WrapNativeAsyncMethodImplementation(Func`2<CancellationToken, Task> func, IFabricAsyncOperationCallback callback, string functionTag);
    public static IFabricAsyncOperationContext WrapNativeAsyncMethodImplementation(Func`2<CancellationToken, Task> func, IFabricAsyncOperationCallback callback, string functionTag, InteropApi interopApi);
    public static TResult WrapNativeSyncMethodImplementation(Func`1<TResult> func, string functionTag);
    public static TResult WrapNativeSyncMethodImplementation(Func`1<TResult> func, string functionTag, InteropApi interopApi);
    public static void WrapNativeSyncMethodImplementation(Action action, string functionTag);
    public static void WrapNativeSyncMethodImplementation(Action action, string functionTag, InteropApi interopApi);
    public static Task WrapNativeAsyncInvokeInMTA(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Action`1<IFabricAsyncOperationContext> endFunc, CancellationToken cancellationToken, string functionTag);
    public static Task WrapNativeAsyncInvokeInMTA(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Action`1<IFabricAsyncOperationContext> endFunc, InteropExceptionTracePolicy tracePolicy, CancellationToken cancellationToken, string functionTag);
    public static Task`1<TResult> WrapNativeAsyncInvokeInMTA(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Func`2<IFabricAsyncOperationContext, TResult> endFunc, CancellationToken cancellationToken, string functionTag);
    public static Task`1<TResult> WrapNativeAsyncInvokeInMTA(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Func`2<IFabricAsyncOperationContext, TResult> endFunc, InteropExceptionTracePolicy tracePolicy, CancellationToken cancellationToken, string functionTag);
    public static Task WrapNativeAsyncInvoke(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Action`1<IFabricAsyncOperationContext> endFunc, CancellationToken cancellationToken, string functionTag);
    public static Task WrapNativeAsyncInvoke(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Action`1<IFabricAsyncOperationContext> endFunc, InteropExceptionTracePolicy tracePolicy, CancellationToken cancellationToken, string functionTag);
    public static Task`1<TResult> WrapNativeAsyncInvoke(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Func`2<IFabricAsyncOperationContext, TResult> endFunc, CancellationToken cancellationToken, string functionTag);
    public static Task`1<TResult> WrapNativeAsyncInvoke(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Func`2<IFabricAsyncOperationContext, TResult> endFunc, InteropExceptionTracePolicy tracePolicy, CancellationToken cancellationToken, string functionTag);
    public static Task`1<TResult> WrapNativeAsyncInvoke(Func`2<IFabricAsyncOperationCallback, IFabricAsyncOperationContext> beginFunc, Func`2<IFabricAsyncOperationContext, TResult> endFunc, InteropExceptionTracePolicy tracePolicy, CancellationToken cancellationToken, bool runContinuationsAsynchronously, string functionTag);
    public static void WrapNativeSyncInvokeInMTA(Action action, string functionTag);
    public static TResult WrapNativeSyncInvokeInMTA(Func`1<TResult> func, string functionTag);
    public static void WrapNativeSyncInvoke(Action action, string functionTag, string functionArgs);
    public static TResult WrapNativeSyncInvoke(Func`1<TResult> func, string functionTag, string functionArgs);
    public static void SafeReleaseComObject(object obj);
    public static void SafeFinalReleaseComObject(object obj);
    public static Task`1<TResult> CreateCompletedTask(TResult result);
    private static TResult RunInMTA(Func`1<TResult> func);
    private static void RunInMTA(Action action);
    internal static T ReadXml(string fileName, string schemaFile);
    internal static T ReadXmlString(string xmlString, string schemaFile);
    internal static T ReadXml(string fileName);
    internal static T ReadXml(XmlReader reader);
}
internal class System.Fabric.InvokeDataLossProgressResult : object {
    private IntPtr nativeResult;
    private PinCollection pinCollection;
    private bool disposed;
    public InvokeDataLossProgressResult(PartitionDataLossProgress progress);
    public sealed virtual IntPtr get_Progress();
    public sealed virtual void Dispose();
}
internal class System.Fabric.InvokeQuorumLossProgressResult : object {
    private IntPtr nativeResult;
    private PinCollection pinCollection;
    private bool disposed;
    public InvokeQuorumLossProgressResult(PartitionQuorumLossProgress progress);
    public sealed virtual IntPtr get_Progress();
    public sealed virtual void Dispose();
}
public interface System.Fabric.IOperation {
    public OperationType OperationType { get; }
    public long SequenceNumber { get; }
    public long AtomicGroupId { get; }
    public OperationData Data { get; }
    public abstract virtual OperationType get_OperationType();
    public abstract virtual long get_SequenceNumber();
    public abstract virtual long get_AtomicGroupId();
    public abstract virtual OperationData get_Data();
    public abstract virtual void Acknowledge();
}
public interface System.Fabric.IOperationData {
}
public interface System.Fabric.IOperationDataStream {
    public abstract virtual Task`1<OperationData> GetNextAsync(CancellationToken cancellationToken);
}
public interface System.Fabric.IOperationStream {
    public abstract virtual Task`1<IOperation> GetOperationAsync(CancellationToken cancellationToken);
}
public interface System.Fabric.IOperationStream2 {
    public abstract virtual void ReportFault(FaultType faultType);
}
public interface System.Fabric.IOperationStream3 {
    public abstract virtual Task`1<IOperation> GetMemoryManagedOperationAsync(CancellationToken cancellationToken);
}
public interface System.Fabric.IPrimaryReplicator {
    public abstract virtual Task`1<bool> OnDataLossAsync(CancellationToken cancellationToken);
    public abstract virtual void UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration);
    public abstract virtual Task WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken);
    public abstract virtual void UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration);
    public abstract virtual Task BuildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken);
    public abstract virtual void RemoveReplica(long replicaId);
}
public interface System.Fabric.IReplicator {
    public abstract virtual Task`1<string> OpenAsync(CancellationToken cancellationToken);
    public abstract virtual Task ChangeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual void Abort();
    public abstract virtual long GetCurrentProgress();
    public abstract virtual long GetCatchUpCapability();
    public abstract virtual Task UpdateEpochAsync(Epoch epoch, CancellationToken cancellationToken);
}
public interface System.Fabric.IReplicatorCatchupSpecificQuorum {
}
public interface System.Fabric.IServiceGroupPartition {
    public abstract virtual T ResolveMember(Uri name);
}
public interface System.Fabric.IServicePartition {
    public ServicePartitionInformation PartitionInfo { get; }
    public abstract virtual void ReportLoad(IEnumerable`1<LoadMetric> metrics);
    public abstract virtual void ReportFault(FaultType faultType);
    public abstract virtual ServicePartitionInformation get_PartitionInfo();
    public abstract virtual void ReportMoveCost(MoveCost moveCost);
    public abstract virtual void ReportPartitionHealth(HealthInformation healthInfo);
    public abstract virtual void ReportPartitionHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
}
public interface System.Fabric.IStatefulServiceFactory {
    public abstract virtual IStatefulServiceReplica CreateReplica(string serviceTypeName, Uri serviceName, Byte[] initializationData, Guid partitionId, long replicaId);
}
public interface System.Fabric.IStatefulServicePartition {
    public PartitionAccessStatus ReadStatus { get; }
    public PartitionAccessStatus WriteStatus { get; }
    public abstract virtual PartitionAccessStatus get_ReadStatus();
    public abstract virtual PartitionAccessStatus get_WriteStatus();
    public abstract virtual FabricReplicator CreateReplicator(IStateProvider stateProvider, ReplicatorSettings replicatorSettings);
    public abstract virtual void ReportReplicaHealth(HealthInformation healthInfo);
    public abstract virtual void ReportReplicaHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
}
public interface System.Fabric.IStatefulServiceReplica {
    public abstract virtual void Initialize(StatefulServiceInitializationParameters initializationParameters);
    public abstract virtual Task`1<IReplicator> OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual void Abort();
}
public interface System.Fabric.IStatelessServiceFactory {
    public abstract virtual IStatelessServiceInstance CreateInstance(string serviceTypeName, Uri serviceName, Byte[] initializationData, Guid partitionId, long instanceId);
}
public interface System.Fabric.IStatelessServiceInstance {
    public abstract virtual void Initialize(StatelessServiceInitializationParameters initializationParameters);
    public abstract virtual Task`1<string> OpenAsync(IStatelessServicePartition partition, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual void Abort();
}
public interface System.Fabric.IStatelessServicePartition {
    public abstract virtual void ReportInstanceHealth(HealthInformation healthInfo);
    public abstract virtual void ReportInstanceHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public abstract virtual void ReportCompletion();
}
public interface System.Fabric.IStateProvider {
    public abstract virtual long GetLastCommittedSequenceNumber();
    public abstract virtual Task UpdateEpochAsync(Epoch epoch, long previousEpochLastSequenceNumber, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> OnDataLossAsync(CancellationToken cancellationToken);
    public abstract virtual IOperationDataStream GetCopyContext();
    public abstract virtual IOperationDataStream GetCopyState(long upToSequenceNumber, IOperationDataStream copyContext);
}
public interface System.Fabric.IStateReplicator {
    public abstract virtual Task`1<long> ReplicateAsync(OperationData operationData, CancellationToken cancellationToken, Int64& sequenceNumber);
    public abstract virtual IOperationStream GetCopyStream();
    public abstract virtual IOperationStream GetReplicationStream();
    public abstract virtual void UpdateReplicatorSettings(ReplicatorSettings settings);
}
public interface System.Fabric.IStateReplicator2 {
    public abstract virtual ReplicatorSettings GetReplicatorSettings();
}
internal interface System.Fabric.ITokenValidationService {
    public abstract virtual Task`1<ClaimDescriptionList> ValidateTokenAsync(string authToken, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual TokenServiceMetadata GetTokenServiceMetadata();
}
internal interface System.Fabric.IUpgradeOrchestrationService {
    public abstract virtual Task StartClusterConfigurationUpgrade(ConfigurationUpgradeDescription startUpgradeDescription, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<FabricOrchestrationUpgradeProgress> GetClusterConfigurationUpgradeStatus(TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetClusterConfiguration(string apiVersion, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task GetUpgradesPendingApproval(TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task StartApprovedUpgrades(TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> CallSystemService(string action, string inpubBlob, TimeSpan timeout, CancellationToken cancellationToken);
}
public class System.Fabric.KeyValueStoreEnumerator : object {
    private IFabricKeyValueStoreEnumerator2 nativeEnumerator;
    internal KeyValueStoreEnumerator(IFabricKeyValueStoreEnumerator nativeEnumerator);
    public IEnumerator`1<KeyValueStoreItem> Enumerate(string keyPrefix);
    public IEnumerator`1<KeyValueStoreItem> Enumerate(string keyPrefix, bool strictPrefix);
    public IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadata(string keyPrefix);
    public IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadata(string keyPrefix, bool strictPrefix);
    private IEnumerator`1<KeyValueStoreItem> EnumerateHelper(string keyPrefix, bool strictPrefix);
    private IFabricKeyValueStoreItemEnumerator CreateNativeEnumeratorByKey(string keyPrefix, bool strictPrefix);
    private IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadataHelper(string keyPrefix, bool strictPrefix);
    private IFabricKeyValueStoreItemMetadataEnumerator CreateNativeMetadataEnumeratorByKey(string keyPrefix, bool strictPrefix);
}
public class System.Fabric.KeyValueStoreItem : object {
    [CompilerGeneratedAttribute]
private KeyValueStoreItemMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public KeyValueStoreItemMetadata Metadata { get; private set; }
    public Byte[] Value { get; private set; }
    [CompilerGeneratedAttribute]
public KeyValueStoreItemMetadata get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(KeyValueStoreItemMetadata value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Byte[] value);
    internal static KeyValueStoreItem CreateFromNative(IFabricKeyValueStoreItemResult nativeItemResult);
    private static KeyValueStoreItem CreateFromNative(IntPtr nativeItem);
}
internal class System.Fabric.KeyValueStoreItemEnumerator : object {
    private bool disposed;
    private IFabricKeyValueStoreItemEnumerator2 nativeEnumerator;
    private TransactionBase transactionBase;
    private Func`2<TransactionBase, IFabricKeyValueStoreItemEnumerator> createNativeEnumeratorFunc;
    private KeyValueStoreItem cachedCurrent;
    private object cachedCurrentLock;
    public KeyValueStoreItem Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal KeyValueStoreItemEnumerator(TransactionBase transactionBase, Func`2<TransactionBase, IFabricKeyValueStoreItemEnumerator> createNativeEnumeratorFunc);
    protected virtual override void Finalize();
    public sealed virtual KeyValueStoreItem get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void ReleaseNativeEnumerator();
    private bool MoveNextHelper();
    private KeyValueStoreItem GetCurrentHelper();
    private void ThrowIfDisposed();
    [CompilerGeneratedAttribute]
private KeyValueStoreItem <get_Current>b__9_0();
    [CompilerGeneratedAttribute]
private bool <MoveNext>b__12_0();
    [CompilerGeneratedAttribute]
private void <Reset>b__13_0();
}
public class System.Fabric.KeyValueStoreItemMetadata : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModifiedUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModifiedOnPrimaryUtc>k__BackingField;
    public string Key { get; private set; }
    public int ValueSizeInBytes { get; private set; }
    public long SequenceNumber { get; private set; }
    public DateTime LastModifiedUtc { get; private set; }
    public DateTime LastModifiedOnPrimaryUtc { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public int get_ValueSizeInBytes();
    [CompilerGeneratedAttribute]
private void set_ValueSizeInBytes(int value);
    [CompilerGeneratedAttribute]
public long get_SequenceNumber();
    [CompilerGeneratedAttribute]
private void set_SequenceNumber(long value);
    [CompilerGeneratedAttribute]
public DateTime get_LastModifiedUtc();
    [CompilerGeneratedAttribute]
private void set_LastModifiedUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastModifiedOnPrimaryUtc();
    [CompilerGeneratedAttribute]
private void set_LastModifiedOnPrimaryUtc(DateTime value);
    internal static KeyValueStoreItemMetadata CreateFromNative(IFabricKeyValueStoreItemMetadataResult itemMetadataResult);
    internal static KeyValueStoreItemMetadata CreateFromNative(IntPtr nativeMetadata);
}
internal class System.Fabric.KeyValueStoreItemMetadataEnumerator : object {
    private bool disposed;
    private IFabricKeyValueStoreItemMetadataEnumerator2 nativeEnumerator;
    private TransactionBase transactionBase;
    private Func`2<TransactionBase, IFabricKeyValueStoreItemMetadataEnumerator> createNativeEnumeratorFunc;
    private KeyValueStoreItemMetadata cachedCurrent;
    private object cachedCurrentLock;
    public KeyValueStoreItemMetadata Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal KeyValueStoreItemMetadataEnumerator(TransactionBase transactionBase, Func`2<TransactionBase, IFabricKeyValueStoreItemMetadataEnumerator> createNativeEnumeratorFunc);
    protected virtual override void Finalize();
    public sealed virtual KeyValueStoreItemMetadata get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void ReleaseNativeEnumerator();
    private bool MoveNextHelper();
    private KeyValueStoreItemMetadata GetCurrentHelper();
    private void ThrowIfDisposed();
    [CompilerGeneratedAttribute]
private KeyValueStoreItemMetadata <get_Current>b__9_0();
    [CompilerGeneratedAttribute]
private bool <MoveNext>b__12_0();
    [CompilerGeneratedAttribute]
private void <Reset>b__13_0();
}
public class System.Fabric.KeyValueStoreNotification : object {
    private KeyValueStoreItem kvsItem;
    [CompilerGeneratedAttribute]
private bool <IsDelete>k__BackingField;
    public KeyValueStoreItemMetadata Metadata { get; }
    public Byte[] Value { get; }
    public bool IsDelete { get; private set; }
    public KeyValueStoreItemMetadata get_Metadata();
    public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsDelete();
    [CompilerGeneratedAttribute]
private void set_IsDelete(bool value);
    internal static KeyValueStoreNotification CreateFromNative(IFabricKeyValueStoreNotification nativeNotification);
}
internal class System.Fabric.KeyValueStoreNotificationEnumerator : object {
    private bool disposed;
    private IFabricKeyValueStoreNotificationEnumerator2 nativeEnumerator;
    private KeyValueStoreNotification cachedCurrent;
    private object cachedCurrentLock;
    public KeyValueStoreNotification Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal KeyValueStoreNotificationEnumerator(IFabricKeyValueStoreNotificationEnumerator nativeEnumerator);
    protected virtual override void Finalize();
    public sealed virtual KeyValueStoreNotification get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void ReleaseNativeEnumerator();
    private bool MoveNextHelper();
    private KeyValueStoreNotification GetCurrentHelper();
    private void ThrowIfDisposed();
    [CompilerGeneratedAttribute]
private KeyValueStoreNotification <get_Current>b__7_0();
    [CompilerGeneratedAttribute]
private bool <MoveNext>b__10_0();
}
public class System.Fabric.KeyValueStoreReplica : object {
    public static long IgnoreSequenceNumberCheck;
    private IFabricKeyValueStoreReplica8 nativeStore;
    private IBackupRestoreManager backupRestoreManager;
    private static string BackupMetadataKeyName;
    private static string LocalBackupFolderName;
    private static string BackupRootFolderPrefix;
    private StatefulServiceInitializationParameters initializationParams;
    private State state;
    private ReplicaRole storeRole;
    private long instanceTimestamp;
    [CompilerGeneratedAttribute]
private EventHandler DataLossReported;
    [CompilerGeneratedAttribute]
private string <StoreName>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalStoreSettings <LocalStoreSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicatorSettings <ReplicatorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValueStoreReplicaSettings <KeyValueStoreReplicaSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    private IntPtr nativeKvsSettings_V2;
    public string StoreName { get; private set; }
    public LocalStoreSettings LocalStoreSettings { get; private set; }
    public ReplicatorSettings ReplicatorSettings { get; private set; }
    public KeyValueStoreReplicaSettings KeyValueStoreReplicaSettings { get; private set; }
    public SecondaryNotificationMode NotificationMode { get; }
    internal Guid PartitionId { get; private set; }
    internal long ReplicaId { get; private set; }
    internal IFabricInternalStatefulServiceReplica InternalStore { get; }
    public KeyValueStoreReplica(string storeName);
    public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings);
    public KeyValueStoreReplica(string storeName, ReplicatorSettings replicatorSettings);
    public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings);
    public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, SecondaryNotificationMode notificationMode);
    public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, KeyValueStoreReplicaSettings kvsSettings);
    [CompilerGeneratedAttribute]
public void add_DataLossReported(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DataLossReported(EventHandler value);
    protected virtual void OnDatalossReported(EventArgs args);
    protected virtual Task`1<bool> OnDataLossAsync(CancellationToken cancellationToken);
    protected virtual Task OnRestoreCompletedAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public string get_StoreName();
    [CompilerGeneratedAttribute]
private void set_StoreName(string value);
    [CompilerGeneratedAttribute]
public LocalStoreSettings get_LocalStoreSettings();
    [CompilerGeneratedAttribute]
private void set_LocalStoreSettings(LocalStoreSettings value);
    [CompilerGeneratedAttribute]
public ReplicatorSettings get_ReplicatorSettings();
    [CompilerGeneratedAttribute]
private void set_ReplicatorSettings(ReplicatorSettings value);
    [CompilerGeneratedAttribute]
public KeyValueStoreReplicaSettings get_KeyValueStoreReplicaSettings();
    [CompilerGeneratedAttribute]
private void set_KeyValueStoreReplicaSettings(KeyValueStoreReplicaSettings value);
    public virtual SecondaryNotificationMode get_NotificationMode();
    [CompilerGeneratedAttribute]
internal Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
internal long get_ReplicaId();
    [CompilerGeneratedAttribute]
private void set_ReplicaId(long value);
    internal IFabricInternalStatefulServiceReplica get_InternalStore();
    private string GetTraceId();
    private string GetOperationId(string key);
    public sealed virtual void Initialize(StatefulServiceInitializationParameters initializationParameters);
    [AsyncStateMachineAttribute("System.Fabric.KeyValueStoreReplica/<OpenAsync>d__56")]
public sealed virtual Task`1<IReplicator> OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.KeyValueStoreReplica/<ChangeRoleAsync>d__57")]
public sealed virtual Task`1<string> ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.KeyValueStoreReplica/<CloseAsync>d__58")]
public sealed virtual Task CloseAsync(CancellationToken cancellationToken);
    public sealed virtual void Abort();
    public Epoch GetCurrentEpoch();
    public void UpdateReplicatorSettings(ReplicatorSettings settings);
    public Transaction CreateTransaction();
    public Transaction CreateTransaction(KeyValueStoreTransactionSettings settings);
    public void Add(TransactionBase transactionBase, string key, Byte[] value);
    public bool TryAdd(TransactionBase transactionBase, string key, Byte[] value);
    public void Remove(TransactionBase transactionBase, string key);
    public void Remove(TransactionBase transactionBase, string key, long checkSequenceNumber);
    public bool TryRemove(TransactionBase transactionBase, string key);
    public bool TryRemove(TransactionBase transactionBase, string key, long checkSequenceNumber);
    public void Update(TransactionBase transactionBase, string key, Byte[] value);
    public void Update(TransactionBase transactionBase, string key, Byte[] value, long checkSequenceNumber);
    public bool TryUpdate(TransactionBase transactionBase, string key, Byte[] value);
    public bool TryUpdate(TransactionBase transactionBase, string key, Byte[] value, long checkSequenceNumber);
    public bool Contains(TransactionBase transactionBase, string key);
    public KeyValueStoreItem Get(TransactionBase transactionBase, string key);
    public KeyValueStoreItem TryGet(TransactionBase transactionBase, string key);
    public Byte[] GetValue(TransactionBase transactionBase, string key);
    public Byte[] TryGetValue(TransactionBase transactionBase, string key);
    public KeyValueStoreItemMetadata GetMetadata(TransactionBase transactionBase, string key);
    public KeyValueStoreItemMetadata TryGetMetadata(TransactionBase transactionBase, string key);
    public IEnumerator`1<KeyValueStoreItem> Enumerate(TransactionBase transactionBase);
    public IEnumerator`1<KeyValueStoreItem> Enumerate(TransactionBase transactionBase, string keyPrefix);
    public IEnumerator`1<KeyValueStoreItem> Enumerate(TransactionBase transactionBase, string keyPrefix, bool strictPrefix);
    public IEnumerator`1<KeyValueStoreItem> EnumerateBySequenceNumber(TransactionBase transactionBase, long fromSequenceNumber);
    public IEnumerator`1<KeyValueStoreItem> EnumerateKeysAndTombstonesBySequenceNumber(TransactionBase transactionBase, long fromSequenceNumber);
    public IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadata(TransactionBase transactionBase);
    public IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadata(TransactionBase transactionBase, string keyPrefix);
    public IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadata(TransactionBase transactionBase, string keyPrefix, bool strictPrefix);
    public long GetLastCommittedSequenceNumber();
    public bool TryAbortExistingTransactionsAndRejectWrites();
    public long GetLSNSplitPercentile(int percentile);
    [ObsoleteAttribute("Use BackupAsync instead")]
public void Backup(string backupDirectory);
    public Task BackupAsync(string backupDirectory, StoreBackupOption backupOption, Func`2<StoreBackupInfo, Task`1<bool>> postBackupAsyncFunc);
    public Task BackupAsync(string backupDirectory, StoreBackupOption backupOption, Func`2<StoreBackupInfo, Task`1<bool>> postBackupAsyncFunc, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use RestoreAsync instead")]
public void Restore(string backupDirectory);
    public Task RestoreAsync(string backupDirectory);
    public Task RestoreAsync(string backupDirectory, CancellationToken cancellationToken);
    public Task RestoreAsync(string backupDirectory, RestoreSettings settings, CancellationToken cancellationToken);
    protected virtual void OnInitialize(StatefulServiceInitializationParameters initializationParameters);
    protected virtual Task OnOpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    protected virtual Task`1<string> OnChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    protected virtual Task OnCloseAsync(CancellationToken cancellationToken);
    protected virtual void OnAbort();
    protected virtual void OnCopyComplete(KeyValueStoreEnumerator enumerator);
    protected virtual void OnReplicationOperation(IEnumerator`1<KeyValueStoreNotification> enumerator);
    internal virtual IFabricKeyValueStoreReplica8 CreateNativeKeyValueStoreReplica(StatefulServiceInitializationParameters initParams, IFabricStoreEventHandler storeEventHandler, IFabricSecondaryEventHandler secondaryEventHandler);
    private static IFabricKeyValueStoreReplica8 CreateNativeKeyValueStoreReplicaHelper(string storeName, Guid partitionId, long replicaId, Uri serviceName, ReplicatorSettings replicatorSettings, LocalStoreSettings localStoreSettings, KeyValueStoreReplicaSettings kvsSettings, IFabricStoreEventHandler storeEventHandler, IFabricSecondaryEventHandler secondaryEventHandler);
    private static IFabricKeyValueStoreReplica8 CreateNativeKeyValueStoreReplicaHelper_V2(Guid partitionId, long replicaId, IntPtr nativeKvsSettings, ReplicatorSettings replicatorSettings, IFabricStoreEventHandler storeEventHandler, IFabricSecondaryEventHandler secondaryEventHandler);
    private IFabricAsyncOperationContext BackupBeginWrapper(string backupDir, StoreBackupOption backupOption, IFabricStorePostBackupHandler postBackupHandler, IFabricAsyncOperationCallback callback);
    private void BackupEndWrapper(IFabricAsyncOperationContext context);
    private IFabricAsyncOperationContext RestoreBeginWrapper(string backupDir, RestoreSettings settings, IFabricAsyncOperationCallback callback);
    private void RestoreEndWrapper(IFabricAsyncOperationContext context);
    private IFabricAsyncOperationContext OpenBeginWrapper(ReplicaOpenMode openMode, StatefulServicePartition partition, IFabricAsyncOperationCallback callback);
    private IReplicator OpenEndWrapper(IFabricAsyncOperationContext context);
    private IReplicator CreateReplicator_V1(IFabricReplicator nativeReplicator);
    private IReplicator CreateReplicator_V2(IFabricReplicator nativeReplicator);
    private IFabricAsyncOperationContext CloseBeginWrapper(IFabricAsyncOperationCallback callback);
    private void CloseEndWrapper(IFabricAsyncOperationContext context);
    private IFabricAsyncOperationContext ChangeRoleBeginWrapper(ReplicaRole newRole, IFabricAsyncOperationCallback callback);
    private string ChangeRoleEndWrapper(IFabricAsyncOperationContext context);
    private void AddHelper(TransactionBase transactionBase, string key, Byte[] value);
    private bool TryAddHelper(TransactionBase transactionBase, string key, Byte[] value);
    private void RemoveHelper(TransactionBase transactionBase, string key, long checkSequenceNumber);
    private bool TryRemoveHelper(TransactionBase transactionBase, string key, long checkSequenceNumber);
    private void UpdateHelper(TransactionBase transactionBase, string key, Byte[] value, long checkSequenceNumber);
    private bool TryUpdateHelper(TransactionBase transactionBase, string key, Byte[] value, long checkSequenceNumber);
    private bool ContainsHelper(TransactionBase transactionBase, string key);
    private KeyValueStoreItem GetHelper(TransactionBase transactionBase, string key);
    private KeyValueStoreItem TryGetHelper(TransactionBase transactionBase, string key);
    private Byte[] GetValueHelper(TransactionBase transactionBase, string key);
    private Byte[] TryGetValueHelper(TransactionBase transactionBase, string key);
    private KeyValueStoreItemMetadata GetMetadataHelper(TransactionBase transactionBase, string key);
    private KeyValueStoreItemMetadata TryGetMetadataHelper(TransactionBase transactionBase, string key);
    private IEnumerator`1<KeyValueStoreItem> EnumerateHelper(TransactionBase transactionBase);
    private IFabricKeyValueStoreItemEnumerator CreateNativeEnumerator(TransactionBase transactionBase);
    private IEnumerator`1<KeyValueStoreItem> EnumerateHelper(TransactionBase transactionBase, string keyPrefix, bool strictPrefix);
    private IFabricKeyValueStoreItemEnumerator CreateNativeEnumeratorByKey(TransactionBase transactionBase, string keyPrefix, bool strictPrefix);
    private IEnumerator`1<KeyValueStoreItem> EnumerateHelper(TransactionBase transactionBase, long fromLsn);
    private IFabricKeyValueStoreItemEnumerator CreateNativeEnumeratorByLsn(TransactionBase transactionBase, long fromLsn);
    private IEnumerator`1<KeyValueStoreItem> EnumerateKeysAndTombstonesHelper(TransactionBase transactionBase, long fromLsn);
    private IFabricKeyValueStoreItemEnumerator CreateKeysAndTombstonesNativeEnumeratorByLsn(TransactionBase transactionBase, long fromLsn);
    private IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadataHelper(TransactionBase transactionBase);
    private IFabricKeyValueStoreItemMetadataEnumerator CreateNativeMetadataEnumerator(TransactionBase transactionBase);
    private IEnumerator`1<KeyValueStoreItemMetadata> EnumerateMetadataHelper(TransactionBase transactionBase, string keyPrefix, bool strictPrefix);
    private IFabricKeyValueStoreItemMetadataEnumerator CreateNativeMetadataEnumeratorByKey(TransactionBase transactionBase, string keyPrefix, bool strictPrefix);
    private long GetLastCommittedSequenceNumberHelper();
    private bool TryAbortExistingTransactionsAndRejectWritesHelper();
    private long GetLSNSplitPercentileHelper(int percentile);
    private Epoch GetCurrentEpochHelper();
    private void UpdateReplicatorSettingsHelper(ReplicatorSettings replicatorSettings);
    private Transaction CreateTransactionHelper(KeyValueStoreTransactionSettings settings);
    private void RestoreHelper(string backupDirectory);
    private void ThrowIfNotCreated();
    private void ThrowIfNotOpened();
    private void ThrowIfNotInitialized();
    private string GetExceptionMessage(string message);
    internal void OverrideNativeKeyValueStore_V2(IntPtr nativeKvsSettings);
    private void Store_Initialize(StatefulServiceInitializationParameters initializationParameters);
    private Task`1<IReplicator> Store_OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    private Task`1<string> Store_ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    private Task Store_CloseAsync(CancellationToken cancellationToken);
    private void Store_Abort();
    private void Service_Initialize(StatefulServiceInitializationParameters initializationParameters);
    private Task Service_OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    private Task`1<string> Service_ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    private Task Service_CloseAsync(CancellationToken cancellationToken);
    private void Service_Abort();
    private void BackupRestoreManager_Initialize(StatefulServiceInitializationParameters initializationParameters);
    private Task BackupRestoreManager_OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken);
    private Task BackupRestoreManager_ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    private Task BackupRestoreManager_CloseAsync(CancellationToken cancellationToken);
    private void BackupRestoreManager_Abort();
    private void OnCopyComplete(IFabricKeyValueStoreEnumerator nativeEnumerator);
    private void OnReplicationOperation(IFabricKeyValueStoreNotificationEnumerator nativeEnumerator);
    [AsyncStateMachineAttribute("System.Fabric.KeyValueStoreReplica/<OnDataLossInternalAsync>d__177")]
private Task`1<bool> OnDataLossInternalAsync(CancellationToken cancellationToken);
    private string GetLocalBackupFolderPath();
    private static void PrepareBackupFolder(string backupFolder);
    private void CleanupBackupFolder();
    private sealed virtual override Task System.Fabric.BackupRestore.IBackupRestoreReplica.BackupAsync(BackupOption backupOption, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback, CancellationToken cancellationToken);
    private Task`1<bool> PostBackupFunc(StoreBackupInfo storeBackupInfo, Func`3<BackupInfo, CancellationToken, Task`1<bool>> backupCallback, CancellationToken cancellationToken);
    private sealed virtual override Task System.Fabric.BackupRestore.IBackupRestoreReplica.RestoreAsync(string backupFolderPath, bool forceRestore, CancellationToken cancellationToken);
    private sealed virtual override Task`1<Byte[]> System.Fabric.BackupRestore.IBackupRestoreReplica.GetBackupMetadataAsync(TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.KeyValueStoreReplica/<System-Fabric-BackupRestore-IBackupRestoreReplica-SaveBackupMetadataAsync>d__187")]
private sealed virtual override Task System.Fabric.BackupRestore.IBackupRestoreReplica.SaveBackupMetadataAsync(Byte[] metadata, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Fabric.KeyValueStoreReplica/<System-Fabric-BackupRestore-IBackupRestoreReplica-ClearBackupMetadataAsync>d__188")]
private sealed virtual override Task System.Fabric.BackupRestore.IBackupRestoreReplica.ClearBackupMetadataAsync(TimeSpan timeout);
    private sealed virtual override object System.Fabric.IInternalStatefulServiceReplica.GetStatus();
    [CompilerGeneratedAttribute]
private Epoch <GetCurrentEpoch>b__60_0();
    [CompilerGeneratedAttribute]
private long <GetLastCommittedSequenceNumber>b__89_0();
    [CompilerGeneratedAttribute]
private bool <TryAbortExistingTransactionsAndRejectWrites>b__90_0();
    [CompilerGeneratedAttribute]
private IFabricKeyValueStoreItemEnumerator <EnumerateHelper>b__134_0(TransactionBase tx);
    [CompilerGeneratedAttribute]
private IFabricKeyValueStoreItemMetadataEnumerator <EnumerateMetadataHelper>b__142_0(TransactionBase tx);
    [CompilerGeneratedAttribute]
private IFabricAsyncOperationContext <Store_CloseAsync>b__162_0(IFabricAsyncOperationCallback callback);
    [CompilerGeneratedAttribute]
private void <Store_Abort>b__163_0();
}
public class System.Fabric.KeyValueStoreReplicaSettings : object {
    [CompilerGeneratedAttribute]
private TimeSpan <TransactionDrainTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private SecondaryNotificationMode <SecondaryNotificationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCopyNotificationPrefetch>k__BackingField;
    [CompilerGeneratedAttribute]
private FullCopyMode <FullCopyMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LogicalCopyProbabilityInPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunTransactionCommitContinuationsAsynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LogTruncationIntervalInMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableTombstoneCleanup>k__BackingField;
    public TimeSpan TransactionDrainTimeout { get; public set; }
    public SecondaryNotificationMode SecondaryNotificationMode { get; public set; }
    public bool EnableCopyNotificationPrefetch { get; public set; }
    public FullCopyMode FullCopyMode { get; public set; }
    public int LogicalCopyProbabilityInPercent { get; public set; }
    public bool RunTransactionCommitContinuationsAsynchronously { get; public set; }
    public int LogTruncationIntervalInMinutes { get; public set; }
    public bool DisableTombstoneCleanup { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_TransactionDrainTimeout();
    [CompilerGeneratedAttribute]
public void set_TransactionDrainTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public SecondaryNotificationMode get_SecondaryNotificationMode();
    [CompilerGeneratedAttribute]
public void set_SecondaryNotificationMode(SecondaryNotificationMode value);
    [CompilerGeneratedAttribute]
public bool get_EnableCopyNotificationPrefetch();
    [CompilerGeneratedAttribute]
public void set_EnableCopyNotificationPrefetch(bool value);
    [CompilerGeneratedAttribute]
public FullCopyMode get_FullCopyMode();
    [CompilerGeneratedAttribute]
public void set_FullCopyMode(FullCopyMode value);
    [CompilerGeneratedAttribute]
public int get_LogicalCopyProbabilityInPercent();
    [CompilerGeneratedAttribute]
public void set_LogicalCopyProbabilityInPercent(int value);
    [CompilerGeneratedAttribute]
public bool get_RunTransactionCommitContinuationsAsynchronously();
    [CompilerGeneratedAttribute]
public void set_RunTransactionCommitContinuationsAsynchronously(bool value);
    [CompilerGeneratedAttribute]
public int get_LogTruncationIntervalInMinutes();
    [CompilerGeneratedAttribute]
public void set_LogTruncationIntervalInMinutes(int value);
    [CompilerGeneratedAttribute]
public bool get_DisableTombstoneCleanup();
    [CompilerGeneratedAttribute]
public void set_DisableTombstoneCleanup(bool value);
    private void LoadFromConfigHelper();
    internal IntPtr ToNative(PinCollection pin);
    private void FromNative(IntPtr nativeSettingsPtr);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class System.Fabric.KeyValueStoreTransactionSettings : object {
    private int serializationBlockSize;
    public int SerializationBlockSize { get; public set; }
    public int get_SerializationBlockSize();
    public void set_SerializationBlockSize(int value);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.LoadMetric : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public string Name { get; private set; }
    public int Value { get; private set; }
    public LoadMetric(string name, int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(int value);
}
public class System.Fabric.LocalEseStoreSettings : LocalStoreSettings {
    private static int NoLongerUsed;
    [CompilerGeneratedAttribute]
private string <DbFolderPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LogFileSizeInKB>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LogBufferSizeInKB>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxVerPages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCacheSizeInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDefragFrequencyInMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FreePageSizeThresholdInPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAsyncCommitDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIncrementalBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOverwriteOnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolMinSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolAdjustmentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolCachedReadCursorsPerSessionSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolEvictionPeriodInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CompactionThresholdInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FreePageSizeThresholdInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CompactionProbabilityInPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefragThresholdInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCursors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IntrinsicValueThresholdInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatabasePageSizeInKB>k__BackingField;
    public string DbFolderPath { get; public set; }
    public int LogFileSizeInKB { get; public set; }
    public int LogBufferSizeInKB { get; public set; }
    public int MaxVerPages { get; public set; }
    public int MaxCacheSizeInMB { get; public set; }
    public int MaxDefragFrequencyInMinutes { get; public set; }
    public int FreePageSizeThresholdInPercent { get; public set; }
    public TimeSpan MaxAsyncCommitDelay { get; public set; }
    public bool EnableIncrementalBackup { get; public set; }
    [ObsoleteAttribute("EnableOverwriteOnUpdate should remain false due to performance impacts on Update operations. LVID exhaustion is now handled through better detection and compaction logic. This property will be removed in the next major version of Service Fabric.")]
public bool EnableOverwriteOnUpdate { get; public set; }
    public int PoolMinSize { get; public set; }
    public int PoolAdjustmentSize { get; public set; }
    public int PoolCachedReadCursorsPerSessionSize { get; public set; }
    public int PoolEvictionPeriodInSeconds { get; public set; }
    [ObsoleteAttribute("Use FreePageSizeThresholdInPercent instead")]
public int CompactionThresholdInMB { get; public set; }
    [ObsoleteAttribute("Use FreePageSizeThresholdInPercent instead")]
public int FreePageSizeThresholdInMB { get; public set; }
    [ObsoleteAttribute("Use FreePageSizeThresholdInPercent instead")]
public int CompactionProbabilityInPercent { get; public set; }
    [ObsoleteAttribute("Regular defragmentation will occur in the next major version of Service Fabric runtime.")]
public int DefragThresholdInMB { get; public set; }
    [ObsoleteAttribute("Max cursors now limited by int.MaxValue, the maximum allowed by ESE")]
public int MaxCursors { get; public set; }
    [ObsoleteAttribute("Starting with the next major version, the Service Fabric runtime will determine the optimal long value size and not allow overriding it.")]
public int IntrinsicValueThresholdInBytes { get; public set; }
    [ObsoleteAttribute("Starting with the next major version, the Service Fabric runtime will determine the optimal database page size and not allow overriding it.")]
public int DatabasePageSizeInKB { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DbFolderPath();
    [CompilerGeneratedAttribute]
public void set_DbFolderPath(string value);
    [CompilerGeneratedAttribute]
public int get_LogFileSizeInKB();
    [CompilerGeneratedAttribute]
public void set_LogFileSizeInKB(int value);
    [CompilerGeneratedAttribute]
public int get_LogBufferSizeInKB();
    [CompilerGeneratedAttribute]
public void set_LogBufferSizeInKB(int value);
    [CompilerGeneratedAttribute]
public int get_MaxVerPages();
    [CompilerGeneratedAttribute]
public void set_MaxVerPages(int value);
    [CompilerGeneratedAttribute]
public int get_MaxCacheSizeInMB();
    [CompilerGeneratedAttribute]
public void set_MaxCacheSizeInMB(int value);
    [CompilerGeneratedAttribute]
public int get_MaxDefragFrequencyInMinutes();
    [CompilerGeneratedAttribute]
public void set_MaxDefragFrequencyInMinutes(int value);
    [CompilerGeneratedAttribute]
public int get_FreePageSizeThresholdInPercent();
    [CompilerGeneratedAttribute]
public void set_FreePageSizeThresholdInPercent(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAsyncCommitDelay();
    [CompilerGeneratedAttribute]
public void set_MaxAsyncCommitDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_EnableIncrementalBackup();
    [CompilerGeneratedAttribute]
public void set_EnableIncrementalBackup(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOverwriteOnUpdate();
    [CompilerGeneratedAttribute]
public void set_EnableOverwriteOnUpdate(bool value);
    [CompilerGeneratedAttribute]
public int get_PoolMinSize();
    [CompilerGeneratedAttribute]
public void set_PoolMinSize(int value);
    [CompilerGeneratedAttribute]
public int get_PoolAdjustmentSize();
    [CompilerGeneratedAttribute]
public void set_PoolAdjustmentSize(int value);
    [CompilerGeneratedAttribute]
public int get_PoolCachedReadCursorsPerSessionSize();
    [CompilerGeneratedAttribute]
public void set_PoolCachedReadCursorsPerSessionSize(int value);
    [CompilerGeneratedAttribute]
public int get_PoolEvictionPeriodInSeconds();
    [CompilerGeneratedAttribute]
public void set_PoolEvictionPeriodInSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_CompactionThresholdInMB();
    [CompilerGeneratedAttribute]
public void set_CompactionThresholdInMB(int value);
    [CompilerGeneratedAttribute]
public int get_FreePageSizeThresholdInMB();
    [CompilerGeneratedAttribute]
public void set_FreePageSizeThresholdInMB(int value);
    [CompilerGeneratedAttribute]
public int get_CompactionProbabilityInPercent();
    [CompilerGeneratedAttribute]
public void set_CompactionProbabilityInPercent(int value);
    [CompilerGeneratedAttribute]
public int get_DefragThresholdInMB();
    [CompilerGeneratedAttribute]
public void set_DefragThresholdInMB(int value);
    [CompilerGeneratedAttribute]
public int get_MaxCursors();
    [CompilerGeneratedAttribute]
public void set_MaxCursors(int value);
    [CompilerGeneratedAttribute]
public int get_IntrinsicValueThresholdInBytes();
    [CompilerGeneratedAttribute]
public void set_IntrinsicValueThresholdInBytes(int value);
    [CompilerGeneratedAttribute]
public int get_DatabasePageSizeInKB();
    [CompilerGeneratedAttribute]
public void set_DatabasePageSizeInKB(int value);
    public static LocalEseStoreSettings LoadFrom(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName);
    private static LocalEseStoreSettings InternalLoadFrom(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_LOCAL_STORE_KIND& kind);
    private static LocalEseStoreSettings CreateFromNative(IFabricEseLocalStoreSettingsResult nativeResult);
}
public enum System.Fabric.LocalStoreKind : Enum {
    public int value__;
    public static LocalStoreKind Invalid;
    public static LocalStoreKind Ese;
}
public abstract class System.Fabric.LocalStoreSettings : object {
    [CompilerGeneratedAttribute]
private LocalStoreKind <StoreKind>k__BackingField;
    public LocalStoreKind StoreKind { get; private set; }
    protected LocalStoreSettings(LocalStoreKind storeKind);
    [CompilerGeneratedAttribute]
public LocalStoreKind get_StoreKind();
    [CompilerGeneratedAttribute]
private void set_StoreKind(LocalStoreKind value);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_LOCAL_STORE_KIND& kind);
}
public enum System.Fabric.ManagedIdentityKind : Enum {
    public int value__;
    public static ManagedIdentityKind None;
    public static ManagedIdentityKind Service;
    public static ManagedIdentityKind Host;
    public static ManagedIdentityKind Cluster;
}
internal class System.Fabric.MemoryManagedOperationData : Collection`1<MemoryOwner> {
    internal MemoryManagedOperationData(MemoryOwner data);
    internal MemoryManagedOperationData(IEnumerable`1<MemoryOwner> data);
    internal MemoryManagedOperationData(IFabricOperationData operationData);
    internal MemoryManagedOperationData(IFabricOperation operation);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public OperationData AsOperationData();
    private static bool BufferHasData(UInt32 count, IntPtr buffer);
}
public class System.Fabric.MemoryOwner : object {
    private IMemoryOwner`1<byte> owner;
    public int ValidLength;
    public Memory`1<byte> Memory { get; }
    public MemoryOwner(IMemoryOwner`1<byte> owner, int validLength);
    public MemoryOwner(Byte[] data, int validLength);
    public MemoryOwner(ArraySegment`1<byte> data);
    internal MemoryOwner(IFabricOperationData operationData, FABRIC_OPERATION_DATA_BUFFER* nativeBuffer);
    internal MemoryOwner(IFabricOperation operation, FABRIC_OPERATION_DATA_BUFFER* nativeBuffer);
    public sealed virtual Memory`1<byte> get_Memory();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum System.Fabric.MonitoredUpgradeHealthCheckPhase : Enum {
    public int value__;
    public static MonitoredUpgradeHealthCheckPhase Invalid;
    public static MonitoredUpgradeHealthCheckPhase WaitDuration;
    public static MonitoredUpgradeHealthCheckPhase StableDuration;
    public static MonitoredUpgradeHealthCheckPhase Retry;
}
public enum System.Fabric.MoveCost : Enum {
    public int value__;
    public static MoveCost Zero;
    public static MoveCost Low;
    public static MoveCost Medium;
    public static MoveCost High;
    public static MoveCost VeryHigh;
}
public class System.Fabric.NamedPartitionInformation : ServicePartitionInformation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    internal static NamedPartitionInformation FromNative(FABRIC_NAMED_PARTITION_INFORMATION* nativePartition);
    internal virtual string GetPartitionInformationString();
}
public class System.Fabric.NamedProperty : object {
    private static Dictionary`2<Type, PropertyTypeId> TypeMapping;
    private bool includesValue;
    private object value;
    [CompilerGeneratedAttribute]
private NamedPropertyMetadata <Metadata>k__BackingField;
    public NamedPropertyMetadata Metadata { get; internal set; }
    internal NamedProperty(NamedPropertyMetadata metadata, object value);
    internal NamedProperty(NamedPropertyMetadata metadata);
    private static NamedProperty();
    [CompilerGeneratedAttribute]
public NamedPropertyMetadata get_Metadata();
    [CompilerGeneratedAttribute]
internal void set_Metadata(NamedPropertyMetadata value);
    public T GetValue();
    internal static NamedProperty FromNative(IFabricPropertyValueResult nativeResult, bool includesValue);
}
public class System.Fabric.NamedPropertyMetadata : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyTypeId <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModifiedUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomTypeId>k__BackingField;
    public string PropertyName { get; internal set; }
    public Uri Parent { get; internal set; }
    public PropertyTypeId TypeId { get; internal set; }
    public int ValueSize { get; internal set; }
    public long SequenceNumber { get; internal set; }
    public DateTime LastModifiedUtc { get; internal set; }
    public string CustomTypeId { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
internal void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Uri get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(Uri value);
    [CompilerGeneratedAttribute]
public PropertyTypeId get_TypeId();
    [CompilerGeneratedAttribute]
internal void set_TypeId(PropertyTypeId value);
    [CompilerGeneratedAttribute]
public int get_ValueSize();
    [CompilerGeneratedAttribute]
internal void set_ValueSize(int value);
    [CompilerGeneratedAttribute]
public long get_SequenceNumber();
    [CompilerGeneratedAttribute]
internal void set_SequenceNumber(long value);
    [CompilerGeneratedAttribute]
public DateTime get_LastModifiedUtc();
    [CompilerGeneratedAttribute]
internal void set_LastModifiedUtc(DateTime value);
    [CompilerGeneratedAttribute]
public string get_CustomTypeId();
    [CompilerGeneratedAttribute]
internal void set_CustomTypeId(string value);
    internal static NamedPropertyMetadata FromNative(FABRIC_NAMED_PROPERTY_METADATA nativeMetadata);
    internal static NamedPropertyMetadata FromNative(IFabricPropertyMetadataResult nativeResult);
}
public class System.Fabric.NameEnumerationResult : Collection`1<Uri> {
    private IFabricNameEnumerationResult innerEnumeration;
    public bool HasMoreData { get; }
    public bool IsFinished { get; }
    public bool IsBestEffort { get; }
    public bool IsConsistent { get; }
    public bool IsValid { get; }
    internal EnumerationStatus Status { get; }
    internal IFabricNameEnumerationResult InnerEnumeration { get; }
    private NameEnumerationResult(IFabricNameEnumerationResult innerEnumeration);
    public bool get_HasMoreData();
    public bool get_IsFinished();
    public bool get_IsBestEffort();
    public bool get_IsConsistent();
    public bool get_IsValid();
    internal EnumerationStatus get_Status();
    internal IFabricNameEnumerationResult get_InnerEnumeration();
    internal static NameEnumerationResult FromNative(IFabricNameEnumerationResult innerEnumeration);
    [CompilerGeneratedAttribute]
private EnumerationStatus <get_Status>b__13_0();
}
internal class System.Fabric.NativeClaimsCredentialConverter : object {
    private ClaimsCredentials claimsCredentials;
    public NativeClaimsCredentialConverter(ClaimsCredentials securityCredentials);
    public sealed virtual IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.NativeNoneCredentialConverter : object {
    public sealed virtual IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.NativeWindowsCredentialConverter : object {
    private WindowsCredentials windowsCredentials;
    public NativeWindowsCredentialConverter(WindowsCredentials windowsCredentials);
    public sealed virtual IntPtr ToNative(PinCollection pin);
}
internal class System.Fabric.NativeX509CredentialConverter : object {
    private X509Credentials x509Credentials;
    internal NativeX509CredentialConverter(X509Credentials x509Credentials);
    public sealed virtual IntPtr ToNative(PinCollection pin);
    private static FABRIC_X509_STORE_LOCATION ToNativeStoreLocation(StoreLocation storeLocation);
    private static FABRIC_X509_FIND_TYPE ToNativeX509FindType(X509FindType findType);
}
internal class System.Fabric.NetworkResource : object {
    [CompilerGeneratedAttribute]
private string <ServicePackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PodNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PortBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <NetworkProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerDnsConfigDescription <DnsConfig>k__BackingField;
    internal string ServicePackageId { get; internal set; }
    internal string CodePackageName { get; internal set; }
    internal string NetworkName { get; internal set; }
    internal string NetworkType { get; internal set; }
    internal string PodNamespace { get; internal set; }
    internal string PodName { get; internal set; }
    internal string NetworkContainerId { get; internal set; }
    internal string IpAddress { get; internal set; }
    internal string MacAddress { get; internal set; }
    internal IDictionary`2<string, string> PortBindings { get; internal set; }
    internal IDictionary`2<string, string> NetworkProperties { get; internal set; }
    internal ContainerDnsConfigDescription DnsConfig { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ServicePackageId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageId(string value);
    [CompilerGeneratedAttribute]
internal string get_CodePackageName();
    [CompilerGeneratedAttribute]
internal void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
internal string get_NetworkName();
    [CompilerGeneratedAttribute]
internal void set_NetworkName(string value);
    [CompilerGeneratedAttribute]
internal string get_NetworkType();
    [CompilerGeneratedAttribute]
internal void set_NetworkType(string value);
    [CompilerGeneratedAttribute]
internal string get_PodNamespace();
    [CompilerGeneratedAttribute]
internal void set_PodNamespace(string value);
    [CompilerGeneratedAttribute]
internal string get_PodName();
    [CompilerGeneratedAttribute]
internal void set_PodName(string value);
    [CompilerGeneratedAttribute]
internal string get_NetworkContainerId();
    [CompilerGeneratedAttribute]
internal void set_NetworkContainerId(string value);
    [CompilerGeneratedAttribute]
internal string get_IpAddress();
    [CompilerGeneratedAttribute]
internal void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
internal string get_MacAddress();
    [CompilerGeneratedAttribute]
internal void set_MacAddress(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_PortBindings();
    [CompilerGeneratedAttribute]
internal void set_PortBindings(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_NetworkProperties();
    [CompilerGeneratedAttribute]
internal void set_NetworkProperties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal ContainerDnsConfigDescription get_DnsConfig();
    [CompilerGeneratedAttribute]
internal void set_DnsConfig(ContainerDnsConfigDescription value);
    internal static NetworkResource CreateFromNative(FABRIC_NETWORK_RESOURCE nativeNetworkResource);
    internal static List`1<NetworkResource> CreateFromNative(IntPtr nativePtr);
    internal static List`1<NetworkResource> GetNetworkResourcesByCodePackage(List`1<NetworkResource> networkResources, string codePackageName);
}
public enum System.Fabric.NetworkStatus : Enum {
    public int value__;
    public static NetworkStatus Invalid;
    public static NetworkStatus Ready;
    public static NetworkStatus Creating;
    public static NetworkStatus Deleting;
    public static NetworkStatus Updating;
    public static NetworkStatus Failed;
}
public enum System.Fabric.NetworkStatusFilter : Enum {
    public int value__;
    public static NetworkStatusFilter Default;
    public static NetworkStatusFilter All;
    public static NetworkStatusFilter Ready;
    public static NetworkStatusFilter Creating;
    public static NetworkStatusFilter Deleting;
    public static NetworkStatusFilter Updating;
    public static NetworkStatusFilter Failed;
}
public enum System.Fabric.NetworkType : Enum {
    public int value__;
    public static NetworkType Invalid;
    public static NetworkType Local;
    public static NetworkType Federated;
}
public static class System.Fabric.NodeConfiguration : object {
    public static string GetNodeConfiguration();
    internal static string GetNodeConfiguration(string machineName);
}
public class System.Fabric.NodeContext : object {
    private IFabricNodeContextResult2 nativeNodeContext;
    [CompilerGeneratedAttribute]
private NodeId <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPAddressOrFQDN>k__BackingField;
    public NodeId NodeId { get; private set; }
    public BigInteger NodeInstanceId { get; private set; }
    public string NodeName { get; private set; }
    public string NodeType { get; private set; }
    public string IPAddressOrFQDN { get; private set; }
    public NodeContext(string nodeName, NodeId nodeId, BigInteger nodeInstanceId, string nodeType, string ipAddressOrFQDN);
    internal NodeContext(IFabricNodeContextResult2 nativeNodeContext);
    [CompilerGeneratedAttribute]
public NodeId get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(NodeId value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstanceId();
    [CompilerGeneratedAttribute]
private void set_NodeInstanceId(BigInteger value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NodeType();
    [CompilerGeneratedAttribute]
private void set_NodeType(string value);
    [CompilerGeneratedAttribute]
public string get_IPAddressOrFQDN();
    [CompilerGeneratedAttribute]
private void set_IPAddressOrFQDN(string value);
    public string GetDirectory(string logicalDirectoryName);
    private string GetDirectoryHelper(string logicalDirectoryName);
    internal static NodeContext CreateFromNative(IFabricNodeContextResult2 nodeContextResult);
    internal static NodeContext FromNative(IFabricNodeContextResult2 nodeContextResult);
}
public enum System.Fabric.NodeDeactivationIntent : Enum {
    public int value__;
    public static NodeDeactivationIntent Invalid;
    public static NodeDeactivationIntent Pause;
    public static NodeDeactivationIntent Restart;
    public static NodeDeactivationIntent RemoveData;
    public static NodeDeactivationIntent RemoveNode;
}
public enum System.Fabric.NodeDeactivationStatus : Enum {
    public int value__;
    public static NodeDeactivationStatus None;
    public static NodeDeactivationStatus SafetyCheckInProgress;
    public static NodeDeactivationStatus SafetyCheckComplete;
    public static NodeDeactivationStatus Completed;
}
public enum System.Fabric.NodeDeactivationTaskType : Enum {
    public int value__;
    public static NodeDeactivationTaskType Invalid;
    public static NodeDeactivationTaskType Infrastructure;
    public static NodeDeactivationTaskType Repair;
    public static NodeDeactivationTaskType Client;
}
public class System.Fabric.NodeId : object {
    private static int CharsPerKey;
    private static NodeId OneId;
    private static NodeId ZeroId;
    private static NodeId ZeroMinusOneId;
    private ulong high;
    private ulong low;
    [JsonCustomizationAttribute]
public BigInteger Low { get; }
    [JsonCustomizationAttribute]
public BigInteger High { get; }
    internal static NodeId One { get; }
    internal static NodeId Zero { get; }
    internal static NodeId MaxValue { get; }
    internal static NodeId MinValue { get; }
    internal string Id { get; }
    public NodeId(BigInteger high, BigInteger low);
    internal NodeId(NodeId other);
    private static NodeId();
    public BigInteger get_Low();
    public BigInteger get_High();
    internal static NodeId get_One();
    internal static NodeId get_Zero();
    internal static NodeId get_MaxValue();
    internal static NodeId get_MinValue();
    internal string get_Id();
    public static bool TryParse(string from, NodeId& parsedNodeId);
    public static bool op_Equality(NodeId value1, NodeId value2);
    public static bool op_Inequality(NodeId value1, NodeId value2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    internal static string ToNodeName(string nodeId);
    internal static string ToNodeName(NodeId nodeId);
    internal static NodeId ConvertFromHexString(string hexValue);
}
[DataContractAttribute]
public class System.Fabric.NodeTransitionProgress : TestCommandProgress {
    [CompilerGeneratedAttribute]
private NodeCommandResult <Result>k__BackingField;
    [JsonCustomizationAttribute]
public NodeCommandResult Result { get; internal set; }
    internal NodeTransitionProgress(TestCommandProgressState state, NodeCommandResult result);
    [CompilerGeneratedAttribute]
public NodeCommandResult get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(NodeCommandResult value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static NodeTransitionProgress FromNative(IntPtr pointer);
}
internal class System.Fabric.NodeTransitionProgressResult : object {
    private IntPtr nativeResult;
    private PinCollection pinCollection;
    private bool disposed;
    public NodeTransitionProgressResult(NodeTransitionProgress progress);
    public sealed virtual IntPtr get_Progress();
    public sealed virtual void Dispose();
}
public enum System.Fabric.NodeTransitionType : Enum {
    public int value__;
    public static NodeTransitionType Invalid;
    public static NodeTransitionType Start;
    public static NodeTransitionType Stop;
}
public enum System.Fabric.NodeUpgradePhase : Enum {
    public int value__;
    public static NodeUpgradePhase Invalid;
    public static NodeUpgradePhase PreUpgradeSafetyCheck;
    public static NodeUpgradePhase Upgrading;
    public static NodeUpgradePhase PostUpgradeSafetyCheck;
}
public class System.Fabric.NodeUpgradeProgress : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeUpgradePhase <UpgradePhase>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UpgradeDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UpgradeSafetyCheck> <PendingSafetyChecks>k__BackingField;
    public string NodeName { get; internal set; }
    public NodeUpgradePhase UpgradePhase { get; internal set; }
    public TimeSpan UpgradeDuration { get; internal set; }
    [JsonCustomizationAttribute]
public IList`1<UpgradeSafetyCheck> PendingSafetyChecks { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public NodeUpgradePhase get_UpgradePhase();
    [CompilerGeneratedAttribute]
internal void set_UpgradePhase(NodeUpgradePhase value);
    [CompilerGeneratedAttribute]
public TimeSpan get_UpgradeDuration();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public IList`1<UpgradeSafetyCheck> get_PendingSafetyChecks();
    [CompilerGeneratedAttribute]
internal void set_PendingSafetyChecks(IList`1<UpgradeSafetyCheck> value);
    internal static IList`1<NodeUpgradeProgress> FromNativeList(FABRIC_NODE_UPGRADE_PROGRESS_LIST* nativeList);
    internal static NodeUpgradeProgress FromNative(FABRIC_NODE_UPGRADE_PROGRESS* nativePtr);
    internal static NodeUpgradeProgress FromNative(FABRIC_NODE_UPGRADE_PROGRESS nativeItem);
}
public class System.Fabric.NoneSecurityCredentials : SecurityCredentials {
    internal static NoneSecurityCredentials CreateFromNative();
}
public class System.Fabric.OperationData : Collection`1<ArraySegment`1<byte>> {
    [DynamicAttribute]
private object memoryManagedOperationData;
    public OperationData(IEnumerable`1<ArraySegment`1<byte>> operationData);
    public OperationData(ArraySegment`1<byte> operationData);
    public OperationData(IEnumerable`1<Byte[]> operationData);
    public OperationData(Byte[] operationData);
    internal OperationData(MemoryManagedOperationData memoryManagedOperationData);
    private OperationData(IList`1<ArraySegment`1<byte>> operationData);
    public static OperationData CreateMemoryManagedOperationData(MemoryOwner data);
    public static OperationData CreateMemoryManagedOperationData(IEnumerable`1<MemoryOwner> data);
    public IMemoryManagedOperationData AsMemoryManagedOperationData();
    internal static OperationData CreateFromNative(IFabricOperationData operationData);
    internal static OperationData CreateFromNative(UInt32 count, IntPtr buffer);
    private static IList`1<ArraySegment`1<byte>> CreateFromNativeInternal(UInt32 count, IntPtr buffer);
}
internal class System.Fabric.OperationStream : object {
    private IFabricOperationStream2 nativeOperationStream;
    public OperationStream(IFabricOperationStream nativeOperationStream);
    public sealed virtual Task`1<IOperation> GetOperationAsync(CancellationToken cancellationToken);
    public sealed virtual void ReportFault(FaultType faultType);
    private IFabricAsyncOperationContext GetOperationBeginWrapper(IFabricAsyncOperationCallback callback);
    private IOperation GetOperationEndWrapper(IFabricAsyncOperationContext context, bool useMemoryManagedOperationData);
    private void ReportFaultHelper(FaultType faultType);
    [CompilerGeneratedAttribute]
private IOperation <GetOperationAsync>b__2_0(IFabricAsyncOperationContext callback);
}
public enum System.Fabric.OperationType : Enum {
    public int value__;
    public static OperationType Invalid;
    public static OperationType Normal;
    public static OperationType EndOfStream;
    public static OperationType CreateAtomicGroup;
    public static OperationType AtomicGroupOperation;
    public static OperationType CommitAtomicGroup;
    public static OperationType RollbackAtomicGroup;
    public static OperationType HasAtomicGroupMask;
}
internal class System.Fabric.OrchestrationUpgradeResult : object {
    private FabricOrchestrationUpgradeProgress progress;
    public OrchestrationUpgradeResult(FabricOrchestrationUpgradeProgress progress);
    public sealed virtual IntPtr get_Progress();
}
public enum System.Fabric.Ordering : Enum {
    public int value__;
    public static Ordering Desc;
    public static Ordering Asc;
}
[ExtensionAttribute]
public static class System.Fabric.OrderingUtility : object {
    [ExtensionAttribute]
public static string GetString(Ordering ordering);
    public static Nullable`1<Ordering> FromString(string orderingStr);
}
public class System.Fabric.OutOfDiskSpaceException : IOException {
    public OutOfDiskSpaceException(string message);
    public OutOfDiskSpaceException(string message, Exception inner);
    protected OutOfDiskSpaceException(SerializationInfo info, StreamingContext context);
}
public class System.Fabric.PackageAddedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TPackage <Package>k__BackingField;
    public TPackage Package { get; public set; }
    [CompilerGeneratedAttribute]
public TPackage get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(TPackage value);
}
public class System.Fabric.PackageModifiedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TPackage <OldPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private TPackage <NewPackage>k__BackingField;
    public TPackage OldPackage { get; public set; }
    public TPackage NewPackage { get; public set; }
    [CompilerGeneratedAttribute]
public TPackage get_OldPackage();
    [CompilerGeneratedAttribute]
public void set_OldPackage(TPackage value);
    [CompilerGeneratedAttribute]
public TPackage get_NewPackage();
    [CompilerGeneratedAttribute]
public void set_NewPackage(TPackage value);
}
public class System.Fabric.PackageRemovedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private TPackage <Package>k__BackingField;
    public TPackage Package { get; public set; }
    [CompilerGeneratedAttribute]
public TPackage get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(TPackage value);
}
public class System.Fabric.PackageSharingPolicy : object {
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageSharingPolicyScope <SharingScope>k__BackingField;
    public string PackageName { get; private set; }
    public PackageSharingPolicyScope SharingScope { get; private set; }
    public PackageSharingPolicy(string packageName, PackageSharingPolicyScope sharingScope);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
private void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public PackageSharingPolicyScope get_SharingScope();
    [CompilerGeneratedAttribute]
private void set_SharingScope(PackageSharingPolicyScope value);
    internal void ToNative(PinCollection pinCollection, FABRIC_PACKAGE_SHARING_POLICY& nativeSharingPolicy);
    internal static PackageSharingPolicy FromNative(FABRIC_PACKAGE_SHARING_POLICY nativeSharingPolicy);
}
public class System.Fabric.PackageSharingPolicyList : object {
    [CompilerGeneratedAttribute]
private IList`1<PackageSharingPolicy> <PackageSharingPolicies>k__BackingField;
    public IList`1<PackageSharingPolicy> PackageSharingPolicies { get; private set; }
    public PackageSharingPolicyList(IList`1<PackageSharingPolicy> packageSharingPolicies);
    [CompilerGeneratedAttribute]
public IList`1<PackageSharingPolicy> get_PackageSharingPolicies();
    [CompilerGeneratedAttribute]
private void set_PackageSharingPolicies(IList`1<PackageSharingPolicy> value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static PackageSharingPolicyList FromNative(FABRIC_PACKAGE_SHARING_POLICY_LIST* nativePtr);
}
public enum System.Fabric.PackageSharingPolicyScope : Enum {
    public int value__;
    public static PackageSharingPolicyScope None;
    public static PackageSharingPolicyScope All;
    public static PackageSharingPolicyScope Code;
    public static PackageSharingPolicyScope Config;
    public static PackageSharingPolicyScope Data;
}
public enum System.Fabric.PartitionAccessStatus : Enum {
    public int value__;
    public static PartitionAccessStatus Invalid;
    public static PartitionAccessStatus Granted;
    public static PartitionAccessStatus ReconfigurationPending;
    public static PartitionAccessStatus NotPrimary;
    public static PartitionAccessStatus NoWriteQuorum;
}
internal abstract class System.Fabric.PartitionBase : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionKind <ServicePartitionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionInformation <PartitionInfo>k__BackingField;
    public Guid Id { get; private set; }
    public ServicePartitionKind ServicePartitionKind { get; private set; }
    public ServicePartitionInformation PartitionInfo { get; protected set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public ServicePartitionKind get_ServicePartitionKind();
    [CompilerGeneratedAttribute]
private void set_ServicePartitionKind(ServicePartitionKind value);
    [CompilerGeneratedAttribute]
public sealed virtual ServicePartitionInformation get_PartitionInfo();
    [CompilerGeneratedAttribute]
protected void set_PartitionInfo(ServicePartitionInformation value);
    public sealed virtual void ReportLoad(IEnumerable`1<LoadMetric> metrics);
    public abstract virtual void ReportLoad(FABRIC_LOAD_METRIC[] loadmetrics, PinCollection pin);
    private void ReportLoadHelper(IEnumerable`1<LoadMetric> metrics);
}
[DataContractAttribute]
public class System.Fabric.PartitionDataLossProgress : TestCommandProgress {
    [CompilerGeneratedAttribute]
private PartitionDataLossResult <Result>k__BackingField;
    [DataMemberAttribute]
[JsonCustomizationAttribute]
public PartitionDataLossResult Result { get; internal set; }
    internal PartitionDataLossProgress(TestCommandProgressState state, PartitionDataLossResult result);
    [CompilerGeneratedAttribute]
public PartitionDataLossResult get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(PartitionDataLossResult value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static PartitionDataLossProgress FromNative(IntPtr pointer);
}
[DataContractAttribute]
public class System.Fabric.PartitionQuorumLossProgress : TestCommandProgress {
    [CompilerGeneratedAttribute]
private PartitionQuorumLossResult <Result>k__BackingField;
    [JsonCustomizationAttribute]
public PartitionQuorumLossResult Result { get; internal set; }
    internal PartitionQuorumLossProgress(TestCommandProgressState state, PartitionQuorumLossResult result);
    [CompilerGeneratedAttribute]
public PartitionQuorumLossResult get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(PartitionQuorumLossResult value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static PartitionQuorumLossProgress FromNative(IntPtr pointer);
}
[DataContractAttribute]
public class System.Fabric.PartitionRestartProgress : TestCommandProgress {
    [CompilerGeneratedAttribute]
private PartitionRestartResult <Result>k__BackingField;
    [DataMemberAttribute]
[JsonCustomizationAttribute]
public PartitionRestartResult Result { get; internal set; }
    internal PartitionRestartProgress(TestCommandProgressState state, PartitionRestartResult result);
    [CompilerGeneratedAttribute]
public PartitionRestartResult get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(PartitionRestartResult value);
    public virtual string ToString();
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static PartitionRestartProgress FromNative(IntPtr pointer);
}
public class System.Fabric.PartitionSafetyCheck : SafetyCheck {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public Guid PartitionId { get; private set; }
    internal PartitionSafetyCheck(SafetyCheckKind kind, Guid partitionId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    internal static PartitionSafetyCheck FromNative(SafetyCheckKind kind, FABRIC_PARTITION_SAFETY_CHECK* nativePtr);
}
public class System.Fabric.PartitionSelector : object {
    private static string PartitionKindSingleton;
    private static string PartitionKindUniformInt64;
    private static string PartitionKindNamed;
    private static string PartitionId;
    private static string PartitionKey;
    private static string PartitionKind;
    private static string ServiceNameParameter;
    private Uri serviceName;
    private PartitionSelectorType selectorType;
    private string partitionKey;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PowershellParameters>k__BackingField;
    internal Uri ServiceName { get; }
    internal Dictionary`2<string, string> PowershellParameters { get; private set; }
    private PartitionSelector(Uri serviceName, PartitionSelectorType selectorType, string partitionKey);
    internal Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_PowershellParameters();
    [CompilerGeneratedAttribute]
private void set_PowershellParameters(Dictionary`2<string, string> value);
    public static PartitionSelector RandomOf(Uri serviceName);
    public static PartitionSelector SingletonOf(Uri serviceName);
    public static PartitionSelector PartitionKeyOf(Uri serviceName, string partitionName);
    public static PartitionSelector PartitionKeyOf(Uri serviceName, long partitionKey);
    public static PartitionSelector PartitionIdOf(Uri serviceName, Guid partitionId);
    internal void Write(BinaryWriter bw);
    internal static PartitionSelector Read(BinaryReader br);
    internal int GetPartitionSelectorType();
    internal string GetPartitionKey();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal Partition GetSelectedPartition(Partition[] results, Random random);
    internal bool TryGetPartitionIdIfNotGetServiceName(Guid& partitionId, Uri& serviceName);
    internal IntPtr ToNative(PinCollection pin);
    internal static PartitionSelector CreateFromNative(FABRIC_PARTITION_SELECTOR nativePartitionSelector);
    internal void ThrowInvalidPartitionSelector();
    private void ThrowInvalidPartitionKey();
    [CompilerGeneratedAttribute]
private bool <GetSelectedPartition>b__30_0(Partition p);
}
public class System.Fabric.PartitionUpgradeSafetyCheck : UpgradeSafetyCheck {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public Guid PartitionId { get; private set; }
    internal PartitionUpgradeSafetyCheck(UpgradeSafetyCheckKind kind, Guid partitionId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    internal static PartitionUpgradeSafetyCheck FromNative(UpgradeSafetyCheckKind kind, FABRIC_UPGRADE_PARTITION_SAFETY_CHECK* nativePtr);
}
internal class System.Fabric.ProcessDebugParameters : object {
    [CompilerGeneratedAttribute]
private string <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugParametersFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvVars>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ContainerEntryPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ContainerMountedVolumes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ContainerEnvironmentBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ContainerLabels>k__BackingField;
    internal string ExePath { get; internal set; }
    internal string Arguments { get; internal set; }
    internal string LockFile { get; internal set; }
    internal string WorkingFolder { get; internal set; }
    internal string DebugParametersFile { get; internal set; }
    internal IDictionary`2<string, string> EnvVars { get; internal set; }
    internal List`1<string> ContainerEntryPoints { get; internal set; }
    internal List`1<string> ContainerMountedVolumes { get; internal set; }
    internal List`1<string> ContainerEnvironmentBlock { get; internal set; }
    internal List`1<string> ContainerLabels { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ExePath();
    [CompilerGeneratedAttribute]
internal void set_ExePath(string value);
    [CompilerGeneratedAttribute]
internal string get_Arguments();
    [CompilerGeneratedAttribute]
internal void set_Arguments(string value);
    [CompilerGeneratedAttribute]
internal string get_LockFile();
    [CompilerGeneratedAttribute]
internal void set_LockFile(string value);
    [CompilerGeneratedAttribute]
internal string get_WorkingFolder();
    [CompilerGeneratedAttribute]
internal void set_WorkingFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_DebugParametersFile();
    [CompilerGeneratedAttribute]
internal void set_DebugParametersFile(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_EnvVars();
    [CompilerGeneratedAttribute]
internal void set_EnvVars(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_ContainerEntryPoints();
    [CompilerGeneratedAttribute]
internal void set_ContainerEntryPoints(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_ContainerMountedVolumes();
    [CompilerGeneratedAttribute]
internal void set_ContainerMountedVolumes(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_ContainerEnvironmentBlock();
    [CompilerGeneratedAttribute]
internal void set_ContainerEnvironmentBlock(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_ContainerLabels();
    [CompilerGeneratedAttribute]
internal void set_ContainerLabels(List`1<string> value);
    internal static ProcessDebugParameters CreateFromNative(IntPtr nativePtr);
}
internal class System.Fabric.ProcessDescription : object {
    [CompilerGeneratedAttribute]
private string <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartInDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvVars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectedConsoleFileNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsoleRedirectionFileRetentionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsoleRedirectionFileMaxSizeInKb>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowNoWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowChildProcessDetach>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotAttachedToJob>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessDebugParameters <DebugParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceGovernancePolicyDescription <ResourceGovernancePolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePackageResourceGovernanceDescription <ServicePackageResourceGovernance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHostedServiceProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EncryptedEnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ArgumentsBase64Encoded>k__BackingField;
    internal string ExePath { get; internal set; }
    internal string Arguments { get; internal set; }
    internal string StartInDirectory { get; internal set; }
    internal IDictionary`2<string, string> EnvVars { get; internal set; }
    internal string AppDirectory { get; internal set; }
    internal string TempDirectory { get; internal set; }
    internal string WorkDirectory { get; internal set; }
    internal string LogDirectory { get; internal set; }
    internal bool RedirectConsole { get; internal set; }
    internal string RedirectedConsoleFileNamePrefix { get; internal set; }
    internal int ConsoleRedirectionFileRetentionCount { get; internal set; }
    internal int ConsoleRedirectionFileMaxSizeInKb { get; internal set; }
    internal bool ShowNoWindow { get; internal set; }
    internal bool AllowChildProcessDetach { get; internal set; }
    internal bool NotAttachedToJob { get; internal set; }
    internal ProcessDebugParameters DebugParameters { get; internal set; }
    internal ResourceGovernancePolicyDescription ResourceGovernancePolicy { get; internal set; }
    internal ServicePackageResourceGovernanceDescription ServicePackageResourceGovernance { get; internal set; }
    internal string CgroupName { get; internal set; }
    internal bool IsHostedServiceProcess { get; internal set; }
    internal IDictionary`2<string, string> EncryptedEnvironmentVariables { get; internal set; }
    internal bool ArgumentsBase64Encoded { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ExePath();
    [CompilerGeneratedAttribute]
internal void set_ExePath(string value);
    [CompilerGeneratedAttribute]
internal string get_Arguments();
    [CompilerGeneratedAttribute]
internal void set_Arguments(string value);
    [CompilerGeneratedAttribute]
internal string get_StartInDirectory();
    [CompilerGeneratedAttribute]
internal void set_StartInDirectory(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_EnvVars();
    [CompilerGeneratedAttribute]
internal void set_EnvVars(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal string get_AppDirectory();
    [CompilerGeneratedAttribute]
internal void set_AppDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_TempDirectory();
    [CompilerGeneratedAttribute]
internal void set_TempDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_WorkDirectory();
    [CompilerGeneratedAttribute]
internal void set_WorkDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_LogDirectory();
    [CompilerGeneratedAttribute]
internal void set_LogDirectory(string value);
    [CompilerGeneratedAttribute]
internal bool get_RedirectConsole();
    [CompilerGeneratedAttribute]
internal void set_RedirectConsole(bool value);
    [CompilerGeneratedAttribute]
internal string get_RedirectedConsoleFileNamePrefix();
    [CompilerGeneratedAttribute]
internal void set_RedirectedConsoleFileNamePrefix(string value);
    [CompilerGeneratedAttribute]
internal int get_ConsoleRedirectionFileRetentionCount();
    [CompilerGeneratedAttribute]
internal void set_ConsoleRedirectionFileRetentionCount(int value);
    [CompilerGeneratedAttribute]
internal int get_ConsoleRedirectionFileMaxSizeInKb();
    [CompilerGeneratedAttribute]
internal void set_ConsoleRedirectionFileMaxSizeInKb(int value);
    [CompilerGeneratedAttribute]
internal bool get_ShowNoWindow();
    [CompilerGeneratedAttribute]
internal void set_ShowNoWindow(bool value);
    [CompilerGeneratedAttribute]
internal bool get_AllowChildProcessDetach();
    [CompilerGeneratedAttribute]
internal void set_AllowChildProcessDetach(bool value);
    [CompilerGeneratedAttribute]
internal bool get_NotAttachedToJob();
    [CompilerGeneratedAttribute]
internal void set_NotAttachedToJob(bool value);
    [CompilerGeneratedAttribute]
internal ProcessDebugParameters get_DebugParameters();
    [CompilerGeneratedAttribute]
internal void set_DebugParameters(ProcessDebugParameters value);
    [CompilerGeneratedAttribute]
internal ResourceGovernancePolicyDescription get_ResourceGovernancePolicy();
    [CompilerGeneratedAttribute]
internal void set_ResourceGovernancePolicy(ResourceGovernancePolicyDescription value);
    [CompilerGeneratedAttribute]
internal ServicePackageResourceGovernanceDescription get_ServicePackageResourceGovernance();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageResourceGovernance(ServicePackageResourceGovernanceDescription value);
    [CompilerGeneratedAttribute]
internal string get_CgroupName();
    [CompilerGeneratedAttribute]
internal void set_CgroupName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsHostedServiceProcess();
    [CompilerGeneratedAttribute]
internal void set_IsHostedServiceProcess(bool value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, string> get_EncryptedEnvironmentVariables();
    [CompilerGeneratedAttribute]
internal void set_EncryptedEnvironmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal bool get_ArgumentsBase64Encoded();
    [CompilerGeneratedAttribute]
internal void set_ArgumentsBase64Encoded(bool value);
    internal static ProcessDescription CreateFromNative(IntPtr nativePtr);
}
public enum System.Fabric.ProgressUnitType : Enum {
    public int value__;
    public static ProgressUnitType Invalid;
    public static ProgressUnitType Bytes;
    public static ProgressUnitType ServiceSubPackages;
    public static ProgressUnitType Files;
}
internal class System.Fabric.ProgressUnitTypeHelper : object {
    public static ProgressUnitType FromNative(FABRIC_PROGRESS_UNIT_TYPE native);
}
[KnownTypeAttribute("System.Fabric.CheckExistsPropertyOperation")]
[KnownTypeAttribute("System.Fabric.CheckSequencePropertyOperation")]
[KnownTypeAttribute("System.Fabric.CheckValuePropertyOperation")]
[KnownTypeAttribute("System.Fabric.DeletePropertyOperation")]
[KnownTypeAttribute("System.Fabric.GetPropertyOperation")]
[KnownTypeAttribute("System.Fabric.PutCustomPropertyOperation")]
[KnownTypeAttribute("System.Fabric.PutPropertyOperation")]
public abstract class System.Fabric.PropertyBatchOperation : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBatchOperationKind <Kind>k__BackingField;
    public string PropertyName { get; internal set; }
    public PropertyBatchOperationKind Kind { get; internal set; }
    protected PropertyBatchOperation(string propertyName, PropertyBatchOperationKind kind);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
internal void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public PropertyBatchOperationKind get_Kind();
    [CompilerGeneratedAttribute]
internal void set_Kind(PropertyBatchOperationKind value);
    internal static IntPtr ToNative(PinCollection pin, ICollection`1<PropertyBatchOperation> operations);
    internal abstract virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public enum System.Fabric.PropertyBatchOperationKind : Enum {
    public int value__;
    public static PropertyBatchOperationKind Invalid;
    public static PropertyBatchOperationKind Put;
    public static PropertyBatchOperationKind Get;
    public static PropertyBatchOperationKind CheckExists;
    public static PropertyBatchOperationKind CheckSequence;
    public static PropertyBatchOperationKind Delete;
    public static PropertyBatchOperationKind PutCustom;
    public static PropertyBatchOperationKind CheckValue;
}
public class System.Fabric.PropertyBatchResult : object {
    private IFabricPropertyBatchResult innerBatch;
    private FabricClient fabricClient;
    [CompilerGeneratedAttribute]
private int <FailedOperationIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <FailedOperationException>k__BackingField;
    public int FailedOperationIndex { get; private set; }
    public Exception FailedOperationException { get; private set; }
    private PropertyBatchResult(IFabricPropertyBatchResult innerBatch, int failedOperationIndex, Exception failedOperationException, FabricClient client);
    [CompilerGeneratedAttribute]
public int get_FailedOperationIndex();
    [CompilerGeneratedAttribute]
private void set_FailedOperationIndex(int value);
    [CompilerGeneratedAttribute]
public Exception get_FailedOperationException();
    [CompilerGeneratedAttribute]
private void set_FailedOperationException(Exception value);
    public NamedProperty GetProperty(int index);
    internal static PropertyBatchResult FromNative(IFabricPropertyBatchResult innerBatch, FabricClient fabricClient);
    internal static PropertyBatchResult CreateFailedResult(UInt32 failedOperationIndex, Exception failedOperationException);
    private NamedProperty InternalGetProperty(int index);
}
public class System.Fabric.PropertyEnumerationResult : Collection`1<NamedProperty> {
    private IFabricPropertyEnumerationResult innerEnumeration;
    public bool HasMoreData { get; }
    public bool IsFinished { get; }
    public bool IsBestEffort { get; }
    public bool IsConsistent { get; }
    public bool IsValid { get; }
    internal EnumerationStatus Status { get; }
    internal IFabricPropertyEnumerationResult InnerEnumeration { get; }
    private PropertyEnumerationResult(IFabricPropertyEnumerationResult innerEnumeration, bool includesValue);
    public bool get_HasMoreData();
    public bool get_IsFinished();
    public bool get_IsBestEffort();
    public bool get_IsConsistent();
    public bool get_IsValid();
    internal EnumerationStatus get_Status();
    internal IFabricPropertyEnumerationResult get_InnerEnumeration();
    internal static PropertyEnumerationResult FromNative(IFabricPropertyEnumerationResult innerEnumeration, bool includesValue);
    [CompilerGeneratedAttribute]
private EnumerationStatus <get_Status>b__13_0();
}
public enum System.Fabric.PropertyTypeId : Enum {
    public int value__;
    public static PropertyTypeId Invalid;
    public static PropertyTypeId Binary;
    public static PropertyTypeId Int64;
    public static PropertyTypeId Double;
    public static PropertyTypeId String;
    public static PropertyTypeId Guid;
}
public enum System.Fabric.ProtectionLevel : Enum {
    public int value__;
    public static ProtectionLevel None;
    public static ProtectionLevel Sign;
    public static ProtectionLevel EncryptAndSign;
}
public class System.Fabric.PutCustomPropertyOperation : PropertyBatchOperation {
    [CompilerGeneratedAttribute]
private object <PropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyTypeId <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomTypeId>k__BackingField;
    public object PropertyValue { get; internal set; }
    public PropertyTypeId PropertyType { get; internal set; }
    public string CustomTypeId { get; internal set; }
    public PutCustomPropertyOperation(string propertyName, Byte[] value, string customTypeId);
    public PutCustomPropertyOperation(string propertyName, long value, string customTypeId);
    public PutCustomPropertyOperation(string propertyName, Guid value, string customTypeId);
    public PutCustomPropertyOperation(string propertyName, string value, string customTypeId);
    public PutCustomPropertyOperation(string propertyName, double value, string customTypeId);
    private PutCustomPropertyOperation(string propertyName, PropertyTypeId typeId, object value, string customTypeId);
    [CompilerGeneratedAttribute]
public object get_PropertyValue();
    [CompilerGeneratedAttribute]
internal void set_PropertyValue(object value);
    [CompilerGeneratedAttribute]
public PropertyTypeId get_PropertyType();
    [CompilerGeneratedAttribute]
internal void set_PropertyType(PropertyTypeId value);
    [CompilerGeneratedAttribute]
public string get_CustomTypeId();
    [CompilerGeneratedAttribute]
internal void set_CustomTypeId(string value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public class System.Fabric.PutPropertyOperation : PropertyBatchOperation {
    [CompilerGeneratedAttribute]
private object <PropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyTypeId <PropertyType>k__BackingField;
    public object PropertyValue { get; internal set; }
    public PropertyTypeId PropertyType { get; internal set; }
    public PutPropertyOperation(string propertyName, Byte[] value);
    public PutPropertyOperation(string propertyName, long value);
    public PutPropertyOperation(string propertyName, Guid value);
    public PutPropertyOperation(string propertyName, string value);
    public PutPropertyOperation(string propertyName, double value);
    private PutPropertyOperation(string propertyName, PropertyTypeId typeId, object value);
    [CompilerGeneratedAttribute]
public object get_PropertyValue();
    [CompilerGeneratedAttribute]
internal void set_PropertyValue(object value);
    [CompilerGeneratedAttribute]
public PropertyTypeId get_PropertyType();
    [CompilerGeneratedAttribute]
internal void set_PropertyType(PropertyTypeId value);
    internal virtual IntPtr ToNative(PinCollection pin, FABRIC_PROPERTY_BATCH_OPERATION_KIND& nativeOperationType);
}
public class System.Fabric.Query.Application : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationStatus <ApplicationStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationParameterList <ApplicationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationDefinitionKind <ApplicationDefinitionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationParameterList <UpgradeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedApplicationIdentityDescription <ManagedApplicationIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationMetadata <ApplicationMetadata>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeName { get; internal set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeVersion { get; internal set; }
    [JsonCustomizationAttribute]
public ApplicationStatus ApplicationStatus { get; internal set; }
    public HealthState HealthState { get; internal set; }
    [JsonCustomizationAttribute]
public ApplicationParameterList ApplicationParameters { get; internal set; }
    public ApplicationDefinitionKind ApplicationDefinitionKind { get; private set; }
    [ObsoleteAttribute("Use ApplicationUpgradeProgress.")]
[JsonCustomizationAttribute]
public string UpgradeTypeVersion { get; internal set; }
    [ObsoleteAttribute("Use ApplicationUpgradeProgress.")]
[JsonCustomizationAttribute]
public ApplicationParameterList UpgradeParameters { get; internal set; }
    public ManagedApplicationIdentityDescription ManagedApplicationIdentity { get; public set; }
    [JsonCustomizationAttribute]
public ApplicationMetadata ApplicationMetadata { get; private set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersion();
    [CompilerGeneratedAttribute]
internal void set_ApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public ApplicationStatus get_ApplicationStatus();
    [CompilerGeneratedAttribute]
internal void set_ApplicationStatus(ApplicationStatus value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
internal void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public ApplicationParameterList get_ApplicationParameters();
    [CompilerGeneratedAttribute]
internal void set_ApplicationParameters(ApplicationParameterList value);
    [CompilerGeneratedAttribute]
public ApplicationDefinitionKind get_ApplicationDefinitionKind();
    [CompilerGeneratedAttribute]
private void set_ApplicationDefinitionKind(ApplicationDefinitionKind value);
    [CompilerGeneratedAttribute]
public string get_UpgradeTypeVersion();
    [CompilerGeneratedAttribute]
internal void set_UpgradeTypeVersion(string value);
    [CompilerGeneratedAttribute]
public ApplicationParameterList get_UpgradeParameters();
    [CompilerGeneratedAttribute]
internal void set_UpgradeParameters(ApplicationParameterList value);
    [CompilerGeneratedAttribute]
public ManagedApplicationIdentityDescription get_ManagedApplicationIdentity();
    [CompilerGeneratedAttribute]
public void set_ManagedApplicationIdentity(ManagedApplicationIdentityDescription value);
    [CompilerGeneratedAttribute]
public ApplicationMetadata get_ApplicationMetadata();
    [CompilerGeneratedAttribute]
private void set_ApplicationMetadata(ApplicationMetadata value);
    internal static Application CreateFromNative(FABRIC_APPLICATION_QUERY_RESULT_ITEM nativeResultItem);
}
public enum System.Fabric.Query.ApplicationDefinitionKind : Enum {
    public int value__;
    public static ApplicationDefinitionKind Invalid;
    public static ApplicationDefinitionKind ServiceFabricApplicationDescription;
    public static ApplicationDefinitionKind Compose;
    public static ApplicationDefinitionKind MeshApplicationDescription;
}
public class System.Fabric.Query.ApplicationList : PagedList`1<Application> {
    internal ApplicationList(IList`1<Application> list);
    internal static ApplicationList CreateFromNativeListResult(IFabricGetApplicationListResult2 result);
    internal static ApplicationList CreateFromNativeList(FABRIC_APPLICATION_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.ApplicationLoadInformation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinimumNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ApplicationLoadMetricInformation> <ApplicationLoadMetricInformation>k__BackingField;
    public string Name { get; internal set; }
    public long MinimumNodes { get; internal set; }
    public long MaximumNodes { get; internal set; }
    public long NodeCount { get; internal set; }
    public IList`1<ApplicationLoadMetricInformation> ApplicationLoadMetricInformation { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_MinimumNodes();
    [CompilerGeneratedAttribute]
internal void set_MinimumNodes(long value);
    [CompilerGeneratedAttribute]
public long get_MaximumNodes();
    [CompilerGeneratedAttribute]
internal void set_MaximumNodes(long value);
    [CompilerGeneratedAttribute]
public long get_NodeCount();
    [CompilerGeneratedAttribute]
internal void set_NodeCount(long value);
    [CompilerGeneratedAttribute]
public IList`1<ApplicationLoadMetricInformation> get_ApplicationLoadMetricInformation();
    [CompilerGeneratedAttribute]
private void set_ApplicationLoadMetricInformation(IList`1<ApplicationLoadMetricInformation> value);
    internal static ApplicationLoadInformation CreateFromNative(IFabricGetApplicationLoadInformationResult nativeApplicationLoadInformation);
    internal static ApplicationLoadInformation CreateFromNative(FABRIC_APPLICATION_LOAD_INFORMATION nativeLoadInformation);
    public virtual string ToString();
}
public class System.Fabric.Query.ApplicationLoadMetricInformation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReservationCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ApplicationCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ApplicationLoad>k__BackingField;
    public string Name { get; internal set; }
    public long ReservationCapacity { get; internal set; }
    public long ApplicationCapacity { get; internal set; }
    public long ApplicationLoad { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_ReservationCapacity();
    [CompilerGeneratedAttribute]
internal void set_ReservationCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_ApplicationCapacity();
    [CompilerGeneratedAttribute]
internal void set_ApplicationCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_ApplicationLoad();
    [CompilerGeneratedAttribute]
internal void set_ApplicationLoad(long value);
    internal static ApplicationLoadMetricInformation CreateFromNative(FABRIC_APPLICATION_LOAD_METRIC_INFORMATION nativeResultItem);
    internal static IList`1<ApplicationLoadMetricInformation> CreateFromNativeList(FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST* nativeResultList);
    public virtual string ToString();
}
public class System.Fabric.Query.ApplicationMetadata : object {
    [CompilerGeneratedAttribute]
private ArmMetadata <ArmMetadata>k__BackingField;
    [JsonCustomizationAttribute]
public ArmMetadata ArmMetadata { get; private set; }
    internal ApplicationMetadata(ArmMetadata metadata);
    [CompilerGeneratedAttribute]
public ArmMetadata get_ArmMetadata();
    [CompilerGeneratedAttribute]
private void set_ArmMetadata(ArmMetadata value);
    internal static ApplicationMetadata CreateFromNative(IntPtr nativeApplicationMetadataPtr);
}
public class System.Fabric.Query.ApplicationNameResult : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    internal static ApplicationNameResult CreateFromNativeResult(IFabricGetApplicationNameResult result);
    private static ApplicationNameResult FromNative(FABRIC_APPLICATION_NAME_QUERY_RESULT* nativeResultItem);
}
public class System.Fabric.Query.ApplicationNetwork : object {
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [JsonCustomizationAttribute]
public string NetworkName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
internal void set_NetworkName(string value);
    internal static ApplicationNetwork CreateFromNative(FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM nativeApplicationNetwork);
}
public class System.Fabric.Query.ApplicationNetworkList : PagedList`1<ApplicationNetwork> {
    internal ApplicationNetworkList(IList`1<ApplicationNetwork> list);
    internal static ApplicationNetworkList CreateFromNativeListResult(IFabricGetApplicationNetworkListResult result);
    internal static ApplicationNetworkList CreateFromNativeList(FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public enum System.Fabric.Query.ApplicationStatus : Enum {
    public int value__;
    public static ApplicationStatus Invalid;
    public static ApplicationStatus Ready;
    public static ApplicationStatus Upgrading;
    public static ApplicationStatus Creating;
    public static ApplicationStatus Deleting;
    public static ApplicationStatus Failed;
}
public class System.Fabric.Query.ApplicationType : object {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationTypeStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationParameterList <DefaultParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationTypeDefinitionKind <ApplicationTypeDefinitionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationTypeMetadata <ApplicationTypeMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedKeyVaultReferenceParameterList <ManagedKeyVaultReferenceParameterList>k__BackingField;
    [JsonCustomizationAttribute]
public string ApplicationTypeName { get; private set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeVersion { get; private set; }
    [JsonCustomizationAttribute]
public ApplicationTypeStatus Status { get; private set; }
    [JsonCustomizationAttribute]
public string StatusDetails { get; private set; }
    [JsonCustomizationAttribute]
public ApplicationParameterList DefaultParameters { get; private set; }
    public ApplicationTypeDefinitionKind ApplicationTypeDefinitionKind { get; private set; }
    [JsonCustomizationAttribute]
public ApplicationTypeMetadata ApplicationTypeMetadata { get; private set; }
    [JsonCustomizationAttribute]
public ManagedKeyVaultReferenceParameterList ManagedKeyVaultReferenceParameterList { get; private set; }
    internal ApplicationType(string applicationTypeName, string applicationTypeVersion, ApplicationTypeStatus status, string statusDetails, ApplicationParameterList defaultParamList, ApplicationTypeMetadata applicationTypeMetadata, ManagedKeyVaultReferenceParameterList managedKeyVaultReferenceParameterList);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeVersion();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeVersion(string value);
    [CompilerGeneratedAttribute]
public ApplicationTypeStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ApplicationTypeStatus value);
    [CompilerGeneratedAttribute]
public string get_StatusDetails();
    [CompilerGeneratedAttribute]
private void set_StatusDetails(string value);
    [CompilerGeneratedAttribute]
public ApplicationParameterList get_DefaultParameters();
    [CompilerGeneratedAttribute]
private void set_DefaultParameters(ApplicationParameterList value);
    [CompilerGeneratedAttribute]
public ApplicationTypeDefinitionKind get_ApplicationTypeDefinitionKind();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeDefinitionKind(ApplicationTypeDefinitionKind value);
    [CompilerGeneratedAttribute]
public ApplicationTypeMetadata get_ApplicationTypeMetadata();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeMetadata(ApplicationTypeMetadata value);
    [CompilerGeneratedAttribute]
public ManagedKeyVaultReferenceParameterList get_ManagedKeyVaultReferenceParameterList();
    [CompilerGeneratedAttribute]
private void set_ManagedKeyVaultReferenceParameterList(ManagedKeyVaultReferenceParameterList value);
    internal static ApplicationType CreateFromNative(FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM native);
}
public enum System.Fabric.Query.ApplicationTypeDefinitionKind : Enum {
    public int value__;
    public static ApplicationTypeDefinitionKind Invalid;
    public static ApplicationTypeDefinitionKind ServiceFabricApplicationPackage;
    public static ApplicationTypeDefinitionKind Compose;
    public static ApplicationTypeDefinitionKind MeshApplicationDescription;
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.ApplicationTypeList : object {
    private IList`1<ApplicationType> list;
    public ApplicationType Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ApplicationTypeList(IList`1<ApplicationType> list);
    public sealed virtual int IndexOf(ApplicationType item);
    public sealed virtual void Insert(int index, ApplicationType item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ApplicationType get_Item(int index);
    public sealed virtual void set_Item(int index, ApplicationType value);
    public sealed virtual void Add(ApplicationType item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ApplicationType item);
    public sealed virtual void CopyTo(ApplicationType[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ApplicationType item);
    public sealed virtual IEnumerator`1<ApplicationType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ApplicationTypeList CreateFromNativeListResult(IFabricGetApplicationTypeListResult result);
    internal static ApplicationTypeList CreateFromNativeList(FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.ApplicationTypeMetadata : object {
    [CompilerGeneratedAttribute]
private DateTime <ApplicationTypeProvisionTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmMetadata <ArmMetadata>k__BackingField;
    [JsonCustomizationAttribute]
public DateTime ApplicationTypeProvisionTimestamp { get; private set; }
    [JsonCustomizationAttribute]
public ArmMetadata ArmMetadata { get; private set; }
    internal ApplicationTypeMetadata(DateTime applicationTypeProvisionTimestamp, ArmMetadata metadata);
    [CompilerGeneratedAttribute]
public DateTime get_ApplicationTypeProvisionTimestamp();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeProvisionTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public ArmMetadata get_ArmMetadata();
    [CompilerGeneratedAttribute]
private void set_ArmMetadata(ArmMetadata value);
    internal static ApplicationTypeMetadata CreateFromNative(IntPtr nativeApplicationTypeMetadataPtr);
}
public class System.Fabric.Query.ApplicationTypePagedList : PagedList`1<ApplicationType> {
    internal ApplicationTypePagedList(IList`1<ApplicationType> list);
    internal static ApplicationTypePagedList CreateFromNativeListResult(IFabricGetApplicationTypePagedListResult result);
    internal static ApplicationTypePagedList CreateFromNativeList(FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public enum System.Fabric.Query.ApplicationTypeStatus : Enum {
    public int value__;
    public static ApplicationTypeStatus Invalid;
    public static ApplicationTypeStatus Provisioning;
    public static ApplicationTypeStatus Available;
    public static ApplicationTypeStatus Unprovisioning;
    public static ApplicationTypeStatus Failed;
}
public class System.Fabric.Query.ArmMetadata : object {
    [CompilerGeneratedAttribute]
private string <ArmResourceId>k__BackingField;
    [JsonCustomizationAttribute]
public string ArmResourceId { get; private set; }
    internal ArmMetadata(string armResourceId);
    [CompilerGeneratedAttribute]
public string get_ArmResourceId();
    [CompilerGeneratedAttribute]
private void set_ArmResourceId(string value);
    internal static ArmMetadata CreateFromNative(IntPtr nativeCommonArmMetadataPtr);
}
public class System.Fabric.Query.BlockListResult : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public string NodeName { get; internal set; }
    public BlockListResult(string nodeName);
    internal static BlockListResult CreateFromNative(FABRIC_BLOCK_LIST_QUERY_RESULT_ITEM nativeParameter);
    public static bool op_GreaterThan(BlockListResult first, BlockListResult second);
    public static bool op_LessThan(BlockListResult first, BlockListResult second);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    public virtual string ToString();
}
public class System.Fabric.Query.BlockListResultList : PagedList`1<BlockListResult> {
    public BlockListResultList(IList`1<BlockListResult> list);
    internal static BlockListResultList CreateFromNativeListResult(IFabricGetBlockListResult nativeResult);
    internal static BlockListResultList CreateFromNative(FABRIC_BLOCK_LIST_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
    public virtual string ToString();
    public void Sort();
}
public class System.Fabric.Query.ClusterLoadInformation : object {
    [CompilerGeneratedAttribute]
private DateTime <LastBalancingStartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastBalancingEndTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoadMetricInformation> <LoadMetricInformationList>k__BackingField;
    public DateTime LastBalancingStartTimeUtc { get; internal set; }
    public DateTime LastBalancingEndTimeUtc { get; internal set; }
    [JsonCustomizationAttribute]
public IList`1<LoadMetricInformation> LoadMetricInformationList { get; internal set; }
    [CompilerGeneratedAttribute]
public DateTime get_LastBalancingStartTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_LastBalancingStartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastBalancingEndTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_LastBalancingEndTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<LoadMetricInformation> get_LoadMetricInformationList();
    [CompilerGeneratedAttribute]
internal void set_LoadMetricInformationList(IList`1<LoadMetricInformation> value);
    internal static ClusterLoadInformation CreateFromNative(IFabricGetClusterLoadInformationResult nativeLoadInformation);
    internal static ClusterLoadInformation CreateFromNative(FABRIC_CLUSTER_LOAD_INFORMATION nativeLoadInformation);
    public virtual string ToString();
}
internal class System.Fabric.Query.ClusterVersion : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Version { get; private set; }
    internal ClusterVersion(string clusterVersion);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
}
public class System.Fabric.Query.CodePackageEntryPoint : object {
    [CompilerGeneratedAttribute]
private string <EntryPointLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunAsUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePackageEntryPointStatistics <Statistics>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryPointStatus <EntryPointStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextActivationUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CodePackageInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    public string EntryPointLocation { get; private set; }
    public long ProcessId { get; private set; }
    public string RunAsUserName { get; private set; }
    [JsonCustomizationAttribute]
public CodePackageEntryPointStatistics Statistics { get; private set; }
    [JsonCustomizationAttribute]
public EntryPointStatus EntryPointStatus { get; private set; }
    [JsonCustomizationAttribute]
public DateTime NextActivationUtc { get; private set; }
    [JsonCustomizationAttribute]
public long CodePackageInstanceId { get; private set; }
    public string ContainerId { get; private set; }
    internal CodePackageEntryPoint(string entryPointLocation, long processId, string runAsUserName, EntryPointStatus entrypointStatus, DateTime nextActivationUtc, CodePackageEntryPointStatistics statistics, long codePackageInstanceId, string containerId);
    [CompilerGeneratedAttribute]
public string get_EntryPointLocation();
    [CompilerGeneratedAttribute]
private void set_EntryPointLocation(string value);
    [CompilerGeneratedAttribute]
public long get_ProcessId();
    [CompilerGeneratedAttribute]
private void set_ProcessId(long value);
    [CompilerGeneratedAttribute]
public string get_RunAsUserName();
    [CompilerGeneratedAttribute]
private void set_RunAsUserName(string value);
    [CompilerGeneratedAttribute]
public CodePackageEntryPointStatistics get_Statistics();
    [CompilerGeneratedAttribute]
private void set_Statistics(CodePackageEntryPointStatistics value);
    [CompilerGeneratedAttribute]
public EntryPointStatus get_EntryPointStatus();
    [CompilerGeneratedAttribute]
private void set_EntryPointStatus(EntryPointStatus value);
    [CompilerGeneratedAttribute]
public DateTime get_NextActivationUtc();
    [CompilerGeneratedAttribute]
private void set_NextActivationUtc(DateTime value);
    [CompilerGeneratedAttribute]
public long get_CodePackageInstanceId();
    [CompilerGeneratedAttribute]
private void set_CodePackageInstanceId(long value);
    [CompilerGeneratedAttribute]
public string get_ContainerId();
    [CompilerGeneratedAttribute]
private void set_ContainerId(string value);
    internal static CodePackageEntryPoint FromNative(FABRIC_CODE_PACKAGE_ENTRY_POINT nativeEntryPoint);
}
public class System.Fabric.Query.CodePackageEntryPointStatistics : object {
    [CompilerGeneratedAttribute]
private long <LastExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastActivationUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastExitUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastSuccessfulActivationUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastSuccessfulExitUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ActivationCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ActivationFailureCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContinuousActivationFailureCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExitCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExitFailureCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContinuousExitFailureCount>k__BackingField;
    public long LastExitCode { get; private set; }
    [JsonCustomizationAttribute]
public DateTime LastActivationUtc { get; private set; }
    [JsonCustomizationAttribute]
public DateTime LastExitUtc { get; private set; }
    [JsonCustomizationAttribute]
public DateTime LastSuccessfulActivationUtc { get; private set; }
    [JsonCustomizationAttribute]
public DateTime LastSuccessfulExitUtc { get; private set; }
    public long ActivationCount { get; private set; }
    public long ActivationFailureCount { get; private set; }
    public long ContinuousActivationFailureCount { get; private set; }
    public long ExitCount { get; private set; }
    public long ExitFailureCount { get; private set; }
    public long ContinuousExitFailureCount { get; private set; }
    internal CodePackageEntryPointStatistics(long lastExitCode, DateTime lastActivationUtc, DateTime lastExitUtc, DateTime lastSuccessfulActivationUtc, DateTime lastSuccessfulExitUtc, long activationCount, long activationFailureCount, long continuousActivationFailureCount, long exitCount, long exitFailureCount, long continuousExitFailureCount);
    [CompilerGeneratedAttribute]
public long get_LastExitCode();
    [CompilerGeneratedAttribute]
private void set_LastExitCode(long value);
    [CompilerGeneratedAttribute]
public DateTime get_LastActivationUtc();
    [CompilerGeneratedAttribute]
private void set_LastActivationUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastExitUtc();
    [CompilerGeneratedAttribute]
private void set_LastExitUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastSuccessfulActivationUtc();
    [CompilerGeneratedAttribute]
private void set_LastSuccessfulActivationUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastSuccessfulExitUtc();
    [CompilerGeneratedAttribute]
private void set_LastSuccessfulExitUtc(DateTime value);
    [CompilerGeneratedAttribute]
public long get_ActivationCount();
    [CompilerGeneratedAttribute]
private void set_ActivationCount(long value);
    [CompilerGeneratedAttribute]
public long get_ActivationFailureCount();
    [CompilerGeneratedAttribute]
private void set_ActivationFailureCount(long value);
    [CompilerGeneratedAttribute]
public long get_ContinuousActivationFailureCount();
    [CompilerGeneratedAttribute]
private void set_ContinuousActivationFailureCount(long value);
    [CompilerGeneratedAttribute]
public long get_ExitCount();
    [CompilerGeneratedAttribute]
private void set_ExitCount(long value);
    [CompilerGeneratedAttribute]
public long get_ExitFailureCount();
    [CompilerGeneratedAttribute]
private void set_ExitFailureCount(long value);
    [CompilerGeneratedAttribute]
public long get_ContinuousExitFailureCount();
    [CompilerGeneratedAttribute]
private void set_ContinuousExitFailureCount(long value);
    internal static CodePackageEntryPointStatistics FromNative(FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS nativeEntryPointStatistics);
}
public class System.Fabric.Query.CodePackageUsageStatistics : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <CodePackageStats>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeRead>k__BackingField;
    public IDictionary`2<string, string> CodePackageStats { get; private set; }
    public DateTime TimeRead { get; private set; }
    internal CodePackageUsageStatistics(DateTime timeRead, IDictionary`2<string, string> codePackageStats);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_CodePackageStats();
    [CompilerGeneratedAttribute]
private void set_CodePackageStats(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public DateTime get_TimeRead();
    [CompilerGeneratedAttribute]
private void set_TimeRead(DateTime value);
    internal static CodePackageUsageStatistics FromNative(FABRIC_CODE_PACKAGE_USAGE_STATISTICS codePackageStats);
}
internal class System.Fabric.Query.ComposeDeploymentStatusListWrapper : PagedList`1<ComposeDeploymentStatusResultItemWrapper> {
    internal ComposeDeploymentStatusListWrapper(IList`1<ComposeDeploymentStatusResultItemWrapper> list);
    internal static ComposeDeploymentStatusListWrapper CreateFromNativeListResult(IFabricGetComposeDeploymentStatusListResult result);
    internal static ComposeDeploymentStatusListWrapper CreateFromNativeList(FABRIC_COMPOSE_DEPLOYMENT_STATUS_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
internal class System.Fabric.Query.ComposeDeploymentStatusResultItemWrapper : object {
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ComposeDeploymentStatusWrapper <ComposeDeploymentStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDetails>k__BackingField;
    [JsonCustomizationAttribute]
public string DeploymentName { get; internal set; }
    public Uri ApplicationName { get; internal set; }
    [JsonCustomizationAttribute]
public ComposeDeploymentStatusWrapper ComposeDeploymentStatus { get; internal set; }
    [JsonCustomizationAttribute]
public string StatusDetails { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_DeploymentName();
    [CompilerGeneratedAttribute]
internal void set_DeploymentName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public ComposeDeploymentStatusWrapper get_ComposeDeploymentStatus();
    [CompilerGeneratedAttribute]
internal void set_ComposeDeploymentStatus(ComposeDeploymentStatusWrapper value);
    [CompilerGeneratedAttribute]
public string get_StatusDetails();
    [CompilerGeneratedAttribute]
internal void set_StatusDetails(string value);
    internal static ComposeDeploymentStatusResultItemWrapper CreateFromNative(FABRIC_COMPOSE_DEPLOYMENT_STATUS_QUERY_RESULT_ITEM nativeResultItem);
}
internal enum System.Fabric.Query.ComposeDeploymentStatusWrapper : Enum {
    public int value__;
    public static ComposeDeploymentStatusWrapper Invalid;
    public static ComposeDeploymentStatusWrapper Provisioning;
    public static ComposeDeploymentStatusWrapper Creating;
    public static ComposeDeploymentStatusWrapper Ready;
    public static ComposeDeploymentStatusWrapper Unprovisioning;
    public static ComposeDeploymentStatusWrapper Deleting;
    public static ComposeDeploymentStatusWrapper Failed;
    public static ComposeDeploymentStatusWrapper Upgrading;
}
public class System.Fabric.Query.DeployedApplication : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentStatus <DeployedApplicationStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; private set; }
    [JsonCustomizationAttribute]
public string ApplicationTypeName { get; private set; }
    [JsonCustomizationAttribute]
public DeploymentStatus DeployedApplicationStatus { get; private set; }
    public string WorkDirectory { get; private set; }
    public string LogDirectory { get; private set; }
    public string TempDirectory { get; private set; }
    public HealthState HealthState { get; private set; }
    internal DeployedApplication(Uri applicationName, string applicationTypeName, DeploymentStatus deploymentStatus, string workDirectory, string logDirectory, string tempDirectory, HealthState healthState);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeName(string value);
    [CompilerGeneratedAttribute]
public DeploymentStatus get_DeployedApplicationStatus();
    [CompilerGeneratedAttribute]
private void set_DeployedApplicationStatus(DeploymentStatus value);
    [CompilerGeneratedAttribute]
public string get_WorkDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_LogDirectory();
    [CompilerGeneratedAttribute]
private void set_LogDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_TempDirectory();
    [CompilerGeneratedAttribute]
private void set_TempDirectory(string value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
private void set_HealthState(HealthState value);
    internal static DeployedApplication CreateFromNative(FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.DeployedApplicationList : object {
    private IList`1<DeployedApplication> list;
    public DeployedApplication Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal DeployedApplicationList(IList`1<DeployedApplication> list);
    public sealed virtual int IndexOf(DeployedApplication item);
    public sealed virtual void Insert(int index, DeployedApplication item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DeployedApplication get_Item(int index);
    public sealed virtual void set_Item(int index, DeployedApplication value);
    public sealed virtual void Add(DeployedApplication item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DeployedApplication item);
    public sealed virtual void CopyTo(DeployedApplication[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(DeployedApplication item);
    public sealed virtual IEnumerator`1<DeployedApplication> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static DeployedApplicationList CreateFromNativeListResult(IFabricGetDeployedApplicationListResult result);
    internal static DeployedApplicationList CreateFromNativeList(FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.DeployedApplicationPagedList : PagedList`1<DeployedApplication> {
    internal DeployedApplicationPagedList(IList`1<DeployedApplication> list);
    internal static DeployedApplicationPagedList CreateFromNativeListResult(IFabricGetDeployedApplicationPagedListResult result);
    internal static DeployedApplicationPagedList CreateFromNativeList(FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.DeployedCodePackage : object {
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePackageEntryPoint <SetupEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RunFrequencyInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentStatus <DeployedCodePackageStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private HostType <HostType>k__BackingField;
    [CompilerGeneratedAttribute]
private HostIsolationMode <HostIsolationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePackageEntryPoint <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSetupEntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePackageUsageStatistics <CodePackageUsageStatistics>k__BackingField;
    [JsonCustomizationAttribute]
public string CodePackageName { get; private set; }
    [JsonCustomizationAttribute]
public string CodePackageVersion { get; private set; }
    public CodePackageEntryPoint SetupEntryPoint { get; private set; }
    public string ServiceManifestName { get; private set; }
    public string ServicePackageActivationId { get; private set; }
    public long RunFrequencyInterval { get; private set; }
    [JsonCustomizationAttribute]
public DeploymentStatus DeployedCodePackageStatus { get; private set; }
    public HostType HostType { get; private set; }
    public HostIsolationMode HostIsolationMode { get; private set; }
    [JsonCustomizationAttribute]
public CodePackageEntryPoint EntryPoint { get; private set; }
    private bool HasSetupEntryPoint { get; private set; }
    public CodePackageUsageStatistics CodePackageUsageStatistics { get; private set; }
    internal DeployedCodePackage(string codePackageName, string codePackageVersion, CodePackageEntryPoint setupEntryPoint, string serviceManifestName, string servicePackageActivationId, long runFrequencyInterval, HostType hostType, HostIsolationMode hostIsolationMode, DeploymentStatus deployedCodePackageStatus, CodePackageEntryPoint entryPoint, CodePackageUsageStatistics codePackageUsageStatistics);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
private void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageVersion();
    [CompilerGeneratedAttribute]
private void set_CodePackageVersion(string value);
    [CompilerGeneratedAttribute]
public CodePackageEntryPoint get_SetupEntryPoint();
    [CompilerGeneratedAttribute]
private void set_SetupEntryPoint(CodePackageEntryPoint value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public long get_RunFrequencyInterval();
    [CompilerGeneratedAttribute]
private void set_RunFrequencyInterval(long value);
    [CompilerGeneratedAttribute]
public DeploymentStatus get_DeployedCodePackageStatus();
    [CompilerGeneratedAttribute]
private void set_DeployedCodePackageStatus(DeploymentStatus value);
    [CompilerGeneratedAttribute]
public HostType get_HostType();
    [CompilerGeneratedAttribute]
private void set_HostType(HostType value);
    [CompilerGeneratedAttribute]
public HostIsolationMode get_HostIsolationMode();
    [CompilerGeneratedAttribute]
private void set_HostIsolationMode(HostIsolationMode value);
    [CompilerGeneratedAttribute]
public CodePackageEntryPoint get_EntryPoint();
    [CompilerGeneratedAttribute]
private void set_EntryPoint(CodePackageEntryPoint value);
    [CompilerGeneratedAttribute]
private bool get_HasSetupEntryPoint();
    [CompilerGeneratedAttribute]
private void set_HasSetupEntryPoint(bool value);
    [CompilerGeneratedAttribute]
public CodePackageUsageStatistics get_CodePackageUsageStatistics();
    [CompilerGeneratedAttribute]
private void set_CodePackageUsageStatistics(CodePackageUsageStatistics value);
    internal static DeployedCodePackage CreateFromNative(FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.DeployedCodePackageList : object {
    private IList`1<DeployedCodePackage> list;
    public DeployedCodePackage Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal DeployedCodePackageList(IList`1<DeployedCodePackage> list);
    public sealed virtual int IndexOf(DeployedCodePackage item);
    public sealed virtual void Insert(int index, DeployedCodePackage item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DeployedCodePackage get_Item(int index);
    public sealed virtual void set_Item(int index, DeployedCodePackage value);
    public sealed virtual void Add(DeployedCodePackage item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DeployedCodePackage item);
    public sealed virtual void CopyTo(DeployedCodePackage[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(DeployedCodePackage item);
    public sealed virtual IEnumerator`1<DeployedCodePackage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static DeployedCodePackageList CreateFromNativeListResult(IFabricGetDeployedCodePackageListResult result);
    internal static DeployedCodePackageList CreateFromNativeList(FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.DeployedNetwork : object {
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [JsonCustomizationAttribute]
public string NetworkName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
internal void set_NetworkName(string value);
    internal static DeployedNetwork CreateFromNative(FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM nativeDeployedNetwork);
}
public class System.Fabric.Query.DeployedNetworkCodePackage : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    public Uri ApplicationName { get; internal set; }
    public string NetworkName { get; internal set; }
    public string CodePackageName { get; internal set; }
    public string CodePackageVersion { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public string ContainerAddress { get; internal set; }
    public string ContainerId { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
internal void set_NetworkName(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
internal void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageVersion();
    [CompilerGeneratedAttribute]
internal void set_CodePackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerAddress();
    [CompilerGeneratedAttribute]
internal void set_ContainerAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerId();
    [CompilerGeneratedAttribute]
internal void set_ContainerId(string value);
    internal static DeployedNetworkCodePackage CreateFromNative(FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM nativeDeployedNetworkCodePackage);
}
public class System.Fabric.Query.DeployedNetworkCodePackageList : PagedList`1<DeployedNetworkCodePackage> {
    internal DeployedNetworkCodePackageList(IList`1<DeployedNetworkCodePackage> list);
    internal static DeployedNetworkCodePackageList CreateFromNativeListResult(IFabricGetDeployedNetworkCodePackageListResult result);
    internal static DeployedNetworkCodePackageList CreateFromNativeList(FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.DeployedNetworkList : PagedList`1<DeployedNetwork> {
    internal DeployedNetworkList(IList`1<DeployedNetwork> list);
    internal static DeployedNetworkList CreateFromNativeListResult(IFabricGetDeployedNetworkListResult result);
    internal static DeployedNetworkList CreateFromNativeList(FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.DeployedServicePackage : object {
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentStatus <DeployedServicePackageStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [JsonCustomizationAttribute]
public string ServiceManifestName { get; private set; }
    public string ServicePackageActivationId { get; private set; }
    [JsonCustomizationAttribute]
public string ServiceManifestVersion { get; private set; }
    [JsonCustomizationAttribute]
public DeploymentStatus DeployedServicePackageStatus { get; private set; }
    public HealthState HealthState { get; private set; }
    internal DeployedServicePackage(string serviceManifestName, string servicePackageActivationId, string serviceManifestVersion, DeploymentStatus deploymentStatus, HealthState healthState);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestVersion();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestVersion(string value);
    [CompilerGeneratedAttribute]
public DeploymentStatus get_DeployedServicePackageStatus();
    [CompilerGeneratedAttribute]
private void set_DeployedServicePackageStatus(DeploymentStatus value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
private void set_HealthState(HealthState value);
    internal static DeployedServicePackage CreateFromNative(FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.DeployedServicePackageList : object {
    private IList`1<DeployedServicePackage> list;
    public DeployedServicePackage Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal DeployedServicePackageList(IList`1<DeployedServicePackage> list);
    public sealed virtual int IndexOf(DeployedServicePackage item);
    public sealed virtual void Insert(int index, DeployedServicePackage item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DeployedServicePackage get_Item(int index);
    public sealed virtual void set_Item(int index, DeployedServicePackage value);
    public sealed virtual void Add(DeployedServicePackage item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DeployedServicePackage item);
    public sealed virtual void CopyTo(DeployedServicePackage[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(DeployedServicePackage item);
    public sealed virtual IEnumerator`1<DeployedServicePackage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static DeployedServicePackageList CreateFromNativeListResult(IFabricGetDeployedServicePackageListResult result);
    internal static DeployedServicePackageList CreateFromNativeList(FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.DeployedServicePackagePagedList : PagedList`1<DeployedServicePackage> {
    internal DeployedServicePackagePagedList(IList`1<DeployedServicePackage> list);
    internal static DeployedServicePackagePagedList CreateFromNativeListResult(IFabricGetDeployedServicePackagePagedListResult result);
    internal static DeployedServicePackagePagedList CreateFromNativeList(FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
[KnownTypeAttribute("System.Fabric.Query.DeployedStatefulServiceReplica")]
[KnownTypeAttribute("System.Fabric.Query.DeployedStatelessServiceInstance")]
public abstract class System.Fabric.Query.DeployedServiceReplica : object {
    [CompilerGeneratedAttribute]
private ServiceKind <ServiceKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Partitionid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceReplicaStatus <ReplicaStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HostProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestVersion_>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceKind ServiceKind { get; private set; }
    public Uri ServiceName { get; internal set; }
    public string ServiceTypeName { get; internal set; }
    [ObsoleteAttribute("This property is no longer supported", "False")]
public string ServiceManifestVersion { get; internal set; }
    public string CodePackageName { get; internal set; }
    [JsonCustomizationAttribute]
public Guid Partitionid { get; internal set; }
    public string ServiceManifestName { get; internal set; }
    public string ServicePackageActivationId { get; internal set; }
    public ServiceReplicaStatus ReplicaStatus { get; internal set; }
    public string Address { get; internal set; }
    public long HostProcessId { get; internal set; }
    [JsonCustomizationAttribute]
internal string ServiceManifestVersion_ { get; internal set; }
    protected internal DeployedServiceReplica(ServiceKind kind);
    [CompilerGeneratedAttribute]
public ServiceKind get_ServiceKind();
    [CompilerGeneratedAttribute]
private void set_ServiceKind(ServiceKind value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
internal void set_ServiceTypeName(string value);
    public string get_ServiceManifestVersion();
    internal void set_ServiceManifestVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
internal void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public Guid get_Partitionid();
    [CompilerGeneratedAttribute]
internal void set_Partitionid(Guid value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
internal void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public ServiceReplicaStatus get_ReplicaStatus();
    [CompilerGeneratedAttribute]
internal void set_ReplicaStatus(ServiceReplicaStatus value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
internal void set_Address(string value);
    [CompilerGeneratedAttribute]
public long get_HostProcessId();
    [CompilerGeneratedAttribute]
internal void set_HostProcessId(long value);
    [CompilerGeneratedAttribute]
internal string get_ServiceManifestVersion_();
    [CompilerGeneratedAttribute]
internal void set_ServiceManifestVersion_(string value);
    internal static DeployedServiceReplica CreateFromNative(FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM nativeResultItem);
}
[KnownTypeAttribute("System.Fabric.Query.DeployedStatefulServiceReplicaDetail")]
[KnownTypeAttribute("System.Fabric.Query.DeployedStatelessServiceInstanceDetail")]
public abstract class System.Fabric.Query.DeployedServiceReplicaDetail : object {
    [CompilerGeneratedAttribute]
private ServiceKind <ServiceKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceOperationName <CurrentServiceOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentServiceOperationStartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoadMetricReport> <ReportedLoad>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceKind ServiceKind { get; private set; }
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    public ServiceOperationName CurrentServiceOperation { get; internal set; }
    public DateTime CurrentServiceOperationStartTimeUtc { get; internal set; }
    public IList`1<LoadMetricReport> ReportedLoad { get; internal set; }
    protected internal DeployedServiceReplicaDetail(ServiceKind serviceKind);
    [CompilerGeneratedAttribute]
public ServiceKind get_ServiceKind();
    [CompilerGeneratedAttribute]
private void set_ServiceKind(ServiceKind value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public ServiceOperationName get_CurrentServiceOperation();
    [CompilerGeneratedAttribute]
internal void set_CurrentServiceOperation(ServiceOperationName value);
    [CompilerGeneratedAttribute]
public DateTime get_CurrentServiceOperationStartTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_CurrentServiceOperationStartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<LoadMetricReport> get_ReportedLoad();
    [CompilerGeneratedAttribute]
internal void set_ReportedLoad(IList`1<LoadMetricReport> value);
    internal static DeployedServiceReplicaDetail CreateFromNative(IFabricGetDeployedServiceReplicaDetailResult nativeResult);
    internal static DeployedServiceReplicaDetail FromNative(FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.DeployedServiceReplicaList : object {
    private IList`1<DeployedServiceReplica> list;
    public DeployedServiceReplica Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal DeployedServiceReplicaList(IList`1<DeployedServiceReplica> list);
    public sealed virtual int IndexOf(DeployedServiceReplica item);
    public sealed virtual void Insert(int index, DeployedServiceReplica item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DeployedServiceReplica get_Item(int index);
    public sealed virtual void set_Item(int index, DeployedServiceReplica value);
    public sealed virtual void Add(DeployedServiceReplica item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DeployedServiceReplica item);
    public sealed virtual void CopyTo(DeployedServiceReplica[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(DeployedServiceReplica item);
    public sealed virtual IEnumerator`1<DeployedServiceReplica> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static DeployedServiceReplicaList CreateFromNativeListResult(IFabricGetDeployedReplicaListResult result);
    internal static DeployedServiceReplicaList CreateFromNativeList(FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.DeployedServiceType : object {
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceTypeRegistrationStatus <ServiceTypeRegistrationStatus>k__BackingField;
    public string ServiceTypeName { get; private set; }
    public string CodePackageName { get; private set; }
    public string ServiceManifestName { get; private set; }
    public string ServicePackageActivationId { get; private set; }
    [JsonCustomizationAttribute]
public ServiceTypeRegistrationStatus ServiceTypeRegistrationStatus { get; private set; }
    internal DeployedServiceType(string serviceTypeName, string codePackageName, string serviceManifestName, string servicePackageActivationId, ServiceTypeRegistrationStatus serviceTypeRegistrationStatus);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
private void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
private void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public ServiceTypeRegistrationStatus get_ServiceTypeRegistrationStatus();
    [CompilerGeneratedAttribute]
private void set_ServiceTypeRegistrationStatus(ServiceTypeRegistrationStatus value);
    internal static DeployedServiceType CreateFromNative(FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.DeployedServiceTypeList : object {
    private IList`1<DeployedServiceType> list;
    public DeployedServiceType Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal DeployedServiceTypeList(IList`1<DeployedServiceType> list);
    public sealed virtual int IndexOf(DeployedServiceType item);
    public sealed virtual void Insert(int index, DeployedServiceType item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DeployedServiceType get_Item(int index);
    public sealed virtual void set_Item(int index, DeployedServiceType value);
    public sealed virtual void Add(DeployedServiceType item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DeployedServiceType item);
    public sealed virtual void CopyTo(DeployedServiceType[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(DeployedServiceType item);
    public sealed virtual IEnumerator`1<DeployedServiceType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static DeployedServiceTypeList CreateFromNativeListResult(IFabricGetDeployedServiceTypeListResult result);
    internal static DeployedServiceTypeList CreateFromNativeList(FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.DeployedStatefulServiceReplica : DeployedServiceReplica {
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaRole <ReplicaRole>k__BackingField;
    [CompilerGeneratedAttribute]
private ReconfigurationInformation <ReconfigurationInformation>k__BackingField;
    public long ReplicaId { get; internal set; }
    public ReplicaRole ReplicaRole { get; internal set; }
    public ReconfigurationInformation ReconfigurationInformation { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaId(long value);
    [CompilerGeneratedAttribute]
public ReplicaRole get_ReplicaRole();
    [CompilerGeneratedAttribute]
internal void set_ReplicaRole(ReplicaRole value);
    [CompilerGeneratedAttribute]
public ReconfigurationInformation get_ReconfigurationInformation();
    [CompilerGeneratedAttribute]
internal void set_ReconfigurationInformation(ReconfigurationInformation value);
    internal static DeployedStatefulServiceReplica FromNative(FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM nativeObj);
}
public class System.Fabric.Query.DeployedStatefulServiceReplicaDetail : DeployedServiceReplicaDetail {
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicatorOperationName <CurrentReplicatorOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionAccessStatus <ReadStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionAccessStatus <WriteStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicatorStatus <ReplicatorStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaStatus <ReplicaStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedStatefulServiceReplica <DeployedServiceReplica>k__BackingField;
    public long ReplicaId { get; internal set; }
    public ReplicatorOperationName CurrentReplicatorOperation { get; internal set; }
    public PartitionAccessStatus ReadStatus { get; internal set; }
    public PartitionAccessStatus WriteStatus { get; internal set; }
    public ReplicatorStatus ReplicatorStatus { get; internal set; }
    public ReplicaStatus ReplicaStatus { get; internal set; }
    public DeployedStatefulServiceReplica DeployedServiceReplica { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaId(long value);
    [CompilerGeneratedAttribute]
public ReplicatorOperationName get_CurrentReplicatorOperation();
    [CompilerGeneratedAttribute]
internal void set_CurrentReplicatorOperation(ReplicatorOperationName value);
    [CompilerGeneratedAttribute]
public PartitionAccessStatus get_ReadStatus();
    [CompilerGeneratedAttribute]
internal void set_ReadStatus(PartitionAccessStatus value);
    [CompilerGeneratedAttribute]
public PartitionAccessStatus get_WriteStatus();
    [CompilerGeneratedAttribute]
internal void set_WriteStatus(PartitionAccessStatus value);
    [CompilerGeneratedAttribute]
public ReplicatorStatus get_ReplicatorStatus();
    [CompilerGeneratedAttribute]
internal void set_ReplicatorStatus(ReplicatorStatus value);
    [CompilerGeneratedAttribute]
public ReplicaStatus get_ReplicaStatus();
    [CompilerGeneratedAttribute]
internal void set_ReplicaStatus(ReplicaStatus value);
    [CompilerGeneratedAttribute]
public DeployedStatefulServiceReplica get_DeployedServiceReplica();
    [CompilerGeneratedAttribute]
internal void set_DeployedServiceReplica(DeployedStatefulServiceReplica value);
    internal static DeployedServiceReplicaDetail CreateFromNative(FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM nativeResultItem);
}
public class System.Fabric.Query.DeployedStatelessServiceInstance : DeployedServiceReplica {
    [CompilerGeneratedAttribute]
private long <InstanceId>k__BackingField;
    public long InstanceId { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_InstanceId();
    [CompilerGeneratedAttribute]
internal void set_InstanceId(long value);
    internal static DeployedStatelessServiceInstance FromNative(FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM nativeObj);
}
public class System.Fabric.Query.DeployedStatelessServiceInstanceDetail : DeployedServiceReplicaDetail {
    [CompilerGeneratedAttribute]
private long <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployedStatelessServiceInstance <DeployedServiceReplicaInstance>k__BackingField;
    public long InstanceId { get; internal set; }
    public DeployedStatelessServiceInstance DeployedServiceReplicaInstance { get; internal set; }
    [CompilerGeneratedAttribute]
public long get_InstanceId();
    [CompilerGeneratedAttribute]
internal void set_InstanceId(long value);
    [CompilerGeneratedAttribute]
public DeployedStatelessServiceInstance get_DeployedServiceReplicaInstance();
    [CompilerGeneratedAttribute]
internal void set_DeployedServiceReplicaInstance(DeployedStatelessServiceInstance value);
    internal static DeployedServiceReplicaDetail CreateFromNative(FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM nativeResultItem);
}
public class System.Fabric.Query.ImageStoreContentResult : object {
    [CompilerGeneratedAttribute]
private IList`1<ImageStoreFileInfo> <StoreFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ImageStoreFolderInfo> <StoreFolders>k__BackingField;
    [JsonCustomizationAttribute]
public IList`1<ImageStoreFileInfo> StoreFiles { get; private set; }
    [JsonCustomizationAttribute]
public IList`1<ImageStoreFolderInfo> StoreFolders { get; private set; }
    internal ImageStoreContentResult(IList`1<ImageStoreFileInfo> storeFiles, IList`1<ImageStoreFolderInfo> storeFolders);
    [CompilerGeneratedAttribute]
public IList`1<ImageStoreFileInfo> get_StoreFiles();
    [CompilerGeneratedAttribute]
private void set_StoreFiles(IList`1<ImageStoreFileInfo> value);
    [CompilerGeneratedAttribute]
public IList`1<ImageStoreFolderInfo> get_StoreFolders();
    [CompilerGeneratedAttribute]
private void set_StoreFolders(IList`1<ImageStoreFolderInfo> value);
}
public class System.Fabric.Query.ImageStoreFileInfo : object {
    [CompilerGeneratedAttribute]
private string <StoreRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageStoreFileVersion <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileSize>k__BackingField;
    [JsonCustomizationAttribute]
public string StoreRelativePath { get; private set; }
    [JsonCustomizationAttribute]
public ImageStoreFileVersion FileVersion { get; private set; }
    [JsonCustomizationAttribute]
public DateTime ModifiedDate { get; private set; }
    [JsonCustomizationAttribute]
public long FileSize { get; private set; }
    internal ImageStoreFileInfo(string storeRelativePath, ImageStoreFileVersion fileVersion, DateTime modifiedDate, long fileSize);
    [CompilerGeneratedAttribute]
public string get_StoreRelativePath();
    [CompilerGeneratedAttribute]
private void set_StoreRelativePath(string value);
    [CompilerGeneratedAttribute]
public ImageStoreFileVersion get_FileVersion();
    [CompilerGeneratedAttribute]
private void set_FileVersion(ImageStoreFileVersion value);
    [CompilerGeneratedAttribute]
public DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
private void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public long get_FileSize();
    [CompilerGeneratedAttribute]
private void set_FileSize(long value);
}
public class System.Fabric.Query.ImageStoreFileVersion : object {
    [CompilerGeneratedAttribute]
private long <EpochDataLossNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VersionNumber>k__BackingField;
    [JsonCustomizationAttribute]
public long EpochDataLossNumber { get; private set; }
    [JsonCustomizationAttribute]
public long VersionNumber { get; private set; }
    internal ImageStoreFileVersion(long epochDataLossNumber, long versionNumber);
    [CompilerGeneratedAttribute]
public long get_EpochDataLossNumber();
    [CompilerGeneratedAttribute]
private void set_EpochDataLossNumber(long value);
    [CompilerGeneratedAttribute]
public long get_VersionNumber();
    [CompilerGeneratedAttribute]
private void set_VersionNumber(long value);
}
public class System.Fabric.Query.ImageStoreFolderInfo : object {
    [CompilerGeneratedAttribute]
private string <StoreRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileCount>k__BackingField;
    [JsonCustomizationAttribute]
public string StoreRelativePath { get; private set; }
    [JsonCustomizationAttribute]
public int FileCount { get; private set; }
    internal ImageStoreFolderInfo(string storeRelativePath, int fileCount);
    [CompilerGeneratedAttribute]
public string get_StoreRelativePath();
    [CompilerGeneratedAttribute]
private void set_StoreRelativePath(string value);
    [CompilerGeneratedAttribute]
public int get_FileCount();
    [CompilerGeneratedAttribute]
private void set_FileCount(int value);
}
public class System.Fabric.Query.ImageStorePagedContentResult : object {
    [CompilerGeneratedAttribute]
private IList`1<ImageStoreFileInfo> <StoreFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ImageStoreFolderInfo> <StoreFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public IList`1<ImageStoreFileInfo> StoreFiles { get; public set; }
    public IList`1<ImageStoreFolderInfo> StoreFolders { get; public set; }
    public string ContinuationToken { get; public set; }
    internal ImageStorePagedContentResult(IList`1<ImageStoreFileInfo> storeFiles, IList`1<ImageStoreFolderInfo> storeFolders, string continuationToken);
    [CompilerGeneratedAttribute]
public IList`1<ImageStoreFileInfo> get_StoreFiles();
    [CompilerGeneratedAttribute]
public void set_StoreFiles(IList`1<ImageStoreFileInfo> value);
    [CompilerGeneratedAttribute]
public IList`1<ImageStoreFolderInfo> get_StoreFolders();
    [CompilerGeneratedAttribute]
public void set_StoreFolders(IList`1<ImageStoreFolderInfo> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
}
internal class System.Fabric.Query.InfrastructureTaskQueryResult : object {
    [CompilerGeneratedAttribute]
private Collection`1<InfrastructureTaskResultItem> <Items>k__BackingField;
    public Collection`1<InfrastructureTaskResultItem> Items { get; private set; }
    [CompilerGeneratedAttribute]
public Collection`1<InfrastructureTaskResultItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(Collection`1<InfrastructureTaskResultItem> value);
    public static InfrastructureTaskQueryResult CreateFromNative(IFabricInfrastructureTaskQueryResult native);
}
internal class System.Fabric.Query.InfrastructureTaskResultItem : object {
    [CompilerGeneratedAttribute]
private InfrastructureTaskDescription <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private InfrastructureTaskState <State>k__BackingField;
    public InfrastructureTaskDescription Description { get; internal set; }
    public InfrastructureTaskState State { get; internal set; }
    [CompilerGeneratedAttribute]
public InfrastructureTaskDescription get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(InfrastructureTaskDescription value);
    [CompilerGeneratedAttribute]
public InfrastructureTaskState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(InfrastructureTaskState value);
    internal static Collection`1<InfrastructureTaskResultItem> FromNativeQueryList(IntPtr nativePtr);
    internal static InfrastructureTaskResultItem FromNative(FABRIC_INFRASTRUCTURE_TASK_QUERY_RESULT_ITEM casted);
    private static InfrastructureTaskState FromNativeTaskState(FABRIC_INFRASTRUCTURE_TASK_STATE native);
}
internal enum System.Fabric.Query.InfrastructureTaskState : Enum {
    public int value__;
    public static InfrastructureTaskState Invalid;
    public static InfrastructureTaskState PreProcessing;
    public static InfrastructureTaskState PreAckPending;
    public static InfrastructureTaskState PreAcked;
    public static InfrastructureTaskState PostProcessing;
    public static InfrastructureTaskState PostAckPending;
    public static InfrastructureTaskState PostAcked;
}
public enum System.Fabric.Query.KeyValueStoreMigrationPhase : Enum {
    public int value__;
    public static KeyValueStoreMigrationPhase Inactive;
    public static KeyValueStoreMigrationPhase Migration;
    public static KeyValueStoreMigrationPhase TargetDatabaseSwap;
    public static KeyValueStoreMigrationPhase TargetDatabaseCleanup;
    public static KeyValueStoreMigrationPhase SourceDatabaseCleanup;
    public static KeyValueStoreMigrationPhase TargetDatabaseActive;
    public static KeyValueStoreMigrationPhase RestoreSourceBackup;
}
public enum System.Fabric.Query.KeyValueStoreMigrationState : Enum {
    public int value__;
    public static KeyValueStoreMigrationState Inactive;
    public static KeyValueStoreMigrationState Processing;
    public static KeyValueStoreMigrationState Completed;
    public static KeyValueStoreMigrationState Canceled;
    public static KeyValueStoreMigrationState Failed;
}
public class System.Fabric.Query.KeyValueStoreMigrationStatus : object {
    [CompilerGeneratedAttribute]
private KeyValueStoreMigrationPhase <CurrentPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValueStoreMigrationState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValueStoreMigrationPhase <NextPhase>k__BackingField;
    public KeyValueStoreMigrationPhase CurrentPhase { get; private set; }
    public KeyValueStoreMigrationState State { get; private set; }
    public KeyValueStoreMigrationPhase NextPhase { get; private set; }
    [CompilerGeneratedAttribute]
public KeyValueStoreMigrationPhase get_CurrentPhase();
    [CompilerGeneratedAttribute]
private void set_CurrentPhase(KeyValueStoreMigrationPhase value);
    [CompilerGeneratedAttribute]
public KeyValueStoreMigrationState get_State();
    [CompilerGeneratedAttribute]
private void set_State(KeyValueStoreMigrationState value);
    [CompilerGeneratedAttribute]
public KeyValueStoreMigrationPhase get_NextPhase();
    [CompilerGeneratedAttribute]
private void set_NextPhase(KeyValueStoreMigrationPhase value);
    internal static KeyValueStoreMigrationStatus CreateFromNative(IntPtr nativeStatus);
}
public enum System.Fabric.Query.KeyValueStoreProviderKind : Enum {
    public int value__;
    public static KeyValueStoreProviderKind Unknown;
    public static KeyValueStoreProviderKind ESE;
    public static KeyValueStoreProviderKind TStore;
}
public class System.Fabric.Query.KeyValueStoreReplicaStatus : ReplicaStatus {
    [CompilerGeneratedAttribute]
private long <DatabaseRowCountEstimate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DatabaseLogicalSizeEstimate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DatabasePhysicalSizeEstimateInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CopyNotificationCurrentKeyFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CopyNotificationCurrentProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValueStoreProviderKind <ProviderKind>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValueStoreMigrationStatus <MigrationStatus>k__BackingField;
    public long DatabaseRowCountEstimate { get; private set; }
    public long DatabaseLogicalSizeEstimate { get; private set; }
    public long DatabasePhysicalSizeEstimateInBytes { get; private set; }
    public string CopyNotificationCurrentKeyFilter { get; private set; }
    public long CopyNotificationCurrentProgress { get; private set; }
    public string StatusDetails { get; private set; }
    public KeyValueStoreProviderKind ProviderKind { get; private set; }
    public KeyValueStoreMigrationStatus MigrationStatus { get; private set; }
    [CompilerGeneratedAttribute]
public long get_DatabaseRowCountEstimate();
    [CompilerGeneratedAttribute]
private void set_DatabaseRowCountEstimate(long value);
    [CompilerGeneratedAttribute]
public long get_DatabaseLogicalSizeEstimate();
    [CompilerGeneratedAttribute]
private void set_DatabaseLogicalSizeEstimate(long value);
    [CompilerGeneratedAttribute]
public long get_DatabasePhysicalSizeEstimateInBytes();
    [CompilerGeneratedAttribute]
private void set_DatabasePhysicalSizeEstimateInBytes(long value);
    [CompilerGeneratedAttribute]
public string get_CopyNotificationCurrentKeyFilter();
    [CompilerGeneratedAttribute]
private void set_CopyNotificationCurrentKeyFilter(string value);
    [CompilerGeneratedAttribute]
public long get_CopyNotificationCurrentProgress();
    [CompilerGeneratedAttribute]
private void set_CopyNotificationCurrentProgress(long value);
    [CompilerGeneratedAttribute]
public string get_StatusDetails();
    [CompilerGeneratedAttribute]
private void set_StatusDetails(string value);
    [CompilerGeneratedAttribute]
public KeyValueStoreProviderKind get_ProviderKind();
    [CompilerGeneratedAttribute]
private void set_ProviderKind(KeyValueStoreProviderKind value);
    [CompilerGeneratedAttribute]
public KeyValueStoreMigrationStatus get_MigrationStatus();
    [CompilerGeneratedAttribute]
private void set_MigrationStatus(KeyValueStoreMigrationStatus value);
    internal static KeyValueStoreReplicaStatus CreateFromNative(IntPtr nativeKvs);
}
public class System.Fabric.Query.LoadedPartitionInformationResult : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetricName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Load>k__BackingField;
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    public string MetricName { get; internal set; }
    public long Load { get; internal set; }
    public LoadedPartitionInformationResult(Uri serviceName, Guid partitionId, string metricName, long load);
    internal static LoadedPartitionInformationResult CreateFromNative(FABRIC_LOADED_PARTITION_INFORMATION_QUERY_RESULT_ITEM nativeParameter);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public string get_MetricName();
    [CompilerGeneratedAttribute]
internal void set_MetricName(string value);
    [CompilerGeneratedAttribute]
public long get_Load();
    [CompilerGeneratedAttribute]
internal void set_Load(long value);
    public virtual string ToString();
}
public class System.Fabric.Query.LoadedPartitionInformationResultList : PagedList`1<LoadedPartitionInformationResult> {
    public LoadedPartitionInformationResultList(IList`1<LoadedPartitionInformationResult> list);
    internal static LoadedPartitionInformationResultList CreateFromNativeListResult(IFabricGetGetLoadedPartitionInfoListResult nativeResult);
    internal static LoadedPartitionInformationResultList CreateFromNative(FABRIC_LOADED_PARTITION_INFORMATION_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
    public virtual string ToString();
}
public class System.Fabric.Query.LoadMetricInformation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBalancedBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBalancedAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeviationBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeviationAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BalancingThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ActivityThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClusterCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClusterLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CurrentClusterLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClusterRemainingCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClusterCapacityRemaining>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClusterCapacityViolation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NodeBufferPercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClusterBufferedCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BufferedClusterCapacityRemaining>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClusterRemainingBufferedCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinNodeLoadValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinimumNodeLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeId <MinNodeLoadNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxNodeLoadValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumNodeLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeId <MaxNodeLoadNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PlannedLoadRemoval>k__BackingField;
    public string Name { get; internal set; }
    public bool IsBalancedBefore { get; internal set; }
    public bool IsBalancedAfter { get; internal set; }
    public double DeviationBefore { get; internal set; }
    public double DeviationAfter { get; internal set; }
    public double BalancingThreshold { get; internal set; }
    public string Action { get; internal set; }
    public long ActivityThreshold { get; internal set; }
    public long ClusterCapacity { get; internal set; }
    public long ClusterLoad { get; internal set; }
    public double CurrentClusterLoad { get; internal set; }
    [JsonCustomizationAttribute]
public long ClusterRemainingCapacity { get; internal set; }
    public double ClusterCapacityRemaining { get; internal set; }
    public bool IsClusterCapacityViolation { get; internal set; }
    public double NodeBufferPercentage { get; internal set; }
    [JsonCustomizationAttribute]
public long ClusterBufferedCapacity { get; internal set; }
    public double BufferedClusterCapacityRemaining { get; internal set; }
    [JsonCustomizationAttribute]
public long ClusterRemainingBufferedCapacity { get; internal set; }
    public long MinNodeLoadValue { get; internal set; }
    public double MinimumNodeLoad { get; internal set; }
    [JsonCustomizationAttribute]
public NodeId MinNodeLoadNodeId { get; internal set; }
    public long MaxNodeLoadValue { get; internal set; }
    public double MaximumNodeLoad { get; internal set; }
    [JsonCustomizationAttribute]
public NodeId MaxNodeLoadNodeId { get; internal set; }
    public double PlannedLoadRemoval { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsBalancedBefore();
    [CompilerGeneratedAttribute]
internal void set_IsBalancedBefore(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBalancedAfter();
    [CompilerGeneratedAttribute]
internal void set_IsBalancedAfter(bool value);
    [CompilerGeneratedAttribute]
public double get_DeviationBefore();
    [CompilerGeneratedAttribute]
internal void set_DeviationBefore(double value);
    [CompilerGeneratedAttribute]
public double get_DeviationAfter();
    [CompilerGeneratedAttribute]
internal void set_DeviationAfter(double value);
    [CompilerGeneratedAttribute]
public double get_BalancingThreshold();
    [CompilerGeneratedAttribute]
internal void set_BalancingThreshold(double value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
internal void set_Action(string value);
    [CompilerGeneratedAttribute]
public long get_ActivityThreshold();
    [CompilerGeneratedAttribute]
internal void set_ActivityThreshold(long value);
    [CompilerGeneratedAttribute]
public long get_ClusterCapacity();
    [CompilerGeneratedAttribute]
internal void set_ClusterCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_ClusterLoad();
    [CompilerGeneratedAttribute]
internal void set_ClusterLoad(long value);
    [CompilerGeneratedAttribute]
public double get_CurrentClusterLoad();
    [CompilerGeneratedAttribute]
internal void set_CurrentClusterLoad(double value);
    [CompilerGeneratedAttribute]
public long get_ClusterRemainingCapacity();
    [CompilerGeneratedAttribute]
internal void set_ClusterRemainingCapacity(long value);
    [CompilerGeneratedAttribute]
public double get_ClusterCapacityRemaining();
    [CompilerGeneratedAttribute]
internal void set_ClusterCapacityRemaining(double value);
    [CompilerGeneratedAttribute]
public bool get_IsClusterCapacityViolation();
    [CompilerGeneratedAttribute]
internal void set_IsClusterCapacityViolation(bool value);
    [CompilerGeneratedAttribute]
public double get_NodeBufferPercentage();
    [CompilerGeneratedAttribute]
internal void set_NodeBufferPercentage(double value);
    [CompilerGeneratedAttribute]
public long get_ClusterBufferedCapacity();
    [CompilerGeneratedAttribute]
internal void set_ClusterBufferedCapacity(long value);
    [CompilerGeneratedAttribute]
public double get_BufferedClusterCapacityRemaining();
    [CompilerGeneratedAttribute]
internal void set_BufferedClusterCapacityRemaining(double value);
    [CompilerGeneratedAttribute]
public long get_ClusterRemainingBufferedCapacity();
    [CompilerGeneratedAttribute]
internal void set_ClusterRemainingBufferedCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_MinNodeLoadValue();
    [CompilerGeneratedAttribute]
internal void set_MinNodeLoadValue(long value);
    [CompilerGeneratedAttribute]
public double get_MinimumNodeLoad();
    [CompilerGeneratedAttribute]
internal void set_MinimumNodeLoad(double value);
    [CompilerGeneratedAttribute]
public NodeId get_MinNodeLoadNodeId();
    [CompilerGeneratedAttribute]
internal void set_MinNodeLoadNodeId(NodeId value);
    [CompilerGeneratedAttribute]
public long get_MaxNodeLoadValue();
    [CompilerGeneratedAttribute]
internal void set_MaxNodeLoadValue(long value);
    [CompilerGeneratedAttribute]
public double get_MaximumNodeLoad();
    [CompilerGeneratedAttribute]
internal void set_MaximumNodeLoad(double value);
    [CompilerGeneratedAttribute]
public NodeId get_MaxNodeLoadNodeId();
    [CompilerGeneratedAttribute]
internal void set_MaxNodeLoadNodeId(NodeId value);
    [CompilerGeneratedAttribute]
public double get_PlannedLoadRemoval();
    [CompilerGeneratedAttribute]
internal void set_PlannedLoadRemoval(double value);
    internal static LoadMetricInformation CreateFromNative(FABRIC_LOAD_METRIC_INFORMATION nativeResultItem);
    internal static IList`1<LoadMetricInformation> CreateFromNativeList(FABRIC_LOAD_METRIC_INFORMATION_LIST* nativeResultList);
    public virtual string ToString();
}
public class System.Fabric.Query.LoadMetricReport : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CurrentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastReportedUtc>k__BackingField;
    public string Name { get; internal set; }
    public int Value { get; internal set; }
    public double CurrentValue { get; internal set; }
    public DateTime LastReportedUtc { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(int value);
    [CompilerGeneratedAttribute]
public double get_CurrentValue();
    [CompilerGeneratedAttribute]
internal void set_CurrentValue(double value);
    [CompilerGeneratedAttribute]
public DateTime get_LastReportedUtc();
    [CompilerGeneratedAttribute]
internal void set_LastReportedUtc(DateTime value);
    internal static LoadMetricReport CreateFromNative(FABRIC_LOAD_METRIC_REPORT nativeResultItem);
    internal static IList`1<LoadMetricReport> CreateFromNativeList(FABRIC_LOAD_METRIC_REPORT_LIST* list);
}
public class System.Fabric.Query.LocalNetworkInformation : NetworkInformation {
    [CompilerGeneratedAttribute]
private string <NetworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalNetworkConfigurationDescription <NetworkConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private NetworkStatus <NetworkStatus>k__BackingField;
    [JsonCustomizationAttribute]
public string NetworkName { get; internal set; }
    [JsonCustomizationAttribute]
public LocalNetworkConfigurationDescription NetworkConfiguration { get; internal set; }
    [JsonCustomizationAttribute]
public NetworkStatus NetworkStatus { get; internal set; }
    internal LocalNetworkInformation(string networkName, LocalNetworkConfigurationDescription networkConfigurationDescription, NetworkStatus networkStatus);
    [CompilerGeneratedAttribute]
public string get_NetworkName();
    [CompilerGeneratedAttribute]
internal void set_NetworkName(string value);
    [CompilerGeneratedAttribute]
public LocalNetworkConfigurationDescription get_NetworkConfiguration();
    [CompilerGeneratedAttribute]
internal void set_NetworkConfiguration(LocalNetworkConfigurationDescription value);
    [CompilerGeneratedAttribute]
public NetworkStatus get_NetworkStatus();
    [CompilerGeneratedAttribute]
internal void set_NetworkStatus(NetworkStatus value);
}
public class System.Fabric.Query.ManagedKeyVaultReferenceParameter : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationIdentityReference>k__BackingField;
    [JsonCustomizationAttribute]
public string ParameterName { get; private set; }
    [JsonCustomizationAttribute]
public string ApplicationIdentityReference { get; private set; }
    internal ManagedKeyVaultReferenceParameter(string parameterName, string applicationIdentityReference);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationIdentityReference();
    [CompilerGeneratedAttribute]
private void set_ApplicationIdentityReference(string value);
    internal static ManagedKeyVaultReferenceParameter CreateFromNative(FABRIC_MANAGED_KEY_VAULT_REFERENCE_PARAMETER nativeParameter);
}
public class System.Fabric.Query.ManagedKeyVaultReferenceParameterList : List`1<ManagedKeyVaultReferenceParameter> {
    internal static ManagedKeyVaultReferenceParameterList CreateFromNative(IntPtr nativeListPtr);
}
public class System.Fabric.Query.NetworkApplication : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ApplicationName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationName(Uri value);
    internal static NetworkApplication CreateFromNative(FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM nativeNetworkApplication);
}
public class System.Fabric.Query.NetworkApplicationList : PagedList`1<NetworkApplication> {
    internal NetworkApplicationList(IList`1<NetworkApplication> list);
    internal static NetworkApplicationList CreateFromNativeListResult(IFabricGetNetworkApplicationListResult result);
    internal static NetworkApplicationList CreateFromNativeList(FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
[KnownTypeAttribute("System.Fabric.Query.LocalNetworkInformation")]
public abstract class System.Fabric.Query.NetworkInformation : object {
    [CompilerGeneratedAttribute]
private NetworkType <NetworkType>k__BackingField;
    [JsonCustomizationAttribute]
public NetworkType NetworkType { get; private set; }
    internal NetworkInformation(NetworkType networkType);
    [CompilerGeneratedAttribute]
public NetworkType get_NetworkType();
    [CompilerGeneratedAttribute]
private void set_NetworkType(NetworkType value);
    internal static NetworkInformation CreateFromNative(FABRIC_NETWORK_INFORMATION nativeNetworkInformation);
}
public class System.Fabric.Query.NetworkList : PagedList`1<NetworkInformation> {
    internal NetworkList(IList`1<NetworkInformation> list);
    internal static NetworkList CreateFromNativeListResult(IFabricGetNetworkListResult result);
    internal static NetworkList CreateFromNativeList(FABRIC_NETWORK_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.NetworkNode : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [JsonCustomizationAttribute]
public string NodeName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
internal void set_NodeName(string value);
    internal static NetworkNode CreateFromNative(FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM nativeNetworkNode);
}
public class System.Fabric.Query.NetworkNodeList : PagedList`1<NetworkNode> {
    internal NetworkNodeList(IList`1<NetworkNode> list);
    internal static NetworkNodeList CreateFromNativeListResult(IFabricGetNetworkNodeListResult result);
    internal static NetworkNodeList CreateFromNativeList(FABRIC_NETWORK_NODE_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.Node : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddressOrFQDN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeStatus <NodeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNodeByNodeUpgradeInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <NodeUpTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <NodeDownTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NodeUpAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NodeDownAt>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSeedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <FaultDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeId <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDeactivationResult <NodeDeactivationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStopped>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InfrastructurePlacementID>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <NodeTags>k__BackingField;
    [JsonCustomizationAttribute]
public string NodeName { get; private set; }
    public string IpAddressOrFQDN { get; private set; }
    [JsonCustomizationAttribute]
public string NodeType { get; private set; }
    public string CodeVersion { get; private set; }
    public string ConfigVersion { get; private set; }
    public NodeStatus NodeStatus { get; private set; }
    public bool IsNodeByNodeUpgradeInProgress { get; private set; }
    [JsonCustomizationAttribute]
[ObsoleteAttribute("This property is deprecated, use NodeUpAt instead.", "False")]
public TimeSpan NodeUpTime { get; private set; }
    private long NodeUpTimeInSeconds { get; private set; }
    [JsonCustomizationAttribute]
[ObsoleteAttribute("This property is deprecated, use NodeDownAt instead.", "False")]
public TimeSpan NodeDownTime { get; private set; }
    private long NodeDownTimeInSeconds { get; private set; }
    public DateTime NodeUpAt { get; private set; }
    public DateTime NodeDownAt { get; private set; }
    public HealthState HealthState { get; private set; }
    public bool IsSeedNode { get; private set; }
    public string UpgradeDomain { get; private set; }
    public Uri FaultDomain { get; private set; }
    [JsonCustomizationAttribute]
public NodeId NodeId { get; private set; }
    [JsonCustomizationAttribute]
public BigInteger NodeInstanceId { get; private set; }
    public NodeDeactivationResult NodeDeactivationInfo { get; private set; }
    public bool IsStopped { get; private set; }
    public string InfrastructurePlacementID { get; private set; }
    public List`1<string> NodeTags { get; private set; }
    internal Node(string nodeName, string ipAddressOrFqdn, string nodeType, string codeVersion, string configVersion, NodeStatus nodeStatus, TimeSpan nodeUpTime, TimeSpan nodeDownTime, DateTime nodeUpAt, DateTime nodeDownAt, HealthState healthState, bool isSeedNode, string upgradeDomain, Uri faultDomain, NodeId nodeId, BigInteger nodeInstanceId, NodeDeactivationResult nodeDeactivationInfo, List`1<string> nodeTags, bool isNodeByNodeUpgradeInProgress);
    internal Node(string nodeName, string ipAddressOrFqdn, string nodeType, string codeVersion, string configVersion, NodeStatus nodeStatus, TimeSpan nodeUpTime, TimeSpan nodeDownTime, DateTime nodeUpAt, DateTime nodeDownAt, HealthState healthState, bool isSeedNode, string upgradeDomain, Uri faultDomain, NodeId nodeId, BigInteger nodeInstanceId, NodeDeactivationResult nodeDeactivationInfo, bool isStopped, string infrastructurePlacementID, List`1<string> nodeTags, bool isNodeByNodeUpgradeInProgress);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_IpAddressOrFQDN();
    [CompilerGeneratedAttribute]
private void set_IpAddressOrFQDN(string value);
    [CompilerGeneratedAttribute]
public string get_NodeType();
    [CompilerGeneratedAttribute]
private void set_NodeType(string value);
    [CompilerGeneratedAttribute]
public string get_CodeVersion();
    [CompilerGeneratedAttribute]
private void set_CodeVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigVersion();
    [CompilerGeneratedAttribute]
private void set_ConfigVersion(string value);
    [CompilerGeneratedAttribute]
public NodeStatus get_NodeStatus();
    [CompilerGeneratedAttribute]
private void set_NodeStatus(NodeStatus value);
    [CompilerGeneratedAttribute]
public bool get_IsNodeByNodeUpgradeInProgress();
    [CompilerGeneratedAttribute]
private void set_IsNodeByNodeUpgradeInProgress(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_NodeUpTime();
    [CompilerGeneratedAttribute]
private void set_NodeUpTime(TimeSpan value);
    private long get_NodeUpTimeInSeconds();
    private void set_NodeUpTimeInSeconds(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_NodeDownTime();
    [CompilerGeneratedAttribute]
private void set_NodeDownTime(TimeSpan value);
    private long get_NodeDownTimeInSeconds();
    private void set_NodeDownTimeInSeconds(long value);
    [CompilerGeneratedAttribute]
public DateTime get_NodeUpAt();
    [CompilerGeneratedAttribute]
private void set_NodeUpAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_NodeDownAt();
    [CompilerGeneratedAttribute]
private void set_NodeDownAt(DateTime value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
private void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public bool get_IsSeedNode();
    [CompilerGeneratedAttribute]
private void set_IsSeedNode(bool value);
    [CompilerGeneratedAttribute]
public string get_UpgradeDomain();
    [CompilerGeneratedAttribute]
private void set_UpgradeDomain(string value);
    [CompilerGeneratedAttribute]
public Uri get_FaultDomain();
    [CompilerGeneratedAttribute]
private void set_FaultDomain(Uri value);
    [CompilerGeneratedAttribute]
public NodeId get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(NodeId value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstanceId();
    [CompilerGeneratedAttribute]
private void set_NodeInstanceId(BigInteger value);
    [CompilerGeneratedAttribute]
public NodeDeactivationResult get_NodeDeactivationInfo();
    [CompilerGeneratedAttribute]
private void set_NodeDeactivationInfo(NodeDeactivationResult value);
    [CompilerGeneratedAttribute]
public bool get_IsStopped();
    [CompilerGeneratedAttribute]
private void set_IsStopped(bool value);
    [CompilerGeneratedAttribute]
public string get_InfrastructurePlacementID();
    [CompilerGeneratedAttribute]
private void set_InfrastructurePlacementID(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_NodeTags();
    [CompilerGeneratedAttribute]
private void set_NodeTags(List`1<string> value);
    internal static Node CreateFromNative(FABRIC_NODE_QUERY_RESULT_ITEM nativeResultItem);
}
public class System.Fabric.Query.NodeDeactivationResult : object {
    [CompilerGeneratedAttribute]
private NodeDeactivationIntent <EffectiveIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDeactivationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NodeDeactivationTask> <Tasks>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SafetyCheck> <PendingSafetyChecks>k__BackingField;
    [JsonCustomizationAttribute]
public NodeDeactivationIntent EffectiveIntent { get; private set; }
    [JsonCustomizationAttribute]
public NodeDeactivationStatus Status { get; private set; }
    [JsonCustomizationAttribute]
public IList`1<NodeDeactivationTask> Tasks { get; private set; }
    public IList`1<SafetyCheck> PendingSafetyChecks { get; private set; }
    internal NodeDeactivationResult(NodeDeactivationIntent effectiveIntent, NodeDeactivationStatus status, IList`1<NodeDeactivationTask> tasks, IList`1<SafetyCheck> pendingSafetyChecks);
    [CompilerGeneratedAttribute]
public NodeDeactivationIntent get_EffectiveIntent();
    [CompilerGeneratedAttribute]
private void set_EffectiveIntent(NodeDeactivationIntent value);
    [CompilerGeneratedAttribute]
public NodeDeactivationStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(NodeDeactivationStatus value);
    [CompilerGeneratedAttribute]
public IList`1<NodeDeactivationTask> get_Tasks();
    [CompilerGeneratedAttribute]
private void set_Tasks(IList`1<NodeDeactivationTask> value);
    [CompilerGeneratedAttribute]
public IList`1<SafetyCheck> get_PendingSafetyChecks();
    [CompilerGeneratedAttribute]
private void set_PendingSafetyChecks(IList`1<SafetyCheck> value);
    internal static NodeDeactivationResult CreateFromNative(FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM nativeResult);
}
public class System.Fabric.Query.NodeDeactivationTask : object {
    [CompilerGeneratedAttribute]
private NodeDeactivationTaskId <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDeactivationIntent <Intent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [JsonCustomizationAttribute]
public NodeDeactivationTaskId TaskId { get; private set; }
    [JsonCustomizationAttribute]
public NodeDeactivationIntent Intent { get; private set; }
    [JsonCustomizationAttribute]
public string Description { get; private set; }
    [JsonCustomizationAttribute]
internal NodeDeactivationTask(NodeDeactivationTaskId taskId, NodeDeactivationIntent intent);
    [JsonCustomizationAttribute]
internal NodeDeactivationTask(NodeDeactivationTaskId taskId, NodeDeactivationIntent intent, string description);
    [CompilerGeneratedAttribute]
public NodeDeactivationTaskId get_TaskId();
    [CompilerGeneratedAttribute]
private void set_TaskId(NodeDeactivationTaskId value);
    [CompilerGeneratedAttribute]
public NodeDeactivationIntent get_Intent();
    [CompilerGeneratedAttribute]
private void set_Intent(NodeDeactivationIntent value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    internal static NodeDeactivationTask CreateFromNative(FABRIC_NODE_DEACTIVATION_TASK nativeResult);
}
public class System.Fabric.Query.NodeDeactivationTaskId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDeactivationTaskType <Type>k__BackingField;
    public string Id { get; private set; }
    [JsonCustomizationAttribute]
public NodeDeactivationTaskType Type { get; private set; }
    internal NodeDeactivationTaskId(string id, NodeDeactivationTaskType type);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public NodeDeactivationTaskType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(NodeDeactivationTaskType value);
    internal static NodeDeactivationTaskId CreateFromNative(FABRIC_NODE_DEACTIVATION_TASK_ID nativeResult);
}
public class System.Fabric.Query.NodeList : PagedList`1<Node> {
    internal NodeList(IList`1<Node> list);
    internal static NodeList CreateFromNativeListResult(IFabricGetNodeListResult2 result);
    internal static NodeList CreateFromNativeList(FABRIC_NODE_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.NodeLoadInformation : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NodeLoadMetricInformation> <NodeLoadMetricInformationList>k__BackingField;
    public string NodeName { get; public set; }
    [JsonCustomizationAttribute]
public IList`1<NodeLoadMetricInformation> NodeLoadMetricInformationList { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public IList`1<NodeLoadMetricInformation> get_NodeLoadMetricInformationList();
    [CompilerGeneratedAttribute]
internal void set_NodeLoadMetricInformationList(IList`1<NodeLoadMetricInformation> value);
    internal static NodeLoadInformation CreateFromNative(IFabricGetNodeLoadInformationResult nativeNodeLoadInformation);
    internal static NodeLoadInformation CreateFromNative(FABRIC_NODE_LOAD_INFORMATION nativeLoadInformation);
}
public class System.Fabric.Query.NodeLoadMetricInformation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CurrentNodeLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeRemainingCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NodeCapacityRemaining>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCapacityViolation>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeBufferedCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NodeRemainingBufferedCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BufferedNodeCapacityRemaining>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PlannedNodeLoadRemoval>k__BackingField;
    public string Name { get; internal set; }
    public long NodeCapacity { get; internal set; }
    public long NodeLoad { get; internal set; }
    public double CurrentNodeLoad { get; internal set; }
    public long NodeRemainingCapacity { get; internal set; }
    public double NodeCapacityRemaining { get; internal set; }
    public bool IsCapacityViolation { get; internal set; }
    public long NodeBufferedCapacity { get; internal set; }
    public long NodeRemainingBufferedCapacity { get; internal set; }
    public double BufferedNodeCapacityRemaining { get; internal set; }
    public double PlannedNodeLoadRemoval { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_NodeCapacity();
    [CompilerGeneratedAttribute]
internal void set_NodeCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_NodeLoad();
    [CompilerGeneratedAttribute]
internal void set_NodeLoad(long value);
    [CompilerGeneratedAttribute]
public double get_CurrentNodeLoad();
    [CompilerGeneratedAttribute]
internal void set_CurrentNodeLoad(double value);
    [CompilerGeneratedAttribute]
public long get_NodeRemainingCapacity();
    [CompilerGeneratedAttribute]
internal void set_NodeRemainingCapacity(long value);
    [CompilerGeneratedAttribute]
public double get_NodeCapacityRemaining();
    [CompilerGeneratedAttribute]
internal void set_NodeCapacityRemaining(double value);
    [CompilerGeneratedAttribute]
public bool get_IsCapacityViolation();
    [CompilerGeneratedAttribute]
internal void set_IsCapacityViolation(bool value);
    [CompilerGeneratedAttribute]
public long get_NodeBufferedCapacity();
    [CompilerGeneratedAttribute]
internal void set_NodeBufferedCapacity(long value);
    [CompilerGeneratedAttribute]
public long get_NodeRemainingBufferedCapacity();
    [CompilerGeneratedAttribute]
internal void set_NodeRemainingBufferedCapacity(long value);
    [CompilerGeneratedAttribute]
public double get_BufferedNodeCapacityRemaining();
    [CompilerGeneratedAttribute]
internal void set_BufferedNodeCapacityRemaining(double value);
    [CompilerGeneratedAttribute]
public double get_PlannedNodeLoadRemoval();
    [CompilerGeneratedAttribute]
internal void set_PlannedNodeLoadRemoval(double value);
    internal static NodeLoadMetricInformation CreateFromNative(FABRIC_NODE_LOAD_METRIC_INFORMATION nativeResultItem);
    internal static IList`1<NodeLoadMetricInformation> CreateFromNativeList(FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST* nativeResultList);
}
public enum System.Fabric.Query.NodeStatus : Enum {
    public int value__;
    public static NodeStatus Invalid;
    public static NodeStatus Up;
    public static NodeStatus Down;
    public static NodeStatus Enabling;
    public static NodeStatus Disabling;
    public static NodeStatus Disabled;
    public static NodeStatus Unknown;
    public static NodeStatus Removed;
}
[FlagsAttribute]
public enum System.Fabric.Query.NodeStatusFilter : Enum {
    public int value__;
    public static NodeStatusFilter Default;
    public static NodeStatusFilter All;
    public static NodeStatusFilter Up;
    public static NodeStatusFilter Down;
    public static NodeStatusFilter Enabling;
    public static NodeStatusFilter Disabling;
    public static NodeStatusFilter Disabled;
    public static NodeStatusFilter Unknown;
    public static NodeStatusFilter Removed;
}
[DefaultMemberAttribute("Item")]
public abstract class System.Fabric.Query.PagedList`1 : object {
    private IList`1<T> list;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public T Item { get; public set; }
    public string ContinuationToken { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected PagedList`1(IList`1<T> list);
    public IList`1<T> Items();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class System.Fabric.Query.PagedListHelper : object {
    [ExtensionAttribute]
public static T[] ToArray(PagedList`1<T> list);
}
[KnownTypeAttribute("System.Fabric.Query.StatelessServicePartition")]
[KnownTypeAttribute("System.Fabric.Query.StatefulServicePartition")]
public abstract class System.Fabric.Query.Partition : object {
    [CompilerGeneratedAttribute]
private ServiceKind <ServiceKind>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionInformation <PartitionInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionStatus <PartitionStatus>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceKind ServiceKind { get; private set; }
    public HealthState HealthState { get; private set; }
    public ServicePartitionInformation PartitionInformation { get; private set; }
    public ServicePartitionStatus PartitionStatus { get; private set; }
    protected Partition(ServiceKind serviceKind, ServicePartitionInformation partitionInformation, HealthState healthState, ServicePartitionStatus partitionStatus);
    [CompilerGeneratedAttribute]
public ServiceKind get_ServiceKind();
    [CompilerGeneratedAttribute]
private void set_ServiceKind(ServiceKind value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
private void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public ServicePartitionInformation get_PartitionInformation();
    [CompilerGeneratedAttribute]
private void set_PartitionInformation(ServicePartitionInformation value);
    [CompilerGeneratedAttribute]
public ServicePartitionStatus get_PartitionStatus();
    [CompilerGeneratedAttribute]
private void set_PartitionStatus(ServicePartitionStatus value);
    internal static Partition CreateFromNative(FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM nativeResultItem);
}
public class System.Fabric.Query.PartitionLoadInformation : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoadMetricReport> <PrimaryLoadMetricReports>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoadMetricReport> <SecondaryLoadMetricReports>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoadMetricReport> <AuxiliaryLoadMetricReports>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoadMetricReport> <MaximumLoadMetricReports>k__BackingField;
    public Guid PartitionId { get; private set; }
    public IList`1<LoadMetricReport> PrimaryLoadMetricReports { get; private set; }
    public IList`1<LoadMetricReport> SecondaryLoadMetricReports { get; private set; }
    public IList`1<LoadMetricReport> AuxiliaryLoadMetricReports { get; private set; }
    public IList`1<LoadMetricReport> MaximumLoadMetricReports { get; private set; }
    internal PartitionLoadInformation(Guid partitionId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public IList`1<LoadMetricReport> get_PrimaryLoadMetricReports();
    [CompilerGeneratedAttribute]
private void set_PrimaryLoadMetricReports(IList`1<LoadMetricReport> value);
    [CompilerGeneratedAttribute]
public IList`1<LoadMetricReport> get_SecondaryLoadMetricReports();
    [CompilerGeneratedAttribute]
private void set_SecondaryLoadMetricReports(IList`1<LoadMetricReport> value);
    [CompilerGeneratedAttribute]
public IList`1<LoadMetricReport> get_AuxiliaryLoadMetricReports();
    [CompilerGeneratedAttribute]
private void set_AuxiliaryLoadMetricReports(IList`1<LoadMetricReport> value);
    [CompilerGeneratedAttribute]
public IList`1<LoadMetricReport> get_MaximumLoadMetricReports();
    [CompilerGeneratedAttribute]
private void set_MaximumLoadMetricReports(IList`1<LoadMetricReport> value);
    internal static PartitionLoadInformation CreateFromNative(IFabricGetPartitionLoadInformationResult nativeResult);
    internal static PartitionLoadInformation CreateFromNative(FABRIC_PARTITION_LOAD_INFORMATION nativeLoadInformation);
}
public class System.Fabric.Query.PrimaryReplicatorStatus : ReplicatorStatus {
    [CompilerGeneratedAttribute]
private ReplicatorQueueStatus <ReplicationQueueStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RemoteReplicatorStatus> <RemoteReplicators>k__BackingField;
    public ReplicatorQueueStatus ReplicationQueueStatus { get; internal set; }
    public IList`1<RemoteReplicatorStatus> RemoteReplicators { get; internal set; }
    [CompilerGeneratedAttribute]
public ReplicatorQueueStatus get_ReplicationQueueStatus();
    [CompilerGeneratedAttribute]
internal void set_ReplicationQueueStatus(ReplicatorQueueStatus value);
    [CompilerGeneratedAttribute]
public IList`1<RemoteReplicatorStatus> get_RemoteReplicators();
    [CompilerGeneratedAttribute]
internal void set_RemoteReplicators(IList`1<RemoteReplicatorStatus> value);
    internal static ReplicatorStatus CreateFromNative(FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT* nativeEntryPoint);
}
public class System.Fabric.Query.ProvisionedFabricCodeVersion : object {
    [CompilerGeneratedAttribute]
private string <CodeVersion>k__BackingField;
    public string CodeVersion { get; private set; }
    internal ProvisionedFabricCodeVersion(string codeVersion);
    [CompilerGeneratedAttribute]
public string get_CodeVersion();
    [CompilerGeneratedAttribute]
private void set_CodeVersion(string value);
    internal static ProvisionedFabricCodeVersion CreateFromNative(FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.ProvisionedFabricCodeVersionList : object {
    private IList`1<ProvisionedFabricCodeVersion> list;
    public ProvisionedFabricCodeVersion Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ProvisionedFabricCodeVersionList(IList`1<ProvisionedFabricCodeVersion> list);
    public sealed virtual int IndexOf(ProvisionedFabricCodeVersion item);
    public sealed virtual void Insert(int index, ProvisionedFabricCodeVersion item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ProvisionedFabricCodeVersion get_Item(int index);
    public sealed virtual void set_Item(int index, ProvisionedFabricCodeVersion value);
    public sealed virtual void Add(ProvisionedFabricCodeVersion item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ProvisionedFabricCodeVersion item);
    public sealed virtual void CopyTo(ProvisionedFabricCodeVersion[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ProvisionedFabricCodeVersion item);
    public sealed virtual IEnumerator`1<ProvisionedFabricCodeVersion> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ProvisionedFabricCodeVersionList CreateFromNativeListResult(IFabricGetProvisionedCodeVersionListResult result);
    internal static ProvisionedFabricCodeVersionList CreateFromNativeList(FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.ProvisionedFabricConfigVersion : object {
    [CompilerGeneratedAttribute]
private string <ConfigVersion>k__BackingField;
    public string ConfigVersion { get; private set; }
    internal ProvisionedFabricConfigVersion(string configVersion);
    [CompilerGeneratedAttribute]
public string get_ConfigVersion();
    [CompilerGeneratedAttribute]
private void set_ConfigVersion(string value);
    internal static ProvisionedFabricConfigVersion CreateFromNative(FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.ProvisionedFabricConfigVersionList : object {
    private IList`1<ProvisionedFabricConfigVersion> list;
    public ProvisionedFabricConfigVersion Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ProvisionedFabricConfigVersionList(IList`1<ProvisionedFabricConfigVersion> list);
    public sealed virtual int IndexOf(ProvisionedFabricConfigVersion item);
    public sealed virtual void Insert(int index, ProvisionedFabricConfigVersion item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ProvisionedFabricConfigVersion get_Item(int index);
    public sealed virtual void set_Item(int index, ProvisionedFabricConfigVersion value);
    public sealed virtual void Add(ProvisionedFabricConfigVersion item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ProvisionedFabricConfigVersion item);
    public sealed virtual void CopyTo(ProvisionedFabricConfigVersion[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ProvisionedFabricConfigVersion item);
    public sealed virtual IEnumerator`1<ProvisionedFabricConfigVersion> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ProvisionedFabricConfigVersionList CreateFromNativeListResult(IFabricGetProvisionedConfigVersionListResult result);
    internal static ProvisionedFabricConfigVersionList CreateFromNativeList(FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.RemoteReplicatorAcknowledgementDetail : object {
    [CompilerGeneratedAttribute]
private TimeSpan <AverageReceiveDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <AverageApplyDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NotReceivedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReceivedAndNotAppliedCount>k__BackingField;
    [JsonCustomizationAttribute]
public TimeSpan AverageReceiveDuration { get; internal set; }
    [JsonCustomizationAttribute]
public TimeSpan AverageApplyDuration { get; internal set; }
    public long NotReceivedCount { get; internal set; }
    public long ReceivedAndNotAppliedCount { get; internal set; }
    [JsonCustomizationAttribute]
private long AverageReceiveDurationMs { get; private set; }
    [JsonCustomizationAttribute]
private long AverageApplyDurationMs { get; private set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_AverageReceiveDuration();
    [CompilerGeneratedAttribute]
internal void set_AverageReceiveDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_AverageApplyDuration();
    [CompilerGeneratedAttribute]
internal void set_AverageApplyDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_NotReceivedCount();
    [CompilerGeneratedAttribute]
internal void set_NotReceivedCount(long value);
    [CompilerGeneratedAttribute]
public long get_ReceivedAndNotAppliedCount();
    [CompilerGeneratedAttribute]
internal void set_ReceivedAndNotAppliedCount(long value);
    private long get_AverageReceiveDurationMs();
    private void set_AverageReceiveDurationMs(long value);
    private long get_AverageApplyDurationMs();
    private void set_AverageApplyDurationMs(long value);
    internal static RemoteReplicatorAcknowledgementDetail CreateFromNative(FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL nativeResultItem);
}
public class System.Fabric.Query.RemoteReplicatorAcknowledgementStatus : object {
    [CompilerGeneratedAttribute]
private RemoteReplicatorAcknowledgementDetail <ReplicationStreamAcknowledgementDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteReplicatorAcknowledgementDetail <CopyStreamAcknowledgementDetail>k__BackingField;
    public RemoteReplicatorAcknowledgementDetail ReplicationStreamAcknowledgementDetail { get; private set; }
    public RemoteReplicatorAcknowledgementDetail CopyStreamAcknowledgementDetail { get; private set; }
    [CompilerGeneratedAttribute]
public RemoteReplicatorAcknowledgementDetail get_ReplicationStreamAcknowledgementDetail();
    [CompilerGeneratedAttribute]
private void set_ReplicationStreamAcknowledgementDetail(RemoteReplicatorAcknowledgementDetail value);
    [CompilerGeneratedAttribute]
public RemoteReplicatorAcknowledgementDetail get_CopyStreamAcknowledgementDetail();
    [CompilerGeneratedAttribute]
private void set_CopyStreamAcknowledgementDetail(RemoteReplicatorAcknowledgementDetail value);
    internal static RemoteReplicatorAcknowledgementStatus CreateFromNative(FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS nativeResultItem);
}
public class System.Fabric.Query.RemoteReplicatorStatus : object {
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAcknowledgementProcessedTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastReceivedReplicationSequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastAppliedReplicationSequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastReceivedCopySequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastAppliedCopySequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteReplicatorAcknowledgementStatus <RemoteReplicatorAcknowledgementStatus>k__BackingField;
    public long ReplicaId { get; internal set; }
    public DateTime LastAcknowledgementProcessedTimeUtc { get; internal set; }
    public long LastReceivedReplicationSequenceNumber { get; private set; }
    public long LastAppliedReplicationSequenceNumber { get; private set; }
    public bool IsInBuild { get; private set; }
    public long LastReceivedCopySequenceNumber { get; private set; }
    public long LastAppliedCopySequenceNumber { get; private set; }
    public RemoteReplicatorAcknowledgementStatus RemoteReplicatorAcknowledgementStatus { get; private set; }
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaId(long value);
    [CompilerGeneratedAttribute]
public DateTime get_LastAcknowledgementProcessedTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_LastAcknowledgementProcessedTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public long get_LastReceivedReplicationSequenceNumber();
    [CompilerGeneratedAttribute]
private void set_LastReceivedReplicationSequenceNumber(long value);
    [CompilerGeneratedAttribute]
public long get_LastAppliedReplicationSequenceNumber();
    [CompilerGeneratedAttribute]
private void set_LastAppliedReplicationSequenceNumber(long value);
    [CompilerGeneratedAttribute]
public bool get_IsInBuild();
    [CompilerGeneratedAttribute]
private void set_IsInBuild(bool value);
    [CompilerGeneratedAttribute]
public long get_LastReceivedCopySequenceNumber();
    [CompilerGeneratedAttribute]
private void set_LastReceivedCopySequenceNumber(long value);
    [CompilerGeneratedAttribute]
public long get_LastAppliedCopySequenceNumber();
    [CompilerGeneratedAttribute]
private void set_LastAppliedCopySequenceNumber(long value);
    [CompilerGeneratedAttribute]
public RemoteReplicatorAcknowledgementStatus get_RemoteReplicatorAcknowledgementStatus();
    [CompilerGeneratedAttribute]
private void set_RemoteReplicatorAcknowledgementStatus(RemoteReplicatorAcknowledgementStatus value);
    private static RemoteReplicatorStatus CreateFromNative(FABRIC_REMOTE_REPLICATOR_STATUS nativeResultItem);
    internal static IList`1<RemoteReplicatorStatus> CreateFromNativeList(FABRIC_REMOTE_REPLICATOR_STATUS_LIST* list);
}
[KnownTypeAttribute("System.Fabric.Query.StatelessServiceInstance")]
[KnownTypeAttribute("System.Fabric.Query.StatefulServiceReplica")]
public abstract class System.Fabric.Query.Replica : object {
    [CompilerGeneratedAttribute]
private ServiceKind <ServiceKind>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceReplicaStatus <ReplicaStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicaAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LastInBuildDuration>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceKind ServiceKind { get; private set; }
    [JsonCustomizationAttribute]
public long Id { get; protected set; }
    public ServiceReplicaStatus ReplicaStatus { get; private set; }
    public HealthState HealthState { get; private set; }
    [JsonCustomizationAttribute]
public string ReplicaAddress { get; private set; }
    public string NodeName { get; private set; }
    [JsonCustomizationAttribute]
public TimeSpan LastInBuildDuration { get; private set; }
    protected internal long LastInBuildDurationInSeconds { get; private set; }
    protected Replica(ServiceKind serviceKind, long id, ServiceReplicaStatus replicaStatus, HealthState healthState, string replicaAddress, string nodeName, TimeSpan lastInBuildDuration);
    [CompilerGeneratedAttribute]
public ServiceKind get_ServiceKind();
    [CompilerGeneratedAttribute]
private void set_ServiceKind(ServiceKind value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public ServiceReplicaStatus get_ReplicaStatus();
    [CompilerGeneratedAttribute]
private void set_ReplicaStatus(ServiceReplicaStatus value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
private void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public string get_ReplicaAddress();
    [CompilerGeneratedAttribute]
private void set_ReplicaAddress(string value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LastInBuildDuration();
    [CompilerGeneratedAttribute]
private void set_LastInBuildDuration(TimeSpan value);
    protected internal long get_LastInBuildDurationInSeconds();
    private void set_LastInBuildDurationInSeconds(long value);
    internal static Replica CreateFromNative(FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM nativeResultItem);
}
public class System.Fabric.Query.ReplicaLoadInformation : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicaOrInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoadMetricReport> <LoadMetricReports>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public long ReplicaOrInstanceId { get; internal set; }
    [JsonCustomizationAttribute]
public IList`1<LoadMetricReport> LoadMetricReports { get; internal set; }
    internal ReplicaLoadInformation(Guid partitionId, long replicaOrInstanceId);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public long get_ReplicaOrInstanceId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaOrInstanceId(long value);
    [CompilerGeneratedAttribute]
public IList`1<LoadMetricReport> get_LoadMetricReports();
    [CompilerGeneratedAttribute]
internal void set_LoadMetricReports(IList`1<LoadMetricReport> value);
    internal static ReplicaLoadInformation CreateFromNative(IFabricGetReplicaLoadInformationResult nativeResult);
    internal static ReplicaLoadInformation CreateFromNative(FABRIC_REPLICA_LOAD_INFORMATION nativeLoadInformation);
}
[KnownTypeAttribute("System.Fabric.Query.KeyValueStoreReplicaStatus")]
public abstract class System.Fabric.Query.ReplicaStatus : object {
    [CompilerGeneratedAttribute]
private ReplicaKind <Kind>k__BackingField;
    [JsonCustomizationAttribute]
public ReplicaKind Kind { get; private set; }
    internal ReplicaStatus(ReplicaKind kind);
    [CompilerGeneratedAttribute]
public ReplicaKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ReplicaKind value);
}
[FlagsAttribute]
public enum System.Fabric.Query.ReplicatorOperationName : Enum {
    public int value__;
    public static ReplicatorOperationName Invalid;
    public static ReplicatorOperationName None;
    public static ReplicatorOperationName Open;
    public static ReplicatorOperationName ChangeRole;
    public static ReplicatorOperationName UpdateEpoch;
    public static ReplicatorOperationName Close;
    public static ReplicatorOperationName Abort;
    public static ReplicatorOperationName OnDataLoss;
    public static ReplicatorOperationName WaitForCatchup;
    public static ReplicatorOperationName Build;
}
public class System.Fabric.Query.ReplicatorQueueStatus : object {
    [CompilerGeneratedAttribute]
private long <QueueUtilizationPercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private long <QueueMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FirstSequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CompletedSequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CommittedSequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastSequenceNumber>k__BackingField;
    public long QueueUtilizationPercentage { get; private set; }
    public long QueueMemorySize { get; private set; }
    public long FirstSequenceNumber { get; private set; }
    public long CompletedSequenceNumber { get; private set; }
    public long CommittedSequenceNumber { get; private set; }
    public long LastSequenceNumber { get; private set; }
    [CompilerGeneratedAttribute]
public long get_QueueUtilizationPercentage();
    [CompilerGeneratedAttribute]
private void set_QueueUtilizationPercentage(long value);
    [CompilerGeneratedAttribute]
public long get_QueueMemorySize();
    [CompilerGeneratedAttribute]
private void set_QueueMemorySize(long value);
    [CompilerGeneratedAttribute]
public long get_FirstSequenceNumber();
    [CompilerGeneratedAttribute]
private void set_FirstSequenceNumber(long value);
    [CompilerGeneratedAttribute]
public long get_CompletedSequenceNumber();
    [CompilerGeneratedAttribute]
private void set_CompletedSequenceNumber(long value);
    [CompilerGeneratedAttribute]
public long get_CommittedSequenceNumber();
    [CompilerGeneratedAttribute]
private void set_CommittedSequenceNumber(long value);
    [CompilerGeneratedAttribute]
public long get_LastSequenceNumber();
    [CompilerGeneratedAttribute]
private void set_LastSequenceNumber(long value);
    internal static ReplicatorQueueStatus CreateFromNative(FABRIC_REPLICATOR_QUEUE_STATUS* nativeEntryPoint);
}
[KnownTypeAttribute("System.Fabric.Query.SecondaryReplicatorStatus")]
[KnownTypeAttribute("System.Fabric.Query.PrimaryReplicatorStatus")]
public abstract class System.Fabric.Query.ReplicatorStatus : object {
    private ReplicaRole role;
    [JsonCustomizationAttribute]
internal ReplicaRole ReplicaRole { get; }
    protected ReplicatorStatus(ReplicaRole role);
    internal ReplicaRole get_ReplicaRole();
    internal static ReplicatorStatus FromNative(FABRIC_REPLICATOR_STATUS_QUERY_RESULT* nativeEntryPoint);
}
public class System.Fabric.Query.SecondaryReplicatorStatus : ReplicatorStatus {
    [CompilerGeneratedAttribute]
private ReplicatorQueueStatus <ReplicationQueueStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastReplicationOperationReceivedTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicatorQueueStatus <CopyQueueStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastCopyOperationReceivedTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAcknowledgementSentTimeUtc>k__BackingField;
    public ReplicatorQueueStatus ReplicationQueueStatus { get; private set; }
    public DateTime LastReplicationOperationReceivedTimeUtc { get; private set; }
    public bool IsInBuild { get; private set; }
    public ReplicatorQueueStatus CopyQueueStatus { get; private set; }
    public DateTime LastCopyOperationReceivedTimeUtc { get; private set; }
    public DateTime LastAcknowledgementSentTimeUtc { get; private set; }
    internal SecondaryReplicatorStatus(bool isIdle);
    [CompilerGeneratedAttribute]
public ReplicatorQueueStatus get_ReplicationQueueStatus();
    [CompilerGeneratedAttribute]
private void set_ReplicationQueueStatus(ReplicatorQueueStatus value);
    [CompilerGeneratedAttribute]
public DateTime get_LastReplicationOperationReceivedTimeUtc();
    [CompilerGeneratedAttribute]
private void set_LastReplicationOperationReceivedTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsInBuild();
    [CompilerGeneratedAttribute]
private void set_IsInBuild(bool value);
    [CompilerGeneratedAttribute]
public ReplicatorQueueStatus get_CopyQueueStatus();
    [CompilerGeneratedAttribute]
private void set_CopyQueueStatus(ReplicatorQueueStatus value);
    [CompilerGeneratedAttribute]
public DateTime get_LastCopyOperationReceivedTimeUtc();
    [CompilerGeneratedAttribute]
private void set_LastCopyOperationReceivedTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastAcknowledgementSentTimeUtc();
    [CompilerGeneratedAttribute]
private void set_LastAcknowledgementSentTimeUtc(DateTime value);
    internal static ReplicatorStatus CreateFromNative(FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT* nativeEntryPoint);
}
[KnownTypeAttribute("System.Fabric.Query.StatelessService")]
[KnownTypeAttribute("System.Fabric.Query.StatefulService")]
public abstract class System.Fabric.Query.Service : object {
    [CompilerGeneratedAttribute]
private ServiceKind <ServiceKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthState <HealthState>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceStatus <ServiceStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsServiceGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceMetadata <ServiceMetadata>k__BackingField;
    [JsonCustomizationAttribute]
public ServiceKind ServiceKind { get; private set; }
    [JsonCustomizationAttribute]
private string ServiceId { get; private set; }
    [JsonCustomizationAttribute]
public Uri ServiceName { get; private set; }
    [JsonCustomizationAttribute]
public string ServiceTypeName { get; private set; }
    [JsonCustomizationAttribute]
public string ServiceManifestVersion { get; private set; }
    public HealthState HealthState { get; private set; }
    public ServiceStatus ServiceStatus { get; private set; }
    public bool IsServiceGroup { get; private set; }
    [JsonCustomizationAttribute]
public ServiceMetadata ServiceMetadata { get; private set; }
    internal Service(ServiceKind kind, Uri serviceName, string serviceTypeName, string serviceManifestVersion, HealthState healthState, ServiceStatus serviceStatus, ServiceMetadata serviceMetadata, bool isServiceGroup);
    [CompilerGeneratedAttribute]
public ServiceKind get_ServiceKind();
    [CompilerGeneratedAttribute]
private void set_ServiceKind(ServiceKind value);
    [CompilerGeneratedAttribute]
private string get_ServiceId();
    [CompilerGeneratedAttribute]
private void set_ServiceId(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
private void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestVersion();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestVersion(string value);
    [CompilerGeneratedAttribute]
public HealthState get_HealthState();
    [CompilerGeneratedAttribute]
private void set_HealthState(HealthState value);
    [CompilerGeneratedAttribute]
public ServiceStatus get_ServiceStatus();
    [CompilerGeneratedAttribute]
private void set_ServiceStatus(ServiceStatus value);
    [CompilerGeneratedAttribute]
public bool get_IsServiceGroup();
    [CompilerGeneratedAttribute]
private void set_IsServiceGroup(bool value);
    [CompilerGeneratedAttribute]
public ServiceMetadata get_ServiceMetadata();
    [CompilerGeneratedAttribute]
private void set_ServiceMetadata(ServiceMetadata value);
    internal static Service CreateFromNative(FABRIC_SERVICE_QUERY_RESULT_ITEM nativeResultItem);
    [DerivedTypeResolverAttribute("ServiceKind")]
internal static Type ResolveDerivedClass(ServiceKind kind);
}
public class System.Fabric.Query.ServiceGroupMember : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceGroupMemberMemberList <ServiceGroupMemberMembers>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ServiceName { get; private set; }
    [JsonCustomizationAttribute]
public ServiceGroupMemberMemberList ServiceGroupMemberMembers { get; private set; }
    internal ServiceGroupMember(Uri serviceName, ServiceGroupMemberMemberList serviceGroupMemberMembers);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public ServiceGroupMemberMemberList get_ServiceGroupMemberMembers();
    [CompilerGeneratedAttribute]
private void set_ServiceGroupMemberMembers(ServiceGroupMemberMemberList value);
    internal static ServiceGroupMember CreateFromNative(FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.ServiceGroupMemberList : object {
    private IList`1<ServiceGroupMember> list;
    public ServiceGroupMember Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ServiceGroupMemberList(IList`1<ServiceGroupMember> list);
    public sealed virtual int IndexOf(ServiceGroupMember item);
    public sealed virtual void Insert(int index, ServiceGroupMember item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ServiceGroupMember get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceGroupMember value);
    public sealed virtual void Add(ServiceGroupMember item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceGroupMember item);
    public sealed virtual void CopyTo(ServiceGroupMember[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ServiceGroupMember item);
    public sealed virtual IEnumerator`1<ServiceGroupMember> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ServiceGroupMemberList CreateFromNativeListResult(IFabricGetServiceGroupMemberListResult result);
    internal static ServiceGroupMemberList CreateFromNativeList(FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.ServiceGroupMemberMember : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    public Uri ServiceName { get; private set; }
    public string ServiceTypeName { get; private set; }
    internal ServiceGroupMemberMember(Uri serviceName, string serviceTypeName);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
private void set_ServiceTypeName(string value);
    internal static ServiceGroupMemberMember CreateFromNative(FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.ServiceGroupMemberMemberList : object {
    private IList`1<ServiceGroupMemberMember> list;
    public ServiceGroupMemberMember Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ServiceGroupMemberMemberList(IList`1<ServiceGroupMemberMember> list);
    public sealed virtual int IndexOf(ServiceGroupMemberMember item);
    public sealed virtual void Insert(int index, ServiceGroupMemberMember item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ServiceGroupMemberMember get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceGroupMemberMember value);
    public sealed virtual void Add(ServiceGroupMemberMember item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceGroupMemberMember item);
    public sealed virtual void CopyTo(ServiceGroupMemberMember[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ServiceGroupMemberMember item);
    public sealed virtual IEnumerator`1<ServiceGroupMemberMember> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ServiceGroupMemberMemberList CreateFromNativeList(FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST* nativeList);
}
public class System.Fabric.Query.ServiceGroupMemberType : object {
    [CompilerGeneratedAttribute]
private ICollection`1<ServiceGroupTypeMemberDescription> <ServiceGroupMemberTypeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [JsonCustomizationAttribute]
public ICollection`1<ServiceGroupTypeMemberDescription> ServiceGroupMemberTypeDescription { get; private set; }
    public string ServiceManifestVersion { get; private set; }
    public string ServiceManifestName { get; private set; }
    internal ServiceGroupMemberType(ICollection`1<ServiceGroupTypeMemberDescription> serviceGroupMemberTypeDescription, string serviceManifestVersion, string serviceManifestName);
    [CompilerGeneratedAttribute]
public ICollection`1<ServiceGroupTypeMemberDescription> get_ServiceGroupMemberTypeDescription();
    [CompilerGeneratedAttribute]
private void set_ServiceGroupMemberTypeDescription(ICollection`1<ServiceGroupTypeMemberDescription> value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestVersion();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    internal static ServiceGroupMemberType CreateFromNative(FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.ServiceGroupMemberTypeList : object {
    private IList`1<ServiceGroupMemberType> list;
    public ServiceGroupMemberType Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ServiceGroupMemberTypeList(IList`1<ServiceGroupMemberType> list);
    public sealed virtual int IndexOf(ServiceGroupMemberType item);
    public sealed virtual void Insert(int index, ServiceGroupMemberType item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ServiceGroupMemberType get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceGroupMemberType value);
    public sealed virtual void Add(ServiceGroupMemberType item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceGroupMemberType item);
    public sealed virtual void CopyTo(ServiceGroupMemberType[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ServiceGroupMemberType item);
    public sealed virtual IEnumerator`1<ServiceGroupMemberType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ServiceGroupMemberTypeList CreateFromNativeListResult(IFabricGetServiceGroupMemberTypeListResult result);
    internal static ServiceGroupMemberTypeList CreateFromNativeList(FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST* nativeList);
}
public enum System.Fabric.Query.ServiceKind : Enum {
    public int value__;
    public static ServiceKind Invalid;
    public static ServiceKind Stateless;
    public static ServiceKind Stateful;
}
public class System.Fabric.Query.ServiceList : PagedList`1<Service> {
    internal ServiceList(IList`1<Service> list);
    internal static ServiceList CreateFromNativeListResult(IFabricGetServiceListResult2 result);
    internal static ServiceList CreateFromNativeList(FABRIC_SERVICE_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.ServiceMetadata : object {
    [CompilerGeneratedAttribute]
private ArmMetadata <ArmMetadata>k__BackingField;
    [JsonCustomizationAttribute]
public ArmMetadata ArmMetadata { get; private set; }
    internal ServiceMetadata(ArmMetadata metadata);
    [CompilerGeneratedAttribute]
public ArmMetadata get_ArmMetadata();
    [CompilerGeneratedAttribute]
private void set_ArmMetadata(ArmMetadata value);
    internal static ServiceMetadata CreateFromNative(IntPtr nativeServiceMetadataPtr);
}
public class System.Fabric.Query.ServiceNameResult : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [JsonCustomizationAttribute]
public Uri ServiceName { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    internal static ServiceNameResult CreateFromNativeResult(IFabricGetServiceNameResult result);
    private static ServiceNameResult FromNative(FABRIC_SERVICE_NAME_QUERY_RESULT* nativeResultItem);
}
public enum System.Fabric.Query.ServiceOperationName : Enum {
    public int value__;
    public static ServiceOperationName Invalid;
    public static ServiceOperationName None;
    public static ServiceOperationName Open;
    public static ServiceOperationName ChangeRole;
    public static ServiceOperationName Close;
    public static ServiceOperationName Abort;
}
public class System.Fabric.Query.ServicePartitionList : PagedList`1<Partition> {
    internal ServicePartitionList(IList`1<Partition> list);
    internal static ServicePartitionList CreateFromNativeListResult(IFabricGetPartitionListResult2 result);
    internal static ServicePartitionList CreateFromNativeList(FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public enum System.Fabric.Query.ServicePartitionStatus : Enum {
    public int value__;
    public static ServicePartitionStatus Invalid;
    public static ServicePartitionStatus Ready;
    public static ServicePartitionStatus NotReady;
    public static ServicePartitionStatus InQuorumLoss;
    public static ServicePartitionStatus Reconfiguring;
    public static ServicePartitionStatus Deleting;
    public static ServicePartitionStatus Disabling;
    public static ServicePartitionStatus Disabled;
}
public class System.Fabric.Query.ServiceReplicaList : PagedList`1<Replica> {
    internal ServiceReplicaList(IList`1<Replica> list);
    internal static ServiceReplicaList CreateFromNativeListResult(IFabricGetReplicaListResult2 result);
    internal static ServiceReplicaList CreateFromNativeList(FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public enum System.Fabric.Query.ServiceReplicaStatus : Enum {
    public int value__;
    public static ServiceReplicaStatus Invalid;
    public static ServiceReplicaStatus InBuild;
    public static ServiceReplicaStatus Standby;
    public static ServiceReplicaStatus Ready;
    public static ServiceReplicaStatus Down;
    public static ServiceReplicaStatus Dropped;
    public static ServiceReplicaStatus Completed;
}
[FlagsAttribute]
public enum System.Fabric.Query.ServiceReplicaStatusFilter : Enum {
    public int value__;
    public static ServiceReplicaStatusFilter Default;
    public static ServiceReplicaStatusFilter All;
    public static ServiceReplicaStatusFilter InBuild;
    public static ServiceReplicaStatusFilter Standby;
    public static ServiceReplicaStatusFilter Ready;
    public static ServiceReplicaStatusFilter Down;
    public static ServiceReplicaStatusFilter Dropped;
    public static ServiceReplicaStatusFilter Completed;
}
public enum System.Fabric.Query.ServiceStatus : Enum {
    public int value__;
    public static ServiceStatus Unknown;
    public static ServiceStatus Active;
    public static ServiceStatus Upgrading;
    public static ServiceStatus Deleting;
    public static ServiceStatus Creating;
    public static ServiceStatus Failed;
    public static ServiceStatus Disabling;
    public static ServiceStatus Disabled;
}
public class System.Fabric.Query.ServiceType : object {
    [CompilerGeneratedAttribute]
private ServiceTypeDescription <ServiceTypeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsServiceGroup>k__BackingField;
    public ServiceTypeDescription ServiceTypeDescription { get; private set; }
    public string ServiceManifestVersion { get; private set; }
    public string ServiceManifestName { get; private set; }
    public bool IsServiceGroup { get; private set; }
    internal ServiceType(ServiceTypeDescription serviceTypeDescription, string serviceManifestVersion, string serviceManifestName, bool isServiceGroup);
    [CompilerGeneratedAttribute]
public ServiceTypeDescription get_ServiceTypeDescription();
    [CompilerGeneratedAttribute]
private void set_ServiceTypeDescription(ServiceTypeDescription value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestVersion();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsServiceGroup();
    [CompilerGeneratedAttribute]
private void set_IsServiceGroup(bool value);
    internal static ServiceType CreateFromNative(FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM nativeResultItem);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.ServiceTypeList : object {
    private IList`1<ServiceType> list;
    public ServiceType Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ServiceTypeList(IList`1<ServiceType> list);
    public sealed virtual int IndexOf(ServiceType item);
    public sealed virtual void Insert(int index, ServiceType item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ServiceType get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceType value);
    public sealed virtual void Add(ServiceType item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceType item);
    public sealed virtual void CopyTo(ServiceType[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ServiceType item);
    public sealed virtual IEnumerator`1<ServiceType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static ServiceTypeList CreateFromNativeListResult(IFabricGetServiceTypeListResult result);
    internal static ServiceTypeList CreateFromNativeList(FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST* nativeList);
}
public enum System.Fabric.Query.ServiceTypeRegistrationStatus : Enum {
    public int value__;
    public static ServiceTypeRegistrationStatus Invalid;
    public static ServiceTypeRegistrationStatus Disabled;
    public static ServiceTypeRegistrationStatus NotRegistered;
    public static ServiceTypeRegistrationStatus Registered;
}
public class System.Fabric.Query.StatefulService : Service {
    [CompilerGeneratedAttribute]
private bool <HasPersistedState>k__BackingField;
    public bool HasPersistedState { get; private set; }
    internal StatefulService(Uri serviceName, string serviceTypeName, string serviceManifestVersion, bool hasPersistedState, HealthState healthState, ServiceStatus serviceStatus, ServiceMetadata serviceMetadata, bool isServiceGroup);
    [CompilerGeneratedAttribute]
public bool get_HasPersistedState();
    [CompilerGeneratedAttribute]
private void set_HasPersistedState(bool value);
    internal static StatefulService FromNative(FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM nativeStatefulServiceQueryResult);
}
public class System.Fabric.Query.StatefulServicePartition : Partition {
    [CompilerGeneratedAttribute]
private long <TargetReplicaSetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinReplicaSetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <AuxiliaryReplicaCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LastQuorumLossDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Epoch <PrimaryEpoch>k__BackingField;
    public long TargetReplicaSetSize { get; private set; }
    public long MinReplicaSetSize { get; private set; }
    [JsonCustomizationAttribute]
public Nullable`1<long> AuxiliaryReplicaCount { get; private set; }
    [JsonCustomizationAttribute]
public TimeSpan LastQuorumLossDuration { get; private set; }
    private long LastQuorumLossDurationInSeconds { get; private set; }
    [JsonCustomizationAttribute]
public Epoch PrimaryEpoch { get; private set; }
    internal StatefulServicePartition(ServicePartitionInformation partitionInformation, long targetReplicaSetSize, long minReplicaSetSize, HealthState healthState, ServicePartitionStatus partitionStatus, TimeSpan lastQuorumLossDuration, Epoch primaryEpoch, Nullable`1<long> auxiliaryReplicaCount);
    [CompilerGeneratedAttribute]
public long get_TargetReplicaSetSize();
    [CompilerGeneratedAttribute]
private void set_TargetReplicaSetSize(long value);
    [CompilerGeneratedAttribute]
public long get_MinReplicaSetSize();
    [CompilerGeneratedAttribute]
private void set_MinReplicaSetSize(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_AuxiliaryReplicaCount();
    [CompilerGeneratedAttribute]
private void set_AuxiliaryReplicaCount(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LastQuorumLossDuration();
    [CompilerGeneratedAttribute]
private void set_LastQuorumLossDuration(TimeSpan value);
    private long get_LastQuorumLossDurationInSeconds();
    private void set_LastQuorumLossDurationInSeconds(long value);
    [CompilerGeneratedAttribute]
public Epoch get_PrimaryEpoch();
    [CompilerGeneratedAttribute]
private void set_PrimaryEpoch(Epoch value);
    internal static StatefulServicePartition FromNative(FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM statefulPartitionResultItem);
}
public class System.Fabric.Query.StatefulServiceReplica : Replica {
    [CompilerGeneratedAttribute]
private ReplicaRole <ReplicaRole>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaRole <PreviousReplicaRole>k__BackingField;
    public ReplicaRole ReplicaRole { get; private set; }
    public ReplicaRole PreviousReplicaRole { get; private set; }
    internal long ReplicaId { get; private set; }
    internal StatefulServiceReplica(ServiceReplicaStatus replicaStatus, HealthState healthState, ReplicaRole replicaRole, string replicaAddress, string nodeName, long replicaId, TimeSpan lastInBuildDuration, ReplicaRole previousReplicaRole);
    [CompilerGeneratedAttribute]
public ReplicaRole get_ReplicaRole();
    [CompilerGeneratedAttribute]
private void set_ReplicaRole(ReplicaRole value);
    [CompilerGeneratedAttribute]
public ReplicaRole get_PreviousReplicaRole();
    [CompilerGeneratedAttribute]
private void set_PreviousReplicaRole(ReplicaRole value);
    internal long get_ReplicaId();
    private void set_ReplicaId(long value);
    internal static StatefulServiceReplica FromNative(FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM statefulReplicaResultItem);
}
public class System.Fabric.Query.StatelessService : Service {
    internal StatelessService(Uri serviceName, string serviceTypeName, string serviceManifestVersion, HealthState healthState, ServiceStatus serviceStatus, ServiceMetadata serviceMetadata, bool isServiceGroup);
    internal static StatelessService FromNative(FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM nativeStatelessServiceQueryResult);
}
public class System.Fabric.Query.StatelessServiceInstance : Replica {
    internal long InstanceId { get; private set; }
    internal StatelessServiceInstance(ServiceReplicaStatus replicaStatus, HealthState healthState, string replicaAddress, string nodeName, long instanceId, TimeSpan lastInBuildDuration);
    internal long get_InstanceId();
    private void set_InstanceId(long value);
    internal static StatelessServiceInstance FromNative(FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM statelessInstanceResultItem);
}
public class System.Fabric.Query.StatelessServicePartition : Partition {
    [CompilerGeneratedAttribute]
private long <InstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinInstanceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinInstancePercentage>k__BackingField;
    public long InstanceCount { get; private set; }
    public int MinInstanceCount { get; public set; }
    public int MinInstancePercentage { get; public set; }
    internal StatelessServicePartition(ServicePartitionInformation partitionInformation, long instanceCount, HealthState healthState, ServicePartitionStatus partitionStatus);
    [CompilerGeneratedAttribute]
public long get_InstanceCount();
    [CompilerGeneratedAttribute]
private void set_InstanceCount(long value);
    [CompilerGeneratedAttribute]
public int get_MinInstanceCount();
    [CompilerGeneratedAttribute]
public void set_MinInstanceCount(int value);
    [CompilerGeneratedAttribute]
public int get_MinInstancePercentage();
    [CompilerGeneratedAttribute]
public void set_MinInstancePercentage(int value);
    internal static StatelessServicePartition FromNative(FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM statelessPartitionResultItem);
}
internal class System.Fabric.Query.TestCommandQueryResult : object {
    [CompilerGeneratedAttribute]
private List`1<TestCommandStatus> <Items>k__BackingField;
    private IntPtr nativeResult;
    private PinCollection pinCollection;
    private bool disposed;
    public List`1<TestCommandStatus> Items { get; private set; }
    public TestCommandQueryResult(List`1<TestCommandStatus> input);
    [CompilerGeneratedAttribute]
public List`1<TestCommandStatus> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(List`1<TestCommandStatus> value);
    public sealed virtual IntPtr get_Result();
    public sealed virtual void Dispose();
}
[FlagsAttribute]
public enum System.Fabric.Query.TestCommandStateFilter : Enum {
    public int value__;
    public static TestCommandStateFilter Default;
    public static TestCommandStateFilter All;
    public static TestCommandStateFilter Running;
    public static TestCommandStateFilter RollingBack;
    public static TestCommandStateFilter CompletedSuccessfully;
    public static TestCommandStateFilter Failed;
    public static TestCommandStateFilter Cancelled;
    public static TestCommandStateFilter ForceCancelled;
}
public class System.Fabric.Query.TestCommandStatus : object {
    private Guid operationId;
    private TestCommandProgressState state;
    private TestCommandType type;
    public Guid OperationId { get; internal set; }
    public TestCommandProgressState State { get; internal set; }
    [JsonCustomizationAttribute]
public TestCommandType TestCommandType { get; internal set; }
    internal TestCommandStatus(Guid operationId, TestCommandProgressState actionState, TestCommandType actionType);
    public Guid get_OperationId();
    internal void set_OperationId(Guid value);
    public TestCommandProgressState get_State();
    internal void set_State(TestCommandProgressState value);
    public TestCommandType get_TestCommandType();
    internal void set_TestCommandType(TestCommandType value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Query.TestCommandStatusList : object {
    private IList`1<TestCommandStatus> list;
    public TestCommandStatus Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal TestCommandStatusList(IList`1<TestCommandStatus> input);
    public sealed virtual int IndexOf(TestCommandStatus item);
    public sealed virtual void Insert(int index, TestCommandStatus item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TestCommandStatus get_Item(int index);
    public sealed virtual void set_Item(int index, TestCommandStatus value);
    public sealed virtual void Add(TestCommandStatus item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TestCommandStatus item);
    public sealed virtual void CopyTo(TestCommandStatus[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(TestCommandStatus item);
    public sealed virtual IEnumerator`1<TestCommandStatus> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
public enum System.Fabric.Query.TestCommandTypeFilter : Enum {
    public int value__;
    public static TestCommandTypeFilter Default;
    public static TestCommandTypeFilter All;
    public static TestCommandTypeFilter PartitionDataLoss;
    public static TestCommandTypeFilter PartitionQuorumLoss;
    public static TestCommandTypeFilter PartitionRestart;
    public static TestCommandTypeFilter NodeTransition;
}
public class System.Fabric.Query.UnplacedReplicaInformation : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <UnplacedReplicaReasons>k__BackingField;
    public string ServiceName { get; private set; }
    public Guid PartitionId { get; private set; }
    public IList`1<string> UnplacedReplicaReasons { get; private set; }
    public UnplacedReplicaInformation(string serviceName, Guid partitionId, IList`1<string> reasonsList);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
private void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_UnplacedReplicaReasons();
    [CompilerGeneratedAttribute]
private void set_UnplacedReplicaReasons(IList`1<string> value);
    internal static UnplacedReplicaInformation CreateFromNative(IFabricGetUnplacedReplicaInformationResult nativeResult);
    internal static UnplacedReplicaInformation CreateFromNative(FABRIC_UNPLACED_REPLICA_INFORMATION nativeUnplacedReplicaInformation);
}
public class System.Fabric.Query.UpdatePartitionLoadResult : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PartitionErrorCode>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public int PartitionErrorCode { get; internal set; }
    internal UpdatePartitionLoadResult(Guid partitionId, int partitionErrorCode);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public int get_PartitionErrorCode();
    [CompilerGeneratedAttribute]
internal void set_PartitionErrorCode(int value);
    internal static UpdatePartitionLoadResult CreateFromNative(FABRIC_UPDATE_PARTITION_LOAD_QUERY_RESULT_ITEM nativeParameter);
}
public class System.Fabric.Query.UpdatePartitionLoadResultList : PagedList`1<UpdatePartitionLoadResult> {
    internal UpdatePartitionLoadResultList(IList`1<UpdatePartitionLoadResult> list);
    internal static UpdatePartitionLoadResultList CreateFromNative(IFabricUpdatePartitionLoadResult nativeResult);
    internal static UpdatePartitionLoadResultList CreateFromNativeList(FABRIC_UPDATE_PARTITION_LOAD_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.UpdatePartitionMoveCostResult : object {
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PartitionErrorCode>k__BackingField;
    public Guid PartitionId { get; internal set; }
    public int PartitionErrorCode { get; internal set; }
    internal UpdatePartitionMoveCostResult(Guid partitionId, int partitionErrorCode);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public int get_PartitionErrorCode();
    [CompilerGeneratedAttribute]
internal void set_PartitionErrorCode(int value);
    internal static UpdatePartitionMoveCostResult CreateFromNative(FABRIC_UPDATE_PARTITION_MOVE_COST_QUERY_RESULT_ITEM nativeParameter);
}
public class System.Fabric.Query.UpdatePartitionMoveCostResultList : PagedList`1<UpdatePartitionMoveCostResult> {
    internal UpdatePartitionMoveCostResultList(IList`1<UpdatePartitionMoveCostResult> list);
    internal static UpdatePartitionMoveCostResultList CreateFromNative(IFabricUpdatePartitionMoveCostResult nativeResult);
    internal static UpdatePartitionMoveCostResultList CreateFromNativeList(FABRIC_UPDATE_PARTITION_MOVE_COST_QUERY_RESULT_LIST* nativeList, FABRIC_PAGING_STATUS* nativePagingStatus);
}
public class System.Fabric.Query.UploadChunkRange : object {
    [CompilerGeneratedAttribute]
private long <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndPosition>k__BackingField;
    public long StartPosition { get; private set; }
    public long EndPosition { get; private set; }
    internal UploadChunkRange(long startPosition, long endPosition);
    [CompilerGeneratedAttribute]
public long get_StartPosition();
    [CompilerGeneratedAttribute]
private void set_StartPosition(long value);
    [CompilerGeneratedAttribute]
public long get_EndPosition();
    [CompilerGeneratedAttribute]
private void set_EndPosition(long value);
}
public class System.Fabric.Query.UploadSession : object {
    [CompilerGeneratedAttribute]
private UploadSessionInfo[] <UploadSessions>k__BackingField;
    public UploadSessionInfo[] UploadSessions { get; private set; }
    internal UploadSession(UploadSessionInfo[] uploadSessions);
    [CompilerGeneratedAttribute]
public UploadSessionInfo[] get_UploadSessions();
    [CompilerGeneratedAttribute]
private void set_UploadSessions(UploadSessionInfo[] value);
}
public class System.Fabric.Query.UploadSessionInfo : object {
    [CompilerGeneratedAttribute]
private string <StoreRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UploadChunkRange[] <ExpectedRanges>k__BackingField;
    public string StoreRelativePath { get; private set; }
    public Guid SessionId { get; private set; }
    public DateTime ModifiedDate { get; private set; }
    public long FileSize { get; private set; }
    public UploadChunkRange[] ExpectedRanges { get; private set; }
    internal UploadSessionInfo(string storeRelativePath, Guid sessionId, DateTime modifiedDate, long fileSize, UploadChunkRange[] expectedRange);
    [CompilerGeneratedAttribute]
public string get_StoreRelativePath();
    [CompilerGeneratedAttribute]
private void set_StoreRelativePath(string value);
    [CompilerGeneratedAttribute]
public Guid get_SessionId();
    [CompilerGeneratedAttribute]
private void set_SessionId(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
private void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public long get_FileSize();
    [CompilerGeneratedAttribute]
private void set_FileSize(long value);
    [CompilerGeneratedAttribute]
public UploadChunkRange[] get_ExpectedRanges();
    [CompilerGeneratedAttribute]
private void set_ExpectedRanges(UploadChunkRange[] value);
}
public enum System.Fabric.QuorumLossMode : Enum {
    public int value__;
    public static QuorumLossMode Invalid;
    public static QuorumLossMode QuorumReplicas;
    public static QuorumLossMode AllReplicas;
}
internal class System.Fabric.ReadOnlyOperationData : object {
    private IFabricOperationData nativeOperationData;
    internal IFabricOperationData NativeOperationData { get; }
    internal ReadOnlyOperationData(IFabricOperationData operationData);
    internal IFabricOperationData get_NativeOperationData();
    [IteratorStateMachineAttribute("System.Fabric.ReadOnlyOperationData/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<ArraySegment`1<byte>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static ArraySegment`1<byte> GetSegment(IntPtr buffer, int index);
}
public class System.Fabric.ReconfigurationInformation : object {
    [CompilerGeneratedAttribute]
private ReplicaRole <PreviousConfigurationRole>k__BackingField;
    [CompilerGeneratedAttribute]
private ReconfigurationPhase <ReconfigurationPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private ReconfigurationType <ReconfigurationType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ReconfigurationStartTimeUtc>k__BackingField;
    public ReplicaRole PreviousConfigurationRole { get; internal set; }
    public ReconfigurationPhase ReconfigurationPhase { get; private set; }
    public ReconfigurationType ReconfigurationType { get; private set; }
    public DateTime ReconfigurationStartTimeUtc { get; private set; }
    public ReconfigurationInformation(ReplicaRole previousConfigurationRole, ReconfigurationPhase reconfigurationPhase, ReconfigurationType reconfigurationType, DateTime reconfigurationStartTimeUtc);
    [CompilerGeneratedAttribute]
public ReplicaRole get_PreviousConfigurationRole();
    [CompilerGeneratedAttribute]
internal void set_PreviousConfigurationRole(ReplicaRole value);
    [CompilerGeneratedAttribute]
public ReconfigurationPhase get_ReconfigurationPhase();
    [CompilerGeneratedAttribute]
private void set_ReconfigurationPhase(ReconfigurationPhase value);
    [CompilerGeneratedAttribute]
public ReconfigurationType get_ReconfigurationType();
    [CompilerGeneratedAttribute]
private void set_ReconfigurationType(ReconfigurationType value);
    [CompilerGeneratedAttribute]
public DateTime get_ReconfigurationStartTimeUtc();
    [CompilerGeneratedAttribute]
private void set_ReconfigurationStartTimeUtc(DateTime value);
}
public enum System.Fabric.ReconfigurationPhase : Enum {
    public int value__;
    public static ReconfigurationPhase Unknown;
    public static ReconfigurationPhase None;
    public static ReconfigurationPhase Phase0;
    public static ReconfigurationPhase Phase1;
    public static ReconfigurationPhase Phase2;
    public static ReconfigurationPhase Phase3;
    public static ReconfigurationPhase Phase4;
    public static ReconfigurationPhase AbortPhaseZero;
}
public enum System.Fabric.ReconfigurationType : Enum {
    public int value__;
    public static ReconfigurationType Unknown;
    public static ReconfigurationType SwapPrimary;
    public static ReconfigurationType Failover;
    public static ReconfigurationType Other;
    public static ReconfigurationType None;
}
internal class System.Fabric.Repair.ClusterRepairScopeIdentifier : RepairScopeIdentifier {
    internal static ClusterRepairScopeIdentifier CreateFromNative(IntPtr nativeDescriptionPtr);
    public virtual string ToString();
}
public class System.Fabric.Repair.ClusterRepairTask : RepairTask {
    public ClusterRepairTask(string taskId, string action);
}
public class System.Fabric.Repair.NodeImpact : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeImpactLevel <ImpactLevel>k__BackingField;
    public string NodeName { get; public set; }
    public NodeImpactLevel ImpactLevel { get; public set; }
    public NodeImpact(string nodeName, NodeImpactLevel impactLevel);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public NodeImpactLevel get_ImpactLevel();
    [CompilerGeneratedAttribute]
public void set_ImpactLevel(NodeImpactLevel value);
    internal static NodeImpact CreateFromNative(FABRIC_REPAIR_NODE_IMPACT nativeImpact);
    public virtual string ToString();
}
public enum System.Fabric.Repair.NodeImpactLevel : Enum {
    public int value__;
    public static NodeImpactLevel Invalid;
    public static NodeImpactLevel None;
    public static NodeImpactLevel Restart;
    public static NodeImpactLevel RemoveData;
    public static NodeImpactLevel RemoveNode;
    public static NodeImpactLevel Pause;
}
public class System.Fabric.Repair.NodeRepairImpactDescription : RepairImpactDescription {
    [CompilerGeneratedAttribute]
private IList`1<NodeImpact> <ImpactedNodes>k__BackingField;
    public IList`1<NodeImpact> ImpactedNodes { get; private set; }
    private NodeRepairImpactDescription(IList`1<NodeImpact> impactedNodes);
    [CompilerGeneratedAttribute]
public IList`1<NodeImpact> get_ImpactedNodes();
    [CompilerGeneratedAttribute]
private void set_ImpactedNodes(IList`1<NodeImpact> value);
    internal static NodeRepairImpactDescription CreateFromNative(IntPtr nativeDescriptionPtr);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    public virtual string ToString();
}
public class System.Fabric.Repair.NodeRepairTargetDescription : RepairTargetDescription {
    [CompilerGeneratedAttribute]
private IList`1<string> <Nodes>k__BackingField;
    public IList`1<string> Nodes { get; private set; }
    public NodeRepairTargetDescription(string nodeName);
    public NodeRepairTargetDescription(IEnumerable`1<string> nodeNames);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Nodes();
    [CompilerGeneratedAttribute]
private void set_Nodes(IList`1<string> value);
    internal static NodeRepairTargetDescription CreateFromNative(IntPtr nativeDescriptionPtr);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    public virtual string ToString();
}
public class System.Fabric.Repair.RepairImpactDescription : object {
    [CompilerGeneratedAttribute]
private RepairImpactKind <Kind>k__BackingField;
    public RepairImpactKind Kind { get; private set; }
    internal RepairImpactDescription(RepairImpactKind kind);
    [CompilerGeneratedAttribute]
public RepairImpactKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(RepairImpactKind value);
    internal static RepairImpactDescription CreateFromNative(IntPtr nativeDescriptionPtr);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Repair.RepairImpactKind : Enum {
    public int value__;
    public static RepairImpactKind Invalid;
    public static RepairImpactKind Node;
}
public class System.Fabric.Repair.RepairScopeIdentifier : object {
    [CompilerGeneratedAttribute]
private RepairScopeIdentifierKind <Kind>k__BackingField;
    public RepairScopeIdentifierKind Kind { get; private set; }
    internal RepairScopeIdentifier(RepairScopeIdentifierKind kind);
    [CompilerGeneratedAttribute]
public RepairScopeIdentifierKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(RepairScopeIdentifierKind value);
    internal static RepairScopeIdentifier CreateFromNative(IntPtr nativeDescriptionPtr);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Repair.RepairScopeIdentifierKind : Enum {
    public int value__;
    public static RepairScopeIdentifierKind Invalid;
    public static RepairScopeIdentifierKind Cluster;
}
public class System.Fabric.Repair.RepairTargetDescription : object {
    [CompilerGeneratedAttribute]
private RepairTargetKind <Kind>k__BackingField;
    public RepairTargetKind Kind { get; private set; }
    internal RepairTargetDescription(RepairTargetKind kind);
    [CompilerGeneratedAttribute]
public RepairTargetKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(RepairTargetKind value);
    internal static RepairTargetDescription CreateFromNative(IntPtr nativeDescriptionPtr);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public enum System.Fabric.Repair.RepairTargetKind : Enum {
    public int value__;
    public static RepairTargetKind Invalid;
    public static RepairTargetKind Node;
}
public class System.Fabric.Repair.RepairTask : object {
    [CompilerGeneratedAttribute]
private RepairScopeIdentifier <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairTaskState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairTaskFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairTargetDescription <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Executor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutorData>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairImpactDescription <Impact>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairTaskResult <ResultStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ClaimedTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <PreparingTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ApprovedTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExecutingTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RestoringTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CompletedTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <PreparingHealthCheckStartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <PreparingHealthCheckEndTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RestoringHealthCheckStartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RestoringHealthCheckEndTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairTaskHealthCheckState <PreparingHealthCheckState>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairTaskHealthCheckState <RestoringHealthCheckState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformPreparingHealthCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformRestoringHealthCheck>k__BackingField;
    public RepairScopeIdentifier Scope { get; private set; }
    public string TaskId { get; private set; }
    public long Version { get; public set; }
    public string Description { get; public set; }
    public RepairTaskState State { get; public set; }
    public RepairTaskFlags Flags { get; private set; }
    public string Action { get; private set; }
    public RepairTargetDescription Target { get; public set; }
    public string Executor { get; public set; }
    public string ExecutorData { get; public set; }
    public RepairImpactDescription Impact { get; public set; }
    public RepairTaskResult ResultStatus { get; public set; }
    public int ResultCode { get; public set; }
    public string ResultDetails { get; public set; }
    public Nullable`1<DateTime> CreatedTimestamp { get; private set; }
    public Nullable`1<DateTime> ClaimedTimestamp { get; private set; }
    public Nullable`1<DateTime> PreparingTimestamp { get; private set; }
    public Nullable`1<DateTime> ApprovedTimestamp { get; private set; }
    public Nullable`1<DateTime> ExecutingTimestamp { get; private set; }
    public Nullable`1<DateTime> RestoringTimestamp { get; private set; }
    public Nullable`1<DateTime> CompletedTimestamp { get; private set; }
    public Nullable`1<DateTime> PreparingHealthCheckStartTimestamp { get; private set; }
    public Nullable`1<DateTime> PreparingHealthCheckEndTimestamp { get; private set; }
    public Nullable`1<DateTime> RestoringHealthCheckStartTimestamp { get; private set; }
    public Nullable`1<DateTime> RestoringHealthCheckEndTimestamp { get; private set; }
    public RepairTaskHealthCheckState PreparingHealthCheckState { get; private set; }
    public RepairTaskHealthCheckState RestoringHealthCheckState { get; private set; }
    public bool PerformPreparingHealthCheck { get; public set; }
    public bool PerformRestoringHealthCheck { get; public set; }
    internal RepairTask(RepairScopeIdentifier scope);
    internal RepairTask(RepairScopeIdentifier scope, string taskId, string action);
    [CompilerGeneratedAttribute]
public RepairScopeIdentifier get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(RepairScopeIdentifier value);
    [CompilerGeneratedAttribute]
public string get_TaskId();
    [CompilerGeneratedAttribute]
private void set_TaskId(string value);
    [CompilerGeneratedAttribute]
public long get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(long value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public RepairTaskState get_State();
    [CompilerGeneratedAttribute]
public void set_State(RepairTaskState value);
    [CompilerGeneratedAttribute]
public RepairTaskFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(RepairTaskFlags value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public RepairTargetDescription get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(RepairTargetDescription value);
    [CompilerGeneratedAttribute]
public string get_Executor();
    [CompilerGeneratedAttribute]
public void set_Executor(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutorData();
    [CompilerGeneratedAttribute]
public void set_ExecutorData(string value);
    [CompilerGeneratedAttribute]
public RepairImpactDescription get_Impact();
    [CompilerGeneratedAttribute]
public void set_Impact(RepairImpactDescription value);
    [CompilerGeneratedAttribute]
public RepairTaskResult get_ResultStatus();
    [CompilerGeneratedAttribute]
public void set_ResultStatus(RepairTaskResult value);
    [CompilerGeneratedAttribute]
public int get_ResultCode();
    [CompilerGeneratedAttribute]
public void set_ResultCode(int value);
    [CompilerGeneratedAttribute]
public string get_ResultDetails();
    [CompilerGeneratedAttribute]
public void set_ResultDetails(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedTimestamp();
    [CompilerGeneratedAttribute]
private void set_CreatedTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ClaimedTimestamp();
    [CompilerGeneratedAttribute]
private void set_ClaimedTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_PreparingTimestamp();
    [CompilerGeneratedAttribute]
private void set_PreparingTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ApprovedTimestamp();
    [CompilerGeneratedAttribute]
private void set_ApprovedTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExecutingTimestamp();
    [CompilerGeneratedAttribute]
private void set_ExecutingTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_RestoringTimestamp();
    [CompilerGeneratedAttribute]
private void set_RestoringTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CompletedTimestamp();
    [CompilerGeneratedAttribute]
private void set_CompletedTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_PreparingHealthCheckStartTimestamp();
    [CompilerGeneratedAttribute]
private void set_PreparingHealthCheckStartTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_PreparingHealthCheckEndTimestamp();
    [CompilerGeneratedAttribute]
private void set_PreparingHealthCheckEndTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_RestoringHealthCheckStartTimestamp();
    [CompilerGeneratedAttribute]
private void set_RestoringHealthCheckStartTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_RestoringHealthCheckEndTimestamp();
    [CompilerGeneratedAttribute]
private void set_RestoringHealthCheckEndTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public RepairTaskHealthCheckState get_PreparingHealthCheckState();
    [CompilerGeneratedAttribute]
private void set_PreparingHealthCheckState(RepairTaskHealthCheckState value);
    [CompilerGeneratedAttribute]
public RepairTaskHealthCheckState get_RestoringHealthCheckState();
    [CompilerGeneratedAttribute]
private void set_RestoringHealthCheckState(RepairTaskHealthCheckState value);
    [CompilerGeneratedAttribute]
public bool get_PerformPreparingHealthCheck();
    [CompilerGeneratedAttribute]
public void set_PerformPreparingHealthCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_PerformRestoringHealthCheck();
    [CompilerGeneratedAttribute]
public void set_PerformRestoringHealthCheck(bool value);
    internal IntPtr ToNative(PinCollection pinCollection);
    private static RepairTask CreateFromScope(RepairScopeIdentifier scope);
    internal static RepairTask FromNative(FABRIC_REPAIR_TASK* casted);
}
[FlagsAttribute]
public enum System.Fabric.Repair.RepairTaskFlags : Enum {
    public int value__;
    public static RepairTaskFlags None;
    public static RepairTaskFlags CancelRequested;
    public static RepairTaskFlags AbortRequested;
    public static RepairTaskFlags ForcedApproval;
    public static RepairTaskFlags ValidMask;
}
public enum System.Fabric.Repair.RepairTaskHealthCheckState : Enum {
    public int value__;
    public static RepairTaskHealthCheckState NotStarted;
    public static RepairTaskHealthCheckState InProgress;
    public static RepairTaskHealthCheckState Succeeded;
    public static RepairTaskHealthCheckState Skipped;
    public static RepairTaskHealthCheckState TimedOut;
}
internal class System.Fabric.Repair.RepairTaskHealthPolicyUpdateDescription : object {
    [CompilerGeneratedAttribute]
private RepairScopeIdentifier <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PerformPreparingHealthCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PerformRestoringHealthCheck>k__BackingField;
    public RepairScopeIdentifier Scope { get; public set; }
    public string TaskId { get; public set; }
    public long Version { get; public set; }
    public Nullable`1<bool> PerformPreparingHealthCheck { get; public set; }
    public Nullable`1<bool> PerformRestoringHealthCheck { get; public set; }
    internal RepairTaskHealthPolicyUpdateDescription(RepairScopeIdentifier scope, string taskId, long version, Nullable`1<bool> performPreparingHealthCheck, Nullable`1<bool> performRestoringHealthCheck);
    [CompilerGeneratedAttribute]
public RepairScopeIdentifier get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(RepairScopeIdentifier value);
    [CompilerGeneratedAttribute]
public string get_TaskId();
    [CompilerGeneratedAttribute]
public void set_TaskId(string value);
    [CompilerGeneratedAttribute]
public long get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PerformPreparingHealthCheck();
    [CompilerGeneratedAttribute]
public void set_PerformPreparingHealthCheck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PerformRestoringHealthCheck();
    [CompilerGeneratedAttribute]
public void set_PerformRestoringHealthCheck(Nullable`1<bool> value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
[DefaultMemberAttribute("Item")]
public class System.Fabric.Repair.RepairTaskList : object {
    private IList`1<RepairTask> list;
    public RepairTask Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal RepairTaskList(IList`1<RepairTask> list);
    public sealed virtual int IndexOf(RepairTask item);
    public sealed virtual void Insert(int index, RepairTask item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual RepairTask get_Item(int index);
    public sealed virtual void set_Item(int index, RepairTask value);
    public sealed virtual void Add(RepairTask item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(RepairTask item);
    public sealed virtual void CopyTo(RepairTask[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(RepairTask item);
    public sealed virtual IEnumerator`1<RepairTask> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static RepairTaskList CreateFromNativeListResult(IFabricGetRepairTaskListResult result);
    internal static RepairTaskList CreateFromNativeList(FABRIC_REPAIR_TASK_LIST* nativeList);
}
internal class System.Fabric.Repair.RepairTaskQueryDescription : object {
    [CompilerGeneratedAttribute]
private RepairScopeIdentifier <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskIdFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private RepairTaskStateFilter <StateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutorFilter>k__BackingField;
    public RepairScopeIdentifier Scope { get; public set; }
    public string TaskIdFilter { get; public set; }
    public RepairTaskStateFilter StateFilter { get; public set; }
    public string ExecutorFilter { get; public set; }
    internal RepairTaskQueryDescription(RepairScopeIdentifier scope, string taskIdFilter, RepairTaskStateFilter stateFilter, string executorFilter);
    [CompilerGeneratedAttribute]
public RepairScopeIdentifier get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(RepairScopeIdentifier value);
    [CompilerGeneratedAttribute]
public string get_TaskIdFilter();
    [CompilerGeneratedAttribute]
public void set_TaskIdFilter(string value);
    [CompilerGeneratedAttribute]
public RepairTaskStateFilter get_StateFilter();
    [CompilerGeneratedAttribute]
public void set_StateFilter(RepairTaskStateFilter value);
    [CompilerGeneratedAttribute]
public string get_ExecutorFilter();
    [CompilerGeneratedAttribute]
public void set_ExecutorFilter(string value);
    internal IntPtr ToNative(PinCollection pinCollection);
}
[FlagsAttribute]
public enum System.Fabric.Repair.RepairTaskResult : Enum {
    public int value__;
    public static RepairTaskResult Invalid;
    public static RepairTaskResult Succeeded;
    public static RepairTaskResult Cancelled;
    public static RepairTaskResult Interrupted;
    public static RepairTaskResult Failed;
    public static RepairTaskResult Pending;
}
public enum System.Fabric.Repair.RepairTaskState : Enum {
    public int value__;
    public static RepairTaskState Invalid;
    public static RepairTaskState Created;
    public static RepairTaskState Claimed;
    public static RepairTaskState Preparing;
    public static RepairTaskState Approved;
    public static RepairTaskState Executing;
    public static RepairTaskState Restoring;
    public static RepairTaskState Completed;
}
[FlagsAttribute]
public enum System.Fabric.Repair.RepairTaskStateFilter : Enum {
    public int value__;
    public static RepairTaskStateFilter Default;
    public static RepairTaskStateFilter Created;
    public static RepairTaskStateFilter Claimed;
    public static RepairTaskStateFilter Preparing;
    public static RepairTaskStateFilter Approved;
    public static RepairTaskStateFilter Executing;
    public static RepairTaskStateFilter Restoring;
    public static RepairTaskStateFilter Completed;
    public static RepairTaskStateFilter ReadyToExecute;
    public static RepairTaskStateFilter Active;
    public static RepairTaskStateFilter All;
}
public enum System.Fabric.Repair.SystemNodeRepairAction : Enum {
    public int value__;
    public static SystemNodeRepairAction Reboot;
    public static SystemNodeRepairAction ReimageOS;
    public static SystemNodeRepairAction FullReimage;
}
internal static class System.Fabric.Repair.SystemRepairActionHelper : object {
    public static string ManualRepairAction;
    public static string GetActionString(SystemNodeRepairAction action);
}
public class System.Fabric.ReplicaInformation : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaRole <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CatchUpCapability>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MustCatchup>k__BackingField;
    public long Id { get; private set; }
    public ReplicaRole Role { get; private set; }
    public ReplicaStatus Status { get; private set; }
    public string ReplicatorAddress { get; private set; }
    public long CatchUpCapability { get; private set; }
    public long CurrentProgress { get; private set; }
    public bool MustCatchup { get; private set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public ReplicaRole get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(ReplicaRole value);
    [CompilerGeneratedAttribute]
public ReplicaStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ReplicaStatus value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorAddress();
    [CompilerGeneratedAttribute]
private void set_ReplicatorAddress(string value);
    [CompilerGeneratedAttribute]
public long get_CatchUpCapability();
    [CompilerGeneratedAttribute]
private void set_CatchUpCapability(long value);
    [CompilerGeneratedAttribute]
public long get_CurrentProgress();
    [CompilerGeneratedAttribute]
private void set_CurrentProgress(long value);
    [CompilerGeneratedAttribute]
public bool get_MustCatchup();
    [CompilerGeneratedAttribute]
private void set_MustCatchup(bool value);
    internal static ReplicaInformation[] FromNativeArray(UInt32 replicaCount, IntPtr replicaInfosIntPtr);
    internal static ReplicaInformation FromNative(IntPtr replicaInfoIntPtr);
    internal void ToNative(PinCollection pin, FABRIC_REPLICA_INFORMATION& native);
}
public enum System.Fabric.ReplicaOpenMode : Enum {
    public int value__;
    public static ReplicaOpenMode Invalid;
    public static ReplicaOpenMode New;
    public static ReplicaOpenMode Existing;
}
public enum System.Fabric.ReplicaRole : Enum {
    public int value__;
    public static ReplicaRole Unknown;
    public static ReplicaRole None;
    public static ReplicaRole Primary;
    public static ReplicaRole IdleSecondary;
    public static ReplicaRole ActiveSecondary;
    public static ReplicaRole IdleAuxiliary;
    public static ReplicaRole ActiveAuxiliary;
    public static ReplicaRole PrimaryAuxiliary;
}
public class System.Fabric.ReplicaSelector : object {
    private static string ReplicaKind;
    private static string ReplicaKindPrimary;
    private static string ReplicaKindRandomSecondary;
    private static string ReplicaOrInstanceIdParameter;
    private long replicaOrInstanceId;
    private PartitionSelector partitionSelector;
    private ReplicaSelectorType selectorType;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PowershellParameters>k__BackingField;
    internal Dictionary`2<string, string> PowershellParameters { get; private set; }
    public PartitionSelector PartitionSelector { get; }
    private ReplicaSelector(PartitionSelector partitionSelector, ReplicaSelectorType selectorType, long replicaOrInstanceId);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_PowershellParameters();
    [CompilerGeneratedAttribute]
private void set_PowershellParameters(Dictionary`2<string, string> value);
    public PartitionSelector get_PartitionSelector();
    public static ReplicaSelector RandomOf(PartitionSelector partitionSelector);
    public static ReplicaSelector PrimaryOf(PartitionSelector partitionSelector);
    public static ReplicaSelector RandomSecondaryOf(PartitionSelector partitionSelector);
    public static ReplicaSelector ReplicaIdOf(PartitionSelector partitionSelector, long replicaOrInstanceId);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal Replica GetSelectedReplica(Replica[] results, Random random, bool skipReplicasNotUp);
    private bool IsInvalidReplica(ServiceReplicaStatus status);
}
public class System.Fabric.ReplicaSetConfiguration : object {
    [CompilerGeneratedAttribute]
private long <WriteQuorum>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicaInformation> <Replicas>k__BackingField;
    public long WriteQuorum { get; private set; }
    public IList`1<ReplicaInformation> Replicas { get; private set; }
    [CompilerGeneratedAttribute]
public long get_WriteQuorum();
    [CompilerGeneratedAttribute]
private void set_WriteQuorum(long value);
    [CompilerGeneratedAttribute]
public IList`1<ReplicaInformation> get_Replicas();
    [CompilerGeneratedAttribute]
private void set_Replicas(IList`1<ReplicaInformation> value);
    internal static ReplicaSetConfiguration FromNative(IntPtr replicaSetIntPtr);
    internal void ToNative(PinCollection pin, FABRIC_REPLICA_SET_CONFIGURATION& native);
}
public enum System.Fabric.ReplicaSetQuorumMode : Enum {
    public int value__;
    public static ReplicaSetQuorumMode Invalid;
    public static ReplicaSetQuorumMode WriteQuorum;
    public static ReplicaSetQuorumMode QuorumAll;
}
public enum System.Fabric.ReplicaStatus : Enum {
    public int value__;
    public static ReplicaStatus Invalid;
    public static ReplicaStatus Down;
    public static ReplicaStatus Up;
}
internal class System.Fabric.ReplicatorBroker : object {
    private IReplicator replicator;
    public ReplicatorBroker(IReplicator replicator);
    public sealed virtual IFabricAsyncOperationContext BeginOpen(IFabricAsyncOperationCallback callback);
    public sealed virtual IFabricStringResult EndOpen(IFabricAsyncOperationContext context);
    public sealed virtual IFabricAsyncOperationContext BeginChangeRole(IntPtr nativeEpoch, FABRIC_REPLICA_ROLE nativeRole, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndChangeRole(IFabricAsyncOperationContext context);
    public sealed virtual IFabricAsyncOperationContext BeginClose(IFabricAsyncOperationCallback callback);
    public sealed virtual void EndClose(IFabricAsyncOperationContext context);
    public sealed virtual void Abort();
    public sealed virtual void GetCurrentProgress(Int64& lastSequenceNumber);
    public sealed virtual void GetCatchUpCapability(Int64& fromSequenceNumber);
    public sealed virtual IFabricAsyncOperationContext BeginUpdateEpoch(IntPtr nativeEpoch, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndUpdateEpoch(IFabricAsyncOperationContext context);
    public sealed virtual IFabricAsyncOperationContext BeginOnDataLoss(IFabricAsyncOperationCallback callback);
    public sealed virtual sbyte EndOnDataLoss(IFabricAsyncOperationContext context);
    public sealed virtual void UpdateCatchUpReplicaSetConfiguration(IntPtr nativeCurrentConfiguration, IntPtr nativePreviousConfiguration);
    public sealed virtual IFabricAsyncOperationContext BeginWaitForCatchUpQuorum(FABRIC_REPLICA_SET_QUORUM_MODE catchUpMode, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndWaitForCatchUpQuorum(IFabricAsyncOperationContext context);
    public sealed virtual void UpdateCurrentReplicaSetConfiguration(IntPtr nativeCurrentConfiguration);
    public sealed virtual IFabricAsyncOperationContext BeginBuildReplica(IntPtr replica, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndBuildReplica(IFabricAsyncOperationContext context);
    public sealed virtual void RemoveReplica(long replicaId);
    private void UpdateCatchUpReplicaSetConfigurationHelper(IntPtr nativeCurrentConfiguration, IntPtr nativePreviousConfiguration);
    private void UpdateCurrentReplicaSetConfigurationHelper(IntPtr nativeCurrentConfiguration);
    private Task ChangeRoleAsync(IntPtr nativeEpoch, FABRIC_REPLICA_ROLE nativeRole, CancellationToken cancellationToken);
    private Task UpdateEpochAsync(IntPtr nativeEpoch, CancellationToken cancellationToken);
    private Task BeginWaitForCatchupQuorumAsync(FABRIC_REPLICA_SET_QUORUM_MODE catchUpMode, CancellationToken cancellationToken);
    private Task BeginBuildReplicaAsync(IntPtr replica, CancellationToken cancellationToken);
    private void RemoveReplicaHelper(long replicaId);
    [CompilerGeneratedAttribute]
private Task <BeginOpen>b__2_0(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <BeginClose>b__6_0(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <Abort>b__8_0();
    [CompilerGeneratedAttribute]
private Task <BeginOnDataLoss>b__13_0(CancellationToken cancellationToken);
}
internal class System.Fabric.ReplicatorBroker2 : ReplicatorBroker {
    public ReplicatorBroker2(IReplicator replicator);
}
public class System.Fabric.ReplicatorSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <BatchAcknowledgementInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityCredentials <SecurityCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InitialReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InitialCopyQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxCopyQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RequireServiceAck>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReplicationQueueMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SecondaryClearAcknowledgedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxReplicationMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseStreamFaultsAndEndOfStreamOperationAck>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InitialPrimaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxPrimaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxPrimaryReplicationQueueMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InitialSecondaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxSecondaryReplicationQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxSecondaryReplicationQueueMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <PrimaryWaitForPendingQuorumsTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorListenAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicatorPublishAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableSendWindowSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxReplicationQueueSendWindowSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaxCopyQueueSendWindowSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseIndividualHeapPerReplica>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <InitialReplicaHeapSizeInKB>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ReplicationBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ReplicationBatchSendInterval>k__BackingField;
    public Nullable`1<TimeSpan> RetryInterval { get; public set; }
    public Nullable`1<TimeSpan> BatchAcknowledgementInterval { get; public set; }
    public string ReplicatorAddress { get; public set; }
    public SecurityCredentials SecurityCredentials { get; public set; }
    public Nullable`1<long> InitialReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxReplicationQueueSize { get; public set; }
    public Nullable`1<long> InitialCopyQueueSize { get; public set; }
    public Nullable`1<long> MaxCopyQueueSize { get; public set; }
    public Nullable`1<bool> RequireServiceAck { get; public set; }
    public Nullable`1<long> MaxReplicationQueueMemorySize { get; public set; }
    public Nullable`1<bool> SecondaryClearAcknowledgedOperations { get; public set; }
    public Nullable`1<long> MaxReplicationMessageSize { get; public set; }
    public Nullable`1<bool> UseStreamFaultsAndEndOfStreamOperationAck { get; public set; }
    public Nullable`1<long> InitialPrimaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxPrimaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxPrimaryReplicationQueueMemorySize { get; public set; }
    public Nullable`1<long> InitialSecondaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxSecondaryReplicationQueueSize { get; public set; }
    public Nullable`1<long> MaxSecondaryReplicationQueueMemorySize { get; public set; }
    public Nullable`1<TimeSpan> PrimaryWaitForPendingQuorumsTimeout { get; public set; }
    public string ReplicatorListenAddress { get; public set; }
    public string ReplicatorPublishAddress { get; public set; }
    internal Nullable`1<bool> EnableSendWindowSizeInBytes { get; internal set; }
    internal Nullable`1<UInt32> MaxReplicationQueueSendWindowSizeInBytes { get; internal set; }
    internal Nullable`1<UInt32> MaxCopyQueueSendWindowSizeInBytes { get; internal set; }
    internal Nullable`1<bool> UseIndividualHeapPerReplica { get; internal set; }
    internal Nullable`1<UInt32> InitialReplicaHeapSizeInKB { get; internal set; }
    public Nullable`1<long> ReplicationBatchSize { get; public set; }
    public Nullable`1<TimeSpan> ReplicationBatchSendInterval { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RetryInterval();
    [CompilerGeneratedAttribute]
public void set_RetryInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_BatchAcknowledgementInterval();
    [CompilerGeneratedAttribute]
public void set_BatchAcknowledgementInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorAddress();
    [CompilerGeneratedAttribute]
public void set_ReplicatorAddress(string value);
    [CompilerGeneratedAttribute]
public SecurityCredentials get_SecurityCredentials();
    [CompilerGeneratedAttribute]
public void set_SecurityCredentials(SecurityCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InitialReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_InitialReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_MaxReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InitialCopyQueueSize();
    [CompilerGeneratedAttribute]
public void set_InitialCopyQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxCopyQueueSize();
    [CompilerGeneratedAttribute]
public void set_MaxCopyQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequireServiceAck();
    [CompilerGeneratedAttribute]
public void set_RequireServiceAck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReplicationQueueMemorySize();
    [CompilerGeneratedAttribute]
public void set_MaxReplicationQueueMemorySize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SecondaryClearAcknowledgedOperations();
    [CompilerGeneratedAttribute]
public void set_SecondaryClearAcknowledgedOperations(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxReplicationMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxReplicationMessageSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseStreamFaultsAndEndOfStreamOperationAck();
    [CompilerGeneratedAttribute]
public void set_UseStreamFaultsAndEndOfStreamOperationAck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InitialPrimaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_InitialPrimaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxPrimaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_MaxPrimaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxPrimaryReplicationQueueMemorySize();
    [CompilerGeneratedAttribute]
public void set_MaxPrimaryReplicationQueueMemorySize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InitialSecondaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_InitialSecondaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxSecondaryReplicationQueueSize();
    [CompilerGeneratedAttribute]
public void set_MaxSecondaryReplicationQueueSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxSecondaryReplicationQueueMemorySize();
    [CompilerGeneratedAttribute]
public void set_MaxSecondaryReplicationQueueMemorySize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_PrimaryWaitForPendingQuorumsTimeout();
    [CompilerGeneratedAttribute]
public void set_PrimaryWaitForPendingQuorumsTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorListenAddress();
    [CompilerGeneratedAttribute]
public void set_ReplicatorListenAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ReplicatorPublishAddress();
    [CompilerGeneratedAttribute]
public void set_ReplicatorPublishAddress(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_EnableSendWindowSizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_EnableSendWindowSizeInBytes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_MaxReplicationQueueSendWindowSizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_MaxReplicationQueueSendWindowSizeInBytes(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_MaxCopyQueueSendWindowSizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_MaxCopyQueueSendWindowSizeInBytes(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_UseIndividualHeapPerReplica();
    [CompilerGeneratedAttribute]
internal void set_UseIndividualHeapPerReplica(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_InitialReplicaHeapSizeInKB();
    [CompilerGeneratedAttribute]
internal void set_InitialReplicaHeapSizeInKB(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ReplicationBatchSize();
    [CompilerGeneratedAttribute]
public void set_ReplicationBatchSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ReplicationBatchSendInterval();
    [CompilerGeneratedAttribute]
public void set_ReplicationBatchSendInterval(Nullable`1<TimeSpan> value);
    public static ReplicatorSettings LoadFrom(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName);
    private static ReplicatorSettings LoadFromPrivate(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName);
    internal IntPtr ToNative(PinCollection pin);
    internal static ReplicatorSettings CreateFromNative(IFabricReplicatorSettingsResult replicatorSettingsResult);
    private void ThrowIfValueOutOfBounds(long value, string argumentName);
    private bool IsEx1SettingsPresent();
    private bool IsEx2SettingsPresent();
    private bool IsEx3SettingsPresent();
    private bool IsEx4SettingsPresent();
    private bool IsEx5SettingsPresent();
    private bool IsEx6SettingsPresent();
    private bool IsEx7SettingsPresent();
}
internal class System.Fabric.RepositoryAuthenticationDescription : object {
    [CompilerGeneratedAttribute]
private ManagedIdentityKind <IdentityKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityRef>k__BackingField;
    internal ManagedIdentityKind IdentityKind { get; internal set; }
    internal string IdentityRef { get; internal set; }
    [CompilerGeneratedAttribute]
internal ManagedIdentityKind get_IdentityKind();
    [CompilerGeneratedAttribute]
internal void set_IdentityKind(ManagedIdentityKind value);
    [CompilerGeneratedAttribute]
internal string get_IdentityRef();
    [CompilerGeneratedAttribute]
internal void set_IdentityRef(string value);
    internal static RepositoryAuthenticationDescription CreateFromNative(IntPtr nativePtr);
    internal static ManagedIdentityKind CreateFromNative(FABRIC_MANAGED_IDENTITY_REFERENCE_KIND miKind);
}
internal class System.Fabric.RepositoryCredentialDescription : object {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPasswordEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    internal string AccountName { get; internal set; }
    internal string Password { get; internal set; }
    internal string Email { get; internal set; }
    internal bool IsPasswordEncrypted { get; internal set; }
    internal string Type { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_AccountName();
    [CompilerGeneratedAttribute]
internal void set_AccountName(string value);
    [CompilerGeneratedAttribute]
internal string get_Password();
    [CompilerGeneratedAttribute]
internal void set_Password(string value);
    [CompilerGeneratedAttribute]
internal string get_Email();
    [CompilerGeneratedAttribute]
internal void set_Email(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsPasswordEncrypted();
    [CompilerGeneratedAttribute]
internal void set_IsPasswordEncrypted(bool value);
    [CompilerGeneratedAttribute]
internal string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    internal static RepositoryCredentialDescription CreateFromNative(IntPtr nativePtr);
}
public class System.Fabric.ResolvedServiceEndpoint : object {
    [CompilerGeneratedAttribute]
private ServiceEndpointRole <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    public ServiceEndpointRole Role { get; internal set; }
    public string Address { get; internal set; }
    [CompilerGeneratedAttribute]
public ServiceEndpointRole get_Role();
    [CompilerGeneratedAttribute]
internal void set_Role(ServiceEndpointRole value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
internal void set_Address(string value);
}
public class System.Fabric.ResolvedServicePartition : object {
    private IFabricResolvedServicePartitionResult nativeResult;
    private IInternalFabricResolvedServicePartition nativeInternalResult;
    private ResolvedServiceEndpoint endpoint;
    [CompilerGeneratedAttribute]
private ICollection`1<ResolvedServiceEndpoint> <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionInformation <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    public ICollection`1<ResolvedServiceEndpoint> Endpoints { get; internal set; }
    public ServicePartitionInformation Info { get; internal set; }
    public Uri ServiceName { get; internal set; }
    internal long FMVersion { get; }
    internal long Generation { get; }
    internal IFabricResolvedServicePartitionResult NativeResult { get; }
    private ResolvedServicePartition(IFabricResolvedServicePartitionResult nativeResult);
    [CompilerGeneratedAttribute]
public ICollection`1<ResolvedServiceEndpoint> get_Endpoints();
    [CompilerGeneratedAttribute]
internal void set_Endpoints(ICollection`1<ResolvedServiceEndpoint> value);
    [CompilerGeneratedAttribute]
public ServicePartitionInformation get_Info();
    [CompilerGeneratedAttribute]
internal void set_Info(ServicePartitionInformation value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    internal long get_FMVersion();
    internal long get_Generation();
    internal IFabricResolvedServicePartitionResult get_NativeResult();
    public ResolvedServiceEndpoint GetEndpoint();
    public int CompareVersion(ResolvedServicePartition other);
    internal static ResolvedServicePartition FromNative(IFabricResolvedServicePartitionResult nativeResult);
    internal ResolvedServiceEndpoint GetEndpointInternal();
    internal int CompareVersionInternal(ResolvedServicePartition other);
    [CompilerGeneratedAttribute]
private long <get_FMVersion>b__18_0();
    [CompilerGeneratedAttribute]
private long <get_Generation>b__20_0();
    [CompilerGeneratedAttribute]
private ResolvedServiceEndpoint <GetEndpoint>b__23_0();
}
internal class System.Fabric.ResourceGovernancePolicyDescription : object {
    [CompilerGeneratedAttribute]
private string <CodePackageRef>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MemoryInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MemoryInMBLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MemorySwapInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MemoryReservationInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CpuShares>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CpuPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CpuCores>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CpuCoresLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumIOps>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumIOBytesps>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockIOWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetCpus>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <NanoCpus>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CpuQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DiskQuotaInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <KernelMemoryInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ShmSizeInMB>k__BackingField;
    internal string CodePackageRef { get; internal set; }
    internal UInt32 MemoryInMB { get; internal set; }
    internal UInt32 MemoryInMBLimit { get; internal set; }
    internal UInt32 MemorySwapInMB { get; internal set; }
    internal UInt32 MemoryReservationInMB { get; internal set; }
    internal UInt32 CpuShares { get; internal set; }
    internal UInt32 CpuPercent { get; internal set; }
    internal double CpuCores { get; internal set; }
    internal double CpuCoresLimit { get; internal set; }
    internal UInt32 MaximumIOps { get; internal set; }
    internal UInt32 MaximumIOBytesps { get; internal set; }
    internal UInt32 BlockIOWeight { get; internal set; }
    internal string CpusetCpus { get; internal set; }
    internal ulong NanoCpus { get; internal set; }
    internal UInt32 CpuQuota { get; internal set; }
    internal ulong DiskQuotaInMB { get; internal set; }
    internal ulong KernelMemoryInMB { get; internal set; }
    internal ulong ShmSizeInMB { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_CodePackageRef();
    [CompilerGeneratedAttribute]
internal void set_CodePackageRef(string value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MemoryInMB();
    [CompilerGeneratedAttribute]
internal void set_MemoryInMB(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MemoryInMBLimit();
    [CompilerGeneratedAttribute]
internal void set_MemoryInMBLimit(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MemorySwapInMB();
    [CompilerGeneratedAttribute]
internal void set_MemorySwapInMB(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MemoryReservationInMB();
    [CompilerGeneratedAttribute]
internal void set_MemoryReservationInMB(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_CpuShares();
    [CompilerGeneratedAttribute]
internal void set_CpuShares(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_CpuPercent();
    [CompilerGeneratedAttribute]
internal void set_CpuPercent(UInt32 value);
    [CompilerGeneratedAttribute]
internal double get_CpuCores();
    [CompilerGeneratedAttribute]
internal void set_CpuCores(double value);
    [CompilerGeneratedAttribute]
internal double get_CpuCoresLimit();
    [CompilerGeneratedAttribute]
internal void set_CpuCoresLimit(double value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MaximumIOps();
    [CompilerGeneratedAttribute]
internal void set_MaximumIOps(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MaximumIOBytesps();
    [CompilerGeneratedAttribute]
internal void set_MaximumIOBytesps(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_BlockIOWeight();
    [CompilerGeneratedAttribute]
internal void set_BlockIOWeight(UInt32 value);
    [CompilerGeneratedAttribute]
internal string get_CpusetCpus();
    [CompilerGeneratedAttribute]
internal void set_CpusetCpus(string value);
    [CompilerGeneratedAttribute]
internal ulong get_NanoCpus();
    [CompilerGeneratedAttribute]
internal void set_NanoCpus(ulong value);
    [CompilerGeneratedAttribute]
internal UInt32 get_CpuQuota();
    [CompilerGeneratedAttribute]
internal void set_CpuQuota(UInt32 value);
    [CompilerGeneratedAttribute]
internal ulong get_DiskQuotaInMB();
    [CompilerGeneratedAttribute]
internal void set_DiskQuotaInMB(ulong value);
    [CompilerGeneratedAttribute]
internal ulong get_KernelMemoryInMB();
    [CompilerGeneratedAttribute]
internal void set_KernelMemoryInMB(ulong value);
    [CompilerGeneratedAttribute]
internal ulong get_ShmSizeInMB();
    [CompilerGeneratedAttribute]
internal void set_ShmSizeInMB(ulong value);
    internal static ResourceGovernancePolicyDescription CreateFromNative(IntPtr nativePtr);
}
public enum System.Fabric.RestartPartitionMode : Enum {
    public int value__;
    public static RestartPartitionMode Invalid;
    public static RestartPartitionMode AllReplicasOrInstances;
    public static RestartPartitionMode OnlyActiveSecondaries;
}
internal class System.Fabric.RestartPartitionProgressResult : object {
    private IntPtr nativeResult;
    private PinCollection pinCollection;
    private bool disposed;
    public RestartPartitionProgressResult(PartitionRestartProgress progress);
    public sealed virtual IntPtr get_Progress();
    public sealed virtual void Dispose();
}
public class System.Fabric.RestoreSettings : object {
    private bool inlineReopen;
    private bool enableLsnCheck;
    public bool InlineReopen { get; }
    public bool EnableLsnCheck { get; }
    public RestoreSettings(bool inlineReopen);
    public RestoreSettings(bool inlineReopen, bool enableLsnCheck);
    public bool get_InlineReopen();
    public bool get_EnableLsnCheck();
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Result.InvokeDataLossResult : object {
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public SelectedPartition SelectedPartition { get; private set; }
    internal InvokeDataLossResult(SelectedPartition selectedPartition);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public virtual string ToString();
}
public class System.Fabric.Result.InvokeQuorumLossResult : object {
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public SelectedPartition SelectedPartition { get; private set; }
    internal InvokeQuorumLossResult(SelectedPartition selectedPartition);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public virtual string ToString();
}
public class System.Fabric.Result.MoveAuxiliaryResult : object {
    [CompilerGeneratedAttribute]
private string <CurrentAuxiliaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewAuxiliaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public string CurrentAuxiliaryNodeName { get; private set; }
    public string NewAuxiliaryNodeName { get; private set; }
    public SelectedPartition SelectedPartition { get; private set; }
    internal MoveAuxiliaryResult(string currentAuxiliaryNodeName, string newAuxiliaryNodeName, SelectedPartition selectedPartition);
    [CompilerGeneratedAttribute]
public string get_CurrentAuxiliaryNodeName();
    [CompilerGeneratedAttribute]
private void set_CurrentAuxiliaryNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewAuxiliaryNodeName();
    [CompilerGeneratedAttribute]
private void set_NewAuxiliaryNodeName(string value);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public virtual string ToString();
    internal static MoveAuxiliaryResult CreateFromNative(IntPtr nativeResult);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Result.MoveInstanceResult : object {
    [CompilerGeneratedAttribute]
private string <CurrentInstanceNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewInstanceNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public string CurrentInstanceNodeName { get; private set; }
    public string NewInstanceNodeName { get; private set; }
    public SelectedPartition SelectedPartition { get; private set; }
    internal MoveInstanceResult(string currentInstanceNodeName, string newInstanceNodeName, SelectedPartition selectedPartition);
    [CompilerGeneratedAttribute]
public string get_CurrentInstanceNodeName();
    [CompilerGeneratedAttribute]
private void set_CurrentInstanceNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewInstanceNodeName();
    [CompilerGeneratedAttribute]
private void set_NewInstanceNodeName(string value);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public virtual string ToString();
    internal static MoveInstanceResult CreateFromNative(IntPtr nativeResult);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Result.MovePrimaryResult : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public string NodeName { get; private set; }
    public SelectedPartition SelectedPartition { get; private set; }
    internal MovePrimaryResult(string nodeName, SelectedPartition selectedPartition);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public virtual string ToString();
    internal static MovePrimaryResult CreateFromNative(IntPtr nativeResult);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Result.MoveSecondaryResult : object {
    [CompilerGeneratedAttribute]
private string <CurrentSecondaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSecondaryNodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public string CurrentSecondaryNodeName { get; private set; }
    public string NewSecondaryNodeName { get; private set; }
    public SelectedPartition SelectedPartition { get; private set; }
    internal MoveSecondaryResult(string currentSecondaryNodeName, string newSecondaryNodeName, SelectedPartition selectedPartition);
    [CompilerGeneratedAttribute]
public string get_CurrentSecondaryNodeName();
    [CompilerGeneratedAttribute]
private void set_CurrentSecondaryNodeName(string value);
    [CompilerGeneratedAttribute]
public string get_NewSecondaryNodeName();
    [CompilerGeneratedAttribute]
private void set_NewSecondaryNodeName(string value);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public virtual string ToString();
    internal static MoveSecondaryResult CreateFromNative(IntPtr nativeResult);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Result.NodeCommandResult : TestCommandResult {
    [CompilerGeneratedAttribute]
private NodeResult <NodeResult>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public NodeResult NodeResult { get; private set; }
    internal int ErrorCode { get; internal set; }
    internal NodeCommandResult(NodeResult nodeResult, Exception exception);
    internal NodeCommandResult(NodeResult nodeResult, int errorCode);
    [CompilerGeneratedAttribute]
public NodeResult get_NodeResult();
    [CompilerGeneratedAttribute]
private void set_NodeResult(NodeResult value);
    [CompilerGeneratedAttribute]
internal int get_ErrorCode();
    [CompilerGeneratedAttribute]
internal void set_ErrorCode(int value);
    public virtual string ToString();
    internal void CreateFromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Result.NodeResult : object {
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <NodeInstance>k__BackingField;
    public string NodeName { get; private set; }
    public BigInteger NodeInstance { get; private set; }
    internal NodeResult(string nodeName, BigInteger nodeInstance);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public BigInteger get_NodeInstance();
    [CompilerGeneratedAttribute]
private void set_NodeInstance(BigInteger value);
    public virtual string ToString();
    internal static NodeResult CreateFromNative(IntPtr nativeNodeResult);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.Result.PartitionDataLossResult : TestCommandResult {
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public SelectedPartition SelectedPartition { get; private set; }
    internal int ErrorCode { get; internal set; }
    internal PartitionDataLossResult(SelectedPartition selectedPartition, Exception exception);
    internal PartitionDataLossResult(SelectedPartition selectedPartition);
    internal PartitionDataLossResult(SelectedPartition selectedPartition, int errorCode);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    [CompilerGeneratedAttribute]
internal int get_ErrorCode();
    [CompilerGeneratedAttribute]
internal void set_ErrorCode(int value);
    public virtual string ToString();
    internal void CreateFromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Result.PartitionQuorumLossResult : TestCommandResult {
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public SelectedPartition SelectedPartition { get; private set; }
    internal int ErrorCode { get; internal set; }
    internal PartitionQuorumLossResult(SelectedPartition selectedPartition, Exception exception);
    internal PartitionQuorumLossResult(SelectedPartition selectedPartition);
    internal PartitionQuorumLossResult(SelectedPartition selectedPartition, int errorCode);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    [CompilerGeneratedAttribute]
internal int get_ErrorCode();
    [CompilerGeneratedAttribute]
internal void set_ErrorCode(int value);
    public virtual string ToString();
    internal void CreateFromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Result.PartitionRestartResult : TestCommandResult {
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public SelectedPartition SelectedPartition { get; private set; }
    internal int ErrorCode { get; internal set; }
    internal PartitionRestartResult(SelectedPartition selectedPartition, Exception exception);
    internal PartitionRestartResult(SelectedPartition selectedPartition);
    internal PartitionRestartResult(SelectedPartition selectedPartition, int errorCode);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    [CompilerGeneratedAttribute]
internal int get_ErrorCode();
    [CompilerGeneratedAttribute]
internal void set_ErrorCode(int value);
    public virtual string ToString();
    internal void CreateFromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pinCollection);
}
public class System.Fabric.Result.RemoveReplicaResult : ReplicaResult {
    internal RemoveReplicaResult(SelectedReplica selectedReplica);
}
public class System.Fabric.Result.ReplicaResult : object {
    [CompilerGeneratedAttribute]
private SelectedReplica <SelectedReplica>k__BackingField;
    public SelectedReplica SelectedReplica { get; private set; }
    internal ReplicaResult(SelectedReplica selectedReplica);
    [CompilerGeneratedAttribute]
public SelectedReplica get_SelectedReplica();
    [CompilerGeneratedAttribute]
private void set_SelectedReplica(SelectedReplica value);
}
public class System.Fabric.Result.ReportCompletionResult : ReplicaResult {
    internal ReportCompletionResult(SelectedReplica selectedReplica);
}
public class System.Fabric.Result.RestartDeployedCodePackageResult : object {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageActivationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodePackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CodePackageInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedReplica <SelectedReplica>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public string NodeName { get; private set; }
    public string ServiceManifestName { get; private set; }
    public string ServicePackageActivationId { get; private set; }
    public string CodePackageName { get; private set; }
    public long CodePackageInstanceId { get; private set; }
    public SelectedReplica SelectedReplica { get; private set; }
    internal RestartDeployedCodePackageResult(string nodeName, Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, long codePackageInstanceId, SelectedReplica selectedReplica);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
private void set_NodeName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
private void set_ServiceManifestName(string value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageActivationId();
    [CompilerGeneratedAttribute]
private void set_ServicePackageActivationId(string value);
    [CompilerGeneratedAttribute]
public string get_CodePackageName();
    [CompilerGeneratedAttribute]
private void set_CodePackageName(string value);
    [CompilerGeneratedAttribute]
public long get_CodePackageInstanceId();
    [CompilerGeneratedAttribute]
private void set_CodePackageInstanceId(long value);
    [CompilerGeneratedAttribute]
public SelectedReplica get_SelectedReplica();
    [CompilerGeneratedAttribute]
private void set_SelectedReplica(SelectedReplica value);
    public virtual string ToString();
    internal static RestartDeployedCodePackageResult CreateFromNative(IntPtr nativeResult);
}
[DataContractAttribute]
public class System.Fabric.Result.RestartNodeResult : object {
    [CompilerGeneratedAttribute]
private NodeResult <NodeResult>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedReplica <SelectedReplica>k__BackingField;
    [DataMemberAttribute]
public NodeResult NodeResult { get; internal set; }
    [DataMemberAttribute]
public SelectedReplica SelectedReplica { get; internal set; }
    internal RestartNodeResult(SelectedReplica selectedReplica, NodeResult nodeResult);
    [CompilerGeneratedAttribute]
public NodeResult get_NodeResult();
    [CompilerGeneratedAttribute]
internal void set_NodeResult(NodeResult value);
    [CompilerGeneratedAttribute]
public SelectedReplica get_SelectedReplica();
    [CompilerGeneratedAttribute]
internal void set_SelectedReplica(SelectedReplica value);
    public virtual string ToString();
}
public class System.Fabric.Result.RestartPartitionResult : object {
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public SelectedPartition SelectedPartition { get; private set; }
    internal RestartPartitionResult(SelectedPartition selectedPartition);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public virtual string ToString();
}
public class System.Fabric.Result.RestartReplicaResult : ReplicaResult {
    internal RestartReplicaResult(SelectedReplica selectedReplica);
}
public class System.Fabric.Result.StartNodeResult : NodeResult {
    internal StartNodeResult(string nodeName, BigInteger nodeInstance);
}
public class System.Fabric.Result.StopNodeResult : NodeResult {
    internal StopNodeResult(string nodeName, BigInteger nodeInstance);
}
public abstract class System.Fabric.Result.TestCommandResult : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; internal set; }
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
}
public enum System.Fabric.RollingUpgradeMode : Enum {
    public int value__;
    public static RollingUpgradeMode Invalid;
    public static RollingUpgradeMode UnmonitoredAuto;
    public static RollingUpgradeMode UnmonitoredManual;
    public static RollingUpgradeMode Monitored;
    public static RollingUpgradeMode UnmonitoredDeferred;
}
public abstract class System.Fabric.SafetyCheck : object {
    [CompilerGeneratedAttribute]
private SafetyCheckKind <Kind>k__BackingField;
    public SafetyCheckKind Kind { get; private set; }
    protected internal SafetyCheck(SafetyCheckKind kind);
    [CompilerGeneratedAttribute]
public SafetyCheckKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(SafetyCheckKind value);
    internal static IList`1<SafetyCheck> FromNativeList(FABRIC_SAFETY_CHECK_LIST* nativeList);
    internal static SafetyCheck FromNative(FABRIC_SAFETY_CHECK nativeItem);
}
public enum System.Fabric.SafetyCheckKind : Enum {
    public int value__;
    public static SafetyCheckKind Invalid;
    public static SafetyCheckKind EnsureSeedNodeQuorum;
    public static SafetyCheckKind EnsurePartitionQuorum;
    public static SafetyCheckKind WaitForPrimaryPlacement;
    public static SafetyCheckKind WaitForPrimarySwap;
    public static SafetyCheckKind WaitForReconfiguration;
    public static SafetyCheckKind WaitForInBuildReplica;
    public static SafetyCheckKind EnsureAvailability;
}
public class System.Fabric.SecretStore.Secret : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SecureString <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    public SecureString Value { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SecureString get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(SecureString value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    internal static Secret FromNative(FABRIC_SECRET nativeSecret);
    internal static Secret[] FromNativeArray(IntPtr nativeListPtr);
    internal static IntPtr ToNativeArray(PinCollection pinCollection, Secret[] secretRefs);
    internal FABRIC_SECRET ToNative(PinCollection pinCollection);
}
public class System.Fabric.SecretStore.SecretDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretProperties <Properties>k__BackingField;
    [JsonCustomizationAttribute]
public string Name { get; public set; }
    [JsonCustomizationAttribute]
public SecretProperties Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SecretProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(SecretProperties value);
    internal FABRIC_SECRET_DESC ToNative(PinCollection pinCollection);
    internal static IntPtr ToNativeArray(PinCollection pinCollection, SecretDescription[] secrets);
}
public class System.Fabric.SecretStore.SecretProperties : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [JsonCustomizationAttribute]
public string Kind { get; public set; }
    [JsonCustomizationAttribute]
public string ContentType { get; public set; }
    [JsonCustomizationAttribute]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class System.Fabric.SecretStore.SecretReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    internal static SecretReference FromNative(FABRIC_SECRET_REFERENCE nativeSecretReference);
    internal static SecretReference[] FromNativeArray(IntPtr nativeListPtr);
    internal static IntPtr ToNativeArray(PinCollection pinCollection, SecretReference[] secretRefs);
    internal FABRIC_SECRET_REFERENCE ToNative(PinCollection pinCollection);
}
public class System.Fabric.SecretStore.SecretValueDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretValueProperties <Properties>k__BackingField;
    [JsonCustomizationAttribute]
public string Name { get; public set; }
    [JsonCustomizationAttribute]
public SecretValueProperties Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SecretValueProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(SecretValueProperties value);
}
public class System.Fabric.SecretStore.SecretValueProperties : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonCustomizationAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[FlagsAttribute]
internal enum System.Fabric.Security.AccessMask : Enum {
    public int value__;
    public static AccessMask None;
    public static AccessMask Create;
    public static AccessMask Write;
    public static AccessMask Read;
    public static AccessMask Delete;
    public static AccessMask ReadAcl;
    public static AccessMask WriteAcl;
    public static AccessMask GenericRead;
    public static AccessMask GenericWrite;
    public static AccessMask GenericAll;
}
internal abstract class System.Fabric.Security.Ace : object {
    [CompilerGeneratedAttribute]
private AceType <AceType>k__BackingField;
    [CompilerGeneratedAttribute]
private PrincipalIdentifier <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessMask <AccessMask>k__BackingField;
    public AceType AceType { get; private set; }
    public PrincipalIdentifier Principal { get; private set; }
    public AccessMask AccessMask { get; public set; }
    protected Ace(AceType aceType, PrincipalIdentifier principal);
    protected Ace(AceType aceType, PrincipalIdentifier principal, AccessMask accessMask);
    [CompilerGeneratedAttribute]
public AceType get_AceType();
    [CompilerGeneratedAttribute]
private void set_AceType(AceType value);
    [CompilerGeneratedAttribute]
public PrincipalIdentifier get_Principal();
    [CompilerGeneratedAttribute]
private void set_Principal(PrincipalIdentifier value);
    [CompilerGeneratedAttribute]
public AccessMask get_AccessMask();
    [CompilerGeneratedAttribute]
public void set_AccessMask(AccessMask value);
    internal void ToNative(PinCollection pinCollection, FABRIC_SECURITY_ACE& nativeAce);
    internal static Ace FromNative(FABRIC_SECURITY_ACE nativeAce);
}
internal enum System.Fabric.Security.AceType : Enum {
    public int value__;
    public static AceType Invalid;
    public static AceType Allowed;
}
internal class System.Fabric.Security.Acl : object {
    [CompilerGeneratedAttribute]
private IList`1<Ace> <AceItems>k__BackingField;
    public IList`1<Ace> AceItems { get; private set; }
    public Acl(IList`1<Ace> aceItems);
    [CompilerGeneratedAttribute]
public IList`1<Ace> get_AceItems();
    [CompilerGeneratedAttribute]
private void set_AceItems(IList`1<Ace> value);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static Acl FromNative(FABRIC_SECURITY_ACL* nativePtr);
    internal static Acl FromNativeResult(IFabricGetAclResult nativeResult);
}
internal class System.Fabric.Security.AllowedAce : Ace {
    public AllowedAce(PrincipalIdentifier principal);
    public AllowedAce(PrincipalIdentifier principal, AccessMask accessMask);
}
internal class System.Fabric.Security.ApplicationResourceIdentifier : ResourceIdentifier {
    [CompilerGeneratedAttribute]
private Uri <ApplicationName>k__BackingField;
    public Uri ApplicationName { get; private set; }
    public ApplicationResourceIdentifier(Uri applicationName);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationName();
    [CompilerGeneratedAttribute]
private void set_ApplicationName(Uri value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static ApplicationResourceIdentifier FromNative(FABRIC_SECURITY_APPLICATION_RESOURCE_IDENTIFIER* nativePtr);
}
internal class System.Fabric.Security.ApplicationTypeResourceIdentifier : ResourceIdentifier {
    [CompilerGeneratedAttribute]
private string <ApplicationTypeName>k__BackingField;
    public string ApplicationTypeName { get; private set; }
    public ApplicationTypeResourceIdentifier(string applicationTypeName);
    [CompilerGeneratedAttribute]
public string get_ApplicationTypeName();
    [CompilerGeneratedAttribute]
private void set_ApplicationTypeName(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static ApplicationTypeResourceIdentifier FromNative(FABRIC_SECURITY_APPLICATION_TYPE_RESOURCE_IDENTIFIER* nativePtr);
}
public class System.Fabric.Security.AzureActiveDirectoryMetadata : object {
    [CompilerGeneratedAttribute]
private string <LoginEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientRedirect>k__BackingField;
    public string LoginEndpoint { get; internal set; }
    public string Authority { get; internal set; }
    public string TenantId { get; internal set; }
    public string ClusterApplication { get; internal set; }
    public string ClientApplication { get; internal set; }
    public string ClientRedirect { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_LoginEndpoint();
    [CompilerGeneratedAttribute]
internal void set_LoginEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
internal void set_Authority(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_ClusterApplication();
    [CompilerGeneratedAttribute]
internal void set_ClusterApplication(string value);
    [CompilerGeneratedAttribute]
public string get_ClientApplication();
    [CompilerGeneratedAttribute]
internal void set_ClientApplication(string value);
    [CompilerGeneratedAttribute]
public string get_ClientRedirect();
    [CompilerGeneratedAttribute]
internal void set_ClientRedirect(string value);
    internal static AzureActiveDirectoryMetadata FromNative(IntPtr nativePtr);
    internal static IDictionary`2<string, string> GetDefaultAzureActiveDirectoryConfigurations();
}
internal class System.Fabric.Security.ClaimPrincipalIdentifier : PrincipalIdentifier {
    [CompilerGeneratedAttribute]
private string <Claim>k__BackingField;
    public string Claim { get; private set; }
    public ClaimPrincipalIdentifier(string claim);
    [CompilerGeneratedAttribute]
public string get_Claim();
    [CompilerGeneratedAttribute]
private void set_Claim(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static ClaimPrincipalIdentifier FromNative(FABRIC_SECURITY_CLAIM_PRINCIPAL_IDENTIFIER* nativePtr);
}
public class System.Fabric.Security.EncryptionUtility : object {
    public static string EncryptText(string textToEncrypt, string thumbprint, string storeName);
    public static string EncryptText(string textToEncrypt, string thumbprint, string storeName, StoreLocation storeLocation, string algorithmOid);
    public static string EncryptTextByCertFile(string textToEncrypt, string certFileName, string algorithmOid);
    public static SecureString DecryptText(string textToDecrypt);
    public static SecureString DecryptText(string textToDecrypt, StoreLocation storeLocation);
    [ObsoleteAttribute("Deprecated by EncryptText", "False")]
public static string EncryptValue(string thumbprint, string storeLocation, string textToEncrypt);
    [ObsoleteAttribute("Deprecated DecryptText", "False")]
public static string DecryptValue(string textToDecrypt);
}
internal class System.Fabric.Security.FabricImageStorePathResourceIdentifier : ResourceIdentifier {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; private set; }
    public FabricImageStorePathResourceIdentifier(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static FabricImageStorePathResourceIdentifier FromNative(FABRIC_SECURITY_IMAGESTORE_PATH_RESOURCE_IDENTIFIER* nativePtr);
}
public class System.Fabric.Security.ManagedIdentityTokenServiceDescription : object {
    [CompilerGeneratedAttribute]
private bool <IsTokenServiceEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClusterIdentityEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationTokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SystemTokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterIdentityObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RemoteTokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerCertificateThumbprint>k__BackingField;
    public bool IsTokenServiceEnabled { get; internal set; }
    public bool IsClusterIdentityEnabled { get; internal set; }
    public Uri ApplicationTokenEndpoint { get; internal set; }
    public Uri SystemTokenEndpoint { get; internal set; }
    public string ClusterIdentityObjectId { get; internal set; }
    public Uri RemoteTokenEndpoint { get; internal set; }
    public string ServerCertificateThumbprint { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_IsTokenServiceEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsTokenServiceEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsClusterIdentityEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsClusterIdentityEnabled(bool value);
    [CompilerGeneratedAttribute]
public Uri get_ApplicationTokenEndpoint();
    [CompilerGeneratedAttribute]
internal void set_ApplicationTokenEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_SystemTokenEndpoint();
    [CompilerGeneratedAttribute]
internal void set_SystemTokenEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public string get_ClusterIdentityObjectId();
    [CompilerGeneratedAttribute]
internal void set_ClusterIdentityObjectId(string value);
    [CompilerGeneratedAttribute]
public Uri get_RemoteTokenEndpoint();
    [CompilerGeneratedAttribute]
internal void set_RemoteTokenEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public string get_ServerCertificateThumbprint();
    [CompilerGeneratedAttribute]
internal void set_ServerCertificateThumbprint(string value);
    internal static ManagedIdentityTokenServiceDescription CreateFromNativeResult(IFabricManagedIdentityTokenServiceDescription result);
    private static ManagedIdentityTokenServiceDescription FromNative(FABRIC_MANAGED_IDENTITY_TOKEN_SERVICE_DESCRIPTION* nativeResultItem);
}
internal class System.Fabric.Security.NameResourceIdentifier : ResourceIdentifier {
    [CompilerGeneratedAttribute]
private Uri <Name>k__BackingField;
    public Uri Name { get; private set; }
    public NameResourceIdentifier(Uri name);
    [CompilerGeneratedAttribute]
public Uri get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(Uri value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static NameResourceIdentifier FromNative(FABRIC_SECURITY_NAME_RESOURCE_IDENTIFIER* nativePtr);
}
internal abstract class System.Fabric.Security.PrincipalIdentifier : object {
    [CompilerGeneratedAttribute]
private PrincipalIdentifierKind <Kind>k__BackingField;
    public PrincipalIdentifierKind Kind { get; private set; }
    protected PrincipalIdentifier(PrincipalIdentifierKind kind);
    [CompilerGeneratedAttribute]
public PrincipalIdentifierKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(PrincipalIdentifierKind value);
    internal abstract virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static PrincipalIdentifier FromNative(FABRIC_SECURITY_PRINCIPAL_IDENTIFIER* nativePtr);
}
internal enum System.Fabric.Security.PrincipalIdentifierKind : Enum {
    public int value__;
    public static PrincipalIdentifierKind Invalid;
    public static PrincipalIdentifierKind X509;
    public static PrincipalIdentifierKind Windows;
    public static PrincipalIdentifierKind Claim;
    public static PrincipalIdentifierKind Role;
}
internal abstract class System.Fabric.Security.ResourceIdentifier : object {
    [CompilerGeneratedAttribute]
private ResourceIdentifierKind <Kind>k__BackingField;
    public ResourceIdentifierKind Kind { get; private set; }
    protected ResourceIdentifier(ResourceIdentifierKind kind);
    [CompilerGeneratedAttribute]
public ResourceIdentifierKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ResourceIdentifierKind value);
    internal abstract virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal IntPtr ToNative(PinCollection pinCollection);
    internal static ResourceIdentifier FromNative(FABRIC_SECURITY_RESOURCE_IDENTIFIER* nativePtr);
}
internal enum System.Fabric.Security.ResourceIdentifierKind : Enum {
    public int value__;
    public static ResourceIdentifierKind Invalid;
    public static ResourceIdentifierKind PathInFabricImageStore;
    public static ResourceIdentifierKind ApplicationType;
    public static ResourceIdentifierKind Application;
    public static ResourceIdentifierKind Service;
    public static ResourceIdentifierKind Name;
}
internal class System.Fabric.Security.RolePrincipalIdentifier : PrincipalIdentifier {
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    public string RoleName { get; private set; }
    public RolePrincipalIdentifier(string roleName);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
private void set_RoleName(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static RolePrincipalIdentifier FromNative(FABRIC_SECURITY_ROLE_PRINCIPAL_IDENTIFIER* nativePtr);
}
internal class System.Fabric.Security.ServiceResourceIdentifier : ResourceIdentifier {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    public Uri ServiceName { get; private set; }
    public ServiceResourceIdentifier(Uri serviceName);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
private void set_ServiceName(Uri value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static ServiceResourceIdentifier FromNative(FABRIC_SECURITY_SERVICE_RESOURCE_IDENTIFIER* nativePtr);
}
internal class System.Fabric.Security.WindowsPrincipalIdentifier : PrincipalIdentifier {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    public string AccountName { get; private set; }
    public WindowsPrincipalIdentifier(string accountName);
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
private void set_AccountName(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static WindowsPrincipalIdentifier FromNative(FABRIC_SECURITY_WINDOWS_PRINCIPAL_IDENTIFIER* nativePtr);
}
internal class System.Fabric.Security.X509PrincipalIdentifier : PrincipalIdentifier {
    [CompilerGeneratedAttribute]
private string <CommonName>k__BackingField;
    public string CommonName { get; private set; }
    public X509PrincipalIdentifier(string commonName);
    [CompilerGeneratedAttribute]
public string get_CommonName();
    [CompilerGeneratedAttribute]
private void set_CommonName(string value);
    internal virtual IntPtr ToNativeValue(PinCollection pinCollection);
    internal static X509PrincipalIdentifier FromNative(FABRIC_SECURITY_X509_PRINCIPAL_IDENTIFIER* nativePtr);
}
[ExtensionAttribute]
internal static class System.Fabric.SecurityCredentialExtension : object {
    [ExtensionAttribute]
internal static IntPtr ToNative(SecurityCredentials securityCredentials, PinCollection pin);
}
public abstract class System.Fabric.SecurityCredentials : object {
    [CompilerGeneratedAttribute]
private CredentialType <CredentialType>k__BackingField;
    public CredentialType CredentialType { get; protected set; }
    internal SecurityCredentials(CredentialType type);
    [CompilerGeneratedAttribute]
public CredentialType get_CredentialType();
    [CompilerGeneratedAttribute]
protected void set_CredentialType(CredentialType value);
    public static SecurityCredentials LoadFrom(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName);
    private static SecurityCredentials LoadFromPrivate(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName);
    internal static SecurityCredentials LoadClusterSettings();
    private static SecurityCredentials LoadClusterSettingsFromPrivate();
    internal static SecurityCredentials CreateFromNative(IFabricSecurityCredentialsResult securityCredentialsResult);
    internal static SecurityCredentials CreateFromNative(FABRIC_SECURITY_CREDENTIALS* nativeCredentials);
    internal static ProtectionLevel CreateFromNative(FABRIC_PROTECTION_LEVEL protectionLevel);
}
public class System.Fabric.SeedNodeSafetyCheck : SafetyCheck {
    internal SeedNodeSafetyCheck(SafetyCheckKind kind);
    internal static SeedNodeSafetyCheck FromNative(SafetyCheckKind kind, FABRIC_SEED_NODE_SAFETY_CHECK* nativePtr);
}
public class System.Fabric.SeedNodeUpgradeSafetyCheck : UpgradeSafetyCheck {
    internal SeedNodeUpgradeSafetyCheck(UpgradeSafetyCheckKind kind);
    internal static SeedNodeUpgradeSafetyCheck FromNative(UpgradeSafetyCheckKind kind, FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK* nativePtr);
}
public class System.Fabric.SelectedPartition : object {
    public static SelectedPartition None;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    internal SelectedPartition(Uri serviceName, Guid partitionId);
    private static SelectedPartition();
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    public sealed virtual bool Equals(SelectedPartition other);
    public virtual string ToString();
    internal static SelectedPartition CreateFromNative(IntPtr pointer);
    internal IntPtr ToNative(PinCollection pin);
}
public class System.Fabric.SelectedReplica : object {
    public static SelectedReplica None;
    [CompilerGeneratedAttribute]
private long <ReplicaOrInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedPartition <SelectedPartition>k__BackingField;
    public long ReplicaOrInstanceId { get; private set; }
    public SelectedPartition SelectedPartition { get; private set; }
    internal SelectedReplica(long replicaOrInstanceId, SelectedPartition partitionSelectorResult);
    private static SelectedReplica();
    [CompilerGeneratedAttribute]
public long get_ReplicaOrInstanceId();
    [CompilerGeneratedAttribute]
private void set_ReplicaOrInstanceId(long value);
    [CompilerGeneratedAttribute]
public SelectedPartition get_SelectedPartition();
    [CompilerGeneratedAttribute]
private void set_SelectedPartition(SelectedPartition value);
    public sealed virtual bool Equals(SelectedReplica other);
    public virtual string ToString();
    internal static SelectedReplica CreateFromNative(IntPtr nativeSelectedReplica);
    internal IntPtr ToNative(PinCollection pin);
}
public abstract class System.Fabric.ServiceContext : object {
    private NodeContext nodeContext;
    private ICodePackageActivationContext codePackageActivationContext;
    private string serviceTypeName;
    private Uri serviceName;
    private Byte[] initializationData;
    private Guid partitionId;
    private long replicaOrInstanceId;
    private string traceId;
    [CompilerGeneratedAttribute]
private string <ListenAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishAddress>k__BackingField;
    public NodeContext NodeContext { get; }
    public ICodePackageActivationContext CodePackageActivationContext { get; }
    public string ServiceTypeName { get; }
    public Uri ServiceName { get; }
    public Byte[] InitializationData { get; }
    public Guid PartitionId { get; }
    public long ReplicaOrInstanceId { get; }
    public string TraceId { get; }
    public string ListenAddress { get; private set; }
    public string PublishAddress { get; private set; }
    protected ServiceContext(NodeContext nodeContext, ICodePackageActivationContext codePackageActivationContext, string serviceTypeName, Uri serviceName, Byte[] initializationData, Guid partitionId, long replicaOrInstanceId);
    public NodeContext get_NodeContext();
    public ICodePackageActivationContext get_CodePackageActivationContext();
    public string get_ServiceTypeName();
    public Uri get_ServiceName();
    public Byte[] get_InitializationData();
    public Guid get_PartitionId();
    public long get_ReplicaOrInstanceId();
    public string get_TraceId();
    [CompilerGeneratedAttribute]
public string get_ListenAddress();
    [CompilerGeneratedAttribute]
private void set_ListenAddress(string value);
    [CompilerGeneratedAttribute]
public string get_PublishAddress();
    [CompilerGeneratedAttribute]
private void set_PublishAddress(string value);
    private void SetServiceAddresses();
}
public enum System.Fabric.ServiceEndpointRole : Enum {
    public int value__;
    public static ServiceEndpointRole Invalid;
    public static ServiceEndpointRole Stateless;
    public static ServiceEndpointRole StatefulPrimary;
    public static ServiceEndpointRole StatefulSecondary;
    public static ServiceEndpointRole StatefulPrimaryAuxiliary;
    public static ServiceEndpointRole StatefulAuxiliary;
}
public class System.Fabric.ServiceEndpointsVersion : object {
    private IFabricServiceEndpointsVersion nativeResult;
    internal ServiceEndpointsVersion(IFabricServiceEndpointsVersion nativeResult);
    public int Compare(ServiceEndpointsVersion other);
    internal int CompareInternal(ServiceEndpointsVersion other);
}
internal class System.Fabric.ServiceFactoryBroker : object {
    private static InteropApi CreateReplicaOrInstanceApi;
    private CodePackageActivationContext codePackageActivationContext;
    private object serviceFactory;
    internal CodePackageActivationContext CodePackageActivationContext { get; }
    internal object ServiceFactory { get; }
    public ServiceFactoryBroker(object serviceFactory, CodePackageActivationContext codePackageActivationContext);
    private static ServiceFactoryBroker();
    internal CodePackageActivationContext get_CodePackageActivationContext();
    internal object get_ServiceFactory();
    public sealed virtual IFabricStatefulServiceReplica CreateReplica(IntPtr nativeServiceType, IntPtr nativeServiceName, UInt32 initializationDataLength, IntPtr nativeInitializationData, Guid partitionId, long replicaId);
    public sealed virtual IFabricStatelessServiceInstance CreateInstance(IntPtr nativeServiceType, IntPtr nativeServiceName, UInt32 initializationDataLength, IntPtr nativeInitializationData, Guid partitionId, long instanceId);
    private static void ValidatePublicApiArguments(IntPtr serviceType, IntPtr serviceName);
    private static Byte[] ParseInitializationData(UInt32 initializationDataLength, IntPtr nativeInitializationData);
    private TReturnValue CreateHelper(IntPtr nativeServiceType, IntPtr nativeServiceName, UInt32 initializationDataLength, IntPtr nativeInitializationData, Guid partitionId, Func`3<TFactory, ServiceInitializationParameters, TReturnValue> creationFunc, Action`2<TReturnValue, ServiceInitializationParameters> initializationFunc, ServiceInitializationParameters initializationParameters);
}
public class System.Fabric.ServiceGroupFactory : object {
    private Dictionary`2<string, IStatefulServiceFactory> statefulFactories;
    private Dictionary`2<string, IStatelessServiceFactory> statelessFactories;
    internal IEnumerable`1<Tuple`2<string, IStatefulServiceFactory>> StatefulServiceFactories { get; }
    internal IEnumerable`1<Tuple`2<string, IStatelessServiceFactory>> StatelessServiceFactories { get; }
    internal IEnumerable`1<Tuple`2<string, IStatefulServiceFactory>> get_StatefulServiceFactories();
    internal IEnumerable`1<Tuple`2<string, IStatelessServiceFactory>> get_StatelessServiceFactories();
    public void AddServiceType(string serviceTypeName, Type serviceTypeImplementation);
    public void AddStatelessServiceFactory(string serviceTypeName, IStatelessServiceFactory factory);
    public void AddStatefulServiceFactory(string serviceTypeName, IStatefulServiceFactory factory);
    public void RemoveServiceFactory(string serviceTypeName);
    private void VerifyServiceTypeNameIsUnique(string serviceTypeName);
    private void VerifyIsEmpty(IEnumerable`1<string> serviceTypeNames);
}
internal class System.Fabric.ServiceGroupPartitionHelper : object {
    public static T ResolveMember(IFabricServiceGroupPartition serviceGroupPartition, Uri name);
    private static object InternalResolveMember(IFabricServiceGroupPartition serviceGroupPartition, Uri name);
}
internal class System.Fabric.ServiceGroupStatelessPartition : StatelessServicePartition {
    private IFabricServiceGroupPartition nativeServiceGroupPartition;
    internal ServiceGroupStatelessPartition(StatelessServiceBroker statelessServiceBroker, IFabricStatelessServicePartition nativeStatelessPartition, IFabricServiceGroupPartition nativeServiceGroupPartition);
    public sealed virtual T ResolveMember(Uri name);
}
public abstract class System.Fabric.ServiceInitializationParameters : object {
    private CodePackageActivationContext codePackageActivationContext;
    [CompilerGeneratedAttribute]
private string <ServiceTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitializationData>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    public CodePackageActivationContext CodePackageActivationContext { get; }
    public string ServiceTypeName { get; internal set; }
    public Uri ServiceName { get; internal set; }
    public Byte[] InitializationData { get; internal set; }
    public Guid PartitionId { get; internal set; }
    internal ServiceInitializationParameters(CodePackageActivationContext activationContext);
    public CodePackageActivationContext get_CodePackageActivationContext();
    [CompilerGeneratedAttribute]
public string get_ServiceTypeName();
    [CompilerGeneratedAttribute]
internal void set_ServiceTypeName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitializationData();
    [CompilerGeneratedAttribute]
internal void set_InitializationData(Byte[] value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
}
public class System.Fabric.ServiceNotification : object {
    [CompilerGeneratedAttribute]
private Uri <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ResolvedServiceEndpoint> <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceEndpointsVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionInformation <PartitionInfo>k__BackingField;
    public Uri ServiceName { get; internal set; }
    public Guid PartitionId { get; internal set; }
    public ICollection`1<ResolvedServiceEndpoint> Endpoints { get; internal set; }
    public ServiceEndpointsVersion Version { get; internal set; }
    public ServicePartitionInformation PartitionInfo { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(Guid value);
    [CompilerGeneratedAttribute]
public ICollection`1<ResolvedServiceEndpoint> get_Endpoints();
    [CompilerGeneratedAttribute]
internal void set_Endpoints(ICollection`1<ResolvedServiceEndpoint> value);
    [CompilerGeneratedAttribute]
public ServiceEndpointsVersion get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(ServiceEndpointsVersion value);
    [CompilerGeneratedAttribute]
public ServicePartitionInformation get_PartitionInfo();
    [CompilerGeneratedAttribute]
internal void set_PartitionInfo(ServicePartitionInformation value);
    internal static ServiceNotification FromNative(IFabricServiceNotification nativeResult);
}
internal class System.Fabric.ServicePackageResourceGovernanceDescription : object {
    [CompilerGeneratedAttribute]
private bool <IsGoverned>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MemoryInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MemoryInMBLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CpuCores>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CpuCoresLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <NotUsed>k__BackingField;
    internal bool IsGoverned { get; internal set; }
    internal UInt32 MemoryInMB { get; internal set; }
    internal UInt32 MemoryInMBLimit { get; internal set; }
    internal double CpuCores { get; internal set; }
    internal double CpuCoresLimit { get; internal set; }
    internal UInt32 NotUsed { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_IsGoverned();
    [CompilerGeneratedAttribute]
internal void set_IsGoverned(bool value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MemoryInMB();
    [CompilerGeneratedAttribute]
internal void set_MemoryInMB(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MemoryInMBLimit();
    [CompilerGeneratedAttribute]
internal void set_MemoryInMBLimit(UInt32 value);
    [CompilerGeneratedAttribute]
internal double get_CpuCores();
    [CompilerGeneratedAttribute]
internal void set_CpuCores(double value);
    [CompilerGeneratedAttribute]
internal double get_CpuCoresLimit();
    [CompilerGeneratedAttribute]
internal void set_CpuCoresLimit(double value);
    [CompilerGeneratedAttribute]
internal UInt32 get_NotUsed();
    [CompilerGeneratedAttribute]
internal void set_NotUsed(UInt32 value);
    internal static ServicePackageResourceGovernanceDescription CreateFromNative(IntPtr nativePtr);
}
[KnownTypeAttribute("System.Fabric.SingletonPartitionInformation")]
[KnownTypeAttribute("System.Fabric.Int64RangePartitionInformation")]
[KnownTypeAttribute("System.Fabric.NamedPartitionInformation")]
public abstract class System.Fabric.ServicePartitionInformation : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ServicePartitionKind <Kind>k__BackingField;
    public Guid Id { get; internal set; }
    [JsonCustomizationAttribute]
public ServicePartitionKind Kind { get; private set; }
    internal ServicePartitionInformation(ServicePartitionKind kind);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public ServicePartitionKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ServicePartitionKind value);
    internal static ServicePartitionInformation FromNative(IntPtr partitionIntPtr);
    internal static ServicePartitionInformation FromNative(FABRIC_SERVICE_PARTITION_INFORMATION nativePartition);
    internal abstract virtual string GetPartitionInformationString();
    [DerivedTypeResolverAttribute("ServicePartitionKind")]
internal static Type ResolveDerivedClass(ServicePartitionKind kind);
}
public enum System.Fabric.ServicePartitionKind : Enum {
    public int value__;
    public static ServicePartitionKind Invalid;
    public static ServicePartitionKind Singleton;
    public static ServicePartitionKind Int64Range;
    public static ServicePartitionKind Named;
}
public class System.Fabric.ServicePartitionResolutionChange : object {
    private ResolvedServicePartition result;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; private set; }
    public ResolvedServicePartition Result { get; }
    public bool HasException { get; }
    private ServicePartitionResolutionChange(ResolvedServicePartition result, Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    public ResolvedServicePartition get_Result();
    public bool get_HasException();
    internal static ServicePartitionResolutionChange FromNative(IFabricResolvedServicePartitionResult nativeResult, int error);
}
public class System.Fabric.ServicePartitionResolutionChangeHandler : MulticastDelegate {
    public ServicePartitionResolutionChangeHandler(object object, IntPtr method);
    public virtual void Invoke(FabricClient source, long handlerId, ServicePartitionResolutionChange args);
    public virtual IAsyncResult BeginInvoke(FabricClient source, long handlerId, ServicePartitionResolutionChange args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Fabric.SingletonPartitionInformation : ServicePartitionInformation {
    internal static SingletonPartitionInformation FromNative(FABRIC_SINGLETON_PARTITION_INFORMATION* nativePartition);
    internal virtual string GetPartitionInformationString();
}
public class System.Fabric.StatefulServiceContext : ServiceContext {
    public long ReplicaId { get; }
    public StatefulServiceContext(NodeContext nodeContext, ICodePackageActivationContext codePackageActivationContext, string serviceTypeName, Uri serviceName, Byte[] initializationData, Guid partitionId, long replicaId);
    public long get_ReplicaId();
}
public class System.Fabric.StatefulServiceInitializationParameters : ServiceInitializationParameters {
    [CompilerGeneratedAttribute]
private long <ReplicaId>k__BackingField;
    public long ReplicaId { get; internal set; }
    internal StatefulServiceInitializationParameters(CodePackageActivationContext activationContext);
    [CompilerGeneratedAttribute]
public long get_ReplicaId();
    [CompilerGeneratedAttribute]
internal void set_ReplicaId(long value);
}
internal class System.Fabric.StatefulServicePartition : PartitionBase {
    private IFabricStatefulServicePartition3 nativePartition;
    public PartitionAccessStatus ReadStatus { get; }
    public PartitionAccessStatus WriteStatus { get; }
    internal IFabricStatefulServicePartition NativePartition { get; }
    internal StatefulServicePartition(IFabricStatefulServicePartition nativeStatefulPartition, ServicePartitionInformation partitionInfo);
    public sealed virtual PartitionAccessStatus get_ReadStatus();
    public sealed virtual PartitionAccessStatus get_WriteStatus();
    internal IFabricStatefulServicePartition get_NativePartition();
    public sealed virtual FabricReplicator CreateReplicator(IStateProvider stateProvider, ReplicatorSettings replicatorSettings);
    public virtual void ReportLoad(FABRIC_LOAD_METRIC[] loadmetrics, PinCollection pin);
    public sealed virtual void ReportFault(FaultType faultType);
    public sealed virtual void ReportMoveCost(MoveCost moveCost);
    public sealed virtual void ReportReplicaHealth(HealthInformation healthInfo);
    public sealed virtual void ReportReplicaHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public sealed virtual void ReportPartitionHealth(HealthInformation healthInfo);
    public sealed virtual void ReportPartitionHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private void ReportReplicaHealthHelper(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private void ReportPartitionHealthHelper(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private static StateProviderBroker CreateStateProviderBroker(IStateProvider stateProvider);
    private void ReportFaultHelper(FaultType faultType);
    private FabricReplicator CreateFabricReplicatorHelper(IStateProvider stateProvider, ReplicatorSettings replicatorSettings);
    [CompilerGeneratedAttribute]
private PartitionAccessStatus <get_ReadStatus>b__3_0();
    [CompilerGeneratedAttribute]
private PartitionAccessStatus <get_WriteStatus>b__5_0();
}
internal class System.Fabric.StatefulServiceReplicaBroker : object {
    private static InteropApi OpenAsyncApi;
    private static InteropApi CloseAsyncApi;
    private static InteropApi ChangeRoleAsyncApi;
    private static InteropApi AbortApi;
    private ServiceInitializationParameters initializationParameters;
    private long replicaId;
    private IStatefulServiceReplica statefulServiceReplica;
    private StatefulServicePartition statefulPartition;
    private IInternalStatefulServiceReplica internalReplica;
    public IStatefulServiceReplica Service { get; }
    public StatefulServiceReplicaBroker(IStatefulServiceReplica statefulServiceReplica, ServiceInitializationParameters initializationParameters, long replicaId);
    private static StatefulServiceReplicaBroker();
    public IStatefulServiceReplica get_Service();
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.BeginOpen(FABRIC_REPLICA_OPEN_MODE openMode, IFabricStatefulServicePartition partition, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricReplicator System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.EndOpen(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.BeginChangeRole(FABRIC_REPLICA_ROLE newRole, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricStringResult System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.EndChangeRole(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.BeginClose(IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.EndClose(IFabricAsyncOperationContext context);
    private sealed virtual override void System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.Abort();
    private sealed virtual override object System.Fabric.Interop.NativeRuntimeInternal.IFabricInternalBrokeredService.GetBrokeredService();
    private sealed virtual override IFabricStatefulServiceReplicaStatusResult System.Fabric.Interop.NativeRuntimeInternal.IFabricInternalStatefulServiceReplica.GetStatus();
    private Task`1<IReplicator> OpenAsync(FABRIC_REPLICA_OPEN_MODE openMode, IFabricStatefulServicePartition partition, CancellationToken cancellationToken);
    private Task`1<string> ReplicaRoleChangeAsync(ReplicaRole newRole, CancellationToken cancellationToken);
    private StatefulServicePartition CreateStatefulPartition(IFabricStatefulServicePartition nativeStatefulPartition);
    private Task CloseAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.BeginClose>b__16_0(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <System.Fabric.Interop.NativeRuntime.IFabricStatefulServiceReplica.Abort>b__18_0();
}
internal class System.Fabric.StatelessServiceBroker : object {
    private static InteropApi OpenAsyncApi;
    private static InteropApi CloseAsyncApi;
    private static InteropApi AbortApi;
    private ServiceInitializationParameters initializationParameters;
    private long instanceId;
    private IStatelessServiceInstance statelessService;
    private StatelessServicePartition statelessServicePartition;
    internal IStatelessServiceInstance Service { get; }
    internal StatelessServiceBroker(IStatelessServiceInstance statelessServiceInstance, ServiceInitializationParameters initializationParameters, long instanceId);
    private static StatelessServiceBroker();
    internal IStatelessServiceInstance get_Service();
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricStatelessServiceInstance.BeginOpen(IFabricStatelessServicePartition partition, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricStringResult System.Fabric.Interop.NativeRuntime.IFabricStatelessServiceInstance.EndOpen(IFabricAsyncOperationContext context);
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeRuntime.IFabricStatelessServiceInstance.BeginClose(IFabricAsyncOperationCallback callback);
    private sealed virtual override void System.Fabric.Interop.NativeRuntime.IFabricStatelessServiceInstance.EndClose(IFabricAsyncOperationContext context);
    private sealed virtual override void System.Fabric.Interop.NativeRuntime.IFabricStatelessServiceInstance.Abort();
    private sealed virtual override object System.Fabric.Interop.NativeRuntimeInternal.IFabricInternalBrokeredService.GetBrokeredService();
    private Task`1<string> OpenAsync(IFabricStatelessServicePartition partition, CancellationToken cancellationToken);
    private StatelessServicePartition CreatePartition(IFabricStatelessServicePartition nativePartition);
    private Task CloseAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <System.Fabric.Interop.NativeRuntime.IFabricStatelessServiceInstance.BeginClose>b__12_0(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <System.Fabric.Interop.NativeRuntime.IFabricStatelessServiceInstance.Abort>b__14_0();
}
public class System.Fabric.StatelessServiceContext : ServiceContext {
    public long InstanceId { get; }
    public StatelessServiceContext(NodeContext nodeContext, ICodePackageActivationContext codePackageActivationContext, string serviceTypeName, Uri serviceName, Byte[] initializationData, Guid partitionId, long instanceId);
    public long get_InstanceId();
}
public class System.Fabric.StatelessServiceInitializationParameters : ServiceInitializationParameters {
    [CompilerGeneratedAttribute]
private long <InstanceId>k__BackingField;
    public long InstanceId { get; internal set; }
    internal StatelessServiceInitializationParameters(CodePackageActivationContext activationContext);
    [CompilerGeneratedAttribute]
public long get_InstanceId();
    [CompilerGeneratedAttribute]
internal void set_InstanceId(long value);
}
internal class System.Fabric.StatelessServicePartition : PartitionBase {
    private IFabricStatelessServicePartition4 nativePartition;
    internal StatelessServicePartition(StatelessServiceBroker statelessServiceBroker, IFabricStatelessServicePartition nativeStatelessPartition);
    public virtual void ReportLoad(FABRIC_LOAD_METRIC[] loadmetrics, PinCollection pin);
    public sealed virtual void ReportFault(FaultType faultType);
    public sealed virtual void ReportMoveCost(MoveCost moveCost);
    public sealed virtual void ReportInstanceHealth(HealthInformation healthInfo);
    public sealed virtual void ReportInstanceHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    public sealed virtual void ReportCompletion();
    public sealed virtual void ReportPartitionHealth(HealthInformation healthInfo);
    public sealed virtual void ReportPartitionHealth(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private void ReportFaultHelper(FaultType faultType);
    private void ReportCompletionHelper();
    private void ReportInstanceHealthHelper(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    private void ReportPartitionHealthHelper(HealthInformation healthInfo, HealthReportSendOptions sendOptions);
    [CompilerGeneratedAttribute]
private void <ReportCompletion>b__7_0();
}
internal class System.Fabric.StateProviderBroker : object {
    private IStateProvider stateProvider;
    [CompilerGeneratedAttribute]
private OperationDataFactoryWrapper <OperationDataFactory>k__BackingField;
    public OperationDataFactoryWrapper OperationDataFactory { get; public set; }
    private static StateProviderBroker();
    public StateProviderBroker(IStateProvider stateProvider);
    [CompilerGeneratedAttribute]
public OperationDataFactoryWrapper get_OperationDataFactory();
    [CompilerGeneratedAttribute]
public void set_OperationDataFactory(OperationDataFactoryWrapper value);
    public sealed virtual IFabricAsyncOperationContext BeginUpdateEpoch(IntPtr nativeEpoch, long previousEpochLastSequenceNumber, IFabricAsyncOperationCallback callback);
    public sealed virtual void EndUpdateEpoch(IFabricAsyncOperationContext context);
    public sealed virtual long GetLastCommittedSequenceNumber();
    public sealed virtual IFabricAsyncOperationContext BeginOnDataLoss(IFabricAsyncOperationCallback callback);
    public sealed virtual sbyte EndOnDataLoss(IFabricAsyncOperationContext context);
    public sealed virtual IFabricOperationDataStream GetCopyContext();
    public sealed virtual IFabricOperationDataStream GetCopyState(long uptoSequenceNumber, IFabricOperationDataStream comCopyContext);
    private IFabricOperationDataStream GetCopyStateHelper(long uptoSequenceNumber, IFabricOperationDataStream comCopyContext);
    private IFabricOperationDataStream GetCopyContextHelper();
    private Task UpdateEpochHelper(IntPtr nativeEpoch, long previousEpochLastSequenceNumber, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task <BeginOnDataLoss>b__10_0(CancellationToken cancellationToken);
}
internal class System.Fabric.StateReplicator : object {
    private OperationDataFactoryWrapper operationDataFactory;
    private IFabricStateReplicator2 nativeStateReplicator;
    private IFabricInternalManagedReplicator replicatorUsingOperationEx1;
    private IntPtr replicatorUsingOperationEx1Ptr;
    private IntPtr endReplicateCallbackPtr;
    private static EndReplicateCallback OnEndReplicateCallback;
    protected OperationDataFactoryWrapper OperationDataFactory { get; }
    private static StateReplicator();
    public StateReplicator(IFabricStateReplicator nativeStateReplicator, IOperationDataFactory nativeOperationDataFactory);
    protected OperationDataFactoryWrapper get_OperationDataFactory();
    public sealed virtual IOperationStream GetCopyStream();
    public sealed virtual IOperationStream GetReplicationStream();
    public sealed virtual Task`1<long> ReplicateAsync(OperationData operationData, CancellationToken cancellationToken, Int64& sequenceNumber);
    private long ReplicateBeginWrapper2(OperationData operationData, IntPtr tcsHandlePtr);
    public sealed virtual void UpdateReplicatorSettings(ReplicatorSettings settings);
    public sealed virtual ReplicatorSettings GetReplicatorSettings();
    private void UpdateReplicatorSettingsHelper(ReplicatorSettings replicatorSettings);
    private ReplicatorSettings GetReplicatorSettingsHelper();
    private OperationStream GetOperationStream(bool getReplicationStream);
    private long ReplicateBeginWrapper(OperationData operationData, IFabricAsyncOperationCallback callback, IFabricAsyncOperationContext& context);
    private long ReplicateEndWrapper(IFabricAsyncOperationContext context);
    private static Exception ErrorCodeToException(int errorCode);
    [CompilerGeneratedAttribute]
private OperationStream <GetCopyStream>b__9_0();
    [CompilerGeneratedAttribute]
private OperationStream <GetReplicationStream>b__10_0();
    [CompilerGeneratedAttribute]
private ReplicatorSettings <GetReplicatorSettings>b__14_0();
}
public class System.Fabric.StoreBackupInfo : object {
    [CompilerGeneratedAttribute]
private string <BackupFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreBackupOption <BackupOption>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <BackupChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BackupIndex>k__BackingField;
    public string BackupFolder { get; internal set; }
    public StoreBackupOption BackupOption { get; internal set; }
    public Guid BackupChainId { get; private set; }
    public long BackupIndex { get; private set; }
    [CompilerGeneratedAttribute]
public string get_BackupFolder();
    [CompilerGeneratedAttribute]
internal void set_BackupFolder(string value);
    [CompilerGeneratedAttribute]
public StoreBackupOption get_BackupOption();
    [CompilerGeneratedAttribute]
internal void set_BackupOption(StoreBackupOption value);
    [CompilerGeneratedAttribute]
public Guid get_BackupChainId();
    [CompilerGeneratedAttribute]
private void set_BackupChainId(Guid value);
    [CompilerGeneratedAttribute]
public long get_BackupIndex();
    [CompilerGeneratedAttribute]
private void set_BackupIndex(long value);
    internal static StoreBackupInfo FromNative(FABRIC_STORE_BACKUP_INFO nativeBackupInfo);
    public virtual string ToString();
}
public enum System.Fabric.StoreBackupOption : Enum {
    public int value__;
    public static StoreBackupOption Full;
    public static StoreBackupOption Incremental;
    public static StoreBackupOption TruncateLogsOnly;
}
[ObsoleteAttribute("This class is deprecated. To manage Chaos, please use StartChaosAsync, StopChaosAsync, and GetChaosReportAsync APIs from FabricClient.TestManager instead.")]
public class System.Fabric.Testability.Scenario.ChaosTestScenario : TestScenario {
    private static string TraceType;
    private ChaosTestScenarioParameters chaosScenarioParameters;
    private RootActionGenerator rootActionGenerator;
    private ActionTranslator actionTranslator;
    private Random random;
    [CompilerGeneratedAttribute]
private string <ScenarioInstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IterationsCompleted>k__BackingField;
    internal string ScenarioInstanceName { get; private set; }
    internal int IterationsCompleted { get; internal set; }
    internal ChaosTestScenario(FabricClient fabricClient, string testScenarioName, ChaosTestScenarioParameters chaosScenarioParameters);
    public ChaosTestScenario(FabricClient fabricClient, ChaosTestScenarioParameters chaosScenarioParameters);
    private static ChaosTestScenario();
    [CompilerGeneratedAttribute]
internal string get_ScenarioInstanceName();
    [CompilerGeneratedAttribute]
private void set_ScenarioInstanceName(string value);
    [CompilerGeneratedAttribute]
internal int get_IterationsCompleted();
    [CompilerGeneratedAttribute]
internal void set_IterationsCompleted(int value);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<OnExecuteAsync>d__15")]
protected virtual Task OnExecuteAsync(CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<ExecuteIterationsWithPauseAsync>d__16")]
private Task ExecuteIterationsWithPauseAsync(CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<ExecuteFaultIterationAsync>d__17")]
private Task ExecuteFaultIterationAsync(CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<ExecuteTestActionAsync>d__18")]
private Task ExecuteTestActionAsync(FabricTestAction testAction, CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<GetGeneratedActionsAsync>d__19")]
private Task`1<IList`1<FabricTestAction>> GetGeneratedActionsAsync(CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<GetStateSnapshotAsync>d__20")]
private Task`1<ClusterStateSnapshot> GetStateSnapshotAsync(CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<GetClusterStateSnapshotAsync>d__21")]
private Task`1<ClusterStateSnapshot> GetClusterStateSnapshotAsync(CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<IsClusterReadyForFaultsAsync>d__22")]
private Task`1<bool> IsClusterReadyForFaultsAsync(CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<ValidateClusterAsync>d__23")]
private Task ValidateClusterAsync(CancellationToken token);
    private bool SessionNotDone();
    protected virtual void OnDispose(bool disposing);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.ChaosTestScenario/<ValidateScenarioAtExitAsync>d__26")]
protected virtual Task ValidateScenarioAtExitAsync(CancellationToken token);
    [CompilerGeneratedAttribute]
private ClusterStateSnapshot <GetStateSnapshotAsync>b__20_0(Task`1<ClusterStateSnapshot> t);
    [CompilerGeneratedAttribute]
private void <ValidateClusterAsync>b__23_0(Task t);
}
[ObsoleteAttribute("This class is deprecated. Please use System.Fabric.Chaos.DataStructures.ChaosParameters instead.")]
public class System.Fabric.Testability.Scenario.ChaosTestScenarioParameters : TestScenarioParameters {
    private static TimeSpan WaitTimeBetweenIterationsDefault;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitTimeBetweenIterations>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionGeneratorParameters <ActionGeneratorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxClusterStabilizationTimeout>k__BackingField;
    public TimeSpan WaitTimeBetweenIterations { get; public set; }
    internal ActionGeneratorParameters ActionGeneratorParameters { get; internal set; }
    public TimeSpan MaxClusterStabilizationTimeout { get; public set; }
    internal ChaosTestScenarioParameters(TimeSpan maxClusterStabilizationTimeout, long maxConcurrentFaults, bool enableMoveReplicaFaults, TimeSpan timeToRun, bool disableStartStopNodeFaults);
    public ChaosTestScenarioParameters(TimeSpan maxClusterStabilizationTimeout, long maxConcurrentFaults, bool enableMoveReplicaFaults, TimeSpan timeToRun);
    private static ChaosTestScenarioParameters();
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitTimeBetweenIterations();
    [CompilerGeneratedAttribute]
public void set_WaitTimeBetweenIterations(TimeSpan value);
    [CompilerGeneratedAttribute]
internal ActionGeneratorParameters get_ActionGeneratorParameters();
    [CompilerGeneratedAttribute]
internal void set_ActionGeneratorParameters(ActionGeneratorParameters value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxClusterStabilizationTimeout();
    [CompilerGeneratedAttribute]
public void set_MaxClusterStabilizationTimeout(TimeSpan value);
}
[ObsoleteAttribute("This class is deprecated.  Please use Chaos instead https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos")]
public class System.Fabric.Testability.Scenario.FailoverTestScenario : TestScenario {
    private FailoverTestScenarioParameters failoverTestScenarioParameters;
    private ServiceDescription serviceDescription;
    private static string TraceType;
    public FailoverTestScenario(FabricClient fabricClient, FailoverTestScenarioParameters testScenarioParameters);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.FailoverTestScenario/<OnExecuteAsync>d__4")]
protected virtual Task OnExecuteAsync(CancellationToken token);
    protected virtual void OnDispose(bool disposing);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.FailoverTestScenario/<TestReplicaFaultsAsync>d__6")]
private Task TestReplicaFaultsAsync(ReplicaSelector replicaSelector, string replicaRole, bool hasPersistedState, CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.FailoverTestScenario/<InvokeAndValidateFaultAsync>d__7")]
private Task InvokeAndValidateFaultAsync(string actionText, Func`1<Task> action, CancellationToken token);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.FailoverTestScenario/<ValidateScenarioAtExitAsync>d__8")]
protected virtual Task ValidateScenarioAtExitAsync(CancellationToken token);
    [CompilerGeneratedAttribute]
private void <ValidateScenarioAtExitAsync>b__8_0(Task t);
}
[ObsoleteAttribute("FailoverTestScenario and FailoverTestScenarioParameters are deprecated.  Please use Chaos instead https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos")]
public class System.Fabric.Testability.Scenario.FailoverTestScenarioParameters : TestScenarioParameters {
    [CompilerGeneratedAttribute]
private PartitionSelector <PartitionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxServiceStabilizationTimeout>k__BackingField;
    public PartitionSelector PartitionSelector { get; public set; }
    public TimeSpan MaxServiceStabilizationTimeout { get; public set; }
    public FailoverTestScenarioParameters(PartitionSelector partitionSelector, TimeSpan timeToRun, TimeSpan maxServiceStabilizationTimeout);
    [CompilerGeneratedAttribute]
public PartitionSelector get_PartitionSelector();
    [CompilerGeneratedAttribute]
public void set_PartitionSelector(PartitionSelector value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxServiceStabilizationTimeout();
    [CompilerGeneratedAttribute]
public void set_MaxServiceStabilizationTimeout(TimeSpan value);
}
public abstract class System.Fabric.Testability.Scenario.TestScenario : object {
    internal static ExtensionsEvents Log;
    private static int MaxConsecutiveFailures;
    private static string TraceType;
    private bool disposed;
    private int consecutiveFailures;
    private Stopwatch stopwatch;
    [CompilerGeneratedAttribute]
private FabricTestContext <TestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private TestScenarioParameters <ScenarioParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private FabricClient <FabricClient>k__BackingField;
    public ProgressChangedEventHandler ProgressChanged;
    internal FabricTestContext TestContext { get; private set; }
    protected TestScenarioParameters ScenarioParameters { get; private set; }
    protected FabricClient FabricClient { get; private set; }
    protected internal TestScenario(FabricClient fabricClient, TestScenarioParameters testScenarioParameters);
    private static TestScenario();
    [CompilerGeneratedAttribute]
internal FabricTestContext get_TestContext();
    [CompilerGeneratedAttribute]
private void set_TestContext(FabricTestContext value);
    [CompilerGeneratedAttribute]
protected TestScenarioParameters get_ScenarioParameters();
    [CompilerGeneratedAttribute]
private void set_ScenarioParameters(TestScenarioParameters value);
    [CompilerGeneratedAttribute]
protected FabricClient get_FabricClient();
    [CompilerGeneratedAttribute]
private void set_FabricClient(FabricClient value);
    [AsyncStateMachineAttribute("System.Fabric.Testability.Scenario.TestScenario/<ExecuteAsync>d__20")]
public Task ExecuteAsync(CancellationToken token);
    public sealed virtual void Dispose();
    protected abstract virtual Task OnExecuteAsync(CancellationToken token);
    protected abstract virtual void OnDispose(bool disposing);
    protected abstract virtual Task ValidateScenarioAtExitAsync(CancellationToken token);
    protected TimeSpan GetElapsedTime();
    protected void ReportProgress(string progressReport);
    protected void ReportProgress(string format, Object[] args);
    protected void HandleTaskComplete(Task t, string actionId, string actionName);
    private bool RecordError();
    private void RecordSuccess();
}
public abstract class System.Fabric.Testability.Scenario.TestScenarioParameters : object {
    public static TimeSpan WaitTimeBetweenFaultsDefault;
    internal static TimeSpan OperationTimeoutDefault;
    internal static double RequestTimeoutFactorDefault;
    private double requestTimeoutFactor;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeToRun>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitTimeBetweenFaults>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <OperationTimeout>k__BackingField;
    public TimeSpan TimeToRun { get; private set; }
    public TimeSpan WaitTimeBetweenFaults { get; public set; }
    internal TimeSpan OperationTimeout { get; internal set; }
    internal double RequestTimeoutFactor { get; internal set; }
    internal TimeSpan RequestTimeout { get; }
    protected internal TestScenarioParameters(TimeSpan timetoRun);
    private static TestScenarioParameters();
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeToRun();
    [CompilerGeneratedAttribute]
private void set_TimeToRun(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitTimeBetweenFaults();
    [CompilerGeneratedAttribute]
public void set_WaitTimeBetweenFaults(TimeSpan value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_OperationTimeout();
    [CompilerGeneratedAttribute]
internal void set_OperationTimeout(TimeSpan value);
    internal double get_RequestTimeoutFactor();
    internal void set_RequestTimeoutFactor(double value);
    internal TimeSpan get_RequestTimeout();
}
public abstract class System.Fabric.TestCommandProgress : object {
    [CompilerGeneratedAttribute]
private TestCommandProgressState <State>k__BackingField;
    public TestCommandProgressState State { get; internal set; }
    [CompilerGeneratedAttribute]
public TestCommandProgressState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(TestCommandProgressState value);
    public virtual string ToString();
}
public enum System.Fabric.TestCommandProgressState : Enum {
    public int value__;
    public static TestCommandProgressState Invalid;
    public static TestCommandProgressState Running;
    public static TestCommandProgressState RollingBack;
    public static TestCommandProgressState Completed;
    public static TestCommandProgressState Faulted;
    public static TestCommandProgressState Cancelled;
    public static TestCommandProgressState ForceCancelled;
}
internal static class System.Fabric.TestCommandStateHelper : object {
    internal static FABRIC_TEST_COMMAND_PROGRESS_STATE ToNative(TestCommandProgressState state);
    internal static TestCommandProgressState FromNative(FABRIC_TEST_COMMAND_PROGRESS_STATE state);
}
public enum System.Fabric.TestCommandType : Enum {
    public int value__;
    public static TestCommandType Invalid;
    public static TestCommandType PartitionDataLoss;
    public static TestCommandType PartitionQuorumLoss;
    public static TestCommandType PartitionRestart;
    public static TestCommandType NodeTransition;
}
internal static class System.Fabric.TestCommandTypeHelper : object {
    internal static TestCommandType FromNative(FABRIC_TEST_COMMAND_TYPE type);
    internal static FABRIC_TEST_COMMAND_TYPE ToNative(TestCommandType type);
}
[DataContractAttribute]
public class System.Fabric.TokenServiceMetadata : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceDnsName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    [DataMemberAttribute]
public string ServiceName { get; public set; }
    [DataMemberAttribute]
public string ServiceDnsName { get; public set; }
    [DataMemberAttribute]
public string Metadata { get; public set; }
    public TokenServiceMetadata(string metadata, string serviceName, string serviceDnsName);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceDnsName();
    [CompilerGeneratedAttribute]
public void set_ServiceDnsName(string value);
    [CompilerGeneratedAttribute]
public string get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(string value);
    internal void ToNative(PinCollection pin, FABRIC_TOKEN_SERVICE_METADATA& serviceMetadata);
}
internal class System.Fabric.TokenValidationServiceBroker : object {
    private static InteropApi ValidateAsyncApi;
    private ITokenValidationService service;
    internal ITokenValidationService Service { get; }
    internal TokenValidationServiceBroker(ITokenValidationService service);
    private static TokenValidationServiceBroker();
    internal ITokenValidationService get_Service();
    private sealed virtual override IFabricAsyncOperationContext System.Fabric.Interop.NativeTokenValidationService.IFabricTokenValidationService.BeginValidateToken(IntPtr authToken, UInt32 timeoutInMilliseconds, IFabricAsyncOperationCallback callback);
    private sealed virtual override IFabricTokenClaimResult System.Fabric.Interop.NativeTokenValidationService.IFabricTokenValidationService.EndValidateToken(IFabricAsyncOperationContext context);
    private Task`1<ClaimDescriptionList> ValidateTokenAsync(string authToken, TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override IFabricTokenServiceMetadataResult System.Fabric.Interop.NativeTokenValidationService.IFabricTokenValidationService.GetTokenServiceMetadata();
}
public class System.Fabric.Transaction : TransactionBase {
    private IFabricTransaction nativeTransaction;
    private bool runCommitContinuationsAsynchronously;
    internal Transaction(IFabricTransaction nativeTransaction);
    internal Transaction(IFabricTransaction nativeTransaction, bool runCommitContinuationsAsynchronously);
    public void Rollback();
    public Task`1<long> CommitAsync();
    public Task`1<long> CommitAsync(TimeSpan timeout);
    [ObsoleteAttribute("Use CommitAsync() or CommitAsync(TimeSpan) overloads")]
public Task`1<long> CommitAsync(TimeSpan timeout, CancellationToken cancellationToken);
    protected internal virtual void OnDispose();
    protected void ThrowIfDisposed();
    private Task`1<long> InternalCommitAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private void RollbackHelper();
    private IFabricAsyncOperationContext BeginCommitHelper(UInt32 timeoutMilliSeconds, IFabricAsyncOperationCallback callback);
    private long EndCommitHelper(IFabricAsyncOperationContext context);
    [CompilerGeneratedAttribute]
private void <Rollback>b__4_0();
}
public abstract class System.Fabric.TransactionBase : object {
    private bool disposed;
    private Collection`1<IDisposable> linkedDisposables;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionIsolationLevel <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private IFabricTransactionBase <NativeTransactionBase>k__BackingField;
    public Guid Id { get; private set; }
    public TransactionIsolationLevel IsolationLevel { get; private set; }
    internal IFabricTransactionBase NativeTransactionBase { get; private set; }
    internal TransactionBase(IFabricTransactionBase nativeTransactionBase);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public TransactionIsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
private void set_IsolationLevel(TransactionIsolationLevel value);
    [CompilerGeneratedAttribute]
internal IFabricTransactionBase get_NativeTransactionBase();
    [CompilerGeneratedAttribute]
private void set_NativeTransactionBase(IFabricTransactionBase value);
    public sealed virtual void Dispose();
    internal void Link(IDisposable linkedObject);
    protected internal virtual void OnDispose();
    protected bool IsDisposed();
    private void Dispose(bool disposing);
}
public class System.Fabric.TransactionFaultedException : InvalidOperationException {
    public TransactionFaultedException(string message);
    public TransactionFaultedException(string message, Exception inner);
    protected TransactionFaultedException(SerializationInfo info, StreamingContext context);
}
public enum System.Fabric.TransactionIsolationLevel : Enum {
    public int value__;
    public static TransactionIsolationLevel Default;
    public static TransactionIsolationLevel ReadUncommitted;
    public static TransactionIsolationLevel ReadCommitted;
    public static TransactionIsolationLevel RepeatableRead;
    public static TransactionIsolationLevel Snapshot;
    public static TransactionIsolationLevel Serializable;
}
public class System.Fabric.UnknownSafetyCheck : SafetyCheck {
    internal UnknownSafetyCheck(SafetyCheckKind kind);
}
public class System.Fabric.UnknownUpgradeSafetyCheck : UpgradeSafetyCheck {
    internal UnknownUpgradeSafetyCheck(UpgradeSafetyCheckKind kind);
}
public class System.Fabric.UpgradeDomainProgress : UpgradeUnitsProgress {
    internal static UpgradeDomainProgress FromNative(IntPtr nativePtr);
    internal static UpgradeDomainProgress FromNative(FABRIC_UPGRADE_DOMAIN_PROGRESS* nativePtr);
}
public enum System.Fabric.UpgradeDomainState : Enum {
    public int value__;
    public static UpgradeDomainState Invalid;
    public static UpgradeDomainState Pending;
    public static UpgradeDomainState InProgress;
    public static UpgradeDomainState Completed;
}
public class System.Fabric.UpgradeDomainStatus : UpgradeUnitStatus {
    public UpgradeDomainState State { get; internal set; }
    public UpgradeDomainState get_State();
    internal void set_State(UpgradeDomainState value);
    public virtual string ToString();
}
public enum System.Fabric.UpgradeFailureAction : Enum {
    public int value__;
    public static UpgradeFailureAction Invalid;
    public static UpgradeFailureAction Rollback;
    public static UpgradeFailureAction Manual;
}
public enum System.Fabric.UpgradeFailureReason : Enum {
    public int value__;
    public static UpgradeFailureReason None;
    public static UpgradeFailureReason Interrupted;
    public static UpgradeFailureReason HealthCheck;
    public static UpgradeFailureReason UpgradeDomainTimeout;
    public static UpgradeFailureReason OverallUpgradeTimeout;
    public static UpgradeFailureReason ProcessingFailure;
}
public abstract class System.Fabric.UpgradeSafetyCheck : object {
    [CompilerGeneratedAttribute]
private UpgradeSafetyCheckKind <Kind>k__BackingField;
    public UpgradeSafetyCheckKind Kind { get; private set; }
    protected internal UpgradeSafetyCheck(UpgradeSafetyCheckKind kind);
    [CompilerGeneratedAttribute]
public UpgradeSafetyCheckKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(UpgradeSafetyCheckKind value);
    internal static IList`1<UpgradeSafetyCheck> FromNativeList(FABRIC_UPGRADE_SAFETY_CHECK_LIST* nativeList);
    internal static UpgradeSafetyCheck FromNative(FABRIC_UPGRADE_SAFETY_CHECK nativeItem);
}
public enum System.Fabric.UpgradeSafetyCheckKind : Enum {
    public int value__;
    public static UpgradeSafetyCheckKind Invalid;
    public static UpgradeSafetyCheckKind EnsureSeedNodeQuorum;
    public static UpgradeSafetyCheckKind EnsurePartitionQuorum;
    public static UpgradeSafetyCheckKind WaitForPrimaryPlacement;
    public static UpgradeSafetyCheckKind WaitForPrimarySwap;
    public static UpgradeSafetyCheckKind WaitForReconfiguration;
    public static UpgradeSafetyCheckKind WaitForInbuildReplica;
    public static UpgradeSafetyCheckKind EnsureAvailability;
    public static UpgradeSafetyCheckKind WaitForResourceAvailability;
}
public enum System.Fabric.UpgradeSortOrder : Enum {
    public int value__;
    public static UpgradeSortOrder Invalid;
    public static UpgradeSortOrder Default;
    public static UpgradeSortOrder Numeric;
    public static UpgradeSortOrder Lexicographical;
    public static UpgradeSortOrder ReverseNumeric;
    public static UpgradeSortOrder ReverseLexicographical;
}
public class System.Fabric.UpgradeUnitsProgress : object {
    [CompilerGeneratedAttribute]
private string <UpgradeDomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NodeUpgradeProgress> <NodeProgressList>k__BackingField;
    [JsonCustomizationAttribute]
public string UpgradeDomainName { get; internal set; }
    public IList`1<NodeUpgradeProgress> NodeProgressList { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UpgradeDomainName();
    [CompilerGeneratedAttribute]
internal void set_UpgradeDomainName(string value);
    [CompilerGeneratedAttribute]
public IList`1<NodeUpgradeProgress> get_NodeProgressList();
    [CompilerGeneratedAttribute]
internal void set_NodeProgressList(IList`1<NodeUpgradeProgress> value);
}
public enum System.Fabric.UpgradeUnitState : Enum {
    public int value__;
    public static UpgradeUnitState Invalid;
    public static UpgradeUnitState Pending;
    public static UpgradeUnitState InProgress;
    public static UpgradeUnitState Completed;
}
public class System.Fabric.UpgradeUnitStatus : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradeUnitState <State>k__BackingField;
    public string Name { get; internal set; }
    public UpgradeUnitState State { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public UpgradeUnitState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(UpgradeUnitState value);
    public virtual string ToString();
}
public class System.Fabric.WindowsCredentials : SecurityCredentials {
    private string remoteSpn;
    private IList`1<string> remoteIdentities;
    private ProtectionLevel protectionLevel;
    public string RemoteSpn { get; public set; }
    public IList`1<string> RemoteIdentities { get; private set; }
    public ProtectionLevel ProtectionLevel { get; public set; }
    public string get_RemoteSpn();
    public void set_RemoteSpn(string value);
    public IList`1<string> get_RemoteIdentities();
    private void set_RemoteIdentities(IList`1<string> value);
    public ProtectionLevel get_ProtectionLevel();
    public void set_ProtectionLevel(ProtectionLevel value);
    internal static WindowsCredentials CreateFromNative(FABRIC_WINDOWS_CREDENTIALS* nativeCredentials);
}
public class System.Fabric.X509Credentials : SecurityCredentials {
    private IList`1<string> remoteCommonNames;
    private IList`1<string> issuerThumbprints;
    private X509FindType findType;
    private object findValue;
    private StoreLocation storeLocation;
    private string storeName;
    private ProtectionLevel protectionLevel;
    private IList`1<X509IssuerStore> remoteCertIssuers;
    [CompilerGeneratedAttribute]
private IList`1<X509Name> <RemoteX509Names>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <RemoteCertThumbprints>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FindValueSecondary>k__BackingField;
    [ObsoleteAttribute("Deprecated by RemoteCommonNames")]
public IList`1<string> AllowedCommonNames { get; private set; }
    public IList`1<X509Name> RemoteX509Names { get; private set; }
    public IList`1<X509IssuerStore> RemoteCertIssuers { get; public set; }
    public IList`1<string> RemoteCommonNames { get; private set; }
    public IList`1<string> IssuerThumbprints { get; private set; }
    public IList`1<string> RemoteCertThumbprints { get; private set; }
    public X509FindType FindType { get; public set; }
    public object FindValue { get; public set; }
    public object FindValueSecondary { get; public set; }
    public StoreLocation StoreLocation { get; public set; }
    public static string StoreNameDefault { get; }
    public string StoreName { get; public set; }
    public ProtectionLevel ProtectionLevel { get; public set; }
    public IList`1<string> get_AllowedCommonNames();
    private void set_AllowedCommonNames(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<X509Name> get_RemoteX509Names();
    [CompilerGeneratedAttribute]
private void set_RemoteX509Names(IList`1<X509Name> value);
    public IList`1<X509IssuerStore> get_RemoteCertIssuers();
    public void set_RemoteCertIssuers(IList`1<X509IssuerStore> value);
    public IList`1<string> get_RemoteCommonNames();
    private void set_RemoteCommonNames(IList`1<string> value);
    public IList`1<string> get_IssuerThumbprints();
    private void set_IssuerThumbprints(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_RemoteCertThumbprints();
    [CompilerGeneratedAttribute]
private void set_RemoteCertThumbprints(IList`1<string> value);
    public X509FindType get_FindType();
    public void set_FindType(X509FindType value);
    public object get_FindValue();
    public void set_FindValue(object value);
    [CompilerGeneratedAttribute]
public object get_FindValueSecondary();
    [CompilerGeneratedAttribute]
public void set_FindValueSecondary(object value);
    public StoreLocation get_StoreLocation();
    public void set_StoreLocation(StoreLocation value);
    public static string get_StoreNameDefault();
    public string get_StoreName();
    public void set_StoreName(string value);
    public ProtectionLevel get_ProtectionLevel();
    public void set_ProtectionLevel(ProtectionLevel value);
    internal static X509Credentials CreateFromNative(FABRIC_X509_CREDENTIALS* nativeCredentials);
    private static X509FindType CreateFromNative(FABRIC_X509_FIND_TYPE nativeType);
    private static StoreLocation CreateFromNative(FABRIC_X509_STORE_LOCATION nativeStoreLocation);
}
public class System.Fabric.X509IssuerStore : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <IssuerStores>k__BackingField;
    public string Name { get; private set; }
    public IList`1<string> IssuerStores { get; private set; }
    public X509IssuerStore(IList`1<string> issuerStores);
    public X509IssuerStore(string name, IList`1<string> issuerStores);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_IssuerStores();
    [CompilerGeneratedAttribute]
private void set_IssuerStores(IList`1<string> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Fabric.X509Name : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuerCertThumbprint>k__BackingField;
    public string Name { get; private set; }
    public string IssuerCertThumbprint { get; private set; }
    public X509Name(string name, string issuerCertThumbprint);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_IssuerCertThumbprint();
    [CompilerGeneratedAttribute]
private void set_IssuerCertThumbprint(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(X509Name other);
}
internal class System.Fabric.XMLHelper : object {
    internal static void WriteClusterManifest(string path, ClusterManifestType value);
    internal static ClusterManifestType ReadClusterManifest(string clusterManifestPath);
    internal static ClusterManifestType ReadClusterManifestFromContent(string clusterManifestContent);
    internal static InfrastructureInformationType ReadInfrastructureManifest(string infrastructureManifestPath);
    private static void WriteXml(XmlWriter writer, T value);
    internal static void WriteXmlExclusive(string fileName, T value);
    private static FileStream GetExclusiveFilestream(string fileName, FileMode fileMode, UInt32 retryCount);
}
