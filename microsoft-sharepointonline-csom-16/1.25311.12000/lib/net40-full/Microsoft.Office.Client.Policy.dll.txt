public class Microsoft.Office.Client.Policy.ScriptTypeFactory : object {
    public sealed virtual IFromJson CreateObjectFromScriptType(string scriptType, ClientRuntimeContext context);
}
[ScriptTypeAttribute("SP.ComplianceFoundation.ComplianceDlpWorkItemSubmitter")]
public class Microsoft.SharePoint.Client.ComplianceFoundation.ComplianceDlpWorkItemSubmitter : ClientObject {
    [EditorBrowsableAttribute("1")]
public ComplianceDlpWorkItemSubmitter(ClientRuntimeContext context, ObjectPath objectPath);
}
[ScriptTypeAttribute("SP.ComplianceFoundation.ComplianceRetentionWorkItemSubmitter")]
public class Microsoft.SharePoint.Client.ComplianceFoundation.ComplianceRetentionWorkItemSubmitter : ClientObject {
    [EditorBrowsableAttribute("1")]
public ComplianceRetentionWorkItemSubmitter(ClientRuntimeContext context, ObjectPath objectPath);
}
[ScriptTypeAttribute("SP.ComplianceFoundation.Models.ComplianceTagInfo")]
public class Microsoft.SharePoint.Client.ComplianceFoundation.Models.ComplianceTagInfo : ClientValueObject {
    private bool m_isRecord;
    private bool m_isRegulatory;
    private bool m_shouldKeep;
    private string m_tagName;
    private Guid m_unifiedRuleId;
    private Guid m_unifiedTagId;
    [RemoteAttribute]
public bool IsRecord { get; public set; }
    [RemoteAttribute]
public bool IsRegulatory { get; public set; }
    [RemoteAttribute]
public bool ShouldKeep { get; public set; }
    [RemoteAttribute]
public string TagName { get; public set; }
    [RemoteAttribute]
public Guid UnifiedRuleId { get; public set; }
    [RemoteAttribute]
public Guid UnifiedTagId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_IsRecord();
    public void set_IsRecord(bool value);
    public bool get_IsRegulatory();
    public void set_IsRegulatory(bool value);
    public bool get_ShouldKeep();
    public void set_ShouldKeep(bool value);
    public string get_TagName();
    public void set_TagName(string value);
    public Guid get_UnifiedRuleId();
    public void set_UnifiedRuleId(Guid value);
    public Guid get_UnifiedTagId();
    public void set_UnifiedTagId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.ComplianceFoundation.Models.PreservedCloudAttachment")]
public class Microsoft.SharePoint.Client.ComplianceFoundation.Models.PreservedCloudAttachment : ClientValueObject {
    private string m_compositeDocumentId;
    private string m_url;
    [RemoteAttribute]
public string CompositeDocumentId { get; public set; }
    [RemoteAttribute]
public string Url { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_CompositeDocumentId();
    public void set_CompositeDocumentId(string value);
    public string get_Url();
    public void set_Url(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.ComplianceFoundation.PreserveDocumentSubmitter")]
public class Microsoft.SharePoint.Client.ComplianceFoundation.PreserveDocumentSubmitter : ClientObject {
    [EditorBrowsableAttribute("1")]
public PreserveDocumentSubmitter(ClientRuntimeContext context, ObjectPath objectPath);
}
[ScriptTypeAttribute("SP.CompliancePolicy.ComplianceTag")]
public class Microsoft.SharePoint.Client.CompliancePolicy.ComplianceTag : ClientValueObject {
    private bool m_acceptMessagesOnlyFromSendersOrMembers;
    private string m_accessType;
    private string m_allowAccessFromUnmanagedDevice;
    private bool m_autoDelete;
    private bool m_blockDelete;
    private bool m_blockEdit;
    private int m_complianceFlags;
    private bool m_containsSiteLabel;
    private string m_displayName;
    private string m_encryptionRMSTemplateId;
    private bool m_hasRetentionAction;
    private bool m_isEventTag;
    private string m_multiStageReviewerEmail;
    private string m_nextStageComplianceTag;
    private string m_notes;
    private bool m_requireSenderAuthenticationEnabled;
    private string m_reviewerEmail;
    private string m_sharingCapabilities;
    private bool m_superLock;
    private int m_tagDuration;
    private Guid m_tagId;
    private string m_tagName;
    private string m_tagRetentionBasedOn;
    private bool m_unlockedAsDefault;
    [RemoteAttribute]
public bool AcceptMessagesOnlyFromSendersOrMembers { get; }
    [RemoteAttribute]
public string AccessType { get; }
    [RemoteAttribute]
public string AllowAccessFromUnmanagedDevice { get; }
    [RemoteAttribute]
public bool AutoDelete { get; }
    [RemoteAttribute]
public bool BlockDelete { get; }
    [RemoteAttribute]
public bool BlockEdit { get; }
    [RemoteAttribute]
public int ComplianceFlags { get; }
    [RemoteAttribute]
public bool ContainsSiteLabel { get; }
    [RemoteAttribute]
public string DisplayName { get; }
    [RemoteAttribute]
public string EncryptionRMSTemplateId { get; }
    [RemoteAttribute]
public bool HasRetentionAction { get; }
    [RemoteAttribute]
public bool IsEventTag { get; }
    [RemoteAttribute]
public string MultiStageReviewerEmail { get; }
    [RemoteAttribute]
public string NextStageComplianceTag { get; }
    [RemoteAttribute]
public string Notes { get; }
    [RemoteAttribute]
public bool RequireSenderAuthenticationEnabled { get; }
    [RemoteAttribute]
public string ReviewerEmail { get; }
    [RemoteAttribute]
public string SharingCapabilities { get; }
    [RemoteAttribute]
public bool SuperLock { get; }
    [RemoteAttribute]
public int TagDuration { get; }
    [RemoteAttribute]
public Guid TagId { get; }
    [RemoteAttribute]
public string TagName { get; }
    [RemoteAttribute]
public string TagRetentionBasedOn { get; }
    [RemoteAttribute]
public bool UnlockedAsDefault { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_AcceptMessagesOnlyFromSendersOrMembers();
    public string get_AccessType();
    public string get_AllowAccessFromUnmanagedDevice();
    public bool get_AutoDelete();
    public bool get_BlockDelete();
    public bool get_BlockEdit();
    public int get_ComplianceFlags();
    public bool get_ContainsSiteLabel();
    public string get_DisplayName();
    public string get_EncryptionRMSTemplateId();
    public bool get_HasRetentionAction();
    public bool get_IsEventTag();
    public string get_MultiStageReviewerEmail();
    public string get_NextStageComplianceTag();
    public string get_Notes();
    public bool get_RequireSenderAuthenticationEnabled();
    public string get_ReviewerEmail();
    public string get_SharingCapabilities();
    public bool get_SuperLock();
    public int get_TagDuration();
    public Guid get_TagId();
    public string get_TagName();
    public string get_TagRetentionBasedOn();
    public bool get_UnlockedAsDefault();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.CompliancePolicy.DlpAccessScope : Enum {
    public int value__;
    public static DlpAccessScope None;
    public static DlpAccessScope InternalUsersOnly;
    public static DlpAccessScope IncludeExternalUsers;
}
[ScriptTypeAttribute("SP.CompliancePolicy.DlpClassificationResult")]
public class Microsoft.SharePoint.Client.CompliancePolicy.DlpClassificationResult : ClientValueObject {
    private string m_classificationId;
    private int m_confidence;
    private int m_count;
    [RemoteAttribute]
public string ClassificationId { get; public set; }
    [RemoteAttribute]
public int Confidence { get; public set; }
    [RemoteAttribute]
public int Count { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ClassificationId();
    public void set_ClassificationId(string value);
    public int get_Confidence();
    public void set_Confidence(int value);
    public int get_Count();
    public void set_Count(int value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.CompliancePolicy.PendingReviewItemsStatistics")]
public class Microsoft.SharePoint.Client.CompliancePolicy.PendingReviewItemsStatistics : ClientValueObject {
    private string m_labelId;
    private string m_labelName;
    private int m_pendingReviewItemsCount;
    [RemoteAttribute]
public string LabelId { get; }
    [RemoteAttribute]
public string LabelName { get; }
    [RemoteAttribute]
public int PendingReviewItemsCount { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_LabelId();
    public string get_LabelName();
    public int get_PendingReviewItemsCount();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.CompliancePolicy.PolicyEvaluationInfo")]
public class Microsoft.SharePoint.Client.CompliancePolicy.PolicyEvaluationInfo : ClientObject {
    [RemoteAttribute]
public String[] ApplicablePolicies { get; }
    [RemoteAttribute]
public DlpAccessScope DlpAccessScope { get; }
    [RemoteAttribute]
public String[] MatchedRules { get; }
    [RemoteAttribute]
public String[] OverriddenRules { get; }
    [EditorBrowsableAttribute("1")]
public PolicyEvaluationInfo(ClientRuntimeContext context, ObjectPath objectPath);
    public String[] get_ApplicablePolicies();
    public DlpAccessScope get_DlpAccessScope();
    public String[] get_MatchedRules();
    public String[] get_OverriddenRules();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.CompliancePolicy.PolicyEvaluationInfoEnums : Enum {
    public int value__;
    public static PolicyEvaluationInfoEnums DlpAccessScope;
    public static PolicyEvaluationInfoEnums ApplicablePolicies;
    public static PolicyEvaluationInfoEnums OverriddenRules;
    public static PolicyEvaluationInfoEnums MatchedRules;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.PolicyEvaluationInfoPropertyNames : object {
    public static string ApplicablePolicies;
    public static string DlpAccessScope;
    public static string MatchedRules;
    public static string OverriddenRules;
}
public enum Microsoft.SharePoint.Client.CompliancePolicy.PolicyFactoryCaller : Enum {
    public int value__;
    public static PolicyFactoryCaller Unknown;
    public static PolicyFactoryCaller UI;
    public static PolicyFactoryCaller Retention;
    public static PolicyFactoryCaller NonRetention;
    public static PolicyFactoryCaller TabTesting;
}
public enum Microsoft.SharePoint.Client.CompliancePolicy.PolicyScenario : Enum {
    public int value__;
    public static PolicyScenario Retention;
    public static PolicyScenario Hold;
    public static PolicyScenario Dlp;
    public static PolicyScenario DeviceSettings;
    public static PolicyScenario AuditSettings;
    public static PolicyScenario DeviceConditionalAccess;
    public static PolicyScenario DeviceTenantConditionalAccess;
    public static PolicyScenario AuditAlert;
    public static PolicyScenario CaseHold;
}
[ScriptTypeAttribute("SP.CompliancePolicy.PolicyStoreFactory")]
public class Microsoft.SharePoint.Client.CompliancePolicy.PolicyStoreFactory : ClientObject {
    public PolicyStoreFactory(ClientRuntimeContext context, Web spWeb, PolicyFactoryCaller factoryCaller, bool initializeWithUrl);
    [EditorBrowsableAttribute("1")]
public PolicyStoreFactory(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public IEnumerable`1<ComplianceTag> GetComplianceTags();
    [RemoteAttribute]
public void UpdatePolicyEvent(SPPolicyEvent policyEvent);
    [RemoteAttribute]
public SPPolicyRule GetPolicyRule(Guid policyRuleId, bool throwIfNull);
}
public enum Microsoft.SharePoint.Client.CompliancePolicy.PolicyTipOverrideResult : Enum {
    public int value__;
    public static PolicyTipOverrideResult None;
    public static PolicyTipOverrideResult FalsePositiveReported;
    public static PolicyTipOverrideResult Overridden;
    public static PolicyTipOverrideResult FalsePositiveReportedAndOverridden;
}
public enum Microsoft.SharePoint.Client.CompliancePolicy.PolicyTipOverrideUserAction : Enum {
    public int value__;
    public static PolicyTipOverrideUserAction Override;
    public static PolicyTipOverrideUserAction ReportFalsePositive;
    public static PolicyTipOverrideUserAction ReportFalsePositiveAndOverride;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPContainerId")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPContainerId : ClientObject {
    [RemoteAttribute]
public SPContainerType ContainerType { get; public set; }
    [RemoteAttribute]
public Guid ListId { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public string SiteUrl { get; public set; }
    [RemoteAttribute]
public Guid TenantId { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public int Version { get; public set; }
    [RemoteAttribute]
public Guid WebId { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPContainerId(ClientRuntimeContext context, ObjectPath objectPath);
    public SPContainerType get_ContainerType();
    public void set_ContainerType(SPContainerType value);
    public Guid get_ListId();
    public void set_ListId(Guid value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public string get_SiteUrl();
    public void set_SiteUrl(string value);
    public Guid get_TenantId();
    public void set_TenantId(Guid value);
    public string get_Title();
    public void set_Title(string value);
    public int get_Version();
    public void set_Version(int value);
    public Guid get_WebId();
    public void set_WebId(Guid value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public static SPContainerId CreateFromList(ClientRuntimeContext context, List list);
    [RemoteAttribute]
public static SPContainerId CreateFromWeb(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static SPContainerId CreateFromSite(ClientRuntimeContext context, Site site);
    [RemoteAttribute]
public static SPContainerId Create(ClientRuntimeContext context, string containerId);
    [RemoteAttribute]
public ClientResult`1<string> Serialize();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPContainerIdPropertyNames : object {
    public static string ContainerType;
    public static string ListId;
    public static string SiteId;
    public static string SiteUrl;
    public static string TenantId;
    public static string Title;
    public static string Version;
    public static string WebId;
}
public enum Microsoft.SharePoint.Client.CompliancePolicy.SPContainerType : Enum {
    public int value__;
    public static SPContainerType Site;
    public static SPContainerType Web;
    public static SPContainerType List;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPPolicyAssociation")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyAssociation : ClientObject {
    [RemoteAttribute]
public bool AllowOverride { get; public set; }
    [RemoteAttribute]
public string Comment { get; public set; }
    [RemoteAttribute]
public Guid DefaultPolicyDefinitionConfigId { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public Guid Identity { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public int PolicyApplyStatus { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<Guid> PolicyDefinitionConfigIds { get; public set; }
    [RemoteAttribute]
public string Scope { get; public set; }
    [RemoteAttribute]
public int Source { get; public set; }
    [RemoteAttribute]
public Guid Version { get; public set; }
    [RemoteAttribute]
public DateTime WhenAppliedUTC { get; public set; }
    [RemoteAttribute]
public DateTime WhenChangedUTC { get; public set; }
    [RemoteAttribute]
public DateTime WhenCreatedUTC { get; public set; }
    [RemoteAttribute]
public int Workload { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPPolicyAssociation(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_AllowOverride();
    public void set_AllowOverride(bool value);
    public string get_Comment();
    public void set_Comment(string value);
    public Guid get_DefaultPolicyDefinitionConfigId();
    public void set_DefaultPolicyDefinitionConfigId(Guid value);
    public string get_Description();
    public void set_Description(string value);
    public Guid get_Identity();
    public void set_Identity(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public int get_PolicyApplyStatus();
    public void set_PolicyApplyStatus(int value);
    public IEnumerable`1<Guid> get_PolicyDefinitionConfigIds();
    public void set_PolicyDefinitionConfigIds(IEnumerable`1<Guid> value);
    public string get_Scope();
    public void set_Scope(string value);
    public int get_Source();
    public void set_Source(int value);
    public Guid get_Version();
    public void set_Version(Guid value);
    public DateTime get_WhenAppliedUTC();
    public void set_WhenAppliedUTC(DateTime value);
    public DateTime get_WhenChangedUTC();
    public void set_WhenChangedUTC(DateTime value);
    public DateTime get_WhenCreatedUTC();
    public void set_WhenCreatedUTC(DateTime value);
    public int get_Workload();
    public void set_Workload(int value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyAssociationPropertyNames : object {
    public static string AllowOverride;
    public static string Comment;
    public static string DefaultPolicyDefinitionConfigId;
    public static string Description;
    public static string Identity;
    public static string Name;
    public static string PolicyApplyStatus;
    public static string PolicyDefinitionConfigIds;
    public static string Scope;
    public static string Source;
    public static string Version;
    public static string WhenAppliedUTC;
    public static string WhenChangedUTC;
    public static string WhenCreatedUTC;
    public static string Workload;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPPolicyBinding")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyBinding : ClientObject {
    [RemoteAttribute]
public int BindingType { get; public set; }
    [RemoteAttribute]
public Guid Identity { get; public set; }
    [RemoteAttribute]
public bool IsExempt { get; public set; }
    [RemoteAttribute]
public int Mode { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public int PolicyApplyStatus { get; public set; }
    [RemoteAttribute]
public Guid PolicyAssociationConfigId { get; public set; }
    [RemoteAttribute]
public Guid PolicyDefinitionConfigId { get; public set; }
    [RemoteAttribute]
public Guid PolicyRuleConfigId { get; public set; }
    [RemoteAttribute]
public string Scope { get; public set; }
    [RemoteAttribute]
public int Source { get; public set; }
    [RemoteAttribute]
public Guid Version { get; public set; }
    [RemoteAttribute]
public DateTime WhenAppliedUTC { get; public set; }
    [RemoteAttribute]
public DateTime WhenChangedUTC { get; public set; }
    [RemoteAttribute]
public DateTime WhenCreatedUTC { get; public set; }
    [RemoteAttribute]
public int Workload { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPPolicyBinding(ClientRuntimeContext context, ObjectPath objectPath);
    public int get_BindingType();
    public void set_BindingType(int value);
    public Guid get_Identity();
    public void set_Identity(Guid value);
    public bool get_IsExempt();
    public void set_IsExempt(bool value);
    public int get_Mode();
    public void set_Mode(int value);
    public string get_Name();
    public void set_Name(string value);
    public int get_PolicyApplyStatus();
    public void set_PolicyApplyStatus(int value);
    public Guid get_PolicyAssociationConfigId();
    public void set_PolicyAssociationConfigId(Guid value);
    public Guid get_PolicyDefinitionConfigId();
    public void set_PolicyDefinitionConfigId(Guid value);
    public Guid get_PolicyRuleConfigId();
    public void set_PolicyRuleConfigId(Guid value);
    public string get_Scope();
    public void set_Scope(string value);
    public int get_Source();
    public void set_Source(int value);
    public Guid get_Version();
    public void set_Version(Guid value);
    public DateTime get_WhenAppliedUTC();
    public void set_WhenAppliedUTC(DateTime value);
    public DateTime get_WhenChangedUTC();
    public void set_WhenChangedUTC(DateTime value);
    public DateTime get_WhenCreatedUTC();
    public void set_WhenCreatedUTC(DateTime value);
    public int get_Workload();
    public void set_Workload(int value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyBindingPropertyNames : object {
    public static string BindingType;
    public static string Identity;
    public static string IsExempt;
    public static string Mode;
    public static string Name;
    public static string PolicyApplyStatus;
    public static string PolicyAssociationConfigId;
    public static string PolicyDefinitionConfigId;
    public static string PolicyRuleConfigId;
    public static string Scope;
    public static string Source;
    public static string Version;
    public static string WhenAppliedUTC;
    public static string WhenChangedUTC;
    public static string WhenCreatedUTC;
    public static string Workload;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPPolicyDefinition")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyDefinition : ClientObject {
    [RemoteAttribute]
public string Comment { get; public set; }
    [RemoteAttribute]
public string CreatedBy { get; public set; }
    [RemoteAttribute]
public Guid DefaultPolicyRuleConfigId { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public bool Enabled { get; public set; }
    [RemoteAttribute]
public Guid Identity { get; public set; }
    [RemoteAttribute]
public string LastModifiedBy { get; public set; }
    [RemoteAttribute]
public int Mode { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public string PolicyBlob { get; public set; }
    [RemoteAttribute]
public int Priority { get; public set; }
    [RemoteAttribute]
public int Scenario { get; public set; }
    [RemoteAttribute]
public int Source { get; public set; }
    [RemoteAttribute]
public Guid Version { get; public set; }
    [RemoteAttribute]
public DateTime WhenChangedUTC { get; public set; }
    [RemoteAttribute]
public DateTime WhenCreatedUTC { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPPolicyDefinition(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Comment();
    public void set_Comment(string value);
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    public Guid get_DefaultPolicyRuleConfigId();
    public void set_DefaultPolicyRuleConfigId(Guid value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public Guid get_Identity();
    public void set_Identity(Guid value);
    public string get_LastModifiedBy();
    public void set_LastModifiedBy(string value);
    public int get_Mode();
    public void set_Mode(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_PolicyBlob();
    public void set_PolicyBlob(string value);
    public int get_Priority();
    public void set_Priority(int value);
    public int get_Scenario();
    public void set_Scenario(int value);
    public int get_Source();
    public void set_Source(int value);
    public Guid get_Version();
    public void set_Version(Guid value);
    public DateTime get_WhenChangedUTC();
    public void set_WhenChangedUTC(DateTime value);
    public DateTime get_WhenCreatedUTC();
    public void set_WhenCreatedUTC(DateTime value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyDefinitionPropertyNames : object {
    public static string Comment;
    public static string CreatedBy;
    public static string DefaultPolicyRuleConfigId;
    public static string Description;
    public static string Enabled;
    public static string Identity;
    public static string LastModifiedBy;
    public static string Mode;
    public static string Name;
    public static string PolicyBlob;
    public static string Priority;
    public static string Scenario;
    public static string Source;
    public static string Version;
    public static string WhenChangedUTC;
    public static string WhenCreatedUTC;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPPolicyEvent")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyEvent : ClientObject {
    [RemoteAttribute]
public DateTime EventDateTime { get; public set; }
    [RemoteAttribute]
public String[] EventTags { get; public set; }
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public string StatusData { get; public set; }
    [RemoteAttribute]
public DateTime WhenChangedUTC { get; public set; }
    [RemoteAttribute]
public DateTime WhenCreatedUTC { get; public set; }
    [RemoteAttribute]
public int Workload { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPPolicyEvent(ClientRuntimeContext context, ObjectPath objectPath);
    public DateTime get_EventDateTime();
    public void set_EventDateTime(DateTime value);
    public String[] get_EventTags();
    public void set_EventTags(String[] value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public string get_StatusData();
    public void set_StatusData(string value);
    public DateTime get_WhenChangedUTC();
    public void set_WhenChangedUTC(DateTime value);
    public DateTime get_WhenCreatedUTC();
    public void set_WhenCreatedUTC(DateTime value);
    public int get_Workload();
    public void set_Workload(int value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyEventPropertyNames : object {
    public static string EventDateTime;
    public static string EventTags;
    public static string Id;
    public static string Name;
    public static string StatusData;
    public static string WhenChangedUTC;
    public static string WhenCreatedUTC;
    public static string Workload;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPPolicyRule")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyRule : ClientObject {
    [RemoteAttribute]
public string Comment { get; public set; }
    [RemoteAttribute]
public string CreatedBy { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public bool Enabled { get; public set; }
    [RemoteAttribute]
public Guid Identity { get; public set; }
    [RemoteAttribute]
public string LastModifiedBy { get; public set; }
    [RemoteAttribute]
public int Mode { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public Guid PolicyDefinitionConfigId { get; public set; }
    [RemoteAttribute]
public int Priority { get; public set; }
    [RemoteAttribute]
public string RuleBlob { get; public set; }
    [RemoteAttribute]
public int Scenario { get; public set; }
    [RemoteAttribute]
public int Source { get; public set; }
    [RemoteAttribute]
public Guid Version { get; public set; }
    [RemoteAttribute]
public DateTime WhenChangedUTC { get; public set; }
    [RemoteAttribute]
public DateTime WhenCreatedUTC { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPPolicyRule(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Comment();
    public void set_Comment(string value);
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public Guid get_Identity();
    public void set_Identity(Guid value);
    public string get_LastModifiedBy();
    public void set_LastModifiedBy(string value);
    public int get_Mode();
    public void set_Mode(int value);
    public string get_Name();
    public void set_Name(string value);
    public Guid get_PolicyDefinitionConfigId();
    public void set_PolicyDefinitionConfigId(Guid value);
    public int get_Priority();
    public void set_Priority(int value);
    public string get_RuleBlob();
    public void set_RuleBlob(string value);
    public int get_Scenario();
    public void set_Scenario(int value);
    public int get_Source();
    public void set_Source(int value);
    public Guid get_Version();
    public void set_Version(Guid value);
    public DateTime get_WhenChangedUTC();
    public void set_WhenChangedUTC(DateTime value);
    public DateTime get_WhenCreatedUTC();
    public void set_WhenCreatedUTC(DateTime value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyRulePropertyNames : object {
    public static string Comment;
    public static string CreatedBy;
    public static string Description;
    public static string Enabled;
    public static string Identity;
    public static string LastModifiedBy;
    public static string Mode;
    public static string Name;
    public static string PolicyDefinitionConfigId;
    public static string Priority;
    public static string RuleBlob;
    public static string Scenario;
    public static string Source;
    public static string Version;
    public static string WhenChangedUTC;
    public static string WhenCreatedUTC;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPPolicyStore")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyStore : ClientObject {
    public SPPolicyStore(ClientRuntimeContext context, Web web);
    [EditorBrowsableAttribute("1")]
public SPPolicyStore(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public SPSyncNotificationEndpointInfo NotifyUnifiedPolicySyncForLogicalWorkload(string notificationId, string syncSvcUrl, String[] changeInfos, bool syncNow, bool fullSyncForTenant, int workload);
    [RemoteAttribute]
public SPScsTenantEndPointInfo GetSPScsTenantEndPointInfo(string eopCorrelationId);
    [RemoteAttribute]
public ClientResult`1<bool> NotifyUnifiedFileSyncForSPTenant(int syncFileType, Guid notificationId);
    [RemoteAttribute]
public static SPPolicyAssociation CreatePolicyAssociation(ClientRuntimeContext context);
    [RemoteAttribute]
public void UpdatePolicyAssociation(SPPolicyAssociation policyAssociation);
    [RemoteAttribute]
public ClientObjectList`1<SPPolicyAssociation> GetPolicyAssociations(int scenario, int workload);
    [RemoteAttribute]
public SPPolicyAssociation GetPolicyAssociation(Guid policyAssociationId);
    [RemoteAttribute]
public SPPolicyAssociation GetPolicyAssociationForContainer(string containerId);
    [RemoteAttribute]
public void DeletePolicyAssociation(Guid policyAssociationId);
    [RemoteAttribute]
public List GetPolicyEventList();
    [RemoteAttribute]
public void UpdatePolicyEvent(SPPolicyEvent policyEvent);
    [RemoteAttribute]
public SPPolicyEvent GetPolicyEvent(Guid id);
    [RemoteAttribute]
public ClientObjectList`1<SPPolicyEvent> GetPolicyEvents(DateTime startDate, DateTime endDate);
    [RemoteAttribute]
public static SPPolicyEvent CreatePolicyEvent(ClientRuntimeContext context);
    [RemoteAttribute]
public static SPPolicyRule CreatePolicyRule(ClientRuntimeContext context);
    [RemoteAttribute]
public void UpdatePolicyRule(SPPolicyRule policyRule);
    [RemoteAttribute]
public SPPolicyRule GetPolicyRule(Guid policyRuleId, bool throwIfNull);
    [RemoteAttribute]
public ClientObjectList`1<SPPolicyRule> GetPolicyRules(Guid policyDefinitionId);
    [RemoteAttribute]
public void DeletePolicyRule(Guid policyRuleId);
    [RemoteAttribute]
public static SPPolicyDefinition CreatePolicyDefinition(ClientRuntimeContext context);
    [RemoteAttribute]
public void UpdatePolicyDefinition(SPPolicyDefinition policyDefinition);
    [RemoteAttribute]
public SPPolicyDefinition GetPolicyDefinition(Guid policyDefinitionId);
    [RemoteAttribute]
public void DeletePolicyDefinition(Guid policyDefinitionId);
    [RemoteAttribute]
public ClientObjectList`1<SPPolicyBinding> GetPolicyBindings(int workload);
    [RemoteAttribute]
public IEnumerable`1<ComplianceTag> GetComplianceTags();
    [RemoteAttribute]
public ClientObjectList`1<SPPolicyDefinition> GetPolicyDefinitions(int scenario);
    [RemoteAttribute]
public static SPPolicyBinding CreatePolicyBinding(ClientRuntimeContext context);
    [RemoteAttribute]
public void UpdatePolicyBinding(SPPolicyBinding policyBinding);
    [RemoteAttribute]
public SPPolicyBinding GetPolicyBinding(Guid policyBindingId);
    [RemoteAttribute]
public void DeletePolicyBinding(Guid policyBindingId);
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPPolicyStoreProxy")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyStoreProxy : ClientObject {
    [RemoteAttribute]
public string PolicyStoreUrl { get; }
    [RemoteAttribute]
public string ReviewCenterUrl { get; }
    [RemoteAttribute]
public bool SupportContentTypeRetention { get; public set; }
    public SPPolicyStoreProxy(ClientRuntimeContext context, Web web);
    [EditorBrowsableAttribute("1")]
public SPPolicyStoreProxy(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_PolicyStoreUrl();
    public string get_ReviewCenterUrl();
    public bool get_SupportContentTypeRetention();
    public void set_SupportContentTypeRetention(bool value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public static ClientResult`1<PolicyTipOverrideResult> OverridePolicyTip(ClientRuntimeContext context, string itemUrl, PolicyTipOverrideUserAction userAction, string justification, String[] rules, DlpClassificationResult[] classificationResults);
    [RemoteAttribute]
public static PolicyEvaluationInfo GetPolicyEvaluationInfo(ClientRuntimeContext context, string itemUrl, PolicyScenario policyScenario, PolicyEvaluationInfoEnums infos);
    [RemoteAttribute]
public static void ApplyDlpActions(ClientRuntimeContext context, string itemUrl, string actionsPayload);
    [RemoteAttribute]
public static ClientResult`1<bool> UnArchiveSite(ClientRuntimeContext context, string siteUrl);
    [RemoteAttribute]
public static IList`1<ComplianceTag> GetAvailableTagsForSite(ClientRuntimeContext context, string siteUrl);
    [RemoteAttribute]
public static IList`1<ComplianceTag> GetAvailableTagsForSiteLabel(ClientRuntimeContext context);
    [RemoteAttribute]
public static ClientResult`1<ComplianceTag> GetListComplianceTag(ClientRuntimeContext context, string listUrl);
    [RemoteAttribute]
public static void SetListComplianceTag(ClientRuntimeContext context, string listUrl, string complianceTagValue, bool blockDelete, bool blockEdit, bool syncToItems);
    [RemoteAttribute]
public static void SetListComplianceTagWithMetaInfo(ClientRuntimeContext context, string listUrl, string complianceTagValue, bool blockDelete, bool blockEdit, DateTime complianceTagWrittenTime, string userEmailAddress, bool syncToItems);
    [RemoteAttribute]
public static IList`1<int> SetComplianceTagOnBulkItems(ClientRuntimeContext context, IList`1<int> itemIds, string listUrl, string complianceTagValue);
    [RemoteAttribute]
public static ClientResult`1<int> GetHoldGracePeriodInDays(ClientRuntimeContext context);
    [RemoteAttribute]
public static void SetHoldGracePeriodInDays(ClientRuntimeContext context, int gracePeriodInDays);
    [RemoteAttribute]
public static ClientResult`1<bool> GetAdvancedRecordVersioningDisabled(ClientRuntimeContext context);
    [RemoteAttribute]
public static void SetAdvancedRecordVersioningDisabled(ClientRuntimeContext context, bool disabled);
    [RemoteAttribute]
public static ClientResult`1<bool> GetExpandFileVersionsInPHLEnabled(ClientRuntimeContext context);
    [RemoteAttribute]
public static ClientResult`1<bool> GetAllowFilesWithKeepLabelToBeDeletedSPO(ClientRuntimeContext context);
    [RemoteAttribute]
public static void SetAllowFilesWithKeepLabelToBeDeletedSPO(ClientRuntimeContext context, bool allowDeletion);
    [RemoteAttribute]
public static ClientResult`1<bool> GetAllowFilesWithKeepLabelToBeDeletedODB(ClientRuntimeContext context);
    [RemoteAttribute]
public static void SetAllowFilesWithKeepLabelToBeDeletedODB(ClientRuntimeContext context, bool allowDeletion);
    [RemoteAttribute]
public static ClientResult`1<string> GetSubstrateAzureConnection(ClientRuntimeContext context, string siteUrl, string siteId);
    [RemoteAttribute]
public static ClientResult`1<bool> GetMetadataEditBlockingEnabled(ClientRuntimeContext context);
    [RemoteAttribute]
public static void SetMetadataEditBlockingEnabled(ClientRuntimeContext context, bool enabled);
    [RemoteAttribute]
public ClientArrayResult`1<int> MarkReviewItemsForDeletion(Int32[] itemIds);
    [RemoteAttribute]
public ClientArrayResult`1<int> RetagReviewItems(Int32[] itemIds, string newTag, bool newTagIsRecord, bool newTagBlockDelete, bool newTagIsEventBased);
    [RemoteAttribute]
public ClientArrayResult`1<int> RetagReviewItemsWithMetas(Int32[] itemIds, string newTagName, String[] newTagMetas);
    [RemoteAttribute]
public ClientArrayResult`1<string> RetagUnifiedReviewItemsWithMetas(String[] itemIds, string originalTagName, string newTagName, String[] newTagMetas);
    [RemoteAttribute]
public ClientArrayResult`1<int> ExtendReviewItemsRetention(Int32[] itemIds, DateTime extensionDate);
    [RemoteAttribute]
public ClientResult`1<IDictionary`2<string, PendingReviewItemsStatistics>> GetPendingReviewItemsStatistics();
    [RemoteAttribute]
public ClientResult`1<Stream> OpenBinaryStreamForOriginalItem(int itemId);
    [RemoteAttribute]
public IList`1<string> GetDynamicScopeBindingBySiteId(string siteId);
    [RemoteAttribute]
public void BulkUpdateDynamicScopeBindings(String[] scopesToAdd, String[] scopesToRemove, string siteId);
    [RemoteAttribute]
public IEnumerable`1<string> GetSiteAdaptivePolicies(string siteId);
    [RemoteAttribute]
public void UpdateSiteAdaptivePolicies(String[] policiesToAdd, String[] policiesToRemove, string siteId);
    [RemoteAttribute]
public void SetContainerRetentionPolicy(string siteId, Guid defaultContainerLabel);
    [RemoteAttribute]
public void RemoveContainerRetentionPolicy(string siteId);
    [RemoteAttribute]
public void UpdateContainerSetting(string siteId, string externalId, int settingType, string setting);
    [RemoteAttribute]
public void RemoveContainerSettings(String[] externalId);
    [RemoteAttribute]
public static ClientResult`1<string> GetSiteCompliancePolicyProperty(ClientRuntimeContext context, string siteUrl, string siteId, string propertyName);
    [RemoteAttribute]
public static ClientResult`1<string> GetTenantAndSiteHoldsApplicableForSite(ClientRuntimeContext context, string siteId);
    [RemoteAttribute]
public static void SetSiteCompliancePolicyProperty(ClientRuntimeContext context, string siteUrl, string siteId, string propertyName, string propertyValue);
    [RemoteAttribute]
public static void RegisterSiteHoldEventReceiver(ClientRuntimeContext context, string siteUrl, string siteId);
    [RemoteAttribute]
public static void RegisterSiteItemDeleteEventReceiver(ClientRuntimeContext context, string siteUrl, string siteId);
    [RemoteAttribute]
public static void UnRegisterHoldEventReceiver(ClientRuntimeContext context, string siteUrl, string siteId);
    [RemoteAttribute]
public static void ActivateHoldFeatureOnSite(ClientRuntimeContext context, string siteUrl, string siteId);
    [RemoteAttribute]
public static ClientResult`1<string> GetSiteSubscriptionProperty(ClientRuntimeContext context, Guid tenantId, string propertyName);
    [RemoteAttribute]
public static void SetSiteSubscriptionProperty(ClientRuntimeContext context, Guid tenantId, string propertyName, string propertyValue);
    [RemoteAttribute]
public static void RegisterSiteSubscriptionEventReceiver(ClientRuntimeContext context, Guid tenantId);
    [RemoteAttribute]
public static void RegisterSiteSubscriptionItemDeleteEventReceiver(ClientRuntimeContext context, Guid tenantId);
    [RemoteAttribute]
public static ClientResult`1<string> FindAlternativeScope(ClientRuntimeContext context, Guid tenantId, string scope);
    [RemoteAttribute]
public static ClientResult`1<string> FindPolicyScopeById(ClientRuntimeContext context, Guid tenantId, Guid scopeId);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPPolicyStoreProxyPropertyNames : object {
    public static string PolicyStoreUrl;
    public static string ReviewCenterUrl;
    public static string SupportContentTypeRetention;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPScsTenantEndPointInfo")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPScsTenantEndPointInfo : ClientObject {
    [RemoteAttribute]
public string FarmLabel { get; public set; }
    [RemoteAttribute]
public string ScsEndPointUrl { get; public set; }
    [RemoteAttribute]
public string SearchFarmId { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPScsTenantEndPointInfo(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_FarmLabel();
    public void set_FarmLabel(string value);
    public string get_ScsEndPointUrl();
    public void set_ScsEndPointUrl(string value);
    public string get_SearchFarmId();
    public void set_SearchFarmId(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPScsTenantEndPointInfoPropertyNames : object {
    public static string FarmLabel;
    public static string ScsEndPointUrl;
    public static string SearchFarmId;
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPSitePreservationUtility")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPSitePreservationUtility : object {
    [RemoteAttribute]
public static void PlaceOnHold(ClientRuntimeContext context, string siteId, Guid holdId, int durationInDays, string holdPeriodSource);
}
[ScriptTypeAttribute("SP.CompliancePolicy.SPSyncNotificationEndpointInfo")]
public class Microsoft.SharePoint.Client.CompliancePolicy.SPSyncNotificationEndpointInfo : ClientObject {
    [RemoteAttribute]
public bool IsNotifySuccess { get; public set; }
    [RemoteAttribute]
public string MasterCorrelationId { get; public set; }
    [RemoteAttribute]
public string ServerBuild { get; public set; }
    [RemoteAttribute]
public string ServerName { get; public set; }
    [RemoteAttribute]
public string WorkloadCorrelationId { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPSyncNotificationEndpointInfo(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_IsNotifySuccess();
    public void set_IsNotifySuccess(bool value);
    public string get_MasterCorrelationId();
    public void set_MasterCorrelationId(string value);
    public string get_ServerBuild();
    public void set_ServerBuild(string value);
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_WorkloadCorrelationId();
    public void set_WorkloadCorrelationId(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.CompliancePolicy.SPSyncNotificationEndpointInfoPropertyNames : object {
    public static string IsNotifySuccess;
    public static string MasterCorrelationId;
    public static string ServerBuild;
    public static string ServerName;
    public static string WorkloadCorrelationId;
}
[ScriptTypeAttribute("SP.Discovery.Case")]
public class Microsoft.SharePoint.Client.Discovery.Case : ClientObject {
    public Case(ClientRuntimeContext context, Web web);
    [EditorBrowsableAttribute("1")]
public Case(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ClientResult`1<string> GetExportContent(IList`1<int> sourceIds);
}
[ScriptTypeAttribute("SP.Discovery.Export")]
public class Microsoft.SharePoint.Client.Discovery.Export : ClientObject {
    [RemoteAttribute]
public ExportStatus Status { get; public set; }
    public Export(ClientRuntimeContext context, ListItem item);
    [EditorBrowsableAttribute("1")]
public Export(ClientRuntimeContext context, ObjectPath objectPath);
    public ExportStatus get_Status();
    public void set_Status(ExportStatus value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void Update();
    [RemoteAttribute]
public ClientResult`1<string> GetExportContent();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Discovery.ExportPropertyNames : object {
    public static string Status;
}
public enum Microsoft.SharePoint.Client.Discovery.ExportStatus : Enum {
    public int value__;
    public static ExportStatus NotStarted;
    public static ExportStatus Started;
    public static ExportStatus Complete;
    public static ExportStatus Failed;
}
[ScriptTypeAttribute("SP.InformationPolicy.ProjectPolicy")]
public class Microsoft.SharePoint.Client.InformationPolicy.ProjectPolicy : ClientObject {
    [RemoteAttribute]
public string Description { get; }
    [RemoteAttribute]
public string EmailBody { get; public set; }
    [RemoteAttribute]
public string EmailBodyWithTeamMailbox { get; public set; }
    [RemoteAttribute]
public string EmailSubject { get; public set; }
    [RemoteAttribute]
public string Name { get; }
    [EditorBrowsableAttribute("1")]
public ProjectPolicy(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Description();
    public string get_EmailBody();
    public void set_EmailBody(string value);
    public string get_EmailBodyWithTeamMailbox();
    public void set_EmailBodyWithTeamMailbox(string value);
    public string get_EmailSubject();
    public void set_EmailSubject(string value);
    public string get_Name();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void SavePolicy();
    [RemoteAttribute]
public static ClientObjectList`1<ProjectPolicy> GetProjectPolicies(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static ProjectPolicy GetCurrentlyAppliedProjectPolicyOnWeb(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static void ApplyProjectPolicy(ClientRuntimeContext context, Web web, ProjectPolicy projectPolicy);
    [RemoteAttribute]
public static void OpenProject(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static void CloseProject(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static void PostponeProject(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static ClientResult`1<bool> DoesProjectHavePolicy(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static ClientResult`1<bool> IsProjectClosed(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static ClientResult`1<DateTime> GetProjectCloseDate(ClientRuntimeContext context, Web web);
    [RemoteAttribute]
public static ClientResult`1<DateTime> GetProjectExpirationDate(ClientRuntimeContext context, Web web);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.InformationPolicy.ProjectPolicyPropertyNames : object {
    public static string Description;
    public static string EmailBody;
    public static string EmailBodyWithTeamMailbox;
    public static string EmailSubject;
    public static string Name;
}
[ScriptTypeAttribute("SP.RecordsRepository.Records")]
public static class Microsoft.SharePoint.Client.RecordsRepository.Records : object {
    [RemoteAttribute]
public static void DeclareItemAsRecordWithDeclarationDate(ClientRuntimeContext context, ListItem itemToDeclare, DateTime declarationDate);
    [RemoteAttribute]
public static void DeclareItemAsRecord(ClientRuntimeContext context, ListItem itemToDeclare);
    [RemoteAttribute]
public static void UndeclareItemAsRecord(ClientRuntimeContext context, ListItem item);
    [RemoteAttribute]
public static ClientResult`1<bool> IsRecord(ClientRuntimeContext context, ListItem item);
}
