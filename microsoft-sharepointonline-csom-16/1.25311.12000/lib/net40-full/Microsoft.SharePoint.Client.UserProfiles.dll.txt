[ScriptTypeAttribute("Microsoft.Office.Server.ReputationModel.Reputation")]
public static class Microsoft.Office.Server.ReputationModel.Reputation : object {
    [RemoteAttribute]
public static ClientResult`1<int> SetLike(ClientRuntimeContext context, string listID, int itemID, bool like);
    [RemoteAttribute]
public static ClientResult`1<double> SetRating(ClientRuntimeContext context, string listID, int itemID, int rating);
}
public enum Microsoft.SharePoint.Client.Microfeed.IdentifierEncoding : Enum {
    public int value__;
    public static IdentifierEncoding CacheEncoding;
    public static IdentifierEncoding UserEncoding;
}
[ScriptTypeAttribute("SP.Microfeed.MicroBlogEntity")]
public class Microsoft.SharePoint.Client.Microfeed.MicroBlogEntity : ClientValueObject {
    private string m_accountName;
    private bool m_canFollow;
    private string m_description;
    private string m_displayName;
    private string m_email;
    private MicroBlogEntityType m_entityType;
    private string m_entityURI;
    private string m_followedContentURI;
    private string m_identifier;
    private bool m_isFollowedByMe;
    private string m_latestPost;
    private string m_libraryName;
    private string m_libraryUri;
    private string m_personalURI;
    private string m_pictureURI;
    private MicrofeedStatusCode m_status;
    private string m_title;
    [RemoteAttribute]
public string AccountName { get; }
    [RemoteAttribute]
public bool CanFollow { get; }
    [RemoteAttribute]
public string Description { get; }
    [RemoteAttribute]
public string DisplayName { get; }
    [RemoteAttribute]
public string Email { get; }
    [RemoteAttribute]
public MicroBlogEntityType EntityType { get; }
    [RemoteAttribute]
public string EntityURI { get; }
    [RemoteAttribute]
public string FollowedContentURI { get; }
    [RemoteAttribute]
public string Identifier { get; }
    [RemoteAttribute]
public bool IsFollowedByMe { get; }
    [RemoteAttribute]
public string LatestPost { get; }
    [RemoteAttribute]
public string LibraryName { get; }
    [RemoteAttribute]
public string LibraryUri { get; }
    [RemoteAttribute]
public string PersonalURI { get; }
    [RemoteAttribute]
public string PictureURI { get; }
    [RemoteAttribute]
public MicrofeedStatusCode Status { get; }
    [RemoteAttribute]
public string Title { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AccountName();
    public bool get_CanFollow();
    public string get_Description();
    public string get_DisplayName();
    public string get_Email();
    public MicroBlogEntityType get_EntityType();
    public string get_EntityURI();
    public string get_FollowedContentURI();
    public string get_Identifier();
    public bool get_IsFollowedByMe();
    public string get_LatestPost();
    public string get_LibraryName();
    public string get_LibraryUri();
    public string get_PersonalURI();
    public string get_PictureURI();
    public MicrofeedStatusCode get_Status();
    public string get_Title();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Microfeed.MicroBlogEntityCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicroBlogEntityCollection : ClientValueObjectCollection`1<MicroBlogEntity> {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Microfeed.MicroBlogEntityType : Enum {
    public int value__;
    public static MicroBlogEntityType None;
    public static MicroBlogEntityType User;
    public static MicroBlogEntityType Document;
    public static MicroBlogEntityType Site;
    public static MicroBlogEntityType Tag;
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Microfeed.MicroBlogType : Enum {
    public int value__;
    public static MicroBlogType None;
    public static MicroBlogType MBEProfile;
    public static MicroBlogType RootPost;
    public static MicroBlogType ReplyPost;
    public static MicroBlogType RefLike;
    public static MicroBlogType RefMention;
    public static MicroBlogType RefReply;
    public static MicroBlogType ActivityEventRootPost;
    public static MicroBlogType RefTag;
    public static MicroBlogType Reference;
    public static MicroBlogType NonRefPosts;
    public static MicroBlogType RefPosts;
    public static MicroBlogType MyRootPosts;
    public static MicroBlogType MyAllPosts;
    public static MicroBlogType TheirRootPosts;
    public static MicroBlogType TheirAllPosts;
    public static MicroBlogType All;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedAttachmentStore")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedAttachmentStore : ClientObject {
    public MicrofeedAttachmentStore(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public MicrofeedAttachmentStore(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ClientArrayResult`1<string> PutImage(Stream imageData);
    [RemoteAttribute]
public ClientResult`1<Stream> GetImage(string imageUrl, string key, string iv);
    [RemoteAttribute]
public ClientArrayResult`1<string> PutFile(string originalFileName, Stream fileData);
    [RemoteAttribute]
public ClientResult`1<MicrofeedLink> PreProcessAttachment(MicrofeedLink link);
    [RemoteAttribute]
public void DeletePreProcessedAttachment(string attachmentUri);
}
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedContentFormattingOptions : Enum {
    public int value__;
    public static MicrofeedContentFormattingOptions ReplaceTemplateVariablesWithPlaceHolders;
    public static MicrofeedContentFormattingOptions None;
    public static MicrofeedContentFormattingOptions ReplaceTemplateVariablesWithValues;
    public static MicrofeedContentFormattingOptions ReplaceTemplateVariablesWithValues_NoHrefs;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedData")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedData : ClientObject {
    [RemoteAttribute]
public DateTime Created { get; public set; }
    [RemoteAttribute]
public IDictionary`2<string, object> Data { get; public set; }
    [RemoteAttribute]
public int DefinitionId { get; public set; }
    [RemoteAttribute]
public MicroBlogType ItemType { get; public set; }
    [RemoteAttribute]
public DateTime Modified { get; public set; }
    [RemoteAttribute]
public string TargetIdentifier { get; public set; }
    [RemoteAttribute]
public string Version { get; public set; }
    public MicrofeedData(ClientRuntimeContext context, MicrofeedStore store, IDictionary`2<string, object> props);
    [EditorBrowsableAttribute("1")]
public MicrofeedData(ClientRuntimeContext context, ObjectPath objectPath);
    public DateTime get_Created();
    public void set_Created(DateTime value);
    public IDictionary`2<string, object> get_Data();
    public void set_Data(IDictionary`2<string, object> value);
    public int get_DefinitionId();
    public void set_DefinitionId(int value);
    public MicroBlogType get_ItemType();
    public void set_ItemType(MicroBlogType value);
    public DateTime get_Modified();
    public void set_Modified(DateTime value);
    public string get_TargetIdentifier();
    public void set_TargetIdentifier(string value);
    public string get_Version();
    public void set_Version(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void AddAttachment(string name, Byte[] bytes);
    [RemoteAttribute]
public void Update();
    [RemoteAttribute]
public void SystemUpdate();
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedDataCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedDataCollection : ClientObjectCollection`1<MicrofeedData> {
    [RemoteAttribute]
public DateTime LastItemDeletedDate { get; public set; }
    [EditorBrowsableAttribute("1")]
public MicrofeedDataCollection(ClientRuntimeContext context, ObjectPath objectPath);
    public DateTime get_LastItemDeletedDate();
    public void set_LastItemDeletedDate(DateTime value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void DeleteAll();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Microfeed.MicrofeedDataCollectionPropertyNames : object {
    public static string LastItemDeletedDate;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedDataLink")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedDataLink : ClientValueObject {
    private MicrofeedDataLinkType m_dataLinkType;
    private DateTime m_dateTimeValue;
    private string m_name;
    private string m_placeHolderName;
    private string m_stringValue;
    private Guid m_uniqueId;
    private string m_uriValue;
    [RemoteAttribute]
public MicrofeedDataLinkType DataLinkType { get; public set; }
    [RemoteAttribute]
public DateTime DateTimeValue { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public string PlaceHolderName { get; public set; }
    [RemoteAttribute]
public string StringValue { get; public set; }
    [RemoteAttribute]
public Guid UniqueId { get; public set; }
    [RemoteAttribute]
public string UriValue { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public MicrofeedDataLinkType get_DataLinkType();
    public void set_DataLinkType(MicrofeedDataLinkType value);
    public DateTime get_DateTimeValue();
    public void set_DateTimeValue(DateTime value);
    public string get_Name();
    public void set_Name(string value);
    public string get_PlaceHolderName();
    public void set_PlaceHolderName(string value);
    public string get_StringValue();
    public void set_StringValue(string value);
    public Guid get_UniqueId();
    public void set_UniqueId(Guid value);
    public string get_UriValue();
    public void set_UriValue(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedDataLinkCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedDataLinkCollection : ClientValueObjectCollection`1<MicrofeedDataLink> {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedDataLinkType : Enum {
    public int value__;
    public static MicrofeedDataLinkType None;
    public static MicrofeedDataLinkType Uri;
    public static MicrofeedDataLinkType String;
    public static MicrofeedDataLinkType DocumentLibrary;
    public static MicrofeedDataLinkType FollowedContentUri;
    public static MicrofeedDataLinkType DateTime;
    public static MicrofeedDataLinkType NumericString;
    public static MicrofeedDataLinkType Document;
    public static MicrofeedDataLinkType Tag;
    public static MicrofeedDataLinkType Interest;
    public static MicrofeedDataLinkType User;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Microfeed.MicrofeedDataPropertyNames : object {
    public static string Created;
    public static string Data;
    public static string DefinitionId;
    public static string ItemType;
    public static string Modified;
    public static string TargetIdentifier;
    public static string Version;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedDataQuery")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedDataQuery : ClientValueObject {
    private UInt32 m_itemLimit;
    private string m_query;
    private String[] m_viewFields;
    private bool m_viewFieldsOnly;
    [RemoteAttribute]
public UInt32 ItemLimit { get; public set; }
    [RemoteAttribute]
public string Query { get; public set; }
    [RemoteAttribute]
public String[] ViewFields { get; public set; }
    [RemoteAttribute]
public bool ViewFieldsOnly { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public UInt32 get_ItemLimit();
    public void set_ItemLimit(UInt32 value);
    public string get_Query();
    public void set_Query(string value);
    public String[] get_ViewFields();
    public void set_ViewFields(String[] value);
    public bool get_ViewFieldsOnly();
    public void set_ViewFieldsOnly(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedLink")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedLink : ClientValueObject {
    private MicrofeedLinkAction m_clickAction;
    private string m_contentUri;
    private string m_description;
    private UInt32 m_height;
    private string m_href;
    private UInt32 m_length;
    private MicrofeedLinkType m_linkType;
    private string m_name;
    private UInt32 m_previewHeight;
    private string m_previewPictureUrl;
    private UInt32 m_previewWidth;
    private MicrofeedStatusCode m_status;
    private UInt32 m_width;
    [RemoteAttribute]
public MicrofeedLinkAction ClickAction { get; public set; }
    [RemoteAttribute]
public string ContentUri { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public UInt32 Height { get; public set; }
    [RemoteAttribute]
public string Href { get; public set; }
    [RemoteAttribute]
public UInt32 Length { get; public set; }
    [RemoteAttribute]
public MicrofeedLinkType LinkType { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public UInt32 PreviewHeight { get; public set; }
    [RemoteAttribute]
public string PreviewPictureUrl { get; public set; }
    [RemoteAttribute]
public UInt32 PreviewWidth { get; public set; }
    [RemoteAttribute]
public MicrofeedStatusCode Status { get; }
    [RemoteAttribute]
public UInt32 Width { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public MicrofeedLinkAction get_ClickAction();
    public void set_ClickAction(MicrofeedLinkAction value);
    public string get_ContentUri();
    public void set_ContentUri(string value);
    public string get_Description();
    public void set_Description(string value);
    public UInt32 get_Height();
    public void set_Height(UInt32 value);
    public string get_Href();
    public void set_Href(string value);
    public UInt32 get_Length();
    public void set_Length(UInt32 value);
    public MicrofeedLinkType get_LinkType();
    public void set_LinkType(MicrofeedLinkType value);
    public string get_Name();
    public void set_Name(string value);
    public UInt32 get_PreviewHeight();
    public void set_PreviewHeight(UInt32 value);
    public string get_PreviewPictureUrl();
    public void set_PreviewPictureUrl(string value);
    public UInt32 get_PreviewWidth();
    public void set_PreviewWidth(UInt32 value);
    public MicrofeedStatusCode get_Status();
    public UInt32 get_Width();
    public void set_Width(UInt32 value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedLinkAction")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedLinkAction : ClientValueObject {
    private string m_actionUri;
    private UInt32 m_height;
    private MicrofeedLinkActionKind m_kind;
    private UInt32 m_width;
    [RemoteAttribute]
public string ActionUri { get; public set; }
    [RemoteAttribute]
public UInt32 Height { get; public set; }
    [RemoteAttribute]
public MicrofeedLinkActionKind Kind { get; public set; }
    [RemoteAttribute]
public UInt32 Width { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ActionUri();
    public void set_ActionUri(string value);
    public UInt32 get_Height();
    public void set_Height(UInt32 value);
    public MicrofeedLinkActionKind get_Kind();
    public void set_Kind(MicrofeedLinkActionKind value);
    public UInt32 get_Width();
    public void set_Width(UInt32 value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedLinkActionKind : Enum {
    public int value__;
    public static MicrofeedLinkActionKind Navigate;
    public static MicrofeedLinkActionKind AdHocAction;
}
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedLinkType : Enum {
    public int value__;
    public static MicrofeedLinkType None;
    public static MicrofeedLinkType Image;
    public static MicrofeedLinkType Webpage;
    public static MicrofeedLinkType Movie;
    public static MicrofeedLinkType Audio;
    public static MicrofeedLinkType CustomAction;
    public static MicrofeedLinkType Document;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedManager")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedManager : ClientObject {
    [RemoteAttribute]
public MicroBlogEntity CurrentUser { get; }
    [RemoteAttribute]
public bool IsFeedActivityPublic { get; }
    [RemoteAttribute]
public string StaticThreadLink { get; }
    public MicrofeedManager(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public MicrofeedManager(ClientRuntimeContext context, ObjectPath objectPath);
    public MicroBlogEntity get_CurrentUser();
    public bool get_IsFeedActivityPublic();
    public string get_StaticThreadLink();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> Post(MicrofeedPostOptions postOptions);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> PostReply(string postIdentifier, MicrofeedPostOptions postReplyOptions);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> DeleteById(string postIdentifier);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> LockThreadById(string threadIdentifier);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> UnLockThreadById(string threadIdentifier);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThreadCollection> GetMyPublishedFeed(MicrofeedRetrievalOptions feedOptions, MicrofeedPublishedFeedType typeOfPubFeed, bool ShowPublicView);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThreadCollection> GetPublishedFeed(string feedOwner, MicrofeedRetrievalOptions feedOptions, MicrofeedPublishedFeedType typeOfPubFeed);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> GetThread(string postIdentifier);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThreadCollection> GetMyConsolidatedFeed(MicrofeedRetrievalOptions feedOptions);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThreadCollection> GetMyCategoricalFeed(MicrofeedRetrievalOptions feedOptions);
    [RemoteAttribute]
public void UnsubscribeFromEMail(string postIdentifier);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> Like(string postIdentifier);
    [RemoteAttribute]
public ClientResult`1<MicrofeedThread> UnLike(string postIdentifier);
    [RemoteAttribute]
public ClientResult`1<int> GetUnreadMentionsCount();
    [RemoteAttribute]
public ClientResult`1<MicrofeedStatusCode> ClearUnreadMentionsCount();
    [RemoteAttribute]
public ClientResult`1<MicrofeedStatusCode> RepopulateLMT(DateTime timeStamp, string secureHash);
    [RemoteAttribute]
public ClientResult`1<MicrofeedStatusCode> AddUserToPostPeopleList(string postIdentifier, string UserLoginName);
    [RemoteAttribute]
public ClientResult`1<MicrofeedStatusCode> DeleteUserFromPostPeopleList(string postIdentifier, string UserLoginName);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Microfeed.MicrofeedManagerPropertyNames : object {
    public static string CurrentUser;
    public static string IsFeedActivityPublic;
    public static string StaticThreadLink;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPost")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPost : ClientValueObject {
    private int m_authorIndex;
    private string m_breadCrumb;
    private bool m_canDelete;
    private bool m_canFollowUp;
    private bool m_canHaveAttachments;
    private bool m_canLike;
    private bool m_canLock;
    private bool m_canReply;
    private string m_content;
    private DateTime m_created;
    private string m_footer;
    private string m_iD;
    private bool m_iLikeIt;
    private IList`1<int> m_likersList;
    private bool m_locked;
    private MicrofeedLink m_mediaLink;
    private MicroBlogType m_microBlogType;
    private DateTime m_modified;
    private int m_peopleCount;
    private string m_postImageUri;
    private string m_postSource;
    private string m_postSourceUri;
    private string m_referenceID;
    private bool m_renderPostAuthorImage;
    private int m_replyCount;
    private bool m_smallImageSizePreferred;
    private string m_title;
    [RemoteAttribute]
public int AuthorIndex { get; }
    [RemoteAttribute]
public string BreadCrumb { get; }
    [RemoteAttribute]
public bool CanDelete { get; }
    [RemoteAttribute]
public bool CanFollowUp { get; }
    [RemoteAttribute]
public bool CanHaveAttachments { get; }
    [RemoteAttribute]
public bool CanLike { get; }
    [RemoteAttribute]
public bool CanLock { get; }
    [RemoteAttribute]
public bool CanReply { get; }
    [RemoteAttribute]
public string Content { get; }
    [RemoteAttribute]
public DateTime Created { get; }
    [RemoteAttribute]
public string Footer { get; }
    [RemoteAttribute]
public string ID { get; }
    [RemoteAttribute]
public bool ILikeIt { get; }
    [RemoteAttribute]
public IList`1<int> LikersList { get; }
    [RemoteAttribute]
public bool Locked { get; }
    [RemoteAttribute]
public MicrofeedLink MediaLink { get; }
    [RemoteAttribute]
public MicroBlogType MicroBlogType { get; }
    [RemoteAttribute]
public DateTime Modified { get; }
    [RemoteAttribute]
public int PeopleCount { get; }
    [RemoteAttribute]
public string PostImageUri { get; }
    [RemoteAttribute]
public string PostSource { get; }
    [RemoteAttribute]
public string PostSourceUri { get; }
    [RemoteAttribute]
public string ReferenceID { get; }
    [RemoteAttribute]
public bool RenderPostAuthorImage { get; }
    [RemoteAttribute]
public int ReplyCount { get; }
    [RemoteAttribute]
public bool SmallImageSizePreferred { get; }
    [RemoteAttribute]
public string Title { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_AuthorIndex();
    public string get_BreadCrumb();
    public bool get_CanDelete();
    public bool get_CanFollowUp();
    public bool get_CanHaveAttachments();
    public bool get_CanLike();
    public bool get_CanLock();
    public bool get_CanReply();
    public string get_Content();
    public DateTime get_Created();
    public string get_Footer();
    public string get_ID();
    public bool get_ILikeIt();
    public IList`1<int> get_LikersList();
    public bool get_Locked();
    public MicrofeedLink get_MediaLink();
    public MicroBlogType get_MicroBlogType();
    public DateTime get_Modified();
    public int get_PeopleCount();
    public string get_PostImageUri();
    public string get_PostSource();
    public string get_PostSourceUri();
    public string get_ReferenceID();
    public bool get_RenderPostAuthorImage();
    public int get_ReplyCount();
    public bool get_SmallImageSizePreferred();
    public string get_Title();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedPostAttributes : Enum {
    public int value__;
    public static MicrofeedPostAttributes None;
    public static MicrofeedPostAttributes IsPrivate;
    public static MicrofeedPostAttributes IsDefault;
    public static MicrofeedPostAttributes IsEnabled;
    public static MicrofeedPostAttributes IsUserPost;
    public static MicrofeedPostAttributes CanReply;
    public static MicrofeedPostAttributes CanDelete;
    public static MicrofeedPostAttributes CanLike;
    public static MicrofeedPostAttributes EnablePeopleList;
    public static MicrofeedPostAttributes CanLock;
    public static MicrofeedPostAttributes CanHaveAttachments;
    public static MicrofeedPostAttributes RenderPostAuthorImage;
    public static MicrofeedPostAttributes SmallImageSizePreferred;
    public static MicrofeedPostAttributes PersistToPublishedFeed;
    public static MicrofeedPostAttributes PersistToCache;
    public static MicrofeedPostAttributes IsNotification;
    public static MicrofeedPostAttributes CanFollowUp;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPostCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPostCollection : ClientValueObjectCollection`1<MicrofeedPost> {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPostDefinition")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPostDefinition : ClientValueObject {
    private bool m_canDelete;
    private bool m_canFollowUp;
    private bool m_canHaveAttachments;
    private bool m_canLike;
    private bool m_canLock;
    private bool m_canReply;
    private DateTime m_creationTime;
    private long m_definitionId;
    private string m_definitionName;
    private int m_definitionVersion;
    private bool m_enablePeopleList;
    private bool m_isDefault;
    private bool m_isEnabled;
    private bool m_isNotification;
    private bool m_isPrivate;
    private bool m_isUserPost;
    private DateTime m_lastUpdateTime;
    private Guid m_partitionId;
    private bool m_persistToCache;
    private bool m_persistToPrivateFolder;
    private bool m_persistToPublishedFeed;
    private string m_referenceLikePostName;
    private string m_referenceMentionPostName;
    private string m_referenceReplyPostName;
    private bool m_renderPostAuthorImage;
    private string m_resourceFileName;
    private bool m_securityTrimContentUrl;
    private bool m_smallImageSizePreferred;
    [RemoteAttribute]
public bool CanDelete { get; public set; }
    [RemoteAttribute]
public bool CanFollowUp { get; public set; }
    [RemoteAttribute]
public bool CanHaveAttachments { get; public set; }
    [RemoteAttribute]
public bool CanLike { get; public set; }
    [RemoteAttribute]
public bool CanLock { get; public set; }
    [RemoteAttribute]
public bool CanReply { get; public set; }
    [RemoteAttribute]
public DateTime CreationTime { get; }
    [RemoteAttribute]
public long DefinitionId { get; }
    [RemoteAttribute]
public string DefinitionName { get; }
    [RemoteAttribute]
public int DefinitionVersion { get; public set; }
    [RemoteAttribute]
public bool EnablePeopleList { get; public set; }
    [RemoteAttribute]
public bool IsDefault { get; }
    [RemoteAttribute]
public bool IsEnabled { get; public set; }
    [RemoteAttribute]
public bool IsNotification { get; public set; }
    [RemoteAttribute]
public bool IsPrivate { get; public set; }
    [RemoteAttribute]
public bool IsUserPost { get; public set; }
    [RemoteAttribute]
public DateTime LastUpdateTime { get; }
    [RemoteAttribute]
public Guid PartitionId { get; }
    [RemoteAttribute]
public bool PersistToCache { get; public set; }
    [RemoteAttribute]
public bool PersistToPrivateFolder { get; public set; }
    [RemoteAttribute]
public bool PersistToPublishedFeed { get; public set; }
    [RemoteAttribute]
public string ReferenceLikePostName { get; public set; }
    [RemoteAttribute]
public string ReferenceMentionPostName { get; public set; }
    [RemoteAttribute]
public string ReferenceReplyPostName { get; public set; }
    [RemoteAttribute]
public bool RenderPostAuthorImage { get; public set; }
    [RemoteAttribute]
public string ResourceFileName { get; public set; }
    [RemoteAttribute]
public bool SecurityTrimContentUrl { get; public set; }
    [RemoteAttribute]
public bool SmallImageSizePreferred { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_CanDelete();
    public void set_CanDelete(bool value);
    public bool get_CanFollowUp();
    public void set_CanFollowUp(bool value);
    public bool get_CanHaveAttachments();
    public void set_CanHaveAttachments(bool value);
    public bool get_CanLike();
    public void set_CanLike(bool value);
    public bool get_CanLock();
    public void set_CanLock(bool value);
    public bool get_CanReply();
    public void set_CanReply(bool value);
    public DateTime get_CreationTime();
    public long get_DefinitionId();
    public string get_DefinitionName();
    public int get_DefinitionVersion();
    public void set_DefinitionVersion(int value);
    public bool get_EnablePeopleList();
    public void set_EnablePeopleList(bool value);
    public bool get_IsDefault();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsNotification();
    public void set_IsNotification(bool value);
    public bool get_IsPrivate();
    public void set_IsPrivate(bool value);
    public bool get_IsUserPost();
    public void set_IsUserPost(bool value);
    public DateTime get_LastUpdateTime();
    public Guid get_PartitionId();
    public bool get_PersistToCache();
    public void set_PersistToCache(bool value);
    public bool get_PersistToPrivateFolder();
    public void set_PersistToPrivateFolder(bool value);
    public bool get_PersistToPublishedFeed();
    public void set_PersistToPublishedFeed(bool value);
    public string get_ReferenceLikePostName();
    public void set_ReferenceLikePostName(string value);
    public string get_ReferenceMentionPostName();
    public void set_ReferenceMentionPostName(string value);
    public string get_ReferenceReplyPostName();
    public void set_ReferenceReplyPostName(string value);
    public bool get_RenderPostAuthorImage();
    public void set_RenderPostAuthorImage(bool value);
    public string get_ResourceFileName();
    public void set_ResourceFileName(string value);
    public bool get_SecurityTrimContentUrl();
    public void set_SecurityTrimContentUrl(bool value);
    public bool get_SmallImageSizePreferred();
    public void set_SmallImageSizePreferred(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPostDefinitionManager")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPostDefinitionManager : ClientObject {
    public MicrofeedPostDefinitionManager(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public MicrofeedPostDefinitionManager(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ClientResult`1<MicrofeedPostDefinition> GetMicrofeedPostDefinition(string definitionName);
    [RemoteAttribute]
public IList`1<MicrofeedPostDefinition> GetMicrofeedPostDefinitions();
    [RemoteAttribute]
public ClientResult`1<MicrofeedPostDefinition> NewMicrofeedPostDefinition(string definitionName);
    [RemoteAttribute]
public ClientResult`1<MicrofeedPostDefinition> UpdateMicrofeedPostDefinition(MicrofeedPostDefinition postDefinition);
    [RemoteAttribute]
public ClientResult`1<bool> DeleteMicrofeedPostDefinition(MicrofeedPostDefinition postDefinition);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPostDefinitionNameCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPostDefinitionNameCollection : ClientValueObjectCollection`1<string> {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPostDefinitionNames")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPostDefinitionNames : ClientValueObject {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPostOptionCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPostOptionCollection : ClientObjectCollection`1<MicrofeedPostOptions> {
    public MicrofeedPostOptionCollection(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public MicrofeedPostOptionCollection(ClientRuntimeContext context, ObjectPath objectPath);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedPostOptions")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedPostOptions : ClientValueObject {
    private string m_content;
    private MicrofeedContentFormattingOptions m_contentFormattingOption;
    private MicrofeedDataLinkCollection m_dataLinks;
    private string m_definitionName;
    private MicrofeedLink m_mediaLink;
    private IList`1<string> m_peopleList;
    private string m_postSource;
    private string m_postSourceUri;
    private string m_refThread_ReferenceID;
    private string m_refThread_RefReply;
    private string m_refThread_RefRoot;
    private string m_targetActor;
    private bool m_updateStatusText;
    [RemoteAttribute]
public string Content { get; public set; }
    [RemoteAttribute]
public MicrofeedContentFormattingOptions ContentFormattingOption { get; public set; }
    [RemoteAttribute]
public MicrofeedDataLinkCollection DataLinks { get; public set; }
    [RemoteAttribute]
public string DefinitionName { get; public set; }
    [RemoteAttribute]
public MicrofeedLink MediaLink { get; public set; }
    [RemoteAttribute]
public IList`1<string> PeopleList { get; public set; }
    [RemoteAttribute]
public string PostSource { get; public set; }
    [RemoteAttribute]
public string PostSourceUri { get; public set; }
    [RemoteAttribute]
public string RefThread_ReferenceID { get; public set; }
    [RemoteAttribute]
public string RefThread_RefReply { get; public set; }
    [RemoteAttribute]
public string RefThread_RefRoot { get; public set; }
    [RemoteAttribute]
public string TargetActor { get; public set; }
    [RemoteAttribute]
public bool UpdateStatusText { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Content();
    public void set_Content(string value);
    public MicrofeedContentFormattingOptions get_ContentFormattingOption();
    public void set_ContentFormattingOption(MicrofeedContentFormattingOptions value);
    public MicrofeedDataLinkCollection get_DataLinks();
    public void set_DataLinks(MicrofeedDataLinkCollection value);
    public string get_DefinitionName();
    public void set_DefinitionName(string value);
    public MicrofeedLink get_MediaLink();
    public void set_MediaLink(MicrofeedLink value);
    public IList`1<string> get_PeopleList();
    public void set_PeopleList(IList`1<string> value);
    public string get_PostSource();
    public void set_PostSource(string value);
    public string get_PostSourceUri();
    public void set_PostSourceUri(string value);
    public string get_RefThread_ReferenceID();
    public void set_RefThread_ReferenceID(string value);
    public string get_RefThread_RefReply();
    public void set_RefThread_RefReply(string value);
    public string get_RefThread_RefRoot();
    public void set_RefThread_RefRoot(string value);
    public string get_TargetActor();
    public void set_TargetActor(string value);
    public bool get_UpdateStatusText();
    public void set_UpdateStatusText(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedPostSecurityAttributes : Enum {
    public int value__;
    public static MicrofeedPostSecurityAttributes None;
    public static MicrofeedPostSecurityAttributes PersistToPrivateFolder;
    public static MicrofeedPostSecurityAttributes SecurityTrimContentUrl;
}
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedPublishedFeedType : Enum {
    public int value__;
    public static MicrofeedPublishedFeedType Recent;
    public static MicrofeedPublishedFeedType Full;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedRetrievalOptions")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedRetrievalOptions : ClientValueObject {
    private MicrofeedContentFormattingOptions m_contentFormattingOption;
    private bool m_contentOnly;
    private bool m_dropAllSecurityTrimmablePosts;
    private bool m_gatherUnreadMentionCountForUser;
    private MicroBlogType m_includedTypes;
    private DateTime m_newerThan;
    private DateTime m_olderThan;
    private IList`1<string> m_postDefinitionFilter;
    private MicrofeedSortOrder m_resultSortOrder;
    private int m_threadCount;
    [RemoteAttribute]
public MicrofeedContentFormattingOptions ContentFormattingOption { get; public set; }
    [RemoteAttribute]
public bool ContentOnly { get; public set; }
    [RemoteAttribute]
public bool DropAllSecurityTrimmablePosts { get; public set; }
    [RemoteAttribute]
public bool GatherUnreadMentionCountForUser { get; public set; }
    [RemoteAttribute]
public MicroBlogType IncludedTypes { get; public set; }
    [RemoteAttribute]
public DateTime NewerThan { get; public set; }
    [RemoteAttribute]
public DateTime OlderThan { get; public set; }
    [RemoteAttribute]
public IList`1<string> PostDefinitionFilter { get; public set; }
    [RemoteAttribute]
public MicrofeedSortOrder ResultSortOrder { get; public set; }
    [RemoteAttribute]
public int ThreadCount { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public MicrofeedContentFormattingOptions get_ContentFormattingOption();
    public void set_ContentFormattingOption(MicrofeedContentFormattingOptions value);
    public bool get_ContentOnly();
    public void set_ContentOnly(bool value);
    public bool get_DropAllSecurityTrimmablePosts();
    public void set_DropAllSecurityTrimmablePosts(bool value);
    public bool get_GatherUnreadMentionCountForUser();
    public void set_GatherUnreadMentionCountForUser(bool value);
    public MicroBlogType get_IncludedTypes();
    public void set_IncludedTypes(MicroBlogType value);
    public DateTime get_NewerThan();
    public void set_NewerThan(DateTime value);
    public DateTime get_OlderThan();
    public void set_OlderThan(DateTime value);
    public IList`1<string> get_PostDefinitionFilter();
    public void set_PostDefinitionFilter(IList`1<string> value);
    public MicrofeedSortOrder get_ResultSortOrder();
    public void set_ResultSortOrder(MicrofeedSortOrder value);
    public int get_ThreadCount();
    public void set_ThreadCount(int value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedSortOrder : Enum {
    public int value__;
    public static MicrofeedSortOrder ModifiedTime;
    public static MicrofeedSortOrder CreatedTime;
}
public enum Microsoft.SharePoint.Client.Microfeed.MicrofeedStatusCode : Enum {
    public int value__;
    public static MicrofeedStatusCode Success;
    public static MicrofeedStatusCode ServerError;
    public static MicrofeedStatusCode InsufficientPermissions;
    public static MicrofeedStatusCode InterimPlaceholderEntity;
    public static MicrofeedStatusCode InvalidItemId;
    public static MicrofeedStatusCode InvalidThreadId;
    public static MicrofeedStatusCode InvalidUriInPostOptions;
    public static MicrofeedStatusCode InvalidMediaLinkName;
    public static MicrofeedStatusCode InvalidMediaLinkURI;
    public static MicrofeedStatusCode InvalidMediaLinkSnippetURI;
    public static MicrofeedStatusCode MediaLinkAddFailure;
    public static MicrofeedStatusCode NoServiceContext;
    public static MicrofeedStatusCode Invalid_MicroBlogType_Requested;
    public static MicrofeedStatusCode Only_One_ContentUri_Allowed_Per_Post;
    public static MicrofeedStatusCode Invalid_Content_Null_Or_Empty;
    public static MicrofeedStatusCode Invalid_Content_Length_Greater_Than_512_Chars;
    public static MicrofeedStatusCode Invalid_KeyWord_Found_In_Content;
    public static MicrofeedStatusCode Invalid_MediaLinks_SerializedString;
    public static MicrofeedStatusCode Invalid_MicroBlogPost_SerializedString;
    public static MicrofeedStatusCode MicroBlogEntity_Error_PublishedFeedList_NotFound;
    public static MicrofeedStatusCode MicroBlogEntity_Invalid_GetPublishedFeed;
    public static MicrofeedStatusCode MicroBlogPost_Error_SavingToPublishedFeed;
    public static MicrofeedStatusCode MicroBlogPost_Error_PublishingToCache;
    public static MicrofeedStatusCode MicroBlogPost_Error_DeletingFromCache;
    public static MicrofeedStatusCode MicroBLogList_Error_FetchingList;
    public static MicrofeedStatusCode MicroBlogList_Error_ExecutingQuery;
    public static MicrofeedStatusCode MicroBlogList_Error_FetchingItem;
    public static MicrofeedStatusCode MicroBlogList_Error_AddingItem;
    public static MicrofeedStatusCode MicroBlogList_Error_Updating_Item;
    public static MicrofeedStatusCode MicroBlogList_Error_FetchMBProfileItem;
    public static MicrofeedStatusCode MicroBlogList_Error_AccessingProperty;
    public static MicrofeedStatusCode InvalidRequest;
    public static MicrofeedStatusCode InvalidLikeRequest;
    public static MicrofeedStatusCode InvalidLockRequest;
    public static MicrofeedStatusCode InvalidRootPost;
    public static MicrofeedStatusCode InvalidReplyRequest;
    public static MicrofeedStatusCode InvalidReplyRequest_MaxRepliesPerRootPost_LimitReached;
    public static MicrofeedStatusCode InvalidLikeRequest_AlreadyMarkedAsLiked;
    public static MicrofeedStatusCode InvalidUnLikeRequest_AlreadyMarkedAsUnLike;
    public static MicrofeedStatusCode InvalidEMailSubscriptionRequest_AlreadyUnsubscribed;
    public static MicrofeedStatusCode InvalidEMailSubscriptionRequest_AlreadySubscribed;
    public static MicrofeedStatusCode InvalidEMailSubscriptionRequest_NotThread;
    public static MicrofeedStatusCode InvalidLockRequest_AlreadyMarkedAsLocked;
    public static MicrofeedStatusCode InvalidUnLockRequest_AlreadyMarkedAsUnLocked;
    public static MicrofeedStatusCode InvalidLockRequest_LockingNonRootPost;
    public static MicrofeedStatusCode ServerErrorCanReplyIsFalse;
    public static MicrofeedStatusCode ServerErrorFeatureDisabled;
    public static MicrofeedStatusCode ServerErrorSiteNotFound;
    public static MicrofeedStatusCode ServerErrorMicroBlogListNotFound;
    public static MicrofeedStatusCode ServerErrorRootPostNotFound;
    public static MicrofeedStatusCode ServerErrorPublishedFeedListNotFound;
    public static MicrofeedStatusCode ServerErrorPublishedFeedListItemNotFound;
    public static MicrofeedStatusCode ServerErrorSavingListItemField;
    public static MicrofeedStatusCode ServerErrorInvalidFeedRequest;
    public static MicrofeedStatusCode ServerErrorFetchingPublishedFeed;
    public static MicrofeedStatusCode ServerErrorFetchingConsolidatedFeed;
    public static MicrofeedStatusCode ServerErrorFetchingCategoricalFeed;
    public static MicrofeedStatusCode ServerErrorFetchingActivityFeed;
    public static MicrofeedStatusCode ServerErrorSecurityTrimmer;
    public static MicrofeedStatusCode ServerErrorDuplicateMessageId;
    public static MicrofeedStatusCode ServerErrorOpeningPersonalSite;
    public static MicrofeedStatusCode ServerError_Initialization;
    public static MicrofeedStatusCode ServerErrorInvalidContentURI;
    public static MicrofeedStatusCode ServerErrorInvalidFollowedItemType;
    public static MicrofeedStatusCode ServerErrorPublishingToList;
    public static MicrofeedStatusCode ServerErrorPublishingToCache;
    public static MicrofeedStatusCode MicroBlogDeletionError_NotOwner;
    public static MicrofeedStatusCode ServerCacheError_CacheNotFound;
    public static MicrofeedStatusCode ServerCacheError_NotAuthorized;
    public static MicrofeedStatusCode ServerCacheError_ThreadNotFound;
    public static MicrofeedStatusCode IncorrectTenantPartition;
    public static MicrofeedStatusCode InvalidUserAccount;
    public static MicrofeedStatusCode InvalidKeywordTag;
    public static MicrofeedStatusCode Taxonomy_TagNotAvailabelForTagging;
    public static MicrofeedStatusCode Taxonomy_TermStoreNotFound;
    public static MicrofeedStatusCode InvalidEntityIdentifier;
    public static MicrofeedStatusCode UnexpectedEntityType;
    public static MicrofeedStatusCode WarningPersonalSiteNotFoundCannotCreate;
    public static MicrofeedStatusCode WarningPersonalSiteNotFoundCanCreate;
    public static MicrofeedStatusCode WarningPersonalSiteNotFoundCanCreateNoPermissions;
    public static MicrofeedStatusCode WarningPersonalSiteNotFoundCanCreateError;
    public static MicrofeedStatusCode ErrorPersonalSiteNotFound;
    public static MicrofeedStatusCode GuidStringConversionError;
    public static MicrofeedStatusCode ServerErrorUnableToFetchUserProfile;
    public static MicrofeedStatusCode SP_MFPD_DataBase_Exception;
    public static MicrofeedStatusCode SP_MFPD_DataBase_DefinitionNotFound;
    public static MicrofeedStatusCode SP_MFPD_Invalid_Operation;
    public static MicrofeedStatusCode SP_MFPD_Invalid_Value;
    public static MicrofeedStatusCode SP_MFPD_Partition_Mismatch;
    public static MicrofeedStatusCode SP_MFPD_Definition_Disabled;
    public static MicrofeedStatusCode Invalid_MicroBlogPost_DefinitionNameIsRequired;
    public static MicrofeedStatusCode Invalid_MicroBlogPost_InvalidDefinitionName;
    public static MicrofeedStatusCode InvalidRequest_PostIsLocked;
    public static MicrofeedStatusCode ServerErrorUnableToAttachPicture;
    public static MicrofeedStatusCode InvalidFeedCacheEntity_UserMissingURI;
    public static MicrofeedStatusCode InvalidFeedCacheEntity_DocMissingURI;
    public static MicrofeedStatusCode RestrictedListStorageCompromised;
    public static MicrofeedStatusCode InvalidPostTarget;
    public static MicrofeedStatusCode WarningSiteStorageQuotaExceeded;
    public static MicrofeedStatusCode ServerErrorCannotAccessDatabase;
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedStore")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedStore : ClientObject {
    public MicrofeedStore(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public MicrofeedStore(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public static SocialFeedManager GetSocialFeedManagerForUser(ClientRuntimeContext context, string accountName);
    [RemoteAttribute]
public void AddData(string name, Byte[] data);
    [RemoteAttribute]
public void AddDataAsStream(string name, Stream data);
    [RemoteAttribute]
public MicrofeedData GetItem(string storeIdentifier);
    [RemoteAttribute]
public MicrofeedData NewItem(string storeIdentifier);
    [RemoteAttribute]
public MicrofeedDataCollection Query(string storeIdentifier, MicrofeedDataQuery query);
    [RemoteAttribute]
public void ExecutePendingOperations();
    [RemoteAttribute]
public void IncrementUnreadAtMentionCount(string accountName);
    [RemoteAttribute]
public void SetPostLikeStatus(string accountName, string postId, bool like);
    [RemoteAttribute]
public ClientResult`1<string> GetSocialProperties(string accountName);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedThread")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedThread : ClientValueObject {
    private bool m_canFollowUp;
    private bool m_canHaveAttachments;
    private bool m_canLike;
    private bool m_canReply;
    private IList`1<MicrofeedDataLink> m_dataLinks;
    private long m_definitionId;
    private string m_definitionName;
    private string m_identifier;
    private bool m_locked;
    private IList`1<MicroBlogEntity> m_microfeedEntities;
    private int m_ownerIndex;
    private MicrofeedPost m_refReply;
    private MicrofeedPost m_refRoot;
    private bool m_renderPostAuthorImage;
    private MicrofeedPostCollection m_replies;
    private int m_replyCount;
    private MicrofeedPost m_rootPost;
    private bool m_smallImageSizePreferred;
    private MicrofeedStatusCode m_status;
    [RemoteAttribute]
public bool CanFollowUp { get; }
    [RemoteAttribute]
public bool CanHaveAttachments { get; }
    [RemoteAttribute]
public bool CanLike { get; }
    [RemoteAttribute]
public bool CanReply { get; }
    [RemoteAttribute]
public IList`1<MicrofeedDataLink> DataLinks { get; }
    [RemoteAttribute]
public long DefinitionId { get; }
    [RemoteAttribute]
public string DefinitionName { get; }
    [RemoteAttribute]
public string Identifier { get; }
    [RemoteAttribute]
public bool Locked { get; }
    [RemoteAttribute]
public IList`1<MicroBlogEntity> MicrofeedEntities { get; }
    [RemoteAttribute]
public int OwnerIndex { get; }
    [RemoteAttribute]
public MicrofeedPost RefReply { get; }
    [RemoteAttribute]
public MicrofeedPost RefRoot { get; }
    [RemoteAttribute]
public bool RenderPostAuthorImage { get; }
    [RemoteAttribute]
public MicrofeedPostCollection Replies { get; }
    [RemoteAttribute]
public int ReplyCount { get; }
    [RemoteAttribute]
public MicrofeedPost RootPost { get; }
    [RemoteAttribute]
public bool SmallImageSizePreferred { get; }
    [RemoteAttribute]
public MicrofeedStatusCode Status { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_CanFollowUp();
    public bool get_CanHaveAttachments();
    public bool get_CanLike();
    public bool get_CanReply();
    public IList`1<MicrofeedDataLink> get_DataLinks();
    public long get_DefinitionId();
    public string get_DefinitionName();
    public string get_Identifier();
    public bool get_Locked();
    public IList`1<MicroBlogEntity> get_MicrofeedEntities();
    public int get_OwnerIndex();
    public MicrofeedPost get_RefReply();
    public MicrofeedPost get_RefRoot();
    public bool get_RenderPostAuthorImage();
    public MicrofeedPostCollection get_Replies();
    public int get_ReplyCount();
    public MicrofeedPost get_RootPost();
    public bool get_SmallImageSizePreferred();
    public MicrofeedStatusCode get_Status();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedThreadCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedThreadCollection : ClientValueObjectCollection`1<MicrofeedThread> {
    private int m_currentUserUnreadMentionCount;
    private DateTime m_newestProcessed;
    private DateTime m_oldestProcessed;
    [RemoteAttribute]
public int CurrentUserUnreadMentionCount { get; }
    [RemoteAttribute]
public DateTime NewestProcessed { get; }
    [RemoteAttribute]
public DateTime OldestProcessed { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_CurrentUserUnreadMentionCount();
    public DateTime get_NewestProcessed();
    public DateTime get_OldestProcessed();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedUserPostCollection")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedUserPostCollection : ClientValueObjectCollection`1<MicrofeedUserPosts> {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[ScriptTypeAttribute("SP.Microfeed.MicrofeedUserPosts")]
public class Microsoft.SharePoint.Client.Microfeed.MicrofeedUserPosts : ClientValueObject {
    private string m_accountName;
    private MicrofeedPostOptionCollection m_postOptions;
    [RemoteAttribute]
public string AccountName { get; public set; }
    [RemoteAttribute]
public MicrofeedPostOptionCollection PostOptions { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AccountName();
    public void set_AccountName(string value);
    public MicrofeedPostOptionCollection get_PostOptions();
    public void set_PostOptions(MicrofeedPostOptionCollection value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialActor")]
public class Microsoft.SharePoint.Client.Social.SocialActor : ClientValueObject {
    private string m_accountName;
    private SocialActorType m_actorType;
    private bool m_canFollow;
    private string m_contentUri;
    private string m_emailAddress;
    private string m_followedContentUri;
    private Guid m_groupId;
    private string m_id;
    private string m_imageUri;
    private bool m_isFollowed;
    private string m_libraryUri;
    private string m_name;
    private string m_personalSiteUri;
    private SocialStatusCode m_status;
    private string m_statusText;
    private Guid m_tagGuid;
    private string m_title;
    private string m_uri;
    [RemoteAttribute]
public string AccountName { get; }
    [RemoteAttribute]
public SocialActorType ActorType { get; }
    [RemoteAttribute]
public bool CanFollow { get; }
    [RemoteAttribute]
public string ContentUri { get; }
    [RemoteAttribute]
public string EmailAddress { get; }
    [RemoteAttribute]
public string FollowedContentUri { get; }
    [RemoteAttribute]
public Guid GroupId { get; }
    [RemoteAttribute]
public string Id { get; }
    [RemoteAttribute]
public string ImageUri { get; }
    [RemoteAttribute]
public bool IsFollowed { get; }
    [RemoteAttribute]
public string LibraryUri { get; }
    [RemoteAttribute]
public string Name { get; }
    [RemoteAttribute]
public string PersonalSiteUri { get; }
    [RemoteAttribute]
public SocialStatusCode Status { get; }
    [RemoteAttribute]
public string StatusText { get; }
    [RemoteAttribute]
public Guid TagGuid { get; }
    [RemoteAttribute]
public string Title { get; }
    [RemoteAttribute]
public string Uri { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AccountName();
    public SocialActorType get_ActorType();
    public bool get_CanFollow();
    public string get_ContentUri();
    public string get_EmailAddress();
    public string get_FollowedContentUri();
    public Guid get_GroupId();
    public string get_Id();
    public string get_ImageUri();
    public bool get_IsFollowed();
    public string get_LibraryUri();
    public string get_Name();
    public string get_PersonalSiteUri();
    public SocialStatusCode get_Status();
    public string get_StatusText();
    public Guid get_TagGuid();
    public string get_Title();
    public string get_Uri();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialActorInfo")]
public class Microsoft.SharePoint.Client.Social.SocialActorInfo : ClientValueObject {
    private string m_accountName;
    private SocialActorType m_actorType;
    private string m_contentUri;
    private string m_id;
    private Guid m_tagGuid;
    [RemoteAttribute]
public string AccountName { get; public set; }
    [RemoteAttribute]
public SocialActorType ActorType { get; public set; }
    [RemoteAttribute]
public string ContentUri { get; public set; }
    [RemoteAttribute]
public string Id { get; public set; }
    [RemoteAttribute]
public Guid TagGuid { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AccountName();
    public void set_AccountName(string value);
    public SocialActorType get_ActorType();
    public void set_ActorType(SocialActorType value);
    public string get_ContentUri();
    public void set_ContentUri(string value);
    public string get_Id();
    public void set_Id(string value);
    public Guid get_TagGuid();
    public void set_TagGuid(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Social.SocialActorType : Enum {
    public int value__;
    public static SocialActorType User;
    public static SocialActorType Document;
    public static SocialActorType Site;
    public static SocialActorType Tag;
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Social.SocialActorTypes : Enum {
    public int value__;
    public static SocialActorTypes None;
    public static SocialActorTypes Users;
    public static SocialActorTypes Documents;
    public static SocialActorTypes Sites;
    public static SocialActorTypes Tags;
    public static SocialActorTypes ExcludeContentWithoutFeeds;
    public static SocialActorTypes IncludeGroupsSites;
    public static SocialActorTypes WithinLast24Hours;
    public static SocialActorTypes All;
}
[ScriptTypeAttribute("SP.Social.SocialAnnouncementManager")]
public static class Microsoft.SharePoint.Client.Social.SocialAnnouncementManager : object {
    [RemoteAttribute]
public static IList`1<TileData> GetCurrentAnnouncements(ClientRuntimeContext context, string url);
}
[ScriptTypeAttribute("SP.Social.SocialAttachment")]
public class Microsoft.SharePoint.Client.Social.SocialAttachment : ClientValueObject {
    private SocialAttachmentKind m_attachmentKind;
    private SocialAttachmentAction m_clickAction;
    private string m_contentUri;
    private string m_description;
    private UInt32 m_height;
    private UInt32 m_length;
    private string m_name;
    private UInt32 m_previewHeight;
    private string m_previewUri;
    private UInt32 m_previewWidth;
    private string m_uri;
    private UInt32 m_width;
    [RemoteAttribute]
public SocialAttachmentKind AttachmentKind { get; public set; }
    [RemoteAttribute]
public SocialAttachmentAction ClickAction { get; public set; }
    [RemoteAttribute]
public string ContentUri { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public UInt32 Height { get; public set; }
    [RemoteAttribute]
public UInt32 Length { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public UInt32 PreviewHeight { get; public set; }
    [RemoteAttribute]
public string PreviewUri { get; public set; }
    [RemoteAttribute]
public UInt32 PreviewWidth { get; public set; }
    [RemoteAttribute]
public string Uri { get; public set; }
    [RemoteAttribute]
public UInt32 Width { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialAttachmentKind get_AttachmentKind();
    public void set_AttachmentKind(SocialAttachmentKind value);
    public SocialAttachmentAction get_ClickAction();
    public void set_ClickAction(SocialAttachmentAction value);
    public string get_ContentUri();
    public void set_ContentUri(string value);
    public string get_Description();
    public void set_Description(string value);
    public UInt32 get_Height();
    public void set_Height(UInt32 value);
    public UInt32 get_Length();
    public void set_Length(UInt32 value);
    public string get_Name();
    public void set_Name(string value);
    public UInt32 get_PreviewHeight();
    public void set_PreviewHeight(UInt32 value);
    public string get_PreviewUri();
    public void set_PreviewUri(string value);
    public UInt32 get_PreviewWidth();
    public void set_PreviewWidth(UInt32 value);
    public string get_Uri();
    public void set_Uri(string value);
    public UInt32 get_Width();
    public void set_Width(UInt32 value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialAttachmentAction")]
public class Microsoft.SharePoint.Client.Social.SocialAttachmentAction : ClientValueObject {
    private SocialAttachmentActionKind m_actionKind;
    private string m_actionUri;
    private UInt32 m_height;
    private UInt32 m_width;
    [RemoteAttribute]
public SocialAttachmentActionKind ActionKind { get; public set; }
    [RemoteAttribute]
public string ActionUri { get; public set; }
    [RemoteAttribute]
public UInt32 Height { get; public set; }
    [RemoteAttribute]
public UInt32 Width { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialAttachmentActionKind get_ActionKind();
    public void set_ActionKind(SocialAttachmentActionKind value);
    public string get_ActionUri();
    public void set_ActionUri(string value);
    public UInt32 get_Height();
    public void set_Height(UInt32 value);
    public UInt32 get_Width();
    public void set_Width(UInt32 value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Social.SocialAttachmentActionKind : Enum {
    public int value__;
    public static SocialAttachmentActionKind Navigate;
    public static SocialAttachmentActionKind AdHocAction;
}
public enum Microsoft.SharePoint.Client.Social.SocialAttachmentKind : Enum {
    public int value__;
    public static SocialAttachmentKind Image;
    public static SocialAttachmentKind Video;
    public static SocialAttachmentKind Document;
}
[ScriptTypeAttribute("SP.Social.SocialDataItem")]
public class Microsoft.SharePoint.Client.Social.SocialDataItem : ClientValueObject {
    private string m_accountName;
    private SocialDataItemType m_itemType;
    private Guid m_tagGuid;
    private string m_text;
    private string m_uri;
    [RemoteAttribute]
public string AccountName { get; public set; }
    [RemoteAttribute]
public SocialDataItemType ItemType { get; public set; }
    [RemoteAttribute]
public Guid TagGuid { get; public set; }
    [RemoteAttribute]
public string Text { get; public set; }
    [RemoteAttribute]
public string Uri { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AccountName();
    public void set_AccountName(string value);
    public SocialDataItemType get_ItemType();
    public void set_ItemType(SocialDataItemType value);
    public Guid get_TagGuid();
    public void set_TagGuid(Guid value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Social.SocialDataItemType : Enum {
    public int value__;
    public static SocialDataItemType User;
    public static SocialDataItemType Document;
    public static SocialDataItemType Site;
    public static SocialDataItemType Tag;
    public static SocialDataItemType Link;
}
[ScriptTypeAttribute("SP.Social.SocialDataOverlay")]
public class Microsoft.SharePoint.Client.Social.SocialDataOverlay : ClientValueObject {
    private Int32[] m_actorIndexes;
    private int m_index;
    private int m_length;
    private string m_linkUri;
    private SocialDataOverlayType m_overlayType;
    [RemoteAttribute]
public Int32[] ActorIndexes { get; }
    [RemoteAttribute]
public int Index { get; }
    [RemoteAttribute]
public int Length { get; }
    [RemoteAttribute]
public string LinkUri { get; }
    [RemoteAttribute]
public SocialDataOverlayType OverlayType { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Int32[] get_ActorIndexes();
    public int get_Index();
    public int get_Length();
    public string get_LinkUri();
    public SocialDataOverlayType get_OverlayType();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Social.SocialDataOverlayType : Enum {
    public int value__;
    public static SocialDataOverlayType Link;
    public static SocialDataOverlayType Actors;
}
[ScriptTypeAttribute("SP.Social.SocialExceptionDetails")]
public class Microsoft.SharePoint.Client.Social.SocialExceptionDetails : ClientValueObject {
    private int m_internalErrorCode;
    private string m_internalMessage;
    private string m_internalStackTrace;
    private string m_internalTypeName;
    private SocialStatusCode m_status;
    [RemoteAttribute]
public int InternalErrorCode { get; }
    [RemoteAttribute]
public string InternalMessage { get; }
    [RemoteAttribute]
public string InternalStackTrace { get; }
    [RemoteAttribute]
public string InternalTypeName { get; }
    [RemoteAttribute]
public SocialStatusCode Status { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_InternalErrorCode();
    public string get_InternalMessage();
    public string get_InternalStackTrace();
    public string get_InternalTypeName();
    public SocialStatusCode get_Status();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialFeed")]
public class Microsoft.SharePoint.Client.Social.SocialFeed : ClientValueObject {
    private SocialFeedAttributes m_attributes;
    private DateTime m_newestProcessed;
    private DateTime m_oldestProcessed;
    private SocialThread[] m_threads;
    private int m_unreadMentionCount;
    [RemoteAttribute]
public SocialFeedAttributes Attributes { get; }
    [RemoteAttribute]
public DateTime NewestProcessed { get; }
    [RemoteAttribute]
public DateTime OldestProcessed { get; }
    [RemoteAttribute]
public SocialThread[] Threads { get; }
    [RemoteAttribute]
public int UnreadMentionCount { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialFeedAttributes get_Attributes();
    public DateTime get_NewestProcessed();
    public DateTime get_OldestProcessed();
    public SocialThread[] get_Threads();
    public int get_UnreadMentionCount();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Social.SocialFeedAttributes : Enum {
    public int value__;
    public static SocialFeedAttributes None;
    public static SocialFeedAttributes MoreThreadsAvailable;
    public static SocialFeedAttributes ValidTimeRange;
    public static SocialFeedAttributes MovedToYammer;
}
[ScriptTypeAttribute("SP.Social.SocialFeedManager")]
public class Microsoft.SharePoint.Client.Social.SocialFeedManager : ClientObject {
    [RemoteAttribute]
public SocialActor Owner { get; }
    [RemoteAttribute]
public string PersonalSitePortalUri { get; }
    public SocialFeedManager(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SocialFeedManager(ClientRuntimeContext context, ObjectPath objectPath);
    public SocialActor get_Owner();
    public string get_PersonalSitePortalUri();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientResult`1<SocialThread> CreatePost(string targetId, SocialPostCreationData creationData);
    [RemoteAttribute]
public ClientResult`1<SocialAttachment> GetPreview(string itemUrl);
    [RemoteAttribute]
public ClientResult`1<SocialThread> LikePost(string postId);
    [RemoteAttribute]
public ClientResult`1<SocialThread> UnlikePost(string postId);
    [RemoteAttribute]
public ClientResult`1<SocialThread> DeletePost(string postId);
    [RemoteAttribute]
public ClientResult`1<SocialThread> LockThread(string threadId);
    [RemoteAttribute]
public ClientResult`1<SocialThread> UnlockThread(string threadId);
    [RemoteAttribute]
public void SuppressThreadNotifications(string threadId);
    [RemoteAttribute]
public ClientResult`1<SocialFeed> GetFeed(SocialFeedType type, SocialFeedOptions options);
    [RemoteAttribute]
public ClientResult`1<SocialFeed> GetFeedFor(string actorId, SocialFeedOptions options);
    [RemoteAttribute]
public ClientResult`1<SocialFeed> GetMentions(bool clearUnreadMentions, SocialFeedOptions options);
    [RemoteAttribute]
public ClientResult`1<int> GetUnreadMentionCount();
    [RemoteAttribute]
public ClientResult`1<SocialThread> GetFullThread(string threadId);
    [RemoteAttribute]
public ClientResult`1<SocialActor[]> GetAllLikers(string postId);
    [RemoteAttribute]
public ClientResult`1<SocialAttachment> CreateImageAttachment(string name, string description, Stream imageData);
    [RemoteAttribute]
public ClientResult`1<SocialAttachment> CreateFileAttachment(string name, string description, Stream fileData);
    [RemoteAttribute]
public ClientResult`1<Stream> GetPreviewImage(string url, string key, string iv);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Social.SocialFeedManagerPropertyNames : object {
    public static string Owner;
    public static string PersonalSitePortalUri;
}
[ScriptTypeAttribute("SP.Social.SocialFeedOptions")]
public class Microsoft.SharePoint.Client.Social.SocialFeedOptions : ClientValueObject {
    private int m_maxThreadCount;
    private DateTime m_newerThan;
    private DateTime m_olderThan;
    private SocialFeedSortOrder m_sortOrder;
    [RemoteAttribute]
public int MaxThreadCount { get; public set; }
    [RemoteAttribute]
public DateTime NewerThan { get; public set; }
    [RemoteAttribute]
public DateTime OlderThan { get; public set; }
    [RemoteAttribute]
public SocialFeedSortOrder SortOrder { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_MaxThreadCount();
    public void set_MaxThreadCount(int value);
    public DateTime get_NewerThan();
    public void set_NewerThan(DateTime value);
    public DateTime get_OlderThan();
    public void set_OlderThan(DateTime value);
    public SocialFeedSortOrder get_SortOrder();
    public void set_SortOrder(SocialFeedSortOrder value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Social.SocialFeedSortOrder : Enum {
    public int value__;
    public static SocialFeedSortOrder ByModifiedTime;
    public static SocialFeedSortOrder ByCreatedTime;
}
public enum Microsoft.SharePoint.Client.Social.SocialFeedType : Enum {
    public int value__;
    public static SocialFeedType Personal;
    public static SocialFeedType News;
    public static SocialFeedType Timeline;
    public static SocialFeedType Likes;
    public static SocialFeedType Everyone;
}
[ScriptTypeAttribute("SP.Social.SocialFollowingManager")]
public class Microsoft.SharePoint.Client.Social.SocialFollowingManager : ClientObject {
    [RemoteAttribute]
public string FollowedDocumentsUri { get; }
    [RemoteAttribute]
public string FollowedSitesUri { get; }
    public SocialFollowingManager(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SocialFollowingManager(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_FollowedDocumentsUri();
    public string get_FollowedSitesUri();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientResult`1<string> MergeFollowedSites(string followedSites);
    [RemoteAttribute]
public ClientResult`1<SocialFollowResult> Follow(SocialActorInfo actor);
    [RemoteAttribute]
public ClientResult`1<bool> StopFollowing(SocialActorInfo actor);
    [RemoteAttribute]
public ClientResult`1<bool> IsFollowed(SocialActorInfo actor);
    [RemoteAttribute]
public ClientResult`1<SocialActor[]> GetFollowed(SocialActorTypes types);
    [RemoteAttribute]
public ClientResult`1<int> GetFollowedCount(SocialActorTypes types);
    [RemoteAttribute]
public ClientResult`1<SocialActor[]> GetFollowers();
    [RemoteAttribute]
public ClientResult`1<SocialActor[]> GetSuggestions();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Social.SocialFollowingManagerPropertyNames : object {
    public static string FollowedDocumentsUri;
    public static string FollowedSitesUri;
}
public enum Microsoft.SharePoint.Client.Social.SocialFollowResult : Enum {
    public int value__;
    public static SocialFollowResult OK;
    public static SocialFollowResult AlreadyFollowing;
    public static SocialFollowResult LimitReached;
    public static SocialFollowResult InternalError;
    public static SocialFollowResult ExpectedFailure;
}
[ScriptTypeAttribute("SP.Social.SocialLink")]
public class Microsoft.SharePoint.Client.Social.SocialLink : ClientValueObject {
    private string m_text;
    private string m_uri;
    [RemoteAttribute]
public string Text { get; public set; }
    [RemoteAttribute]
public string Uri { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Text();
    public void set_Text(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialPost")]
public class Microsoft.SharePoint.Client.Social.SocialPost : ClientValueObject {
    private SocialAttachment m_attachment;
    private SocialPostAttributes m_attributes;
    private int m_authorIndex;
    private DateTime m_createdTime;
    private string m_id;
    private SocialPostActorInfo m_likerInfo;
    private DateTime m_modifiedTime;
    private SocialDataOverlay[] m_overlays;
    private SocialPostType m_postType;
    private string m_preferredImageUri;
    private SocialLink m_source;
    private string m_text;
    [RemoteAttribute]
public SocialAttachment Attachment { get; }
    [RemoteAttribute]
public SocialPostAttributes Attributes { get; }
    [RemoteAttribute]
public int AuthorIndex { get; }
    [RemoteAttribute]
public DateTime CreatedTime { get; }
    [RemoteAttribute]
public string Id { get; }
    [RemoteAttribute]
public SocialPostActorInfo LikerInfo { get; }
    [RemoteAttribute]
public DateTime ModifiedTime { get; }
    [RemoteAttribute]
public SocialDataOverlay[] Overlays { get; }
    [RemoteAttribute]
public SocialPostType PostType { get; }
    [RemoteAttribute]
public string PreferredImageUri { get; }
    [RemoteAttribute]
public SocialLink Source { get; }
    [RemoteAttribute]
public string Text { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialAttachment get_Attachment();
    public SocialPostAttributes get_Attributes();
    public int get_AuthorIndex();
    public DateTime get_CreatedTime();
    public string get_Id();
    public SocialPostActorInfo get_LikerInfo();
    public DateTime get_ModifiedTime();
    public SocialDataOverlay[] get_Overlays();
    public SocialPostType get_PostType();
    public string get_PreferredImageUri();
    public SocialLink get_Source();
    public string get_Text();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialPostActorInfo")]
public class Microsoft.SharePoint.Client.Social.SocialPostActorInfo : ClientValueObject {
    private bool m_includesCurrentUser;
    private Int32[] m_indexes;
    private int m_totalCount;
    [RemoteAttribute]
public bool IncludesCurrentUser { get; }
    [RemoteAttribute]
public Int32[] Indexes { get; }
    [RemoteAttribute]
public int TotalCount { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_IncludesCurrentUser();
    public Int32[] get_Indexes();
    public int get_TotalCount();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Social.SocialPostAttributes : Enum {
    public int value__;
    public static SocialPostAttributes None;
    public static SocialPostAttributes CanLike;
    public static SocialPostAttributes CanDelete;
    public static SocialPostAttributes UseAuthorImage;
    public static SocialPostAttributes UseSmallImage;
    public static SocialPostAttributes CanFollowUp;
}
[ScriptTypeAttribute("SP.Social.SocialPostCreationData")]
public class Microsoft.SharePoint.Client.Social.SocialPostCreationData : ClientValueObject {
    private SocialAttachment m_attachment;
    private SocialDataItem[] m_contentItems;
    private string m_contentText;
    private SocialPostDefinitionData m_definitionData;
    private String[] m_securityUris;
    private SocialLink m_source;
    private bool m_updateStatusText;
    [RemoteAttribute]
public SocialAttachment Attachment { get; public set; }
    [RemoteAttribute]
public SocialDataItem[] ContentItems { get; public set; }
    [RemoteAttribute]
public string ContentText { get; public set; }
    [RemoteAttribute]
public SocialPostDefinitionData DefinitionData { get; public set; }
    [RemoteAttribute]
public String[] SecurityUris { get; public set; }
    [RemoteAttribute]
public SocialLink Source { get; public set; }
    [RemoteAttribute]
public bool UpdateStatusText { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialAttachment get_Attachment();
    public void set_Attachment(SocialAttachment value);
    public SocialDataItem[] get_ContentItems();
    public void set_ContentItems(SocialDataItem[] value);
    public string get_ContentText();
    public void set_ContentText(string value);
    public SocialPostDefinitionData get_DefinitionData();
    public void set_DefinitionData(SocialPostDefinitionData value);
    public String[] get_SecurityUris();
    public void set_SecurityUris(String[] value);
    public SocialLink get_Source();
    public void set_Source(SocialLink value);
    public bool get_UpdateStatusText();
    public void set_UpdateStatusText(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialPostDefinitionData")]
public class Microsoft.SharePoint.Client.Social.SocialPostDefinitionData : ClientValueObject {
    private SocialPostDefinitionDataItem[] m_items;
    private string m_name;
    [RemoteAttribute]
public SocialPostDefinitionDataItem[] Items { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialPostDefinitionDataItem[] get_Items();
    public void set_Items(SocialPostDefinitionDataItem[] value);
    public string get_Name();
    public void set_Name(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialPostDefinitionDataItem")]
public class Microsoft.SharePoint.Client.Social.SocialPostDefinitionDataItem : ClientValueObject {
    private string m_accountName;
    private SocialPostDefinitionDataItemType m_itemType;
    private string m_placeholderName;
    private Guid m_tagGuid;
    private string m_text;
    private string m_uri;
    [RemoteAttribute]
public string AccountName { get; public set; }
    [RemoteAttribute]
public SocialPostDefinitionDataItemType ItemType { get; public set; }
    [RemoteAttribute]
public string PlaceholderName { get; public set; }
    [RemoteAttribute]
public Guid TagGuid { get; public set; }
    [RemoteAttribute]
public string Text { get; public set; }
    [RemoteAttribute]
public string Uri { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AccountName();
    public void set_AccountName(string value);
    public SocialPostDefinitionDataItemType get_ItemType();
    public void set_ItemType(SocialPostDefinitionDataItemType value);
    public string get_PlaceholderName();
    public void set_PlaceholderName(string value);
    public Guid get_TagGuid();
    public void set_TagGuid(Guid value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Social.SocialPostDefinitionDataItemType : Enum {
    public int value__;
    public static SocialPostDefinitionDataItemType Text;
    public static SocialPostDefinitionDataItemType User;
    public static SocialPostDefinitionDataItemType Document;
    public static SocialPostDefinitionDataItemType Site;
    public static SocialPostDefinitionDataItemType Tag;
    public static SocialPostDefinitionDataItemType Link;
}
[ScriptTypeAttribute("SP.Social.SocialPostReference")]
public class Microsoft.SharePoint.Client.Social.SocialPostReference : ClientValueObject {
    private SocialThread m_digest;
    private SocialPost m_post;
    private string m_threadId;
    private int m_threadOwnerIndex;
    [RemoteAttribute]
public SocialThread Digest { get; }
    [RemoteAttribute]
public SocialPost Post { get; }
    [RemoteAttribute]
public string ThreadId { get; }
    [RemoteAttribute]
public int ThreadOwnerIndex { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialThread get_Digest();
    public SocialPost get_Post();
    public string get_ThreadId();
    public int get_ThreadOwnerIndex();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.Social.SocialPostType : Enum {
    public int value__;
    public static SocialPostType Root;
    public static SocialPostType Reply;
}
[ScriptTypeAttribute("SP.Social.SocialRestActor")]
public class Microsoft.SharePoint.Client.Social.SocialRestActor : ClientObject {
    [RemoteAttribute]
public string FollowableItem { get; }
    [RemoteAttribute]
public SocialActor FollowableItemActor { get; }
    [RemoteAttribute]
public SocialActor Me { get; }
    public SocialRestActor(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SocialRestActor(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_FollowableItem();
    public SocialActor get_FollowableItemActor();
    public SocialActor get_Me();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Social.SocialRestActorPropertyNames : object {
    public static string FollowableItem;
    public static string FollowableItemActor;
    public static string Me;
}
[ScriptTypeAttribute("SP.Social.SocialRestFeed")]
public class Microsoft.SharePoint.Client.Social.SocialRestFeed : ClientObject {
    [RemoteAttribute]
public SocialFeed SocialFeed { get; }
    public SocialRestFeed(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SocialRestFeed(ClientRuntimeContext context, ObjectPath objectPath);
    public SocialFeed get_SocialFeed();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialRestFeedManager")]
public class Microsoft.SharePoint.Client.Social.SocialRestFeedManager : ClientObject {
    public SocialRestFeedManager(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SocialRestFeedManager(ClientRuntimeContext context, ObjectPath objectPath);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Social.SocialRestFeedPropertyNames : object {
    public static string SocialFeed;
}
[ScriptTypeAttribute("SP.Social.SocialRestFollowingManager")]
public class Microsoft.SharePoint.Client.Social.SocialRestFollowingManager : ClientObject {
    [RemoteAttribute]
public string FollowedDocumentsUri { get; }
    [RemoteAttribute]
public string FollowedSitesUri { get; }
    [RemoteAttribute]
public string MyFollowedDocumentsUri { get; }
    [RemoteAttribute]
public string MyFollowedSitesUri { get; }
    [RemoteAttribute]
public SocialActor SocialActor { get; }
    public SocialRestFollowingManager(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SocialRestFollowingManager(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_FollowedDocumentsUri();
    public string get_FollowedSitesUri();
    public string get_MyFollowedDocumentsUri();
    public string get_MyFollowedSitesUri();
    public SocialActor get_SocialActor();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Social.SocialRestFollowingManagerPropertyNames : object {
    public static string FollowedDocumentsUri;
    public static string FollowedSitesUri;
    public static string MyFollowedDocumentsUri;
    public static string MyFollowedSitesUri;
    public static string SocialActor;
}
[ScriptTypeAttribute("SP.Social.SocialRestPostCreationData")]
public class Microsoft.SharePoint.Client.Social.SocialRestPostCreationData : ClientValueObject {
    private string m_iD;
    private SocialPostCreationData m_creationData;
    [RemoteAttribute]
public string ID { get; public set; }
    [RemoteAttribute]
public SocialPostCreationData creationData { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ID();
    public void set_ID(string value);
    public SocialPostCreationData get_creationData();
    public void set_creationData(SocialPostCreationData value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Social.SocialRestThread")]
public class Microsoft.SharePoint.Client.Social.SocialRestThread : ClientObject {
    [RemoteAttribute]
public string ID { get; }
    [RemoteAttribute]
public SocialThread SocialThread { get; }
    public SocialRestThread(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SocialRestThread(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_ID();
    public SocialThread get_SocialThread();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.Social.SocialRestThreadPropertyNames : object {
    public static string ID;
    public static string SocialThread;
}
public enum Microsoft.SharePoint.Client.Social.SocialStatusCode : Enum {
    public int value__;
    public static SocialStatusCode OK;
    public static SocialStatusCode InvalidRequest;
    public static SocialStatusCode AccessDenied;
    public static SocialStatusCode ItemNotFound;
    public static SocialStatusCode InvalidOperation;
    public static SocialStatusCode ItemNotModified;
    public static SocialStatusCode InternalError;
    public static SocialStatusCode CacheReadError;
    public static SocialStatusCode CacheUpdateError;
    public static SocialStatusCode PersonalSiteNotFound;
    public static SocialStatusCode FailedToCreatePersonalSite;
    public static SocialStatusCode NotAuthorizedToCreatePersonalSite;
    public static SocialStatusCode CannotCreatePersonalSite;
    public static SocialStatusCode LimitReached;
    public static SocialStatusCode AttachmentError;
    public static SocialStatusCode PartialData;
    public static SocialStatusCode FeatureDisabled;
    public static SocialStatusCode StorageQuotaExceeded;
    public static SocialStatusCode DatabaseError;
}
[ScriptTypeAttribute("SP.Social.SocialThread")]
public class Microsoft.SharePoint.Client.Social.SocialThread : ClientValueObject {
    private SocialActor[] m_actors;
    private SocialThreadAttributes m_attributes;
    private string m_id;
    private int m_ownerIndex;
    private string m_permalink;
    private SocialPostReference m_postReference;
    private SocialPost[] m_replies;
    private SocialPost m_rootPost;
    private SocialStatusCode m_status;
    private SocialThreadType m_threadType;
    private int m_totalReplyCount;
    [RemoteAttribute]
public SocialActor[] Actors { get; }
    [RemoteAttribute]
public SocialThreadAttributes Attributes { get; }
    [RemoteAttribute]
public string Id { get; }
    [RemoteAttribute]
public int OwnerIndex { get; }
    [RemoteAttribute]
public string Permalink { get; }
    [RemoteAttribute]
public SocialPostReference PostReference { get; }
    [RemoteAttribute]
public SocialPost[] Replies { get; }
    [RemoteAttribute]
public SocialPost RootPost { get; }
    [RemoteAttribute]
public SocialStatusCode Status { get; }
    [RemoteAttribute]
public SocialThreadType ThreadType { get; }
    [RemoteAttribute]
public int TotalReplyCount { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SocialActor[] get_Actors();
    public SocialThreadAttributes get_Attributes();
    public string get_Id();
    public int get_OwnerIndex();
    public string get_Permalink();
    public SocialPostReference get_PostReference();
    public SocialPost[] get_Replies();
    public SocialPost get_RootPost();
    public SocialStatusCode get_Status();
    public SocialThreadType get_ThreadType();
    public int get_TotalReplyCount();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.Social.SocialThreadAttributes : Enum {
    public int value__;
    public static SocialThreadAttributes None;
    public static SocialThreadAttributes IsDigest;
    public static SocialThreadAttributes CanReply;
    public static SocialThreadAttributes CanLock;
    public static SocialThreadAttributes IsLocked;
    public static SocialThreadAttributes ReplyLimitReached;
}
public enum Microsoft.SharePoint.Client.Social.SocialThreadType : Enum {
    public int value__;
    public static SocialThreadType Normal;
    public static SocialThreadType LikeReference;
    public static SocialThreadType ReplyReference;
    public static SocialThreadType MentionReference;
    public static SocialThreadType TagReference;
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.UserProfiles.ChangeTypes : Enum {
    public int value__;
    public static ChangeTypes None;
    public static ChangeTypes Add;
    public static ChangeTypes Modify;
    public static ChangeTypes Remove;
    public static ChangeTypes Metadata;
    public static ChangeTypes All;
}
[ScriptTypeAttribute("SP.UserProfiles.CrossGeoSync")]
internal class Microsoft.SharePoint.Client.UserProfiles.CrossGeoSync : ClientObject {
    [EditorBrowsableAttribute("1")]
public CrossGeoSync(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
internal static ClientResult`1<CrossGeoSyncUserDataBatch> ReadFullChangesBatch(ClientRuntimeContext context, Guid targetInstanceId, long lastRecordId, int batchSize);
    [RemoteAttribute]
internal static ClientResult`1<CrossGeoSyncUserDataBatch> ReadIncrementalChangesBatch(ClientRuntimeContext context, Guid targetInstanceId, long lastEventId, int batchSize);
}
[ScriptTypeAttribute("SP.UserProfiles.CrossGeoSyncUserDataBatch")]
internal class Microsoft.SharePoint.Client.UserProfiles.CrossGeoSyncUserDataBatch : ClientValueObject {
    private long m_lastEventId;
    private long m_lastRecordId;
    private IList`1<CrossGeoSyncUserProperty> m_properties;
    [RemoteAttribute]
internal long LastEventId { get; internal set; }
    [RemoteAttribute]
internal long LastRecordId { get; internal set; }
    [RemoteAttribute]
internal IList`1<CrossGeoSyncUserProperty> Properties { get; internal set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    internal long get_LastEventId();
    internal void set_LastEventId(long value);
    internal long get_LastRecordId();
    internal void set_LastRecordId(long value);
    internal IList`1<CrossGeoSyncUserProperty> get_Properties();
    internal void set_Properties(IList`1<CrossGeoSyncUserProperty> value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.UserProfiles.CrossGeoSyncUserProperty")]
internal class Microsoft.SharePoint.Client.UserProfiles.CrossGeoSyncUserProperty : ClientValueObject {
    private Guid m_dsGuid;
    private bool m_isMultivalue;
    private int m_privacy;
    private long m_propertyId;
    private string m_propertyVal;
    private string m_secondaryVal;
    [RemoteAttribute]
internal Guid DsGuid { get; internal set; }
    [RemoteAttribute]
internal bool IsMultivalue { get; internal set; }
    [RemoteAttribute]
internal int Privacy { get; internal set; }
    [RemoteAttribute]
internal long PropertyId { get; internal set; }
    [RemoteAttribute]
internal string PropertyVal { get; internal set; }
    [RemoteAttribute]
internal string SecondaryVal { get; internal set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    internal Guid get_DsGuid();
    internal void set_DsGuid(Guid value);
    internal bool get_IsMultivalue();
    internal void set_IsMultivalue(bool value);
    internal int get_Privacy();
    internal void set_Privacy(int value);
    internal long get_PropertyId();
    internal void set_PropertyId(long value);
    internal string get_PropertyVal();
    internal void set_PropertyVal(string value);
    internal string get_SecondaryVal();
    internal void set_SecondaryVal(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.UserProfiles.FollowedContent")]
public class Microsoft.SharePoint.Client.UserProfiles.FollowedContent : ClientObject {
    [RemoteAttribute]
public string FollowedDocumentsUrl { get; }
    [RemoteAttribute]
public string FollowedSitesUrl { get; }
    public FollowedContent(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public FollowedContent(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_FollowedDocumentsUrl();
    public string get_FollowedSitesUrl();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientResult`1<bool> HasGroupMembershipChangedAndSyncChanges();
    [RemoteAttribute]
public void UpdateFollowedGroupForUser(string contextUri, Guid groupId, string loginName);
    [RemoteAttribute]
public ClientResult`1<FollowResult> Follow(string url, FollowedItemData data);
    [RemoteAttribute]
public ClientResult`1<FollowResult> SetItemPinState(string uri, Guid groupId, int pinState);
    [RemoteAttribute]
public ClientResult`1<FollowResult> FollowItem(FollowedItem item);
    [RemoteAttribute]
public void StopFollowing(string url);
    [RemoteAttribute]
public ClientResult`1<bool> IsFollowed(string url);
    [RemoteAttribute]
public ClientResult`1<FollowedStatus> GetFollowedStatus(string url);
    [RemoteAttribute]
public ClientResult`1<FollowedItem> GetItem(string url);
    [RemoteAttribute]
public ClientResult`1<FollowedItem[]> GetItems(FollowedContentQueryOptions options, int subtype);
    [RemoteAttribute]
public ClientResult`1<FollowedItem[]> GetGroups(int rowLimit);
    [RemoteAttribute]
public void UpdateData(string url, FollowedItemData data);
    [RemoteAttribute]
public ClientResult`1<FollowedItem> RefreshFollowedItem(FollowedItem item);
    [RemoteAttribute]
public ClientResult`1<FollowedItem> FindAndUpdateFollowedGroup(Guid groupId);
    [RemoteAttribute]
public ClientResult`1<FollowedItem> FindAndUpdateFollowedItem(string url);
}
public enum Microsoft.SharePoint.Client.UserProfiles.FollowedContentExceptionCode : Enum {
    public int value__;
    public static FollowedContentExceptionCode ItemAlreadyExists;
    public static FollowedContentExceptionCode ItemDoesNotExist;
    public static FollowedContentExceptionCode InvalidQueryString;
    public static FollowedContentExceptionCode InvalidSubtypeValue;
    public static FollowedContentExceptionCode UnsupportedItemType;
    public static FollowedContentExceptionCode FollowLimitReached;
    public static FollowedContentExceptionCode UntrustedSource;
    public static FollowedContentExceptionCode UnsupportedSite;
    public static FollowedContentExceptionCode InternalError;
    public static FollowedContentExceptionCode ItemNotFound;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.FollowedContentPropertyNames : object {
    public static string FollowedDocumentsUrl;
    public static string FollowedSitesUrl;
}
public enum Microsoft.SharePoint.Client.UserProfiles.FollowedContentQueryOptions : Enum {
    public int value__;
    public static FollowedContentQueryOptions Unset;
    public static FollowedContentQueryOptions Sites;
    public static FollowedContentQueryOptions Documents;
    public static FollowedContentQueryOptions Hidden;
    public static FollowedContentQueryOptions NonFeed;
    public static FollowedContentQueryOptions DefaultOptions;
    public static FollowedContentQueryOptions All;
    public static FollowedContentQueryOptions IncludeGroupsSites;
    public static FollowedContentQueryOptions WithinLast24Hours;
}
[ScriptTypeAttribute("SP.UserProfiles.FollowedItem")]
public class Microsoft.SharePoint.Client.UserProfiles.FollowedItem : ClientValueObject {
    private IDictionary`2<string, object> m_data;
    private string m_fileType;
    private string m_fileTypeProgid;
    private string m_flags;
    private Guid m_groupId;
    private bool m_hasFeed;
    private bool m_hidden;
    private string m_iconUrl;
    private int m_itemId;
    private FollowedItemType m_itemType;
    private Guid m_listId;
    private string m_parentUrl;
    private int m_pinned;
    private string m_serverUrlProgid;
    private Guid m_siteId;
    private int m_subtype;
    private string m_title;
    private Guid m_uniqueId;
    private string m_url;
    private Guid m_webId;
    [RemoteAttribute]
public IDictionary`2<string, object> Data { get; public set; }
    [RemoteAttribute]
public string FileType { get; public set; }
    [RemoteAttribute]
public string FileTypeProgid { get; public set; }
    [RemoteAttribute]
public string Flags { get; public set; }
    [RemoteAttribute]
public Guid GroupId { get; public set; }
    [RemoteAttribute]
public bool HasFeed { get; public set; }
    [RemoteAttribute]
public bool Hidden { get; public set; }
    [RemoteAttribute]
public string IconUrl { get; public set; }
    [RemoteAttribute]
public int ItemId { get; public set; }
    [RemoteAttribute]
public FollowedItemType ItemType { get; public set; }
    [RemoteAttribute]
public Guid ListId { get; public set; }
    [RemoteAttribute]
public string ParentUrl { get; public set; }
    [RemoteAttribute]
public int Pinned { get; public set; }
    [RemoteAttribute]
public string ServerUrlProgid { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public int Subtype { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public Guid UniqueId { get; public set; }
    [RemoteAttribute]
public string Url { get; public set; }
    [RemoteAttribute]
public Guid WebId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public IDictionary`2<string, object> get_Data();
    public void set_Data(IDictionary`2<string, object> value);
    public string get_FileType();
    public void set_FileType(string value);
    public string get_FileTypeProgid();
    public void set_FileTypeProgid(string value);
    public string get_Flags();
    public void set_Flags(string value);
    public Guid get_GroupId();
    public void set_GroupId(Guid value);
    public bool get_HasFeed();
    public void set_HasFeed(bool value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public string get_IconUrl();
    public void set_IconUrl(string value);
    public int get_ItemId();
    public void set_ItemId(int value);
    public FollowedItemType get_ItemType();
    public void set_ItemType(FollowedItemType value);
    public Guid get_ListId();
    public void set_ListId(Guid value);
    public string get_ParentUrl();
    public void set_ParentUrl(string value);
    public int get_Pinned();
    public void set_Pinned(int value);
    public string get_ServerUrlProgid();
    public void set_ServerUrlProgid(string value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public int get_Subtype();
    public void set_Subtype(int value);
    public string get_Title();
    public void set_Title(string value);
    public Guid get_UniqueId();
    public void set_UniqueId(Guid value);
    public string get_Url();
    public void set_Url(string value);
    public Guid get_WebId();
    public void set_WebId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.UserProfiles.FollowedItemData")]
public class Microsoft.SharePoint.Client.UserProfiles.FollowedItemData : ClientObject {
    [RemoteAttribute]
public IDictionary`2<string, object> Properties { get; }
    public FollowedItemData(ClientRuntimeContext context, IDictionary`2<string, object> props);
    [EditorBrowsableAttribute("1")]
public FollowedItemData(ClientRuntimeContext context, ObjectPath objectPath);
    public IDictionary`2<string, object> get_Properties();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.FollowedItemDataPropertyNames : object {
    public static string Properties;
}
public enum Microsoft.SharePoint.Client.UserProfiles.FollowedItemType : Enum {
    public int value__;
    public static FollowedItemType Unknown;
    public static FollowedItemType Document;
    public static FollowedItemType Site;
    public static FollowedItemType All;
}
public enum Microsoft.SharePoint.Client.UserProfiles.FollowedStatus : Enum {
    public int value__;
    public static FollowedStatus Followed;
    public static FollowedStatus NotFollowed;
    public static FollowedStatus NotFollowable;
}
[ScriptTypeAttribute("SP.UserProfiles.FollowResult")]
public class Microsoft.SharePoint.Client.UserProfiles.FollowResult : ClientValueObject {
    private FollowedItem m_item;
    private FollowResultType m_resultType;
    [RemoteAttribute]
public FollowedItem Item { get; public set; }
    [RemoteAttribute]
public FollowResultType ResultType { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public FollowedItem get_Item();
    public void set_Item(FollowedItem value);
    public FollowResultType get_ResultType();
    public void set_ResultType(FollowResultType value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.SharePoint.Client.UserProfiles.FollowResultType : Enum {
    public int value__;
    public static FollowResultType Unknown;
    public static FollowResultType Followed;
    public static FollowResultType Refollowed;
    public static FollowResultType HitFollowLimit;
    public static FollowResultType Failed;
}
[ScriptTypeAttribute("SP.UserProfiles.HashTag")]
public class Microsoft.SharePoint.Client.UserProfiles.HashTag : ClientValueObject {
    private string m_name;
    private UInt32 m_useCount;
    [RemoteAttribute]
public string Name { get; }
    [RemoteAttribute]
public UInt32 UseCount { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Name();
    public UInt32 get_UseCount();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.UserProfiles.HashTagCollection")]
public class Microsoft.SharePoint.Client.UserProfiles.HashTagCollection : ClientObjectCollection`1<HashTag> {
    [EditorBrowsableAttribute("1")]
public HashTagCollection(ClientRuntimeContext context, ObjectPath objectPath);
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.UserProfiles.ObjectTypes : Enum {
    public int value__;
    public static ObjectTypes None;
    public static ObjectTypes SingleValueProperty;
    public static ObjectTypes MultiValueProperty;
    public static ObjectTypes Anniversary;
    public static ObjectTypes DLMembership;
    public static ObjectTypes SiteMembership;
    public static ObjectTypes QuickLink;
    public static ObjectTypes Colleague;
    public static ObjectTypes PersonalizationSite;
    public static ObjectTypes UserProfile;
    public static ObjectTypes WebLog;
    public static ObjectTypes Custom;
    public static ObjectTypes OrganizationProfile;
    public static ObjectTypes OrganizationMembership;
    public static ObjectTypes All;
}
[ScriptTypeAttribute("SP.UserProfiles.PeopleManager")]
public class Microsoft.SharePoint.Client.UserProfiles.PeopleManager : ClientObject {
    [RemoteAttribute]
public string EditProfileLink { get; }
    [RemoteAttribute]
public bool IsMyPeopleListPublic { get; }
    public PeopleManager(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public PeopleManager(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_EditProfileLink();
    public bool get_IsMyPeopleListPublic();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientArrayResult`1<string> GetFollowedTags(int cTagsToFetch);
    [RemoteAttribute]
public static HashTagCollection GetTrendingTags(ClientRuntimeContext context);
    [RemoteAttribute]
public PersonProperties GetMyProperties();
    [RemoteAttribute]
public PersonProperties GetPropertiesFor(string accountName);
    [RemoteAttribute]
public ClientResult`1<string> GetUserProfilePropertyFor(string accountName, string propertyName);
    [RemoteAttribute]
public IEnumerable`1<string> GetUserProfilePropertiesFor(UserProfilePropertiesForUser propertiesForUser);
    [RemoteAttribute]
public ClientResult`1<IDictionary`2<string, string>> GetUserProfileProperties(string accountName);
    [RemoteAttribute]
public ClientResult`1<bool> HardDeleteUserProfile(string accountName, Guid userId);
    [RemoteAttribute]
public ClientResult`1<IDictionary`2<string, string>> GetSPUserInformation(string accountName, Guid siteId);
    [RemoteAttribute]
public ClientResult`1<IDictionary`2<string, string>> RemoveSPUserInformation(string accountName, Guid siteId, string redactName);
    [RemoteAttribute]
public ClientObjectList`1<PersonProperties> GetMySuggestions();
    [RemoteAttribute]
public void HideSuggestion(string accountName);
    [RemoteAttribute]
public void Follow(string accountName);
    [RemoteAttribute]
public void StopFollowing(string accountName);
    [RemoteAttribute]
public void FollowTag(Guid value);
    [RemoteAttribute]
public void StopFollowingTag(Guid value);
    [RemoteAttribute]
public ClientResult`1<bool> AmIFollowing(string accountName);
    [RemoteAttribute]
public static ClientResult`1<bool> IsFollowing(ClientRuntimeContext context, string possibleFollowerAccountName, string possibleFolloweeAccountName);
    [RemoteAttribute]
public ClientObjectList`1<PersonProperties> GetPeopleFollowedByMe();
    [RemoteAttribute]
public ClientObjectList`1<PersonProperties> GetPeopleFollowedBy(string accountName);
    [RemoteAttribute]
public ClientObjectList`1<PersonProperties> GetMyFollowers();
    [RemoteAttribute]
public ClientObjectList`1<PersonProperties> GetFollowersFor(string accountName);
    [RemoteAttribute]
public ClientResult`1<bool> AmIFollowedBy(string accountName);
    [RemoteAttribute]
public void SetSingleValueProfileProperty(string accountName, string propertyName, string propertyValue);
    [RemoteAttribute]
public void SetMultiValuedProfileProperty(string accountName, string propertyName, IList`1<string> propertyValues);
    [RemoteAttribute]
public void SetMyProfilePicture(Stream picture);
    [RemoteAttribute]
public ClientResult`1<string> GetDefaultDocumentLibrary(string accountName, bool createSiteIfNotExists, PersonalSiteCreationPriority siteCreationPriority);
    [RemoteAttribute]
public ClientResult`1<string> SetUserOneDriveQuota(string accountName, long newQuota, long newQuotaWarning);
    [RemoteAttribute]
public ClientResult`1<string> ResetUserOneDriveQuotaToDefault(string accountName);
    [RemoteAttribute]
public ClientResult`1<long> GetUserOneDriveQuotaMax(string accountName);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.PeopleManagerPropertyNames : object {
    public static string EditProfileLink;
    public static string IsMyPeopleListPublic;
}
[ScriptTypeAttribute("SP.UserProfiles.PersonalCache")]
public class Microsoft.SharePoint.Client.UserProfiles.PersonalCache : ClientObject {
    [RemoteAttribute]
public string CacheName { get; public set; }
    [RemoteAttribute]
public string MySiteUrl { get; public set; }
    public PersonalCache(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public PersonalCache(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_CacheName();
    public void set_CacheName(string value);
    public string get_MySiteUrl();
    public void set_MySiteUrl(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientResult`1<PersonalCacheItem[]> ReadCache(string folderPath);
    [RemoteAttribute]
public ClientResult`1<PersonalCacheItem[]> ReadCache2(string folderPath, string mySiteUrl);
    [RemoteAttribute]
public ClientResult`1<PersonalCacheItem[]> ReadCacheOrCreate(ResourcePath folderPath, String[] requiredCacheKeys, bool createIfMissing);
    [RemoteAttribute]
public ClientResult`1<PersonalCacheItem[]> ReadCacheOrCreate2(ResourcePath folderPath, String[] requiredCacheKeys, bool createIfMissing, string mySiteUrl);
    [RemoteAttribute]
public ClientResult`1<PersonalCacheItem[]> ReadCacheOrCreateOrderById(ResourcePath folderPath, String[] requiredCacheKeys, bool createIfMissing);
    [RemoteAttribute]
public ClientResult`1<PersonalCacheItem[]> ReadCacheOrCreateOrderById2(ResourcePath folderPath, String[] requiredCacheKeys, bool createIfMissing, string mySiteUrl);
    [RemoteAttribute]
public void WriteCache(PersonalCacheItem[] cacheItems);
    [RemoteAttribute]
public void WriteCache2(PersonalCacheItem[] cacheItems, string mySiteUrl);
    [RemoteAttribute]
public void DeleteCacheItemsAsync(PersonalCacheItem[] cacheItems);
    [RemoteAttribute]
public void DeleteCacheItemsAsync2(PersonalCacheItem[] cacheItems, string mySiteUrl);
    [RemoteAttribute]
public void LoadUserProfile(string email);
    [RemoteAttribute]
public virtual void Dispose();
}
public enum Microsoft.SharePoint.Client.UserProfiles.PersonalCacheExceptionCode : Enum {
    public int value__;
    public static PersonalCacheExceptionCode PersonalSiteNotFound;
    public static PersonalCacheExceptionCode PersonalCacheListNotFound;
    public static PersonalCacheExceptionCode PersonalCacheListProvisionFailed;
    public static PersonalCacheExceptionCode PersonalCacheItemProvisionFailed;
    public static PersonalCacheExceptionCode FailedToRetrieveCacheListItems;
    public static PersonalCacheExceptionCode PersonalCacheItemInvalidListItemId;
    public static PersonalCacheExceptionCode FailedToUpdateCacheListItem;
    public static PersonalCacheExceptionCode ProfileNotFound;
    public static PersonalCacheExceptionCode RootFolderNotFound;
    public static PersonalCacheExceptionCode FolderProvisionFailed;
    public static PersonalCacheExceptionCode FolderNotFound;
    public static PersonalCacheExceptionCode InvalidCacheKeys;
    public static PersonalCacheExceptionCode InvalidCacheItems;
    public static PersonalCacheExceptionCode WriteConflict;
    public static PersonalCacheExceptionCode ReadFailure;
    public static PersonalCacheExceptionCode FailedToDeleteCacheListItems;
    public static PersonalCacheExceptionCode FileStoreBusy;
}
[ScriptTypeAttribute("SP.UserProfiles.PersonalCacheItem")]
public class Microsoft.SharePoint.Client.UserProfiles.PersonalCacheItem : ClientValueObject {
    private string m_altTitle;
    private string m_cacheKey;
    private string m_cacheName;
    private string m_cacheValue;
    private string m_cacheValueHash;
    private string m_cacheVersion;
    private string m_containerUrl;
    private int m_listItemId;
    private string m_listItemUniqueId;
    private DateTime m_modifiedTimeUtc;
    [RemoteAttribute]
public string AltTitle { get; public set; }
    [RemoteAttribute]
public string CacheKey { get; public set; }
    [RemoteAttribute]
public string CacheName { get; public set; }
    [RemoteAttribute]
public string CacheValue { get; public set; }
    [RemoteAttribute]
public string CacheValueHash { get; public set; }
    [RemoteAttribute]
public string CacheVersion { get; public set; }
    [RemoteAttribute]
public string ContainerUrl { get; public set; }
    [RemoteAttribute]
public int ListItemId { get; public set; }
    [RemoteAttribute]
public string ListItemUniqueId { get; public set; }
    [RemoteAttribute]
public DateTime ModifiedTimeUtc { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AltTitle();
    public void set_AltTitle(string value);
    public string get_CacheKey();
    public void set_CacheKey(string value);
    public string get_CacheName();
    public void set_CacheName(string value);
    public string get_CacheValue();
    public void set_CacheValue(string value);
    public string get_CacheValueHash();
    public void set_CacheValueHash(string value);
    public string get_CacheVersion();
    public void set_CacheVersion(string value);
    public string get_ContainerUrl();
    public void set_ContainerUrl(string value);
    public int get_ListItemId();
    public void set_ListItemId(int value);
    public string get_ListItemUniqueId();
    public void set_ListItemUniqueId(string value);
    public DateTime get_ModifiedTimeUtc();
    public void set_ModifiedTimeUtc(DateTime value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.PersonalCachePropertyNames : object {
    public static string CacheName;
    public static string MySiteUrl;
}
[FlagsAttribute]
public enum Microsoft.SharePoint.Client.UserProfiles.PersonalSiteCapabilities : Enum {
    public int value__;
    public static PersonalSiteCapabilities None;
    public static PersonalSiteCapabilities Profile;
    public static PersonalSiteCapabilities Social;
    public static PersonalSiteCapabilities Storage;
    public static PersonalSiteCapabilities MyTasksDashboard;
    public static PersonalSiteCapabilities Education;
    public static PersonalSiteCapabilities Guest;
}
public enum Microsoft.SharePoint.Client.UserProfiles.PersonalSiteCreationPriority : Enum {
    public int value__;
    public static PersonalSiteCreationPriority Low;
    public static PersonalSiteCreationPriority Medium;
    public static PersonalSiteCreationPriority High;
}
public enum Microsoft.SharePoint.Client.UserProfiles.PersonalSiteInstantiationState : Enum {
    public int value__;
    public static PersonalSiteInstantiationState Uninitialized;
    public static PersonalSiteInstantiationState Enqueued;
    public static PersonalSiteInstantiationState Created;
    public static PersonalSiteInstantiationState Deleted;
    public static PersonalSiteInstantiationState PermissionsGeneralFailure;
    public static PersonalSiteInstantiationState PermissionsUPANotGranted;
    public static PersonalSiteInstantiationState PermissionsUserNotLicensed;
    public static PersonalSiteInstantiationState PermissionsSelfServiceSiteCreationDisabled;
    public static PersonalSiteInstantiationState PermissionsNoMySitesInPeopleLight;
    public static PersonalSiteInstantiationState PermissionsEmptyHostUrl;
    public static PersonalSiteInstantiationState PermissionsHostFailedToInitializePersonalSiteContext;
    public static PersonalSiteInstantiationState ErrorGeneralFailure;
    public static PersonalSiteInstantiationState ErrorManagedPathDoesNotExist;
    public static PersonalSiteInstantiationState ErrorLanguageNotInstalled;
    public static PersonalSiteInstantiationState ErrorPartialCreate;
    public static PersonalSiteInstantiationState ErrorPersonalSiteAlreadyExists;
    public static PersonalSiteInstantiationState ErrorRootSiteNotPresent;
    public static PersonalSiteInstantiationState ErrorSelfServiceSiteCreateCallFailed;
}
[ScriptTypeAttribute("SP.UserProfiles.PersonProperties")]
public class Microsoft.SharePoint.Client.UserProfiles.PersonProperties : ClientObject {
    [RemoteAttribute]
public string AccountName { get; }
    [RemoteAttribute]
public IEnumerable`1<string> DirectReports { get; }
    [RemoteAttribute]
public string DisplayName { get; public set; }
    [RemoteAttribute]
public string Email { get; }
    [RemoteAttribute]
public IEnumerable`1<string> ExtendedManagers { get; }
    [RemoteAttribute]
public IEnumerable`1<string> ExtendedReports { get; }
    [RemoteAttribute]
public bool IsFollowed { get; }
    [RemoteAttribute]
public string LatestPost { get; }
    [RemoteAttribute]
public IEnumerable`1<string> Peers { get; }
    [RemoteAttribute]
public string PersonalSiteHostUrl { get; }
    [RemoteAttribute]
public string PersonalUrl { get; }
    [RemoteAttribute]
public string PictureUrl { get; }
    [RemoteAttribute]
public string Title { get; }
    [RemoteAttribute]
public IDictionary`2<string, string> UserProfileProperties { get; }
    [RemoteAttribute]
public string UserUrl { get; }
    [EditorBrowsableAttribute("1")]
public PersonProperties(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_AccountName();
    public IEnumerable`1<string> get_DirectReports();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Email();
    public IEnumerable`1<string> get_ExtendedManagers();
    public IEnumerable`1<string> get_ExtendedReports();
    public bool get_IsFollowed();
    public string get_LatestPost();
    public IEnumerable`1<string> get_Peers();
    public string get_PersonalSiteHostUrl();
    public string get_PersonalUrl();
    public string get_PictureUrl();
    public string get_Title();
    public IDictionary`2<string, string> get_UserProfileProperties();
    public string get_UserUrl();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.PersonPropertiesPropertyNames : object {
    public static string AccountName;
    public static string DirectReports;
    public static string DisplayName;
    public static string Email;
    public static string ExtendedManagers;
    public static string ExtendedReports;
    public static string IsFollowed;
    public static string LatestPost;
    public static string Peers;
    public static string PersonalSiteHostUrl;
    public static string PersonalUrl;
    public static string PictureUrl;
    public static string Title;
    public static string UserProfileProperties;
    public static string UserUrl;
}
[ScriptTypeAttribute("SP.UserProfiles.ProfileImageStore")]
public class Microsoft.SharePoint.Client.UserProfiles.ProfileImageStore : ClientObject {
    public ProfileImageStore(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public ProfileImageStore(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ClientArrayResult`1<string> SaveUploadedFile(int profileType, string fileNamePrefix, bool isFeedAttachment, string clientFilePath, int fileSize, Stream fileStream);
}
[ScriptTypeAttribute("SP.UserProfiles.ProfileLoader")]
public class Microsoft.SharePoint.Client.UserProfiles.ProfileLoader : ClientObject {
    [EditorBrowsableAttribute("1")]
public ProfileLoader(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public UserProfile GetUserProfile();
    [RemoteAttribute]
public static ProfileLoader GetProfileLoader(ClientRuntimeContext context);
    [RemoteAttribute]
public IEnumerable`1<string> CreatePersonalSiteEnqueueBulk(String[] emailIDs);
    [RemoteAttribute]
public static UserProfile GetOwnerUserProfile(ClientRuntimeContext context);
}
public class Microsoft.SharePoint.Client.UserProfiles.ScriptTypeFactory : object {
    public sealed virtual IFromJson CreateObjectFromScriptType(string scriptType, ClientRuntimeContext context);
}
public enum Microsoft.SharePoint.Client.UserProfiles.SocialDataStoreExceptionCode : Enum {
    public int value__;
    public static SocialDataStoreExceptionCode SocialListNotFound;
    public static SocialDataStoreExceptionCode PersonalSiteNotFound;
    public static SocialDataStoreExceptionCode CannotCreatePersonalSite;
    public static SocialDataStoreExceptionCode NoSocialFeatures;
}
[ScriptTypeAttribute("SP.UserProfiles.UserProfile")]
public class Microsoft.SharePoint.Client.UserProfiles.UserProfile : ClientObject {
    [RemoteAttribute]
public string AccountName { get; }
    [RemoteAttribute]
public string DisplayName { get; public set; }
    [RemoteAttribute]
public FollowedContent FollowedContent { get; }
    [RemoteAttribute]
public string FollowPersonalSiteUrl { get; }
    [RemoteAttribute]
public bool IsDefaultDocumentLibraryBlocked { get; }
    [RemoteAttribute]
public bool IsPeopleListPublic { get; }
    [RemoteAttribute]
public bool IsPrivacySettingOn { get; }
    [RemoteAttribute]
public bool IsSelf { get; }
    [RemoteAttribute]
public string JobTitle { get; }
    [RemoteAttribute]
public int MySiteFirstRunExperience { get; public set; }
    [RemoteAttribute]
public string MySiteHostUrl { get; }
    [RemoteAttribute]
public int O15FirstRunExperience { get; public set; }
    [RemoteAttribute]
public Site PersonalSite { get; }
    [RemoteAttribute]
public PersonalSiteCapabilities PersonalSiteCapabilities { get; }
    [RemoteAttribute]
public string PersonalSiteFirstCreationError { get; }
    [RemoteAttribute]
public DateTime PersonalSiteFirstCreationTime { get; }
    [RemoteAttribute]
public PersonalSiteInstantiationState PersonalSiteInstantiationState { get; }
    [RemoteAttribute]
public DateTime PersonalSiteLastCreationTime { get; }
    [RemoteAttribute]
public int PersonalSiteNumberOfRetries { get; }
    [RemoteAttribute]
public bool PictureImportEnabled { get; public set; }
    [RemoteAttribute]
public string PictureUrl { get; }
    [RemoteAttribute]
public string PublicUrl { get; }
    [RemoteAttribute]
public string SipAddress { get; }
    [RemoteAttribute]
public string UrlToCreatePersonalSite { get; }
    [EditorBrowsableAttribute("1")]
public UserProfile(ClientRuntimeContext context, ObjectPath objectPath);
    public void CreatePersonalSite();
    public void CreatePersonalSiteEnque();
    public string get_AccountName();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public FollowedContent get_FollowedContent();
    public string get_FollowPersonalSiteUrl();
    public bool get_IsDefaultDocumentLibraryBlocked();
    public bool get_IsPeopleListPublic();
    public bool get_IsPrivacySettingOn();
    public bool get_IsSelf();
    public string get_JobTitle();
    public int get_MySiteFirstRunExperience();
    public void set_MySiteFirstRunExperience(int value);
    public string get_MySiteHostUrl();
    public int get_O15FirstRunExperience();
    public void set_O15FirstRunExperience(int value);
    public Site get_PersonalSite();
    public PersonalSiteCapabilities get_PersonalSiteCapabilities();
    public string get_PersonalSiteFirstCreationError();
    public DateTime get_PersonalSiteFirstCreationTime();
    public PersonalSiteInstantiationState get_PersonalSiteInstantiationState();
    public DateTime get_PersonalSiteLastCreationTime();
    public int get_PersonalSiteNumberOfRetries();
    public bool get_PictureImportEnabled();
    public void set_PictureImportEnabled(bool value);
    public string get_PictureUrl();
    public string get_PublicUrl();
    public string get_SipAddress();
    public string get_UrlToCreatePersonalSite();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void ShareAllSocialData(bool shareAll);
    [RemoteAttribute]
public void SetMySiteFirstRunExperience(int value);
    [RemoteAttribute]
public void CreatePersonalSite(int lcid);
    [RemoteAttribute]
public ClientResult`1<int> CreatePersonalSiteFromWorkItem(Guid workItemType);
    [RemoteAttribute]
public void CreatePersonalSiteEnque(bool isInteractive);
    [RemoteAttribute]
public static ClientResult`1<int> CreatePersonalSiteSyncFromWorkItem(ClientRuntimeContext context, Guid workItemType);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.UserProfileObjectPropertyNames : object {
    public static string FollowedContent;
    public static string PersonalSite;
}
[ScriptTypeAttribute("SP.UserProfiles.UserProfilePropertiesForUser")]
public class Microsoft.SharePoint.Client.UserProfiles.UserProfilePropertiesForUser : ClientObject {
    [RemoteAttribute]
public string AccountName { get; public set; }
    public UserProfilePropertiesForUser(ClientRuntimeContext context, string accountName, String[] propertyNames);
    [EditorBrowsableAttribute("1")]
public UserProfilePropertiesForUser(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_AccountName();
    public void set_AccountName(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientArrayResult`1<string> GetPropertyNames();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.UserProfilePropertiesForUserPropertyNames : object {
    public static string AccountName;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.UserProfiles.UserProfilePropertyNames : object {
    public static string AccountName;
    public static string DisplayName;
    public static string FollowPersonalSiteUrl;
    public static string IsDefaultDocumentLibraryBlocked;
    public static string IsPeopleListPublic;
    public static string IsPrivacySettingOn;
    public static string IsSelf;
    public static string JobTitle;
    public static string MySiteFirstRunExperience;
    public static string MySiteHostUrl;
    public static string O15FirstRunExperience;
    public static string PersonalSiteCapabilities;
    public static string PersonalSiteFirstCreationError;
    public static string PersonalSiteFirstCreationTime;
    public static string PersonalSiteInstantiationState;
    public static string PersonalSiteLastCreationTime;
    public static string PersonalSiteNumberOfRetries;
    public static string PictureImportEnabled;
    public static string PictureUrl;
    public static string PublicUrl;
    public static string SipAddress;
    public static string UrlToCreatePersonalSite;
}
