public class Microsoft.Online.SharePoint.Client.TenantAdmin.ScriptTypeFactory : object {
    public sealed virtual IFromJson CreateObjectFromScriptType(string scriptType, ClientRuntimeContext context);
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.ConnectionStatus : Enum {
    public int value__;
    public static ConnectionStatus None;
    public static ConnectionStatus Connected;
    public static ConnectionStatus Disconnected;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.CredentialsType : Enum {
    public int value__;
    public static CredentialsType Source;
    public static CredentialsType Target;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.DeviceActionId : Enum {
    public int value__;
    public static DeviceActionId UpdateDeviceInfo;
    public static DeviceActionId EnableDevice;
    public static DeviceActionId DisableDevice;
    public static DeviceActionId UpdateStatus;
    public static DeviceActionId Heartbeat;
    public static DeviceActionId Disconnecting;
    public static DeviceActionId DeleteDevice;
    public static DeviceActionId UpdateWorkingFolder;
    public static DeviceActionId ValidateWorkingFolder;
    public static DeviceActionId Debug;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.DeviceStatus : Enum {
    public int value__;
    public static DeviceStatus Ready;
    public static DeviceStatus Assigned;
    public static DeviceStatus Working;
    public static DeviceStatus Upgrading;
    public static DeviceStatus Disabling;
    public static DeviceStatus Disabled;
    public static DeviceStatus Enabling;
    public static DeviceStatus Disconnected;
    public static DeviceStatus NotAccessible;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.EPerfBottleneck : Enum {
    public int value__;
    public static EPerfBottleneck None;
    public static EPerfBottleneck Packing;
    public static EPerfBottleneck Packing_SourceReading;
    public static EPerfBottleneck Packing_DiskWriting;
    public static EPerfBottleneck Uploading;
    public static EPerfBottleneck SPOProcessing;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.MigrationTaskStatus : Enum {
    public int value__;
    public static MigrationTaskStatus NoInit;
    public static MigrationTaskStatus Inited;
    public static MigrationTaskStatus Scanning;
    public static MigrationTaskStatus ScanDone;
    public static MigrationTaskStatus InProgress;
    public static MigrationTaskStatus Suspended;
    public static MigrationTaskStatus Pause;
    public static MigrationTaskStatus Completed;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.ScheduleType : Enum {
    public int value__;
    public static ScheduleType None;
    public static ScheduleType RunOnce;
    public static ScheduleType Daily;
    public static ScheduleType Weekly;
    public static ScheduleType Monthly;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.SourceType : Enum {
    public int value__;
    public static SourceType FileShare;
    public static SourceType SharePoint;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.StorageActionId : Enum {
    public int value__;
    public static StorageActionId None;
    public static StorageActionId Update;
    public static StorageActionId Upgrade;
    public static StorageActionId Debug;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.TaskActionId : Enum {
    public int value__;
    public static TaskActionId UpdateTaskInfo;
    public static TaskActionId PauseTask;
    public static TaskActionId ResumeTask;
    public static TaskActionId CancelTask;
    public static TaskActionId RerunTask;
    public static TaskActionId UpdateStatus;
    public static TaskActionId AssignTask;
    public static TaskActionId DeleteTask;
    public static TaskActionId AddTask;
    public static TaskActionId Debug;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.TaskErrorCode : Enum {
    public int value__;
    public static TaskErrorCode NoError;
    public static TaskErrorCode UnknownError;
    public static TaskErrorCode NoResponse;
    public static TaskErrorCode SourceCredentialsNotFound;
    public static TaskErrorCode SourceCredentialsInvalid;
    public static TaskErrorCode TargetCredentialsNotFound;
    public static TaskErrorCode TargetCredentialsInvalid;
    public static TaskErrorCode InvalidDecryptionKey;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.TaskFailure : Enum {
    public int value__;
    public static TaskFailure NoFailure;
    public static TaskFailure FailedToStartTask;
    public static TaskFailure FailedToPauseTask;
    public static TaskFailure FailedToResumeTask;
    public static TaskFailure FailedToCancelTask;
    public static TaskFailure FailedRunningTask;
    public static TaskFailure FailedToUploadReport;
}
public enum Microsoft.Online.SharePoint.MigrationCenter.Common.TaskManagementStatus : Enum {
    public int value__;
    public static TaskManagementStatus Waiting;
    public static TaskManagementStatus Assigned;
    public static TaskManagementStatus Running;
    public static TaskManagementStatus Pausing;
    public static TaskManagementStatus Paused;
    public static TaskManagementStatus Resuming;
    public static TaskManagementStatus Cancelling;
    public static TaskManagementStatus Completed;
    public static TaskManagementStatus Failed;
    public static TaskManagementStatus Scheduled;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.SPLogger.LogExport")]
public class Microsoft.Online.SharePoint.SPLogger.LogExport : ClientObject {
    public LogExport(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public LogExport(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ClientArrayResult`1<string> GetLogTypes();
    [RemoteAttribute]
public ClientArrayResult`1<string> GetPartitions(string logType);
    [RemoteAttribute]
public ClientObjectList`1<LogFileInfo> GetFiles(string partitionId, string logType);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.SPLogger.LogFileInfo")]
public class Microsoft.Online.SharePoint.SPLogger.LogFileInfo : ClientObject {
    [RemoteAttribute]
public string AlternateUrl { get; }
    [RemoteAttribute]
public Byte[] DecryptionIV { get; }
    [RemoteAttribute]
public Byte[] DecryptionKey { get; }
    [RemoteAttribute]
public string Exception { get; }
    [RemoteAttribute]
public string FileName { get; }
    [RemoteAttribute]
public string Url { get; }
    [EditorBrowsableAttribute("1")]
public LogFileInfo(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_AlternateUrl();
    public Byte[] get_DecryptionIV();
    public Byte[] get_DecryptionKey();
    public string get_Exception();
    public string get_FileName();
    public string get_Url();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.SPLogger.LogFileInfoPropertyNames : object {
    public static string AlternateUrl;
    public static string DecryptionIV;
    public static string DecryptionKey;
    public static string Exception;
    public static string FileName;
    public static string Url;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdmin.MiddleTier.DDIAdapter")]
public class Microsoft.Online.SharePoint.TenantAdmin.MiddleTier.DDIAdapter : ClientObject {
    public DDIAdapter(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public DDIAdapter(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ClientResult`1<string> GetObject(string schema, string workflow, Stream stream);
    [RemoteAttribute]
public ClientResult`1<string> SetObject(string schema, string workflow, Stream stream);
    [RemoteAttribute]
public ClientResult`1<string> NewObject(string schema, string workflow, Stream stream);
    [RemoteAttribute]
public ClientResult`1<string> GetList(string schema, string workflow, Stream stream);
    [RemoteAttribute]
public ClientResult`1<string> RemoveObjects(string schema, string workflow, Stream stream);
    [RemoteAttribute]
public ClientResult`1<string> MultiObjectExecute(string schema, string workflow, Stream stream);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.AppErrorEntry")]
public class Microsoft.Online.SharePoint.TenantAdministration.AppErrorEntry : ClientObject {
    [RemoteAttribute]
public Guid CorrelationId { get; public set; }
    [RemoteAttribute]
public string ErrorMessage { get; public set; }
    [RemoteAttribute]
public AppErrorType ErrorType { get; public set; }
    [RemoteAttribute]
public string InstanceUrl { get; public set; }
    [RemoteAttribute]
public Guid ProductId { get; public set; }
    [RemoteAttribute]
public DateTime TimeStampInUTC { get; public set; }
    public AppErrorEntry(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public AppErrorEntry(ClientRuntimeContext context, ObjectPath objectPath);
    public Guid get_CorrelationId();
    public void set_CorrelationId(Guid value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public AppErrorType get_ErrorType();
    public void set_ErrorType(AppErrorType value);
    public string get_InstanceUrl();
    public void set_InstanceUrl(string value);
    public Guid get_ProductId();
    public void set_ProductId(Guid value);
    public DateTime get_TimeStampInUTC();
    public void set_TimeStampInUTC(DateTime value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.AppErrorEntryPropertyNames : object {
    public static string CorrelationId;
    public static string ErrorMessage;
    public static string ErrorType;
    public static string InstanceUrl;
    public static string ProductId;
    public static string TimeStampInUTC;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.AppErrorType : Enum {
    public int value__;
    public static AppErrorType None;
    public static AppErrorType InstallError;
    public static AppErrorType UpgradeError;
    public static AppErrorType RuntimeError;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.AppInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.AppInfo : ClientObject {
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public Guid ProductId { get; public set; }
    [RemoteAttribute]
public AppSource Source { get; public set; }
    [EditorBrowsableAttribute("1")]
public AppInfo(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Name();
    public void set_Name(string value);
    public Guid get_ProductId();
    public void set_ProductId(Guid value);
    public AppSource get_Source();
    public void set_Source(AppSource value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.AppInfoPropertyNames : object {
    public static string Name;
    public static string ProductId;
    public static string Source;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.AppSource : Enum {
    public int value__;
    public static AppSource CorporateGallery;
    public static AppSource MarketPlace;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy : Enum {
    public int value__;
    public static AppViewsPolicy Unknown;
    public static AppViewsPolicy Disabled;
    public static AppViewsPolicy NotDisabled;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.AzureSubscriptionState : Enum {
    public int value__;
    public static AzureSubscriptionState Unknown;
    public static AzureSubscriptionState Active;
    public static AzureSubscriptionState Deleted;
    public static AzureSubscriptionState Disabled;
    public static AzureSubscriptionState Expired;
    public static AzureSubscriptionState PastDue;
    public static AzureSubscriptionState Warned;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.columnsInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.columnsInfo : ClientValueObject {
    private string m_columnName;
    private string m_viewFieldName;
    [RemoteAttribute]
public string columnName { get; public set; }
    [RemoteAttribute]
public string viewFieldName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_columnName();
    public void set_columnName(string value);
    public string get_viewFieldName();
    public void set_viewFieldName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy : Enum {
    public int value__;
    public static CompanyWideSharingLinksPolicy Unknown;
    public static CompanyWideSharingLinksPolicy Disabled;
    public static CompanyWideSharingLinksPolicy NotDisabled;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.CreatePolicyRequest")]
public class Microsoft.Online.SharePoint.TenantAdministration.CreatePolicyRequest : ClientValueObject {
    private bool m_isPreviewRun;
    private string m_policyCustomName;
    private string m_policyDefinitionDetails;
    private string m_policyDescription;
    private PolicyFrequencyUnits m_policyFrequencyUnit;
    private int m_policyFrequencyValue;
    private Guid m_policyId;
    private string m_policyTags;
    private PolicyTemplate m_policyTemplate;
    private PolicyTypes m_policyType;
    [RemoteAttribute]
public bool isPreviewRun { get; public set; }
    [RemoteAttribute]
public string policyCustomName { get; public set; }
    [RemoteAttribute]
public string policyDefinitionDetails { get; public set; }
    [RemoteAttribute]
public string policyDescription { get; public set; }
    [RemoteAttribute]
public PolicyFrequencyUnits policyFrequencyUnit { get; public set; }
    [RemoteAttribute]
public int policyFrequencyValue { get; public set; }
    [RemoteAttribute]
public Guid policyId { get; public set; }
    [RemoteAttribute]
public string policyTags { get; public set; }
    [RemoteAttribute]
public PolicyTemplate policyTemplate { get; public set; }
    [RemoteAttribute]
public PolicyTypes policyType { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_isPreviewRun();
    public void set_isPreviewRun(bool value);
    public string get_policyCustomName();
    public void set_policyCustomName(string value);
    public string get_policyDefinitionDetails();
    public void set_policyDefinitionDetails(string value);
    public string get_policyDescription();
    public void set_policyDescription(string value);
    public PolicyFrequencyUnits get_policyFrequencyUnit();
    public void set_policyFrequencyUnit(PolicyFrequencyUnits value);
    public int get_policyFrequencyValue();
    public void set_policyFrequencyValue(int value);
    public Guid get_policyId();
    public void set_policyId(Guid value);
    public string get_policyTags();
    public void set_policyTags(string value);
    public PolicyTemplate get_policyTemplate();
    public void set_policyTemplate(PolicyTemplate value);
    public PolicyTypes get_policyType();
    public void set_policyType(PolicyTypes value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.DeletedSiteProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.DeletedSiteProperties : ClientObject {
    [RemoteAttribute]
public string ArchiveStatus { get; }
    [RemoteAttribute]
public int DaysRemaining { get; }
    [RemoteAttribute]
public DateTime DeletionTime { get; }
    [RemoteAttribute]
public Guid SiteId { get; }
    [RemoteAttribute]
public string Status { get; }
    [RemoteAttribute]
public long StorageMaximumLevel { get; }
    [RemoteAttribute]
public string Url { get; }
    [RemoteAttribute]
public double UserCodeMaximumLevel { get; }
    public DeletedSiteProperties(ClientRuntimeContext context, string url);
    [EditorBrowsableAttribute("1")]
public DeletedSiteProperties(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_ArchiveStatus();
    public int get_DaysRemaining();
    public DateTime get_DeletionTime();
    public Guid get_SiteId();
    public string get_Status();
    public long get_StorageMaximumLevel();
    public string get_Url();
    public double get_UserCodeMaximumLevel();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.DeletedSitePropertiesPropertyNames : object {
    public static string ArchiveStatus;
    public static string DaysRemaining;
    public static string DeletionTime;
    public static string SiteId;
    public static string Status;
    public static string StorageMaximumLevel;
    public static string Url;
    public static string UserCodeMaximumLevel;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.DenyAddAndCustomizePagesStatus : Enum {
    public int value__;
    public static DenyAddAndCustomizePagesStatus Unknown;
    public static DenyAddAndCustomizePagesStatus Disabled;
    public static DenyAddAndCustomizePagesStatus Enabled;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.EEEUType : Enum {
    public int value__;
    public static EEEUType SPGroups;
    public static EEEUType FilesAndFolders;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.ErrorFacet")]
public class Microsoft.Online.SharePoint.TenantAdministration.ErrorFacet : ClientValueObject {
    private string m_code;
    private string m_message;
    [RemoteAttribute]
public string Code { get; public set; }
    [RemoteAttribute]
public string Message { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Code();
    public void set_Code(string value);
    public string get_Message();
    public void set_Message(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.EsignatureThirdPartyProvidersInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.EsignatureThirdPartyProvidersInfo : ClientValueObject {
    private bool m_isEnabled;
    private string m_providerName;
    [RemoteAttribute]
public bool IsEnabled { get; public set; }
    [RemoteAttribute]
public string ProviderName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.FeatureEnabledInContentCenter : Enum {
    public int value__;
    public static FeatureEnabledInContentCenter Enabled;
    public static FeatureEnabledInContentCenter Disabled;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.FileSensitivityLabelInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.FileSensitivityLabelInfo : ClientObject {
    [RemoteAttribute]
public string DisplayName { get; public set; }
    [RemoteAttribute]
public string LabelId { get; public set; }
    [RemoteAttribute]
public string ParentLabelId { get; public set; }
    [RemoteAttribute]
public bool ProtectionEnabled { get; public set; }
    [EditorBrowsableAttribute("1")]
public FileSensitivityLabelInfo(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_LabelId();
    public void set_LabelId(string value);
    public string get_ParentLabelId();
    public void set_ParentLabelId(string value);
    public bool get_ProtectionEnabled();
    public void set_ProtectionEnabled(bool value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.FileSensitivityLabelInfoPropertyNames : object {
    public static string DisplayName;
    public static string LabelId;
    public static string ParentLabelId;
    public static string ProtectionEnabled;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.FlowsPolicy : Enum {
    public int value__;
    public static FlowsPolicy Unknown;
    public static FlowsPolicy Disabled;
    public static FlowsPolicy NotDisabled;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.GroupInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.GroupInfo : ClientValueObject {
    private int m_groupStatusInAAD;
    private string m_siteUrl;
    [RemoteAttribute]
public int GroupStatusInAAD { get; public set; }
    [RemoteAttribute]
public string SiteUrl { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_GroupStatusInAAD();
    public void set_GroupStatusInAAD(int value);
    public string get_SiteUrl();
    public void set_SiteUrl(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.HubSitePermission")]
public class Microsoft.Online.SharePoint.TenantAdministration.HubSitePermission : ClientValueObject {
    private string m_displayName;
    private string m_principalName;
    private SPOHubSiteUserRights m_rights;
    [RemoteAttribute]
public string DisplayName { get; public set; }
    [RemoteAttribute]
public string PrincipalName { get; public set; }
    [RemoteAttribute]
public SPOHubSiteUserRights Rights { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_PrincipalName();
    public void set_PrincipalName(string value);
    public SPOHubSiteUserRights get_Rights();
    public void set_Rights(SPOHubSiteUserRights value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.HubSiteProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.HubSiteProperties : ClientObject {
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public bool EnablePermissionsSync { get; public set; }
    [RemoteAttribute]
public bool HideNameInNavigation { get; public set; }
    [RemoteAttribute]
public Guid ID { get; }
    [RemoteAttribute]
public string LogoUrl { get; public set; }
    [RemoteAttribute]
public Guid ParentHubSiteId { get; public set; }
    [RemoteAttribute]
public IList`1<HubSitePermission> Permissions { get; }
    [RemoteAttribute]
public bool RequiresJoinApproval { get; public set; }
    [RemoteAttribute]
public Guid SiteDesignId { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public string SiteUrl { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public HubSiteProperties(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Description();
    public void set_Description(string value);
    public bool get_EnablePermissionsSync();
    public void set_EnablePermissionsSync(bool value);
    public bool get_HideNameInNavigation();
    public void set_HideNameInNavigation(bool value);
    public Guid get_ID();
    public string get_LogoUrl();
    public void set_LogoUrl(string value);
    public Guid get_ParentHubSiteId();
    public void set_ParentHubSiteId(Guid value);
    public IList`1<HubSitePermission> get_Permissions();
    public bool get_RequiresJoinApproval();
    public void set_RequiresJoinApproval(bool value);
    public Guid get_SiteDesignId();
    public void set_SiteDesignId(Guid value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public string get_SiteUrl();
    public void set_SiteUrl(string value);
    public string get_Title();
    public void set_Title(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void Update();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.HubSitePropertiesPropertyNames : object {
    public static string Description;
    public static string EnablePermissionsSync;
    public static string HideNameInNavigation;
    public static string ID;
    public static string LogoUrl;
    public static string ParentHubSiteId;
    public static string Permissions;
    public static string RequiresJoinApproval;
    public static string SiteDesignId;
    public static string SiteId;
    public static string SiteUrl;
    public static string Title;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Internal.SPO3rdPartyAADPermissionGrant")]
public class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPO3rdPartyAADPermissionGrant : ClientObject {
    [RemoteAttribute]
public string ClientId { get; }
    [RemoteAttribute]
public string ConsentType { get; }
    [RemoteAttribute]
public bool IsDomainIsolated { get; }
    [RemoteAttribute]
public string ObjectId { get; }
    [RemoteAttribute]
public string PackageName { get; }
    [RemoteAttribute]
public string Resource { get; }
    [RemoteAttribute]
public string Scope { get; }
    [EditorBrowsableAttribute("1")]
public SPO3rdPartyAADPermissionGrant(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_ClientId();
    public string get_ConsentType();
    public bool get_IsDomainIsolated();
    public string get_ObjectId();
    public string get_PackageName();
    public string get_Resource();
    public string get_Scope();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Internal.SPO3rdPartyAADPermissionGrantManager")]
public class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPO3rdPartyAADPermissionGrantManager : ClientObjectCollection`1<SPO3rdPartyAADPermissionGrant> {
    [EditorBrowsableAttribute("1")]
public SPO3rdPartyAADPermissionGrantManager(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void Remove(string servicePrincipalId, string resource, string scope);
    [RemoteAttribute]
public void Add(string servicePrincipalId, string resource, string scope);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPO3rdPartyAADPermissionGrantPropertyNames : object {
    public static string ClientId;
    public static string ConsentType;
    public static string IsDomainIsolated;
    public static string ObjectId;
    public static string PackageName;
    public static string Resource;
    public static string Scope;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipal")]
public class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipal : ClientObject {
    [RemoteAttribute]
public bool AccountEnabled { get; public set; }
    [RemoteAttribute]
public string AppHelperId { get; }
    [RemoteAttribute]
public string AppId { get; }
    [RemoteAttribute]
public IList`1<string> AppsToDelete { get; }
    [RemoteAttribute]
public SPO3rdPartyAADPermissionGrantManager GrantManager { get; }
    [RemoteAttribute]
public SPOWebAppServicePrincipalPermissionGrantCollection PermissionGrants { get; }
    [RemoteAttribute]
public SPOWebAppServicePrincipalPermissionRequestCollection PermissionRequests { get; }
    [RemoteAttribute]
public IEnumerable`1<string> ReplyUrls { get; }
    [RemoteAttribute]
public IList`1<Guid> ServicePrincipalObjectIds { get; }
    public SPOWebAppServicePrincipal(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SPOWebAppServicePrincipal(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_AccountEnabled();
    public void set_AccountEnabled(bool value);
    public string get_AppHelperId();
    public string get_AppId();
    public IList`1<string> get_AppsToDelete();
    public SPO3rdPartyAADPermissionGrantManager get_GrantManager();
    public SPOWebAppServicePrincipalPermissionGrantCollection get_PermissionGrants();
    public SPOWebAppServicePrincipalPermissionRequestCollection get_PermissionRequests();
    public IEnumerable`1<string> get_ReplyUrls();
    public IList`1<Guid> get_ServicePrincipalObjectIds();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void RemoveAppsToDelete(IList`1<string> domainsToDelete);
    [RemoteAttribute]
public void UpdateSpfxClientSecret(string secretValue);
    [RemoteAttribute]
public void UpdateSpfxThirdPartyAppId(string appId);
    [RemoteAttribute]
public void UpdateSpfxThirdPartyIsolatedSecret(string servicePrincipalId, string secretValue);
    [RemoteAttribute]
public void UpdateSpfxThirdPartyIsolatedComponentFields(string catalogItemId, string apAppObjectId, string spObjectId, string appId);
    [RemoteAttribute]
public ClientResult`1<IDictionary`2<string, string>> GetIsolatedAppDomainsByAppId(IList`1<string> appIds);
    [RemoteAttribute]
public void Update();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalObjectPropertyNames : object {
    public static string GrantManager;
    public static string PermissionGrants;
    public static string PermissionRequests;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionGrant")]
public class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionGrant : ClientObject {
    [RemoteAttribute]
public string ClientId { get; }
    [RemoteAttribute]
public string ConsentType { get; }
    [RemoteAttribute]
public bool IsDomainIsolated { get; }
    [RemoteAttribute]
public string ObjectId { get; }
    [RemoteAttribute]
public string PackageName { get; }
    [RemoteAttribute]
public string Resource { get; }
    [RemoteAttribute]
public string ResourceId { get; }
    [RemoteAttribute]
public string Scope { get; }
    [EditorBrowsableAttribute("1")]
public SPOWebAppServicePrincipalPermissionGrant(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_ClientId();
    public string get_ConsentType();
    public bool get_IsDomainIsolated();
    public string get_ObjectId();
    public string get_PackageName();
    public string get_Resource();
    public string get_ResourceId();
    public string get_Scope();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void DeleteObject();
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionGrantCollection")]
public class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionGrantCollection : ClientObjectCollection`1<SPOWebAppServicePrincipalPermissionGrant> {
    [EditorBrowsableAttribute("1")]
public SPOWebAppServicePrincipalPermissionGrantCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public SPOWebAppServicePrincipalPermissionGrant GetByObjectId(string objectId);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionGrantPropertyNames : object {
    public static string ClientId;
    public static string ConsentType;
    public static string IsDomainIsolated;
    public static string ObjectId;
    public static string PackageName;
    public static string Resource;
    public static string ResourceId;
    public static string Scope;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionRequest")]
public class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionRequest : ClientObject {
    [RemoteAttribute]
public string ClientComponentItemUniqueId { get; }
    [RemoteAttribute]
public Guid Id { get; }
    [RemoteAttribute]
public bool IsDomainIsolated { get; }
    [RemoteAttribute]
public string IsolatedDomainUrl { get; }
    [RemoteAttribute]
public bool IsPreauthorizedPermission { get; }
    [RemoteAttribute]
public string MultiTenantAppId { get; }
    [RemoteAttribute]
public string MultiTenantAppReplyUrl { get; }
    [RemoteAttribute]
public string PackageApproverName { get; }
    [RemoteAttribute]
public string PackageName { get; }
    [RemoteAttribute]
public string PackageVersion { get; }
    [RemoteAttribute]
public string Resource { get; }
    [RemoteAttribute]
public string ResourceId { get; }
    [RemoteAttribute]
public string Scope { get; }
    [RemoteAttribute]
public DateTime TimeRequested { get; }
    [EditorBrowsableAttribute("1")]
public SPOWebAppServicePrincipalPermissionRequest(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_ClientComponentItemUniqueId();
    public Guid get_Id();
    public bool get_IsDomainIsolated();
    public string get_IsolatedDomainUrl();
    public bool get_IsPreauthorizedPermission();
    public string get_MultiTenantAppId();
    public string get_MultiTenantAppReplyUrl();
    public string get_PackageApproverName();
    public string get_PackageName();
    public string get_PackageVersion();
    public string get_Resource();
    public string get_ResourceId();
    public string get_Scope();
    public DateTime get_TimeRequested();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public SPOWebAppServicePrincipalPermissionGrant Approve();
    [RemoteAttribute]
public void Deny();
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionRequestCollection")]
public class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionRequestCollection : ClientObjectCollection`1<SPOWebAppServicePrincipalPermissionRequest> {
    [EditorBrowsableAttribute("1")]
public SPOWebAppServicePrincipalPermissionRequestCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public SPOWebAppServicePrincipalPermissionRequest GetById(Guid id);
    [RemoteAttribute]
public SPOWebAppServicePrincipalPermissionGrant Approve(string resource, string scope);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPermissionRequestPropertyNames : object {
    public static string ClientComponentItemUniqueId;
    public static string Id;
    public static string IsDomainIsolated;
    public static string IsolatedDomainUrl;
    public static string IsPreauthorizedPermission;
    public static string MultiTenantAppId;
    public static string MultiTenantAppReplyUrl;
    public static string PackageApproverName;
    public static string PackageName;
    public static string PackageVersion;
    public static string Resource;
    public static string ResourceId;
    public static string Scope;
    public static string TimeRequested;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.Internal.SPOWebAppServicePrincipalPropertyNames : object {
    public static string AccountEnabled;
    public static string AppHelperId;
    public static string AppId;
    public static string AppsToDelete;
    public static string ReplyUrls;
    public static string ServicePrincipalObjectIds;
}
public interface Microsoft.Online.SharePoint.TenantAdministration.ISPOPortalLaunchValidator {
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.MessagesFieldsData")]
public class Microsoft.Online.SharePoint.TenantAdministration.MessagesFieldsData : ClientValueObject {
    private string m_bearToken;
    private string m_environment;
    [RemoteAttribute]
public string bearToken { get; public set; }
    [RemoteAttribute]
public string environment { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_bearToken();
    public void set_bearToken(string value);
    public string get_environment();
    public void set_environment(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.NullableBoolean : Enum {
    public int value__;
    public static NullableBoolean NULL;
    public static NullableBoolean TRUE;
    public static NullableBoolean FALSE;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.ObjectCharacterRecognitionMode : Enum {
    public int value__;
    public static ObjectCharacterRecognitionMode Disabled;
    public static ObjectCharacterRecognitionMode InclusionList;
    public static ObjectCharacterRecognitionMode ExclusionList;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.OdbMigrationStatus : Enum {
    public int value__;
    public static OdbMigrationStatus Invalid;
    public static OdbMigrationStatus NotStarted;
    public static OdbMigrationStatus InProgress;
    public static OdbMigrationStatus Completed;
    public static OdbMigrationStatus Failed;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.PersonalSiteFilter : Enum {
    public int value__;
    public static PersonalSiteFilter UseServerDefault;
    public static PersonalSiteFilter Include;
    public static PersonalSiteFilter Exclude;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.PowerAppsEnvironment")]
public class Microsoft.Online.SharePoint.TenantAdministration.PowerAppsEnvironment : ClientValueObject {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.PowerAppsEnvironmentContext")]
public class Microsoft.Online.SharePoint.TenantAdministration.PowerAppsEnvironmentContext : ClientValueObject {
    private string m_dataverseInstanceUrl;
    private string m_displayName;
    private bool m_isTestEnvironment;
    private string m_lastGetEnvironmentError;
    private string m_name;
    private DateTime m_updatedUTC;
    [RemoteAttribute]
public string DataverseInstanceUrl { get; public set; }
    [RemoteAttribute]
public string DisplayName { get; public set; }
    [RemoteAttribute]
public bool IsTestEnvironment { get; public set; }
    [RemoteAttribute]
public string LastGetEnvironmentError { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public DateTime UpdatedUTC { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_DataverseInstanceUrl();
    public void set_DataverseInstanceUrl(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public bool get_IsTestEnvironment();
    public void set_IsTestEnvironment(bool value);
    public string get_LastGetEnvironmentError();
    public void set_LastGetEnvironmentError(string value);
    public string get_Name();
    public void set_Name(string value);
    public DateTime get_UpdatedUTC();
    public void set_UpdatedUTC(DateTime value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.PrivacyEnum : Enum {
    public int value__;
    public static PrivacyEnum All;
    public static PrivacyEnum Private;
    public static PrivacyEnum Public;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.PWAEnabledStatus : Enum {
    public int value__;
    public static PWAEnabledStatus Unknown;
    public static PWAEnabledStatus Disabled;
    public static PWAEnabledStatus Enabled;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.RecentAdminActionReportPayload")]
public class Microsoft.Online.SharePoint.TenantAdministration.RecentAdminActionReportPayload : ClientValueObject {
    private string m_actions;
    private string m_name;
    private DateTime m_queryEndDate;
    private DateTime m_queryStartDate;
    private ChangeHistoryReportType m_reportType;
    private string m_sites;
    private string m_users;
    [RemoteAttribute]
public string actions { get; public set; }
    [RemoteAttribute]
public string name { get; public set; }
    [RemoteAttribute]
public DateTime queryEndDate { get; public set; }
    [RemoteAttribute]
public DateTime queryStartDate { get; public set; }
    [RemoteAttribute]
public ChangeHistoryReportType reportType { get; public set; }
    [RemoteAttribute]
public string sites { get; public set; }
    [RemoteAttribute]
public string users { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_actions();
    public void set_actions(string value);
    public string get_name();
    public void set_name(string value);
    public DateTime get_queryEndDate();
    public void set_queryEndDate(DateTime value);
    public DateTime get_queryStartDate();
    public void set_queryStartDate(DateTime value);
    public ChangeHistoryReportType get_reportType();
    public void set_reportType(ChangeHistoryReportType value);
    public string get_sites();
    public void set_sites(string value);
    public string get_users();
    public void set_users(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.ReportEntityEnum : Enum {
    public int value__;
    public static ReportEntityEnum SharingLinks_Anyone;
    public static ReportEntityEnum SharingLinks_PeopleInYourOrg;
    public static ReportEntityEnum SharingLinks_Guests;
    public static ReportEntityEnum SensitivityLabelForFiles;
    public static ReportEntityEnum EveryoneExceptExternalUsersAtSite;
    public static ReportEntityEnum EveryoneExceptExternalUsersForItems;
    public static ReportEntityEnum PermissionedUsers;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.ReportEntityType : Enum {
    public int value__;
    public static ReportEntityType SharingLink;
    public static ReportEntityType Label;
    public static ReportEntityType EEEU;
    public static ReportEntityType SitePermissions;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.ReportStatus : Enum {
    public int value__;
    public static ReportStatus NotStarted;
    public static ReportStatus InProgress;
    public static ReportStatus InQueue;
    public static ReportStatus Completed;
    public static ReportStatus ToBeDeleted;
    public static ReportStatus NotFound;
    public static ReportStatus Failed;
    public static ReportStatus Archived;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.ReportTypeEnum : Enum {
    public int value__;
    public static ReportTypeEnum Snapshot;
    public static ReportTypeEnum RecentActivity;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.RestrictedSearchMode : Enum {
    public int value__;
    public static RestrictedSearchMode Disabled;
    public static RestrictedSearchMode Enabled;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.RestrictedToRegion : Enum {
    public int value__;
    public static RestrictedToRegion NoRestriction;
    public static RestrictedToRegion BlockMoveOnly;
    public static RestrictedToRegion BlockFull;
    public static RestrictedToRegion Unknown;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SandboxedCodeActivationCapabilities : Enum {
    public int value__;
    public static SandboxedCodeActivationCapabilities Unknown;
    public static SandboxedCodeActivationCapabilities Check;
    public static SandboxedCodeActivationCapabilities Disabled;
    public static SandboxedCodeActivationCapabilities Enabled;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SecondaryAdministratorsFieldsData")]
public class Microsoft.Online.SharePoint.TenantAdministration.SecondaryAdministratorsFieldsData : ClientValueObject {
    private String[] m_secondaryAdministratorEmails;
    private String[] m_secondaryAdministratorLoginNames;
    private Guid m_siteId;
    [RemoteAttribute]
public String[] secondaryAdministratorEmails { get; public set; }
    [RemoteAttribute]
public String[] secondaryAdministratorLoginNames { get; public set; }
    [RemoteAttribute]
public Guid siteId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public String[] get_secondaryAdministratorEmails();
    public void set_secondaryAdministratorEmails(String[] value);
    public String[] get_secondaryAdministratorLoginNames();
    public void set_secondaryAdministratorLoginNames(String[] value);
    public Guid get_siteId();
    public void set_siteId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SecondaryAdministratorsInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.SecondaryAdministratorsInfo : ClientValueObject {
    private string m_email;
    private string m_loginName;
    private string m_name;
    private string m_userPrincipalName;
    [RemoteAttribute]
public string email { get; public set; }
    [RemoteAttribute]
public string loginName { get; public set; }
    [RemoteAttribute]
public string name { get; public set; }
    [RemoteAttribute]
public string userPrincipalName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_email();
    public void set_email(string value);
    public string get_loginName();
    public void set_loginName(string value);
    public string get_name();
    public void set_name(string value);
    public string get_userPrincipalName();
    public void set_userPrincipalName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SelectedSitesListOperations : Enum {
    public int value__;
    public static SelectedSitesListOperations Overwrite;
    public static SelectedSitesListOperations Append;
    public static SelectedSitesListOperations Remove;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SettingDataProperty")]
public class Microsoft.Online.SharePoint.TenantAdministration.SettingDataProperty : ClientValueObject {
    private bool m_availableInGraph;
    private bool m_availableInPowerShell;
    private bool m_availableInSharePointAdminCenter;
    private string m_description;
    private string m_settingName;
    private string m_settingValue;
    [RemoteAttribute]
public bool AvailableInGraph { get; public set; }
    [RemoteAttribute]
public bool AvailableInPowerShell { get; public set; }
    [RemoteAttribute]
public bool AvailableInSharePointAdminCenter { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public string SettingName { get; public set; }
    [RemoteAttribute]
public string SettingValue { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_AvailableInGraph();
    public void set_AvailableInGraph(bool value);
    public bool get_AvailableInPowerShell();
    public void set_AvailableInPowerShell(bool value);
    public bool get_AvailableInSharePointAdminCenter();
    public void set_AvailableInSharePointAdminCenter(bool value);
    public string get_Description();
    public void set_Description(string value);
    public string get_SettingName();
    public void set_SettingName(string value);
    public string get_SettingValue();
    public void set_SettingValue(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SharingType : Enum {
    public int value__;
    public static SharingType anonymousLink;
    public static SharingType companyLink;
    public static SharingType secureLink;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SharingTypeLegacy : Enum {
    public int value__;
    public static SharingTypeLegacy AnonymousLink;
    public static SharingTypeLegacy CompanyLink;
    public static SharingTypeLegacy SecureLink;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SiteAccessReportEntityEnum : Enum {
    public int value__;
    public static SiteAccessReportEntityEnum All;
    public static SiteAccessReportEntityEnum SharingLinks_Anyone;
    public static SiteAccessReportEntityEnum SharingLinks_PeopleInYourOrg;
    public static SiteAccessReportEntityEnum SharingLinks_Guests;
    public static SiteAccessReportEntityEnum SensitivityLabelForFiles;
    public static SiteAccessReportEntityEnum EveryoneExceptExternalUsersAtSite;
    public static SiteAccessReportEntityEnum EveryoneExceptExternalUsersForItems;
    public static SiteAccessReportEntityEnum PermissionedUsers;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SiteAdministratorsFieldsData")]
public class Microsoft.Online.SharePoint.TenantAdministration.SiteAdministratorsFieldsData : ClientValueObject {
    private String[] m_siteAdministrators;
    private Guid m_siteId;
    [RemoteAttribute]
public String[] siteAdministrators { get; public set; }
    [RemoteAttribute]
public Guid siteId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public String[] get_siteAdministrators();
    public void set_siteAdministrators(String[] value);
    public Guid get_siteId();
    public void set_siteId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SiteAdministratorsInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.SiteAdministratorsInfo : ClientValueObject {
    private string m_email;
    private string m_loginName;
    private string m_name;
    private string m_userPrincipalName;
    [RemoteAttribute]
public string email { get; public set; }
    [RemoteAttribute]
public string loginName { get; public set; }
    [RemoteAttribute]
public string name { get; public set; }
    [RemoteAttribute]
public string userPrincipalName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_email();
    public void set_email(string value);
    public string get_loginName();
    public void set_loginName(string value);
    public string get_name();
    public void set_name(string value);
    public string get_userPrincipalName();
    public void set_userPrincipalName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SiteCreationProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SiteCreationProperties : ClientValueObject {
    private int m_compatibilityLevel;
    private bool m_enableAgreementsSolution;
    private UInt32 m_lcid;
    private string m_owner;
    private long m_storageMaximumLevel;
    private long m_storageWarningLevel;
    private string m_template;
    private int m_timeZoneId;
    private string m_title;
    private string m_url;
    private double m_userCodeMaximumLevel;
    private double m_userCodeWarningLevel;
    [RemoteAttribute]
public int CompatibilityLevel { get; public set; }
    [RemoteAttribute]
public bool EnableAgreementsSolution { get; public set; }
    [RemoteAttribute]
public UInt32 Lcid { get; public set; }
    [RemoteAttribute]
public string Owner { get; public set; }
    [RemoteAttribute]
public long StorageMaximumLevel { get; public set; }
    [RemoteAttribute]
public long StorageWarningLevel { get; public set; }
    [RemoteAttribute]
public string Template { get; public set; }
    [RemoteAttribute]
public int TimeZoneId { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public string Url { get; public set; }
    [RemoteAttribute]
public double UserCodeMaximumLevel { get; public set; }
    [RemoteAttribute]
public double UserCodeWarningLevel { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_CompatibilityLevel();
    public void set_CompatibilityLevel(int value);
    public bool get_EnableAgreementsSolution();
    public void set_EnableAgreementsSolution(bool value);
    public UInt32 get_Lcid();
    public void set_Lcid(UInt32 value);
    public string get_Owner();
    public void set_Owner(string value);
    public long get_StorageMaximumLevel();
    public void set_StorageMaximumLevel(long value);
    public long get_StorageWarningLevel();
    public void set_StorageWarningLevel(long value);
    public string get_Template();
    public void set_Template(string value);
    public int get_TimeZoneId();
    public void set_TimeZoneId(int value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Url();
    public void set_Url(string value);
    public double get_UserCodeMaximumLevel();
    public void set_UserCodeMaximumLevel(double value);
    public double get_UserCodeWarningLevel();
    public void set_UserCodeWarningLevel(double value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SiteInfoForSitePicker")]
public class Microsoft.Online.SharePoint.TenantAdministration.SiteInfoForSitePicker : ClientValueObject {
    private string m_error;
    private Guid m_siteId;
    private string m_siteName;
    private string m_url;
    [RemoteAttribute]
public string Error { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public string SiteName { get; public set; }
    [RemoteAttribute]
public string Url { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Error();
    public void set_Error(string value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public string get_SiteName();
    public void set_SiteName(string value);
    public string get_Url();
    public void set_Url(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SiteProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SiteProperties : ClientObject {
    [RemoteAttribute]
public bool AllowDownloadingNonWebViewableFiles { get; public set; }
    [RemoteAttribute]
public bool AllowEditing { get; public set; }
    [RemoteAttribute]
public bool AllowSelfServiceUpgrade { get; public set; }
    [RemoteAttribute]
public int AnonymousLinkExpirationInDays { get; public set; }
    [RemoteAttribute]
public bool ApplyToExistingDocumentLibraries { get; public set; }
    [RemoteAttribute]
public bool ApplyToNewDocumentLibraries { get; public set; }
    [RemoteAttribute]
public string ArchivedBy { get; }
    [RemoteAttribute]
public DateTime ArchivedTime { get; }
    [RemoteAttribute]
public string ArchiveStatus { get; }
    [RemoteAttribute]
public string AuthContextStrength { get; public set; }
    [RemoteAttribute]
public bool AuthenticationContextLimitedAccess { get; public set; }
    [RemoteAttribute]
public string AuthenticationContextName { get; public set; }
    [RemoteAttribute]
public double AverageResourceUsage { get; }
    [RemoteAttribute]
public BlockDownloadLinksFileTypes BlockDownloadLinksFileType { get; public set; }
    [RemoteAttribute]
public Guid[] BlockDownloadMicrosoft365GroupIds { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadPolicy { get; public set; }
    [RemoteAttribute]
public IList`1<string> BlockDownloadPolicyFileTypeIds { get; public set; }
    [RemoteAttribute]
public SharingState BlockGuestsAsSiteAdmin { get; public set; }
    [RemoteAttribute]
public long BonusDiskQuota { get; }
    [RemoteAttribute]
public bool ClearGroupId { get; public set; }
    [RemoteAttribute]
public bool ClearRestrictedAccessControl { get; public set; }
    [RemoteAttribute]
public bool CommentsOnSitePagesDisabled { get; public set; }
    [RemoteAttribute]
public int CompatibilityLevel { get; }
    [RemoteAttribute]
public SPOConditionalAccessPolicyType ConditionalAccessPolicy { get; public set; }
    [RemoteAttribute]
public double CurrentResourceUsage { get; }
    [RemoteAttribute]
public SharingPermissionType DefaultLinkPermission { get; public set; }
    [RemoteAttribute]
public bool DefaultLinkToExistingAccess { get; public set; }
    [RemoteAttribute]
public bool DefaultLinkToExistingAccessReset { get; public set; }
    [RemoteAttribute]
public Role DefaultShareLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope DefaultShareLinkScope { get; public set; }
    [RemoteAttribute]
public SharingLinkType DefaultSharingLinkType { get; public set; }
    [RemoteAttribute]
public DenyAddAndCustomizePagesStatus DenyAddAndCustomizePages { get; public set; }
    [RemoteAttribute]
public string Description { get; }
    [RemoteAttribute]
public AppViewsPolicy DisableAppViews { get; public set; }
    [RemoteAttribute]
public CompanyWideSharingLinksPolicy DisableCompanyWideSharingLinks { get; public set; }
    [RemoteAttribute]
public FlowsPolicy DisableFlows { get; public set; }
    [RemoteAttribute]
public bool EnableAutoExpirationVersionTrim { get; public set; }
    [RemoteAttribute]
public bool ExcludeBlockDownloadPolicySiteOwners { get; public set; }
    [RemoteAttribute]
public String[] ExcludeBlockDownloadSharePointGroups { get; public set; }
    [RemoteAttribute]
public Guid[] ExcludedBlockDownloadGroupIds { get; public set; }
    [RemoteAttribute]
public int ExpireVersionsAfterDays { get; public set; }
    [RemoteAttribute]
public int ExternalUserExpirationInDays { get; public set; }
    [RemoteAttribute]
public Guid GroupId { get; }
    [RemoteAttribute]
public string GroupOwnerLoginName { get; }
    [RemoteAttribute]
public bool HasHolds { get; }
    [RemoteAttribute]
public Guid HubSiteId { get; }
    [RemoteAttribute]
public string IBMode { get; public set; }
    [RemoteAttribute]
public Guid[] IBSegments { get; public set; }
    [RemoteAttribute]
public Guid[] IBSegmentsToAdd { get; public set; }
    [RemoteAttribute]
public Guid[] IBSegmentsToRemove { get; public set; }
    [RemoteAttribute]
public bool InheritVersionPolicyFromTenant { get; public set; }
    [RemoteAttribute]
public bool IsGroupOwnerSiteAdmin { get; }
    [RemoteAttribute]
public bool IsHubSite { get; }
    [RemoteAttribute]
public bool IsTeamsChannelConnected { get; }
    [RemoteAttribute]
public bool IsTeamsConnected { get; }
    [RemoteAttribute]
public DateTime LastContentModifiedDate { get; }
    [RemoteAttribute]
public UInt32 Lcid { get; public set; }
    [RemoteAttribute]
public SPOLimitedAccessFileType LimitedAccessFileType { get; public set; }
    [RemoteAttribute]
public bool ListsShowHeaderAndNavigation { get; public set; }
    [RemoteAttribute]
public string LockIssue { get; }
    [RemoteAttribute]
public int LockReason { get; public set; }
    [RemoteAttribute]
public string LockState { get; public set; }
    [RemoteAttribute]
public Role LoopDefaultSharingLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope LoopDefaultSharingLinkScope { get; public set; }
    [RemoteAttribute]
public int MajorVersionLimit { get; public set; }
    [RemoteAttribute]
public int MajorWithMinorVersionsLimit { get; public set; }
    [RemoteAttribute]
public MediaTranscriptionPolicyType MediaTranscription { get; public set; }
    [RemoteAttribute]
public SiteUserInfoVisibilityPolicyValue OverrideBlockUserInfoVisibility { get; public set; }
    [RemoteAttribute]
public bool OverrideSharingCapability { get; public set; }
    [RemoteAttribute]
public bool OverrideTenantAnonymousLinkExpirationPolicy { get; public set; }
    [RemoteAttribute]
public bool OverrideTenantExternalUserExpirationPolicy { get; public set; }
    [RemoteAttribute]
public string Owner { get; public set; }
    [RemoteAttribute]
public string OwnerEmail { get; }
    [RemoteAttribute]
public string OwnerLoginName { get; }
    [RemoteAttribute]
public string OwnerName { get; }
    [RemoteAttribute]
public PWAEnabledStatus PWAEnabled { get; public set; }
    [RemoteAttribute]
public bool ReadOnlyAccessPolicy { get; public set; }
    [RemoteAttribute]
public bool ReadOnlyForBlockDownloadPolicy { get; public set; }
    [RemoteAttribute]
public bool ReadOnlyForUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public Guid RelatedGroupId { get; }
    [RemoteAttribute]
public bool RequestFilesLinkEnabled { get; public set; }
    [RemoteAttribute]
public int RequestFilesLinkExpirationInDays { get; public set; }
    [RemoteAttribute]
public bool RestrictContentOrgWideSearch { get; public set; }
    [RemoteAttribute]
public bool RestrictedAccessControl { get; public set; }
    [RemoteAttribute]
public Guid[] RestrictedAccessControlGroups { get; public set; }
    [RemoteAttribute]
public Guid[] RestrictedAccessControlGroupsToAdd { get; public set; }
    [RemoteAttribute]
public Guid[] RestrictedAccessControlGroupsToRemove { get; public set; }
    [RemoteAttribute]
public RestrictedToRegion RestrictedToRegion { get; public set; }
    [RemoteAttribute]
public SandboxedCodeActivationCapabilities SandboxedCodeActivationCapability { get; public set; }
    [RemoteAttribute]
public Guid SensitivityLabel { get; public set; }
    [RemoteAttribute]
public string SensitivityLabel2 { get; public set; }
    [RemoteAttribute]
public bool SetOwnerWithoutUpdatingSecondaryAdmin { get; public set; }
    [RemoteAttribute]
public string SharingAllowedDomainList { get; public set; }
    [RemoteAttribute]
public string SharingBlockedDomainList { get; public set; }
    [RemoteAttribute]
public SharingCapabilities SharingCapability { get; public set; }
    [RemoteAttribute]
public SharingDomainRestrictionModes SharingDomainRestrictionMode { get; public set; }
    [RemoteAttribute]
public bool SharingLockDownCanBeCleared { get; }
    [RemoteAttribute]
public bool SharingLockDownEnabled { get; }
    [RemoteAttribute]
public bool ShowPeoplePickerSuggestionsForGuestUsers { get; public set; }
    [RemoteAttribute]
public SharingCapabilities SiteDefinedSharingCapability { get; }
    [RemoteAttribute]
public Guid SiteId { get; }
    [RemoteAttribute]
public bool SocialBarOnSitePagesDisabled { get; public set; }
    [RemoteAttribute]
public string Status { get; }
    [RemoteAttribute]
public long StorageMaximumLevel { get; public set; }
    [RemoteAttribute]
public string StorageQuotaType { get; }
    [RemoteAttribute]
public long StorageUsage { get; }
    [RemoteAttribute]
public long StorageWarningLevel { get; public set; }
    [RemoteAttribute]
public TeamsChannelTypeValue TeamsChannelType { get; }
    [RemoteAttribute]
public string Template { get; public set; }
    [RemoteAttribute]
public int TimeZoneId { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SPResourceEntry> TitleTranslations { get; public set; }
    [RemoteAttribute]
public string Url { get; }
    [RemoteAttribute]
public double UserCodeMaximumLevel { get; public set; }
    [RemoteAttribute]
public double UserCodeWarningLevel { get; public set; }
    [RemoteAttribute]
public int WebsCount { get; }
    public SiteProperties(ClientRuntimeContext context, string url);
    [EditorBrowsableAttribute("1")]
public SiteProperties(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_AllowDownloadingNonWebViewableFiles();
    public void set_AllowDownloadingNonWebViewableFiles(bool value);
    public bool get_AllowEditing();
    public void set_AllowEditing(bool value);
    public bool get_AllowSelfServiceUpgrade();
    public void set_AllowSelfServiceUpgrade(bool value);
    public int get_AnonymousLinkExpirationInDays();
    public void set_AnonymousLinkExpirationInDays(int value);
    public bool get_ApplyToExistingDocumentLibraries();
    public void set_ApplyToExistingDocumentLibraries(bool value);
    public bool get_ApplyToNewDocumentLibraries();
    public void set_ApplyToNewDocumentLibraries(bool value);
    public string get_ArchivedBy();
    public DateTime get_ArchivedTime();
    public string get_ArchiveStatus();
    public string get_AuthContextStrength();
    public void set_AuthContextStrength(string value);
    public bool get_AuthenticationContextLimitedAccess();
    public void set_AuthenticationContextLimitedAccess(bool value);
    public string get_AuthenticationContextName();
    public void set_AuthenticationContextName(string value);
    public double get_AverageResourceUsage();
    public BlockDownloadLinksFileTypes get_BlockDownloadLinksFileType();
    public void set_BlockDownloadLinksFileType(BlockDownloadLinksFileTypes value);
    public Guid[] get_BlockDownloadMicrosoft365GroupIds();
    public void set_BlockDownloadMicrosoft365GroupIds(Guid[] value);
    public bool get_BlockDownloadPolicy();
    public void set_BlockDownloadPolicy(bool value);
    public IList`1<string> get_BlockDownloadPolicyFileTypeIds();
    public void set_BlockDownloadPolicyFileTypeIds(IList`1<string> value);
    public SharingState get_BlockGuestsAsSiteAdmin();
    public void set_BlockGuestsAsSiteAdmin(SharingState value);
    public long get_BonusDiskQuota();
    public bool get_ClearGroupId();
    public void set_ClearGroupId(bool value);
    public bool get_ClearRestrictedAccessControl();
    public void set_ClearRestrictedAccessControl(bool value);
    public bool get_CommentsOnSitePagesDisabled();
    public void set_CommentsOnSitePagesDisabled(bool value);
    public int get_CompatibilityLevel();
    public SPOConditionalAccessPolicyType get_ConditionalAccessPolicy();
    public void set_ConditionalAccessPolicy(SPOConditionalAccessPolicyType value);
    public double get_CurrentResourceUsage();
    public SharingPermissionType get_DefaultLinkPermission();
    public void set_DefaultLinkPermission(SharingPermissionType value);
    public bool get_DefaultLinkToExistingAccess();
    public void set_DefaultLinkToExistingAccess(bool value);
    public bool get_DefaultLinkToExistingAccessReset();
    public void set_DefaultLinkToExistingAccessReset(bool value);
    public Role get_DefaultShareLinkRole();
    public void set_DefaultShareLinkRole(Role value);
    public SharingScope get_DefaultShareLinkScope();
    public void set_DefaultShareLinkScope(SharingScope value);
    public SharingLinkType get_DefaultSharingLinkType();
    public void set_DefaultSharingLinkType(SharingLinkType value);
    public DenyAddAndCustomizePagesStatus get_DenyAddAndCustomizePages();
    public void set_DenyAddAndCustomizePages(DenyAddAndCustomizePagesStatus value);
    public string get_Description();
    public AppViewsPolicy get_DisableAppViews();
    public void set_DisableAppViews(AppViewsPolicy value);
    public CompanyWideSharingLinksPolicy get_DisableCompanyWideSharingLinks();
    public void set_DisableCompanyWideSharingLinks(CompanyWideSharingLinksPolicy value);
    public FlowsPolicy get_DisableFlows();
    public void set_DisableFlows(FlowsPolicy value);
    public bool get_EnableAutoExpirationVersionTrim();
    public void set_EnableAutoExpirationVersionTrim(bool value);
    public bool get_ExcludeBlockDownloadPolicySiteOwners();
    public void set_ExcludeBlockDownloadPolicySiteOwners(bool value);
    public String[] get_ExcludeBlockDownloadSharePointGroups();
    public void set_ExcludeBlockDownloadSharePointGroups(String[] value);
    public Guid[] get_ExcludedBlockDownloadGroupIds();
    public void set_ExcludedBlockDownloadGroupIds(Guid[] value);
    public int get_ExpireVersionsAfterDays();
    public void set_ExpireVersionsAfterDays(int value);
    public int get_ExternalUserExpirationInDays();
    public void set_ExternalUserExpirationInDays(int value);
    public Guid get_GroupId();
    public string get_GroupOwnerLoginName();
    public bool get_HasHolds();
    public Guid get_HubSiteId();
    public string get_IBMode();
    public void set_IBMode(string value);
    public Guid[] get_IBSegments();
    public void set_IBSegments(Guid[] value);
    public Guid[] get_IBSegmentsToAdd();
    public void set_IBSegmentsToAdd(Guid[] value);
    public Guid[] get_IBSegmentsToRemove();
    public void set_IBSegmentsToRemove(Guid[] value);
    public bool get_InheritVersionPolicyFromTenant();
    public void set_InheritVersionPolicyFromTenant(bool value);
    public bool get_IsGroupOwnerSiteAdmin();
    public bool get_IsHubSite();
    public bool get_IsTeamsChannelConnected();
    public bool get_IsTeamsConnected();
    public DateTime get_LastContentModifiedDate();
    public UInt32 get_Lcid();
    public void set_Lcid(UInt32 value);
    public SPOLimitedAccessFileType get_LimitedAccessFileType();
    public void set_LimitedAccessFileType(SPOLimitedAccessFileType value);
    public bool get_ListsShowHeaderAndNavigation();
    public void set_ListsShowHeaderAndNavigation(bool value);
    public string get_LockIssue();
    public int get_LockReason();
    public void set_LockReason(int value);
    public string get_LockState();
    public void set_LockState(string value);
    public Role get_LoopDefaultSharingLinkRole();
    public void set_LoopDefaultSharingLinkRole(Role value);
    public SharingScope get_LoopDefaultSharingLinkScope();
    public void set_LoopDefaultSharingLinkScope(SharingScope value);
    public int get_MajorVersionLimit();
    public void set_MajorVersionLimit(int value);
    public int get_MajorWithMinorVersionsLimit();
    public void set_MajorWithMinorVersionsLimit(int value);
    public MediaTranscriptionPolicyType get_MediaTranscription();
    public void set_MediaTranscription(MediaTranscriptionPolicyType value);
    public SiteUserInfoVisibilityPolicyValue get_OverrideBlockUserInfoVisibility();
    public void set_OverrideBlockUserInfoVisibility(SiteUserInfoVisibilityPolicyValue value);
    public bool get_OverrideSharingCapability();
    public void set_OverrideSharingCapability(bool value);
    public bool get_OverrideTenantAnonymousLinkExpirationPolicy();
    public void set_OverrideTenantAnonymousLinkExpirationPolicy(bool value);
    public bool get_OverrideTenantExternalUserExpirationPolicy();
    public void set_OverrideTenantExternalUserExpirationPolicy(bool value);
    public string get_Owner();
    public void set_Owner(string value);
    public string get_OwnerEmail();
    public string get_OwnerLoginName();
    public string get_OwnerName();
    public PWAEnabledStatus get_PWAEnabled();
    public void set_PWAEnabled(PWAEnabledStatus value);
    public bool get_ReadOnlyAccessPolicy();
    public void set_ReadOnlyAccessPolicy(bool value);
    public bool get_ReadOnlyForBlockDownloadPolicy();
    public void set_ReadOnlyForBlockDownloadPolicy(bool value);
    public bool get_ReadOnlyForUnmanagedDevices();
    public void set_ReadOnlyForUnmanagedDevices(bool value);
    public Guid get_RelatedGroupId();
    public bool get_RequestFilesLinkEnabled();
    public void set_RequestFilesLinkEnabled(bool value);
    public int get_RequestFilesLinkExpirationInDays();
    public void set_RequestFilesLinkExpirationInDays(int value);
    public bool get_RestrictContentOrgWideSearch();
    public void set_RestrictContentOrgWideSearch(bool value);
    public bool get_RestrictedAccessControl();
    public void set_RestrictedAccessControl(bool value);
    public Guid[] get_RestrictedAccessControlGroups();
    public void set_RestrictedAccessControlGroups(Guid[] value);
    public Guid[] get_RestrictedAccessControlGroupsToAdd();
    public void set_RestrictedAccessControlGroupsToAdd(Guid[] value);
    public Guid[] get_RestrictedAccessControlGroupsToRemove();
    public void set_RestrictedAccessControlGroupsToRemove(Guid[] value);
    public RestrictedToRegion get_RestrictedToRegion();
    public void set_RestrictedToRegion(RestrictedToRegion value);
    public SandboxedCodeActivationCapabilities get_SandboxedCodeActivationCapability();
    public void set_SandboxedCodeActivationCapability(SandboxedCodeActivationCapabilities value);
    public Guid get_SensitivityLabel();
    public void set_SensitivityLabel(Guid value);
    public string get_SensitivityLabel2();
    public void set_SensitivityLabel2(string value);
    public bool get_SetOwnerWithoutUpdatingSecondaryAdmin();
    public void set_SetOwnerWithoutUpdatingSecondaryAdmin(bool value);
    public string get_SharingAllowedDomainList();
    public void set_SharingAllowedDomainList(string value);
    public string get_SharingBlockedDomainList();
    public void set_SharingBlockedDomainList(string value);
    public SharingCapabilities get_SharingCapability();
    public void set_SharingCapability(SharingCapabilities value);
    public SharingDomainRestrictionModes get_SharingDomainRestrictionMode();
    public void set_SharingDomainRestrictionMode(SharingDomainRestrictionModes value);
    public bool get_SharingLockDownCanBeCleared();
    public bool get_SharingLockDownEnabled();
    public bool get_ShowPeoplePickerSuggestionsForGuestUsers();
    public void set_ShowPeoplePickerSuggestionsForGuestUsers(bool value);
    public SharingCapabilities get_SiteDefinedSharingCapability();
    public Guid get_SiteId();
    public bool get_SocialBarOnSitePagesDisabled();
    public void set_SocialBarOnSitePagesDisabled(bool value);
    public string get_Status();
    public long get_StorageMaximumLevel();
    public void set_StorageMaximumLevel(long value);
    public string get_StorageQuotaType();
    public long get_StorageUsage();
    public long get_StorageWarningLevel();
    public void set_StorageWarningLevel(long value);
    public TeamsChannelTypeValue get_TeamsChannelType();
    public string get_Template();
    public void set_Template(string value);
    public int get_TimeZoneId();
    public void set_TimeZoneId(int value);
    public string get_Title();
    public void set_Title(string value);
    public IEnumerable`1<SPResourceEntry> get_TitleTranslations();
    public void set_TitleTranslations(IEnumerable`1<SPResourceEntry> value);
    public string get_Url();
    public double get_UserCodeMaximumLevel();
    public void set_UserCodeMaximumLevel(double value);
    public double get_UserCodeWarningLevel();
    public void set_UserCodeWarningLevel(double value);
    public int get_WebsCount();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public static void ClearSharingLockDown(ClientRuntimeContext context, string siteUrl);
    [RemoteAttribute]
public SpoOperation Update();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SitePropertiesPropertyNames : object {
    public static string AllowDownloadingNonWebViewableFiles;
    public static string AllowEditing;
    public static string AllowSelfServiceUpgrade;
    public static string AnonymousLinkExpirationInDays;
    public static string ApplyToExistingDocumentLibraries;
    public static string ApplyToNewDocumentLibraries;
    public static string ArchivedBy;
    public static string ArchivedTime;
    public static string ArchiveStatus;
    public static string AuthContextStrength;
    public static string AuthenticationContextLimitedAccess;
    public static string AuthenticationContextName;
    public static string AverageResourceUsage;
    public static string BlockDownloadLinksFileType;
    public static string BlockDownloadMicrosoft365GroupIds;
    public static string BlockDownloadPolicy;
    public static string BlockDownloadPolicyFileTypeIds;
    public static string BlockGuestsAsSiteAdmin;
    public static string BonusDiskQuota;
    public static string ClearGroupId;
    public static string ClearRestrictedAccessControl;
    public static string CommentsOnSitePagesDisabled;
    public static string CompatibilityLevel;
    public static string ConditionalAccessPolicy;
    public static string CurrentResourceUsage;
    public static string DefaultLinkPermission;
    public static string DefaultLinkToExistingAccess;
    public static string DefaultLinkToExistingAccessReset;
    public static string DefaultShareLinkRole;
    public static string DefaultShareLinkScope;
    public static string DefaultSharingLinkType;
    public static string DenyAddAndCustomizePages;
    public static string Description;
    public static string DisableAppViews;
    public static string DisableCompanyWideSharingLinks;
    public static string DisableFlows;
    public static string EnableAutoExpirationVersionTrim;
    public static string ExcludeBlockDownloadPolicySiteOwners;
    public static string ExcludeBlockDownloadSharePointGroups;
    public static string ExcludedBlockDownloadGroupIds;
    public static string ExpireVersionsAfterDays;
    public static string ExternalUserExpirationInDays;
    public static string GroupId;
    public static string GroupOwnerLoginName;
    public static string HasHolds;
    public static string HubSiteId;
    public static string IBMode;
    public static string IBSegments;
    public static string IBSegmentsToAdd;
    public static string IBSegmentsToRemove;
    public static string InheritVersionPolicyFromTenant;
    public static string IsGroupOwnerSiteAdmin;
    public static string IsHubSite;
    public static string IsTeamsChannelConnected;
    public static string IsTeamsConnected;
    public static string LastContentModifiedDate;
    public static string Lcid;
    public static string LimitedAccessFileType;
    public static string ListsShowHeaderAndNavigation;
    public static string LockIssue;
    public static string LockReason;
    public static string LockState;
    public static string LoopDefaultSharingLinkRole;
    public static string LoopDefaultSharingLinkScope;
    public static string MajorVersionLimit;
    public static string MajorWithMinorVersionsLimit;
    public static string MediaTranscription;
    public static string OverrideBlockUserInfoVisibility;
    public static string OverrideSharingCapability;
    public static string OverrideTenantAnonymousLinkExpirationPolicy;
    public static string OverrideTenantExternalUserExpirationPolicy;
    public static string Owner;
    public static string OwnerEmail;
    public static string OwnerLoginName;
    public static string OwnerName;
    public static string PWAEnabled;
    public static string ReadOnlyAccessPolicy;
    public static string ReadOnlyForBlockDownloadPolicy;
    public static string ReadOnlyForUnmanagedDevices;
    public static string RelatedGroupId;
    public static string RequestFilesLinkEnabled;
    public static string RequestFilesLinkExpirationInDays;
    public static string RestrictContentOrgWideSearch;
    public static string RestrictedAccessControl;
    public static string RestrictedAccessControlGroups;
    public static string RestrictedAccessControlGroupsToAdd;
    public static string RestrictedAccessControlGroupsToRemove;
    public static string RestrictedToRegion;
    public static string SandboxedCodeActivationCapability;
    public static string SensitivityLabel;
    public static string SensitivityLabel2;
    public static string SetOwnerWithoutUpdatingSecondaryAdmin;
    public static string SharingAllowedDomainList;
    public static string SharingBlockedDomainList;
    public static string SharingCapability;
    public static string SharingDomainRestrictionMode;
    public static string SharingLockDownCanBeCleared;
    public static string SharingLockDownEnabled;
    public static string ShowPeoplePickerSuggestionsForGuestUsers;
    public static string SiteDefinedSharingCapability;
    public static string SiteId;
    public static string SocialBarOnSitePagesDisabled;
    public static string Status;
    public static string StorageMaximumLevel;
    public static string StorageQuotaType;
    public static string StorageUsage;
    public static string StorageWarningLevel;
    public static string TeamsChannelType;
    public static string Template;
    public static string TimeZoneId;
    public static string Title;
    public static string TitleTranslations;
    public static string Url;
    public static string UserCodeMaximumLevel;
    public static string UserCodeWarningLevel;
    public static string WebsCount;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SiteRenameStatesInTenantRename : Enum {
    public int value__;
    public static SiteRenameStatesInTenantRename NotStarted;
    public static SiteRenameStatesInTenantRename InProgress;
    public static SiteRenameStatesInTenantRename Success;
    public static SiteRenameStatesInTenantRename AttentionRequired;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SiteReviewStatus : Enum {
    public int value__;
    public static SiteReviewStatus All;
    public static SiteReviewStatus Pending;
    public static SiteReviewStatus Failed;
    public static SiteReviewStatus Completed;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SiteUserGroupInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.SiteUserGroupInfo : ClientValueObject {
    private IList`1<UserInfo> m_userGroup;
    [RemoteAttribute]
public IList`1<UserInfo> userGroup { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public IList`1<UserInfo> get_userGroup();
    public void set_userGroup(IList`1<UserInfo> value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SiteUserGroupsData")]
public class Microsoft.Online.SharePoint.TenantAdministration.SiteUserGroupsData : ClientValueObject {
    private UserInfo[] m_members;
    private UserInfo[] m_owners;
    private Guid m_siteId;
    private UserInfo[] m_visitors;
    [RemoteAttribute]
public UserInfo[] members { get; public set; }
    [RemoteAttribute]
public UserInfo[] owners { get; public set; }
    [RemoteAttribute]
public Guid siteId { get; public set; }
    [RemoteAttribute]
public UserInfo[] visitors { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public UserInfo[] get_members();
    public void set_members(UserInfo[] value);
    public UserInfo[] get_owners();
    public void set_owners(UserInfo[] value);
    public Guid get_siteId();
    public void set_siteId(Guid value);
    public UserInfo[] get_visitors();
    public void set_visitors(UserInfo[] value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SiteUserInfoVisibilityPolicyValue : Enum {
    public int value__;
    public static SiteUserInfoVisibilityPolicyValue OrganizationDefault;
    public static SiteUserInfoVisibilityPolicyValue ApplyToNoUsers;
    public static SiteUserInfoVisibilityPolicyValue ApplyToGuestAndExternalUsers;
    public static SiteUserInfoVisibilityPolicyValue ApplyToInternalUsers;
    public static SiteUserInfoVisibilityPolicyValue ApplyToAllUsers;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerApplicationProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerApplicationProperties : ClientValueObject {
    private Guid m_containerTypeId;
    private Guid m_owningApplicationId;
    private string m_owningApplicationName;
    [RemoteAttribute]
public Guid ContainerTypeId { get; public set; }
    [RemoteAttribute]
public Guid OwningApplicationId { get; public set; }
    [RemoteAttribute]
public string OwningApplicationName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Guid get_ContainerTypeId();
    public void set_ContainerTypeId(Guid value);
    public Guid get_OwningApplicationId();
    public void set_OwningApplicationId(Guid value);
    public string get_OwningApplicationName();
    public void set_OwningApplicationName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerCollection")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerCollection : ClientValueObject {
    private IList`1<SPContainerProperties> m_containerCollection;
    private string m_pagingToken;
    [RemoteAttribute]
public IList`1<SPContainerProperties> ContainerCollection { get; public set; }
    [RemoteAttribute]
public string PagingToken { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public IList`1<SPContainerProperties> get_ContainerCollection();
    public void set_ContainerCollection(IList`1<SPContainerProperties> value);
    public string get_PagingToken();
    public void set_PagingToken(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPContainerCreationDateFilterBeforeDays : Enum {
    public int value__;
    public static SPContainerCreationDateFilterBeforeDays LastSeven;
    public static SPContainerCreationDateFilterBeforeDays LastThirty;
    public static SPContainerCreationDateFilterBeforeDays OlderThanSeven;
    public static SPContainerCreationDateFilterBeforeDays OlderThanThirty;
    public static SPContainerCreationDateFilterBeforeDays OlderThanNinety;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerFilterOrder")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerFilterOrder : ClientValueObject {
    private SPContainerCreationDateFilterBeforeDays m_createdBeforeDays;
    private string m_filteringApplicationId;
    private string m_filteringApplicationName;
    private string m_filteringContainerTypeId;
    private SPContainerFilterProperties m_filteringField;
    private SPContainerOwnersFilterOwnerByCount m_ownersCount;
    private string m_publisherName;
    [RemoteAttribute]
public SPContainerCreationDateFilterBeforeDays CreatedBeforeDays { get; public set; }
    [RemoteAttribute]
public string FilteringApplicationId { get; public set; }
    [RemoteAttribute]
public string FilteringApplicationName { get; public set; }
    [RemoteAttribute]
public string FilteringContainerTypeId { get; public set; }
    [RemoteAttribute]
public SPContainerFilterProperties FilteringField { get; public set; }
    [RemoteAttribute]
public SPContainerOwnersFilterOwnerByCount OwnersCount { get; public set; }
    [RemoteAttribute]
public string PublisherName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SPContainerCreationDateFilterBeforeDays get_CreatedBeforeDays();
    public void set_CreatedBeforeDays(SPContainerCreationDateFilterBeforeDays value);
    public string get_FilteringApplicationId();
    public void set_FilteringApplicationId(string value);
    public string get_FilteringApplicationName();
    public void set_FilteringApplicationName(string value);
    public string get_FilteringContainerTypeId();
    public void set_FilteringContainerTypeId(string value);
    public SPContainerFilterProperties get_FilteringField();
    public void set_FilteringField(SPContainerFilterProperties value);
    public SPContainerOwnersFilterOwnerByCount get_OwnersCount();
    public void set_OwnersCount(SPContainerOwnersFilterOwnerByCount value);
    public string get_PublisherName();
    public void set_PublisherName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPContainerFilterProperties : Enum {
    public int value__;
    public static SPContainerFilterProperties CreationDateTime;
    public static SPContainerFilterProperties ApplicationName;
    public static SPContainerFilterProperties Publisher;
    public static SPContainerFilterProperties OwnersCount;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPContainerOwnersFilterOwnerByCount : Enum {
    public int value__;
    public static SPContainerOwnersFilterOwnerByCount Zero;
    public static SPContainerOwnersFilterOwnerByCount OneToFive;
    public static SPContainerOwnersFilterOwnerByCount SixToFifteen;
    public static SPContainerOwnersFilterOwnerByCount SixteenToThirty;
    public static SPContainerOwnersFilterOwnerByCount ThirtyPlus;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerProperties : ClientValueObject {
    private bool m_allowEditing;
    private string m_authenticationContextName;
    private bool m_blockDownloadPolicy;
    private SPOConditionalAccessPolicyType m_conditionalAccessPolicy;
    private string m_containerApiUrl;
    private string m_containerId;
    private string m_containerName;
    private string m_containerSiteUrl;
    private Guid m_containerTypeId;
    private string m_createdBy;
    private DateTime m_createdOn;
    private string m_description;
    private bool m_excludeBlockDownloadPolicyContainerOwners;
    private SPOLimitedAccessFileType m_limitedAccessFileType;
    private IList`1<string> m_managers;
    private IList`1<string> m_owners;
    private int m_ownersCount;
    private Guid m_owningApplicationId;
    private string m_owningApplicationName;
    private IList`1<string> m_readers;
    private bool m_readOnlyForBlockDownloadPolicy;
    private bool m_readOnlyForUnmanagedDevices;
    private string m_sensitivityLabel;
    private string m_sharingAllowedDomainList;
    private string m_sharingBlockedDomainList;
    private SharingDomainRestrictionModes m_sharingDomainRestrictionMode;
    private string m_status;
    private long m_storageUsed;
    private IList`1<string> m_writers;
    [RemoteAttribute]
public bool AllowEditing { get; public set; }
    [RemoteAttribute]
public string AuthenticationContextName { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadPolicy { get; public set; }
    [RemoteAttribute]
public SPOConditionalAccessPolicyType ConditionalAccessPolicy { get; public set; }
    [RemoteAttribute]
public string ContainerApiUrl { get; public set; }
    [RemoteAttribute]
public string ContainerId { get; public set; }
    [RemoteAttribute]
public string ContainerName { get; public set; }
    [RemoteAttribute]
public string ContainerSiteUrl { get; public set; }
    [RemoteAttribute]
public Guid ContainerTypeId { get; public set; }
    [RemoteAttribute]
public string CreatedBy { get; public set; }
    [RemoteAttribute]
public DateTime CreatedOn { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public bool ExcludeBlockDownloadPolicyContainerOwners { get; public set; }
    [RemoteAttribute]
public SPOLimitedAccessFileType LimitedAccessFileType { get; public set; }
    [RemoteAttribute]
public IList`1<string> Managers { get; public set; }
    [RemoteAttribute]
public IList`1<string> Owners { get; public set; }
    [RemoteAttribute]
public int OwnersCount { get; public set; }
    [RemoteAttribute]
public Guid OwningApplicationId { get; public set; }
    [RemoteAttribute]
public string OwningApplicationName { get; public set; }
    [RemoteAttribute]
public IList`1<string> Readers { get; public set; }
    [RemoteAttribute]
public bool ReadOnlyForBlockDownloadPolicy { get; public set; }
    [RemoteAttribute]
public bool ReadOnlyForUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public string SensitivityLabel { get; public set; }
    [RemoteAttribute]
public string SharingAllowedDomainList { get; public set; }
    [RemoteAttribute]
public string SharingBlockedDomainList { get; public set; }
    [RemoteAttribute]
public SharingDomainRestrictionModes SharingDomainRestrictionMode { get; public set; }
    [RemoteAttribute]
public string Status { get; public set; }
    [RemoteAttribute]
public long StorageUsed { get; public set; }
    [RemoteAttribute]
public IList`1<string> Writers { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_AllowEditing();
    public void set_AllowEditing(bool value);
    public string get_AuthenticationContextName();
    public void set_AuthenticationContextName(string value);
    public bool get_BlockDownloadPolicy();
    public void set_BlockDownloadPolicy(bool value);
    public SPOConditionalAccessPolicyType get_ConditionalAccessPolicy();
    public void set_ConditionalAccessPolicy(SPOConditionalAccessPolicyType value);
    public string get_ContainerApiUrl();
    public void set_ContainerApiUrl(string value);
    public string get_ContainerId();
    public void set_ContainerId(string value);
    public string get_ContainerName();
    public void set_ContainerName(string value);
    public string get_ContainerSiteUrl();
    public void set_ContainerSiteUrl(string value);
    public Guid get_ContainerTypeId();
    public void set_ContainerTypeId(Guid value);
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    public DateTime get_CreatedOn();
    public void set_CreatedOn(DateTime value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_ExcludeBlockDownloadPolicyContainerOwners();
    public void set_ExcludeBlockDownloadPolicyContainerOwners(bool value);
    public SPOLimitedAccessFileType get_LimitedAccessFileType();
    public void set_LimitedAccessFileType(SPOLimitedAccessFileType value);
    public IList`1<string> get_Managers();
    public void set_Managers(IList`1<string> value);
    public IList`1<string> get_Owners();
    public void set_Owners(IList`1<string> value);
    public int get_OwnersCount();
    public void set_OwnersCount(int value);
    public Guid get_OwningApplicationId();
    public void set_OwningApplicationId(Guid value);
    public string get_OwningApplicationName();
    public void set_OwningApplicationName(string value);
    public IList`1<string> get_Readers();
    public void set_Readers(IList`1<string> value);
    public bool get_ReadOnlyForBlockDownloadPolicy();
    public void set_ReadOnlyForBlockDownloadPolicy(bool value);
    public bool get_ReadOnlyForUnmanagedDevices();
    public void set_ReadOnlyForUnmanagedDevices(bool value);
    public string get_SensitivityLabel();
    public void set_SensitivityLabel(string value);
    public string get_SharingAllowedDomainList();
    public void set_SharingAllowedDomainList(string value);
    public string get_SharingBlockedDomainList();
    public void set_SharingBlockedDomainList(string value);
    public SharingDomainRestrictionModes get_SharingDomainRestrictionMode();
    public void set_SharingDomainRestrictionMode(SharingDomainRestrictionModes value);
    public string get_Status();
    public void set_Status(string value);
    public long get_StorageUsed();
    public void set_StorageUsed(long value);
    public IList`1<string> get_Writers();
    public void set_Writers(IList`1<string> value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerSearchParameters")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerSearchParameters : ClientValueObject {
    private string m_searchText;
    [RemoteAttribute]
public string SearchText { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_SearchText();
    public void set_SearchText(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerSortOrder")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerSortOrder : ClientValueObject {
    private bool m_ascending;
    private SPContainerSortProperties m_sortingField;
    [RemoteAttribute]
public bool Ascending { get; public set; }
    [RemoteAttribute]
public SPContainerSortProperties SortingField { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_Ascending();
    public void set_Ascending(bool value);
    public SPContainerSortProperties get_SortingField();
    public void set_SortingField(SPContainerSortProperties value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPContainerSortProperties : Enum {
    public int value__;
    public static SPContainerSortProperties CreationDateTime;
    public static SPContainerSortProperties StorageUsed;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPContainerTypeBillingClassification : Enum {
    public int value__;
    public static SPContainerTypeBillingClassification Standard;
    public static SPContainerTypeBillingClassification Trial;
    public static SPContainerTypeBillingClassification DirectToCustomer;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerTypeConfigurationProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerTypeConfigurationProperties : ClientValueObject {
    private string m_applicationRedirectUrl;
    private SPContainerTypeBillingClassification m_classification;
    private Guid m_containerTypeId;
    private string m_containerTypeName;
    private NullableBoolean m_isDiscoverablilityDisabled;
    private NullableBoolean m_isMoveDisabled;
    private NullableBoolean m_isRenameDisabled;
    private NullableBoolean m_isSharingRestricted;
    private Guid m_owningAppId;
    [RemoteAttribute]
public string ApplicationRedirectUrl { get; public set; }
    [RemoteAttribute]
public SPContainerTypeBillingClassification Classification { get; public set; }
    [RemoteAttribute]
public Guid ContainerTypeId { get; public set; }
    [RemoteAttribute]
public string ContainerTypeName { get; public set; }
    [RemoteAttribute]
public NullableBoolean IsDiscoverablilityDisabled { get; public set; }
    [RemoteAttribute]
public NullableBoolean IsMoveDisabled { get; public set; }
    [RemoteAttribute]
public NullableBoolean IsRenameDisabled { get; public set; }
    [RemoteAttribute]
public NullableBoolean IsSharingRestricted { get; public set; }
    [RemoteAttribute]
public Guid OwningAppId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ApplicationRedirectUrl();
    public void set_ApplicationRedirectUrl(string value);
    public SPContainerTypeBillingClassification get_Classification();
    public void set_Classification(SPContainerTypeBillingClassification value);
    public Guid get_ContainerTypeId();
    public void set_ContainerTypeId(Guid value);
    public string get_ContainerTypeName();
    public void set_ContainerTypeName(string value);
    public NullableBoolean get_IsDiscoverablilityDisabled();
    public void set_IsDiscoverablilityDisabled(NullableBoolean value);
    public NullableBoolean get_IsMoveDisabled();
    public void set_IsMoveDisabled(NullableBoolean value);
    public NullableBoolean get_IsRenameDisabled();
    public void set_IsRenameDisabled(NullableBoolean value);
    public NullableBoolean get_IsSharingRestricted();
    public void set_IsSharingRestricted(NullableBoolean value);
    public Guid get_OwningAppId();
    public void set_OwningAppId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPContainerTypeProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPContainerTypeProperties : ClientValueObject {
    private string m_applicationRedirectUrl;
    private Guid m_azureSubscriptionId;
    private Guid m_containerTypeId;
    private string m_creationDate;
    private string m_displayName;
    private string m_expiryDate;
    private bool m_isBillingProfileRequired;
    private Guid m_owningAppId;
    private Guid m_owningTenantId;
    private string m_region;
    private string m_resourceGroup;
    private SPContainerTypeBillingClassification m_sPContainerTypeBillingClassification;
    [RemoteAttribute]
public string ApplicationRedirectUrl { get; public set; }
    [RemoteAttribute]
public Guid AzureSubscriptionId { get; public set; }
    [RemoteAttribute]
public Guid ContainerTypeId { get; public set; }
    [RemoteAttribute]
public string CreationDate { get; public set; }
    [RemoteAttribute]
public string DisplayName { get; public set; }
    [RemoteAttribute]
public string ExpiryDate { get; public set; }
    [RemoteAttribute]
public bool IsBillingProfileRequired { get; public set; }
    [RemoteAttribute]
public Guid OwningAppId { get; public set; }
    [RemoteAttribute]
public Guid OwningTenantId { get; public set; }
    [RemoteAttribute]
public string Region { get; public set; }
    [RemoteAttribute]
public string ResourceGroup { get; public set; }
    [RemoteAttribute]
public SPContainerTypeBillingClassification SPContainerTypeBillingClassification { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ApplicationRedirectUrl();
    public void set_ApplicationRedirectUrl(string value);
    public Guid get_AzureSubscriptionId();
    public void set_AzureSubscriptionId(Guid value);
    public Guid get_ContainerTypeId();
    public void set_ContainerTypeId(Guid value);
    public string get_CreationDate();
    public void set_CreationDate(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_ExpiryDate();
    public void set_ExpiryDate(string value);
    public bool get_IsBillingProfileRequired();
    public void set_IsBillingProfileRequired(bool value);
    public Guid get_OwningAppId();
    public void set_OwningAppId(Guid value);
    public Guid get_OwningTenantId();
    public void set_OwningTenantId(Guid value);
    public string get_Region();
    public void set_Region(string value);
    public string get_ResourceGroup();
    public void set_ResourceGroup(string value);
    public SPContainerTypeBillingClassification get_SPContainerTypeBillingClassification();
    public void set_SPContainerTypeBillingClassification(SPContainerTypeBillingClassification value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPContainerTypeTenantType : Enum {
    public int value__;
    public static SPContainerTypeTenantType OwningTenant;
    public static SPContainerTypeTenantType ConsumingTenant;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceInsightMetadata")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceInsightMetadata : ClientValueObject {
    private Guid m_reportId;
    private string m_status;
    [RemoteAttribute]
public Guid ReportId { get; public set; }
    [RemoteAttribute]
public string Status { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Guid get_ReportId();
    public void set_ReportId(Guid value);
    public string get_Status();
    public void set_Status(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceInsightResponse")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceInsightResponse : ClientValueObject {
    private string m_createdDateTime;
    private string m_eEEUType;
    private Guid m_labelId;
    private string m_labelName;
    private IList`1<string> m_privacyEEEU;
    private string m_privacySitePermissions;
    private string m_reportEndTimeEEEU;
    private string m_reportEndTimeSharingLink;
    private string m_reportEntity;
    private string m_reportFormat;
    private Guid m_reportId;
    private string m_reportNameEEEU;
    private string m_reportNameSitePermissions;
    private string m_reportStartTimeEEEU;
    private string m_reportStartTimeSharingLink;
    private string m_reportType;
    private IList`1<string> m_sensitivityEEEU;
    private IList`1<string> m_sensitivitySitePermissions;
    private string m_sharingLinkType;
    private int m_sitesFoundEEEU;
    private int m_sitesFoundSharingLink;
    private string m_status;
    private IList`1<string> m_templatesEEEU;
    private IList`1<string> m_templatesSitePermissions;
    private string m_triggeredDateTime;
    private int m_userLimit;
    private string m_version;
    private string m_workload;
    [RemoteAttribute]
public string CreatedDateTime { get; public set; }
    [RemoteAttribute]
public string EEEUType { get; public set; }
    [RemoteAttribute]
public Guid LabelId { get; public set; }
    [RemoteAttribute]
public string LabelName { get; public set; }
    [RemoteAttribute]
public IList`1<string> PrivacyEEEU { get; public set; }
    [RemoteAttribute]
public string PrivacySitePermissions { get; public set; }
    [RemoteAttribute]
public string ReportEndTimeEEEU { get; public set; }
    [RemoteAttribute]
public string ReportEndTimeSharingLink { get; public set; }
    [RemoteAttribute]
public string ReportEntity { get; public set; }
    [RemoteAttribute]
public string ReportFormat { get; public set; }
    [RemoteAttribute]
public Guid ReportId { get; public set; }
    [RemoteAttribute]
public string ReportNameEEEU { get; public set; }
    [RemoteAttribute]
public string ReportNameSitePermissions { get; public set; }
    [RemoteAttribute]
public string ReportStartTimeEEEU { get; public set; }
    [RemoteAttribute]
public string ReportStartTimeSharingLink { get; public set; }
    [RemoteAttribute]
public string ReportType { get; public set; }
    [RemoteAttribute]
public IList`1<string> SensitivityEEEU { get; public set; }
    [RemoteAttribute]
public IList`1<string> SensitivitySitePermissions { get; public set; }
    [RemoteAttribute]
public string SharingLinkType { get; public set; }
    [RemoteAttribute]
public int SitesFoundEEEU { get; public set; }
    [RemoteAttribute]
public int SitesFoundSharingLink { get; public set; }
    [RemoteAttribute]
public string Status { get; public set; }
    [RemoteAttribute]
public IList`1<string> TemplatesEEEU { get; public set; }
    [RemoteAttribute]
public IList`1<string> TemplatesSitePermissions { get; public set; }
    [RemoteAttribute]
public string TriggeredDateTime { get; public set; }
    [RemoteAttribute]
public int UserLimit { get; public set; }
    [RemoteAttribute]
public string Version { get; public set; }
    [RemoteAttribute]
public string Workload { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_CreatedDateTime();
    public void set_CreatedDateTime(string value);
    public string get_EEEUType();
    public void set_EEEUType(string value);
    public Guid get_LabelId();
    public void set_LabelId(Guid value);
    public string get_LabelName();
    public void set_LabelName(string value);
    public IList`1<string> get_PrivacyEEEU();
    public void set_PrivacyEEEU(IList`1<string> value);
    public string get_PrivacySitePermissions();
    public void set_PrivacySitePermissions(string value);
    public string get_ReportEndTimeEEEU();
    public void set_ReportEndTimeEEEU(string value);
    public string get_ReportEndTimeSharingLink();
    public void set_ReportEndTimeSharingLink(string value);
    public string get_ReportEntity();
    public void set_ReportEntity(string value);
    public string get_ReportFormat();
    public void set_ReportFormat(string value);
    public Guid get_ReportId();
    public void set_ReportId(Guid value);
    public string get_ReportNameEEEU();
    public void set_ReportNameEEEU(string value);
    public string get_ReportNameSitePermissions();
    public void set_ReportNameSitePermissions(string value);
    public string get_ReportStartTimeEEEU();
    public void set_ReportStartTimeEEEU(string value);
    public string get_ReportStartTimeSharingLink();
    public void set_ReportStartTimeSharingLink(string value);
    public string get_ReportType();
    public void set_ReportType(string value);
    public IList`1<string> get_SensitivityEEEU();
    public void set_SensitivityEEEU(IList`1<string> value);
    public IList`1<string> get_SensitivitySitePermissions();
    public void set_SensitivitySitePermissions(IList`1<string> value);
    public string get_SharingLinkType();
    public void set_SharingLinkType(string value);
    public int get_SitesFoundEEEU();
    public void set_SitesFoundEEEU(int value);
    public int get_SitesFoundSharingLink();
    public void set_SitesFoundSharingLink(int value);
    public string get_Status();
    public void set_Status(string value);
    public IList`1<string> get_TemplatesEEEU();
    public void set_TemplatesEEEU(IList`1<string> value);
    public IList`1<string> get_TemplatesSitePermissions();
    public void set_TemplatesSitePermissions(IList`1<string> value);
    public string get_TriggeredDateTime();
    public void set_TriggeredDateTime(string value);
    public int get_UserLimit();
    public void set_UserLimit(int value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Workload();
    public void set_Workload(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceInsightRestApiClient")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceInsightRestApiClient : SPDataGovernanceRestApiClientBase {
    public SPDataGovernanceInsightRestApiClient(ClientRuntimeContext context, string authorizationHeader, string url, string userAgent);
    [EditorBrowsableAttribute("1")]
public SPDataGovernanceInsightRestApiClient(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public IList`1<SPDataGovernanceInsightResponse> GetSPODataAccessGovernanceInsight(ReportEntityEnum reportEntity, WorkloadEnum workLoad);
    [RemoteAttribute]
public ClientResult`1<SPDataGovernanceInsightResponse> GetSPODataAccessGovernanceInsightById(Guid reportId);
    [RemoteAttribute]
public ClientResult`1<string> ExportSPODataAccessGovernanceInsight(Guid reportId);
    [RemoteAttribute]
public ClientResult`1<SPDataGovernanceInsightMetadata> CreateDataAccessGovernanceReport(ReportEntityEnum reportEntity, WorkloadEnum workload, ReportTypeEnum reportType, string fileSensitivityLabelName, string fileSensitivityLabelGUID, string name, IList`1<TemplateEnum> template, string privacy, IList`1<Guid> siteSensitivityLabelGUID, int countOfUsersMoreThan);
    [RemoteAttribute]
public void RemoveDataAccessGovernanceReport(Guid reportId);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceRestApiClientBase")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceRestApiClientBase : ClientObject {
    public SPDataGovernanceRestApiClientBase(ClientRuntimeContext context, string authorizationHeader, string url, string userAgent);
    [EditorBrowsableAttribute("1")]
public SPDataGovernanceRestApiClientBase(ClientRuntimeContext context, ObjectPath objectPath);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceSARRestApiClient")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceSARRestApiClient : SPDataGovernanceRestApiClientBase {
    public SPDataGovernanceSARRestApiClient(ClientRuntimeContext context, string authorizationHeader, string url, string userAgent);
    [EditorBrowsableAttribute("1")]
public SPDataGovernanceSARRestApiClient(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public IList`1<SPDataGovernanceSiteReviewsResponse> GetSPOSiteReview(SiteAccessReportEntityEnum reportEntity, SiteReviewStatus siteReviewtatus, Guid siteReviewID, Guid siteID);
    [RemoteAttribute]
public ClientResult`1<SPDataGovernanceSARStartSiteReviewResponse> StartSPOSiteReview(Guid detailedSourceReportId, Guid siteId, string adminComment);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceSARStartSiteReviewResponse")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceSARStartSiteReviewResponse : ClientValueObject {
    private string m_adminComment;
    private ErrorFacet m_error;
    private SiteAccessReportEntityEnum m_reportEntity;
    private Guid m_reviewId;
    private DateTime m_reviewInitiatedDateTime;
    private Guid m_siteId;
    private string m_siteName;
    private string m_status;
    [RemoteAttribute]
public string AdminComment { get; public set; }
    [RemoteAttribute]
public ErrorFacet Error { get; public set; }
    [RemoteAttribute]
public SiteAccessReportEntityEnum ReportEntity { get; public set; }
    [RemoteAttribute]
public Guid ReviewId { get; public set; }
    [RemoteAttribute]
public DateTime ReviewInitiatedDateTime { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public string SiteName { get; public set; }
    [RemoteAttribute]
public string Status { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AdminComment();
    public void set_AdminComment(string value);
    public ErrorFacet get_Error();
    public void set_Error(ErrorFacet value);
    public SiteAccessReportEntityEnum get_ReportEntity();
    public void set_ReportEntity(SiteAccessReportEntityEnum value);
    public Guid get_ReviewId();
    public void set_ReviewId(Guid value);
    public DateTime get_ReviewInitiatedDateTime();
    public void set_ReviewInitiatedDateTime(DateTime value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public string get_SiteName();
    public void set_SiteName(string value);
    public string get_Status();
    public void set_Status(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceSiteReviewsResponse")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDataGovernanceSiteReviewsResponse : ClientValueObject {
    private string m_adminComment;
    private DateTime m_reportCreatedDateTime;
    private DateTime m_reportEndDateTime;
    private SiteAccessReportEntityEnum m_reportEntity;
    private DateTime m_reviewCompletedDateTime;
    private string m_reviewerComment;
    private string m_reviewerEmail;
    private Guid m_reviewId;
    private DateTime m_reviewInitiatedDateTime;
    private Guid m_siteId;
    private string m_siteName;
    private string m_status;
    [RemoteAttribute]
public string AdminComment { get; public set; }
    [RemoteAttribute]
public DateTime ReportCreatedDateTime { get; public set; }
    [RemoteAttribute]
public DateTime ReportEndDateTime { get; public set; }
    [RemoteAttribute]
public SiteAccessReportEntityEnum ReportEntity { get; public set; }
    [RemoteAttribute]
public DateTime ReviewCompletedDateTime { get; public set; }
    [RemoteAttribute]
public string ReviewerComment { get; public set; }
    [RemoteAttribute]
public string ReviewerEmail { get; public set; }
    [RemoteAttribute]
public Guid ReviewId { get; public set; }
    [RemoteAttribute]
public DateTime ReviewInitiatedDateTime { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public string SiteName { get; public set; }
    [RemoteAttribute]
public string Status { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_AdminComment();
    public void set_AdminComment(string value);
    public DateTime get_ReportCreatedDateTime();
    public void set_ReportCreatedDateTime(DateTime value);
    public DateTime get_ReportEndDateTime();
    public void set_ReportEndDateTime(DateTime value);
    public SiteAccessReportEntityEnum get_ReportEntity();
    public void set_ReportEntity(SiteAccessReportEntityEnum value);
    public DateTime get_ReviewCompletedDateTime();
    public void set_ReviewCompletedDateTime(DateTime value);
    public string get_ReviewerComment();
    public void set_ReviewerComment(string value);
    public string get_ReviewerEmail();
    public void set_ReviewerEmail(string value);
    public Guid get_ReviewId();
    public void set_ReviewId(Guid value);
    public DateTime get_ReviewInitiatedDateTime();
    public void set_ReviewInitiatedDateTime(DateTime value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public string get_SiteName();
    public void set_SiteName(string value);
    public string get_Status();
    public void set_Status(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDeletedContainerProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDeletedContainerProperties : ClientValueObject {
    private string m_containerId;
    private string m_containerName;
    private DateTime m_createdOn;
    private DateTime m_deletedOn;
    [RemoteAttribute]
public string ContainerId { get; public set; }
    [RemoteAttribute]
public string ContainerName { get; public set; }
    [RemoteAttribute]
public DateTime CreatedOn { get; public set; }
    [RemoteAttribute]
public DateTime DeletedOn { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ContainerId();
    public void set_ContainerId(string value);
    public string get_ContainerName();
    public void set_ContainerName(string value);
    public DateTime get_CreatedOn();
    public void set_CreatedOn(DateTime value);
    public DateTime get_DeletedOn();
    public void set_DeletedOn(DateTime value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPDeletedContainerTypeProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPDeletedContainerTypeProperties : ClientValueObject {
    private Guid m_containerTypeId;
    [RemoteAttribute]
public Guid ContainerTypeId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Guid get_ContainerTypeId();
    public void set_ContainerTypeId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOAppBillingProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOAppBillingProperties : ClientValueObject {
    private Guid m_applicationId;
    private string m_azureRegion;
    private bool m_isActivated;
    private string m_resourceGroup;
    private Guid m_subscriptionId;
    private string m_subscriptionState;
    private string m_usageCharges;
    [RemoteAttribute]
public Guid ApplicationId { get; public set; }
    [RemoteAttribute]
public string AzureRegion { get; public set; }
    [RemoteAttribute]
public bool IsActivated { get; public set; }
    [RemoteAttribute]
public string ResourceGroup { get; public set; }
    [RemoteAttribute]
public Guid SubscriptionId { get; public set; }
    [RemoteAttribute]
public string SubscriptionState { get; public set; }
    [RemoteAttribute]
public string UsageCharges { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Guid get_ApplicationId();
    public void set_ApplicationId(Guid value);
    public string get_AzureRegion();
    public void set_AzureRegion(string value);
    public bool get_IsActivated();
    public void set_IsActivated(bool value);
    public string get_ResourceGroup();
    public void set_ResourceGroup(string value);
    public Guid get_SubscriptionId();
    public void set_SubscriptionId(Guid value);
    public string get_SubscriptionState();
    public void set_SubscriptionState(string value);
    public string get_UsageCharges();
    public void set_UsageCharges(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOContentSecurityPolicyConfiguration")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOContentSecurityPolicyConfiguration : ClientObjectCollection`1<SPOContentSecurityPolicyEntry> {
    [EditorBrowsableAttribute("1")]
public SPOContentSecurityPolicyConfiguration(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void Add(string source);
    [RemoteAttribute]
public void Remove(string source);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOContentSecurityPolicyEntry")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOContentSecurityPolicyEntry : ClientValueObject {
    private string m_source;
    [RemoteAttribute]
public string Source { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Source();
    public void set_Source(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPODeletedSitePropertiesEnumerable")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPODeletedSitePropertiesEnumerable : ClientObjectCollection`1<DeletedSiteProperties> {
    [RemoteAttribute]
public int NextStartIndex { get; }
    [RemoteAttribute]
public string NextStartIndexFromSharePoint { get; }
    [EditorBrowsableAttribute("1")]
public SPODeletedSitePropertiesEnumerable(ClientRuntimeContext context, ObjectPath objectPath);
    public int get_NextStartIndex();
    public string get_NextStartIndexFromSharePoint();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPODeletedSitePropertiesEnumerablePropertyNames : object {
    public static string NextStartIndex;
    public static string NextStartIndexFromSharePoint;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOFileVersionBatchDeleteJobProgress")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOFileVersionBatchDeleteJobProgress : ClientValueObject {
    private FileVersionBatchDeleteMode m_batchDeleteMode;
    private DateTime m_completeTimeInUTC;
    private DateTime m_deleteOlderThan;
    private string m_errorMessage;
    private int m_filesProcessed;
    private DateTime m_lastProcessTimeInUTC;
    private int m_majorVersionLimit;
    private int m_majorWithMinorVersionsLimit;
    private DateTime m_requestTimeInUTC;
    private string m_status;
    private long m_storageReleasedInBytes;
    private string m_url;
    private int m_versionsDeleted;
    private int m_versionsFailed;
    private int m_versionsProcessed;
    private Guid m_workItemId;
    [RemoteAttribute]
public FileVersionBatchDeleteMode BatchDeleteMode { get; public set; }
    [RemoteAttribute]
public DateTime CompleteTimeInUTC { get; public set; }
    [RemoteAttribute]
public DateTime DeleteOlderThan { get; public set; }
    [RemoteAttribute]
public string ErrorMessage { get; public set; }
    [RemoteAttribute]
public int FilesProcessed { get; public set; }
    [RemoteAttribute]
public DateTime LastProcessTimeInUTC { get; public set; }
    [RemoteAttribute]
public int MajorVersionLimit { get; public set; }
    [RemoteAttribute]
public int MajorWithMinorVersionsLimit { get; public set; }
    [RemoteAttribute]
public DateTime RequestTimeInUTC { get; public set; }
    [RemoteAttribute]
public string Status { get; public set; }
    [RemoteAttribute]
public long StorageReleasedInBytes { get; public set; }
    [RemoteAttribute]
public string Url { get; public set; }
    [RemoteAttribute]
public int VersionsDeleted { get; public set; }
    [RemoteAttribute]
public int VersionsFailed { get; public set; }
    [RemoteAttribute]
public int VersionsProcessed { get; public set; }
    [RemoteAttribute]
public Guid WorkItemId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public FileVersionBatchDeleteMode get_BatchDeleteMode();
    public void set_BatchDeleteMode(FileVersionBatchDeleteMode value);
    public DateTime get_CompleteTimeInUTC();
    public void set_CompleteTimeInUTC(DateTime value);
    public DateTime get_DeleteOlderThan();
    public void set_DeleteOlderThan(DateTime value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public int get_FilesProcessed();
    public void set_FilesProcessed(int value);
    public DateTime get_LastProcessTimeInUTC();
    public void set_LastProcessTimeInUTC(DateTime value);
    public int get_MajorVersionLimit();
    public void set_MajorVersionLimit(int value);
    public int get_MajorWithMinorVersionsLimit();
    public void set_MajorWithMinorVersionsLimit(int value);
    public DateTime get_RequestTimeInUTC();
    public void set_RequestTimeInUTC(DateTime value);
    public string get_Status();
    public void set_Status(string value);
    public long get_StorageReleasedInBytes();
    public void set_StorageReleasedInBytes(long value);
    public string get_Url();
    public void set_Url(string value);
    public int get_VersionsDeleted();
    public void set_VersionsDeleted(int value);
    public int get_VersionsFailed();
    public void set_VersionsFailed(int value);
    public int get_VersionsProcessed();
    public void set_VersionsProcessed(int value);
    public Guid get_WorkItemId();
    public void set_WorkItemId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOFileVersionExpirationReportJobProgress")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOFileVersionExpirationReportJobProgress : ClientValueObject {
    private string m_errorMessage;
    private string m_reportUrl;
    private string m_status;
    private string m_url;
    [RemoteAttribute]
public string ErrorMessage { get; public set; }
    [RemoteAttribute]
public string ReportUrl { get; public set; }
    [RemoteAttribute]
public string Status { get; public set; }
    [RemoteAttribute]
public string Url { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public string get_ReportUrl();
    public void set_ReportUrl(string value);
    public string get_Status();
    public void set_Status(string value);
    public string get_Url();
    public void set_Url(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOFileVersionPolicySettings")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOFileVersionPolicySettings : ClientValueObject {
    private bool m_enableAutoExpirationVersionTrim;
    private int m_expireVersionsAfterDays;
    private int m_majorVersionLimit;
    private int m_majorWithMinorVersionsLimit;
    private bool m_minorVersionsEnabled;
    private bool m_versioningEnabled;
    [RemoteAttribute]
public bool EnableAutoExpirationVersionTrim { get; public set; }
    [RemoteAttribute]
public int ExpireVersionsAfterDays { get; public set; }
    [RemoteAttribute]
public int MajorVersionLimit { get; public set; }
    [RemoteAttribute]
public int MajorWithMinorVersionsLimit { get; public set; }
    [RemoteAttribute]
public bool MinorVersionsEnabled { get; public set; }
    [RemoteAttribute]
public bool VersioningEnabled { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_EnableAutoExpirationVersionTrim();
    public void set_EnableAutoExpirationVersionTrim(bool value);
    public int get_ExpireVersionsAfterDays();
    public void set_ExpireVersionsAfterDays(int value);
    public int get_MajorVersionLimit();
    public void set_MajorVersionLimit(int value);
    public int get_MajorWithMinorVersionsLimit();
    public void set_MajorWithMinorVersionsLimit(int value);
    public bool get_MinorVersionsEnabled();
    public void set_MinorVersionsEnabled(bool value);
    public bool get_VersioningEnabled();
    public void set_VersioningEnabled(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPOHubSiteUserRights : Enum {
    public ulong value__;
    public static SPOHubSiteUserRights None;
    public static SPOHubSiteUserRights Join;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOInsightsReportMetadata")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOInsightsReportMetadata : ClientValueObject {
    private string m_createdDateTimeInUtc;
    private Guid m_id;
    private ReportStatus m_status;
    [RemoteAttribute]
public string CreatedDateTimeInUtc { get; public set; }
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public ReportStatus Status { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_CreatedDateTimeInUtc();
    public void set_CreatedDateTimeInUtc(string value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public ReportStatus get_Status();
    public void set_Status(ReportStatus value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOListParameters")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOListParameters : ClientValueObject {
    private Guid m_id;
    private string m_title;
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Guid get_Id();
    public void set_Id(Guid value);
    public string get_Title();
    public void set_Title(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOMalwareFile")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOMalwareFile : ClientObject {
    [RemoteAttribute]
public File File { get; public set; }
    [RemoteAttribute]
public ResourcePath FilePath { get; public set; }
    [RemoteAttribute]
public string MalwareInfo { get; public set; }
    [RemoteAttribute]
public SPVirusCheckStatus MalwareStatus { get; public set; }
    [RemoteAttribute]
public string SiteURL { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOMalwareFile(ClientRuntimeContext context, ObjectPath objectPath);
    public File get_File();
    public void set_File(File value);
    public ResourcePath get_FilePath();
    public void set_FilePath(ResourcePath value);
    public string get_MalwareInfo();
    public void set_MalwareInfo(string value);
    public SPVirusCheckStatus get_MalwareStatus();
    public void set_MalwareStatus(SPVirusCheckStatus value);
    public string get_SiteURL();
    public void set_SiteURL(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientResult`1<Stream> GetMalwareFileStream();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOMalwareFileObjectPropertyNames : object {
    public static string File;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOMalwareFilePropertyNames : object {
    public static string FilePath;
    public static string MalwareInfo;
    public static string MalwareStatus;
    public static string SiteURL;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SpoOperation")]
public class Microsoft.Online.SharePoint.TenantAdministration.SpoOperation : ClientObject {
    [RemoteAttribute]
public bool HasTimedout { get; }
    [RemoteAttribute]
public bool IsComplete { get; }
    [RemoteAttribute]
public int PollingInterval { get; }
    [EditorBrowsableAttribute("1")]
public SpoOperation(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_HasTimedout();
    public bool get_IsComplete();
    public int get_PollingInterval();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SpoOperationPropertyNames : object {
    public static string HasTimedout;
    public static string IsComplete;
    public static string PollingInterval;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOPortalLaunchValidationResult")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOPortalLaunchValidationResult : ClientObject {
    [RemoteAttribute]
public string Message { get; public set; }
    [RemoteAttribute]
public SPOPortalLaunchValidationResultTypes ResultType { get; public set; }
    [RemoteAttribute]
public String[] Warnings { get; public set; }
    [RemoteAttribute]
public string WaveSetupContent { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOPortalLaunchValidationResult(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Message();
    public void set_Message(string value);
    public SPOPortalLaunchValidationResultTypes get_ResultType();
    public void set_ResultType(SPOPortalLaunchValidationResultTypes value);
    public String[] get_Warnings();
    public void set_Warnings(String[] value);
    public string get_WaveSetupContent();
    public void set_WaveSetupContent(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOPortalLaunchValidationResultPropertyNames : object {
    public static string Message;
    public static string ResultType;
    public static string Warnings;
    public static string WaveSetupContent;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPOPortalLaunchValidationResultTypes : Enum {
    public int value__;
    public static SPOPortalLaunchValidationResultTypes Passed;
    public static SPOPortalLaunchValidationResultTypes ConfirmDefaultPage;
    public static SPOPortalLaunchValidationResultTypes ConfirmChange;
    public static SPOPortalLaunchValidationResultTypes Warning;
    public static SPOPortalLaunchValidationResultTypes Failed;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOPortalLaunchValidator")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOPortalLaunchValidator : ClientObject {
    [EditorBrowsableAttribute("1")]
public SPOPortalLaunchValidator(ClientRuntimeContext context, ObjectPath objectPath);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPORestrictedContentDiscoverabilityClient")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPORestrictedContentDiscoverabilityClient : SPDataGovernanceRestApiClientBase {
    public SPORestrictedContentDiscoverabilityClient(ClientRuntimeContext context, string authorizationHeader, string url, string userAgent);
    [EditorBrowsableAttribute("1")]
public SPORestrictedContentDiscoverabilityClient(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public IList`1<SPORestrictedContentDiscoverabilitySiteDetails> GetRestrictContentOrgWideSearchUsageInsightsReportContent(Guid reportId);
    [RemoteAttribute]
public IList`1<SPOInsightsReportMetadata> GetAllRestrictedContentDiscoverabilityReports();
    [RemoteAttribute]
public ClientResult`1<SPOInsightsReportMetadata> GetSPODataAccessGovernanceInsightById(Guid reportId);
    [RemoteAttribute]
public ClientResult`1<SPOInsightsReportMetadata> CreateRestrictedContentDiscoverabilityReport();
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPORestrictedContentDiscoverabilitySiteDetails")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPORestrictedContentDiscoverabilitySiteDetails : ClientValueObject {
    private DateTime m_lastModified;
    private string m_siteOwnerEmail;
    private string m_siteTitle;
    private string m_siteUrl;
    private DateTime m_timeCreated;
    [RemoteAttribute]
public DateTime LastModified { get; public set; }
    [RemoteAttribute]
public string SiteOwnerEmail { get; public set; }
    [RemoteAttribute]
public string SiteTitle { get; public set; }
    [RemoteAttribute]
public string SiteUrl { get; public set; }
    [RemoteAttribute]
public DateTime TimeCreated { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public string get_SiteOwnerEmail();
    public void set_SiteOwnerEmail(string value);
    public string get_SiteTitle();
    public void set_SiteTitle(string value);
    public string get_SiteUrl();
    public void set_SiteUrl(string value);
    public DateTime get_TimeCreated();
    public void set_TimeCreated(DateTime value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPORestrictedSiteCreationConfiguration")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPORestrictedSiteCreationConfiguration : ClientObject {
    [RemoteAttribute]
public bool Enabled { get; public set; }
    [RemoteAttribute]
public IDictionary`2<string, string> GroupConfigurations { get; public set; }
    [RemoteAttribute]
public RestrictedSiteCreationMode Mode { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPORestrictedSiteCreationConfiguration(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public IDictionary`2<string, string> get_GroupConfigurations();
    public void set_GroupConfigurations(IDictionary`2<string, string> value);
    public RestrictedSiteCreationMode get_Mode();
    public void set_Mode(RestrictedSiteCreationMode value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPORestrictedSiteCreationConfigurationPropertyNames : object {
    public static string Enabled;
    public static string GroupConfigurations;
    public static string Mode;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SpoSiteLockState : Enum {
    public int value__;
    public static SpoSiteLockState Unlock;
    public static SpoSiteLockState NoAdditions;
    public static SpoSiteLockState ReadOnly;
    public static SpoSiteLockState NoAccess;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOSitePropertiesEnumerable")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOSitePropertiesEnumerable : ClientObjectCollection`1<SiteProperties> {
    [RemoteAttribute]
public int NextStartIndex { get; }
    [RemoteAttribute]
public string NextStartIndexFromSharePoint { get; }
    [EditorBrowsableAttribute("1")]
public SPOSitePropertiesEnumerable(ClientRuntimeContext context, ObjectPath objectPath);
    public int get_NextStartIndex();
    public string get_NextStartIndexFromSharePoint();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOSitePropertiesEnumerableFilter")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOSitePropertiesEnumerableFilter : ClientValueObject {
    private string m_archivedBy;
    private DateTime m_archivedTime;
    private string m_archiveStatus;
    private string m_filter;
    private int m_groupIdDefined;
    private bool m_includeDetail;
    private PersonalSiteFilter m_includePersonalSite;
    private string m_startIndex;
    private string m_template;
    [RemoteAttribute]
public string ArchivedBy { get; public set; }
    [RemoteAttribute]
public DateTime ArchivedTime { get; public set; }
    [RemoteAttribute]
public string ArchiveStatus { get; public set; }
    [RemoteAttribute]
public string Filter { get; public set; }
    [RemoteAttribute]
public int GroupIdDefined { get; public set; }
    [RemoteAttribute]
public bool IncludeDetail { get; public set; }
    [RemoteAttribute]
public PersonalSiteFilter IncludePersonalSite { get; public set; }
    [RemoteAttribute]
public string StartIndex { get; public set; }
    [RemoteAttribute]
public string Template { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ArchivedBy();
    public void set_ArchivedBy(string value);
    public DateTime get_ArchivedTime();
    public void set_ArchivedTime(DateTime value);
    public string get_ArchiveStatus();
    public void set_ArchiveStatus(string value);
    public string get_Filter();
    public void set_Filter(string value);
    public int get_GroupIdDefined();
    public void set_GroupIdDefined(int value);
    public bool get_IncludeDetail();
    public void set_IncludeDetail(bool value);
    public PersonalSiteFilter get_IncludePersonalSite();
    public void set_IncludePersonalSite(PersonalSiteFilter value);
    public string get_StartIndex();
    public void set_StartIndex(string value);
    public string get_Template();
    public void set_Template(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOSitePropertiesEnumerablePropertyNames : object {
    public static string NextStartIndex;
    public static string NextStartIndexFromSharePoint;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicy")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicy : ClientObject {
    [RemoteAttribute]
public SPOTenantCdnPolicyType PolicyType { get; public set; }
    [RemoteAttribute]
public string PolicyValue { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOTenantCdnPolicy(ClientRuntimeContext context, ObjectPath objectPath);
    public SPOTenantCdnPolicyType get_PolicyType();
    public void set_PolicyType(SPOTenantCdnPolicyType value);
    public string get_PolicyValue();
    public void set_PolicyValue(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicyPropertyNames : object {
    public static string PolicyType;
    public static string PolicyValue;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicyType : Enum {
    public int value__;
    public static SPOTenantCdnPolicyType IncludeFileExtensions;
    public static SPOTenantCdnPolicyType ExcludeRestrictedSiteClassifications;
    public static SPOTenantCdnPolicyType ExcludeIfNoScriptDisabled;
    public static SPOTenantCdnPolicyType ExcludeRestrictedSiteClassificationsFileExtensions;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType : Enum {
    public int value__;
    public static SPOTenantCdnType Public;
    public static SPOTenantCdnType Private;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantGroupIdentityMapping")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantGroupIdentityMapping : ClientObject {
    [RemoteAttribute]
public TenantIdentityMappingGroupType GroupType { get; public set; }
    [RemoteAttribute]
public Guid SourceGroupObjectId { get; public set; }
    [RemoteAttribute]
public Guid SourceTenantCompanyId { get; public set; }
    [RemoteAttribute]
public string TargetGroupName { get; public set; }
    [RemoteAttribute]
public Guid TargetGroupObjectId { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOTenantGroupIdentityMapping(ClientRuntimeContext context, ObjectPath objectPath);
    public TenantIdentityMappingGroupType get_GroupType();
    public void set_GroupType(TenantIdentityMappingGroupType value);
    public Guid get_SourceGroupObjectId();
    public void set_SourceGroupObjectId(Guid value);
    public Guid get_SourceTenantCompanyId();
    public void set_SourceTenantCompanyId(Guid value);
    public string get_TargetGroupName();
    public void set_TargetGroupName(string value);
    public Guid get_TargetGroupObjectId();
    public void set_TargetGroupObjectId(Guid value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantGroupIdentityMappingPropertyNames : object {
    public static string GroupType;
    public static string SourceGroupObjectId;
    public static string SourceTenantCompanyId;
    public static string TargetGroupName;
    public static string TargetGroupObjectId;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantInstance")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantInstance : ClientObject {
    [RemoteAttribute]
public string DataLocation { get; public set; }
    [RemoteAttribute]
public bool IsDefaultDataLocation { get; public set; }
    [RemoteAttribute]
public string MySiteHostUrl { get; public set; }
    [RemoteAttribute]
public string PortalUrl { get; public set; }
    [RemoteAttribute]
public string RootSiteUrl { get; public set; }
    [RemoteAttribute]
public string TenantAdminUrl { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOTenantInstance(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_DataLocation();
    public void set_DataLocation(string value);
    public bool get_IsDefaultDataLocation();
    public void set_IsDefaultDataLocation(bool value);
    public string get_MySiteHostUrl();
    public void set_MySiteHostUrl(string value);
    public string get_PortalUrl();
    public void set_PortalUrl(string value);
    public string get_RootSiteUrl();
    public void set_RootSiteUrl(string value);
    public string get_TenantAdminUrl();
    public void set_TenantAdminUrl(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantInstancePropertyNames : object {
    public static string DataLocation;
    public static string IsDefaultDataLocation;
    public static string MySiteHostUrl;
    public static string PortalUrl;
    public static string RootSiteUrl;
    public static string TenantAdminUrl;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantOdbFeature")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantOdbFeature : ClientObject {
    [RemoteAttribute]
public string FeatureDescription { get; public set; }
    [RemoteAttribute]
public Guid FeatureId { get; public set; }
    [RemoteAttribute]
public string FeatureName { get; public set; }
    [RemoteAttribute]
public string Message { get; public set; }
    [RemoteAttribute]
public FeatureScope Scope { get; public set; }
    [RemoteAttribute]
public string UserPrincipleName { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOTenantOdbFeature(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_FeatureDescription();
    public void set_FeatureDescription(string value);
    public Guid get_FeatureId();
    public void set_FeatureId(Guid value);
    public string get_FeatureName();
    public void set_FeatureName(string value);
    public string get_Message();
    public void set_Message(string value);
    public FeatureScope get_Scope();
    public void set_Scope(FeatureScope value);
    public string get_UserPrincipleName();
    public void set_UserPrincipleName(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantOdbFeaturePropertyNames : object {
    public static string FeatureDescription;
    public static string FeatureId;
    public static string FeatureName;
    public static string Message;
    public static string Scope;
    public static string UserPrincipleName;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantSiteUserInvitation")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantSiteUserInvitation : ClientObject {
    [RemoteAttribute]
public Guid DocId { get; public set; }
    [RemoteAttribute]
public string EmailAddress { get; public set; }
    [RemoteAttribute]
public Guid ShareId { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public Guid WebId { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOTenantSiteUserInvitation(ClientRuntimeContext context, ObjectPath objectPath);
    public Guid get_DocId();
    public void set_DocId(Guid value);
    public string get_EmailAddress();
    public void set_EmailAddress(string value);
    public Guid get_ShareId();
    public void set_ShareId(Guid value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public Guid get_WebId();
    public void set_WebId(Guid value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantSiteUserInvitationPropertyNames : object {
    public static string DocId;
    public static string EmailAddress;
    public static string ShareId;
    public static string SiteId;
    public static string WebId;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantUserIdentityMapping")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantUserIdentityMapping : ClientObject {
    [RemoteAttribute]
public Guid SourceTenantCompanyId { get; public set; }
    [RemoteAttribute]
public string SourceUserKey { get; public set; }
    [RemoteAttribute]
public string TargetUserEmail { get; public set; }
    [RemoteAttribute]
public string TargetUserPuid { get; public set; }
    [RemoteAttribute]
public string TargetUserUpn { get; public set; }
    [RemoteAttribute]
public TenantIdentityMappingUserType UserType { get; public set; }
    [EditorBrowsableAttribute("1")]
public SPOTenantUserIdentityMapping(ClientRuntimeContext context, ObjectPath objectPath);
    public Guid get_SourceTenantCompanyId();
    public void set_SourceTenantCompanyId(Guid value);
    public string get_SourceUserKey();
    public void set_SourceUserKey(string value);
    public string get_TargetUserEmail();
    public void set_TargetUserEmail(string value);
    public string get_TargetUserPuid();
    public void set_TargetUserPuid(string value);
    public string get_TargetUserUpn();
    public void set_TargetUserUpn(string value);
    public TenantIdentityMappingUserType get_UserType();
    public void set_UserType(TenantIdentityMappingUserType value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantUserIdentityMappingPropertyNames : object {
    public static string SourceTenantCompanyId;
    public static string SourceUserKey;
    public static string TargetUserEmail;
    public static string TargetUserPuid;
    public static string TargetUserUpn;
    public static string UserType;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantWebTemplate")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantWebTemplate : ClientValueObject {
    private int m_compatibilityLevel;
    private string m_description;
    private string m_displayCategory;
    private int m_id;
    private UInt32 m_lcid;
    private string m_name;
    private string m_title;
    [RemoteAttribute]
public int CompatibilityLevel { get; }
    [RemoteAttribute]
public string Description { get; }
    [RemoteAttribute]
public string DisplayCategory { get; }
    [RemoteAttribute]
public int Id { get; }
    [RemoteAttribute]
public UInt32 Lcid { get; }
    [RemoteAttribute]
public string Name { get; }
    [RemoteAttribute]
public string Title { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_CompatibilityLevel();
    public string get_Description();
    public string get_DisplayCategory();
    public int get_Id();
    public UInt32 get_Lcid();
    public string get_Name();
    public string get_Title();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOTenantWebTemplateCollection")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOTenantWebTemplateCollection : ClientObjectCollection`1<SPOTenantWebTemplate> {
    [EditorBrowsableAttribute("1")]
public SPOTenantWebTemplateCollection(ClientRuntimeContext context, ObjectPath objectPath);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPOWebAppServicePrincipalPublic")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPOWebAppServicePrincipalPublic : ClientObject {
    public SPOWebAppServicePrincipalPublic(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public SPOWebAppServicePrincipalPublic(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void AddCustomSpfx3rdPartyAppPrincipal(string appId, string appUri, string clientSecret);
    [RemoteAttribute]
public void RemoveCustomSpfx3rdPartyAppPrincipal();
    [RemoteAttribute]
public Spfx3rdPartyCustomPrincipalInfo GetCustomSpfx3rdPartyAppPrincipal();
    [RemoteAttribute]
public void UpdateCustomSpfx3rdPartyAppPrincipalClientSecret(string clientSecret);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPSitePage")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPSitePage : ClientValueObject {
    private string m_createdBy;
    private DateTime m_createdDateTime;
    private DateTime m_lastModifiedDateTime;
    private string m_name;
    private string m_title;
    private Guid m_uniqueId;
    [RemoteAttribute]
public string CreatedBy { get; public set; }
    [RemoteAttribute]
public DateTime CreatedDateTime { get; public set; }
    [RemoteAttribute]
public DateTime LastModifiedDateTime { get; public set; }
    [RemoteAttribute]
public string Name { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public Guid UniqueId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_CreatedBy();
    public void set_CreatedBy(string value);
    public DateTime get_CreatedDateTime();
    public void set_CreatedDateTime(DateTime value);
    public DateTime get_LastModifiedDateTime();
    public void set_LastModifiedDateTime(DateTime value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Title();
    public void set_Title(string value);
    public Guid get_UniqueId();
    public void set_UniqueId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPSitePageCopyJobProgress")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPSitePageCopyJobProgress : ClientValueObject {
    private string m_errorMessage;
    private string m_jobState;
    private string m_newPageUrl;
    private string m_sourcePageName;
    private string m_statusMessage;
    private Guid m_workItemId;
    [RemoteAttribute]
public string ErrorMessage { get; public set; }
    [RemoteAttribute]
public string JobState { get; public set; }
    [RemoteAttribute]
public string NewPageUrl { get; public set; }
    [RemoteAttribute]
public string SourcePageName { get; public set; }
    [RemoteAttribute]
public string StatusMessage { get; public set; }
    [RemoteAttribute]
public Guid WorkItemId { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public string get_JobState();
    public void set_JobState(string value);
    public string get_NewPageUrl();
    public void set_NewPageUrl(string value);
    public string get_SourcePageName();
    public void set_SourcePageName(string value);
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    public Guid get_WorkItemId();
    public void set_WorkItemId(Guid value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPSyntexApplicationProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPSyntexApplicationProperties : ClientValueObject {
    private Guid m_applicationId;
    private string m_applicationName;
    private IList`1<Guid> m_applications;
    private IList`1<string> m_appOnlyPermissions;
    private IList`1<string> m_delegatedPermissions;
    private bool m_overrideTenantSharingCapability;
    private Guid m_owningApplicationId;
    private string m_owningApplicationName;
    private SharingCapabilities m_sharingCapability;
    [RemoteAttribute]
public Guid ApplicationId { get; public set; }
    [RemoteAttribute]
public string ApplicationName { get; public set; }
    [RemoteAttribute]
public IList`1<Guid> Applications { get; public set; }
    [RemoteAttribute]
public IList`1<string> AppOnlyPermissions { get; public set; }
    [RemoteAttribute]
public IList`1<string> DelegatedPermissions { get; public set; }
    [RemoteAttribute]
public bool OverrideTenantSharingCapability { get; public set; }
    [RemoteAttribute]
public Guid OwningApplicationId { get; public set; }
    [RemoteAttribute]
public string OwningApplicationName { get; public set; }
    [RemoteAttribute]
public SharingCapabilities SharingCapability { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Guid get_ApplicationId();
    public void set_ApplicationId(Guid value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public IList`1<Guid> get_Applications();
    public void set_Applications(IList`1<Guid> value);
    public IList`1<string> get_AppOnlyPermissions();
    public void set_AppOnlyPermissions(IList`1<string> value);
    public IList`1<string> get_DelegatedPermissions();
    public void set_DelegatedPermissions(IList`1<string> value);
    public bool get_OverrideTenantSharingCapability();
    public void set_OverrideTenantSharingCapability(bool value);
    public Guid get_OwningApplicationId();
    public void set_OwningApplicationId(Guid value);
    public string get_OwningApplicationName();
    public void set_OwningApplicationName(string value);
    public SharingCapabilities get_SharingCapability();
    public void set_SharingCapability(SharingCapabilities value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SPSyntexManagementUtilities")]
public class Microsoft.Online.SharePoint.TenantAdministration.SPSyntexManagementUtilities : ClientObject {
    [EditorBrowsableAttribute("1")]
public SPSyntexManagementUtilities(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public static ClientResult`1<SyntexFeatureScopeSettingsValues> ConvertScopeToTenantSettings(ClientRuntimeContext context, SyntexFeatureScopeValue input, string parameterName);
    [RemoteAttribute]
public static ClientResult`1<SyntexGetModifiedListResponse> GetModifiedSelectedSitesList(ClientRuntimeContext context, Site adminSite, IEnumerable`1<Guid> currentSiteIds, String[] inputSiteUrls, SelectedSitesListOperations operation, string parameterName);
    [RemoteAttribute]
public static ClientResult`1<SyntexCheckManagementAllowedResponse> CheckIfSyntexManagementIsAllowed(ClientRuntimeContext context, Site adminSite);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SyntexBillingContext")]
public class Microsoft.Online.SharePoint.TenantAdministration.SyntexBillingContext : ClientValueObject {
    private SyntexConsumptionBillingActivationStatus m_activationStatus;
    private string m_azureResourceId;
    private AzureSubscriptionState m_azureSubscriptionState;
    private SyntexConsumptionBillingEnabledFeatures m_enabledFeatures;
    private string m_location;
    private DateTime m_updated;
    [RemoteAttribute]
public SyntexConsumptionBillingActivationStatus ActivationStatus { get; public set; }
    [RemoteAttribute]
public string AzureResourceId { get; public set; }
    [RemoteAttribute]
public AzureSubscriptionState AzureSubscriptionState { get; public set; }
    [RemoteAttribute]
public SyntexConsumptionBillingEnabledFeatures EnabledFeatures { get; public set; }
    [RemoteAttribute]
public string Location { get; public set; }
    [RemoteAttribute]
public DateTime Updated { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public SyntexConsumptionBillingActivationStatus get_ActivationStatus();
    public void set_ActivationStatus(SyntexConsumptionBillingActivationStatus value);
    public string get_AzureResourceId();
    public void set_AzureResourceId(string value);
    public AzureSubscriptionState get_AzureSubscriptionState();
    public void set_AzureSubscriptionState(AzureSubscriptionState value);
    public SyntexConsumptionBillingEnabledFeatures get_EnabledFeatures();
    public void set_EnabledFeatures(SyntexConsumptionBillingEnabledFeatures value);
    public string get_Location();
    public void set_Location(string value);
    public DateTime get_Updated();
    public void set_Updated(DateTime value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SyntexCheckManagementAllowedResponse")]
public class Microsoft.Online.SharePoint.TenantAdministration.SyntexCheckManagementAllowedResponse : ClientValueObject {
    private bool m_allowedBillingOnly;
    private bool m_allowedLicenseOrBilling;
    [RemoteAttribute]
public bool allowedBillingOnly { get; public set; }
    [RemoteAttribute]
public bool allowedLicenseOrBilling { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_allowedBillingOnly();
    public void set_allowedBillingOnly(bool value);
    public bool get_allowedLicenseOrBilling();
    public void set_allowedLicenseOrBilling(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SyntexConsumptionBillingActivationStatus : Enum {
    public int value__;
    public static SyntexConsumptionBillingActivationStatus Unknown;
    public static SyntexConsumptionBillingActivationStatus None;
    public static SyntexConsumptionBillingActivationStatus Active;
}
[FlagsAttribute]
public enum Microsoft.Online.SharePoint.TenantAdministration.SyntexConsumptionBillingEnabledFeatures : Enum {
    public int value__;
    public static SyntexConsumptionBillingEnabledFeatures None;
    public static SyntexConsumptionBillingEnabledFeatures DocumentUnderstanding;
    public static SyntexConsumptionBillingEnabledFeatures ContentAssembly;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SyntexFeatureScopeSettingsValues")]
public class Microsoft.Online.SharePoint.TenantAdministration.SyntexFeatureScopeSettingsValues : ClientValueObject {
    private bool m_enabled;
    private string m_fileName;
    [RemoteAttribute]
public bool Enabled { get; public set; }
    [RemoteAttribute]
public string FileName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_FileName();
    public void set_FileName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SyntexFeatureScopeValue : Enum {
    public int value__;
    public static SyntexFeatureScopeValue NoSites;
    public static SyntexFeatureScopeValue AllSites;
    public static SyntexFeatureScopeValue SelectedSites;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SyntexGetModifiedListResponse")]
public class Microsoft.Online.SharePoint.TenantAdministration.SyntexGetModifiedListResponse : ClientValueObject {
    private IEnumerable`1<string> m_ignoredUrlsList;
    private IEnumerable`1<Guid> m_modifiedSelectedSitesList;
    [RemoteAttribute]
public IEnumerable`1<string> IgnoredUrlsList { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<Guid> ModifiedSelectedSitesList { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public IEnumerable`1<string> get_IgnoredUrlsList();
    public void set_IgnoredUrlsList(IEnumerable`1<string> value);
    public IEnumerable`1<Guid> get_ModifiedSelectedSitesList();
    public void set_ModifiedSelectedSitesList(IEnumerable`1<Guid> value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SyntexPowerAppsEnvironmentsContext")]
public class Microsoft.Online.SharePoint.TenantAdministration.SyntexPowerAppsEnvironmentsContext : ClientValueObject {
    private IEnumerable`1<PowerAppsEnvironmentContext> m_environments;
    private bool m_timerJobSyncDisabled;
    [RemoteAttribute]
public IEnumerable`1<PowerAppsEnvironmentContext> Environments { get; public set; }
    [RemoteAttribute]
public bool TimerJobSyncDisabled { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public IEnumerable`1<PowerAppsEnvironmentContext> get_Environments();
    public void set_Environments(IEnumerable`1<PowerAppsEnvironmentContext> value);
    public bool get_TimerJobSyncDisabled();
    public void set_TimerJobSyncDisabled(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.SyntexPremiumFeatureSettings")]
public class Microsoft.Online.SharePoint.TenantAdministration.SyntexPremiumFeatureSettings : ClientValueObject {
    private IEnumerable`1<Guid> m_siteList;
    private string m_siteListFileName;
    private SyntexSiteSpecificFeatureStatus m_status;
    [RemoteAttribute]
public IEnumerable`1<Guid> SiteList { get; public set; }
    [RemoteAttribute]
public string SiteListFileName { get; public set; }
    [RemoteAttribute]
public SyntexSiteSpecificFeatureStatus Status { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public IEnumerable`1<Guid> get_SiteList();
    public void set_SiteList(IEnumerable`1<Guid> value);
    public string get_SiteListFileName();
    public void set_SiteListFileName(string value);
    public SyntexSiteSpecificFeatureStatus get_Status();
    public void set_Status(SyntexSiteSpecificFeatureStatus value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.SyntexSiteSpecificFeatureStatus : Enum {
    public int value__;
    public static SyntexSiteSpecificFeatureStatus Disabled;
    public static SyntexSiteSpecificFeatureStatus Enabled;
    public static SyntexSiteSpecificFeatureStatus EnabledWithNoSites;
    public static SyntexSiteSpecificFeatureStatus DisabledWithNoSites;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TeamsChannelTypeValue : Enum {
    public int value__;
    public static TeamsChannelTypeValue None;
    public static TeamsChannelTypeValue PrivateChannel;
    public static TeamsChannelTypeValue SharedChannel;
    public static TeamsChannelTypeValue StandardChannel;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TemplateEnum : Enum {
    public int value__;
    public static TemplateEnum AllSites;
    public static TemplateEnum ClassicSites;
    public static TemplateEnum CommunicationSites;
    public static TemplateEnum TeamSites;
    public static TemplateEnum OtherSites;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.Tenant")]
public class Microsoft.Online.SharePoint.TenantAdministration.Tenant : ClientObject {
    [RemoteAttribute]
public Role AddressbarLinkPermission { get; public set; }
    [RemoteAttribute]
public string AIBuilderDefaultPowerAppsEnvironment { get; public set; }
    [RemoteAttribute]
public bool AIBuilderEnabled { get; public set; }
    [RemoteAttribute]
public int AIBuilderEnabledInContentCenter { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> AIBuilderSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> AIBuilderSiteList { get; public set; }
    [RemoteAttribute]
public string AIBuilderSiteListFileName { get; public set; }
    [RemoteAttribute]
public Guid AllOrganizationSecurityGroupId { get; public set; }
    [RemoteAttribute]
public SharingState AllowAnonymousMeetingParticipantsToAccessWhiteboards { get; public set; }
    [RemoteAttribute]
public bool AllowCommentsTextOnEmailEnabled { get; public set; }
    [RemoteAttribute]
public bool AllowDownloadingNonWebViewableFiles { get; public set; }
    [RemoteAttribute]
public IList`1<Guid> AllowedDomainListForSyncClient { get; public set; }
    [RemoteAttribute]
public bool AllowEditing { get; public set; }
    [RemoteAttribute]
public bool AllowEveryoneExceptExternalUsersClaimInPrivateSite { get; public set; }
    [RemoteAttribute]
public bool AllowGuestUserShareToUsersNotInSiteCollection { get; public set; }
    [RemoteAttribute]
public bool AllowLimitedAccessOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool AllowOverrideForBlockUserInfoVisibility { get; public set; }
    [RemoteAttribute]
public IList`1<string> AllowSelectSecurityGroupsInSPSitesList { get; public set; }
    [RemoteAttribute]
public IList`1<string> AllowSelectSGsInODBListInTenant { get; public set; }
    [RemoteAttribute]
public bool AllowSensitivityLabelOnRecords { get; public set; }
    [RemoteAttribute]
public bool AllowSharingOutsideRestrictedAccessControlGroups { get; public set; }
    [RemoteAttribute]
public string AmplifyAdminSettings { get; public set; }
    [RemoteAttribute]
public bool AnyoneLinkTrackUsers { get; public set; }
    [RemoteAttribute]
public bool AppBypassInformationBarriers { get; public set; }
    [RemoteAttribute]
public bool ApplyAppEnforcedRestrictionsToAdHocRecipients { get; public set; }
    [RemoteAttribute]
public bool AppOnlyBypassPeoplePickerPolicies { get; public set; }
    [RemoteAttribute]
public string ArchiveRedirectUrl { get; public set; }
    [RemoteAttribute]
public SPResilienceModeType AuthContextResilienceMode { get; public set; }
    [RemoteAttribute]
public bool AutofillColumnsEnabled { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> AutofillColumnsSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> AutofillColumnsSiteList { get; public set; }
    [RemoteAttribute]
public string AutofillColumnsSiteListFileName { get; public set; }
    [RemoteAttribute]
public bool BccExternalSharingInvitations { get; public set; }
    [RemoteAttribute]
public string BccExternalSharingInvitationsList { get; public set; }
    [RemoteAttribute]
public bool BlockAccessOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool BlockAppAccessWithAuthenticationContext { get; public set; }
    [RemoteAttribute]
public SPBlockDownloadFileTypeId[] BlockDownloadFileTypeIds { get; }
    [RemoteAttribute]
public bool BlockDownloadFileTypePolicy { get; }
    [RemoteAttribute]
public BlockDownloadLinksFileTypes BlockDownloadLinksFileType { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfAllFilesForGuests { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfAllFilesOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfViewableFilesForGuests { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfViewableFilesOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool BlockMacSync { get; public set; }
    [RemoteAttribute]
public bool BlockSendLabelMismatchEmail { get; public set; }
    [RemoteAttribute]
public string BlockUserInfoVisibility { get; public set; }
    [RemoteAttribute]
public TenantBrowseUserInfoPolicyValue BlockUserInfoVisibilityInOneDrive { get; public set; }
    [RemoteAttribute]
public TenantBrowseUserInfoPolicyValue BlockUserInfoVisibilityInSharePoint { get; public set; }
    [RemoteAttribute]
public long BonusStorageQuotaMB { get; }
    [RemoteAttribute]
public bool BusinessConnectivityServiceDisabled { get; public set; }
    [RemoteAttribute]
public bool CommentsOnFilesDisabled { get; public set; }
    [RemoteAttribute]
public bool CommentsOnListItemsDisabled { get; public set; }
    [RemoteAttribute]
public bool CommentsOnSitePagesDisabled { get; public set; }
    [RemoteAttribute]
public string CompatibilityRange { get; public set; }
    [RemoteAttribute]
public SPOConditionalAccessPolicyType ConditionalAccessPolicy { get; public set; }
    [RemoteAttribute]
public string ConditionalAccessPolicyErrorHelpLink { get; public set; }
    [RemoteAttribute]
public bool ContentSecurityPolicyConfigSynced { get; public set; }
    [RemoteAttribute]
public bool ContentSecurityPolicyEnforcement { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<string> ContentTypeSyncSiteTemplatesList { get; public set; }
    [RemoteAttribute]
public SharingState CoreBlockGuestsAsSiteAdmin { get; public set; }
    [RemoteAttribute]
public bool CoreDefaultLinkToExistingAccess { get; public set; }
    [RemoteAttribute]
public Role CoreDefaultShareLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope CoreDefaultShareLinkScope { get; public set; }
    [RemoteAttribute]
public Role CoreLoopDefaultSharingLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope CoreLoopDefaultSharingLinkScope { get; public set; }
    [RemoteAttribute]
public SharingCapabilities CoreLoopSharingCapability { get; public set; }
    [RemoteAttribute]
public bool CoreRequestFilesLinkEnabled { get; public set; }
    [RemoteAttribute]
public int CoreRequestFilesLinkExpirationInDays { get; public set; }
    [RemoteAttribute]
public SharingCapabilities CoreSharingCapability { get; public set; }
    [RemoteAttribute]
public string CustomizedExternalSharingServiceUrl { get; public set; }
    [RemoteAttribute]
public SiteInfoForSitePicker DefaultContentCenterSite { get; public set; }
    [RemoteAttribute]
public SharingPermissionType DefaultLinkPermission { get; public set; }
    [RemoteAttribute]
public string DefaultODBMode { get; public set; }
    [RemoteAttribute]
public SharingLinkType DefaultSharingLinkType { get; public set; }
    [RemoteAttribute]
public bool DelayDenyAddAndCustomizePagesEnforcement { get; public set; }
    [RemoteAttribute]
public IList`1<string> DenySelectSecurityGroupsInSPSitesList { get; public set; }
    [RemoteAttribute]
public IList`1<string> DenySelectSGsInODBListInTenant { get; public set; }
    [RemoteAttribute]
public bool DisableAddToOneDrive { get; public set; }
    [RemoteAttribute]
public bool DisableBackToClassic { get; public set; }
    [RemoteAttribute]
public bool DisableCustomAppAuthentication { get; public set; }
    [RemoteAttribute]
public Guid[] DisabledModernListTemplateIds { get; public set; }
    [RemoteAttribute]
public bool DisableDocumentLibraryDefaultLabeling { get; public set; }
    [RemoteAttribute]
public Guid[] DisabledWebPartIds { get; public set; }
    [RemoteAttribute]
public bool DisableOutlookPSTVersionTrimming { get; public set; }
    [RemoteAttribute]
public bool DisablePersonalListCreation { get; public set; }
    [RemoteAttribute]
public bool DisableReportProblemDialog { get; public set; }
    [RemoteAttribute]
public bool DisableSpacesActivation { get; public set; }
    [RemoteAttribute]
public bool DisableVivaConnectionsAnalytics { get; public set; }
    [RemoteAttribute]
public bool DisallowInfectedFileDownload { get; public set; }
    [RemoteAttribute]
public bool DisplayNamesOfFileViewers { get; public set; }
    [RemoteAttribute]
public bool DisplayNamesOfFileViewersInSpo { get; public set; }
    [RemoteAttribute]
public bool DisplayStartASiteOption { get; public set; }
    [RemoteAttribute]
public bool DocumentUnderstandingEnabled { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> DocumentUnderstandingSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> DocumentUnderstandingSiteList { get; public set; }
    [RemoteAttribute]
public string DocumentUnderstandingSiteListFileName { get; public set; }
    [RemoteAttribute]
public bool EmailAttestationEnabled { get; public set; }
    [RemoteAttribute]
public int EmailAttestationReAuthDays { get; public set; }
    [RemoteAttribute]
public bool EmailAttestationRequired { get; public set; }
    [RemoteAttribute]
public bool EnableAIPIntegration { get; public set; }
    [RemoteAttribute]
public bool EnableAutoExpirationVersionTrim { get; }
    [RemoteAttribute]
public bool EnableAutoNewsDigest { get; public set; }
    [RemoteAttribute]
public bool EnableAzureADB2BIntegration { get; public set; }
    [RemoteAttribute]
public bool EnabledFlightAllowAADB2BSkipCheckingOTP { get; }
    [RemoteAttribute]
public bool EnableDirectToCustomerBilling { get; public set; }
    [RemoteAttribute]
public bool EnableDiscoverableByOrganizationForVideos { get; public set; }
    [RemoteAttribute]
public bool EnableGuestSignInAcceleration { get; public set; }
    [RemoteAttribute]
public bool EnableMediaReactions { get; public set; }
    [RemoteAttribute]
public bool EnableMinimumVersionRequirement { get; public set; }
    [RemoteAttribute]
public bool EnableMipSiteLabel { get; public set; }
    [RemoteAttribute]
public bool EnablePromotedFileHandlers { get; public set; }
    [RemoteAttribute]
public bool EnableRestrictedAccessControl { get; public set; }
    [RemoteAttribute]
public bool EnableSensitivityLabelForPDF { get; public set; }
    [RemoteAttribute]
public bool EnableSiteArchive { get; public set; }
    [RemoteAttribute]
public bool EnableTenantRestrictionsInsights { get; public set; }
    [RemoteAttribute]
public bool EnableVersionExpirationSetting { get; public set; }
    [RemoteAttribute]
public bool ESignatureEnabled { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> ESignatureSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> ESignatureSiteList { get; public set; }
    [RemoteAttribute]
public string ESignatureSiteListFileName { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<string> ESignatureThirdPartyProviderInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<string> ESignatureThirdPartyProviderList { get; public set; }
    [RemoteAttribute]
public string ESignatureThirdPartyProviderListFileName { get; public set; }
    [RemoteAttribute]
public Guid[] ExcludedBlockDownloadGroupIds { get; }
    [RemoteAttribute]
public IList`1<string> ExcludedFileExtensionsForSyncClient { get; public set; }
    [RemoteAttribute]
public bool ExemptNativeUsersFromTenantLevelRestricedAccessControl { get; public set; }
    [RemoteAttribute]
public int ExpireVersionsAfterDays { get; }
    [RemoteAttribute]
public bool ExternalServicesEnabled { get; public set; }
    [RemoteAttribute]
public bool ExternalUserExpirationRequired { get; public set; }
    [RemoteAttribute]
public int ExternalUserExpireInDays { get; public set; }
    [RemoteAttribute]
public AnonymousLinkType FileAnonymousLinkType { get; public set; }
    [RemoteAttribute]
public bool FilePickerExternalImageSearchEnabled { get; public set; }
    [RemoteAttribute]
public string FileVersionPolicyXml { get; public set; }
    [RemoteAttribute]
public AnonymousLinkType FolderAnonymousLinkType { get; public set; }
    [RemoteAttribute]
public string GuestSharingGroupAllowListInTenant { get; public set; }
    [RemoteAttribute]
public IList`1<string> GuestSharingGroupAllowListInTenantByGroupId { get; public set; }
    [RemoteAttribute]
public IList`1<string> GuestSharingGroupAllowListInTenantByPrincipalIdentity { get; public set; }
    [RemoteAttribute]
public bool HasAdminCompletedCUConfiguration { get; public set; }
    [RemoteAttribute]
public bool HasIntelligentContentServicesCapability { get; public set; }
    [RemoteAttribute]
public bool HasTopicExperiencesCapability { get; public set; }
    [RemoteAttribute]
public bool HideDefaultThemes { get; public set; }
    [RemoteAttribute]
public bool HideSyncButtonOnDocLib { get; public set; }
    [RemoteAttribute]
public bool HideSyncButtonOnODB { get; public set; }
    [RemoteAttribute]
public bool IBImplicitGroupBased { get; public set; }
    [RemoteAttribute]
public ImageTaggingChoice ImageTaggingOption { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> ImageTaggingSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> ImageTaggingSiteList { get; public set; }
    [RemoteAttribute]
public string ImageTaggingSiteListFileName { get; public set; }
    [RemoteAttribute]
public bool IncludeAtAGlanceInShareEmails { get; public set; }
    [RemoteAttribute]
public bool InformationBarriersSuspension { get; public set; }
    [RemoteAttribute]
public string IPAddressAllowList { get; public set; }
    [RemoteAttribute]
public bool IPAddressEnforcement { get; public set; }
    [RemoteAttribute]
public int IPAddressWACTokenLifetime { get; public set; }
    [RemoteAttribute]
public bool IsAppBarTemporarilyDisabled { get; public set; }
    [RemoteAttribute]
public bool IsCollabMeetingNotesFluidEnabled { get; public set; }
    [RemoteAttribute]
public bool IsDataAccessInCardDesignerEnabled { get; public set; }
    [RemoteAttribute]
public bool IsEnableAppAuthPopUpEnabled { get; public set; }
    [RemoteAttribute]
public bool IsFluidEnabled { get; public set; }
    [RemoteAttribute]
public bool IsHubSitesMultiGeoFlightEnabled { get; }
    [RemoteAttribute]
public bool IsLoopEnabled { get; public set; }
    [RemoteAttribute]
public bool IsMnAFlightEnabled { get; }
    [RemoteAttribute]
public bool IsMultiGeo { get; }
    [RemoteAttribute]
public bool IsMultipleHomeSitesFlightEnabled { get; }
    [RemoteAttribute]
public bool IsMultipleVivaConnectionsFlightEnabled { get; }
    [RemoteAttribute]
public bool IsUnmanagedSyncClientForTenantRestricted { get; public set; }
    [RemoteAttribute]
public bool IsUnmanagedSyncClientRestrictionFlightEnabled { get; }
    [RemoteAttribute]
public bool IsVivaHomeFlightEnabled { get; }
    [RemoteAttribute]
public bool IsVivaHomeGAFlightEnabled { get; }
    [RemoteAttribute]
public bool IsWBFluidEnabled { get; public set; }
    [RemoteAttribute]
public string LabelMismatchEmailHelpLink { get; public set; }
    [RemoteAttribute]
public bool LegacyAuthProtocolsEnabled { get; public set; }
    [RemoteAttribute]
public bool LegacyBrowserAuthProtocolsEnabled { get; public set; }
    [RemoteAttribute]
public SPOLimitedAccessFileType LimitedAccessFileType { get; public set; }
    [RemoteAttribute]
public bool MachineLearningCaptureEnabled { get; public set; }
    [RemoteAttribute]
public int MajorVersionLimit { get; public set; }
    [RemoteAttribute]
public bool MarkAllFilesAsSensitiveByDefault { get; }
    [RemoteAttribute]
public SensitiveByDefaultState MarkNewFilesSensitiveByDefault { get; public set; }
    [RemoteAttribute]
public bool MassDeleteNotificationDisabled { get; public set; }
    [RemoteAttribute]
public MediaTranscriptionPolicyType MediaTranscription { get; public set; }
    [RemoteAttribute]
public MediaTranscriptionAutomaticFeaturesPolicyType MediaTranscriptionAutomaticFeatures { get; public set; }
    [RemoteAttribute]
public bool MobileFriendlyUrlEnabledInTenant { get; public set; }
    [RemoteAttribute]
public string NoAccessRedirectUrl { get; public set; }
    [RemoteAttribute]
public bool NotificationsInOneDriveForBusinessEnabled { get; public set; }
    [RemoteAttribute]
public bool NotificationsInSharePointEnabled { get; public set; }
    [RemoteAttribute]
public bool NotifyOwnersWhenInvitationsAccepted { get; public set; }
    [RemoteAttribute]
public bool NotifyOwnersWhenItemsReshared { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<Guid> OCRAdminODBGroupList { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<Guid> OCRAdminODBUserList { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> OCRAdminSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> OCRAdminSiteList { get; public set; }
    [RemoteAttribute]
public string OCRAdminSiteListFileName { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<Guid> OCRComplianceODBGroupList { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<Guid> OCRComplianceODBUserList { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> OCRComplianceSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> OCRComplianceSiteList { get; public set; }
    [RemoteAttribute]
public string OCRComplianceSiteListFileName { get; public set; }
    [RemoteAttribute]
public ObjectCharacterRecognitionMode OCRModeForAdminODBs { get; public set; }
    [RemoteAttribute]
public ObjectCharacterRecognitionMode OCRModeForAdminSites { get; public set; }
    [RemoteAttribute]
public ObjectCharacterRecognitionMode OCRModeForComplianceODBs { get; public set; }
    [RemoteAttribute]
public ObjectCharacterRecognitionMode OCRModeForComplianceSites { get; public set; }
    [RemoteAttribute]
public SharingState ODBAccessRequests { get; public set; }
    [RemoteAttribute]
public SharingState ODBMembersCanShare { get; public set; }
    [RemoteAttribute]
public ushort ODBSensitivityRefreshWindowInHours { get; }
    [RemoteAttribute]
public SharingCapabilities ODBSharingCapability { get; public set; }
    [RemoteAttribute]
public bool ODBTranslationEnabled { get; public set; }
    [RemoteAttribute]
public bool OfficeClientADALDisabled { get; public set; }
    [RemoteAttribute]
public SharingState OneDriveBlockGuestsAsSiteAdmin { get; public set; }
    [RemoteAttribute]
public bool OneDriveDefaultLinkToExistingAccess { get; public set; }
    [RemoteAttribute]
public Role OneDriveDefaultShareLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope OneDriveDefaultShareLinkScope { get; public set; }
    [RemoteAttribute]
public bool OneDriveForGuestsEnabled { get; public set; }
    [RemoteAttribute]
public Role OneDriveLoopDefaultSharingLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope OneDriveLoopDefaultSharingLinkScope { get; public set; }
    [RemoteAttribute]
public SharingCapabilities OneDriveLoopSharingCapability { get; public set; }
    [RemoteAttribute]
public bool OneDriveRequestFilesLinkEnabled { get; public set; }
    [RemoteAttribute]
public int OneDriveRequestFilesLinkExpirationInDays { get; public set; }
    [RemoteAttribute]
public long OneDriveStorageQuota { get; public set; }
    [RemoteAttribute]
public bool OptOutOfGrooveBlock { get; public set; }
    [RemoteAttribute]
public bool OptOutOfGrooveSoftBlock { get; public set; }
    [RemoteAttribute]
public string OrgNewsSiteUrl { get; public set; }
    [RemoteAttribute]
public int OrphanedPersonalSitesRetentionPeriod { get; public set; }
    [RemoteAttribute]
public bool OwnerAnonymousNotification { get; public set; }
    [RemoteAttribute]
public bool PermissiveBrowserFileHandlingOverride { get; public set; }
    [RemoteAttribute]
public bool PrebuiltEnabled { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> PrebuiltSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> PrebuiltSiteList { get; public set; }
    [RemoteAttribute]
public string PrebuiltSiteListFileName { get; public set; }
    [RemoteAttribute]
public bool PreventExternalUsersFromResharing { get; public set; }
    [RemoteAttribute]
public bool ProvisionSharedWithEveryoneFolder { get; public set; }
    [RemoteAttribute]
public string PublicCdnAllowedFileTypes { get; public set; }
    [RemoteAttribute]
public bool PublicCdnEnabled { get; public set; }
    [RemoteAttribute]
public IList`1<string> PublicCdnOrigins { get; }
    [RemoteAttribute]
public int RecycleBinRetentionPeriod { get; public set; }
    [RemoteAttribute]
public bool ReduceTempTokenLifetimeEnabled { get; public set; }
    [RemoteAttribute]
public int ReduceTempTokenLifetimeValue { get; public set; }
    [RemoteAttribute]
public bool RequireAcceptingAccountMatchInvitedAccount { get; public set; }
    [RemoteAttribute]
public int RequireAnonymousLinksExpireInDays { get; public set; }
    [RemoteAttribute]
public double ResourceQuota { get; }
    [RemoteAttribute]
public double ResourceQuotaAllocated { get; }
    [RemoteAttribute]
public string RestrictedAccessControlForOneDriveErrorHelpLink { get; public set; }
    [RemoteAttribute]
public string RestrictedAccessControlforSitesErrorHelpLink { get; public set; }
    [RemoteAttribute]
public bool RestrictedOneDriveLicense { get; }
    [RemoteAttribute]
public bool RestrictedSharePointLicense { get; }
    [RemoteAttribute]
public string RootSiteUrl { get; }
    [RemoteAttribute]
public bool SearchResolveExactEmailOrUPN { get; public set; }
    [RemoteAttribute]
public bool SelfServiceSiteCreationDisabled { get; public set; }
    [RemoteAttribute]
public bool SharePointAddInsDisabled { get; public set; }
    [RemoteAttribute]
public string SharingAllowedDomainList { get; public set; }
    [RemoteAttribute]
public string SharingBlockedDomainList { get; public set; }
    [RemoteAttribute]
public SharingCapabilities SharingCapability { get; public set; }
    [RemoteAttribute]
public SharingDomainRestrictionModes SharingDomainRestrictionMode { get; public set; }
    [RemoteAttribute]
public bool ShowAllUsersClaim { get; public set; }
    [RemoteAttribute]
public bool ShowEveryoneClaim { get; public set; }
    [RemoteAttribute]
public bool ShowEveryoneExceptExternalUsersClaim { get; public set; }
    [RemoteAttribute]
public bool ShowNGSCDialogForSyncOnODB { get; public set; }
    [RemoteAttribute]
public bool ShowOpenInDesktopOptionForSyncedFiles { get; public set; }
    [RemoteAttribute]
public bool ShowPeoplePickerGroupSuggestionsForIB { get; public set; }
    [RemoteAttribute]
public bool ShowPeoplePickerSuggestionsForGuestUsers { get; public set; }
    [RemoteAttribute]
public string SignInAccelerationDomain { get; public set; }
    [RemoteAttribute]
public bool SiteOwnerManageLegacyServicePrincipalEnabled { get; public set; }
    [RemoteAttribute]
public bool SocialBarOnSitePagesDisabled { get; public set; }
    [RemoteAttribute]
public SpecialCharactersState SpecialCharactersStateInFileFolderNames { get; public set; }
    [RemoteAttribute]
public SPJitDlpPolicyData SPJitDlpPolicyData { get; }
    [RemoteAttribute]
public string StartASiteFormUrl { get; public set; }
    [RemoteAttribute]
public bool StopNew2010Workflows { get; public set; }
    [RemoteAttribute]
public bool StopNew2013Workflows { get; public set; }
    [RemoteAttribute]
public long StorageQuota { get; }
    [RemoteAttribute]
public long StorageQuotaAllocated { get; }
    [RemoteAttribute]
public int StreamLaunchConfig { get; public set; }
    [RemoteAttribute]
public DateTime StreamLaunchConfigLastUpdated { get; }
    [RemoteAttribute]
public int StreamLaunchConfigUpdateCount { get; }
    [RemoteAttribute]
public bool SyncPrivacyProfileProperties { get; public set; }
    [RemoteAttribute]
public SyntexBillingContext SyntexBillingSubscriptionSettings { get; public set; }
    [RemoteAttribute]
public IDictionary`2<string, bool> SyntexInternalFeatureFlags { get; }
    [RemoteAttribute]
public SyntexPremiumFeatureSettings SyntexMediaAnalyticsSettings { get; public set; }
    [RemoteAttribute]
public IDictionary`2<string, string> SyntexPaygFeatureActivations { get; }
    [RemoteAttribute]
public SyntexPremiumFeatureSettings SyntexPlaybackTranscriptTranslationSettings { get; public set; }
    [RemoteAttribute]
public SyntexPowerAppsEnvironmentsContext SyntexPowerAppsEnvironmentsContext { get; }
    [RemoteAttribute]
public bool TaxonomyTaggingEnabled { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> TaxonomyTaggingSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> TaxonomyTaggingSiteList { get; public set; }
    [RemoteAttribute]
public string TaxonomyTaggingSiteListFileName { get; public set; }
    [RemoteAttribute]
public SPOTlsTokenBindingPolicyValue TlsTokenBindingPolicyValue { get; public set; }
    [RemoteAttribute]
public bool TranslationEnabled { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> TranslationSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> TranslationSiteList { get; public set; }
    [RemoteAttribute]
public string TranslationSiteListFileName { get; public set; }
    [RemoteAttribute]
public bool UniversalAnnotationDisabled { get; public set; }
    [RemoteAttribute]
public bool UseFindPeopleInPeoplePicker { get; public set; }
    [RemoteAttribute]
public bool UsePersistentCookiesForExplorerView { get; public set; }
    [RemoteAttribute]
public bool ViewersCanCommentOnMediaDisabled { get; public set; }
    [RemoteAttribute]
public bool ViewInFileExplorerEnabled { get; public set; }
    [RemoteAttribute]
public string WhoCanShareAllowListInTenant { get; public set; }
    [RemoteAttribute]
public IList`1<string> WhoCanShareAllowListInTenantByGroupId { get; public set; }
    [RemoteAttribute]
public IList`1<string> WhoCanShareAllowListInTenantByPrincipalIdentity { get; public set; }
    [RemoteAttribute]
public bool Workflow2010Disabled { get; public set; }
    [RemoteAttribute]
public Workflows2013State Workflows2013State { get; }
    public Tenant(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public Tenant(ClientRuntimeContext context, ObjectPath objectPath);
    public Role get_AddressbarLinkPermission();
    public void set_AddressbarLinkPermission(Role value);
    public string get_AIBuilderDefaultPowerAppsEnvironment();
    public void set_AIBuilderDefaultPowerAppsEnvironment(string value);
    public bool get_AIBuilderEnabled();
    public void set_AIBuilderEnabled(bool value);
    public int get_AIBuilderEnabledInContentCenter();
    public void set_AIBuilderEnabledInContentCenter(int value);
    public IEnumerable`1<SiteInfoForSitePicker> get_AIBuilderSiteInfoList();
    public IEnumerable`1<Guid> get_AIBuilderSiteList();
    public void set_AIBuilderSiteList(IEnumerable`1<Guid> value);
    public string get_AIBuilderSiteListFileName();
    public void set_AIBuilderSiteListFileName(string value);
    public Guid get_AllOrganizationSecurityGroupId();
    public void set_AllOrganizationSecurityGroupId(Guid value);
    public SharingState get_AllowAnonymousMeetingParticipantsToAccessWhiteboards();
    public void set_AllowAnonymousMeetingParticipantsToAccessWhiteboards(SharingState value);
    public bool get_AllowCommentsTextOnEmailEnabled();
    public void set_AllowCommentsTextOnEmailEnabled(bool value);
    public bool get_AllowDownloadingNonWebViewableFiles();
    public void set_AllowDownloadingNonWebViewableFiles(bool value);
    public IList`1<Guid> get_AllowedDomainListForSyncClient();
    public void set_AllowedDomainListForSyncClient(IList`1<Guid> value);
    public bool get_AllowEditing();
    public void set_AllowEditing(bool value);
    public bool get_AllowEveryoneExceptExternalUsersClaimInPrivateSite();
    public void set_AllowEveryoneExceptExternalUsersClaimInPrivateSite(bool value);
    public bool get_AllowGuestUserShareToUsersNotInSiteCollection();
    public void set_AllowGuestUserShareToUsersNotInSiteCollection(bool value);
    public bool get_AllowLimitedAccessOnUnmanagedDevices();
    public void set_AllowLimitedAccessOnUnmanagedDevices(bool value);
    public bool get_AllowOverrideForBlockUserInfoVisibility();
    public void set_AllowOverrideForBlockUserInfoVisibility(bool value);
    public IList`1<string> get_AllowSelectSecurityGroupsInSPSitesList();
    public void set_AllowSelectSecurityGroupsInSPSitesList(IList`1<string> value);
    public IList`1<string> get_AllowSelectSGsInODBListInTenant();
    public void set_AllowSelectSGsInODBListInTenant(IList`1<string> value);
    public bool get_AllowSensitivityLabelOnRecords();
    public void set_AllowSensitivityLabelOnRecords(bool value);
    public bool get_AllowSharingOutsideRestrictedAccessControlGroups();
    public void set_AllowSharingOutsideRestrictedAccessControlGroups(bool value);
    public string get_AmplifyAdminSettings();
    public void set_AmplifyAdminSettings(string value);
    public bool get_AnyoneLinkTrackUsers();
    public void set_AnyoneLinkTrackUsers(bool value);
    public bool get_AppBypassInformationBarriers();
    public void set_AppBypassInformationBarriers(bool value);
    public bool get_ApplyAppEnforcedRestrictionsToAdHocRecipients();
    public void set_ApplyAppEnforcedRestrictionsToAdHocRecipients(bool value);
    public bool get_AppOnlyBypassPeoplePickerPolicies();
    public void set_AppOnlyBypassPeoplePickerPolicies(bool value);
    public string get_ArchiveRedirectUrl();
    public void set_ArchiveRedirectUrl(string value);
    public SPResilienceModeType get_AuthContextResilienceMode();
    public void set_AuthContextResilienceMode(SPResilienceModeType value);
    public bool get_AutofillColumnsEnabled();
    public void set_AutofillColumnsEnabled(bool value);
    public IEnumerable`1<SiteInfoForSitePicker> get_AutofillColumnsSiteInfoList();
    public IEnumerable`1<Guid> get_AutofillColumnsSiteList();
    public void set_AutofillColumnsSiteList(IEnumerable`1<Guid> value);
    public string get_AutofillColumnsSiteListFileName();
    public void set_AutofillColumnsSiteListFileName(string value);
    public bool get_BccExternalSharingInvitations();
    public void set_BccExternalSharingInvitations(bool value);
    public string get_BccExternalSharingInvitationsList();
    public void set_BccExternalSharingInvitationsList(string value);
    public bool get_BlockAccessOnUnmanagedDevices();
    public void set_BlockAccessOnUnmanagedDevices(bool value);
    public bool get_BlockAppAccessWithAuthenticationContext();
    public void set_BlockAppAccessWithAuthenticationContext(bool value);
    public SPBlockDownloadFileTypeId[] get_BlockDownloadFileTypeIds();
    public bool get_BlockDownloadFileTypePolicy();
    public BlockDownloadLinksFileTypes get_BlockDownloadLinksFileType();
    public void set_BlockDownloadLinksFileType(BlockDownloadLinksFileTypes value);
    public bool get_BlockDownloadOfAllFilesForGuests();
    public void set_BlockDownloadOfAllFilesForGuests(bool value);
    public bool get_BlockDownloadOfAllFilesOnUnmanagedDevices();
    public void set_BlockDownloadOfAllFilesOnUnmanagedDevices(bool value);
    public bool get_BlockDownloadOfViewableFilesForGuests();
    public void set_BlockDownloadOfViewableFilesForGuests(bool value);
    public bool get_BlockDownloadOfViewableFilesOnUnmanagedDevices();
    public void set_BlockDownloadOfViewableFilesOnUnmanagedDevices(bool value);
    public bool get_BlockMacSync();
    public void set_BlockMacSync(bool value);
    public bool get_BlockSendLabelMismatchEmail();
    public void set_BlockSendLabelMismatchEmail(bool value);
    public string get_BlockUserInfoVisibility();
    public void set_BlockUserInfoVisibility(string value);
    public TenantBrowseUserInfoPolicyValue get_BlockUserInfoVisibilityInOneDrive();
    public void set_BlockUserInfoVisibilityInOneDrive(TenantBrowseUserInfoPolicyValue value);
    public TenantBrowseUserInfoPolicyValue get_BlockUserInfoVisibilityInSharePoint();
    public void set_BlockUserInfoVisibilityInSharePoint(TenantBrowseUserInfoPolicyValue value);
    public long get_BonusStorageQuotaMB();
    public bool get_BusinessConnectivityServiceDisabled();
    public void set_BusinessConnectivityServiceDisabled(bool value);
    public bool get_CommentsOnFilesDisabled();
    public void set_CommentsOnFilesDisabled(bool value);
    public bool get_CommentsOnListItemsDisabled();
    public void set_CommentsOnListItemsDisabled(bool value);
    public bool get_CommentsOnSitePagesDisabled();
    public void set_CommentsOnSitePagesDisabled(bool value);
    public string get_CompatibilityRange();
    public void set_CompatibilityRange(string value);
    public SPOConditionalAccessPolicyType get_ConditionalAccessPolicy();
    public void set_ConditionalAccessPolicy(SPOConditionalAccessPolicyType value);
    public string get_ConditionalAccessPolicyErrorHelpLink();
    public void set_ConditionalAccessPolicyErrorHelpLink(string value);
    public bool get_ContentSecurityPolicyConfigSynced();
    public void set_ContentSecurityPolicyConfigSynced(bool value);
    public bool get_ContentSecurityPolicyEnforcement();
    public void set_ContentSecurityPolicyEnforcement(bool value);
    public IEnumerable`1<string> get_ContentTypeSyncSiteTemplatesList();
    public void set_ContentTypeSyncSiteTemplatesList(IEnumerable`1<string> value);
    public SharingState get_CoreBlockGuestsAsSiteAdmin();
    public void set_CoreBlockGuestsAsSiteAdmin(SharingState value);
    public bool get_CoreDefaultLinkToExistingAccess();
    public void set_CoreDefaultLinkToExistingAccess(bool value);
    public Role get_CoreDefaultShareLinkRole();
    public void set_CoreDefaultShareLinkRole(Role value);
    public SharingScope get_CoreDefaultShareLinkScope();
    public void set_CoreDefaultShareLinkScope(SharingScope value);
    public Role get_CoreLoopDefaultSharingLinkRole();
    public void set_CoreLoopDefaultSharingLinkRole(Role value);
    public SharingScope get_CoreLoopDefaultSharingLinkScope();
    public void set_CoreLoopDefaultSharingLinkScope(SharingScope value);
    public SharingCapabilities get_CoreLoopSharingCapability();
    public void set_CoreLoopSharingCapability(SharingCapabilities value);
    public bool get_CoreRequestFilesLinkEnabled();
    public void set_CoreRequestFilesLinkEnabled(bool value);
    public int get_CoreRequestFilesLinkExpirationInDays();
    public void set_CoreRequestFilesLinkExpirationInDays(int value);
    public SharingCapabilities get_CoreSharingCapability();
    public void set_CoreSharingCapability(SharingCapabilities value);
    public string get_CustomizedExternalSharingServiceUrl();
    public void set_CustomizedExternalSharingServiceUrl(string value);
    public SiteInfoForSitePicker get_DefaultContentCenterSite();
    public void set_DefaultContentCenterSite(SiteInfoForSitePicker value);
    public SharingPermissionType get_DefaultLinkPermission();
    public void set_DefaultLinkPermission(SharingPermissionType value);
    public string get_DefaultODBMode();
    public void set_DefaultODBMode(string value);
    public SharingLinkType get_DefaultSharingLinkType();
    public void set_DefaultSharingLinkType(SharingLinkType value);
    public bool get_DelayDenyAddAndCustomizePagesEnforcement();
    public void set_DelayDenyAddAndCustomizePagesEnforcement(bool value);
    public IList`1<string> get_DenySelectSecurityGroupsInSPSitesList();
    public void set_DenySelectSecurityGroupsInSPSitesList(IList`1<string> value);
    public IList`1<string> get_DenySelectSGsInODBListInTenant();
    public void set_DenySelectSGsInODBListInTenant(IList`1<string> value);
    public bool get_DisableAddToOneDrive();
    public void set_DisableAddToOneDrive(bool value);
    public bool get_DisableBackToClassic();
    public void set_DisableBackToClassic(bool value);
    public bool get_DisableCustomAppAuthentication();
    public void set_DisableCustomAppAuthentication(bool value);
    public Guid[] get_DisabledModernListTemplateIds();
    public void set_DisabledModernListTemplateIds(Guid[] value);
    public bool get_DisableDocumentLibraryDefaultLabeling();
    public void set_DisableDocumentLibraryDefaultLabeling(bool value);
    public Guid[] get_DisabledWebPartIds();
    public void set_DisabledWebPartIds(Guid[] value);
    public bool get_DisableOutlookPSTVersionTrimming();
    public void set_DisableOutlookPSTVersionTrimming(bool value);
    public bool get_DisablePersonalListCreation();
    public void set_DisablePersonalListCreation(bool value);
    public bool get_DisableReportProblemDialog();
    public void set_DisableReportProblemDialog(bool value);
    public bool get_DisableSpacesActivation();
    public void set_DisableSpacesActivation(bool value);
    public bool get_DisableVivaConnectionsAnalytics();
    public void set_DisableVivaConnectionsAnalytics(bool value);
    public bool get_DisallowInfectedFileDownload();
    public void set_DisallowInfectedFileDownload(bool value);
    public bool get_DisplayNamesOfFileViewers();
    public void set_DisplayNamesOfFileViewers(bool value);
    public bool get_DisplayNamesOfFileViewersInSpo();
    public void set_DisplayNamesOfFileViewersInSpo(bool value);
    public bool get_DisplayStartASiteOption();
    public void set_DisplayStartASiteOption(bool value);
    public bool get_DocumentUnderstandingEnabled();
    public void set_DocumentUnderstandingEnabled(bool value);
    public IEnumerable`1<SiteInfoForSitePicker> get_DocumentUnderstandingSiteInfoList();
    public IEnumerable`1<Guid> get_DocumentUnderstandingSiteList();
    public void set_DocumentUnderstandingSiteList(IEnumerable`1<Guid> value);
    public string get_DocumentUnderstandingSiteListFileName();
    public void set_DocumentUnderstandingSiteListFileName(string value);
    public bool get_EmailAttestationEnabled();
    public void set_EmailAttestationEnabled(bool value);
    public int get_EmailAttestationReAuthDays();
    public void set_EmailAttestationReAuthDays(int value);
    public bool get_EmailAttestationRequired();
    public void set_EmailAttestationRequired(bool value);
    public bool get_EnableAIPIntegration();
    public void set_EnableAIPIntegration(bool value);
    public bool get_EnableAutoExpirationVersionTrim();
    public bool get_EnableAutoNewsDigest();
    public void set_EnableAutoNewsDigest(bool value);
    public bool get_EnableAzureADB2BIntegration();
    public void set_EnableAzureADB2BIntegration(bool value);
    public bool get_EnabledFlightAllowAADB2BSkipCheckingOTP();
    public bool get_EnableDirectToCustomerBilling();
    public void set_EnableDirectToCustomerBilling(bool value);
    public bool get_EnableDiscoverableByOrganizationForVideos();
    public void set_EnableDiscoverableByOrganizationForVideos(bool value);
    public bool get_EnableGuestSignInAcceleration();
    public void set_EnableGuestSignInAcceleration(bool value);
    public bool get_EnableMediaReactions();
    public void set_EnableMediaReactions(bool value);
    public bool get_EnableMinimumVersionRequirement();
    public void set_EnableMinimumVersionRequirement(bool value);
    public bool get_EnableMipSiteLabel();
    public void set_EnableMipSiteLabel(bool value);
    public bool get_EnablePromotedFileHandlers();
    public void set_EnablePromotedFileHandlers(bool value);
    public bool get_EnableRestrictedAccessControl();
    public void set_EnableRestrictedAccessControl(bool value);
    public bool get_EnableSensitivityLabelForPDF();
    public void set_EnableSensitivityLabelForPDF(bool value);
    public bool get_EnableSiteArchive();
    public void set_EnableSiteArchive(bool value);
    public bool get_EnableTenantRestrictionsInsights();
    public void set_EnableTenantRestrictionsInsights(bool value);
    public bool get_EnableVersionExpirationSetting();
    public void set_EnableVersionExpirationSetting(bool value);
    public bool get_ESignatureEnabled();
    public void set_ESignatureEnabled(bool value);
    public IEnumerable`1<SiteInfoForSitePicker> get_ESignatureSiteInfoList();
    public IEnumerable`1<Guid> get_ESignatureSiteList();
    public void set_ESignatureSiteList(IEnumerable`1<Guid> value);
    public string get_ESignatureSiteListFileName();
    public void set_ESignatureSiteListFileName(string value);
    public IEnumerable`1<string> get_ESignatureThirdPartyProviderInfoList();
    public IEnumerable`1<string> get_ESignatureThirdPartyProviderList();
    public void set_ESignatureThirdPartyProviderList(IEnumerable`1<string> value);
    public string get_ESignatureThirdPartyProviderListFileName();
    public void set_ESignatureThirdPartyProviderListFileName(string value);
    public Guid[] get_ExcludedBlockDownloadGroupIds();
    public IList`1<string> get_ExcludedFileExtensionsForSyncClient();
    public void set_ExcludedFileExtensionsForSyncClient(IList`1<string> value);
    public bool get_ExemptNativeUsersFromTenantLevelRestricedAccessControl();
    public void set_ExemptNativeUsersFromTenantLevelRestricedAccessControl(bool value);
    public int get_ExpireVersionsAfterDays();
    public bool get_ExternalServicesEnabled();
    public void set_ExternalServicesEnabled(bool value);
    public bool get_ExternalUserExpirationRequired();
    public void set_ExternalUserExpirationRequired(bool value);
    public int get_ExternalUserExpireInDays();
    public void set_ExternalUserExpireInDays(int value);
    public AnonymousLinkType get_FileAnonymousLinkType();
    public void set_FileAnonymousLinkType(AnonymousLinkType value);
    public bool get_FilePickerExternalImageSearchEnabled();
    public void set_FilePickerExternalImageSearchEnabled(bool value);
    public string get_FileVersionPolicyXml();
    public void set_FileVersionPolicyXml(string value);
    public AnonymousLinkType get_FolderAnonymousLinkType();
    public void set_FolderAnonymousLinkType(AnonymousLinkType value);
    public string get_GuestSharingGroupAllowListInTenant();
    public void set_GuestSharingGroupAllowListInTenant(string value);
    public IList`1<string> get_GuestSharingGroupAllowListInTenantByGroupId();
    public void set_GuestSharingGroupAllowListInTenantByGroupId(IList`1<string> value);
    public IList`1<string> get_GuestSharingGroupAllowListInTenantByPrincipalIdentity();
    public void set_GuestSharingGroupAllowListInTenantByPrincipalIdentity(IList`1<string> value);
    public bool get_HasAdminCompletedCUConfiguration();
    public void set_HasAdminCompletedCUConfiguration(bool value);
    public bool get_HasIntelligentContentServicesCapability();
    public void set_HasIntelligentContentServicesCapability(bool value);
    public bool get_HasTopicExperiencesCapability();
    public void set_HasTopicExperiencesCapability(bool value);
    public bool get_HideDefaultThemes();
    public void set_HideDefaultThemes(bool value);
    public bool get_HideSyncButtonOnDocLib();
    public void set_HideSyncButtonOnDocLib(bool value);
    public bool get_HideSyncButtonOnODB();
    public void set_HideSyncButtonOnODB(bool value);
    public bool get_IBImplicitGroupBased();
    public void set_IBImplicitGroupBased(bool value);
    public ImageTaggingChoice get_ImageTaggingOption();
    public void set_ImageTaggingOption(ImageTaggingChoice value);
    public IEnumerable`1<SiteInfoForSitePicker> get_ImageTaggingSiteInfoList();
    public IEnumerable`1<Guid> get_ImageTaggingSiteList();
    public void set_ImageTaggingSiteList(IEnumerable`1<Guid> value);
    public string get_ImageTaggingSiteListFileName();
    public void set_ImageTaggingSiteListFileName(string value);
    public bool get_IncludeAtAGlanceInShareEmails();
    public void set_IncludeAtAGlanceInShareEmails(bool value);
    public bool get_InformationBarriersSuspension();
    public void set_InformationBarriersSuspension(bool value);
    public string get_IPAddressAllowList();
    public void set_IPAddressAllowList(string value);
    public bool get_IPAddressEnforcement();
    public void set_IPAddressEnforcement(bool value);
    public int get_IPAddressWACTokenLifetime();
    public void set_IPAddressWACTokenLifetime(int value);
    public bool get_IsAppBarTemporarilyDisabled();
    public void set_IsAppBarTemporarilyDisabled(bool value);
    public bool get_IsCollabMeetingNotesFluidEnabled();
    public void set_IsCollabMeetingNotesFluidEnabled(bool value);
    public bool get_IsDataAccessInCardDesignerEnabled();
    public void set_IsDataAccessInCardDesignerEnabled(bool value);
    public bool get_IsEnableAppAuthPopUpEnabled();
    public void set_IsEnableAppAuthPopUpEnabled(bool value);
    public bool get_IsFluidEnabled();
    public void set_IsFluidEnabled(bool value);
    public bool get_IsHubSitesMultiGeoFlightEnabled();
    public bool get_IsLoopEnabled();
    public void set_IsLoopEnabled(bool value);
    public bool get_IsMnAFlightEnabled();
    public bool get_IsMultiGeo();
    public bool get_IsMultipleHomeSitesFlightEnabled();
    public bool get_IsMultipleVivaConnectionsFlightEnabled();
    public bool get_IsUnmanagedSyncClientForTenantRestricted();
    public void set_IsUnmanagedSyncClientForTenantRestricted(bool value);
    public bool get_IsUnmanagedSyncClientRestrictionFlightEnabled();
    public bool get_IsVivaHomeFlightEnabled();
    public bool get_IsVivaHomeGAFlightEnabled();
    public bool get_IsWBFluidEnabled();
    public void set_IsWBFluidEnabled(bool value);
    public string get_LabelMismatchEmailHelpLink();
    public void set_LabelMismatchEmailHelpLink(string value);
    public bool get_LegacyAuthProtocolsEnabled();
    public void set_LegacyAuthProtocolsEnabled(bool value);
    public bool get_LegacyBrowserAuthProtocolsEnabled();
    public void set_LegacyBrowserAuthProtocolsEnabled(bool value);
    public SPOLimitedAccessFileType get_LimitedAccessFileType();
    public void set_LimitedAccessFileType(SPOLimitedAccessFileType value);
    public bool get_MachineLearningCaptureEnabled();
    public void set_MachineLearningCaptureEnabled(bool value);
    public int get_MajorVersionLimit();
    public void set_MajorVersionLimit(int value);
    public bool get_MarkAllFilesAsSensitiveByDefault();
    public SensitiveByDefaultState get_MarkNewFilesSensitiveByDefault();
    public void set_MarkNewFilesSensitiveByDefault(SensitiveByDefaultState value);
    public bool get_MassDeleteNotificationDisabled();
    public void set_MassDeleteNotificationDisabled(bool value);
    public MediaTranscriptionPolicyType get_MediaTranscription();
    public void set_MediaTranscription(MediaTranscriptionPolicyType value);
    public MediaTranscriptionAutomaticFeaturesPolicyType get_MediaTranscriptionAutomaticFeatures();
    public void set_MediaTranscriptionAutomaticFeatures(MediaTranscriptionAutomaticFeaturesPolicyType value);
    public bool get_MobileFriendlyUrlEnabledInTenant();
    public void set_MobileFriendlyUrlEnabledInTenant(bool value);
    public string get_NoAccessRedirectUrl();
    public void set_NoAccessRedirectUrl(string value);
    public bool get_NotificationsInOneDriveForBusinessEnabled();
    public void set_NotificationsInOneDriveForBusinessEnabled(bool value);
    public bool get_NotificationsInSharePointEnabled();
    public void set_NotificationsInSharePointEnabled(bool value);
    public bool get_NotifyOwnersWhenInvitationsAccepted();
    public void set_NotifyOwnersWhenInvitationsAccepted(bool value);
    public bool get_NotifyOwnersWhenItemsReshared();
    public void set_NotifyOwnersWhenItemsReshared(bool value);
    public IEnumerable`1<Guid> get_OCRAdminODBGroupList();
    public void set_OCRAdminODBGroupList(IEnumerable`1<Guid> value);
    public IEnumerable`1<Guid> get_OCRAdminODBUserList();
    public void set_OCRAdminODBUserList(IEnumerable`1<Guid> value);
    public IEnumerable`1<SiteInfoForSitePicker> get_OCRAdminSiteInfoList();
    public IEnumerable`1<Guid> get_OCRAdminSiteList();
    public void set_OCRAdminSiteList(IEnumerable`1<Guid> value);
    public string get_OCRAdminSiteListFileName();
    public void set_OCRAdminSiteListFileName(string value);
    public IEnumerable`1<Guid> get_OCRComplianceODBGroupList();
    public void set_OCRComplianceODBGroupList(IEnumerable`1<Guid> value);
    public IEnumerable`1<Guid> get_OCRComplianceODBUserList();
    public void set_OCRComplianceODBUserList(IEnumerable`1<Guid> value);
    public IEnumerable`1<SiteInfoForSitePicker> get_OCRComplianceSiteInfoList();
    public IEnumerable`1<Guid> get_OCRComplianceSiteList();
    public void set_OCRComplianceSiteList(IEnumerable`1<Guid> value);
    public string get_OCRComplianceSiteListFileName();
    public void set_OCRComplianceSiteListFileName(string value);
    public ObjectCharacterRecognitionMode get_OCRModeForAdminODBs();
    public void set_OCRModeForAdminODBs(ObjectCharacterRecognitionMode value);
    public ObjectCharacterRecognitionMode get_OCRModeForAdminSites();
    public void set_OCRModeForAdminSites(ObjectCharacterRecognitionMode value);
    public ObjectCharacterRecognitionMode get_OCRModeForComplianceODBs();
    public void set_OCRModeForComplianceODBs(ObjectCharacterRecognitionMode value);
    public ObjectCharacterRecognitionMode get_OCRModeForComplianceSites();
    public void set_OCRModeForComplianceSites(ObjectCharacterRecognitionMode value);
    public SharingState get_ODBAccessRequests();
    public void set_ODBAccessRequests(SharingState value);
    public SharingState get_ODBMembersCanShare();
    public void set_ODBMembersCanShare(SharingState value);
    public ushort get_ODBSensitivityRefreshWindowInHours();
    public SharingCapabilities get_ODBSharingCapability();
    public void set_ODBSharingCapability(SharingCapabilities value);
    public bool get_ODBTranslationEnabled();
    public void set_ODBTranslationEnabled(bool value);
    public bool get_OfficeClientADALDisabled();
    public void set_OfficeClientADALDisabled(bool value);
    public SharingState get_OneDriveBlockGuestsAsSiteAdmin();
    public void set_OneDriveBlockGuestsAsSiteAdmin(SharingState value);
    public bool get_OneDriveDefaultLinkToExistingAccess();
    public void set_OneDriveDefaultLinkToExistingAccess(bool value);
    public Role get_OneDriveDefaultShareLinkRole();
    public void set_OneDriveDefaultShareLinkRole(Role value);
    public SharingScope get_OneDriveDefaultShareLinkScope();
    public void set_OneDriveDefaultShareLinkScope(SharingScope value);
    public bool get_OneDriveForGuestsEnabled();
    public void set_OneDriveForGuestsEnabled(bool value);
    public Role get_OneDriveLoopDefaultSharingLinkRole();
    public void set_OneDriveLoopDefaultSharingLinkRole(Role value);
    public SharingScope get_OneDriveLoopDefaultSharingLinkScope();
    public void set_OneDriveLoopDefaultSharingLinkScope(SharingScope value);
    public SharingCapabilities get_OneDriveLoopSharingCapability();
    public void set_OneDriveLoopSharingCapability(SharingCapabilities value);
    public bool get_OneDriveRequestFilesLinkEnabled();
    public void set_OneDriveRequestFilesLinkEnabled(bool value);
    public int get_OneDriveRequestFilesLinkExpirationInDays();
    public void set_OneDriveRequestFilesLinkExpirationInDays(int value);
    public long get_OneDriveStorageQuota();
    public void set_OneDriveStorageQuota(long value);
    public bool get_OptOutOfGrooveBlock();
    public void set_OptOutOfGrooveBlock(bool value);
    public bool get_OptOutOfGrooveSoftBlock();
    public void set_OptOutOfGrooveSoftBlock(bool value);
    public string get_OrgNewsSiteUrl();
    public void set_OrgNewsSiteUrl(string value);
    public int get_OrphanedPersonalSitesRetentionPeriod();
    public void set_OrphanedPersonalSitesRetentionPeriod(int value);
    public bool get_OwnerAnonymousNotification();
    public void set_OwnerAnonymousNotification(bool value);
    public bool get_PermissiveBrowserFileHandlingOverride();
    public void set_PermissiveBrowserFileHandlingOverride(bool value);
    public bool get_PrebuiltEnabled();
    public void set_PrebuiltEnabled(bool value);
    public IEnumerable`1<SiteInfoForSitePicker> get_PrebuiltSiteInfoList();
    public IEnumerable`1<Guid> get_PrebuiltSiteList();
    public void set_PrebuiltSiteList(IEnumerable`1<Guid> value);
    public string get_PrebuiltSiteListFileName();
    public void set_PrebuiltSiteListFileName(string value);
    public bool get_PreventExternalUsersFromResharing();
    public void set_PreventExternalUsersFromResharing(bool value);
    public bool get_ProvisionSharedWithEveryoneFolder();
    public void set_ProvisionSharedWithEveryoneFolder(bool value);
    public string get_PublicCdnAllowedFileTypes();
    public void set_PublicCdnAllowedFileTypes(string value);
    public bool get_PublicCdnEnabled();
    public void set_PublicCdnEnabled(bool value);
    public IList`1<string> get_PublicCdnOrigins();
    public int get_RecycleBinRetentionPeriod();
    public void set_RecycleBinRetentionPeriod(int value);
    public bool get_ReduceTempTokenLifetimeEnabled();
    public void set_ReduceTempTokenLifetimeEnabled(bool value);
    public int get_ReduceTempTokenLifetimeValue();
    public void set_ReduceTempTokenLifetimeValue(int value);
    public bool get_RequireAcceptingAccountMatchInvitedAccount();
    public void set_RequireAcceptingAccountMatchInvitedAccount(bool value);
    public int get_RequireAnonymousLinksExpireInDays();
    public void set_RequireAnonymousLinksExpireInDays(int value);
    public double get_ResourceQuota();
    public double get_ResourceQuotaAllocated();
    public string get_RestrictedAccessControlForOneDriveErrorHelpLink();
    public void set_RestrictedAccessControlForOneDriveErrorHelpLink(string value);
    public string get_RestrictedAccessControlforSitesErrorHelpLink();
    public void set_RestrictedAccessControlforSitesErrorHelpLink(string value);
    public bool get_RestrictedOneDriveLicense();
    public bool get_RestrictedSharePointLicense();
    public string get_RootSiteUrl();
    public bool get_SearchResolveExactEmailOrUPN();
    public void set_SearchResolveExactEmailOrUPN(bool value);
    public bool get_SelfServiceSiteCreationDisabled();
    public void set_SelfServiceSiteCreationDisabled(bool value);
    public bool get_SharePointAddInsDisabled();
    public void set_SharePointAddInsDisabled(bool value);
    public string get_SharingAllowedDomainList();
    public void set_SharingAllowedDomainList(string value);
    public string get_SharingBlockedDomainList();
    public void set_SharingBlockedDomainList(string value);
    public SharingCapabilities get_SharingCapability();
    public void set_SharingCapability(SharingCapabilities value);
    public SharingDomainRestrictionModes get_SharingDomainRestrictionMode();
    public void set_SharingDomainRestrictionMode(SharingDomainRestrictionModes value);
    public bool get_ShowAllUsersClaim();
    public void set_ShowAllUsersClaim(bool value);
    public bool get_ShowEveryoneClaim();
    public void set_ShowEveryoneClaim(bool value);
    public bool get_ShowEveryoneExceptExternalUsersClaim();
    public void set_ShowEveryoneExceptExternalUsersClaim(bool value);
    public bool get_ShowNGSCDialogForSyncOnODB();
    public void set_ShowNGSCDialogForSyncOnODB(bool value);
    public bool get_ShowOpenInDesktopOptionForSyncedFiles();
    public void set_ShowOpenInDesktopOptionForSyncedFiles(bool value);
    public bool get_ShowPeoplePickerGroupSuggestionsForIB();
    public void set_ShowPeoplePickerGroupSuggestionsForIB(bool value);
    public bool get_ShowPeoplePickerSuggestionsForGuestUsers();
    public void set_ShowPeoplePickerSuggestionsForGuestUsers(bool value);
    public string get_SignInAccelerationDomain();
    public void set_SignInAccelerationDomain(string value);
    public bool get_SiteOwnerManageLegacyServicePrincipalEnabled();
    public void set_SiteOwnerManageLegacyServicePrincipalEnabled(bool value);
    public bool get_SocialBarOnSitePagesDisabled();
    public void set_SocialBarOnSitePagesDisabled(bool value);
    public SpecialCharactersState get_SpecialCharactersStateInFileFolderNames();
    public void set_SpecialCharactersStateInFileFolderNames(SpecialCharactersState value);
    public SPJitDlpPolicyData get_SPJitDlpPolicyData();
    public string get_StartASiteFormUrl();
    public void set_StartASiteFormUrl(string value);
    public bool get_StopNew2010Workflows();
    public void set_StopNew2010Workflows(bool value);
    public bool get_StopNew2013Workflows();
    public void set_StopNew2013Workflows(bool value);
    public long get_StorageQuota();
    public long get_StorageQuotaAllocated();
    public int get_StreamLaunchConfig();
    public void set_StreamLaunchConfig(int value);
    public DateTime get_StreamLaunchConfigLastUpdated();
    public int get_StreamLaunchConfigUpdateCount();
    public bool get_SyncPrivacyProfileProperties();
    public void set_SyncPrivacyProfileProperties(bool value);
    public SyntexBillingContext get_SyntexBillingSubscriptionSettings();
    public void set_SyntexBillingSubscriptionSettings(SyntexBillingContext value);
    public IDictionary`2<string, bool> get_SyntexInternalFeatureFlags();
    public SyntexPremiumFeatureSettings get_SyntexMediaAnalyticsSettings();
    public void set_SyntexMediaAnalyticsSettings(SyntexPremiumFeatureSettings value);
    public IDictionary`2<string, string> get_SyntexPaygFeatureActivations();
    public SyntexPremiumFeatureSettings get_SyntexPlaybackTranscriptTranslationSettings();
    public void set_SyntexPlaybackTranscriptTranslationSettings(SyntexPremiumFeatureSettings value);
    public SyntexPowerAppsEnvironmentsContext get_SyntexPowerAppsEnvironmentsContext();
    public bool get_TaxonomyTaggingEnabled();
    public void set_TaxonomyTaggingEnabled(bool value);
    public IEnumerable`1<SiteInfoForSitePicker> get_TaxonomyTaggingSiteInfoList();
    public IEnumerable`1<Guid> get_TaxonomyTaggingSiteList();
    public void set_TaxonomyTaggingSiteList(IEnumerable`1<Guid> value);
    public string get_TaxonomyTaggingSiteListFileName();
    public void set_TaxonomyTaggingSiteListFileName(string value);
    public SPOTlsTokenBindingPolicyValue get_TlsTokenBindingPolicyValue();
    public void set_TlsTokenBindingPolicyValue(SPOTlsTokenBindingPolicyValue value);
    public bool get_TranslationEnabled();
    public void set_TranslationEnabled(bool value);
    public IEnumerable`1<SiteInfoForSitePicker> get_TranslationSiteInfoList();
    public IEnumerable`1<Guid> get_TranslationSiteList();
    public void set_TranslationSiteList(IEnumerable`1<Guid> value);
    public string get_TranslationSiteListFileName();
    public void set_TranslationSiteListFileName(string value);
    public bool get_UniversalAnnotationDisabled();
    public void set_UniversalAnnotationDisabled(bool value);
    public bool get_UseFindPeopleInPeoplePicker();
    public void set_UseFindPeopleInPeoplePicker(bool value);
    public bool get_UsePersistentCookiesForExplorerView();
    public void set_UsePersistentCookiesForExplorerView(bool value);
    public bool get_ViewersCanCommentOnMediaDisabled();
    public void set_ViewersCanCommentOnMediaDisabled(bool value);
    public bool get_ViewInFileExplorerEnabled();
    public void set_ViewInFileExplorerEnabled(bool value);
    public string get_WhoCanShareAllowListInTenant();
    public void set_WhoCanShareAllowListInTenant(string value);
    public IList`1<string> get_WhoCanShareAllowListInTenantByGroupId();
    public void set_WhoCanShareAllowListInTenantByGroupId(IList`1<string> value);
    public IList`1<string> get_WhoCanShareAllowListInTenantByPrincipalIdentity();
    public void set_WhoCanShareAllowListInTenantByPrincipalIdentity(IList`1<string> value);
    public bool get_Workflow2010Disabled();
    public void set_Workflow2010Disabled(bool value);
    public Workflows2013State get_Workflows2013State();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetRestrictedSiteCreationForSiteType(RestrictedSiteCreationSiteType siteType);
    [RemoteAttribute]
public virtual ClientResult`1<SPSyntexApplicationProperties> SetSPEmbeddedApplicationPermissions(SPSyntexApplicationProperties spSyntexApplicationProperties);
    [RemoteAttribute]
public virtual IList`1<SPContentEventsCustomEmailProperty> GetContentEventsCustomEmails(ContentEventCategory category);
    [RemoteAttribute]
public virtual IList`1<string> GetContentEventCategories();
    [RemoteAttribute]
public virtual void AddContentEventsCustomEmails(ContentEventCategory category, IList`1<string> customEmails);
    [RemoteAttribute]
public virtual void RemoveContentEventsCustomEmails(ContentEventCategory category, IList`1<string> customEmails);
    [RemoteAttribute]
public virtual SPOContentSecurityPolicyConfiguration GetContentSecurityPolicy();
    [RemoteAttribute]
public void CreateGroupForSite(string siteUrl, string displayName, string alias, bool isPublic, GroupCreationParams optionalParams);
    [RemoteAttribute]
public virtual ClientObjectList`1<SPOTenantInstance> GetTenantInstances();
    [RemoteAttribute]
public void SetWorkflows2013Enabled(bool enabled);
    [RemoteAttribute]
public SPOMalwareFile GetMalwareInfectedFileInfo(string fileUri);
    [RemoteAttribute]
public virtual SpoOperation NewFileVersionBatchDeleteJob(string siteUrl, FileVersionBatchDeleteParameters batchDeleteParams);
    [RemoteAttribute]
public virtual SpoOperation RemoveFileVersionBatchDeleteJob(string siteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetFileVersionBatchDeleteJobProgress(string siteUrl);
    [RemoteAttribute]
public virtual SpoOperation NewFileVersionExpirationReportJob(string siteUrl, string reportUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetFileVersionExpirationReportJobProgress(string siteUrl, string reportUrl);
    [RemoteAttribute]
public virtual SpoOperation RemoveVersionPolicyForDocLibsJob(string siteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetVersionPolicyForDocLibsJobProgress(string siteUrl);
    [RemoteAttribute]
public virtual SpoOperation NewFileVersionBatchDeleteJobForLibrary(string siteUrl, SPOListParameters listParams, FileVersionBatchDeleteParameters batchDeleteParams);
    [RemoteAttribute]
public virtual SpoOperation RemoveFileVersionBatchDeleteJobForLibrary(string siteUrl, SPOListParameters listParams);
    [RemoteAttribute]
public virtual ClientResult`1<SPOFileVersionBatchDeleteJobProgress> GetFileVersionBatchDeleteJobProgressForLibrary(string siteUrl, SPOListParameters listParams);
    [RemoteAttribute]
public virtual SpoOperation NewFileVersionExpirationReportJobForLibrary(string siteUrl, SPOListParameters listParams, string reportUrl);
    [RemoteAttribute]
public virtual ClientResult`1<SPOFileVersionExpirationReportJobProgress> GetFileVersionExpirationReportJobProgressForLibrary(string siteUrl, SPOListParameters listParams, string reportUrl);
    [RemoteAttribute]
public virtual SpoOperation SetFileVersionPolicyForLibrary(string siteUrl, SPOListParameters listParams, SPOFileVersionPolicySettings versionPolicyParams);
    [RemoteAttribute]
public virtual ClientResult`1<SPOFileVersionPolicySettings> GetFileVersionPolicyForLibrary(string siteUrl, SPOListParameters listParams);
    [RemoteAttribute]
public virtual void SetFileVersionPolicy(bool isAutoTrimEnabled, int majorVersionLimit, int expireVersionsAfterDays);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerTypeProperties> NewSPOContainerType(SPContainerTypeProperties containerTypeProperties);
    [RemoteAttribute]
public virtual IList`1<SPContainerTypeProperties> GetSPOContainerTypes(SPContainerTypeTenantType containerTenantType);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerTypeProperties> GetSPOContainerTypeById(Guid containerTypeId, SPContainerTypeTenantType containerTenantType);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerTypeProperties> SetSPOContainerType(SPContainerTypeProperties containerTypeProperties);
    [RemoteAttribute]
public virtual void DeleteSPOContainerTypeById(Guid containerTypeId);
    [RemoteAttribute]
public virtual IList`1<SPSyntexApplicationProperties> GetSPOSyntexApplications();
    [RemoteAttribute]
public virtual void SetSPOSyntexApplicationsSharingCapability(Guid owningApplicationId, SharingCapabilities sharingCapability, bool overrideTenantSharingCapability);
    [RemoteAttribute]
public virtual void SetSPOSyntexApplicationsClearOverrideSharingCapability(Guid owningApplicationId);
    [RemoteAttribute]
public void AddSPOContainerRole(string ContainerId, string loginName, string roleName);
    [RemoteAttribute]
public void SetSPOContainerRole(string ContainerId, string loginName, string roleName);
    [RemoteAttribute]
public void RemoveSPOContainerRole(string ContainerId, string loginName, string roleName);
    [RemoteAttribute]
public virtual void SetSPOContainerProperties(SPContainerProperties spContainerProperties);
    [RemoteAttribute]
public virtual ClientResult`1<SPSyntexApplicationProperties> GetSPOSyntexConsumingApplications(Guid owningApplicationId, Guid applicationId);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerCollection> GetSPOContainersByApplicationId(Guid owningApplicationId, bool paged, string pagingToken);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerCollection> GetSortedSPOContainersByApplicationId(Guid owningApplicationId, bool ascending, bool paged, string pagingToken);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerProperties> GetSPOContainerByContainerId(string containerId);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerProperties> GetSPOContainerByContainerSiteUrl(string containerSiteUrl);
    [RemoteAttribute]
public virtual void RemoveSPOContainerByContainerId(string containerId);
    [RemoteAttribute]
public virtual void RemoveSPOContainerByContainerSiteUrl(string containerSiteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<bool> PurgeSPODeletedContainerByContainerId(string containerId);
    [RemoteAttribute]
public virtual ClientResult`1<bool> PurgeSPODeletedContainerByContainerSiteUrl(string containerSiteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<bool> RestoreSPODeletedContainerByContainerId(string containerId);
    [RemoteAttribute]
public virtual ClientResult`1<bool> RestoreSPODeletedContainerByContainerSiteUrl(string containerSiteUrl);
    [RemoteAttribute]
public virtual IList`1<SPDeletedContainerProperties> GetSPODeletedContainers();
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerTypeConfigurationProperties> GetSPOContainerTypeConfigurationByContainerTypeId(Guid containerTypeId);
    [RemoteAttribute]
public virtual ClientResult`1<SPContainerTypeConfigurationProperties> SetSPOContainerTypeConfiguration(SPContainerTypeConfigurationProperties spContainerTypeConfigurationProperties);
    [RemoteAttribute]
public virtual void RemoveSPOContainerType(SPDeletedContainerTypeProperties spDeletedContainerTypeProperties);
    [RemoteAttribute]
public virtual ClientResult`1<string> ExportCSVFile(int timeZoneId);
    [RemoteAttribute]
public virtual void SetSPORestrictedSearchMode(RestrictedSearchMode mode);
    [RemoteAttribute]
public virtual ClientResult`1<RestrictedSearchMode> GetSPORestrictedSearchMode();
    [RemoteAttribute]
public virtual IList`1<string> GetSPORestrictedSearchAllowedList();
    [RemoteAttribute]
public virtual void AddSPORestrictedSearchAllowedList(IList`1<string> siteUrls);
    [RemoteAttribute]
public virtual void RemoveSPORestrictedSearchAllowedList(IList`1<string> siteUrls);
    [RemoteAttribute]
public virtual void SetRestrictedSiteCreation(bool shouldUpdateEnabled, bool enabled, bool shouldUpdateMode, RestrictedSiteCreationMode mode, bool shouldUpdateSiteType, RestrictedSiteCreationSiteType siteType, IList`1<Guid> groupIds);
    [RemoteAttribute]
public virtual SPORestrictedSiteCreationConfiguration GetRestrictedSiteCreation();
    [RemoteAttribute]
public virtual void SetSPOStructuralNavigationCacheWebState(string webUrl, bool isEnabled);
    [RemoteAttribute]
public virtual void SetBlockDownloadFileTypePolicyData(bool blockDownloadFileTypePolicy, SPBlockDownloadFileTypeId[] typeId, Guid[] excludedBlockDownloadGroupIds);
    [RemoteAttribute]
public void SetBlockDownloadFileTypePolicyExclusionList(Guid[] excludedBlockDownloadGroupIds);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetSPHSiteUrl();
    [RemoteAttribute]
public virtual IList`1<HomeSitesDetails> GetHomeSitesDetails();
    [RemoteAttribute]
public virtual IList`1<TargetedSiteDetails> GetTargetedSitesDetails();
    [RemoteAttribute]
public virtual IList`1<TargetedSiteDetails> GetLandingSites(string userId);
    [RemoteAttribute]
public virtual IList`1<TargetedSiteDetails> GetTargetedSitesDetailsByUserId(string userId);
    [RemoteAttribute]
public virtual IList`1<HomeSitesDetails> GetHomeSites();
    [RemoteAttribute]
public ClientResult`1<VivaConnectionsLicense> GetVivaConnectionsLicense();
    [RemoteAttribute]
public ClientResult`1<TargetedSiteDetails> AddHomeSite(string homeSiteUrl, int order, Guid[] audiences);
    [RemoteAttribute]
public virtual ClientResult`1<TargetedSiteDetails> UpdateTargetedSite(string siteUrl, HomeSiteConfigurationParam configurationParam);
    [RemoteAttribute]
public virtual IList`1<TargetedSiteDetails> ReorderTargetedSites(Guid[] siteIds);
    [RemoteAttribute]
public virtual void ValidateHomeSite(ValidationActionType validationActionType, string siteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> SetSPHSite(string sphSiteUrl);
    [RemoteAttribute]
public ClientResult`1<string> SetSPHSiteWithConfigurations(string sphSiteUrl, bool vivaConnectionsDefaultStart);
    [RemoteAttribute]
public ClientResult`1<bool> IsDraftModeForCompanyPortalSiteEnabled();
    [RemoteAttribute]
public virtual ClientResult`1<string> SetSPHSiteWithConfiguration(string sphSiteUrl, HomeSiteConfigurationParam configuration);
    [RemoteAttribute]
public ClientResult`1<bool> IsVivaConnectionsDefaultStartForCompanyPortalSiteEnabled();
    [RemoteAttribute]
public virtual void RemoveHomeSite(string homeSiteUrl);
    [RemoteAttribute]
public virtual void RemoveTargetedSite(Guid siteId);
    [RemoteAttribute]
public virtual ClientResult`1<string> RemoveSPHSite();
    [RemoteAttribute]
public void ValidateMultipleHomeSitesParameterExists(bool hasParameters);
    [RemoteAttribute]
public void ValidateVivaHomeParameterExists(bool hasParameters);
    [RemoteAttribute]
public void ValidateVivaHomeGAParametersExists(bool hasParameters);
    [RemoteAttribute]
public virtual ClientResult`1<bool> IsValidCommSite(string spSiteUrl);
    [RemoteAttribute]
public virtual void AddSdnProvider(string identifier, string license);
    [RemoteAttribute]
public virtual void RemoveSdnProvider();
    [RemoteAttribute]
public virtual ClientResult`1<bool> IsMnACmdletCorrectnessCheckEnabled();
    [RemoteAttribute]
public virtual ClientResult`1<MnAGroupConnectedPreValidationCheckResult> MnAGroupConnectedPreValidation(string sourceGroupObjectId, string targetGroupAlias, string partnerMySiteHostUrl);
    [RemoteAttribute]
public virtual ClientResult`1<bool> IsMnALicensingFlightEnabled();
    [RemoteAttribute]
public virtual ClientResult`1<bool> IsMnALicensingEnabledForTenant(MnALicenseType licenseType, string partnerMySiteHostUrl);
    [RemoteAttribute]
public virtual ClientResult`1<MnAUserLicenseCheckResult> IsMnALicensingEnabledForUser(string sourceUserUPN, string targetUserUPN, string partnerMySiteHostUrl);
    [RemoteAttribute]
public virtual void NewSPOTenantOrgRelation(OrgRelationScenario scenario, OrgRelationRole partnerRole, string partnerMySiteHostUrl);
    [RemoteAttribute]
public virtual void RemoveSPOTenantOrgRelation(OrgRelationScenario scenario, OrgRelationRole partnerRole, string partnerMySiteHostUrl);
    [RemoteAttribute]
public virtual ClientResult`1<OrgRelationVerificationStatus> VerifySPOTenantOrgRelation(OrgRelationScenario scenario, OrgRelationRole partnerRole, string partnerMySiteHostUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetSPOTenantOrgRelationAll();
    [RemoteAttribute]
public virtual ClientResult`1<string> GetSPOTenantOrgRelationByScenario(OrgRelationScenario scenario, OrgRelationRole partnerRole);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetSPOTenantOrgRelationByPartner(string partnerMySiteHostUrl);
    [RemoteAttribute]
public ClientResult`1<string> GetMySiteHostUrl();
    [RemoteAttribute]
public ClientResult`1<string> GetPersonalSiteUrl(string userPrincipalName);
    [RemoteAttribute]
public ClientResult`1<string> GetOrgRelationTargetGroupManagedPath(string targetMySiteHostUrl);
    [RemoteAttribute]
public virtual IList`1<string> AddOrUpdateTenantIdentityMap(String[] mapItems);
    [RemoteAttribute]
public virtual void AddOrUpdateTenantSingleUserIdentityMappingItem(Guid sourceTenantCompanyId, string sourceUserKey, string targetUserPuid, string targetUserUpn, string targetUserEmail, TenantIdentityMappingUserType userType);
    [RemoteAttribute]
public virtual ClientObjectList`1<SPOTenantUserIdentityMapping> GetTenantUserIdentityMappingItem(TenantIdentityMappingUserField field, string value);
    [RemoteAttribute]
public virtual void RemoveTenantUserIdentityMappingItem(TenantIdentityMappingUserField field, string value);
    [RemoteAttribute]
public virtual void AddOrUpdateTenantSingleGroupIdentityMappingItem(Guid sourceTenantCompanyId, Guid sourceGroupObjectId, Guid targetGroupObjectId, string targetGroupName, TenantIdentityMappingGroupType groupType);
    [RemoteAttribute]
public virtual ClientObjectList`1<SPOTenantGroupIdentityMapping> GetTenantGroupIdentityMappingItem(TenantIdentityMappingGroupField field, string value);
    [RemoteAttribute]
public virtual void RemoveTenantGroupIdentityMappingItem(TenantIdentityMappingGroupField field, string value);
    [RemoteAttribute]
public virtual void SetTenantIdentityMigrationState(TenantIdentityMigrationState state);
    [RemoteAttribute]
public virtual ClientResult`1<bool> IsTenantReadyForIdentityChange();
    [RemoteAttribute]
public virtual ClientResult`1<MnATenantIdentityMapCallCorrectnessCheckResult> CheckMnATenantIdentityMapCallCorrectness();
    [RemoteAttribute]
public virtual ClientObjectList`1<SPOTenantOdbFeature> AddTenantSingleUserOdbFeature(string userPrincipleName, FeatureScope scope, IList`1<Guid> featureIds);
    [RemoteAttribute]
public virtual ClientObjectList`1<SPOTenantOdbFeature> AddTenantOdbFeature(IList`1<string> userPrincipleNames, FeatureScope scope, IList`1<Guid> featureIds);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetKnowledgeHubSite();
    [RemoteAttribute]
public virtual ClientResult`1<string> SetKnowledgeHubSite(string knowledgeHubSiteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> RemoveKnowledgeHubSite();
    [RemoteAttribute]
public virtual SPOPortalLaunchValidationResult SavePortalLaunchWaves(string portalLaunchWaveSetupString, bool isTesting, bool changeConfirmed);
    [RemoteAttribute]
public virtual SPOPortalLaunchValidationResult CreatePortalLaunchWaves(string portalLaunchWaveSetupString, bool isWhatIf, bool isTesting, bool changeConfirmed);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetAllPortalLaunchWaves();
    [RemoteAttribute]
public virtual ClientResult`1<string> GetPortalLaunchWaves(string siteUrl);
    [RemoteAttribute]
public virtual SPOPortalLaunchValidationResult UpdatePortalLaunchWaves(string siteUrl, string status, bool walkBack);
    [RemoteAttribute]
public virtual SPOPortalLaunchValidationResult SetPortalLaunchWaves(string siteUrl, string status, bool walkBack, bool isWhatIf, bool updateConfirmed);
    [RemoteAttribute]
public virtual SPOPortalLaunchValidationResult RemovePortalLaunchWaves(string siteUrl, bool deletionConfirmed);
    [RemoteAttribute]
public ClientObjectList`1<ThemeProperties> GetAllTenantThemes();
    [RemoteAttribute]
public ClientResult`1<string> SetWebTheme(string themeName, string webUrl);
    [RemoteAttribute]
public virtual IList`1<SettingDataProperty> GetSharePointSettingData();
    [RemoteAttribute]
public ClientResult`1<string> CreateSiteSharingReportJobForTenantAdmin(string siteUrl, string reportWebUrl, string reportFolderUrl);
    [RemoteAttribute]
public ClientResult`1<string> RemoveSiteSharingReportJobForTenantAdmin(string siteUrl);
    [RemoteAttribute]
public ClientObjectList`1<SPOTenantSiteUserInvitation> GetSPOTenantSiteUserInvitations(string siteUrl, string emailAddress);
    [RemoteAttribute]
public ClientResult`1<int> RemoveSPOTenantSiteUserInvitations(string siteUrl, string emailAddress, bool countOnly);
    [RemoteAttribute]
public virtual IEnumerable`1<string> GetOrgNewsSites();
    [RemoteAttribute]
public virtual ClientResult`1<string> SetOrgNewsSite(string orgNewsSiteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> RemoveOrgNewsSite(string orgNewsSiteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<string> EnableCommunicationSite(string siteUrl, Guid designPackageId);
    [RemoteAttribute]
public virtual ClientResult`1<bool> GetSPOStructuralNavigationCacheSiteState(string siteUrl);
    [RemoteAttribute]
public virtual void SetSPOStructuralNavigationCacheSiteState(string siteUrl, bool isEnabled);
    [RemoteAttribute]
public virtual ClientResult`1<bool> GetSPOStructuralNavigationCacheWebState(string webUrl);
    [RemoteAttribute]
public TenantSiteScript CreateSiteScript(TenantSiteScriptCreationInfo info);
    [RemoteAttribute]
public TenantSiteScript CreateSiteScriptPackage(TenantSiteScriptCreationInfo info);
    [RemoteAttribute]
public static TenantSiteScript GetSiteScript(ClientRuntimeContext context, Guid id);
    [RemoteAttribute]
public ClientResult`1<Stream> GetSiteScriptPackageFile(Guid id);
    [RemoteAttribute]
public ClientObjectList`1<TenantSiteScript> GetSiteScripts();
    [RemoteAttribute]
public static ClientResult`1<string> GetSiteScriptFromList(ClientRuntimeContext context, string listUrl);
    [RemoteAttribute]
public static TenantSiteDesignTask AddSiteDesignTask(ClientRuntimeContext context, string webUrl, Guid siteDesignId);
    [RemoteAttribute]
public static void RemoveSiteDesignTask(ClientRuntimeContext context, Guid taskId);
    [RemoteAttribute]
public static TenantSiteDesignTask GetSiteDesignTask(ClientRuntimeContext context, Guid id);
    [RemoteAttribute]
public ClientObjectList`1<TenantSiteDesignTask> GetSiteDesignTasks(string webUrl);
    [RemoteAttribute]
public ClientResult`1<TenantSiteScriptSerializationResult> GetSiteScriptPackageFromSite(string webUrl, TenantSiteScriptSerializationInfo info);
    [RemoteAttribute]
public ClientResult`1<TenantSiteScriptSerializationResult> GetSiteScriptFromSite(string webUrl, TenantSiteScriptSerializationInfo info);
    [RemoteAttribute]
public TenantSiteScript UpdateSiteScript(TenantSiteScript updateInfo);
    [RemoteAttribute]
public TenantSiteScript UpdateSiteScriptPackage(TenantSiteScript updateInfo);
    [RemoteAttribute]
public void DeleteSiteScript(Guid id);
    [RemoteAttribute]
public ClientObjectList`1<TenantSiteDesignRun> GetSiteDesignRun(string webUrl, Guid siteDesignId);
    [RemoteAttribute]
public ClientObjectList`1<TenantSiteScriptActionStatus> GetSiteDesignRunStatus(Guid siteId, Guid webId, Guid runId);
    [RemoteAttribute]
public TenantSiteDesign CreateSiteDesign(TenantSiteDesignCreationInfo info);
    [RemoteAttribute]
public static TenantSiteDesign GetSiteDesign(ClientRuntimeContext context, Guid id);
    [RemoteAttribute]
public ClientObjectList`1<TenantSiteDesign> GetSiteDesigns();
    [RemoteAttribute]
public static void SetBuiltInDesignPackageVisibility(ClientRuntimeContext context, DesignPackageType designPackageType, bool isVisible);
    [RemoteAttribute]
public static ClientResult`1<DesignPackageType> GetHiddenBuiltInDesignPackages(ClientRuntimeContext context);
    [RemoteAttribute]
public ClientResult`1<TenantOutOfBoxSiteTemplateSettings> SetTenantOutOfBoxSiteTemplateSettings(TenantOutOfBoxSiteTemplateSettings updateInfo);
    [RemoteAttribute]
public IList`1<TenantOutOfBoxSiteTemplateSettings> GetAllOutOfBoxSiteTemplateSettings();
    [RemoteAttribute]
public static ClientResult`1<TenantOutOfBoxSiteTemplateSettings> GetOutOfBoxSiteTemplateSettings(ClientRuntimeContext context, Guid id);
    [RemoteAttribute]
public TenantSiteDesign UpdateSiteDesign(TenantSiteDesign updateInfo);
    [RemoteAttribute]
public void DeleteSiteDesign(Guid id);
    [RemoteAttribute]
public void GrantSiteDesignRights(Guid id, String[] principalNames, TenantSiteDesignPrincipalRights grantedRights);
    [RemoteAttribute]
public static void RevokeSiteDesignRights(ClientRuntimeContext context, Guid id, String[] principalNames);
    [RemoteAttribute]
public static ClientObjectList`1<TenantSiteDesignPrincipal> GetSiteDesignRights(ClientRuntimeContext context, Guid id);
    [RemoteAttribute]
public ClientObjectList`1<TenantSiteScriptActionResult> ApplySiteDesign(string webUrl, Guid siteDesignId);
    [RemoteAttribute]
public TenantListDesign CreateListDesign(TenantListDesignCreationInfo info);
    [RemoteAttribute]
public static TenantListDesign GetListDesign(ClientRuntimeContext context, Guid id);
    [RemoteAttribute]
public ClientObjectList`1<TenantListDesign> GetListDesigns();
    [RemoteAttribute]
public void RemoveListDesign(Guid id);
    [RemoteAttribute]
public ClientObjectList`1<TenantSiteScriptActionResult> ApplyListDesign(string webUrl, Guid listDesignId);
    [RemoteAttribute]
public HubSiteProperties GetHubSitePropertiesByUrl(string siteUrl);
    [RemoteAttribute]
public HubSiteProperties GetHubSitePropertiesById(Guid hubSiteId);
    [RemoteAttribute]
public ClientObjectList`1<HubSiteProperties> GetHubSitesProperties();
    [RemoteAttribute]
public HubSiteProperties RegisterHubSite(string siteUrl);
    [RemoteAttribute]
public HubSiteProperties RegisterHubSiteWithCreationInformation(string siteUrl, HubSiteCreationInformation creationInformation);
    [RemoteAttribute]
public void UnregisterHubSite(string siteUrl);
    [RemoteAttribute]
public void UnregisterHubSiteById(Guid hubSiteId);
    [RemoteAttribute]
public void ConnectSiteToHubSite(string siteUrl, string hubSiteUrl);
    [RemoteAttribute]
public void ConnectSiteToHubSiteById(string siteUrl, Guid hubSiteId);
    [RemoteAttribute]
public void DisconnectSiteFromHubSite(string siteUrl);
    [RemoteAttribute]
public HubSiteProperties GrantHubSiteRights(string hubSiteUrl, String[] principals, SPOHubSiteUserRights grantedRights);
    [RemoteAttribute]
public HubSiteProperties GrantHubSiteRightsById(Guid hubSiteId, String[] principals, SPOHubSiteUserRights grantedRights);
    [RemoteAttribute]
public HubSiteProperties RevokeHubSiteRights(string hubSiteUrl, String[] principals);
    [RemoteAttribute]
public HubSiteProperties RevokeHubSiteRightsById(Guid hubSiteId, String[] principals);
    [RemoteAttribute]
public virtual TenantFontPackage AddBrandTenantFontPackage(TenantFontPackageCreationParameters tenantFontPackageCreationParams);
    [RemoteAttribute]
public virtual ClientObjectList`1<TenantFontPackage> GetBrandTenantFontPackages();
    [RemoteAttribute]
public virtual TenantFontPackage GetBrandTenantFontPackageById(Guid fontPackageID);
    [RemoteAttribute]
public virtual void ApplyBrandFontPackageById(Guid fontPackageID, string targetWebUrl);
    [RemoteAttribute]
public virtual void RemoveBrandFontPackageById(Guid fontPackageID);
    [RemoteAttribute]
public ClientResult`1<string> GetOutOfBoxFontPackageSettingsString();
    [RemoteAttribute]
public void SetHideOutOfBoxFontPackages(bool value);
    [RemoteAttribute]
public ClientResult`1<bool> AddTenantTheme(string name, string themeJson);
    [RemoteAttribute]
public ClientResult`1<bool> UpdateTenantTheme(string name, string themeJson);
    [RemoteAttribute]
public void DeleteTenantTheme(string name);
    [RemoteAttribute]
public ThemeProperties GetTenantTheme(string name);
    [RemoteAttribute]
public void SyncAadB2BManagementPolicy();
    [RemoteAttribute]
public void DisableSpacesActivationOnSite(string siteUrl, bool disable);
    [RemoteAttribute]
public virtual void RemovePreviousCustomFontUpload(IList`1<string> majVersions, string libUrl);
    [RemoteAttribute]
public virtual void IncrementCustomFontsMinorVersion(string libUrl);
    [RemoteAttribute]
public virtual void LogCustomFontsLargeUpload(int numCatalogs, int numFonts, int totalExpectedFiles);
    [RemoteAttribute]
public virtual void AddPublicCdnOrigin(string origin);
    [RemoteAttribute]
public virtual void RemovePublicCdnOrigin(string originId);
    [RemoteAttribute]
public virtual IList`1<string> GetTenantCdnOrigins(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public virtual void AddTenantCdnOrigin(SPOTenantCdnType cdnType, string originUrl);
    [RemoteAttribute]
public virtual void RemoveTenantCdnOrigin(SPOTenantCdnType cdnType, string originUrl);
    [RemoteAttribute]
public virtual void SetTenantCdnEnabled(SPOTenantCdnType cdnType, bool isEnabled);
    [RemoteAttribute]
public virtual ClientResult`1<bool> GetTenantCdnEnabled(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public virtual void SetTenantCdnPolicy(SPOTenantCdnType cdnType, SPOTenantCdnPolicyType policyType, string policyValue);
    [RemoteAttribute]
public virtual IList`1<string> GetTenantCdnPolicies(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public void CreateTenantCdnDefaultOrigins(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public virtual ClientResult`1<SPOAppBillingProperties> ActivateApplicationBillingPolicy(string billingPolicyId);
    [RemoteAttribute]
public virtual ClientResult`1<bool> CreateApplicationBillingPolicyValidation(string applicationId);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetBillingPolicyIdForApp(Guid applicationId);
    [RemoteAttribute]
public virtual IList`1<SPOAppBillingProperties> GetSPOAppBillingPolicies();
    [RemoteAttribute]
public virtual ClientResult`1<bool> SetIdleSessionSignOutForUnmanagedDevices(bool enabled, TimeSpan warnAfter, TimeSpan signOutAfter);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetIdleSessionSignOutForUnmanagedDevices();
    [RemoteAttribute]
public virtual void AddToOrgAssetsLibAndCdn(SPOTenantCdnType cdnType, string libUrl, string thumbnailUrl);
    [RemoteAttribute]
public virtual void AddToOrgAssetsLibAndCdnWithType(SPOTenantCdnType cdnType, string libUrl, string thumbnailUrl, OrgAssetType orgAssetType);
    [RemoteAttribute]
public void AddToOrgAssetsLibAndCdnV2(SPOTenantCdnType cdnType, string libUrl, string thumbnailUrl, OrgAssetType orgAssetType, bool defaultOriginAdded);
    [RemoteAttribute]
public virtual void AddToOrgAssetsLibWithConfig(SPOTenantCdnType cdnType, string libUrl, string thumbnailUrl, OrgAssetType orgAssetType, bool defaultOriginAdded, OrgAssetsLibraryConfigParam configParam);
    [RemoteAttribute]
public virtual void RemoveFromOrgAssetsAndCdn(bool remove, SPOTenantCdnType cdnType, string libUrl);
    [RemoteAttribute]
public virtual void RemoveFromOrgAssets(string libUrl, Guid listId);
    [RemoteAttribute]
public virtual void SetOrgAssets(string libUrl, string thumbnailUrl);
    [RemoteAttribute]
public virtual void SetOrgAssetsWithType(string libUrl, string thumbnailUrl, OrgAssetType orgAssetType);
    [RemoteAttribute]
public virtual void SetOrgAssetsWithConfig(string libUrl, string thumbnailUrl, OrgAssetType orgAssetType, OrgAssetsLibraryConfigParam configParam);
    [RemoteAttribute]
public virtual ClientResult`1<OrgAssets> GetOrgAssets();
    [RemoteAttribute]
public virtual ClientResult`1<int> GetCustomFontsMinorVersion(string libUrl);
    [RemoteAttribute]
public virtual void IsOfficeFontLibraryOrgAssetFlightEnabled(OrgAssetType orgAssetType);
    [RemoteAttribute]
public virtual ClientResult`1<bool> IsCustomFontsOAuthEnabled();
    [RemoteAttribute]
public virtual ClientResult`1<bool> UploadCustomFontsAndCatalog(IList`1<CustomFontsResource> customFontFiles, string libUrl);
    [RemoteAttribute]
public void Update();
    [RemoteAttribute]
public virtual Site GetSiteByUrl(string url);
    [RemoteAttribute]
public virtual SiteProperties GetSitePropertiesByUrl(string url, bool includeDetail);
    [RemoteAttribute]
public virtual ClientResult`1<string> GetRootSiteUrl();
    [RemoteAttribute]
public virtual SPOSitePropertiesEnumerable GetSiteProperties(int startIndex, bool includeDetail);
    [RemoteAttribute]
public virtual SPOSitePropertiesEnumerable GetSitePropertiesFromSharePoint(string startIndex, bool includeDetail);
    [RemoteAttribute]
public virtual SPOSitePropertiesEnumerable GetSitePropertiesByFilter(string filter, int startIndex, bool includeDetail);
    [RemoteAttribute]
public virtual SPOSitePropertiesEnumerable GetSitePropertiesFromSharePointByFilter(string filter, string startIndex, bool includeDetail);
    [RemoteAttribute]
public virtual SPOSitePropertiesEnumerable GetSitePropertiesFromSharePointByFilters(SPOSitePropertiesEnumerableFilter speFilter);
    [RemoteAttribute]
public virtual FileSensitivityLabelInfo GetFileSensitivityLabelInfo(string fileUrl);
    [RemoteAttribute]
public virtual void UnlockSensitivityLabelEncryptedFile(string fileUrl, string justificationText);
    [RemoteAttribute]
public virtual UserMigrationPropertiesEnumerable GetUserMigrationPropertiesByFilter(UserMigrationPropertiesEnumerableFilter userMigrationPropertiesEnumerableFilter);
    [RemoteAttribute]
public virtual UserMigrationProperties GetUserMigrationProperties(string userPrincipalName);
    [RemoteAttribute]
public virtual SpoOperation CreateSite(SiteCreationProperties siteCreationProperties);
    [RemoteAttribute]
public SPOTenantWebTemplateCollection GetSPOTenantAllWebTemplates();
    [RemoteAttribute]
public SPOTenantWebTemplateCollection GetSPOAllWebTemplates(string cultureName, int compatibilityLevel);
    [RemoteAttribute]
public virtual SPOTenantWebTemplateCollection GetSPOWebTemplatesAllowedForArchiving();
    [RemoteAttribute]
public SPOTenantWebTemplateCollection GetSPOTenantWebTemplates(UInt32 localeId, int compatibilityLevel);
    [RemoteAttribute]
public virtual SpoOperation RemoveSite(string siteUrl);
    [RemoteAttribute]
public SpoOperation SwapSiteWithSmartGestureOptionForce(string sourceUrl, string targetUrl, string archiveUrl, bool includeSmartGestures, bool force);
    [RemoteAttribute]
public virtual SpoOperation SwapSiteWithSmartGestureOption(string sourceUrl, string targetUrl, string archiveUrl, bool includeSmartGestures);
    [RemoteAttribute]
public virtual SpoOperation SwapSite(string sourceUrl, string targetUrl, string archiveUrl);
    [RemoteAttribute]
public virtual DeletedSiteProperties GetDeletedSitePropertiesByUrl(string siteUrl);
    [RemoteAttribute]
public virtual SPODeletedSitePropertiesEnumerable GetDeletedSiteProperties(int startIndex);
    [RemoteAttribute]
public virtual SPODeletedSitePropertiesEnumerable GetDeletedSitePropertiesFromSharePoint(string startIndex);
    [RemoteAttribute]
public virtual SPODeletedSitePropertiesEnumerable GetDeletedPersonalSitePropertiesAllVersions(string url);
    [RemoteAttribute]
public virtual SPODeletedSitePropertiesEnumerable GetAllDeletedPersonalSitesPropertiesAllVersions(int startIndex);
    [RemoteAttribute]
public virtual SpoOperation RequestPersonalSites(String[] userIds);
    [RemoteAttribute]
public virtual SpoOperation RemoveDeletedSite(string siteUrl);
    [RemoteAttribute]
public virtual SpoOperation RemoveDeletedSitePreferId(string siteUrl, Guid siteId);
    [RemoteAttribute]
public virtual SpoOperation RestoreDeletedSite(string siteUrl);
    [RemoteAttribute]
public SpoOperation RestoreDeletedSiteById(Guid siteId);
    [RemoteAttribute]
public virtual SpoOperation RestoreDeletedSitePreferId(string siteUrl, Guid siteId);
    [RemoteAttribute]
public SpoOperation ArchiveSiteByUrl(string siteUrl);
    [RemoteAttribute]
public SpoOperation UnarchiveSiteByUrl(string siteUrl);
    [RemoteAttribute]
public virtual SpoOperation ArchiveSiteById(Guid siteId);
    [RemoteAttribute]
public virtual SpoOperation UnarchiveSiteById(Guid siteId);
    [RemoteAttribute]
public virtual ClientResult`1<string> EncodeClaim(string identifier);
    [RemoteAttribute]
public virtual ClientResult`1<string> DecodeClaim(string identifier);
    [RemoteAttribute]
public virtual IList`1<string> EncodeClaims(IList`1<string> identifiers);
    [RemoteAttribute]
public virtual IList`1<string> DecodeClaims(IList`1<string> claims);
    [RemoteAttribute]
public virtual User SetSiteAdmin(string siteUrl, string loginName, bool isSiteAdmin);
    [RemoteAttribute]
public virtual User UpdateUserTypeFromAzureAD(string siteUrl, string loginName);
    [RemoteAttribute]
public virtual ClientObjectList`1<User> UpdateUserTypesFromAzureADForSite(string siteUrl);
    [RemoteAttribute]
public virtual SPOSitePropertiesEnumerable UpdateUserTypeFromAzureADForAllSites(string loginName);
    [RemoteAttribute]
public virtual ClientObjectList`1<AppErrorEntry> GetAppErrors(Guid productId, DateTime timeStart, DateTime timeEnd);
    [RemoteAttribute]
public virtual ClientObjectList`1<AppInfo> GetAppInfoByProductId(Guid productId);
    [RemoteAttribute]
public virtual ClientObjectList`1<AppInfo> GetAppInfoByName(string name);
    [RemoteAttribute]
public virtual IList`1<SPSitePage> GetSPSitePages(string siteUrl);
    [RemoteAttribute]
public virtual ClientResult`1<SPSitePageCopyJobProgress> CopyPersonalSitePage(string sourceSiteUrl, string destinationSiteUrl, string pageName, bool deleteSourcePage);
    [RemoteAttribute]
public virtual ClientResult`1<SPSitePageCopyJobProgress> GetSitePageCopyJobProgress(string destinationSiteUrl, Guid workItemId);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TenantBrowseUserInfoPolicyValue : Enum {
    public int value__;
    public static TenantBrowseUserInfoPolicyValue ApplyToNoUsers;
    public static TenantBrowseUserInfoPolicyValue ApplyToGuestAndExternalUsers;
    public static TenantBrowseUserInfoPolicyValue ApplyToInternalUsers;
    public static TenantBrowseUserInfoPolicyValue ApplyToAllUsers;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantFontPackage")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantFontPackage : ClientObject {
    [RemoteAttribute]
public Guid ID { get; }
    [RemoteAttribute]
public bool IsHidden { get; public set; }
    [RemoteAttribute]
public bool IsValid { get; }
    [RemoteAttribute]
public string PackageJson { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantFontPackage(ClientRuntimeContext context, ObjectPath objectPath);
    public Guid get_ID();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsValid();
    public string get_PackageJson();
    public void set_PackageJson(string value);
    public string get_Title();
    public void set_Title(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantFontPackageCreationParameters")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantFontPackageCreationParameters : ClientValueObject {
    private bool m_isHidden;
    private string m_packageJson;
    private string m_title;
    [RemoteAttribute]
public bool IsHidden { get; public set; }
    [RemoteAttribute]
public string PackageJson { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public string get_PackageJson();
    public void set_PackageJson(string value);
    public string get_Title();
    public void set_Title(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantFontPackagePropertyNames : object {
    public static string ID;
    public static string IsHidden;
    public static string IsValid;
    public static string PackageJson;
    public static string Title;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantListDesign")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantListDesign : ClientObject {
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public TenantTemplateDesignType DesignType { get; public set; }
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public TenantListDesignColor ListColor { get; public set; }
    [RemoteAttribute]
public TenantListDesignIcon ListIcon { get; public set; }
    [RemoteAttribute]
public Guid[] SiteScriptIds { get; public set; }
    [RemoteAttribute]
public String[] TargetPlatforms { get; }
    [RemoteAttribute]
public String[] TemplateFeatures { get; public set; }
    [RemoteAttribute]
public string ThumbnailUrl { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public int Version { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantListDesign(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Description();
    public void set_Description(string value);
    public TenantTemplateDesignType get_DesignType();
    public void set_DesignType(TenantTemplateDesignType value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public TenantListDesignColor get_ListColor();
    public void set_ListColor(TenantListDesignColor value);
    public TenantListDesignIcon get_ListIcon();
    public void set_ListIcon(TenantListDesignIcon value);
    public Guid[] get_SiteScriptIds();
    public void set_SiteScriptIds(Guid[] value);
    public String[] get_TargetPlatforms();
    public String[] get_TemplateFeatures();
    public void set_TemplateFeatures(String[] value);
    public string get_ThumbnailUrl();
    public void set_ThumbnailUrl(string value);
    public string get_Title();
    public void set_Title(string value);
    public int get_Version();
    public void set_Version(int value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TenantListDesignColor : Enum {
    public ulong value__;
    public static TenantListDesignColor DarkRed;
    public static TenantListDesignColor Red;
    public static TenantListDesignColor Orange;
    public static TenantListDesignColor Green;
    public static TenantListDesignColor DarkGreen;
    public static TenantListDesignColor Teal;
    public static TenantListDesignColor Blue;
    public static TenantListDesignColor NavyBlue;
    public static TenantListDesignColor BluePurple;
    public static TenantListDesignColor DarkBlue;
    public static TenantListDesignColor Lavendar;
    public static TenantListDesignColor Pink;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantListDesignCreationInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantListDesignCreationInfo : ClientValueObject {
    private string m_description;
    private TenantListDesignColor m_listColor;
    private TenantListDesignIcon m_listIcon;
    private Guid[] m_siteScriptIds;
    private String[] m_templateFeatures;
    private string m_thumbnailUrl;
    private string m_title;
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public TenantListDesignColor ListColor { get; public set; }
    [RemoteAttribute]
public TenantListDesignIcon ListIcon { get; public set; }
    [RemoteAttribute]
public Guid[] SiteScriptIds { get; public set; }
    [RemoteAttribute]
public String[] TemplateFeatures { get; public set; }
    [RemoteAttribute]
public string ThumbnailUrl { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Description();
    public void set_Description(string value);
    public TenantListDesignColor get_ListColor();
    public void set_ListColor(TenantListDesignColor value);
    public TenantListDesignIcon get_ListIcon();
    public void set_ListIcon(TenantListDesignIcon value);
    public Guid[] get_SiteScriptIds();
    public void set_SiteScriptIds(Guid[] value);
    public String[] get_TemplateFeatures();
    public void set_TemplateFeatures(String[] value);
    public string get_ThumbnailUrl();
    public void set_ThumbnailUrl(string value);
    public string get_Title();
    public void set_Title(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TenantListDesignIcon : Enum {
    public ulong value__;
    public static TenantListDesignIcon Bug;
    public static TenantListDesignIcon Calendar;
    public static TenantListDesignIcon BullseyeTarget;
    public static TenantListDesignIcon ClipboardList;
    public static TenantListDesignIcon Airplane;
    public static TenantListDesignIcon Rocket;
    public static TenantListDesignIcon Color;
    public static TenantListDesignIcon Insights;
    public static TenantListDesignIcon CubeShape;
    public static TenantListDesignIcon TestBeakerSolid;
    public static TenantListDesignIcon Robot;
    public static TenantListDesignIcon Savings;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantListDesignPropertyNames : object {
    public static string Description;
    public static string DesignType;
    public static string Id;
    public static string ListColor;
    public static string ListIcon;
    public static string SiteScriptIds;
    public static string TargetPlatforms;
    public static string TemplateFeatures;
    public static string ThumbnailUrl;
    public static string Title;
    public static string Version;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantLog")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantLog : ClientObject {
    [RemoteAttribute]
public DateTime LastAvailableTimeInUtc { get; }
    public TenantLog(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public TenantLog(ClientRuntimeContext context, ObjectPath objectPath);
    public DateTime get_LastAvailableTimeInUtc();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public ClientObjectList`1<TenantLogEntry> GetEntries(DateTime beginDateTimeUtc, DateTime endDateTimeUtc, UInt32 nRows);
    [RemoteAttribute]
public ClientObjectList`1<TenantLogEntry> GetEntriesBySource(DateTime beginDateTimeUtc, DateTime endDateTimeUtc, UInt32 nRows, int source);
    [RemoteAttribute]
public ClientObjectList`1<TenantLogEntry> GetEntriesByUser(DateTime beginDateTimeUtc, DateTime endDateTimeUtc, UInt32 nRows, string user);
    [RemoteAttribute]
public ClientObjectList`1<TenantLogEntry> GetEntriesByCorrelationId(DateTime beginDateTimeUtc, DateTime endDateTimeUtc, UInt32 nRows, Guid correlationId);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantLogEntry")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantLogEntry : ClientObject {
    [RemoteAttribute]
public int CategoryId { get; public set; }
    [RemoteAttribute]
public Guid CorrelationId { get; public set; }
    [RemoteAttribute]
public string Message { get; public set; }
    [RemoteAttribute]
public int Source { get; public set; }
    [RemoteAttribute]
public DateTime TimestampUtc { get; public set; }
    [RemoteAttribute]
public string User { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantLogEntry(ClientRuntimeContext context, ObjectPath objectPath);
    public int get_CategoryId();
    public void set_CategoryId(int value);
    public Guid get_CorrelationId();
    public void set_CorrelationId(Guid value);
    public string get_Message();
    public void set_Message(string value);
    public int get_Source();
    public void set_Source(int value);
    public DateTime get_TimestampUtc();
    public void set_TimestampUtc(DateTime value);
    public string get_User();
    public void set_User(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantLogEntryPropertyNames : object {
    public static string CategoryId;
    public static string CorrelationId;
    public static string Message;
    public static string Source;
    public static string TimestampUtc;
    public static string User;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantLogPropertyNames : object {
    public static string LastAvailableTimeInUtc;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantOutOfBoxSiteTemplateSettings")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantOutOfBoxSiteTemplateSettings : ClientValueObject {
    private Guid m_id;
    private bool m_isHidden;
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public bool IsHidden { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public Guid get_Id();
    public void set_Id(Guid value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantPropertyNames : object {
    public static string AddressbarLinkPermission;
    public static string AIBuilderDefaultPowerAppsEnvironment;
    public static string AIBuilderEnabled;
    public static string AIBuilderEnabledInContentCenter;
    public static string AIBuilderSiteInfoList;
    public static string AIBuilderSiteList;
    public static string AIBuilderSiteListFileName;
    public static string AllOrganizationSecurityGroupId;
    public static string AllowAnonymousMeetingParticipantsToAccessWhiteboards;
    public static string AllowCommentsTextOnEmailEnabled;
    public static string AllowDownloadingNonWebViewableFiles;
    public static string AllowedDomainListForSyncClient;
    public static string AllowEditing;
    public static string AllowEveryoneExceptExternalUsersClaimInPrivateSite;
    public static string AllowGuestUserShareToUsersNotInSiteCollection;
    public static string AllowLimitedAccessOnUnmanagedDevices;
    public static string AllowOverrideForBlockUserInfoVisibility;
    public static string AllowSelectSecurityGroupsInSPSitesList;
    public static string AllowSelectSGsInODBListInTenant;
    public static string AllowSensitivityLabelOnRecords;
    public static string AllowSharingOutsideRestrictedAccessControlGroups;
    public static string AmplifyAdminSettings;
    public static string AnyoneLinkTrackUsers;
    public static string AppBypassInformationBarriers;
    public static string ApplyAppEnforcedRestrictionsToAdHocRecipients;
    public static string AppOnlyBypassPeoplePickerPolicies;
    public static string ArchiveRedirectUrl;
    public static string AuthContextResilienceMode;
    public static string AutofillColumnsEnabled;
    public static string AutofillColumnsSiteInfoList;
    public static string AutofillColumnsSiteList;
    public static string AutofillColumnsSiteListFileName;
    public static string BccExternalSharingInvitations;
    public static string BccExternalSharingInvitationsList;
    public static string BlockAccessOnUnmanagedDevices;
    public static string BlockAppAccessWithAuthenticationContext;
    public static string BlockDownloadFileTypeIds;
    public static string BlockDownloadFileTypePolicy;
    public static string BlockDownloadLinksFileType;
    public static string BlockDownloadOfAllFilesForGuests;
    public static string BlockDownloadOfAllFilesOnUnmanagedDevices;
    public static string BlockDownloadOfViewableFilesForGuests;
    public static string BlockDownloadOfViewableFilesOnUnmanagedDevices;
    public static string BlockMacSync;
    public static string BlockSendLabelMismatchEmail;
    public static string BlockUserInfoVisibility;
    public static string BlockUserInfoVisibilityInOneDrive;
    public static string BlockUserInfoVisibilityInSharePoint;
    public static string BonusStorageQuotaMB;
    public static string BusinessConnectivityServiceDisabled;
    public static string CommentsOnFilesDisabled;
    public static string CommentsOnListItemsDisabled;
    public static string CommentsOnSitePagesDisabled;
    public static string CompatibilityRange;
    public static string ConditionalAccessPolicy;
    public static string ConditionalAccessPolicyErrorHelpLink;
    public static string ContentSecurityPolicyConfigSynced;
    public static string ContentSecurityPolicyEnforcement;
    public static string ContentTypeSyncSiteTemplatesList;
    public static string CoreBlockGuestsAsSiteAdmin;
    public static string CoreDefaultLinkToExistingAccess;
    public static string CoreDefaultShareLinkRole;
    public static string CoreDefaultShareLinkScope;
    public static string CoreLoopDefaultSharingLinkRole;
    public static string CoreLoopDefaultSharingLinkScope;
    public static string CoreLoopSharingCapability;
    public static string CoreRequestFilesLinkEnabled;
    public static string CoreRequestFilesLinkExpirationInDays;
    public static string CoreSharingCapability;
    public static string CustomizedExternalSharingServiceUrl;
    public static string DefaultContentCenterSite;
    public static string DefaultLinkPermission;
    public static string DefaultODBMode;
    public static string DefaultSharingLinkType;
    public static string DelayDenyAddAndCustomizePagesEnforcement;
    public static string DenySelectSecurityGroupsInSPSitesList;
    public static string DenySelectSGsInODBListInTenant;
    public static string DisableAddToOneDrive;
    public static string DisableBackToClassic;
    public static string DisableCustomAppAuthentication;
    public static string DisabledModernListTemplateIds;
    public static string DisableDocumentLibraryDefaultLabeling;
    public static string DisabledWebPartIds;
    public static string DisableOutlookPSTVersionTrimming;
    public static string DisablePersonalListCreation;
    public static string DisableReportProblemDialog;
    public static string DisableSpacesActivation;
    public static string DisableVivaConnectionsAnalytics;
    public static string DisallowInfectedFileDownload;
    public static string DisplayNamesOfFileViewers;
    public static string DisplayNamesOfFileViewersInSpo;
    public static string DisplayStartASiteOption;
    public static string DocumentUnderstandingEnabled;
    public static string DocumentUnderstandingSiteInfoList;
    public static string DocumentUnderstandingSiteList;
    public static string DocumentUnderstandingSiteListFileName;
    public static string EmailAttestationEnabled;
    public static string EmailAttestationReAuthDays;
    public static string EmailAttestationRequired;
    public static string EnableAIPIntegration;
    public static string EnableAutoExpirationVersionTrim;
    public static string EnableAutoNewsDigest;
    public static string EnableAzureADB2BIntegration;
    public static string EnabledFlightAllowAADB2BSkipCheckingOTP;
    public static string EnableDirectToCustomerBilling;
    public static string EnableDiscoverableByOrganizationForVideos;
    public static string EnableGuestSignInAcceleration;
    public static string EnableMediaReactions;
    public static string EnableMinimumVersionRequirement;
    public static string EnableMipSiteLabel;
    public static string EnablePromotedFileHandlers;
    public static string EnableRestrictedAccessControl;
    public static string EnableSensitivityLabelForPDF;
    public static string EnableSiteArchive;
    public static string EnableTenantRestrictionsInsights;
    public static string EnableVersionExpirationSetting;
    public static string ESignatureEnabled;
    public static string ESignatureSiteInfoList;
    public static string ESignatureSiteList;
    public static string ESignatureSiteListFileName;
    public static string ESignatureThirdPartyProviderInfoList;
    public static string ESignatureThirdPartyProviderList;
    public static string ESignatureThirdPartyProviderListFileName;
    public static string ExcludedBlockDownloadGroupIds;
    public static string ExcludedFileExtensionsForSyncClient;
    public static string ExemptNativeUsersFromTenantLevelRestricedAccessControl;
    public static string ExpireVersionsAfterDays;
    public static string ExternalServicesEnabled;
    public static string ExternalUserExpirationRequired;
    public static string ExternalUserExpireInDays;
    public static string FileAnonymousLinkType;
    public static string FilePickerExternalImageSearchEnabled;
    public static string FileVersionPolicyXml;
    public static string FolderAnonymousLinkType;
    public static string GuestSharingGroupAllowListInTenant;
    public static string GuestSharingGroupAllowListInTenantByGroupId;
    public static string GuestSharingGroupAllowListInTenantByPrincipalIdentity;
    public static string HasAdminCompletedCUConfiguration;
    public static string HasIntelligentContentServicesCapability;
    public static string HasTopicExperiencesCapability;
    public static string HideDefaultThemes;
    public static string HideSyncButtonOnDocLib;
    public static string HideSyncButtonOnODB;
    public static string IBImplicitGroupBased;
    public static string ImageTaggingOption;
    public static string ImageTaggingSiteInfoList;
    public static string ImageTaggingSiteList;
    public static string ImageTaggingSiteListFileName;
    public static string IncludeAtAGlanceInShareEmails;
    public static string InformationBarriersSuspension;
    public static string IPAddressAllowList;
    public static string IPAddressEnforcement;
    public static string IPAddressWACTokenLifetime;
    public static string IsAppBarTemporarilyDisabled;
    public static string IsCollabMeetingNotesFluidEnabled;
    public static string IsDataAccessInCardDesignerEnabled;
    public static string IsEnableAppAuthPopUpEnabled;
    public static string IsFluidEnabled;
    public static string IsHubSitesMultiGeoFlightEnabled;
    public static string IsLoopEnabled;
    public static string IsMnAFlightEnabled;
    public static string IsMultiGeo;
    public static string IsMultipleHomeSitesFlightEnabled;
    public static string IsMultipleVivaConnectionsFlightEnabled;
    public static string IsUnmanagedSyncClientForTenantRestricted;
    public static string IsUnmanagedSyncClientRestrictionFlightEnabled;
    public static string IsVivaHomeFlightEnabled;
    public static string IsVivaHomeGAFlightEnabled;
    public static string IsWBFluidEnabled;
    public static string LabelMismatchEmailHelpLink;
    public static string LegacyAuthProtocolsEnabled;
    public static string LegacyBrowserAuthProtocolsEnabled;
    public static string LimitedAccessFileType;
    public static string MachineLearningCaptureEnabled;
    public static string MajorVersionLimit;
    public static string MarkAllFilesAsSensitiveByDefault;
    public static string MarkNewFilesSensitiveByDefault;
    public static string MassDeleteNotificationDisabled;
    public static string MediaTranscription;
    public static string MediaTranscriptionAutomaticFeatures;
    public static string MobileFriendlyUrlEnabledInTenant;
    public static string NoAccessRedirectUrl;
    public static string NotificationsInOneDriveForBusinessEnabled;
    public static string NotificationsInSharePointEnabled;
    public static string NotifyOwnersWhenInvitationsAccepted;
    public static string NotifyOwnersWhenItemsReshared;
    public static string OCRAdminODBGroupList;
    public static string OCRAdminODBUserList;
    public static string OCRAdminSiteInfoList;
    public static string OCRAdminSiteList;
    public static string OCRAdminSiteListFileName;
    public static string OCRComplianceODBGroupList;
    public static string OCRComplianceODBUserList;
    public static string OCRComplianceSiteInfoList;
    public static string OCRComplianceSiteList;
    public static string OCRComplianceSiteListFileName;
    public static string OCRModeForAdminODBs;
    public static string OCRModeForAdminSites;
    public static string OCRModeForComplianceODBs;
    public static string OCRModeForComplianceSites;
    public static string ODBAccessRequests;
    public static string ODBMembersCanShare;
    public static string ODBSensitivityRefreshWindowInHours;
    public static string ODBSharingCapability;
    public static string ODBTranslationEnabled;
    public static string OfficeClientADALDisabled;
    public static string OneDriveBlockGuestsAsSiteAdmin;
    public static string OneDriveDefaultLinkToExistingAccess;
    public static string OneDriveDefaultShareLinkRole;
    public static string OneDriveDefaultShareLinkScope;
    public static string OneDriveForGuestsEnabled;
    public static string OneDriveLoopDefaultSharingLinkRole;
    public static string OneDriveLoopDefaultSharingLinkScope;
    public static string OneDriveLoopSharingCapability;
    public static string OneDriveRequestFilesLinkEnabled;
    public static string OneDriveRequestFilesLinkExpirationInDays;
    public static string OneDriveStorageQuota;
    public static string OptOutOfGrooveBlock;
    public static string OptOutOfGrooveSoftBlock;
    public static string OrgNewsSiteUrl;
    public static string OrphanedPersonalSitesRetentionPeriod;
    public static string OwnerAnonymousNotification;
    public static string PermissiveBrowserFileHandlingOverride;
    public static string PrebuiltEnabled;
    public static string PrebuiltSiteInfoList;
    public static string PrebuiltSiteList;
    public static string PrebuiltSiteListFileName;
    public static string PreventExternalUsersFromResharing;
    public static string ProvisionSharedWithEveryoneFolder;
    public static string PublicCdnAllowedFileTypes;
    public static string PublicCdnEnabled;
    public static string PublicCdnOrigins;
    public static string RecycleBinRetentionPeriod;
    public static string ReduceTempTokenLifetimeEnabled;
    public static string ReduceTempTokenLifetimeValue;
    public static string RequireAcceptingAccountMatchInvitedAccount;
    public static string RequireAnonymousLinksExpireInDays;
    public static string ResourceQuota;
    public static string ResourceQuotaAllocated;
    public static string RestrictedAccessControlForOneDriveErrorHelpLink;
    public static string RestrictedAccessControlforSitesErrorHelpLink;
    public static string RestrictedOneDriveLicense;
    public static string RestrictedSharePointLicense;
    public static string RootSiteUrl;
    public static string SearchResolveExactEmailOrUPN;
    public static string SelfServiceSiteCreationDisabled;
    public static string SharePointAddInsDisabled;
    public static string SharingAllowedDomainList;
    public static string SharingBlockedDomainList;
    public static string SharingCapability;
    public static string SharingDomainRestrictionMode;
    public static string ShowAllUsersClaim;
    public static string ShowEveryoneClaim;
    public static string ShowEveryoneExceptExternalUsersClaim;
    public static string ShowNGSCDialogForSyncOnODB;
    public static string ShowOpenInDesktopOptionForSyncedFiles;
    public static string ShowPeoplePickerGroupSuggestionsForIB;
    public static string ShowPeoplePickerSuggestionsForGuestUsers;
    public static string SignInAccelerationDomain;
    public static string SiteOwnerManageLegacyServicePrincipalEnabled;
    public static string SocialBarOnSitePagesDisabled;
    public static string SpecialCharactersStateInFileFolderNames;
    public static string SPJitDlpPolicyData;
    public static string StartASiteFormUrl;
    public static string StopNew2010Workflows;
    public static string StopNew2013Workflows;
    public static string StorageQuota;
    public static string StorageQuotaAllocated;
    public static string StreamLaunchConfig;
    public static string StreamLaunchConfigLastUpdated;
    public static string StreamLaunchConfigUpdateCount;
    public static string SyncPrivacyProfileProperties;
    public static string SyntexBillingSubscriptionSettings;
    public static string SyntexInternalFeatureFlags;
    public static string SyntexMediaAnalyticsSettings;
    public static string SyntexPaygFeatureActivations;
    public static string SyntexPlaybackTranscriptTranslationSettings;
    public static string SyntexPowerAppsEnvironmentsContext;
    public static string TaxonomyTaggingEnabled;
    public static string TaxonomyTaggingSiteInfoList;
    public static string TaxonomyTaggingSiteList;
    public static string TaxonomyTaggingSiteListFileName;
    public static string TlsTokenBindingPolicyValue;
    public static string TranslationEnabled;
    public static string TranslationSiteInfoList;
    public static string TranslationSiteList;
    public static string TranslationSiteListFileName;
    public static string UniversalAnnotationDisabled;
    public static string UseFindPeopleInPeoplePicker;
    public static string UsePersistentCookiesForExplorerView;
    public static string ViewersCanCommentOnMediaDisabled;
    public static string ViewInFileExplorerEnabled;
    public static string WhoCanShareAllowListInTenant;
    public static string WhoCanShareAllowListInTenantByGroupId;
    public static string WhoCanShareAllowListInTenantByPrincipalIdentity;
    public static string Workflow2010Disabled;
    public static string Workflows2013State;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesign")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesign : ClientObject {
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public Guid DesignPackageId { get; public set; }
    [RemoteAttribute]
public TenantTemplateDesignType DesignType { get; public set; }
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public bool IsDefault { get; public set; }
    [RemoteAttribute]
public string PreviewImageAltText { get; public set; }
    [RemoteAttribute]
public string PreviewImageUrl { get; public set; }
    [RemoteAttribute]
public Guid[] SiteScriptIds { get; public set; }
    [RemoteAttribute]
public string ThumbnailUrl { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public int Version { get; public set; }
    [RemoteAttribute]
public string WebTemplate { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantSiteDesign(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Description();
    public void set_Description(string value);
    public Guid get_DesignPackageId();
    public void set_DesignPackageId(Guid value);
    public TenantTemplateDesignType get_DesignType();
    public void set_DesignType(TenantTemplateDesignType value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public string get_PreviewImageAltText();
    public void set_PreviewImageAltText(string value);
    public string get_PreviewImageUrl();
    public void set_PreviewImageUrl(string value);
    public Guid[] get_SiteScriptIds();
    public void set_SiteScriptIds(Guid[] value);
    public string get_ThumbnailUrl();
    public void set_ThumbnailUrl(string value);
    public string get_Title();
    public void set_Title(string value);
    public int get_Version();
    public void set_Version(int value);
    public string get_WebTemplate();
    public void set_WebTemplate(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignCreationInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignCreationInfo : ClientValueObject {
    private string m_description;
    private Guid m_designPackageId;
    private bool m_isDefault;
    private string m_previewImageAltText;
    private string m_previewImageUrl;
    private Guid[] m_siteScriptIds;
    private string m_thumbnailUrl;
    private string m_title;
    private string m_webTemplate;
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public Guid DesignPackageId { get; public set; }
    [RemoteAttribute]
public bool IsDefault { get; public set; }
    [RemoteAttribute]
public string PreviewImageAltText { get; public set; }
    [RemoteAttribute]
public string PreviewImageUrl { get; public set; }
    [RemoteAttribute]
public Guid[] SiteScriptIds { get; public set; }
    [RemoteAttribute]
public string ThumbnailUrl { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public string WebTemplate { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Description();
    public void set_Description(string value);
    public Guid get_DesignPackageId();
    public void set_DesignPackageId(Guid value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public string get_PreviewImageAltText();
    public void set_PreviewImageAltText(string value);
    public string get_PreviewImageUrl();
    public void set_PreviewImageUrl(string value);
    public Guid[] get_SiteScriptIds();
    public void set_SiteScriptIds(Guid[] value);
    public string get_ThumbnailUrl();
    public void set_ThumbnailUrl(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_WebTemplate();
    public void set_WebTemplate(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPrincipal")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPrincipal : ClientObject {
    [RemoteAttribute]
public string DisplayName { get; public set; }
    [RemoteAttribute]
public string PrincipalName { get; public set; }
    [RemoteAttribute]
public TenantSiteDesignPrincipalRights Rights { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantSiteDesignPrincipal(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_PrincipalName();
    public void set_PrincipalName(string value);
    public TenantSiteDesignPrincipalRights get_Rights();
    public void set_Rights(TenantSiteDesignPrincipalRights value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPrincipalPropertyNames : object {
    public static string DisplayName;
    public static string PrincipalName;
    public static string Rights;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPrincipalRights : Enum {
    public ulong value__;
    public static TenantSiteDesignPrincipalRights None;
    public static TenantSiteDesignPrincipalRights View;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPropertyNames : object {
    public static string Description;
    public static string DesignPackageId;
    public static string DesignType;
    public static string Id;
    public static string IsDefault;
    public static string PreviewImageAltText;
    public static string PreviewImageUrl;
    public static string SiteScriptIds;
    public static string ThumbnailUrl;
    public static string Title;
    public static string Version;
    public static string WebTemplate;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignRun")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignRun : ClientObject {
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public Guid SiteDesignId { get; public set; }
    [RemoteAttribute]
public string SiteDesignTitle { get; public set; }
    [RemoteAttribute]
public int SiteDesignVersion { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public Guid WebId { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantSiteDesignRun(ClientRuntimeContext context, ObjectPath objectPath);
    public Guid get_Id();
    public void set_Id(Guid value);
    public Guid get_SiteDesignId();
    public void set_SiteDesignId(Guid value);
    public string get_SiteDesignTitle();
    public void set_SiteDesignTitle(string value);
    public int get_SiteDesignVersion();
    public void set_SiteDesignVersion(int value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public Guid get_WebId();
    public void set_WebId(Guid value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignRunPropertyNames : object {
    public static string Id;
    public static string SiteDesignId;
    public static string SiteDesignTitle;
    public static string SiteDesignVersion;
    public static string SiteId;
    public static string WebId;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignTask")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignTask : ClientObject {
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public string LogonName { get; public set; }
    [RemoteAttribute]
public Guid SiteDesignId { get; public set; }
    [RemoteAttribute]
public Guid SiteId { get; public set; }
    [RemoteAttribute]
public Guid WebId { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantSiteDesignTask(ClientRuntimeContext context, ObjectPath objectPath);
    public Guid get_Id();
    public void set_Id(Guid value);
    public string get_LogonName();
    public void set_LogonName(string value);
    public Guid get_SiteDesignId();
    public void set_SiteDesignId(Guid value);
    public Guid get_SiteId();
    public void set_SiteId(Guid value);
    public Guid get_WebId();
    public void set_WebId(Guid value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignTaskPropertyNames : object {
    public static string Id;
    public static string LogonName;
    public static string SiteDesignId;
    public static string SiteId;
    public static string WebId;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScript")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScript : ClientObject {
    [RemoteAttribute]
public string Content { get; public set; }
    [RemoteAttribute]
public Stream ContentStream { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public bool IsSiteScriptPackage { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public int Version { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantSiteScript(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Content();
    public void set_Content(string value);
    public Stream get_ContentStream();
    public void set_ContentStream(Stream value);
    public string get_Description();
    public void set_Description(string value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public bool get_IsSiteScriptPackage();
    public void set_IsSiteScriptPackage(bool value);
    public string get_Title();
    public void set_Title(string value);
    public int get_Version();
    public void set_Version(int value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptActionOutcome : Enum {
    public ulong value__;
    public static TenantSiteScriptActionOutcome Success;
    public static TenantSiteScriptActionOutcome Failure;
    public static TenantSiteScriptActionOutcome NoOp;
    public static TenantSiteScriptActionOutcome SucceededWithException;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptActionResult")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptActionResult : ClientObject {
    [RemoteAttribute]
public TenantSiteScriptActionOutcome Outcome { get; public set; }
    [RemoteAttribute]
public string OutcomeText { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantSiteScriptActionResult(ClientRuntimeContext context, ObjectPath objectPath);
    public TenantSiteScriptActionOutcome get_Outcome();
    public void set_Outcome(TenantSiteScriptActionOutcome value);
    public string get_OutcomeText();
    public void set_OutcomeText(string value);
    public string get_Title();
    public void set_Title(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptActionResultPropertyNames : object {
    public static string Outcome;
    public static string OutcomeText;
    public static string Title;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptActionStatus")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptActionStatus : ClientObject {
    [RemoteAttribute]
public int ActionIndex { get; public set; }
    [RemoteAttribute]
public Guid ActionKey { get; public set; }
    [RemoteAttribute]
public string ActionTitle { get; public set; }
    [RemoteAttribute]
public int OrdinalIndex { get; public set; }
    [RemoteAttribute]
public TenantSiteScriptActionOutcome OutcomeCode { get; public set; }
    [RemoteAttribute]
public string OutcomeText { get; public set; }
    [RemoteAttribute]
public Guid SiteScriptID { get; public set; }
    [RemoteAttribute]
public int SiteScriptIndex { get; public set; }
    [RemoteAttribute]
public string SiteScriptTitle { get; public set; }
    [EditorBrowsableAttribute("1")]
public TenantSiteScriptActionStatus(ClientRuntimeContext context, ObjectPath objectPath);
    public int get_ActionIndex();
    public void set_ActionIndex(int value);
    public Guid get_ActionKey();
    public void set_ActionKey(Guid value);
    public string get_ActionTitle();
    public void set_ActionTitle(string value);
    public int get_OrdinalIndex();
    public void set_OrdinalIndex(int value);
    public TenantSiteScriptActionOutcome get_OutcomeCode();
    public void set_OutcomeCode(TenantSiteScriptActionOutcome value);
    public string get_OutcomeText();
    public void set_OutcomeText(string value);
    public Guid get_SiteScriptID();
    public void set_SiteScriptID(Guid value);
    public int get_SiteScriptIndex();
    public void set_SiteScriptIndex(int value);
    public string get_SiteScriptTitle();
    public void set_SiteScriptTitle(string value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptActionStatusPropertyNames : object {
    public static string ActionIndex;
    public static string ActionKey;
    public static string ActionTitle;
    public static string OrdinalIndex;
    public static string OutcomeCode;
    public static string OutcomeText;
    public static string SiteScriptID;
    public static string SiteScriptIndex;
    public static string SiteScriptTitle;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptCreationInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptCreationInfo : ClientValueObject {
    private string m_content;
    private Stream m_contentStream;
    private string m_description;
    private string m_title;
    [RemoteAttribute]
public string Content { get; public set; }
    [RemoteAttribute]
public Stream ContentStream { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_Content();
    public void set_Content(string value);
    public Stream get_ContentStream();
    public void set_ContentStream(Stream value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Title();
    public void set_Title(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptPropertyNames : object {
    public static string Content;
    public static string ContentStream;
    public static string Description;
    public static string Id;
    public static string IsSiteScriptPackage;
    public static string Title;
    public static string Version;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptSerializationInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptSerializationInfo : ClientValueObject {
    private bool m_includeBranding;
    private String[] m_includedLists;
    private String[] m_includedPages;
    private bool m_includeLinksToExportedItems;
    private bool m_includeRegionalSettings;
    private bool m_includeSiteExternalSharingCapability;
    private bool m_includeTheme;
    [RemoteAttribute]
public bool IncludeBranding { get; public set; }
    [RemoteAttribute]
public String[] IncludedLists { get; public set; }
    [RemoteAttribute]
public String[] IncludedPages { get; public set; }
    [RemoteAttribute]
public bool IncludeLinksToExportedItems { get; public set; }
    [RemoteAttribute]
public bool IncludeRegionalSettings { get; public set; }
    [RemoteAttribute]
public bool IncludeSiteExternalSharingCapability { get; public set; }
    [RemoteAttribute]
public bool IncludeTheme { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_IncludeBranding();
    public void set_IncludeBranding(bool value);
    public String[] get_IncludedLists();
    public void set_IncludedLists(String[] value);
    public String[] get_IncludedPages();
    public void set_IncludedPages(String[] value);
    public bool get_IncludeLinksToExportedItems();
    public void set_IncludeLinksToExportedItems(bool value);
    public bool get_IncludeRegionalSettings();
    public void set_IncludeRegionalSettings(bool value);
    public bool get_IncludeSiteExternalSharingCapability();
    public void set_IncludeSiteExternalSharingCapability(bool value);
    public bool get_IncludeTheme();
    public void set_IncludeTheme(bool value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptSerializationResult")]
public class Microsoft.Online.SharePoint.TenantAdministration.TenantSiteScriptSerializationResult : ClientValueObject {
    private string m_jSON;
    private Stream m_packageStream;
    private String[] m_warnings;
    [RemoteAttribute]
public string JSON { get; public set; }
    [RemoteAttribute]
public Stream PackageStream { get; public set; }
    [RemoteAttribute]
public String[] Warnings { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_JSON();
    public void set_JSON(string value);
    public Stream get_PackageStream();
    public void set_PackageStream(Stream value);
    public String[] get_Warnings();
    public void set_Warnings(String[] value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
public enum Microsoft.Online.SharePoint.TenantAdministration.TenantTemplateDesignType : Enum {
    public ulong value__;
    public static TenantTemplateDesignType Site;
    public static TenantTemplateDesignType List;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.UpdateGroupSitePropertiesParameters")]
public class Microsoft.Online.SharePoint.TenantAdministration.UpdateGroupSitePropertiesParameters : ClientValueObject {
    private long m_storageMaximumLevel;
    private long m_storageWarningLevel;
    [RemoteAttribute]
public long storageMaximumLevel { get; public set; }
    [RemoteAttribute]
public long storageWarningLevel { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public long get_storageMaximumLevel();
    public void set_storageMaximumLevel(long value);
    public long get_storageWarningLevel();
    public void set_storageWarningLevel(long value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.UserInfo")]
public class Microsoft.Online.SharePoint.TenantAdministration.UserInfo : ClientValueObject {
    private string m_email;
    private string m_loginName;
    private string m_name;
    private string m_userPrincipalName;
    [RemoteAttribute]
public string email { get; public set; }
    [RemoteAttribute]
public string loginName { get; public set; }
    [RemoteAttribute]
public string name { get; public set; }
    [RemoteAttribute]
public string userPrincipalName { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_email();
    public void set_email(string value);
    public string get_loginName();
    public void set_loginName(string value);
    public string get_name();
    public void set_name(string value);
    public string get_userPrincipalName();
    public void set_userPrincipalName(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.UserMigrationProperties")]
public class Microsoft.Online.SharePoint.TenantAdministration.UserMigrationProperties : ClientObject {
    [RemoteAttribute]
public OdbMigrationStatus OdbMigrationStatus { get; }
    [RemoteAttribute]
public string SourcePuid { get; }
    [RemoteAttribute]
public string SourceUpn { get; }
    [RemoteAttribute]
public string TargetPuid { get; }
    [RemoteAttribute]
public string TargetUpn { get; }
    [EditorBrowsableAttribute("1")]
public UserMigrationProperties(ClientRuntimeContext context, ObjectPath objectPath);
    public OdbMigrationStatus get_OdbMigrationStatus();
    public string get_SourcePuid();
    public string get_SourceUpn();
    public string get_TargetPuid();
    public string get_TargetUpn();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.UserMigrationPropertiesEnumerable")]
public class Microsoft.Online.SharePoint.TenantAdministration.UserMigrationPropertiesEnumerable : ClientObjectCollection`1<UserMigrationProperties> {
    [RemoteAttribute]
public string NextStartToken { get; }
    [EditorBrowsableAttribute("1")]
public UserMigrationPropertiesEnumerable(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_NextStartToken();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantAdministration.UserMigrationPropertiesEnumerableFilter")]
public class Microsoft.Online.SharePoint.TenantAdministration.UserMigrationPropertiesEnumerableFilter : ClientValueObject {
    private string m_batchId;
    private string m_startToken;
    [RemoteAttribute]
public string BatchId { get; public set; }
    [RemoteAttribute]
public string StartToken { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_BatchId();
    public void set_BatchId(string value);
    public string get_StartToken();
    public void set_StartToken(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.UserMigrationPropertiesEnumerablePropertyNames : object {
    public static string NextStartToken;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantAdministration.UserMigrationPropertiesPropertyNames : object {
    public static string OdbMigrationStatus;
    public static string SourcePuid;
    public static string SourceUpn;
    public static string TargetPuid;
    public static string TargetUpn;
}
public enum Microsoft.Online.SharePoint.TenantAdministration.WorkloadEnum : Enum {
    public int value__;
    public static WorkloadEnum SharePoint;
    public static WorkloadEnum OneDriveForBusiness;
}
public enum Microsoft.Online.SharePoint.TenantManagement.BlockDownloadLinksFileTypes : Enum {
    public int value__;
    public static BlockDownloadLinksFileTypes WebPreviewableFiles;
    public static BlockDownloadLinksFileTypes ServerRenderedFilesOnly;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.ExternalUser")]
public class Microsoft.Online.SharePoint.TenantManagement.ExternalUser : ClientObject {
    [RemoteAttribute]
public string AcceptedAs { get; }
    [RemoteAttribute]
public string DisplayName { get; }
    [RemoteAttribute]
public string InvitedAs { get; }
    [RemoteAttribute]
public string InvitedBy { get; }
    [RemoteAttribute]
public bool IsCrossTenant { get; }
    [RemoteAttribute]
public string LoginName { get; }
    [RemoteAttribute]
public string UniqueId { get; }
    [RemoteAttribute]
public int UserId { get; }
    [RemoteAttribute]
public DateTime WhenCreated { get; }
    [EditorBrowsableAttribute("1")]
public ExternalUser(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_AcceptedAs();
    public string get_DisplayName();
    public string get_InvitedAs();
    public string get_InvitedBy();
    public bool get_IsCrossTenant();
    public string get_LoginName();
    public string get_UniqueId();
    public int get_UserId();
    public DateTime get_WhenCreated();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.ExternalUserCollection")]
public class Microsoft.Online.SharePoint.TenantManagement.ExternalUserCollection : ClientObjectCollection`1<ExternalUser> {
    [EditorBrowsableAttribute("1")]
public ExternalUserCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ExternalUser GetById(string uniqueId);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.ExternalUserPropertyNames : object {
    public static string AcceptedAs;
    public static string DisplayName;
    public static string InvitedAs;
    public static string InvitedBy;
    public static string IsCrossTenant;
    public static string LoginName;
    public static string UniqueId;
    public static string UserId;
    public static string WhenCreated;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.GetExternalUsersResults")]
public class Microsoft.Online.SharePoint.TenantManagement.GetExternalUsersResults : ClientObject {
    [RemoteAttribute]
public ExternalUserCollection ExternalUserCollection { get; }
    [RemoteAttribute]
public int TotalUserCount { get; }
    [RemoteAttribute]
public int UserCollectionPosition { get; }
    [EditorBrowsableAttribute("1")]
public GetExternalUsersResults(ClientRuntimeContext context, ObjectPath objectPath);
    public ExternalUserCollection get_ExternalUserCollection();
    public int get_TotalUserCount();
    public int get_UserCollectionPosition();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.GetExternalUsersResultsObjectPropertyNames : object {
    public static string ExternalUserCollection;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.GetExternalUsersResultsPropertyNames : object {
    public static string TotalUserCount;
    public static string UserCollectionPosition;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.GroupCreationParams")]
public class Microsoft.Online.SharePoint.TenantManagement.GroupCreationParams : ClientObject {
    [RemoteAttribute]
public string Classification { get; public set; }
    [RemoteAttribute]
public String[] CreationOptions { get; public set; }
    [RemoteAttribute]
public string Description { get; public set; }
    [RemoteAttribute]
public String[] Owners { get; public set; }
    public GroupCreationParams(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public GroupCreationParams(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Classification();
    public void set_Classification(string value);
    public String[] get_CreationOptions();
    public void set_CreationOptions(String[] value);
    public string get_Description();
    public void set_Description(string value);
    public String[] get_Owners();
    public void set_Owners(String[] value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.GroupCreationParamsPropertyNames : object {
    public static string Classification;
    public static string CreationOptions;
    public static string Description;
    public static string Owners;
}
public enum Microsoft.Online.SharePoint.TenantManagement.ImageTaggingChoice : Enum {
    public int value__;
    public static ImageTaggingChoice Disabled;
    public static ImageTaggingChoice Basic;
    public static ImageTaggingChoice Enhanced;
}
public enum Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesJobError : Enum {
    public int value__;
    public static ImportProfilePropertiesJobError NoError;
    public static ImportProfilePropertiesJobError InternalError;
    public static ImportProfilePropertiesJobError DataFileNotExist;
    public static ImportProfilePropertiesJobError DataFileNotInTenant;
    public static ImportProfilePropertiesJobError DataFileTooBig;
    public static ImportProfilePropertiesJobError InvalidDataFile;
    public static ImportProfilePropertiesJobError ImportCompleteWithError;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesJobInfo")]
public class Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesJobInfo : ClientObject {
    [RemoteAttribute]
public ImportProfilePropertiesJobError Error { get; public set; }
    [RemoteAttribute]
public string ErrorMessage { get; public set; }
    [RemoteAttribute]
public Guid JobId { get; public set; }
    [RemoteAttribute]
public string LogFolderUri { get; public set; }
    [RemoteAttribute]
public string SourceUri { get; public set; }
    [RemoteAttribute]
public ImportProfilePropertiesJobState State { get; public set; }
    [EditorBrowsableAttribute("1")]
public ImportProfilePropertiesJobInfo(ClientRuntimeContext context, ObjectPath objectPath);
    public ImportProfilePropertiesJobError get_Error();
    public void set_Error(ImportProfilePropertiesJobError value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public Guid get_JobId();
    public void set_JobId(Guid value);
    public string get_LogFolderUri();
    public void set_LogFolderUri(string value);
    public string get_SourceUri();
    public void set_SourceUri(string value);
    public ImportProfilePropertiesJobState get_State();
    public void set_State(ImportProfilePropertiesJobState value);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesJobInfoPropertyNames : object {
    public static string Error;
    public static string ErrorMessage;
    public static string JobId;
    public static string LogFolderUri;
    public static string SourceUri;
    public static string State;
}
public enum Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesJobState : Enum {
    public int value__;
    public static ImportProfilePropertiesJobState Unknown;
    public static ImportProfilePropertiesJobState Submitted;
    public static ImportProfilePropertiesJobState Processing;
    public static ImportProfilePropertiesJobState Queued;
    public static ImportProfilePropertiesJobState Succeeded;
    public static ImportProfilePropertiesJobState Error;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesJobStatusCollection")]
public class Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesJobStatusCollection : ClientObjectCollection`1<ImportProfilePropertiesJobInfo> {
    [EditorBrowsableAttribute("1")]
public ImportProfilePropertiesJobStatusCollection(ClientRuntimeContext context, ObjectPath objectPath);
}
public enum Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesUserIdType : Enum {
    public int value__;
    public static ImportProfilePropertiesUserIdType Email;
    public static ImportProfilePropertiesUserIdType CloudId;
    public static ImportProfilePropertiesUserIdType PrincipalName;
}
public enum Microsoft.Online.SharePoint.TenantManagement.MediaTranscriptionAutomaticFeaturesPolicyType : Enum {
    public int value__;
    public static MediaTranscriptionAutomaticFeaturesPolicyType Enabled;
    public static MediaTranscriptionAutomaticFeaturesPolicyType Disabled;
}
public enum Microsoft.Online.SharePoint.TenantManagement.MediaTranscriptionPolicyType : Enum {
    public int value__;
    public static MediaTranscriptionPolicyType Enabled;
    public static MediaTranscriptionPolicyType Disabled;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.Office365Tenant")]
public class Microsoft.Online.SharePoint.TenantManagement.Office365Tenant : ClientObject {
    [RemoteAttribute]
public Role AddressbarLinkPermission { get; public set; }
    [RemoteAttribute]
public SharingState AllowAnonymousMeetingParticipantsToAccessWhiteboards { get; public set; }
    [RemoteAttribute]
public bool AllowCommentsTextOnEmailEnabled { get; public set; }
    [RemoteAttribute]
public bool AllowDownloadingNonWebViewableFiles { get; public set; }
    [RemoteAttribute]
public IList`1<Guid> AllowedDomainListForSyncClient { get; public set; }
    [RemoteAttribute]
public bool AllowEditing { get; public set; }
    [RemoteAttribute]
public bool AllowEveryoneExceptExternalUsersClaimInPrivateSite { get; public set; }
    [RemoteAttribute]
public bool AllowGuestUserShareToUsersNotInSiteCollection { get; public set; }
    [RemoteAttribute]
public bool AllowLimitedAccessOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool AllowOverrideForBlockUserInfoVisibility { get; public set; }
    [RemoteAttribute]
public IList`1<string> AllowSelectSecurityGroupsInSPSitesList { get; public set; }
    [RemoteAttribute]
public IList`1<string> AllowSelectSGsInODBList { get; public set; }
    [RemoteAttribute]
public bool AllowSharingOutsideRestrictedAccessControlGroups { get; public set; }
    [RemoteAttribute]
public bool AnyoneLinkTrackUsers { get; public set; }
    [RemoteAttribute]
public bool AppBypassInformationBarriers { get; public set; }
    [RemoteAttribute]
public bool ApplyAppEnforcedRestrictionsToAdHocRecipients { get; public set; }
    [RemoteAttribute]
public bool AppOnlyBypassPeoplePickerPolicies { get; public set; }
    [RemoteAttribute]
public SPResilienceModeType AuthContextResilienceMode { get; public set; }
    [RemoteAttribute]
public bool BccExternalSharingInvitations { get; public set; }
    [RemoteAttribute]
public string BccExternalSharingInvitationsList { get; public set; }
    [RemoteAttribute]
public bool BlockAccessOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool BlockAppAccessWithAuthenticationContext { get; public set; }
    [RemoteAttribute]
public SPBlockDownloadFileTypeId[] BlockDownloadFileTypeIds { get; }
    [RemoteAttribute]
public bool BlockDownloadFileTypePolicy { get; }
    [RemoteAttribute]
public BlockDownloadLinksFileTypes BlockDownloadLinksFileType { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfAllFilesForGuests { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfAllFilesOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfViewableFilesForGuests { get; public set; }
    [RemoteAttribute]
public bool BlockDownloadOfViewableFilesOnUnmanagedDevices { get; public set; }
    [RemoteAttribute]
public bool BlockMacSync { get; public set; }
    [RemoteAttribute]
public string BlockUserInfoVisibility { get; public set; }
    [RemoteAttribute]
public TenantBrowseUserInfoPolicyValue BlockUserInfoVisibilityInOneDrive { get; public set; }
    [RemoteAttribute]
public TenantBrowseUserInfoPolicyValue BlockUserInfoVisibilityInSharePoint { get; public set; }
    [RemoteAttribute]
public bool BusinessConnectivityServiceDisabled { get; public set; }
    [RemoteAttribute]
public bool CommentsOnFilesDisabled { get; public set; }
    [RemoteAttribute]
public bool CommentsOnListItemsDisabled { get; public set; }
    [RemoteAttribute]
public bool CommentsOnSitePagesDisabled { get; public set; }
    [RemoteAttribute]
public SPOConditionalAccessPolicyType ConditionalAccessPolicy { get; public set; }
    [RemoteAttribute]
public string ConditionalAccessPolicyErrorHelpLink { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<string> ContentTypeSyncSiteTemplatesList { get; public set; }
    [RemoteAttribute]
public SharingState CoreBlockGuestsAsSiteAdmin { get; public set; }
    [RemoteAttribute]
public bool CoreDefaultLinkToExistingAccess { get; public set; }
    [RemoteAttribute]
public Role CoreDefaultShareLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope CoreDefaultShareLinkScope { get; public set; }
    [RemoteAttribute]
public Role CoreLoopDefaultSharingLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope CoreLoopDefaultSharingLinkScope { get; public set; }
    [RemoteAttribute]
public bool CoreRequestFilesLinkEnabled { get; public set; }
    [RemoteAttribute]
public int CoreRequestFilesLinkExpirationInDays { get; public set; }
    [RemoteAttribute]
public SharingCapabilities CoreSharingCapability { get; public set; }
    [RemoteAttribute]
public string CustomizedExternalSharingServiceUrl { get; public set; }
    [RemoteAttribute]
public SiteInfoForSitePicker DefaultContentCenterSite { get; public set; }
    [RemoteAttribute]
public SharingPermissionType DefaultLinkPermission { get; public set; }
    [RemoteAttribute]
public string DefaultODBMode { get; public set; }
    [RemoteAttribute]
public SharingLinkType DefaultSharingLinkType { get; public set; }
    [RemoteAttribute]
public IList`1<string> DenySelectSecurityGroupsInSPSitesList { get; public set; }
    [RemoteAttribute]
public IList`1<string> DenySelectSGsInODBList { get; public set; }
    [RemoteAttribute]
public bool DisableAddToOneDrive { get; public set; }
    [RemoteAttribute]
public bool DisableBackToClassic { get; public set; }
    [RemoteAttribute]
public bool DisableCustomAppAuthentication { get; public set; }
    [RemoteAttribute]
public Guid[] DisabledModernListTemplateIds { get; public set; }
    [RemoteAttribute]
public bool DisableOutlookPSTVersionTrimming { get; public set; }
    [RemoteAttribute]
public bool DisablePersonalListCreation { get; public set; }
    [RemoteAttribute]
public bool DisableSpacesActivation { get; public set; }
    [RemoteAttribute]
public bool DisableVivaConnectionsAnalytics { get; public set; }
    [RemoteAttribute]
public bool DisplayStartASiteOption { get; public set; }
    [RemoteAttribute]
public bool EmailAttestationEnabled { get; public set; }
    [RemoteAttribute]
public int EmailAttestationReAuthDays { get; public set; }
    [RemoteAttribute]
public bool EmailAttestationRequired { get; public set; }
    [RemoteAttribute]
public bool EnableAutoExpirationVersionTrim { get; }
    [RemoteAttribute]
public bool EnableAutoNewsDigest { get; public set; }
    [RemoteAttribute]
public bool EnableAzureADB2BIntegration { get; public set; }
    [RemoteAttribute]
public bool EnableGuestSignInAcceleration { get; public set; }
    [RemoteAttribute]
public bool EnablePromotedFileHandlers { get; public set; }
    [RemoteAttribute]
public bool EnableRestrictedAccessControl { get; public set; }
    [RemoteAttribute]
public bool EnableVersionExpirationSetting { get; public set; }
    [RemoteAttribute]
public bool ESignatureEnabled { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> ESignatureSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> ESignatureSiteList { get; public set; }
    [RemoteAttribute]
public string ESignatureSiteListFileName { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<string> ESignatureThirdPartyProviderInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<string> ESignatureThirdPartyProviderList { get; public set; }
    [RemoteAttribute]
public string ESignatureThirdPartyProviderListFileName { get; public set; }
    [RemoteAttribute]
public Guid[] ExcludedBlockDownloadGroupIds { get; }
    [RemoteAttribute]
public IList`1<string> ExcludedFileExtensionsForSyncClient { get; public set; }
    [RemoteAttribute]
public bool ExemptNativeUsersFromTenantLevelRestricedAccessControl { get; public set; }
    [RemoteAttribute]
public int ExpireVersionsAfterDays { get; }
    [RemoteAttribute]
public bool ExternalServicesEnabled { get; public set; }
    [RemoteAttribute]
public bool ExternalUserExpirationRequired { get; public set; }
    [RemoteAttribute]
public int ExternalUserExpireInDays { get; public set; }
    [RemoteAttribute]
public AnonymousLinkType FileAnonymousLinkType { get; public set; }
    [RemoteAttribute]
public bool FilePickerExternalImageSearchEnabled { get; public set; }
    [RemoteAttribute]
public string FileVersionPolicyXml { get; public set; }
    [RemoteAttribute]
public AnonymousLinkType FolderAnonymousLinkType { get; public set; }
    [RemoteAttribute]
public OrgAssets GetOrgAssets { get; }
    [RemoteAttribute]
public string GuestSharingGroupAllowList { get; public set; }
    [RemoteAttribute]
public bool HasAdminCompletedCUConfiguration { get; public set; }
    [RemoteAttribute]
public bool HideSyncButtonOnDocLib { get; public set; }
    [RemoteAttribute]
public bool HideSyncButtonOnODB { get; public set; }
    [RemoteAttribute]
public bool IBImplicitGroupBased { get; public set; }
    [RemoteAttribute]
public ImageTaggingChoice ImageTaggingOption { get; public set; }
    [RemoteAttribute]
public IEnumerable`1<SiteInfoForSitePicker> ImageTaggingSiteInfoList { get; }
    [RemoteAttribute]
public IEnumerable`1<Guid> ImageTaggingSiteList { get; public set; }
    [RemoteAttribute]
public string ImageTaggingSiteListFileName { get; public set; }
    [RemoteAttribute]
public bool IncludeAtAGlanceInShareEmails { get; public set; }
    [RemoteAttribute]
public bool InformationBarriersSuspension { get; public set; }
    [RemoteAttribute]
public string IPAddressAllowList { get; public set; }
    [RemoteAttribute]
public bool IPAddressEnforcement { get; public set; }
    [RemoteAttribute]
public int IPAddressWACTokenLifetime { get; public set; }
    [RemoteAttribute]
public bool IsUnmanagedSyncClientForTenantRestricted { get; public set; }
    [RemoteAttribute]
public bool IsUnmanagedSyncClientRestrictionFlightEnabled { get; }
    [RemoteAttribute]
public bool LegacyAuthProtocolsEnabled { get; public set; }
    [RemoteAttribute]
public bool LegacyBrowserAuthProtocolsEnabled { get; public set; }
    [RemoteAttribute]
public SPOLimitedAccessFileType LimitedAccessFileType { get; public set; }
    [RemoteAttribute]
public bool MachineLearningCaptureEnabled { get; public set; }
    [RemoteAttribute]
public int MajorVersionLimit { get; public set; }
    [RemoteAttribute]
public bool MarkAllFilesAsSensitiveByDefault { get; }
    [RemoteAttribute]
public bool MassDeleteNotificationDisabled { get; public set; }
    [RemoteAttribute]
public MediaTranscriptionPolicyType MediaTranscription { get; public set; }
    [RemoteAttribute]
public MediaTranscriptionAutomaticFeaturesPolicyType MediaTranscriptionAutomaticFeatures { get; public set; }
    [RemoteAttribute]
public bool MobileFriendlyUrlEnabled { get; public set; }
    [RemoteAttribute]
public bool MySitesPublicEnabled { get; public set; }
    [RemoteAttribute]
public bool NotificationsInOneDriveForBusinessEnabled { get; public set; }
    [RemoteAttribute]
public bool NotificationsInSharePointEnabled { get; public set; }
    [RemoteAttribute]
public bool NotifyOwnersWhenItemsReshared { get; public set; }
    [RemoteAttribute]
public SharingState ODBAccessRequests { get; public set; }
    [RemoteAttribute]
public SharingState ODBMembersCanShare { get; public set; }
    [RemoteAttribute]
public ushort ODBSensitivityRefreshWindowInHours { get; }
    [RemoteAttribute]
public SharingCapabilities ODBSharingCapability { get; public set; }
    [RemoteAttribute]
public bool OfficeClientADALDisabled { get; public set; }
    [RemoteAttribute]
public SharingState OneDriveBlockGuestsAsSiteAdmin { get; public set; }
    [RemoteAttribute]
public bool OneDriveDefaultLinkToExistingAccess { get; public set; }
    [RemoteAttribute]
public Role OneDriveDefaultShareLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope OneDriveDefaultShareLinkScope { get; public set; }
    [RemoteAttribute]
public bool OneDriveForGuestsEnabled { get; public set; }
    [RemoteAttribute]
public Role OneDriveLoopDefaultSharingLinkRole { get; public set; }
    [RemoteAttribute]
public SharingScope OneDriveLoopDefaultSharingLinkScope { get; public set; }
    [RemoteAttribute]
public bool OneDriveRequestFilesLinkEnabled { get; public set; }
    [RemoteAttribute]
public int OneDriveRequestFilesLinkExpirationInDays { get; public set; }
    [RemoteAttribute]
public bool OwnerAnonymousNotification { get; public set; }
    [RemoteAttribute]
public bool PreventExternalUsersFromResharing { get; public set; }
    [RemoteAttribute]
public bool ProvisionSharedWithEveryoneFolder { get; public set; }
    [RemoteAttribute]
public string PublicCdnAllowedFileTypes { get; public set; }
    [RemoteAttribute]
public bool PublicCdnEnabled { get; public set; }
    [RemoteAttribute]
public IList`1<string> PublicCdnOrigins { get; }
    [RemoteAttribute]
public int RecycleBinRetentionPeriod { get; public set; }
    [RemoteAttribute]
public bool ReduceTempTokenLifetimeEnabled { get; public set; }
    [RemoteAttribute]
public int ReduceTempTokenLifetimeValue { get; public set; }
    [RemoteAttribute]
public int RequireAnonymousLinksExpireInDays { get; public set; }
    [RemoteAttribute]
public string RestrictedAccessControlForOneDriveErrorHelpLink { get; public set; }
    [RemoteAttribute]
public string RestrictedAccessControlforSitesErrorHelpLink { get; public set; }
    [RemoteAttribute]
public bool SearchResolveExactEmailOrUPN { get; public set; }
    [RemoteAttribute]
public bool SelfServiceSiteCreationDisabled { get; public set; }
    [RemoteAttribute]
public string SharingAllowedDomainList { get; public set; }
    [RemoteAttribute]
public string SharingBlockedDomainList { get; public set; }
    [RemoteAttribute]
public SharingCapabilities SharingCapability { get; public set; }
    [RemoteAttribute]
public SharingDomainRestrictionModes SharingDomainRestrictionMode { get; public set; }
    [RemoteAttribute]
public bool ShowAllUsersClaim { get; public set; }
    [RemoteAttribute]
public bool ShowEveryoneClaim { get; public set; }
    [RemoteAttribute]
public bool ShowEveryoneExceptExternalUsersClaim { get; public set; }
    [RemoteAttribute]
public bool ShowNGSCDialogForSyncOnODB { get; public set; }
    [RemoteAttribute]
public bool ShowOpenInDesktopOptionForSyncedFiles { get; public set; }
    [RemoteAttribute]
public bool ShowPeoplePickerGroupSuggestionsForIB { get; public set; }
    [RemoteAttribute]
public bool ShowPeoplePickerSuggestionsForGuestUsers { get; public set; }
    [RemoteAttribute]
public string SignInAccelerationDomain { get; public set; }
    [RemoteAttribute]
public bool SiteOwnerManageLegacyServicePrincipalEnabled { get; public set; }
    [RemoteAttribute]
public bool SocialBarOnSitePagesDisabled { get; public set; }
    [RemoteAttribute]
public SPJitDlpPolicyData SPJitDlpPolicyData { get; }
    [RemoteAttribute]
public string StartASiteFormUrl { get; public set; }
    [RemoteAttribute]
public bool StopNew2010Workflows { get; public set; }
    [RemoteAttribute]
public bool StopNew2013Workflows { get; public set; }
    [RemoteAttribute]
public int StreamLaunchConfig { get; public set; }
    [RemoteAttribute]
public DateTime StreamLaunchConfigLastUpdated { get; }
    [RemoteAttribute]
public int StreamLaunchConfigUpdateCount { get; }
    [RemoteAttribute]
public bool SyncPrivacyProfileProperties { get; public set; }
    [RemoteAttribute]
public SyntexBillingContext SyntexBillingSubscriptionSettings { get; public set; }
    [RemoteAttribute]
public IDictionary`2<string, bool> SyntexInternalFeatureFlags { get; }
    [RemoteAttribute]
public SyntexPremiumFeatureSettings SyntexMediaAnalyticsSettings { get; public set; }
    [RemoteAttribute]
public IDictionary`2<string, string> SyntexPaygFeatureActivations { get; }
    [RemoteAttribute]
public SyntexPremiumFeatureSettings SyntexPlaybackTranscriptTranslationSettings { get; public set; }
    [RemoteAttribute]
public SyntexPowerAppsEnvironmentsContext SyntexPowerAppsEnvironmentsContext { get; }
    [RemoteAttribute]
public SPOTlsTokenBindingPolicyValue TlsTokenBindingPolicyValue { get; public set; }
    [RemoteAttribute]
public bool UseFindPeopleInPeoplePicker { get; public set; }
    [RemoteAttribute]
public bool UsePersistentCookiesForExplorerView { get; public set; }
    [RemoteAttribute]
public bool ViewersCanCommentOnMediaDisabled { get; public set; }
    [RemoteAttribute]
public bool ViewInFileExplorerEnabled { get; public set; }
    [RemoteAttribute]
public string WhoCanShareAllowList { get; public set; }
    [RemoteAttribute]
public bool Workflow2010Disabled { get; public set; }
    [RemoteAttribute]
public Workflows2013State Workflows2013State { get; }
    public Office365Tenant(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public Office365Tenant(ClientRuntimeContext context, ObjectPath objectPath);
    public Role get_AddressbarLinkPermission();
    public void set_AddressbarLinkPermission(Role value);
    public SharingState get_AllowAnonymousMeetingParticipantsToAccessWhiteboards();
    public void set_AllowAnonymousMeetingParticipantsToAccessWhiteboards(SharingState value);
    public bool get_AllowCommentsTextOnEmailEnabled();
    public void set_AllowCommentsTextOnEmailEnabled(bool value);
    public bool get_AllowDownloadingNonWebViewableFiles();
    public void set_AllowDownloadingNonWebViewableFiles(bool value);
    public IList`1<Guid> get_AllowedDomainListForSyncClient();
    public void set_AllowedDomainListForSyncClient(IList`1<Guid> value);
    public bool get_AllowEditing();
    public void set_AllowEditing(bool value);
    public bool get_AllowEveryoneExceptExternalUsersClaimInPrivateSite();
    public void set_AllowEveryoneExceptExternalUsersClaimInPrivateSite(bool value);
    public bool get_AllowGuestUserShareToUsersNotInSiteCollection();
    public void set_AllowGuestUserShareToUsersNotInSiteCollection(bool value);
    public bool get_AllowLimitedAccessOnUnmanagedDevices();
    public void set_AllowLimitedAccessOnUnmanagedDevices(bool value);
    public bool get_AllowOverrideForBlockUserInfoVisibility();
    public void set_AllowOverrideForBlockUserInfoVisibility(bool value);
    public IList`1<string> get_AllowSelectSecurityGroupsInSPSitesList();
    public void set_AllowSelectSecurityGroupsInSPSitesList(IList`1<string> value);
    public IList`1<string> get_AllowSelectSGsInODBList();
    public void set_AllowSelectSGsInODBList(IList`1<string> value);
    public bool get_AllowSharingOutsideRestrictedAccessControlGroups();
    public void set_AllowSharingOutsideRestrictedAccessControlGroups(bool value);
    public bool get_AnyoneLinkTrackUsers();
    public void set_AnyoneLinkTrackUsers(bool value);
    public bool get_AppBypassInformationBarriers();
    public void set_AppBypassInformationBarriers(bool value);
    public bool get_ApplyAppEnforcedRestrictionsToAdHocRecipients();
    public void set_ApplyAppEnforcedRestrictionsToAdHocRecipients(bool value);
    public bool get_AppOnlyBypassPeoplePickerPolicies();
    public void set_AppOnlyBypassPeoplePickerPolicies(bool value);
    public SPResilienceModeType get_AuthContextResilienceMode();
    public void set_AuthContextResilienceMode(SPResilienceModeType value);
    public bool get_BccExternalSharingInvitations();
    public void set_BccExternalSharingInvitations(bool value);
    public string get_BccExternalSharingInvitationsList();
    public void set_BccExternalSharingInvitationsList(string value);
    public bool get_BlockAccessOnUnmanagedDevices();
    public void set_BlockAccessOnUnmanagedDevices(bool value);
    public bool get_BlockAppAccessWithAuthenticationContext();
    public void set_BlockAppAccessWithAuthenticationContext(bool value);
    public SPBlockDownloadFileTypeId[] get_BlockDownloadFileTypeIds();
    public bool get_BlockDownloadFileTypePolicy();
    public BlockDownloadLinksFileTypes get_BlockDownloadLinksFileType();
    public void set_BlockDownloadLinksFileType(BlockDownloadLinksFileTypes value);
    public bool get_BlockDownloadOfAllFilesForGuests();
    public void set_BlockDownloadOfAllFilesForGuests(bool value);
    public bool get_BlockDownloadOfAllFilesOnUnmanagedDevices();
    public void set_BlockDownloadOfAllFilesOnUnmanagedDevices(bool value);
    public bool get_BlockDownloadOfViewableFilesForGuests();
    public void set_BlockDownloadOfViewableFilesForGuests(bool value);
    public bool get_BlockDownloadOfViewableFilesOnUnmanagedDevices();
    public void set_BlockDownloadOfViewableFilesOnUnmanagedDevices(bool value);
    public bool get_BlockMacSync();
    public void set_BlockMacSync(bool value);
    public string get_BlockUserInfoVisibility();
    public void set_BlockUserInfoVisibility(string value);
    public TenantBrowseUserInfoPolicyValue get_BlockUserInfoVisibilityInOneDrive();
    public void set_BlockUserInfoVisibilityInOneDrive(TenantBrowseUserInfoPolicyValue value);
    public TenantBrowseUserInfoPolicyValue get_BlockUserInfoVisibilityInSharePoint();
    public void set_BlockUserInfoVisibilityInSharePoint(TenantBrowseUserInfoPolicyValue value);
    public bool get_BusinessConnectivityServiceDisabled();
    public void set_BusinessConnectivityServiceDisabled(bool value);
    public bool get_CommentsOnFilesDisabled();
    public void set_CommentsOnFilesDisabled(bool value);
    public bool get_CommentsOnListItemsDisabled();
    public void set_CommentsOnListItemsDisabled(bool value);
    public bool get_CommentsOnSitePagesDisabled();
    public void set_CommentsOnSitePagesDisabled(bool value);
    public SPOConditionalAccessPolicyType get_ConditionalAccessPolicy();
    public void set_ConditionalAccessPolicy(SPOConditionalAccessPolicyType value);
    public string get_ConditionalAccessPolicyErrorHelpLink();
    public void set_ConditionalAccessPolicyErrorHelpLink(string value);
    public IEnumerable`1<string> get_ContentTypeSyncSiteTemplatesList();
    public void set_ContentTypeSyncSiteTemplatesList(IEnumerable`1<string> value);
    public SharingState get_CoreBlockGuestsAsSiteAdmin();
    public void set_CoreBlockGuestsAsSiteAdmin(SharingState value);
    public bool get_CoreDefaultLinkToExistingAccess();
    public void set_CoreDefaultLinkToExistingAccess(bool value);
    public Role get_CoreDefaultShareLinkRole();
    public void set_CoreDefaultShareLinkRole(Role value);
    public SharingScope get_CoreDefaultShareLinkScope();
    public void set_CoreDefaultShareLinkScope(SharingScope value);
    public Role get_CoreLoopDefaultSharingLinkRole();
    public void set_CoreLoopDefaultSharingLinkRole(Role value);
    public SharingScope get_CoreLoopDefaultSharingLinkScope();
    public void set_CoreLoopDefaultSharingLinkScope(SharingScope value);
    public bool get_CoreRequestFilesLinkEnabled();
    public void set_CoreRequestFilesLinkEnabled(bool value);
    public int get_CoreRequestFilesLinkExpirationInDays();
    public void set_CoreRequestFilesLinkExpirationInDays(int value);
    public SharingCapabilities get_CoreSharingCapability();
    public void set_CoreSharingCapability(SharingCapabilities value);
    public string get_CustomizedExternalSharingServiceUrl();
    public void set_CustomizedExternalSharingServiceUrl(string value);
    public SiteInfoForSitePicker get_DefaultContentCenterSite();
    public void set_DefaultContentCenterSite(SiteInfoForSitePicker value);
    public SharingPermissionType get_DefaultLinkPermission();
    public void set_DefaultLinkPermission(SharingPermissionType value);
    public string get_DefaultODBMode();
    public void set_DefaultODBMode(string value);
    public SharingLinkType get_DefaultSharingLinkType();
    public void set_DefaultSharingLinkType(SharingLinkType value);
    public IList`1<string> get_DenySelectSecurityGroupsInSPSitesList();
    public void set_DenySelectSecurityGroupsInSPSitesList(IList`1<string> value);
    public IList`1<string> get_DenySelectSGsInODBList();
    public void set_DenySelectSGsInODBList(IList`1<string> value);
    public bool get_DisableAddToOneDrive();
    public void set_DisableAddToOneDrive(bool value);
    public bool get_DisableBackToClassic();
    public void set_DisableBackToClassic(bool value);
    public bool get_DisableCustomAppAuthentication();
    public void set_DisableCustomAppAuthentication(bool value);
    public Guid[] get_DisabledModernListTemplateIds();
    public void set_DisabledModernListTemplateIds(Guid[] value);
    public bool get_DisableOutlookPSTVersionTrimming();
    public void set_DisableOutlookPSTVersionTrimming(bool value);
    public bool get_DisablePersonalListCreation();
    public void set_DisablePersonalListCreation(bool value);
    public bool get_DisableSpacesActivation();
    public void set_DisableSpacesActivation(bool value);
    public bool get_DisableVivaConnectionsAnalytics();
    public void set_DisableVivaConnectionsAnalytics(bool value);
    public bool get_DisplayStartASiteOption();
    public void set_DisplayStartASiteOption(bool value);
    public bool get_EmailAttestationEnabled();
    public void set_EmailAttestationEnabled(bool value);
    public int get_EmailAttestationReAuthDays();
    public void set_EmailAttestationReAuthDays(int value);
    public bool get_EmailAttestationRequired();
    public void set_EmailAttestationRequired(bool value);
    public bool get_EnableAutoExpirationVersionTrim();
    public bool get_EnableAutoNewsDigest();
    public void set_EnableAutoNewsDigest(bool value);
    public bool get_EnableAzureADB2BIntegration();
    public void set_EnableAzureADB2BIntegration(bool value);
    public bool get_EnableGuestSignInAcceleration();
    public void set_EnableGuestSignInAcceleration(bool value);
    public bool get_EnablePromotedFileHandlers();
    public void set_EnablePromotedFileHandlers(bool value);
    public bool get_EnableRestrictedAccessControl();
    public void set_EnableRestrictedAccessControl(bool value);
    public bool get_EnableVersionExpirationSetting();
    public void set_EnableVersionExpirationSetting(bool value);
    public bool get_ESignatureEnabled();
    public void set_ESignatureEnabled(bool value);
    public IEnumerable`1<SiteInfoForSitePicker> get_ESignatureSiteInfoList();
    public IEnumerable`1<Guid> get_ESignatureSiteList();
    public void set_ESignatureSiteList(IEnumerable`1<Guid> value);
    public string get_ESignatureSiteListFileName();
    public void set_ESignatureSiteListFileName(string value);
    public IEnumerable`1<string> get_ESignatureThirdPartyProviderInfoList();
    public IEnumerable`1<string> get_ESignatureThirdPartyProviderList();
    public void set_ESignatureThirdPartyProviderList(IEnumerable`1<string> value);
    public string get_ESignatureThirdPartyProviderListFileName();
    public void set_ESignatureThirdPartyProviderListFileName(string value);
    public Guid[] get_ExcludedBlockDownloadGroupIds();
    public IList`1<string> get_ExcludedFileExtensionsForSyncClient();
    public void set_ExcludedFileExtensionsForSyncClient(IList`1<string> value);
    public bool get_ExemptNativeUsersFromTenantLevelRestricedAccessControl();
    public void set_ExemptNativeUsersFromTenantLevelRestricedAccessControl(bool value);
    public int get_ExpireVersionsAfterDays();
    public bool get_ExternalServicesEnabled();
    public void set_ExternalServicesEnabled(bool value);
    public bool get_ExternalUserExpirationRequired();
    public void set_ExternalUserExpirationRequired(bool value);
    public int get_ExternalUserExpireInDays();
    public void set_ExternalUserExpireInDays(int value);
    public AnonymousLinkType get_FileAnonymousLinkType();
    public void set_FileAnonymousLinkType(AnonymousLinkType value);
    public bool get_FilePickerExternalImageSearchEnabled();
    public void set_FilePickerExternalImageSearchEnabled(bool value);
    public string get_FileVersionPolicyXml();
    public void set_FileVersionPolicyXml(string value);
    public AnonymousLinkType get_FolderAnonymousLinkType();
    public void set_FolderAnonymousLinkType(AnonymousLinkType value);
    public OrgAssets get_GetOrgAssets();
    public string get_GuestSharingGroupAllowList();
    public void set_GuestSharingGroupAllowList(string value);
    public bool get_HasAdminCompletedCUConfiguration();
    public void set_HasAdminCompletedCUConfiguration(bool value);
    public bool get_HideSyncButtonOnDocLib();
    public void set_HideSyncButtonOnDocLib(bool value);
    public bool get_HideSyncButtonOnODB();
    public void set_HideSyncButtonOnODB(bool value);
    public bool get_IBImplicitGroupBased();
    public void set_IBImplicitGroupBased(bool value);
    public ImageTaggingChoice get_ImageTaggingOption();
    public void set_ImageTaggingOption(ImageTaggingChoice value);
    public IEnumerable`1<SiteInfoForSitePicker> get_ImageTaggingSiteInfoList();
    public IEnumerable`1<Guid> get_ImageTaggingSiteList();
    public void set_ImageTaggingSiteList(IEnumerable`1<Guid> value);
    public string get_ImageTaggingSiteListFileName();
    public void set_ImageTaggingSiteListFileName(string value);
    public bool get_IncludeAtAGlanceInShareEmails();
    public void set_IncludeAtAGlanceInShareEmails(bool value);
    public bool get_InformationBarriersSuspension();
    public void set_InformationBarriersSuspension(bool value);
    public string get_IPAddressAllowList();
    public void set_IPAddressAllowList(string value);
    public bool get_IPAddressEnforcement();
    public void set_IPAddressEnforcement(bool value);
    public int get_IPAddressWACTokenLifetime();
    public void set_IPAddressWACTokenLifetime(int value);
    public bool get_IsUnmanagedSyncClientForTenantRestricted();
    public void set_IsUnmanagedSyncClientForTenantRestricted(bool value);
    public bool get_IsUnmanagedSyncClientRestrictionFlightEnabled();
    public bool get_LegacyAuthProtocolsEnabled();
    public void set_LegacyAuthProtocolsEnabled(bool value);
    public bool get_LegacyBrowserAuthProtocolsEnabled();
    public void set_LegacyBrowserAuthProtocolsEnabled(bool value);
    public SPOLimitedAccessFileType get_LimitedAccessFileType();
    public void set_LimitedAccessFileType(SPOLimitedAccessFileType value);
    public bool get_MachineLearningCaptureEnabled();
    public void set_MachineLearningCaptureEnabled(bool value);
    public int get_MajorVersionLimit();
    public void set_MajorVersionLimit(int value);
    public bool get_MarkAllFilesAsSensitiveByDefault();
    public bool get_MassDeleteNotificationDisabled();
    public void set_MassDeleteNotificationDisabled(bool value);
    public MediaTranscriptionPolicyType get_MediaTranscription();
    public void set_MediaTranscription(MediaTranscriptionPolicyType value);
    public MediaTranscriptionAutomaticFeaturesPolicyType get_MediaTranscriptionAutomaticFeatures();
    public void set_MediaTranscriptionAutomaticFeatures(MediaTranscriptionAutomaticFeaturesPolicyType value);
    public bool get_MobileFriendlyUrlEnabled();
    public void set_MobileFriendlyUrlEnabled(bool value);
    public bool get_MySitesPublicEnabled();
    public void set_MySitesPublicEnabled(bool value);
    public bool get_NotificationsInOneDriveForBusinessEnabled();
    public void set_NotificationsInOneDriveForBusinessEnabled(bool value);
    public bool get_NotificationsInSharePointEnabled();
    public void set_NotificationsInSharePointEnabled(bool value);
    public bool get_NotifyOwnersWhenItemsReshared();
    public void set_NotifyOwnersWhenItemsReshared(bool value);
    public SharingState get_ODBAccessRequests();
    public void set_ODBAccessRequests(SharingState value);
    public SharingState get_ODBMembersCanShare();
    public void set_ODBMembersCanShare(SharingState value);
    public ushort get_ODBSensitivityRefreshWindowInHours();
    public SharingCapabilities get_ODBSharingCapability();
    public void set_ODBSharingCapability(SharingCapabilities value);
    public bool get_OfficeClientADALDisabled();
    public void set_OfficeClientADALDisabled(bool value);
    public SharingState get_OneDriveBlockGuestsAsSiteAdmin();
    public void set_OneDriveBlockGuestsAsSiteAdmin(SharingState value);
    public bool get_OneDriveDefaultLinkToExistingAccess();
    public void set_OneDriveDefaultLinkToExistingAccess(bool value);
    public Role get_OneDriveDefaultShareLinkRole();
    public void set_OneDriveDefaultShareLinkRole(Role value);
    public SharingScope get_OneDriveDefaultShareLinkScope();
    public void set_OneDriveDefaultShareLinkScope(SharingScope value);
    public bool get_OneDriveForGuestsEnabled();
    public void set_OneDriveForGuestsEnabled(bool value);
    public Role get_OneDriveLoopDefaultSharingLinkRole();
    public void set_OneDriveLoopDefaultSharingLinkRole(Role value);
    public SharingScope get_OneDriveLoopDefaultSharingLinkScope();
    public void set_OneDriveLoopDefaultSharingLinkScope(SharingScope value);
    public bool get_OneDriveRequestFilesLinkEnabled();
    public void set_OneDriveRequestFilesLinkEnabled(bool value);
    public int get_OneDriveRequestFilesLinkExpirationInDays();
    public void set_OneDriveRequestFilesLinkExpirationInDays(int value);
    public bool get_OwnerAnonymousNotification();
    public void set_OwnerAnonymousNotification(bool value);
    public bool get_PreventExternalUsersFromResharing();
    public void set_PreventExternalUsersFromResharing(bool value);
    public bool get_ProvisionSharedWithEveryoneFolder();
    public void set_ProvisionSharedWithEveryoneFolder(bool value);
    public string get_PublicCdnAllowedFileTypes();
    public void set_PublicCdnAllowedFileTypes(string value);
    public bool get_PublicCdnEnabled();
    public void set_PublicCdnEnabled(bool value);
    public IList`1<string> get_PublicCdnOrigins();
    public int get_RecycleBinRetentionPeriod();
    public void set_RecycleBinRetentionPeriod(int value);
    public bool get_ReduceTempTokenLifetimeEnabled();
    public void set_ReduceTempTokenLifetimeEnabled(bool value);
    public int get_ReduceTempTokenLifetimeValue();
    public void set_ReduceTempTokenLifetimeValue(int value);
    public int get_RequireAnonymousLinksExpireInDays();
    public void set_RequireAnonymousLinksExpireInDays(int value);
    public string get_RestrictedAccessControlForOneDriveErrorHelpLink();
    public void set_RestrictedAccessControlForOneDriveErrorHelpLink(string value);
    public string get_RestrictedAccessControlforSitesErrorHelpLink();
    public void set_RestrictedAccessControlforSitesErrorHelpLink(string value);
    public bool get_SearchResolveExactEmailOrUPN();
    public void set_SearchResolveExactEmailOrUPN(bool value);
    public bool get_SelfServiceSiteCreationDisabled();
    public void set_SelfServiceSiteCreationDisabled(bool value);
    public string get_SharingAllowedDomainList();
    public void set_SharingAllowedDomainList(string value);
    public string get_SharingBlockedDomainList();
    public void set_SharingBlockedDomainList(string value);
    public SharingCapabilities get_SharingCapability();
    public void set_SharingCapability(SharingCapabilities value);
    public SharingDomainRestrictionModes get_SharingDomainRestrictionMode();
    public void set_SharingDomainRestrictionMode(SharingDomainRestrictionModes value);
    public bool get_ShowAllUsersClaim();
    public void set_ShowAllUsersClaim(bool value);
    public bool get_ShowEveryoneClaim();
    public void set_ShowEveryoneClaim(bool value);
    public bool get_ShowEveryoneExceptExternalUsersClaim();
    public void set_ShowEveryoneExceptExternalUsersClaim(bool value);
    public bool get_ShowNGSCDialogForSyncOnODB();
    public void set_ShowNGSCDialogForSyncOnODB(bool value);
    public bool get_ShowOpenInDesktopOptionForSyncedFiles();
    public void set_ShowOpenInDesktopOptionForSyncedFiles(bool value);
    public bool get_ShowPeoplePickerGroupSuggestionsForIB();
    public void set_ShowPeoplePickerGroupSuggestionsForIB(bool value);
    public bool get_ShowPeoplePickerSuggestionsForGuestUsers();
    public void set_ShowPeoplePickerSuggestionsForGuestUsers(bool value);
    public string get_SignInAccelerationDomain();
    public void set_SignInAccelerationDomain(string value);
    public bool get_SiteOwnerManageLegacyServicePrincipalEnabled();
    public void set_SiteOwnerManageLegacyServicePrincipalEnabled(bool value);
    public bool get_SocialBarOnSitePagesDisabled();
    public void set_SocialBarOnSitePagesDisabled(bool value);
    public SPJitDlpPolicyData get_SPJitDlpPolicyData();
    public string get_StartASiteFormUrl();
    public void set_StartASiteFormUrl(string value);
    public bool get_StopNew2010Workflows();
    public void set_StopNew2010Workflows(bool value);
    public bool get_StopNew2013Workflows();
    public void set_StopNew2013Workflows(bool value);
    public int get_StreamLaunchConfig();
    public void set_StreamLaunchConfig(int value);
    public DateTime get_StreamLaunchConfigLastUpdated();
    public int get_StreamLaunchConfigUpdateCount();
    public bool get_SyncPrivacyProfileProperties();
    public void set_SyncPrivacyProfileProperties(bool value);
    public SyntexBillingContext get_SyntexBillingSubscriptionSettings();
    public void set_SyntexBillingSubscriptionSettings(SyntexBillingContext value);
    public IDictionary`2<string, bool> get_SyntexInternalFeatureFlags();
    public SyntexPremiumFeatureSettings get_SyntexMediaAnalyticsSettings();
    public void set_SyntexMediaAnalyticsSettings(SyntexPremiumFeatureSettings value);
    public IDictionary`2<string, string> get_SyntexPaygFeatureActivations();
    public SyntexPremiumFeatureSettings get_SyntexPlaybackTranscriptTranslationSettings();
    public void set_SyntexPlaybackTranscriptTranslationSettings(SyntexPremiumFeatureSettings value);
    public SyntexPowerAppsEnvironmentsContext get_SyntexPowerAppsEnvironmentsContext();
    public SPOTlsTokenBindingPolicyValue get_TlsTokenBindingPolicyValue();
    public void set_TlsTokenBindingPolicyValue(SPOTlsTokenBindingPolicyValue value);
    public bool get_UseFindPeopleInPeoplePicker();
    public void set_UseFindPeopleInPeoplePicker(bool value);
    public bool get_UsePersistentCookiesForExplorerView();
    public void set_UsePersistentCookiesForExplorerView(bool value);
    public bool get_ViewersCanCommentOnMediaDisabled();
    public void set_ViewersCanCommentOnMediaDisabled(bool value);
    public bool get_ViewInFileExplorerEnabled();
    public void set_ViewInFileExplorerEnabled(bool value);
    public string get_WhoCanShareAllowList();
    public void set_WhoCanShareAllowList(string value);
    public bool get_Workflow2010Disabled();
    public void set_Workflow2010Disabled(bool value);
    public Workflows2013State get_Workflows2013State();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public void SetJitDlpPolicyData(bool markAllFilesAsSensitiveByDefault, ushort odbSensitivityRefreshWindowInHours, JITDlpExecutionMode executionMode);
    [RemoteAttribute]
public void CreateGroupForSite(string siteUrl, string displayName, string alias, bool isPublic, GroupCreationParams optionalParams);
    [RemoteAttribute]
public void SetBlockDownloadFileTypePolicyData(bool blockDownloadFileTypePolicy, SPBlockDownloadFileTypeId[] fileTypeIds, Guid[] excludedBlockDownloadGroupIds);
    [RemoteAttribute]
public void SetBlockDownloadFileTypePolicyExclusionList(Guid[] excludedBlockDownloadGroupIds);
    [RemoteAttribute]
public void AddSdnProvider(string identifier, string license);
    [RemoteAttribute]
public void RemoveSdnProvider();
    [RemoteAttribute]
public GetExternalUsersResults GetExternalUsers(int position, int pageSize, string filter, SortOrder sortOrder);
    [RemoteAttribute]
public GetExternalUsersResults GetExternalUsersWithSortBy(int position, int pageSize, string filter, string sortPropertyName, SortOrder sortOrder);
    [RemoteAttribute]
public GetExternalUsersResults GetExternalUsersForSite(string siteUrl, int position, int pageSize, string filter, SortOrder sortOrder);
    [RemoteAttribute]
public RemoveExternalUsersResults RemoveExternalUsers(String[] uniqueIds);
    [RemoteAttribute]
public ClientResult`1<Guid> QueueImportProfileProperties(ImportProfilePropertiesUserIdType idType, string sourceDataIdProperty, IDictionary`2<string, string> propertyMap, string sourceUri);
    [RemoteAttribute]
public ClientResult`1<bool> DeleteImportProfilePropertiesJob(Guid jobId);
    [RemoteAttribute]
public ImportProfilePropertiesJobStatusCollection GetImportProfilePropertyJobs();
    [RemoteAttribute]
public ImportProfilePropertiesJobInfo GetImportProfilePropertyJob(Guid jobId);
    [RemoteAttribute]
public void DisableSharingForNonOwnersOfSite(string siteUrl);
    [RemoteAttribute]
public ClientResult`1<bool> IsSharingDisabledForNonOwnersOfSite(string siteUrl);
    [RemoteAttribute]
public SPOUserSessionRevocationResult RevokeAllUserSessions(string userName);
    [RemoteAttribute]
public ClientObjectList`1<SPOUserSessionRevocationResult> RevokeAllUserSessionsByPuid(IList`1<string> puidList);
    [RemoteAttribute]
public void LogCustomFontsLargeUpload(int numCatalogs, int numFonts, int totalExpectedFiles);
    [RemoteAttribute]
public void SyncAadB2BManagementPolicy();
    [RemoteAttribute]
public void AddPublicCdnOrigin(string origin);
    [RemoteAttribute]
public void RemovePublicCdnOrigin(string originId);
    [RemoteAttribute]
public IList`1<string> GetTenantCdnOrigins(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public void AddTenantCdnOrigin(SPOTenantCdnType cdnType, string originUrl);
    [RemoteAttribute]
public void RemoveTenantCdnOrigin(SPOTenantCdnType cdnType, string originUrl);
    [RemoteAttribute]
public void SetTenantCdnEnabled(SPOTenantCdnType cdnType, bool isEnabled);
    [RemoteAttribute]
public ClientResult`1<bool> GetTenantCdnEnabled(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public void SetTenantCdnPolicy(SPOTenantCdnType cdnType, SPOTenantCdnPolicyType policy, string policyValue);
    [RemoteAttribute]
public IList`1<string> GetTenantCdnPolicies(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public void CreateTenantCdnDefaultOrigins(SPOTenantCdnType cdnType);
    [RemoteAttribute]
public ClientResult`1<bool> AddTenantTheme(string name, string themeJson);
    [RemoteAttribute]
public ClientResult`1<bool> UpdateTenantTheme(string name, string themeJson);
    [RemoteAttribute]
public void DeleteTenantTheme(string name);
    [RemoteAttribute]
public ThemeProperties GetTenantTheme(string name);
    [RemoteAttribute]
public ClientObjectList`1<ThemeProperties> GetAllTenantThemes();
    [RemoteAttribute]
public ClientResult`1<bool> GetHideDefaultThemes();
    [RemoteAttribute]
public ClientResult`1<bool> SetHideDefaultThemes(bool hideDefaultThemes);
    [RemoteAttribute]
public IEnumerable`1<PowerAppsEnvironment> GetPowerAppsEnvironmentList(Site rootSite);
    [RemoteAttribute]
public ClientResult`1<bool> SetIdleSessionSignOutForUnmanagedDevices(bool enabled, TimeSpan warnAfter, TimeSpan signOutAfter);
    [RemoteAttribute]
public ClientResult`1<string> GetIdleSessionSignOutForUnmanagedDevices();
    [RemoteAttribute]
public void AddToOrgAssetsLibAndCdn(SPOTenantCdnType cdnType, ResourcePath libUrl, ResourcePath thumbnailUrl, OrgAssetType orgAssetType, bool defaultOriginAdded);
    [RemoteAttribute]
public void AddToOrgAssetsWithConfig(SPOTenantCdnType cdnType, ResourcePath libUrl, ResourcePath thumbnailUrl, OrgAssetType orgAssetType, bool defaultOriginAdded, OrgAssetsLibraryConfigParam configParam);
    [RemoteAttribute]
public void RemoveFromOrgAssetsAndCdn(bool remove, SPOTenantCdnType cdnType, ResourcePath libUrl);
    [RemoteAttribute]
public void RemoveFromOrgAssets(ResourcePath libUrl, Guid listId);
    [RemoteAttribute]
public void SetOrgAssetsLib(ResourcePath libUrl, ResourcePath thumbnailUrl, OrgAssetType orgAssetType);
    [RemoteAttribute]
public void SetOrgAssetsLibWithConfig(ResourcePath libUrl, ResourcePath thumbnailUrl, OrgAssetType orgAssetType, OrgAssetsLibraryConfigParam configParam);
    [RemoteAttribute]
public ClientResult`1<int> GetCustomFontsMinorVersion(ResourcePath libUrl);
    [RemoteAttribute]
public ClientResult`1<bool> UploadCustomFontsAndCatalogLib(IList`1<CustomFontsResource> customFontFiles, ResourcePath libUrl);
    [RemoteAttribute]
public void RemovePreviousCustomFontUpload(IList`1<string> majVersions, ResourcePath libUrl);
    [RemoteAttribute]
public void IncrementCustomFontsMinorVersion(ResourcePath libUrl);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.Office365TenantPropertyNames : object {
    public static string AddressbarLinkPermission;
    public static string AllowAnonymousMeetingParticipantsToAccessWhiteboards;
    public static string AllowCommentsTextOnEmailEnabled;
    public static string AllowDownloadingNonWebViewableFiles;
    public static string AllowedDomainListForSyncClient;
    public static string AllowEditing;
    public static string AllowEveryoneExceptExternalUsersClaimInPrivateSite;
    public static string AllowGuestUserShareToUsersNotInSiteCollection;
    public static string AllowLimitedAccessOnUnmanagedDevices;
    public static string AllowOverrideForBlockUserInfoVisibility;
    public static string AllowSelectSecurityGroupsInSPSitesList;
    public static string AllowSelectSGsInODBList;
    public static string AllowSharingOutsideRestrictedAccessControlGroups;
    public static string AnyoneLinkTrackUsers;
    public static string AppBypassInformationBarriers;
    public static string ApplyAppEnforcedRestrictionsToAdHocRecipients;
    public static string AppOnlyBypassPeoplePickerPolicies;
    public static string AuthContextResilienceMode;
    public static string BccExternalSharingInvitations;
    public static string BccExternalSharingInvitationsList;
    public static string BlockAccessOnUnmanagedDevices;
    public static string BlockAppAccessWithAuthenticationContext;
    public static string BlockDownloadFileTypeIds;
    public static string BlockDownloadFileTypePolicy;
    public static string BlockDownloadLinksFileType;
    public static string BlockDownloadOfAllFilesForGuests;
    public static string BlockDownloadOfAllFilesOnUnmanagedDevices;
    public static string BlockDownloadOfViewableFilesForGuests;
    public static string BlockDownloadOfViewableFilesOnUnmanagedDevices;
    public static string BlockMacSync;
    public static string BlockUserInfoVisibility;
    public static string BlockUserInfoVisibilityInOneDrive;
    public static string BlockUserInfoVisibilityInSharePoint;
    public static string BusinessConnectivityServiceDisabled;
    public static string CommentsOnFilesDisabled;
    public static string CommentsOnListItemsDisabled;
    public static string CommentsOnSitePagesDisabled;
    public static string ConditionalAccessPolicy;
    public static string ConditionalAccessPolicyErrorHelpLink;
    public static string ContentTypeSyncSiteTemplatesList;
    public static string CoreBlockGuestsAsSiteAdmin;
    public static string CoreDefaultLinkToExistingAccess;
    public static string CoreDefaultShareLinkRole;
    public static string CoreDefaultShareLinkScope;
    public static string CoreLoopDefaultSharingLinkRole;
    public static string CoreLoopDefaultSharingLinkScope;
    public static string CoreRequestFilesLinkEnabled;
    public static string CoreRequestFilesLinkExpirationInDays;
    public static string CoreSharingCapability;
    public static string CustomizedExternalSharingServiceUrl;
    public static string DefaultContentCenterSite;
    public static string DefaultLinkPermission;
    public static string DefaultODBMode;
    public static string DefaultSharingLinkType;
    public static string DenySelectSecurityGroupsInSPSitesList;
    public static string DenySelectSGsInODBList;
    public static string DisableAddToOneDrive;
    public static string DisableBackToClassic;
    public static string DisableCustomAppAuthentication;
    public static string DisabledModernListTemplateIds;
    public static string DisableOutlookPSTVersionTrimming;
    public static string DisablePersonalListCreation;
    public static string DisableSpacesActivation;
    public static string DisableVivaConnectionsAnalytics;
    public static string DisplayStartASiteOption;
    public static string EmailAttestationEnabled;
    public static string EmailAttestationReAuthDays;
    public static string EmailAttestationRequired;
    public static string EnableAutoExpirationVersionTrim;
    public static string EnableAutoNewsDigest;
    public static string EnableAzureADB2BIntegration;
    public static string EnableGuestSignInAcceleration;
    public static string EnablePromotedFileHandlers;
    public static string EnableRestrictedAccessControl;
    public static string EnableVersionExpirationSetting;
    public static string ESignatureEnabled;
    public static string ESignatureSiteInfoList;
    public static string ESignatureSiteList;
    public static string ESignatureSiteListFileName;
    public static string ESignatureThirdPartyProviderInfoList;
    public static string ESignatureThirdPartyProviderList;
    public static string ESignatureThirdPartyProviderListFileName;
    public static string ExcludedBlockDownloadGroupIds;
    public static string ExcludedFileExtensionsForSyncClient;
    public static string ExemptNativeUsersFromTenantLevelRestricedAccessControl;
    public static string ExpireVersionsAfterDays;
    public static string ExternalServicesEnabled;
    public static string ExternalUserExpirationRequired;
    public static string ExternalUserExpireInDays;
    public static string FileAnonymousLinkType;
    public static string FilePickerExternalImageSearchEnabled;
    public static string FileVersionPolicyXml;
    public static string FolderAnonymousLinkType;
    public static string GetOrgAssets;
    public static string GuestSharingGroupAllowList;
    public static string HasAdminCompletedCUConfiguration;
    public static string HideSyncButtonOnDocLib;
    public static string HideSyncButtonOnODB;
    public static string IBImplicitGroupBased;
    public static string ImageTaggingOption;
    public static string ImageTaggingSiteInfoList;
    public static string ImageTaggingSiteList;
    public static string ImageTaggingSiteListFileName;
    public static string IncludeAtAGlanceInShareEmails;
    public static string InformationBarriersSuspension;
    public static string IPAddressAllowList;
    public static string IPAddressEnforcement;
    public static string IPAddressWACTokenLifetime;
    public static string IsUnmanagedSyncClientForTenantRestricted;
    public static string IsUnmanagedSyncClientRestrictionFlightEnabled;
    public static string LegacyAuthProtocolsEnabled;
    public static string LegacyBrowserAuthProtocolsEnabled;
    public static string LimitedAccessFileType;
    public static string MachineLearningCaptureEnabled;
    public static string MajorVersionLimit;
    public static string MarkAllFilesAsSensitiveByDefault;
    public static string MassDeleteNotificationDisabled;
    public static string MediaTranscription;
    public static string MediaTranscriptionAutomaticFeatures;
    public static string MobileFriendlyUrlEnabled;
    public static string MySitesPublicEnabled;
    public static string NotificationsInOneDriveForBusinessEnabled;
    public static string NotificationsInSharePointEnabled;
    public static string NotifyOwnersWhenItemsReshared;
    public static string ODBAccessRequests;
    public static string ODBMembersCanShare;
    public static string ODBSensitivityRefreshWindowInHours;
    public static string ODBSharingCapability;
    public static string OfficeClientADALDisabled;
    public static string OneDriveBlockGuestsAsSiteAdmin;
    public static string OneDriveDefaultLinkToExistingAccess;
    public static string OneDriveDefaultShareLinkRole;
    public static string OneDriveDefaultShareLinkScope;
    public static string OneDriveForGuestsEnabled;
    public static string OneDriveLoopDefaultSharingLinkRole;
    public static string OneDriveLoopDefaultSharingLinkScope;
    public static string OneDriveRequestFilesLinkEnabled;
    public static string OneDriveRequestFilesLinkExpirationInDays;
    public static string OwnerAnonymousNotification;
    public static string PreventExternalUsersFromResharing;
    public static string ProvisionSharedWithEveryoneFolder;
    public static string PublicCdnAllowedFileTypes;
    public static string PublicCdnEnabled;
    public static string PublicCdnOrigins;
    public static string RecycleBinRetentionPeriod;
    public static string ReduceTempTokenLifetimeEnabled;
    public static string ReduceTempTokenLifetimeValue;
    public static string RequireAnonymousLinksExpireInDays;
    public static string RestrictedAccessControlForOneDriveErrorHelpLink;
    public static string RestrictedAccessControlforSitesErrorHelpLink;
    public static string SearchResolveExactEmailOrUPN;
    public static string SelfServiceSiteCreationDisabled;
    public static string SharingAllowedDomainList;
    public static string SharingBlockedDomainList;
    public static string SharingCapability;
    public static string SharingDomainRestrictionMode;
    public static string ShowAllUsersClaim;
    public static string ShowEveryoneClaim;
    public static string ShowEveryoneExceptExternalUsersClaim;
    public static string ShowNGSCDialogForSyncOnODB;
    public static string ShowOpenInDesktopOptionForSyncedFiles;
    public static string ShowPeoplePickerGroupSuggestionsForIB;
    public static string ShowPeoplePickerSuggestionsForGuestUsers;
    public static string SignInAccelerationDomain;
    public static string SiteOwnerManageLegacyServicePrincipalEnabled;
    public static string SocialBarOnSitePagesDisabled;
    public static string SPJitDlpPolicyData;
    public static string StartASiteFormUrl;
    public static string StopNew2010Workflows;
    public static string StopNew2013Workflows;
    public static string StreamLaunchConfig;
    public static string StreamLaunchConfigLastUpdated;
    public static string StreamLaunchConfigUpdateCount;
    public static string SyncPrivacyProfileProperties;
    public static string SyntexBillingSubscriptionSettings;
    public static string SyntexInternalFeatureFlags;
    public static string SyntexMediaAnalyticsSettings;
    public static string SyntexPaygFeatureActivations;
    public static string SyntexPlaybackTranscriptTranslationSettings;
    public static string SyntexPowerAppsEnvironmentsContext;
    public static string TlsTokenBindingPolicyValue;
    public static string UseFindPeopleInPeoplePicker;
    public static string UsePersistentCookiesForExplorerView;
    public static string ViewersCanCommentOnMediaDisabled;
    public static string ViewInFileExplorerEnabled;
    public static string WhoCanShareAllowList;
    public static string Workflow2010Disabled;
    public static string Workflows2013State;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.RemoveExternalUsersResults")]
public class Microsoft.Online.SharePoint.TenantManagement.RemoveExternalUsersResults : ClientObject {
    [RemoteAttribute]
public String[] RemoveFailed { get; }
    [RemoteAttribute]
public String[] RemoveSucceeded { get; }
    [EditorBrowsableAttribute("1")]
public RemoveExternalUsersResults(ClientRuntimeContext context, ObjectPath objectPath);
    public String[] get_RemoveFailed();
    public String[] get_RemoveSucceeded();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.RemoveExternalUsersResultsPropertyNames : object {
    public static string RemoveFailed;
    public static string RemoveSucceeded;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SensitiveByDefaultState : Enum {
    public int value__;
    public static SensitiveByDefaultState AllowExternalSharing;
    public static SensitiveByDefaultState BlockExternalSharing;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities : Enum {
    public int value__;
    public static SharingCapabilities Disabled;
    public static SharingCapabilities ExternalUserSharingOnly;
    public static SharingCapabilities ExternalUserAndGuestSharing;
    public static SharingCapabilities ExistingExternalUserSharingOnly;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes : Enum {
    public int value__;
    public static SharingDomainRestrictionModes None;
    public static SharingDomainRestrictionModes AllowList;
    public static SharingDomainRestrictionModes BlockList;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SharingLinkType : Enum {
    public int value__;
    public static SharingLinkType None;
    public static SharingLinkType Direct;
    public static SharingLinkType Internal;
    public static SharingLinkType AnonymousAccess;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType : Enum {
    public int value__;
    public static SharingPermissionType None;
    public static SharingPermissionType View;
    public static SharingPermissionType Edit;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SharingRole : Enum {
    public int value__;
    public static SharingRole None;
    public static SharingRole View;
    public static SharingRole Edit;
    public static SharingRole Review;
    public static SharingRole RestrictedView;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SpecialCharactersState : Enum {
    public int value__;
    public static SpecialCharactersState NoPreference;
    public static SpecialCharactersState Allowed;
    public static SpecialCharactersState Disallowed;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SPOAuthenticationContextPolicyAccessType : Enum {
    public int value__;
    public static SPOAuthenticationContextPolicyAccessType AllowLimitedAccess;
    public static SPOAuthenticationContextPolicyAccessType BlockAccess;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType : Enum {
    public int value__;
    public static SPOConditionalAccessPolicyType AllowFullAccess;
    public static SPOConditionalAccessPolicyType AllowLimitedAccess;
    public static SPOConditionalAccessPolicyType BlockAccess;
    public static SPOConditionalAccessPolicyType AuthenticationContext;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SPOLimitedAccessFileType : Enum {
    public int value__;
    public static SPOLimitedAccessFileType OfficeOnlineFilesOnly;
    public static SPOLimitedAccessFileType WebPreviewableFiles;
    public static SPOLimitedAccessFileType OtherFiles;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SPOTlsTokenBindingPolicyValue : Enum {
    public int value__;
    public static SPOTlsTokenBindingPolicyValue None;
    public static SPOTlsTokenBindingPolicyValue Audit;
    public static SPOTlsTokenBindingPolicyValue PassiveEnforcement;
    public static SPOTlsTokenBindingPolicyValue StrictEnforcement;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.SPOUserSessionRevocationResult")]
public class Microsoft.Online.SharePoint.TenantManagement.SPOUserSessionRevocationResult : ClientObject {
    [RemoteAttribute]
public SPOUserSessionRevocationState State { get; }
    [EditorBrowsableAttribute("1")]
public SPOUserSessionRevocationResult(ClientRuntimeContext context, ObjectPath objectPath);
    public SPOUserSessionRevocationState get_State();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.SPOUserSessionRevocationResultPropertyNames : object {
    public static string State;
}
public enum Microsoft.Online.SharePoint.TenantManagement.SPOUserSessionRevocationState : Enum {
    public int value__;
    public static SPOUserSessionRevocationState FeatureDisabled;
    public static SPOUserSessionRevocationState UserNotFound;
    public static SPOUserSessionRevocationState Failure;
    public static SPOUserSessionRevocationState NonInstantaneousSuccess;
    public static SPOUserSessionRevocationState InstantaneousSuccess;
}
public enum Microsoft.Online.SharePoint.TenantManagement.StreamLaunchConfigValues : Enum {
    public int value__;
    public static StreamLaunchConfigValues Classic;
    public static StreamLaunchConfigValues LetMSDecide;
    public static StreamLaunchConfigValues NewTenant;
    public static StreamLaunchConfigValues StreamOnSharepoint;
}
[ScriptTypeAttribute("Microsoft.Online.SharePoint.TenantManagement.ThemeProperties")]
public class Microsoft.Online.SharePoint.TenantManagement.ThemeProperties : ClientObject {
    [RemoteAttribute]
public bool IsInverted { get; }
    [RemoteAttribute]
public string Name { get; }
    [RemoteAttribute]
public IDictionary`2<string, string> Palette { get; }
    [EditorBrowsableAttribute("1")]
public ThemeProperties(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_IsInverted();
    public string get_Name();
    public IDictionary`2<string, string> get_Palette();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Online.SharePoint.TenantManagement.ThemePropertiesPropertyNames : object {
    public static string IsInverted;
    public static string Name;
    public static string Palette;
}
public enum Microsoft.Online.SharePoint.TenantManagement.Workflows2013State : Enum {
    public int value__;
    public static Workflows2013State Disabled;
    public static Workflows2013State Configuring;
    public static Workflows2013State Enabled;
    public static Workflows2013State Retired;
}
