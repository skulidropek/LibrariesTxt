[ScriptTypeAttribute("SP.DocumentManagement.DocumentId")]
public class Microsoft.SharePoint.Client.DocumentManagement.DocumentId : ClientObject {
    public DocumentId(ClientRuntimeContext context);
    [EditorBrowsableAttribute("1")]
public DocumentId(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void SetDocIdSitePrefix(string prefix, bool scheduleAssignment, bool overwriteExistingIds);
}
[ScriptTypeAttribute("SP.DocumentManagement.MetadataDefaults")]
public class Microsoft.SharePoint.Client.DocumentManagement.MetadataDefaults : ClientObject {
    public MetadataDefaults(ClientRuntimeContext context, List list);
    [EditorBrowsableAttribute("1")]
public MetadataDefaults(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public ClientResult`1<bool> SetFieldDefault(Folder folder, string fieldName, string value);
    [RemoteAttribute]
public void Update();
}
public class Microsoft.SharePoint.Client.DocumentManagement.ScriptTypeFactory : object {
    public sealed virtual IFromJson CreateObjectFromScriptType(string scriptType, ClientRuntimeContext context);
}
[ScriptTypeAttribute("SP.DocumentSet.AllowedContentTypeCollection")]
public class Microsoft.SharePoint.Client.DocumentSet.AllowedContentTypeCollection : ClientObjectCollection`1<ContentTypeId> {
    [EditorBrowsableAttribute("1")]
public AllowedContentTypeCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void Add(ContentTypeId ctId);
    [RemoteAttribute]
public void Remove(ContentTypeId ctId);
}
[ScriptTypeAttribute("SP.DocumentSet.DefaultDocument")]
public class Microsoft.SharePoint.Client.DocumentSet.DefaultDocument : ClientObject {
    [RemoteAttribute]
public ContentTypeId ContentTypeId { get; public set; }
    [RemoteAttribute]
public ResourcePath DocumentPath { get; }
    [RemoteAttribute]
public string Name { get; }
    [EditorBrowsableAttribute("1")]
public DefaultDocument(ClientRuntimeContext context, ObjectPath objectPath);
    public ContentTypeId get_ContentTypeId();
    public void set_ContentTypeId(ContentTypeId value);
    public ResourcePath get_DocumentPath();
    public string get_Name();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.DocumentSet.DefaultDocumentCollection")]
public class Microsoft.SharePoint.Client.DocumentSet.DefaultDocumentCollection : ClientObjectCollection`1<DefaultDocument> {
    [EditorBrowsableAttribute("1")]
public DefaultDocumentCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public DefaultDocument Add(string name, ContentTypeId ctId, Byte[] content);
    [RemoteAttribute]
public ClientResult`1<bool> ChangeContentTypeForDocument(string name, ContentTypeId contentTypeId);
    [RemoteAttribute]
public void Remove(string name);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.DocumentSet.DefaultDocumentPropertyNames : object {
    public static string ContentTypeId;
    public static string DocumentPath;
    public static string Name;
}
[ScriptTypeAttribute("SP.DocumentSet.DocumentSet")]
public class Microsoft.SharePoint.Client.DocumentSet.DocumentSet : ClientObject {
    [RemoteAttribute]
public DocumentSetVersionCollection VersionCollection { get; }
    [EditorBrowsableAttribute("1")]
public DocumentSet(ClientRuntimeContext context, ObjectPath objectPath);
    public DocumentSetVersionCollection get_VersionCollection();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public static DocumentSet GetDocumentSet(ClientRuntimeContext context, Folder folder);
    [RemoteAttribute]
public static ClientResult`1<string> Create(ClientRuntimeContext context, Folder parentFolder, string name, ContentTypeId ctid);
    [RemoteAttribute]
public ClientResult`1<Stream> ExportDocumentSet();
    [RemoteAttribute]
public static DocumentSet ImportDocumentSet(ClientRuntimeContext context, Stream archiveStream, string archiveName, Folder parentFolder, ContentTypeId docsetContentTypeId);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.DocumentSet.DocumentSetObjectPropertyNames : object {
    public static string VersionCollection;
}
[ScriptTypeAttribute("SP.DocumentSet.DocumentSetTemplate")]
public class Microsoft.SharePoint.Client.DocumentSet.DocumentSetTemplate : ClientObject {
    [RemoteAttribute]
public AllowedContentTypeCollection AllowedContentTypes { get; }
    [RemoteAttribute]
public DefaultDocumentCollection DefaultDocuments { get; }
    [RemoteAttribute]
public SharedFieldCollection SharedFields { get; }
    [RemoteAttribute]
public WelcomePageFieldCollection WelcomePageFields { get; }
    [EditorBrowsableAttribute("1")]
public DocumentSetTemplate(ClientRuntimeContext context, ObjectPath objectPath);
    public AllowedContentTypeCollection get_AllowedContentTypes();
    public DefaultDocumentCollection get_DefaultDocuments();
    public SharedFieldCollection get_SharedFields();
    public WelcomePageFieldCollection get_WelcomePageFields();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public static ClientResult`1<ContentTypeId> GetContentTypeId(ClientRuntimeContext context);
    [RemoteAttribute]
public static DocumentSetTemplate GetDocumentSetTemplate(ClientRuntimeContext context, ContentType ct);
    [RemoteAttribute]
public static ClientResult`1<bool> IsChildOfDocumentSetContentType(ClientRuntimeContext context, ContentType ct);
    [RemoteAttribute]
public void Update(bool bPushDown);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.DocumentSet.DocumentSetTemplateObjectPropertyNames : object {
    public static string AllowedContentTypes;
    public static string DefaultDocuments;
    public static string SharedFields;
    public static string WelcomePageFields;
}
[ScriptTypeAttribute("SP.DocumentSet.DocumentSetVersion")]
public class Microsoft.SharePoint.Client.DocumentSet.DocumentSetVersion : ClientObject {
    [RemoteAttribute]
public string Comments { get; }
    [RemoteAttribute]
public DateTime Created { get; }
    [RemoteAttribute]
public string CreatedBy { get; }
    [RemoteAttribute]
public DocumentSetVersionCollection ParentCollection { get; }
    [RemoteAttribute]
public string VersionLabel { get; }
    [EditorBrowsableAttribute("1")]
public DocumentSetVersion(ClientRuntimeContext context, ObjectPath objectPath);
    public string get_Comments();
    public DateTime get_Created();
    public string get_CreatedBy();
    public DocumentSetVersionCollection get_ParentCollection();
    public string get_VersionLabel();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [RemoteAttribute]
public IList`1<DocumentSetVersionField> GetDisplayFields();
    [RemoteAttribute]
public IList`1<DocumentSetVersionItem> GetDisplayContents();
}
[ScriptTypeAttribute("SP.DocumentSet.DocumentSetVersionCollection")]
public class Microsoft.SharePoint.Client.DocumentSet.DocumentSetVersionCollection : ClientObjectCollection`1<DocumentSetVersion> {
    [EditorBrowsableAttribute("1")]
public DocumentSetVersionCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void Add(bool isLastMajor, string comments);
}
[ScriptTypeAttribute("SP.DocumentSet.DocumentSetVersionField")]
public class Microsoft.SharePoint.Client.DocumentSet.DocumentSetVersionField : ClientValueObject {
    private string m_formattedValue;
    private Guid m_id;
    private bool m_isFieldFound;
    private string m_title;
    [RemoteAttribute]
public string FormattedValue { get; public set; }
    [RemoteAttribute]
public Guid Id { get; public set; }
    [RemoteAttribute]
public bool IsFieldFound { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_FormattedValue();
    public void set_FormattedValue(string value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public bool get_IsFieldFound();
    public void set_IsFieldFound(bool value);
    public string get_Title();
    public void set_Title(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.DocumentSet.DocumentSetVersionItem")]
public class Microsoft.SharePoint.Client.DocumentSet.DocumentSetVersionItem : ClientValueObject {
    private int m_internalId;
    private bool m_isItemFound;
    private string m_itemUrl;
    private string m_linkToDocumentUrl;
    private string m_title;
    private string m_versionLabel;
    [RemoteAttribute]
public int InternalId { get; public set; }
    [RemoteAttribute]
public bool IsItemFound { get; public set; }
    [RemoteAttribute]
public string ItemUrl { get; public set; }
    [RemoteAttribute]
public string LinkToDocumentUrl { get; public set; }
    [RemoteAttribute]
public string Title { get; public set; }
    [RemoteAttribute]
public string VersionLabel { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public int get_InternalId();
    public void set_InternalId(int value);
    public bool get_IsItemFound();
    public void set_IsItemFound(bool value);
    public string get_ItemUrl();
    public void set_ItemUrl(string value);
    public string get_LinkToDocumentUrl();
    public void set_LinkToDocumentUrl(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_VersionLabel();
    public void set_VersionLabel(string value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.DocumentSet.DocumentSetVersionObjectPropertyNames : object {
    public static string ParentCollection;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SharePoint.Client.DocumentSet.DocumentSetVersionPropertyNames : object {
    public static string Comments;
    public static string Created;
    public static string CreatedBy;
    public static string VersionLabel;
}
[ScriptTypeAttribute("SP.DocumentSet.SharedFieldCollection")]
public class Microsoft.SharePoint.Client.DocumentSet.SharedFieldCollection : ClientObjectCollection`1<Field> {
    [EditorBrowsableAttribute("1")]
public SharedFieldCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void Add(Field fld);
    [RemoteAttribute]
public void Remove(Field fld);
}
[ScriptTypeAttribute("SP.DocumentSet.WelcomePageFieldCollection")]
public class Microsoft.SharePoint.Client.DocumentSet.WelcomePageFieldCollection : ClientObjectCollection`1<Field> {
    [EditorBrowsableAttribute("1")]
public WelcomePageFieldCollection(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public void Add(Field fld);
    [RemoteAttribute]
public void Remove(Guid fieldId);
}
[ScriptTypeAttribute("SP.MetadataNavigation.ConfiguredMetadataNavigationItem")]
public class Microsoft.SharePoint.Client.MetadataNavigation.ConfiguredMetadataNavigationItem : ClientValueObject {
    private string m_fieldDisplayName;
    private string m_fieldTitle;
    private string m_fieldTypeAsString;
    private bool m_isContentTypeField;
    private bool m_isFolderHierarchy;
    private bool m_isHierarchy;
    private bool m_isMultiValueLookup;
    private bool m_isTaxonomyField;
    [RemoteAttribute]
public string FieldDisplayName { get; }
    [RemoteAttribute]
public string FieldTitle { get; }
    [RemoteAttribute]
public string FieldTypeAsString { get; }
    [RemoteAttribute]
public bool IsContentTypeField { get; }
    [RemoteAttribute]
public bool IsFolderHierarchy { get; }
    [RemoteAttribute]
public bool IsHierarchy { get; }
    [RemoteAttribute]
public bool IsMultiValueLookup { get; }
    [RemoteAttribute]
public bool IsTaxonomyField { get; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public string get_FieldDisplayName();
    public string get_FieldTitle();
    public string get_FieldTypeAsString();
    public bool get_IsContentTypeField();
    public bool get_IsFolderHierarchy();
    public bool get_IsHierarchy();
    public bool get_IsMultiValueLookup();
    public bool get_IsTaxonomyField();
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.MetadataNavigation.ConfiguredMetadataNavigationItemCollection")]
public class Microsoft.SharePoint.Client.MetadataNavigation.ConfiguredMetadataNavigationItemCollection : ClientValueObjectCollection`1<ConfiguredMetadataNavigationItem> {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
[ScriptTypeAttribute("SP.MetadataNavigation.MetadataNavigationSettings")]
public class Microsoft.SharePoint.Client.MetadataNavigation.MetadataNavigationSettings : ClientObject {
    [EditorBrowsableAttribute("1")]
public MetadataNavigationSettings(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public static ClientResult`1<ConfiguredMetadataNavigationItemCollection> GetConfiguredSettings(ClientRuntimeContext context, ResourcePath listPath);
}
[ScriptTypeAttribute("SP.Video.EmbedCodeConfiguration")]
public class Microsoft.SharePoint.Client.Video.EmbedCodeConfiguration : ClientValueObject {
    private bool m_autoPlay;
    private bool m_displayTitle;
    private bool m_linkToOwnerProfilePage;
    private bool m_linkToVideoHomePage;
    private bool m_loop;
    private UInt32 m_pixelHeight;
    private UInt32 m_pixelWidth;
    private string m_previewImagePath;
    private UInt32 m_startTime;
    [RemoteAttribute]
public bool AutoPlay { get; public set; }
    [RemoteAttribute]
public bool DisplayTitle { get; public set; }
    [RemoteAttribute]
public bool LinkToOwnerProfilePage { get; public set; }
    [RemoteAttribute]
public bool LinkToVideoHomePage { get; public set; }
    [RemoteAttribute]
public bool Loop { get; public set; }
    [RemoteAttribute]
public UInt32 PixelHeight { get; public set; }
    [RemoteAttribute]
public UInt32 PixelWidth { get; public set; }
    [RemoteAttribute]
public string PreviewImagePath { get; public set; }
    [RemoteAttribute]
public UInt32 StartTime { get; public set; }
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    public bool get_AutoPlay();
    public void set_AutoPlay(bool value);
    public bool get_DisplayTitle();
    public void set_DisplayTitle(bool value);
    public bool get_LinkToOwnerProfilePage();
    public void set_LinkToOwnerProfilePage(bool value);
    public bool get_LinkToVideoHomePage();
    public void set_LinkToVideoHomePage(bool value);
    public bool get_Loop();
    public void set_Loop(bool value);
    public UInt32 get_PixelHeight();
    public void set_PixelHeight(UInt32 value);
    public UInt32 get_PixelWidth();
    public void set_PixelWidth(UInt32 value);
    public string get_PreviewImagePath();
    public void set_PreviewImagePath(string value);
    public UInt32 get_StartTime();
    public void set_StartTime(UInt32 value);
    public virtual string get_TypeId();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
}
[ScriptTypeAttribute("SP.Video.VideoSet")]
public class Microsoft.SharePoint.Client.Video.VideoSet : DocumentSet {
    [EditorBrowsableAttribute("1")]
public VideoSet(ClientRuntimeContext context, ObjectPath objectPath);
    [RemoteAttribute]
public static ClientResult`1<string> CreateVideo(ClientRuntimeContext context, Folder parentFolder, string name, ContentTypeId ctid);
    [RemoteAttribute]
public static ClientResult`1<string> UploadVideo(ClientRuntimeContext context, List list, string fileName, Stream file, bool overwriteIfExists, string parentFolderPath);
    [RemoteAttribute]
public static ClientResult`1<string> GetEmbedCode(ClientRuntimeContext context, string videoPath, EmbedCodeConfiguration properties);
    [RemoteAttribute]
public static ListItem MigrateVideo(ClientRuntimeContext context, File videoFile);
}
