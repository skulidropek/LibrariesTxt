internal class Microsoft.SharePoint.Client.AttachmentStreamFromServer : ReadonlyWrapStream {
    private ClientRuntimeContext m_context;
    private string m_streamId;
    private Stream m_underlyingStream;
    protected Stream UnderlyingStream { get; }
    internal AttachmentStreamFromServer(ClientRuntimeContext context, string streamId);
    protected virtual Stream get_UnderlyingStream();
}
internal class Microsoft.SharePoint.Client.ChunkStreamBuilder : object {
    private bool m_isOpen;
    private int m_chunkSize;
    private List`1<Byte[]> m_chunkBuffers;
    private Byte[] m_buffer;
    private int m_position;
    private int ChunkCount { get; }
    public long Length { get; }
    public void Close();
    private void EnsureChunkSize(int count);
    public void Write(Byte[] buffer);
    public void Write(Byte[] buffer, int offset, int count);
    public void WriteByte(byte value);
    private int GetChunkSize(int chunkIndex);
    private Byte[] GetChunk(int chunkIndex);
    private int get_ChunkCount();
    public void CopyFrom(Stream stream);
    public void WriteTo(Stream stream);
    internal static void CopyStream(Stream src, Stream dest);
    public long get_Length();
    public Stream CreateReadonlyStream();
    internal Stream CreateReadonlyStream(bool owner);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SharePoint.Client.ChunkStringBuilder : object {
    private List`1<StringBuilder> m_sbs;
    private StringBuilder m_sb;
    private static int MaxChunkLength;
    private static int StringBuilderMaxCapacity;
    public char Item { get; public set; }
    public int Length { get; public set; }
    public ChunkStringBuilder(string value);
    private static StringBuilder CreateStringBuilder();
    private void CreateNewBufferIfNecessary();
    public ChunkStringBuilder Append(bool value);
    public ChunkStringBuilder Append(byte value);
    public ChunkStringBuilder Append(char value);
    public ChunkStringBuilder Append(decimal value);
    public ChunkStringBuilder Append(double value);
    public ChunkStringBuilder Append(Char[] value);
    public ChunkStringBuilder Append(short value);
    public ChunkStringBuilder Append(int value);
    public ChunkStringBuilder Append(long value);
    public ChunkStringBuilder Append(sbyte value);
    public ChunkStringBuilder Append(float value);
    public ChunkStringBuilder Append(string value);
    public ChunkStringBuilder Append(ushort value);
    public ChunkStringBuilder Append(UInt32 value);
    public ChunkStringBuilder Append(ulong value);
    public ChunkStringBuilder Append(char value, int repeatCount);
    public ChunkStringBuilder Append(string value, int startIndex, int count);
    public ChunkStringBuilder Append(Char[] value, int startIndex, int count);
    public ChunkStringBuilder AppendLine();
    public ChunkStringBuilder AppendLine(string value);
    public char get_Item(int index);
    public void set_Item(int index, char value);
    public int get_Length();
    public void set_Length(int value);
    private void SurrogatePairAdjust();
    public void WriteContentTo(TextWriter writer);
    public void WriteContentAsRawXml(XmlWriter writer);
    public void WriteContentAsUTF8(Stream stream);
    public TextWriter CreateTextWriter(IFormatProvider formatProvider);
    public XmlWriter CreateXmlWriter();
    public TextReader CreateTextReader();
    public Stream CreateUTF8ReadonlyStream();
}
internal class Microsoft.SharePoint.Client.ChunkStringWriter : TextWriter {
    private bool m_isOpen;
    private ChunkStringBuilder m_sb;
    private static UnicodeEncoding s_encoding;
    public Encoding Encoding { get; }
    public ChunkStringWriter(ChunkStringBuilder sb, IFormatProvider formatProvider);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual Encoding get_Encoding();
}
public abstract class Microsoft.SharePoint.Client.ClientAction : object {
    private long m_id;
    private ObjectPath m_objectPath;
    private string m_name;
    public long Id { get; }
    public ObjectPath Path { get; }
    public string Name { get; }
    protected ClientAction(ObjectPath objectPath, string name);
    internal ClientAction(ClientRuntimeContext context, ObjectPath objectPath, string name);
    public long get_Id();
    public ObjectPath get_Path();
    public string get_Name();
    internal abstract virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    internal static void CheckActionParameterInContext(ClientRuntimeContext context, object value);
    internal static void CheckActionParametersInContext(ClientRuntimeContext context, Object[] values);
}
internal class Microsoft.SharePoint.Client.ClientActionExecutionScopeEnd : ClientAction {
    private ExecutionScope m_scope;
    public ExecutionScope Scope { get; }
    public ClientActionExecutionScopeEnd(ExecutionScope scope, string name);
    public ExecutionScope get_Scope();
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
internal class Microsoft.SharePoint.Client.ClientActionExecutionScopeStart : ClientAction {
    private ExecutionScope m_scope;
    public ExecutionScope Scope { get; }
    public ClientActionExecutionScopeStart(ExecutionScope scope, string name);
    public ExecutionScope get_Scope();
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
internal class Microsoft.SharePoint.Client.ClientActionInstantiateObjectPath : ClientAction {
    public ClientActionInstantiateObjectPath(ObjectPath path);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
internal class Microsoft.SharePoint.Client.ClientActionInstantiateObjectPathResult : object {
    private ObjectPath m_path;
    public ClientActionInstantiateObjectPathResult(ObjectPath path);
    private sealed virtual override void Microsoft.SharePoint.Client.IFromJson.FromJson(JsonReader reader);
    private sealed virtual override bool Microsoft.SharePoint.Client.IFromJson.CustomFromJson(JsonReader reader);
}
public class Microsoft.SharePoint.Client.ClientActionInvokeMethod : ClientAction {
    private Object[] m_parameters;
    private string m_version;
    private SerializationContext m_serializationContext;
    private ChunkStringBuilder m_sb;
    public ClientActionInvokeMethod(ClientObject obj, string methodName, Object[] parameters);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    private void WriteToXmlPrivate(XmlWriter writer, SerializationContext serializationContext);
}
public class Microsoft.SharePoint.Client.ClientActionInvokeStaticMethod : ClientAction {
    private Object[] m_parameters;
    private string m_typeId;
    private SerializationContext m_serializationContext;
    private ChunkStringBuilder m_sb;
    public ClientActionInvokeStaticMethod(ClientRuntimeContext context, string typeId, string methodName, Object[] parameters);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    private void WriteToXmlPrivate(XmlWriter writer, SerializationContext serializationContext);
}
public class Microsoft.SharePoint.Client.ClientActionSetProperty : ClientAction {
    private string m_propName;
    private object m_propValue;
    private SerializationContext m_serializationContext;
    private ChunkStringBuilder m_sb;
    public ClientActionSetProperty(ClientObject obj, string propName, object propValue);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    private void WriteToXmlPrivate(XmlWriter writer, SerializationContext serializationContext);
}
public class Microsoft.SharePoint.Client.ClientActionSetStaticProperty : ClientAction {
    private string m_typeId;
    private object m_propValue;
    private SerializationContext m_serializationContext;
    private ChunkStringBuilder m_sb;
    public ClientActionSetStaticProperty(ClientRuntimeContext context, string typeId, string propName, object propValue);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    private void WriteToXmlPrivate(XmlWriter writer, SerializationContext serializationContext);
}
public class Microsoft.SharePoint.Client.ClientArrayResult`1 : object {
    private T[] m_value;
    public T[] Value { get; }
    public T[] get_Value();
    private sealed virtual override void Microsoft.SharePoint.Client.IFromJson.FromJson(JsonReader reader);
    private sealed virtual override bool Microsoft.SharePoint.Client.IFromJson.CustomFromJson(JsonReader reader);
}
public static class Microsoft.SharePoint.Client.ClientConstants : object {
    public static string AddExpandoFieldTypeSuffix;
    public static string Actions;
    public static string ApplicationName;
    public static string Body;
    public static string CatchScope;
    public static string ChildItemQuery;
    public static string ChildItems;
    public static string ConditionalScope;
    public static string Constructor;
    public static string Context;
    public static string ErrorInfo;
    public static string ErrorMessage;
    public static string ErrorStackTrace;
    public static string ErrorCode;
    public static string ErrorTypeName;
    public static string ErrorValue;
    public static string ErrorDetails;
    public static string ErrorTraceCorrelationId;
    public static string ExceptionHandlingScope;
    public static string ExceptionHandlingScopeSimple;
    public static string QueryableExpression;
    public static string FinallyScope;
    public static string HasException;
    public static string Id;
    public static string Identity;
    public static string IfFalseScope;
    public static string IfTrueScope;
    public static string IsNull;
    public static string LibraryVersion;
    public static string TraceCorrelationId;
    public static string Count;
    public static string Method;
    public static string Methods;
    public static string Name;
    public static string Object;
    public static string ObjectPathId;
    public static string ObjectPath;
    public static string ObjectPaths;
    public static string ObjectType;
    public static string ObjectIdentity;
    public static string ObjectIdentityQuery;
    public static string ObjectVersion;
    public static string Parameter;
    public static string Parameters;
    public static string ParentId;
    public static string Processed;
    public static string Property;
    public static string Properties;
    public static string Query;
    public static string QueryResult;
    public static string Request;
    public static string Results;
    public static string ScalarProperty;
    public static string SchemaVersion;
    public static string ScopeId;
    public static string SelectAll;
    public static string SelectAllProperties;
    public static string SetProperty;
    public static string SetStaticProperty;
    public static string StaticMethod;
    public static string StaticProperty;
    public static string SuffixChar;
    public static string SuffixByte;
    public static string SuffixInt16;
    public static string SuffixUInt16;
    public static string SuffixInt32;
    public static string SuffixUInt32;
    public static string SuffixInt64;
    public static string SuffixUInt64;
    public static string SuffixSingle;
    public static string SuffixDouble;
    public static string SuffixDecimal;
    public static string SuffixTimeSpan;
    public static string SuffixArray;
    public static string Test;
    public static string TryScope;
    public static string Type;
    public static string TypeId;
    public static string Update;
    public static string Version;
    public static string XmlElementName;
    public static string XmlElementAttributes;
    public static string XmlElementChildren;
    public static string XmlNamespace;
    public static string FieldValuesMethodName;
    public static string RequestTokenHeader;
    public static string FormDigestHeader;
    public static string UseWebLanguageHeader;
    public static string UseWebLanguageHeaderValue;
    public static string ClientTagHeader;
    public static string ForceAuthenticationHeader;
    public static string ForceAuthenticationHeaderValue;
    public static string TraceCorrelationIdRequestHeader;
    public static string TraceCorrelationIdResponseHeader;
    public static string GreaterThan;
    public static string LessThan;
    public static string Equal;
    public static string NotEqual;
    public static string GreaterThanOrEqual;
    public static string LessThanOrEqual;
    public static string AndAlso;
    public static string OrElse;
    public static string Not;
    public static string ExpressionParameter;
    public static string ExpressionProperty;
    public static string ExpressionStaticProperty;
    public static string ExpressionMethod;
    public static string ExpressionStaticMethod;
    public static string ExpressionConstant;
    public static string ExpressionConvert;
    public static string ExpressionTypeIs;
    public static string OfType;
    public static string Take;
    public static string Where;
    public static string OrderBy;
    public static string OrderByDescending;
    public static string ThenBy;
    public static string ThenByDescending;
    public static string QueryableObject;
    public static string ServiceFileName;
    public static string ServiceMethodName;
    public static string FluidApplicationInitParamUrl;
    public static string FluidApplicationInitParamViaUrl;
    public static string FluidApplicationInitParamRequestToken;
    public static string FluidApplicationInitParamFormDigestTimeoutSeconds;
    public static string FluidApplicationInitParamFormDigest;
}
public class Microsoft.SharePoint.Client.ClientDictionaryResultHandler`1 : object {
    private IDictionary`2<string, T> m_dict;
    public ClientDictionaryResultHandler`1(IDictionary`2<string, T> dict);
    private sealed virtual override void Microsoft.SharePoint.Client.IFromJson.FromJson(JsonReader reader);
    private sealed virtual override bool Microsoft.SharePoint.Client.IFromJson.CustomFromJson(JsonReader reader);
}
public static class Microsoft.SharePoint.Client.ClientErrorCodes : object {
    public static int GenericError;
    public static int AccessDenied;
    public static int DocAlreadyExists;
    public static int VersionConflict;
    public static int ListItemDeleted;
    public static int InvalidFieldValue;
    public static int NotSupported;
    public static int Redirect;
    public static int NotSupportedRequestVersion;
    public static int FieldValueFailedValidation;
    public static int ItemValueFailedValidation;
}
public class Microsoft.SharePoint.Client.ClientListResultHandler`1 : object {
    private IList`1<T> m_list;
    public ClientListResultHandler`1(IList`1<T> list);
    private sealed virtual override void Microsoft.SharePoint.Client.IFromJson.FromJson(JsonReader reader);
    private sealed virtual override bool Microsoft.SharePoint.Client.IFromJson.CustomFromJson(JsonReader reader);
}
public abstract class Microsoft.SharePoint.Client.ClientObject : object {
    private ClientRuntimeContext m_context;
    private ClientObjectData m_objectData;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    private ClientObjectCollection m_parentCollection;
    private bool m_setAsNull;
    public ClientRuntimeContext Context { get; }
    public object Tag { get; public set; }
    [EditorBrowsableAttribute("1")]
public ObjectPath Path { get; }
    [EditorBrowsableAttribute("1")]
public string ObjectVersion { get; public set; }
    protected internal ClientObjectData ObjectData { get; }
    internal ClientQueryInternal Query { get; }
    internal ClientObjectCollection ParentCollection { get; internal set; }
    [PseudoRemoteAttribute]
public Nullable`1<bool> ServerObjectIsNull { get; }
    public ClientObject TypedObject { get; }
    [EditorBrowsableAttribute("1")]
protected ClientObject(ClientRuntimeContext context, ObjectPath objectPath);
    public ClientRuntimeContext get_Context();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public ObjectPath get_Path();
    public string get_ObjectVersion();
    public void set_ObjectVersion(string value);
    protected internal ClientObjectData get_ObjectData();
    protected void CheckUninitializedProperty(string propName);
    internal void SetObjectDataFrom(ClientObject otherObject);
    [EditorBrowsableAttribute("1")]
public virtual void FromJson(JsonReader reader);
    [EditorBrowsableAttribute("1")]
public virtual bool CustomFromJson(JsonReader reader);
    [EditorBrowsableAttribute("1")]
protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [EditorBrowsableAttribute("1")]
protected virtual void InitNonPropertyFieldFromJson(string peekedName, JsonReader reader);
    [EditorBrowsableAttribute("1")]
public void Retrieve();
    [EditorBrowsableAttribute("1")]
public void Retrieve(String[] propertyNames);
    public virtual void RefreshLoad();
    public bool IsPropertyAvailable(string propertyName);
    public bool IsObjectPropertyInstantiated(string propertyName);
    internal ClientQueryInternal get_Query();
    private void SelectExistingScalarProperties(ClientQueryInternal query);
    protected virtual void LoadExpandoFields();
    internal virtual void CleanupQuery();
    internal ClientObjectCollection get_ParentCollection();
    internal void set_ParentCollection(ClientObjectCollection value);
    protected void RemoveFromParentCollection();
    internal void SetAsNull();
    public Nullable`1<bool> get_ServerObjectIsNull();
    protected internal void UpdateClientObjectPropertyType(string propertyName, object propertyValue, JsonReader reader);
    internal void SetTypedObject(ClientObject typedObject);
    public ClientObject get_TypedObject();
}
public abstract class Microsoft.SharePoint.Client.ClientObjectCollection : ClientObject {
    public bool AreItemsAvailable { get; }
    public int Count { get; }
    private bool DataInited { get; }
    protected List`1<object> Data { get; }
    protected ClientObjectCollection(ClientRuntimeContext context, ObjectPath objectPath);
    public bool get_AreItemsAvailable();
    [IteratorStateMachineAttribute("Microsoft.SharePoint.Client.ClientObjectCollection/<System-Collections-IEnumerable-GetEnumerator>d__3")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected object GetItemAtIndex(int i);
    public virtual int get_Count();
    private bool get_DataInited();
    internal void SetDataInited();
    internal void ThrowIfCollectionNotInited();
    protected List`1<object> get_Data();
    protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    internal virtual Object[] ReadChildItems(JsonReader reader);
    protected void AddChild(ClientObject obj);
    protected internal void RemoveChild(ClientObject obj);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.SharePoint.Client.ClientObjectCollection`1 : ClientObjectCollection {
    private ClientObjectPrototype`1<T> m_itemPrototype;
    public T Item { get; }
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public ClientObjectCollection`1(ClientRuntimeContext context, ObjectPath objectPath);
    [EditorBrowsableAttribute("1")]
public ClientObjectPrototype`1<T> RetrieveItems();
    [IteratorStateMachineAttribute("Microsoft.SharePoint.Client.ClientObjectCollection`1/<GetEnumerator>d__3")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    public T get_Item(int index);
    internal virtual Object[] ReadChildItems(JsonReader reader);
    internal virtual void CleanupQuery();
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
}
public class Microsoft.SharePoint.Client.ClientObjectCollectionPrototype`1 : ClientObjectPrototype {
    private ClientObjectPrototype`1<ItemType> m_itemQuery;
    internal ClientObjectCollectionPrototype`1(ClientQueryInternal query, bool childItem);
    public ClientObjectPrototype`1<ItemType> RetrieveItems();
}
public class Microsoft.SharePoint.Client.ClientObjectData : object {
    private string m_version;
    private Dictionary`2<string, object> m_properties;
    private Dictionary`2<string, object> m_clientObjectProperties;
    private Dictionary`2<string, object> m_methodReturnObjects;
    private ClientQueryInternal m_query;
    private ClientObject m_typedObject;
    private ClientObject m_associatedObject;
    private ObjectPath m_path;
    private bool m_collectionDataInited;
    private List`1<object> m_collectionData;
    internal string Version { get; internal set; }
    public Dictionary`2<string, object> Properties { get; }
    public Dictionary`2<string, object> ClientObjectProperties { get; }
    public Dictionary`2<string, object> MethodReturnObjects { get; }
    internal ClientQueryInternal Query { get; internal set; }
    internal ClientObject TypedObject { get; internal set; }
    internal ClientObject AssociatedObject { get; internal set; }
    internal ObjectPath Path { get; internal set; }
    internal bool CollectionDataInited { get; internal set; }
    internal List`1<object> CollectionData { get; internal set; }
    internal string get_Version();
    internal void set_Version(string value);
    public Dictionary`2<string, object> get_Properties();
    public Dictionary`2<string, object> get_ClientObjectProperties();
    public Dictionary`2<string, object> get_MethodReturnObjects();
    internal ClientQueryInternal get_Query();
    internal void set_Query(ClientQueryInternal value);
    internal ClientObject get_TypedObject();
    internal void set_TypedObject(ClientObject value);
    internal ClientObject get_AssociatedObject();
    internal void set_AssociatedObject(ClientObject value);
    internal ObjectPath get_Path();
    internal void set_Path(ObjectPath value);
    internal bool get_CollectionDataInited();
    internal void set_CollectionDataInited(bool value);
    internal List`1<object> get_CollectionData();
    internal void set_CollectionData(List`1<object> value);
}
public class Microsoft.SharePoint.Client.ClientObjectList`1 : ClientObjectCollection`1<T> {
    [EditorBrowsableAttribute("1")]
public ClientObjectList`1(ClientRuntimeContext context, ObjectPath objectPath);
    [EditorBrowsableAttribute("1")]
public virtual void FromJson(JsonReader reader);
    [EditorBrowsableAttribute("1")]
public virtual bool CustomFromJson(JsonReader reader);
}
public class Microsoft.SharePoint.Client.ClientObjectPrototype : object {
    private ClientQueryInternal m_query;
    private bool m_childItem;
    private Dictionary`2<string, ClientObjectPrototype> m_subObjectPrototypes;
    private Dictionary`2<string, ClientObjectPrototype> m_subObjectCollectionProperties;
    internal ClientQueryInternal Query { get; }
    internal bool ChildItemPrototype { get; }
    internal ClientObjectPrototype(ClientQueryInternal query, bool childItem);
    internal ClientQueryInternal get_Query();
    internal bool get_ChildItemPrototype();
    public void Retrieve();
    public void Retrieve(String[] propertyNames);
    public ClientObjectPrototype`1<PropertyType> RetrieveObject(string propertyName);
    public ClientObjectCollectionPrototype`1<ItemType> RetrieveCollectionObject(string propertyName);
}
public class Microsoft.SharePoint.Client.ClientObjectPrototype`1 : ClientObjectPrototype {
    internal ClientObjectPrototype`1(ClientQueryInternal query, bool childItem);
}
[ExtensionAttribute]
public static class Microsoft.SharePoint.Client.ClientObjectQueryableExtension : object {
    internal static string IncludeMethodName;
    internal static string IncludeWithDefaultPropertiesName;
    [ExtensionAttribute]
public static IQueryable`1<TSource> Include(IQueryable`1<TSource> clientObjects, Expression`1[] retrievals);
    [ExtensionAttribute]
public static IQueryable`1<TSource> IncludeWithDefaultProperties(IQueryable`1<TSource> clientObjects, Expression`1[] retrievals);
}
internal class Microsoft.SharePoint.Client.ClientQueryable`1 : object {
    private Expression m_exp;
    private ClientQueryProvider m_provider;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public ClientQueryable`1(ClientQueryProvider provider, Expression exp);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
}
internal class Microsoft.SharePoint.Client.ClientQueryableResult`1 : object {
    private List`1<T> m_data;
    private sealed virtual override void Microsoft.SharePoint.Client.IFromJson.FromJson(JsonReader reader);
    private sealed virtual override bool Microsoft.SharePoint.Client.IFromJson.CustomFromJson(JsonReader reader);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SharePoint.Client.ClientQueryInternal : ClientAction {
    private ClientQueryInternal m_rootQuery;
    private ClientRuntimeContext m_context;
    private ClientQueryInternal m_childItemQuery;
    private bool m_isChildItemQuery;
    private Dictionary`2<string, ClientQueryProperty> m_properties;
    private bool m_selectAllProperties;
    private List`1<ClientQueryInternal> m_subQueries;
    private ChunkStringBuilder m_childItemFilterSb;
    private SerializationContext m_childItemFilterSerializationContext;
    internal ClientRuntimeContext Context { get; }
    internal ClientQueryInternal RootQuery { get; }
    public bool IsChildItemQuery { get; }
    internal bool HasChildItemQuery { get; }
    public ClientQueryInternal ChildItemQuery { get; }
    internal bool ChildItemFilterSet { get; }
    internal SerializationContext ChildItemExpressionSerializationContext { get; }
    public ClientQueryInternal(ClientObject obj, string name, bool subQuery, ClientQueryInternal parentQuery);
    private static ClientRuntimeContext GetContext(ClientObject obj, ClientQueryInternal parentQuery);
    internal ClientRuntimeContext get_Context();
    internal ClientQueryInternal get_RootQuery();
    public bool get_IsChildItemQuery();
    internal void SetIsChildItemQuery();
    public ClientQueryInternal Select(string propertyName);
    public ClientQueryInternal SelectWithAll(string propertyName);
    public ClientQueryInternal SelectAllProperties();
    public ClientQueryInternal SelectSubQuery(ClientQueryInternal subQuery);
    internal ClientQueryInternal GetSubQuery(string name);
    internal bool get_HasChildItemQuery();
    public ClientQueryInternal get_ChildItemQuery();
    internal bool get_ChildItemFilterSet();
    internal SerializationContext get_ChildItemExpressionSerializationContext();
    internal ClientQueryInternal ChildItemFilterExpression(ChunkStringBuilder childItemFilterExpression);
    internal void WriteInnerXmlTo(XmlWriter writer, SerializationContext serializationContext);
    internal void WriteInnerXmlCoreTo(XmlWriter writer, SerializationContext serializationContext);
    internal static void WriteFilterExpressionToXml(XmlWriter writer, SerializationContext serializationContext, LambdaExpression childItemFilterExpression);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ClientQueryInternal query);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
internal class Microsoft.SharePoint.Client.ClientQueryProperty : object {
    public bool ScalarProperty;
    public bool ScalarPropertySet;
    public bool SelectAll;
    public bool SelectAllSet;
    public ClientQueryInternal Query;
}
internal class Microsoft.SharePoint.Client.ClientQueryProvider : object {
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private static TResult ExecuteExpression(Expression expression);
}
public class Microsoft.SharePoint.Client.ClientRequest : object {
    private static long s_sequenceId;
    internal static long InvalidId;
    private static int StartSequenceId;
    internal static int GenericErrorCode;
    private ClientRuntimeContext m_context;
    private WebRequestExecutor m_requestExecutor;
    private string m_soapPageUrl;
    private ClientRequestStatus m_requestStatus;
    private List`1<ClientAction> m_queries;
    [CompilerGeneratedAttribute]
private ChunkStringBuilder <QueryBuilder>k__BackingField;
    private ClientAction m_lastAction;
    private List`1<ClientObject> m_clientObjectCleanupList;
    private List`1<ObjectPath> m_clientObjectPathCleanupList;
    private Stack`1<ExecutionScope> m_executionScopes;
    private SerializationContext m_serializationContext;
    private static string MultiPartContentTypeFormat;
    private static string MultiPartMainPartContentType;
    private Dictionary`2<string, object> m_queryIdToObjectMap;
    public static long NextSequenceId { get; }
    internal ClientRuntimeContext Context { get; }
    public WebRequestExecutor RequestExecutor { get; }
    private string SoapPageUrl { get; }
    internal ClientRequestStatus RequestStatus { get; }
    internal List`1<ClientAction> Actions { get; }
    internal ChunkStringBuilder QueryBuilder { get; internal set; }
    internal ClientAction LastAction { get; }
    internal Stack`1<ExecutionScope> ExecutionScopes { get; }
    internal SerializationContext SerializationContext { get; }
    internal Dictionary`2<string, object> QueryIdToObjectMap { get; internal set; }
    internal ClientRequest(ClientRuntimeContext context);
    public static long get_NextSequenceId();
    internal ClientRuntimeContext get_Context();
    public WebRequestExecutor get_RequestExecutor();
    private string get_SoapPageUrl();
    internal ClientRequestStatus get_RequestStatus();
    internal List`1<ClientAction> get_Actions();
    [CompilerGeneratedAttribute]
internal ChunkStringBuilder get_QueryBuilder();
    [CompilerGeneratedAttribute]
internal void set_QueryBuilder(ChunkStringBuilder value);
    [EditorBrowsableAttribute("1")]
internal void AddQuery(ClientAction query);
    internal ClientAction get_LastAction();
    internal void AddObjectToQueryCleanupList(ClientObject obj);
    internal void AddToObjectPathCleanupList(ObjectPath path);
    internal Stack`1<ExecutionScope> get_ExecutionScopes();
    private void CleanupQuery();
    internal void ExecuteQuery();
    [AsyncStateMachineAttribute("Microsoft.SharePoint.Client.ClientRequest/<ExecuteQueryAsync>d__39")]
internal Task ExecuteQueryAsync();
    private ChunkStringBuilder SetupQuery();
    internal SerializationContext get_SerializationContext();
    private ChunkStringBuilder BuildQuery();
    private bool IsMultiPartMime(string contentType, String& boundary);
    private void ProcessResponse();
    private void ProcessResponseStream(Stream responseStream);
    private void WriteMimeStream(ExecuteQueryMimeInfo mimeInfo, ChunkStringBuilder sb, Stream requestStream);
    private void ExecuteQueryToServer(ChunkStringBuilder sb);
    [AsyncStateMachineAttribute("Microsoft.SharePoint.Client.ClientRequest/<ExecuteQueryToServerAsync>d__53")]
private Task ExecuteQueryToServerAsync(ChunkStringBuilder sb);
    private void SetupServerQuery(ChunkStringBuilder sb);
    [EditorBrowsableAttribute("1")]
internal void AddQueryIdAndResultObject(long id, object obj);
    internal Dictionary`2<string, object> get_QueryIdToObjectMap();
    internal void set_QueryIdToObjectMap(Dictionary`2<string, object> value);
}
public class Microsoft.SharePoint.Client.ClientRequestException : Exception {
    public ClientRequestException(string message);
    public ClientRequestException(string message, Exception innerException);
    protected ClientRequestException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.SharePoint.Client.ClientRequestStatus : Enum {
    public int value__;
    public static ClientRequestStatus Active;
    public static ClientRequestStatus InProgress;
    public static ClientRequestStatus CompletedSuccess;
    public static ClientRequestStatus CompletedException;
}
public class Microsoft.SharePoint.Client.ClientRequestWrapper : object {
    [CompilerGeneratedAttribute]
private ClientRequest <Value>k__BackingField;
    public ClientRequest Value { get; internal set; }
    [CompilerGeneratedAttribute]
public ClientRequest get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(ClientRequest value);
}
public class Microsoft.SharePoint.Client.ClientResult`1 : object {
    private T m_value;
    public T Value { get; }
    public T get_Value();
    private sealed virtual override void Microsoft.SharePoint.Client.IFromJson.FromJson(JsonReader reader);
    private sealed virtual override bool Microsoft.SharePoint.Client.IFromJson.CustomFromJson(JsonReader reader);
}
public class Microsoft.SharePoint.Client.ClientRuntimeContext : object {
    private string m_url;
    private long m_sequenceId;
    private string m_applicationName;
    private string m_clientTag;
    private bool m_disableReturnValueCache;
    private bool m_validateOnClient;
    private ICredentials m_credentials;
    private WebRequestExecutorFactory m_webRequestExecutorFactory;
    private ClientRequest m_request;
    private bool m_bProcessingResponse;
    [CompilerGeneratedAttribute]
private EventHandler`1<WebRequestEventArgs> ExecutingWebRequest;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    private int m_requestTimeout;
    private Dictionary`2<string, object> m_staticObjects;
    private Dictionary`2<long, ObjectPath> m_objectPaths;
    private ClientQueryProvider m_queryProvider;
    internal static Version[] s_supportedSchemaVersions;
    private Version m_serverSchemaVersion;
    private Version m_serverLibraryVersion;
    private Version m_requestSchemaVersion;
    private string m_traceCorrelationId;
    private string m_traceCorrelationIdToServer;
    private Dictionary`2<string, ChunkStreamBuilder> m_streamsFromServer;
    internal long NextSequenceId { get; }
    protected internal string ServiceRelativeUrl { get; }
    public string Url { get; }
    public string ApplicationName { get; public set; }
    public string ClientTag { get; public set; }
    public bool DisableReturnValueCache { get; public set; }
    public bool ValidateOnClient { get; public set; }
    public ICredentials Credentials { get; public set; }
    public WebRequestExecutorFactory WebRequestExecutorFactory { get; public set; }
    public ClientRequest PendingRequest { get; }
    public bool HasPendingRequest { get; }
    internal bool ProcessingResponse { get; internal set; }
    public object Tag { get; public set; }
    public int RequestTimeout { get; public set; }
    [EditorBrowsableAttribute("1")]
public Dictionary`2<string, object> StaticObjects { get; }
    internal Dictionary`2<long, ObjectPath> ObjectPaths { get; }
    internal ClientQueryProvider QueryProvider { get; }
    public Version ServerSchemaVersion { get; internal set; }
    public Version ServerLibraryVersion { get; internal set; }
    public Version RequestSchemaVersion { get; public set; }
    public string TraceCorrelationId { get; public set; }
    protected ClientRuntimeContext(string webFullUrl);
    private static ClientRuntimeContext();
    internal long get_NextSequenceId();
    protected internal virtual string get_ServiceRelativeUrl();
    public string get_Url();
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ClientTag();
    public void set_ClientTag(string value);
    public bool get_DisableReturnValueCache();
    public void set_DisableReturnValueCache(bool value);
    public bool get_ValidateOnClient();
    public void set_ValidateOnClient(bool value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public WebRequestExecutorFactory get_WebRequestExecutorFactory();
    public void set_WebRequestExecutorFactory(WebRequestExecutorFactory value);
    public ClientRequest get_PendingRequest();
    public bool get_HasPendingRequest();
    internal bool get_ProcessingResponse();
    internal void set_ProcessingResponse(bool value);
    [CompilerGeneratedAttribute]
public void add_ExecutingWebRequest(EventHandler`1<WebRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExecutingWebRequest(EventHandler`1<WebRequestEventArgs> value);
    protected virtual void OnExecutingWebRequest(WebRequestEventArgs args);
    internal void FireExecutingWebRequestEvent(WebRequestEventArgs args);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public int get_RequestTimeout();
    public void set_RequestTimeout(int value);
    public virtual void ExecuteQuery();
    public virtual void RetryQuery(ClientRequest request);
    [AsyncStateMachineAttribute("Microsoft.SharePoint.Client.ClientRuntimeContext/<ExecuteQueryAsync>d__57")]
public virtual Task ExecuteQueryAsync();
    public virtual Task RetryQueryAsync(ClientRequest request);
    private ClientRequest InitializeRequest();
    private void CreateRetryRequest(ClientRequest request);
    public Dictionary`2<string, object> get_StaticObjects();
    public T CastTo(ClientObject obj);
    [EditorBrowsableAttribute("1")]
public void AddQuery(ClientAction query);
    internal void AddObjectToQueryCleanupList(ClientObject obj);
    internal void AddObjectPath(ObjectPath path);
    internal Dictionary`2<long, ObjectPath> get_ObjectPaths();
    [EditorBrowsableAttribute("1")]
public void AddQueryIdAndResultObject(long id, object obj);
    public object ParseObjectFromJsonString(string json);
    internal static ClientRuntimeContext GetContextFromClientObject(ClientObject obj);
    internal static ClientRuntimeContext GetContextFromObjectPath(ObjectPath objectPath);
    public static void AddClientTypeAssembly(Assembly assembly);
    internal ClientQueryProvider get_QueryProvider();
    public void Load(T clientObject, Expression`1[] retrievals);
    public IEnumerable`1<T> LoadQuery(ClientObjectCollection`1<T> clientObjects);
    public IEnumerable`1<T> LoadQuery(IQueryable`1<T> clientObjects);
    internal static bool CanHandleResponseSchema(Version responseSchemaVersion);
    public Version get_ServerSchemaVersion();
    internal void set_ServerSchemaVersion(Version value);
    public Version get_ServerLibraryVersion();
    internal void set_ServerLibraryVersion(Version value);
    public Version get_RequestSchemaVersion();
    public void set_RequestSchemaVersion(Version value);
    public string get_TraceCorrelationId();
    public void set_TraceCorrelationId(string value);
    internal void AddStream(string streamId, ChunkStreamBuilder stream);
    internal Stream GetStreamAndRemoveFromContext(string streamId);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void SetTraceCorrelationId(string value);
}
public static class Microsoft.SharePoint.Client.ClientSchemaVersions : object {
    public static Version Version14;
    public static Version Version15;
    public static Version CurrentVersion;
    private static ClientSchemaVersions();
}
[AttributeUsageAttribute("1")]
public class Microsoft.SharePoint.Client.ClientTypeAssemblyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ScriptTypeFactory>k__BackingField;
    public Type ScriptTypeFactory { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ScriptTypeFactory();
    [CompilerGeneratedAttribute]
public void set_ScriptTypeFactory(Type value);
}
public static class Microsoft.SharePoint.Client.ClientUtility : object {
    public static Exception CreateArgumentException(string argumentName);
    public static Exception CreateArgumentNullException(string argumentName);
}
public abstract class Microsoft.SharePoint.Client.ClientValueObject : object {
    [EditorBrowsableAttribute("1")]
public string TypeId { get; }
    [EditorBrowsableAttribute("1")]
public virtual void FromJson(JsonReader reader);
    [EditorBrowsableAttribute("1")]
protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    [EditorBrowsableAttribute("1")]
public virtual bool CustomFromJson(JsonReader reader);
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    [EditorBrowsableAttribute("1")]
public virtual bool CustomWriteToXml(XmlWriter writer, SerializationContext serializationContext);
    public abstract virtual string get_TypeId();
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.SharePoint.Client.ClientValueObjectCollection`1 : ClientValueObject {
    private List`1<T> m_data;
    [EditorBrowsableAttribute("1")]
protected string ChildItemsName { get; }
    public int Count { get; }
    public T Item { get; }
    [EditorBrowsableAttribute("1")]
protected virtual bool InitOnePropertyFromJson(string peekedName, JsonReader reader);
    protected virtual string get_ChildItemsName();
    public int get_Count();
    public void Add(T item);
    public T get_Item(int index);
    [IteratorStateMachineAttribute("Microsoft.SharePoint.Client.ClientValueObjectCollection`1/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [EditorBrowsableAttribute("1")]
public virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
public class Microsoft.SharePoint.Client.CollectionNotInitializedException : InvalidOperationException {
    public CollectionNotInitializedException(string message);
    private CollectionNotInitializedException(SerializationInfo info, StreamingContext context);
    public CollectionNotInitializedException(string message, Exception innerException);
}
internal class Microsoft.SharePoint.Client.ConditionalExecutionScope : ExecutionScope {
    private ConditionalScopeBase m_scope;
    internal ConditionalExecutionScope(ClientRuntimeContext context, ConditionalScopeBase scope, ExecutionScopeDisposingCallback disposingCallback);
    internal virtual void WriteStart(XmlWriter writer, SerializationContext serializationContext);
    internal virtual void WriteEnd(XmlWriter writer, SerializationContext serializationContext);
}
internal class Microsoft.SharePoint.Client.ConditionalExpressionToXmlConverter : object {
    private static Dictionary`2<ExpressionType, string> s_opNames;
    private Expression m_condition;
    private XmlWriter m_writer;
    private SerializationContext m_serializationContext;
    private Dictionary`2<string, Type> m_allowedParameters;
    private static ConditionalExpressionToXmlConverter();
    public ConditionalExpressionToXmlConverter(Expression condition, XmlWriter writer, Dictionary`2<string, Type> allowedParameters, SerializationContext serializationContext);
    public void Convert();
    private static bool CanBeEvaluated(Expression exp);
    private void Write(Expression exp);
    private static bool IsSupportedEqualType(Type type);
    private static bool IsNullExpression(Expression exp);
    private static string GetMemberName(MemberInfo m);
    private static string GetServerTypeId(Type type);
    private static bool IsClientResultValueExpression(MemberExpression memExp);
    private static bool IsServerObjectIsNullValue(MemberExpression memExp);
}
public class Microsoft.SharePoint.Client.ConditionalScope : ConditionalScopeBase {
    private Expression`1<Func`1<bool>> m_test;
    public ConditionalScope(ClientRuntimeContext context, Expression`1<Func`1<bool>> condition);
    public ConditionalScope(ClientRuntimeContext context, Expression`1<Func`1<bool>> condition, bool allowAllActions);
    internal virtual ChunkStringBuilder BuildConditionExpression(SerializationContext testSerializationContext);
}
public abstract class Microsoft.SharePoint.Client.ConditionalScopeBase : object {
    private ClientRuntimeContext m_context;
    private Nullable`1<bool> m_testResult;
    private ChunkStringBuilder m_testSb;
    private SerializationContext m_testSerializationContext;
    private bool m_allowAllActions;
    private ExecutionScope m_trueScope;
    private ExecutionScope m_falseScope;
    private ExecutionScope m_scope;
    internal ChunkStringBuilder TestExpression { get; }
    internal SerializationContext TestExpressionSerializationContext { get; }
    internal ExecutionScope TrueScope { get; }
    internal ExecutionScope FalseScope { get; }
    public Nullable`1<bool> TestResult { get; }
    protected ConditionalScopeBase(ClientRuntimeContext context, bool allowAllActions);
    internal abstract virtual ChunkStringBuilder BuildConditionExpression(SerializationContext serializationContext);
    internal ChunkStringBuilder get_TestExpression();
    internal SerializationContext get_TestExpressionSerializationContext();
    internal ExecutionScope get_TrueScope();
    internal ExecutionScope get_FalseScope();
    public IDisposable StartScope();
    private void OnScopeDisposing();
    public IDisposable StartIfTrue();
    public IDisposable StartIfFalse();
    public Nullable`1<bool> get_TestResult();
    internal static Exception CreateInvalidUsageException();
    public sealed virtual void FromJson(JsonReader reader);
    public sealed virtual bool CustomFromJson(JsonReader reader);
}
public static class Microsoft.SharePoint.Client.DataConvert : object {
    private static Dictionary`2<Type, WriteValueHandler> s_writeValueHandlers;
    private static Dictionary`2<Type, string> s_writeValueTypeNames;
    private static WriteValueHandler s_writeValueEnum;
    private static Dictionary`2<string, Type> s_strongTypedArrayElementTypeNames;
    internal static Dictionary`2<string, Type> StrongTypedArrayElementTypeNames { get; }
    private static DataConvert();
    internal static Dictionary`2<string, Type> get_StrongTypedArrayElementTypeNames();
    internal static string GetTypeName(Type type);
    public static void WriteDictionaryToXml(XmlWriter writer, Dictionary`2<string, object> dict, string topLevelElementTagName, String[] keys, SerializationContext serializationContext);
    private static void WriteValue_Boolean(XmlWriter writer, object objValue);
    private static void WriteValue_Char(XmlWriter writer, object objValue);
    private static void WriteValue_Byte(XmlWriter writer, object objValue);
    private static void WriteValue_ByteArray(XmlWriter writer, object objValue);
    private static void WriteValue_SByte(XmlWriter writer, object objValue);
    private static void WriteValue_Int16(XmlWriter writer, object objValue);
    private static void WriteValue_UInt16(XmlWriter writer, object objValue);
    private static void WriteValue_Int32(XmlWriter writer, object objValue);
    private static void WriteValue_UInt32(XmlWriter writer, object objValue);
    private static void WriteValue_Int64(XmlWriter writer, object objValue);
    private static void WriteValue_UInt64(XmlWriter writer, object objValue);
    private static void WriteValue_Single(XmlWriter writer, object objValue);
    private static void WriteValue_Double(XmlWriter writer, object objValue);
    private static void WriteValue_Decimal(XmlWriter writer, object objValue);
    private static void WriteValue_TimeSpan(XmlWriter writer, object objValue);
    private static void WriteValue_DateTime(XmlWriter writer, object objValue);
    private static void WriteValue_Guid(XmlWriter writer, object objValue);
    private static void WriteValue_String(XmlWriter writer, object objValue);
    private static void WriteValue_Enum(XmlWriter writer, object objValue);
    private static void WriteValue_StringCollection(XmlWriter writer, object objValue);
    public static void WriteValueToXmlElement(XmlWriter writer, object objValue, SerializationContext serializationContext);
    private static bool CouldSerializeDictionaryEntry(object objValue);
    internal static void GetTypeNameOrTypeId(Type type, String& typeName, String& typeId);
}
internal static class Microsoft.SharePoint.Client.DataRetrieval : object {
    internal static void Load(T clientObject, Expression`1[] retrievals);
    internal static ClientQueryableResult`1<T> Retrieve(ClientQueryable`1<T> clientQueryable);
    private static ClientObject GetRootClientObjectForClientQueryableExpression(Expression exp);
    private static ClientQueryInternal ProcessQueryExpression(ClientQueryInternal rootQuery, ClientObject rootClientObject, Expression exp, bool leaf, QueryProcessInfo queryInfo, QueryMethodAggregator aggregator);
    private static ClientQueryInternal ProcessMemberAccessQueryExpression(ClientQueryInternal rootQuery, ClientObject rootClientObject, MemberExpression exp, bool leaf, QueryProcessInfo queryInfo, QueryMethodAggregator aggregator);
    private static ClientQueryInternal ProcessMethodCallQueryExpression(ClientQueryInternal rootQuery, ClientObject rootClientObject, MethodCallExpression exp, bool leaf, QueryProcessInfo queryInfo, QueryMethodAggregator aggregator);
    private static ClientQueryInternal ProcessClientQueryableMethodCallQueryExpression(ClientQueryInternal rootQuery, ClientObject rootClientObject, MethodCallExpression exp, bool leaf, QueryProcessInfo queryInfo, QueryMethodAggregator aggregator);
    private static void CheckSelectExpression(MethodCallExpression exp);
    private static bool ExpectConstantExpression_CanExpressionBeEvaluated(Expression exp);
    private static InvalidQueryExpressionException CreateInvalidQueryExpressionException(Expression exp);
}
internal class Microsoft.SharePoint.Client.DefaultWebRequestExecutorFactory : WebRequestExecutorFactory {
    public virtual WebRequestExecutor CreateWebRequestExecutor(ClientRuntimeContext context, string requestUrl);
}
internal class Microsoft.SharePoint.Client.EnumerableClientObjectCollection`1 : object {
    private ClientObjectCollection`1<T> m_collection;
    public EnumerableClientObjectCollection`1(ClientObjectCollection`1<T> collection);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SharePoint.Client.ExceptionHandlingExecutionScope : ExecutionScope {
    private ExceptionHandlingScope m_scope;
    internal ExceptionHandlingExecutionScope(ClientRuntimeContext context, ExceptionHandlingScope scope, ExecutionScopeDisposingCallback callback);
    internal virtual void WriteStart(XmlWriter writer, SerializationContext serializationContext);
}
public class Microsoft.SharePoint.Client.ExceptionHandlingScope : object {
    private ClientRuntimeContext m_context;
    private bool m_processed;
    private bool m_hasError;
    private string m_errorMessage;
    private string m_serverStackTrace;
    private int m_serverErrorCode;
    private string m_serverErrorValue;
    private string m_serverErrorTypeName;
    private object m_serverErrorDetails;
    private ExecutionScope m_executionScope;
    private ExecutionScope m_tryScope;
    private ExecutionScope m_catchScope;
    private ExecutionScope m_finallyScope;
    internal bool IsSimpleForm { get; }
    public bool Processed { get; }
    public bool HasException { get; }
    public string ErrorMessage { get; }
    public string ServerStackTrace { get; }
    public int ServerErrorCode { get; }
    public string ServerErrorValue { get; }
    public string ServerErrorTypeName { get; }
    public object ServerErrorDetails { get; }
    public ExceptionHandlingScope(ClientRuntimeContext context);
    internal static Exception CreateInvalidUsageException();
    internal bool get_IsSimpleForm();
    public IDisposable StartScope();
    private void ExceptionHandlingScopeDisposingCallback();
    public IDisposable StartTry();
    public IDisposable StartCatch();
    public IDisposable StartFinally();
    public bool get_Processed();
    public bool get_HasException();
    public string get_ErrorMessage();
    public string get_ServerStackTrace();
    public int get_ServerErrorCode();
    public string get_ServerErrorValue();
    public string get_ServerErrorTypeName();
    public object get_ServerErrorDetails();
    private sealed virtual override void Microsoft.SharePoint.Client.IFromJson.FromJson(JsonReader reader);
    private sealed virtual override bool Microsoft.SharePoint.Client.IFromJson.CustomFromJson(JsonReader reader);
}
internal class Microsoft.SharePoint.Client.ExecutionScope : object {
    private ClientRuntimeContext m_context;
    private bool m_disposed;
    private string m_name;
    private long m_id;
    private ExecutionScopeDisposingCallback m_disposingCallback;
    private ClientActionExecutionScopeStart m_clientActionExecutionScopeStart;
    internal ClientRuntimeContext Context { get; }
    internal ClientActionExecutionScopeStart ClientActionExecutionScopeStart { get; }
    public long Id { get; }
    public string Name { get; }
    internal bool Disposed { get; }
    internal ExecutionScope(ClientRuntimeContext context, string name, ExecutionScopeDisposingCallback disposingCallback);
    internal ClientRuntimeContext get_Context();
    internal ClientActionExecutionScopeStart get_ClientActionExecutionScopeStart();
    public long get_Id();
    public string get_Name();
    public sealed virtual void Dispose();
    internal virtual void WriteStart(XmlWriter writer, SerializationContext serializationContext);
    internal virtual void WriteEnd(XmlWriter writer, SerializationContext serializationContext);
    internal bool get_Disposed();
}
internal class Microsoft.SharePoint.Client.ExecutionScopeDisposingCallback : MulticastDelegate {
    public ExecutionScopeDisposingCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.SharePoint.Client.ExpressionEvaluator : object {
    public static Expression PartialEvaluate(Expression exp, Func`2<Expression, bool> fnCanBeEvaluated);
}
internal static class Microsoft.SharePoint.Client.ExpressionUtility : object {
    public static Expression StripQuotes(Expression exp);
    public static Expression StripConverts(Expression exp);
    public static bool IsGetFieldValueMethod(MethodInfo method);
    internal static Type GetElementType(Type seqType);
    private static Type FindIEnumerable(Type seqType);
}
internal class Microsoft.SharePoint.Client.ExpressionVisitor : object {
    public virtual Expression Visit(Expression exp);
    public virtual Expression VisitBinary(BinaryExpression exp);
    public virtual MemberBinding VisitBinding(MemberBinding binding);
    public virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    public virtual Expression VisitConditional(ConditionalExpression exp);
    public virtual Expression VisitConstant(ConstantExpression exp);
    public virtual ElementInit VisitElementInitializer(ElementInit initializer);
    public virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    public virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    public virtual Expression VisitInvocation(InvocationExpression iv);
    public virtual Expression VisitLambda(LambdaExpression exp);
    public virtual Expression VisitListInit(ListInitExpression init);
    public virtual Expression VisitMemberAccess(MemberExpression m);
    public virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    public virtual Expression VisitMemberInit(MemberInitExpression init);
    public virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    public virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    public virtual Expression VisitMethodCall(MethodCallExpression m);
    public virtual NewExpression VisitNew(NewExpression nex);
    public virtual Expression VisitNewArray(NewArrayExpression na);
    public virtual Expression VisitParameter(ParameterExpression p);
    public virtual Expression VisitTypeIs(TypeBinaryExpression b);
    public virtual Expression VisitUnary(UnaryExpression u);
}
public interface Microsoft.SharePoint.Client.IFromJson {
    public abstract virtual void FromJson(JsonReader reader);
    public abstract virtual bool CustomFromJson(JsonReader reader);
}
public class Microsoft.SharePoint.Client.InvalidQueryExpressionException : ClientRequestException {
    public InvalidQueryExpressionException(string message);
    public InvalidQueryExpressionException(string message, Exception innerException);
    private InvalidQueryExpressionException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.SharePoint.Client.IScriptTypeFactory {
    public abstract virtual IFromJson CreateObjectFromScriptType(string scriptTypeName, ClientRuntimeContext context);
}
public class Microsoft.SharePoint.Client.JsonReader : object {
    internal static long MinDateTimeTicks;
    private static string MinDoubleValueAsString;
    private static string MaxDoubleValueAsString;
    private TextPeekReader m_reader;
    private Char[] m_tokenBuffer;
    private Stack`1<Scope> m_scopes;
    private JsonReaderOptions m_options;
    private ClientRuntimeContext m_runtimeContext;
    private static MethodInfo s_readDictionaryMethod;
    private List`1<Token> m_peekedTokens;
    private static Char[] s_DateTimeComponentSeparator;
    private Int64[] m_dateTimeComponents;
    private Char[] m_dateTimeSigns;
    private Char[] m_dateTimeHhmm;
    private Byte[] m_tryReadGuidByteBuf;
    private Int64[] m_tryReadGuidIntBuf;
    private static string DateTimePrefix;
    private static int DateTimePrefixLength;
    private static string GuidPrefix;
    private static int GuidPrefixLength;
    private static string ByteArrayPrefix;
    private static int ByteArrayPrefixLength;
    private static string StreamLinkPrefix;
    private static int StreamLinkPrefixLength;
    private StringBuilder m_decodeStringBuf;
    private Char[] m_decodeStringHexChars;
    public ClientRuntimeContext Context { get; }
    private static MethodInfo ReadDictionaryMethod { get; }
    public JsonReader(TextReader reader, ClientRuntimeContext runtimeContext);
    private static JsonReader();
    public ClientRuntimeContext get_Context();
    public bool ReadBoolean();
    private static object Read_Boolean(JsonReader reader);
    public byte ReadByte();
    private static object Read_Byte(JsonReader reader);
    public char ReadChar();
    private static object Read_Char(JsonReader reader);
    public short ReadInt16();
    private static object Read_Int16(JsonReader reader);
    public ushort ReadUInt16();
    private static object Read_UInt16(JsonReader reader);
    public int ReadInt32();
    private static object Read_Int32(JsonReader reader);
    public UInt32 ReadUInt32();
    private static object Read_UInt32(JsonReader reader);
    public long ReadInt64();
    private static object Read_Int64(JsonReader reader);
    public ulong ReadUInt64();
    private static object Read_UInt64(JsonReader reader);
    public float ReadSingle();
    private static object Read_Single(JsonReader reader);
    public double ReadDouble();
    private static object Read_Double(JsonReader reader);
    public decimal ReadDecimal();
    private static object Read_Decimal(JsonReader reader);
    public TimeSpan ReadTimeSpan();
    private static object Read_TimeSpan(JsonReader reader);
    public DateTime ReadDateTime();
    private static object Read_DateTime(JsonReader reader);
    public Guid ReadGuid();
    private static object Read_Guid(JsonReader reader);
    public Byte[] ReadByteArray();
    private static object Read_ByteArray(JsonReader reader);
    public Stream ReadStream();
    private static object Read_StreamLink(JsonReader reader);
    public string ReadString();
    private static object Read_String(JsonReader reader);
    public T ReadEnum();
    public JsonTokenType PeekTokenType();
    internal bool PeekObjectType(String& objectType);
    private int PeekTokenPosition();
    public void ReadArrayStart();
    public void ReadArrayEnd();
    public void ReadObjectStart();
    public string ReadName();
    public string PeekName();
    public void ReadObjectEnd();
    public Boolean[] ReadBooleanArray();
    private static object Read_BooleanArray(JsonReader reader);
    public Int16[] ReadInt16Array();
    private static object Read_Int16Array(JsonReader reader);
    public UInt16[] ReadUInt16Array();
    private static object Read_UInt16Array(JsonReader reader);
    public Int32[] ReadInt32Array();
    private static object Read_Int32Array(JsonReader reader);
    public UInt32[] ReadUInt32Array();
    private static object Read_UInt32Array(JsonReader reader);
    public Int64[] ReadInt64Array();
    private static object Read_Int64Array(JsonReader reader);
    public UInt64[] ReadUInt64Array();
    private static object Read_UInt64Array(JsonReader reader);
    public Single[] ReadSingleArray();
    private static object Read_SingleArray(JsonReader reader);
    public Double[] ReadDoubleArray();
    private static object Read_DoubleArray(JsonReader reader);
    public Decimal[] ReadDecimalArray();
    private static object Read_DecimalArray(JsonReader reader);
    public TimeSpan[] ReadTimeSpanArray();
    private static object Read_TimeSpanArray(JsonReader reader);
    public DateTime[] ReadDateTimeArray();
    private static object Read_DateTimeArray(JsonReader reader);
    public Guid[] ReadGuidArray();
    private static object Read_GuidArray(JsonReader reader);
    public String[] ReadStringArray();
    private static object Read_StringArray(JsonReader reader);
    public T[] ReadEnumArray();
    public StringCollection ReadStringCollection();
    private static object Read_StringCollection(JsonReader reader);
    public Dictionary`2<string, T> ReadDictionary();
    private static object Read_Dictionary(JsonReader reader);
    public Dictionary`2<string, object> ReadDictionary();
    private XElement ReadXElement();
    private XDocument ReadXDocument();
    private static object Read_XElement(JsonReader reader);
    private static object Read_XDocument(JsonReader reader);
    private XElement ReadXmlElement(XContainer parent);
    private void ReadXmlAttributes(XElement elem);
    private void ReadXmlChildren(XElement parent);
    private SimpleDataTable ReadSimpleDataTable();
    private static object Read_SimpleDataTable(JsonReader reader);
    private object ReadJsonObject(Type fallbackType);
    public KeyValuePair`2<string, object> ReadKeyValue();
    private bool IsArray(string key, String& fieldName, Type& elementType);
    public T Read();
    private static MethodInfo get_ReadDictionaryMethod();
    public T[] ReadArray();
    public List`1<T> ReadList();
    public object ReadObject();
    private object ReadObject(Type fallbackType);
    public Object[] ReadObjectArray();
    internal Object[] ReadObjectArray(Type fallbackElementType);
    private Token PeekToken();
    private Token PeekToken(int tokenPosition);
    private Token ReadToken();
    private void SkipWhiteSpace();
    private void SkipWhiteSpaceAndSeparator(char separator);
    private void SkipWhiteSpaceAndSeparatorUntilBlockEnd(char separator, char blockend);
    private void SkipToNextToken();
    private Token GetTokenPrivate();
    private bool IsTokenEnd(int ch);
    private Token ReadTokenTrue(int tokenPosition);
    private Token ReadTokenFalse(int tokenPosition);
    private Token ReadTokenNull(int tokenPosition);
    private Token ReadTokenNumber(int tokenPosition);
    private Token TryReadDateTime(int tokenPosition);
    private Token TryReadGuid(int tokenPosition);
    private Token TryReadByteArray(int tokenPosition);
    private Token TryReadStreamLink(int tokenPosition);
    private void IncreaseObjectCount();
    private bool Hex4ToInt(Char[] hexChars, Int32& n);
    private string DecodeString(int tokenPosition, bool isName);
    public sealed virtual void Dispose();
}
[FlagsAttribute]
internal enum Microsoft.SharePoint.Client.JsonReaderOptions : Enum {
    public int value__;
    public static JsonReaderOptions None;
    public static JsonReaderOptions DoNotUseEscapedToken;
    public static JsonReaderOptions IgnoreStringValue;
}
public enum Microsoft.SharePoint.Client.JsonTokenType : Enum {
    public int value__;
    public static JsonTokenType ObjectStart;
    public static JsonTokenType ObjectEnd;
    public static JsonTokenType ArrayStart;
    public static JsonTokenType ArrayEnd;
    public static JsonTokenType String;
    public static JsonTokenType Long;
    public static JsonTokenType ULong;
    public static JsonTokenType Double;
    public static JsonTokenType Boolean;
    public static JsonTokenType DateTime;
    public static JsonTokenType Guid;
    public static JsonTokenType Null;
    public static JsonTokenType Name;
    public static JsonTokenType ByteArray;
    public static JsonTokenType StreamLink;
}
internal class Microsoft.SharePoint.Client.Mime.BufferedReadStream : Stream {
    private Stream stream;
    private Byte[] storedBuffer;
    private int storedLength;
    private int storedOffset;
    private bool readMore;
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BufferedReadStream(Stream stream);
    public BufferedReadStream(Stream stream, bool readMore);
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Close();
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public int ReadBlock(Byte[] buffer, int offset, int count);
    public void Push(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.SharePoint.Client.Mime.BufferedWrite : object {
    private Byte[] buffer;
    private int offset;
    internal int Length { get; }
    internal BufferedWrite(int initialSize);
    private void EnsureBuffer(int count);
    internal int get_Length();
    internal Byte[] GetBuffer();
    internal void Reset();
    internal void Write(Byte[] value);
    internal void Write(Byte[] value, int index, int count);
    internal void Write(string value);
    internal void Write(string value, int index, int count);
}
internal class Microsoft.SharePoint.Client.Mime.ContentIDHeader : MimeHeader {
    public ContentIDHeader(string name, string value);
}
internal class Microsoft.SharePoint.Client.Mime.ContentLengthHeader : MimeHeader {
    private int m_length;
    public int Length { get; }
    public ContentLengthHeader(string name, string value);
    public int get_Length();
}
internal enum Microsoft.SharePoint.Client.Mime.ContentTransferEncoding : Enum {
    public int value__;
    public static ContentTransferEncoding SevenBit;
    public static ContentTransferEncoding EightBit;
    public static ContentTransferEncoding Binary;
    public static ContentTransferEncoding Other;
    public static ContentTransferEncoding Unspecified;
}
internal class Microsoft.SharePoint.Client.Mime.ContentTransferEncodingHeader : MimeHeader {
    private ContentTransferEncoding contentTransferEncoding;
    private string contentTransferEncodingValue;
    public static ContentTransferEncodingHeader Binary;
    public static ContentTransferEncodingHeader EightBit;
    public static ContentTransferEncodingHeader SevenBit;
    public ContentTransferEncoding ContentTransferEncoding { get; }
    public string ContentTransferEncodingValue { get; }
    public ContentTransferEncodingHeader(string value);
    public ContentTransferEncodingHeader(ContentTransferEncoding contentTransferEncoding, string value);
    private static ContentTransferEncodingHeader();
    public ContentTransferEncoding get_ContentTransferEncoding();
    public string get_ContentTransferEncodingValue();
    private void ParseValue();
}
internal class Microsoft.SharePoint.Client.Mime.ContentTypeHeader : MimeHeader {
    public static ContentTypeHeader Default;
    private string mediaType;
    private string subType;
    private Dictionary`2<string, string> parameters;
    public string MediaType { get; }
    public string MediaSubtype { get; }
    public Dictionary`2<string, string> Parameters { get; }
    public ContentTypeHeader(string value);
    private static ContentTypeHeader();
    public string get_MediaType();
    public string get_MediaSubtype();
    public Dictionary`2<string, string> get_Parameters();
    private void ParseValue();
}
internal class Microsoft.SharePoint.Client.Mime.DelimittedStreamReader : object {
    private bool canGetNextStream;
    private DelimittedReadStream currentStream;
    private Byte[] delimitter;
    private Byte[] matchBuffer;
    private Byte[] scratch;
    private BufferedReadStream stream;
    public DelimittedStreamReader(Stream stream);
    public void Close();
    private void Close(DelimittedReadStream caller);
    public Stream GetNextStream(Byte[] delimitterValue);
    public Stream GetNextStream(Byte[] delimitterValue, Nullable`1<int> contentLength);
    private MatchState MatchDelimitter(Byte[] buffer, int start, int end);
    private int ProcessRead(Byte[] buffer, int offset, int read);
    private int Read(DelimittedReadStream caller, Byte[] buffer, int offset, int count);
    private bool MatchRemainder(int start, int count);
    internal void Push(Byte[] buffer, int offset, int count);
}
internal static class Microsoft.SharePoint.Client.Mime.DiagnosticUtility : object {
}
internal static class Microsoft.SharePoint.Client.Mime.MailBnfHelper : object {
    private static Boolean[] s_fqtext;
    private static Boolean[] s_ttext;
    private static Boolean[] s_digits;
    private static Boolean[] s_boundary;
    private static MailBnfHelper();
    public static bool SkipCFWS(string data, Int32& offset);
    public static string ReadQuotedString(string data, Int32& offset, StringBuilder builder);
    public static string ReadParameterAttribute(string data, Int32& offset, StringBuilder builder);
    public static string ReadParameterValue(string data, Int32& offset, StringBuilder builder);
    public static string ReadToken(string data, Int32& offset, StringBuilder builder);
    public static string ReadDigits(string data, Int32& offset, StringBuilder builder);
    public static bool IsValidMimeBoundary(string data);
}
internal class Microsoft.SharePoint.Client.Mime.MergedStream : Stream {
    private bool m_isOpen;
    private List`1<Stream> m_streams;
    private int m_currentStreamIndex;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected void AddStream(Stream stream);
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.SharePoint.Client.Mime.MimeGlobals : object {
    internal static string MimeVersionHeader;
    internal static string DefaultVersion;
    internal static string ContentIDScheme;
    internal static string ContentIDHeader;
    internal static string ContentTypeHeader;
    internal static string ContentLengthHeader;
    internal static string ContentTransferEncodingHeader;
    internal static string EncodingBinary;
    internal static string Encoding8bit;
    internal static Byte[] COLONSPACE;
    internal static Byte[] DASHDASH;
    internal static Byte[] CRLF;
    internal static Byte[] BoundaryPrefix;
    private static MimeGlobals();
}
internal class Microsoft.SharePoint.Client.Mime.MimeHeader : object {
    private string name;
    private string value;
    public string Name { get; }
    public string Value { get; }
    public MimeHeader(string name, string value);
    public string get_Name();
    public string get_Value();
}
internal class Microsoft.SharePoint.Client.Mime.MimeHeaderReader : object {
    private string value;
    private Byte[] buffer;
    private int maxOffset;
    private string name;
    private int offset;
    private ReadState readState;
    private Stream stream;
    public string Value { get; }
    public string Name { get; }
    public MimeHeaderReader(Stream stream);
    public string get_Value();
    public string get_Name();
    public void Close();
    public bool Read(int maxBuffer, Int32& remaining);
    private bool ProcessBuffer(int maxBuffer, Int32& remaining);
    private bool BufferEnd();
    public void Reset(Stream inputStream);
    private void AppendValue(string headerValue, int maxBuffer, Int32& remaining);
    private void AppendName(string headerName, int maxBuffer, Int32& remaining);
    private static void DecrementBufferQuota(int maxBuffer, Int32& remaining, int size);
}
internal class Microsoft.SharePoint.Client.Mime.MimeHeaders : object {
    private Dictionary`2<string, MimeHeader> headers;
    public ContentTypeHeader ContentType { get; }
    public ContentLengthHeader ContentLength { get; }
    public ContentIDHeader ContentID { get; }
    public ContentTransferEncodingHeader ContentTransferEncoding { get; }
    public MimeVersionHeader MimeVersion { get; }
    public ContentTypeHeader get_ContentType();
    public ContentLengthHeader get_ContentLength();
    public ContentIDHeader get_ContentID();
    public ContentTransferEncodingHeader get_ContentTransferEncoding();
    public MimeVersionHeader get_MimeVersion();
    public void Add(string name, string value, Int32& remaining);
    public void Add(MimeHeader header);
    public void Release(Int32& remaining);
}
internal class Microsoft.SharePoint.Client.Mime.MimeMergedStream : MergedStream {
    private Byte[] m_boundaryBytes;
    public MimeMergedStream(string boundary, IEnumerable`1<MimePart> parts);
    private void AddMimePart(MimePart part);
    internal static void WriteAsciiString(ChunkStreamBuilder sb, string str);
}
internal class Microsoft.SharePoint.Client.Mime.MimeMessageReader : object {
    private static Byte[] CRLFCRLF;
    private bool getContentStreamCalled;
    private MimeHeaderReader mimeHeaderReader;
    private DelimittedStreamReader reader;
    public MimeMessageReader(Stream stream);
    private static MimeMessageReader();
    public Stream GetContentStream();
    public MimeHeaders ReadHeaders(int maxBuffer, Int32& remaining);
}
internal class Microsoft.SharePoint.Client.Mime.MimePart : object {
    [CompilerGeneratedAttribute]
private string <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentTransferEncoding <ContentTransferEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    public string ContentId { get; public set; }
    public string ContentType { get; public set; }
    public ContentTransferEncoding ContentTransferEncoding { get; public set; }
    public Stream Stream { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContentId();
    [CompilerGeneratedAttribute]
public void set_ContentId(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public ContentTransferEncoding get_ContentTransferEncoding();
    [CompilerGeneratedAttribute]
public void set_ContentTransferEncoding(ContentTransferEncoding value);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(Stream value);
}
internal class Microsoft.SharePoint.Client.Mime.MimeReader : object {
    private static Byte[] CRLFCRLF;
    private Byte[] boundaryBytes;
    private string content;
    private Stream currentStream;
    private MimeHeaderReader mimeHeaderReader;
    private DelimittedStreamReader reader;
    private Byte[] scratch;
    public string Preface { get; }
    public MimeReader(Stream stream, string boundary);
    private static MimeReader();
    public void Close();
    public string get_Preface();
    public Stream GetContentStream();
    public Stream GetContentStream(Nullable`1<int> contentLength);
    public bool ReadNextPart();
    public MimeHeaders ReadHeaders(int maxBuffer, Int32& remaining);
    private int BlockRead(Stream stream, Byte[] buffer, int offset, int count);
}
internal static class Microsoft.SharePoint.Client.Mime.MimeUtility : object {
    public static string GetBoundary(string contentType);
    public static string CreateBoundary();
}
internal class Microsoft.SharePoint.Client.Mime.MimeVersionHeader : MimeHeader {
    public static MimeVersionHeader Default;
    private string version;
    public string Version { get; }
    public MimeVersionHeader(string value);
    private static MimeVersionHeader();
    public string get_Version();
    private void ParseValue();
}
internal class Microsoft.SharePoint.Client.Mime.MimeWriter : object {
    private Stream stream;
    private Byte[] boundaryBytes;
    private MimeWriterState state;
    private BufferedWrite bufferedWrite;
    private Stream contentStream;
    internal MimeWriter(Stream stream, string boundary);
    internal static Byte[] GetBoundaryBytes(string boundary);
    internal void StartPart();
    internal void Close();
    private void Flush();
    internal void WriteHeader(string name, string value);
    internal Stream GetContentStream();
}
internal enum Microsoft.SharePoint.Client.Mime.MimeWriterState : Enum {
    public int value__;
    public static MimeWriterState Start;
    public static MimeWriterState StartPreface;
    public static MimeWriterState StartPart;
    public static MimeWriterState Header;
    public static MimeWriterState Content;
    public static MimeWriterState Closed;
}
internal static class Microsoft.SharePoint.Client.Mime.MtomGlobals : object {
    internal static string XopIncludeLocalName;
    internal static string XopIncludeNamespace;
    internal static string XopIncludePrefix;
    internal static string XopIncludeHrefLocalName;
    internal static string XopIncludeHrefNamespace;
    internal static string MediaType;
    internal static string MediaSubtype;
    internal static string BoundaryParam;
    internal static string TypeParam;
    internal static string XopMediaType;
    internal static string XopMediaSubtype;
    internal static string XopType;
    internal static string StartParam;
    internal static string StartInfoParam;
    internal static string ActionParam;
    internal static string CharsetParam;
    internal static string MimeContentTypeLocalName;
    internal static string MimeContentTypeNamespace200406;
    internal static string MimeContentTypeNamespace200505;
    internal static string DefaultContentTypeForBinary;
    private static MtomGlobals();
}
internal static class Microsoft.SharePoint.Client.Mime.SR : object {
    public static string MimeWriterInvalidStateForStartPart;
    public static string MimeWriterInvalidStateForClose;
    public static string MimeWriterInvalidStateForStartPreface;
    public static string MimeWriterInvalidStateForHeader;
    public static string MimeWriterInvalidStateForContent;
    public static string MimeVersionHeaderInvalid;
    public static string MimeContentLengthHeaderInvalid;
    public static string MimeHeaderInvalidCharacter;
    public static string MimeReaderMalformedHeader;
    public static string MimeContentTypeHeaderInvalid;
    public static string MimeReaderHeaderAlreadyExists;
    public static string MimeMessageGetContentStreamCalledAlready;
    public static string MimeReaderResetCalledBeforeEOF;
    public static string WriteBufferOverflow;
    public static string MimeReaderTruncated;
    public static string MtomExceededMaxSizeInBytes;
    public static string MtomBufferQuotaExceeded;
    public static string GetString(string resourceId, Object[] args);
}
public class Microsoft.SharePoint.Client.ObjectIdentityQuery : ClientAction {
    public ObjectIdentityQuery(ObjectPath objectPath);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
}
public abstract class Microsoft.SharePoint.Client.ObjectPath : object {
    private long m_parentId;
    private long m_id;
    private ClientRuntimeContext m_context;
    private Nullable`1<bool> m_serverObjectIsNull;
    private bool m_isValid;
    internal ClientRuntimeContext Context { get; }
    internal ObjectPath Parent { get; }
    internal long Id { get; internal set; }
    internal Nullable`1<bool> ServerObjectIsNull { get; internal set; }
    internal bool IsValid { get; internal set; }
    internal string ObjectName { get; }
    internal ObjectPath(ClientRuntimeContext context, ObjectPath parent, bool addToContext);
    internal ClientRuntimeContext get_Context();
    internal ObjectPath get_Parent();
    internal long get_Id();
    internal void set_Id(long value);
    internal Nullable`1<bool> get_ServerObjectIsNull();
    internal void set_ServerObjectIsNull(Nullable`1<bool> value);
    internal abstract virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    internal bool get_IsValid();
    internal void set_IsValid(bool value);
    internal virtual void Invalidate();
    internal virtual string get_ObjectName();
    [EditorBrowsableAttribute("1")]
public void SetPendingReplace();
}
public class Microsoft.SharePoint.Client.ObjectPathConstructor : ObjectPath {
    private string m_typeId;
    private Object[] m_parameters;
    private SerializationContext m_serializationContext;
    private ChunkStringBuilder m_sb;
    internal string ObjectName { get; }
    public ObjectPathConstructor(ClientRuntimeContext context, string typeId, Object[] parameters);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    private void WriteToXmlPrivate(XmlWriter writer, SerializationContext serializationContext);
    internal virtual void Invalidate();
    internal virtual string get_ObjectName();
}
internal class Microsoft.SharePoint.Client.ObjectPathIdentity : ObjectPath {
    private string m_identity;
    public string Identity { get; }
    internal string ObjectName { get; }
    public ObjectPathIdentity(ClientRuntimeContext context, string identity);
    public string get_Identity();
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    internal virtual string get_ObjectName();
}
public class Microsoft.SharePoint.Client.ObjectPathMethod : ObjectPath {
    private string m_methodName;
    private SerializationContext m_serializationContext;
    private ChunkStringBuilder m_sb;
    private Object[] m_parameters;
    internal string ObjectName { get; }
    public ObjectPathMethod(ClientRuntimeContext context, ObjectPath parent, string methodName, Object[] parameters);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    private void WriteToXmlPrivate(XmlWriter writer, SerializationContext serializationContext);
    internal virtual void Invalidate();
    internal virtual string get_ObjectName();
}
public class Microsoft.SharePoint.Client.ObjectPathProperty : ObjectPath {
    private string m_propertyName;
    internal string ObjectName { get; }
    public ObjectPathProperty(ClientRuntimeContext context, ObjectPath parent, string propertyName);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    internal virtual string get_ObjectName();
}
public class Microsoft.SharePoint.Client.ObjectPathStaticMethod : ObjectPath {
    private string m_typeId;
    private string m_methodName;
    private Object[] m_parameters;
    private SerializationContext m_serializationContext;
    private ChunkStringBuilder m_sb;
    internal string ObjectName { get; }
    public ObjectPathStaticMethod(ClientRuntimeContext context, string typeId, string methodName, Object[] parameters);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    private void WriteToXmlPrivate(XmlWriter writer, SerializationContext serializationContext);
    internal virtual void Invalidate();
    internal virtual string get_ObjectName();
}
public class Microsoft.SharePoint.Client.ObjectPathStaticProperty : ObjectPath {
    private string m_propertyName;
    private string m_typeId;
    internal string ObjectName { get; }
    public ObjectPathStaticProperty(ClientRuntimeContext context, string typeId, string propertyName);
    internal virtual void WriteToXml(XmlWriter writer, SerializationContext serializationContext);
    internal virtual string get_ObjectName();
}
internal class Microsoft.SharePoint.Client.OfficeVersion : object {
    public static int MajorBuildVersion;
    public static int PreviousMajorBuildVersion;
    public static int MaxCompatibilityLevel;
    public static string MajorVersion;
    public static string PreviousVersion;
    public static string MaxCompatibility;
    public static string MajorVersionDotZero;
    public static string PreviousVersionDotZero;
    public static string AssemblyVersion;
    public static string FullBuildVersion;
    public static string FullBuildBase;
    public static string WssMajorVersion;
    private static OfficeVersion();
}
public class Microsoft.SharePoint.Client.PropertyOrFieldNotInitializedException : InvalidOperationException {
    public PropertyOrFieldNotInitializedException(string message);
    private PropertyOrFieldNotInitializedException(SerializationInfo info, StreamingContext context);
    public PropertyOrFieldNotInitializedException(string message, Exception innerException);
}
public class Microsoft.SharePoint.Client.PseudoRemoteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal abstract class Microsoft.SharePoint.Client.ReadonlyWrapStream : Stream {
    private long m_totalReadCount;
    [CompilerGeneratedAttribute]
private Action`1<long> <TotalReadCountAction>k__BackingField;
    private bool m_disposed;
    protected Stream UnderlyingStream { get; }
    protected bool OwnUnderlyingStream { get; }
    protected Action`1<long> TotalReadCountAction { get; protected set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    protected abstract virtual Stream get_UnderlyingStream();
    protected virtual bool get_OwnUnderlyingStream();
    [CompilerGeneratedAttribute]
protected Action`1<long> get_TotalReadCountAction();
    [CompilerGeneratedAttribute]
protected void set_TotalReadCountAction(Action`1<long> value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.SharePoint.Client.RemoteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Microsoft.SharePoint.Client.ReplaceQueryableCollectionWithEnumerableCollectionExpressionVisitor : ExpressionVisitor {
    public virtual Expression VisitConstant(ConstantExpression exp);
}
public static class Microsoft.SharePoint.Client.Resources : object {
    private static string ResourceFileId;
    private static SPResourceManager s_resourceManager;
    private static Resources();
    public static string GetString(string resourceId);
    public static string GetString(string resourceId, Object[] args);
}
public static class Microsoft.SharePoint.Client.ResourceStrings : object {
    public static string ArgumentExceptionMessage;
    public static string ArgumentNullExceptionMessage;
    public static string CannotContactSite;
    public static string CannotContactSiteWithDetails;
    public static string CannotFindContextWebServerRelativeUrl;
    public static string CannotGetCookie;
    public static string CannotHandleServerResponseSchema;
    public static string CollectionHasNotBeenInitialized;
    public static string CollectionModified;
    public static string ETagNotMatch;
    public static string FileAlreadyExists;
    public static string FormsAuthenticationCannotLogin;
    public static string InvalidIdcrlHeader;
    public static string InvalidQueryExecution;
    public static string InvalidUsageOfConditionalScope;
    public static string InvalidUsageOfConditionalScopeNowAllowedAction;
    public static string InvalidUsageOfExceptionHandlingScope;
    public static string JsonDataTypeNotMatch;
    public static string JsonNotWellFormated;
    public static string JsonReachTheEndOfStream;
    public static string JsonUnknownData;
    public static string MimeContentLengthHeaderInvalid;
    public static string MimeContentTypeHeaderInvalid;
    public static string MimeHeaderInvalidCharacter;
    public static string MimeMessageGetContentStreamCalledAlready;
    public static string MimeReaderHeaderAlreadyExists;
    public static string MimeReaderMalformedHeader;
    public static string MimeReaderResetCalledBeforeEOF;
    public static string MimeReaderTruncated;
    public static string MimeVersionHeaderInvalid;
    public static string MimeWriterInvalidStateForClose;
    public static string MimeWriterInvalidStateForContent;
    public static string MimeWriterInvalidStateForHeader;
    public static string MimeWriterInvalidStateForStartPart;
    public static string MimeWriterInvalidStateForStartPreface;
    public static string MissedFormsAuthLoginInfo;
    public static string MtomBufferQuotaExceeded;
    public static string MtomExceededMaxSizeInBytes;
    public static string NamedPropertyHasNotBeenInitialized;
    public static string NamedServerObjectIsNull;
    public static string NoDirectHttpRequest;
    public static string NoDirectRequest;
    public static string NoObjectPathAssociatedWithObject;
    public static string NonAllowedInUIThread;
    public static string NotSameClientContext;
    public static string NotSupportedExpression;
    public static string NotSupportedMemberInExpression;
    public static string NotSupportedQueryExpression;
    public static string NotSupportedQueryExpressionWithExpressionDetail;
    public static string NotSupportedQueryExpressionWithExpressionValue;
    public static string ObjectNameIdentity;
    public static string ObjectNameMethod;
    public static string ObjectNameProperty;
    public static string ObjectNameType;
    public static string PropertyHasNotBeenInitialized;
    public static string QueryableResultNotAvailable;
    public static string RequestAbortedOrTimedOut;
    public static string RequestEmptyQueryName;
    public static string RequestHasBeenExecuted;
    public static string RequestUnexpectedResponse;
    public static string RequestUnexpectedResponseWithContentTypeAndStatus;
    public static string RequestUnexpectedResponseWithStatus;
    public static string RequestUnknownResponse;
    public static string ServerNotInFormsAuthenticationMode;
    public static string ServerObjectIsNull;
    public static string SharePointClientCredentialsNotSupported;
    public static string UnknownError;
    public static string UnknownResponseData;
    public static string WriteBufferOverflow;
}
[AttributeUsageAttribute("4")]
public class Microsoft.SharePoint.Client.ScriptTypeAttribute : Attribute {
    private string m_scriptType;
    [CompilerGeneratedAttribute]
private string <TypeAlias>k__BackingField;
    private bool m_valueObject;
    [CompilerGeneratedAttribute]
private string <ServerTypeId>k__BackingField;
    public string ScriptType { get; public set; }
    public string TypeAlias { get; public set; }
    public bool ValueObject { get; public set; }
    public string ServerTypeId { get; public set; }
    public ScriptTypeAttribute(string scriptType);
    public string get_ScriptType();
    public void set_ScriptType(string value);
    [CompilerGeneratedAttribute]
public string get_TypeAlias();
    [CompilerGeneratedAttribute]
public void set_TypeAlias(string value);
    public bool get_ValueObject();
    public void set_ValueObject(bool value);
    [CompilerGeneratedAttribute]
public string get_ServerTypeId();
    [CompilerGeneratedAttribute]
public void set_ServerTypeId(string value);
}
internal static class Microsoft.SharePoint.Client.ScriptTypeMap : object {
    private static string ElementNameAssemblyName;
    private static object s_lock;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_inited;
    private static Dictionary`2<string, ScriptTypeInfo> s_clientProxies;
    private static Dictionary`2<Type, ScriptTypeInfo> s_typeToScriptTypeMap;
    private static Dictionary`2<string, object> s_loadedAssemblies;
    private static List`1<IScriptTypeFactory> s_scriptTypeFactories;
    internal static bool IsInited { get; }
    private static ScriptTypeMap();
    internal static bool get_IsInited();
    internal static void EnsureInited();
    private static void Init();
    private static bool IsFatalException(Exception ex);
    private static void AppDomain_AssemblyLoad(object sender, AssemblyLoadEventArgs args);
    internal static void AddClientProxyAssembly(Assembly assembly);
    public static Type GetTypeFromScriptType(string scriptType);
    public static IFromJson CreateObjectFromScriptType(string scriptType, ClientRuntimeContext context);
    public static IFromJson CreateObjectFromFallbackScriptType(Type fallbackType, ClientRuntimeContext context);
}
public class Microsoft.SharePoint.Client.SerializationContext : object {
    private ClientRuntimeContext m_context;
    private Dictionary`2<long, ObjectPath> m_paths;
    private List`1<StreamInfo> m_streams;
    internal ClientRuntimeContext Context { get; }
    internal List`1<StreamInfo> Streams { get; }
    internal Dictionary`2<long, ObjectPath> Paths { get; }
    internal SerializationContext(ClientRuntimeContext context);
    internal ClientRuntimeContext get_Context();
    public void AddClientObject(ClientObject obj);
    public void AddObjectPath(ObjectPath path);
    internal void AddStream(StreamInfo stream);
    internal List`1<StreamInfo> get_Streams();
    internal Dictionary`2<long, ObjectPath> get_Paths();
    internal void MergeFrom(SerializationContext context);
}
public class Microsoft.SharePoint.Client.ServerException : Exception {
    private string m_serverStackTrace;
    private int m_serverErrorCode;
    private string m_serverErrorValue;
    private string m_serverErrorTypeName;
    private object m_serverErrorDetails;
    private string m_serverErrorTraceCorrelationId;
    public string ServerStackTrace { get; }
    public int ServerErrorCode { get; }
    public string ServerErrorValue { get; }
    public string ServerErrorTypeName { get; }
    public object ServerErrorDetails { get; }
    public string ServerErrorTraceCorrelationId { get; }
    internal ServerException(string message, string serverStackTrace, int serverErrorCode);
    internal ServerException(string message, string serverStackTrace, int serverErrorCode, string serverErrorValue, string serverErrorTypeName, object serverErrorDetails, string serverErrorTraceCorrelationId);
    public string get_ServerStackTrace();
    public int get_ServerErrorCode();
    public string get_ServerErrorValue();
    public string get_ServerErrorTypeName();
    public object get_ServerErrorDetails();
    public string get_ServerErrorTraceCorrelationId();
    public virtual string ToString();
    internal static ServerException CreateFromErrorInfo(Dictionary`2<string, object> errorInfo);
}
public class Microsoft.SharePoint.Client.ServerObjectNullReferenceException : InvalidOperationException {
    public ServerObjectNullReferenceException(string message);
    private ServerObjectNullReferenceException(SerializationInfo info, StreamingContext context);
    public ServerObjectNullReferenceException(string message, Exception innerException);
}
public class Microsoft.SharePoint.Client.ServerUnauthorizedAccessException : ServerException {
    internal ServerUnauthorizedAccessException(string message, string serverStackTrace, int serverErrorCode, string serverErrorValue, string serverErrorTypeName, object serverErrorDetails, string serverErrorTraceCorrelationId);
}
public class Microsoft.SharePoint.Client.SimpleDataTable : object {
    private Collection`1<Dictionary`2<string, object>> m_rows;
    public Collection`1<Dictionary`2<string, object>> Rows { get; }
    public Collection`1<Dictionary`2<string, object>> get_Rows();
}
public class Microsoft.SharePoint.Client.SPResourceManager : ResourceManager {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) dlsLoaded;
    private static MethodInfo dlsCreateResourceManager;
    private ResourceManager innerResourceManager;
    private MethodInfo innerOverrideStringMethod;
    public SPResourceManager(string baseName, Assembly assembly);
    internal static bool LoadDls();
    public virtual string GetString(string name, CultureInfo culture);
    public virtual object GetObject(string name, CultureInfo culture);
    private static MethodInfo FindDls();
    internal bool OverrideString(string name, CultureInfo culture, String& value);
}
internal class Microsoft.SharePoint.Client.SPWebRequestExecutor : WebRequestExecutor {
    private HttpWebRequest m_webRequest;
    private HttpWebResponse m_webResponse;
    private ClientRuntimeContext m_context;
    public HttpWebRequest WebRequest { get; }
    public string RequestContentType { get; public set; }
    public string RequestMethod { get; public set; }
    public bool RequestKeepAlive { get; public set; }
    public WebHeaderCollection RequestHeaders { get; }
    public HttpStatusCode StatusCode { get; }
    public string ResponseContentType { get; }
    public WebHeaderCollection ResponseHeaders { get; }
    public SPWebRequestExecutor(ClientRuntimeContext context, string requestUrl);
    public virtual HttpWebRequest get_WebRequest();
    public virtual string get_RequestContentType();
    public virtual void set_RequestContentType(string value);
    public virtual string get_RequestMethod();
    public virtual void set_RequestMethod(string value);
    public virtual bool get_RequestKeepAlive();
    public virtual void set_RequestKeepAlive(bool value);
    public virtual WebHeaderCollection get_RequestHeaders();
    public virtual Stream GetRequestStream();
    public virtual void Execute();
    [AsyncStateMachineAttribute("Microsoft.SharePoint.Client.SPWebRequestExecutor/<ExecuteAsync>d__19")]
public virtual Task ExecuteAsync();
    public virtual HttpStatusCode get_StatusCode();
    public virtual string get_ResponseContentType();
    public virtual WebHeaderCollection get_ResponseHeaders();
    public virtual Stream GetResponseStream();
    public virtual void Dispose();
}
internal class Microsoft.SharePoint.Client.StreamInfo : object {
    private string m_id;
    private Stream m_stream;
    public string Id { get; }
    public Stream Stream { get; }
    public StreamInfo(string streamId, Stream stream);
    public string get_Id();
    public Stream get_Stream();
}
internal class Microsoft.SharePoint.Client.TextPeekReader : TextReader {
    internal static int EOF;
    private int m_count;
    private TextReader m_reader;
    private int m_bufferSize;
    private Char[] m_buffer;
    private int m_bufferCount;
    private int m_bufferOffset;
    public int BufferSize { get; }
    public int Offset { get; }
    public TextPeekReader(TextReader reader);
    public TextPeekReader(TextReader reader, int bufferSize);
    public int get_BufferSize();
    public virtual void Close();
    public virtual int Peek();
    public int Peek(int position);
    public virtual int Read();
    public int Peek(Char[] buffer, int count);
    public int Read(Char[] buffer, int count);
    public virtual int Read(Char[] buffer, int offset, int count);
    private void FillBuffer();
    public int Skip();
    public int Skip(int count);
    public int get_Offset();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.SharePoint.Client.WebRequestEventArgs : EventArgs {
    private WebRequestExecutor m_webRequestExecutor;
    public WebRequestExecutor WebRequestExecutor { get; }
    public WebRequestEventArgs(WebRequestExecutor webRequestExecutor);
    public WebRequestExecutor get_WebRequestExecutor();
}
public abstract class Microsoft.SharePoint.Client.WebRequestExecutor : object {
    public HttpWebRequest WebRequest { get; }
    public string RequestContentType { get; public set; }
    public WebHeaderCollection RequestHeaders { get; }
    public string RequestMethod { get; public set; }
    public bool RequestKeepAlive { get; public set; }
    public HttpStatusCode StatusCode { get; }
    public string ResponseContentType { get; }
    public WebHeaderCollection ResponseHeaders { get; }
    public virtual HttpWebRequest get_WebRequest();
    public abstract virtual string get_RequestContentType();
    public abstract virtual void set_RequestContentType(string value);
    public abstract virtual WebHeaderCollection get_RequestHeaders();
    public abstract virtual string get_RequestMethod();
    public abstract virtual void set_RequestMethod(string value);
    public abstract virtual bool get_RequestKeepAlive();
    public abstract virtual void set_RequestKeepAlive(bool value);
    public abstract virtual Stream GetRequestStream();
    public abstract virtual void Execute();
    public virtual Task ExecuteAsync();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_ResponseContentType();
    public abstract virtual WebHeaderCollection get_ResponseHeaders();
    public abstract virtual Stream GetResponseStream();
    public virtual void Dispose();
}
public abstract class Microsoft.SharePoint.Client.WebRequestExecutorFactory : object {
    public abstract virtual WebRequestExecutor CreateWebRequestExecutor(ClientRuntimeContext context, string requestUrl);
}
