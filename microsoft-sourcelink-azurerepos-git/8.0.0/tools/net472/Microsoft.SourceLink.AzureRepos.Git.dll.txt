internal static class Microsoft.Build.Tasks.SourceControl.CommonResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ValueOfWithIdentityIsInvalid { get; }
    internal static string ItemOfItemGroupMustSpecifyMetadata { get; }
    internal static string ValueOfWithIdentityIsNotValidCommitHash { get; }
    internal static string ValuePassedToTaskParameterNotValidHostUri { get; }
    internal static string ValuePassedToTaskParameterNotValidUri { get; }
    internal static string ValuePassedToTaskParameterNotValidDomainName { get; }
    internal static string AtLeastOneRepositoryHostIsRequired { get; }
    internal static string UnableToDetermineRepositoryUrl { get; }
    internal static string NoWellFormedHostUrisSpecified { get; }
    internal static string IgnoringInvalidHostName { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_ValueOfWithIdentityIsInvalid();
    internal static string get_ItemOfItemGroupMustSpecifyMetadata();
    internal static string get_ValueOfWithIdentityIsNotValidCommitHash();
    internal static string get_ValuePassedToTaskParameterNotValidHostUri();
    internal static string get_ValuePassedToTaskParameterNotValidUri();
    internal static string get_ValuePassedToTaskParameterNotValidDomainName();
    internal static string get_AtLeastOneRepositoryHostIsRequired();
    internal static string get_UnableToDetermineRepositoryUrl();
    internal static string get_NoWellFormedHostUrisSpecified();
    internal static string get_IgnoringInvalidHostName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Build.Tasks.SourceControl.GetSourceLinkUrlGitTask : Task {
    private static string SourceControlName;
    protected static string NotApplicableValue;
    private static string ContentUrlMetadataName;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITaskItem <SourceRoot>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <Hosts>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingleProvider>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SourceLinkUrl>k__BackingField;
    [NullableAttribute("2")]
public ITaskItem SourceRoot { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITaskItem[] Hosts { get; public set; }
    [NullableAttribute("2")]
public string RepositoryUrl { get; public set; }
    public bool IsSingleProvider { get; public set; }
    [NullableAttribute("2")]
[OutputAttribute]
public string SourceLinkUrl { get; public set; }
    protected string ProviderDisplayName { get; }
    protected string HostsItemGroupName { get; }
    protected bool SupportsImplicitHost { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ITaskItem get_SourceRoot();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SourceRoot(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Hosts();
    [CompilerGeneratedAttribute]
public void set_Hosts(ITaskItem[] value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSingleProvider();
    [CompilerGeneratedAttribute]
public void set_IsSingleProvider(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SourceLinkUrl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SourceLinkUrl(string value);
    protected abstract virtual string get_ProviderDisplayName();
    protected abstract virtual string get_HostsItemGroupName();
    protected virtual bool get_SupportsImplicitHost();
    protected virtual Uri GetDefaultContentUriFromHostUri(string authority, Uri gitUri);
    protected virtual Uri GetDefaultContentUriFromRepositoryUri(Uri repositoryUri);
    protected abstract virtual string BuildSourceLinkUrl(Uri contentUrl, Uri gitUri, string relativeUrl, string revisionId, ITaskItem hostItem);
    public virtual bool Execute();
    private void ExecuteImpl();
    [IteratorStateMachineAttribute("Microsoft.Build.Tasks.SourceControl.GetSourceLinkUrlGitTask/<GetUrlMappings>d__36")]
private IEnumerable`1<UrlMapping> GetUrlMappings(Uri gitUri);
    private static bool TryGetMatchingContentUri(UrlMapping[] mappings, Uri repoUri, Uri& contentUri, ITaskItem& hostItem);
    [CompilerGeneratedAttribute]
internal static bool <ExecuteImpl>g__isHexDigit|34_0(char c);
    [CompilerGeneratedAttribute]
internal static bool <GetUrlMappings>g__isValidContentUri|36_0(Uri uri);
    [CompilerGeneratedAttribute]
internal static Nullable`1<UrlMapping> <TryGetMatchingContentUri>g__findMatch|37_0(bool exactHost, <>c__DisplayClass37_0& );
}
internal static class Microsoft.Build.Tasks.SourceControl.Names : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Build.Tasks.SourceControl.TranslateRepositoryUrlsGitTask : Task {
    [NullableAttribute("1")]
private static string SourceControlName;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <SourceRoots>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingleProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TranslatedRepositoryUrl>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <TranslatedSourceRoots>k__BackingField;
    public string RepositoryUrl { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITaskItem[] SourceRoots { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITaskItem[] Hosts { get; public set; }
    public bool IsSingleProvider { get; public set; }
    [OutputAttribute]
public string TranslatedRepositoryUrl { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public ITaskItem[] TranslatedSourceRoots { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceRoots();
    [CompilerGeneratedAttribute]
public void set_SourceRoots(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Hosts();
    [CompilerGeneratedAttribute]
public void set_Hosts(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_IsSingleProvider();
    [CompilerGeneratedAttribute]
public void set_IsSingleProvider(bool value);
    [CompilerGeneratedAttribute]
public string get_TranslatedRepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_TranslatedRepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TranslatedSourceRoots();
    [CompilerGeneratedAttribute]
public void set_TranslatedSourceRoots(ITaskItem[] value);
    [NullableContextAttribute("1")]
protected virtual string TranslateSshUrl(Uri uri);
    [NullableContextAttribute("1")]
protected virtual string TranslateGitUrl(Uri uri);
    [NullableContextAttribute("1")]
protected virtual string TranslateHttpUrl(Uri uri);
    public virtual bool Execute();
    private void ExecuteImpl();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.Build.Tasks.SourceControl.TranslateRepositoryUrlsGitTask/<GetHostUris>d__30")]
private IEnumerable`1<Uri> GetHostUris();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <ExecuteImpl>g__isMatchingHostUri|29_1(Uri hostUri, Uri uri);
    [CompilerGeneratedAttribute]
private string <ExecuteImpl>g__translate|29_2(string url, <>c__DisplayClass29_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Build.Tasks.SourceControl.UriUtilities : object {
    public static bool TryParseAuthority(string value, Uri& uri);
    [ExtensionAttribute]
public static int GetExplicitPort(Uri uri);
    public static string Combine(string baseUrl, string relativeUrl);
    public static bool UrlStartsWith(string url, string prefix);
    public static bool TrySplitRelativeUrl(string relativeUrl, String[]& parts);
    [ExtensionAttribute]
public static string GetScheme(Uri uri);
    [ExtensionAttribute]
public static string GetHost(Uri uri);
    [ExtensionAttribute]
public static string GetAuthority(Uri uri);
    [ExtensionAttribute]
public static string GetPath(Uri uri);
    [ExtensionAttribute]
public static string GetPathAndQuery(Uri uri);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.SourceLink.AzureDevOpsUrlParser : object {
    [NullableContextAttribute("1")]
public static bool IsVisualStudioHostedServer(string host);
    [NullableContextAttribute("1")]
public static bool TryParseHostedHttp(string host, string relativeUrl, String& projectPath, String& repositoryName);
    [NullableContextAttribute("1")]
public static bool TryParseOnPremHttp(string relativeUrl, string virtualDirectory, String& projectPath, String& repositoryName);
    public static bool TryParseHostedSsh(Uri uri, String& account, String& repositoryPath, String& repositoryName);
    public static bool TryParseOnPremSsh(Uri uri, String& repositoryPath, String& repositoryName);
    private static bool TryParsePath(String[] parts, int startIndex, string type, String& repositoryPath, String& repositoryName);
    private static bool TryParsePath(String[] parts, int projectPartIndex, string type, String& projectName, String& teamName, String& repositoryName);
    private static bool TryParseRepositoryName(String[] parts, Int32& teamNameIndex, string type, String& repositoryName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl : GetSourceLinkUrlGitTask {
    private static string UrlMapEnvironmentVariableName;
    protected string HostsItemGroupName { get; }
    protected string ProviderDisplayName { get; }
    protected virtual string get_HostsItemGroupName();
    protected virtual string get_ProviderDisplayName();
    protected virtual Uri GetDefaultContentUriFromHostUri(string authority, Uri gitUri);
    protected virtual Uri GetDefaultContentUriFromRepositoryUri(Uri repositoryUri);
    protected virtual string BuildSourceLinkUrl(Uri contentUri, Uri gitUri, string relativeUrl, string revisionId, ITaskItem hostItem);
    private Dictionary`2<Uri, Uri> TryGetEnvironmentUriMap();
    [CompilerGeneratedAttribute]
internal static bool <TryGetEnvironmentUriMap>g__parse|8_0(string urls, <>c__DisplayClass8_0& );
    [IteratorStateMachineAttribute("Microsoft.SourceLink.AzureRepos.Git.GetSourceLinkUrl/<<TryGetEnvironmentUriMap>g__enumerateVariables|8_1>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, string>> <TryGetEnvironmentUriMap>g__enumerateVariables|8_1();
}
internal static class Microsoft.SourceLink.AzureRepos.Git.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ValueOfWithIdentityIsInvalid { get; }
    internal static string ValueOfWithIdentityIsNotValidCommitHash { get; }
    internal static string EnvironmentVariableIsNotAlistOfUrlPairs { get; }
    internal static string ValuePassedToTaskParameterNotValidDomainName { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_ValueOfWithIdentityIsInvalid();
    internal static string get_ValueOfWithIdentityIsNotValidCommitHash();
    internal static string get_EnvironmentVariableIsNotAlistOfUrlPairs();
    internal static string get_ValuePassedToTaskParameterNotValidDomainName();
}
public class Microsoft.SourceLink.AzureRepos.Git.TranslateRepositoryUrls : TranslateRepositoryUrlsGitTask {
    [NullableContextAttribute("1")]
protected virtual string TranslateSshUrl(Uri uri);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal static class System.NullableDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class System.NullableString : object {
    public static bool IsNullOrEmpty(string str);
    public static bool IsNullOrWhiteSpace(string str);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
