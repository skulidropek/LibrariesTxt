internal static class Microsoft.SqlServer.Management.Assessment.CodeSignConstants : object {
    public static string SqlPublicKey;
}
public interface Microsoft.SqlServer.Management.Assessment.IDataMorph {
    public bool BenefitsFromCache { get; }
    public abstract virtual bool get_BenefitsFromCache();
    public abstract virtual IDataView ApplyTo(IDataView source, bool useCache);
}
public interface Microsoft.SqlServer.Management.Assessment.IDataRow {
    public abstract virtual bool TryGetData(string column, Object& value);
}
public interface Microsoft.SqlServer.Management.Assessment.IDataView {
}
public interface Microsoft.SqlServer.Management.Assessment.IProbeImplementation {
    public string ServerName { get; public set; }
    public string TargetName { get; public set; }
    public string Urn { get; public set; }
    public IReadOnlyDictionary`2<string, object> Parameters { get; public set; }
    public abstract virtual string get_ServerName();
    public abstract virtual void set_ServerName(string value);
    public abstract virtual string get_TargetName();
    public abstract virtual void set_TargetName(string value);
    public abstract virtual string get_Urn();
    public abstract virtual void set_Urn(string value);
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Parameters();
    public abstract virtual void set_Parameters(IReadOnlyDictionary`2<string, object> value);
    public abstract virtual Task`1<IDataView> GetDataAsync();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Assessment.Measurement : object {
    private Dictionary`2<string, object> rep;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public Measurement(int capacity);
    public Measurement(IDictionary`2<string, object> dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual bool TryGetData(string column, Object& value);
    private static object CastValue(object value);
}
public class Microsoft.SqlServer.Management.Assessment.MeasurementCollection : List`1<IDataRow> {
    public MeasurementCollection(IEnumerable`1<Measurement> rows);
    public MeasurementCollection(Measurement[] rep);
}
