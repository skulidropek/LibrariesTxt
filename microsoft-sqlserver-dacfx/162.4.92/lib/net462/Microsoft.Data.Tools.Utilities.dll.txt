internal enum Microsoft.Data.Tools.Diagnostics.LogComplianceLevel : Enum {
    public int value__;
    public static LogComplianceLevel Untagged;
    public static LogComplianceLevel Masked;
    public static LogComplianceLevel SensitiveData;
}
internal class Microsoft.Data.Tools.Diagnostics.LogObject : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LogComplianceLevel <LogComplianceLevel>k__BackingField;
    internal string Name { get; private set; }
    internal LogComplianceLevel LogComplianceLevel { get; private set; }
    internal LogObject(string name, LogComplianceLevel complianceLevel);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal LogComplianceLevel get_LogComplianceLevel();
    [CompilerGeneratedAttribute]
private void set_LogComplianceLevel(LogComplianceLevel value);
    internal static LogObject CreateUntagged(string name);
    internal static LogObject CreateSensitiveData(string name);
    internal static LogObject CreateMasked(string name);
    internal bool ShouldMask();
    internal static LogComplianceLevel Max(LogComplianceLevel a, LogComplianceLevel b);
    public virtual string ToString();
}
internal enum Microsoft.Data.Tools.Diagnostics.PerfTraceIds : Enum {
    public int value__;
    public static PerfTraceIds General;
    public static PerfTraceIds TSqlModel;
    public static PerfTraceIds ExportTable;
    public static PerfTraceIds ImportTable;
    public static PerfTraceIds ReverseEngineer;
    public static PerfTraceIds ModelComparison;
}
internal static class Microsoft.Data.Tools.Diagnostics.PerfTracer : object {
    private static string PerfTracerSourceName;
    private static TraceSource _traceSource;
    private static bool _perfTraceEnabled;
    internal static TraceSource TraceSource { get; }
    internal static bool PerfTracerEnabled { get; }
    private static PerfTracer();
    internal static TraceSource get_TraceSource();
    internal static bool TraceEvent(TraceEventType verbosity, PerfTraceIds traceId, string message);
    private static bool LoadPerfTraceConfig();
    internal static bool get_PerfTracerEnabled();
}
internal class Microsoft.Data.Tools.Diagnostics.TraceDuration : object {
    private Stopwatch stopwatch;
    private TraceEventType verbosity;
    private PerfTraceIds traceId;
    private string operationName;
    private string details;
    internal TimeSpan Elapsed { get; }
    public TraceDuration(TraceEventType verbosity, PerfTraceIds traceId, string details, string operationName);
    internal static TraceDuration CreateNew(PerfTraceIds traceId, string details, string operationName);
    internal static TraceDuration CreateNew(TraceEventType verbosity, PerfTraceIds traceId, string details, string operationName);
    private void Start();
    internal void Stop();
    public sealed virtual void Dispose();
    internal TimeSpan get_Elapsed();
}
public enum Microsoft.Data.Tools.Diagnostics.TraceId : Enum {
    public UInt32 value__;
    public static TraceId CoreServices;
    public static TraceId TSqlModel;
    public static TraceId LanguageServices;
    public static TraceId VSShell;
    public static TraceId TableDesigner;
    public static TraceId TableDesigner_ReadFromModel;
    public static TraceId TableDesigner_WriteToModel;
    public static TraceId QueryResults;
    public static TraceId Debugger;
    public static TraceId TSqlEditorAndLanguageServices;
    public static TraceId SchemaCompare;
    public static TraceId CommandlineTooling;
    public static TraceId DacApi;
    public static TraceId Telemetry;
    public static TraceId Perf;
    public static TraceId InternalTest;
}
internal static class Microsoft.Data.Tools.Diagnostics.Tracer : object {
    private static string TraceSourceName;
    private static int MessageChunkLength;
    private static TraceSource _traceSource;
    internal static TraceSource TraceSource { get; }
    private static Tracer();
    internal static TraceSource get_TraceSource();
    private static WindowsEventTracingLevel TraceEventTypeToLevel(TraceEventType eventType);
    private static bool WriteEtwEvent(TraceEventType eventType, TraceId traceId, string message);
    internal static bool ShouldTrace(TraceEventType eventType);
    internal static bool TraceEvent(TraceEventType eventType, TraceId traceId);
    internal static bool TraceEvent(TraceEventType eventType, TraceId traceId, string message);
    internal static string WithTimestamp(string message);
    internal static bool TraceEvent(TraceEventType eventType, TraceId traceId, string format, Object[] args);
    internal static bool TraceEventHashed(TraceEventType eventType, TraceId traceId, string format, Object[] args);
    internal static bool TraceException(TraceId traceId, Exception exception);
    internal static bool TraceException(TraceId traceId, Exception exception, string message);
    internal static bool TraceException(TraceEventType eventType, TraceId traceId, Exception exception, string message);
    internal static bool TraceHResult(TraceId traceId, int hr);
    internal static bool TraceHResult(TraceId traceId, int hr, string message);
    internal static bool DebugTraceEvent(TraceEventType eventType, TraceId traceId, string message);
    internal static bool AssertTraceEvent(bool condition, TraceEventType eventType, TraceId traceId, string message);
    internal static bool DebugTraceException(TraceEventType eventType, TraceId traceId, Exception exception, string message);
    internal static bool AssertTraceException(bool condition, TraceEventType eventType, TraceId traceId, Exception exception, string message);
}
internal static class Microsoft.Data.Tools.Diagnostics.TraceUtils : object {
    internal static string DefaultListStart;
    internal static string DefaultListEnd;
    internal static string DefaultListSeparator;
    internal static string DefaultIndent;
    internal static string DefaultDictionaryStart;
    internal static string DefaultDictionaryEnd;
    internal static string DefaultDictionaryMapsTo;
    internal static string FormatEnumerable(IEnumerable`1<T> enumerable, Func`2<T, string> converter, bool newlineForEach, string newlineIndent, string listStart, string listEnd, string listSeparator);
    internal static string FormatNamedEnumerable(string name, IEnumerable`1<T> enumerable, Func`2<T, string> converter, bool newlineForEach, string newlineIndent, string listStart, string listEnd, string listSeparator);
    internal static string FormatDictionary(IDictionary`2<T, U> dictionary, Func`2<T, string> keyConverter, Func`2<U, string> valueConverter, bool newlineForEach, string newlineIndent, string listStart, string listEnd, string listSeparator, string dictionaryStart, string dictionaryEnd, string mapsTo);
    internal static string FormatNamedDictionary(string name, IDictionary`2<T, U> dictionary, Func`2<T, string> keyConverter, Func`2<U, string> valueConverter, bool newlineForEach, string newlineIndent, string listStart, string listEnd, string listSeparator, string dictionaryStart, string dictionaryEnd, string mapsTo);
}
internal class Microsoft.Data.Tools.Schema.Common.AmbientValue : object {
    private Type _type;
    private bool _isTypeNullable;
    private object _value;
    public object Value { get; public set; }
    public AmbientValue(object value);
    public AmbientValue(Type type, object value);
    public object get_Value();
    public void set_Value(object value);
}
internal static class Microsoft.Data.Tools.Schema.Common.ArgumentValidation : object {
    internal static HashSet`1<char> HexCharacters;
    private static ArgumentValidation();
    public static void CheckForEmptyString(string variable, string variableName);
    public static void CheckForEmptyCollection(ICollection`1<T> variable, string variableName);
    public static void CheckForNullOrWhiteSpaceString(string variable, string variableName);
    public static void CheckForAnyNullOrEmptyStringInList(IList`1<string> variable, string variableName);
    public static void CheckForNullReference(object variable, string variableName);
    public static void CheckForInvalidNullNameReference(string name, string messageName);
    public static void CheckExpectedType(object variable, Type type);
    public static void CheckEnumeration(Type enumType, object variable, string variableName);
    public static void CheckForOutOfRangeException(long value, long min, long max);
    public static void CheckForSignedIntegerPositive(int value, string variableName);
    public static void CheckMaxLength(string value, string variableName, int maxLength);
    internal static void CheckForNonnegativeInteger(int value, string variableName);
    internal static bool ContainsOnlyHexCharacters(string hex);
}
internal static class Microsoft.Data.Tools.Schema.Common.AssemblyUtils : object {
    public static bool AssemblyIsSignedByMicrosoft(AssemblyName assemblyName);
}
internal class Microsoft.Data.Tools.Schema.Common.AzureStorageUtility : object {
    internal static IEnumerable`1<string> GetSortedBlobs(string connectionString, string containerName, string folderName, string fileExtension);
    internal static AccountInfo GetStorageAccountInfo(string connectionString);
    internal static StorageAuthenticationType GetAuthenticationType(string connectionString);
    internal static string GetStorageConnectionString(string azureStorageBlobEndpoint, string accountKey, string sasToken);
    public static string RemoveQuestionMarkFromSASToken(string azureSharedAccessSignatureToken);
}
internal class Microsoft.Data.Tools.Schema.Common.CachedString : object {
    private static string ContentsString;
    private static string CacheStyleString;
    private Byte[] _compressedString;
    private WeakReference _decompressedStringWeakRef;
    private string _string;
    private int _length;
    private ScriptCacheStyle _cacheStyle;
    private TemporaryFilenameHelper _tempFileName;
    private static int CompressionThreshold;
    private static int CacheThreshold;
    public int Length { get; }
    public bool IsCached { get; }
    public CachedString(string str);
    public CachedString(string str, bool cacheBasedOnThreshold);
    public CachedString(string str, ScriptCacheStyle cacheStyle);
    public CachedString(TemporaryFilenameHelper file);
    public CachedString(CachedString cs);
    private CachedString(SerializationInfo info, StreamingContext context);
    private void Initialize(string str, ScriptCacheStyle cacheStyle);
    private static Byte[] CompressString(string str);
    public TextReader ToStream();
    private StreamReader GetFileStream();
    public virtual string ToString();
    private string DecompressString();
    public static string op_Implicit(CachedString cachedString);
    public string Substring(int startIndex, int substringLength);
    public int get_Length();
    public bool get_IsCached();
    public static bool IsNullOrEmpty(CachedString cachedString);
    public sealed virtual void Dispose();
    private void CleanUp();
    protected virtual override void Finalize();
    private void DumpToDisk(TextReader r, Func`1<string> scriptFallback);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Data.Tools.Schema.Common.CollectionUtils : object {
    internal static void AddMultiMapEntry(IDictionary`2<TKey, TValueContainer> dictionary, TKey key, TValue value);
    public static List`1<TElementType> CloneList(IList`1<TElementType> source, Func`2<TElementType, TElementType> cloneElement);
    public static void CloneList(IList`1<TElementType> source, IList`1<TElementType> clone, Func`2<TElementType, TElementType> cloneElement);
    public static Dictionary`2<TKey, TValue> CloneDictionary(IDictionary`2<TKey, TValue> source, Func`2<TKey, TKey> cloneKey, Func`2<TValue, TValue> cloneValue);
    public static void CloneDictionary(IDictionary`2<TKey, TValue> source, IDictionary`2<TKey, TValue> clone, Func`2<TKey, TKey> cloneKey, Func`2<TValue, TValue> cloneValue);
    [IteratorStateMachineAttribute("Microsoft.Data.Tools.Schema.Common.CollectionUtils/<Compose>d__5`1")]
public static IEnumerable`1<T> Compose(IEnumerable`1[] enumerables);
    [IteratorStateMachineAttribute("Microsoft.Data.Tools.Schema.Common.CollectionUtils/<MakeCancellable>d__6`1")]
public static IEnumerable`1<T> MakeCancellable(IEnumerable`1<T> source, CancellationToken cancelToken);
    public static Dictionary`2<string, T> MergeDictionaries(Dictionary`2<string, T> collection1, IDictionary`2<string, T> collection2);
}
internal static class Microsoft.Data.Tools.Schema.Common.CommonConstants : object {
    public static bool ConnectionPooling;
    public static Guid ServerExplorerDataSource;
    public static Guid ServerExplorerDataProvider;
    public static string HostShutdownService;
    public static Guid HostShutdownServiceGuid;
    public static string DatabaseEvents;
    public static Guid DatabaseEventsGuid;
    public static int MAX_PATH;
    public static int MAX_DRIVE;
    public static int MAX_DIR;
    public static int MAX_FNAME;
    public static int MAX_EXT;
    public static int Sql2005ServerMajorVersion;
    public static string UniqueMonikerBeginning;
    public static string MSSqlUrlScheme;
    public static string SafeMSSqlUrlScheme;
    public static string MSSqlClrUrlScheme;
    public static string AutoCreatedLocalRouteName;
    public static string DeploymentSuffix;
    public static string BuiltInsReferenceFileName;
    public static string TSQLName;
    public static string DefaultNewProjectName;
    public static int QueryStatusTimeOut;
    public static int MaxIdentifierLength;
    public static int MaxInitialCatalogLength;
    public static string SqlProject_DSPAssemblyName;
    public static char IllegalNtfsReplacementChar;
    public static char Dot;
    public static char Underscore;
    public static string False;
    public static string True;
    public static string NewLine;
    public static string TemplateLanguage;
    public static string EventLogNameApplication;
    public static int RefactorOperationEventLogId;
    public static int SchemaObjectsFeatureEventLogId;
    internal static string ProjectElementName;
    internal static string ToolsVersion;
    internal static string DefaultMSBuildToolset;
    internal static string MSBuildDefinitionUri;
    internal static string VSTemplateUri;
    internal static string VSTemplateNS;
    internal static string xpathWizardDataPrefix;
    internal static string xpathWizardExtensionPrefix;
    internal static string xpathWizardProjectItemPrefix;
    public static string ExtensionsDir;
    public static string FullClassName;
    internal static string ProjectNS;
    internal static string ProjectNSXPath;
    internal static string ProjectNSXPathWithContext;
    internal static string ProjFileConfigSectionsXPath;
    internal static string ProjFileConfigSectionAttributeName;
    internal static string ProjFileConfigSectionAttributeValue;
    internal static string ProjFileNoConfigSectionsXPath;
    public static string EqualEqual;
    public static string Quote;
    public static string DoubleQuote;
    public static string CmdLine_TokenPrepend;
    public static string CmdLine_TokenPostpend;
    internal static UInt32 ProjectUpgradeRequired;
    internal static UInt32 SideBySideBackupSupported;
    internal static string XmlSerialization_DatabaseRefactoringReportUri;
    internal static string XmlSerialization_DatabaseMSBuildTasksUri;
    internal static string XmlSerialization_DBProExtensionsUri;
    internal static string Settings_EntryElement;
    internal static string Settings_KeyAttribute;
    internal static string Settings_ValueAttribute;
    internal static string Settings_RootElement;
    internal static string Settings_ExtensionMappingsAttribute;
    public static string RegistrySubKeySQLDB;
    public static string RegistrySubKeyDataProject;
    public static string RegistrySubKeyDatabase;
    public static string RegistrySubKeyDialogPage;
    public static string RegistryKeyDataConnectionOptionsSettings;
    public static string RegistryKeyDataSchemaCompareSettings;
    public static string SqlExpressEdition;
    public static string Local;
    public static string DefaultInstanceNameInRegistry;
    public static string IncludeDependenciesWhenTargetIsAProject;
    public static string RegistryLockTimeoutSeconds;
    public static string RegistryQueryTimeoutSeconds;
    public static string RegistryLongRunningQueryTimeoutSeconds;
    public static int DefaultSqlQueryTimeoutInSeconds;
    public static int DefaultSqlLockTimeoutInSeconds;
    public static int DefaultSqlLongRunningQueryTimeoutInSeconds;
    public static int DefaultConnectionTimeoutInSeconds;
    public static int MinimalQueryTimeoutSecondsForAzure;
    internal static string VersionNumberFormatting;
    internal static string ProductName;
    internal static string ExecutionEngineApplicationName;
    internal static string SqlEditorApplicationName;
    internal static string EventLogSourceName;
    public static string ReferencePath;
    public static string Include;
    internal static string Metadata_FullPath;
    public static string FolderName_Scripts;
    public static string PublishFileName;
    public static string MasterDatabaseName;
    public static string MsdbDatabaseName;
    public static string TempDatabaseName;
    public static string ModelDatabaseName;
    internal static string MasterDatabaseFileName;
    internal static string MsdbDatabaseFileName;
    public static string SqlFamilyName;
    public static string MasterKey;
    public static string DatabaseKey;
    public static string MSDatabaseToolsExtendedPropertyPrefix;
    public static string DeployStampPropertyName;
    public static byte Deploy_AlreadyDeployedState;
    public static int Deploy_AlreadyDeployedSeverity;
    public static int Deploy_UserDefinedNumber;
    public static string DataSourceSqlClient;
    public static string DefaultExtensionsFileName;
    public static string ExtensionsNamespace;
    public static string ExtensionsXsdFile;
    public static string ExtensionsNamespacePrefix;
    public static string ExtensionXPath;
    public static string ExtensionsXPath;
    public static string DefaultConfigurationRelativeXPath;
    public static string ConfigurationRelativeXPath;
    public static string WizardRelativeXPath;
    public static string ExtensionsXmlSearchPattern;
    public static string GeneratorSubDir;
    public static string SchemaFileSubDir;
    public static string ProductDir;
    public static string SQLDBSubDir;
    public static string SetupVS;
    public static string GeneralConfigFileName;
    public static string BuildAction_Build;
    public static string BuildAction_None;
    public static string BuildAction_RefactorLog;
    public static string BuildAction_BuildExtensionConfiguration;
    public static string BuildAction_PreDeploy;
    public static string BuildAction_PostDeploy;
    public static string BuildAction_Compile;
    public static string BuildAction_Import;
    internal static string DefaultCollation;
    internal static string DefaultCollationDwUnified;
    public static string MiscellaneousFiles;
    public static string ModelOutputFile;
    public static string ModelOutputFileUriString;
    public static string PostDeployOutputFile;
    public static string PreDeployOutputFile;
    public static string RefactorLogOutputFile;
    public static string LogicalObjectStreamFile;
    public static string PhysicalObjectStreamFile;
    public static string DacMetadataFile;
    public static string BacpacMetadata;
    public static string DacOriginFile;
    public static string ContributorArtifactFileTemplate;
    public static string XmlElement_Operations;
    public static string XmlElement_Operation;
    public static string XmlElement_Property;
    public static string XmlAttribute_Name;
    public static string XmlAttribute_Key;
    public static string XmlAttribute_ChangeDateTime;
    public static string XmlAttribute_Value;
    public static string XmlAttribute_Version;
    public static string RefactoringLogFileVersion;
    public static string DeploymentConfig;
    public static int OM_GLYPH_ACC_TYPE_COUNT;
    public static int OM_GLYPH_ERROR;
    public static int OM_GLYPH_CLASS;
    public static int OM_GLYPH_CSHARPFILE;
    public static int OM_GLYPH_REFERENCE;
    public static int OM_GLYPH_VBPROJECT;
    public static string IdentitySeedExpressionScript;
    public static string IdentityIncrementExpressionScript;
    public static bool AssemblyIsModelAware_DefaultValue;
    public static bool AssemblySkipCreationIfEmpty_DefaultValue;
    public static bool AssemblyIsVisible_DefaultValue;
    public static bool AssemblyIsCheckingDataDisabled_DefaultValue;
    public static bool GenerateSqlClrDdl_DefaultValue;
    public static string RegistrySQLServerTools;
    public static string SqlProject_ToolsOptions_General;
    public static string SqlProject_ToolsOptions_OnlineEditing;
    internal static string Dac;
    internal static string PreviousDAC;
    internal static string Import_File_Extension;
    internal static string Compact_File_Extension;
    internal static string Dac_File_Extension;
    public static string SqlDbInstallDirectory;
    public static string SqlStudioProjectTemplate;
    public static string IntermediateTargetFullFileName;
    public static string SqlServerVerificationReferencesFile;
    public static string ProjectOptionOn;
    public static string ProjectOptionOff;
    public static string ProjectOptionCompareBinary;
    public static string ProjectOptionCompareText;
    public static string CDataString;
    public static string CreatedDateFieldName;
    public static string IsNullableFieldName;
    public static string IsSequenceExhaustedFieldName;
    public static string SequenceCurrentValueFieldName;
    public static string SequenceLastUsedValueFieldName;
    public static string IdentityLastValueFieldName;
    public static string IsPrimaryKeyFieldName;
    public static string IsForeignKeyFieldName;
    public static string SqlAzureEditionName;
    public static string SqlAzureEditionDefault;
    public static string SqlAzureEditionWeb;
    public static string SqlAzureEditionBusiness;
    public static string ExpressEditionName;
    public static string SqlDwDefaultEditionName;
    public static string SqlDwDefaultServiceObjective;
    public static string DatabaseOptionKindServiceObjectiveName;
    public static string DeploymentPropertyAlias_Edition;
    public static string DeploymentPropertyAlias_MaximumSize;
    public static string DeploymentPropertyAlias_ServiceObjective;
    public static int DatabaseOptionKindServiceObjectiveValue;
    public static string SqlStudioCollectionBasePath;
    public static string SqlServerObjectExplorerInitCollection;
    public static string InitializedSqlServerObjectExplorer;
    public static string guidSqlServerObjectExplorerNeedsInitializationString;
    public static Guid guidSqlServerObjectExplorerNeedsInitialization;
    public static string ManagementModelSchema100;
    public static string RelationalEngineSchema100;
    public static string ManagementModelSchema105;
    public static string RelationalEngineSchema105;
    public static string ManagementModelSchema110;
    public static string RelationalEngineSchema110;
    public static string ManagementModelSchema200;
    public static string RelationalEngineSchema200;
    public static string ManagementModelSchema250;
    public static string ProductSchema300;
    public static string DriftReportSchema300;
    public static string DeployReportSchema300;
    public static string CurrentProductSchema;
    public static string CurrentDriftReportSchema;
    public static string CurrentDeployReportSchema;
    public static int CopyBufferSizeInBytes;
    public static int OneGigabyteInBytes;
    public static string Instances;
    public static string MM;
    public static string RE;
    public static string IsClusteredIndexColumnAnnotationName;
    public static string IsJsonString;
    public static HashSet`1<string> IsJsonTypeConstraint;
    public static string DateAdd;
    public static string DateDiff;
    public static string DateDiffBig;
    public static string DateName;
    public static string DatePart;
    public static string DateTrunc;
    public static string DateBucket;
    public static HashSet`1<string> SystemDateFunctions;
    public static HashSet`1<string> ImplicitSystemViews;
    internal static Version DacVersion100;
    internal static Version DacVersion105;
    internal static Version DacVersion110;
    internal static Version DacVersion200;
    internal static Version DacVersion250;
    internal static Version DacVersion300;
    internal static Version DacVersion310;
    internal static Version DacVersion320;
    internal static Version PlatformSpecificDefaultDacVersion;
    internal static Version DacDataStreamVersion100;
    internal static Version DacDataStreamVersion200;
    internal static Version DacDataStreamVersionCurrent;
    internal static Version DacDeploymentContributorsStreamVersionNone;
    internal static Version DacDeploymentContributorsStreamVersion100;
    internal static Version DacDeploymentContributorsStreamVersionCurrent;
    internal static HashSet`1<Version> SupportedPackageVersions;
    internal static string DefaultSchemaName;
    internal static string DataFolder;
    internal static string ContributorFilesFolder;
    internal static UInt32 ModelVersion240;
    internal static UInt32 ModelVersion250;
    internal static UInt32 ModelVersion260;
    internal static UInt32 ModelVersion270;
    internal static UInt32 ModelVersion280;
    internal static UInt32 ModelVersion290;
    internal static UInt32 ModelVersion300;
    internal static UInt32 ModelVersion310;
    internal static UInt32 ModelVersion320;
    internal static UInt32 ModelVersion330;
    internal static UInt32 ModelVersion340;
    internal static UInt32 ModelVersion350;
    internal static UInt32 ModelVersion360;
    internal static ICollection`1<UInt32> ModelVersionsNotCompatibleWithAzureV1;
    public static string File;
    public static string Flat;
    public static string ObjectType;
    public static string Schema;
    public static string SchemaObjectType;
    public static string DspVersionPrefix;
    public static string DspVersionSuffix;
    private static CommonConstants();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Tools.Schema.Common.CommonResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbortDueToFatalError { get; }
    internal static string ArgumentParsing_ArgumentValueMissingError { get; }
    internal static string ArgumentParsing_DoubleQuoteMissingError { get; }
    internal static string AssemblySource { get; }
    internal static string ClusteredIndex_LabelPart { get; }
    internal static string ColumnstoreIndex_LabelPart { get; }
    internal static string ConnectionStringParser_InvalidConnectionString { get; }
    internal static string CopyOfFormatString { get; }
    internal static string CopyOfFormatString2 { get; }
    internal static string DatabaseEncryptionKeyName { get; }
    internal static string DefaultCaption { get; }
    internal static string DefaultRelatedElementTypeDescription { get; }
    internal static string Deserialize_Relationships { get; }
    internal static string DisplayName_Sql100Dsp { get; }
    internal static string DisplayName_Sql110Dsp { get; }
    internal static string DisplayName_Sql120Dsp { get; }
    internal static string DisplayName_Sql130Dsp { get; }
    internal static string DisplayName_Sql140Dsp { get; }
    internal static string DisplayName_Sql150Dsp { get; }
    internal static string DisplayName_Sql160Dsp { get; }
    internal static string DisplayName_Sql90Dsp { get; }
    internal static string DisplayName_SqlAzureDsp { get; }
    internal static string DisplayName_SqlAzureV12Dsp { get; }
    internal static string DisplayName_SqlDbFabricDsp { get; }
    internal static string DisplayName_SqlDwDsp { get; }
    internal static string DisplayName_SqlDwUnifiedDsp { get; }
    internal static string DisplayName_SqlServerlessDsp { get; }
    internal static string EE_BatchError_Exception { get; }
    internal static string EE_BatchExecutionError_Halting { get; }
    internal static string EE_BatchExecutionError_Ignoring { get; }
    internal static string EE_BatchExecutionInfo_RowsAffected { get; }
    internal static string EE_BatchSqlMessageNoLineInfo { get; }
    internal static string EE_BatchSqlMessageNoProcedureInfo { get; }
    internal static string EE_BatchSqlMessageWithProcedureInfo { get; }
    internal static string EE_ExecutionError_CommandNotSupported { get; }
    internal static string EE_ExecutionError_InvalidPath { get; }
    internal static string EE_ExecutionError_ReadingFile { get; }
    internal static string EE_ExecutionError_VariableNotFound { get; }
    internal static string EE_ExecutionInfo_FinalizingLoop { get; }
    internal static string EE_ExecutionInfo_InitilizingLoop { get; }
    internal static string EE_ExecutionInfo_QueryCancelledbyUser { get; }
    internal static string EE_ExecutionNotYetCompleteError { get; }
    internal static string EE_ScriptError_Error { get; }
    internal static string EE_ScriptError_FatalError { get; }
    internal static string EE_ScriptError_ParsingSyntax { get; }
    internal static string EE_ScriptError_Warning { get; }
    internal static string ErrorString_TooManyErrors { get; }
    internal static string ExceptionArrayWithNullOrEmptyString { get; }
    internal static string ExceptionConditionFailed { get; }
    internal static string ExceptionEmptyCollection { get; }
    internal static string ExceptionEmptyString { get; }
    internal static string ExceptionEnumerationNotDefined { get; }
    internal static string ExceptionExpectedType { get; }
    internal static string ExceptionIndexOutOfRange { get; }
    internal static string ExceptionInvalidNullNameArgument { get; }
    internal static string ExceptionMaxLengthExceeded { get; }
    internal static string ExceptionNullOrWhiteSpaceString { get; }
    internal static string ExceptionUnexpected { get; }
    internal static string FullTextIndexName { get; }
    internal static string FunctionBody { get; }
    internal static string FunctionImplementation { get; }
    internal static string Import_MergingChildren { get; }
    internal static string InlineConstraintOnDisplayName { get; }
    internal static string IntegerRange_EndLessThanBegin { get; }
    internal static string InvalidDspFormatError { get; }
    internal static string InvalidPlatform { get; }
    internal static string MasterKeyName { get; }
    internal static string NonClusteredIndex_LabelPart { get; }
    internal static string NonUniqueIndex_LabelPart { get; }
    internal static string Not_connected { get; }
    internal static string NotASinglePlatform { get; }
    internal static string PartitionSpecification { get; }
    internal static string PartitionValue { get; }
    internal static string Permission { get; }
    internal static string PlatformNameCannotBeEmptyOrNull { get; }
    internal static string PredeployScriptAlreadyDeployed { get; }
    internal static string PredeployVerifyDatabaseCompat { get; }
    internal static string PredeployVerifyDatabaseExists { get; }
    internal static string PredeployVerifyDatabaseExistsUnknownServer { get; }
    internal static string PredeployVerifyDatabaseName { get; }
    internal static string PredeployVerifyDatabaseState { get; }
    internal static string PredeployVerifyDatabaseWritable { get; }
    internal static string PredeployVerifyServerName { get; }
    internal static string PredeployVerifyServerVersion { get; }
    internal static string PrimarySelectiveXML_LabelPart { get; }
    internal static string PrimaryXML_LabelPart { get; }
    internal static string Registry_CannotAccessInstallDirKey { get; }
    internal static string Schema_CannotFoundConstraint { get; }
    internal static string Schema_CannotFoundTrigger { get; }
    internal static string Schema_ChildWithoutName { get; }
    internal static string Schema_NoMultipleConstraintsInOneStatement { get; }
    internal static string Schema_NoMultipleObjectsInOneFile { get; }
    internal static string Schema_NoObjectIDFound { get; }
    internal static string Schema_ObjectIsAlreadyCreated { get; }
    internal static string Schema_ObjectNotFound { get; }
    internal static string SchemaDependencyInfoMessage { get; }
    internal static string SchemaDependencyInfoMessage2 { get; }
    internal static string SecondarySelectiveXML_LabelPart { get; }
    internal static string SecondaryXML_LabelPart { get; }
    internal static string SelectiveXmlIndex_LabelPart { get; }
    internal static string Serialize_Relationships { get; }
    internal static string SettingsRequireSysAdmin { get; }
    internal static string SignatureName_NoSignable { get; }
    internal static string SignatureName_WithSignable { get; }
    internal static string SinglePlatformValidationFailure { get; }
    internal static string SolutionExplorer_SchemaObjects { get; }
    internal static string SqlConnectionApplicationName_BuildAndDeploy { get; }
    internal static string SqlConnectionApplicationName_Default { get; }
    internal static string SqlConnectionApplicationName_DesignDatabaseManager { get; }
    internal static string SqlConnectionApplicationName_ReverseEngineeringFeature { get; }
    internal static string SqlConnectionApplicationName_SchemaCompare { get; }
    internal static string SystemDefinedSqlCmdVariableFound { get; }
    internal static string Threading_InvalidStateChange { get; }
    internal static string Threading_JobAlreadyManaged { get; }
    internal static string Threading_JobListChangedJobName { get; }
    internal static string Threading_JobManagerNotInitialized { get; }
    internal static string TypeDescription_Aggregate { get; }
    internal static string TypeDescription_ApplicationRole { get; }
    internal static string TypeDescription_Assembly { get; }
    internal static string TypeDescription_AssemblyFile { get; }
    internal static string TypeDescription_AsymmetricKey { get; }
    internal static string TypeDescription_BrokerPriority { get; }
    internal static string TypeDescription_BuiltInServerRole { get; }
    internal static string TypeDescription_BuiltInType { get; }
    internal static string TypeDescription_Certificate { get; }
    internal static string TypeDescription_CheckConstraint { get; }
    internal static string TypeDescription_Column { get; }
    internal static string TypeDescription_ColumnEncryptionKey { get; }
    internal static string TypeDescription_ColumnEncryptionKeyValue { get; }
    internal static string TypeDescription_ColumnMasterKey { get; }
    internal static string TypeDescription_ColumnSet { get; }
    internal static string TypeDescription_ColumnStoreIndex { get; }
    internal static string TypeDescription_ComputedColumn { get; }
    internal static string TypeDescription_Contract { get; }
    internal static string TypeDescription_Credential { get; }
    internal static string TypeDescription_CryptographicProvider { get; }
    internal static string TypeDescription_CustomErrorMessage { get; }
    internal static string TypeDescription_DatabaseAuditSpecification { get; }
    internal static string TypeDescription_DatabaseEncryptionKey { get; }
    internal static string TypeDescription_DatabaseOptions { get; }
    internal static string TypeDescription_DatabaseScopedCredential { get; }
    internal static string TypeDescription_DataCompressionOption { get; }
    internal static string TypeDescription_Default { get; }
    internal static string TypeDescription_DefaultConstraint { get; }
    internal static string TypeDescription_Endpoint { get; }
    internal static string TypeDescription_EventNotification { get; }
    internal static string TypeDescription_EventSession { get; }
    internal static string TypeDescription_ExtendedProperty { get; }
    internal static string TypeDescription_ExternalDataSource { get; }
    internal static string TypeDescription_ExternalFileFormat { get; }
    internal static string TypeDescription_ExternalStream { get; }
    internal static string TypeDescription_ExternalStreamingJob { get; }
    internal static string TypeDescription_ExternalTable { get; }
    internal static string TypeDescription_File { get; }
    internal static string TypeDescription_Filegroup { get; }
    internal static string TypeDescription_FileTable { get; }
    internal static string TypeDescription_ForeignKey { get; }
    internal static string TypeDescription_FullTextCatalog { get; }
    internal static string TypeDescription_FullTextIndex { get; }
    internal static string TypeDescription_FullTextStopList { get; }
    internal static string TypeDescription_Index { get; }
    internal static string TypeDescription_LinkedServer { get; }
    internal static string TypeDescription_LinkedServerLogin { get; }
    internal static string TypeDescription_Login { get; }
    internal static string TypeDescription_MasterKey { get; }
    internal static string TypeDescription_MessageType { get; }
    internal static string TypeDescription_Parameter { get; }
    internal static string TypeDescription_PartitionFunction { get; }
    internal static string TypeDescription_PartitionScheme { get; }
    internal static string TypeDescription_Permission { get; }
    internal static string TypeDescription_PrimaryKey { get; }
    internal static string TypeDescription_Procedure { get; }
    internal static string TypeDescription_PromotedPathBase { get; }
    internal static string TypeDescription_Queue { get; }
    internal static string TypeDescription_RemoteServiceBinding { get; }
    internal static string TypeDescription_Role { get; }
    internal static string TypeDescription_RoleMembership { get; }
    internal static string TypeDescription_Route { get; }
    internal static string TypeDescription_Rule { get; }
    internal static string TypeDescription_ScalarFunction { get; }
    internal static string TypeDescription_Schema { get; }
    internal static string TypeDescription_SearchPropertyList { get; }
    internal static string TypeDescription_SecurityPolicy { get; }
    internal static string TypeDescription_SecurityPredicate { get; }
    internal static string TypeDescription_SelectiveXmlIndex { get; }
    internal static string TypeDescription_Sequence { get; }
    internal static string TypeDescription_ServerAudit { get; }
    internal static string TypeDescription_ServerAuditSpecification { get; }
    internal static string TypeDescription_ServerOptions { get; }
    internal static string TypeDescription_ServerRole { get; }
    internal static string TypeDescription_ServerRoleMembership { get; }
    internal static string TypeDescription_Service { get; }
    internal static string TypeDescription_Signature { get; }
    internal static string TypeDescription_SpatialIndex { get; }
    internal static string TypeDescription_SqlType { get; }
    internal static string TypeDescription_Statistic { get; }
    internal static string TypeDescription_SymmetricKey { get; }
    internal static string TypeDescription_Synonym { get; }
    internal static string TypeDescription_Table { get; }
    internal static string TypeDescription_TableFunction { get; }
    internal static string TypeDescription_TableTypeIndex { get; }
    internal static string TypeDescription_Trigger { get; }
    internal static string TypeDescription_UniqueConstraint { get; }
    internal static string TypeDescription_User { get; }
    internal static string TypeDescription_UserDefinedDataType { get; }
    internal static string TypeDescription_UserDefinedTableType { get; }
    internal static string TypeDescription_UserDefinedType { get; }
    internal static string TypeDescription_View { get; }
    internal static string TypeDescription_XmlIndex { get; }
    internal static string TypeDescription_XmlNamespace { get; }
    internal static string TypeDescription_XmlSchemaCollection { get; }
    internal static string UniqueIndex_LabelPart { get; }
    internal static string Unnamed { get; }
    internal static string UnnamedChildDisplayName { get; }
    internal static string UnnamedRoleAssignmentDisplayName { get; }
    internal static string XmlIndex_Path { get; }
    internal static string XmlIndex_Property { get; }
    internal static string XmlIndex_Value { get; }
    internal static string XmlSerialization_CannotDeserializeType { get; }
    internal static string XmlSerialization_CannotGetValidType { get; }
    internal static string XmlSerialization_CannotParseToEnum { get; }
    internal static string XmlSerialization_CannotToAttribute { get; }
    internal static string XmlSerialization_DuplicateAttribute { get; }
    internal static string XmlSerialization_DuplicateKey { get; }
    internal static string XmlSerialization_DuplicateXmlInclude { get; }
    internal static string XmlSerialization_EmptyContent { get; }
    internal static string XmlSerialization_IncompatiableType { get; }
    internal static string XmlSerialization_InvalidEnumValue { get; }
    internal static string XmlSerialization_InvalidXmlReaderPosition { get; }
    internal static string XmlSerialization_KeyIsNull { get; }
    internal static string XmlSerialization_NameReserved { get; }
    internal static string XmlSerialization_ReuseNames { get; }
    internal static string XmlSerialization_WrongType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbortDueToFatalError();
    internal static string get_ArgumentParsing_ArgumentValueMissingError();
    internal static string get_ArgumentParsing_DoubleQuoteMissingError();
    internal static string get_AssemblySource();
    internal static string get_ClusteredIndex_LabelPart();
    internal static string get_ColumnstoreIndex_LabelPart();
    internal static string get_ConnectionStringParser_InvalidConnectionString();
    internal static string get_CopyOfFormatString();
    internal static string get_CopyOfFormatString2();
    internal static string get_DatabaseEncryptionKeyName();
    internal static string get_DefaultCaption();
    internal static string get_DefaultRelatedElementTypeDescription();
    internal static string get_Deserialize_Relationships();
    internal static string get_DisplayName_Sql100Dsp();
    internal static string get_DisplayName_Sql110Dsp();
    internal static string get_DisplayName_Sql120Dsp();
    internal static string get_DisplayName_Sql130Dsp();
    internal static string get_DisplayName_Sql140Dsp();
    internal static string get_DisplayName_Sql150Dsp();
    internal static string get_DisplayName_Sql160Dsp();
    internal static string get_DisplayName_Sql90Dsp();
    internal static string get_DisplayName_SqlAzureDsp();
    internal static string get_DisplayName_SqlAzureV12Dsp();
    internal static string get_DisplayName_SqlDbFabricDsp();
    internal static string get_DisplayName_SqlDwDsp();
    internal static string get_DisplayName_SqlDwUnifiedDsp();
    internal static string get_DisplayName_SqlServerlessDsp();
    internal static string get_EE_BatchError_Exception();
    internal static string get_EE_BatchExecutionError_Halting();
    internal static string get_EE_BatchExecutionError_Ignoring();
    internal static string get_EE_BatchExecutionInfo_RowsAffected();
    internal static string get_EE_BatchSqlMessageNoLineInfo();
    internal static string get_EE_BatchSqlMessageNoProcedureInfo();
    internal static string get_EE_BatchSqlMessageWithProcedureInfo();
    internal static string get_EE_ExecutionError_CommandNotSupported();
    internal static string get_EE_ExecutionError_InvalidPath();
    internal static string get_EE_ExecutionError_ReadingFile();
    internal static string get_EE_ExecutionError_VariableNotFound();
    internal static string get_EE_ExecutionInfo_FinalizingLoop();
    internal static string get_EE_ExecutionInfo_InitilizingLoop();
    internal static string get_EE_ExecutionInfo_QueryCancelledbyUser();
    internal static string get_EE_ExecutionNotYetCompleteError();
    internal static string get_EE_ScriptError_Error();
    internal static string get_EE_ScriptError_FatalError();
    internal static string get_EE_ScriptError_ParsingSyntax();
    internal static string get_EE_ScriptError_Warning();
    internal static string get_ErrorString_TooManyErrors();
    internal static string get_ExceptionArrayWithNullOrEmptyString();
    internal static string get_ExceptionConditionFailed();
    internal static string get_ExceptionEmptyCollection();
    internal static string get_ExceptionEmptyString();
    internal static string get_ExceptionEnumerationNotDefined();
    internal static string get_ExceptionExpectedType();
    internal static string get_ExceptionIndexOutOfRange();
    internal static string get_ExceptionInvalidNullNameArgument();
    internal static string get_ExceptionMaxLengthExceeded();
    internal static string get_ExceptionNullOrWhiteSpaceString();
    internal static string get_ExceptionUnexpected();
    internal static string get_FullTextIndexName();
    internal static string get_FunctionBody();
    internal static string get_FunctionImplementation();
    internal static string get_Import_MergingChildren();
    internal static string get_InlineConstraintOnDisplayName();
    internal static string get_IntegerRange_EndLessThanBegin();
    internal static string get_InvalidDspFormatError();
    internal static string get_InvalidPlatform();
    internal static string get_MasterKeyName();
    internal static string get_NonClusteredIndex_LabelPart();
    internal static string get_NonUniqueIndex_LabelPart();
    internal static string get_Not_connected();
    internal static string get_NotASinglePlatform();
    internal static string get_PartitionSpecification();
    internal static string get_PartitionValue();
    internal static string get_Permission();
    internal static string get_PlatformNameCannotBeEmptyOrNull();
    internal static string get_PredeployScriptAlreadyDeployed();
    internal static string get_PredeployVerifyDatabaseCompat();
    internal static string get_PredeployVerifyDatabaseExists();
    internal static string get_PredeployVerifyDatabaseExistsUnknownServer();
    internal static string get_PredeployVerifyDatabaseName();
    internal static string get_PredeployVerifyDatabaseState();
    internal static string get_PredeployVerifyDatabaseWritable();
    internal static string get_PredeployVerifyServerName();
    internal static string get_PredeployVerifyServerVersion();
    internal static string get_PrimarySelectiveXML_LabelPart();
    internal static string get_PrimaryXML_LabelPart();
    internal static string get_Registry_CannotAccessInstallDirKey();
    internal static string get_Schema_CannotFoundConstraint();
    internal static string get_Schema_CannotFoundTrigger();
    internal static string get_Schema_ChildWithoutName();
    internal static string get_Schema_NoMultipleConstraintsInOneStatement();
    internal static string get_Schema_NoMultipleObjectsInOneFile();
    internal static string get_Schema_NoObjectIDFound();
    internal static string get_Schema_ObjectIsAlreadyCreated();
    internal static string get_Schema_ObjectNotFound();
    internal static string get_SchemaDependencyInfoMessage();
    internal static string get_SchemaDependencyInfoMessage2();
    internal static string get_SecondarySelectiveXML_LabelPart();
    internal static string get_SecondaryXML_LabelPart();
    internal static string get_SelectiveXmlIndex_LabelPart();
    internal static string get_Serialize_Relationships();
    internal static string get_SettingsRequireSysAdmin();
    internal static string get_SignatureName_NoSignable();
    internal static string get_SignatureName_WithSignable();
    internal static string get_SinglePlatformValidationFailure();
    internal static string get_SolutionExplorer_SchemaObjects();
    internal static string get_SqlConnectionApplicationName_BuildAndDeploy();
    internal static string get_SqlConnectionApplicationName_Default();
    internal static string get_SqlConnectionApplicationName_DesignDatabaseManager();
    internal static string get_SqlConnectionApplicationName_ReverseEngineeringFeature();
    internal static string get_SqlConnectionApplicationName_SchemaCompare();
    internal static string get_SystemDefinedSqlCmdVariableFound();
    internal static string get_Threading_InvalidStateChange();
    internal static string get_Threading_JobAlreadyManaged();
    internal static string get_Threading_JobListChangedJobName();
    internal static string get_Threading_JobManagerNotInitialized();
    internal static string get_TypeDescription_Aggregate();
    internal static string get_TypeDescription_ApplicationRole();
    internal static string get_TypeDescription_Assembly();
    internal static string get_TypeDescription_AssemblyFile();
    internal static string get_TypeDescription_AsymmetricKey();
    internal static string get_TypeDescription_BrokerPriority();
    internal static string get_TypeDescription_BuiltInServerRole();
    internal static string get_TypeDescription_BuiltInType();
    internal static string get_TypeDescription_Certificate();
    internal static string get_TypeDescription_CheckConstraint();
    internal static string get_TypeDescription_Column();
    internal static string get_TypeDescription_ColumnEncryptionKey();
    internal static string get_TypeDescription_ColumnEncryptionKeyValue();
    internal static string get_TypeDescription_ColumnMasterKey();
    internal static string get_TypeDescription_ColumnSet();
    internal static string get_TypeDescription_ColumnStoreIndex();
    internal static string get_TypeDescription_ComputedColumn();
    internal static string get_TypeDescription_Contract();
    internal static string get_TypeDescription_Credential();
    internal static string get_TypeDescription_CryptographicProvider();
    internal static string get_TypeDescription_CustomErrorMessage();
    internal static string get_TypeDescription_DatabaseAuditSpecification();
    internal static string get_TypeDescription_DatabaseEncryptionKey();
    internal static string get_TypeDescription_DatabaseOptions();
    internal static string get_TypeDescription_DatabaseScopedCredential();
    internal static string get_TypeDescription_DataCompressionOption();
    internal static string get_TypeDescription_Default();
    internal static string get_TypeDescription_DefaultConstraint();
    internal static string get_TypeDescription_Endpoint();
    internal static string get_TypeDescription_EventNotification();
    internal static string get_TypeDescription_EventSession();
    internal static string get_TypeDescription_ExtendedProperty();
    internal static string get_TypeDescription_ExternalDataSource();
    internal static string get_TypeDescription_ExternalFileFormat();
    internal static string get_TypeDescription_ExternalStream();
    internal static string get_TypeDescription_ExternalStreamingJob();
    internal static string get_TypeDescription_ExternalTable();
    internal static string get_TypeDescription_File();
    internal static string get_TypeDescription_Filegroup();
    internal static string get_TypeDescription_FileTable();
    internal static string get_TypeDescription_ForeignKey();
    internal static string get_TypeDescription_FullTextCatalog();
    internal static string get_TypeDescription_FullTextIndex();
    internal static string get_TypeDescription_FullTextStopList();
    internal static string get_TypeDescription_Index();
    internal static string get_TypeDescription_LinkedServer();
    internal static string get_TypeDescription_LinkedServerLogin();
    internal static string get_TypeDescription_Login();
    internal static string get_TypeDescription_MasterKey();
    internal static string get_TypeDescription_MessageType();
    internal static string get_TypeDescription_Parameter();
    internal static string get_TypeDescription_PartitionFunction();
    internal static string get_TypeDescription_PartitionScheme();
    internal static string get_TypeDescription_Permission();
    internal static string get_TypeDescription_PrimaryKey();
    internal static string get_TypeDescription_Procedure();
    internal static string get_TypeDescription_PromotedPathBase();
    internal static string get_TypeDescription_Queue();
    internal static string get_TypeDescription_RemoteServiceBinding();
    internal static string get_TypeDescription_Role();
    internal static string get_TypeDescription_RoleMembership();
    internal static string get_TypeDescription_Route();
    internal static string get_TypeDescription_Rule();
    internal static string get_TypeDescription_ScalarFunction();
    internal static string get_TypeDescription_Schema();
    internal static string get_TypeDescription_SearchPropertyList();
    internal static string get_TypeDescription_SecurityPolicy();
    internal static string get_TypeDescription_SecurityPredicate();
    internal static string get_TypeDescription_SelectiveXmlIndex();
    internal static string get_TypeDescription_Sequence();
    internal static string get_TypeDescription_ServerAudit();
    internal static string get_TypeDescription_ServerAuditSpecification();
    internal static string get_TypeDescription_ServerOptions();
    internal static string get_TypeDescription_ServerRole();
    internal static string get_TypeDescription_ServerRoleMembership();
    internal static string get_TypeDescription_Service();
    internal static string get_TypeDescription_Signature();
    internal static string get_TypeDescription_SpatialIndex();
    internal static string get_TypeDescription_SqlType();
    internal static string get_TypeDescription_Statistic();
    internal static string get_TypeDescription_SymmetricKey();
    internal static string get_TypeDescription_Synonym();
    internal static string get_TypeDescription_Table();
    internal static string get_TypeDescription_TableFunction();
    internal static string get_TypeDescription_TableTypeIndex();
    internal static string get_TypeDescription_Trigger();
    internal static string get_TypeDescription_UniqueConstraint();
    internal static string get_TypeDescription_User();
    internal static string get_TypeDescription_UserDefinedDataType();
    internal static string get_TypeDescription_UserDefinedTableType();
    internal static string get_TypeDescription_UserDefinedType();
    internal static string get_TypeDescription_View();
    internal static string get_TypeDescription_XmlIndex();
    internal static string get_TypeDescription_XmlNamespace();
    internal static string get_TypeDescription_XmlSchemaCollection();
    internal static string get_UniqueIndex_LabelPart();
    internal static string get_Unnamed();
    internal static string get_UnnamedChildDisplayName();
    internal static string get_UnnamedRoleAssignmentDisplayName();
    internal static string get_XmlIndex_Path();
    internal static string get_XmlIndex_Property();
    internal static string get_XmlIndex_Value();
    internal static string get_XmlSerialization_CannotDeserializeType();
    internal static string get_XmlSerialization_CannotGetValidType();
    internal static string get_XmlSerialization_CannotParseToEnum();
    internal static string get_XmlSerialization_CannotToAttribute();
    internal static string get_XmlSerialization_DuplicateAttribute();
    internal static string get_XmlSerialization_DuplicateKey();
    internal static string get_XmlSerialization_DuplicateXmlInclude();
    internal static string get_XmlSerialization_EmptyContent();
    internal static string get_XmlSerialization_IncompatiableType();
    internal static string get_XmlSerialization_InvalidEnumValue();
    internal static string get_XmlSerialization_InvalidXmlReaderPosition();
    internal static string get_XmlSerialization_KeyIsNull();
    internal static string get_XmlSerialization_NameReserved();
    internal static string get_XmlSerialization_ReuseNames();
    internal static string get_XmlSerialization_WrongType();
}
internal static class Microsoft.Data.Tools.Schema.Common.CommonResourceUtil : object {
    public static string GetString(string format, Object[] args);
}
internal static class Microsoft.Data.Tools.Schema.Common.Diagnostics.EtwProvider : object {
    private static bool EtwLoggingEnabled;
    internal static EventProviderVersionTwo m_provider;
    private static Guid ReverseEngineerId;
    private static Guid CoreModelId;
    private static EventDescriptor Populate;
    private static EventDescriptor ExecutePopulator;
    private static EventDescriptor ExecuteComposedPopulator;
    private static EventDescriptor DeleteElements;
    private static EventDescriptor SchemaCompare;
    private static EventDescriptor SchemaCompareError;
    private static EventDescriptor SqlEditorExecute;
    private static EventDescriptor ProjectLoad;
    private static EventDescriptor ProjectOpen;
    private static EventDescriptor ProjectWizardImportSchemaFinish;
    private static EventDescriptor ProjectBuild;
    private static EventDescriptor ProjectBuildError;
    private static EventDescriptor ProjectDeploy;
    private static EventDescriptor DeploymentExecute;
    private static EventDescriptor DeploymentFailure;
    private static EventDescriptor DeploymentError;
    private static EventDescriptor DisplayAdapterSchemaObjectChangeDone;
    private static EventDescriptor SchemaViewNodePopulationComplete;
    private static EventDescriptor ConnectionStringPersistedInRegistry;
    private static EventDescriptor DataSchemaModelRecycle;
    private static EventDescriptor ModelStoreQueryExecutionTimes;
    private static EventDescriptor ModelStoreFileSizeOnDispose;
    private static EventDescriptor ReverseEngineerPopulateAll;
    private static EventDescriptor ReverseEngineerPopulateSingle;
    private static EventDescriptor ReverseEngineerPopulateChildren;
    private static EventDescriptor ReverseEngineerExecuteReader;
    private static EventDescriptor ReverseEngineerElementsPopulated;
    private static EventDescriptor ImportSchema;
    private static EventDescriptor ImportSchemaFinish;
    private static EventDescriptor ImportSchemaFinishError;
    private static EventDescriptor ImportSchemaGenerateAllScripts;
    private static EventDescriptor ImportSchemaGenerateSingleScript;
    private static EventDescriptor ImportSchemaAddAllScriptsToProject;
    private static EventDescriptor ImportSchemaAddSingleScriptToProject;
    private static EventDescriptor ImportSchemaGenerateProjectMapForType;
    private static EventDescriptor ImportSchemaGenerateProjectMapForElement;
    private static EventDescriptor ImportSchemaAddScriptsToProjectForType;
    private static EventDescriptor ImportScript;
    private static EventDescriptor ModelProcessingTasks;
    private static EventDescriptor ResolveAll;
    private static EventDescriptor ResolveBatch;
    private static EventDescriptor SingleTaskProcessAll;
    private static EventDescriptor SingleTaskProcessBatch;
    private static EventDescriptor ModelBuilder;
    private static EventDescriptor ParseAndInterpret;
    private static EventDescriptor Parse;
    private static EventDescriptor Interpret;
    private static EventDescriptor InterpretError;
    private static EventDescriptor InterpretCritical;
    private static EventDescriptor AnalyzeIdentifiedElement;
    private static EventDescriptor AnalyzeIdentifiedRelationship;
    private static EventDescriptor AnalyzeIdentifiedRelationshipError;
    private static EventDescriptor AnalyzeIdentifiedSupportingStatement;
    private static EventDescriptor AnalyzeIdentifiedAmbiguousRelationship;
    private static EventDescriptor AnalyzeIdentifiedAmbiguousRelationshipError;
    private static EventDescriptor SemanticVerification;
    private static EventDescriptor SerializationWriteStore;
    private static EventDescriptor SerializationWriteElement;
    private static EventDescriptor SerializationWriteProperties;
    private static EventDescriptor SerializationWriteRelationship;
    private static EventDescriptor SerializationWriteAnnotations;
    private static EventDescriptor SerializationWriteStoreAnnotations;
    private static EventDescriptor SerializationWriteRelationshipEntryPeer;
    private static EventDescriptor SerializationWriteRelationshipEntryComposing;
    private static EventDescriptor SerializationGetDisambiguatorMap;
    private static EventDescriptor SerializationGetRootElements;
    private static EventDescriptor SerializationGetExternalSourceExternalName;
    private static EventDescriptor DataSchemaModelSerialization;
    private static EventDescriptor DataSchemaModelDeserialization;
    private static EventDescriptor DataSchemaModelDeserializationError;
    private static EventDescriptor ModelCompare;
    private static EventDescriptor Commit;
    private static EventDescriptor BuildDac;
    private static EventDescriptor RunValidationRule;
    private static EventDescriptor RunExtendedValidation;
    private static EventDescriptor LogCritical;
    private static EventDescriptor LogError;
    private static EventDescriptor LogWarning;
    private static EventDescriptor LogInformational;
    private static EventDescriptor LogVerbose;
    private static EventDescriptor TableDesignerUpdateContextView;
    private static EventDescriptor TableDesignerAddNewTable;
    private static EventDescriptor TableDesignerOpenTable;
    private static EventDescriptor TableDesignerSpecifyTableProperties;
    private static EventDescriptor TableDesignerAddColumns;
    private static EventDescriptor TableDesignerAddObjectFromCtxPane;
    private static EventDescriptor TableDesignerRefactorRename;
    private static EventDescriptor TableDesignerDeleteColumns;
    private static EventDescriptor SchemaCompareDataPopulationJob;
    private static EventDescriptor SchemaCompareDataPopulationCancel;
    private static EventDescriptor SchemaCompareScriptPopulationJob;
    private static EventDescriptor SchemaCompareScriptPopulationCancel;
    private static EventDescriptor SchemaCompareGetAndResolveDataSchemaModel;
    private static EventDescriptor SchemaCompareModelCompare;
    private static EventDescriptor SchemaCompareGenerateVisual;
    private static EventDescriptor SchemaCompareUpdateTargetJob;
    private static EventDescriptor SchemaCompareUpdateTargetCancel;
    private static EventDescriptor ProjectSystemSnapshot;
    private static EventDescriptor ProjectSystemSnapshotBuildFailed;
    private static EventDescriptor ProjectSystemPublishing;
    private static EventDescriptor ProjectSystemPublishCreateDeploymentPlan;
    private static EventDescriptor ProjectSystemPublishCreatePublishScripts;
    private static EventDescriptor ProjectSystemPublishShowScript;
    private static EventDescriptor ProjectSystemPublishExecuteScript;
    private static EventDescriptor ProjectSystemPublishResults;
    private static EventDescriptor QueryResultExecuteQuery;
    private static EventDescriptor QueryResultCreateScript;
    private static EventDescriptor QueryResultsLoaded;
    private static EventDescriptor ProjectSystemImportSnapshot;
    private static EventDescriptor FileOpen;
    private static EventDescriptor LoadTSqlDocData;
    private static EventDescriptor TSqlEditorFrameCreate;
    private static EventDescriptor TSqlEditorActivate;
    private static EventDescriptor TSqlEditorTabSwitch;
    private static EventDescriptor TSqlEditorLaunch;
    private static EventDescriptor TSqlOnlineEditorDocumentLoad;
    private static EventDescriptor ServerExplorerServerPropertiesRetrieved;
    private static EventDescriptor GotoDefinition;
    private static EventDescriptor FindAllReferences;
    private static EventDescriptor Refactor;
    private static EventDescriptor RefactorContributeChanges;
    private static EventDescriptor RefactorApplyChanges;
    private static EtwProvider();
    private static bool GetIsEtwEnabled();
    public static bool IsEnabled();
    public static bool IsEnabled(byte level, long keywords);
    public static bool IsModelStoreQueryExecutionTimesEnabled();
    public static bool IsExecutePopulatorEnabled();
    public static bool IsModelStoreFileSizeOnDisposeEnabled();
    public static bool IsSingleTaskProcessBatchEnabled();
    public static bool IsExecuteComposedPopulatorEnabled();
    public static bool IsLoggingEnabled(WindowsEventTracingLevel level);
    public static bool EventWritePopulate(bool IsStart);
    public static bool EventWriteExecutePopulator(bool IsStart, string PopulatorName, int numberOfElements);
    public static bool EventWriteExecuteComposedPopulator(bool IsStart, string PopulatorName, int numberOfElements);
    public static bool EventWriteDeleteElements();
    public static bool EventWriteSchemaCompare(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareError(string message);
    public static bool EventWriteSqlEditorExecute(bool IsStart, string EventContext);
    public static bool EventWriteProjectLoad(bool IsStart, string EventContext);
    public static bool EventWriteProjectOpen(bool IsStart, string EventContext);
    public static bool EventWriteProjectWizardImportSchemaFinish(bool IsStart, string EventContext);
    public static bool EventWriteProjectBuild(bool IsStart, string EventContext);
    public static bool EventWriteProjectBuildError(string message);
    public static bool EventWriteProjectDeploy(bool IsStart, string EventContext);
    public static bool EventWriteDeploymentExecute(bool IsStart, string EventContext);
    public static bool EventWriteDeploymentFailure(string message);
    public static bool EventWriteDeploymentError(bool IsStart, string EventContext);
    public static bool EventWriteDisplayAdapterSchemaObjectChangeDone(bool IsStart, string EventContext);
    public static bool EventWriteSchemaViewNodePopulationComplete(bool IsStart, string EventContext);
    public static bool EventWriteConnectionStringPersistedInRegistry(bool IsStart, string EventContext);
    public static bool EventWriteDataSchemaModelRecycle(bool IsStart, string EventContext);
    public static bool EventWriteModelStoreQueryExecutionTimes(bool IsStart, string EventContext);
    public static bool EventWriteModelStoreFileSizeOnDispose(string message);
    public static bool EventWriteReverseEngineerPopulateAll(bool IsStart, string EventContext);
    public static bool EventWriteReverseEngineerPopulateSingle(bool IsStart, string EventContext);
    public static bool EventWriteReverseEngineerPopulateChildren(bool IsStart, string EventContext);
    public static bool EventWriteReverseEngineerExecuteReader(bool IsStart, string EventContext);
    public static bool EventWriteReverseEngineerElementsPopulated(bool IsStart, string EventContext);
    public static bool EventWriteImportSchema(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaFinish(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaFinishError(string message);
    public static bool EventWriteImportSchemaGenerateAllScripts(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaGenerateSingleScript(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaAddAllScriptsToProject(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaAddSingleScriptToProject(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaGenerateProjectMapForType(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaGenerateProjectMapForElement(bool IsStart, string EventContext);
    public static bool EventWriteImportSchemaAddScriptsToProjectForType(bool IsStart, string EventContext);
    public static bool EventWriteImportScript(bool IsStart, string EventContext);
    public static bool EventWriteModelProcessingTasks(bool IsStart, string EventContext);
    public static bool EventWriteResolveAll(bool IsStart);
    public static bool EventWriteResolveBatch(bool IsStart);
    public static bool EventWriteSingleTaskProcessAll(bool IsStart, string EventContext);
    public static bool EventWriteSingleTaskProcessBatch(bool IsStart, string EventContext);
    public static bool EventWriteModelBuilder(bool IsStart, string EventContext);
    public static bool EventWriteParseAndInterpret(bool IsStart, string EventContext);
    public static bool EventWriteParse(bool IsStart, string EventContext);
    public static bool EventWriteInterpret(bool IsStart, string EventContext);
    public static bool EventWriteInterpretError(string message);
    public static bool EventWriteInterpretCritical(string message);
    public static bool EventWriteAnalyzeIdentifiedElement(bool IsStart);
    public static bool EventWriteAnalyzeIdentifiedRelationship(bool IsStart);
    public static bool EventWriteAnalyzeIdentifiedRelationshipError();
    public static bool EventWriteAnalyzeIdentifiedSupportingStatement(bool IsStart);
    public static bool EventWriteAnalyzeIdentifiedAmbiguousRelationship(bool IsStart);
    public static bool EventWriteAnalyzeIdentifiedAmbiguousRelationshipError();
    public static bool EventWriteSemanticVerification(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteStore(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteElement(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteProperties(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteRelationship(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteAnnotations(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteStoreAnnotations(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteRelationshipEntryPeer(bool IsStart, string EventContext);
    public static bool EventWriteSerializationWriteRelationshipEntryComposing(bool IsStart, string EventContext);
    public static bool EventWriteSerializationGetDisambiguatorMap(bool IsStart, string EventContext);
    public static bool EventWriteSerializationGetRootElements(bool IsStart, string EventContext);
    public static bool EventWriteSerializationGetExternalSourceExternalName(bool IsStart, string EventContext);
    public static bool EventWriteDataSchemaModelSerialization(bool IsStart);
    public static bool EventWriteDataSchemaModelDeserialization(bool IsStart, string EventContext);
    public static bool EventWriteDataSchemaModelDeserializationError(string message);
    public static bool EventWriteModelCompare(bool IsStart, string EventContext);
    public static bool EventWriteCommit(bool IsStart);
    public static bool EventWriteBuildDac(bool IsStart);
    public static bool EventWriteRunValidationRule(bool IsStart, string EventContext);
    public static bool EventWriteRunExtendedValidation(bool IsStart);
    public static bool EventWriteLogCritical(UInt32 traceId, string message);
    public static bool EventWriteLogError(UInt32 traceId, string message);
    public static bool EventWriteLogWarning(UInt32 traceId, string message);
    public static bool EventWriteLogInformational(UInt32 traceId, string message);
    public static bool EventWriteLogVerbose(UInt32 traceId, string message);
    public static bool EventWriteTableDesignerUpdateContextView(bool IsStart);
    public static bool EventWriteTableDesignerAddNewTable(bool IsStart);
    public static bool EventWriteTableDesignerOpenTable(bool IsStart);
    public static bool EventWriteTableDesignerSpecifyTableProperties(bool IsStart);
    public static bool EventWriteTableDesignerAddColumns(bool IsStart);
    public static bool EventWriteTableDesignerAddObjectFromCtxPane(bool IsStart);
    public static bool EventWriteTableDesignerRefactorRename(bool IsStart);
    public static bool EventWriteTableDesignerDeleteColumns(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareDataPopulationJob(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareDataPopulationCancel(string message);
    public static bool EventWriteSchemaCompareScriptPopulationJob(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareScriptPopulationCancel(string message);
    public static bool EventWriteSchemaCompareGetAndResolveDataSchemaModel(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareModelCompare(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareGenerateVisual(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareUpdateTargetJob(bool IsStart, string EventContext);
    public static bool EventWriteSchemaCompareUpdateTargetCancel(string message);
    public static bool EventWriteProjectSystemSnapshot(bool IsStart);
    public static bool EventWriteProjectSystemSnapshotBuildFailed();
    public static bool EventWriteProjectSystemPublishing(bool IsStart);
    public static bool EventWriteProjectSystemPublishCreateDeploymentPlan(bool IsStart);
    public static bool EventWriteProjectSystemPublishCreatePublishScripts(bool IsStart);
    public static bool EventWriteProjectSystemPublishShowScript(bool IsStart);
    public static bool EventWriteProjectSystemPublishExecuteScript(bool IsStart);
    public static bool EventWriteProjectSystemPublishResults(string message);
    public static bool EventWriteQueryResultExecuteQuery(bool IsStart);
    public static bool EventWriteQueryResultCreateScript(bool IsStart);
    public static bool EventWriteQueryResultsLoaded();
    public static bool EventWriteProjectSystemImportSnapshot(bool IsStart);
    public static bool EventWriteFileOpen(bool IsStart, string EventContext);
    public static bool EventWriteLoadTSqlDocData(bool IsStart, string EventContext);
    public static bool EventWriteTSqlEditorFrameCreate(bool IsStart, string EventContext);
    public static bool EventWriteTSqlEditorActivate(bool IsStart, string EventContext);
    public static bool EventWriteTSqlEditorTabSwitch(bool IsStart, string EventContext);
    public static bool EventWriteTSqlEditorLaunch(bool IsStart, string EventContext);
    public static bool EventWriteTSqlOnlineEditorDocumentLoad(string message);
    public static bool EventWriteServerExplorerServerPropertiesRetrieved(bool IsStart);
    public static bool EventWriteGotoDefinition(bool IsStart);
    public static bool EventWriteFindAllReferences(bool IsStart);
    public static bool EventWriteRefactor(bool IsStart);
    public static bool EventWriteRefactorContributeChanges(bool IsStart);
    public static bool EventWriteRefactorApplyChanges(bool IsStart);
}
internal class Microsoft.Data.Tools.Schema.Common.Diagnostics.EventProviderVersionTwo : EventProvider {
    internal EventProviderVersionTwo(Guid id);
    internal bool TemplateEventDescriptor(EventDescriptor& eventDescriptor);
    internal bool TemplateEmptyBeginEndMessage(EventDescriptor& eventDescriptor, bool IsStart);
    internal bool TemplateGenericBeginEndMessage(EventDescriptor& eventDescriptor, bool IsStart, string EventContext);
    internal bool TemplateLoggingMessage(EventDescriptor& eventDescriptor, UInt32 traceId, string message);
    internal bool TemplatePopulatorMessage(EventDescriptor& eventDescriptor, bool IsStart, string PopulatorName, int numberOfElements);
}
internal enum Microsoft.Data.Tools.Schema.Common.Diagnostics.PerformanceEventIds : Enum {
    public int value__;
    public static PerformanceEventIds SchemaCompare;
    public static PerformanceEventIds SqlEditorExecute;
    public static PerformanceEventIds ProjectLoad;
    public static PerformanceEventIds ProjectOpen;
    public static PerformanceEventIds ProjectWizardImportSchemaFinish;
    public static PerformanceEventIds ProjectBuild;
    public static PerformanceEventIds ProjectDeploy;
    public static PerformanceEventIds DeploymentExecute;
    public static PerformanceEventIds DisplayAdapterSchemaObjectChangeDone;
    public static PerformanceEventIds SchemaViewNodePopulationComplete;
    public static PerformanceEventIds ConnectionStringPersistedInRegistry;
    public static PerformanceEventIds DataSchemaModelRecycle;
    public static PerformanceEventIds ModelStoreQueryExecutionTimes;
    public static PerformanceEventIds ModelStoreFileSizeOnDispose;
    public static PerformanceEventIds ReverseEngineer;
    public static PerformanceEventIds ReverseEngineerPopulateAll;
    public static PerformanceEventIds ReverseEngineerPopulateSingle;
    public static PerformanceEventIds ReverseEngineerPopulateChildren;
    public static PerformanceEventIds ReverseEngineerExecuteReader;
    public static PerformanceEventIds ReverseEngineerElementsPopulated;
    public static PerformanceEventIds ImportSchema;
    public static PerformanceEventIds ImportSchemaFinish;
    public static PerformanceEventIds ImportSchemaGenerateAllScripts;
    public static PerformanceEventIds ImportSchemaGenerateSingleScript;
    public static PerformanceEventIds ImportSchemaAddAllScriptsToProject;
    public static PerformanceEventIds ImportSchemaAddSingleScriptToProject;
    public static PerformanceEventIds ImportSchemaGenerateProjectMapForType;
    public static PerformanceEventIds ImportSchemaGenerateProjectMapForElement;
    public static PerformanceEventIds ImportSchemaAddScriptsToProjectForType;
    public static PerformanceEventIds ImportScript;
    public static PerformanceEventIds ModelProcessingTasks;
    public static PerformanceEventIds ResolveAll;
    public static PerformanceEventIds ResolveBatch;
    public static PerformanceEventIds SingleTaskProcessAll;
    public static PerformanceEventIds SingleTaskProcessBatch;
    public static PerformanceEventIds ModelBuilder;
    public static PerformanceEventIds ParseAndInterpret;
    public static PerformanceEventIds Parse;
    public static PerformanceEventIds Interpret;
    public static PerformanceEventIds AnalyzeIdentifiedElement;
    public static PerformanceEventIds AnalyzeIdentifiedRelationship;
    public static PerformanceEventIds AnalyzeIdentifiedSupportingStatement;
    public static PerformanceEventIds AnalyzeIdentifiedAmbiguousRelationship;
    public static PerformanceEventIds SemanticVerification;
    public static PerformanceEventIds DataSchemaModelSerialization;
    public static PerformanceEventIds SerializationWriteStore;
    public static PerformanceEventIds SerializationWriteElement;
    public static PerformanceEventIds SerializationWriteProperties;
    public static PerformanceEventIds SerializationWriteRelationship;
    public static PerformanceEventIds SerializationWriteAnnotations;
    public static PerformanceEventIds SerializationWriteStoreAnnotations;
    public static PerformanceEventIds SerializationWriteRelationshipEntryPeer;
    public static PerformanceEventIds SerializationWriteRelationshipEntryComposing;
    public static PerformanceEventIds SerializationGetDisambiguatorMap;
    public static PerformanceEventIds SerializationGetRootElements;
    public static PerformanceEventIds SerializationGetExternalSourceExternalName;
    public static PerformanceEventIds DataSchemaModelDeserialization;
    public static PerformanceEventIds ModelCompareStore;
    public static PerformanceEventIds ModelCompareElementInit;
    public static PerformanceEventIds ModelCompareElement;
}
internal enum Microsoft.Data.Tools.Schema.Common.Diagnostics.WindowsEventTracingLevel : Enum {
    public byte value__;
    public static WindowsEventTracingLevel Always;
    public static WindowsEventTracingLevel Critical;
    public static WindowsEventTracingLevel Error;
    public static WindowsEventTracingLevel Warning;
    public static WindowsEventTracingLevel Informational;
    public static WindowsEventTracingLevel Verbose;
}
[ExtensionAttribute]
internal static class Microsoft.Data.Tools.Schema.Common.DotNetFrameworkExtensionMethods : object {
    [ExtensionAttribute]
public static bool StartsWith(string str, char value);
    [ExtensionAttribute]
public static bool EndsWith(string str, char value);
    [ExtensionAttribute]
public static bool Contains(string str, char value);
    [ExtensionAttribute]
public static bool Contains(string str, string value, StringComparison comparisonType);
    [ExtensionAttribute]
public static String[] Split(string str, char value, StringSplitOptions options);
    [ExtensionAttribute]
public static bool TryAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue value);
}
internal class Microsoft.Data.Tools.Schema.Common.EnvironmentSettings : object {
    private static EnvironmentSettings _instance;
    private static string ConnectionPoolEnvVar;
    private static string SetAEAmbientSettingsEnvVar;
    public static string TelemetryOptoutEnvVar;
    public static string DotNetCLITelemetryOptoutEnvVar;
    public static EnvironmentSettings Instance { get; }
    public static bool ConnectionPoolingEnabled { get; }
    public static bool SetAEAmbientSettings { get; }
    public static bool TelemetryOptout { get; }
    public static bool DotNetCLiTelemetryOptout { get; }
    private static EnvironmentSettings();
    public static EnvironmentSettings get_Instance();
    public static bool get_ConnectionPoolingEnabled();
    public static bool get_SetAEAmbientSettings();
    public static bool get_TelemetryOptout();
    public static bool get_DotNetCLiTelemetryOptout();
    private static bool GetEnvironmentVariableValueAsBoolean(string envVariableName, bool defaultValue);
}
internal static class Microsoft.Data.Tools.Schema.Common.EventUtils : object {
    [DebuggerStepThroughAttribute]
public static void Raise(object sender, EventHandler`1<T> eventObject, T e);
}
internal class Microsoft.Data.Tools.Schema.Common.Exceptions.DalConnectionLostException : DalException {
    protected DalConnectionLostException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Data.Tools.Schema.Common.Exceptions.DalDeadLockException : DalException {
    protected DalDeadLockException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.Data.Tools.Schema.Common.Exceptions.DalException : SqlStudioException {
    protected DalException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Data.Tools.Schema.Common.Exceptions.DalPermissionDeniedException : DalException {
    protected DalPermissionDeniedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Data.Tools.Schema.Common.Exceptions.DalRaiseErrorException : DalException {
    protected DalRaiseErrorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Data.Tools.Schema.Common.Exceptions.DataSchemaException : Exception {
    public DataSchemaException(string message);
    public DataSchemaException(string message, Exception innerException);
    protected DataSchemaException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Data.Tools.Schema.Common.Exceptions.ExceptionUtils : object {
    public static bool IsIrrecoverableException(Exception e);
    internal static bool IsCriticalException(Exception ex);
    internal static void ValidateNullParameter(T parameter, string parameterName, TraceId traceId);
    internal static void ValidateNullOrEmptyParameter(string parameter, string parameterName, TraceId traceId);
    internal static void ValidateParameterLength(string parameter, string parameterName, int maxLength, TraceId traceId);
    internal static string FormatSqlErrorNumbers(SqlException sqlException);
    internal static List`1<T> ExtractExceptions(Exception exception);
    public static bool ConnectionHasEncryptionSettings(SqlConnectionEncryptOption encryptOption, bool trustServerCertificate);
    public static bool IsEncryptError(SqlException ex);
}
internal class Microsoft.Data.Tools.Schema.Common.Exceptions.InvalidConnectionStringException : DataSchemaException {
    public InvalidConnectionStringException(string message);
    public InvalidConnectionStringException(Exception innerException);
    public InvalidConnectionStringException(string message, Exception innerException);
    protected InvalidConnectionStringException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.Data.Tools.Schema.Common.Exceptions.SqlStudioException : Exception {
    private static int E_FAIL;
    [ThreadStaticAttribute]
private static string _message;
    [ThreadStaticAttribute]
private static Exception _inner;
    protected SqlStudioException(SerializationInfo info, StreamingContext context);
    protected SqlStudioException(string message);
    protected SqlStudioException(string message, Exception innerException);
    private static SqlStudioException();
    public static ArgumentException CreateArgumentException();
    public static ArgumentException CreateArgumentException(string message);
    public static ArgumentException CreateArgumentException(string message, Exception innerException);
    public static ArgumentException CreateArgumentException(string message, string paramName);
    public static ArgumentException CreateArgumentException(string message, string paramName, Exception innerException);
    public static ArgumentNullException CreateArgumentNullException();
    public static ArgumentNullException CreateArgumentNullException(string paramName);
    public static ArgumentNullException CreateArgumentNullException(string message, Exception innerException);
    public static ArgumentNullException CreateArgumentNullException(string paramName, string message);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException();
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string message, Exception innerException);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, string message);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static T Create();
    public static T Create(string message);
    public static T Create(string message, Exception inner);
    public static T Create(string templateString, Object[] args);
    public static T Create(string templateString, object arg1);
    public static T Create(string templateString, Exception inner, Object[] args);
    internal static void TraceException(Exception ex);
    public static void AddData(Exception ex, object key, object value);
    public static InvalidOperationException CreateInvalidOperationException(string message);
    public static InvalidOperationException CreateInvalidOperationException(string message, Exception innerException);
    public static ObjectDisposedException CreateObjectDisposedException(string objectName);
    public static ObjectDisposedException CreateObjectDisposedException(string message, Exception innerException);
    public static ObjectDisposedException CreateObjectDisposedException(string objectName, string message);
    public static OperationCanceledException CreateOperationCanceledException();
    public static OperationCanceledException CreateOperationCanceledException(string message);
    public static OperationCanceledException CreateOperationCanceledException(string message, Exception innerException);
}
internal class Microsoft.Data.Tools.Schema.Common.Exceptions.UnexpectedException : SqlStudioException {
    private static int E_UNEXPECTED;
    private UnexpectedException(SerializationInfo info, StreamingContext context);
    private static UnexpectedException();
}
internal class Microsoft.Data.Tools.Schema.Common.FileExtensions : object {
    public static string DeprecatedDbpProjectExtension;
    public static string DeprecatedDbprojProjectExtension;
    public static string VbProjExtension;
    public static string CsProjExtension;
    public static string BuildFileExtension;
    public static string ProjectExtension;
    public static string SerializedProjectExtension;
    public static string BackupFileExtension;
    public static string XmlFileExtension;
    public static string SchemaCompareEditorExtension;
    public static string SqlExtension;
    public static string MdfFileExtension;
    public static string SqlFileGroupFileExtension;
    public static string LogFileFileExtension;
    public static string RefactorLogExtension;
    public static string PredeploymentExtension;
    public static string TableDataExportScriptExtension;
    public static string PostdeploymentExtension;
    public static string PublishExtension;
    public static string GeneratedSqlFileExtention;
    public static string PublishPlanExtension;
    public static string PublishPlanAzureExtension;
    public static string TextExtension;
    public static string AllExtension;
    public static string UserExtension;
    public static string AssemblySupportingStatementExtension;
    public static string XMLSchemaCollectionSupportingStatementExtension;
    public static string DacFileExtension;
    public static string VsTemplateExt;
    public static string VszExt;
    public static string XsdExt;
    public static string CsExt;
    public static string VbExt;
    public static string TempFileExtension;
    public static string LogFileExtension;
    public static string AssemblyFileExtension;
    public static string AssemblySymbolFile;
    public static string StrongNameKeyFileExtension;
    public static string PersonalInformationExchangeFileExtension;
    public static string BacpacExtension;
}
internal static class Microsoft.Data.Tools.Schema.Common.FileUtils : object {
    private static int _reservedForIndexLength;
    private static string _invalidFileNamePattern;
    private static string _surrogatePattern;
    private static string _invalidCharsPattern;
    private static int _3PartNameObjectNameIndex;
    private static int _4PartNameObjectNameIndex;
    private static int _4PartNameNumberOfSegments;
    private static Regex _invalidFileNameRegex;
    private static Regex _invalidCharsRegex;
    private static Regex _surrogateRegex;
    private static HashSet`1<char> _replacementCharactersNtfs;
    private static HashSet`1<char> _replacementCharactersMsBuild;
    private static HashSet`1<char> _replacementCharactersPathSeparator;
    internal static string DefaultIntermediateOutputPath;
    private static Regex InvalidFileCharsRegex { get; }
    private static FileUtils();
    private static Regex get_InvalidFileCharsRegex();
    public static void CreateUniqueFilename(string fileNamePrefix, string fileExtension, String& tempFileName);
    public static void CreateUniqueFilename(string fileNamePrefix, string fileExtension, string indexSeparator, bool alwaysUseSeparator, String& tempFileName);
    public static void AppendAllTextAndNormalizeLineEndings(string filePath, string text);
    public static void WriteAllTextAndNormalizeLineEndings(string filePath, string text);
    public static void BufferedCopy(BinaryReader br, FileInfo file, long length, int bufferSize);
    public static void BufferedCopy(BinaryReader br, BinaryWriter bw, long length, int bufferSize);
    public static void SetFileReadWrite(string fullFilePath);
    public static FileStream GetExclusiveFileStream(FileInfo fileInfo, FileAccess fileAccess);
    public static bool IsUnderDirectory(string parentDirectory, string childDirectory);
    public static string ReplaceBasePathWithAnother(string oldBasePath, string newBasePath, string pathToReplace);
    public static string MakeRelative(string fullPathParentDirectory, string fullPathChild);
    public static bool IsSamePath(string file1, string file2);
    public static bool PathsAreEqual(string fullPath1, string fullPath2);
    public static string ReplaceIllegalNtfsCharacters(string originalString, bool replaceDirectorySeparator, bool replaceInvalidMsBuildCharacters);
    public static string GetCurrentFolderPathAbsolute(string path, string folderText);
    public static bool IsFilePartInvalid(string filePart, bool ignoreSurrogates);
    public static void CopyDirectory(string sourceDir, string targetDir, bool overwriteExistingFiles);
    public static int CompareTwoPaths(string fullPath1, string fullPath2);
    public static bool TryCreateDirectory(string fullPath);
    public static void CreateDirectory(string fullPath);
    public static string EnsureNoBackslash(string fullPath);
    public static string EnsureBackslash(string path);
    public static bool ArraysAreEqual(Byte[] hash1, Byte[] hash2);
    public static bool TryGetFileSize(string fullFileName, Int64& fileSize);
    public static HashAlgorithm GetHashAlgorithm();
    public static bool TryCalculateHashValue(string fullFileName, Byte[]& hash);
    public static bool HasExtension(string fileName, string extension);
    public static IList`1<string> GetFilesAndDirectories(string startPath, bool recursive);
    public static string CreateCopyOfName(string newPath);
    public static string GetTwoPartExtension(string fileName);
    public static string CreateUniqueProjectName(string folder, string projectName, HashSet`1<string> projectsInSolution);
    public static string CreateUniqueTwoPartFilename(string newFileName);
    public static string CreateUniqueThreePartFilename(string newFileName);
    public static string VerifyAgainstMaxPath(string fullFileName);
    public static string CanonicalizeFileName(string fullPathFileName);
    public static bool TrySetFileReadWrite(string fullFileName);
    public static void EnsureDirectoryExists(string fullPath);
    public static string CanonicalizeDirectoryName(string fullPathDirName);
    public static void SpinDelete(string path);
    public static bool SafeFileExists(string path);
    public static bool SafeDelete(string fileName);
    public static bool SafeIsPathRooted(string path);
    public static string SafeGetFullPath(string path);
    public static FileInfo SafeGetFile(string path);
    public static bool SafeDirectoryExists(string path);
    public static bool SafeIsUnderDirectory(string parentDirectory, string childDirectory);
    private static void AppendOrWriteAllTextAndNormalizeLineEndings(string filePath, string text, bool doAppend);
    private static string CanonicalizeFileNameOrDirectoryImpl(string path, bool pathIsDir);
    internal static bool IsValidFileName(string fname);
    public static bool SafeAppendAllText(string path, string contents);
    public static bool SafeWriteAllText(string path, string contents);
    private static bool SafeWriteAllText(string path, string contents, bool doAppend);
    internal static DirectoryInfo GetDirectoryWithCorrectCase(DirectoryInfo info);
    public static string EnsureIsDelimited(string name);
    public static string EnsureIsDelimited(string name, bool doReplacementOfInvalidChars, Boolean& foundInvalidCharacters);
    public static bool IsValidCharacter(char character);
    internal static bool IsFileNameAllGivenCharacter(char character, string fileName);
    public static string GetCanonicalizedForm(string path);
    public static string GetExtension(string path);
    private static bool IsDirectorySeparatorChar(char c);
    public static bool IsAbsolutePhysicalPath(string path);
    public static string MakeFullPath(string relativePath, string fileName);
    public static Version FindSdkVersion(string filePath, string sdkName);
}
internal static class Microsoft.Data.Tools.Schema.Common.GuidList : object {
    internal static string guidDatabaseProjectNodeFactoryString;
    internal static string guidDatabaseProjectNodeFactoryStringWithBrackets;
    internal static Guid guidDatabaseProjectNodeFactory;
    internal static string guidSqlEditorPackageString;
    internal static string guidSqlEditorCommandSetString;
    internal static string guidToolWindowPersistanceString;
    internal static string guidSqlEditorEditorFactoryString;
    internal static string guidSqlEditorEditorFactoryWithEncodingString;
    internal static string guidSqlResultsEditorFactoryString;
    internal static string guidSqlMessageEditorFactoryString;
    internal static string guidSqlLanguageServiceString;
    internal static string guidSqlMessageTabLogicalViewString;
    internal static string guidSqlTextResultsTabLogicalViewString;
    internal static string guidSqlStatisticsEditorFactoryString;
    internal static string guidSqlShowPlanFactoryString;
    internal static string guidSqlStatisticsTabLogicalViewString;
    internal static string guidSqlShowPlanTabLogicalViewString;
    internal static string guidSqlDebuggerPackageString;
    internal static Guid guidSqlEditorPackage;
    internal static Guid guidSqlEditorCommandSet;
    internal static Guid guidSqlEditorFactory;
    internal static Guid guidSqlEditorFactoryWithEncoding;
    internal static Guid guidSqlResultsEditorFactory;
    internal static Guid guidSqlMessageEditorFactory;
    internal static Guid guidSqlMessageTabLogicalView;
    internal static Guid guidSqlTextResultsTabLogicalView;
    internal static Guid guidSqlShowPlanEditorFactory;
    internal static Guid guidSqlStatisticsEditorFactory;
    internal static Guid guidSqlLanguageService;
    internal static Guid guidSqlStatisticsTabLogicalView;
    internal static Guid guidSqlShowPlanTabLogicalView;
    internal static Guid guidSqlDebuggerPackage;
    internal static Guid pkgGuidTsData;
    internal static string guidSqlResultsGeneralPageString;
    internal static string guidSqlResultsToGridPageString;
    internal static string guidSqlResultsToTextPageString;
    internal static string guidSqlExecutionGeneralPageString;
    internal static string guidSqlExecutionAdvancedPageString;
    internal static string guidSqlExecutionAnsiPageString;
    internal static string guidSqlEditorGeneralSettingsDialogPageString;
    internal static string guidSqlEditorTabAndStatusBarDialogPageString;
    internal static Guid guidSqlResultsGeneralPage;
    internal static Guid guidSqlResultsToGridPage;
    internal static Guid guidSqlResultsToTextPage;
    internal static Guid guidSqlExecutionGeneralPage;
    internal static Guid guidSqlExecutionAdvancedPage;
    internal static Guid guidSqlExecutionAnsiPage;
    internal static Guid guidSqlEditorGeneralSettingsDialogPage;
    internal static Guid guidSqlEditorTabAndStatusBarDialogPage;
    internal static string guidMiscFilesProjectString;
    internal static string guidSqlStudioProjectString;
    internal static string pkgGuidTeamSystemDataString;
    internal static string pkgGuidTeamSystemDataStringWithBrackets;
    internal static Guid pkgGuidTeamSystemData;
    internal static Guid guidMiscFilesProject;
    internal static Guid guidSqlStudioProject;
    internal static Guid guidTsDataProject;
    internal static string guidEditorMarkerServiceString;
    internal static Guid guidEditorMarkerService;
    internal static string guidMessageTabErrorMarkerString;
    internal static Guid guidMessageTabErrorMarker;
    internal static string pkgGuidTeamSystemDataProfileString;
    internal static Guid pkgGuidTeamSystemDataProfile;
    internal static string cmdSetGuidTeamSystemDataProfileString;
    internal static Guid cmdSetGuidTeamSystemDataProfile;
    internal static string cmdSetGuidTeamSystemDataString;
    internal static Guid cmdSetGuidTeamSystemData;
    internal static string guidSqlObjectExplorerPkgString;
    internal static string guidSqlObjectExplorerCmdSetString;
    internal static Guid guidSqlObjectExplorerCmdSet;
    internal static string pkgGuidSqlStudioIntellisenseEngineString;
    internal static string guidCSharpIntellisenseProviderString;
    internal static string guidCSharpIntellisenseProviderStringSp1;
    internal static string guidVisualBasicIntellisenseProviderString;
    internal static string guidVisualBasicLanguageServiceString;
    internal static string guidCSharpLanguageServiceString;
    internal static Guid guidCSharpIntellisenseProvider;
    internal static Guid guidCSharpIntellisenseProviderSp1;
    internal static Guid guidVisualBasicIntellisenseProvider;
    internal static string pkgGuidDataViewString;
    internal static Guid pkgGuidDataView;
    internal static string guidSqlDebuggerCommandSetString;
    internal static Guid guidSqlDebuggerCommandSet;
    internal static string guidSchemaCompareEditorFactoryString;
    internal static Guid guidSchemaCompareEditorFactory;
    internal static string guidQueryResultsEditorFactoryString;
    internal static Guid guidQueryResultsEditorFactory;
    internal static string guidDatabaseProjectNode;
    internal static string guidFontAndColorProvider;
    internal static string guidFontAndColorCategoryResultsPane;
    internal static Guid guidFontAndColorCategoryResults;
    internal static string dbProEventMonitorToolWindow;
    internal static string guidDataToolsOperationsToolWindow;
    internal static string IVsMicrosoftInstalledProduct;
    internal static string IDatabaseProjectNodeRetriever;
    internal static string codeMarkerDifferent;
    internal static string codeMarkerLeftStringPresent;
    internal static string codeMarkerRightStringPresent;
    internal static string projectPropertyPageBuildEventsComClass;
    internal static string projectPropertyPageDebugComClass;
    internal static string templateWizard;
    internal static string BuildPropertyPageString;
    internal static string PropertyPageStaticCodeAnalysisComClassString;
    internal static string ScriptGeneratorCommonOptionPageString;
    internal static string ScriptGeneratorClauseOptionPageString;
    internal static string ProjectSystemGeneralOptionsPageString;
    internal static string ProjectSystemOnlineEditingOptionsPageString;
    internal static string DatabaseProjectProjectNodeProperties;
    internal static string ComparisonMarkerServiceString;
    internal static string ModelBusServiceString;
    internal static string SSDTDebugProjectServiceString;
    internal static Guid guidSSDTDebugProjectService;
    internal static string SSDTDebugProjectService2String;
    internal static Guid guidSSDTDebugProjectService2;
    internal static string guidVSDebugCommandString;
    internal static Guid guidVSDebugCommand;
    internal static string SqlClrProjectGuidString;
    internal static string RefactoringPreviewChangesEngineString;
    internal static string RefactoringPreviewChangesListString;
    internal static string XmlLanguageServiceIDString;
    internal static Guid guidXmlLauguageService;
    internal static Guid guidVsTextLines;
    internal static string LOGVIEWID_Designer;
    internal static string LOGVIEWID_TextView;
    internal static string LOGVIEWID_Code;
    internal static string CLSID_MiscellaneousFilesProject;
    internal static Guid managedSqlProvider;
    internal static Guid guidVsDataTechnology_AdoNotNet;
    internal static Guid guidSqlServerDataSource;
    internal static Guid GUID_BuildOutputWindowPane;
    internal static string outputToolWindow;
    internal static Guid guidFontAndColorCategoryTextEditor;
    internal static Guid guidMetricsMenuGroup;
    internal static string propertyPageProjectSqlClrComClass;
    internal static string propertyPageProjectSettingsComClass;
    internal static string propertyPageBuildComClass;
    internal static string propertyPageDatabasePropertiesComClass;
    internal static string propertyPageProjectReferencePathsComClass;
    internal static string PropertyPageBuildSettingsHostComClass;
    internal static string propertyPageSqlCmdVariablesComClass;
    internal static string SchemaCompareSql90OptionPageString;
    internal static string SchemaCompareSql100OptionPageString;
    internal static string SchemaCompareSql110OptionPageString;
    internal static string SchemaCompareSqlAzureOptionPageString;
    internal static Guid SccMenu;
    internal static Guid HatPackage;
    internal static Guid guidQueryEditorCmd;
    internal static string guidTableDesignerPackageString;
    internal static string guidTableDesignerSplitViewFactoryString;
    internal static Guid guidTableDesignerSplitViewFactory;
    internal static string guidSqlEditorSelectorFactoryString;
    internal static Guid guidSqlEditorSelectorFactory;
    internal static Guid guidDebuggerLaunching;
    internal static Guid guidPublishing;
    internal static Guid guidPreviewCommitOff;
    internal static Guid DBNotifyDebugEvents;
    internal static Guid guidSqlServerObjectExplorerService;
    internal static string guidTsDataUpgradeFactoryString;
    internal static Guid guidTsDataUpgradeFactory;
    internal static Guid guidVdtFlavorProjectType;
    internal static Guid guidStandardCommandSet97;
    internal static Guid VsSolutionExplorer;
    internal static Guid DesignerCommandId;
    internal static Guid OleComponentUiManager;
    internal static Guid VsTaskCategoryDataDesigner;
    internal static Guid PropertyBrowserToolWindow;
    internal static Guid IVsFontAndColorEvents;
    internal static Guid UiHostLocale;
    internal static Guid VsTextManager;
    internal static Guid TrackSelection;
    internal static Guid VsTrackSelectionEx;
    internal static Guid VsRegisterPriorityCommandTarget;
    internal static Guid VsShellDebugger;
    internal static Guid SqlDebugEngine;
    internal static Guid TextEditorFactory;
    internal static Guid ItemTypePhysicalFile;
    internal static Guid ItemTypePhysicalFolder;
    internal static Guid ItemTypeVirtualFolder;
    internal static Guid ItemTypeSubProject;
    internal static Guid ItemMiscProject;
    internal static Guid SqlScriptProject;
    internal static Guid VsBufferIsDiskFile;
    internal static Guid VsBufferEncoding;
    internal static Guid VsBufferEncodingVsTff;
    internal static Guid VsBufferEncodingPromptOnLoad;
    internal static Guid VsBufferDetectCharSet;
    internal static Guid VsBufferDetectLangId;
    internal static Guid PropertyBrowserId;
    internal static Guid UserReadOnlyErrorString;
    internal static Guid BufferStorage;
    internal static Guid PropertyOleSql;
    internal static Guid PropertySqlVersion;
    internal static Guid PropertyBatchSeparator;
    internal static Guid IntelliSenseEnabled;
    internal static Guid DatabaseChanged;
    internal static Guid PropertyDisableXmlEditorPropertyWindowIntegration;
    internal static Guid PropertyOverrideeXmlEditorSaveAsFileFilter;
    internal static Guid EditPropCategoryViewMasterSettings;
    internal static Guid LangDefault;
    internal static Guid FontAndColorCategoryStandardTextEditor;
    internal static Guid FontAndColorService;
    internal static Guid FontAndColorCategoryTextResults;
    internal static Guid FontAndColorCategoryGridResults;
    internal static Guid FontAndColorCategoryShowplan;
    internal static Guid MarkerService;
    internal static Guid MarkerError;
    internal static Guid MarkerTemplateParam;
    internal static Guid ScriptFactory;
    private static GuidList();
}
internal static class Microsoft.Data.Tools.Schema.Common.HashLog : object {
    private static int MinHashBytes;
    private static string NullStringValue;
    internal static string Format(IFormatProvider formatProvider, string stringFormat, Object[] args);
    internal static string FormatHashed(IFormatProvider formatProvider, string stringFormat, Object[] args);
    internal static string Join(string separator, Object[] args);
    internal static string Join(string separator, IEnumerable`1<object> argsList);
    internal static string FormatObjectName(string objectName);
    internal static string FormatFileName(string fileName);
    private static string FormatObject(object original);
    private static string HashLogObject(LogObject logObject);
    private static string GenerateHashString(string original);
    internal static Byte[] GenerateSalt();
}
internal interface Microsoft.Data.Tools.Schema.Common.IAmbientDataDirectAccess {
    public Dictionary`2<string, AmbientValue> Data { get; }
    public abstract virtual Dictionary`2<string, AmbientValue> get_Data();
}
[GuidAttribute("3EE91C82-6BB6-4E88-A723-839A8F542CB7")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("This class has been moved to the SSDT assemblies.")]
internal interface Microsoft.Data.Tools.Schema.Common.IDBNotifyDebugEvents {
    public abstract virtual int DebugLaunch(IntPtr pUnk);
    public abstract virtual int DebugTerminate();
    public abstract virtual int CanDebug(Int32& canDebug);
}
[GuidAttribute("008BBF6E-A99D-4ECF-9308-B98E9A8F9F59")]
[ObsoleteAttribute("This class has been moved to the SSDT assemblies.")]
internal interface Microsoft.Data.Tools.Schema.Common.IHostShutdownService {
    public bool IsZombie { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_HostShuttingDown(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HostShuttingDown(EventHandler`1<EventArgs> value);
    public abstract virtual bool get_IsZombie();
    public abstract virtual int RequestWait();
    public abstract virtual void WaitNoLonger(int cookie);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Tools.Schema.Common.ImageResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static Bitmap AggregateFunction { get; }
    internal static Bitmap ApplicationRole { get; }
    internal static Bitmap Assembly { get; }
    internal static Bitmap AsymmetricKey { get; }
    internal static Bitmap AzureServer { get; }
    internal static Bitmap BrokerPriority { get; }
    internal static Bitmap BuiltInElementOverlay { get; }
    internal static Bitmap BuiltInServerRole { get; }
    internal static Bitmap BuiltInType { get; }
    internal static Bitmap Certificate { get; }
    internal static Bitmap CheckConstraint { get; }
    internal static Bitmap ClusteredIndex { get; }
    internal static Bitmap Column { get; }
    internal static Bitmap ColumnStoreIndex { get; }
    internal static Bitmap ComputedColumn { get; }
    internal static Bitmap Contract { get; }
    internal static Bitmap Create { get; }
    internal static Bitmap Credential { get; }
    internal static Bitmap CryptographicProvider { get; }
    internal static Bitmap CustomErrorMessage { get; }
    internal static Bitmap DacApplications { get; }
    internal static Bitmap Database { get; }
    internal static Bitmap DatabaseAuditSpecification { get; }
    internal static Bitmap DatabaseAuditSpecificationOff { get; }
    internal static Bitmap DatabaseEmergencyMode { get; }
    internal static Bitmap DatabaseEncryptionKey { get; }
    internal static Bitmap DatabaseOptions { get; }
    internal static Bitmap DatabaseProject { get; }
    internal static Bitmap DatabaseRestoring { get; }
    internal static Bitmap DatabaseRole { get; }
    internal static Bitmap Databases { get; }
    internal static Bitmap DatabaseSchema { get; }
    internal static Bitmap DatabaseSuspect { get; }
    internal static Bitmap Default { get; }
    internal static Bitmap DefaultConstraint { get; }
    internal static Bitmap DefaultIcon { get; }
    internal static Bitmap DisabledLoginOverlay { get; }
    internal static Bitmap Endpoint_success { get; }
    internal static Bitmap ErrorOverlay { get; }
    internal static Bitmap Event { get; }
    internal static Bitmap EventNotification { get; }
    internal static Bitmap EventSession { get; }
    internal static Bitmap ExtendedProperty { get; }
    internal static Bitmap ExternalElementOverlay { get; }
    internal static Bitmap FileGroup { get; }
    internal static Bitmap FileTable { get; }
    internal static Bitmap Folder { get; }
    internal static Bitmap FolderOpen { get; }
    internal static Bitmap ForeignKey { get; }
    internal static Bitmap FullTextCatalog { get; }
    internal static Bitmap FullTextCatalogPopulation { get; }
    internal static Bitmap FullTextCatPopulation { get; }
    internal static Bitmap FullTextIndex { get; }
    internal static Bitmap FullTextStoplist { get; }
    internal static Bitmap Index { get; }
    internal static Bitmap LinkedServer { get; }
    internal static Bitmap LogFile { get; }
    internal static Bitmap LoginLinkedServer { get; }
    internal static Bitmap LoginSQLAuth { get; }
    internal static Bitmap LoginWindowsAuth { get; }
    internal static Bitmap MasterKey { get; }
    internal static Bitmap MessageType { get; }
    internal static Bitmap NewFullTextCatalog { get; }
    internal static Bitmap OfflineDatabase { get; }
    internal static Bitmap Options { get; }
    internal static Bitmap Parameter { get; }
    internal static Bitmap Parameter_Return { get; }
    internal static Bitmap PartitionFunction { get; }
    internal static Bitmap PartitionScheme { get; }
    internal static Bitmap PermissionIcon { get; }
    internal static Bitmap PrimaryKey { get; }
    internal static Bitmap Queue { get; }
    internal static Bitmap ReadOnlyDatabase { get; }
    internal static Bitmap Refresh { get; }
    internal static Bitmap RemoteService { get; }
    internal static Bitmap RemoteServiceBinding { get; }
    internal static Bitmap ResourcePool { get; }
    internal static Bitmap Role { get; }
    internal static Bitmap RoleMembership { get; }
    internal static Bitmap RouteService { get; }
    internal static Bitmap Rule { get; }
    internal static Bitmap ScalarFunction { get; }
    internal static Bitmap Schema { get; }
    internal static Bitmap SearchPropertyList { get; }
    internal static Bitmap SelectiveXmlIndex { get; }
    internal static Bitmap Sequence { get; }
    internal static Bitmap Server { get; }
    internal static Bitmap ServerAudit { get; }
    internal static Bitmap ServerAuditSpecification { get; }
    internal static Bitmap ServerNotKnown { get; }
    internal static Bitmap ServerOptions { get; }
    internal static Bitmap ServerPaused { get; }
    internal static Bitmap ServerRole { get; }
    internal static Bitmap ServerRoleMembership { get; }
    internal static Bitmap ServerStarted { get; }
    internal static Bitmap ServerStopped { get; }
    internal static Bitmap Service { get; }
    internal static Bitmap Signature { get; }
    internal static Bitmap SingleUserDatabase { get; }
    internal static Bitmap SpatialIndex { get; }
    internal static Bitmap SqlFile { get; }
    internal static Bitmap Statistics { get; }
    internal static Bitmap Stop { get; }
    internal static Bitmap StoredProcedure { get; }
    internal static Bitmap StoredProcedureCLR { get; }
    internal static Bitmap SymmetricKey { get; }
    internal static Bitmap Synonym { get; }
    internal static Bitmap SystemDataType { get; }
    internal static Bitmap Table { get; }
    internal static Bitmap TableFunction { get; }
    internal static Bitmap Trigger { get; }
    internal static Bitmap TriggerDisabled { get; }
    internal static Bitmap Type { get; }
    internal static Bitmap UniqueKey { get; }
    internal static Bitmap Update { get; }
    internal static Bitmap User { get; }
    internal static Bitmap UserDefinedDataType { get; }
    internal static Bitmap UserDefinedTableType { get; }
    internal static Bitmap UserDefinedType { get; }
    internal static Bitmap View { get; }
    internal static Bitmap WarningOverlay { get; }
    internal static Bitmap WorkloadGroup { get; }
    internal static Bitmap XmlIndex { get; }
    internal static Bitmap XMLSchema { get; }
    internal static Bitmap XMLSchemaCollection { get; }
    internal static Bitmap XMLSchemas { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static Bitmap get_AggregateFunction();
    internal static Bitmap get_ApplicationRole();
    internal static Bitmap get_Assembly();
    internal static Bitmap get_AsymmetricKey();
    internal static Bitmap get_AzureServer();
    internal static Bitmap get_BrokerPriority();
    internal static Bitmap get_BuiltInElementOverlay();
    internal static Bitmap get_BuiltInServerRole();
    internal static Bitmap get_BuiltInType();
    internal static Bitmap get_Certificate();
    internal static Bitmap get_CheckConstraint();
    internal static Bitmap get_ClusteredIndex();
    internal static Bitmap get_Column();
    internal static Bitmap get_ColumnStoreIndex();
    internal static Bitmap get_ComputedColumn();
    internal static Bitmap get_Contract();
    internal static Bitmap get_Create();
    internal static Bitmap get_Credential();
    internal static Bitmap get_CryptographicProvider();
    internal static Bitmap get_CustomErrorMessage();
    internal static Bitmap get_DacApplications();
    internal static Bitmap get_Database();
    internal static Bitmap get_DatabaseAuditSpecification();
    internal static Bitmap get_DatabaseAuditSpecificationOff();
    internal static Bitmap get_DatabaseEmergencyMode();
    internal static Bitmap get_DatabaseEncryptionKey();
    internal static Bitmap get_DatabaseOptions();
    internal static Bitmap get_DatabaseProject();
    internal static Bitmap get_DatabaseRestoring();
    internal static Bitmap get_DatabaseRole();
    internal static Bitmap get_Databases();
    internal static Bitmap get_DatabaseSchema();
    internal static Bitmap get_DatabaseSuspect();
    internal static Bitmap get_Default();
    internal static Bitmap get_DefaultConstraint();
    internal static Bitmap get_DefaultIcon();
    internal static Bitmap get_DisabledLoginOverlay();
    internal static Bitmap get_Endpoint_success();
    internal static Bitmap get_ErrorOverlay();
    internal static Bitmap get_Event();
    internal static Bitmap get_EventNotification();
    internal static Bitmap get_EventSession();
    internal static Bitmap get_ExtendedProperty();
    internal static Bitmap get_ExternalElementOverlay();
    internal static Bitmap get_FileGroup();
    internal static Bitmap get_FileTable();
    internal static Bitmap get_Folder();
    internal static Bitmap get_FolderOpen();
    internal static Bitmap get_ForeignKey();
    internal static Bitmap get_FullTextCatalog();
    internal static Bitmap get_FullTextCatalogPopulation();
    internal static Bitmap get_FullTextCatPopulation();
    internal static Bitmap get_FullTextIndex();
    internal static Bitmap get_FullTextStoplist();
    internal static Bitmap get_Index();
    internal static Bitmap get_LinkedServer();
    internal static Bitmap get_LogFile();
    internal static Bitmap get_LoginLinkedServer();
    internal static Bitmap get_LoginSQLAuth();
    internal static Bitmap get_LoginWindowsAuth();
    internal static Bitmap get_MasterKey();
    internal static Bitmap get_MessageType();
    internal static Bitmap get_NewFullTextCatalog();
    internal static Bitmap get_OfflineDatabase();
    internal static Bitmap get_Options();
    internal static Bitmap get_Parameter();
    internal static Bitmap get_Parameter_Return();
    internal static Bitmap get_PartitionFunction();
    internal static Bitmap get_PartitionScheme();
    internal static Bitmap get_PermissionIcon();
    internal static Bitmap get_PrimaryKey();
    internal static Bitmap get_Queue();
    internal static Bitmap get_ReadOnlyDatabase();
    internal static Bitmap get_Refresh();
    internal static Bitmap get_RemoteService();
    internal static Bitmap get_RemoteServiceBinding();
    internal static Bitmap get_ResourcePool();
    internal static Bitmap get_Role();
    internal static Bitmap get_RoleMembership();
    internal static Bitmap get_RouteService();
    internal static Bitmap get_Rule();
    internal static Bitmap get_ScalarFunction();
    internal static Bitmap get_Schema();
    internal static Bitmap get_SearchPropertyList();
    internal static Bitmap get_SelectiveXmlIndex();
    internal static Bitmap get_Sequence();
    internal static Bitmap get_Server();
    internal static Bitmap get_ServerAudit();
    internal static Bitmap get_ServerAuditSpecification();
    internal static Bitmap get_ServerNotKnown();
    internal static Bitmap get_ServerOptions();
    internal static Bitmap get_ServerPaused();
    internal static Bitmap get_ServerRole();
    internal static Bitmap get_ServerRoleMembership();
    internal static Bitmap get_ServerStarted();
    internal static Bitmap get_ServerStopped();
    internal static Bitmap get_Service();
    internal static Bitmap get_Signature();
    internal static Bitmap get_SingleUserDatabase();
    internal static Bitmap get_SpatialIndex();
    internal static Bitmap get_SqlFile();
    internal static Bitmap get_Statistics();
    internal static Bitmap get_Stop();
    internal static Bitmap get_StoredProcedure();
    internal static Bitmap get_StoredProcedureCLR();
    internal static Bitmap get_SymmetricKey();
    internal static Bitmap get_Synonym();
    internal static Bitmap get_SystemDataType();
    internal static Bitmap get_Table();
    internal static Bitmap get_TableFunction();
    internal static Bitmap get_Trigger();
    internal static Bitmap get_TriggerDisabled();
    internal static Bitmap get_Type();
    internal static Bitmap get_UniqueKey();
    internal static Bitmap get_Update();
    internal static Bitmap get_User();
    internal static Bitmap get_UserDefinedDataType();
    internal static Bitmap get_UserDefinedTableType();
    internal static Bitmap get_UserDefinedType();
    internal static Bitmap get_View();
    internal static Bitmap get_WarningOverlay();
    internal static Bitmap get_WorkloadGroup();
    internal static Bitmap get_XmlIndex();
    internal static Bitmap get_XMLSchema();
    internal static Bitmap get_XMLSchemaCollection();
    internal static Bitmap get_XMLSchemas();
}
internal static class Microsoft.Data.Tools.Schema.Common.ImageUtilities : object {
    public static Bitmap CreateExternalElementBitmap(Bitmap inputBitmap, Color transparentColor);
    public static Bitmap CreateBuiltInElementBitmap(Bitmap inputBitmap, Color transparentColor);
    public static Bitmap CreateWarningBitmap(Bitmap inputBitmap, Color transparentColor);
    public static Bitmap CreateErrorBitmap(Bitmap inputBitmap, Color transparentColor);
    public static Bitmap CreateDisabledLoginOverlay(Bitmap inputBitmap, Color transparentColor);
    private static Bitmap CreateBitmapWithOverlay(Bitmap inputBitmap, Bitmap overlayBitmap, Color transparentColor, OverlayLocation location);
}
internal class Microsoft.Data.Tools.Schema.Common.IntegerRange : ValueType {
    private int _begin;
    private int _end;
    public int Begin { get; }
    public int End { get; }
    public IntegerRange(int begin, int end);
    public int get_Begin();
    public int get_End();
}
internal class Microsoft.Data.Tools.Schema.Common.IntegerRangeOverlapComparer : object {
    public sealed virtual int Compare(IntegerRange x, IntegerRange y);
}
internal interface Microsoft.Data.Tools.Schema.Common.IStackLogSettingsContext {
    public LogSettingsData Settings { get; }
    public abstract virtual LogSettingsData get_Settings();
}
[GuidAttribute("2ABE32F5-3C1C-4628-8B72-546F8A50D311")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("This class has been moved to the SSDT assemblies.")]
internal interface Microsoft.Data.Tools.Schema.Common.IVsSqlDebuggingSupport {
    public abstract virtual int GetDebuggableServers(String& strDebuggableServers);
    public abstract virtual int GetDebugStatus(string strServer, UInt32& debugStatus);
    public abstract virtual int SetDebugStatus(IntPtr unkConnection, UInt32 dwDebugStatus);
}
[GuidAttribute("66a2aba6-2ff6-4e01-a623-bb7934e4266d")]
[InterfaceTypeAttribute("1")]
[ObsoleteAttribute("This class has been moved to the SSDT assemblies.")]
internal interface Microsoft.Data.Tools.Schema.Common.IVsSqlDebuggingSupportService {
}
internal static class Microsoft.Data.Tools.Schema.Common.LanguageNameLcidConversionUtils : object {
    public static string NoLanguageSpecifier;
    private static Dictionary`2<string, int> _languageAliasToLcidMap;
    private static Dictionary`2<string, string> _languageNameToLanguageAliasMap;
    private static Dictionary`2<int, string> _languageLcidToAliasMap;
    private static Dictionary`2<string, string> _languageAliasToLanguageNameMap;
    private static LanguageNameLcidConversionUtils();
    public static bool TryGetLcidFromLanguageAlias(string languageAlias, Int32& languageId);
    public static bool TryGetLcidFromLanguageName(string languageName, Int32& languageId);
    public static bool TryGetLanguageAliasFromLcid(int languageId, String& languageAlias);
    public static bool TryGetLanguageNameFromLcid(int languageId, String& languageName);
    public static String[] AllLanguageNames();
    public static bool IsValidLcid(int languageId);
    public static bool TryGetLanguageAlias(string languageTerm, String& alias);
    public static string GetNormalizedLanguage(string language);
}
internal static class Microsoft.Data.Tools.Schema.Common.LanguageServiceId : object {
    internal static Guid Default;
    internal static Guid Sql;
    internal static Guid Xml;
    private static LanguageServiceId();
}
internal static class Microsoft.Data.Tools.Schema.Common.LoginUtils : object {
    public static bool IsValidAzureV12UserSid(string hex);
}
internal class Microsoft.Data.Tools.Schema.Common.LogSettings : object {
    private static string LogicalContextName;
    internal static string HashObjectNamesInLogsIndex;
    internal static string HashLogSaltIndex;
    internal static string HashedObjectsCacheIndex;
    internal static string HashAlgorithmIndex;
    internal static string LogObjectHashedHandlerIndex;
    private static LogSettingsData _defaultSettings;
    public static bool HashObjectNamesInLogs { get; }
    public static Byte[] HashLogSalt { get; }
    public static ConcurrentDictionary`2<string, string> HashedObjectsCache { get; }
    public static HashAlgorithm HashAlgorithm { get; }
    public static Action`2<string, string> LogObjectHashedHandler { get; }
    private static LogSettings();
    public static bool get_HashObjectNamesInLogs();
    public static Byte[] get_HashLogSalt();
    public static ConcurrentDictionary`2<string, string> get_HashedObjectsCache();
    public static HashAlgorithm get_HashAlgorithm();
    public static Action`2<string, string> get_LogObjectHashedHandler();
    public static IStackLogSettingsContext CreateSettingsContext();
    private static T1 GetValue(string configIndex);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.Tools.Schema.Common.ReadOnlyDictionary`2 : object {
    private IDictionary`2<TKey, TValue> _dictionary;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ReadOnlyDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Data.Tools.Schema.Common.RegistryManager : object {
    private static string DefaultRegistryRoot;
    private static string DefaultRegistryRootWow64;
    private static string RegistryRootRdbgWiz;
    private static string RegistryRootEnterpriseTools;
    private static string RegistryRootEnterpriseToolsWow64;
    private static string SQLDBPath;
    private static RegistryManager _instance;
    private RegistryKey _ssdtRootCurrentUser;
    private RegistryKey _ssdtRootLocalMachine;
    private RegistryKey _dataProjectRootCurrentUser;
    private RegistryKey _sqlDbDatabaseCurrentUser;
    private RegistryKey _sqlSchemaCompareSettings;
    private RegistryKey _visualStudioRootLocalMachine;
    private RegistryKey _visualStudioCurrentUser;
    private RegistryKey _localRegistryRootKey;
    private string _userRegistryRoot;
    private string _configRegistryRoot;
    private bool _configRegistryRootIsHkcu;
    private string _vsProductDirectory;
    private Nullable`1<int> _dbLockTimeout;
    private Nullable`1<int> _dbQueryTimeout;
    private Nullable`1<int> _dbLongRunningQueryTimeout;
    private Nullable`1<int> _includeDependenciesWhenTargetIsAProject;
    private object _lockObject;
    private bool _isInitialized;
    private bool _inRecursively;
    private List`1<Exception> _initializationExceptions;
    public static RegistryManager Instance { get; }
    public string UserRegistryRoot { get; }
    public RegistryKey LocalRegistryRootKey { get; }
    public RegistryKey VisualStudioRootLocalMachine { get; }
    public RegistryKey VisualStudioCurrentUser { get; }
    public RegistryKey SsdtRootCurrentUser { get; }
    public RegistryKey SsdtRootLocalMachine { get; }
    public RegistryKey DataProjectRootCurrentUser { get; }
    public RegistryKey SsdtCurrentUser { get; }
    public RegistryKey VstsDbCurrentUserSchemaCompareSettings { get; }
    internal int IncludeDependenciesWhenTargetIsAProject { get; }
    internal int DatabaseLockTimeoutMS { get; }
    internal int DatabaseLockTimeout { get; }
    internal int DatabaseQueryTimeout { get; }
    internal int DatabaseLongRunningQueryTimeout { get; }
    internal IList`1<Exception> InitializationErrorList { get; }
    private static RegistryManager();
    public static RegistryManager get_Instance();
    public static bool TryDeleteValue(RegistryKey key, string name);
    public void SetLocalRegistryRoots(string userRegistryRoot, string configRegistryRoot, bool configRegistryRootIsHkcu);
    public string get_UserRegistryRoot();
    public RegistryKey get_LocalRegistryRootKey();
    internal void Reset();
    public static bool TryReadValue(RegistryKey key, string name, RegistryValueKind& valueKind, Object& value);
    public RegistryKey get_VisualStudioRootLocalMachine();
    public RegistryKey get_VisualStudioCurrentUser();
    public RegistryKey get_SsdtRootCurrentUser();
    public RegistryKey get_SsdtRootLocalMachine();
    public RegistryKey get_DataProjectRootCurrentUser();
    public RegistryKey get_SsdtCurrentUser();
    public RegistryKey get_VstsDbCurrentUserSchemaCompareSettings();
    internal int get_IncludeDependenciesWhenTargetIsAProject();
    internal int get_DatabaseLockTimeoutMS();
    internal int get_DatabaseLockTimeout();
    internal int get_DatabaseQueryTimeout();
    internal int get_DatabaseLongRunningQueryTimeout();
    internal IList`1<Exception> get_InitializationErrorList();
    public void EnsureInitialized();
    private void InvokeActionWithErrorHandling(Action action);
    [EditorBrowsableAttribute("1")]
internal RegistryKey EnsureInitialized(string userRegistryLocation, string configRegistryLocation, RegistryKey configRegistryRoot);
    public string GetVSProductDirectory();
    private void CloseAllRegistryKeys();
    public static int GetCommandTimeout(bool useRegistryOverride);
    public static int GetLongRunningCommandTimeout(bool useRegistryOverride);
    public static int GetDatabaseLockTimeout(bool useRegistryOverride);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private RegistryKey <EnsureInitialized>b__64_0();
}
internal class Microsoft.Data.Tools.Schema.Common.ReverseIntSorter : object {
    public sealed virtual int Compare(int x, int y);
}
internal static class Microsoft.Data.Tools.Schema.Common.RuntimeUtils : object {
    public static bool IsWindows { get; }
    public static bool get_IsWindows();
}
internal static class Microsoft.Data.Tools.Schema.Common.SqlClient.ConnectionStringSecurer : object {
    public static string SqlProviderName;
    private static string Key;
    public static SqlConnectionFactory MakeSafeToPersist(SqlConnectionFactory connectionFactory, bool connectionPooling);
    public static SqlConnectionFactory MakeSafeToPersist(SqlConnectionFactory connectionFactory, string dbProvider, bool connectionPooling);
    private static void RegisterConnection(string partialConnection, string dbProvider, Byte[] encryptedConnectionString);
    public static SqlConnectionFactory RestoreConnectionString(SqlConnectionFactory partialConnectionFactory, bool connectionPooling);
    public static SqlConnectionFactory RestoreConnectionString(SqlConnectionFactory partialConnectionFactory, string dbProvider, bool connectionPooling);
}
internal class Microsoft.Data.Tools.Schema.Common.SqlClient.DpapiConnectionStringEncrypter : object {
    public static Byte[] Encrypt(string connectionString);
    public static string Decrypt(Byte[] encryptedSecret);
}
[ObsoleteAttribute("Previous data access layer abstraction class.  Use reliable connection", "False")]
internal static class Microsoft.Data.Tools.Schema.Common.SqlClient.ExecutionHelper : object {
    internal static int ExecuteNonQuery(SqlCommand command);
    internal static int ExecuteNonQuery(IDbCommand command);
    internal static IDataReader ExecuteReader(SqlCommand command, CommandBehavior behavior);
    internal static IDataReader ExecuteReader(IDbCommand command, CommandBehavior behavior);
    private static void TranslateException(SqlException ex, IDbConnection sqlconnection);
    private static bool StandardExceptionHandler(Exception ex);
    private static void TranslateException(InvalidOperationException ex, IDbConnection sqlconnection);
}
[ObsoleteAttribute("This class exists for reverse compatibility reasons, and should not be used.  Use Microsoft.Data.Tools.Schema.ConnectionStringSecurer instead.")]
internal static class Microsoft.Data.Tools.Schema.Common.SqlClient.OldStyleConnectionStringPersistence : object {
    private static string OleProvider;
    private static string OdbcProvider;
    private static string OracleProvider;
    private static string SqlProvider;
    private static Dictionary`2<string, string> passwordKeyMap;
    private static OldStyleConnectionStringPersistence();
    private static bool VerifyProvider(string provider);
    public static SecureString DecryptString(string value);
    public static SqlConnectionFactory RestoreConnectionString(SqlConnectionFactory partialConnection, SecureString password, string provider, bool connectionPooling);
    private static void ReconfigureBuilder(DbConnectionStringBuilder builder, bool connectionPooling);
    private static DbProviderFactory GetFactory(string dbProvider);
    private static DbConnectionStringBuilder GetConnectionStringBuilder(DbProviderFactory factory, string connectionString);
}
[ExtensionAttribute]
internal static class Microsoft.Data.Tools.Schema.Common.SqlClient.SqlClientExtensionMethods : object {
    [ExtensionAttribute]
public static void SetAccessToken(SqlConnection connection, string accessToken);
}
internal class Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionFactory : object {
    private string _connectionStringWithoutPassword;
    private SqlSecureString _password;
    private Func`1<string> _authProvider;
    private Action`1<SqlConnection> _onSqlConnectionCreated;
    public SqlConnectionStringBuilder ReadOnlyBuilder { get; }
    public string ConnectionStringWithoutPassword { get; }
    public string InitialCatalog { get; }
    public SqlAuthenticationMethod Authentication { get; }
    public bool IsUniversalLogin { get; }
    public string DataSource { get; }
    public SecureString Password { get; }
    public SqlConnectionFactory(string connectionString);
    public SqlConnectionFactory(string connectionString, SecureString password);
    public SqlConnectionFactory(string connectionString, Func`1<string> authProvider);
    public SqlConnectionFactory(SqlConnectionStringBuilder connectionStringBuilder);
    public SqlConnectionFactory(string connectionString, string password);
    public SqlConnectionFactory(SqlConnectionStringBuilder connectionStringBuilder, string password);
    public SqlConnectionFactory(SqlConnectionStringBuilder connectionStringBuilder, Func`1<string> authProvider);
    public SqlConnectionFactory(SqlConnectionStringBuilder connectionStringBuilder, SecureString password);
    private SqlConnectionFactory(string connectionString, SqlSecureString password, Func`1<string> authProvider, Action`1<SqlConnection> onSqlConnectionCreated);
    public SqlConnectionFactory WithObserver(Action`1<SqlConnection> onSqlConnectionCreated);
    public SqlConnection CreateConnection();
    public SqlConnectionFactory Reconfigure(Action`1<SqlConnectionStringBuilder> action);
    public SqlConnectionStringBuilder get_ReadOnlyBuilder();
    public string get_ConnectionStringWithoutPassword();
    public string GetConnectionStringWithPassword();
    public string get_InitialCatalog();
    public SqlAuthenticationMethod get_Authentication();
    public bool get_IsUniversalLogin();
    public Func`1<string> GetAuthProvider();
    public Action`1<SqlConnection> GetSqlConnectionCreatedObserver();
    public string get_DataSource();
    public SecureString get_Password();
    public virtual string ToString();
}
internal static class Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionHelperScripts : object {
    public static string EngineEdition;
    public static string EngineEditionWithLock;
    public static string DatabaseCompatibilityLevelQuery;
    public static string DatabaseCompatibilityLevelWithLockQuery;
    public static string DatabaseServiceObjectiveQuery;
    public static string DatabaseServiceObjectiveWithLockQuery;
    public static string CheckDatabaseReadonly;
    public static string GetDatabaseFilePathAndName;
    public static string GetDatabaseLogPathAndName;
    public static string DatabaseMAXDOPQuery;
    public static string DatabaseMAXDOPWithLockQuery;
    public static string DatabaseRecoveryModelQuery;
    public static string DatabaseRecoveryModelWithLockQuery;
    public static string AzureDatabaseMaxStorageSizeInGBQuery;
    public static string ServerMaxMemoryInMBQuery;
    public static string ServerMaxMemoryInMBWithLockQuery;
}
internal static class Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionStringParser : object {
    private static string _passwordKey;
    private static string PasswordKey { get; }
    public static string MakeSafeToPersist(string connectionString, bool connectionPooling);
    private static string MakeSafeToPersist(string fullConnection, string passwordKey, bool connectionPooling);
    public static string MakeSafeToPersist(SqlConnectionFactory connectionString, bool connectionPooling);
    private static string MakeSafeToPersist(SqlConnectionFactory fullConnectionFactory, string passwordKey, bool connectionPooling);
    private static void ExtractPasswordFromBuilder(string passwordKey, SqlConnectionStringBuilder builder);
    private static string get_PasswordKey();
}
internal static class Microsoft.Data.Tools.Schema.Common.SqlClient.SqlConnectionStringSecurer : object {
    private static string ConnectionStringsSubKeyName;
    private static string ConnectionStringsUpgradeSubKeyName;
    private static string UpgradeStringName;
    private static bool _didUpgrade;
    public static string DoSafePersist(string connectionString, bool connectionPooling);
    public static string MakeSafeToPersist(SqlConnectionStringBuilder csb);
    public static string MakeSafeToPersist(string fullConnection, bool connectionPooling);
    public static string CreatePersistenceKeyFromConnectionString(string connectionString, bool connectionPooling);
    public static string RestoreConnectionString(string partialConnection, bool connectionPooling);
    private static void RegisterConnection(string partialConnection, Byte[] encryptedConnectionString);
    private static void SetUpgrade();
    private static bool DidUpgrade();
    private static void UpgradeLegacyConnectionStrings(bool connectionPooling);
    private static void ExtractPasswordFromBuilder(DbConnectionStringBuilder builder);
}
internal static class Microsoft.Data.Tools.Schema.Common.SqlErrorNumbers : object {
    internal static int DatabaseAlreadyExistsErrorNumber;
    internal static int DatabaseAlreadyDroppedErrorNumber;
    internal static int DatabaseDoesNotExistErrorNumber;
    internal static int DatabaseCrudMetadataUpdateErrorNumber;
    internal static int PrimaryKeyViolationErrorNumber;
    internal static int ObjectAlreadyExistsErrorNumber;
    internal static int ObjectAlreadyDroppedErrorNumber;
}
internal abstract class Microsoft.Data.Tools.Schema.Common.StackSettingsData : MarshalByRefObject {
    protected Dictionary`2<string, AmbientValue> _configuration;
    private Dictionary`2<string, AmbientValue> Microsoft.Data.Tools.Schema.Common.IAmbientDataDirectAccess.Data { get; }
    private sealed virtual override Dictionary`2<string, AmbientValue> Microsoft.Data.Tools.Schema.Common.IAmbientDataDirectAccess.get_Data();
    public void PopulateSettings(IDictionary`2<string, object> settingsCollection);
}
internal static class Microsoft.Data.Tools.Schema.Common.StringUtils : object {
    private static Char[] _userNameSeparator;
    private static StringUtils();
    public static string StripCR(string str);
    public static int MultiLineCompare(string x, string y, StringComparison mode);
    public static bool MultiLineEquals(string x, string y, StringComparison mode);
    public static bool EmptyOrSpace(string str);
    public static bool NotEmptyAfterTrim(string str);
    public static bool EqualValue(string str1, string str2);
    public static string CommentOut(string str);
    public static bool IsSqlVariable(string variable);
    public static string ExtractNameOfVariable(string variable);
    public static List`1<Tuple`2<string, int>> GetVariablesFromString(string value);
    public static bool TryToParseCommandLineArguments(string arguments, IList`1& parameters, String& errorMessage);
    public static string ConvertByteArrayToHexString(Byte[] content);
    public static Byte[] ConvertHexStringToByteArray(string hexString);
    public static Encoding GetDacEncoding();
    public static Byte[] GetRandomBytes(int count);
    public static string GeneratePassword(string userName);
    public static string GeneratePassword();
    [DebuggerStepThroughAttribute]
public static string StripOffBrackets(string name);
    public static string RemoveNoLockQueryHint(string query);
    public static bool HasMsBuildDelimiters(string name);
    [DebuggerStepThroughAttribute]
public static string StripOffMsBuildDelimiters(string name);
    public static string EnsureIsMsBuildDelimited(string name);
    public static string EscapeDatabaseName(string database);
    public static string EscapeDatabaseNameWithBracket(string database);
    public static string EscapeSqlCmdVariable(string value);
    public static string SQLString(string value, bool unicode);
    public static string SQLString(string value, int start, int length, bool unicode);
}
internal class Microsoft.Data.Tools.Schema.Common.Telemetry.CustomTelemetryProcessor : object {
    private ITelemetryProcessor _mainProcessor;
    private Action`1<DacFxTelemetryEventData> _telemetryItemCallback;
    public CustomTelemetryProcessor(ITelemetryProcessor mainProcessor, Action`1<DacFxTelemetryEventData> telemetryItemCallback);
    public sealed virtual void Process(ITelemetry item);
}
public class Microsoft.Data.Tools.Schema.Common.Telemetry.DacFxTelemetryEventData : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, double>> <Metrics>k__BackingField;
    public string EventName { get; private set; }
    public IEnumerable`1<KeyValuePair`2<string, string>> Properties { get; private set; }
    public IEnumerable`1<KeyValuePair`2<string, double>> Metrics { get; private set; }
    public DacFxTelemetryEventData(string eventName, IEnumerable`1<KeyValuePair`2<string, string>> properties, IEnumerable`1<KeyValuePair`2<string, double>> metrics);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
private void set_EventName(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, double>> get_Metrics();
    [CompilerGeneratedAttribute]
private void set_Metrics(IEnumerable`1<KeyValuePair`2<string, double>> value);
}
public enum Microsoft.Data.Tools.Schema.Common.Telemetry.SqlPackageSource : Enum {
    public int value__;
    public static SqlPackageSource None;
    public static SqlPackageSource ADO;
    public static SqlPackageSource DotnetTool;
    public static SqlPackageSource GithubAction;
    public static SqlPackageSource GitLab;
}
internal class Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryCommonProperties : object {
    public static string DacFxVersion;
    public static string OSVersionPropertyName;
    public static string DacFxFileVersionPropertyName;
    public static string DacFxSourcePropertyName;
    public static string ProcessArchitecturePropertyName;
    public static string DotNetPlatformPropertyName;
    public static string MachineIdPropertyName;
    public static string SqlPackageApplicationName;
    public static string ApplicationNamePropertyName;
    public static string ApplicationVersionPropertyName;
    public static string CurrentCultureName;
    public static string DefaultEncodingName;
    private UserLevelCacheWriter _userLevelCacheWriter;
    private string _machineId;
    public TelemetryCommonProperties(TelemetryClient telemetryClient);
    private static TelemetryCommonProperties();
    public Dictionary`2<string, string> GetTelemetryCommonProperties(string applicationName, Version applicationVersion);
    private static string GetFileVersion();
    private string GetMachineId();
}
internal class Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryDuration : object {
    private Stopwatch _stopwatch;
    private string _measureName;
    public long ElapsedMilliseconds { get; }
    public TelemetryDuration(string measureName);
    public void Stop(Dictionary`2<string, double> telemetryMeasurements);
    public long get_ElapsedMilliseconds();
    private void Start();
}
internal class Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryError : object {
    private static int CETAS_UNSUPPORTED_TYPE_ERROR_CODE;
    private Int32[] errorCodesForAdditionalInfo;
    internal static int MaxNumberOfErrors;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private TelemetryErrorSeverity <Severity>k__BackingField;
    public int ErrorCode { get; public set; }
    public string ElementType { get; public set; }
    public string ErrorMessage { get; public set; }
    public TelemetryErrorSeverity Severity { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public string get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public TelemetryErrorSeverity get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(TelemetryErrorSeverity value);
    public static TelemetryError Create(int errorCode, string errorMessage, string severity, string elementType);
    public virtual string ToString();
    public void ToString(StringBuilder sb);
    private string GetAdditionalInfo();
    private string GetCETASUnsupportedTypeFromErrorMessage();
    public static IEnumerable`1<TelemetryError> CreateErrorList(IEnumerable`1<T> errors, Func`2<T, TelemetryError> converter);
}
internal enum Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryErrorSeverity : Enum {
    public int value__;
    public static TelemetryErrorSeverity Unknown;
    public static TelemetryErrorSeverity Error;
    public static TelemetryErrorSeverity Warning;
    public static TelemetryErrorSeverity Message;
}
public enum Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryEventName : Enum {
    public int value__;
    public static TelemetryEventName DacFxOperationStart;
    public static TelemetryEventName DacFxOperationEnd;
}
public enum Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryMeasureName : Enum {
    public int value__;
    public static TelemetryMeasureName DurationMs;
    public static TelemetryMeasureName MemoryUsageMB;
    public static TelemetryMeasureName DatabaseSize;
    public static TelemetryMeasureName TableRowCount;
    public static TelemetryMeasureName TotalObjects;
}
public enum Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryOperationName : Enum {
    public int value__;
    public static TelemetryOperationName None;
    public static TelemetryOperationName ReverseEngineer;
    public static TelemetryOperationName ModelValidation;
    public static TelemetryOperationName DataPhase;
    public static TelemetryOperationName CreatingDeploymentPlan;
    public static TelemetryOperationName VerifyingDeploymentPlan;
    public static TelemetryOperationName ExecuteDeploymentPlan;
    public static TelemetryOperationName BuildDeploymentPlan;
    public static TelemetryOperationName ReportDeploymentPlan;
    public static TelemetryOperationName Resolve;
    public static TelemetryOperationName GettingTaskErrors;
    public static TelemetryOperationName CompareModel;
    public static TelemetryOperationName LoadDeploymentComponents;
    public static TelemetryOperationName CreateExportModelFiles;
    public static TelemetryOperationName ExportData;
    public static TelemetryOperationName UpdateDatabase;
    public static TelemetryOperationName UpdateData;
}
public enum Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryPropertyName : Enum {
    public int value__;
    public static TelemetryPropertyName Action;
    public static TelemetryPropertyName SourcePlatform;
    public static TelemetryPropertyName TargetPlatform;
    public static TelemetryPropertyName OperationResult;
    public static TelemetryPropertyName AuthenticationMethod;
    public static TelemetryPropertyName AuthenticationUniversal;
    public static TelemetryPropertyName TargetDatabaseExists;
    public static TelemetryPropertyName IncludesSQLCMDVariables;
    public static TelemetryPropertyName IncludesContributors;
    public static TelemetryPropertyName PackageVersion;
    public static TelemetryPropertyName SqlErrors;
    public static TelemetryPropertyName DacErrors;
    public static TelemetryPropertyName DacErrorSummary;
    public static TelemetryPropertyName ModelSchemaVersion;
    public static TelemetryPropertyName DataStreamVersion;
    public static TelemetryPropertyName DeploymentContributorsStreamVersion;
    public static TelemetryPropertyName ObjectCounts;
    public static TelemetryPropertyName ServerEngineEdition;
    public static TelemetryPropertyName ServerEdition;
    public static TelemetryPropertyName ServerVersion;
    public static TelemetryPropertyName ServiceObjective;
    public static TelemetryPropertyName ServerLevel;
    public static TelemetryPropertyName ServerPlatform;
    public static TelemetryPropertyName ServerWindowsVersion;
    public static TelemetryPropertyName ServerProcessorCount;
    public static TelemetryPropertyName ServerPhysicalMemoryInMB;
    public static TelemetryPropertyName ServerMaxMemoryInMB;
    public static TelemetryPropertyName ServerOS;
    public static TelemetryPropertyName ProjectType;
    public static TelemetryPropertyName ErrorSource;
    public static TelemetryPropertyName Options;
    public static TelemetryPropertyName DataStorageType;
    public static TelemetryPropertyName HasDataPath;
    public static TelemetryPropertyName SourceParticipantType;
    public static TelemetryPropertyName TargetParticipantType;
    public static TelemetryPropertyName DacFxVersion;
    public static TelemetryPropertyName TableDataOption;
    public static TelemetryPropertyName ApplicationProperty;
    public static TelemetryPropertyName ConnectionRetries;
    public static TelemetryPropertyName DatabaseRecoveryModel;
    public static TelemetryPropertyName DatabaseMAXDOP;
    public static TelemetryPropertyName AzureDatabaseMaxStorageSizeInGB;
    public static TelemetryPropertyName AzureStorageAccountKind;
    public static TelemetryPropertyName AzureStorageAccountSku;
    public static TelemetryPropertyName AzureStorageAuthenticationType;
}
internal class Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetrySession : object {
    private static string InstrumentationKey;
    private static string EventsNamespace;
    private Task _telemetryTask;
    private Dictionary`2<string, string> _commonProperties;
    private Dictionary`2<string, double> _commonMeasurements;
    [CompilerGeneratedAttribute]
private TelemetryClient <TelemetryClient>k__BackingField;
    private static Nullable`1<bool> _enabled;
    private static string _applicationName;
    private static Version _applicationVersion;
    private static Action`1<DacFxTelemetryEventData> _telemetryItemCallback;
    private static Func`1<string> _getApplicationProperty;
    private TelemetryClient TelemetryClient { get; private set; }
    public static bool Enabled { get; public set; }
    public bool IsValid { get; }
    [CompilerGeneratedAttribute]
private TelemetryClient get_TelemetryClient();
    [CompilerGeneratedAttribute]
private void set_TelemetryClient(TelemetryClient value);
    public static void InitializeTelemetry(bool enabled, string applicationName, Version applicationVersion, Action`1<DacFxTelemetryEventData> telemetryItemCallback, Func`1<string> getApplicationProperty);
    public static bool get_Enabled();
    public static void set_Enabled(bool value);
    public static TelemetrySession CreateNewSession();
    private void StartSession();
    public void TrackEvent(TelemetryEventName eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    public void TrackException(string sourceName, Exception exception, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    [AsyncStateMachineAttribute("Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetrySession/<EndSession>d__23")]
public Task EndSession();
    private void StartSessionTask();
    private void TrackEventTask(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    private void TrackExceptionTask(string sourceName, Exception exception, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void <StartSession>b__20_0();
}
public enum Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetrySourceName : Enum {
    public int value__;
    public static TelemetrySourceName ServiceTask;
    public static TelemetrySourceName ExecuteDataTask;
    public static TelemetrySourceName BuildTask;
    public static TelemetrySourceName GettingProjectType;
    public static TelemetrySourceName SchemaCompareController;
    public static TelemetrySourceName GettingTaskErrors;
    public static TelemetrySourceName Operation;
}
internal class Microsoft.Data.Tools.Schema.Common.Telemetry.TelemetryUtils : object {
    public static string AdoEnvVarName;
    public static string GithubActionEnvVarName;
    public static string GitLabEnvVarName;
    public static SqlPackageSource GetApplicationSource(string fileLocation, Version productVersion);
}
public class Microsoft.Data.Tools.Schema.Common.Telemetry.UserLevelCacheWriter : object {
    private static string DacFxProfileDirectoryName;
    private string _dacfxTryUserProfileFolderPath;
    private TelemetryClient _telemetryClient;
    private object _lock;
    public UserLevelCacheWriter(TelemetryClient telemetryClient);
    public string RunWithCache(string cacheKey, Func`1<string> getValueToCache);
    private string GetCacheFilePath(string cacheKey);
}
internal class Microsoft.Data.Tools.Schema.Common.TemporaryFilenameHelper : ValueType {
    private static int _tempFileCounter;
    private static string _tempFileNameTemplate;
    private int _tempFileNumber;
    public bool HasFilename { get; }
    public string Filename { get; }
    private static TemporaryFilenameHelper();
    public void IntializeFilename();
    public bool get_HasFilename();
    public string get_Filename();
}
internal abstract class Microsoft.Data.Tools.Schema.Common.Threading.DataAsyncResult : object {
    private object _asyncState;
    private AsyncCallback _asyncCallback;
    private ManualResetEvent _waitHandle;
    private static int _statePending;
    private static int _stateCompletedSynchronously;
    private static int _stateCompletedAsynchronously;
    private int _completedState;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    protected DataAsyncResult(AsyncCallback ac, object state);
    protected void SetCompleted(bool completedSynchronously);
    protected void SetCompleted();
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
}
internal class Microsoft.Data.Tools.Schema.Common.Threading.EventMarshaler : object {
    private static string TargetSiteCallstack;
    private static string OriginalException;
    private SynchronizationContext _ctx;
    public SynchronizationContext EventMarshalContext { get; }
    public EventMarshaler(SynchronizationContext ctx);
    public SynchronizationContext get_EventMarshalContext();
    public void RaiseEvent(EventHandler`1<TEventArgs> eventToRaise, object sender, TEventArgs args);
    public void DoCallback(Delegate callback, Object[] args);
    private static void ContextPostCallback(object state);
    private static void Invoke(Delegate method, Object[] args);
}
internal interface Microsoft.Data.Tools.Schema.Common.Threading.ISimpleJobStatus {
    public object CallbackArg { get; }
    public JobState State { get; }
    public abstract virtual object get_CallbackArg();
    public abstract virtual void IncrementProgress();
    public abstract virtual void IncrementProgress(int progressDelta);
    public abstract virtual void IncrementProgress(int progressDelta, string newStatusLine);
    public abstract virtual void InitializeProgress(int progressTowardsGoal, int progressGoal, string statusLine);
    public abstract virtual JobState get_State();
}
internal abstract class Microsoft.Data.Tools.Schema.Common.Threading.Job : JobBase {
    private string _name;
    private bool _visible;
    private bool _cancelable;
    private int _progressGoal;
    private int _progressCurrent;
    private List`1<string> _statusLog;
    private DateTime _startTime;
    private EventMarshaler _marshaler;
    [CompilerGeneratedAttribute]
private EventHandler`1<JobEventArgs> StatusChanged;
    public string Name { get; protected set; }
    public DateTime StartTime { get; }
    public bool Visible { get; protected set; }
    public bool Cancelable { get; protected set; }
    public int ProgressGoal { get; }
    public int CurrentProgress { get; }
    public bool IsHeartbeatMode { get; }
    public String[] StatusLog { get; }
    [CompilerGeneratedAttribute]
public void add_StatusChanged(EventHandler`1<JobEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StatusChanged(EventHandler`1<JobEventArgs> value);
    public string get_Name();
    protected void set_Name(string value);
    public DateTime get_StartTime();
    public bool get_Visible();
    protected void set_Visible(bool value);
    public bool get_Cancelable();
    protected void set_Cancelable(bool value);
    public int get_ProgressGoal();
    public int get_CurrentProgress();
    public bool get_IsHeartbeatMode();
    public String[] get_StatusLog();
    protected virtual void Initialize();
    protected abstract virtual void Run();
    protected void InitializeProgress(int progressTowardsGoal, int progressGoal, string statusLine);
    protected void IncrementProgress();
    protected void IncrementProgress(int progressDelta);
    protected void IncrementProgress(int progressDelta, string newStatusLine);
    protected void RaiseEvent(EventHandler`1<TEventArgs> eventToRaise, object sender, TEventArgs args);
    protected void DoCallback(Delegate callback, Object[] args);
    private JobEventArgs BuildJobArgs(int currentProgress, string status);
    private void AppendStatusLine(string newStatusLine);
    private void OnStatusChange(JobEventArgs args);
}
internal class Microsoft.Data.Tools.Schema.Common.Threading.JobEventArgs : EventArgs {
    public static float PercentInvalidHeartbeatMode;
    private int _progressGoal;
    private int _currentProgress;
    private JobState _currentState;
    private string _currentStatus;
    public int ProgressGoal { get; }
    public JobState CurrentState { get; }
    public string CurrentStatus { get; }
    public int CurrentProgress { get; }
    public bool IsHeartbeatMode { get; }
    public float PercentCompleted { get; }
    public JobEventArgs(int progressGoal, JobState currentState, int currentProgress, string currentStatus);
    public int get_ProgressGoal();
    public JobState get_CurrentState();
    public string get_CurrentStatus();
    public int get_CurrentProgress();
    public bool get_IsHeartbeatMode();
    public float get_PercentCompleted();
}
internal class Microsoft.Data.Tools.Schema.Common.Threading.JobListChangedEventArgs : EventArgs {
    private Job _job;
    private JobState _jobState;
    public Job Job { get; }
    public JobState JobState { get; }
    public JobListChangedEventArgs(Job j);
    public Job get_Job();
    public JobState get_JobState();
}
internal class Microsoft.Data.Tools.Schema.Common.Threading.JobListChangedJob : Job {
    private static int MessagesProcessedPerIdleCall;
    private LinkedList`1<QueuedJobListChangeMessage> _messages;
    private bool _registeredForIdleProcessing;
    public void AddMessage(EventHandler`1<JobListChangedEventArgs> listener, JobListChangedEventArgs args);
    public void RemoveMessages(EventHandler`1<JobListChangedEventArgs> listener);
    protected virtual void Run();
}
internal class Microsoft.Data.Tools.Schema.Common.Threading.JobManager : object {
    private CultureInfo _initializedCulture;
    private CultureInfo _initializedUICulture;
    private bool _isInitialized;
    private bool _isRunningCooperatively;
    private EventMarshaler _marshaler;
    private object _jobManagerSyncLock;
    private List`1<IManageableJob> _managedJobs;
    private EventHandler`1<JobListChangedEventArgs> _listChangedListeners;
    private object _idleProcListSyncLock;
    private List`1<IManageableJob> _idleProcJobs;
    private JobListChangedJob _listChangedJob;
    public EventMarshaler Marshaler { get; }
    public CultureInfo CurrentCulture { get; }
    public CultureInfo CurrentUICulture { get; }
    public void add_JobListChanged(EventHandler`1<JobListChangedEventArgs> value);
    public void remove_JobListChanged(EventHandler`1<JobListChangedEventArgs> value);
    public EventMarshaler get_Marshaler();
    public CultureInfo get_CurrentCulture();
    public CultureInfo get_CurrentUICulture();
    public void Initialize();
    public void StartJob(Job job);
    public void StartJobOnCurrentThread(Job job);
    public void RequestCancelJob(Job job);
    public void RunIdleCooperatively();
    private void RunBackgroundScheduled(IManageableJob imj);
    private void RunCurrentThread(IManageableJob imj);
    private void AddJob(Job job);
    private void AddJobIdleProcessing(IManageableJob job);
    private void Remove(IManageableJob job);
    private IManageableJob InitializeManagedJob(Job jobToManage);
    private void CheckInitialized();
    private void OnJobListChanged(JobListChangedEventArgs args);
}
internal enum Microsoft.Data.Tools.Schema.Common.Threading.JobRunResult : Enum {
    public int value__;
    public static JobRunResult Undefined;
    public static JobRunResult Finished;
    public static JobRunResult ContinueWithIdleScheduling;
    public static JobRunResult ContinueWithSelfScheduling;
    public static JobRunResult ContinueWithBackgroundScheduling;
}
internal enum Microsoft.Data.Tools.Schema.Common.Threading.JobState : Enum {
    public int value__;
    public static JobState Initial;
    public static JobState Running;
    public static JobState CancelRequested;
    public static JobState Canceling;
    public static JobState Canceled;
    public static JobState Completed;
    public static JobState Error;
    public static JobState Paused;
}
internal class Microsoft.Data.Tools.Schema.Common.Threading.SimpleJob : Job {
    private ThreadStart _ts;
    private Action`1<ISimpleJobStatus> _sjc;
    private object _sjcState;
    public SimpleJob(ThreadStart ts);
    public SimpleJob(Action`1<ISimpleJobStatus> sjc, object state);
    protected virtual void Run();
}
[ObsoleteAttribute("This class has been moved to the SSDT assemblies.")]
internal class Microsoft.Data.Tools.Schema.Common.TypeKeyedDictionary`1 : Dictionary`2<Type, T> {
    private static IEqualityComparer`1<Type> typeEqualityComparer;
    private static TypeKeyedDictionary`1();
}
[ObsoleteAttribute("This class has been moved to the SSDT assemblies.")]
internal class Microsoft.Data.Tools.Schema.Common.VersionUtils : object {
    public static bool ExtractVersionNumbers(string versionString, Int32& fileMajorPart, Int32& fileMinorPart, Int32& fileBuildPart, Int32& filePrivatePart);
    public static string GetVersionNumber();
    public static string GetVersionNumber(Type type);
    public static bool IsVarDecimalSupported(string dbVersionNumber);
    public static bool TryParseCompatLevel(string compatLevelString, Int32& compatLevel);
}
internal static class Microsoft.Data.Tools.Schema.Common.Win32.DataUtilitiesNativeMethods : object {
    public static int VK_LBUTTON;
    public static int VK_RBUTTON;
    internal static short GetAsyncKeyState(int nVirtKey);
}
[ExtensionAttribute]
internal static class Microsoft.Data.Tools.Schema.Common.XmlUtilities : object {
    public static void RemoveAllXmlNodes(XmlDocument doc, string xpath, XmlNamespaceManager nsmgr);
    public static bool TryGetAttribute(XmlNode node, string attrName, XmlAttribute& attr);
    public static bool TryGetAttributeAsString(XmlNode node, string attrName, String& attr);
    public static bool GetAttributeAsBool(XmlNode node, string attrName, bool defaultValue);
    public static bool HasXmlAttribute(XmlNode node, string attrName);
    public static IList`1<XmlElement> GetUniqueConfigDependentNodes(XmlDocument doc, XmlNamespaceManager nsmgr);
    public static IList`1<XmlElement> GetAllConfigDependentNodes(XmlDocument doc, XmlNamespaceManager nsmgr);
    public static IList`1<XmlElement> GetAllConfigIndependentNodes(XmlDocument doc, XmlNamespaceManager nsmgr);
    public static XmlNode AddChild(XmlNode parent, string childName, string namespaceUri, string childInnerText);
    public static XmlAttribute CreateAttribute(XmlNode node, string attrName, string attrValue, string namespaceUri);
    public static XDocument LoadWithProhibitDtd(Stream stream, LoadOptions options);
    public static XDocument LoadWithNonNormalizingProhibitDtd(Stream stream, LoadOptions options);
    [ExtensionAttribute]
public static void LoadXmlWithProhibitDtd(XmlDocument doc, string xml);
    [ExtensionAttribute]
public static void LoadWithProhibitDtd(XmlDocument doc, string fileName);
    [ExtensionAttribute]
public static void LoadWithProhibitDtd(XmlDocument doc, Stream stream);
    public static XmlReaderSettings GetXmlReaderSettings();
}
internal static class Microsoft.Data.Tools.Schema.ProductLocations : object {
    private static string SqlDBMefLocation;
    private static ProductLocations();
    public static string GetSqlDBInstallPath();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Tools.Schema.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AzureStorageBlobEndpointSecured { get; }
    internal static string AzureStorageContainerNeeded { get; }
    internal static string AzureStorageKeyAndSASTokenBothNull { get; }
    internal static string AzureStorageNoSasKeyAllowed { get; }
    internal static string AzureStorageRootPathNeeded { get; }
    internal static string ConnectionPropertyNotSet { get; }
    internal static string DataOperationStateProviderOperationIdNeeded { get; }
    internal static string DataPhaseExtractParameterErrorMessage { get; }
    internal static string DataPhasePublishParameterErrorMessage { get; }
    internal static string DeveloperInstance_CouldNotSetup { get; }
    internal static string DuplicateNameInNameValuePairs { get; }
    internal static string EmptyCommandText { get; }
    internal static string ExportSplitDataUsingHistogramFailed { get; }
    internal static string ExtractDataPhaseOperationCleanupFailed { get; }
    internal static string FailedToCleanupStorage { get; }
    internal static string InvalidCommandType { get; }
    internal static string InvalidConnectionType { get; }
    internal static string InvalidNameValuePairFormat { get; }
    internal static string OnlyReliableConnectionSupported { get; }
    internal static string OnlySqlTransactionSupported { get; }
    internal static string ParameterizationBinaryLiteralErrorMessage { get; }
    internal static string ParameterizationDateTimeErrorMessage { get; }
    internal static string ParameterizationDetails { get; }
    internal static string ParameterizationErrorMessage { get; }
    internal static string RetryLimitExceeded { get; }
    internal static string TaskHostWorkLoadDescription { get; }
    internal static string UnsupportedConnectionStringArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AzureStorageBlobEndpointSecured();
    internal static string get_AzureStorageContainerNeeded();
    internal static string get_AzureStorageKeyAndSASTokenBothNull();
    internal static string get_AzureStorageNoSasKeyAllowed();
    internal static string get_AzureStorageRootPathNeeded();
    internal static string get_ConnectionPropertyNotSet();
    internal static string get_DataOperationStateProviderOperationIdNeeded();
    internal static string get_DataPhaseExtractParameterErrorMessage();
    internal static string get_DataPhasePublishParameterErrorMessage();
    internal static string get_DeveloperInstance_CouldNotSetup();
    internal static string get_DuplicateNameInNameValuePairs();
    internal static string get_EmptyCommandText();
    internal static string get_ExportSplitDataUsingHistogramFailed();
    internal static string get_ExtractDataPhaseOperationCleanupFailed();
    internal static string get_FailedToCleanupStorage();
    internal static string get_InvalidCommandType();
    internal static string get_InvalidConnectionType();
    internal static string get_InvalidNameValuePairFormat();
    internal static string get_OnlyReliableConnectionSupported();
    internal static string get_OnlySqlTransactionSupported();
    internal static string get_ParameterizationBinaryLiteralErrorMessage();
    internal static string get_ParameterizationDateTimeErrorMessage();
    internal static string get_ParameterizationDetails();
    internal static string get_ParameterizationErrorMessage();
    internal static string get_RetryLimitExceeded();
    internal static string get_TaskHostWorkLoadDescription();
    internal static string get_UnsupportedConnectionStringArgument();
}
[ObsoleteAttribute("Use SqlPlatformsUtil.GetSqlPlatformName() instead")]
public static class Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatformNames : object {
    public static string Sql90;
    public static string Sql100;
    public static string Sql110;
    public static string Sql120;
    public static string Sql130;
    public static string Sql140;
    public static string Sql150;
    public static string Sql160;
    public static string SqlAzureV12;
    public static string SqlDw;
    public static string SqlServerless;
    public static string SqlDwUnified;
}
[FlagsAttribute]
public enum Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatforms : Enum {
    public int value__;
    public static SqlPlatforms Sql90;
    public static SqlPlatforms Sql100;
    public static SqlPlatforms SqlAzure;
    public static SqlPlatforms Sql110;
    public static SqlPlatforms Sql120;
    public static SqlPlatforms SqlAzureV12;
    public static SqlPlatforms Sql130;
    public static SqlPlatforms Sql140;
    public static SqlPlatforms Sql150;
    public static SqlPlatforms SqlDw;
    public static SqlPlatforms Sql160;
    public static SqlPlatforms SqlServerless;
    public static SqlPlatforms SqlDwUnified;
    public static SqlPlatforms SqlDbFabric;
    public static SqlPlatforms PlatformGroup;
    public static SqlPlatforms AllSqlDb;
    public static SqlPlatforms OnPremises;
    public static SqlPlatforms Sql100AndUp;
    public static SqlPlatforms Sql100AndUpAndSqlAzureV12;
    public static SqlPlatforms Sql110AndUp;
    public static SqlPlatforms Sql120AndUp;
    public static SqlPlatforms Sql130AndUp;
    public static SqlPlatforms Sql140AndUp;
    public static SqlPlatforms Sql150AndUp;
    public static SqlPlatforms Sql160AndUp;
    public static SqlPlatforms Sql110AndUpAndSqlAzureV12;
    public static SqlPlatforms Sql120AndUpAndSqlAzureV12;
    public static SqlPlatforms Sql130AndUpAndSqlAzureV12;
    public static SqlPlatforms Sql140AndUpAndSqlAzureV12;
    public static SqlPlatforms Sql150AndUpAndSqlAzureV12;
    public static SqlPlatforms Sql160AndUpAndSqlAzureV12;
    public static SqlPlatforms Sql130AndSqlAzureV12;
    public static SqlPlatforms Sql100AndUpAndAllSqlDb;
    public static SqlPlatforms Sql110AndUpAndAllSqlDb;
    public static SqlPlatforms Sql120AndUpAndAllSqlDb;
    public static SqlPlatforms Sql130AndUpAndAllSqlDb;
    public static SqlPlatforms Sql140AndUpAndAllSqlDb;
    public static SqlPlatforms Sql150AndUpAndAllSqlDb;
    public static SqlPlatforms Sql160AndUpAndAllSqlDb;
    public static SqlPlatforms Sql130AndAllSqlDb;
    public static SqlPlatforms Sql100AndUpCloudAndAllDw;
    public static SqlPlatforms Sql110AndUpSqlAzureV12AndAllDw;
    public static SqlPlatforms Sql110AndUpAllSqlDbAndAllDw;
    public static SqlPlatforms Sql130AndUpSqlAzureV12AllDw;
    public static SqlPlatforms Sql130AndUpSqlAzureV12AllDwServerless;
    public static SqlPlatforms Sql130AndUpAllSqlDbAllDw;
    public static SqlPlatforms Sql130AndUpAllSqlDbSqlDw;
    public static SqlPlatforms Sql130AndUpAllSqlDbAllDwServerless;
    public static SqlPlatforms AllDwSqlServerless;
    public static SqlPlatforms AllSqlDbAndSqlDw;
    public static SqlPlatforms OnPremisesAndAllSqlDb;
    public static SqlPlatforms OnPremisesAndAllSqlAndDbAllDw;
    public static SqlPlatforms Sql130AndUpAndAllDw;
    public static SqlPlatforms Sql150AndUpAndAllDw;
    public static SqlPlatforms Sql150AndUpAndAllSqlDbAndSqlDw;
    public static SqlPlatforms Cloud;
    public static SqlPlatforms Sql100AndUpAndCloud;
    public static SqlPlatforms Sql110AndUpAndCloud;
    public static SqlPlatforms AllDw;
    public static SqlPlatforms All;
    public static SqlPlatforms AllNotDw;
}
[ExtensionAttribute]
public static class Microsoft.Data.Tools.Schema.SchemaModel.SqlPlatformsUtil : object {
    public static string PlatformPrefix;
    public static SqlPlatforms DefaultPlatform;
    [ExtensionAttribute]
public static bool IsInSet(SqlPlatforms platform, SqlPlatforms platformsSet);
    [ExtensionAttribute]
public static bool IsCloud(SqlPlatforms platform);
    [ExtensionAttribute]
public static bool CanAccessMaster(SqlPlatforms platform);
    public static SqlPlatforms GetSqlPlatformByName(string name, bool throwIfNotSupported);
    public static string GetSqlPlatformName(SqlPlatforms platform, bool throwIfNotSupported);
    public static bool IsSinglePlatform(SqlPlatforms sqlPlatform);
    public static void ValidateSinglePlatform(SqlPlatforms sqlPlatform, string variableName);
    public static SqlPlatforms DatabaseSchemaProviderToSqlPlatform(string databaseSchemaProvider);
    public static string SqlPlatformToDatabaseSchemaProvider(SqlPlatforms sqlPlatform);
}
internal static class Microsoft.Data.Tools.Schema.Sql.Build.BuildHelperUtils : object {
    public static void CopyDictionary(Dictionary`2<TK, TV> source, Dictionary`2<TK, TV> target);
    public static Dictionary`2<string, string> SplitNameValuePairs(IEnumerable`1<string> nvPairs, bool caseSensitive, List`1& errors);
    public static bool SplitNameValuePair(string nvPair, List`1<string> errors, String& name, String& value);
    public static void CollectProperties(object propertyHolder, Type stopType, Dictionary`2<string, object> propertyContainer);
    public static int GetErrorCode(string errorCodeValue);
}
