internal abstract class Microsoft.Data.Tools.Schema.Sql.Deployment.DatabaseUpdateContext`1 : object {
    private T _source;
    private IDeploymentController _controller;
    private DeploymentPlan _plan;
    private DriftResult _driftReport;
    [CompilerGeneratedAttribute]
private bool <ExecuteDriftCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExecuteRegisterSchema>k__BackingField;
    public DriftResult DriftReport { get; }
    protected T Source { get; }
    protected DeploymentPlan DeploymentPlan { get; }
    protected IDeploymentController DeploymentController { get; }
    protected bool ExecuteDriftCheck { get; protected set; }
    protected bool ExecuteRegisterSchema { get; protected set; }
    public DatabaseUpdateContext`1(T source);
    public DriftResult get_DriftReport();
    protected T get_Source();
    protected DeploymentPlan get_DeploymentPlan();
    protected IDeploymentController get_DeploymentController();
    [CompilerGeneratedAttribute]
protected bool get_ExecuteDriftCheck();
    [CompilerGeneratedAttribute]
protected void set_ExecuteDriftCheck(bool value);
    [CompilerGeneratedAttribute]
protected bool get_ExecuteRegisterSchema();
    [CompilerGeneratedAttribute]
protected void set_ExecuteRegisterSchema(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Cancel();
    public void CreateDeploymentPlan(IList`1& errors);
    public void RecreateDeploymentPlan(IList`1& errors);
    public void CreateDeploymentPlan(Action`1<DataSchemaError> statusCallback, IList`1& errors, AzureDatabaseSpecification azureDefaults);
    public void CreateReport(PlanReportBuilder builder, ISet`1<DataSchemaError> reportMessages);
    public void CreatePublishScripts(string pathScriptUser, string pathScriptMaster, IList`1& errors);
    public void CreateUpdateScript(TextWriter output, IList`1& errors);
    public void EnablePublicDeploymentPlanExecutors();
    public bool UpdateDatabase(Action`1<DataSchemaError> statusCallback, string pathScriptUser, string pathScriptMaster);
    protected void Execute(Action`1<DeploymentPlan> action, IList`1& errors);
    protected abstract virtual void Initialize(SqlDeploymentConstructor constructor, AzureDatabaseSpecification azureDefault);
    protected abstract virtual void Initialize(SqlDeployment deployment);
    private IDeploymentController CreateDeploymentController(AzureDatabaseSpecification azureDefaults);
    private static bool PlanCreatesOrDropsMemoryOptimizedObjects(DeploymentPlan plan);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.BeforeResolveChangesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AdditionalFilesToProcess>k__BackingField;
    public IEnumerable`1<string> AdditionalFilesToProcess { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AdditionalFilesToProcess();
    [CompilerGeneratedAttribute]
public void set_AdditionalFilesToProcess(IEnumerable`1<string> value);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.CannotEditFilesException : Exception {
    public CannotEditFilesException(string message);
    private CannotEditFilesException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.CascadingDropsAnalyzer : object {
    private HashSet`1<ISqlModelElement> _drops;
    private SqlSchemaModel _model;
    public HashSet`1<ISqlModelElement> Drops { get; }
    public CascadingDropsAnalyzer(SqlSchemaModel model);
    public HashSet`1<ISqlModelElement> get_Drops();
    public void AnalyzeDrop(DropRequest req);
    public void AnalyzeDrop(ISqlModelElement toDrop);
    public void PopulateDropRequests(IList`1<DropRequest> reqs);
    private static ISqlModelElement GetFirstDropableComposingParent(ISqlModelElement element);
    private static bool ShouldDropReferencingElement(IModelRelationshipEntry relEntry);
    private static bool IsElementTableColumn(ISqlModelElement element);
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.CommitContext : DatabaseUpdateContext`1<SqlDeploymentEndpoint> {
    private SqlSchemaModel _target;
    private SqlConnectionFactory _connectionFactory;
    private CommitRequests _requests;
    public SqlSchemaModel TargetModel { get; }
    public CommitRequests Requests { get; }
    internal CommitContext(SqlDeploymentEndpoint source, SqlSchemaModel target, CommitRequests requests, SqlConnectionFactory connectionFactory);
    public SqlSchemaModel get_TargetModel();
    public CommitRequests get_Requests();
    internal abstract virtual void UpdateTargetModel();
    protected virtual void Initialize(SqlDeployment deploy);
    protected virtual void Initialize(SqlDeploymentConstructor constructor, AzureDatabaseSpecification azureDefaults);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.CommitJob : object {
    private CommitRequests _requests;
    private DatabaseChangeModel _model;
    private CommitContext _context;
    private ISet`1<DataSchemaError> _errors;
    private TableDesigner _designer;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _breakJobRun;
    private static HashSet`1<string> ExcludedRuleIDs;
    private static string TemporalTableSchemaMismatchRuleId;
    public CommitJob(CommitRequests requests, DatabaseChangeModel model, TableDesigner designer);
    private static CommitJob();
    public void ApplyDriftToModel();
    public void Dispose();
    private void Dispose(bool disposing);
    private void CreateContext();
    public PreviewReport CreatePreviewReport();
    public string GenerateScript();
    public void UpdateDatabase();
    private static Exception GetException(IEnumerable`1<DataSchemaError> messages);
    internal void BuildModel(CommitRequests reqs, Func`1<bool> cancelBuild, Boolean& buildBreak, HashSet`1& generatedErrors);
    [CompilerGeneratedAttribute]
private bool <CreateContext>b__12_0();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.CommitRequests : object {
    private List`1<DropRequest> _drops;
    private List`1<RefactorRequest> _refactors;
    private List`1<SqlElementDescriptor> _editedSecurables;
    private Dictionary`2<string, string> _scripts;
    internal static CommitRequests CommitRequestsDefaults;
    [CompilerGeneratedAttribute]
private bool <DisableAndReenableDdlTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTransactionalScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlockOnPossibleDataLoss>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreviewCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropIndexesNotInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropConstraintsNotInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropExtendedPropertiesNotInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowTableRecreation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropPermissionsNotInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropDmlTriggersNotInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropRoleMembersNotInSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformIndexOperationsOnline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyzeDropDependencies>k__BackingField;
    public bool DisableAndReenableDdlTriggers { get; public set; }
    public bool IncludeTransactionalScripts { get; public set; }
    public bool BlockOnPossibleDataLoss { get; public set; }
    public bool PreviewCommit { get; public set; }
    public bool DropIndexesNotInSource { get; public set; }
    public bool DropConstraintsNotInSource { get; public set; }
    public bool DropExtendedPropertiesNotInSource { get; public set; }
    public bool AllowTableRecreation { get; public set; }
    public bool DropPermissionsNotInSource { get; public set; }
    public bool DropDmlTriggersNotInSource { get; public set; }
    public bool DropRoleMembersNotInSource { get; public set; }
    public bool PerformIndexOperationsOnline { get; public set; }
    public bool AnalyzeDropDependencies { get; public set; }
    public List`1<DropRequest> Drops { get; }
    public List`1<RefactorRequest> Refactors { get; }
    public Dictionary`2<string, string> Scripts { get; }
    public int RequestCount { get; }
    internal bool OnlyImperativeRequests { get; }
    private static CommitRequests();
    [CompilerGeneratedAttribute]
public bool get_DisableAndReenableDdlTriggers();
    [CompilerGeneratedAttribute]
public void set_DisableAndReenableDdlTriggers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTransactionalScripts();
    [CompilerGeneratedAttribute]
public void set_IncludeTransactionalScripts(bool value);
    [CompilerGeneratedAttribute]
public bool get_BlockOnPossibleDataLoss();
    [CompilerGeneratedAttribute]
public void set_BlockOnPossibleDataLoss(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreviewCommit();
    [CompilerGeneratedAttribute]
public void set_PreviewCommit(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropIndexesNotInSource();
    [CompilerGeneratedAttribute]
public void set_DropIndexesNotInSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropConstraintsNotInSource();
    [CompilerGeneratedAttribute]
public void set_DropConstraintsNotInSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropExtendedPropertiesNotInSource();
    [CompilerGeneratedAttribute]
public void set_DropExtendedPropertiesNotInSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowTableRecreation();
    [CompilerGeneratedAttribute]
public void set_AllowTableRecreation(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropPermissionsNotInSource();
    [CompilerGeneratedAttribute]
public void set_DropPermissionsNotInSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropDmlTriggersNotInSource();
    [CompilerGeneratedAttribute]
public void set_DropDmlTriggersNotInSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropRoleMembersNotInSource();
    [CompilerGeneratedAttribute]
public void set_DropRoleMembersNotInSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_PerformIndexOperationsOnline();
    [CompilerGeneratedAttribute]
public void set_PerformIndexOperationsOnline(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnalyzeDropDependencies();
    [CompilerGeneratedAttribute]
public void set_AnalyzeDropDependencies(bool value);
    public List`1<DropRequest> get_Drops();
    public List`1<RefactorRequest> get_Refactors();
    public Dictionary`2<string, string> get_Scripts();
    public int get_RequestCount();
    internal bool get_OnlyImperativeRequests();
    public void AddReplaceScripts(IDictionary`2<string, string> scripts);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Tools.Sql.DesignServices.Common.SqlCommonResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbortDueToFatalError { get; }
    internal static string ArgumentParsing_ArgumentValueMissingError { get; }
    internal static string ArgumentParsing_DoubleQuoteMissingError { get; }
    internal static string AssemblySource { get; }
    internal static string ClusteredIndex_LabelPart { get; }
    internal static string ColumnstoreIndex_LabelPart { get; }
    internal static string ConnectionStringParser_InvalidConnectionString { get; }
    internal static string CopyOfFormatString { get; }
    internal static string CopyOfFormatString2 { get; }
    internal static string CouldNotRetrieveAccessLevel { get; }
    internal static string DatabaseEncryptionKeyName { get; }
    internal static string DefaultCaption { get; }
    internal static string DefaultRelatedElementTypeDescription { get; }
    internal static string Deployment_PlanGenerationError { get; }
    internal static string Deserialize_Relationships { get; }
    internal static string DeveloperInstance_CouldNotSetup { get; }
    internal static string DisplayName_Sql100Dsp { get; }
    internal static string DisplayName_Sql110Dsp { get; }
    internal static string DisplayName_Sql120Dsp { get; }
    internal static string DisplayName_Sql130Dsp { get; }
    internal static string DisplayName_Sql140Dsp { get; }
    internal static string DisplayName_Sql150Dsp { get; }
    internal static string DisplayName_Sql90Dsp { get; }
    internal static string DisplayName_SqlAzureDsp { get; }
    internal static string DuplicateNameInNameValuePairs { get; }
    internal static string EE_BatchError_Exception { get; }
    internal static string EE_BatchExecutionError_Halting { get; }
    internal static string EE_BatchExecutionError_Ignoring { get; }
    internal static string EE_BatchExecutionInfo_RowsAffected { get; }
    internal static string EE_BatchSqlMessageNoLineInfo { get; }
    internal static string EE_BatchSqlMessageNoProcedureInfo { get; }
    internal static string EE_BatchSqlMessageWithProcedureInfo { get; }
    internal static string EE_ExecutionError_CommandNotSupported { get; }
    internal static string EE_ExecutionError_InvalidPath { get; }
    internal static string EE_ExecutionError_ReadingFile { get; }
    internal static string EE_ExecutionError_VariableNotFound { get; }
    internal static string EE_ExecutionInfo_FinalizingLoop { get; }
    internal static string EE_ExecutionInfo_InitilizingLoop { get; }
    internal static string EE_ExecutionInfo_QueryCancelledbyUser { get; }
    internal static string EE_ExecutionNotYetCompleteError { get; }
    internal static string EE_ScriptError_Error { get; }
    internal static string EE_ScriptError_FatalError { get; }
    internal static string EE_ScriptError_ParsingSyntax { get; }
    internal static string EE_ScriptError_Warning { get; }
    internal static string ErrorString_TooManyErrors { get; }
    internal static string ExceptionArrayWithNullOrEmptyString { get; }
    internal static string ExceptionEmptyCollection { get; }
    internal static string ExceptionEmptyString { get; }
    internal static string ExceptionEnumerationNotDefined { get; }
    internal static string ExceptionExpectedType { get; }
    internal static string ExceptionIndexOutOfRange { get; }
    internal static string ExceptionInvalidNullNameArgument { get; }
    internal static string ExceptionMaxLengthExceeded { get; }
    internal static string ExceptionNullOrWhiteSpaceString { get; }
    internal static string ExceptionUnexpected { get; }
    internal static string FulltextIndexDisplayName { get; }
    internal static string FullTextIndexName { get; }
    internal static string FunctionBody { get; }
    internal static string FunctionImplementation { get; }
    internal static string Import_MergingChildren { get; }
    internal static string InlineConstraintOnDisplayName { get; }
    internal static string IntegerRange_EndLessThanBegin { get; }
    internal static string InvalidNameValuePairFormat { get; }
    internal static string MasterKeyName { get; }
    internal static string NonClusteredIndex_LabelPart { get; }
    internal static string NonUniqueIndex_LabelPart { get; }
    internal static string Not_connected { get; }
    internal static string PartitionValue { get; }
    internal static string Permission { get; }
    internal static string PredeployScriptAlreadyDeployed { get; }
    internal static string PredeployVerifyDatabaseCompat { get; }
    internal static string PredeployVerifyDatabaseExists { get; }
    internal static string PredeployVerifyDatabaseExistsUnknownServer { get; }
    internal static string PredeployVerifyDatabaseName { get; }
    internal static string PredeployVerifyDatabaseState { get; }
    internal static string PredeployVerifyDatabaseWritable { get; }
    internal static string PredeployVerifyServerName { get; }
    internal static string PredeployVerifyServerVersion { get; }
    internal static string PrimaryXML_LabelPart { get; }
    internal static string PublishScriptGenerator_GeneratedScript { get; }
    internal static string Registry_CannotAccessInstallDirKey { get; }
    internal static string ReportBuilder_None { get; }
    internal static string ReportBuilder_QualifiedName { get; }
    internal static string Schema_CannotFoundConstraint { get; }
    internal static string Schema_CannotFoundTrigger { get; }
    internal static string Schema_ChildWithoutName { get; }
    internal static string Schema_NoMultipleConstraintsInOneStatement { get; }
    internal static string Schema_NoMultipleObjectsInOneFile { get; }
    internal static string Schema_NoObjectIDFound { get; }
    internal static string Schema_ObjectIsAlreadyCreated { get; }
    internal static string Schema_ObjectNotFound { get; }
    internal static string SchemaDependencyInfoMessage { get; }
    internal static string SchemaDependencyInfoMessage2 { get; }
    internal static string SecondaryXML_LabelPart { get; }
    internal static string Serialize_Relationships { get; }
    internal static string SettingsRequireSysAdmin { get; }
    internal static string SignatureName_NoSignable { get; }
    internal static string SignatureName_WithSignable { get; }
    internal static string SolutionExplorer_SchemaObjects { get; }
    internal static string SqlConnectionApplicationName_BuildAndDeploy { get; }
    internal static string SqlConnectionApplicationName_Default { get; }
    internal static string SqlConnectionApplicationName_DesignDatabaseManager { get; }
    internal static string SqlConnectionApplicationName_ReverseEngineeringFeature { get; }
    internal static string SqlConnectionApplicationName_SchemaCompare { get; }
    internal static string SqlDeployment_Done { get; }
    internal static string SystemDefinedSqlCmdVariableFound { get; }
    internal static string TaskHostWorkLoadDescription { get; }
    internal static string Threading_InvalidStateChange { get; }
    internal static string Threading_JobAlreadyManaged { get; }
    internal static string Threading_JobListChangedJobName { get; }
    internal static string Threading_JobManagerNotInitialized { get; }
    internal static string TypeDescription_Aggregate { get; }
    internal static string TypeDescription_ApplicationRole { get; }
    internal static string TypeDescription_Assembly { get; }
    internal static string TypeDescription_AssemblyFile { get; }
    internal static string TypeDescription_AsymmetricKey { get; }
    internal static string TypeDescription_BrokerPriority { get; }
    internal static string TypeDescription_BuiltInServerRole { get; }
    internal static string TypeDescription_BuiltInType { get; }
    internal static string TypeDescription_Certificate { get; }
    internal static string TypeDescription_CheckConstraint { get; }
    internal static string TypeDescription_Column { get; }
    internal static string TypeDescription_ColumnEncryptionKey { get; }
    internal static string TypeDescription_ColumnMasterKey { get; }
    internal static string TypeDescription_ColumnStoreIndex { get; }
    internal static string TypeDescription_ComputedColumn { get; }
    internal static string TypeDescription_Contract { get; }
    internal static string TypeDescription_Credential { get; }
    internal static string TypeDescription_CryptographicProvider { get; }
    internal static string TypeDescription_CustomErrorMessage { get; }
    internal static string TypeDescription_DatabaseAuditSpecification { get; }
    internal static string TypeDescription_DatabaseEncryptionKey { get; }
    internal static string TypeDescription_DatabaseOptions { get; }
    internal static string TypeDescription_DatabaseScopedCredential { get; }
    internal static string TypeDescription_DataCompressionOption { get; }
    internal static string TypeDescription_Default { get; }
    internal static string TypeDescription_DefaultConstraint { get; }
    internal static string TypeDescription_Endpoint { get; }
    internal static string TypeDescription_EventNotification { get; }
    internal static string TypeDescription_EventSession { get; }
    internal static string TypeDescription_ExtendedProperty { get; }
    internal static string TypeDescription_File { get; }
    internal static string TypeDescription_Filegroup { get; }
    internal static string TypeDescription_FileTable { get; }
    internal static string TypeDescription_ForeignKey { get; }
    internal static string TypeDescription_FullTextCatalog { get; }
    internal static string TypeDescription_FullTextIndex { get; }
    internal static string TypeDescription_FullTextStopList { get; }
    internal static string TypeDescription_Index { get; }
    internal static string TypeDescription_LinkedServer { get; }
    internal static string TypeDescription_LinkedServerLogin { get; }
    internal static string TypeDescription_Login { get; }
    internal static string TypeDescription_MasterKey { get; }
    internal static string TypeDescription_MessageType { get; }
    internal static string TypeDescription_Parameter { get; }
    internal static string TypeDescription_PartitionFunction { get; }
    internal static string TypeDescription_PartitionScheme { get; }
    internal static string TypeDescription_Permission { get; }
    internal static string TypeDescription_PrimaryKey { get; }
    internal static string TypeDescription_Procedure { get; }
    internal static string TypeDescription_Queue { get; }
    internal static string TypeDescription_RemoteServiceBinding { get; }
    internal static string TypeDescription_Role { get; }
    internal static string TypeDescription_RoleMembership { get; }
    internal static string TypeDescription_Route { get; }
    internal static string TypeDescription_Rule { get; }
    internal static string TypeDescription_ScalarFunction { get; }
    internal static string TypeDescription_Schema { get; }
    internal static string TypeDescription_SearchPropertyList { get; }
    internal static string TypeDescription_SecurityPolicy { get; }
    internal static string TypeDescription_Sequence { get; }
    internal static string TypeDescription_ServerAudit { get; }
    internal static string TypeDescription_ServerAuditSpecification { get; }
    internal static string TypeDescription_ServerOptions { get; }
    internal static string TypeDescription_ServerRole { get; }
    internal static string TypeDescription_ServerRoleMembership { get; }
    internal static string TypeDescription_Service { get; }
    internal static string TypeDescription_Signature { get; }
    internal static string TypeDescription_SpatialIndex { get; }
    internal static string TypeDescription_SqlType { get; }
    internal static string TypeDescription_Statistic { get; }
    internal static string TypeDescription_SymmetricKey { get; }
    internal static string TypeDescription_Synonym { get; }
    internal static string TypeDescription_Table { get; }
    internal static string TypeDescription_TableFunction { get; }
    internal static string TypeDescription_Trigger { get; }
    internal static string TypeDescription_UniqueConstraint { get; }
    internal static string TypeDescription_User { get; }
    internal static string TypeDescription_UserDefinedDataType { get; }
    internal static string TypeDescription_UserDefinedTableType { get; }
    internal static string TypeDescription_UserDefinedType { get; }
    internal static string TypeDescription_View { get; }
    internal static string TypeDescription_WorkloadClassifier { get; }
    internal static string TypeDescription_WorkloadGroup { get; }
    internal static string TypeDescription_XmlIndex { get; }
    internal static string TypeDescription_XmlSchemaCollection { get; }
    internal static string UnbindTableDependencies { get; }
    internal static string UniqueIndex_LabelPart { get; }
    internal static string Unnamed { get; }
    internal static string UnsupportedConnectionStringArgument { get; }
    internal static string WarningUpdateMemoryOptimizedObjects { get; }
    internal static string WarningUpdateLargeTable { get; }
    internal static string XmlIndex_Path { get; }
    internal static string XmlIndex_Property { get; }
    internal static string XmlIndex_Value { get; }
    internal static string XmlSerialization_CannotDeserializeType { get; }
    internal static string XmlSerialization_CannotGetValidType { get; }
    internal static string XmlSerialization_CannotParseToEnum { get; }
    internal static string XmlSerialization_CannotToAttribute { get; }
    internal static string XmlSerialization_DuplicateAttribute { get; }
    internal static string XmlSerialization_DuplicateKey { get; }
    internal static string XmlSerialization_DuplicateXmlInclude { get; }
    internal static string XmlSerialization_EmptyContent { get; }
    internal static string XmlSerialization_IncompatiableType { get; }
    internal static string XmlSerialization_InvalidEnumValue { get; }
    internal static string XmlSerialization_InvalidXmlReaderPosition { get; }
    internal static string XmlSerialization_KeyIsNull { get; }
    internal static string XmlSerialization_NameReserved { get; }
    internal static string XmlSerialization_ReuseNames { get; }
    internal static string XmlSerialization_WrongType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbortDueToFatalError();
    internal static string get_ArgumentParsing_ArgumentValueMissingError();
    internal static string get_ArgumentParsing_DoubleQuoteMissingError();
    internal static string get_AssemblySource();
    internal static string get_ClusteredIndex_LabelPart();
    internal static string get_ColumnstoreIndex_LabelPart();
    internal static string get_ConnectionStringParser_InvalidConnectionString();
    internal static string get_CopyOfFormatString();
    internal static string get_CopyOfFormatString2();
    internal static string get_CouldNotRetrieveAccessLevel();
    internal static string get_DatabaseEncryptionKeyName();
    internal static string get_DefaultCaption();
    internal static string get_DefaultRelatedElementTypeDescription();
    internal static string get_Deployment_PlanGenerationError();
    internal static string get_Deserialize_Relationships();
    internal static string get_DeveloperInstance_CouldNotSetup();
    internal static string get_DisplayName_Sql100Dsp();
    internal static string get_DisplayName_Sql110Dsp();
    internal static string get_DisplayName_Sql120Dsp();
    internal static string get_DisplayName_Sql130Dsp();
    internal static string get_DisplayName_Sql140Dsp();
    internal static string get_DisplayName_Sql150Dsp();
    internal static string get_DisplayName_Sql90Dsp();
    internal static string get_DisplayName_SqlAzureDsp();
    internal static string get_DuplicateNameInNameValuePairs();
    internal static string get_EE_BatchError_Exception();
    internal static string get_EE_BatchExecutionError_Halting();
    internal static string get_EE_BatchExecutionError_Ignoring();
    internal static string get_EE_BatchExecutionInfo_RowsAffected();
    internal static string get_EE_BatchSqlMessageNoLineInfo();
    internal static string get_EE_BatchSqlMessageNoProcedureInfo();
    internal static string get_EE_BatchSqlMessageWithProcedureInfo();
    internal static string get_EE_ExecutionError_CommandNotSupported();
    internal static string get_EE_ExecutionError_InvalidPath();
    internal static string get_EE_ExecutionError_ReadingFile();
    internal static string get_EE_ExecutionError_VariableNotFound();
    internal static string get_EE_ExecutionInfo_FinalizingLoop();
    internal static string get_EE_ExecutionInfo_InitilizingLoop();
    internal static string get_EE_ExecutionInfo_QueryCancelledbyUser();
    internal static string get_EE_ExecutionNotYetCompleteError();
    internal static string get_EE_ScriptError_Error();
    internal static string get_EE_ScriptError_FatalError();
    internal static string get_EE_ScriptError_ParsingSyntax();
    internal static string get_EE_ScriptError_Warning();
    internal static string get_ErrorString_TooManyErrors();
    internal static string get_ExceptionArrayWithNullOrEmptyString();
    internal static string get_ExceptionEmptyCollection();
    internal static string get_ExceptionEmptyString();
    internal static string get_ExceptionEnumerationNotDefined();
    internal static string get_ExceptionExpectedType();
    internal static string get_ExceptionIndexOutOfRange();
    internal static string get_ExceptionInvalidNullNameArgument();
    internal static string get_ExceptionMaxLengthExceeded();
    internal static string get_ExceptionNullOrWhiteSpaceString();
    internal static string get_ExceptionUnexpected();
    internal static string get_FulltextIndexDisplayName();
    internal static string get_FullTextIndexName();
    internal static string get_FunctionBody();
    internal static string get_FunctionImplementation();
    internal static string get_Import_MergingChildren();
    internal static string get_InlineConstraintOnDisplayName();
    internal static string get_IntegerRange_EndLessThanBegin();
    internal static string get_InvalidNameValuePairFormat();
    internal static string get_MasterKeyName();
    internal static string get_NonClusteredIndex_LabelPart();
    internal static string get_NonUniqueIndex_LabelPart();
    internal static string get_Not_connected();
    internal static string get_PartitionValue();
    internal static string get_Permission();
    internal static string get_PredeployScriptAlreadyDeployed();
    internal static string get_PredeployVerifyDatabaseCompat();
    internal static string get_PredeployVerifyDatabaseExists();
    internal static string get_PredeployVerifyDatabaseExistsUnknownServer();
    internal static string get_PredeployVerifyDatabaseName();
    internal static string get_PredeployVerifyDatabaseState();
    internal static string get_PredeployVerifyDatabaseWritable();
    internal static string get_PredeployVerifyServerName();
    internal static string get_PredeployVerifyServerVersion();
    internal static string get_PrimaryXML_LabelPart();
    internal static string get_PublishScriptGenerator_GeneratedScript();
    internal static string get_Registry_CannotAccessInstallDirKey();
    internal static string get_ReportBuilder_None();
    internal static string get_ReportBuilder_QualifiedName();
    internal static string get_Schema_CannotFoundConstraint();
    internal static string get_Schema_CannotFoundTrigger();
    internal static string get_Schema_ChildWithoutName();
    internal static string get_Schema_NoMultipleConstraintsInOneStatement();
    internal static string get_Schema_NoMultipleObjectsInOneFile();
    internal static string get_Schema_NoObjectIDFound();
    internal static string get_Schema_ObjectIsAlreadyCreated();
    internal static string get_Schema_ObjectNotFound();
    internal static string get_SchemaDependencyInfoMessage();
    internal static string get_SchemaDependencyInfoMessage2();
    internal static string get_SecondaryXML_LabelPart();
    internal static string get_Serialize_Relationships();
    internal static string get_SettingsRequireSysAdmin();
    internal static string get_SignatureName_NoSignable();
    internal static string get_SignatureName_WithSignable();
    internal static string get_SolutionExplorer_SchemaObjects();
    internal static string get_SqlConnectionApplicationName_BuildAndDeploy();
    internal static string get_SqlConnectionApplicationName_Default();
    internal static string get_SqlConnectionApplicationName_DesignDatabaseManager();
    internal static string get_SqlConnectionApplicationName_ReverseEngineeringFeature();
    internal static string get_SqlConnectionApplicationName_SchemaCompare();
    internal static string get_SqlDeployment_Done();
    internal static string get_SystemDefinedSqlCmdVariableFound();
    internal static string get_TaskHostWorkLoadDescription();
    internal static string get_Threading_InvalidStateChange();
    internal static string get_Threading_JobAlreadyManaged();
    internal static string get_Threading_JobListChangedJobName();
    internal static string get_Threading_JobManagerNotInitialized();
    internal static string get_TypeDescription_Aggregate();
    internal static string get_TypeDescription_ApplicationRole();
    internal static string get_TypeDescription_Assembly();
    internal static string get_TypeDescription_AssemblyFile();
    internal static string get_TypeDescription_AsymmetricKey();
    internal static string get_TypeDescription_BrokerPriority();
    internal static string get_TypeDescription_BuiltInServerRole();
    internal static string get_TypeDescription_BuiltInType();
    internal static string get_TypeDescription_Certificate();
    internal static string get_TypeDescription_CheckConstraint();
    internal static string get_TypeDescription_Column();
    internal static string get_TypeDescription_ColumnEncryptionKey();
    internal static string get_TypeDescription_ColumnMasterKey();
    internal static string get_TypeDescription_ColumnStoreIndex();
    internal static string get_TypeDescription_ComputedColumn();
    internal static string get_TypeDescription_Contract();
    internal static string get_TypeDescription_Credential();
    internal static string get_TypeDescription_CryptographicProvider();
    internal static string get_TypeDescription_CustomErrorMessage();
    internal static string get_TypeDescription_DatabaseAuditSpecification();
    internal static string get_TypeDescription_DatabaseEncryptionKey();
    internal static string get_TypeDescription_DatabaseOptions();
    internal static string get_TypeDescription_DatabaseScopedCredential();
    internal static string get_TypeDescription_DataCompressionOption();
    internal static string get_TypeDescription_Default();
    internal static string get_TypeDescription_DefaultConstraint();
    internal static string get_TypeDescription_Endpoint();
    internal static string get_TypeDescription_EventNotification();
    internal static string get_TypeDescription_EventSession();
    internal static string get_TypeDescription_ExtendedProperty();
    internal static string get_TypeDescription_File();
    internal static string get_TypeDescription_Filegroup();
    internal static string get_TypeDescription_FileTable();
    internal static string get_TypeDescription_ForeignKey();
    internal static string get_TypeDescription_FullTextCatalog();
    internal static string get_TypeDescription_FullTextIndex();
    internal static string get_TypeDescription_FullTextStopList();
    internal static string get_TypeDescription_Index();
    internal static string get_TypeDescription_LinkedServer();
    internal static string get_TypeDescription_LinkedServerLogin();
    internal static string get_TypeDescription_Login();
    internal static string get_TypeDescription_MasterKey();
    internal static string get_TypeDescription_MessageType();
    internal static string get_TypeDescription_Parameter();
    internal static string get_TypeDescription_PartitionFunction();
    internal static string get_TypeDescription_PartitionScheme();
    internal static string get_TypeDescription_Permission();
    internal static string get_TypeDescription_PrimaryKey();
    internal static string get_TypeDescription_Procedure();
    internal static string get_TypeDescription_Queue();
    internal static string get_TypeDescription_RemoteServiceBinding();
    internal static string get_TypeDescription_Role();
    internal static string get_TypeDescription_RoleMembership();
    internal static string get_TypeDescription_Route();
    internal static string get_TypeDescription_Rule();
    internal static string get_TypeDescription_ScalarFunction();
    internal static string get_TypeDescription_Schema();
    internal static string get_TypeDescription_SearchPropertyList();
    internal static string get_TypeDescription_SecurityPolicy();
    internal static string get_TypeDescription_Sequence();
    internal static string get_TypeDescription_ServerAudit();
    internal static string get_TypeDescription_ServerAuditSpecification();
    internal static string get_TypeDescription_ServerOptions();
    internal static string get_TypeDescription_ServerRole();
    internal static string get_TypeDescription_ServerRoleMembership();
    internal static string get_TypeDescription_Service();
    internal static string get_TypeDescription_Signature();
    internal static string get_TypeDescription_SpatialIndex();
    internal static string get_TypeDescription_SqlType();
    internal static string get_TypeDescription_Statistic();
    internal static string get_TypeDescription_SymmetricKey();
    internal static string get_TypeDescription_Synonym();
    internal static string get_TypeDescription_Table();
    internal static string get_TypeDescription_TableFunction();
    internal static string get_TypeDescription_Trigger();
    internal static string get_TypeDescription_UniqueConstraint();
    internal static string get_TypeDescription_User();
    internal static string get_TypeDescription_UserDefinedDataType();
    internal static string get_TypeDescription_UserDefinedTableType();
    internal static string get_TypeDescription_UserDefinedType();
    internal static string get_TypeDescription_View();
    internal static string get_TypeDescription_WorkloadClassifier();
    internal static string get_TypeDescription_WorkloadGroup();
    internal static string get_TypeDescription_XmlIndex();
    internal static string get_TypeDescription_XmlSchemaCollection();
    internal static string get_UnbindTableDependencies();
    internal static string get_UniqueIndex_LabelPart();
    internal static string get_Unnamed();
    internal static string get_UnsupportedConnectionStringArgument();
    internal static string get_WarningUpdateMemoryOptimizedObjects();
    internal static string get_WarningUpdateLargeTable();
    internal static string get_XmlIndex_Path();
    internal static string get_XmlIndex_Property();
    internal static string get_XmlIndex_Value();
    internal static string get_XmlSerialization_CannotDeserializeType();
    internal static string get_XmlSerialization_CannotGetValidType();
    internal static string get_XmlSerialization_CannotParseToEnum();
    internal static string get_XmlSerialization_CannotToAttribute();
    internal static string get_XmlSerialization_DuplicateAttribute();
    internal static string get_XmlSerialization_DuplicateKey();
    internal static string get_XmlSerialization_DuplicateXmlInclude();
    internal static string get_XmlSerialization_EmptyContent();
    internal static string get_XmlSerialization_IncompatiableType();
    internal static string get_XmlSerialization_InvalidEnumValue();
    internal static string get_XmlSerialization_InvalidXmlReaderPosition();
    internal static string get_XmlSerialization_KeyIsNull();
    internal static string get_XmlSerialization_NameReserved();
    internal static string get_XmlSerialization_ReuseNames();
    internal static string get_XmlSerialization_WrongType();
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.ComponentsExceptionFactory : object {
    public static void TraceException(Exception ex);
    public static ArgumentException CreateArgumentException();
    public static ArgumentException CreateArgumentException(string message);
    public static ArgumentException CreateArgumentException(string message, Exception innerException);
    public static ArgumentException CreateArgumentException(string message, string paramName);
    public static ArgumentException CreateArgumentException(string message, string paramName, Exception innerException);
    public static ArgumentNullException CreateArgumentNullException();
    public static ArgumentNullException CreateArgumentNullException(string paramName);
    public static ArgumentNullException CreateArgumentNullException(string message, Exception innerException);
    public static ArgumentNullException CreateArgumentNullException(string paramName, string message);
    public static ObjectDisposedException CreateObjectDisposedException(string objectName);
    public static ObjectDisposedException CreateObjectDisposedException(string message, Exception innerException);
    public static ObjectDisposedException CreateObjectDisposedException(string objectName, string message);
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.DacContractException : Exception {
    protected DacContractException(string message);
    protected DacContractException(string message, Exception innerException);
    protected DacContractException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.DacPackageException : Exception {
    public DacPackageException(string message);
    public DacPackageException(string message, Exception innerException);
    private DacPackageException(SerializationInfo info, StreamingContext context);
    public DacPackageException(Exception innerException);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.DatabaseChangeModel : object {
    private static Dictionary`2<SqlPlatforms, string> _masterReferenceFiles;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _addMasterSymbols;
    private static string DefaultDatabaseAuthorizer;
    private SqlConnectionFactory _connectionFactory;
    private object _initializeLock;
    private List`1<DataSchemaError> _initializeErrors;
    private List`1<Action`1<DatabaseChangeModel>> _initializeCallbacks;
    private ExtensionManager _em;
    private SqlScriptDomGenerator _scriptDom;
    private SqlScriptGenerator _scriptGen;
    private TSqlParser _parser;
    private bool _disposed;
    private SqlSchemaModel _targetModel;
    private OnDemandRetriever _targetRetriever;
    private string _defaultSchema;
    [CompilerGeneratedAttribute]
private DateTime <LastUse>k__BackingField;
    internal SqlScriptGenerator ScriptGen { get; }
    public bool Disposed { get; }
    public SqlConnectionFactory ConnectionFactory { get; }
    public string DefaultSchema { get; }
    public DateTime LastUse { get; public set; }
    public IList`1<DataSchemaError> InitializeErrors { get; }
    public static bool AddMasterSymbols { get; public set; }
    public DatabaseChangeModel(SqlConnectionFactory connectionFactory);
    public DatabaseChangeModel(SqlPlatforms sqlPlatform);
    private static DatabaseChangeModel();
    internal SqlScriptGenerator get_ScriptGen();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public static void AddMasterReferenceFile(SqlPlatforms platform, string file);
    public static ISqlModelElement GetElement(SqlSchemaModel model, ModelElementClass elementType, IList`1<string> nameParts);
    public static bool IsUnnamedElementClass(ModelElementClass elementType);
    public static T GetElement(SqlSchemaModel model, IList`1<string> nameParts);
    public static IList`1<IModelElement> LookupUnnamedElements(SqlSchemaModel model, Type interfaceType, TSqlFragment frag);
    public static ISqlModelElement GetTopLevelElement(ISqlModelElement element, bool treatConstraintsAsComposed);
    public static SqlModelBuilder CreateModelBuilder(SqlSchemaModel model, IDataSchemaModelController controller);
    public static ModelIdentifier GetElementName(ISqlModelElement element);
    public static void VisitReferencingElements(SqlSchemaModel model, ModelElementClass elementType, ModelIdentifier id, HashSet`1<ModelRelationshipType> relationshipsToInclude, Action`1<ISqlModelElement> visit);
    public static void VisitReferencingElements(SqlSchemaModel model, ModelElementClass elementType, ModelIdentifier id, Predicate`1<IModelRelationshipEntry> includeEntry, Action`1<ISqlModelElement> visit);
    public static bool DeleteElementHelper(ChildDelete deleteBehavior, ISqlModelElement child);
    public static void RemovePermissions(SqlSchemaModel model, SqlModelBuilder builder, SqlElementDescriptor securedDesc);
    public static void DeleteElement(SqlModelBuilder modelBuilder, ISqlModelElement element, ChildDelete deleteBehavior);
    public static void DeleteElement(SqlModelBuilder modelBuilder, ISqlModelElement element, Predicate`1<ISqlModelElement> deleteBehavior);
    internal static void DoDeleteElement(SqlModelBuilder modelBuilder, ISqlModelElement toDelete, bool includeHierarchical);
    public bool get_Disposed();
    public SqlConnectionFactory get_ConnectionFactory();
    public string get_DefaultSchema();
    [CompilerGeneratedAttribute]
public DateTime get_LastUse();
    [CompilerGeneratedAttribute]
public void set_LastUse(DateTime value);
    public IList`1<DataSchemaError> get_InitializeErrors();
    public static bool get_AddMasterSymbols();
    public static void set_AddMasterSymbols(bool value);
    public SqlSchemaModel GetCommitModel();
    internal OnDemandRetriever GetCommitRetriever();
    public void CreateInstantReadyComponents(SqlSchemaModel& model, IDataSchemaModelController& controller, SqlModelBuilder& mb, OnDemandRetriever& retriever);
    public void CreateDesignTimeComponents(SqlSchemaModel& model, IDataSchemaModelController& controller, SqlModelBuilder& mb, OnDemandRetriever& retriever);
    public void CallbackWhenInitializeFinished(Action`1<DatabaseChangeModel> callback);
    public void SetupDesigntimeModel(ISqlHostShutdownService shutdownService);
    public void ExecuteInitializeCompletedCallbacks();
    public static IList`1<IModelElement> GetElements(SqlSchemaModel model, SqlElementDescriptor desc);
    public ISqlModelElement DetermineParentByScript(SqlSchemaModel model, SqlElementDescriptor desc, string script);
    public string GenerateScript(ISqlModelElement element, ChildScripting scriptBehavior);
    public string GenerateScript(ISqlModelElement element, bool includeExtendedProperties, bool includePermissions, Predicate`1<ISqlModelElement> includeBehavior);
    public string GenerateScript(TSqlFragment script);
    public TSqlFragment CreateFragment(ISqlModelElement element, bool includeExtendedProperties, bool includePermissions, Predicate`1<ISqlModelElement> includeBehavior);
    private void ProcessInlineConstraints(ISqlModelElement element, Predicate`1<ISqlModelElement> includeBehavior, TSqlScript script, HashSet`1<ISqlModelElement> hierarchicalChildren);
    public void CreateCommitContext(CommitRequests requests, CommitContext& context, ISet`1& errors);
    private static DataSchemaModelException CreateException(HashSet`1<DataSchemaError> errors);
    public void SplitScript(ModelCollationComparer collationComparer, string script, List`1& scripts, IList`1& parseErrors);
    public void SplitScript(ModelCollationComparer collationComparer, string script, TSqlScript ast, List`1& scripts);
    public void AddReplaceObjects(SqlSchemaModel model, SqlModelBuilder modelBuilder, string cacheId, string script);
    private static void AddReplaceObjects(SqlSchemaModel model, SqlModelBuilder modelBuilder, string cacheId, string script, SortedList`2<int, SchemaElementRange> objectsToReplace);
    private void AppendExtendedProperties(ISqlModelElement element, TSqlScript script, Predicate`1<ISqlModelElement> includeChild);
    private void AppendExtendedProperty(TSqlScript script, SqlExtendedProperty extProp, Predicate`1<ISqlModelElement> includeChild);
    private void AppendPermissions(ISqlModelElement element, TSqlScript script, Predicate`1<ISqlModelElement> includeChild);
    private void AppendPermission(TSqlScript script, SqlPermissionStatement perm, Predicate`1<ISqlModelElement> includeChild);
    private static int ProcessDropRequests(SqlSchemaModel source, SqlModelBuilder sourceBuilder, SqlSchemaModel target, CommitRequests requests, HashSet`1<DataSchemaError> brokenObjectErrors);
    private static bool ShouldAddBreakingError(ModelElementClass typeInstanceDropped, ISqlModelElement topLevel);
    private static bool VerifyRefactorRequests(SqlSchemaModel source, CommitRequests requests, HashSet`1<DataSchemaError> refactorErrors);
    private static int ProcessRefactorRequests(SqlSchemaModel source, CommitRequests requests, HashSet`1<DataSchemaError> renameWarnings);
    private static void UpdateHierarchicalSymbolsAfterRename(ISqlModelElement element);
    private static bool IsRenameBreaking(ISqlModelElement renamed, IModelRelationshipEntry referencingEntry, ISqlModelElement referencing);
    private static SqlServerError BuildBreakingObjectError(SqlSchemaModel source, ISqlModelElement errorElement);
    private static bool ProcessErrors(ISet`1<DataSchemaError> processedErrors, IEnumerable`1<DataSchemaError> newErrors, Action`1<DataSchemaError> callback);
    private static int ProcessErrors(ErrorManager errors, HashSet`1<DataSchemaError> setupErrors);
    private static int DetectNewErrors(ErrorManager errors, HashSet`1<DataSchemaError> existingErrors, HashSet`1<DataSchemaError> setupErrors);
    private void InterpretScript(ModelCollationComparer collationComparer, TSqlScript ast, bool uninlineTableConstraint, SortedList`2& ids);
    private void ParseScript(string script, TSqlScript& ast, IList`1& parseErrors);
    private static void ClearErrors(IModelElement element);
    private SqlReverseEngineerConstructor CreateReverseEngineerConstructor();
    private void SetupCoreComponents();
    private bool SetupModel(Action`1<DataSchemaError> msgCallback, ISqlHostShutdownService shutdownService);
    private DriftResolution DetermineDriftResolution();
    private static SqlSchemaModel Clone(SqlSchemaModel modelToCopy, bool validateClone);
    private static SqlElementDescriptor EnsureTopLevelDescriptor(SqlElementDescriptor desc, SqlSchemaModel model);
    [CompilerGeneratedAttribute]
private void <SetupDesigntimeModel>b__58_0(DataSchemaError msg);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.DatabaseChangeModelException : DacContractException {
    private DatabaseChangeModelException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.DesignerElementLocator`1 : object {
    private SqlSchemaModel _model;
    private string _primarySourceName;
    private ModelIdentifier _elementName;
    private int _position;
    public string PrimarySourceName { get; }
    public ModelIdentifier ElementName { get; }
    public DesignerElementLocator`1(T element);
    public string get_PrimarySourceName();
    public ModelIdentifier get_ElementName();
    public T LocateElement();
    public static T LocateElement(SqlSchemaModel model, string primarySourceName, IList`1<string> elementNameParts, int position);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Tools.Sql.DesignServices.DesignerServicesResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PowerBuffer_AlreadyCommiting { get; }
    internal static string PowerBuffer_CouldNotRetrieveFromServer { get; }
    internal static string PowerBuffer_CouldNotRetrievePermissions { get; }
    internal static string PowerBuffer_DeletedObjectEditedError { get; }
    internal static string PowerBuffer_EditBuffer { get; }
    internal static string PowerBuffer_ErrorLine { get; }
    internal static string PowerBuffer_ErrorReportHeader { get; }
    internal static string PowerBuffer_FailedToCreateModel { get; }
    internal static string PowerBuffer_ModelDisposed { get; }
    internal static string PowerBuffer_MoreThanOneObjectFound { get; }
    internal static string PowerBuffer_NoDatabaseExtendedProperties { get; }
    internal static string PowerBuffer_NoDatabasePermissions { get; }
    internal static string PowerBuffer_NoPermissions { get; }
    internal static string PowerBuffer_NoText { get; }
    internal static string PowerBuffer_OpenBuffersNoRefresh { get; }
    internal static string PowerBuffer_OperationsDeleteCanceled { get; }
    internal static string PowerBuffer_OperationsDeleteScriptGenerated { get; }
    internal static string PowerBuffer_OperationsDeleteScriptsGenerated { get; }
    internal static string PowerBuffer_OperationsDeleteSuccess { get; }
    internal static string PowerBuffer_OperationsDisplayingPreview { get; }
    internal static string PowerBuffer_OperationsExecutingUpdateScriptOnDatabase { get; }
    internal static string PowerBuffer_OperationsGeneratingPlan { get; }
    internal static string PowerBuffer_OperationsInitializeOperation { get; }
    internal static string PowerBuffer_OperationsInitializeRefresh { get; }
    internal static string PowerBuffer_OperationsLoadModelFailure { get; }
    internal static string PowerBuffer_OperationsLoadModelSuccess { get; }
    internal static string PowerBuffer_OperationsRenameCanceled { get; }
    internal static string PowerBuffer_OperationsRenameScriptGenerated { get; }
    internal static string PowerBuffer_OperationsRenameScriptsGenerated { get; }
    internal static string PowerBuffer_OperationsRenameSuccess { get; }
    internal static string PowerBuffer_OperationsTitleDelete { get; }
    internal static string PowerBuffer_OperationsTitleLoadModel { get; }
    internal static string PowerBuffer_OperationsTitleRename { get; }
    internal static string PowerBuffer_OperationsTitleUpdate { get; }
    internal static string PowerBuffer_OperationsUpdateCanceled { get; }
    internal static string PowerBuffer_OperationsUpdateScriptGenerated { get; }
    internal static string PowerBuffer_OperationsUpdateScriptsGenerated { get; }
    internal static string PowerBuffer_OperationsUpdateSuccess { get; }
    internal static string PowerBuffer_OutputWindowName { get; }
    internal static string PowerBuffer_PermissionsBufferNamePart { get; }
    internal static string PowerBuffer_PreparingReport { get; }
    internal static string PowerBuffer_RefactorBlockedDueToErrors { get; }
    internal static string PowerBuffer_RenamedObjectEditedError { get; }
    internal static string PowerBuffer_RetrievingDefinitionFromServer { get; }
    internal static string PowerBuffer_RetrievingPermissionsFromServer { get; }
    internal static string PowerBuffer_RetrievingSchemaFromServer { get; }
    internal static string PowerBuffer_UpdatingDatabase { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PowerBuffer_AlreadyCommiting();
    internal static string get_PowerBuffer_CouldNotRetrieveFromServer();
    internal static string get_PowerBuffer_CouldNotRetrievePermissions();
    internal static string get_PowerBuffer_DeletedObjectEditedError();
    internal static string get_PowerBuffer_EditBuffer();
    internal static string get_PowerBuffer_ErrorLine();
    internal static string get_PowerBuffer_ErrorReportHeader();
    internal static string get_PowerBuffer_FailedToCreateModel();
    internal static string get_PowerBuffer_ModelDisposed();
    internal static string get_PowerBuffer_MoreThanOneObjectFound();
    internal static string get_PowerBuffer_NoDatabaseExtendedProperties();
    internal static string get_PowerBuffer_NoDatabasePermissions();
    internal static string get_PowerBuffer_NoPermissions();
    internal static string get_PowerBuffer_NoText();
    internal static string get_PowerBuffer_OpenBuffersNoRefresh();
    internal static string get_PowerBuffer_OperationsDeleteCanceled();
    internal static string get_PowerBuffer_OperationsDeleteScriptGenerated();
    internal static string get_PowerBuffer_OperationsDeleteScriptsGenerated();
    internal static string get_PowerBuffer_OperationsDeleteSuccess();
    internal static string get_PowerBuffer_OperationsDisplayingPreview();
    internal static string get_PowerBuffer_OperationsExecutingUpdateScriptOnDatabase();
    internal static string get_PowerBuffer_OperationsGeneratingPlan();
    internal static string get_PowerBuffer_OperationsInitializeOperation();
    internal static string get_PowerBuffer_OperationsInitializeRefresh();
    internal static string get_PowerBuffer_OperationsLoadModelFailure();
    internal static string get_PowerBuffer_OperationsLoadModelSuccess();
    internal static string get_PowerBuffer_OperationsRenameCanceled();
    internal static string get_PowerBuffer_OperationsRenameScriptGenerated();
    internal static string get_PowerBuffer_OperationsRenameScriptsGenerated();
    internal static string get_PowerBuffer_OperationsRenameSuccess();
    internal static string get_PowerBuffer_OperationsTitleDelete();
    internal static string get_PowerBuffer_OperationsTitleLoadModel();
    internal static string get_PowerBuffer_OperationsTitleRename();
    internal static string get_PowerBuffer_OperationsTitleUpdate();
    internal static string get_PowerBuffer_OperationsUpdateCanceled();
    internal static string get_PowerBuffer_OperationsUpdateScriptGenerated();
    internal static string get_PowerBuffer_OperationsUpdateScriptsGenerated();
    internal static string get_PowerBuffer_OperationsUpdateSuccess();
    internal static string get_PowerBuffer_OutputWindowName();
    internal static string get_PowerBuffer_PermissionsBufferNamePart();
    internal static string get_PowerBuffer_PreparingReport();
    internal static string get_PowerBuffer_RefactorBlockedDueToErrors();
    internal static string get_PowerBuffer_RenamedObjectEditedError();
    internal static string get_PowerBuffer_RetrievingDefinitionFromServer();
    internal static string get_PowerBuffer_RetrievingPermissionsFromServer();
    internal static string get_PowerBuffer_RetrievingSchemaFromServer();
    internal static string get_PowerBuffer_UpdatingDatabase();
}
public class Microsoft.Data.Tools.Sql.DesignServices.DesignerValidationException : Exception {
    internal DesignerValidationException(string message);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.DeveloperInstanceException : DacContractException {
    public DeveloperInstanceException(string message);
    public DeveloperInstanceException(string message, Exception innerException);
    private DeveloperInstanceException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.ElementLocatorUtils : object {
    public static int GetElementPosition(ISqlModelElement modelElement);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.ExceptionFactory : object {
    public static void TraceException(Exception ex);
    public static ArgumentException CreateArgumentException();
    public static ArgumentException CreateArgumentException(string message);
    public static ArgumentException CreateArgumentException(string message, Exception innerException);
    public static ArgumentException CreateArgumentException(string message, string paramName);
    public static ArgumentException CreateArgumentException(string message, string paramName, Exception innerException);
    public static ArgumentNullException CreateArgumentNullException();
    public static ArgumentNullException CreateArgumentNullException(string paramName);
    public static ArgumentNullException CreateArgumentNullException(string message, Exception innerException);
    public static ArgumentNullException CreateArgumentNullException(string paramName, string message);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException();
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string message, Exception innerException);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, string message);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static InvalidOperationException CreateInvalidOperationException(string message);
    public static InvalidOperationException CreateInvalidOperationException(string message, Exception innerException);
    public static ObjectDisposedException CreateObjectDisposedException(string objectName);
    public static ObjectDisposedException CreateObjectDisposedException(string message, Exception innerException);
    public static ObjectDisposedException CreateObjectDisposedException(string objectName, string message);
    public static OperationCanceledException CreateOperationCanceledException();
    public static OperationCanceledException CreateOperationCanceledException(string message);
    public static OperationCanceledException CreateOperationCanceledException(string message, Exception innerException);
    public static InvalidReferenceExceptionEx CreateInvalidReferenceExceptionEx(string message);
    public static DeveloperInstanceException CreateDeveloperInstanceException(string message);
    public static DeveloperInstanceException CreateDeveloperInstanceException(string message, Exception innerException);
    public static NotImplementedException CreateNotImplementedException(string message);
    public static InvalidDataException CreateInvalidDataException(string message);
    public static IndexOutOfRangeException CreateIndexOutOfRangeException(string message);
    public static void AddData(Exception ex, object key, object value);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.InvalidReferenceExceptionEx : Exception {
    public InvalidReferenceExceptionEx(string msg);
    private InvalidReferenceExceptionEx(SerializationInfo info, StreamingContext context);
}
[GuidAttribute("008BBF6E-A99D-4ECF-9308-B98E9A8F9F59")]
internal interface Microsoft.Data.Tools.Sql.DesignServices.ISqlHostShutdownService {
    public bool IsZombie { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_HostShuttingDown(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HostShuttingDown(EventHandler`1<EventArgs> value);
    public abstract virtual bool get_IsZombie();
    public abstract virtual int RequestWait();
    public abstract virtual void WaitNoLonger(int cookie);
}
internal interface Microsoft.Data.Tools.Sql.DesignServices.ISqlModelUpdatingService {
    public abstract virtual void InsertSimpleColumnAtLastIndex(SqlTable table, string columnName);
    public abstract virtual void InsertSimpleColumnAt(SqlTable table, string columnName, int index);
    public abstract virtual void InsertSimpleColumnBuiltInDataTypeAt(SqlTable table, string columnName, int index, string typeSpec, bool nullable);
    public abstract virtual void InsertComputedColumnAt(SqlTable table, string columnName, int index, string expression);
    public abstract virtual void DeleteColumn(SqlColumn column);
    public abstract virtual void DeleteColumns(IEnumerable`1<SqlColumn> column);
    public abstract virtual void SetColumnNullable(SqlSimpleColumn column, bool isNullable);
    public abstract virtual void SetColumnIsIdentity(SqlSimpleColumn column, bool isIdentity);
    public abstract virtual void SetColumnIdentitySeed(SqlSimpleColumn column, SqlDecimal seed);
    public abstract virtual void SetColumnIdentityIncrement(SqlSimpleColumn column, SqlDecimal increment);
    public abstract virtual void SetColumnDataType(SqlSimpleColumn column, SqlType newType);
    public abstract virtual void SetColumnBuiltInDataType(SqlSimpleColumn column, string typeSpec);
    public abstract virtual void SetColumnDataTypeLength(SqlSimpleColumn column, int length, bool isMax);
    public abstract virtual void SetColumnDataTypePrecision(SqlSimpleColumn column, int precision);
    public abstract virtual void SetColumnDataTypeScale(SqlSimpleColumn column, int scale);
    public abstract virtual void SetXmlColumnStyle(SqlSimpleColumn column, bool isXmlDocument);
    public abstract virtual void SetXmlColumnXmlSchema(SqlSimpleColumn column, SqlXmlSchemaCollection xmlSchema);
    public abstract virtual void SetColumnDefaultValue(SqlSimpleColumn column, string expression);
    public abstract virtual void SetSequenceToDefaultValue(SqlSimpleColumn column, SqlSequence sequence);
    public abstract virtual void SetNewSequenceAndAssociateToDefaultConstraint(SqlTable table, SqlSimpleColumn column, string name);
    public abstract virtual void SetComputedColumnExpression(SqlComputedColumn column, string expression);
    public abstract virtual void SetComputedColumnIsPersisted(SqlComputedColumn column, bool isPersisted);
    public abstract virtual void SetComputedColumnIsPersistedNullable(SqlComputedColumn column, bool isPersistedNullable);
    public abstract virtual bool IsTypeSpecValid(SqlSimpleColumn column, string typeSpec);
    public abstract virtual void AddCheckConstraint(SqlTable table, string constraintName);
    public abstract virtual void DeleteCheckConstraint(SqlCheckConstraint sqlChk);
    public abstract virtual void DeleteEdgeConstraint(SqlEdgeConstraint edgeConstraint);
    public abstract virtual void SetCheckConstraintExpression(SqlCheckConstraint constraint, string expression);
    public abstract virtual void AddPrimaryKeyConstraint(SqlTable table, IEnumerable`1<SqlColumn> columns);
    public abstract virtual void AddPrimaryKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> columns);
    public abstract virtual void DeletePrimaryKeyConstraint(SqlPrimaryKeyConstraint primaryKeyConstraint);
    public abstract virtual void SetPrimaryKey(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> columns);
    public abstract virtual void RemovePrimaryKey(SqlTable table);
    public abstract virtual void SetPrimaryKeyIsClustered(SqlPrimaryKeyConstraint primaryKey, bool isClustered);
    public abstract virtual void UpdatePrimaryKeyColumns(SqlPrimaryKeyConstraint primaryKeyConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public abstract virtual void AddUniqueConstraint(SqlTable table, string constraintName);
    public abstract virtual void DeleteUniqueKeyConstraint(SqlUniqueConstraint uniqueConstraint);
    public abstract virtual void SetUniqueConstraintIsClustered(SqlUniqueConstraint uniqueConstraint, bool isClustered);
    public abstract virtual void UpdateUniqueConstraintColumns(SqlUniqueConstraint uniqueConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public abstract virtual void AddForeignKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> referencingColumns, SqlTableBase referencedTable, IEnumerable`1<SqlColumn> referencedColumns);
    public abstract virtual void DeleteForeignKeyConstraint(SqlForeignKeyConstraint foreignKeyConstraint);
    public abstract virtual void SetForeignKeyForeignTable(SqlForeignKeyConstraint constraint, SqlTable referencedTable);
    public abstract virtual void InsertForeignKeyForeignColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public abstract virtual void InsertForeignKeyColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public abstract virtual void SetForeignKeyForeignColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    public abstract virtual void SetForeignKeyColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    public abstract virtual void AddDefaultConstraint(SqlSimpleColumn column, string expression);
    public abstract virtual void DeleteDefaultConstraint(SqlDefaultConstraint defaultConstraint);
    public abstract virtual void SetDefaultConstraintExpression(SqlDefaultConstraint constraint, string expression);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeUpdatingScripts(EventHandler`1<BeforeModelUpdateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeUpdatingScripts(EventHandler`1<BeforeModelUpdateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeResolveChanges(EventHandler`1<BeforeResolveChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeResolveChanges(EventHandler`1<BeforeResolveChangesEventArgs> value);
    public abstract virtual void RenameElement(ISqlModelElement modelElement, string newName);
    public abstract virtual void AddExtendedProperty(ISqlExtendedPropertyHost propertyHost, string propertyName, string value);
    public abstract virtual void SetExtendedProperty(SqlExtendedProperty extendedProperty, string value);
    public abstract virtual void DeleteExtendedProperty(SqlExtendedProperty extendedProperty);
    public abstract virtual List`1<ISqlModelElement> SetDescriptionForElement(ISqlExtendedPropertyHost propertyHost, string value);
    public abstract virtual void ExecuteUpdateModelOperation(Action operation);
    public abstract virtual void CreateIndex(SqlTable table, string name);
    public abstract virtual void DeleteIndex(SqlIndex sqlIndex);
    public abstract virtual void SetIndexIsClustered(SqlIndex sqlIndex, bool isClustered);
    public abstract virtual void SetIndexIsUnique(SqlIndex sqlIndex, bool isUnique);
    public abstract virtual void CreateXmlIndex(SqlTable table, string name, bool isPrimary);
    public abstract virtual void DeleteXmlIndex(SqlXmlIndex sqlXmlIndex);
    public abstract virtual void CreateSelectiveXmlIndex(SqlTable table, string name, bool isPrimary);
    public abstract virtual void DeleteSelectiveXmlIndex(SqlSelectiveXmlIndex sqlSelectiveXmlIndex);
    public abstract virtual void CreateSpatialIndex(SqlTable table, string name);
    public abstract virtual void DeleteSpatialIndex(SqlSpatialIndex sqlSpatial);
    public abstract virtual void CreateFullTextIndex(SqlTable table);
    public abstract virtual void DeleteFullTextIndex(SqlFullTextIndex sqlFullTextIndex);
    public abstract virtual void CreateColumnStoreIndex(SqlTable table, string name);
    public abstract virtual void DeleteColumnStoreIndex(SqlColumnStoreIndex columnStoreIndex);
    public abstract virtual void UpdateIndexColumns(SqlIndex sqlIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public abstract virtual void UpdateColumnStoreIndexColumns(SqlColumnStoreIndex columnStoreIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public abstract virtual void DeleteSubroutine(SqlSubroutine subroutine);
    public abstract virtual void AddTable(string schemaName, string tableName);
    public abstract virtual void DeleteTable(SqlTable table);
    public abstract virtual void MergeTable(IEnumerable`1<SqlColumn> sourceColumns, SqlTable targetTable);
    public abstract virtual void CreateDmlTrigger(SqlTable table, string triggerName);
    public abstract virtual void DeleteDmlTrigger(SqlDmlTrigger sqlTrigger);
    public abstract virtual void DeleteView(SqlView view);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.BeforeModelUpdateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable`1<SqlScriptUpdateInfo> <Updates>k__BackingField;
    public IEnumerable`1<SqlScriptUpdateInfo> Updates { get; private set; }
    public BeforeModelUpdateEventArgs(IEnumerable`1<SqlScriptUpdateInfo> updates);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SqlScriptUpdateInfo> get_Updates();
    [CompilerGeneratedAttribute]
private void set_Updates(IEnumerable`1<SqlScriptUpdateInfo> value);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.ErrorUpdater : object {
    private SqlSchemaModel _model;
    private IList`1<DataSchemaError> _allErrors;
    private IList`1<SqlValidationProblemInfo> _allProblems;
    public ErrorUpdater(SqlSchemaModel model);
    public void UpdateErrors(SqlScriptUpdateInfo updateInfo, string newScript, StringPositionConverter newScriptPositionConverter);
    private static void UpdateErrorsImpl(SqlScriptUpdateInfo updateInfo, ErrorProxy`1<T> errorProxy, StringPositionConverter oldScriptPositionConverter, StringPositionConverter newScriptPositionConverter);
    private static bool TryGetNextError(ErrorProxy`1<T> errorProxy, StringPositionConverter oldScriptPositionConverter, T& error, Int32& errorOffset);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.ScriptBuilderDelegate : MulticastDelegate {
    public ScriptBuilderDelegate(object object, IntPtr method);
    public virtual void Invoke(ScriptFragmentGenerator fragmentGenerator);
    public virtual IAsyncResult BeginInvoke(ScriptFragmentGenerator fragmentGenerator, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.ScriptFragmentGenerator : object {
    private static Dictionary`2<TSqlTokenType, string> KeywordNames;
    private StringBuilder _stringBuilderForScript;
    private SqlScriptGeneratorOptions _defaultScriptGeneratorOptions;
    private static ScriptFragmentGenerator();
    public void AppendSpace(int repeat);
    public void AppendNewLine();
    public void AppendIndentationForNewItem();
    public void AppendKeyword(TSqlTokenType tokenType);
    public void AppendDelimiter(TSqlTokenType tokenType);
    public void AppendContextualKeyword(string word);
    public void AppendIdentifier(string value, bool encode);
    public void AppendToken(TSqlParserToken token);
    public void AppendText(string text);
    public string GetScriptFragment();
    public static string GenerateKeyword(TSqlTokenType tokenType);
    public static string GenerateKeyword(string word);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlModelUpdater : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeModelUpdateEventArgs> BeforeModelUpdate;
    private SqlSchemaModel _model;
    private IDataSchemaModelController _modelController;
    private SqlScriptUpdater _scriptUpdater;
    private DeleteActions _deleteActions;
    public SqlModelUpdater(SqlSchemaModel model, IDataSchemaModelController modelController, DeleteActions deleteActions);
    [CompilerGeneratedAttribute]
public void add_BeforeModelUpdate(EventHandler`1<BeforeModelUpdateEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeModelUpdate(EventHandler`1<BeforeModelUpdateEventArgs> value);
    private static void SetDefaultTypeSpecifierProperties(SqlTypeSpecifier typeSpec, SqlDataType sqlType);
    private static bool SameXmlSchema(SqlXmlSchemaCollection newXmlSchema, IModelRelationshipEntry xmlSchemaEntry);
    private static void ValidateColumnIndex(int count, int index);
    private void ValidateIdentifier(IModelElement element, string identifier, string parameterName);
    private static void ValidateIdentifier(TSqlParser parser, string identifier, string parameterName);
    internal static void ValidateScalarExpression(TSqlParser parser, string expression);
    private static void ValidateBooleanExpression(TSqlParser parser, string expression);
    private static void DeleteFromForeignKeys(SqlColumn column);
    private void DeleteFromIndexes(SqlColumn column);
    private void DeleteFromPrimaryKey(SqlColumn column);
    private static Tuple`2<int, int> CreateExcludingRangeForDeleteColumn(SqlTable table, int endingOffset);
    private static ColumnDefinition GetColumnAst(SqlTable table, int columnIndex);
    private IList`1<SqlScriptUpdateInfo> NotifyModelUpdate(IList`1<SqlScriptUpdateInfo> updates);
    private static List`1<string> GetNewName(ISqlModelElement element, string newName);
    public void RenameElement(ISqlModelElement element, string newName);
    public void AddExtendedProperty(ISqlExtendedPropertyHost host, string name, string value);
    public void SetExtendedProperty(SqlExtendedProperty extendedProperty, string value);
    public IList`1<SqlScriptUpdateInfo> DeleteExtendedProperty(SqlExtendedProperty extendedProperty);
    public IList`1<SqlScriptUpdateInfo> CreateIndex(SqlTable table, string name);
    public IList`1<SqlScriptUpdateInfo> CreateXmlIndex(SqlTable table, string name, bool isPrimary);
    public IList`1<SqlScriptUpdateInfo> CreateSelectiveXmlIndex(SqlTable table, string name, bool isPrimary);
    public IList`1<SqlScriptUpdateInfo> CreateSpatialIndex(SqlTable table, string name);
    public IList`1<SqlScriptUpdateInfo> CreateFullTextIndex(SqlTable table);
    public IList`1<SqlScriptUpdateInfo> CreateColumnStoreIndex(SqlTable table, string name);
    public IList`1<SqlScriptUpdateInfo> CreateDmlTrigger(SqlTable table, string name);
    public IList`1<SqlScriptUpdateInfo> DeleteTable(SqlTable table);
    public IList`1<SqlScriptUpdateInfo> DeleteView(SqlView view);
    public IList`1<SqlScriptUpdateInfo> DeleteSubroutine(SqlSubroutine subroutine);
    public IList`1<SqlScriptUpdateInfo> DeleteIndex(SqlIndex index);
    public IList`1<SqlScriptUpdateInfo> DeleteXmlIndex(SqlXmlIndex xmlIndex);
    public IList`1<SqlScriptUpdateInfo> DeleteSelectiveXmlIndex(SqlSelectiveXmlIndex selectiveXmlIndex);
    public IList`1<SqlScriptUpdateInfo> DeleteSpatialIndex(SqlSpatialIndex spatialIndex);
    public IList`1<SqlScriptUpdateInfo> DeleteFullTextIndex(SqlFullTextIndex fullTextIndex);
    public IList`1<SqlScriptUpdateInfo> DeleteTrigger(SqlDmlTrigger trigger);
    public IList`1<SqlScriptUpdateInfo> DeleteColumnStoreIndex(SqlColumnStoreIndex columnStoreIndex);
    public IList`1<SqlScriptUpdateInfo> SetIndexIsClustered(SqlIndex index, bool isClustered);
    public IList`1<SqlScriptUpdateInfo> SetIndexIsUnique(SqlIndex index, bool isUnique);
    public IList`1<SqlScriptUpdateInfo> InsertFullTextIndexColumnAt(SqlFullTextIndex fullTextIndex, int index, SqlColumn column);
    public IList`1<SqlScriptUpdateInfo> UpdateIndexColumns(SqlIndex sqlIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public IList`1<SqlScriptUpdateInfo> UpdateColumnStoreIndexColumns(SqlColumnStoreIndex sqlColumnStoreIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public void ExecuteUpdateModelOperation(Action action);
    private static TSqlFragment GetLastTableItem(CreateTableStatement tableAst);
    private static SourceCodePosition FindPrimaryPosition(IEnumerable`1<SourceCodePosition> positions);
    private static bool IsXmlType(SqlType sqlType);
    private List`1<ScriptHandle> GetUpdatedHandles(IList`1<SqlScriptUpdateInfo> updates);
    private void UpdatePositions(IList`1<SqlScriptUpdateInfo> updates, Tuple`2<int, int> excludingRange);
    private void UpdatePositionsAndScriptCache(IList`1<SqlScriptUpdateInfo> updates, Tuple`2<int, int> excludingRange, bool updateScriptCache);
    private void UpdatePositionsAndScriptCache(IList`1<SqlScriptUpdateInfo> updates, IList`1<ScriptHandle> handles, Tuple`2<int, int> excludingRange, bool updateScriptCache);
    private void UpdateAnnotationSourcePositions(string filename, int startOffset, int lengthDelta, bool insertBefore, Tuple`2<int, int> excludingRange, StringPositionConverter positionConverter);
    private static void UpdataAnnotationPosition(IModelAnnotation anno, int startOffset, int lengthDelta, bool insertBefore, Tuple`2<int, int> excludingRange, StringPositionConverter positionConverter);
    private static void UpdatePosition(int originalLength, int originalOffset, int startOffset, int delta, bool insertBefore, Tuple`2<int, int> excludingRange, StringPositionConverter positionConverter, Action`1<int> setLength, Action`1<int> setOffset, Action`1<int> setLine, Action`1<int> setColumn);
    private ScriptHandle GetUpdatedHandle(SqlScriptUpdateInfo updateInfo);
    private static void AggregateUpdates(IEnumerable`1<SqlScriptUpdateItem> updates, Int32& startOffset, Int32& lengthDelta, Boolean& insertBefore);
    private static Tuple`2<int, int> CreateExcludingRange(TSqlFragment fragment);
    public void DeleteElement(ISqlModelElement element);
    internal static void ResetValidationStatus(IModelElement element);
    private static void ResetValidationStatusImpl(IModelElement element);
    public IList`1<SqlScriptUpdateInfo> DeleteColumn(SqlColumn column);
    public IList`1<SqlScriptUpdateInfo> SetColumnDataType(SqlSimpleColumn column, SqlType newType);
    private static void AdjustNullability(SqlSimpleColumn column, SqlType newType);
    public IList`1<SqlScriptUpdateInfo> SetColumnDataTypeLength(SqlSimpleColumn column, int length, bool isMax);
    public IList`1<SqlScriptUpdateInfo> SetColumnDataTypePrecision(SqlSimpleColumn column, int precision);
    public IList`1<SqlScriptUpdateInfo> SetColumnDataTypeScale(SqlSimpleColumn column, int scale);
    public void RefactorRenameColumnInTableScope(SqlColumn column, string newName);
    public IList`1<SqlScriptUpdateInfo> SetColumnNullable(SqlSimpleColumn column, bool isNullable);
    public void SetColumnIsIdentity(SqlSimpleColumn column, bool isIdentity);
    public void SetColumnIdentitySeed(SqlSimpleColumn column, SqlDecimal seed);
    public void SetColumnIdentityIncrement(SqlSimpleColumn column, SqlDecimal increment);
    public IList`1<SqlScriptUpdateInfo> SetXmlColumnStyle(SqlSimpleColumn column, bool isXmlDocument);
    public IList`1<SqlScriptUpdateInfo> SetXmlColumnXmlSchema(SqlSimpleColumn column, SqlXmlSchemaCollection xmlSchema);
    public IList`1<SqlScriptUpdateInfo> SetColumnIsPersisted(SqlComputedColumn column, bool isPersisted);
    public IList`1<SqlScriptUpdateInfo> SetColumnIsPersistedNullable(SqlComputedColumn column, bool isPersistedNullable);
    public IList`1<SqlScriptUpdateInfo> SetColumnExpressionScript(SqlComputedColumn column, string expression);
    public IList`1<SqlScriptUpdateInfo> DeletePrimaryKeyConstraint(SqlPrimaryKeyConstraint constraint);
    public IList`1<SqlScriptUpdateInfo> SetForeignKeyForeignTable(SqlForeignKeyConstraint constraint, SqlTable referencedTable);
    public IList`1<SqlScriptUpdateInfo> InsertForeignKeyForeignColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public IList`1<SqlScriptUpdateInfo> InsertForeignKeyColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public IList`1<SqlScriptUpdateInfo> SetForeignKeyForeignColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    public IList`1<SqlScriptUpdateInfo> SetForeignKeyColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    public IList`1<SqlScriptUpdateInfo> DeleteForeignKeyConstraint(SqlForeignKeyConstraint constraint);
    public void DeleteDefaultConstraint(SqlDefaultConstraint constraint);
    public void SetDefaultConstraintExpression(SqlDefaultConstraint constraint, string expression);
    public IList`1<SqlScriptUpdateInfo> DeleteCheckConstraint(SqlCheckConstraint constraint);
    public IList`1<SqlScriptUpdateInfo> DeleteUniqueConstraint(SqlUniqueConstraint constraint);
    public void SetCheckConstraintExpression(SqlCheckConstraint constraint, string expression);
    public IList`1<SqlScriptUpdateInfo> SetPrimaryKeyConstraintIsClustered(SqlPrimaryKeyConstraint primaryKeyConstraint, bool isClustered);
    public IList`1<SqlScriptUpdateInfo> SetUniqueConstraintIsClustered(SqlUniqueConstraint uniqueConstraint, bool isClustered);
    public IList`1<SqlScriptUpdateInfo> AddInlineIndex(SqlTable table, string indexName);
    public IList`1<SqlScriptUpdateInfo> AddCheckConstraint(SqlTable table, string constraintName);
    public IList`1<SqlScriptUpdateInfo> AddInlineAttribute(SqlTable table, string name, Func`3<SqlTable, string, IList`1<SqlScriptUpdateInfo>> scriptUpdateInfoGenerator);
    public IList`1<SqlScriptUpdateInfo> AddPrimaryKeyConstraint(SqlTable table, string constraintName);
    public IList`1<SqlScriptUpdateInfo> AddPrimaryKeyConstraint(SqlTable table, IEnumerable`1<SqlColumn> columns);
    public IList`1<SqlScriptUpdateInfo> AddPrimaryKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> columns);
    public IList`1<SqlScriptUpdateInfo> UpdatePrimaryKeyColumns(SqlPrimaryKeyConstraint primaryKeyConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public IList`1<SqlScriptUpdateInfo> AddUniqueConstraint(SqlTable table, string constraintName);
    public IList`1<SqlScriptUpdateInfo> UpdateUniqueConstraintColumns(SqlUniqueConstraint uniqueConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public IList`1<SqlScriptUpdateInfo> AddForeignKeyConstraint(SqlTable table, string constraintName);
    public IList`1<SqlScriptUpdateInfo> AddForeignKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> referencingColumns, SqlTableBase referencedTable, IEnumerable`1<SqlColumn> referencedColumns);
    public void AddDefaultConstraint(SqlSimpleColumn column, string expression);
    public IList`1<SqlScriptUpdateInfo> InsertColumnSetAt(SqlTable table, string columnName, int index);
    public void InsertComputedColumnAt(SqlTable table, string columnName, int index, string expression);
    public void InsertSimpleColumnAt(SqlTable table, string columnName, int index);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlModelUpdaterConstants : object {
    public static string AS;
    public static string ASC;
    public static string BEGIN;
    public static string CHECK;
    public static string CLUSTERED;
    public static string COLUMN;
    public static string COLUMNSTORE;
    public static string CONSTRAINT;
    public static string CREATE;
    public static string DELETE;
    public static string DESC;
    public static string END;
    public static string EXEC;
    public static string FOR;
    public static string FOREIGN;
    public static string GO;
    public static string INDEX;
    public static string INSERT;
    public static string NONCLUSTERED;
    public static string NOT;
    public static string NULL;
    public static string ON;
    public static string PATH;
    public static string PRIMARY;
    public static string REFERENCES;
    public static string SELECTIVE;
    public static string SET;
    public static string TABLE;
    public static string UNIQUE;
    public static string UPDATE;
    public static string WITH;
    public static string SP_ADDEXTENDEDPROPERTY;
    public static string PlaceholderColumnName;
    public static string PlaceholderForeignTableName;
    public static string PlaceholderForeignColumnName;
    public static string PlaceholderUniqueIndexName;
    public static string PlaceholderCatalogName;
    public static string PlaceholderXmlIndexName;
    public static string PlaceholderSelectiveXmlIndexName;
    public static string PlaceholderXPathName;
    public static string PlaceholderXPathLiteral;
    public static char NewLine;
    public static char Return;
    public static char Space;
    public static string InitialCheckConstraintExpression;
    public static int DefaultNCharLength;
    public static string MS_Description;
    public static int Indent;
    public static HashSet`1<SqlDataType> SqlTypesCanHaveLength;
    public static HashSet`1<SqlDataType> SqlTypesCanHaveMaxLength;
    public static HashSet`1<SqlDataType> SqlTypesCanHavePrecision;
    public static HashSet`1<SqlDataType> SqlTypesCanHaveScale;
    public static String[] ExtendedPropertyTypeParameterNames;
    public static String[] ExtendedPropertyNameParameterNames;
    public static Dictionary`2<ModelElementClass, String[]> ExtendedPropertyTypeParameterValues;
    public static Dictionary`2<ModelElementClass, Func`2[]> ExtendedPropertyNameParameterValues;
    private static SqlModelUpdaterConstants();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlModelUpdaterException : DataSchemaModelException {
    public SqlModelUpdaterException(string message);
    public SqlModelUpdaterException(string message, Exception innerException);
    private SqlModelUpdaterException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlModelUpdaterUtils : object {
    public static void TraceAndThrow(string errorMessage);
    public static string GetBuiltInTypeName(SqlDataType sqlType);
    public static void InsertIntoCollection(ScriptFragmentGenerator scriptGenerator, int newItemIndex, int existingItemsCount, ScriptBuilderDelegate scriptBuilder, bool multiline, TSqlTokenType delimiter, TSqlTokenType collectionLeftDelimiter, TSqlTokenType collectionRightDelimiter);
    public static bool IsSignificantToken(TSqlParserToken token);
    public static TAstType GetPrimaryAst(ISqlModelElement element);
    public static bool IsColumnDefinition(TSqlFragment fragment);
    public static bool IsConstraintDefinition(TSqlFragment fragment);
    public static int CalculateDefinitionLastTokenOffset(TSqlFragment fragment);
    internal static int CalculateLastTokenOffset(TSqlFragment fragment);
    internal static void FindToken(IList`1<TSqlParserToken> tokenStream, int startIndex, Func`2<TSqlParserToken, bool> match, Int32& tokenIndex, TSqlParserToken& token);
    internal static void FindToken(IList`1<TSqlParserToken> tokenStream, int startIndex, Func`2<TSqlParserToken, bool> match, Func`2<TSqlParserToken, bool> continueCondition, Int32& tokenIndex, TSqlParserToken& token);
    internal static void FindTokenBackward(IList`1<TSqlParserToken> tokenStream, int startIndex, Func`2<TSqlParserToken, bool> match, Int32& tokenIndex, TSqlParserToken& token);
    internal static bool CheckTokenSequence(IList`1<TSqlParserToken> tokenStream, int startIndex, int endIndex, Int32& firstFoundToken, Int32& lastFoundToken, Func`2[] tokens);
    public static ScalarExpression GetExtendedPropertyValueAst(SqlExtendedProperty extendedProperty);
    public static SqlScriptUpdateInfo AppendTextToFile(ISqlModelElement element, string text);
    public static void CheckGoAndGetLastToken(ISqlModelElement element, Boolean& hasGo, TSqlParserToken& lastToken);
    public static bool IsInlineColumnConstraint(SqlColumn column, SqlConstraint constraint);
    public static bool DoesColumnHaveCheckOrForeignKeyOrNullableConstraint(SqlColumn sqlColumn);
    public static bool DoesIndexHaveFilterDefinition(SqlIndex sqlIndex);
    public static bool IsInlinePrimaryKeyColumn(SqlColumn column);
    public static bool IsSpaceToken(TSqlParserToken token);
    public static bool IsNewLineToken(TSqlParserToken token);
    public static void RemoveWhitespaceAroundSourcePosition(SqlScriptUpdateInfo info, TSqlParser parser, string fullScript, ISourceInformation sourceInfo);
    private static void RemoveFollowingWhitespaceAndGo(SqlScriptUpdateInfo info, TSqlParser parser, string fullScript, ISourceInformation sourceInfo);
    private static void RemovePrecedingWhitespace(SqlScriptUpdateInfo info, TSqlParser parser, string fullScript, ISourceInformation sourceInfo);
    internal static IList`1<SqlExtendedProperty> GetExtendedPropertyList(ISqlExtendedPropertyHost propertyHost, string propertyName);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlScriptUpdateInfo : object {
    private SortedList`2<SqlScriptUpdateItem, SqlScriptUpdateItem> _updates;
    [CompilerGeneratedAttribute]
private string <ScriptCacheIdentifier>k__BackingField;
    public string ScriptCacheIdentifier { get; private set; }
    public IEnumerable`1<SqlScriptUpdateItem> Updates { get; }
    public SqlScriptUpdateInfo(string cacheId);
    [CompilerGeneratedAttribute]
public string get_ScriptCacheIdentifier();
    [CompilerGeneratedAttribute]
private void set_ScriptCacheIdentifier(string value);
    public IEnumerable`1<SqlScriptUpdateItem> get_Updates();
    public void AddUpdate(int startOffset, int startLine, int startColumn, int length, string newText);
    public void AddUpdate(SqlScriptUpdateItem updateItem);
    public void AddUpdates(IEnumerable`1<SqlScriptUpdateItem> updateItems);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlScriptUpdateItem : object {
    [CompilerGeneratedAttribute]
private int <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UpdateOrder>k__BackingField;
    public int StartOffset { get; private set; }
    public int StartLine { get; private set; }
    public int StartColumn { get; private set; }
    public int Length { get; private set; }
    public string NewText { get; private set; }
    internal int UpdateOrder { get; internal set; }
    public SqlScriptUpdateItem(int startOffset, int startLine, int startColumn, int length, string newText);
    [CompilerGeneratedAttribute]
public int get_StartOffset();
    [CompilerGeneratedAttribute]
private void set_StartOffset(int value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
private void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
private void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_NewText();
    [CompilerGeneratedAttribute]
private void set_NewText(string value);
    [CompilerGeneratedAttribute]
internal int get_UpdateOrder();
    [CompilerGeneratedAttribute]
internal void set_UpdateOrder(int value);
    public sealed virtual int CompareTo(SqlScriptUpdateItem other);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlScriptUpdater : object {
    private static Dictionary`2<ModelElementClass, GetElementIdentifierAst> _getElementIdentifierAction;
    private SqlScriptGenerator _scriptGenerator;
    private static SqlScriptUpdater();
    public SqlScriptUpdater(SqlDatabaseSchemaProvider dsp);
    private static void InitializeGetElementIdentifierActions();
    private static TAstType GetElementAst(ISqlModelElement element);
    public static IList`1<SqlScriptUpdateInfo> SetColumnNullable(SqlSimpleColumn column, bool isNullable);
    private static void AddScriptUpdateForElement(IList`1<SqlScriptUpdateInfo> scriptUpdateList, ISqlModelElement element, string newText, int startOffset, int startLine, int startColumn, int fragmentLength);
    private static void AddScriptUpdateForElementBeforeToken(IList`1<SqlScriptUpdateInfo> scriptUpdateList, ISqlModelElement element, string newText, TSqlParserToken token);
    private static void AddScriptUpdateForElementBetweenTokens(IList`1<SqlScriptUpdateInfo> scriptUpdateList, ISqlModelElement element, string newText, TSqlParserToken firstToken, TSqlParserToken lastToken);
    private static string GenerateSpaceNotSpaceNull();
    public static IList`1<SqlScriptUpdateInfo> SetColumnIsIdentity(SqlSimpleColumn column, bool isIdentity);
    public static IList`1<SqlScriptUpdateInfo> SetColumnIdentitySeed(SqlSimpleColumn column, SqlDecimal seed);
    public static IList`1<SqlScriptUpdateInfo> SetColumnIdentityIncrement(SqlSimpleColumn column, SqlDecimal increment);
    private static IList`1<SqlScriptUpdateInfo> SetColumnIdentitySeedOrIncrement(SqlSimpleColumn column, SqlDecimal value, bool isValueSeed);
    public IList`1<SqlScriptUpdateInfo> SetColumnDataType(SqlSimpleColumn column, SqlType dataType, Boolean& isNamelessTimestamp);
    public static IList`1<SqlScriptUpdateInfo> SetColumnDataTypeLength(SqlSimpleColumn column, int length, bool isMax);
    public static IList`1<SqlScriptUpdateInfo> SetColumnDataTypePrecision(SqlSimpleColumn column, int precision);
    public static IList`1<SqlScriptUpdateInfo> SetColumnDataTypeScale(SqlSimpleColumn column, int scale);
    public IList`1<SqlScriptUpdateInfo> SetXmlColumnXmlSchema(SqlSimpleColumn column, SqlXmlSchemaCollection xmlSchema);
    internal static IList`1<SqlScriptUpdateInfo> SetCheckConstraintExpression(SqlCheckConstraint checkConstraint, string expression);
    internal static IList`1<SqlScriptUpdateInfo> SetIndexIsClustered(SqlIndex index, bool isClustered);
    internal static IList`1<SqlScriptUpdateInfo> SetIndexIsUnique(SqlIndex index, bool isUnique);
    public static IList`1<SqlScriptUpdateInfo> InsertFullTextIndexColumnAt(SqlFullTextIndex fullTextIndex, int index, SqlColumn column);
    public static IList`1<SqlScriptUpdateInfo> UpdateIndexColumns(SqlIndex sqlIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public static IList`1<SqlScriptUpdateInfo> UpdateColumnStoreIndexColumns(SqlColumnStoreIndex sqlColumnStoreIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    private static List`1<SqlScriptUpdateInfo> UpdateKeyWithImplicitColumn(SqlConstraint constraint, UniqueConstraintDefinition constraintAst, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    private static void GetScriptFromTokens(ScriptFragmentGenerator sfGen, IList`1<TSqlParserToken> tokenStream, int firstTokenIndex, int lastTokenIndex);
    private static ScriptFragmentGenerator GenerateColumnListInScriptFragmentGenerator(IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    private static List`1<SqlScriptUpdateInfo> UpdateIndexOrKeyColumns(ISqlSpecifiesIndex indexOrKey, IList`1<ColumnWithSortOrder> oldColumnDefinitions, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder, IList`1<TSqlParserToken> tokenStream);
    private static List`1<SqlScriptUpdateInfo> InsertColumnTokensIntoParanthesis(TSqlFragment firstEntry, TSqlFragment lastEntry, ISqlModelElement statementModelElement, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder, IList`1<TSqlParserToken> tokenStream);
    private static void GetParenthesesTokens(TSqlFragment firstFragment, TSqlFragment lastFragment, IList`1<TSqlParserToken> tokenStream, Int32& leftParenthesisIndex, Int32& rightParenthesisIndex);
    internal static IList`1<SqlScriptUpdateInfo> SetPrimaryKeyConstraintIsClustered(SqlPrimaryKeyConstraint primaryKeyConstraint, bool isClustered);
    internal static IList`1<SqlScriptUpdateInfo> SetUniqueConstraintIsClustered(SqlUniqueConstraint uniqueConstraint, bool isClustered);
    private static IList`1<SqlScriptUpdateInfo> SetPrimaryKeyOrUniqueConstraintIsClustered(ISqlModelElement constraint, UniqueConstraintDefinition constraintDefinition, bool isClustered);
    internal static IList`1<SqlScriptUpdateInfo> SetColumnExpressionScript(SqlComputedColumn column, string expression);
    public static IList`1<SqlScriptUpdateInfo> SetColumnIsPersisted(SqlComputedColumn column, bool isPersisted);
    internal static IList`1<SqlScriptUpdateInfo> SetColumnIsPersistedNullable(SqlComputedColumn column, bool isPersistedNullable);
    private static void RemoveXmlSchema(ColumnDefinition columnAst, Int32& startOffset, Int32& startLine, Int32& startColumn, Int32& fragmentLength, String& newText);
    private void ReplaceOrInsertXmlSchema(ColumnDefinition columnAst, SqlXmlSchemaCollection xmlSchema, Int32& startOffset, Int32& startLine, Int32& startColumn, Int32& fragmentLength, String& newText);
    public static IList`1<SqlScriptUpdateInfo> SetXmlColumnStyle(SqlSimpleColumn column, bool isXmlDocument);
    private static SqlScriptUpdateItem InsertColumnAtHelper(SqlTable table, int index, ScriptBuilderDelegate columnDefinitionBuilder);
    internal static TSqlFragment[] GetCollatedDefinitionsForTable(TableDefinition tableDef);
    internal static int GetCollatedIndexForDefinition(int index, TSqlFragment[] collatedDefinitions);
    public static IList`1<SqlScriptUpdateInfo> InsertColumnSetAt(SqlTable table, string columnName, int index);
    public static IList`1<SqlScriptUpdateInfo> InsertComputedColumnAt(SqlTable table, string columnName, int index, string expression);
    public static IList`1<SqlScriptUpdateInfo> InsertSimpleColumnAt(SqlTable table, string columnName, int index);
    public static IList`1<SqlScriptUpdateInfo> AddInlineIndex(SqlTable table, string inlineIndexName);
    private static void GenerateInlineIndexScript(ScriptFragmentGenerator sfGen, string inlineIndexName);
    public static IList`1<SqlScriptUpdateInfo> AddCheckConstraint(SqlTable table, string constraintName);
    private static void GenerateCheckConstraintScript(ScriptFragmentGenerator sfGen, string constraintName);
    public static IList`1<SqlScriptUpdateInfo> AddPrimaryKeyConstraint(SqlTable table, string constraintName);
    public static IList`1<SqlScriptUpdateInfo> AddPrimaryKeyConstraint(SqlTable table, IEnumerable`1<SqlColumn> columns);
    public static IList`1<SqlScriptUpdateInfo> AddPrimaryKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> columns);
    private static void GeneratePrimaryKeyScriptBase(ScriptFragmentGenerator sfGen, string constraintName);
    private static void GenerateHekatonPrimaryKeyConstraintScript(ScriptFragmentGenerator sfGen, string constraintName, IEnumerable`1<SqlColumn> columns);
    private static void GeneratePrimaryKeyConstraintScript(ScriptFragmentGenerator sfGen, string constraintName);
    private static void GeneratePrimaryKeyConstraintScript(ScriptFragmentGenerator sfGen, string constraintName, IEnumerable`1<SqlColumn> columns);
    public static IList`1<SqlScriptUpdateInfo> UpdatePrimaryKeyColumns(SqlPrimaryKeyConstraint primaryKeyConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public static IList`1<SqlScriptUpdateInfo> AddUniqueConstraint(SqlTable table, string constraintName);
    private static void GenerateUniqueConstraintScript(ScriptFragmentGenerator sfGen, string constraintName);
    public static IList`1<SqlScriptUpdateInfo> UpdateUniqueConstraintColumns(SqlUniqueConstraint uniqueConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public static IList`1<SqlScriptUpdateInfo> AddForeignKeyConstraint(SqlTable table, string constraintName);
    internal IList`1<SqlScriptUpdateInfo> AddForeignKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> referencingColumns, SqlTableBase referencedTable, IEnumerable`1<SqlColumn> referencedColumns);
    private static void GenerateForeignKeyScriptBase(ScriptFragmentGenerator sfGen, string constraintName);
    private static void GenerateForeignKeyScript(ScriptFragmentGenerator sfGen, string constraintName);
    private void GenerateForeignKeyScript(ScriptFragmentGenerator sfGen, string constraintName, IEnumerable`1<SqlColumn> referencingColumns, SqlTableBase referencedTable, IEnumerable`1<SqlColumn> referencedColumns);
    public static IList`1<SqlScriptUpdateInfo> AddDefaultConstraint(SqlSimpleColumn column, string expression);
    private static string GenerateDefaultConstraintScript(string expression);
    private static SqlScriptUpdateInfo CreateScriptUpdateInfo(SqlTable table, ScriptBuilderDelegate constraintDefBuilder);
    public static IList`1<SqlScriptUpdateInfo> SetDefaultConstraintExpression(SqlDefaultConstraint defaultConstraint, string expression);
    public IList`1<SqlScriptUpdateInfo> CreateIndex(SqlTable table, string indexName);
    private string GenerateCreateIndexStatement(SqlTable table, string indexName);
    public IList`1<SqlScriptUpdateInfo> CreateXmlIndex(SqlTable table, string indexName, bool isPrimary);
    private string GenerateCreateXmlIndexStatement(SqlTable table, string indexName, bool isPrimary);
    public IList`1<SqlScriptUpdateInfo> CreateSelectiveXmlIndex(SqlTable table, string indexName, bool isPrimary);
    private string GenerateCreateSelectiveXmlIndexStatement(SqlTable table, string indexName, bool isPrimary);
    public IList`1<SqlScriptUpdateInfo> CreateSpatialIndex(SqlTable table, string indexName);
    private string GenerateCreateSpatialIndexStatement(SqlTable table, string indexName);
    public IList`1<SqlScriptUpdateInfo> CreateFullTextIndex(SqlTable table);
    private string GenerateCreateFullTextIndex(SqlTable table);
    public IList`1<SqlScriptUpdateInfo> CreateColumnStoreIndex(SqlTable table, string indexName);
    private string GenerateCreateColumnStoreIndexStatement(SqlTable table, string indexName);
    public IList`1<SqlScriptUpdateInfo> CreateDmlTrigger(SqlTable table, string dmlTriggerName);
    private string GenerateDmlTriggerStatement(SqlTable table, string dmlTriggerName);
    private void GenerateOnTableSpecForIndex(SqlTable table, ScriptFragmentGenerator sfGen);
    private void GenerateOnTableSpec(SqlTable table, ScriptFragmentGenerator sfGen);
    private void GenerateTriggerNameWithSchema(SqlTable table, string dmlTriggerName, ScriptFragmentGenerator sfGen);
    private static SqlScriptUpdateItem InsertIntoDelimitedParenthesesWrappedList(IList`1<TSqlParserToken> tokenStream, int nextTokenIndex, TSqlFragment[] collection, int index, ScriptBuilderDelegate elementBuilder, bool multiline);
    public static IList`1<SqlScriptUpdateInfo> DeleteColumn(SqlColumn column);
    public static IList`1<SqlScriptUpdateInfo> DeleteIndex(ISqlModelElement index);
    public static IList`1<SqlScriptUpdateInfo> DeleteTrigger(SqlDmlTrigger trigger);
    private static void AppendCollectionWithPlaceholderColumn(ScriptFragmentGenerator sfGen, string placeholderName);
    private string GenerateSchemaQualifiedIdentifier(IModelElement element);
    private static void FindXmlDataTypeTokens(XmlDataTypeReference xmlDataTypeAst, TSqlParserToken& xmlToken, TSqlParserToken& leftParenthesisToken, TSqlParserToken& xmlStyleToken, TSqlParserToken& xmlSchemaBeginToken, TSqlParserToken& xmlSchemaEndToken, TSqlParserToken& rightParenthesisToken);
    private static IList`1<SqlScriptUpdateInfo> SetColumnDataTypeLengthOrPrecision(SqlSimpleColumn column, string lengthOrPrecision);
    private static void GetUpdateInfoForLengthPrecisionScale(SqlDataTypeReference dataTypeAst, Int32& startOffset, Int32& startLine, Int32& startColumn, Int32& fragmentLength);
    private static void PopulatePositionInfoFromToken(TSqlParserToken token, Int32& offset, Int32& line, Int32& column, Int32& length);
    private static void PopulatePositionInfoFromAst(TSqlFragment ast, Int32& offset, Int32& line, Int32& column, Int32& length);
    private string GenerateScriptForDataType(SqlType dataType);
    [ConditionalAttribute("DEBUG")]
private static void DBG_ValidateUpdateItems(IEnumerable`1<SqlScriptUpdateInfo> scriptUpdateList);
    public IList`1<SqlScriptUpdateInfo> AddExtendedProperty(ISqlExtendedPropertyHost host, string name, string value);
    private string GenerateStatementForExtendedProperty(ISqlExtendedPropertyHost host, string name, string value);
    private void AppendNameValuePair(ScriptFragmentGenerator sfGen, string name, string value, bool newLineAndIndent, bool comma);
    public IList`1<SqlScriptUpdateInfo> SetExtendedProperty(SqlExtendedProperty extendedProperty, string value);
    public IList`1<SqlScriptUpdateInfo> SetForeignKeyForeignTable(SqlForeignKeyConstraint constraint, SqlTable referencedTable);
    public static IList`1<SqlScriptUpdateInfo> InsertForeignKeyForeignColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public static IList`1<SqlScriptUpdateInfo> InsertForeignKeyColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public static IList`1<SqlScriptUpdateInfo> SetForeignKeyForeignColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    public static IList`1<SqlScriptUpdateInfo> SetForeignKeyColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    private static bool DoesForeignKeyKeywordExist(ForeignKeyConstraintDefinition constraintAst);
    private static bool IsConstraintColumnScoped(ForeignKeyConstraintDefinition constraintAst);
    private static SqlScriptUpdateItem ExpandForeignKeyKeyword(SqlForeignKeyConstraint constraint, ForeignKeyConstraintDefinition constraintAst);
    private static SqlScriptUpdateItem ExpandReferencingColumn(SqlForeignKeyConstraint constraint, ForeignKeyConstraintDefinition constraintAst);
    private static SqlScriptUpdateItem ExpandReferencingColumnListForInsert(SqlForeignKeyConstraint constraint, ForeignKeyConstraintDefinition constraintAst, SqlColumn column, int index);
    private static SqlScriptUpdateItem ExpandReferencingColumnListForSet(SqlForeignKeyConstraint constraint, ForeignKeyConstraintDefinition constraintAst, SqlColumn column, int index);
    private static SqlScriptUpdateItem InsertUpdateBeforeReferences(ForeignKeyConstraintDefinition constraintAst, string sourceName, string newText);
    private static SqlScriptUpdateItem ExpandReferencedColumnListForInsert(SqlForeignKeyConstraint constraint, ForeignKeyConstraintDefinition constraintAst, SqlColumn column, int index);
    private static SqlScriptUpdateItem ExpandReferencedColumnListForSet(SqlForeignKeyConstraint constraint, ForeignKeyConstraintDefinition constraintAst, SqlColumn column, int index);
    private static SqlScriptUpdateItem InsertUpdateAfterReferenceTable(ForeignKeyConstraintDefinition constraintAst, string sourceName, string referencedColumnListText);
    private static void GenerateColumnList(ScriptFragmentGenerator sfGen, IList`1<SqlColumn> columns, Action`1<ScriptFragmentGenerator> additionalAppendAction);
    private static string GenerateColumnListWithInsert(IList`1<SqlColumn> columns, SqlColumn columnToBeInserted, int index);
    private static string GenerateColumnListWithSet(IList`1<SqlColumn> columns, SqlColumn columnToBeSet, int index);
    private static void AppendIdentifierLastPart(ScriptFragmentGenerator sfGen, ModelIdentifier name, bool last, Action`1<ScriptFragmentGenerator> additionalAppendAction);
    private static T GetConstraintAst(SqlConstraint constraint);
    private static SqlScriptUpdateItem DeleteModelElementPrimarySource(ISqlModelElement modelElement);
    public static IList`1<SqlScriptUpdateInfo> DeleteExtendedProperty(SqlExtendedProperty extendedProperty);
    private static IList`1<SqlScriptUpdateItem> DeleteConstraintHelper(SqlConstraint constraint);
    public static IList`1<SqlScriptUpdateInfo> DeleteConstraint(SqlConstraint defaultConstraint);
    public static IList`1<SqlScriptUpdateInfo> DeleteTable(SqlTable table);
    public static IList`1<SqlScriptUpdateInfo> DeleteView(SqlView view);
    public static IList`1<SqlScriptUpdateInfo> DeleteSubroutine(SqlSubroutine subroutine);
    private static List`1<SqlScriptUpdateInfo> DeleteCreateAndAlterStatementsForElement(ISqlModelElement element);
    private string GetStringForStringLiteral(string value);
    public static IList`1<SqlScriptUpdateInfo> RenameElement(ISqlModelElement element, string newName);
    private static void VerifyTimestampSpecialCase(ISqlModelElement element, TSqlFragment elementAst);
    private static void RenameTableHierarchicalReferences(Dictionary`2<string, SqlScriptUpdateInfo> scriptUpdateList, SqlTable table, string newName);
    private static void AddUpdateForIdentifierRename(Dictionary`2<string, SqlScriptUpdateInfo> scriptUpdateList, Identifier identifierAst, string newName, ISqlModelElement element);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.ModelUpdater.SqlScriptUpdaterForTableElementDeletion : object {
    public static IList`1<SqlScriptUpdateItem> DeleteColumn(SqlColumn column);
    public static IList`1<SqlScriptUpdateItem> DeleteConstraint(SqlConstraint constraint);
    public static IList`1<SqlScriptUpdateItem> DeleteInlineIndex(SqlIndex inlineIndex);
    private static List`1<SqlScriptUpdateItem> DeleteElementImpl(ISqlColumnSource table, SqlModelElement sqlModelElement);
    private static SqlScriptUpdateItem DeleteElement(IList`1<TSqlParserToken> tokenStream, TSqlFragment ast, bool isColumnScopedInlineConstraint);
    private static void LocateElementTokenIndexes(IList`1<TSqlParserToken> tokenStream, TSqlFragment ast, bool includeTrailingComma, Int32& startTokenIndex, Int32& endTokenIndex);
    private static void ExpandTokenScopeToIncludeWhiteSpace(IList`1<TSqlParserToken> tokenStream, Int32& startTokenIndex, Int32& endTokenIndex);
    private static void RemoveEmptyLine(IList`1<TSqlParserToken> tokenStream, int startTokenIndex, int endTokenIndex, Int32& endOffset);
    private static bool AreBothNewLines(IList`1<TSqlParserToken> tokenStream, int startTokenIndex, int endTokenIndex);
    private static List`1<SqlScriptUpdateItem> RemoveOrphanCommaOrParentheses(IList`1<TSqlParserToken> tokenStream, TSqlFragment ast, SqlScriptUpdateItem removeColumn, bool allowRemoveLastColumn);
    private static bool IsNonNewLineWhiteSpace(TSqlParserToken token);
    private static bool IsNewLineToken(TSqlParserToken token);
    private static ElementLocationType GetElementLocationType(ISqlColumnSource source, int startOffset, int endOffset);
    private static void GetAstAndStartEndOffset(SqlModelElement element, TSqlFragment& ast, Int32& startOffset, Int32& endOffset);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.OnDemandRetriever : object {
    private static int RetrieveAllPendingObjects;
    private SqlSchemaModel _model;
    private SqlModelBuilder _builder;
    private DatabaseChangeModel _changeModel;
    private HashSet`1<string> _editedSourceIds;
    private bool _designTime;
    private HashSet`1<SqlElementDescriptor> _retrievedElements;
    private HashSet`1<SqlElementDescriptor> _pendingRetrieve;
    private HashSet`1<SqlElementDescriptor> _pendingAnalysis;
    private HashSet`1<SqlElementDescriptor> _deferedDriftElements;
    private HashSet`1<ModelElementClass> _deferedDriftOptions;
    private object _lock;
    private ErrorManager _retrieveErrors;
    private SqlElementDescriptorComparer _descriptorComparer;
    private bool _isMaster;
    private CatalogStamp _driftStamp;
    private Dictionary`2<SqlElementDescriptor, DatabaseObjectChange> _driftChanges;
    public ErrorManager RetrieveErrors { get; }
    public HashSet`1<string> EditedSourceIds { get; }
    public CatalogStamp DriftStamp { get; }
    public int DeferedDriftCount { get; }
    public OnDemandRetriever(DatabaseChangeModel changesModel, SqlSchemaModel model, CatalogStamp dbState, SqlModelBuilder builder, bool designTime);
    public ErrorManager get_RetrieveErrors();
    public HashSet`1<string> get_EditedSourceIds();
    public CatalogStamp get_DriftStamp();
    public int get_DeferedDriftCount();
    public Dictionary`2<SqlElementDescriptor, DatabaseObjectChange> ClearDriftChanges();
    public void AddPendingDependencyEvaluations(List`1<SqlElementDescriptor> ids);
    public void AnalyzeDependencies(IList`1<SqlElementDescriptor> pendingAnalysis);
    public void AddDeferedDrift(ICollection`1<SqlElementDescriptor> ids);
    public void RetrieveLatestDefinitionForEdit(SqlElementDescriptor desc);
    public void AddRetrieveIfNeeded(List`1<SqlElementDescriptor> ids);
    public bool AddRetrieveIfNeeded(ModelElementClass elementType, ModelIdentifier elementId);
    public void GetAllPendingRetrieves(ICollection`1<SqlElementDescriptor> pendingContainer);
    public void GetAllPendingAnalysis(ICollection`1<SqlElementDescriptor> pendingContainer);
    public HashSet`1<SqlElementDescriptor> GetAllDriftedElements();
    public void Retrieve(HashSet`1<SqlElementDescriptor> toRetrieve, bool checkDrift);
    private void ExecuteRetrieve(HashSet`1<SqlElementDescriptor> idsToRetrieve, bool checkDrift, bool includeAllDriftedObjects);
    private void RetrieveOptions(SqlReverseEngineer re, SqlReverseEngineerConnectionContext ctx, HashSet`1<ModelElementClass> driftedOptions);
    private bool ExcludeEditedObjectsHandler(SqlElementDescriptor parentDesc, ElementID id, IList`1<string> nameParts, bool includePermissions);
    private ReverseEngineerOption DetermineImportOption(ModelElementClass elementType);
    private static List`1<SqlElementDescriptor> SortIdsInRetrieveOrder(HashSet`1<SqlElementDescriptor> idsToRetrieve);
    private IList`1<IModelElement> LookupElements(ModelIdentifier id, ModelElementClass elementType);
    private bool IsElementEdited(ISqlModelElement element);
    private SqlConstraint FindSysNamedTableConstraints(ModelIdentifier elementName);
    private void ReinterpretElement(ISqlModelElement oldElement);
    private static void FixupDatabaseSourced(ISqlModelElement element);
    private int CleanupExistingElement(ISqlModelElement existingElement);
    private void HandleDrift(SqlConnection dbConn, SqlConnection masterConn, HashSet`1<SqlElementDescriptor> alterCreateIds, HashSet`1<ModelElementClass> completeRetrieve);
    private static bool NamePartsValid(IList`1<string> nameParts);
    private void TrackChange(ModelElementClass elementType, IList`1<string> nameParts, Change objectChange);
    private void VisitDetectedDrift(Dictionary`2<ModelElementClass, HashSet`1<IList`1<string>>> drift, Change changeType, Action`2<ModelElementClass, IList`1<string>> callback);
    private bool IsRetrieved(ISqlModelElement edited);
    private void AddDependenciesToBeRetrieved(ISqlModelElement element);
    private void AddDependenciesToBeRetrieved(HashSet`1<ISqlModelElement> toBeRetrieved, ISqlModelElement currentElement, bool includeReferencing);
    private IList`1<IModelElement> LookupReferencedElements(IModelRelationshipEntry relEntry);
    private bool MarkToBeRetrieved(HashSet`1<ISqlModelElement> toBeRetrieved, ISqlModelElement element);
    private ISqlModelElement DetermineParent(ISqlModelElement element);
    [CompilerGeneratedAttribute]
private bool <ReinterpretElement>b__45_0(ISqlModelElement element);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.OnlineSqlModelUpdatingService : SqlModelUpdatingService {
    public bool IsProcessingScriptChanges { get; }
    internal OnlineSqlModelUpdatingService(SqlModelUpdater updater);
    protected virtual bool CanEditFiles(String[] files);
    public virtual bool get_IsProcessingScriptChanges();
    public virtual void RenameElement(ISqlModelElement modelElement, string newName);
    public virtual void AddTable(string schemaName, string tableName);
    public virtual void SetNewSequenceAndAssociateToDefaultConstraint(SqlTable table, SqlSimpleColumn column, string sequenceName);
}
internal enum Microsoft.Data.Tools.Sql.DesignServices.PerformEditResult : Enum {
    public int value__;
    public static PerformEditResult NotAttempted;
    public static PerformEditResult Success;
    public static PerformEditResult FailRetry;
    public static PerformEditResult FailAbort;
}
public class Microsoft.Data.Tools.Sql.DesignServices.PreviewReport : object {
    [CompilerGeneratedAttribute]
private string <Report>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireTableRecreation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PossibleDataLoss>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWarnings>k__BackingField;
    public string Report { get; internal set; }
    public bool RequireTableRecreation { get; internal set; }
    public bool PossibleDataLoss { get; internal set; }
    public bool HasWarnings { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Report();
    [CompilerGeneratedAttribute]
internal void set_Report(string value);
    [CompilerGeneratedAttribute]
public bool get_RequireTableRecreation();
    [CompilerGeneratedAttribute]
internal void set_RequireTableRecreation(bool value);
    [CompilerGeneratedAttribute]
public bool get_PossibleDataLoss();
    [CompilerGeneratedAttribute]
internal void set_PossibleDataLoss(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasWarnings();
    [CompilerGeneratedAttribute]
internal void set_HasWarnings(bool value);
}
[ExtensionAttribute]
internal static class Microsoft.Data.Tools.Sql.DesignServices.SchemaModelUtils : object {
    public static IList`1<string> GetElementNameParts(ISqlModelElement element);
    public static bool IsMemoryOptimizedElement(IModelElement element);
    public static string GetElementName(ISqlModelElement element);
    public static string GetNameFromAnnotation(IModelRelationshipEntry entry, int namePart);
    public static string GetFileGroupName(IModelElement modelElement);
    public static SqlDatabaseOptions GetDatabaseOptions(IModelElement modelElement);
    [ExtensionAttribute]
public static string GetScript(SqlScriptGenerator scriptGenerator, TSqlScript ast);
    public static bool IsInlineConstraintOrIndex(IModelElement element);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.SingleFileSymbolLocator : object {
    private static HashSet`1<ModelRelationshipClass> _columnRelationshipClasses;
    private static SingleFileSymbolLocator();
    private static HashSet`1<ModelElementClass> GetTableAndChildrenElementClasses();
    public static IList`1<SqlScriptUpdateInfo> ComputeUpdateInformation(SqlColumn column, string newName);
    private static bool IsUnnamedTimestampColumn(SqlColumn column, ColumnDefinition& timestampColumnAST);
    private static bool IsRelevantColumnReference(SqlTable table, IModelRelationshipEntry entry);
    private static void ResolveUserDefinedTypes(SqlSchemaModel model);
    private static void ResolveColumnAndComposingChildren(SqlColumn column);
    private static void ResolvePotentialIncoming(SqlTable table, SqlColumn column, string sourceName);
    private static SqlScriptUpdateInfo AnalyzeScriptForColumn(ISqlModelElement column, string sourceName, string newName, string stringLiteralName, SortedSet`1<SqlIntegerRange> locationRanges);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SingleFileTableColumnLocatorSchemaAnalyzer : SqlSchemaAnalyzer {
    private List`1<SqlScriptUpdateItem> _updates;
    private SortedSet`1<SqlIntegerRange> _locationRanges;
    private SqlElementDescriptor _descriptor;
    private SqlElementDescriptorComparer _comparer;
    private string _newColumnName;
    private string _newColumnNameForStringLiteral;
    public IList`1<SqlScriptUpdateItem> Updates { get; }
    public SingleFileTableColumnLocatorSchemaAnalyzer(ModelStore model, SortedSet`1<SqlIntegerRange> locationRanges, string newColumnName, string newColumnNameForStringLiteral, IEnumerable`1<string> identifiers);
    public IList`1<SqlScriptUpdateItem> get_Updates();
    public virtual void VisitFragment(TSqlFragment fragment, SqlElementDescriptor sqlElementDescriptor, SqlElementDescriptorRelevance relevance);
    public virtual void VisitAmbiguousFragment(TSqlFragment fragment, IEnumerable`1<SqlPotentialElementDescriptor> possibilities);
    private bool IsValidReference(TSqlFragment fragment, SqlElementDescriptor sqlElementDescriptor);
    private void ProcessExpression(TSqlFragment fragment, int clrPartsCount);
    private void AddUpdate(TSqlFragment fragment, bool stringLiteral);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SortedObservableCollection`1 : ObservableCollection`1<T> {
    private Comparison`1<T> m_compare;
    public SortedObservableCollection`1(IComparer`1<T> comparer);
    public SortedObservableCollection`1(Comparison`1<T> compare);
    public SortedObservableCollection`1(IComparer`1<T> comparer, List`1<T> list);
    public SortedObservableCollection`1(Comparison`1<T> compare, List`1<T> list);
    private void Initialize(IComparer`1<T> comparer);
    private void Initialize(Comparison`1<T> compare);
    private void Initialize(List`1<T> list);
    protected virtual void InsertItem(int index, T item);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.SqlArgumentValidation : object {
    public static void CheckForEmptyString(string variable, string variableName);
    public static void CheckForEmptyCollection(ICollection`1<T> variable, string variableName);
    public static void CheckForNullOrWhiteSpaceString(string variable, string variableName);
    public static void CheckForAnyNullOrEmptyStringInList(IList`1<string> variable, string variableName);
    public static void CheckForNullReference(object variable, string variableName);
    public static void CheckForInvalidNullNameReference(string name, string messageName);
    public static void CheckExpectedType(object variable, Type type);
    public static void CheckEnumeration(Type enumType, object variable, string variableName);
    public static void CheckForOutOfRangeException(long value, long min, long max, string variableName);
    public static void CheckForOutOfRangeException(long value, long min, long max);
    public static void CheckForSignedIntegerPositive(int value, string variableName);
    public static void CheckMaxLength(string value, string variableName, int maxLength);
    internal static void CheckForNonnegativeInteger(int value, string variableName);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.SqlCommonConstants : object {
    public static Guid ServerExplorerDataSource;
    public static Guid ServerExplorerDataProvider;
    public static string HostShutdownService;
    public static Guid HostShutdownServiceGuid;
    public static string DatabaseEvents;
    public static Guid DatabaseEventsGuid;
    public static int MAX_PATH;
    public static int MAX_DRIVE;
    public static int MAX_DIR;
    public static int MAX_FNAME;
    public static int MAX_EXT;
    public static int Sql2005ServerMajorVersion;
    public static string UniqueMonikerBeginning;
    public static string MSSqlUrlScheme;
    public static string SafeMSSqlUrlScheme;
    public static string MSSqlClrUrlScheme;
    public static string AutoCreatedLocalRouteName;
    public static string DeploymentSuffix;
    public static string BuiltInsReferenceFileName;
    public static string TSQLName;
    public static string DefaultNewProjectName;
    public static int QueryStatusTimeOut;
    public static int MaxIdentifierLength;
    public static int MaxInitialCatalogLength;
    public static char IllegalNtfsReplacementChar;
    public static char Dot;
    public static char Underscore;
    public static string False;
    public static string True;
    public static string NewLine;
    public static string TemplateLanguage;
    public static string EventLogNameApplication;
    public static int RefactorOperationEventLogId;
    public static int SchemaObjectsFeatureEventLogId;
    internal static string ProjectElementName;
    internal static string ToolsVersion;
    internal static string DefaultMSBuildToolset;
    internal static string MSBuildDefinitionUri;
    internal static string VSTemplateUri;
    internal static string VSTemplateNS;
    internal static string xpathWizardDataPrefix;
    internal static string xpathWizardExtensionPrefix;
    internal static string xpathWizardProjectItemPrefix;
    public static string ExtensionsDir;
    public static string FullClassName;
    internal static string ProjectNS;
    internal static string ProjectNSXPath;
    internal static string ProjectNSXPathWithContext;
    internal static string ProjFileConfigSectionsXPath;
    internal static string ProjFileConfigSectionAttributeName;
    internal static string ProjFileConfigSectionAttributeValue;
    internal static string ProjFileNoConfigSectionsXPath;
    public static string EqualEqual;
    public static string Quote;
    public static string DoubleQuote;
    public static string CmdLine_TokenPrepend;
    public static string CmdLine_TokenPostpend;
    internal static UInt32 ProjectUpgradeRequired;
    internal static UInt32 SideBySideBackupSupported;
    internal static string XmlSerialization_DatabaseRefactoringReportUri;
    internal static string XmlSerialization_DatabaseMSBuildTasksUri;
    internal static string XmlSerialization_DBProExtensionsUri;
    internal static string Settings_EntryElement;
    internal static string Settings_KeyAttribute;
    internal static string Settings_ValueAttribute;
    internal static string Settings_RootElement;
    internal static string Settings_ExtensionMappingsAttribute;
    public static string RegistrySubKeySQLDB;
    public static string RegistrySubKeyDataProject;
    public static string RegistrySubKeyDatabase;
    public static string RegistrySubKeyDialogPage;
    public static string RegistryKeyDataConnectionOptionsSettings;
    public static string RegistryKeyDataSchemaCompareSettings;
    public static string SqlExpressEdition;
    public static string Local;
    public static string DefaultInstanceNameInRegistry;
    public static string RegistryLockTimeout;
    public static string RegistryQueryTimeout;
    public static string RegistryLongRunningQueryTimeout;
    public static int DefaultSqlQueryTimeout;
    public static int DefaultSqlLockTimeout;
    public static int DefaultSqlLongRunningQueryTimeout;
    public static string RegistrySubKeyTestConditionLookupPath;
    internal static string VersionNumberFormatting;
    internal static string ProductName;
    internal static string ExecutionEngineApplicationName;
    internal static string SqlEditorApplicationName;
    internal static string EventLogSourceName;
    public static string ReferencePath;
    public static string Include;
    internal static string Metadata_FullPath;
    public static string Reg_NewProjectOverriddenProperties;
    public static string FolderName_Scripts;
    public static string PublishFileName;
    public static string MasterDatabaseName;
    public static string MsdbDatabaseName;
    public static string TempDatabaseName;
    public static string ModelDatabaseName;
    internal static string Sql2019SqlSchemaPath;
    internal static string Sql2017SqlSchemaPath;
    internal static string Sql2016SqlSchemaPath;
    internal static string Sql2014SqlSchemaPath;
    internal static string Sql2012SqlSchemaPath;
    internal static string Sql2008SqlSchemaPath;
    internal static string Sql2005SqlSchemaPath;
    internal static string SqlAzureSqlSchemaPath;
    internal static string SqlAzureV12SqlSchemaPath;
    internal static string SqlAzureDwSqlSchemaPath;
    internal static string MasterDatabaseFileName;
    internal static string MsdbDatabaseFileName;
    public static string SqlFamilyName;
    public static string MasterKey;
    public static string DatabaseKey;
    public static string MSDatabaseToolsExtendedPropertyPrefix;
    public static string DeployStampPropertyName;
    public static byte Deploy_AlreadyDeployedState;
    public static int Deploy_AlreadyDeployedSeverity;
    public static int Deploy_UserDefinedNumber;
    public static string DataSourceSqlClient;
    public static string DefaultExtensionsFileName;
    public static string ExtensionsNamespace;
    public static string ExtensionsXsdFile;
    public static string ExtensionsNamespacePrefix;
    public static string ExtensionXPath;
    public static string ExtensionsXPath;
    public static string DefaultConfigurationRelativeXPath;
    public static string ConfigurationRelativeXPath;
    public static string WizardRelativeXPath;
    public static string ExtensionsXmlSearchPattern;
    public static string GeneratorSubDir;
    public static string SchemaFileSubDir;
    public static string ProductDir;
    public static string SQLDBSubDir;
    public static string SetupVS;
    public static string GeneralConfigFileName;
    public static string BuildAction_Build;
    public static string BuildAction_None;
    public static string BuildAction_RefactorLog;
    public static string BuildAction_BuildExtensionConfiguration;
    public static string BuildAction_DeploymentExtensionConfiguration;
    public static string BuildAction_PreDeploy;
    public static string BuildAction_PostDeploy;
    public static string BuildAction_Compile;
    public static string BuildAction_Import;
    internal static string DefaultCollation;
    public static string MiscellaneousFiles;
    public static string ModelOutputFile;
    public static string ModelOutputFileUriString;
    public static string PostDeployOutputFile;
    public static string PreDeployOutputFile;
    public static string RefactorLogOutputFile;
    public static string LogicalObjectStreamFile;
    public static string PhysicalObjectStreamFile;
    public static string DacMetadataFile;
    public static string BacpacMetadata;
    public static string DacOriginFile;
    public static string XmlElement_Operations;
    public static string XmlElement_Operation;
    public static string XmlElement_Property;
    public static string XmlAttribute_Name;
    public static string XmlAttribute_Key;
    public static string XmlAttribute_ChangeDateTime;
    public static string XmlAttribute_Value;
    public static string XmlAttribute_Version;
    public static string RefactoringLogFileVersion;
    public static string DeploymentConfig;
    public static int OM_GLYPH_ACC_TYPE_COUNT;
    public static int OM_GLYPH_ERROR;
    public static int OM_GLYPH_CLASS;
    public static int OM_GLYPH_CSHARPFILE;
    public static int OM_GLYPH_REFERENCE;
    public static int OM_GLYPH_VBPROJECT;
    public static string IdentitySeedExpressionScript;
    public static string IdentityIncrementExpressionScript;
    public static bool AssemblyIsModelAware_DefaultValue;
    public static bool AssemblySkipCreationIfEmpty_DefaultValue;
    public static bool AssemblyIsVisible_DefaultValue;
    public static bool AssemblyIsCheckingDataDisabled_DefaultValue;
    public static bool GenerateSqlClrDdl_DefaultValue;
    public static string RegistrySQLServerTools;
    public static string SqlProject_ToolsOptions_General;
    public static string SqlProject_ToolsOptions_OnlineEditing;
    internal static string Dac;
    internal static string PreviousDAC;
    internal static string Import_File_Extension;
    internal static string Compact_File_Extension;
    internal static string Dac_File_Extension;
    public static string SqlDbInstallDirectory;
    internal static string DefaultTestConditionExtensionsDirectory;
    public static string SqlStudioProjectTemplate;
    public static string DacFxInstallDirectory;
    public static string IntermediateTargetFullFileName;
    public static string ProjectOptionOn;
    public static string ProjectOptionOff;
    public static string ProjectOptionCompareBinary;
    public static string ProjectOptionCompareText;
    public static string CDataString;
    public static string CreatedDateFieldName;
    public static string IsNullableFieldName;
    public static string IsSequenceExhaustedFieldName;
    public static string SequenceCurrentValueFieldName;
    public static string IsPrimaryKeyFieldName;
    public static string IsForeignKeyFieldName;
    public static string SqlAzureEditionName;
    public static string ExpressEditionName;
    public static string SqlStudioCollectionBasePath;
    public static string SqlServerObjectExplorerInitCollection;
    public static string InitializedSqlServerObjectExplorer;
    public static string guidSqlServerObjectExplorerNeedsInitializationString;
    public static Guid guidSqlServerObjectExplorerNeedsInitialization;
    public static string ManagementModelSchema100;
    public static string RelationalEngineSchema100;
    public static string ManagementModelSchema105;
    public static string RelationalEngineSchema105;
    public static string ManagementModelSchema110;
    public static string RelationalEngineSchema110;
    public static string ManagementModelSchema200;
    public static string RelationalEngineSchema200;
    public static string ManagementModelSchema250;
    public static string ProductSchema300;
    public static string DriftReportSchema300;
    public static string DeployReportSchema300;
    public static string CurrentProductSchema;
    public static string CurrentDriftReportSchema;
    public static string CurrentDeployReportSchema;
    public static string Instances;
    public static string MM;
    public static string RE;
    public static string IsClusteredIndexColumnAnnotationName;
    public static string DatabaseAdvancedOption;
    public static string DateAdd;
    public static string DateDiff;
    public static string DateName;
    public static string DatePart;
    public static HashSet`1<string> SystemDateFunctions;
    internal static Version DacVersion100;
    internal static Version DacVersion105;
    internal static Version DacVersion110;
    internal static Version DacVersion200;
    internal static Version DacVersion250;
    internal static Version DacVersion300;
    internal static Version DacVersion310;
    internal static Version DacVersion320;
    private static SqlCommonConstants();
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.SqlCommonResourceUtil : object {
    public static string GetString(string format, Object[] args);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SqlDatabaseLocation : ValueType {
    private string _instanceName;
    private string _databaseName;
    private bool _integratedAuth;
    private string _userName;
    private int _hashCode;
    private AuthenticationMethod _authentication;
    public bool Empty { get; }
    public string DatabaseName { get; }
    public string InstanceName { get; }
    public string UserName { get; }
    public bool IntegratedSecurity { get; }
    public AuthenticationMethod Authentication { get; }
    public SqlDatabaseLocation(SqlConnectionStringBuilder connectionString);
    public bool get_Empty();
    public string get_DatabaseName();
    public string get_InstanceName();
    public string get_UserName();
    public bool get_IntegratedSecurity();
    public AuthenticationMethod get_Authentication();
    public static IEqualityComparer`1<SqlDatabaseLocation> CreateComparer();
    internal bool Matches(SqlConnectionStringBuilder connInfo);
}
[ExtensionAttribute]
internal static class Microsoft.Data.Tools.Sql.DesignServices.SqlExceptionUtils : object {
    private static string RegistryKeyPath;
    private static string RegistryValueName;
    private static object _syncRoot;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _initialized;
    private static bool _disableFiltering;
    internal static bool DisableExceptionFilter { get; }
    private static SqlExceptionUtils();
    public static bool IsIrrecoverableException(Exception e);
    internal static void ValidateNullParameter(T parameter, string parameterName, TraceId traceId);
    internal static void ValidateNullOrEmptyParameter(string parameter, string parameterName, TraceId traceId);
    internal static void ValidateParameterLength(string parameter, string parameterName, int maxLength, TraceId traceId);
    internal static bool get_DisableExceptionFilter();
    internal static bool IsCriticalException(Exception ex);
    internal static bool ThrowOrShow(IServiceProvider serviceProvider, Exception ex);
    [ExtensionAttribute]
internal static string PopulateErrorMessage(Exception ex);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SqlExtensibilityException : Exception {
    public SqlExtensibilityException(string message);
    public SqlExtensibilityException(string message, Exception innerException);
    private SqlExtensibilityException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.SqlFileUtils : object {
    private static int _reservedForIndexLength;
    private static string _invalidFileNamePattern;
    private static string _surrogatePattern;
    private static string _invalidCharsPattern;
    private static int _3PartNameObjectNameIndex;
    private static int _4PartNameObjectNameIndex;
    private static int _4PartNameNumberOfSegments;
    private static Regex _invalidFileNameRegex;
    private static Regex _invalidCharsRegex;
    private static Regex _surrogateRegex;
    private static HashSet`1<char> _replacementCharactersNtfs;
    private static HashSet`1<char> _replacementCharactersMsBuild;
    private static HashSet`1<char> _replacementCharactersPathSeparator;
    internal static string DefaultIntermediateOutputPath;
    private static Regex InvalidFileCharsRegex { get; }
    private static SqlFileUtils();
    private static Regex get_InvalidFileCharsRegex();
    public static void CreateUniqueFilename(string fileNamePrefix, string fileExtension, String& tempFileName);
    public static void CreateUniqueFilename(string fileNamePrefix, string fileExtension, string indexSeparator, bool alwaysUseSeparator, String& tempFileName);
    public static void AppendAllTextAndNormalizeLineEndings(string filePath, string text);
    public static void WriteAllTextAndNormalizeLineEndings(string filePath, string text);
    public static void BufferedCopy(BinaryReader br, FileInfo file, long length, int bufferSize);
    public static void BufferedCopy(BinaryReader br, BinaryWriter bw, long length, int bufferSize);
    public static void SetFileReadWrite(string fullFilePath);
    public static FileStream GetExclusiveFileStream(FileInfo fileInfo, FileAccess fileAccess);
    public static bool IsUnderDirectory(string parentDirectory, string childDirectory);
    public static string ReplaceBasePathWithAnother(string oldBasePath, string newBasePath, string pathToReplace);
    public static string MakeRelative(string fullPathParentDirectory, string fullPathChild);
    public static bool IsSamePath(string file1, string file2);
    public static bool PathsAreEqual(string fullPath1, string fullPath2);
    public static string ReplaceIllegalNtfsCharacters(string originalString, bool replaceDirectorySeparator, bool replaceInvalidMsBuildCharacters);
    public static string GetCurrentFolderPathAbsolute(string path, string folderText);
    public static bool IsFilePartInvalid(string filePart, bool ignoreSurrogates);
    public static void CopyDirectory(string sourceDir, string targetDir, bool overwriteExistingFiles);
    public static int CompareTwoPaths(string fullPath1, string fullPath2);
    public static bool TryCreateDirectory(string fullPath);
    public static void CreateDirectory(string fullPath);
    public static string EnsureNoBackslash(string fullPath);
    public static string EnsureBackslash(string path);
    public static bool ArraysAreEqual(Byte[] hash1, Byte[] hash2);
    public static bool TryGetFileSize(string fullFileName, Int64& fileSize);
    public static HashAlgorithm GetHashAlgorithm();
    public static bool TryCalculateHashValue(string fullFileName, Byte[]& hash);
    public static bool HasExtension(string fileName, string extension);
    public static IList`1<string> GetFilesAndDirectories(string startPath, bool recursive);
    public static string CreateCopyOfName(string newPath);
    public static string GetTwoPartExtension(string fileName);
    public static string CreateUniqueProjectName(string folder, string projectName, HashSet`1<string> projectsInSolution);
    public static string CreateUniqueTwoPartFilename(string newFileName);
    public static string CreateUniqueThreePartFilename(string newFileName);
    public static string VerifyAgainstMaxPath(string fullFileName);
    public static string CanonicalizeFileName(string fullPathFileName);
    public static bool TrySetFileReadWrite(string fullFileName);
    public static void EnsureDirectoryExists(string fullPath);
    public static string CanonicalizeDirectoryName(string fullPathDirName);
    public static void SpinDelete(string path);
    public static bool SafeFileExists(string path);
    public static bool SafeDelete(string fileName);
    public static bool SafeIsPathRooted(string path);
    public static string SafeGetFullPath(string path);
    public static FileInfo SafeGetFile(string path);
    public static bool SafeDirectoryExists(string path);
    public static bool SafeIsUnderDirectory(string parentDirectory, string childDirectory);
    private static void AppendOrWriteAllTextAndNormalizeLineEndings(string filePath, string text, bool doAppend);
    private static string CanonicalizeFileNameOrDirectoryImpl(string path, bool pathIsDir);
    internal static bool IsValidFileName(string fname);
    public static bool SafeAppendAllText(string path, string contents);
    public static bool SafeWriteAllText(string path, string contents);
    private static bool SafeWriteAllText(string path, string contents, bool doAppend);
    internal static DirectoryInfo GetDirectoryWithCorrectCase(DirectoryInfo info);
    public static string EnsureIsDelimited(string name);
    public static string EnsureIsDelimited(string name, bool doReplacementOfInvalidChars, Boolean& foundInvalidCharacters);
    public static bool IsValidCharacter(char character);
    internal static bool IsFileNameAllGivenCharacter(char character, string fileName);
    public static string GetCanonicalizedForm(string path);
    public static string GetExtension(string path);
    private static bool IsDirectorySeparatorChar(char c);
    public static bool IsAbsolutePhysicalPath(string path);
    public static string MakeFullPath(string relativePath, string fileName);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SqlIntegerRange : ValueType {
    private int _begin;
    private int _end;
    public int Begin { get; }
    public int End { get; }
    public SqlIntegerRange(int begin, int end);
    public int get_Begin();
    public int get_End();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SqlIntegerRangeOverlapComparer : object {
    public sealed virtual int Compare(SqlIntegerRange x, SqlIntegerRange y);
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.SqlModelUpdatingService : object {
    protected static string VStemplateCreateTable;
    protected static string VStemplateCreateScriptBuild;
    protected static string VStemplateCreateTrigger;
    protected static string VStemplateCreateSequence;
    private static string SequencePrefix;
    [CompilerGeneratedAttribute]
private SqlModelUpdater <SqlModelUpdater>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeModelUpdateEventArgs> BeforeUpdatingScripts;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeResolveChangesEventArgs> BeforeResolveChanges;
    protected SqlModelUpdater SqlModelUpdater { get; private set; }
    public bool IsProcessingScriptChanges { get; }
    public SqlModelUpdatingService(SqlModelUpdater modelUpdater);
    [CompilerGeneratedAttribute]
protected SqlModelUpdater get_SqlModelUpdater();
    [CompilerGeneratedAttribute]
private void set_SqlModelUpdater(SqlModelUpdater value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BeforeUpdatingScripts(EventHandler`1<BeforeModelUpdateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BeforeUpdatingScripts(EventHandler`1<BeforeModelUpdateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BeforeResolveChanges(EventHandler`1<BeforeResolveChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BeforeResolveChanges(EventHandler`1<BeforeResolveChangesEventArgs> value);
    protected virtual void UpdateScripts(IEnumerable`1<SqlScriptUpdateInfo> updates, string description);
    protected void NotifyScriptsToUpdate(IEnumerable`1<SqlScriptUpdateInfo> updates);
    private void modelUpdater_BeforeModelUpdate(object sender, BeforeModelUpdateEventArgs e);
    private void VerifyCanEditFiles(IEnumerable`1<SqlScriptUpdateInfo> updates);
    private static String[] GetDocumentsToUpdate(IEnumerable`1<SqlScriptUpdateInfo> updates);
    protected abstract virtual bool CanEditFiles(String[] files);
    public abstract virtual bool get_IsProcessingScriptChanges();
    public sealed virtual void SetColumnNullable(SqlSimpleColumn column, bool isNullable);
    public sealed virtual void SetColumnIsIdentity(SqlSimpleColumn column, bool isIdentity);
    private void SetTableIdentity(SqlSimpleColumn column);
    public sealed virtual void SetColumnIdentitySeed(SqlSimpleColumn column, SqlDecimal seed);
    public sealed virtual void SetColumnIdentityIncrement(SqlSimpleColumn column, SqlDecimal increment);
    public sealed virtual void SetColumnDataType(SqlSimpleColumn column, SqlType newType);
    public sealed virtual void SetColumnDataTypeLength(SqlSimpleColumn column, int length, bool isMax);
    public sealed virtual void SetColumnDataTypePrecision(SqlSimpleColumn column, int precision);
    public sealed virtual void SetColumnDataTypeScale(SqlSimpleColumn column, int scale);
    public sealed virtual void SetXmlColumnStyle(SqlSimpleColumn column, bool isXmlDocument);
    public sealed virtual void SetXmlColumnXmlSchema(SqlSimpleColumn column, SqlXmlSchemaCollection xmlSchema);
    public abstract virtual void RenameElement(ISqlModelElement modelElement, string newName);
    public virtual void SetColumnBuiltInDataType(SqlSimpleColumn column, string typeSpec);
    protected void SetColumnBuiltInDataTypeInternal(SqlSchemaModel model, SqlSimpleColumn column, DataTypeReference dataTypeRef, string typeSpec);
    public sealed virtual bool IsTypeSpecValid(SqlSimpleColumn column, string typeSpec);
    protected static bool IsTypeSpecValid(SqlSimpleColumn column, string typeSpec, SqlSchemaModel& model, DataTypeReference& dataTypeRef);
    public sealed virtual void InsertSimpleColumnAtLastIndex(SqlTable table, string columnName);
    public sealed virtual void InsertSimpleColumnAt(SqlTable table, string columnName, int index);
    public sealed virtual void InsertSimpleColumnBuiltInDataTypeAt(SqlTable table, string columnName, int index, string typeSpec, bool nullable);
    public sealed virtual void InsertComputedColumnAt(SqlTable table, string columnName, int index, string expression);
    public sealed virtual void SetComputedColumnExpression(SqlComputedColumn column, string expression);
    public sealed virtual void SetComputedColumnIsPersisted(SqlComputedColumn column, bool isPersisted);
    public sealed virtual void SetComputedColumnIsPersistedNullable(SqlComputedColumn column, bool isPersistedNullable);
    public virtual void DeleteColumn(SqlColumn column);
    public sealed virtual void DeleteColumns(IEnumerable`1<SqlColumn> columns);
    public sealed virtual void MergeTable(IEnumerable`1<SqlColumn> sourceColumns, SqlTable targetTable);
    public sealed virtual void AddExtendedProperty(ISqlExtendedPropertyHost propertyHost, string propertyName, string value);
    public sealed virtual void SetExtendedProperty(SqlExtendedProperty extendedProperty, string value);
    public sealed virtual void DeleteExtendedProperty(SqlExtendedProperty extendedProperty);
    public sealed virtual void AddCheckConstraint(SqlTable table, string constraintName);
    public sealed virtual void AddPrimaryKeyConstraint(SqlTable table, IEnumerable`1<SqlColumn> columns);
    public sealed virtual void AddPrimaryKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> columns);
    public sealed virtual void DeletePrimaryKeyConstraint(SqlPrimaryKeyConstraint primaryKeyConstraint);
    public sealed virtual void SetPrimaryKey(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> columns);
    public sealed virtual void RemovePrimaryKey(SqlTable table);
    private SqlTable RemoveAllExistingPrimaryKeyConstraints(SqlTable table);
    public sealed virtual void SetPrimaryKeyIsClustered(SqlPrimaryKeyConstraint primaryKey, bool isClustered);
    public sealed virtual void UpdatePrimaryKeyColumns(SqlPrimaryKeyConstraint primaryKeyConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public sealed virtual void UpdateIndexColumns(SqlIndex sqlIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public sealed virtual void UpdateColumnStoreIndexColumns(SqlColumnStoreIndex columnStoreIndex, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public sealed virtual void AddUniqueConstraint(SqlTable table, string constraintName);
    public sealed virtual void SetUniqueConstraintIsClustered(SqlUniqueConstraint uniqueConstraint, bool isClustered);
    public sealed virtual void UpdateUniqueConstraintColumns(SqlUniqueConstraint uniqueConstraint, IEnumerable`1<SqlColumn> columns, IEnumerable`1<bool> sortOrder);
    public sealed virtual void AddForeignKeyConstraint(SqlTable table, string constraintName, IEnumerable`1<SqlColumn> referencingColumns, SqlTableBase referencedTable, IEnumerable`1<SqlColumn> referencedColumns);
    public sealed virtual void DeleteForeignKeyConstraint(SqlForeignKeyConstraint foreignKeyConstraint);
    public sealed virtual void AddDefaultConstraint(SqlSimpleColumn column, string expression);
    public sealed virtual void DeleteDefaultConstraint(SqlDefaultConstraint defaultConstraint);
    public sealed virtual void SetDefaultConstraintExpression(SqlDefaultConstraint constraint, string expression);
    public sealed virtual void CreateIndex(SqlTable table, string name);
    public sealed virtual void SetIndexIsClustered(SqlIndex index, bool isClustered);
    public sealed virtual void SetIndexIsUnique(SqlIndex index, bool isUnique);
    public sealed virtual void CreateXmlIndex(SqlTable table, string name, bool isPrimary);
    public sealed virtual void CreateSelectiveXmlIndex(SqlTable table, string name, bool isPrimary);
    public sealed virtual void CreateSpatialIndex(SqlTable table, string name);
    public sealed virtual void CreateFullTextIndex(SqlTable table);
    public sealed virtual void CreateColumnStoreIndex(SqlTable table, string name);
    public sealed virtual void CreateDmlTrigger(SqlTable table, string name);
    public abstract virtual void SetNewSequenceAndAssociateToDefaultConstraint(SqlTable table, SqlSimpleColumn column, string name);
    public abstract virtual void AddTable(string schemaName, string tableName);
    public sealed virtual void DeleteTable(SqlTable table);
    public sealed virtual void DeleteView(SqlView view);
    public sealed virtual void DeleteSubroutine(SqlSubroutine subroutine);
    public sealed virtual void SetForeignKeyForeignTable(SqlForeignKeyConstraint constraint, SqlTable referencedTable);
    public sealed virtual void InsertForeignKeyForeignColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public sealed virtual void InsertForeignKeyColumnAt(SqlForeignKeyConstraint constraint, SqlColumn column, int index);
    public sealed virtual void SetForeignKeyForeignColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    public sealed virtual void SetForeignKeyColumn(SqlForeignKeyConstraint constraint, SqlColumn newColumn, int index);
    public sealed virtual List`1<ISqlModelElement> SetDescriptionForElement(ISqlExtendedPropertyHost propertyHost, string value);
    private void DeleteAllDescriptionsForElement(IList`1<SqlExtendedProperty> descriptions, List`1<ISqlModelElement> extendedPropertiesToBeDropped);
    public sealed virtual void SetColumnDefaultValue(SqlSimpleColumn column, string expression);
    public sealed virtual void SetSequenceToDefaultValue(SqlSimpleColumn column, SqlSequence sequence);
    private static IEnumerable`1<SqlDefaultConstraint> GetColumnDefaultConstraints(SqlSimpleColumn column);
    public sealed virtual void DeleteCheckConstraint(SqlCheckConstraint sqlChk);
    public sealed virtual void DeleteEdgeConstraint(SqlEdgeConstraint edgeConstraint);
    public sealed virtual void SetCheckConstraintExpression(SqlCheckConstraint sqlChk, string expression);
    public sealed virtual void DeleteUniqueKeyConstraint(SqlUniqueConstraint sqlUniqueKey);
    public sealed virtual void DeleteIndex(SqlIndex sqlIndex);
    public sealed virtual void DeleteXmlIndex(SqlXmlIndex sqlXmlIndex);
    public sealed virtual void DeleteSelectiveXmlIndex(SqlSelectiveXmlIndex sqlSelectiveXmlIndex);
    public sealed virtual void DeleteSpatialIndex(SqlSpatialIndex sqlSpatial);
    public sealed virtual void DeleteFullTextIndex(SqlFullTextIndex sqlFullTextIndex);
    public sealed virtual void DeleteColumnStoreIndex(SqlColumnStoreIndex sqlColumnStoreIndex);
    public sealed virtual void DeleteDmlTrigger(SqlDmlTrigger sqlTrigger);
    private static SqlColumn DeleteColumnAssociatedElements(SqlColumn column, GetNextColumnAssociatedElement`1<T> getNextElementDelegate, DeleteModelElement`1<T> deleteModelElementDelegate);
    public sealed virtual void ExecuteUpdateModelOperation(Action operation);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SqlModelUpdatingServiceUndoTransaction : object {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private bool <Commit>k__BackingField;
    public bool Commit { get; public set; }
    public SqlModelUpdatingServiceUndoTransaction(string description, UInt32 flags);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public bool get_Commit();
    [CompilerGeneratedAttribute]
public void set_Commit(bool value);
    public sealed virtual void Dispose();
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.SqlStringUtils : object {
    public static string StripCR(string str);
    public static int MultiLineCompare(string x, string y, StringComparison mode);
    public static bool MultiLineEquals(string x, string y, StringComparison mode);
    public static bool EmptyOrSpace(string str);
    public static bool NotEmptyAfterTrim(string str);
    public static bool EqualValue(string str1, string str2);
    public static string CommentOut(string str);
    public static bool IsSqlVariable(string variable);
    public static string ExtractNameOfVariable(string variable);
    public static List`1<Tuple`2<string, int>> GetVariablesFromString(string value);
    public static bool TryToParseCommandLineArguments(string arguments, IList`1& parameters, String& errorMessage);
    public static string ConvertByteArrayToHexString(Byte[] content);
    public static Byte[] ConvertHexStringToByteArray(string hexString);
    public static Encoding GetDacEncoding();
    public static string GeneratePassword();
    [DebuggerStepThroughAttribute]
public static string StripOffBrackets(string name);
    public static bool HasMsBuildDelimiters(string name);
    [DebuggerStepThroughAttribute]
public static string StripOffMsBuildDelimiters(string name);
    public static string EnsureIsMsBuildDelimited(string name);
    public static string EscapeDatabaseName(string database);
    public static string EscapeColumnName(string columnName);
    public static string EscapeSqlCmdVariable(string value);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.SqlTemporaryFilenameHelper : ValueType {
    private static int _tempFileCounter;
    private static string _tempFileNameTemplate;
    private int _tempFileNumber;
    public bool HasFilename { get; }
    public string Filename { get; }
    private static SqlTemporaryFilenameHelper();
    public void IntializeFilename();
    public bool get_HasFilename();
    public string get_Filename();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.AddNewSqlSequencePickerItem : SqlSequencePickerItem {
    public static SelectionAction GetNewSequenceName;
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.Base : object {
    private Table _table;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private ISqlModelElement <SqlModelElement>k__BackingField;
    public Table Table { get; protected set; }
    public ISqlModelElement SqlModelElement { get; protected set; }
    public SqlSchemaModel SqlSchemaModel { get; }
    public string Name { get; public set; }
    internal Base(ISqlModelElement sqlModelElement);
    internal Base(ISqlModelElement sqlModelElement, Table table);
    public Table get_Table();
    protected void set_Table(Table value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public ISqlModelElement get_SqlModelElement();
    [CompilerGeneratedAttribute]
protected void set_SqlModelElement(ISqlModelElement value);
    public SqlSchemaModel get_SqlSchemaModel();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual EditingContext GetEditingContext();
    protected ISqlModelUpdatingService GetPersistDesignerChangeService();
    protected void OnPropertyChanged(string propName);
    public bool PerformEdit(ModelUpdateOperation operation, bool refreshItem, bool refreshDesignerState);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.CheckConstraint : Base {
    private SqlCheckConstraint _constraint;
    public string Expression { get; public set; }
    public bool Enabled { get; public set; }
    public CheckConstraint(SqlCheckConstraint element, Table table);
    public string get_Expression();
    public void set_Expression(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.CheckConstraintCollection : ConstraintViewModelCollectionBase`1<CheckConstraintViewModel> {
    protected string NewObjectNamePrefix { get; }
    internal CheckConstraintCollection(TableViewModel table);
    protected virtual string get_NewObjectNamePrefix();
    protected virtual CheckConstraintViewModel CreateNewObject(string name);
    protected virtual void RemoveObject(CheckConstraintViewModel obj);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.CheckConstraintViewModel : ObjectViewModelBase {
    private CheckConstraint _checkConstraint;
    public string Name { get; public set; }
    public bool Enabled { get; public set; }
    public string Expression { get; public set; }
    internal string DefaultNamePrefix { get; }
    internal CheckConstraintViewModel(TableViewModel tableViewModel, SqlCheckConstraint constraint);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_Expression();
    public void set_Expression(string value);
    internal virtual string get_DefaultNamePrefix();
    internal static string GetDefaultNamePrefix(string tableName);
    internal void RecreateAnnotation();
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__14_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__14_1();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.Column : Base {
    private bool _isHighlighted;
    public SqlColumn SqlColumn { get; }
    public SqlSimpleColumn SqlSimpleColumn { get; }
    public SqlComputedColumn SqlComputedColumn { get; }
    public bool IsHighlighted { get; public set; }
    public bool TemporalGeneratedAlwaysColumn { get; }
    [BrowsableAttribute("True")]
public string Name { get; public set; }
    [BrowsableAttribute("True")]
public bool CanEditDataType { get; }
    [BrowsableAttribute("True")]
public string DataType { get; public set; }
    public string AdvancedDataType { get; public set; }
    public IEnumerable`1<string> AdvancedDataTypes { get; }
    public IEnumerable`1<SqlTypePickerItem> DataTypes { get; }
    [BrowsableAttribute("True")]
public bool CanEditDescription { get; }
    [BrowsableAttribute("True")]
public string Description { get; public set; }
    [BrowsableAttribute("True")]
public bool CanEditSequence { get; }
    [BrowsableAttribute("True")]
public string Sequence { get; public set; }
    public IEnumerable`1<SqlSequencePickerItem> Sequences { get; }
    [BrowsableAttribute("True")]
public bool CanEditName { get; }
    [BrowsableAttribute("True")]
public bool CanEditLength { get; }
    [BrowsableAttribute("True")]
public string Length { get; public set; }
    public bool CanHaveLength { get; }
    [BrowsableAttribute("True")]
public bool CanEditPrecision { get; }
    [BrowsableAttribute("True")]
public Nullable`1<int> Precision { get; public set; }
    public bool CanHavePrecision { get; }
    [BrowsableAttribute("True")]
public bool CanEditScale { get; }
    [BrowsableAttribute("True")]
public Nullable`1<int> Scale { get; public set; }
    public bool CanHaveScale { get; }
    [BrowsableAttribute("True")]
public string DefaultValue { get; public set; }
    [BrowsableAttribute("True")]
public bool CanEditDefaultValue { get; }
    [BrowsableAttribute("True")]
public bool CanEditIdentityValues { get; }
    [BrowsableAttribute("True")]
public Nullable`1<decimal> IdentitySeed { get; public set; }
    [BrowsableAttribute("True")]
public Nullable`1<decimal> IdentityIncrement { get; public set; }
    [BrowsableAttribute("True")]
public ColumnType ColType { get; }
    [BrowsableAttribute("True")]
public bool CanEditRequired { get; }
    [BrowsableAttribute("True")]
public bool CanEditIsNullable { get; }
    [BrowsableAttribute("True")]
public bool IsNullable { get; public set; }
    [BrowsableAttribute("True")]
public bool IsIdentity { get; public set; }
    [BrowsableAttribute("True")]
public bool CanEditIsIdentity { get; }
    [BrowsableAttribute("True")]
public bool CanBePrimary { get; }
    [BrowsableAttribute("True")]
public bool IsPrimary { get; }
    public bool CanBeDeleted { get; }
    public Column(SqlColumn sqlCol, Table vmTable);
    public SqlColumn get_SqlColumn();
    public SqlSimpleColumn get_SqlSimpleColumn();
    public SqlComputedColumn get_SqlComputedColumn();
    public bool get_IsHighlighted();
    public void set_IsHighlighted(bool value);
    public bool IsTypeSpecValid(string typeSpec);
    public bool get_TemporalGeneratedAlwaysColumn();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_CanEditDataType();
    public string get_DataType();
    public void set_DataType(string value);
    public string get_AdvancedDataType();
    public void set_AdvancedDataType(string value);
    public IEnumerable`1<string> get_AdvancedDataTypes();
    public IEnumerable`1<SqlTypePickerItem> get_DataTypes();
    public bool get_CanEditDescription();
    public string get_Description();
    public void set_Description(string value);
    public bool get_CanEditSequence();
    public string get_Sequence();
    public void set_Sequence(string value);
    public IEnumerable`1<SqlSequencePickerItem> get_Sequences();
    public bool get_CanEditName();
    public bool get_CanEditLength();
    public string get_Length();
    public void set_Length(string value);
    public bool get_CanHaveLength();
    public bool get_CanEditPrecision();
    public Nullable`1<int> get_Precision();
    public void set_Precision(Nullable`1<int> value);
    public bool get_CanHavePrecision();
    public bool get_CanEditScale();
    public Nullable`1<int> get_Scale();
    public void set_Scale(Nullable`1<int> value);
    public bool get_CanHaveScale();
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public bool get_CanEditDefaultValue();
    public bool get_CanEditIdentityValues();
    public Nullable`1<decimal> get_IdentitySeed();
    public void set_IdentitySeed(Nullable`1<decimal> value);
    public Nullable`1<decimal> get_IdentityIncrement();
    public void set_IdentityIncrement(Nullable`1<decimal> value);
    public ColumnType get_ColType();
    public bool get_CanEditRequired();
    public bool get_CanEditIsNullable();
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    public bool get_CanEditIsIdentity();
    public bool get_CanBePrimary();
    public bool get_IsPrimary();
    public bool get_CanBeDeleted();
    public virtual string ToString();
    internal void SetTableParentOnNewColumn(Table table);
    internal bool Delete();
    internal void ReAttach(SqlColumn column);
    private void EnsureSqlColumn(string columnName);
    [CompilerGeneratedAttribute]
private void <Delete>b__100_0(ISqlModelUpdatingService svc);
}
public enum Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ColumnGeneratedAlwaysAsType : Enum {
    public int value__;
    public static ColumnGeneratedAlwaysAsType None;
    public static ColumnGeneratedAlwaysAsType GeneratedAlwaysAsRowStart;
    public static ColumnGeneratedAlwaysAsType GeneratedAlwaysAsRowEnd;
    public static ColumnGeneratedAlwaysAsType GeneratedAlwaysAsTransactionIdStart;
    public static ColumnGeneratedAlwaysAsType GeneratedAlwaysAsTransactionIdEnd;
    public static ColumnGeneratedAlwaysAsType GeneratedAlwaysAsSequenceNumberStart;
    public static ColumnGeneratedAlwaysAsType GeneratedAlwaysAsSequenceNumberEnd;
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ColumnStoreIndexCollection : ObjectViewModelCollectionBase`1<ColumnStoreIndexViewModel> {
    protected string NewObjectNamePrefix { get; }
    internal ColumnStoreIndexCollection(TableViewModel tableViewModel);
    protected virtual string get_NewObjectNamePrefix();
    protected virtual ColumnStoreIndexViewModel CreateNewObject(string name);
    protected virtual void RemoveObject(ColumnStoreIndexViewModel obj);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ColumnStoreIndexedColumnSpecification : object {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    public string Column { get; public set; }
    internal ColumnStoreIndexedColumnSpecification(SqlIndexedColumnSpecification spec);
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ColumnStoreIndexViewModel : ObjectViewModelBase {
    private SqlColumnStoreIndex _index;
    public string Name { get; public set; }
    public bool IsClustered { get; public set; }
    public string FilterPredicate { get; public set; }
    public string ColumnsDisplayValue { get; }
    public bool CanHaveFilterPredicate { get; }
    public bool CanSpecifyColumnSpecification { get; }
    public IReadOnlyList`1<ColumnStoreIndexedColumnSpecification> Columns { get; }
    internal string DefaultNamePrefix { get; }
    internal ColumnStoreIndexViewModel(TableViewModel tableViewModel, SqlColumnStoreIndex index);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    public string get_FilterPredicate();
    public void set_FilterPredicate(string value);
    public string get_ColumnsDisplayValue();
    public bool get_CanHaveFilterPredicate();
    public bool get_CanSpecifyColumnSpecification();
    public IReadOnlyList`1<ColumnStoreIndexedColumnSpecification> get_Columns();
    public void AddNewColumnSpecification();
    public void RemoveColumnSpecification(int columnIndex);
    internal void ClearColumnSpecifications();
    public void UpdateColumnName(int columnIndex, string newValue);
    internal virtual string get_DefaultNamePrefix();
    internal static string GetDefaultNamePrefix(string tableName);
    internal void RecreateAnnotation();
    [CompilerGeneratedAttribute]
private void <AddNewColumnSpecification>b__19_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <AddNewColumnSpecification>b__19_1();
    [CompilerGeneratedAttribute]
private void <ClearColumnSpecifications>b__21_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <ClearColumnSpecifications>b__21_1();
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__26_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__26_1();
}
public enum Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ColumnType : Enum {
    public int value__;
    public static ColumnType None;
    public static ColumnType PrimaryKey;
}
public abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ConstraintViewModelCollectionBase`1 : ObjectViewModelCollectionBase`1<T> {
    private TableViewModel _tableViewModel;
    protected IEnumerable`1<string> UsedNames { get; }
    internal ConstraintViewModelCollectionBase`1(TableViewModel tableViewModel);
    protected virtual IEnumerable`1<string> get_UsedNames();
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ContextItem : object {
    public Type ItemType { get; }
    internal bool CanBeReplaced { get; }
    public abstract virtual Type get_ItemType();
    protected virtual void OnItemChanged(EditingContext context, ContextItem previousItem);
    internal void InvokeOnItemChanged(EditingContext context, ContextItem previousItem);
    internal virtual bool get_CanBeReplaced();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ContextItem`1 : ContextItem {
    private T _object;
    public T Object { get; }
    public Type ItemType { get; }
    public ContextItem`1(T obj);
    public T get_Object();
    public virtual Type get_ItemType();
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ContextItemCollection : object {
    public abstract virtual bool Contains(Type itemType);
    public bool Contains();
    public abstract virtual ContextLayer CreateLayer();
    public abstract virtual IEnumerator`1<ContextItem> GetEnumerator();
    public abstract virtual ContextItem GetValue(Type itemType);
    public TItemType GetValue();
    protected static void NotifyItemChanged(EditingContext context, ContextItem item, ContextItem previousItem);
    public abstract virtual void SetValue(ContextItem value);
    public abstract virtual void Subscribe(Type contextItemType, SubscribeContextCallback callback);
    public void Subscribe(SubscribeContextCallback`1<TContextItemType> callback);
    public void Unsubscribe(SubscribeContextCallback`1<TContextItemType> callback);
    public abstract virtual void Unsubscribe(Type contextItemType, SubscribeContextCallback callback);
    protected static object GetTarget(Delegate callback);
    protected static Delegate RemoveCallback(Delegate existing, Delegate toRemove);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ContextLayer : object {
    protected virtual override void Finalize();
    public abstract virtual void Remove(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.EdgeConstraint : Base {
    private SqlEdgeConstraint _constraint;
    public bool Enabled { get; public set; }
    public SqlForeignKeyAction OnDeleteAction { get; public set; }
    public IReadOnlyList`1<EdgeConstraintClause> Clauses { get; }
    public EdgeConstraint(SqlEdgeConstraint element, Table table);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public SqlForeignKeyAction get_OnDeleteAction();
    public void set_OnDeleteAction(SqlForeignKeyAction value);
    public IReadOnlyList`1<EdgeConstraintClause> get_Clauses();
    public void AddNewClause();
    public void RemoveClause(int index);
    public void UpdateFromTable(int clauseIndex, string newTableName);
    public void UpdateToTable(int clauseIndex, string newTableName);
    [CompilerGeneratedAttribute]
private void <AddNewClause>b__10_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <AddNewClause>b__10_1();
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.EdgeConstraintClause : object {
    [CompilerGeneratedAttribute]
private string <FromTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToTable>k__BackingField;
    public string FromTable { get; public set; }
    public string ToTable { get; public set; }
    internal EdgeConstraintClause(SqlEdgeConstraintClause clause);
    [CompilerGeneratedAttribute]
public string get_FromTable();
    [CompilerGeneratedAttribute]
public void set_FromTable(string value);
    [CompilerGeneratedAttribute]
public string get_ToTable();
    [CompilerGeneratedAttribute]
public void set_ToTable(string value);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.EdgeConstraintCollection : ConstraintViewModelCollectionBase`1<EdgeConstraintViewModel> {
    protected string NewObjectNamePrefix { get; }
    internal EdgeConstraintCollection(TableViewModel table);
    protected virtual string get_NewObjectNamePrefix();
    protected virtual EdgeConstraintViewModel CreateNewObject(string name);
    protected virtual void RemoveObject(EdgeConstraintViewModel obj);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.EdgeConstraintViewModel : ObjectViewModelBase {
    private EdgeConstraint _edgeConstraint;
    public string Name { get; public set; }
    public bool Enabled { get; public set; }
    public SqlForeignKeyAction OnDeleteAction { get; public set; }
    public string ClausesDisplayValue { get; }
    public IReadOnlyList`1<EdgeConstraintClause> Clauses { get; }
    internal string DefaultNamePrefix { get; }
    internal EdgeConstraintViewModel(TableViewModel tableViewModel, SqlEdgeConstraint constraint);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public SqlForeignKeyAction get_OnDeleteAction();
    public void set_OnDeleteAction(SqlForeignKeyAction value);
    public string get_ClausesDisplayValue();
    public IReadOnlyList`1<EdgeConstraintClause> get_Clauses();
    public void AddNewClause();
    public void RemoveClause(int index);
    public void UpdateFromTable(int clauseIndex, string newTableName);
    public void UpdateToTable(int clauseIndex, string newTableName);
    internal virtual string get_DefaultNamePrefix();
    internal static string GetDefaultNamePrefix(string tableName);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.EditingContext : object {
    private ContextItemCollection _contextItems;
    private ServiceCollection _services;
    [CompilerGeneratedAttribute]
private EventHandler Disposing;
    public ContextItemCollection Items { get; }
    public ServiceCollection Services { get; }
    [CompilerGeneratedAttribute]
public void add_Disposing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposing(EventHandler value);
    protected virtual override void Finalize();
    public ContextItemCollection get_Items();
    public ServiceCollection get_Services();
    protected virtual ContextItemCollection CreateContextItemCollection();
    protected virtual ServiceCollection CreateServiceCollection();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ForeignKeyCollection : ConstraintViewModelCollectionBase`1<ForeignKeyViewModel> {
    protected string NewObjectNamePrefix { get; }
    protected bool UseNumberInNameByDefault { get; }
    internal ForeignKeyCollection(TableViewModel table);
    protected virtual string get_NewObjectNamePrefix();
    protected virtual bool get_UseNumberInNameByDefault();
    protected virtual ForeignKeyViewModel CreateNewObject(string name);
    protected virtual void RemoveObject(ForeignKeyViewModel obj);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ForeignKeyConstraint : Base {
    private SqlForeignKeyConstraint _foreignKey;
    public string ForeignTableName { get; }
    public bool Enabled { get; public set; }
    public SqlForeignKeyAction OnDeleteAction { get; public set; }
    public SqlForeignKeyAction OnUpdateAction { get; public set; }
    public bool IsNotForReplication { get; public set; }
    public string ForeignTable { get; public set; }
    public List`1<string> ForeignColumns { get; }
    public List`1<string> Columns { get; }
    public ForeignKeyConstraint(SqlForeignKeyConstraint element, Table vmTable);
    public string get_ForeignTableName();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public SqlForeignKeyAction get_OnDeleteAction();
    public void set_OnDeleteAction(SqlForeignKeyAction value);
    public SqlForeignKeyAction get_OnUpdateAction();
    public void set_OnUpdateAction(SqlForeignKeyAction value);
    public bool get_IsNotForReplication();
    public void set_IsNotForReplication(bool value);
    public string get_ForeignTable();
    public void set_ForeignTable(string value);
    public List`1<string> get_ForeignColumns();
    public List`1<string> get_Columns();
    public void AddNewColumnMapping();
    public void RemoveColumnMapping(int index);
    public void UpdateForeignColumn(int index, string newColumnName);
    public void UpdateColumn(int index, string newColumnName);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ForeignKeyViewModel : ObjectViewModelBase {
    private ForeignKeyConstraint _foreignKey;
    public string Name { get; public set; }
    public bool Enabled { get; public set; }
    public SqlForeignKeyAction OnDeleteAction { get; public set; }
    public SqlForeignKeyAction OnUpdateAction { get; public set; }
    public bool IsNotForReplication { get; public set; }
    public string ForeignTable { get; public set; }
    public List`1<string> ForeignColumns { get; }
    public List`1<string> Columns { get; }
    internal string DefaultNamePrefix { get; }
    internal ForeignKeyViewModel(TableViewModel tableViewModel, SqlForeignKeyConstraint constraint);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public SqlForeignKeyAction get_OnDeleteAction();
    public void set_OnDeleteAction(SqlForeignKeyAction value);
    public SqlForeignKeyAction get_OnUpdateAction();
    public void set_OnUpdateAction(SqlForeignKeyAction value);
    public bool get_IsNotForReplication();
    public void set_IsNotForReplication(bool value);
    public string get_ForeignTable();
    public void set_ForeignTable(string value);
    public List`1<string> get_ForeignColumns();
    public List`1<string> get_Columns();
    public void AddNewColumnMapping();
    public void RemoveColumnMapping(int index);
    public void UpdateForeignColumn(int index, string newColumnName);
    public void UpdateColumn(int index, string newColumnName);
    internal virtual string get_DefaultNamePrefix();
    internal static string GetDefaultNamePrefix(string fromTableName, string toTableName);
    internal void RecreateAnnotation();
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__31_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__31_1();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.Index : Base {
    private SqlIndex _index;
    public bool Enabled { get; public set; }
    public bool IsClustered { get; public set; }
    internal string FilterPredicate { get; internal set; }
    public bool IsUnique { get; public set; }
    public bool IsHash { get; public set; }
    public Nullable`1<int> BucketCount { get; public set; }
    public IReadOnlyList`1<IndexedColumnSpecification> ColumnSpecifications { get; }
    internal IReadOnlyList`1<string> IncludedColumns { get; }
    public Index(SqlIndex element, Table table);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    internal string get_FilterPredicate();
    internal void set_FilterPredicate(string value);
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    public bool get_IsHash();
    public void set_IsHash(bool value);
    public Nullable`1<int> get_BucketCount();
    public void set_BucketCount(Nullable`1<int> value);
    public IReadOnlyList`1<IndexedColumnSpecification> get_ColumnSpecifications();
    public void AddNewColumnSpecification();
    public void RemoveColumnSpecification(int columnIndex);
    public void UpdateIsAscending(int columnIndex, bool newValue);
    public void UpdateColumnName(int columnIndex, string newValue);
    internal IReadOnlyList`1<string> get_IncludedColumns();
    internal void AddNewIncludedColumn();
    internal void RemoveIncludedColumn(int columnIndex);
    internal void UpdateIncludedColumn(int columnIndex, string newValue);
    [CompilerGeneratedAttribute]
private void <AddNewColumnSpecification>b__22_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <AddNewColumnSpecification>b__22_1();
    [CompilerGeneratedAttribute]
private void <AddNewIncludedColumn>b__28_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <AddNewIncludedColumn>b__28_1();
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.IndexCollection : ObjectViewModelCollectionBase`1<IndexViewModel> {
    protected string NewObjectNamePrefix { get; }
    internal IndexCollection(TableViewModel tableViewModel);
    protected virtual string get_NewObjectNamePrefix();
    protected virtual IndexViewModel CreateNewObject(string name);
    protected virtual void RemoveObject(IndexViewModel obj);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.IndexedColumnSpecification : object {
    [CompilerGeneratedAttribute]
private bool <IsAscending>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    public bool IsAscending { get; public set; }
    public string Column { get; public set; }
    internal IndexedColumnSpecification(SqlIndexedColumnSpecification spec);
    [CompilerGeneratedAttribute]
public bool get_IsAscending();
    [CompilerGeneratedAttribute]
public void set_IsAscending(bool value);
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.IndexViewModel : ObjectViewModelBase {
    private Index _index;
    public string Name { get; public set; }
    public bool IsClustered { get; public set; }
    public string FilterPredicate { get; public set; }
    public bool IsUnique { get; public set; }
    public bool CanEditIsHash { get; }
    public bool IsHash { get; public set; }
    public bool CanEditBucketCount { get; }
    public Nullable`1<int> BucketCount { get; public set; }
    public bool CanEditIsAscending { get; }
    public string ColumnsDisplayValue { get; }
    public IReadOnlyList`1<IndexedColumnSpecification> Columns { get; }
    public bool Enabled { get; public set; }
    public IReadOnlyList`1<string> IncludedColumns { get; }
    internal string DefaultNamePrefix { get; }
    internal IndexViewModel(TableViewModel tableViewModel, SqlIndex index);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    public string get_FilterPredicate();
    public void set_FilterPredicate(string value);
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    public bool get_CanEditIsHash();
    public bool get_IsHash();
    public void set_IsHash(bool value);
    public bool get_CanEditBucketCount();
    public Nullable`1<int> get_BucketCount();
    public void set_BucketCount(Nullable`1<int> value);
    public bool get_CanEditIsAscending();
    public string get_ColumnsDisplayValue();
    public IReadOnlyList`1<IndexedColumnSpecification> get_Columns();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void AddNewColumnSpecification();
    public void RemoveColumnSpecification(int columnIndex);
    public void UpdateIsAscending(int columnIndex, bool newValue);
    public void UpdateColumnName(int columnIndex, string newValue);
    public IReadOnlyList`1<string> get_IncludedColumns();
    public void AddNewIncludedColumn();
    public void RemoveIncludedColumn(int columnIndex);
    public void UpdateIncludedColumn(int columnIndex, string newValue);
    internal virtual string get_DefaultNamePrefix();
    internal static string GetDefaultNamePrefix(string tableName);
    internal void RecreateAnnotation();
    [CompilerGeneratedAttribute]
private string <get_ColumnsDisplayValue>b__27_0(IndexedColumnSpecification c);
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__45_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__45_1();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.InstDataTypesContainer : object {
    private SortedObservableCollection`1<SqlTypePickerItem> _instDataTypes;
    private bool _isModelCollationCaseSensitive;
    private bool _isPopulateWithDefaultValue;
    internal ObservableCollection`1<SqlTypePickerItem> InstDataTypes { get; }
    internal InstDataTypesContainer(SqlSchemaModel sqlSchemaModel, bool withDefaultValue);
    internal ObservableCollection`1<SqlTypePickerItem> get_InstDataTypes();
    internal virtual bool IsValidDataType(SqlType type);
    internal SqlType GetRepresentedDataType(string dataTypeDisplayName);
    internal int IndexOfTypeRepresentName(string dataTypeSimpleDisplayName);
    internal void DeleteInstType(SqlType sqlType);
    internal void AddInstType(SqlType type);
    protected virtual void InitDataTypes(SqlSchemaModel sqlSchemaModel);
    protected void AddTypesToListPicker(IEnumerable`1<T> typesList, SqlTypeCategory cat);
    private void AddNewPickerItemType(SqlTypeCategory cat, SqlType sqlType);
    protected virtual IList`1<SqlTypeDisplayBase> GetResolvedSqlTypeDisplays(SqlType sqlType);
    private bool ContainsSqlType(SqlType sqlType);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.InstHekatonDataTypesContainer : InstDataTypesContainer {
    internal InstHekatonDataTypesContainer(SqlSchemaModel sqlSchemaModel, bool withDefaultValue);
    protected virtual IList`1<SqlTypeDisplayBase> GetResolvedSqlTypeDisplays(SqlType sqlType);
    protected virtual void InitDataTypes(SqlSchemaModel sqlSchemaModel);
    internal virtual bool IsValidDataType(SqlType type);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.NullSqlSequencePickerItem : SqlSequencePickerItem {
}
public abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ObjectViewModelBase : object {
    [CompilerGeneratedAttribute]
private TableViewModel <TableViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlModelElement <ModelElement>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> PropertyChanged;
    [CompilerGeneratedAttribute]
private string <AutoGeneratedNameSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutoGeneratedNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNamePrefix>k__BackingField;
    public string SystemName { get; }
    internal TableViewModel TableViewModel { get; private set; }
    internal SqlModelElement ModelElement { get; private set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public bool CanEditDescription { get; }
    internal string AutoGeneratedNameSuffix { get; internal set; }
    internal string AutoGeneratedNamePrefix { get; internal set; }
    internal string DefaultNamePrefix { get; }
    internal ObjectViewModelBase(TableViewModel tableViewModel, SqlModelElement element);
    protected void SetName(string name, Action action);
    public string get_SystemName();
    [CompilerGeneratedAttribute]
internal TableViewModel get_TableViewModel();
    [CompilerGeneratedAttribute]
private void set_TableViewModel(TableViewModel value);
    [CompilerGeneratedAttribute]
internal SqlModelElement get_ModelElement();
    [CompilerGeneratedAttribute]
private void set_ModelElement(SqlModelElement value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(EventHandler`1<EventArgs> value);
    internal void NotifyPropertyChanged();
    public string get_Description();
    public void set_Description(string value);
    public bool get_CanEditDescription();
    [CompilerGeneratedAttribute]
internal string get_AutoGeneratedNameSuffix();
    [CompilerGeneratedAttribute]
internal void set_AutoGeneratedNameSuffix(string value);
    [CompilerGeneratedAttribute]
internal string get_AutoGeneratedNamePrefix();
    [CompilerGeneratedAttribute]
internal void set_AutoGeneratedNamePrefix(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_DefaultNamePrefix();
    internal void UpdateAutoGeneratedName();
    internal void AdjustTableNameUpdate();
}
public abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ObjectViewModelCollectionBase`1 : object {
    private TableViewModel _tableViewModel;
    [CompilerGeneratedAttribute]
private List`1<T> <_items>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<T> ItemAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<T> ItemRemoved;
    [CompilerGeneratedAttribute]
private string <NewObjectNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNumberInNameByDefault>k__BackingField;
    internal Table Table { get; }
    internal TableViewModel TableViewModel { get; }
    private List`1<T> _items { get; }
    protected string NewObjectNamePrefix { get; }
    protected bool UseNumberInNameByDefault { get; }
    public IReadOnlyList`1<T> Items { get; }
    protected IEnumerable`1<string> UsedNames { get; }
    internal ObjectViewModelCollectionBase`1(TableViewModel tableViewModel);
    internal Table get_Table();
    internal TableViewModel get_TableViewModel();
    [CompilerGeneratedAttribute]
private List`1<T> get__items();
    [CompilerGeneratedAttribute]
public void add_ItemAdded(EventHandler`1<T> value);
    [CompilerGeneratedAttribute]
public void remove_ItemAdded(EventHandler`1<T> value);
    [CompilerGeneratedAttribute]
public void add_ItemRemoved(EventHandler`1<T> value);
    [CompilerGeneratedAttribute]
public void remove_ItemRemoved(EventHandler`1<T> value);
    private void NotifyItemAdded(T item);
    private void NotifyItemRemoved(T item);
    [CompilerGeneratedAttribute]
protected virtual string get_NewObjectNamePrefix();
    [CompilerGeneratedAttribute]
protected virtual bool get_UseNumberInNameByDefault();
    public IReadOnlyList`1<T> get_Items();
    public void AddNew();
    protected void Add(T item);
    protected void Insert(int index, T item);
    public void RemoveAt(int itemIndex);
    public void Clear();
    protected abstract virtual T CreateNewObject(string name);
    protected abstract virtual void RemoveObject(T obj);
    protected virtual IEnumerable`1<string> get_UsedNames();
    protected string GetDefaultNewObjectName(String& autoGeneratedPrefix, String& autoGeneratedSuffix);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.PickerItemBase : object {
    private string _textBeforeMatch;
    private string _filterTextMatch;
    private string _textAfterMatch;
    private string _name;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; protected set; }
    public string Category { get; private set; }
    public string TextBeforeMatch { get; }
    public string FilterTextMatch { get; }
    public string TextAfterMatch { get; }
    public PickerItemBase(string name, string category);
    public string get_Name();
    protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    public virtual string ToString();
    public virtual void Initialize();
    public string get_TextBeforeMatch();
    public string get_FilterTextMatch();
    public string get_TextAfterMatch();
    public virtual void ApplyFilter(string filter);
    protected void SetNoTextMatch();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void OnPropertyChanged(string property);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.PrimaryKeyConstraintViewModel : ObjectViewModelBase {
    private SqlPrimaryKeyConstraint _constraint;
    public string Name { get; public set; }
    public bool IsClustered { get; public set; }
    public IReadOnlyList`1<IndexedColumnSpecification> Columns { get; }
    internal string DefaultNamePrefix { get; }
    internal PrimaryKeyConstraintViewModel(TableViewModel tableViewModel, SqlPrimaryKeyConstraint constraint);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    public IReadOnlyList`1<IndexedColumnSpecification> get_Columns();
    public void AddNewColumnSpecification();
    public void RemoveColumnSpecification(int columnIndex);
    public void MoveColumn(int fromIndex, int toIndex);
    public void UpdateIsAscending(int columnIndex, bool newValue);
    public void UpdateColumnName(int columnIndex, string newValue);
    internal virtual string get_DefaultNamePrefix();
    internal static string GetDefaultNamePrefix(string tableName);
    internal void RecreateAnnotation();
    internal void UpdateAutoGeneratedPrimaryKeyName(string oldTableName);
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__18_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <RecreateAnnotation>b__18_1();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.PublishServiceCallback : MulticastDelegate {
    public PublishServiceCallback(object object, IntPtr method);
    public virtual object Invoke(Type serviceType);
    public virtual IAsyncResult BeginInvoke(Type serviceType, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.PublishServiceCallback`1 : MulticastDelegate {
    public PublishServiceCallback`1(object object, IntPtr method);
    public virtual TServiceType Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TServiceType EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.Selection`2 : ContextItem {
    private IList`1<T> _selectedObjects;
    private T _container;
    private static Predicate`1<T> _selectionFilter;
    public T Container { get; private set; }
    public T PrimarySelection { get; }
    public IEnumerable`1<T> SelectedObjects { get; }
    public int SelectionCount { get; }
    public Type ItemType { get; }
    public Selection`2(IEnumerable`1<T> selectedObjects, T container);
    public sealed virtual void Dispose();
    internal static bool IsValid(T info);
    public T get_Container();
    private void set_Container(T value);
    public T get_PrimarySelection();
    public IEnumerable`1<T> get_SelectedObjects();
    public int get_SelectionCount();
    public virtual Type get_ItemType();
    public static void RegisterSelectionFilter(Predicate`1<T> selectionFilter);
    private static bool IsAllowed(T info);
    public static void Clear(EditingContext context);
    public static Selection`2<T, Owner> SelectOnly(EditingContext context, T itemToSelect);
    public static Selection`2<T, Owner> Replace(EditingContext context, IEnumerable`1<T> itemsToSelect);
    private static Selection`2<T, Owner> ReplaceIfDifferent(EditingContext context, IEnumerable`1<T> itemsToSelect);
    public static void Subscribe(EditingContext context, SubscribeContextCallback`1<Selection`2<T, Owner>> handler);
    public static Selection`2<T, Owner> Toggle(EditingContext context, T itemToToggle);
    public static Selection`2<T, Owner> AddRemove(EditingContext context, IEnumerable`1<T> added, IEnumerable`1<T> removed);
    public static void SetContainer(EditingContext context, T container);
    public static bool SetPrimarySelection(EditingContext context, T item);
    public static void Unsubscribe(EditingContext context, SubscribeContextCallback`1<Selection`2<T, Owner>> handler);
    public static T GetPrimarySelection(EditingContext context);
    public static IEnumerable`1<T> GetSelectedObjects(EditingContext context);
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ServiceCollection : object {
    public abstract virtual bool Contains(Type serviceType);
    public bool Contains();
    public TServiceType GetRequiredService();
    public TServiceType GetService();
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerator`1<Type> GetEnumerator();
    public abstract virtual void Subscribe(Type serviceType, SubscribeServiceCallback callback);
    public void Subscribe(SubscribeServiceCallback`1<TServiceType> callback);
    public abstract virtual void Publish(Type serviceType, PublishServiceCallback callback);
    public abstract virtual void Publish(Type serviceType, object serviceInstance);
    public void Publish(PublishServiceCallback`1<TServiceType> callback);
    public void Publish(TServiceType serviceInstance);
    public void Unsubscribe(SubscribeServiceCallback`1<TServiceType> callback);
    public abstract virtual void Unsubscribe(Type serviceType, SubscribeServiceCallback callback);
    protected static object GetTarget(Delegate callback);
    protected static Delegate RemoveCallback(Delegate existing, Delegate toRemove);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlForeignKeyAction : Enum {
    public int value__;
    public static SqlForeignKeyAction NoAction;
    public static SqlForeignKeyAction Cascade;
    public static SqlForeignKeyAction SetNull;
    public static SqlForeignKeyAction SetDefault;
}
[ExtensionAttribute]
internal static class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlModelExtension : object {
    [ExtensionAttribute]
internal static string GetName(IModelElement sqlElem, ElementNameStyle nameStyle);
    [ExtensionAttribute]
internal static string GetTypeDescription(ISqlModelElement modelElement);
    [ExtensionAttribute]
internal static string GetDescription(ISqlExtendedPropertyHost propertyHost);
    [ExtensionAttribute]
internal static void SetDescription(ISqlExtendedPropertyHost propertyHost, ISqlModelUpdatingService changeService, string description);
    [ExtensionAttribute]
internal static string GetDisplayName(ModelIdentifier sqlModelIdentifier, EscapeStyle escapeStyle, bool fullName);
    [ExtensionAttribute]
internal static bool HasName(IModelElement sqlElement);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlSequenceComparer : object {
    public sealed virtual int Compare(SqlSequencePickerItem x, SqlSequencePickerItem y);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlSequencePickerItem : PickerItemBase {
    [CompilerGeneratedAttribute]
private SqlSequence <SqlSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    public SqlSequence SqlSequence { get; protected set; }
    public string FullyQualifiedName { get; protected set; }
    public SqlSequencePickerItem(SqlSequence sequence);
    [CompilerGeneratedAttribute]
public SqlSequence get_SqlSequence();
    [CompilerGeneratedAttribute]
protected void set_SqlSequence(SqlSequence value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
protected void set_FullyQualifiedName(string value);
}
internal abstract class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypeDisplayBase : object {
    private SqlType _sqlType;
    private string _dataTypeDisplayName;
    public SqlType SqlType { get; }
    public string RepresentName { get; }
    public string DisplayName { get; }
    public SqlTypeDisplayBase(SqlType sqlType);
    internal virtual void Initialize();
    public SqlType get_SqlType();
    public virtual string get_RepresentName();
    public virtual string get_DisplayName();
    public virtual void UpdateWithDesignTimeValue(SqlSimpleColumn sqlSimpleColumn);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypeDisplayDefault : SqlTypeDisplayBase {
    public SqlTypeDisplayDefault(SqlType sqlType);
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypeDisplayFactory : object {
    public static Dictionary`2<SqlDataType, int> SqlTypeCanDisplayWithDefaultLengthMap;
    public static Dictionary`2<SqlDataType, int> SqlTypeCanDisplayWithDefaultScaleMap;
    public static Dictionary`2<SqlDataType, int> SqlTypeCanDisplayWithDefaultPrecisionMap;
    private static SqlTypeDisplayFactory();
    public static SqlTypeDisplayBase GetDesignTimeSqlTypeDisplay(SqlSimpleColumn sqlSimpleColumn);
    public static IList`1<SqlTypeDisplayBase> GetResolvedSqlTypeDisplays(SqlType sqlType, bool createMaxLength);
    public static SqlTypeDisplayBase GetUnResolvedSqlTypeDisplay(SqlTypeSpecifierBase sqlTypeSpecifier);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypeDisplayWithLength : SqlTypeDisplayBase {
    private SqlBuiltInType _sqlBuiltInType;
    private string _displayName;
    public string DisplayName { get; }
    public SqlTypeDisplayWithLength(SqlBuiltInType sqlBuiltInType);
    internal virtual void Initialize();
    public virtual string get_DisplayName();
    public virtual void UpdateWithDesignTimeValue(SqlSimpleColumn sqlSimpleColumn);
    private string GetDisplayNameInternal(int length);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypeDisplayWithMaxLength : SqlTypeDisplayBase {
    private string _displayName;
    public string DisplayName { get; }
    public SqlTypeDisplayWithMaxLength(SqlBuiltInType sqlBuiltInType);
    internal virtual void Initialize();
    public virtual string get_DisplayName();
    private string GetDisplayNameInternal();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypeDisplayWithScale : SqlTypeDisplayBase {
    private SqlBuiltInType _sqlBuiltInType;
    private string _displayName;
    public string DisplayName { get; }
    public SqlTypeDisplayWithScale(SqlBuiltInType sqlBuiltInType);
    internal virtual void Initialize();
    public virtual string get_DisplayName();
    public virtual void UpdateWithDesignTimeValue(SqlSimpleColumn sqlSimpleColumn);
    private string GetDisplayNameInternal(int scale);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypeDisplayWithScaleAndPrecision : SqlTypeDisplayBase {
    private SqlBuiltInType _sqlBuiltInType;
    private string _displayName;
    public string DisplayName { get; }
    public SqlTypeDisplayWithScaleAndPrecision(SqlBuiltInType sqlBuiltInType);
    internal virtual void Initialize();
    public virtual string get_DisplayName();
    public virtual void UpdateWithDesignTimeValue(SqlSimpleColumn sqlSimpleColumn);
    private string GetDisplayNameInternal(int precision, int scale);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypePickerItem : PickerItemBase {
    private static Dictionary`2<SqlTypeCategory, string> _categoryDisplayStringMaps;
    [CompilerGeneratedAttribute]
private SqlTypeCategory <SqlCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlType <SqlType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTypeDisplayBase <SqlTypeDisplay>k__BackingField;
    public SqlTypeCategory SqlCategory { get; private set; }
    public SqlType SqlType { get; private set; }
    public SqlTypeDisplayBase SqlTypeDisplay { get; private set; }
    private static SqlTypePickerItem();
    private SqlTypePickerItem(SqlType type, SqlTypeCategory cat, SqlTypeDisplayBase sqlTypeDisplay);
    public static SqlTypePickerItem Create(SqlType type, SqlTypeCategory cat, SqlTypeDisplayBase sqlTypeDisplayNameFactory);
    [CompilerGeneratedAttribute]
public SqlTypeCategory get_SqlCategory();
    [CompilerGeneratedAttribute]
private void set_SqlCategory(SqlTypeCategory value);
    [CompilerGeneratedAttribute]
public SqlType get_SqlType();
    [CompilerGeneratedAttribute]
private void set_SqlType(SqlType value);
    [CompilerGeneratedAttribute]
public SqlTypeDisplayBase get_SqlTypeDisplay();
    [CompilerGeneratedAttribute]
private void set_SqlTypeDisplay(SqlTypeDisplayBase value);
    public virtual void Initialize();
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlTypesComparer : object {
    public sealed virtual int Compare(SqlTypePickerItem x, SqlTypePickerItem y);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SqlUnResolvedTypeDisplay : SqlTypeDisplayBase {
    private string _displayName;
    public string DisplayName { get; }
    public string RepresentName { get; }
    public SqlUnResolvedTypeDisplay(SqlTypeSpecifierBase sqlTypeSpecifier);
    public virtual string get_DisplayName();
    public virtual string get_RepresentName();
    private static string GetDisplayNameInternal(SqlTypeSpecifierBase sqlTypeSpecifier);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SubscribeContextCallback : MulticastDelegate {
    public SubscribeContextCallback(object object, IntPtr method);
    public virtual void Invoke(ContextItem item);
    public virtual IAsyncResult BeginInvoke(ContextItem item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SubscribeContextCallback`1 : MulticastDelegate {
    public SubscribeContextCallback`1(object object, IntPtr method);
    public virtual void Invoke(TContextItemType item);
    public virtual IAsyncResult BeginInvoke(TContextItemType item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SubscribeServiceCallback : MulticastDelegate {
    public SubscribeServiceCallback(object object, IntPtr method);
    public virtual void Invoke(Type serviceType, object serviceInstance);
    public virtual IAsyncResult BeginInvoke(Type serviceType, object serviceInstance, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.SubscribeServiceCallback`1 : MulticastDelegate {
    public SubscribeServiceCallback`1(object object, IntPtr method);
    public virtual void Invoke(TServiceType serviceInstance);
    public virtual IAsyncResult BeginInvoke(TServiceType serviceInstance, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.Table : Base {
    private EditingContext _editingContext;
    private ObservableCollection`1<Column> _columns;
    private InstDataTypesContainer _instDataTypesContainer;
    private List`1<string> _uniqueDataTypes;
    private SortedObservableCollection`1<SqlTypePickerItem> _dataTypes;
    private SortedObservableCollection`1<SqlSequencePickerItem> _sequences;
    private bool _isHekatonTable;
    internal List`1<ISqlModelElement> ItemsToBeDropped;
    internal Dictionary`2<ISqlModelElement, RenameRequest> RenameRequestMap;
    public SqlTable SqlTable { get; }
    public SqlSchema Schema { get; public set; }
    unknown string Name {public set; }
    public List`1<string> UniqueDataTypes { get; }
    public InstDataTypesContainer InstDataTypesContainer { get; }
    public SortedObservableCollection`1<SqlTypePickerItem> DataTypes { get; }
    public SortedObservableCollection`1<SqlSequencePickerItem> Sequences { get; }
    public ObservableCollection`1<Column> Columns { get; }
    private Table(SqlTable sqlTable, EditingContext context);
    protected virtual override void Finalize();
    public SqlTable get_SqlTable();
    private InstDataTypesContainer CreateDataTypeContainer(bool withDefaultValues);
    public SqlSchema get_Schema();
    public void set_Schema(SqlSchema value);
    public virtual void set_Name(string value);
    public List`1<string> get_UniqueDataTypes();
    public InstDataTypesContainer get_InstDataTypesContainer();
    public SortedObservableCollection`1<SqlTypePickerItem> get_DataTypes();
    public SortedObservableCollection`1<SqlSequencePickerItem> get_Sequences();
    public ObservableCollection`1<Column> get_Columns();
    public static Table CreateTable(SqlTable sqlTable, EditingContext editingContext);
    public sealed virtual void Dispose();
    public virtual EditingContext GetEditingContext();
    internal void ReAttach(SqlTable table);
    internal void SetPrimaryKey(IEnumerable`1<Column> selectedColumns);
    internal string GetNewPrimaryKeyConstraintName();
    internal void RemovePrimaryKey(IEnumerable`1<Column> selectedColumns);
    private void Dispose(bool disposing);
    private void SubscribeToColumnChanges();
    private void UnsubscribeToColumnChanges();
    private void Columns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnSqlModelChanged(object sender, ModelEventArgs e);
    private void VerifySqlTypeChanges(ModelEventArgs e);
    private void SyncWithModel(IList`1<SqlColumn> mdlList, ObservableCollection`1<Column> vmList);
    [CompilerGeneratedAttribute]
private void <RemovePrimaryKey>b__35_0(ISqlModelUpdatingService svc);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableColumnCollection : ObjectViewModelCollectionBase`1<TableColumnViewModel> {
    internal static string DefaultPeriodStartColumnName;
    internal static string DefaultPeriodEndColumnName;
    internal static string PeriodColumnDataType;
    private bool _isPeriodColumnsAutoAdded;
    protected string NewObjectNamePrefix { get; }
    internal TableColumnCollection(TableViewModel tableViewModel);
    protected virtual string get_NewObjectNamePrefix();
    private TableColumnViewModel CreateNewObjectAt(string name, int index);
    protected virtual TableColumnViewModel CreateNewObject(string name);
    public void AddNew(int index);
    public void Move(int from, int to);
    protected virtual void RemoveObject(TableColumnViewModel obj);
    internal void AddDefaultPeriodColumns();
    internal void RemoveDefaultPeriodColumns();
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableColumnViewModel : ObjectViewModelBase {
    [CompilerGeneratedAttribute]
private Column <Column>k__BackingField;
    private string autoGeneratedDefaultConstraintName;
    internal Column Column { get; private set; }
    public string Name { get; public set; }
    public bool CanEditName { get; }
    public string DataType { get; public set; }
    public string AdvancedDataType { get; public set; }
    public IEnumerable`1<string> DataTypes { get; }
    public IEnumerable`1<string> AdvancedDataTypes { get; }
    public bool CanEditDataType { get; }
    public string Length { get; public set; }
    public bool CanEditLength { get; }
    public bool CanHaveLength { get; }
    public bool IsNullable { get; public set; }
    public bool CanEditIsNullable { get; }
    public string DefaultValue { get; public set; }
    public bool CanEditDefaultValue { get; }
    public bool IsPrimaryKey { get; public set; }
    public bool CanEditIsPrimaryKey { get; }
    public Nullable`1<int> Scale { get; public set; }
    public bool CanEditScale { get; }
    public bool CanHaveScale { get; }
    public Nullable`1<int> Precision { get; public set; }
    public bool CanEditPrecision { get; }
    public bool CanHavePrecision { get; }
    public bool IsIdentity { get; public set; }
    public Nullable`1<decimal> IdentityIncrement { get; public set; }
    public Nullable`1<decimal> IdentitySeed { get; public set; }
    public bool CanEditIdentityValues { get; }
    public bool CanEditIsIdentity { get; }
    public bool CanBeDeleted { get; }
    public ColumnGeneratedAlwaysAsType GeneratedAlwaysAs { get; public set; }
    public bool CanEditGeneratedAlwaysAs { get; }
    public bool IsHidden { get; public set; }
    public bool CanEditIsHidden { get; }
    public string DefaultConstraintName { get; public set; }
    public bool CanEditDefaultConstraintName { get; }
    public bool IsComputed { get; public set; }
    public bool CanEditIsComputed { get; }
    public string ComputedFormula { get; public set; }
    public bool CanEditComputedFormula { get; }
    public bool CanEditIsComputedPersisted { get; }
    public Nullable`1<bool> IsComputedPersisted { get; public set; }
    public bool CanEditIsComputedPersistedNullable { get; }
    public Nullable`1<bool> IsComputedPersistedNullable { get; public set; }
    internal TableColumnViewModel(TableViewModel tableViewModel, Column column);
    [CompilerGeneratedAttribute]
internal Column get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(Column value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_CanEditName();
    public string get_DataType();
    public void set_DataType(string value);
    public string get_AdvancedDataType();
    public void set_AdvancedDataType(string value);
    public IEnumerable`1<string> get_DataTypes();
    public IEnumerable`1<string> get_AdvancedDataTypes();
    public bool get_CanEditDataType();
    public string get_Length();
    public void set_Length(string value);
    public bool get_CanEditLength();
    public bool get_CanHaveLength();
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public bool get_CanEditIsNullable();
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public bool get_CanEditDefaultValue();
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public bool get_CanEditIsPrimaryKey();
    public Nullable`1<int> get_Scale();
    public void set_Scale(Nullable`1<int> value);
    public bool get_CanEditScale();
    public bool get_CanHaveScale();
    public Nullable`1<int> get_Precision();
    public void set_Precision(Nullable`1<int> value);
    public bool get_CanEditPrecision();
    public bool get_CanHavePrecision();
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    public Nullable`1<decimal> get_IdentityIncrement();
    public void set_IdentityIncrement(Nullable`1<decimal> value);
    public Nullable`1<decimal> get_IdentitySeed();
    public void set_IdentitySeed(Nullable`1<decimal> value);
    public bool get_CanEditIdentityValues();
    public bool get_CanEditIsIdentity();
    public bool get_CanBeDeleted();
    public ColumnGeneratedAlwaysAsType get_GeneratedAlwaysAs();
    public void set_GeneratedAlwaysAs(ColumnGeneratedAlwaysAsType value);
    public bool get_CanEditGeneratedAlwaysAs();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_CanEditIsHidden();
    public string get_DefaultConstraintName();
    public void set_DefaultConstraintName(string value);
    public bool get_CanEditDefaultConstraintName();
    public bool get_IsComputed();
    public void set_IsComputed(bool value);
    public bool get_CanEditIsComputed();
    public string get_ComputedFormula();
    public void set_ComputedFormula(string value);
    public bool get_CanEditComputedFormula();
    public bool get_CanEditIsComputedPersisted();
    public Nullable`1<bool> get_IsComputedPersisted();
    public void set_IsComputedPersisted(Nullable`1<bool> value);
    public bool get_CanEditIsComputedPersistedNullable();
    public Nullable`1<bool> get_IsComputedPersistedNullable();
    public void set_IsComputedPersistedNullable(Nullable`1<bool> value);
    internal void UpdateAutoGeneratedDefaultConstraintName();
    private string AutoGenerateDefaultConstraintName();
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDesigner : object {
    private static string CheckIsMemoryOptimizedEnabledInDatabaseQuery;
    private static string CheckIfMemoryOptimizedSupportedInDatabaseQuery;
    private Table _table;
    private TableViewModel _tableViewModel;
    private SqlSchemaModel _model;
    private IDataSchemaModelController _controller;
    private SqlModelBuilder _builder;
    private OnDemandRetriever _retriever;
    private List`1<string> _schemas;
    private DatabaseChangeModel _dcm;
    private CommitJob _job;
    private List`1<SqlTable> _allTables;
    private SqlConnectionFactory _connectionFactory;
    private bool _isMemoryOptimizedTableSupported;
    private Task _initializeIsMemoryOptimizedSupportedTask;
    private int _tableRowCount;
    private Task _getRowCountTask;
    private string _connectionString;
    private int _largeTableRowCount;
    private bool _disableAndReenableDdlTriggers;
    private string _tableName;
    private SchemaCompareProjectEndpoint _originalProjectSchemaCompareEndpoint;
    private SchemaCompareProjectEndpoint _tableDesignerProjectSchemaCompareEndpoint;
    private static bool projectTableDesignerInitialized;
    private static bool onlineTableDesignerInitialized;
    [CompilerGeneratedAttribute]
private bool <IsNewTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <TemporalHistoryOptionalValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScriptContainsMultipleTableDefinition>k__BackingField;
    internal SqlSchemaModel Model { get; }
    internal IDataSchemaModelController Controller { get; }
    public TableViewModel TableViewModel { get; }
    public bool IsNewTable { get; private set; }
    public string Script { get; }
    public IReadOnlyList`1<string> DataTypes { get; }
    public IReadOnlyList`1<string> Schemas { get; }
    public IReadOnlyList`1<string> AllTables { get; }
    public IReadOnlyList`1<string> AllNodeTables { get; }
    public Dictionary`2<string, int> AllConstraintsNamesCounts { get; }
    public IReadOnlyList`1<string> TemporalHistoryOptionalValues { get; private set; }
    public bool IsGraphTableSupported { get; }
    public bool IsRenamingTableSupported { get; }
    public bool IsEdgeConstraintSupported { get; }
    public bool IsTemporalTableSupported { get; }
    public bool IsMemoryOptimizedTableSupported { get; }
    public bool IsAzure { get; }
    public bool IsDw { get; }
    public bool ScriptContainsMultipleTableDefinition { get; private set; }
    internal int TableRowCount { get; }
    internal bool IsLargeTable { get; }
    internal bool RenamingTable { get; }
    public TableDesigner(string connectionString, string accessToken, string schemaName, string tableName, bool isNewTable, TableDesignerOptions options);
    public TableDesigner(string projectFilePath, string tableScriptPath, List`1<string> projectScripts, string targetVersion);
    public static bool ScriptContainsCreateTableStatements(string script, string databaseSchemaProvider);
    private static void GetTableIdentifier(string script, SqlPlatforms sqlPlatform, String& schema, String& name, Int32& createTableStatementCount);
    private void HandleTableViewModelPropertyChanged(object sender, EventArgs e);
    internal SqlSchema GetSqlSchema(string name);
    internal SqlSchemaModel get_Model();
    internal IDataSchemaModelController get_Controller();
    public TableViewModel get_TableViewModel();
    [CompilerGeneratedAttribute]
public bool get_IsNewTable();
    [CompilerGeneratedAttribute]
private void set_IsNewTable(bool value);
    public string get_Script();
    public IReadOnlyList`1<string> get_DataTypes();
    public IReadOnlyList`1<string> get_Schemas();
    internal IReadOnlyList`1<string> GetAllTableNames(Func`2<SqlTable, bool> filter);
    internal void EnsureNodeTableExists();
    public IReadOnlyList`1<string> get_AllTables();
    public IReadOnlyList`1<string> get_AllNodeTables();
    public Dictionary`2<string, int> get_AllConstraintsNamesCounts();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_TemporalHistoryOptionalValues();
    [CompilerGeneratedAttribute]
private void set_TemporalHistoryOptionalValues(IReadOnlyList`1<string> value);
    public IReadOnlyList`1<string> GetColumnsForTable(string tableName);
    public bool get_IsGraphTableSupported();
    public bool get_IsRenamingTableSupported();
    public bool get_IsEdgeConstraintSupported();
    public bool get_IsTemporalTableSupported();
    public bool get_IsMemoryOptimizedTableSupported();
    public bool get_IsAzure();
    public bool get_IsDw();
    [CompilerGeneratedAttribute]
public bool get_ScriptContainsMultipleTableDefinition();
    [CompilerGeneratedAttribute]
private void set_ScriptContainsMultipleTableDefinition(bool value);
    private void InitializeSchemas();
    private void InvalidateCommitJob();
    public string GenerateScript();
    public void CommitChanges();
    public PreviewReport GenerateReport();
    internal int get_TableRowCount();
    internal bool get_IsLargeTable();
    internal bool get_RenamingTable();
    private void InitializeCommitJob(bool dryRun);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDesigner/<InitializeIsMemoryOptimizedSupportedAsync>d__91")]
private Task InitializeIsMemoryOptimizedSupportedAsync();
    [AsyncStateMachineAttribute("Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDesigner/<InitializeGetTableRowCountTask>d__92")]
private Task InitializeGetTableRowCountTask(string schema, string tableName);
    public void WaitForAsyncTasks();
    internal string GetNewHistoryTableName(string currentTableName);
    private string GetNewTableName(string nameBase);
    internal static IList`1<string> GetModelNameParts(ISqlModelElement item);
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_1();
    [CompilerGeneratedAttribute]
private bool <InitializeCommitJob>b__89_0(ISqlModelElement i);
}
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDesignerCacheItem : object {
    [CompilerGeneratedAttribute]
private DatabaseChangeModel <DatabaseChangeModel>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlConnectionFactory <ConnectionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <LoadingTask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseRevision>k__BackingField;
    public DatabaseChangeModel DatabaseChangeModel { get; public set; }
    public SqlConnectionFactory ConnectionFactory { get; public set; }
    public Exception Exception { get; public set; }
    public Task LoadingTask { get; public set; }
    public string DatabaseRevision { get; public set; }
    [CompilerGeneratedAttribute]
public DatabaseChangeModel get_DatabaseChangeModel();
    [CompilerGeneratedAttribute]
public void set_DatabaseChangeModel(DatabaseChangeModel value);
    [CompilerGeneratedAttribute]
public SqlConnectionFactory get_ConnectionFactory();
    [CompilerGeneratedAttribute]
public void set_ConnectionFactory(SqlConnectionFactory value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public Task get_LoadingTask();
    [CompilerGeneratedAttribute]
public void set_LoadingTask(Task value);
    [CompilerGeneratedAttribute]
public string get_DatabaseRevision();
    [CompilerGeneratedAttribute]
public void set_DatabaseRevision(string value);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDesignerCacheManager : object {
    private static string DatabaseVersionQuery;
    private static ConcurrentDictionary`2<string, TableDesignerCacheItem> cache;
    private static TableDesignerCacheManager();
    public static void StartDatabaseModelInitialization(string connectionString, string accessToken);
    internal static TableDesignerCacheItem GetOrCreateItem(string connectionString, string accessToken);
    internal static void InvalidateItem(string connectionString);
    private static string GetCacheKey(string connectionString);
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDesignerOptions : object {
    private static TableDesignerOptions _default;
    [CompilerGeneratedAttribute]
private int <LargeTableRowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAndReenableDdlTriggers>k__BackingField;
    public int LargeTableRowCount { get; }
    public bool DisableAndReenableDdlTriggers { get; }
    public static TableDesignerOptions DefaultOptions { get; }
    public TableDesignerOptions(int largeTableRowCount, bool disableAndReenableDdlTriggers);
    private static TableDesignerOptions();
    [CompilerGeneratedAttribute]
public int get_LargeTableRowCount();
    [CompilerGeneratedAttribute]
public bool get_DisableAndReenableDdlTriggers();
    public static TableDesignerOptions get_DefaultOptions();
}
public enum Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDurability : Enum {
    public int value__;
    public static TableDurability SchemaAndData;
    public static TableDurability SchemaOnly;
}
public class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableViewModel : ObjectViewModelBase {
    private Table _table;
    private TableDesigner _designer;
    private TableColumnCollection _columns;
    private ForeignKeyCollection _foreignKeys;
    private CheckConstraintCollection _checkConstraints;
    private IndexCollection _indexes;
    private ColumnStoreIndexCollection _columnStoreIndexes;
    private EdgeConstraintCollection _edgeConstraints;
    private bool _autoCreateHistoryTable;
    private string _newHistoryTableName;
    private bool _newHistoryTableNameSetByUser;
    private string _originalHistoryTable;
    private string _existingPrimaryKeyName;
    internal Table Table { get; }
    internal string ExistingPrimaryKeyName { get; }
    internal TableDesigner TableDesigner { get; }
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; }
    public bool IsEdge { get; public set; }
    public bool IsNode { get; public set; }
    public string SystemVersioningHistoryTable { get; public set; }
    public bool IsMemoryOptimized { get; public set; }
    public bool CanEditIsMemoryOptimized { get; }
    public TableDurability Durability { get; public set; }
    public bool CanEditDurability { get; }
    public bool CanEditGraphTableType { get; }
    public bool CanEditIsSystemVersioningEnabled { get; }
    public bool AutoCreateHistoryTable { get; public set; }
    public bool CanEditAutoCreateHistoryTable { get; }
    public string NewHistoryTableName { get; public set; }
    public bool CanEditNewHistoryTableName { get; }
    public bool CanEditExistingHistoryTable { get; }
    public IReadOnlyList`1<string> ExistingHistoryTablePropertyOptionalValues { get; }
    public string ExistingHistoryTable { get; public set; }
    public string OriginalHistoryTable { get; }
    public bool IsSystemVersioningEnabled { get; public set; }
    public TableColumnCollection Columns { get; }
    public ForeignKeyCollection ForeignKeys { get; }
    public CheckConstraintCollection CheckConstraints { get; }
    public IndexCollection Indexes { get; }
    public ColumnStoreIndexCollection ColumnStoreIndexes { get; }
    public EdgeConstraintCollection EdgeConstraints { get; }
    public bool PeriodColumnsDefined { get; }
    public PrimaryKeyConstraintViewModel PrimaryKey { get; }
    internal TableViewModel(Table table, TableDesigner designer);
    internal Table get_Table();
    internal string get_ExistingPrimaryKeyName();
    internal TableDesigner get_TableDesigner();
    private void SetupEvents();
    private void Collection_ItemRemoved(object sender, ObjectViewModelBase e);
    private void Collection_ItemAdded(object sender, ObjectViewModelBase e);
    private void Item_PropertyChanged(object sender, EventArgs e);
    public string get_Schema();
    public void set_Schema(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    private void AdjustOtherObjects();
    private void AdjustTriggers();
    public string get_FullName();
    public bool get_IsEdge();
    public void set_IsEdge(bool value);
    public bool get_IsNode();
    public void set_IsNode(bool value);
    private void ProcessGraphTableChanges();
    public string get_SystemVersioningHistoryTable();
    public void set_SystemVersioningHistoryTable(string value);
    public bool get_IsMemoryOptimized();
    public void set_IsMemoryOptimized(bool value);
    public bool get_CanEditIsMemoryOptimized();
    public TableDurability get_Durability();
    public void set_Durability(TableDurability value);
    public bool get_CanEditDurability();
    public bool get_CanEditGraphTableType();
    public bool get_CanEditIsSystemVersioningEnabled();
    public bool get_AutoCreateHistoryTable();
    public void set_AutoCreateHistoryTable(bool value);
    public bool get_CanEditAutoCreateHistoryTable();
    public string get_NewHistoryTableName();
    public void set_NewHistoryTableName(string value);
    public bool get_CanEditNewHistoryTableName();
    public bool get_CanEditExistingHistoryTable();
    public IReadOnlyList`1<string> get_ExistingHistoryTablePropertyOptionalValues();
    public string get_ExistingHistoryTable();
    public void set_ExistingHistoryTable(string value);
    public string get_OriginalHistoryTable();
    public bool get_IsSystemVersioningEnabled();
    public void set_IsSystemVersioningEnabled(bool value);
    public TableColumnCollection get_Columns();
    public ForeignKeyCollection get_ForeignKeys();
    public CheckConstraintCollection get_CheckConstraints();
    public IndexCollection get_Indexes();
    public ColumnStoreIndexCollection get_ColumnStoreIndexes();
    public EdgeConstraintCollection get_EdgeConstraints();
    public bool get_PeriodColumnsDefined();
    public PrimaryKeyConstraintViewModel get_PrimaryKey();
    public void CreatePrimaryKey();
    [CompilerGeneratedAttribute]
private void <CreatePrimaryKey>b__96_0(ISqlModelUpdatingService svc);
    [CompilerGeneratedAttribute]
private void <CreatePrimaryKey>b__96_1();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.ViewModelResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddNew { get; }
    internal static string ChildrenCount { get; }
    internal static string DataGrid_RowDisplayIndex { get; }
    internal static string NewColumnName { get; }
    internal static string None { get; }
    internal static string PrimaryKey { get; }
    internal static string PrimaryXMLIndexToken { get; }
    internal static string SecondaryXMLIndexToken { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddNew();
    internal static string get_ChildrenCount();
    internal static string get_DataGrid_RowDisplayIndex();
    internal static string get_NewColumnName();
    internal static string get_None();
    internal static string get_PrimaryKey();
    internal static string get_PrimaryXMLIndexToken();
    internal static string get_SecondaryXMLIndexToken();
}
internal static class Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.VMUtils : object {
    internal static string GetTableSchemaDisplayName(SqlTable sqlTable);
    internal static bool GetIsColumnPrimary(SqlColumn sqlColumn);
    internal static bool IsElementSupported(SqlPlatforms elementSupportedPlatforms, EditingContext editingContext);
    internal static string GetDefaultValue(SqlSimpleColumn sqlColumn);
    internal static SqlExtendedProperty GetDescriptionModelElementForDisplay(ISqlExtendedPropertyHost propertyHost);
    internal static SqlDefaultConstraint GetDefaultConstraintForDisplay(SqlSimpleColumn sqlColumn);
    internal static SqlSequence GetSequenceInDefaultConstraintForDisplay(SqlSimpleColumn sqlColumn);
    internal static SqlSequence GetSequenceInDefaultConstraintForDisplay(SqlDefaultConstraint defaultConstraint);
    internal static string GetSequenceDataTypeForDisplay(SqlSequence sequence);
    internal static string GetDataTypeDisplayName(SqlType type);
    internal static string GetDataTypeDisplayName(ModelIdentifier typeIdentifier);
    internal static string GetDataTypeDisplayName(SqlSimpleColumn sqlCol);
    internal static SqlBuiltInType GetBuiltInType(SqlSimpleColumn col);
    internal static void SetDataType(ISqlModelUpdatingService svc, SqlSimpleColumn sqlCol, SqlType type, string typeSpec);
    internal static bool CanDataTypeHaveMaxLength(SqlSimpleColumn col);
    internal static bool CanSqlTypeHaveMaxLength(SqlBuiltInType type);
    internal static bool CanDataTypeHaveLength(SqlSimpleColumn col);
    internal static bool CanSqlTypeHaveLength(SqlBuiltInType type);
    internal static string GetDataTypeLength(SqlSimpleColumn col);
    internal static void SetDataTypeLength(ISqlModelUpdatingService svc, SqlSimpleColumn col, string length);
    internal static bool CanDataTypeHavePrecision(SqlSimpleColumn col);
    internal static bool CanSqlTypeHavePrecision(SqlBuiltInType type);
    internal static Nullable`1<int> GetDataTypePrecision(SqlSimpleColumn col);
    internal static void SetDataTypePrecision(ISqlModelUpdatingService svc, SqlSimpleColumn col, Nullable`1<int> precision);
    internal static bool CanDataTypeHaveScale(SqlSimpleColumn col);
    internal static bool CanSqlTypeHaveScale(SqlBuiltInType type);
    internal static Nullable`1<int> GetDataTypeScale(SqlSimpleColumn col);
    internal static void SetDataTypeScale(ISqlModelUpdatingService svc, SqlSimpleColumn col, Nullable`1<int> scale);
    internal static Nullable`1<decimal> GetIdentitySeed(SqlSimpleColumn col);
    internal static void SetIdentitySeed(ISqlModelUpdatingService svc, SqlSimpleColumn col, Nullable`1<decimal> seed);
    internal static Nullable`1<decimal> GetIdentityIncrement(SqlSimpleColumn col);
    internal static void SetIdentityIncrement(ISqlModelUpdatingService svc, SqlSimpleColumn col, Nullable`1<decimal> increment);
    internal static bool CanDataTypeBeID(SqlColumn col);
    internal static IEnumerable`1<SqlBuiltInType> GetColumnAllowedTypes(SqlSchemaModel model);
    internal static string GetComposingElementIdentifiersNOrder(IEnumerable`1<ISqlModelElement> sqlModelElementEnumerator, ModelRelationshipClass modelRelationshipClass);
    internal static string GetColNameFromColSpec(SqlIndexedColumnSpecification colSpec);
    internal static void GetReferencedElementIdentifiers(ISqlModelElement referencingElement, ModelRelationshipClass relationshipClass, IList`1& referencedElementIdentifierList, IList`1& existList);
    internal static SqlScriptGenerator CreateSqlScriptGenerator(IModelElement modelElement);
    internal static void GetFullTextIndex(SqlColumn sqlColumn, SqlFullTextIndex& sqlFullTextIndex, SqlFullTextIndexColumnSpecifier& sqlFullTextIndexColumnSpecifier);
    internal static string GetReferencedElementIdentifierDisplayNameForSingleRelationship(ISqlModelElement referencingElement, ModelRelationshipClass relationshipClass, bool fullName);
    internal static ModelIdentifier GetReferencedElementIdentifierForSingleRelationship(ISqlModelElement referencingElement, ModelRelationshipClass relationshipClass);
    internal static string GetReferencedElementIdentifiersStringForMultipleRelationships(ISqlModelElement referencingElement, ModelRelationshipClass relationshipClass);
    [IteratorStateMachineAttribute("Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.VMUtils/<GetObjectsFromSelection>d__43`1")]
internal static IEnumerable`1<TSelectedObj> GetObjectsFromSelection(object selection);
    internal static PerformEditResult PerformEdit(EditingContext ctx, ModelUpdateOperation operation, bool refreshState);
    internal static string GetDefaultFileGroupDisplayName(ModelStore model);
    internal static string GetDefaultFileStreamFileGroupDisplayName(ModelStore model);
    private static SqlDatabaseOptions GetDefaultDatabaseOptions(ModelStore model);
    internal static string GetDefaultNameForNewSequence(Column column);
    internal static string GetNewItemName(string nameFormat, SqlTable table, IEnumerable`1<T> collection, String[] additionalInfo);
    internal static string GetNonConflictingNameForModelItem(IEnumerable`1<T> collection, SqlSchemaModel model, string baseName);
    internal static bool IsGeneratedSqlClrElement(ISqlClrClassDefined clrClassDefined);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Tools.Sql.DesignServices.TableDesignerResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ColumnNameCannotBeEmptyErrorMessage { get; }
    internal static string CreateTableStatementNotFoundErrorMessage { get; }
    internal static string DuplicateTableNameErrorMessage { get; }
    internal static string FailedToInitializeTableModelErrorMessage { get; }
    internal static string FailedToParseScriptErrorMessage { get; }
    internal static string GraphTableNotSupportedErrorMessage { get; }
    internal static string InvalidAdvancedDataTypeErrorMessage { get; }
    internal static string InvalidBooleanExpressionErrorMessage { get; }
    internal static string InvalidDspName { get; }
    internal static string InvalidExpressionErrorMessage { get; }
    internal static string InvalidIndexForColumnInsertingErrorMessage { get; }
    internal static string InvalidIndexForColumnMovingErrorMessage { get; }
    internal static string MemoryOptimizedNotSupportedOrEnabledErrorMessage { get; }
    internal static string NodeTableRequiredForOperationErrorMessage { get; }
    internal static string SchemaValidationErrorsMessage { get; }
    internal static string ScriptGenerationError { get; }
    internal static string SqlprojDoesNotExistError { get; }
    internal static string SqlProjTableNotFoundInTheModelErrorMessage { get; }
    internal static string TableNameCannotBeEmptyErrorMessage { get; }
    internal static string TableNotFoundError { get; }
    internal static string ValueCannotBeNullErrorMessage { get; }
    internal static string WarningRenamingTable { get; }
    internal static string WarningUpdateSqlPool { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ColumnNameCannotBeEmptyErrorMessage();
    internal static string get_CreateTableStatementNotFoundErrorMessage();
    internal static string get_DuplicateTableNameErrorMessage();
    internal static string get_FailedToInitializeTableModelErrorMessage();
    internal static string get_FailedToParseScriptErrorMessage();
    internal static string get_GraphTableNotSupportedErrorMessage();
    internal static string get_InvalidAdvancedDataTypeErrorMessage();
    internal static string get_InvalidBooleanExpressionErrorMessage();
    internal static string get_InvalidDspName();
    internal static string get_InvalidExpressionErrorMessage();
    internal static string get_InvalidIndexForColumnInsertingErrorMessage();
    internal static string get_InvalidIndexForColumnMovingErrorMessage();
    internal static string get_MemoryOptimizedNotSupportedOrEnabledErrorMessage();
    internal static string get_NodeTableRequiredForOperationErrorMessage();
    internal static string get_SchemaValidationErrorsMessage();
    internal static string get_ScriptGenerationError();
    internal static string get_SqlprojDoesNotExistError();
    internal static string get_SqlProjTableNotFoundInTheModelErrorMessage();
    internal static string get_TableNameCannotBeEmptyErrorMessage();
    internal static string get_TableNotFoundError();
    internal static string get_ValueCannotBeNullErrorMessage();
    internal static string get_WarningRenamingTable();
    internal static string get_WarningUpdateSqlPool();
}
