public class Babel.CodeObjectQuickInfo : object {
    public string Text;
    public Location StartLocation;
    public Location EndLocation;
    internal CodeObjectQuickInfo(string text, Location startLocation, Location endLocation);
}
public class Babel.LineScanner : object {
    private Scanner lex;
    private string source;
    private string batchSeparator;
    private bool isSqlCmdModeEnabled;
    private SqlCmdState sqlCmdState;
    private static Regex sqlCmdRegex;
    private static TokenDefinition defaultDefinition;
    private static Dictionary`2<int, TokenDefinition> definitions;
    private static Dictionary`2<string, TokenType> colorOverrides;
    internal static String[] Keywords;
    internal static String[] Operators;
    internal static String[] SqlCMDRegExp;
    internal static String[] SystemFunctions;
    internal static String[] SystemStoredProcedures;
    internal static String[] SystemViews;
    internal static String[] Builtins;
    public bool IsSqlCmdModeEnabled { get; public set; }
    public string BatchSeparator { get; public set; }
    private static LineScanner();
    public bool get_IsSqlCmdModeEnabled();
    public void set_IsSqlCmdModeEnabled(bool value);
    public string get_BatchSeparator();
    public void set_BatchSeparator(string value);
    public bool ScanTokenAndProvideInfoAboutIt(TokenInfo tokenInfo, Int32& state);
    public void SetSource(string source, int offset);
    private static void PopulateColorOverrides(String[] values, TokenType overrideType);
    public static void DefineToken(int token, TokenType type, TokenTriggers trigger);
    public void PopulateDefiniton(TokenInfo tokenInfo);
}
public class Babel.MethodHelpText : object {
    private string name;
    private string description;
    private string type;
    private bool shouldShowParentheses;
    private bool isVarArg;
    private IList`1<Parameter> parameters;
    public string Name { get; }
    public string Description { get; }
    public string Type { get; }
    public bool ShouldShowParentheses { get; }
    public bool IsVarArg { get; }
    public IList`1<Parameter> Parameters { get; }
    public MethodHelpText(string name, string description, string type, bool shouldShowParentheses, bool isVarArg);
    public string get_Name();
    public string get_Description();
    public string get_Type();
    public bool get_ShouldShowParentheses();
    public bool get_IsVarArg();
    public IList`1<Parameter> get_Parameters();
    public string ToXml();
    internal void WriteXml(XmlWriter xmlWriter);
}
public class Babel.MethodNameAndParamLocations : object {
    private string name;
    [CompilerGeneratedAttribute]
private Location <NameStartLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <NameEndLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <ParamStartLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Location> <ParamSeperatorLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <ParamEndLocation>k__BackingField;
    public string Name { get; public set; }
    public Location NameStartLocation { get; public set; }
    public Location NameEndLocation { get; public set; }
    public Location ParamStartLocation { get; public set; }
    public List`1<Location> ParamSeperatorLocations { get; public set; }
    public Location ParamEndLocation { get; public set; }
    public MethodNameAndParamLocations(string name);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Location get_NameStartLocation();
    [CompilerGeneratedAttribute]
public void set_NameStartLocation(Location value);
    [CompilerGeneratedAttribute]
public Location get_NameEndLocation();
    [CompilerGeneratedAttribute]
public void set_NameEndLocation(Location value);
    [CompilerGeneratedAttribute]
public Location get_ParamStartLocation();
    [CompilerGeneratedAttribute]
public void set_ParamStartLocation(Location value);
    [CompilerGeneratedAttribute]
public List`1<Location> get_ParamSeperatorLocations();
    [CompilerGeneratedAttribute]
public void set_ParamSeperatorLocations(List`1<Location> value);
    [CompilerGeneratedAttribute]
public Location get_ParamEndLocation();
    [CompilerGeneratedAttribute]
public void set_ParamEndLocation(Location value);
    public string ToXml();
    internal bool IsLocationInArgumentList(Location testLocation);
    internal void WriteXml(XmlWriter xmlWriter);
}
public class Babel.Parameter : object {
    private string name;
    private string description;
    private string display;
    public string Name { get; }
    public string Description { get; }
    public string Display { get; }
    public Parameter(string name, string description, string display);
    public string get_Name();
    public string get_Description();
    public string get_Display();
    internal void WriteXml(XmlWriter xmlWriter);
}
public abstract class Babel.ParserGenerator.AScanner`2 : object {
    public YYSTYPE yylval;
    public YYLTYPE yylloc;
    public abstract virtual int yylex();
    public abstract virtual void yyerror(string message);
}
internal class Babel.ParserGenerator.CompleteScannerState : ValueType {
    public static CompleteScannerState InvalidState;
    public int InitialScannerState;
    public int FinalScannerState;
    public int TokenIndex;
    public bool IsTokenRead;
    public bool IsValid { get; }
    public CompleteScannerState(int initialScannerState, int finalScannerState, int tokenIndex, bool isTokenRead);
    public CompleteScannerState(SimpleScannerState simpleScannerState, int finalScannerState, bool isTokenRead);
    private static CompleteScannerState();
    public bool get_IsValid();
    public virtual string ToString();
}
public enum Babel.ParserGenerator.EParseState : Enum {
    public int value__;
    public static EParseState e_ParseNeutral;
    public static EParseState e_ParseEventNotifObjectOn;
    public static EParseState e_ParseIdxInclude;
    public static EParseState e_ParseBegin;
    public static EParseState e_ParseGDR;
    public static EParseState e_ParseDump;
    public static EParseState e_ParseLoad;
    public static EParseState e_ParseOpen;
    public static EParseState e_ParseClose;
    public static EParseState e_ParseWith;
    public static EParseState e_ParseAfterWith;
    public static EParseState e_ParseGroupBy;
}
public interface Babel.ParserGenerator.IMerge`1 {
    public abstract virtual YYLTYPE Merge(YYLTYPE last);
}
[DefaultMemberAttribute("Item")]
public interface Babel.ParserGenerator.IMinimalList`1 {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(int index);
}
[DefaultMemberAttribute("Item")]
internal interface Babel.ParserGenerator.IWriteableMinimalList`1 {
    public T Item { get; public set; }
    public abstract virtual T get_Item(int index);
    public abstract virtual void set_Item(int index, T value);
}
public class Babel.ParserGenerator.LexLocation : object {
    public int startTokenNumber;
    public int endTokenNumber;
    public LexLocation(LexLocation location);
    public LexLocation(int startTokenNumber, int endTokenNumber);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual LexLocation Merge(LexLocation last);
    public static LexLocation Merge(LexLocation lhs, LexLocation rhs);
    public virtual string ToString();
    public bool Contains(LexLocation value);
    public bool Before(LexLocation value);
    public bool StartsBefore(LexLocation value);
    public bool EndsAfter(LexLocation value);
    public bool IsZeroLength();
    public bool Overlaps(LexLocation value);
    public LexLocation GetFirstTokenLocation();
    public sealed virtual int CompareTo(LexLocation other);
    public sealed virtual bool Equals(LexLocation other);
}
[DefaultMemberAttribute("Item")]
internal class Babel.ParserGenerator.MinimalList`1 : object {
    private List`1<T> list;
    public int Count { get; }
    public T Item { get; public set; }
    internal MinimalList`1(int initialCapacity);
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public int BinarySearch(T item, IComparer`1<T> comparer);
    public void Add(T item);
}
internal static class Babel.ParserGenerator.MinimalListUtils : object {
    public static int BinarySearch(IMinimalList`1<T> list, T item, IComparer`1<T> comparer, int startIndex, int endIndex);
    public static int BinarySearch(IMinimalList`1<T> list, T item, IComparer`1<T> comparer);
    public static int FirstEqualOrGreater(IMinimalList`1<T> list, T item, IComparer`1<T> comparer);
}
[DefaultMemberAttribute("Item")]
internal class Babel.ParserGenerator.ModifiedMinimalList`1 : object {
    private IMinimalList`1<T> parentList;
    private Dictionary`2<int, T> overrideValues;
    private List`1<int> modifiedKeys;
    public Dictionary`2<int, T> OverrideValues { get; }
    public List`1<int> ModifiedKeys { get; }
    public int Count { get; }
    public T Item { get; }
    public ModifiedMinimalList`1(IMinimalList`1<T> parentList, Dictionary`2<int, T> overrideValues, List`1<int> modifiedKeys);
    public Dictionary`2<int, T> get_OverrideValues();
    public List`1<int> get_ModifiedKeys();
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
}
internal abstract class Babel.ParserGenerator.ParserConfig : object {
    public String[] NonTerminals;
    public State[] States;
    public Rule[] Rules;
    private static string Azure;
    private string parserVersion;
    protected ParserConfig(string version);
    private Rule[] GetRules();
    private void ReadArray(Int32[]& array, BinaryReader reader);
    private void ReadArray(String[]& array, BinaryReader reader);
    private String[] GetNonTerminals();
    private State[] GetStates();
    private void ReadDictionary(Dictionary`2& dict, BinaryReader reader);
    public abstract virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public abstract virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Babel.ParserGenerator.ParserScanner : SimpleParserScanner {
    private ParserTokenList tokenList;
    private int nextBatchNumber;
    public int LookaheadTokenIndex { get; }
    public int CurrentBatchNumber { get; }
    private ParserScanner(TokenManager firstLevelTokenManager, ParserTokenList tokenList, TransactSqlVersion transactSqlVersion);
    public int get_LookaheadTokenIndex();
    public virtual int get_CurrentBatchNumber();
    public static ParserScanner CreateParserScanner(TokenManager firstLevelTokenManager, TransactSqlVersion transactSqlVersion);
    public TokenManager CreateTokenManager();
    private void InitializeRange(LexLocation tokenRange);
    public bool MoveToNextBatch();
    public void ForwardScannerState(CompleteScannerState state, ModifiedMinimalList`1<TokenData> prevTokenList, TokenUpdateDiff diff);
}
internal class Babel.ParserGenerator.ParserStack`1 : object {
    public T[] array;
    public int top;
    public void Push(T value);
    public T Pop();
    public void Pop(int count);
    public T Top();
    public bool IsEmpty();
    public void Clear();
    public virtual string ToString();
}
public enum Babel.ParserGenerator.QueryState : Enum {
    public int value__;
    public static QueryState None;
    public static QueryState IN_SELECT_LIST;
    public static QueryState IN_ORDER_BY_CLAUSE;
    public static QueryState IN_HAVING_CLAUSE;
    public static QueryState IN_WHERE_CLAUSE;
    public static QueryState IN_ON_CLAUSE;
    public static QueryState IN_FROM_CLAUSE;
    public static QueryState IN_OPTION_CLAUSE;
    public static QueryState IN_OVER_CLAUSE;
    public static QueryState IN_WINDOW_CLAUSE;
}
public enum Babel.ParserGenerator.QueryStatus : Enum {
    public int value__;
    public static QueryStatus None;
    public static QueryStatus Q_BYALL;
    public static QueryStatus Q_DERIVED;
    public static QueryStatus Q_VIEW;
    public static QueryStatus Q_BYCUBE;
    public static QueryStatus Q_BYROLLUP;
    public static QueryStatus Q_ALTDB;
    public static QueryStatus P_BREAKDECPOINT;
    public static QueryStatus Q_ODBC_ESCAPE;
    public static QueryStatus Q_CRDB;
    public static QueryStatus Q_CR_AL_FTI;
    public static QueryStatus Q_FT_PROP_REF;
    public static QueryStatus Q_MERGE;
    public static QueryStatus Q_SERVER;
    public static QueryStatus Q_DATABASE;
    public static QueryStatus Q_FN_PARSE;
}
internal class Babel.ParserGenerator.Rule : object {
    public int lhs;
    public Int32[] rhs;
    public Rule(int lhs, Int32[] rhs);
}
internal abstract class Babel.ParserGenerator.ShiftReduceParser : object {
    public bool ParserTrace;
    public Boolean[] CoveredStates;
    public IParserTestSink parserTestSink;
    protected ParserScanner scanner;
    protected ParseContext parseContext;
    protected ReusableStatementsCollection reusableStmts;
    protected bool isIncremental;
    protected ParseNode yyval;
    protected LexLocation yyloc;
    private State current_state;
    private bool inErrorRecovery;
    private bool recovering;
    private int tokensSinceLastError;
    private ParserStack`1<State> state_stack;
    protected ParserStack`1<ParseNode> value_stack;
    protected ParserStack`1<LexLocation> location_stack;
    private ParserStack`1<SimpleScannerState> scanner_stack;
    protected bool isDumpLoadStatement;
    protected List`1<ParseNode> errValueList;
    protected LexLocation errorLocation;
    protected String[] nonTerminals;
    protected State[] states;
    protected Rule[] rules;
    private ParserConfig parserConfig;
    private static int eofToken;
    private static int notEmptyToken;
    private static int BeginMissingToken;
    private static int EndMissingToken;
    private static int MissingTokenCount;
    [ThreadStaticAttribute]
protected static ParseContext currentParseContext;
    private static String[] prefixesToIgnore;
    private static int MaxDiscards;
    private static int ErrorRecoveryMaxActionCount;
    private static bool AllowUnlimitedRecoveryPath;
    private static int ErrorRecoveryNotEmptyTokenAtEofWeight;
    private static int ErrorRecoveryErrorInsideOfErrorWeight;
    private static int ErrorRecoveryPopStateTokenWeight;
    private static int ErrorRecoveryDiscardTokenWeight;
    public static ParseContext CurrentParseContext { get; }
    public int StackSize { get; }
    public ShiftReduceParser(ParserConfig parserConfig);
    private static ShiftReduceParser();
    public static ParseContext get_CurrentParseContext();
    public int get_StackSize();
    protected abstract virtual StateOnlyParser CreateStateOnlyParser();
    private void Reset();
    private static void GetNextAction(ParserConfig parserConfig, SimpleParserScanner scanner, State current_state, Int32& action);
    public bool Parse(bool isIncremental, ParserScanner inputScanner, ParseContext parseContext, ReusableStatementsCollection reusableStmts);
    private bool DoParse();
    private static bool IsErrorToken(int value);
    private SimpleScannerState GetSimpleScannerState();
    private CompleteScannerState GetCompleteScannerState();
    protected void ShiftStatement(SqlStatement stmt);
    protected void ShiftToken(int state_nr);
    protected void Shift(int state_nr, int token, ParseNode value, LexLocation loc);
    protected void Reduce(int rule_nr);
    protected LexLocation MergeLocationRange(int startIndex, int endIndex);
    protected abstract virtual void DoAction(int action_nr);
    public bool ErrorRecovery();
    internal static bool IsKeyword(int id);
    private static bool IsMissingToken(int token);
    public void ReportError();
    public void ShiftMissingToken(int missingToken);
    public void ShiftErrorToken(int errToken);
    public void ShiftNotEmptyToken();
    private bool PopState();
    private void DiscardingInvalidToken();
    private SqlErrorCodeObject CreateErrorObject();
    private LexLocation GetCurrentInsertLocation();
    protected void yyerrok();
    protected static T UpdatePos(T codeObj, LexLocation pos);
    protected string GetText(LexLocation location);
    protected StringToken GetStringToken(LexLocation location);
    private void DisplayStack();
    private void DisplayRule(int rule_nr);
    private void DisplayProduction(Rule rule);
    internal static string TerminalToString(int token);
    private string SymbolToString(int symbol);
    protected static string CharToString(char ch);
    protected static string GetTokenFriendlyName(string tokenName);
}
internal class Babel.ParserGenerator.SimpleParserScanner : object {
    protected TokenManager firstLevelTokenManager;
    protected string source;
    protected IWriteableMinimalList`1<TokenData> tokens;
    protected int compatibilityLevel;
    protected TransactSqlVersion transactSqlVersion;
    protected int token;
    protected LexLocation tokenLocation;
    protected int startTokenIndex;
    protected int endTokenIndex;
    protected SimpleScannerState lastSimpleScannerState;
    protected int nextTokenIndex;
    protected bool isStatementDelimiter;
    protected EParseState yystate;
    protected QueryStatus queryStatus;
    protected QueryState queryState;
    protected int gdrTokenCount;
    private static int QUERY_STATUS_POS;
    private static int QUERY_STATUS_MASK;
    private static int YYSTATE_POS;
    private static int YYSTATE_MASK;
    private static int IS_STATEMENT_DELIMITER_POS;
    private static int IS_STATEMENT_DELIMITER_MASK;
    public SimpleScannerState SimpleScannerState { get; }
    public CompleteScannerState CompleteScannerState { get; }
    public TokenManager FirstLevelTokenManager { get; }
    public int Token { get; }
    public bool IsTokenRead { get; }
    public string TokenText { get; }
    public LexLocation TokenLocation { get; }
    public int CurrentBatchNumber { get; }
    protected SimpleParserScanner(TokenManager firstLevelTokenManager, IWriteableMinimalList`1<TokenData> tokens, TransactSqlVersion transactSqlVersion);
    private SimpleParserScanner(SimpleParserScanner parserScanner, IWriteableMinimalList`1<TokenData> tokens);
    internal SimpleParserScanner CreateTemporaryParserScanner();
    protected int GetScannerState();
    protected void RestoreScannerState(int scannerState);
    public SimpleScannerState get_SimpleScannerState();
    public CompleteScannerState get_CompleteScannerState();
    public void NextToken();
    public void ReadToken();
    internal StringToken GetStringToken();
    public TokenManager get_FirstLevelTokenManager();
    public int get_Token();
    public bool get_IsTokenRead();
    public string get_TokenText();
    public LexLocation get_TokenLocation();
    internal int yytransform(int parentTokenId, TokenTransformContext context);
    private void LookupIdSubToken(int parentTokenId, TokenTransformContext context, Int32& retval);
    private ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    internal int GetId(int tokenNumber);
    private void SetId(int tokenNumber, int tokenId);
    private void KillToken(int tokenNumber);
    private bool IsDead(int tokenNumber);
    private int GetOriginalId(int tokenNumber);
    private int yylex();
    private int EngineLGetToken(int next);
    private int EngineYYLex(int next);
    private int NonEngineLogic(int next);
    internal void SetQueryStatus(QueryStatus qstatus);
    internal void ClearQueryStatus(QueryStatus qstatus);
    internal void SetParseState(EParseState state);
    internal void SetQueryState(QueryState qstate);
    internal void SetStmtDelimiter(bool value);
    internal void SetGDRState();
    internal void ResetAllParseStates();
    internal void RepeatToken();
    internal void RepeatToken(int tokenId);
    private int PeekBackward();
    private int GetTokenBeginRange(int CurrentBatchNumber);
    public virtual int get_CurrentBatchNumber();
    private StringToken PeekPriorStringTokenBackwards();
    private int PeekNextToken();
    private StringToken PeekNextStringToken();
    private int PeekAfterNextToken();
    private StringToken PeekAfterNextStringToken();
    private bool AdvanceIfNextIs(int target, bool killSkippedToken);
    private bool AdvanceIfNextIs(StringToken stringToken, bool killSkippedToken);
    private bool AdvanceIfNextAre(StringToken nextStringToken, StringToken afterNextStringToken, bool killSkippedTokens);
}
internal class Babel.ParserGenerator.SimpleScannerState : ValueType {
    public static SimpleScannerState InvalidState;
    public int ScannerState;
    public int TokenIndex;
    public bool IsValid { get; }
    public SimpleScannerState(int scannerState, int tokenIndex);
    private static SimpleScannerState();
    public bool get_IsValid();
    public virtual string ToString();
    public bool Equals(TokenUpdateDiff diff, SimpleScannerState other);
    public bool IsBefore(TokenUpdateDiff diff, SimpleScannerState other);
    public bool IsAfter(TokenUpdateDiff diff, SimpleScannerState other);
}
internal class Babel.ParserGenerator.State : object {
    public int num;
    public Dictionary`2<int, int> parser_table;
    public Dictionary`2<int, int> Goto;
    public int defaultAction;
    public bool HasDefaultReduce { get; }
    public State(Int32[] actions, Int32[] gotos);
    public State(Int32[] actions);
    public State(int defaultAction);
    public State(int defaultAction, Int32[] gotos);
    public bool ExpectsToken(int token);
    public bool ExpectsToken(int token, Int32& action);
    public bool get_HasDefaultReduce();
    public bool ShiftsOnToken(int token);
    public bool ReducesOnToken(int token);
    public virtual string ToString();
}
[FlagsAttribute]
public enum Babel.ParserGenerator.StatementFlags : Enum {
    public UInt32 value__;
    public static StatementFlags P_SELECT;
    public static StatementFlags P_ASSIGN;
    public static StatementFlags P_SELECT_ASSIGN;
    public static StatementFlags P_CONSTONLY;
    public static StatementFlags P_NAMEDPARAM;
    public static StatementFlags P_INSERT;
    public static StatementFlags P_COLREF;
    public static StatementFlags P_VIEWCREATE;
    public static StatementFlags P_SELECTINTO;
    public static StatementFlags P_UPDATE;
    public static StatementFlags P_HasSubDml;
    public static StatementFlags P_IDTFUNC;
    public static StatementFlags P_CURSORDECL;
    public static StatementFlags P_SCHEMACREATE;
    public static StatementFlags P_LOGFILE;
    public static StatementFlags P_CURSORVARS_OK;
    public static StatementFlags P_DATEPART;
    public static StatementFlags P_DELETE;
    public static StatementFlags P_PARSE_TIME_STMT;
    public static StatementFlags P_ALLOW_SELECT;
    public static StatementFlags P_NO_UDF;
    public static StatementFlags P_UDF_IN_DB;
    public static StatementFlags P_CANTAPPENDTRIG;
    public static StatementFlags P_CREATE_PROC;
    public static StatementFlags P_INSERT_TARGET;
    public static StatementFlags P_SCALAREXPR;
    public static StatementFlags P_OLD_JOINS;
    public static StatementFlags P_INSERT_EXEC;
    public static StatementFlags P_ALTER_TAB_SWITCH;
    public static StatementFlags P_BATCHPARAM_3PART_NAME;
    public static StatementFlags P_PASSWORD_EXISTS;
    public static StatementFlags P_OUTPUT_INTO;
    public static StatementFlags P_TABLEVARS_OK;
    public static StatementFlags P_HOLDLOCK;
    public static StatementFlags P_OLD_HOLDLOCK;
    public static StatementFlags P_ANY;
    public static StatementFlags P_ALL;
    public static StatementFlags P_NOT;
    public static StatementFlags P_EXISTS;
}
internal abstract class Babel.ParserGenerator.StateOnlyParser : object {
    public SimpleParserScanner scanner;
    protected StateOnlyParser(SimpleParserScanner scanner);
    public abstract virtual StateOnlyParser Create();
    public abstract virtual void DoAction(int ruleNumber);
}
[DefaultMemberAttribute("Item")]
internal class Babel.ParserGenerator.TemporaryMinimalList`1 : object {
    private IMinimalList`1<T> parentList;
    private Dictionary`2<int, T> overrideValues;
    public int Count { get; }
    public T Item { get; public set; }
    internal TemporaryMinimalList`1(IMinimalList`1<T> parentList);
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
}
public class Babel.ParserGenerator.TokenData : ValueType {
    public int StartIndex;
    public int TokenId;
    public TokenData(int id, int startIndex);
    public virtual string ToString();
}
public enum Babel.ParserGenerator.TokenTransformContext : Enum {
    public int value__;
    public static TokenTransformContext NONE;
    public static TokenTransformContext TOKEN_BEGIN_CS;
    public static TokenTransformContext TOKEN_BEGIN_CS_LOOKUP;
    public static TokenTransformContext TOKEN_END_CS;
    public static TokenTransformContext TOKEN_END_CS_LOOKUP;
    public static TokenTransformContext LEFT_PAREN_COMPAT;
    public static TokenTransformContext CREATE_DROP_ALTER;
    public static TokenTransformContext ADD;
    public static TokenTransformContext AFTER_END;
    public static TokenTransformContext AFTER_WITH;
    public static TokenTransformContext AFTER_WITH_EXEC_OPTION;
    public static TokenTransformContext CREATE_DB_OPT;
    public static TokenTransformContext CREATE_DB_TYPE;
    public static TokenTransformContext ALTER_DB_OPT;
    public static TokenTransformContext DUMP_OPT;
    public static TokenTransformContext DUMP_COMPRESSION_OPT;
    public static TokenTransformContext DUMP_ENCRYPTION_OPT;
    public static TokenTransformContext LOAD_OPT;
    public static TokenTransformContext TAB_OPT_NAME;
    public static TokenTransformContext INDEX_SORT_OPT;
    public static TokenTransformContext OPT_STORAGE_ID;
    public static TokenTransformContext IND_OPTIONS;
    public static TokenTransformContext IND_ACTIONS;
    public static TokenTransformContext ALTTAB_ACTIONS;
    public static TokenTransformContext SEQUENCE_OPTIONS;
    public static TokenTransformContext ALTTAB_ENABLE_DISABLE;
    public static TokenTransformContext AFFINITY_TYPE;
    public static TokenTransformContext POOL_AFFINITY_TYPE;
    public static TokenTransformContext EXTERNAL_POOL_AFFINITY_TYPE;
    public static TokenTransformContext EXTERNAL_LANGUAGE_FILE_SPEC_OPT;
    public static TokenTransformContext ALTER_EXTERNAL_LANGUAGE_OPT;
    public static TokenTransformContext EXTERNAL_LIBRARY_FILE_SPEC_OPT;
    public static TokenTransformContext ALTER_EXTERNAL_LIBRARY_OPT;
    public static TokenTransformContext ALTER_SERVER_TYPE;
    public static TokenTransformContext FULLTEXT_SEARCH;
    public static TokenTransformContext FTS_PROPERTY;
    public static TokenTransformContext AFTER_FTS_WITH;
    public static TokenTransformContext CREATE_USER_WITH;
    public static TokenTransformContext ALTER_USER_WITH;
    public static TokenTransformContext AG_REPLICA_OPTION;
    public static TokenTransformContext ALTER_SERVER_CONFIG_SET;
    public static TokenTransformContext ALTER_SERVER_CONFIG_SET_DIAG_LOG;
    public static TokenTransformContext ALTER_SERVER_CONFIG_SET_HADR_CLUSTER;
    public static TokenTransformContext OVER_CLAUSE;
    public static TokenTransformContext AFTER_BEGIN;
    public static TokenTransformContext FILESTREAM_DB_OPT;
    public static TokenTransformContext CREATE_TAB_OPT;
    public static TokenTransformContext CREATE_TAB_WITH_OPT;
    public static TokenTransformContext SYSTEM_VERSIONING_OPT;
    public static TokenTransformContext OPT_SXI_PATH_KIND;
    public static TokenTransformContext OPT_SXI_PATH_OPTION;
    public static TokenTransformContext IN_INLINE_INDEX_SYNTAX;
    public static TokenTransformContext CREATE_EXTERNALFILEFORMAT_WITH;
    public static TokenTransformContext CREATE_EXTERNALDATASOURCE_WITH;
    public static TokenTransformContext ALTER_EXTERNALDATASOURCE_WITH;
    public static TokenTransformContext CREATE_EXTERNALTABLE_WITH;
    public static TokenTransformContext EXTERNAL_TYPE;
    public static TokenTransformContext SECURITY_POLICY;
    public static TokenTransformContext QUERY_STORE_OPT;
    public static TokenTransformContext REMOTE_DATA_ARCHIVE_OPT;
    public static TokenTransformContext TAB_LOCK_OPT;
    public static TokenTransformContext COL_ENCRYPTION_OR_MASTER_KEY;
    public static TokenTransformContext GEODR_OPT;
    public static TokenTransformContext DB_COPY_OPT;
    public static TokenTransformContext COL_ADD_DROP_OPT;
    public static TokenTransformContext COL_DEF_OPT;
    public static TokenTransformContext DB_SCOPED_CONFIG_OPT;
    public static TokenTransformContext GRAPH_ID_OR_FILETABLE;
    public static TokenTransformContext PERSISTENT_LOG_BUFFER_OPT;
    public static TokenTransformContext AUTO_TUNING_DATABASE_TUNING_MODE_OPT;
    public static TokenTransformContext CREATE_TABLE_WITH_LEDGER_OPT;
    public static TokenTransformContext CREATE_TAB_WITH_DATA_DELETION_OPT;
    public static TokenTransformContext CREATE_EXTERNALSTREAM_WITH;
}
public class Babel.Region : object {
    private Location startLocation;
    private Location endLocation;
    public Location StartLocation { get; }
    public Location EndLocation { get; }
    public Region(Location startLocation, Location endLocation);
    public Location get_StartLocation();
    public Location get_EndLocation();
}
internal class Babel.TokenDefinition : ValueType {
    public TokenType TokenType;
    public TokenTriggers TokenTriggers;
    public TokenDefinition(TokenType type, TokenTriggers triggers);
}
public class Babel.TokenInfo : object {
    public TokenType Type;
    public int EndIndex;
    public int StartIndex;
    public int Token;
    public TokenTriggers Trigger;
    public virtual string ToString();
}
[FlagsAttribute]
public enum Babel.TokenTriggers : Enum {
    public int value__;
    public static TokenTriggers None;
    public static TokenTriggers MemberSelect;
    public static TokenTriggers MatchBraces;
    public static TokenTriggers ParameterStart;
    public static TokenTriggers ParameterNext;
    public static TokenTriggers ParameterEnd;
    public static TokenTriggers Parameter;
    public static TokenTriggers MethodTip;
}
public enum Babel.TokenType : Enum {
    public int value__;
    public static TokenType Text;
    public static TokenType Keyword;
    public static TokenType Comment;
    public static TokenType Identifier;
    public static TokenType Number;
    public static TokenType SqlStoredProcedure;
    public static TokenType SqlSystemTable;
    public static TokenType SqlSystemFunction;
    public static TokenType SqlOperator;
    public static TokenType SqlString;
    public static TokenType SqlCmdCommand;
    public static TokenType Error;
    public static TokenType Delimiter;
}
internal class Microsoft.SqlServer.Diagnostics.STrace.ActivityContext : object {
    public sealed virtual void Dispose();
}
internal class Microsoft.SqlServer.Diagnostics.STrace.MethodContext : object {
    public sealed virtual void Dispose();
    public ActivityContext GetActivityContext(string s);
    public void TraceCatch(Exception ex);
}
internal class Microsoft.SqlServer.Diagnostics.STrace.TraceContext : object {
    public static TraceContext GetTraceContext(string componentName, string s);
    public ActivityContext GetActivityContext(string s);
    public MethodContext GetMethodContext(string s);
    public void TraceActivityStart(string s);
    public void TraceActivityEnd(string s);
    public void TraceCatch(Exception ex);
    public void TraceInformation(string s, Object[] info);
    public sealed virtual void Dispose();
}
internal static class Microsoft.SqlServer.Management.SqlParser.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.BatchBindingContext : object {
    private static string IdExpr;
    private static Regex ObjectNameRegex;
    private static FindObjectDelegate`1<ITableViewBase> findTableOrViewDelegate;
    private static FindObjectDelegate`1<ITableValuedFunction> findTableValuedFunctionDelegate;
    private static FindObjectDelegate`1<IScalarValuedFunction> findScalarValuedFunctionDelegate;
    private static FindObjectDelegate`1<IUserDefinedAggregate> findUserDefinedAggregateDelegate;
    private static FindObjectDelegate`1<ICallableModule> findModuleDelegate;
    private static FindObjectDelegate`1<IStoredProcedure> findStoredProcedureDelegate;
    private static FindObjectDelegate`1<ISchemaOwnedObject> findSchemaOwnedObjectDelegate;
    private ServerEx m_server;
    private DatabaseEx m_connectedDatabase;
    private SchemaEx m_unnamedSchema;
    private LocalSymbolTable m_localSymbolTable;
    private IMetadataCollection`1<ITabular> m_dmlTables;
    private IMetadataCollection`1<ITableValuedFunction> m_builtInTableValuedFunctions;
    private Dictionary`2<object, IMetadataObject> m_boundObjectMap;
    public BatchBindingContext Root { get; }
    public bool IsRoot { get; }
    public DatabaseEx ConnectedDatabase { get; }
    public string ConnectedDatabaseName { get; }
    public BatchBindingContext Batch { get; }
    public BatchBindingContext AsBatchBindingContext { get; }
    public LocalBindingContext AsLocalBindingContext { get; }
    public CollationInfo DatabaseCollation { get; }
    public CollationInfo ServerCollation { get; }
    public IMetadataFactory MetadataFactory { get; }
    public IMetadataCollection`1<ITabular> LocalTableExpressions { get; }
    public IMetadataOrderedCollection`1<IColumn> LocalColumnExpressions { get; }
    public BatchBindingContext(DatabaseEx database);
    private BatchBindingContext(BatchBindingContext baseBindingContext, SchemaEx unnamedSchema, IMetadataCollection`1<ITabular> dmlTables);
    private BatchBindingContext(BatchBindingContext baseBindingContext, SchemaEx unnamedSchema);
    private BatchBindingContext(BatchBindingContext baseBindingContext, DatabaseEx connectedDatabase);
    protected BatchBindingContext(BatchBindingContext baseBindingContext);
    private static BatchBindingContext();
    public virtual BatchBindingContext get_Root();
    public bool get_IsRoot();
    public DatabaseEx get_ConnectedDatabase();
    public string get_ConnectedDatabaseName();
    public BatchBindingContext GetOrCreateModuleBindingContext(SchemaEx schema, IMetadataCollection`1<ITabular> dmlTables);
    public BatchBindingContext GetOrCreateModuleBindingContext(SchemaEx schema);
    public virtual CteBindingContext CreateCteBindingContext();
    public BatchBindingContext GetSiblingBatchBindingContext(DatabaseEx database);
    public BatchBindingContext GetBindingContextForDatabase(DatabaseEx database);
    public bool AddLocalTableVariable(ITableVariable variable, LexicalScope lexicalScope);
    public bool AddLocalScalarVariable(IScalarVariable variable, LexicalScope lexicalScope);
    public bool AddLocalCursorVariable(ICursorVariable variable, LexicalScope lexicalScope);
    public virtual CteScopeSnapshot CaptureCurrentCteSnapshot();
    public ServerEx GetServer();
    public ITableViewBase FindTableOrView(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    private static ITableViewBase FindTableOrView(BatchBindingContext bindingContext, string databaseName, string schemaName, string name, LexicalScope lexicalScope, bool allowSynonyms);
    public static ITableViewBase FindTableOrViewInSchema(SchemaEx schema, string name, LexicalScope lexicalScope);
    public ITable FindTempTable(string name, LexicalScope lexicalScope);
    public ITableValuedFunction FindTableValuedFunction(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    private static ITableValuedFunction FindTableValuedFunction(BatchBindingContext bindingContext, string databaseName, string schemaName, string name, LexicalScope lexicalScope, bool allowSynonyms);
    public static ITableValuedFunction FindTableValuedFunctionInSchema(SchemaEx schema, string name, LexicalScope lexicalScope);
    public ITabular FindBatchTableExpression(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    public IScalarValuedFunction FindScalarValuedFunction(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    private static IScalarValuedFunction FindScalarValuedFunction(BatchBindingContext bindingContext, string databaseName, string schemaName, string name, LexicalScope lexicalScope, bool allowSynonyms);
    public static IScalarValuedFunction FindScalarValuedFunctionInSchema(SchemaEx schema, string name, LexicalScope lexicalScope);
    public IUserDefinedAggregate FindUserDefinedAggregate(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    private static IUserDefinedAggregate FindUserDefinedAggregate(BatchBindingContext bindingContext, string databaseName, string schemaName, string name, LexicalScope lexicalScope, bool allowSynonyms);
    public ICallableModule FindModule(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    private static ICallableModule FindModule(BatchBindingContext bindingContext, string databaseName, string schemaName, string name, LexicalScope lexicalScope, bool allowSynonyms);
    public static ICallableModule FindModuleInSchema(SchemaEx schema, string name, LexicalScope lexicalScope);
    public IStoredProcedure FindStoredProcedure(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    private static IStoredProcedure FindStoredProcedure(BatchBindingContext bindingContext, string databaseName, string schemaName, string name, LexicalScope lexicalScope, bool allowSynonyms);
    public static IStoredProcedure FindStoredProcedureInSchema(SchemaEx schema, string name, LexicalScope lexicalScope);
    public ISynonym FindSynonym(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    public static ISynonym FindSynonymInSchema(SchemaEx schema, string name, LexicalScope lexicalScope);
    public IUserDefinedType FindUserDefinedType(string schemaName, string typeName, LexicalScope lexicalScope);
    public static IUserDefinedType FindUserDefinedTypeInSchema(SchemaEx schema, string typeName, LexicalScope lexicalScope);
    public IDmlTrigger FindDmlTrigger(string schemaName, string tableName, string triggerName, LexicalScope lexicalScope, ITableViewBase& targetTable);
    public IDatabaseDdlTrigger FindDatabaseTrigger(string triggerName, LexicalScope lexicalScope);
    public IServerDdlTrigger FindServerTrigger(string triggerName, LexicalScope lexicalScope);
    public ISchemaOwnedObject FindSchemaOwnedObject(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    private static ISchemaOwnedObject FindSchemaOwnedObject(BatchBindingContext bindingContext, string databaseName, string schemaName, string name, LexicalScope lexicalScope, bool allowSynonyms);
    public static ISchemaOwnedObject FindSchemaOwnedObjectInSchema(SchemaEx schema, string objectName, LexicalScope lexicalScope);
    private static ISchemaOwnedObject FindSchemaOwnedObjectInSchema(SchemaEx schema, string objectName, LexicalScope lexicalScope, bool allowSynonyms);
    public bool ObjectExists(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    public static bool ObjectExistsInSchema(SchemaEx schema, string objectName, LexicalScope lexicalScope);
    private T FindAndResolveSynonym(string databaseName, string schemaName, string name, LexicalScope lexicalScope, FindObjectDelegate`1<T> findObjectDelegate);
    private T ResolveSynonym(ISynonym synonym, LexicalScope lexicalScope, FindObjectDelegate`1<T> findObjectDelegate);
    private T FindSynonymTarget(string baseObjectName, LexicalScope lexicalScope, FindObjectDelegate`1<T> findObjectDelegate);
    private static IList`1<string> ParseMultipartSqlIdentifier(string sqlIdentifier);
    private static string ParseSqlIdentifier(string id);
    public IAsymmetricKey FindServerAsymmetricKey(string asymmetricKeyName, LexicalScope lexicalScope);
    public IAsymmetricKey FindConnectedDatabaseAsymmetricKey(string asymmetricKeyName, LexicalScope lexicalScope);
    public ICertificate FindServerCertificate(string certificateName, LexicalScope lexicalScope);
    public ICertificate FindConnectedDatabaseCertificate(string certificateName, LexicalScope lexicalScope);
    public ICredential FindCredential(string credentialName, LexicalScope lexicalScope);
    public ILogin FindLogin(string loginName, LexicalScope lexicalScope);
    public IUser FindUser(string userName, LexicalScope lexicalScope);
    public IApplicationRole FindApplicationRole(string roleName, LexicalScope lexicalScope);
    public IDatabaseRole FindDatabaseRole(string roleName, LexicalScope lexicalScope);
    public IDatabasePrincipal FindDatabasePrincipal(string principalName, LexicalScope lexicalScope);
    public SchemaEx FindSchema(string databaseName, string schemaName, LexicalScope lexicalScope);
    public DatabaseEx FindDatabase(string databaseName);
    public ISystemDataType FindSystemDataType(DataTypeSpec typeSpec);
    public ISystemDataType FindSystemDataType(DataTypeSpec typeSpec, bool isMaximum);
    public ISystemDataType FindSystemDataType(string schemaName, DataTypeSpec typeSpec, bool isMaximum);
    public ISystemDataType FindSystemDataType(DataTypeSpec typeSpec, int precisionOrMaxLength);
    public ISystemDataType FindSystemDataType(string schemaName, DataTypeSpec typeSpec, int precisionOrMaxLength);
    public ISystemDataType FindSystemDataType(DataTypeSpec typeSpec, int precision, int scale);
    public ISystemDataType FindSystemDataType(string schemaName, DataTypeSpec typeSpec, int precision, int scale);
    public IBuiltInFunction FindBuiltIn(string builtInName);
    public IBuiltInFunction FindBuiltInFunction(string functionName);
    public IBuiltInFunction FindGlobalVariable(string variableName);
    public IDatePart FindDatePart(string datePartName);
    public IIsJsonValueType FindIsJsonType(string isJsonTypeName);
    public IBuiltInFunction FindMultiTypeBuiltInFunction(string name, ISystemDataType dataType);
    public ICollation FindCollation(string collationName);
    public SchemaEx GetTempTableSchema();
    public SchemaEx GetCDASchema(string schemaName, LexicalScope lexicalScope);
    public SchemaEx GetCDASchema(string databaseName, string schemaName, LexicalScope lexicalScope);
    public SchemaEx SchemaToSchemaEx(ISchema schema);
    public DatabaseEx DatabaseToDatabaseEx(IDatabase database);
    public IScalarDataType EvalScalarExpressionDataType(IScalarDataType type1, IScalarDataType type2);
    private ISystemDataType EvalExpressionDataType(ISystemDataType sysType1, ISystemDataType sysType2);
    public void SetBoundObject(object key, IMetadataObject boundObject);
    public IMetadataObject GetBoundObject(object key);
    public T GetBoundObject(object key);
    public sealed virtual LocalBindingContext CreateLocalBindingContext();
    public sealed virtual BatchBindingContext get_Batch();
    public sealed virtual BatchBindingContext get_AsBatchBindingContext();
    public sealed virtual LocalBindingContext get_AsLocalBindingContext();
    public sealed virtual CollationInfo get_DatabaseCollation();
    public sealed virtual CollationInfo get_ServerCollation();
    public sealed virtual IMetadataFactory get_MetadataFactory();
    public sealed virtual ITableVariable FindLocalTableVariable(string name, LexicalScope lexicalScope);
    public sealed virtual IScalarVariable FindLocalScalarVariable(string name, LexicalScope lexicalScope);
    public sealed virtual ICursorVariable FindLocalCursorVariable(string name, LexicalScope lexicalScope);
    public sealed virtual ILocalVariable FindLocalVariable(string name, LexicalScope lexicalScope);
    public virtual void OnBindingToSelfCte();
    public virtual ITabular FindCommonTableExpression(string name, CteBindMode& bindMode, CteQueryFlags& queryFlags);
    public virtual ITabular FindDmlTable(string name);
    public sealed virtual IMetadataCollection`1<ITabular> get_LocalTableExpressions();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_LocalColumnExpressions();
    public sealed virtual IColumn AddLocalColumnExpression(IColumn expression);
    public sealed virtual ITabular AddLocalTableExpression(ITabular expression);
    public sealed virtual IScalar FindLocalScalarExpression(string name);
    public sealed virtual ITabular FindLocalTableExpression(string databaseName, string schemaName, string name);
    public sealed virtual IColumn FindColumn(string name, Boolean& isAmbiguous);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.Binder.BatchBindingContext/<FindAllColumns>d__142")]
public sealed virtual IEnumerable`1<IColumn> FindAllColumns(string name);
    public virtual IMetadataCollection`1<IMetadataObject> FindAll(CompletionContext context, LexicalScope lexicalScope);
    public virtual IMetadataCollection`1<IMetadataObject> FindAll(CompletionContext context, LexicalScope lexicalScope, IMetadataCollection`1<IMetadataObject> commonTableExpressions);
    public sealed virtual IMetadataCollection`1<IMetadataObject> FindAll(List`1<string> ids, CompletionContext context, LexicalScope lexicalScope);
    public virtual IMetadataCollection`1<IMetadataObject> FindAll(List`1<string> ids, CompletionContext context, LexicalScope lexicalScope, IMetadataCollection`1<IMetadataObject> commonTableExpressions);
    private IMetadataCollection`1<IMetadataObject> FindResolvedSynonyms(SchemaEx matchedSchema, CompletionContext context, LexicalScope lexicalScope);
    private bool IsMatchingSynonym(SchemaEx matchedSchema, ISynonym synonym, CompletionContext context, LexicalScope lexicalScope);
    public sealed virtual void EnterTempBindMode(TemporaryBindMode mode);
    public sealed virtual void LeaveTempBindMode(TemporaryBindMode mode);
    private SchemaEx GetSchema(string databaseName, string schemaName, LexicalScope lexicalScope);
    private DatabaseEx GetDatabase(string databaseName);
    private ITabular FindCommonTableExpression(string name);
    private bool IsNullOrSysSchema(string schemaName);
}
internal static class Microsoft.SqlServer.Management.SqlParser.Binder.BindChecks : object {
    [ConditionalAttribute("DEBUG")]
public static void ValidateMetadataObject(object obj);
}
public static class Microsoft.SqlServer.Management.SqlParser.Binder.BinderProvider : object {
    public static IBinder CreateBinder(IMetadataProvider metadataProvider);
}
[FlagsAttribute]
internal enum Microsoft.SqlServer.Management.SqlParser.Binder.BindingState : Enum {
    public sbyte value__;
    public static BindingState Unbound;
    public static BindingState BindSucceeded;
    public static BindingState BindFailed;
    public static BindingState BindSkipped;
    public static BindingState Bound;
}
public enum Microsoft.SqlServer.Management.SqlParser.Binder.BindMode : Enum {
    public int value__;
    public static BindMode Batch;
    public static BindMode Build;
}
internal static class Microsoft.SqlServer.Management.SqlParser.Binder.BindUtils : object {
    public static ISchemaOwnedObject AsSchemaOwnedObject(IMetadataObject metadataObject);
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.BindWorkList : object {
    private ServerOwnedWorkList m_serverOwnedList;
    private DatabaseOwnedWorkList m_databaseOwnedList;
    private SchemaOwnedWorkList m_schemaOwnedList;
    public void AddStatement(SqlStatement statement);
    public void BindAll(BatchBindingContext bindingContext);
    public void RunPostBindBuildModeChecks();
    private string GetPreBindBuildModeErrorMessage(SqlDdlStatement ddlStatement);
    private string GetPreBindBuildModeErrorMessage(SqlCreateSchemaStatement createSchemaStatement);
    private string GetPreBindBuildModeErrorMessage(SqlCreateIndexStatement createIndexStatement);
    private string GetPreBindBuildModeErrorMessage(SqlCreateAlterProcedureStatementBase createProcStatement);
    private string GetPreBindBuildModeErrorMessage(SqlCreateAlterFunctionStatementBase createFunctionStatement);
    private string GetPreBindBuildModeErrorMessage(SqlCreateLoginStatement createLoginStatement);
    private string GetPreBindBuildModeErrorMessage(SqlCreateTriggerStatement createTriggerStatement);
    private string GetPreBindBuildModeErrorMessage(SqlCreateAlterViewStatementBase createAlterViewStatementBase);
    private bool IsParameterCollectionValidInBuildMode(SqlParameterDeclarationCollection parameters);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.Binder.CompletionContext : Enum {
    public int value__;
    public static CompletionContext None;
    public static CompletionContext LocalTableExpressionsOnly;
    public static CompletionContext ScalarVariables;
    public static CompletionContext Columns;
    public static CompletionContext ScalarValuedFunctions;
    public static CompletionContext ColumnAliases;
    public static CompletionContext TableValuedFunctions;
    public static CompletionContext Tables;
    public static CompletionContext Views;
    public static CompletionContext TableVariables;
    public static CompletionContext JsonValueType;
    public static CompletionContext StoredProcedures;
    public static CompletionContext Databases;
    public static CompletionContext Schemas;
    public static CompletionContext GlobalVariables;
    public static CompletionContext BuiltinFunctions;
    public static CompletionContext Datepart;
    public static CompletionContext Credentials;
    public static CompletionContext ServerAsymmetricKeys;
    public static CompletionContext ConnectedDatabaseAsymmetricKeys;
    public static CompletionContext ServerCertificates;
    public static CompletionContext ConnectedDatabaseCertificates;
    public static CompletionContext Logins;
    public static CompletionContext Users;
    public static CompletionContext SystemDataTypes;
    public static CompletionContext AllBuiltins;
    public static CompletionContext Scalar;
    public static CompletionContext SelectScalar;
    public static CompletionContext SelectTabular;
    public static CompletionContext ScalarPlusAliases;
    public static CompletionContext TablesOrViews;
    public static CompletionContext TablesExpressions;
    public static CompletionContext SynyonymBaseObjects;
    public static CompletionContext DatabaseQualifiedTables;
    public static CompletionContext DatabaseQualifiedViews;
    public static CompletionContext DatabaseQualifiedStoredProcedures;
    public static CompletionContext DatabaseQualifiedScalarValuedFunctions;
    public static CompletionContext DatabaseQualifiedTableValuedFunctions;
}
internal static class Microsoft.SqlServer.Management.SqlParser.Binder.Config : object {
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.CteBindingContext : BatchBindingContext {
    private ITabular m_activeCte;
    private CteBindMode m_bindMode;
    private CteQueryFlags m_queryFlags;
    private TabularCollection m_commonTableExpressions;
    public CteBindMode CteBindMode { get; public set; }
    public CteQueryFlags QueryFlags { get; public set; }
    internal CteBindingContext(BatchBindingContext batch);
    public CteBindMode get_CteBindMode();
    public void set_CteBindMode(CteBindMode value);
    public CteQueryFlags get_QueryFlags();
    public void set_QueryFlags(CteQueryFlags value);
    public virtual void OnBindingToSelfCte();
    public virtual CteScopeSnapshot CaptureCurrentCteSnapshot();
    public void EnterCteScope(ITabular cte, bool queryHasUnionAll);
    public void LeaveCteScope(ITabular cte);
    public void UpdateCteInScope(ITabular cte);
    public bool AddCommonTableExpression(ITabular cte, LexicalScope statement);
    public virtual ITabular FindCommonTableExpression(string name, CteBindMode& bindMode, CteQueryFlags& queryFlags);
    public virtual IMetadataCollection`1<IMetadataObject> FindAll(CompletionContext context, LexicalScope lexicalScope, IMetadataCollection`1<IMetadataObject> commonTableExpressions);
    public virtual IMetadataCollection`1<IMetadataObject> FindAll(List`1<string> ids, CompletionContext context, LexicalScope lexicalScope, IMetadataCollection`1<IMetadataObject> commonTableExpressions);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.Binder.CteBindMode : Enum {
    public sbyte value__;
    public static CteBindMode None;
    public static CteBindMode Anchor;
    public static CteBindMode Recursive;
    public static CteBindMode AnchorOrRecursive;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.Binder.CteQueryFlags : Enum {
    public sbyte value__;
    public static CteQueryFlags None;
    public static CteQueryFlags HasUnionAll;
    public static CteQueryFlags HasSelfReference;
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.CteScopeSnapshot : object {
    private ITabular m_selfCte;
    private CteBindMode m_bindMode;
    private CteQueryFlags m_queryFlags;
    private IMutableMetadataCollection`1<ITabular> m_inScopeCteList;
    private IMutableMetadataCollection`1<ITabular> m_inScopeCteAndSelfList;
    public ITabular SelfCte { get; }
    public IMetadataCollection`1<ITabular> InScopeCteList { get; }
    public CteBindMode BindMode { get; }
    public CteQueryFlags QueryFlags { get; public set; }
    private bool IsRecursive { get; }
    private bool HasSelfReference { get; }
    public CteScopeSnapshot(ITabular selfCte, IMutableMetadataCollection`1<ITabular> inScopeCteList, CteBindMode bindMode, CteQueryFlags queryFlags);
    public ITabular get_SelfCte();
    public IMetadataCollection`1<ITabular> get_InScopeCteList();
    public CteBindMode get_BindMode();
    public CteQueryFlags get_QueryFlags();
    public void set_QueryFlags(CteQueryFlags value);
    public IMetadataCollection`1<IMetadataObject> GetCteCompletionList();
    private bool get_IsRecursive();
    private bool get_HasSelfReference();
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.DatabaseContext : object {
    public LexicalScope LexicalScope;
    public DatabaseEx Database;
    public DatabaseContext(LexicalScope lexicalScope, DatabaseEx database);
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.DatabaseEx : DatabaseObjectEx`1<IDatabase> {
    private ServerEx m_parent;
    private SystemDatabaseName m_systemDbName;
    private SchemaExCache m_schemaCache;
    private SchemaEx m_defaultSchema;
    private SchemaEx m_dboSchema;
    private SchemaEx m_sysSchema;
    private SchemaEx m_unnamedSchema;
    private SchemaEx m_emptySchema;
    private List`1<string> m_y2kCatalogViewNames;
    private IScopedMetadataCollection`2<IApplicationRole, IMutableApplicationRole> m_applicationRoles;
    private IScopedMetadataCollection`2<IDatabaseRole, IMutableDatabaseRole> m_databaseRoles;
    private IScopedMetadataCollection`2<ISchema, IMutableSchema> m_schemas;
    private IScopedMetadataCollection`2<IDatabaseDdlTrigger, IMutableDatabaseDdlTrigger> m_triggers;
    private IScopedMetadataCollection`2<IUser, IMutableUser> m_users;
    public ServerEx Server { get; }
    public IScopedMetadataCollection`2<IApplicationRole, IMutableApplicationRole> ApplicationRoles { get; }
    public IScopedMetadataCollection`2<IDatabaseRole, IMutableDatabaseRole> Roles { get; }
    public IScopedMetadataCollection`2<ISchema, IMutableSchema> Schemas { get; }
    public IScopedMetadataCollection`2<IDatabaseDdlTrigger, IMutableDatabaseDdlTrigger> Triggers { get; }
    public IScopedMetadataCollection`2<IUser, IMutableUser> Users { get; }
    public bool IsMaster { get; }
    public bool IsTempDb { get; }
    public SchemaEx DefaultSchema { get; }
    public SchemaEx DboSchema { get; }
    public SchemaEx SysSchema { get; }
    public SchemaEx UnnamedSchema { get; }
    public SchemaEx EmptySchema { get; }
    private IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Server { get; }
    private IMetadataCollection`1<IApplicationRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.ApplicationRoles { get; }
    public IMetadataCollection`1<IAsymmetricKey> AsymmetricKeys { get; }
    public IMetadataCollection`1<ICertificate> Certificates { get; }
    public CollationInfo CollationInfo { get; }
    private DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.CompatibilityLevel { get; }
    public string DefaultSchemaName { get; }
    public IUser Owner { get; }
    private IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Roles { get; }
    private IMetadataCollection`1<ISchema> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Schemas { get; }
    private IMetadataCollection`1<IDatabaseDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Triggers { get; }
    private IMetadataCollection`1<IUser> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Users { get; }
    public DatabaseEx(ServerEx parent, IDatabase proxyDatabase);
    public DatabaseEx(ServerEx parent, IMutableDatabase proxyDatabase);
    private DatabaseEx(ServerEx parent, IDatabase proxyDatabase, bool isMutable);
    public SchemaEx FindSchema(string name);
    public SchemaEx FindSchema(string name, LexicalScope lexicalScope);
    public SchemaEx GetOrCreateSchemaEx(ISchema schema);
    public ServerEx get_Server();
    public IScopedMetadataCollection`2<IApplicationRole, IMutableApplicationRole> get_ApplicationRoles();
    public IScopedMetadataCollection`2<IDatabaseRole, IMutableDatabaseRole> get_Roles();
    public IScopedMetadataCollection`2<ISchema, IMutableSchema> get_Schemas();
    public IScopedMetadataCollection`2<IDatabaseDdlTrigger, IMutableDatabaseDdlTrigger> get_Triggers();
    public IScopedMetadataCollection`2<IUser, IMutableUser> get_Users();
    public bool get_IsMaster();
    public bool get_IsTempDb();
    public SchemaEx get_DefaultSchema();
    public SchemaEx get_DboSchema();
    public SchemaEx get_SysSchema();
    public SchemaEx get_UnnamedSchema();
    public SchemaEx get_EmptySchema();
    public SchemaEx SchemaToSchemaEx(ISchema schema);
    public SchemaEx MakeUnnamedSchema(SchemaEx defaultSchema);
    public SchemaEx MakeTempTableSchema();
    public bool IsY2KCatalogViewName(string name);
    public bool HasMSReservedNamePrefix(string name);
    public IDatabasePrincipal FindDatabasePrincipal(string name, LexicalScope lexicalScope);
    private sealed virtual override IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.get_Server();
    public sealed virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IMetadataCollection`1<IApplicationRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_ApplicationRoles();
    public sealed virtual IMetadataCollection`1<IAsymmetricKey> get_AsymmetricKeys();
    public sealed virtual IMetadataCollection`1<ICertificate> get_Certificates();
    public sealed virtual CollationInfo get_CollationInfo();
    private sealed virtual override DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_CompatibilityLevel();
    public sealed virtual string get_DefaultSchemaName();
    public sealed virtual IUser get_Owner();
    private sealed virtual override IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Roles();
    private sealed virtual override IMetadataCollection`1<ISchema> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Schemas();
    private sealed virtual override IMetadataCollection`1<IDatabaseDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Triggers();
    private sealed virtual override IMetadataCollection`1<IUser> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Users();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.Binder.DatabaseObjectEx`1 : object {
    protected P m_proxyObject;
    public P ProxyObject { get; }
    public IDatabaseObject Parent { get; }
    public bool IsSystemObject { get; }
    public string Name { get; }
    private IMetadataObject Microsoft.SqlServer.Management.SqlParser.Binder.IProxyMetadataObject.UnderlyingObject { get; }
    protected DatabaseObjectEx`1(P proxyObject);
    public P get_ProxyObject();
    public virtual string ToString();
    public sealed virtual IDatabaseObject get_Parent();
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override IMetadataObject Microsoft.SqlServer.Management.SqlParser.Binder.IProxyMetadataObject.get_UnderlyingObject();
}
public class Microsoft.SqlServer.Management.SqlParser.Binder.DependencyDiscoveryResult : object {
    private IEnumerable`1<ObjectDependency> dependencies;
    private IEnumerable`1<Error> errors;
    public IEnumerable`1<IMetadataObject> References { get; }
    public IEnumerable`1<ObjectDependency> Dependencies { get; }
    public IEnumerable`1<Error> Errors { get; }
    internal DependencyDiscoveryResult(IEnumerable`1<ObjectDependency> dependencies, IEnumerable`1<Error> errors);
    public IEnumerable`1<IMetadataObject> get_References();
    public IEnumerable`1<ObjectDependency> get_Dependencies();
    public IEnumerable`1<Error> get_Errors();
}
public static class Microsoft.SqlServer.Management.SqlParser.Binder.DependencyDiscoveryUtils : object {
    public static DependencyDiscoveryResult FindDependencies(ParseResult parseResult);
    internal static DependencyDiscoveryResult FindDependencies(SqlCodeObject codeObj);
}
public enum Microsoft.SqlServer.Management.SqlParser.Binder.DependencyType : Enum {
    public int value__;
    public static DependencyType Unknown;
    public static DependencyType ExecuteTime;
    public static DependencyType CreateTime;
    public static DependencyType RegularPreventsDrop;
    public static DependencyType RegularPreventsAnyChange;
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.Binder.DmlSpecificationBindingContext : LocalBindingContext {
    protected ITabular targetTable;
    protected IMetadataCollection`1<ITabular> dmlTargetTables;
    protected IMetadataCollection`1<ITabular> dmlSourceTables;
    protected IMetadataCollection`1<ITabular> setClauseTables;
    private TemporaryBindMode bindMode;
    protected bool HasInsertedTable { get; }
    protected bool HasDeletedTable { get; }
    public bool IsTargetTableAmbiguous { get; }
    public bool IsTargetTableLocal { get; }
    public IMetadataCollection`1<ITabular> LocalTableExpressions { get; }
    protected DmlSpecificationBindingContext(LocalBindingContext baseBindingContext);
    protected abstract virtual bool get_HasInsertedTable();
    protected abstract virtual bool get_HasDeletedTable();
    public abstract virtual bool get_IsTargetTableAmbiguous();
    public abstract virtual bool get_IsTargetTableLocal();
    public LocalBindingContext CreateOutputClauseBindingContext();
    protected IMetadataCollection`1<ITabular> CreateSpecialTableCollection();
    public abstract virtual ITabular SetTableTarget(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    public abstract virtual ITableValuedFunction SetTableValuedFunctionTarget(string databaseName, string schemaName, string name, LexicalScope lexicalScope);
    public abstract virtual ITableVariable SetTableVariableTarget(string name, LexicalScope lexicalScope);
    protected abstract virtual IMetadataCollection`1<ITabular> CreateOutputClauseTableCollection();
    public virtual ITabular AddLocalTableExpression(ITabular expression);
    public virtual IMetadataCollection`1<ITabular> get_LocalTableExpressions();
    public virtual void EnterTempBindMode(TemporaryBindMode mode);
    public virtual void LeaveTempBindMode(TemporaryBindMode mode);
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.Duplicator : object {
    private IMetadataFactory metadataFactory;
    public Duplicator(IMetadataFactory metadataFactory);
    private sealed virtual override IMutableTable Microsoft.SqlServer.Management.SqlParser.Binder.IDuplicator<Microsoft.SqlServer.Management.SqlParser.Metadata.ITable,Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTable>.Duplicate(ITable obj);
    private sealed virtual override IMutableView Microsoft.SqlServer.Management.SqlParser.Binder.IDuplicator<Microsoft.SqlServer.Management.SqlParser.Metadata.IView,Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableView>.Duplicate(IView obj);
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.SqlServer.Management.SqlParser.Binder.ExecutionSimulator`1 : object {
    public T Item { get; }
    public static ExecutionSimulator`1<T> New(T dbObject, LexicalScope lexicalScope);
    public abstract virtual T get_Item(LexicalScope lexicalScope);
    public abstract virtual void Create(T dbObject, LexicalScope lexicalScope);
    public abstract virtual void Alter(T dbObject, LexicalScope lexicalScope);
    public abstract virtual void Drop(T dbObject, LexicalScope lexicalScope);
}
internal interface Microsoft.SqlServer.Management.SqlParser.Binder.IAlterableScopedMetadataCollection`2 {
    public abstract virtual MT GetAlterableObject(T immutableObject, LexicalScope lexicalScope, StatementBindMode bindMode);
}
public interface Microsoft.SqlServer.Management.SqlParser.Binder.IBinder {
    public abstract virtual IServer Bind(IEnumerable`1<ParseResult> parseResults, string contextDatabaseName, BindMode bindMode);
}
internal interface Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer {
    public bool IsFinalizing { get; }
    public bool IsFinalized { get; }
    public LexicalScope LexicalScope { get; }
    public abstract virtual bool get_IsFinalizing();
    public abstract virtual bool get_IsFinalized();
    public abstract virtual LexicalScope get_LexicalScope();
    public abstract virtual void FinalizeBind();
    public abstract virtual void PostBindFinalize();
}
internal interface Microsoft.SqlServer.Management.SqlParser.Binder.IBindingContext {
    public BatchBindingContext Batch { get; }
    public BatchBindingContext AsBatchBindingContext { get; }
    public LocalBindingContext AsLocalBindingContext { get; }
    public CollationInfo DatabaseCollation { get; }
    public CollationInfo ServerCollation { get; }
    public IMetadataFactory MetadataFactory { get; }
    public IMetadataCollection`1<ITabular> LocalTableExpressions { get; }
    public IMetadataOrderedCollection`1<IColumn> LocalColumnExpressions { get; }
    public abstract virtual LocalBindingContext CreateLocalBindingContext();
    public abstract virtual BatchBindingContext get_Batch();
    public abstract virtual BatchBindingContext get_AsBatchBindingContext();
    public abstract virtual LocalBindingContext get_AsLocalBindingContext();
    public abstract virtual CollationInfo get_DatabaseCollation();
    public abstract virtual CollationInfo get_ServerCollation();
    public abstract virtual IMetadataFactory get_MetadataFactory();
    public abstract virtual ITableVariable FindLocalTableVariable(string name, LexicalScope lexicalScope);
    public abstract virtual IScalarVariable FindLocalScalarVariable(string name, LexicalScope lexicalScope);
    public abstract virtual ICursorVariable FindLocalCursorVariable(string name, LexicalScope lexicalScope);
    public abstract virtual ILocalVariable FindLocalVariable(string name, LexicalScope lexicalScope);
    public abstract virtual void OnBindingToSelfCte();
    public abstract virtual ITabular FindCommonTableExpression(string name, CteBindMode& bindMode, CteQueryFlags& queryFlags);
    public abstract virtual ITabular FindDmlTable(string name);
    public abstract virtual IMetadataCollection`1<ITabular> get_LocalTableExpressions();
    public abstract virtual IMetadataOrderedCollection`1<IColumn> get_LocalColumnExpressions();
    public abstract virtual IColumn AddLocalColumnExpression(IColumn expression);
    public abstract virtual ITabular AddLocalTableExpression(ITabular expression);
    public abstract virtual IScalar FindLocalScalarExpression(string name);
    public abstract virtual ITabular FindLocalTableExpression(string databaseName, string schemaName, string name);
    public abstract virtual IColumn FindColumn(string name, Boolean& isAmbiguous);
    public abstract virtual IEnumerable`1<IColumn> FindAllColumns(string name);
    public abstract virtual IMetadataCollection`1<IMetadataObject> FindAll(CompletionContext context, LexicalScope lexicalScope);
    public abstract virtual IMetadataCollection`1<IMetadataObject> FindAll(List`1<string> ids, CompletionContext context, LexicalScope lexicalScope);
    public abstract virtual void EnterTempBindMode(TemporaryBindMode mode);
    public abstract virtual void LeaveTempBindMode(TemporaryBindMode mode);
}
internal interface Microsoft.SqlServer.Management.SqlParser.Binder.IDuplicator`2 {
    public abstract virtual MT Duplicate(T obj);
}
internal interface Microsoft.SqlServer.Management.SqlParser.Binder.IProxyMetadataObject {
    public IMetadataObject UnderlyingObject { get; }
    public abstract virtual IMetadataObject get_UnderlyingObject();
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.SqlServer.Management.SqlParser.Binder.IScopedMetadataCollection`2 {
    public T Item { get; }
    public IMetadataCollection`1<T> GlobalMetadata { get; }
    public abstract virtual T get_Item(string name, LexicalScope lexicalScope);
    public abstract virtual bool Contains(string name, LexicalScope lexicalScope);
    public abstract virtual IMetadataCollection`1<IMetadataObject> GetMetadataCollection(LexicalScope lexicalScope);
    public abstract virtual void Create(MT createdObject, IBindFinalizer finalizer, StatementBindMode bindMode);
    public abstract virtual void Drop(T droppedObject, LexicalScope lexicalScope);
    public abstract virtual void Alter(MT alteredObject, LexicalScope lexicalScope);
    public abstract virtual MT AsMutableObject(T immutableObject);
    public abstract virtual void ReplaceWithMutableObject(T immutableObject, MT mutableObject);
    public abstract virtual IMetadataCollection`1<T> get_GlobalMetadata();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.Binder.LexicalScope : object {
    private LexicalScope Parent;
    private int OrderTag;
    private int lastChildOrderTag;
    public static LexicalScope Global { get; }
    private int DepthTag { get; }
    public LexicalScope Root { get; }
    public LexicalScope AbsRoot { get; }
    protected bool IsRootScope { get; }
    protected LexicalScope OwnerScope { get; }
    protected LexicalScope(int order);
    protected LexicalScope(LexicalScope parent, int order);
    public static LexicalScope get_Global();
    public static LexicalScope CreateScirptScope();
    private int get_DepthTag();
    public LexicalScope get_Root();
    public abstract virtual LexicalScope get_AbsRoot();
    protected bool get_IsRootScope();
    protected abstract virtual LexicalScope get_OwnerScope();
    public virtual LexicalScope CreateChildScope();
    public virtual LexicalScope CreateModuleScope();
    public bool IsBefore(LexicalScope other);
    public virtual bool IsVisibleTo(LexicalScope other);
    private static bool IsVisible(LexicalScope defScope, LexicalScope useScope);
}
internal enum Microsoft.SqlServer.Management.SqlParser.Binder.LexicalScopeOverride : Enum {
    public int value__;
    public static LexicalScopeOverride None;
    public static LexicalScopeOverride PartitionScope;
    public static LexicalScopeOverride UseRootScope;
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.LocalBindingContext : object {
    protected static Predicate`1<IMetadataObject> isNotAnonymousMetadataObjectFilter;
    private BatchBindingContext m_batchBindingContext;
    private LocalBindingContext m_parentBindingContext;
    private CteScopeSnapshot m_cteScopeSnapshot;
    private TabularCollection m_localTableExpressions;
    private ColumnOrderedCollection m_localColumnExpressions;
    public LocalBindingContext Parent { get; }
    public BatchBindingContext Batch { get; }
    public BatchBindingContext AsBatchBindingContext { get; }
    public LocalBindingContext AsLocalBindingContext { get; }
    public CollationInfo DatabaseCollation { get; }
    public CollationInfo ServerCollation { get; }
    public IMetadataFactory MetadataFactory { get; }
    public IMetadataCollection`1<ITabular> LocalTableExpressions { get; }
    public IMetadataOrderedCollection`1<IColumn> LocalColumnExpressions { get; }
    public LocalBindingContext(BatchBindingContext batchBindingContext);
    private LocalBindingContext(BatchBindingContext batchBindingContext, LocalBindingContext localBindingContext);
    protected LocalBindingContext(LocalBindingContext baseBindingContext);
    protected LocalBindingContext(LocalBindingContext baseBindingContext, TabularCollection localTables, ColumnOrderedCollection localColumns);
    private static LocalBindingContext();
    private static bool IsNotAnonymousMetadataObject(IMetadataObject metadataObject);
    public LocalBindingContext get_Parent();
    public sealed virtual LocalBindingContext CreateLocalBindingContext();
    public sealed virtual BatchBindingContext get_Batch();
    public sealed virtual BatchBindingContext get_AsBatchBindingContext();
    public sealed virtual LocalBindingContext get_AsLocalBindingContext();
    public sealed virtual CollationInfo get_DatabaseCollation();
    public sealed virtual CollationInfo get_ServerCollation();
    public sealed virtual IMetadataFactory get_MetadataFactory();
    public sealed virtual ITableVariable FindLocalTableVariable(string name, LexicalScope lexicalScope);
    public sealed virtual IScalarVariable FindLocalScalarVariable(string name, LexicalScope lexicalScope);
    public sealed virtual ICursorVariable FindLocalCursorVariable(string name, LexicalScope lexicalScope);
    public sealed virtual ILocalVariable FindLocalVariable(string name, LexicalScope lexicalScope);
    public sealed virtual void OnBindingToSelfCte();
    public sealed virtual ITabular FindCommonTableExpression(string name, CteBindMode& bindMode, CteQueryFlags& queryFlags);
    public virtual ITabular FindDmlTable(string name);
    public virtual IMetadataCollection`1<ITabular> get_LocalTableExpressions();
    public virtual IMetadataOrderedCollection`1<IColumn> get_LocalColumnExpressions();
    public virtual IColumn AddLocalColumnExpression(IColumn expression);
    public virtual ITabular AddLocalTableExpression(ITabular expression);
    public sealed virtual IScalar FindLocalScalarExpression(string name);
    public virtual ITabular FindLocalTableExpression(string databaseName, string schemaName, string name);
    public virtual IColumn FindColumn(string name, Boolean& isAmbiguous);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.Binder.LocalBindingContext/<FindAllColumns>d__42")]
public virtual IEnumerable`1<IColumn> FindAllColumns(string name);
    public sealed virtual IMetadataCollection`1<IMetadataObject> FindAll(CompletionContext context, LexicalScope lexicalScope);
    public sealed virtual IMetadataCollection`1<IMetadataObject> FindAll(List`1<string> ids, CompletionContext context, LexicalScope lexicalScope);
    public virtual void EnterTempBindMode(TemporaryBindMode mode);
    public virtual void LeaveTempBindMode(TemporaryBindMode mode);
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.LocalSymbolTable : object {
    private static int InitialCapacity;
    private CollationInfo m_collationInfo;
    private DictionaryCollection`1<LocalSymbol`1<IScalarVariable>> m_scalarVariables;
    private DictionaryCollection`1<LocalSymbol`1<ITableVariable>> m_tableVariables;
    private DictionaryCollection`1<LocalSymbol`1<ICursorVariable>> m_cursorVariables;
    public bool IsEmpty { get; }
    public LocalSymbolTable(CollationInfo collationInfo);
    public bool get_IsEmpty();
    public IScalarVariable FindScalarVariable(string name, LexicalScope lexicalScope);
    public ITableVariable FindTableVariable(string name, LexicalScope lexicalScope);
    public ICursorVariable FindCursorVariable(string name, LexicalScope lexicalScope);
    public ILocalVariable FindVariable(string name, LexicalScope lexicalScope);
    private static T Find(string name, DictionaryCollection`1<LocalSymbol`1<T>> collection, LexicalScope lexicalScope);
    public bool Add(IScalarVariable variable, LexicalScope lexicalScope);
    public bool Add(ITableVariable variable, LexicalScope lexicalScope);
    public bool Add(ICursorVariable variable, LexicalScope lexicalScope);
    private bool Add(T variable, LexicalScope lexicalScope, DictionaryCollection`1& collection);
    public LexicalScope GetDeclarationScope(ILocalVariable variable);
    private static LexicalScope GetDeclarationScope(string name, DictionaryCollection`1<LocalSymbol`1<T>> collection);
    public IMetadataCollection`1<IScalarVariable> GetScalarVariablesAt(LexicalScope lexicalScope);
    public IMetadataCollection`1<ITableVariable> GetTableVariablesAt(LexicalScope lexicalScope);
    public IMetadataCollection`1<ICursorVariable> GetCursorVariablesAt(LexicalScope lexicalScope);
    private IMetadataCollection`1<T> GetVariablesAt(LexicalScope lexicalScope, DictionaryCollection`1<LocalSymbol`1<T>> collection);
    private bool Contains(string name);
    private static bool Contains(string name, DictionaryCollection`1<LocalSymbol`1<T>> collection);
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.MultipartObjectName : ValueType {
    private int identifierCount;
    private SqlMultipartIdentifier multipartIdentifier;
    public string ServerName { get; }
    public string DatabaseName { get; }
    public string SchemaName { get; }
    public string ObjectName { get; }
    public MultipartObjectName(SqlMultipartIdentifier multipartIdentifier);
    public MultipartObjectName(SqlMultipartIdentifier multipartIdentifier, int count);
    public string get_ServerName();
    public string get_DatabaseName();
    public string get_SchemaName();
    public string get_ObjectName();
    private string GetNameAtPosition(int position);
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.NameCollationVisitor : object {
    private static CollationInfo VisitSchemaOwnedObject(ISchemaOwnedObject scOwnedObject);
    public static CollationInfo VisitDatabaseOwnedObject(IDatabaseOwnedObject dbOwnedObject);
    public static CollationInfo VisitServerOwnedObject(IServerOwnedObject svrOwnedObject);
    public sealed virtual CollationInfo Visit(IServer server);
    public sealed virtual CollationInfo Visit(ICredential credential);
    public sealed virtual CollationInfo Visit(IDatabase database);
    public sealed virtual CollationInfo Visit(ILogin login);
    public sealed virtual CollationInfo Visit(IServerDdlTrigger serverDdlTrigger);
    public sealed virtual CollationInfo Visit(IApplicationRole applicationRole);
    public sealed virtual CollationInfo Visit(IAsymmetricKey assymetricKey);
    public sealed virtual CollationInfo Visit(ICertificate certificate);
    public sealed virtual CollationInfo Visit(IDatabaseDdlTrigger databaseDdlTrigger);
    public sealed virtual CollationInfo Visit(IDatabaseRole databaseRole);
    public sealed virtual CollationInfo Visit(IFileGroup fileGroup);
    public sealed virtual CollationInfo Visit(IPartitionScheme partitionScheme);
    public sealed virtual CollationInfo Visit(ISchema schema);
    public sealed virtual CollationInfo Visit(IUser user);
    public sealed virtual CollationInfo Visit(IExtendedStoredProcedure extendedStoredProcedure);
    public sealed virtual CollationInfo Visit(IScalarValuedFunction scalarValuedFunction);
    public sealed virtual CollationInfo Visit(IStoredProcedure storedProcedure);
    public sealed virtual CollationInfo Visit(ISynonym synonym);
    public sealed virtual CollationInfo Visit(ITable table);
    public sealed virtual CollationInfo Visit(ITableValuedFunction tableValuedFunction);
    public sealed virtual CollationInfo Visit(IUserDefinedAggregate userDefinedAggregate);
    public sealed virtual CollationInfo Visit(IUserDefinedClrType userDefinedClrType);
    public sealed virtual CollationInfo Visit(IUserDefinedDataType userDefinedDataType);
    public sealed virtual CollationInfo Visit(IUserDefinedTableType userDefinedTableType);
    public sealed virtual CollationInfo Visit(IView view);
}
public class Microsoft.SqlServer.Management.SqlParser.Binder.ObjectDependency : ValueType {
    private IMetadataObject targetObject;
    private DependencyType dependencyType;
    public IMetadataObject TargetObject { get; }
    public DependencyType DependencyType { get; }
    public ObjectDependency(IMetadataObject targetObject, DependencyType dependencyType);
    public IMetadataObject get_TargetObject();
    public DependencyType get_DependencyType();
    public virtual bool Equals(object obj);
    public bool Equals(ObjectDependency other);
    public virtual int GetHashCode();
}
internal class Microsoft.SqlServer.Management.SqlParser.Binder.SchemaEx : DatabaseObjectEx`1<ISchema> {
    private DatabaseEx m_parent;
    private SpecialType m_specialType;
    private SchemaEx m_singleSchema;
    private IAlterableScopedMetadataCollection`2<ITable, IMutableTable> m_tables;
    private IAlterableScopedMetadataCollection`2<IView, IMutableView> m_views;
    private IScopedMetadataCollection`2<IUserDefinedAggregate, IUserDefinedAggregate> m_userDefinedAggregates;
    private IScopedMetadataCollection`2<ITableValuedFunction, IMutableTableValuedFunction> m_tableValuedFunctions;
    private IScopedMetadataCollection`2<IScalarValuedFunction, IMutableScalarValuedFunction> m_scalarValuedFunctions;
    private IScopedMetadataCollection`2<IStoredProcedure, IMutableStoredProcedure> m_storedProcedures;
    private IScopedMetadataCollection`2<ISynonym, IMutableSynonym> m_synonyms;
    private IScopedMetadataCollection`2<IExtendedStoredProcedure, IExtendedStoredProcedure> m_extendedStoredProcedures;
    private IScopedMetadataCollection`2<IUserDefinedDataType, IMutableUserDefinedDataType> m_userDefinedDataTypes;
    private IScopedMetadataCollection`2<IUserDefinedTableType, IMutableUserDefinedTableType> m_userDefinedTableTypes;
    private IScopedMetadataCollection`2<IUserDefinedClrType, IMutableUserDefinedClrType> m_userDefinedClrTypes;
    private ITable m_emptyTable;
    public bool IsDboSchema { get; }
    public bool IsSysSchema { get; }
    public bool IsUnnamedSchema { get; }
    public bool IsEmptySchema { get; }
    public bool IsSingleSchema { get; }
    public SchemaEx AsSingleSchema { get; }
    public ITable EmptyTable { get; }
    public DatabaseEx Database { get; }
    public IAlterableScopedMetadataCollection`2<ITable, IMutableTable> Tables { get; }
    public IAlterableScopedMetadataCollection`2<IView, IMutableView> Views { get; }
    public IScopedMetadataCollection`2<IUserDefinedAggregate, IUserDefinedAggregate> UserDefinedAggregates { get; }
    public IScopedMetadataCollection`2<ITableValuedFunction, IMutableTableValuedFunction> TableValuedFunctions { get; }
    public IScopedMetadataCollection`2<IScalarValuedFunction, IMutableScalarValuedFunction> ScalarValuedFunctions { get; }
    public IScopedMetadataCollection`2<IStoredProcedure, IMutableStoredProcedure> StoredProcedures { get; }
    public IScopedMetadataCollection`2<ISynonym, IMutableSynonym> Synonyms { get; }
    public IScopedMetadataCollection`2<IExtendedStoredProcedure, IExtendedStoredProcedure> ExtendedStoredProcedures { get; }
    public IScopedMetadataCollection`2<IUserDefinedDataType, IMutableUserDefinedDataType> UserDefinedDataTypes { get; }
    public IScopedMetadataCollection`2<IUserDefinedTableType, IMutableUserDefinedTableType> UserDefinedTableTypes { get; }
    public IScopedMetadataCollection`2<IUserDefinedClrType, IMutableUserDefinedClrType> UserDefinedClrTypes { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Owner { get; }
    private IMetadataCollection`1<ITable> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Tables { get; }
    private IMetadataCollection`1<IView> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Views { get; }
    private IMetadataCollection`1<IUserDefinedAggregate> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedAggregates { get; }
    private IMetadataCollection`1<ITableValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.TableValuedFunctions { get; }
    private IMetadataCollection`1<IScalarValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.ScalarValuedFunctions { get; }
    private IMetadataCollection`1<IStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.StoredProcedures { get; }
    private IMetadataCollection`1<ISynonym> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Synonyms { get; }
    private IMetadataCollection`1<IExtendedStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.ExtendedStoredProcedures { get; }
    private IMetadataCollection`1<IUserDefinedDataType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedDataTypes { get; }
    private IMetadataCollection`1<IUserDefinedTableType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedTableTypes { get; }
    private IMetadataCollection`1<IUserDefinedClrType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedClrTypes { get; }
    public SchemaEx(DatabaseEx parent, ISchema proxySchema);
    public SchemaEx(DatabaseEx parent, IMutableSchema proxySchema);
    private SchemaEx(DatabaseEx parent, SchemaEx defaultSchema);
    private SchemaEx(DatabaseEx parent, SpecialType specialType);
    private SchemaEx(DatabaseEx parent, ISchema proxySchema, SpecialType specialType);
    public static SchemaEx CreateEmptySchema(DatabaseEx database);
    public static SchemaEx CreateTempTableSchema(DatabaseEx database);
    public static SchemaEx CreateUnnamedSchema(DatabaseEx database);
    public static SchemaEx CreateUnnamedSchema(DatabaseEx database, SchemaEx defaultSchema);
    public static bool IsNullOrEmpty(SchemaEx schema);
    public bool get_IsDboSchema();
    public bool get_IsSysSchema();
    public bool get_IsUnnamedSchema();
    public bool get_IsEmptySchema();
    public bool get_IsSingleSchema();
    public SchemaEx get_AsSingleSchema();
    public ITable get_EmptyTable();
    public ITableViewBase FindTableOrView(string name, LexicalScope lexicalScope);
    public ICallableModule FindModule(string name, LexicalScope lexicalScope);
    public IUserDefinedType FindUserDefinedTypes(string name, LexicalScope lexicalScope);
    public DatabaseEx get_Database();
    public IAlterableScopedMetadataCollection`2<ITable, IMutableTable> get_Tables();
    public IAlterableScopedMetadataCollection`2<IView, IMutableView> get_Views();
    public IScopedMetadataCollection`2<IUserDefinedAggregate, IUserDefinedAggregate> get_UserDefinedAggregates();
    public IScopedMetadataCollection`2<ITableValuedFunction, IMutableTableValuedFunction> get_TableValuedFunctions();
    public IScopedMetadataCollection`2<IScalarValuedFunction, IMutableScalarValuedFunction> get_ScalarValuedFunctions();
    public IScopedMetadataCollection`2<IStoredProcedure, IMutableStoredProcedure> get_StoredProcedures();
    public IScopedMetadataCollection`2<ISynonym, IMutableSynonym> get_Synonyms();
    public IScopedMetadataCollection`2<IExtendedStoredProcedure, IExtendedStoredProcedure> get_ExtendedStoredProcedures();
    public IScopedMetadataCollection`2<IUserDefinedDataType, IMutableUserDefinedDataType> get_UserDefinedDataTypes();
    public IScopedMetadataCollection`2<IUserDefinedTableType, IMutableUserDefinedTableType> get_UserDefinedTableTypes();
    public IScopedMetadataCollection`2<IUserDefinedClrType, IMutableUserDefinedClrType> get_UserDefinedClrTypes();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    public sealed virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Owner();
    private sealed virtual override IMetadataCollection`1<ITable> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Tables();
    private sealed virtual override IMetadataCollection`1<IView> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Views();
    private sealed virtual override IMetadataCollection`1<IUserDefinedAggregate> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedAggregates();
    private sealed virtual override IMetadataCollection`1<ITableValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_TableValuedFunctions();
    private sealed virtual override IMetadataCollection`1<IScalarValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_ScalarValuedFunctions();
    private sealed virtual override IMetadataCollection`1<IStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_StoredProcedures();
    private sealed virtual override IMetadataCollection`1<ISynonym> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Synonyms();
    private sealed virtual override IMetadataCollection`1<IExtendedStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_ExtendedStoredProcedures();
    private sealed virtual override IMetadataCollection`1<IUserDefinedDataType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedDataTypes();
    private sealed virtual override IMetadataCollection`1<IUserDefinedTableType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedTableTypes();
    private sealed virtual override IMetadataCollection`1<IUserDefinedClrType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedClrTypes();
    private static SpecialType GetSchemaSpecialType(ISchema schema);
}
internal static class Microsoft.SqlServer.Management.SqlParser.Binder.ScopedMetadataCollection`2 : object {
    private static EmptyCollection<T, MT> EmptyInstance;
    public static IAlterableScopedMetadataCollection`2<T, MT> Empty { get; }
    private static ScopedMetadataCollection`2();
    public static IAlterableScopedMetadataCollection`2<T, MT> get_Empty();
    public static IScopedMetadataCollection`2<T, MT> Merge(IScopedMetadataCollection`2<T, MT> primaryCollection, IScopedMetadataCollection`2<T, MT> secondaryCollection);
    public static IAlterableScopedMetadataCollection`2<T, MT> Merge(IAlterableScopedMetadataCollection`2<T, MT> primaryCollection, IAlterableScopedMetadataCollection`2<T, MT> secondaryCollection);
    public static IScopedMetadataCollection`2<T, MT> Merge(IScopedMetadataCollection`2<T, MT> primaryCollection, IScopedMetadataCollection`2<T, MT> secondaryCollection1, IScopedMetadataCollection`2<T, MT> secondaryCollection2);
    public static IAlterableScopedMetadataCollection`2<T, MT> Merge(IAlterableScopedMetadataCollection`2<T, MT> primaryCollection, IAlterableScopedMetadataCollection`2<T, MT> secondaryCollection1, IAlterableScopedMetadataCollection`2<T, MT> secondaryCollection2);
    public static IScopedMetadataCollection`2<T, MT> CreateImmutableCollection(IMetadataCollection`1<T> proxyCollection, CollationInfo collationInfo);
    public static IAlterableScopedMetadataCollection`2<T, MT> CreateImmutableCollection(IMetadataCollection`1<T> proxyCollection, CollationInfo collationInfo, IDuplicator`2<T, MT> duplicator);
    public static IScopedMetadataCollection`2<T, MT> CreateMutableCollection(IMutableMetadataCollection`1<T> proxyCollection, CollationInfo collationInfo);
    public static IAlterableScopedMetadataCollection`2<T, MT> CreateMutableCollection(IMutableMetadataCollection`1<T> proxyCollection, CollationInfo collationInfo, IDuplicator`2<T, MT> duplicator);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.SqlParser.Binder.ServerEx : DatabaseObjectEx`1<IServer> {
    private ISystemDataTypeLookup m_systemDataTypeLookup;
    private IBuiltInFunctionLookup m_builtInFunctionLookup;
    private ICollationLookup m_collationLookup;
    private IMetadataFactory m_metadataFactory;
    private DatabaseExCache m_databaseCache;
    private IScopedMetadataCollection`2<IDatabase, IMutableDatabase> m_databases;
    private IScopedMetadataCollection`2<ILogin, IMutableLogin> m_logins;
    private IScopedMetadataCollection`2<IServerDdlTrigger, IMutableServerDdlTrigger> m_triggers;
    private IMetadataCollection`1<IMetadataObject> m_systemDataTypes;
    private SchemaEx m_tempTableSchema;
    private DatabaseEx m_tempDatabase;
    private Duplicator m_metadataDuplicator;
    public DatabaseEx Item { get; }
    public ISystemDataTypeLookup SystemDataTypeLookup { get; }
    public IBuiltInFunctionLookup BuiltInFunctionLookup { get; }
    public ICollationLookup CollationLookup { get; }
    public IMetadataFactory MetadataFactory { get; }
    public Duplicator MetadataDuplicator { get; }
    public SchemaEx TempTableSchema { get; }
    public IScopedMetadataCollection`2<IDatabase, IMutableDatabase> Databases { get; }
    public IScopedMetadataCollection`2<ILogin, IMutableLogin> Logins { get; }
    public IScopedMetadataCollection`2<IServerDdlTrigger, IMutableServerDdlTrigger> Triggers { get; }
    public IMetadataCollection`1<IMetadataObject> SystemDataTypes { get; }
    private DatabaseEx TempDatabase { get; }
    public CollationInfo CollationInfo { get; }
    private IMetadataCollection`1<IDatabase> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Databases { get; }
    public IMetadataCollection`1<ICredential> Credentials { get; }
    private IMetadataCollection`1<ILogin> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Logins { get; }
    private IMetadataCollection`1<IServerDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Triggers { get; }
    public ServerEx(IServer proxyServer, ISystemDataTypeLookup systemDataTypeLookup, IBuiltInFunctionLookup builtInFunctionLookup, ICollationLookup collationLookup, IMetadataFactory metadataFactory);
    public ServerEx(IMutableServer proxyServer, ISystemDataTypeLookup systemDataTypeLookup, IBuiltInFunctionLookup builtInFunctionLookup, ICollationLookup collationLookup, IMetadataFactory metadataFactory);
    private ServerEx(IServer proxyServer, ISystemDataTypeLookup systemDataTypeLookup, IBuiltInFunctionLookup builtInFunctionLookup, ICollationLookup collationLookup, IMetadataFactory metadataFactory, bool isMutable);
    public DatabaseEx get_Item(string databaseName);
    public DatabaseEx GetOrCreateDatabaseEx(IDatabase database);
    public ISystemDataTypeLookup get_SystemDataTypeLookup();
    public IBuiltInFunctionLookup get_BuiltInFunctionLookup();
    public ICollationLookup get_CollationLookup();
    public IMetadataFactory get_MetadataFactory();
    public Duplicator get_MetadataDuplicator();
    public SchemaEx get_TempTableSchema();
    public SchemaEx GetOrCreateTempTableSchema();
    public IScopedMetadataCollection`2<IDatabase, IMutableDatabase> get_Databases();
    public IScopedMetadataCollection`2<ILogin, IMutableLogin> get_Logins();
    public IScopedMetadataCollection`2<IServerDdlTrigger, IMutableServerDdlTrigger> get_Triggers();
    public IMetadataCollection`1<IMetadataObject> get_SystemDataTypes();
    private DatabaseEx get_TempDatabase();
    public sealed virtual CollationInfo get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IDatabase> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Databases();
    public sealed virtual IMetadataCollection`1<ICredential> get_Credentials();
    private sealed virtual override IMetadataCollection`1<ILogin> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Logins();
    private sealed virtual override IMetadataCollection`1<IServerDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Triggers();
    [CompilerGeneratedAttribute]
private ISystemDataType <.ctor>b__12_0(DataTypeSpec dataTypespec);
}
internal enum Microsoft.SqlServer.Management.SqlParser.Binder.StatementBindMode : Enum {
    public int value__;
    public static StatementBindMode Sequential;
    public static StatementBindMode OutOfOrder;
}
public enum Microsoft.SqlServer.Management.SqlParser.Binder.TemporaryBindMode : Enum {
    public sbyte value__;
    public static TemporaryBindMode None;
    public static TemporaryBindMode ColumnAssignmentTarget;
    public static TemporaryBindMode MergeActionSource;
    public static TemporaryBindMode MergeActionTarget;
}
public enum Microsoft.SqlServer.Management.SqlParser.Common.DatabaseCompatibilityLevel : Enum {
    public int value__;
    public static DatabaseCompatibilityLevel Current;
    public static DatabaseCompatibilityLevel Version80;
    public static DatabaseCompatibilityLevel Version90;
    public static DatabaseCompatibilityLevel Version100;
    public static DatabaseCompatibilityLevel Version110;
    public static DatabaseCompatibilityLevel Version120;
    public static DatabaseCompatibilityLevel Version130;
    public static DatabaseCompatibilityLevel Version140;
    public static DatabaseCompatibilityLevel Version150;
    public static DatabaseCompatibilityLevel Version160;
    public static DatabaseCompatibilityLevel Version170;
    public static DatabaseCompatibilityLevel Azure;
}
[FlagsAttribute]
internal enum Microsoft.SqlServer.Management.SqlParser.Common.DataTypeErrors : Enum {
    public int value__;
    public static DataTypeErrors None;
    public static DataTypeErrors NationalNotAllowed;
    public static DataTypeErrors VaryingNotAllowed;
}
internal class Microsoft.SqlServer.Management.SqlParser.Common.DataTypeLookup : object {
    private static DataTypeLookup Instance;
    private Dictionary`2<StringToken, LookupSpec[]> lookupTable;
    private static DataTypeLookup();
    public static DataTypeSpec Find(string name);
    public static DataTypeSpec Find(string name, bool isNational, bool isVarying, DataTypeErrors& error);
}
internal class Microsoft.SqlServer.Management.SqlParser.Common.PriorityQueue`1 : object {
    private List`1<T> list;
    private IComparer`1<T> comparer;
    public IComparer`1<T> Comparer { get; }
    public int Count { get; }
    public T Peek { get; }
    public PriorityQueue`1(IComparer`1<T> comparer);
    public IComparer`1<T> get_Comparer();
    public int get_Count();
    public T get_Peek();
    public void Enqueue(T value);
    private void Enqueue(int hole, T value);
    public T Dequeue();
    private void AdjustHeap(int hole, int bottom, T lastValue);
    public virtual string ToString();
}
public enum Microsoft.SqlServer.Management.SqlParser.Common.StringToken : Enum {
    public int value__;
    public static StringToken None;
    public static StringToken D;
    public static StringToken M;
    public static StringToken N;
    public static StringToken Q;
    public static StringToken S;
    public static StringToken T;
    public static StringToken W;
    public static StringToken Y;
    public static StringToken As;
    public static StringToken At;
    public static StringToken By;
    public static StringToken DD;
    public static StringToken DW;
    public static StringToken DY;
    public static StringToken HH;
    public static StringToken If;
    public static StringToken In;
    public static StringToken Is;
    public static StringToken MI;
    public static StringToken MM;
    public static StringToken MS;
    public static StringToken No;
    public static StringToken NS;
    public static StringToken Of;
    public static StringToken On;
    public static StringToken Or;
    public static StringToken QQ;
    public static StringToken SS;
    public static StringToken To;
    public static StringToken TS;
    public static StringToken TZ;
    public static StringToken WK;
    public static StringToken WW;
    public static StringToken YY;
    public static StringToken Add;
    public static StringToken All;
    public static StringToken And;
    public static StringToken Any;
    public static StringToken Asc;
    public static StringToken Bit;
    public static StringToken Cpu;
    public static StringToken Day;
    public static StringToken Dec;
    public static StringToken End;
    public static StringToken For;
    public static StringToken Get;
    public static StringToken Int;
    public static StringToken Key;
    public static StringToken Log;
    public static StringToken MCS;
    public static StringToken Not;
    public static StringToken Off;
    public static StringToken Orc;
    public static StringToken Out;
    public static StringToken Raw;
    public static StringToken Row;
    public static StringToken Set;
    public static StringToken Sid;
    public static StringToken Sql;
    public static StringToken Top;
    public static StringToken Try;
    public static StringToken Url;
    public static StringToken Use;
    public static StringToken Xml;
    public static StringToken Auto;
    public static StringToken Both;
    public static StringToken Bulk;
    public static StringToken Case;
    public static StringToken Cast;
    public static StringToken Char;
    public static StringToken Copy;
    public static StringToken Cube;
    public static StringToken Data;
    public static StringToken Date;
    public static StringToken Dbcc;
    public static StringToken Dbts;
    public static StringToken Deny;
    public static StringToken Desc;
    public static StringToken Drop;
    public static StringToken Dump;
    public static StringToken Edge;
    public static StringToken Else;
    public static StringToken Exec;
    public static StringToken Exit;
    public static StringToken File;
    public static StringToken From;
    public static StringToken Full;
    public static StringToken Goto;
    public static StringToken Hadr;
    public static StringToken Hash;
    public static StringToken Heap;
    public static StringToken Hour;
    public static StringToken Idle;
    public static StringToken Into;
    public static StringToken Join;
    public static StringToken Json;
    public static StringToken Kill;
    public static StringToken Left;
    public static StringToken Like;
    public static StringToken List;
    public static StringToken Load;
    public static StringToken Move;
    public static StringToken Name;
    public static StringToken Next;
    public static StringToken Node;
    public static StringToken NONE;
    public static StringToken Null;
    public static StringToken Only;
    public static StringToken Open;
    public static StringToken Over;
    public static StringToken Page;
    public static StringToken Path;
    public static StringToken Plan;
    public static StringToken Pool;
    public static StringToken Proc;
    public static StringToken Read;
    public static StringToken Real;
    public static StringToken Role;
    public static StringToken Rows;
    public static StringToken Rule;
    public static StringToken Save;
    public static StringToken Self;
    public static StringToken Send;
    public static StringToken Sets;
    public static StringToken Some;
    public static StringToken Spid;
    public static StringToken Text;
    public static StringToken Then;
    public static StringToken Ties;
    public static StringToken Time;
    public static StringToken Tran;
    public static StringToken Trim;
    public static StringToken True;
    public static StringToken Type;
    public static StringToken User;
    public static StringToken View;
    public static StringToken Week;
    public static StringToken When;
    public static StringToken With;
    public static StringToken Year;
    public static StringToken YYYY;
    public static StringToken Zone;
    public static StringToken Abort;
    public static StringToken After;
    public static StringToken Alter;
    public static StringToken Apply;
    public static StringToken Array;
    public static StringToken Async;
    public static StringToken Audit;
    public static StringToken Begin;
    public static StringToken Block;
    public static StringToken Break;
    public static StringToken Build;
    public static StringToken Cache;
    public static StringToken Catch;
    public static StringToken Check;
    public static StringToken Close;
    public static StringToken Cross;
    public static StringToken Cycle;
    public static StringToken Error;
    public static StringToken Event;
    public static StringToken False;
    public static StringToken Fetch;
    public static StringToken First;
    public static StringToken Float;
    public static StringToken Grant;
    public static StringToken Group;
    public static StringToken Image;
    public static StringToken Index;
    public static StringToken Inner;
    public static StringToken Input;
    public static StringToken IsoWk;
    public static StringToken IsoWw;
    public static StringToken Level;
    public static StringToken Local;
    public static StringToken Login;
    public static StringToken Logon;
    public static StringToken Match;
    public static StringToken Merge;
    public static StringToken Money;
    public static StringToken Month;
    public static StringToken NChar;
    public static StringToken NText;
    public static StringToken Order;
    public static StringToken Outer;
    public static StringToken Owner;
    public static StringToken Parse;
    public static StringToken Pause;
    public static StringToken Pivot;
    public static StringToken Print;
    public static StringToken Queue;
    public static StringToken Range;
    public static StringToken Rdbms;
    public static StringToken Right;
    public static StringToken Route;
    public static StringToken Start;
    public static StringToken Store;
    public static StringToken Table;
    public static StringToken Throw;
    public static StringToken Union;
    public static StringToken Using;
    public static StringToken Value;
    public static StringToken Where;
    public static StringToken While;
    public static StringToken XLock;
    public static StringToken Action;
    public static StringToken Always;
    public static StringToken Atomic;
    public static StringToken Backup;
    public static StringToken Before;
    public static StringToken BigInt;
    public static StringToken Binary;
    public static StringToken Broker;
    public static StringToken Browse;
    public static StringToken Buffer;
    public static StringToken Called;
    public static StringToken Caller;
    public static StringToken Column;
    public static StringToken Commit;
    public static StringToken Create;
    public static StringToken Cursor;
    public static StringToken Custom;
    public static StringToken Delete;
    public static StringToken Dialog;
    public static StringToken Double;
    public static StringToken Enable;
    public static StringToken Errlvl;
    public static StringToken Escape;
    public static StringToken Except;
    public static StringToken Exists;
    public static StringToken Filter;
    public static StringToken Format;
    public static StringToken Global;
    public static StringToken Hadoop;
    public static StringToken Hashed;
    public static StringToken Having;
    public static StringToken Hidden;
    public static StringToken Inline;
    public static StringToken Insert;
    public static StringToken Keyset;
    public static StringToken Langid;
    public static StringToken Ledger;
    public static StringToken LineNo;
    public static StringToken Masked;
    public static StringToken Master;
    public static StringToken MaxDop;
    public static StringToken Minute;
    public static StringToken Modify;
    public static StringToken NoLock;
    public static StringToken NoWait;
    public static StringToken NullIf;
    public static StringToken Object;
    public static StringToken Offset;
    public static StringToken Online;
    public static StringToken Option;
    public static StringToken Output;
    public static StringToken Period;
    public static StringToken Policy;
    public static StringToken Procid;
    public static StringToken Public;
    public static StringToken Rcfile;
    public static StringToken Remote;
    public static StringToken Remove;
    public static StringToken Result;
    public static StringToken Resume;
    public static StringToken Return;
    public static StringToken Revert;
    public static StringToken Revoke;
    public static StringToken Rollup;
    public static StringToken Scalar;
    public static StringToken Schema;
    public static StringToken Scoped;
    public static StringToken Scroll;
    public static StringToken Search;
    public static StringToken Second;
    public static StringToken Select;
    public static StringToken Server;
    public static StringToken Source;
    public static StringToken Sparse;
    public static StringToken Static;
    public static StringToken Stream;
    public static StringToken Switch;
    public static StringToken Target;
    public static StringToken Unique;
    public static StringToken Update;
    public static StringToken Values;
    public static StringToken Window;
    public static StringToken Within;
    public static StringToken XQuery;
    public static StringToken Between;
    public static StringToken Cascade;
    public static StringToken Catalog;
    public static StringToken Collate;
    public static StringToken Compute;
    public static StringToken Content;
    public static StringToken Context;
    public static StringToken Convert;
    public static StringToken Counter;
    public static StringToken Current;
    public static StringToken Decimal;
    public static StringToken Declare;
    public static StringToken Default;
    public static StringToken Disable;
    public static StringToken Dynamic;
    public static StringToken Execute;
    public static StringToken Foreign;
    public static StringToken Include;
    public static StringToken Inherit;
    public static StringToken Instead;
    public static StringToken Integer;
    public static StringToken Io_busy;
    public static StringToken Leading;
    public static StringToken Library;
    public static StringToken Matched;
    public static StringToken MdsLog;
    public static StringToken Message;
    public static StringToken Minutes;
    public static StringToken NoCheck;
    public static StringToken Numeric;
    public static StringToken Offsets;
    public static StringToken OpenXml;
    public static StringToken Options;
    public static StringToken PagLock;
    public static StringToken Parquet;
    public static StringToken Percent;
    public static StringToken Primary;
    public static StringToken Process;
    public static StringToken Quarter;
    public static StringToken Rebuild;
    public static StringToken Receive;
    public static StringToken Replace;
    public static StringToken Restart;
    public static StringToken Restore;
    public static StringToken Returns;
    public static StringToken RowLock;
    public static StringToken Service;
    public static StringToken Session;
    public static StringToken SetUser;
    public static StringToken Sharded;
    public static StringToken Spatial;
    public static StringToken Synonym;
    public static StringToken SysName;
    public static StringToken TabLock;
    public static StringToken TinyInt;
    public static StringToken Trigger;
    public static StringToken Tsequal;
    public static StringToken Unpivot;
    public static StringToken UpdLock;
    public static StringToken UserDb;
    public static StringToken VarChar;
    public static StringToken Variant;
    public static StringToken Varying;
    public static StringToken Version;
    public static StringToken WaitFor;
    public static StringToken Weekday;
    public static StringToken Windows;
    public static StringToken Without;
    public static StringToken Assembly;
    public static StringToken Coalesce;
    public static StringToken Contains;
    public static StringToken Continue;
    public static StringToken Contract;
    public static StringToken Cpu_busy;
    public static StringToken Database;
    public static StringToken DateTime;
    public static StringToken Distinct;
    public static StringToken Encoding;
    public static StringToken EndPoint;
    public static StringToken Explicit;
    public static StringToken External;
    public static StringToken FailOver;
    public static StringToken FreeText;
    public static StringToken FullText;
    public static StringToken Function;
    public static StringToken Geometry;
    public static StringToken Governor;
    public static StringToken Grouping;
    public static StringToken HoldLock;
    public static StringToken Identity;
    public static StringToken Infinite;
    public static StringToken IsoWeek;
    public static StringToken KeyPath;
    public static StringToken Language;
    public static StringToken Location;
    public static StringToken MaxSize;
    public static StringToken MaxValue;
    public static StringToken MinValue;
    public static StringToken National;
    public static StringToken NoExpand;
    public static StringToken NumaNode;
    public static StringToken NVarChar;
    public static StringToken Openjson;
    public static StringToken Password;
    public static StringToken Platform;
    public static StringToken Property;
    public static StringToken Provider;
    public static StringToken PushDown;
    public static StringToken ReadOnly;
    public static StringToken ReadPast;
    public static StringToken ReadText;
    public static StringToken Resource;
    public static StringToken Restrict;
    public static StringToken Rollback;
    public static StringToken RowCount;
    public static StringToken Security;
    public static StringToken Sequence;
    public static StringToken Shutdown;
    public static StringToken SmallInt;
    public static StringToken Snapshot;
    public static StringToken SoftNuma;
    public static StringToken StopList;
    public static StringToken TabLockX;
    public static StringToken TextSize;
    public static StringToken Trailing;
    public static StringToken Truncate;
    public static StringToken TryCast;
    public static StringToken TzOffset;
    public static StringToken Workload;
    public static StringToken Aggregate;
    public static StringToken Algorithm;
    public static StringToken BindRule;
    public static StringToken Character;
    public static StringToken Clustered;
    public static StringToken Datefirst;
    public static StringToken DateTime2;
    public static StringToken DayOfYear;
    public static StringToken DropRole;
    public static StringToken DropRule;
    public static StringToken DropType;
    public static StringToken DropUser;
    public static StringToken DropView;
    public static StringToken Encrypted;
    public static StringToken Federated;
    public static StringToken FileName;
    public static StringToken FileGroup;
    public static StringToken Filetable;
    public static StringToken FirstRow;
    public static StringToken ForceScan;
    public static StringToken ForceSeek;
    public static StringToken Generated;
    public static StringToken Geography;
    public static StringToken Hardening;
    public static StringToken Increment;
    public static StringToken Intersect;
    public static StringToken MaxFiles;
    public static StringToken MaxLength;
    public static StringToken Nestlevel;
    public static StringToken ObjectId;
    public static StringToken OpenQuery;
    public static StringToken Pack_sent;
    public static StringToken PadIndex;
    public static StringToken Partition;
    public static StringToken Persisted;
    public static StringToken Precision;
    public static StringToken Predicate;
    public static StringToken Procedure;
    public static StringToken Raiserror;
    public static StringToken Read_Only;
    public static StringToken Recompile;
    public static StringToken Recursive;
    public static StringToken Remserver;
    public static StringToken Resumable;
    public static StringToken Scheduler;
    public static StringToken Secondary;
    public static StringToken Selective;
    public static StringToken Signature;
    public static StringToken Singleton;
    public static StringToken Symmetric;
    public static StringToken Timestamp;
    public static StringToken Timeticks;
    public static StringToken Trancount;
    public static StringToken TryParse;
    public static StringToken TypeDesc;
    public static StringToken Unbounded;
    public static StringToken VarBinary;
    public static StringToken WriteText;
    public static StringToken XmlBinary;
    public static StringToken AlterRole;
    public static StringToken AlterUser;
    public static StringToken AlterView;
    public static StringToken Asymmetric;
    public static StringToken Checkpoint;
    public static StringToken ColumnSet;
    public static StringToken Connection;
    public static StringToken Constraint;
    public static StringToken Credential;
    public static StringToken Deallocate;
    public static StringToken Decryption;
    public static StringToken DropIndex;
    public static StringToken DropLogin;
    public static StringToken DropQueue;
    public static StringToken DropRoute;
    public static StringToken DropTable;
    public static StringToken Durability;
    public static StringToken Encryption;
    public static StringToken FileStream;
    public static StringToken FillFactor;
    public static StringToken Nanosecond;
    public static StringToken NCharacter;
    public static StringToken OpenRowSet;
    public static StringToken Optimistic;
    public static StringToken Parameters;
    public static StringToken Partitions;
    public static StringToken Percentage;
    public static StringToken Population;
    public static StringToken References;
    public static StringToken Reorganize;
    public static StringToken Replicated;
    public static StringToken RowGuidCol;
    public static StringToken RowVersion;
    public static StringToken Servername;
    public static StringToken SmallMoney;
    public static StringToken Statistics;
    public static StringToken Total_read;
    public static StringToken UpdateText;
    public static StringToken VarCharMax;
    public static StringToken AlterIndex;
    public static StringToken AlterLogin;
    public static StringToken AlterQueue;
    public static StringToken AlterRoute;
    public static StringToken AlterTable;
    public static StringToken AppendOnly;
    public static StringToken Application;
    public static StringToken Certificate;
    public static StringToken ColumnStore;
    public static StringToken Compression;
    public static StringToken Connections;
    public static StringToken Containment;
    public static StringToken CreateRole;
    public static StringToken CreateRule;
    public static StringToken CreateType;
    public static StringToken CreateUser;
    public static StringToken CreateView;
    public static StringToken Cursor_rows;
    public static StringToken DataSource;
    public static StringToken DateFormat;
    public static StringToken DenyServer;
    public static StringToken Diagnostics;
    public static StringToken Distributed;
    public static StringToken DropSchema;
    public static StringToken FileFormat;
    public static StringToken FormatType;
    public static StringToken HierarchyId;
    public static StringToken IdentityCol;
    public static StringToken Insensitive;
    public static StringToken LedgerView;
    public static StringToken Microsecond;
    public static StringToken Millisecond;
    public static StringToken MustChange;
    public static StringToken NVarCharMax;
    public static StringToken ObjectName;
    public static StringToken QueryStore;
    public static StringToken Reconfigure;
    public static StringToken RejectType;
    public static StringToken Replication;
    public static StringToken RoundRobin;
    public static StringToken SchemaName;
    public static StringToken Sensitivity;
    public static StringToken Servicename;
    public static StringToken SortedData;
    public static StringToken SqlVariant;
    public static StringToken SystemTime;
    public static StringToken SystemUser;
    public static StringToken TableSample;
    public static StringToken Total_write;
    public static StringToken Transaction;
    public static StringToken TryConvert;
    public static StringToken AlterSchema;
    public static StringToken Availability;
    public static StringToken BindDefault;
    public static StringToken BlobStorage;
    public static StringToken BucketCount;
    public static StringToken CheckPolicy;
    public static StringToken Conversation;
    public static StringToken CreateIndex;
    public static StringToken CreateLogin;
    public static StringToken CreateQueue;
    public static StringToken CreateRoute;
    public static StringToken CreateTable;
    public static StringToken CurrentDate;
    public static StringToken CurrentTime;
    public static StringToken CurrentUser;
    public static StringToken Distribution;
    public static StringToken DropDefault;
    public static StringToken DropMessage;
    public static StringToken DropService;
    public static StringToken DropSynonym;
    public static StringToken DropTrigger;
    public static StringToken FastForward;
    public static StringToken FastFirstRow;
    public static StringToken Fetch_status;
    public static StringToken ForwardOnly;
    public static StringToken GrantServer;
    public static StringToken KeepDefaults;
    public static StringToken KeepIdentity;
    public static StringToken Lock_timeout;
    public static StringToken MaxDuration;
    public static StringToken NonClustered;
    public static StringToken Notification;
    public static StringToken PrimaryRole;
    public static StringToken RefreshMode;
    public static StringToken RejectValue;
    public static StringToken ScrollLocks;
    public static StringToken SecurityLog;
    public static StringToken SerdeMethod;
    public static StringToken Serializable;
    public static StringToken SessionUser;
    public static StringToken TextImageOn;
    public static StringToken Total_errors;
    public static StringToken TypeWarning;
    public static StringToken VarBinaryMax;
    public static StringToken WhereCurrent;
    public static StringToken AllowDupRow;
    public static StringToken AlterMessage;
    public static StringToken AlterService;
    public static StringToken AlterTrigger;
    public static StringToken Authorization;
    public static StringToken BuildReplica;
    public static StringToken Configuration;
    public static StringToken ContainsTable;
    public static StringToken CreateSchema;
    public static StringToken Cryptographic;
    public static StringToken DataDeletion;
    public static StringToken DatabaseName;
    public static StringToken DateFromParts;
    public static StringToken DelimitedText;
    public static StringToken DenyDatabase;
    public static StringToken DesiredState;
    public static StringToken DropAssembly;
    public static StringToken DropContract;
    public static StringToken DropDatabase;
    public static StringToken DropEndpoint;
    public static StringToken DropExisting;
    public static StringToken DropFunction;
    public static StringToken FileStreamOn;
    public static StringToken FilterColumn;
    public static StringToken FreeTextTable;
    public static StringToken HistoryTable;
    public static StringToken InputOptions;
    public static StringToken Max_precision;
    public static StringToken Pack_received;
    public static StringToken Packet_errors;
    public static StringToken ReadCommitted;
    public static StringToken RevokeServer;
    public static StringToken SchemaBinding;
    public static StringToken SharedMemory;
    public static StringToken SmallDateTime;
    public static StringToken Specification;
    public static StringToken ViewMetadata;
    public static StringToken XmlNamespaces;
    public static StringToken AlterAssembly;
    public static StringToken AlterDatabase;
    public static StringToken AlterEndpoint;
    public static StringToken AlterFunction;
    public static StringToken AlterInstance;
    public static StringToken Classification;
    public static StringToken CleanupPolicy;
    public static StringToken CreateDefault;
    public static StringToken CreateMessage;
    public static StringToken CreateService;
    public static StringToken CreateSynonym;
    public static StringToken CreateTrigger;
    public static StringToken DataRetention;
    public static StringToken DateTimeOffset;
    public static StringToken DdlSsbEvents;
    public static StringToken Default_langid;
    public static StringToken DefaultSchema;
    public static StringToken DirectoryName;
    public static StringToken DropProcedure;
    public static StringToken FormatOptions;
    public static StringToken GrantDatabase;
    public static StringToken IgnoreDupKey;
    public static StringToken IgnoreDupRow;
    public static StringToken KeyStoreType;
    public static StringToken LobCompaction;
    public static StringToken OpenDatasource;
    public static StringToken OperationMode;
    public static StringToken OutputOptions;
    public static StringToken RepeatableRead;
    public static StringToken RowTerminator;
    public static StringToken SecondaryRole;
    public static StringToken SecondaryType;
    public static StringToken ShardMapName;
    public static StringToken SortInTempDb;
    public static StringToken TransactionId;
    public static StringToken WorkloadGroup;
    public static StringToken AddRoleMember;
    public static StringToken AllowRowLocks;
    public static StringToken AlterProcedure;
    public static StringToken ApplicationLog;
    public static StringToken ChangeTracking;
    public static StringToken CreateAssembly;
    public static StringToken CreateContract;
    public static StringToken CreateDatabase;
    public static StringToken CreateEndpoint;
    public static StringToken CreateFunction;
    public static StringToken DdlRoleEvents;
    public static StringToken DdlRuleEvents;
    public static StringToken DdlTypeEvents;
    public static StringToken DdlUserEvents;
    public static StringToken DdlViewEvents;
    public static StringToken DropPlanGuide;
    public static StringToken DropStatistics;
    public static StringToken EncryptedValue;
    public static StringToken EncryptionType;
    public static StringToken IdentityInsert;
    public static StringToken LockEscalation;
    public static StringToken Max_connections;
    public static StringToken PropertyIntId;
    public static StringToken ReadUncommitted;
    public static StringToken RevokeDatabase;
    public static StringToken SequenceNumber;
    public static StringToken StatisticsOnly;
    public static StringToken AbortAfterWait;
    public static StringToken AllowPageLocks;
    public static StringToken AlterPlanGuide;
    public static StringToken AutomaticTuning;
    public static StringToken CheckExpiration;
    public static StringToken CreateProcedure;
    public static StringToken CreateXmlIndex;
    public static StringToken DataCompression;
    public static StringToken DatabaseDefault;
    public static StringToken DdlIndexEvents;
    public static StringToken DdlLoginEvents;
    public static StringToken DdlQueueEvents;
    public static StringToken DdlRouteEvents;
    public static StringToken DdlTableEvents;
    public static StringToken Def_sortorder_id;
    public static StringToken DefaultDatabase;
    public static StringToken DefaultLanguage;
    public static StringToken DropCertificate;
    public static StringToken DropRoleMember;
    public static StringToken ExternalMonitor;
    public static StringToken FieldTerminator;
    public static StringToken MemoryOptimized;
    public static StringToken Microsoftversion;
    public static StringToken RetentionPeriod;
    public static StringToken StringDelimiter;
    public static StringToken UniqueIdentifier;
    public static StringToken UseTypeDefault;
    public static StringToken AllowConnections;
    public static StringToken AlterCertificate;
    public static StringToken ColumnMasterKey;
    public static StringToken CompressionDelay;
    public static StringToken CreatePlanGuide;
    public static StringToken CreateStatistics;
    public static StringToken CurrentTimestamp;
    public static StringToken DdlSchemaEvents;
    public static StringToken DropMessageType;
    public static StringToken PlanForcingMode;
    public static StringToken PropertySetGuid;
    public static StringToken QuotedIdentifier;
    public static StringToken ReadCommittedLock;
    public static StringToken ServiceObjective;
    public static StringToken ShardMapManager;
    public static StringToken SortedDataReorg;
    public static StringToken SystemVersioning;
    public static StringToken UpdateStatistics;
    public static StringToken AllSparseColumns;
    public static StringToken AlterMessageType;
    public static StringToken ConnectionOptions;
    public static StringToken CreateCertificate;
    public static StringToken DdlDefaultEvents;
    public static StringToken DdlMessageEvents;
    public static StringToken DdlServiceEvents;
    public static StringToken DdlSynonymEvents;
    public static StringToken DdlTriggerEvents;
    public static StringToken DelayedDurability;
    public static StringToken DropLinkedServer;
    public static StringToken DropRemoteServer;
    public static StringToken NativeCompilation;
    public static StringToken ParameterSniffing;
    public static StringToken QueryCaptureMode;
    public static StringToken AlterLinkedServer;
    public static StringToken AlterRemoteServer;
    public static StringToken ColumnStoreArchive;
    public static StringToken CreateMessageType;
    public static StringToken DdlAssemblyEvents;
    public static StringToken DdlContractEvents;
    public static StringToken DdlEndpointEvents;
    public static StringToken DdlFunctionEvents;
    public static StringToken DropFulltextIndex;
    public static StringToken FileTableDirectory;
    public static StringToken FileTableNamespace;
    public static StringToken IncludeNullValues;
    public static StringToken MaxPlansPerQuery;
    public static StringToken MaxStorageSizeMb;
    public static StringToken RejectSampleValue;
    public static StringToken RemoteDataArchive;
    public static StringToken AlterFulltextIndex;
    public static StringToken CreateLinkedServer;
    public static StringToken CreateRemoteServer;
    public static StringToken CreateSpatialIndex;
    public static StringToken DdlPartitionEvents;
    public static StringToken DdlProcedureEvents;
    public static StringToken EnclaveComputations;
    public static StringToken JobTrackerLocation;
    public static StringToken PropertyDescription;
    public static StringToken StalePageDetection;
    public static StringToken TargetRecoveryTime;
    public static StringToken WaitAtLowPriority;
    public static StringToken ColumnEncryptionKey;
    public static StringToken CreateFulltextIndex;
    public static StringToken DdlGdrServerEvents;
    public static StringToken DdlPlanGuideEvents;
    public static StringToken DdlStatisticsEvents;
    public static StringToken DdlTableViewEvents;
    public static StringToken DropApplicationRole;
    public static StringToken DropFulltextCatalog;
    public static StringToken DropPartitionScheme;
    public static StringToken EnvironmentVariables;
    public static StringToken NonTransactedAccess;
    public static StringToken PersistentLogBuffer;
    public static StringToken RejectedRowLocation;
    public static StringToken AddServerRoleMember;
    public static StringToken AlterApplicationRole;
    public static StringToken AlterFulltextCatalog;
    public static StringToken AlterPartitionScheme;
    public static StringToken AutoCreateStatistics;
    public static StringToken DataConsistencyCheck;
    public static StringToken DdlCertificateEvents;
    public static StringToken DropExtendedProperty;
    public static StringToken FlushIntervalSeconds;
    public static StringToken SemanticKeyPhraseTable;
    public static StringToken StatisticsIncremental;
    public static StringToken StatisticsNoRecompute;
    public static StringToken ChangeTrackingContext;
    public static StringToken CompressAllRowGroups;
    public static StringToken CreateApplicationRole;
    public static StringToken CreateFulltextCatalog;
    public static StringToken CreatePartitionScheme;
    public static StringToken DdlGdrDatabaseEvents;
    public static StringToken DdlMessageTypeEvents;
    public static StringToken DdlServerLevelEvents;
    public static StringToken DropEventNotification;
    public static StringToken DropExtendedProcedure;
    public static StringToken DropPartitionFunction;
    public static StringToken DropServerRoleMember;
    public static StringToken IntervalLengthMinutes;
    public static StringToken KeyStoreProviderName;
    public static StringToken SemanticSimilarityTable;
    public static StringToken SizeBasedCleanupMode;
    public static StringToken AlterPartitionFunction;
    public static StringToken CreateExtendedProperty;
    public static StringToken DdlLinkedServerEvents;
    public static StringToken DdlRemoteServerEvents;
    public static StringToken DropLinkedServerLogin;
    public static StringToken HistoryRetentionPeriod;
    public static StringToken QueryOptimizerHotfixes;
    public static StringToken SpatialWindowMaxCells;
    public static StringToken BackupStorageRedundancy;
    public static StringToken CreateEventNotification;
    public static StringToken CreateExtendedProcedure;
    public static StringToken CreatePartitionFunction;
    public static StringToken DdlDatabaseLevelEvents;
    public static StringToken FederatedServiceAccount;
    public static StringToken ResourceManagerLocation;
    public static StringToken AlterAuthorizationServer;
    public static StringToken CreateLinkedServerLogin;
    public static StringToken DdlServerSecurityEvents;
    public static StringToken DropXmlSchemaCollection;
    public static StringToken FileTableCollateFilename;
    public static StringToken OperationTypeColumnName;
    public static StringToken TemporalHistoryRetention;
    public static StringToken TransactionIdColumnName;
    public static StringToken AlterXmlSchemaCollection;
    public static StringToken DataFlushIntervalSeconds;
    public static StringToken DdlApplicationRoleEvents;
    public static StringToken DdlFulltextCatalogEvents;
    public static StringToken DdlPartitionSchemeEvents;
    public static StringToken DropRemoteServiceBinding;
    public static StringToken OptimizeForSequentialKey;
    public static StringToken SequenceNumberColumnName;
    public static StringToken AlterAuthorizationDatabase;
    public static StringToken AlterRemoteServiceBinding;
    public static StringToken CreateXmlSchemaCollection;
    public static StringToken DdlDatabaseSecurityEvents;
    public static StringToken DdlExtendedPropertyEvents;
    public static StringToken AcceleratedDatabaseRecovery;
    public static StringToken CreateRemoteServiceBinding;
    public static StringToken DdlEventNotificationEvents;
    public static StringToken DdlExtendedProcedureEvents;
    public static StringToken DdlPartitionFunctionEvents;
    public static StringToken LegacyCardinalityEstimation;
    public static StringToken DdlLinkedServerLoginEvents;
    public static StringToken ForceFailoverAllowDataLoss;
    public static StringToken SemanticSimilarityDetailsTable;
    public static StringToken DdlAuthorizationServerEvents;
    public static StringToken OperationTypeDescColumnName;
    public static StringToken DdlXmlSchemaCollectionEvents;
    public static StringToken DdlAuthorizationDatabaseEvents;
    public static StringToken DdlRemoteServiceBindingEvents;
    public static StringToken PersistentVersionStoreFilegroup;
    public static StringToken AllowEncryptedValueModifications;
    public static StringToken FileTablePrimaryKeyConstraintName;
    public static StringToken FileTableFullpathUniqueConstraintName;
    public static StringToken FileTableStreamIdUniqueConstraintName;
}
internal static class Microsoft.SqlServer.Management.SqlParser.Common.StringTokenLookup : object {
    public static int MinTokenValue;
    public static int MaxTokenValue;
    public static StringToken Find(string buffer);
    public static StringToken Find(string buffer, int startIndex, int length);
    private static StringToken Find_Len1(string buffer, int startIndex);
    private static StringToken Find_Len2(string buffer, int startIndex);
    private static StringToken Find_Len3(string buffer, int startIndex);
    private static StringToken Find_Len4(string buffer, int startIndex);
    private static StringToken Find_Len5(string buffer, int startIndex);
    private static StringToken Find_Len6(string buffer, int startIndex);
    private static StringToken Find_Len7(string buffer, int startIndex);
    private static StringToken Find_Len8(string buffer, int startIndex);
    private static StringToken Find_Len9(string buffer, int startIndex);
    private static StringToken Find_Len10(string buffer, int startIndex);
    private static StringToken Find_Len11(string buffer, int startIndex);
    private static StringToken Find_Len12(string buffer, int startIndex);
    private static StringToken Find_Len13(string buffer, int startIndex);
    private static StringToken Find_Len14(string buffer, int startIndex);
    private static StringToken Find_Len15(string buffer, int startIndex);
    private static StringToken Find_Len16(string buffer, int startIndex);
    private static StringToken Find_Len17(string buffer, int startIndex);
    private static StringToken Find_Len18(string buffer, int startIndex);
    private static StringToken Find_Len19(string buffer, int startIndex);
    private static StringToken Find_Len20(string buffer, int startIndex);
    private static StringToken Find_Len21(string buffer, int startIndex);
    private static StringToken Find_Len22(string buffer, int startIndex);
    private static StringToken Find_Len23(string buffer, int startIndex);
    private static StringToken Find_Len24(string buffer, int startIndex);
    private static StringToken Find_Len25(string buffer, int startIndex);
    private static StringToken Find_Len26(string buffer, int startIndex);
    private static StringToken Find_Len27(string buffer, int startIndex);
    private static StringToken Find_Len28(string buffer, int startIndex);
    private static StringToken Find_Len29(string buffer, int startIndex);
    private static StringToken Find_Len30(string buffer, int startIndex);
    private static StringToken Find_Len31(string buffer, int startIndex);
    private static StringToken Find_Len32(string buffer, int startIndex);
    private static StringToken Find_Len33(string buffer, int startIndex);
    private static StringToken Find_Len34(string buffer, int startIndex);
    private static StringToken Find_Len35(string buffer, int startIndex);
    private static StringToken Find_Len37(string buffer, int startIndex);
    private static StringToken Find_Len41(string buffer, int startIndex);
}
public enum Microsoft.SqlServer.Management.SqlParser.Common.TransactSqlVersion : Enum {
    public int value__;
    public static TransactSqlVersion Current;
    public static TransactSqlVersion Version105;
    public static TransactSqlVersion Version110;
    public static TransactSqlVersion Version120;
    public static TransactSqlVersion Version130;
    public static TransactSqlVersion Version140;
    public static TransactSqlVersion Version150;
    public static TransactSqlVersion Version160;
    public static TransactSqlVersion Version170;
    public static TransactSqlVersion Azure;
}
public enum Microsoft.SqlServer.Management.SqlParser.Diagnostics.CounterId : Enum {
    public byte value__;
    public static CounterId Min;
    public static CounterId Max;
}
public static class Microsoft.SqlServer.Management.SqlParser.Diagnostics.Counters : object {
    private static int CounterLo;
    private static int CounterHi;
    private static int CounterIdCount;
    private static PerfWriterCollection perfWriters;
    private static Format format;
    private static UInt32[] idCounters;
    private static Dictionary`2<Type, UInt32> ctorCounters;
    private static bool isInitialized;
    private static string TextPattern;
    public static Format OutputFormat { get; public set; }
    public static IList`1<TextWriter> PerfWriters { get; }
    private static Counters();
    public static Format get_OutputFormat();
    public static void set_OutputFormat(Format value);
    public static IList`1<TextWriter> get_PerfWriters();
    public static void Begin();
    public static void Finish();
    [ConditionalAttribute("INCLUDE_COUNTERS")]
internal static void Increment(CounterId counterId);
    [ConditionalAttribute("INCLUDE_COUNTERS")]
internal static void Increment(object instance);
    [ConditionalAttribute("INCLUDE_COUNTERS")]
internal static void Increment(Type type);
    [ConditionalAttribute("INCLUDE_COUNTERS")]
private static void Reset();
    [ConditionalAttribute("INCLUDE_COUNTERS")]
private static void WriteAsXml(TextWriter writer, IDictionary`2<string, UInt32> results);
    [ConditionalAttribute("INCLUDE_COUNTERS")]
private static void WriteAsText(TextWriter writer, IDictionary`2<string, UInt32> results);
    [ConditionalAttribute("INCLUDE_COUNTERS")]
private static void WriteAsCsv(TextWriter writer, IDictionary`2<string, UInt32> results);
    private static IDictionary`2<string, UInt32> MergeCounters();
}
public enum Microsoft.SqlServer.Management.SqlParser.Diagnostics.Format : Enum {
    public int value__;
    public static Format Xml;
    public static Format Text;
    public static Format Csv;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.SqlParser.Diagnostics.PerfWriterCollection : StringWriter {
    private List`1<TextWriter> container;
    public TextWriter Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public virtual void Write(char c);
    public virtual void Write(string val);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Flush();
    public sealed virtual int IndexOf(TextWriter item);
    public sealed virtual void Insert(int index, TextWriter item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TextWriter get_Item(int index);
    public sealed virtual void set_Item(int index, TextWriter value);
    public sealed virtual void Add(TextWriter item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TextWriter item);
    public sealed virtual void CopyTo(TextWriter[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(TextWriter item);
    public sealed virtual IEnumerator`1<TextWriter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.SqlServer.Management.SqlParser.Diagnostics.TimerId : Enum {
    public byte value__;
    public static TimerId None;
    public static TimerId Root;
    public static TimerId Parse;
    public static TimerId Bind;
    public static TimerId Lexer;
    public static TimerId RangeMin_Refresh;
    public static TimerId Refresh_Server;
    public static TimerId Refresh_Database;
    public static TimerId Refresh_Schema;
    public static TimerId Refresh_Table;
    public static TimerId RangeMax_Refresh;
    public static TimerId Serialize_CodeSerialize;
    public static TimerId Serialize_Driver;
    public static TimerId Serialize_MetadataGen;
    public static TimerId Serialize_TypeCompaction;
    public static TimerId Serialize_CodeDomGen;
}
public static class Microsoft.SqlServer.Management.SqlParser.Diagnostics.Timers : object {
    private static PerfWriterCollection perfWriters;
    private static Format format;
    private static int maxRecordCount;
    private static int currentRecordCount;
    private static Record[] records;
    private static long startTimestamp;
    private static long endTimestamp;
    private static bool isInitialized;
    public static Format OutputFormat { get; public set; }
    public static IList`1<TextWriter> PerfWriters { get; }
    public static Format get_OutputFormat();
    public static void set_OutputFormat(Format value);
    public static IList`1<TextWriter> get_PerfWriters();
    public static void Begin(int recordCount);
    public static void Finish();
    [ConditionalAttribute("INCLUDE_TIMERS")]
internal static void Start(TimerId timerId);
    [ConditionalAttribute("INCLUDE_TIMERS")]
internal static void Stop(TimerId timerId);
    [ConditionalAttribute("INCLUDE_TIMERS")]
private static void Reset();
    private static Timer GenerateTimers(int recordCount);
}
internal static class Microsoft.SqlServer.Management.SqlParser.Diagnostics.TraceHelper : object {
    private static string ComponentName;
    private static TraceContext traceContext;
    public static TraceContext TraceContext { get; }
    private static TraceHelper();
    public static TraceContext get_TraceContext();
}
public class Microsoft.SqlServer.Management.SqlParser.Intellisense.Declaration : object {
    private IMetadataObject metadataObject;
    private IMetadataDisplayInfoProvider displayInfoProvider;
    private string title;
    public string Title { get; }
    public string Description { get; }
    public string DatabaseQualifiedName { get; }
    public DeclarationType Type { get; }
    internal Declaration(IMetadataObject metadataObject, IMetadataDisplayInfoProvider displayInfoProvider);
    public string get_Title();
    public string get_Description();
    public string get_DatabaseQualifiedName();
    public DeclarationType get_Type();
    public virtual string ToString();
    public sealed virtual int CompareTo(Declaration other);
}
public enum Microsoft.SqlServer.Management.SqlParser.Intellisense.DeclarationType : Enum {
    public int value__;
    public static DeclarationType ApplicationRole;
    public static DeclarationType AsymmetricKey;
    public static DeclarationType BuiltInFunction;
    public static DeclarationType Certificate;
    public static DeclarationType CheckConstraint;
    public static DeclarationType Collation;
    public static DeclarationType Column;
    public static DeclarationType Credential;
    public static DeclarationType CursorDataType;
    public static DeclarationType CursorParameter;
    public static DeclarationType CursorVariable;
    public static DeclarationType Database;
    public static DeclarationType DatabaseDdlTrigger;
    public static DeclarationType DatabasePermission;
    public static DeclarationType DatabaseRole;
    public static DeclarationType DatePart;
    public static DeclarationType DefaultConstraint;
    public static DeclarationType DmlTrigger;
    public static DeclarationType ExecutionContext;
    public static DeclarationType ExtendedStoredProcedure;
    public static DeclarationType FileGroup;
    public static DeclarationType ForeignKeyColumn;
    public static DeclarationType ForeignKeyConstraint;
    public static DeclarationType IndexedColumn;
    public static DeclarationType JsonValueType;
    public static DeclarationType JsonNullQualifier;
    public static DeclarationType Login;
    public static DeclarationType PartitionScheme;
    public static DeclarationType PrimaryKeyConstraint;
    public static DeclarationType RelationalIndex;
    public static DeclarationType ScalarExpression;
    public static DeclarationType ScalarDataType;
    public static DeclarationType ScalarParameter;
    public static DeclarationType ScalarValuedFunction;
    public static DeclarationType ScalarVariable;
    public static DeclarationType Schema;
    public static DeclarationType Server;
    public static DeclarationType ServerDdlTrigger;
    public static DeclarationType SpatialIndex;
    public static DeclarationType Statistics;
    public static DeclarationType StoredProcedure;
    public static DeclarationType Synonym;
    public static DeclarationType SystemDataType;
    public static DeclarationType Table;
    public static DeclarationType TableDataType;
    public static DeclarationType TableParameter;
    public static DeclarationType TableValuedFunction;
    public static DeclarationType TableVariable;
    public static DeclarationType User;
    public static DeclarationType UdtDataMember;
    public static DeclarationType UdtMethod;
    public static DeclarationType UniqueConstraint;
    public static DeclarationType UserDefinedAggregate;
    public static DeclarationType UserDefinedClrType;
    public static DeclarationType UserDefinedDataType;
    public static DeclarationType UserDefinedTableType;
    public static DeclarationType View;
    public static DeclarationType VirtualTable;
    public static DeclarationType XmlDataTypeMethod;
    public static DeclarationType XmlIndex;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.Intellisense.Resolver : object {
    private static IList`1<Declaration> EmptyDeclarationList;
    private static Resolver();
    public static IList`1<Declaration> FindCompletions(ParseResult parseResult, int line, int col, IMetadataDisplayInfoProvider displayInfoProvider);
    public static CodeObjectQuickInfo GetQuickInfo(ParseResult parseResult, int line, int col, IMetadataDisplayInfoProvider displayInfoProvider);
    public static BlockInformation GetBlockInformation(ParseResult parseResult, int line, int col);
    public static IEnumerable`1<Region> FindRegionObjects(ParseResult parseResult);
    public static List`1<MethodHelpText> FindMethods(ParseResult parseResult, int line, int col, IMetadataDisplayInfoProvider displayInfoProvider);
    public static MethodNameAndParamLocations GetMethodNameAndParams(ParseResult parseResult, int line, int column, IMetadataDisplayInfoProvider displayInfoProvider);
    public static PairMatch FindPairMatch(ParseResult parseResult, int line, int col);
    public static BlockInformation FindBreakPointInformation(ParseResult parseResult, int line, int col);
    private static BlockInformation ExtractBPLocation(SqlCodeObject codeObject, LexLocation lexLocation);
}
[AttributeUsageAttribute("128")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.AbstractAttribute : Attribute {
    private string propertyName;
    public string PropertyName { get; }
    public InheritanceType InheritanceType { get; }
    public AbstractAttribute(string propertyName);
    public sealed virtual string get_PropertyName();
    public sealed virtual InheritanceType get_InheritanceType();
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.ActivationOrder : Enum {
    public int value__;
    public static ActivationOrder None;
    public static ActivationOrder First;
    public static ActivationOrder Last;
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.AsTypeAttribute : Attribute {
    private string propertyName;
    private Type type;
    public string PropertyName { get; }
    public Type Type { get; }
    public InheritanceType InheritanceType { get; }
    public AsTypeAttribute(Type type);
    public AsTypeAttribute(string propertyName, Type type);
    public sealed virtual string get_PropertyName();
    public Type get_Type();
    public sealed virtual InheritanceType get_InheritanceType();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.AsTypePropertyValueExpr : PropertyValueExpr {
    private Type type;
    public Type Type { get; }
    public AsTypePropertyValueExpr(Type type);
    public Type get_Type();
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.CallableModuleType : Enum {
    public int value__;
    public static CallableModuleType ExtendedStoredProcedure;
    public static CallableModuleType ScalarFunction;
    public static CallableModuleType StoredProcedure;
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ChildAttribute : Attribute {
    private string propertyName;
    public string PropertyName { get; }
    public InheritanceType InheritanceType { get; }
    public ChildAttribute(string propertyName);
    public sealed virtual string get_PropertyName();
    public sealed virtual InheritanceType get_InheritanceType();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.CollationInfo : object {
    private static string DefaultCollationName;
    private static object syncObj;
    private string m_collationName;
    private IComparer`1<string> m_comparer;
    private IEqualityComparer`1<string> m_equalityComparer;
    private CompareInfo m_compareInfo;
    private CompareOptions m_compareOptions;
    private int m_lcid;
    public static CollationInfo Default { get; }
    public static CollationInfo Ordinal { get; }
    public static CollationInfo OrdinalIgnoreCase { get; }
    public static IMetadataCollection`1<ICollation> Collations { get; }
    public int LCID { get; }
    public IComparer`1<string> Comparer { get; }
    public IEqualityComparer`1<string> EqualityComparer { get; }
    public string Name { get; }
    private CollationInfo(string name, StringComparer stringComparer, CompareOptions compareOptions);
    private CollationInfo(string name, int lcid, CultureInfo cultureInfo, CompareOptions compareOptions);
    private static CollationInfo();
    public static CollationInfo get_Default();
    public static CollationInfo get_Ordinal();
    public static CollationInfo get_OrdinalIgnoreCase();
    public static IMetadataCollection`1<ICollation> get_Collations();
    public static CollationInfo GetCollationInfo(string collationName);
    public static CollationInfo GetCollationInfo(ICollation collation);
    public static CollationInfo GetCollationInfo(int lcid, CompareOptions compareOptions);
    public int get_LCID();
    public IComparer`1<string> get_Comparer();
    public IEqualityComparer`1<string> get_EqualityComparer();
    public bool IsPrefix(string source, string prefix);
    public virtual string ToString();
    public sealed virtual string get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    [DebuggerHiddenAttribute]
private static CultureInfo TryGetCultureInfo(int id);
    private static CollationInfo GetCollationInfoInternal(string collationName);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.CollationInfo/<GetCollationInfoCollection>d__36")]
private static IEnumerable`1<ICollation> GetCollationInfoCollection();
    [DebuggerHiddenAttribute]
private static void PopulateStringComparerLookups(Dictionary`2<int, StringComparer> csComparers, Dictionary`2<int, StringComparer> ciComparers);
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.CollectionTypeInfo : TypeInfo {
    private bool isOrdered;
    private TypeInfo elementType;
    public TypeInfo ElementType { get; }
    public bool IsOrdered { get; }
    public CollectionTypeInfo(Type type, int id, bool isOrdered);
    public void SetElementType(TypeInfo elementType);
    public TypeInfo get_ElementType();
    public bool get_IsOrdered();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.ComputedColumnInfo : object {
    private bool m_isPersisted;
    private string m_text;
    public bool IsPersisted { get; }
    public string Text { get; }
    public ComputedColumnInfo(string text, bool isPersisted);
    public bool get_IsPersisted();
    public string get_Text();
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ConstantAttribute : Attribute {
    private string propertyName;
    private object value;
    private InheritanceType inheritanceType;
    public string PropertyName { get; }
    public object Value { get; }
    public InheritanceType InheritanceType { get; }
    public ConstantAttribute(object value);
    public ConstantAttribute(InheritanceType inheritanceType, object value);
    public ConstantAttribute(string propertyName, object value);
    public ConstantAttribute(InheritanceType inheritanceType, string propertyName, object value);
    public sealed virtual string get_PropertyName();
    public object get_Value();
    public sealed virtual InheritanceType get_InheritanceType();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.ConstantPropertyValueExpr : PropertyValueExpr {
    private object value;
    public object Value { get; }
    public ConstantPropertyValueExpr(object value);
    public object get_Value();
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.ConstraintType : Enum {
    public int value__;
    public static ConstraintType Check;
    public static ConstraintType ForeignKey;
    public static ConstraintType PrimaryKey;
    public static ConstraintType Unique;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.DatabasePermissionType : Enum {
    public int value__;
    public static DatabasePermissionType AdministerDatabaseBulkOperations;
    public static DatabasePermissionType Alter;
    public static DatabasePermissionType AlterAnyApplicationRole;
    public static DatabasePermissionType AlterAnyAssembly;
    public static DatabasePermissionType AlterAnyAsymmetricKey;
    public static DatabasePermissionType AlterAnyCertificate;
    public static DatabasePermissionType AlterAnyColumnEncryptionKey;
    public static DatabasePermissionType AlterAnyColumnMasterKey;
    public static DatabasePermissionType AlterAnyContract;
    public static DatabasePermissionType AlterAnyDatabaseAudit;
    public static DatabasePermissionType AlterAnyDatabaseDdlTrigger;
    public static DatabasePermissionType AlterAnyDatabaseEventNotification;
    public static DatabasePermissionType AlterAnyDatabaseEventSession;
    public static DatabasePermissionType AlterAnyDatabaseEventSessionAddEvent;
    public static DatabasePermissionType AlterAnyDatabaseEventSessionAddTarget;
    public static DatabasePermissionType AlterAnyDatabaseEventSessionDisable;
    public static DatabasePermissionType AlterAnyDatabaseEventSessionDropEvent;
    public static DatabasePermissionType AlterAnyDatabaseEventSessionDropTarget;
    public static DatabasePermissionType AlterAnyDatabaseEventSessionEnable;
    public static DatabasePermissionType AlterAnyDatabaseEventSessionOption;
    public static DatabasePermissionType AlterAnyDatabaseScopedConfiguration;
    public static DatabasePermissionType AlterAnyDataspace;
    public static DatabasePermissionType AlterAnyExternalDataSource;
    public static DatabasePermissionType AlterAnyExternalFileFormat;
    public static DatabasePermissionType AlterAnyExternalJob;
    public static DatabasePermissionType AlterAnyExternalLanguage;
    public static DatabasePermissionType AlterAnyExternalLibrary;
    public static DatabasePermissionType AlterAnyExternalMirror;
    public static DatabasePermissionType AlterAnyExternalStream;
    public static DatabasePermissionType AlterAnyFulltextCatalog;
    public static DatabasePermissionType AlterAnyMask;
    public static DatabasePermissionType AlterAnyMessageType;
    public static DatabasePermissionType AlterAnyRemoteServiceBinding;
    public static DatabasePermissionType AlterAnyRole;
    public static DatabasePermissionType AlterAnyRoute;
    public static DatabasePermissionType AlterAnySchema;
    public static DatabasePermissionType AlterAnySecurityPolicy;
    public static DatabasePermissionType AlterAnySensitivityClassification;
    public static DatabasePermissionType AlterAnyService;
    public static DatabasePermissionType AlterAnySymmetricKey;
    public static DatabasePermissionType AlterAnyUser;
    public static DatabasePermissionType AlterLedger;
    public static DatabasePermissionType AlterLedgerConfiguration;
    public static DatabasePermissionType Authenticate;
    public static DatabasePermissionType BackupDatabase;
    public static DatabasePermissionType BackupLog;
    public static DatabasePermissionType Checkpoint;
    public static DatabasePermissionType Connect;
    public static DatabasePermissionType ConnectReplication;
    public static DatabasePermissionType Control;
    public static DatabasePermissionType CreateAggregate;
    public static DatabasePermissionType CreateAnyDatabaseEventSession;
    public static DatabasePermissionType CreateAssembly;
    public static DatabasePermissionType CreateAsymmetricKey;
    public static DatabasePermissionType CreateCertificate;
    public static DatabasePermissionType CreateContract;
    public static DatabasePermissionType CreateDatabase;
    public static DatabasePermissionType CreateDatabaseDdlEventNotification;
    public static DatabasePermissionType CreateDefault;
    public static DatabasePermissionType CreateExternalLanguage;
    public static DatabasePermissionType CreateExternalLibrary;
    public static DatabasePermissionType CreateFulltextCatalog;
    public static DatabasePermissionType CreateFunction;
    public static DatabasePermissionType CreateMessageType;
    public static DatabasePermissionType CreateProcedure;
    public static DatabasePermissionType CreateQueue;
    public static DatabasePermissionType CreateRemoteServiceBinding;
    public static DatabasePermissionType CreateRole;
    public static DatabasePermissionType CreateRoute;
    public static DatabasePermissionType CreateRule;
    public static DatabasePermissionType CreateSchema;
    public static DatabasePermissionType CreateSequence;
    public static DatabasePermissionType CreateService;
    public static DatabasePermissionType CreateSymmetricKey;
    public static DatabasePermissionType CreateSynonym;
    public static DatabasePermissionType CreateTable;
    public static DatabasePermissionType CreateType;
    public static DatabasePermissionType CreateUser;
    public static DatabasePermissionType CreateView;
    public static DatabasePermissionType CreateXmlSchemaCollection;
    public static DatabasePermissionType Delete;
    public static DatabasePermissionType DropAnyDatabaseEventSession;
    public static DatabasePermissionType EnableLedger;
    public static DatabasePermissionType Execute;
    public static DatabasePermissionType ExecuteAnyExternalEndpoint;
    public static DatabasePermissionType ExecuteAnyExternalScript;
    public static DatabasePermissionType Impersonate;
    public static DatabasePermissionType Insert;
    public static DatabasePermissionType KillDatabaseConnection;
    public static DatabasePermissionType Receive;
    public static DatabasePermissionType References;
    public static DatabasePermissionType Select;
    public static DatabasePermissionType Send;
    public static DatabasePermissionType Showplan;
    public static DatabasePermissionType SubscribeQueryNotifications;
    public static DatabasePermissionType TakeOwnership;
    public static DatabasePermissionType Unmask;
    public static DatabasePermissionType Update;
    public static DatabasePermissionType ViewAnyColumnEncryptionKeyDefinition;
    public static DatabasePermissionType ViewAnyColumnMasterKeyDefinition;
    public static DatabasePermissionType ViewAnySensitivityClassification;
    public static DatabasePermissionType ViewChangeTracking;
    public static DatabasePermissionType ViewCryptographicallySecuredDefinition;
    public static DatabasePermissionType ViewDatabasePerformanceState;
    public static DatabasePermissionType ViewDatabaseSecurityAudit;
    public static DatabasePermissionType ViewDatabaseSecurityState;
    public static DatabasePermissionType ViewDatabaseState;
    public static DatabasePermissionType ViewDefinition;
    public static DatabasePermissionType ViewLedgerContent;
    public static DatabasePermissionType ViewPerformanceDefinition;
    public static DatabasePermissionType ViewSecurityDefinition;
}
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.DatabaseRelativeIdGenerator : MetadataIdGenerator {
    private IDatabaseObject sourceRoot;
    private IDatabaseObject targetRoot;
    public DatabaseRelativeIdGenerator(IDatabaseObject sourceRoot, IDatabaseObject targetRoot);
    protected virtual List`1<MetadataObjectSelector> GetObjectSelectors(IMetadataObject obj);
    private bool AreEqual(IMetadataObject obj1, IMetadataObject obj2);
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.DataTypeArgSpec : object {
    public string Name;
    public int MinValue;
    public int MaxValue;
    public int DefaultValue;
    private string objectStr;
    private static DataTypeArgSpec numericPrecision;
    private static DataTypeArgSpec numericScale;
    private static DataTypeArgSpec timeScale;
    private static DataTypeArgSpec doubleByteLength;
    private static DataTypeArgSpec singleByteLength;
    public static DataTypeArgSpec NumericPrecision { get; }
    public static DataTypeArgSpec NumericScale { get; }
    public static DataTypeArgSpec TimeScale { get; }
    public static DataTypeArgSpec DoubleByteLength { get; }
    public static DataTypeArgSpec SingleByteLength { get; }
    private DataTypeArgSpec(int minValue, int maxValue, int defaultValue, string argName);
    private static DataTypeArgSpec();
    public virtual string ToString();
    public static DataTypeArgSpec get_NumericPrecision();
    public static DataTypeArgSpec get_NumericScale();
    public static DataTypeArgSpec get_TimeScale();
    public static DataTypeArgSpec get_DoubleByteLength();
    public static DataTypeArgSpec get_SingleByteLength();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.DataTypeSpec : object {
    private SqlDataType m_sqlDataType;
    private string m_name;
    private bool m_requireLength;
    private bool m_argIsScale;
    private DataTypeArgSpec m_argSpec1;
    private DataTypeArgSpec m_argSpec2;
    public SqlDataType SqlDataType { get; }
    public string Name { get; }
    public bool RequireLength { get; }
    public bool ArgIsScale { get; }
    public DataTypeArgSpec ArgSpec1 { get; }
    public DataTypeArgSpec ArgSpec2 { get; }
    public static DataTypeSpec BigInt { get; }
    public static DataTypeSpec Binary { get; }
    public static DataTypeSpec Bit { get; }
    public static DataTypeSpec Char { get; }
    public static DataTypeSpec Date { get; }
    public static DataTypeSpec DateTime { get; }
    public static DataTypeSpec DateTime2 { get; }
    public static DataTypeSpec DateTimeOffset { get; }
    public static DataTypeSpec Decimal { get; }
    public static DataTypeSpec Float { get; }
    public static DataTypeSpec Geography { get; }
    public static DataTypeSpec Geometry { get; }
    public static DataTypeSpec HierarchyId { get; }
    public static DataTypeSpec Image { get; }
    public static DataTypeSpec Int { get; }
    public static DataTypeSpec Money { get; }
    public static DataTypeSpec NChar { get; }
    public static DataTypeSpec NText { get; }
    public static DataTypeSpec Numeric { get; }
    public static DataTypeSpec NVarChar { get; }
    public static DataTypeSpec NVarCharMax { get; }
    public static DataTypeSpec Real { get; }
    public static DataTypeSpec SmallDateTime { get; }
    public static DataTypeSpec SmallInt { get; }
    public static DataTypeSpec SmallMoney { get; }
    public static DataTypeSpec SysName { get; }
    public static DataTypeSpec Text { get; }
    public static DataTypeSpec Time { get; }
    public static DataTypeSpec Timestamp { get; }
    public static DataTypeSpec TinyInt { get; }
    public static DataTypeSpec UniqueIdentifier { get; }
    public static DataTypeSpec VarBinary { get; }
    public static DataTypeSpec VarBinaryMax { get; }
    public static DataTypeSpec VarChar { get; }
    public static DataTypeSpec VarCharMax { get; }
    public static DataTypeSpec Variant { get; }
    public static DataTypeSpec Xml { get; }
    public static DataTypeSpec Json { get; }
    public static IEnumerable`1<DataTypeSpec> AllDataTypes { get; }
    private DataTypeSpec(SqlDataType sqlDataType, string name, bool requireLength, bool argIsScale);
    private DataTypeSpec(SqlDataType sqlDataType, string name, bool requireLength, bool argIsScale, DataTypeArgSpec argSpec1);
    private DataTypeSpec(SqlDataType sqlDataType, string name, bool requireLength, bool argIsScale, DataTypeArgSpec argSpec1, DataTypeArgSpec argSpec2);
    public static DataTypeSpec GetDataTypeSpec(string typeName);
    public SqlDataType get_SqlDataType();
    public string get_Name();
    public bool get_RequireLength();
    public bool get_ArgIsScale();
    public DataTypeArgSpec get_ArgSpec1();
    public DataTypeArgSpec get_ArgSpec2();
    public static DataTypeSpec get_BigInt();
    public static DataTypeSpec get_Binary();
    public static DataTypeSpec get_Bit();
    public static DataTypeSpec get_Char();
    public static DataTypeSpec get_Date();
    public static DataTypeSpec get_DateTime();
    public static DataTypeSpec get_DateTime2();
    public static DataTypeSpec get_DateTimeOffset();
    public static DataTypeSpec get_Decimal();
    public static DataTypeSpec get_Float();
    public static DataTypeSpec get_Geography();
    public static DataTypeSpec get_Geometry();
    public static DataTypeSpec get_HierarchyId();
    public static DataTypeSpec get_Image();
    public static DataTypeSpec get_Int();
    public static DataTypeSpec get_Money();
    public static DataTypeSpec get_NChar();
    public static DataTypeSpec get_NText();
    public static DataTypeSpec get_Numeric();
    public static DataTypeSpec get_NVarChar();
    public static DataTypeSpec get_NVarCharMax();
    public static DataTypeSpec get_Real();
    public static DataTypeSpec get_SmallDateTime();
    public static DataTypeSpec get_SmallInt();
    public static DataTypeSpec get_SmallMoney();
    public static DataTypeSpec get_SysName();
    public static DataTypeSpec get_Text();
    public static DataTypeSpec get_Time();
    public static DataTypeSpec get_Timestamp();
    public static DataTypeSpec get_TinyInt();
    public static DataTypeSpec get_UniqueIdentifier();
    public static DataTypeSpec get_VarBinary();
    public static DataTypeSpec get_VarBinaryMax();
    public static DataTypeSpec get_VarChar();
    public static DataTypeSpec get_VarCharMax();
    public static DataTypeSpec get_Variant();
    public static DataTypeSpec get_Xml();
    public static DataTypeSpec get_Json();
    public static IEnumerable`1<DataTypeSpec> get_AllDataTypes();
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.DuplicateAttribute : Attribute {
    private string propertyName;
    private string duplicateName;
    public string DuplicateName { get; }
    public string PropertyName { get; }
    public InheritanceType InheritanceType { get; }
    public DuplicateAttribute(string duplicateName);
    public DuplicateAttribute(string propertyName, string duplicateName);
    public string get_DuplicateName();
    public sealed virtual string get_PropertyName();
    public sealed virtual InheritanceType get_InheritanceType();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.DuplicatePropertyValueExpr : PropertyValueExpr {
    private string name;
    public string Name { get; }
    public DuplicatePropertyValueExpr(string name);
    public string get_Name();
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.ExecutionContextType : Enum {
    public int value__;
    public static ExecutionContextType Caller;
    public static ExecutionContextType ExecuteAsLogin;
    public static ExecutionContextType ExecuteAsUser;
    public static ExecutionContextType Owner;
    public static ExecutionContextType Self;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.ForeignKeyAction : Enum {
    public int value__;
    public static ForeignKeyAction NoAction;
    public static ForeignKeyAction Cascade;
    public static ForeignKeyAction SetDefault;
    public static ForeignKeyAction SetNull;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.GridDensity : Enum {
    public int value__;
    public static GridDensity Low;
    public static GridDensity Medium;
    public static GridDensity High;
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IApplicationRole {
    [ReadWriteAttribute]
[ReferenceAttribute]
public ISchema DefaultSchema { get; }
    public abstract virtual ISchema get_DefaultSchema();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IAsymmetricKey {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IBuiltInFunction {
    [ReadOnlyAttribute]
public int MinNumberOfArgs { get; }
    [ReadOnlyAttribute]
public int MaxNumberOfArgs { get; }
    [ReadOnlyAttribute]
public bool IsVarArg { get; }
    [ReadOnlyAttribute]
public bool IsDatePartFunction { get; }
    [ReadOnlyAttribute]
public bool IsGlobalVariable { get; }
    public abstract virtual int get_MinNumberOfArgs();
    public abstract virtual int get_MaxNumberOfArgs();
    public abstract virtual bool get_IsVarArg();
    public abstract virtual bool get_IsDatePartFunction();
    public abstract virtual bool get_IsGlobalVariable();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IBuiltInFunction2 {
    [ReadOnlyAttribute]
public bool HasJsonNullQualifier { get; }
    [ReadOnlyAttribute]
public string VarArgParamName { get; }
    public abstract virtual bool get_HasJsonNullQualifier();
    public abstract virtual string get_VarArgParamName();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule {
    [AbstractAttribute]
public CallableModuleType ModuleType { get; }
    [AbstractAttribute]
public IScalarDataType ReturnType { get; }
    public abstract virtual CallableModuleType get_ModuleType();
    public abstract virtual IScalarDataType get_ReturnType();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICertificate {
}
[MetadataAttribute]
[ConstantAttribute("Type", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint {
    [ReadWriteAttribute]
public bool IsEnabled { get; }
    [ReadWriteAttribute]
public bool IsChecked { get; }
    [ReadWriteAttribute]
public bool NotForReplication { get; }
    [ReadWriteAttribute]
public string Text { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual bool get_IsChecked();
    public abstract virtual bool get_NotForReplication();
    public abstract virtual string get_Text();
}
[MetadataAttribute("1")]
[ReadOnlyAttribute("Name")]
[ValueAttribute("1", "Name")]
[ConstantAttribute("1", "IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("1", "BaseSystemDataType", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType {
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public string AssemblyName { get; }
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public string ClassName { get; }
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public bool IsBinaryOrdered { get; }
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public bool IsComVisible { get; }
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public bool IsNullable { get; }
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public IMetadataCollection`1<IUdtMethod> Methods { get; }
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public IMetadataCollection`1<IUdtDataMember> DataMembers { get; }
    public abstract virtual string get_AssemblyName();
    public abstract virtual string get_ClassName();
    public abstract virtual bool get_IsBinaryOrdered();
    public abstract virtual bool get_IsComVisible();
    public abstract virtual bool get_IsNullable();
    public abstract virtual IMetadataCollection`1<IUdtMethod> get_Methods();
    public abstract virtual IMetadataCollection`1<IUdtDataMember> get_DataMembers();
}
[MetadataAttribute("1")]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICollation {
}
[MetadataAttribute]
[ReadOnlyAttribute("Name")]
[ConstantAttribute("ScalarType", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn {
    [ReadOnlyAttribute]
[ParentAttribute]
public ITabular Parent { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ICollation Collation { get; }
    [ReadWriteAttribute]
public ComputedColumnInfo ComputedColumnInfo { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IDefaultConstraint DefaultValue { get; }
    [ReadWriteAttribute]
public IdentityColumnInfo IdentityColumnInfo { get; }
    [ReadWriteAttribute]
public bool InPrimaryKey { get; }
    [ReadWriteAttribute]
public bool RowGuidCol { get; }
    [ReadWriteAttribute]
public bool IsSparse { get; }
    [ReadWriteAttribute]
public bool IsColumnSet { get; }
    [ReadWriteAttribute]
public bool IsGeneratedAlwaysAsRowStart { get; }
    [ReadWriteAttribute]
public bool IsGeneratedAlwaysAsRowEnd { get; }
    [ReadWriteAttribute]
public bool IsGeneratedAlwaysAsTransactionIdStart { get; }
    [ReadWriteAttribute]
public bool IsGeneratedAlwaysAsTransactionIdEnd { get; }
    [ReadWriteAttribute]
public bool IsGeneratedAlwaysAsSequenceNumberStart { get; }
    [ReadWriteAttribute]
public bool IsGeneratedAlwaysAsSequenceNumberEnd { get; }
    public abstract virtual ITabular get_Parent();
    public abstract virtual ICollation get_Collation();
    public abstract virtual ComputedColumnInfo get_ComputedColumnInfo();
    public abstract virtual IDefaultConstraint get_DefaultValue();
    public abstract virtual IdentityColumnInfo get_IdentityColumnInfo();
    public abstract virtual bool get_InPrimaryKey();
    public abstract virtual bool get_RowGuidCol();
    public abstract virtual bool get_IsSparse();
    public abstract virtual bool get_IsColumnSet();
    public abstract virtual bool get_IsGeneratedAlwaysAsRowStart();
    public abstract virtual bool get_IsGeneratedAlwaysAsRowEnd();
    public abstract virtual bool get_IsGeneratedAlwaysAsTransactionIdStart();
    public abstract virtual bool get_IsGeneratedAlwaysAsTransactionIdEnd();
    public abstract virtual bool get_IsGeneratedAlwaysAsSequenceNumberStart();
    public abstract virtual bool get_IsGeneratedAlwaysAsSequenceNumberEnd();
}
[MetadataAttribute("2")]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint {
    [ReadOnlyAttribute]
[ParentAttribute]
public ITabular Parent { get; }
    [ReadWriteAttribute]
public bool IsSystemNamed { get; }
    [AbstractAttribute]
public ConstraintType Type { get; }
    public abstract virtual ITabular get_Parent();
    public abstract virtual bool get_IsSystemNamed();
    public abstract virtual ConstraintType get_Type();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICredential {
}
[MetadataAttribute("1")]
[ConstantAttribute("Name", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorDataType {
}
[MetadataAttribute("1")]
[ConstantAttribute("IsOutput", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsReadOnly", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("DefaultValue", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorParameter {
}
[MetadataAttribute("1")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorVariable {
    [ConstantAttribute("Mono.Cecil.CustomAttributeArgument")]
public ICursorDataType DataType { get; }
    public abstract virtual ICursorDataType get_DataType();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase {
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IApplicationRole> ApplicationRoles { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IAsymmetricKey> AsymmetricKeys { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<ICertificate> Certificates { get; }
    [ReadOnlyAttribute]
public CollationInfo CollationInfo { get; }
    [ReadWriteAttribute]
public DatabaseCompatibilityLevel CompatibilityLevel { get; }
    [ReadWriteAttribute]
public string DefaultSchemaName { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IUser Owner { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IDatabaseRole> Roles { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<ISchema> Schemas { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IDatabaseDdlTrigger> Triggers { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IUser> Users { get; }
    public abstract virtual IMetadataCollection`1<IApplicationRole> get_ApplicationRoles();
    public abstract virtual IMetadataCollection`1<IAsymmetricKey> get_AsymmetricKeys();
    public abstract virtual IMetadataCollection`1<ICertificate> get_Certificates();
    public abstract virtual CollationInfo get_CollationInfo();
    public abstract virtual DatabaseCompatibilityLevel get_CompatibilityLevel();
    public abstract virtual string get_DefaultSchemaName();
    public abstract virtual IUser get_Owner();
    public abstract virtual IMetadataCollection`1<IDatabaseRole> get_Roles();
    public abstract virtual IMetadataCollection`1<ISchema> get_Schemas();
    public abstract virtual IMetadataCollection`1<IDatabaseDdlTrigger> get_Triggers();
    public abstract virtual IMetadataCollection`1<IUser> get_Users();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseDdlTrigger {
    [ReadWriteAttribute]
public ITriggerEventTypeSet DatabaseDdlEvents { get; }
    [ReadWriteAttribute]
public bool IsQuotedIdentifierOn { get; }
    public abstract virtual ITriggerEventTypeSet get_DatabaseDdlEvents();
    public abstract virtual bool get_IsQuotedIdentifierOn();
}
[MetadataAttribute("2")]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject {
    [AbstractAttribute]
public IDatabaseObject Parent { get; }
    [ReadWriteAttribute]
public bool IsSystemObject { get; }
    public abstract virtual IDatabaseObject get_Parent();
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObjectVisitor`1 {
    public abstract virtual T Visit(IServer server);
}
[MetadataAttribute("2")]
[DuplicateAttribute("Parent", "Database")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject {
    [ReadOnlyAttribute]
[ParentAttribute]
public IDatabase Database { get; }
    public abstract virtual IDatabase get_Database();
    public abstract virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor`1 {
    public abstract virtual T Visit(IApplicationRole applicationRole);
    public abstract virtual T Visit(IAsymmetricKey assymetricKey);
    public abstract virtual T Visit(ICertificate certificate);
    public abstract virtual T Visit(IDatabaseDdlTrigger databaseDdlTrigger);
    public abstract virtual T Visit(IDatabaseRole databaseRole);
    public abstract virtual T Visit(IFileGroup fileGroup);
    public abstract virtual T Visit(IPartitionScheme partitionScheme);
    public abstract virtual T Visit(ISchema schema);
    public abstract virtual T Visit(IUser user);
}
[MetadataAttribute]
[ConstantAttribute("Name", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission {
    [ReadOnlyAttribute]
[ParentAttribute]
public IDatabasePrincipal DatabasePrincipal { get; }
    [ReadOnlyAttribute]
public DatabasePermissionType PermissionType { get; }
    [ReadOnlyAttribute]
[ReferenceAttribute]
public IMetadataObject TargetObject { get; }
    [ReadWriteAttribute]
public PermissionState PermissionState { get; }
    [ReadOnlyAttribute]
public IDatabasePrincipal Grantor { get; }
    public abstract virtual IDatabasePrincipal get_DatabasePrincipal();
    public abstract virtual DatabasePermissionType get_PermissionType();
    public abstract virtual IMetadataObject get_TargetObject();
    public abstract virtual PermissionState get_PermissionState();
    public abstract virtual IDatabasePrincipal get_Grantor();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal {
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IDatabasePermission> Permissions { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IMetadataCollection`1<IDatabaseRole> MemberOfRoles { get; }
    public abstract virtual IMetadataCollection`1<IDatabasePermission> get_Permissions();
    public abstract virtual IMetadataCollection`1<IDatabaseRole> get_MemberOfRoles();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseRole {
    [ReadWriteAttribute]
public bool IsFixedRole { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IDatabasePrincipal Owner { get; }
    public abstract virtual bool get_IsFixedRole();
    public abstract virtual IDatabasePrincipal get_Owner();
}
[MetadataAttribute("2")]
[ConstantAttribute("Unaliased", "Mono.Cecil.CustomAttributeArgument")]
[ReadWriteAttribute("Columns")]
[ChildAttribute("Columns")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable {
    [AbstractAttribute]
public CollationInfo CollationInfo { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IConstraint> Constraints { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IIndex> Indexes { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IStatistics> Statistics { get; }
    public abstract virtual CollationInfo get_CollationInfo();
    public abstract virtual IMetadataCollection`1<IConstraint> get_Constraints();
    public abstract virtual IMetadataCollection`1<IIndex> get_Indexes();
    public abstract virtual IMetadataCollection`1<IStatistics> get_Statistics();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType {
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType")]
public bool IsScalar { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.ITableDataType")]
public bool IsTable { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorDataType")]
public bool IsCursor { get; }
    [AbstractAttribute]
public bool IsUnknown { get; }
    public abstract virtual bool get_IsScalar();
    public abstract virtual bool get_IsTable();
    public abstract virtual bool get_IsCursor();
    public abstract virtual bool get_IsUnknown();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDatePart {
}
[MetadataAttribute]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDefaultConstraint {
    [ReadOnlyAttribute]
[ParentAttribute]
public IColumn Parent { get; }
    [ReadWriteAttribute]
public bool IsSystemNamed { get; }
    [ReadWriteAttribute]
public string Text { get; }
    public abstract virtual IColumn get_Parent();
    public abstract virtual bool get_IsSystemNamed();
    public abstract virtual string get_Text();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.IdentityColumnInfo : object {
    private long seed;
    private long increment;
    private bool notForReplication;
    public long Increment { get; }
    public long Seed { get; }
    public bool NotForReplication { get; }
    public IdentityColumnInfo(long seed, long increment);
    public IdentityColumnInfo(long seed, long increment, bool notForReplication);
    public long get_Increment();
    public long get_Seed();
    public bool get_NotForReplication();
}
[MetadataAttribute]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger {
    [ReadOnlyAttribute]
[ParentAttribute]
public ITableViewBase Parent { get; }
    [ReadWriteAttribute]
public bool NotForReplication { get; }
    [ReadWriteAttribute]
public bool InsteadOf { get; }
    [ReadWriteAttribute]
public bool Insert { get; }
    [ReadWriteAttribute]
public ActivationOrder InsertActivationOrder { get; }
    [ReadWriteAttribute]
public bool Update { get; }
    [ReadWriteAttribute]
public ActivationOrder UpdateActivationOrder { get; }
    [ReadWriteAttribute]
public bool Delete { get; }
    [ReadWriteAttribute]
public ActivationOrder DeleteActivationOrder { get; }
    [ReadWriteAttribute]
public bool IsQuotedIdentifierOn { get; }
    public abstract virtual ITableViewBase get_Parent();
    public abstract virtual bool get_NotForReplication();
    public abstract virtual bool get_InsteadOf();
    public abstract virtual bool get_Insert();
    public abstract virtual ActivationOrder get_InsertActivationOrder();
    public abstract virtual bool get_Update();
    public abstract virtual ActivationOrder get_UpdateActivationOrder();
    public abstract virtual bool get_Delete();
    public abstract virtual ActivationOrder get_DeleteActivationOrder();
    public abstract virtual bool get_IsQuotedIdentifierOn();
}
[MetadataAttribute("1")]
[ConstantAttribute("Name", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IExecutionContext {
    [ReadWriteAttribute]
public ExecutionContextType ContextType { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ILogin Login { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IUser User { get; }
    public abstract virtual ExecutionContextType get_ContextType();
    public abstract virtual ILogin get_Login();
    public abstract virtual IUser get_User();
}
[MetadataAttribute]
[ConstantAttribute("ModuleType", "Mono.Cecil.CustomAttributeArgument")]
[ReadWriteAttribute("ReturnType")]
[ReferenceAttribute("ReturnType")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IExtendedStoredProcedure {
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IFileGroup {
    [ReadOnlyAttribute]
public bool IsDefault { get; }
    [ReadOnlyAttribute]
public bool IsFileStream { get; }
    [ReadOnlyAttribute]
public bool IsReadOnly { get; }
    public abstract virtual bool get_IsDefault();
    public abstract virtual bool get_IsFileStream();
    public abstract virtual bool get_IsReadOnly();
}
[MetadataAttribute("1")]
[DuplicateAttribute("Name", "ReferencingColumn.Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyColumn {
    [ReadOnlyAttribute]
[ReferenceAttribute]
public IColumn ReferencingColumn { get; }
    [ReadOnlyAttribute]
[ReferenceAttribute]
public IColumn ReferencedColumn { get; }
    public abstract virtual IColumn get_ReferencingColumn();
    public abstract virtual IColumn get_ReferencedColumn();
}
[MetadataAttribute]
[ConstantAttribute("Type", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint {
    [ReadWriteAttribute]
public IMetadataOrderedCollection`1<IForeignKeyColumn> Columns { get; }
    [ReadWriteAttribute]
public ForeignKeyAction DeleteAction { get; }
    [ReadWriteAttribute]
public bool IsEnabled { get; }
    [ReadWriteAttribute]
public bool IsChecked { get; }
    [ReadWriteAttribute]
public bool NotForReplication { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ITable ReferencedTable { get; }
    [ReadWriteAttribute]
public ForeignKeyAction UpdateAction { get; }
    public abstract virtual IMetadataOrderedCollection`1<IForeignKeyColumn> get_Columns();
    public abstract virtual ForeignKeyAction get_DeleteAction();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual bool get_IsChecked();
    public abstract virtual bool get_NotForReplication();
    public abstract virtual ITable get_ReferencedTable();
    public abstract virtual ForeignKeyAction get_UpdateAction();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IFunction {
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase {
    [ReadWriteAttribute]
public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public abstract virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
}
[MetadataAttribute("2")]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex {
    [ReadOnlyAttribute]
[ParentAttribute]
public ITabular Parent { get; }
    [AbstractAttribute]
public IndexType Type { get; }
    [ReadWriteAttribute]
public bool DisallowPageLocks { get; }
    [ReadWriteAttribute]
public bool DisallowRowLocks { get; }
    [ReadWriteAttribute]
public byte FillFactor { get; }
    [ReadWriteAttribute]
public bool IgnoreDuplicateKeys { get; }
    [ReadWriteAttribute]
public bool IsDisabled { get; }
    [ReadWriteAttribute]
public bool PadIndex { get; }
    public abstract virtual ITabular get_Parent();
    public abstract virtual IndexType get_Type();
    public abstract virtual bool get_DisallowPageLocks();
    public abstract virtual bool get_DisallowRowLocks();
    public abstract virtual byte get_FillFactor();
    public abstract virtual bool get_IgnoreDuplicateKeys();
    public abstract virtual bool get_IsDisabled();
    public abstract virtual bool get_PadIndex();
}
[MetadataAttribute("1")]
[DuplicateAttribute("Name", "ReferencedColumn.Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IIndexedColumn {
    [ReadOnlyAttribute]
[ReferenceAttribute]
public IColumn ReferencedColumn { get; }
    [ReadWriteAttribute]
public SortOrder SortOrder { get; }
    [ReadWriteAttribute]
public bool IsIncluded { get; }
    public abstract virtual IColumn get_ReferencedColumn();
    public abstract virtual SortOrder get_SortOrder();
    public abstract virtual bool get_IsIncluded();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IIsJsonValueType {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IJsonNullQualifier {
    public JsonNullQualifierType JsonNullQulifierValue { get; public set; }
    public abstract virtual JsonNullQualifierType get_JsonNullQulifierValue();
    public abstract virtual void set_JsonNullQulifierValue(JsonNullQualifierType value);
}
[MetadataAttribute("2")]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable {
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarVariable")]
public bool IsScalarVariable { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.ITableVariable")]
public bool IsTableVariable { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorVariable")]
public bool IsCursorVariable { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter")]
public bool IsParameter { get; }
    [AbstractAttribute]
public IDataType DataType { get; }
    public abstract virtual bool get_IsScalarVariable();
    public abstract virtual bool get_IsTableVariable();
    public abstract virtual bool get_IsCursorVariable();
    public abstract virtual bool get_IsParameter();
    public abstract virtual IDataType get_DataType();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin {
    [ReadOnlyAttribute]
public LoginType LoginType { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IAsymmetricKey AsymmetricKey { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ICertificate Certificate { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ICredential Credential { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IDatabase DefaultDatabase { get; }
    [ReadWriteAttribute]
public string Language { get; }
    [ReadWriteAttribute]
public IPassword Password { get; }
    [ReadWriteAttribute]
public Byte[] Sid { get; }
    public abstract virtual LoginType get_LoginType();
    public abstract virtual IAsymmetricKey get_AsymmetricKey();
    public abstract virtual ICertificate get_Certificate();
    public abstract virtual ICredential get_Credential();
    public abstract virtual IDatabase get_DefaultDatabase();
    public abstract virtual string get_Language();
    public abstract virtual IPassword get_Password();
    public abstract virtual Byte[] get_Sid();
}
[DefaultMemberAttribute("Item")]
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection`1 {
    public int Count { get; }
    public T Item { get; }
    public IMetadataCollection`1<IMetadataObject> AsMetadataObjectCollection { get; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(string name);
    public abstract virtual bool Contains(string name);
    public abstract virtual bool Contains(T item);
    public abstract virtual IEnumerable`1<T> FindAll(Predicate`1<T> match);
    public abstract virtual IEnumerable`1<T> FindAll(string name);
    public abstract virtual IMetadataCollection`1<IMetadataObject> get_AsMetadataObjectCollection();
}
internal interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataIdGenerator`1 {
    public abstract virtual TId GenerateId(IMetadataObject obj);
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject {
    [AbstractAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor`1 {
    public abstract virtual T Visit(IBuiltInFunction builtInFunction);
    public abstract virtual T Visit(ICheckConstraint checkConstraint);
    public abstract virtual T Visit(IClrDataType clrDataType);
    public abstract virtual T Visit(ICollation collation);
    public abstract virtual T Visit(IColumn column);
    public abstract virtual T Visit(ICursorDataType cursorDataType);
    public abstract virtual T Visit(ICursorParameter cursorParameter);
    public abstract virtual T Visit(ICursorVariable cursorVariable);
    public abstract virtual T Visit(IDatabasePermission databasePermission);
    public abstract virtual T Visit(IDatePart datePart);
    public abstract virtual T Visit(IIsJsonValueType isjsontype);
    public abstract virtual T Visit(IDefaultConstraint defaultConstraint);
    public abstract virtual T Visit(IDmlTrigger dmlTrigger);
    public abstract virtual T Visit(IExecutionContext executionContext);
    public abstract virtual T Visit(IForeignKeyColumn foreignKeyColumn);
    public abstract virtual T Visit(IForeignKeyConstraint foreignKeyConstraint);
    public abstract virtual T Visit(IIndexedColumn indexedColumn);
    public abstract virtual T Visit(IJsonNullQualifier jsonNullQualifier);
    public abstract virtual T Visit(IPrimaryKeyConstraint primaryKeyConstraint);
    public abstract virtual T Visit(IRelationalIndex relationalIndex);
    public abstract virtual T Visit(IScalarExpression scalarExpression);
    public abstract virtual T Visit(IScalarDataType scalarDataType);
    public abstract virtual T Visit(IScalarParameter scalarParameter);
    public abstract virtual T Visit(IScalarVariable scalarVariable);
    public abstract virtual T Visit(ISpatialIndex spatialIndex);
    public abstract virtual T Visit(IStatistics statistics);
    public abstract virtual T Visit(ISystemDataType systemDataType);
    public abstract virtual T Visit(ISystemClrDataType systemClrDataType);
    public abstract virtual T Visit(ITableDataType tableDataType);
    public abstract virtual T Visit(ITableParameter tableParameter);
    public abstract virtual T Visit(ITableVariable tableVariable);
    public abstract virtual T Visit(IUdtDataMember udtDataMember);
    public abstract virtual T Visit(IUdtMethod udtMethod);
    public abstract virtual T Visit(IUniqueConstraint uniqueConstraint);
    public abstract virtual T Visit(IVirtualTable virtualTable);
    public abstract virtual T Visit(IVoidDataType voidDataType);
    public abstract virtual T Visit(IXmlDataType xmlDataType);
    public abstract virtual T Visit(IXmlDataTypeMethod xmlDataTypeMethod);
    public abstract virtual T Visit(IXmlDataTypeTableMethod xmlDataTypeMethod);
    public abstract virtual T Visit(IXmlIndex xmlIndex);
}
[DefaultMemberAttribute("Item")]
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataOrderedCollection`1 {
    public T Item { get; }
    public abstract virtual T get_Item(int index);
}
internal interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataTypeInfoVisitor`1 {
    public abstract virtual T Visit(IApplicationRole obj);
    public abstract virtual T Visit(IAsymmetricKey obj);
    public abstract virtual T Visit(ICertificate obj);
    public abstract virtual T Visit(ICheckConstraint obj);
    public abstract virtual T Visit(IClrDataType obj);
    public abstract virtual T Visit(ICollation obj);
    public abstract virtual T Visit(IColumn obj);
    public abstract virtual T Visit(ICredential obj);
    public abstract virtual T Visit(ICursorDataType obj);
    public abstract virtual T Visit(ICursorParameter obj);
    public abstract virtual T Visit(ICursorVariable obj);
    public abstract virtual T Visit(IDatabase obj);
    public abstract virtual T Visit(IDatabaseDdlTrigger obj);
    public abstract virtual T Visit(IDatabasePermission obj);
    public abstract virtual T Visit(IDatabaseRole obj);
    public abstract virtual T Visit(IDefaultConstraint obj);
    public abstract virtual T Visit(IDmlTrigger obj);
    public abstract virtual T Visit(IExecutionContext obj);
    public abstract virtual T Visit(IExtendedStoredProcedure obj);
    public abstract virtual T Visit(IFileGroup obj);
    public abstract virtual T Visit(IForeignKeyColumn obj);
    public abstract virtual T Visit(IForeignKeyConstraint obj);
    public abstract virtual T Visit(IIndexedColumn obj);
    public abstract virtual T Visit(ILogin obj);
    public abstract virtual T Visit(IPartitionScheme obj);
    public abstract virtual T Visit(IPrimaryKeyConstraint obj);
    public abstract virtual T Visit(IRelationalIndex obj);
    public abstract virtual T Visit(IScalarDataType obj);
    public abstract virtual T Visit(IScalarParameter obj);
    public abstract virtual T Visit(IScalarValuedFunction obj);
    public abstract virtual T Visit(IScalarVariable obj);
    public abstract virtual T Visit(ISchema obj);
    public abstract virtual T Visit(IServer obj);
    public abstract virtual T Visit(IServerDdlTrigger obj);
    public abstract virtual T Visit(ISpatialIndex obj);
    public abstract virtual T Visit(IStatistics obj);
    public abstract virtual T Visit(IStoredProcedure obj);
    public abstract virtual T Visit(ISynonym obj);
    public abstract virtual T Visit(ISystemClrDataType obj);
    public abstract virtual T Visit(ISystemDataType obj);
    public abstract virtual T Visit(ITable obj);
    public abstract virtual T Visit(ITableDataType obj);
    public abstract virtual T Visit(ITableParameter obj);
    public abstract virtual T Visit(ITableValuedFunction obj);
    public abstract virtual T Visit(ITableVariable obj);
    public abstract virtual T Visit(IUdtDataMember obj);
    public abstract virtual T Visit(IUdtMethod obj);
    public abstract virtual T Visit(IUniqueConstraint obj);
    public abstract virtual T Visit(IUser obj);
    public abstract virtual T Visit(IUserDefinedAggregate obj);
    public abstract virtual T Visit(IUserDefinedClrType obj);
    public abstract virtual T Visit(IUserDefinedDataType obj);
    public abstract virtual T Visit(IUserDefinedTableType obj);
    public abstract virtual T Visit(IView obj);
    public abstract virtual T Visit(IVoidDataType obj);
    public abstract virtual T Visit(IXmlDataType obj);
    public abstract virtual T Visit(IXmlIndex obj);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableApplicationRole {
    public ISchema DefaultSchema { get; public set; }
    public abstract virtual ISchema get_DefaultSchema();
    public abstract virtual void set_DefaultSchema(ISchema value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableAsymmetricKey {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableCallableModule {
    public IScalarDataType ReturnType { get; public set; }
    public abstract virtual IScalarDataType get_ReturnType();
    public abstract virtual void set_ReturnType(IScalarDataType value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableCertificate {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableCheckConstraint {
    public bool IsEnabled { get; public set; }
    public bool IsChecked { get; public set; }
    public bool NotForReplication { get; public set; }
    public string Text { get; public set; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    public abstract virtual bool get_NotForReplication();
    public abstract virtual void set_NotForReplication(bool value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableClrDataType {
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public bool IsBinaryOrdered { get; public set; }
    public bool IsComVisible { get; public set; }
    public bool IsNullable { get; public set; }
    public IMutableMetadataCollection`1<IUdtMethod> Methods { get; }
    public IMutableMetadataCollection`1<IUdtDataMember> DataMembers { get; }
    public abstract virtual string get_AssemblyName();
    public abstract virtual void set_AssemblyName(string value);
    public abstract virtual string get_ClassName();
    public abstract virtual void set_ClassName(string value);
    public abstract virtual bool get_IsBinaryOrdered();
    public abstract virtual void set_IsBinaryOrdered(bool value);
    public abstract virtual bool get_IsComVisible();
    public abstract virtual void set_IsComVisible(bool value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual IMutableMetadataCollection`1<IUdtMethod> get_Methods();
    public abstract virtual IMutableMetadataCollection`1<IUdtDataMember> get_DataMembers();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableColumn {
    public ICollation Collation { get; public set; }
    public ComputedColumnInfo ComputedColumnInfo { get; public set; }
    public IDefaultConstraint DefaultValue { get; public set; }
    public IdentityColumnInfo IdentityColumnInfo { get; public set; }
    public bool InPrimaryKey { get; public set; }
    public bool RowGuidCol { get; public set; }
    public bool IsSparse { get; public set; }
    public bool IsColumnSet { get; public set; }
    public bool IsGeneratedAlwaysAsRowStart { get; public set; }
    public bool IsGeneratedAlwaysAsRowEnd { get; public set; }
    public bool IsGeneratedAlwaysAsTransactionIdStart { get; public set; }
    public bool IsGeneratedAlwaysAsTransactionIdEnd { get; public set; }
    public bool IsGeneratedAlwaysAsSequenceNumberStart { get; public set; }
    public bool IsGeneratedAlwaysAsSequenceNumberEnd { get; public set; }
    public abstract virtual ICollation get_Collation();
    public abstract virtual void set_Collation(ICollation value);
    public abstract virtual ComputedColumnInfo get_ComputedColumnInfo();
    public abstract virtual void set_ComputedColumnInfo(ComputedColumnInfo value);
    public abstract virtual IDefaultConstraint get_DefaultValue();
    public abstract virtual void set_DefaultValue(IDefaultConstraint value);
    public abstract virtual IdentityColumnInfo get_IdentityColumnInfo();
    public abstract virtual void set_IdentityColumnInfo(IdentityColumnInfo value);
    public abstract virtual bool get_InPrimaryKey();
    public abstract virtual void set_InPrimaryKey(bool value);
    public abstract virtual bool get_RowGuidCol();
    public abstract virtual void set_RowGuidCol(bool value);
    public abstract virtual bool get_IsSparse();
    public abstract virtual void set_IsSparse(bool value);
    public abstract virtual bool get_IsColumnSet();
    public abstract virtual void set_IsColumnSet(bool value);
    public abstract virtual bool get_IsGeneratedAlwaysAsRowStart();
    public abstract virtual void set_IsGeneratedAlwaysAsRowStart(bool value);
    public abstract virtual bool get_IsGeneratedAlwaysAsRowEnd();
    public abstract virtual void set_IsGeneratedAlwaysAsRowEnd(bool value);
    public abstract virtual bool get_IsGeneratedAlwaysAsTransactionIdStart();
    public abstract virtual void set_IsGeneratedAlwaysAsTransactionIdStart(bool value);
    public abstract virtual bool get_IsGeneratedAlwaysAsTransactionIdEnd();
    public abstract virtual void set_IsGeneratedAlwaysAsTransactionIdEnd(bool value);
    public abstract virtual bool get_IsGeneratedAlwaysAsSequenceNumberStart();
    public abstract virtual void set_IsGeneratedAlwaysAsSequenceNumberStart(bool value);
    public abstract virtual bool get_IsGeneratedAlwaysAsSequenceNumberEnd();
    public abstract virtual void set_IsGeneratedAlwaysAsSequenceNumberEnd(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableConstraint {
    public bool IsSystemNamed { get; public set; }
    public abstract virtual bool get_IsSystemNamed();
    public abstract virtual void set_IsSystemNamed(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableCredential {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabase {
    public IMutableMetadataCollection`1<IApplicationRole> ApplicationRoles { get; }
    public IMutableMetadataCollection`1<IAsymmetricKey> AsymmetricKeys { get; }
    public IMutableMetadataCollection`1<ICertificate> Certificates { get; }
    public DatabaseCompatibilityLevel CompatibilityLevel { get; public set; }
    public string DefaultSchemaName { get; public set; }
    public IUser Owner { get; public set; }
    public IMutableMetadataCollection`1<IDatabaseRole> Roles { get; }
    public IMutableMetadataCollection`1<ISchema> Schemas { get; }
    public IMutableMetadataCollection`1<IDatabaseDdlTrigger> Triggers { get; }
    public IMutableMetadataCollection`1<IUser> Users { get; }
    public abstract virtual IMutableMetadataCollection`1<IApplicationRole> get_ApplicationRoles();
    public abstract virtual IMutableMetadataCollection`1<IAsymmetricKey> get_AsymmetricKeys();
    public abstract virtual IMutableMetadataCollection`1<ICertificate> get_Certificates();
    public abstract virtual DatabaseCompatibilityLevel get_CompatibilityLevel();
    public abstract virtual void set_CompatibilityLevel(DatabaseCompatibilityLevel value);
    public abstract virtual string get_DefaultSchemaName();
    public abstract virtual void set_DefaultSchemaName(string value);
    public abstract virtual IUser get_Owner();
    public abstract virtual void set_Owner(IUser value);
    public abstract virtual IMutableMetadataCollection`1<IDatabaseRole> get_Roles();
    public abstract virtual IMutableMetadataCollection`1<ISchema> get_Schemas();
    public abstract virtual IMutableMetadataCollection`1<IDatabaseDdlTrigger> get_Triggers();
    public abstract virtual IMutableMetadataCollection`1<IUser> get_Users();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseDdlTrigger {
    [ReadWriteAttribute]
public IMutableTriggerEventTypeSet DatabaseDdlEvents { get; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public abstract virtual IMutableTriggerEventTypeSet get_DatabaseDdlEvents();
    public abstract virtual bool get_IsQuotedIdentifierOn();
    public abstract virtual void set_IsQuotedIdentifierOn(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseObject {
    public bool IsSystemObject { get; public set; }
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual void set_IsSystemObject(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseOwnedObject {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabasePermission {
    public PermissionState PermissionState { get; public set; }
    public abstract virtual PermissionState get_PermissionState();
    public abstract virtual void set_PermissionState(PermissionState value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabasePrincipal {
    public IMutableMetadataCollection`1<IDatabasePermission> Permissions { get; }
    public IMutableMetadataCollection`1<IDatabaseRole> MemberOfRoles { get; }
    public abstract virtual IMutableMetadataCollection`1<IDatabasePermission> get_Permissions();
    public abstract virtual IMutableMetadataCollection`1<IDatabaseRole> get_MemberOfRoles();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseRole {
    public bool IsFixedRole { get; public set; }
    public IDatabasePrincipal Owner { get; public set; }
    public abstract virtual bool get_IsFixedRole();
    public abstract virtual void set_IsFixedRole(bool value);
    public abstract virtual IDatabasePrincipal get_Owner();
    public abstract virtual void set_Owner(IDatabasePrincipal value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable {
    public IMutableMetadataCollection`1<IConstraint> Constraints { get; }
    public IMutableMetadataCollection`1<IIndex> Indexes { get; }
    public IMutableMetadataCollection`1<IStatistics> Statistics { get; }
    public abstract virtual IMutableMetadataCollection`1<IConstraint> get_Constraints();
    public abstract virtual IMutableMetadataCollection`1<IIndex> get_Indexes();
    public abstract virtual IMutableMetadataCollection`1<IStatistics> get_Statistics();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDataType {
    public bool IsUnknown { get; public set; }
    public abstract virtual bool get_IsUnknown();
    public abstract virtual void set_IsUnknown(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDefaultConstraint {
    public bool IsSystemNamed { get; public set; }
    public string Text { get; public set; }
    public abstract virtual bool get_IsSystemNamed();
    public abstract virtual void set_IsSystemNamed(bool value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDmlTrigger {
    public bool NotForReplication { get; public set; }
    public bool InsteadOf { get; public set; }
    public bool Insert { get; public set; }
    public ActivationOrder InsertActivationOrder { get; public set; }
    public bool Update { get; public set; }
    public ActivationOrder UpdateActivationOrder { get; public set; }
    public bool Delete { get; public set; }
    public ActivationOrder DeleteActivationOrder { get; public set; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public abstract virtual bool get_NotForReplication();
    public abstract virtual void set_NotForReplication(bool value);
    public abstract virtual bool get_InsteadOf();
    public abstract virtual void set_InsteadOf(bool value);
    public abstract virtual bool get_Insert();
    public abstract virtual void set_Insert(bool value);
    public abstract virtual ActivationOrder get_InsertActivationOrder();
    public abstract virtual void set_InsertActivationOrder(ActivationOrder value);
    public abstract virtual bool get_Update();
    public abstract virtual void set_Update(bool value);
    public abstract virtual ActivationOrder get_UpdateActivationOrder();
    public abstract virtual void set_UpdateActivationOrder(ActivationOrder value);
    public abstract virtual bool get_Delete();
    public abstract virtual void set_Delete(bool value);
    public abstract virtual ActivationOrder get_DeleteActivationOrder();
    public abstract virtual void set_DeleteActivationOrder(ActivationOrder value);
    public abstract virtual bool get_IsQuotedIdentifierOn();
    public abstract virtual void set_IsQuotedIdentifierOn(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableForeignKeyConstraint {
    public IMutableMetadataOrderedCollection`1<IForeignKeyColumn> Columns { get; }
    public ForeignKeyAction DeleteAction { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsChecked { get; public set; }
    public bool NotForReplication { get; public set; }
    public ITable ReferencedTable { get; public set; }
    public ForeignKeyAction UpdateAction { get; public set; }
    public abstract virtual IMutableMetadataOrderedCollection`1<IForeignKeyColumn> get_Columns();
    public abstract virtual ForeignKeyAction get_DeleteAction();
    public abstract virtual void set_DeleteAction(ForeignKeyAction value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    public abstract virtual bool get_NotForReplication();
    public abstract virtual void set_NotForReplication(bool value);
    public abstract virtual ITable get_ReferencedTable();
    public abstract virtual void set_ReferencedTable(ITable value);
    public abstract virtual ForeignKeyAction get_UpdateAction();
    public abstract virtual void set_UpdateAction(ForeignKeyAction value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableFunction {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableFunctionModuleBase {
    public IMutableMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public abstract virtual IMutableMetadataOrderedCollection`1<IParameter> get_Parameters();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableIndex {
    public bool DisallowPageLocks { get; public set; }
    public bool DisallowRowLocks { get; public set; }
    public byte FillFactor { get; public set; }
    public bool IgnoreDuplicateKeys { get; public set; }
    public bool IsDisabled { get; public set; }
    public bool PadIndex { get; public set; }
    public abstract virtual bool get_DisallowPageLocks();
    public abstract virtual void set_DisallowPageLocks(bool value);
    public abstract virtual bool get_DisallowRowLocks();
    public abstract virtual void set_DisallowRowLocks(bool value);
    public abstract virtual byte get_FillFactor();
    public abstract virtual void set_FillFactor(byte value);
    public abstract virtual bool get_IgnoreDuplicateKeys();
    public abstract virtual void set_IgnoreDuplicateKeys(bool value);
    public abstract virtual bool get_IsDisabled();
    public abstract virtual void set_IsDisabled(bool value);
    public abstract virtual bool get_PadIndex();
    public abstract virtual void set_PadIndex(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableIndexedColumn {
    public SortOrder SortOrder { get; public set; }
    public bool IsIncluded { get; public set; }
    public abstract virtual SortOrder get_SortOrder();
    public abstract virtual void set_SortOrder(SortOrder value);
    public abstract virtual bool get_IsIncluded();
    public abstract virtual void set_IsIncluded(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableLogin {
    public IAsymmetricKey AsymmetricKey { get; public set; }
    public ICertificate Certificate { get; public set; }
    public ICredential Credential { get; public set; }
    public IDatabase DefaultDatabase { get; public set; }
    public string Language { get; public set; }
    public IPassword Password { get; public set; }
    public Byte[] Sid { get; public set; }
    public abstract virtual IAsymmetricKey get_AsymmetricKey();
    public abstract virtual void set_AsymmetricKey(IAsymmetricKey value);
    public abstract virtual ICertificate get_Certificate();
    public abstract virtual void set_Certificate(ICertificate value);
    public abstract virtual ICredential get_Credential();
    public abstract virtual void set_Credential(ICredential value);
    public abstract virtual IDatabase get_DefaultDatabase();
    public abstract virtual void set_DefaultDatabase(IDatabase value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual IPassword get_Password();
    public abstract virtual void set_Password(IPassword value);
    public abstract virtual Byte[] get_Sid();
    public abstract virtual void set_Sid(Byte[] value);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableMetadataCollection`1 {
    public T Item { get; public set; }
    public abstract virtual T get_Item(string name);
    public abstract virtual void set_Item(string name, T value);
    public abstract virtual void Add(T item);
    public abstract virtual void AddRange(IEnumerable`1<T> collection);
    public abstract virtual bool Remove(string name);
    public abstract virtual bool Remove(T item);
    public abstract virtual void Clear();
    public abstract virtual IMutableMetadataCollection`1<T> Clone();
    public abstract virtual IMutableMetadataCollection`1<T> Clone(bool copyData);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableMetadataObject {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableMetadataOrderedCollection`1 {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutablePassword {
    public string Value { get; public set; }
    public bool IsHashed { get; public set; }
    public bool MustChange { get; public set; }
    public bool CheckPolicy { get; public set; }
    public bool CheckExpiration { get; public set; }
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual bool get_IsHashed();
    public abstract virtual void set_IsHashed(bool value);
    public abstract virtual bool get_MustChange();
    public abstract virtual void set_MustChange(bool value);
    public abstract virtual bool get_CheckPolicy();
    public abstract virtual void set_CheckPolicy(bool value);
    public abstract virtual bool get_CheckExpiration();
    public abstract virtual void set_CheckExpiration(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableRelationalIndex {
    public bool CompactLargeObjects { get; public set; }
    public IFileGroup FileGroup { get; public set; }
    public IFileGroup FileStreamFileGroup { get; public set; }
    public IPartitionScheme FileStreamPartitionScheme { get; public set; }
    public string FilterDefinition { get; public set; }
    public IMutableMetadataOrderedCollection`1<IIndexedColumn> IndexedColumns { get; }
    public IUniqueConstraintBase IndexKey { get; public set; }
    public bool IsClustered { get; public set; }
    public bool IsSystemNamed { get; public set; }
    public bool IsUnique { get; public set; }
    public bool NoAutomaticRecomputation { get; public set; }
    public IPartitionScheme PartitionScheme { get; public set; }
    public abstract virtual bool get_CompactLargeObjects();
    public abstract virtual void set_CompactLargeObjects(bool value);
    public abstract virtual IFileGroup get_FileGroup();
    public abstract virtual void set_FileGroup(IFileGroup value);
    public abstract virtual IFileGroup get_FileStreamFileGroup();
    public abstract virtual void set_FileStreamFileGroup(IFileGroup value);
    public abstract virtual IPartitionScheme get_FileStreamPartitionScheme();
    public abstract virtual void set_FileStreamPartitionScheme(IPartitionScheme value);
    public abstract virtual string get_FilterDefinition();
    public abstract virtual void set_FilterDefinition(string value);
    public abstract virtual IMutableMetadataOrderedCollection`1<IIndexedColumn> get_IndexedColumns();
    public abstract virtual IUniqueConstraintBase get_IndexKey();
    public abstract virtual void set_IndexKey(IUniqueConstraintBase value);
    public abstract virtual bool get_IsClustered();
    public abstract virtual void set_IsClustered(bool value);
    public abstract virtual bool get_IsSystemNamed();
    public abstract virtual void set_IsSystemNamed(bool value);
    public abstract virtual bool get_IsUnique();
    public abstract virtual void set_IsUnique(bool value);
    public abstract virtual bool get_NoAutomaticRecomputation();
    public abstract virtual void set_NoAutomaticRecomputation(bool value);
    public abstract virtual IPartitionScheme get_PartitionScheme();
    public abstract virtual void set_PartitionScheme(IPartitionScheme value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableScalar {
    public IScalarDataType DataType { get; public set; }
    public bool Nullable { get; public set; }
    public abstract virtual IScalarDataType get_DataType();
    public abstract virtual void set_DataType(IScalarDataType value);
    public abstract virtual bool get_Nullable();
    public abstract virtual void set_Nullable(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableScalarDataType {
    public ISystemDataType BaseSystemDataType { get; public set; }
    public abstract virtual ISystemDataType get_BaseSystemDataType();
    public abstract virtual void set_BaseSystemDataType(ISystemDataType value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableScalarFunction {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableScalarValuedFunction {
    public bool ReturnsNullOnNullInput { get; public set; }
    public abstract virtual bool get_ReturnsNullOnNullInput();
    public abstract virtual void set_ReturnsNullOnNullInput(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableSchema {
    public IDatabasePrincipal Owner { get; public set; }
    public IMutableMetadataCollection`1<ITable> Tables { get; }
    public IMutableMetadataCollection`1<IView> Views { get; }
    public IMutableMetadataCollection`1<IUserDefinedAggregate> UserDefinedAggregates { get; }
    public IMutableMetadataCollection`1<ITableValuedFunction> TableValuedFunctions { get; }
    public IMutableMetadataCollection`1<IScalarValuedFunction> ScalarValuedFunctions { get; }
    public IMutableMetadataCollection`1<IStoredProcedure> StoredProcedures { get; }
    public IMutableMetadataCollection`1<IExtendedStoredProcedure> ExtendedStoredProcedures { get; }
    public IMutableMetadataCollection`1<IUserDefinedDataType> UserDefinedDataTypes { get; }
    public IMutableMetadataCollection`1<IUserDefinedTableType> UserDefinedTableTypes { get; }
    public IMutableMetadataCollection`1<IUserDefinedClrType> UserDefinedClrTypes { get; }
    public IMutableMetadataCollection`1<ISynonym> Synonyms { get; }
    public abstract virtual IDatabasePrincipal get_Owner();
    public abstract virtual void set_Owner(IDatabasePrincipal value);
    public abstract virtual IMutableMetadataCollection`1<ITable> get_Tables();
    public abstract virtual IMutableMetadataCollection`1<IView> get_Views();
    public abstract virtual IMutableMetadataCollection`1<IUserDefinedAggregate> get_UserDefinedAggregates();
    public abstract virtual IMutableMetadataCollection`1<ITableValuedFunction> get_TableValuedFunctions();
    public abstract virtual IMutableMetadataCollection`1<IScalarValuedFunction> get_ScalarValuedFunctions();
    public abstract virtual IMutableMetadataCollection`1<IStoredProcedure> get_StoredProcedures();
    public abstract virtual IMutableMetadataCollection`1<IExtendedStoredProcedure> get_ExtendedStoredProcedures();
    public abstract virtual IMutableMetadataCollection`1<IUserDefinedDataType> get_UserDefinedDataTypes();
    public abstract virtual IMutableMetadataCollection`1<IUserDefinedTableType> get_UserDefinedTableTypes();
    public abstract virtual IMutableMetadataCollection`1<IUserDefinedClrType> get_UserDefinedClrTypes();
    public abstract virtual IMutableMetadataCollection`1<ISynonym> get_Synonyms();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableSchemaOwnedObject {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableServer {
    public IMutableMetadataCollection`1<IDatabase> Databases { get; }
    public IMutableMetadataCollection`1<ICredential> Credentials { get; }
    public IMutableMetadataCollection`1<ILogin> Logins { get; }
    public IMutableMetadataCollection`1<IServerDdlTrigger> Triggers { get; }
    public abstract virtual IMutableMetadataCollection`1<IDatabase> get_Databases();
    public abstract virtual IMutableMetadataCollection`1<ICredential> get_Credentials();
    public abstract virtual IMutableMetadataCollection`1<ILogin> get_Logins();
    public abstract virtual IMutableMetadataCollection`1<IServerDdlTrigger> get_Triggers();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableServerDdlTrigger {
    public IMutableTriggerEventTypeSet ServerDdlEvents { get; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public abstract virtual IMutableTriggerEventTypeSet get_ServerDdlEvents();
    public abstract virtual bool get_IsQuotedIdentifierOn();
    public abstract virtual void set_IsQuotedIdentifierOn(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableServerOwnedObject {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableSpatialIndex {
    public double BoundingBoxXMax { get; public set; }
    public double BoundingBoxXMin { get; public set; }
    public double BoundingBoxYMax { get; public set; }
    public double BoundingBoxYMin { get; public set; }
    public int CellsPerObject { get; public set; }
    public IColumn IndexedColumn { get; public set; }
    public GridDensity Level1Density { get; public set; }
    public GridDensity Level2Density { get; public set; }
    public GridDensity Level3Density { get; public set; }
    public GridDensity Level4Density { get; public set; }
    public bool NoAutomaticRecomputation { get; public set; }
    public abstract virtual double get_BoundingBoxXMax();
    public abstract virtual void set_BoundingBoxXMax(double value);
    public abstract virtual double get_BoundingBoxXMin();
    public abstract virtual void set_BoundingBoxXMin(double value);
    public abstract virtual double get_BoundingBoxYMax();
    public abstract virtual void set_BoundingBoxYMax(double value);
    public abstract virtual double get_BoundingBoxYMin();
    public abstract virtual void set_BoundingBoxYMin(double value);
    public abstract virtual int get_CellsPerObject();
    public abstract virtual void set_CellsPerObject(int value);
    public abstract virtual IColumn get_IndexedColumn();
    public abstract virtual void set_IndexedColumn(IColumn value);
    public abstract virtual GridDensity get_Level1Density();
    public abstract virtual void set_Level1Density(GridDensity value);
    public abstract virtual GridDensity get_Level2Density();
    public abstract virtual void set_Level2Density(GridDensity value);
    public abstract virtual GridDensity get_Level3Density();
    public abstract virtual void set_Level3Density(GridDensity value);
    public abstract virtual GridDensity get_Level4Density();
    public abstract virtual void set_Level4Density(GridDensity value);
    public abstract virtual bool get_NoAutomaticRecomputation();
    public abstract virtual void set_NoAutomaticRecomputation(bool value);
}
[MetadataAttribute]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableStatistics {
    [ReadWriteAttribute]
public StatisticsType Type { get; public set; }
    [ReadOnlyAttribute]
[ParentAttribute]
public ITabular Parent { get; public set; }
    [ReadWriteAttribute]
public string FilterDefinition { get; public set; }
    [ReadWriteAttribute]
public bool NoAutomaticRecomputation { get; public set; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IMetadataCollection`1<IColumn> Columns { get; public set; }
    public abstract virtual StatisticsType get_Type();
    public abstract virtual void set_Type(StatisticsType value);
    public abstract virtual ITabular get_Parent();
    public abstract virtual void set_Parent(ITabular value);
    public abstract virtual string get_FilterDefinition();
    public abstract virtual void set_FilterDefinition(string value);
    public abstract virtual bool get_NoAutomaticRecomputation();
    public abstract virtual void set_NoAutomaticRecomputation(bool value);
    public abstract virtual IMetadataCollection`1<IColumn> get_Columns();
    public abstract virtual void set_Columns(IMetadataCollection`1<IColumn> value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableStoredProcedure {
    public string BodyText { get; public set; }
    public bool ForReplication { get; public set; }
    public bool IsRecompiled { get; public set; }
    public bool IsSqlClr { get; public set; }
    public bool Startup { get; public set; }
    public abstract virtual string get_BodyText();
    public abstract virtual void set_BodyText(string value);
    public abstract virtual bool get_ForReplication();
    public abstract virtual void set_ForReplication(bool value);
    public abstract virtual bool get_IsRecompiled();
    public abstract virtual void set_IsRecompiled(bool value);
    public abstract virtual bool get_IsSqlClr();
    public abstract virtual void set_IsSqlClr(bool value);
    public abstract virtual bool get_Startup();
    public abstract virtual void set_Startup(bool value);
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableSynonym {
    [ReadWriteAttribute]
public SynonymBaseType BaseType { get; public set; }
    [ReadWriteAttribute]
public string BaseObjectName { get; public set; }
    public abstract virtual SynonymBaseType get_BaseType();
    public abstract virtual void set_BaseType(SynonymBaseType value);
    public abstract virtual string get_BaseObjectName();
    public abstract virtual void set_BaseObjectName(string value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTable {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTableDataType {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTableValuedFunction {
    public bool IsInline { get; public set; }
    public string TableVariableName { get; public set; }
    public abstract virtual bool get_IsInline();
    public abstract virtual void set_IsInline(bool value);
    public abstract virtual string get_TableVariableName();
    public abstract virtual void set_TableVariableName(string value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTableViewBase {
    public IMutableMetadataCollection`1<IDmlTrigger> Triggers { get; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public abstract virtual IMutableMetadataCollection`1<IDmlTrigger> get_Triggers();
    public abstract virtual bool get_IsQuotedIdentifierOn();
    public abstract virtual void set_IsQuotedIdentifierOn(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTabular {
    public IMutableMetadataOrderedCollection`1<IColumn> Columns { get; }
    public abstract virtual IMutableMetadataOrderedCollection`1<IColumn> get_Columns();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTrigger {
    public string BodyText { get; public set; }
    public bool IsEncrypted { get; public set; }
    [ReadWriteAttribute]
public bool IsEnabled { get; public set; }
    [ReadWriteAttribute]
public bool IsSqlClr { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public abstract virtual string get_BodyText();
    public abstract virtual void set_BodyText(string value);
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual void set_IsEncrypted(bool value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual bool get_IsSqlClr();
    public abstract virtual void set_IsSqlClr(bool value);
    public abstract virtual IExecutionContext get_ExecutionContext();
    public abstract virtual void set_ExecutionContext(IExecutionContext value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableTriggerEventTypeSet {
    public abstract virtual void Add(string item);
    public abstract virtual bool Remove(string item);
    public abstract virtual void Clear();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableUser {
    public IAsymmetricKey AsymmetricKey { get; public set; }
    public ICertificate Certificate { get; public set; }
    public ILogin Login { get; public set; }
    public string Password { get; public set; }
    public ISchema DefaultSchema { get; public set; }
    public abstract virtual IAsymmetricKey get_AsymmetricKey();
    public abstract virtual void set_AsymmetricKey(IAsymmetricKey value);
    public abstract virtual ICertificate get_Certificate();
    public abstract virtual void set_Certificate(ICertificate value);
    public abstract virtual ILogin get_Login();
    public abstract virtual void set_Login(ILogin value);
    public abstract virtual string get_Password();
    public abstract virtual void set_Password(string value);
    public abstract virtual ISchema get_DefaultSchema();
    public abstract virtual void set_DefaultSchema(ISchema value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableUserDefinedClrType {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableUserDefinedDataType {
    public bool Nullable { get; public set; }
    public abstract virtual bool get_Nullable();
    public abstract virtual void set_Nullable(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableUserDefinedFunction {
    public string BodyText { get; public set; }
    public bool IsSchemaBound { get; public set; }
    public bool IsSqlClr { get; public set; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public abstract virtual string get_BodyText();
    public abstract virtual void set_BodyText(string value);
    public abstract virtual bool get_IsSchemaBound();
    public abstract virtual void set_IsSchemaBound(bool value);
    public abstract virtual bool get_IsSqlClr();
    public abstract virtual void set_IsSqlClr(bool value);
    public abstract virtual bool get_IsQuotedIdentifierOn();
    public abstract virtual void set_IsQuotedIdentifierOn(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableUserDefinedFunctionModuleBase {
    public bool IsEncrypted { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual void set_IsEncrypted(bool value);
    public abstract virtual IExecutionContext get_ExecutionContext();
    public abstract virtual void set_ExecutionContext(IExecutionContext value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableUserDefinedTableType {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableUserDefinedType {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableView {
    public bool IsEncrypted { get; public set; }
    public bool IsSchemaBound { get; public set; }
    public string QueryText { get; public set; }
    public bool ReturnsViewMetadata { get; public set; }
    public bool HasCheckOption { get; public set; }
    public bool HasColumnSpecification { get; public set; }
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual void set_IsEncrypted(bool value);
    public abstract virtual bool get_IsSchemaBound();
    public abstract virtual void set_IsSchemaBound(bool value);
    public abstract virtual string get_QueryText();
    public abstract virtual void set_QueryText(string value);
    public abstract virtual bool get_ReturnsViewMetadata();
    public abstract virtual void set_ReturnsViewMetadata(bool value);
    public abstract virtual bool get_HasCheckOption();
    public abstract virtual void set_HasCheckOption(bool value);
    public abstract virtual bool get_HasColumnSpecification();
    public abstract virtual void set_HasColumnSpecification(bool value);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableVirtualTable {
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.IndexType : Enum {
    public int value__;
    public static IndexType Relational;
    public static IndexType Spatial;
    public static IndexType Xml;
}
internal enum Microsoft.SqlServer.Management.SqlParser.Metadata.InheritanceType : Enum {
    public int value__;
    public static InheritanceType Inherited;
    public static InheritanceType NotInherited;
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter {
    [AbstractAttribute]
public bool IsOutput { get; }
    [AbstractAttribute]
public bool IsReadOnly { get; }
    [AbstractAttribute]
public string DefaultValue { get; }
    public abstract virtual bool get_IsOutput();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual string get_DefaultValue();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IPartitionScheme {
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IFileGroup> FileGroups { get; }
    public abstract virtual IMetadataCollection`1<IFileGroup> get_FileGroups();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IPassword {
    [ReadWriteAttribute]
public string Value { get; }
    [ReadWriteAttribute]
public bool IsHashed { get; }
    [ReadWriteAttribute]
public bool MustChange { get; }
    [ReadWriteAttribute]
public bool CheckPolicy { get; }
    [ReadWriteAttribute]
public bool CheckExpiration { get; }
    public abstract virtual string get_Value();
    public abstract virtual bool get_IsHashed();
    public abstract virtual bool get_MustChange();
    public abstract virtual bool get_CheckPolicy();
    public abstract virtual bool get_CheckExpiration();
}
[MetadataAttribute]
[ConstantAttribute("Type", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IPrimaryKeyConstraint {
}
internal interface Microsoft.SqlServer.Management.SqlParser.Metadata.IPropertyAttribute {
    public string PropertyName { get; }
    public abstract virtual string get_PropertyName();
}
internal interface Microsoft.SqlServer.Management.SqlParser.Metadata.IPropertyInferredAttribute {
}
internal interface Microsoft.SqlServer.Management.SqlParser.Metadata.IPropertyTypeAttribute {
    public InheritanceType InheritanceType { get; }
    public abstract virtual InheritanceType get_InheritanceType();
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.SqlServer.Management.SqlParser.Metadata.IReadOnlyArray`1 {
    public int Length { get; }
    public T Item { get; }
    public abstract virtual int get_Length();
    public abstract virtual T get_Item(int index);
}
[MetadataAttribute]
[ConstantAttribute("Type", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex {
    [ReadWriteAttribute]
public bool CompactLargeObjects { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IFileGroup FileGroup { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IFileGroup FileStreamFileGroup { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IPartitionScheme FileStreamPartitionScheme { get; }
    [ReadWriteAttribute]
public string FilterDefinition { get; }
    [ReadWriteAttribute]
public IMetadataOrderedCollection`1<IIndexedColumn> IndexedColumns { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IUniqueConstraintBase IndexKey { get; }
    [ReadWriteAttribute]
public bool IsClustered { get; }
    [ReadWriteAttribute]
public bool IsSystemNamed { get; }
    [ReadWriteAttribute]
public bool IsUnique { get; }
    [ReadWriteAttribute]
public bool NoAutomaticRecomputation { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IPartitionScheme PartitionScheme { get; }
    public abstract virtual bool get_CompactLargeObjects();
    public abstract virtual IFileGroup get_FileGroup();
    public abstract virtual IFileGroup get_FileStreamFileGroup();
    public abstract virtual IPartitionScheme get_FileStreamPartitionScheme();
    public abstract virtual string get_FilterDefinition();
    public abstract virtual IMetadataOrderedCollection`1<IIndexedColumn> get_IndexedColumns();
    public abstract virtual IUniqueConstraintBase get_IndexKey();
    public abstract virtual bool get_IsClustered();
    public abstract virtual bool get_IsSystemNamed();
    public abstract virtual bool get_IsUnique();
    public abstract virtual bool get_NoAutomaticRecomputation();
    public abstract virtual IPartitionScheme get_PartitionScheme();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedExtendedStoredProcedureSynonym {
    public IExtendedStoredProcedure TargetObject { get; }
    public abstract virtual IExtendedStoredProcedure get_TargetObject();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedScalarValuedFunctionSynonym {
    public IScalarValuedFunction TargetObject { get; }
    public abstract virtual IScalarValuedFunction get_TargetObject();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedStoredProcedureSynonym {
    public IStoredProcedure TargetObject { get; }
    public abstract virtual IStoredProcedure get_TargetObject();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedSynonym {
    public ISynonym Synonym { get; }
    public ISchemaOwnedObject TargetObject { get; }
    public abstract virtual ISynonym get_Synonym();
    public abstract virtual ISchemaOwnedObject get_TargetObject();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedTableSynonym {
    public ITable TargetObject { get; }
    public abstract virtual ITable get_TargetObject();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedTableValuedFunctionSynonym {
    public ITableValuedFunction TargetObject { get; }
    public abstract virtual ITableValuedFunction get_TargetObject();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedUserDefinedAggregateSynonym {
    public IUserDefinedAggregate TargetObject { get; }
    public abstract virtual IUserDefinedAggregate get_TargetObject();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedViewSynonym {
    public IView TargetObject { get; }
    public abstract virtual IView get_TargetObject();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar {
    [AbstractAttribute]
public ScalarType ScalarType { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IScalarDataType DataType { get; }
    [ReadWriteAttribute]
public bool Nullable { get; }
    public abstract virtual ScalarType get_ScalarType();
    public abstract virtual IScalarDataType get_DataType();
    public abstract virtual bool get_Nullable();
}
[MetadataAttribute("1")]
[ReadOnlyAttribute("Name")]
[ValueAttribute("1", "Name")]
[ConstantAttribute("1", "IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType {
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType")]
public bool IsSystem { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType")]
public bool IsClr { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType")]
public bool IsXml { get; }
    [IsTypeAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.IVoidDataType")]
public bool IsVoid { get; }
    [ConstantAttribute("1", "Mono.Cecil.CustomAttributeArgument")]
public ISystemDataType BaseSystemDataType { get; }
    public abstract virtual bool get_IsSystem();
    public abstract virtual bool get_IsClr();
    public abstract virtual bool get_IsXml();
    public abstract virtual bool get_IsVoid();
    public abstract virtual ISystemDataType get_BaseSystemDataType();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarExpression {
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarFunction {
    [AbstractAttribute]
public bool IsAggregateFunction { get; }
    public abstract virtual bool get_IsAggregateFunction();
}
[MetadataAttribute("1")]
[ReadOnlyAttribute("IsOutput")]
[ConstantAttribute("IsReadOnly", "Mono.Cecil.CustomAttributeArgument")]
[ReadOnlyAttribute("DefaultValue")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarParameter {
}
[MetadataAttribute]
[ConstantAttribute("ModuleType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("ScalarType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsAggregateFunction", "Mono.Cecil.CustomAttributeArgument")]
[DuplicateAttribute("ReturnType", "DataType")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarValuedFunction {
    [ReadWriteAttribute]
public bool ReturnsNullOnNullInput { get; }
    public abstract virtual bool get_ReturnsNullOnNullInput();
}
[MetadataAttribute("1")]
[ConstantAttribute("ScalarType", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarVariable {
    [ReadOnlyAttribute]
[ReferenceAttribute]
public IScalarDataType DataType { get; }
    public abstract virtual IScalarDataType get_DataType();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema {
    [ReadWriteAttribute]
[ReferenceAttribute]
public IDatabasePrincipal Owner { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<ITable> Tables { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IView> Views { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IUserDefinedAggregate> UserDefinedAggregates { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<ITableValuedFunction> TableValuedFunctions { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IScalarValuedFunction> ScalarValuedFunctions { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IStoredProcedure> StoredProcedures { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IExtendedStoredProcedure> ExtendedStoredProcedures { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IUserDefinedDataType> UserDefinedDataTypes { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IUserDefinedTableType> UserDefinedTableTypes { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IUserDefinedClrType> UserDefinedClrTypes { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<ISynonym> Synonyms { get; }
    public abstract virtual IDatabasePrincipal get_Owner();
    public abstract virtual IMetadataCollection`1<ITable> get_Tables();
    public abstract virtual IMetadataCollection`1<IView> get_Views();
    public abstract virtual IMetadataCollection`1<IUserDefinedAggregate> get_UserDefinedAggregates();
    public abstract virtual IMetadataCollection`1<ITableValuedFunction> get_TableValuedFunctions();
    public abstract virtual IMetadataCollection`1<IScalarValuedFunction> get_ScalarValuedFunctions();
    public abstract virtual IMetadataCollection`1<IStoredProcedure> get_StoredProcedures();
    public abstract virtual IMetadataCollection`1<IExtendedStoredProcedure> get_ExtendedStoredProcedures();
    public abstract virtual IMetadataCollection`1<IUserDefinedDataType> get_UserDefinedDataTypes();
    public abstract virtual IMetadataCollection`1<IUserDefinedTableType> get_UserDefinedTableTypes();
    public abstract virtual IMetadataCollection`1<IUserDefinedClrType> get_UserDefinedClrTypes();
    public abstract virtual IMetadataCollection`1<ISynonym> get_Synonyms();
}
[MetadataAttribute("2")]
[DuplicateAttribute("Parent", "Schema")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject {
    [ReadOnlyAttribute]
[ParentAttribute]
public ISchema Schema { get; }
    public abstract virtual ISchema get_Schema();
    public abstract virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor`1 {
    public abstract virtual T Visit(IExtendedStoredProcedure extendedStoredProcedure);
    public abstract virtual T Visit(IScalarValuedFunction scalarValuedFunction);
    public abstract virtual T Visit(IStoredProcedure storedProcedure);
    public abstract virtual T Visit(ISynonym synonym);
    public abstract virtual T Visit(ITable table);
    public abstract virtual T Visit(ITableValuedFunction tableValuedFunction);
    public abstract virtual T Visit(IUserDefinedAggregate userDefinedAggregate);
    public abstract virtual T Visit(IUserDefinedClrType userDefinedClrType);
    public abstract virtual T Visit(IUserDefinedDataType userDefinedDataType);
    public abstract virtual T Visit(IUserDefinedTableType userDefinedTableType);
    public abstract virtual T Visit(IView view);
}
[MetadataAttribute]
[ConstantAttribute("Parent", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IServer {
    [ReadOnlyAttribute]
public CollationInfo CollationInfo { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IDatabase> Databases { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<ICredential> Credentials { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<ILogin> Logins { get; }
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IServerDdlTrigger> Triggers { get; }
    public abstract virtual CollationInfo get_CollationInfo();
    public abstract virtual IMetadataCollection`1<IDatabase> get_Databases();
    public abstract virtual IMetadataCollection`1<ICredential> get_Credentials();
    public abstract virtual IMetadataCollection`1<ILogin> get_Logins();
    public abstract virtual IMetadataCollection`1<IServerDdlTrigger> get_Triggers();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IServerDdlTrigger {
    [ReadWriteAttribute]
public ITriggerEventTypeSet ServerDdlEvents { get; }
    [ReadWriteAttribute]
public bool IsQuotedIdentifierOn { get; }
    public abstract virtual ITriggerEventTypeSet get_ServerDdlEvents();
    public abstract virtual bool get_IsQuotedIdentifierOn();
}
[MetadataAttribute("2")]
[DuplicateAttribute("Parent", "Server")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject {
    [ReadOnlyAttribute]
[ParentAttribute]
public IServer Server { get; }
    public abstract virtual IServer get_Server();
    public abstract virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObjectVisitor`1 {
    public abstract virtual T Visit(ICredential credential);
    public abstract virtual T Visit(IDatabase database);
    public abstract virtual T Visit(ILogin login);
    public abstract virtual T Visit(IServerDdlTrigger serverDdlTrigger);
}
[ConstantAttribute("Type", "Mono.Cecil.CustomAttributeArgument")]
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex {
    [ReadWriteAttribute]
public double BoundingBoxXMax { get; }
    [ReadWriteAttribute]
public double BoundingBoxXMin { get; }
    [ReadWriteAttribute]
public double BoundingBoxYMax { get; }
    [ReadWriteAttribute]
public double BoundingBoxYMin { get; }
    [ReadWriteAttribute]
public int CellsPerObject { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IColumn IndexedColumn { get; }
    [ReadWriteAttribute]
public GridDensity Level1Density { get; }
    [ReadWriteAttribute]
public GridDensity Level2Density { get; }
    [ReadWriteAttribute]
public GridDensity Level3Density { get; }
    [ReadWriteAttribute]
public GridDensity Level4Density { get; }
    [ReadWriteAttribute]
public bool NoAutomaticRecomputation { get; }
    public abstract virtual double get_BoundingBoxXMax();
    public abstract virtual double get_BoundingBoxXMin();
    public abstract virtual double get_BoundingBoxYMax();
    public abstract virtual double get_BoundingBoxYMin();
    public abstract virtual int get_CellsPerObject();
    public abstract virtual IColumn get_IndexedColumn();
    public abstract virtual GridDensity get_Level1Density();
    public abstract virtual GridDensity get_Level2Density();
    public abstract virtual GridDensity get_Level3Density();
    public abstract virtual GridDensity get_Level4Density();
    public abstract virtual bool get_NoAutomaticRecomputation();
}
[MetadataAttribute]
[ReadOnlyAttribute("Name")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics {
    [ReadWriteAttribute]
public StatisticsType Type { get; }
    [ReadOnlyAttribute]
[ParentAttribute]
public ITabular Parent { get; }
    [ReadWriteAttribute]
public string FilterDefinition { get; }
    [ReadWriteAttribute]
public bool NoAutomaticRecomputation { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public abstract virtual StatisticsType get_Type();
    public abstract virtual ITabular get_Parent();
    public abstract virtual string get_FilterDefinition();
    public abstract virtual bool get_NoAutomaticRecomputation();
    public abstract virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
}
[MetadataAttribute]
[ConstantAttribute("ModuleType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("ReturnType", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure {
    [ReadWriteAttribute]
public string BodyText { get; }
    [ReadWriteAttribute]
public bool ForReplication { get; }
    [ReadWriteAttribute]
public bool IsRecompiled { get; }
    [ReadWriteAttribute]
public bool IsSqlClr { get; }
    [ReadWriteAttribute]
public bool Startup { get; }
    [ReadWriteAttribute]
public bool IsQuotedIdentifierOn { get; }
    public abstract virtual string get_BodyText();
    public abstract virtual bool get_ForReplication();
    public abstract virtual bool get_IsRecompiled();
    public abstract virtual bool get_IsSqlClr();
    public abstract virtual bool get_Startup();
    public abstract virtual bool get_IsQuotedIdentifierOn();
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.IsTypeAttribute : Attribute {
    private string propertyName;
    private Type type;
    public string PropertyName { get; }
    public Type Type { get; }
    public InheritanceType InheritanceType { get; }
    public IsTypeAttribute(Type type);
    public IsTypeAttribute(string propertyName, Type type);
    public sealed virtual string get_PropertyName();
    public Type get_Type();
    public sealed virtual InheritanceType get_InheritanceType();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.IsTypePropertyValueExpr : PropertyValueExpr {
    private Type type;
    public Type Type { get; }
    public IsTypePropertyValueExpr(Type type);
    public Type get_Type();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym {
    [ReadWriteAttribute]
public SynonymBaseType BaseType { get; }
    [ReadWriteAttribute]
public string BaseObjectName { get; }
    public abstract virtual SynonymBaseType get_BaseType();
    public abstract virtual string get_BaseObjectName();
}
[MetadataAttribute("1")]
[ConstantAttribute("BaseSystemDataType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("AssemblyName", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("ClassName", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsBinaryOrdered", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsComVisible", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsNullable", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("Methods", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("DataMembers", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemClrDataType {
}
[MetadataAttribute("1")]
[DuplicateAttribute("Name", "TypeSpec.Name")]
[ConstantAttribute("1", "BaseSystemDataType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("1", "IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType {
    [ReadOnlyAttribute]
public DataTypeSpec TypeSpec { get; }
    [ReadOnlyAttribute]
public int Length { get; }
    [ReadOnlyAttribute]
public int NumericPrecision { get; }
    [ReadOnlyAttribute]
public int NumericScale { get; }
    public abstract virtual DataTypeSpec get_TypeSpec();
    public abstract virtual int get_Length();
    public abstract virtual int get_NumericPrecision();
    public abstract virtual int get_NumericScale();
}
[MetadataAttribute]
[ConstantAttribute("TabularType", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITable {
}
[MetadataAttribute("1")]
[ReadOnlyAttribute("Name")]
[ValueAttribute("1", "Name")]
[ConstantAttribute("1", "IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("TabularType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("1", "CollationInfo", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITableDataType {
}
[MetadataAttribute("1")]
[ConstantAttribute("IsOutput", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsReadOnly", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("DefaultValue", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITableParameter {
}
[MetadataAttribute]
[ConstantAttribute("TabularType", "Mono.Cecil.CustomAttributeArgument")]
[DuplicateAttribute("CollationInfo", "Schema.Database.CollationInfo")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITableValuedFunction {
    [ReadWriteAttribute]
public bool IsInline { get; }
    [ReadWriteAttribute]
public string TableVariableName { get; }
    public abstract virtual bool get_IsInline();
    public abstract virtual string get_TableVariableName();
}
[MetadataAttribute("1")]
[ConstantAttribute("TabularType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("Unaliased", "Mono.Cecil.CustomAttributeArgument")]
[DuplicateAttribute("Columns", "DataType.Columns")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITableVariable {
    [ReadOnlyAttribute]
[ReferenceAttribute]
public ITableDataType DataType { get; }
    public abstract virtual ITableDataType get_DataType();
}
[MetadataAttribute("2")]
[DuplicateAttribute("CollationInfo", "Schema.Database.CollationInfo")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase {
    [ReadWriteAttribute]
[ChildAttribute]
public IMetadataCollection`1<IDmlTrigger> Triggers { get; }
    [ReadWriteAttribute]
public bool IsQuotedIdentifierOn { get; }
    public abstract virtual IMetadataCollection`1<IDmlTrigger> get_Triggers();
    public abstract virtual bool get_IsQuotedIdentifierOn();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular {
    [AbstractAttribute]
public TabularType TabularType { get; }
    [AbstractAttribute]
public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    [AbstractAttribute]
public ITabular Unaliased { get; }
    public abstract virtual TabularType get_TabularType();
    public abstract virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public abstract virtual ITabular get_Unaliased();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger {
    [ReadWriteAttribute]
public string BodyText { get; }
    [ReadWriteAttribute]
public bool IsEncrypted { get; }
    [ReadWriteAttribute]
public bool IsEnabled { get; }
    [ReadWriteAttribute]
public bool IsSqlClr { get; }
    [ReadWriteAttribute]
public IExecutionContext ExecutionContext { get; }
    public abstract virtual string get_BodyText();
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual bool get_IsSqlClr();
    public abstract virtual IExecutionContext get_ExecutionContext();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITriggerEventSet`1 {
    public abstract virtual bool Contains(T item);
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.ITriggerEventTypeSet {
    public abstract virtual bool Contains(string item);
}
[MetadataAttribute("1")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtDataMember {
}
[MetadataAttribute("2")]
[ReadOnlyAttribute("Name")]
[ConstantAttribute("ScalarType", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember {
    [ReadOnlyAttribute]
[ReferenceAttribute]
public IClrDataType UserDefinedType { get; }
    [ReadOnlyAttribute]
public bool IsStatic { get; }
    public abstract virtual IClrDataType get_UserDefinedType();
    public abstract virtual bool get_IsStatic();
}
[MetadataAttribute("1")]
[ConstantAttribute("IsAggregateFunction", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMethod {
}
[MetadataAttribute]
[ConstantAttribute("Type", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUniqueConstraint {
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUniqueConstraintBase {
    [ReadOnlyAttribute]
[ReferenceAttribute]
public IRelationalIndex AssociatedIndex { get; }
    public abstract virtual IRelationalIndex get_AssociatedIndex();
}
[MetadataAttribute]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUser {
    [ReadOnlyAttribute]
public UserType UserType { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public IAsymmetricKey AsymmetricKey { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ICertificate Certificate { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ILogin Login { get; }
    [ReadWriteAttribute]
public string Password { get; }
    [ReadWriteAttribute]
[ReferenceAttribute]
public ISchema DefaultSchema { get; }
    public abstract virtual UserType get_UserType();
    public abstract virtual IAsymmetricKey get_AsymmetricKey();
    public abstract virtual ICertificate get_Certificate();
    public abstract virtual ILogin get_Login();
    public abstract virtual string get_Password();
    public abstract virtual ISchema get_DefaultSchema();
}
[MetadataAttribute]
[ConstantAttribute("ScalarType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsAggregateFunction", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedAggregate {
}
[MetadataAttribute]
[ConstantAttribute("BaseSystemDataType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
[ReadWriteAttribute("AssemblyName")]
[ReadWriteAttribute("ClassName")]
[ReadWriteAttribute("IsBinaryOrdered")]
[ReadWriteAttribute("IsComVisible")]
[ReadWriteAttribute("IsNullable")]
[ReadWriteAttribute("Methods")]
[ReadWriteAttribute("DataMembers")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedClrType {
}
[MetadataAttribute]
[ReadWriteAttribute("BaseSystemDataType")]
[ReferenceAttribute("BaseSystemDataType")]
[ConstantAttribute("IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedDataType {
    [ReadWriteAttribute]
public bool Nullable { get; }
    public abstract virtual bool get_Nullable();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction {
    [ReadWriteAttribute]
public string BodyText { get; }
    [ReadWriteAttribute]
public bool IsSchemaBound { get; }
    [ReadWriteAttribute]
public bool IsSqlClr { get; }
    [ReadWriteAttribute]
public bool IsQuotedIdentifierOn { get; }
    public abstract virtual string get_BodyText();
    public abstract virtual bool get_IsSchemaBound();
    public abstract virtual bool get_IsSqlClr();
    public abstract virtual bool get_IsQuotedIdentifierOn();
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase {
    [ReadWriteAttribute]
public bool IsEncrypted { get; }
    [ReadWriteAttribute]
public IExecutionContext ExecutionContext { get; }
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual IExecutionContext get_ExecutionContext();
}
[MetadataAttribute]
[ConstantAttribute("IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
[DuplicateAttribute("CollationInfo", "Schema.Database.CollationInfo")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedTableType {
}
[MetadataAttribute("2")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedType {
}
[MetadataAttribute]
[ConstantAttribute("TabularType", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IView {
    [ReadWriteAttribute]
public bool IsEncrypted { get; }
    [ReadWriteAttribute]
public bool IsSchemaBound { get; }
    [ReadWriteAttribute]
public string QueryText { get; }
    [ReadWriteAttribute]
public bool ReturnsViewMetadata { get; }
    [ReadWriteAttribute]
public bool HasCheckOption { get; }
    [ReadWriteAttribute]
public bool HasColumnSpecification { get; }
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual bool get_IsSchemaBound();
    public abstract virtual string get_QueryText();
    public abstract virtual bool get_ReturnsViewMetadata();
    public abstract virtual bool get_HasCheckOption();
    public abstract virtual bool get_HasColumnSpecification();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IVirtualTable {
    public ITabular TargetTable { get; }
    public abstract virtual ITabular get_TargetTable();
}
[MetadataAttribute("1")]
[ConstantAttribute("Name", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("BaseSystemDataType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IVoidDataType {
}
[MetadataAttribute("1")]
[ConstantAttribute("BaseSystemDataType", "Mono.Cecil.CustomAttributeArgument")]
[ConstantAttribute("IsUnknown", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType {
    [ReadOnlyAttribute]
public bool IsXmlNode { get; }
    [ConstantAttribute("Mono.Cecil.CustomAttributeArgument")]
public IMetadataCollection`1<IXmlDataTypeMethod> Methods { get; }
    [ConstantAttribute("Mono.Cecil.CustomAttributeArgument")]
public IMetadataCollection`1<IXmlDataTypeTableMethod> TableMethods { get; }
    public abstract virtual bool get_IsXmlNode();
    public abstract virtual IMetadataCollection`1<IXmlDataTypeMethod> get_Methods();
    public abstract virtual IMetadataCollection`1<IXmlDataTypeTableMethod> get_TableMethods();
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataTypeMethod {
}
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataTypeTableMethod {
}
[MetadataAttribute]
[ConstantAttribute("Type", "Mono.Cecil.CustomAttributeArgument")]
public interface Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlIndex {
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.JsonNullQualifierType : Enum {
    public int value__;
    public static JsonNullQualifierType NullOnNull;
    public static JsonNullQualifierType AbsentOnNull;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.LoginType : Enum {
    public sbyte value__;
    public static LoginType AsymmetricKey;
    public static LoginType Certificate;
    public static LoginType Sql;
    public static LoginType Windows;
    public static LoginType External;
}
[AttributeUsageAttribute("1024")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataAttribute : Attribute {
    private MetadataType type;
    public MetadataType Type { get; }
    public MetadataAttribute(MetadataType type);
    public MetadataType get_Type();
}
internal static class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataIdConfig : object {
    private static MetadataTypeInfo rootTypeInfo;
    public static MetadataTypeInfo RootTypeInfo { get; }
    private static MetadataIdConfig();
    public static MetadataTypeInfo get_RootTypeInfo();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataIdGenerator : object {
    private Dictionary`2<IMetadataObject, MetadataObjectId> metadataIdMap;
    public virtual MetadataObjectSelector GetObjectSelector(IMetadataObject obj);
    protected bool IsRootObject(IMetadataObject obj);
    protected virtual IMetadataObject GetParent(IMetadataObject obj);
    protected virtual List`1<MetadataObjectSelector> GetObjectSelectors(IMetadataObject obj);
    public sealed virtual MetadataObjectId GenerateId(IMetadataObject obj);
}
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataIdResolver : object {
    private IServer server;
    public MetadataIdResolver(IServer server);
    public IMetadataObject ResolveObject(MetadataObjectId id);
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataInfo : object {
    private List`1<TypeInfo> types;
    public List`1<TypeInfo> Types { get; }
    public IEnumerable`1<MetadataTypeInfo> MetadataTypes { get; }
    public MetadataInfo(IEnumerable`1<TypeInfo> types);
    public List`1<TypeInfo> get_Types();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataInfo/<get_MetadataTypes>d__5")]
public IEnumerable`1<MetadataTypeInfo> get_MetadataTypes();
    public TypeInfo GetTypeInfoById(int id);
    public TypeInfo GetTypeInfoByType(Type type);
    public TypeInfo GetTypeInfoByName(string name);
}
public static class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataInfoProvider : object {
    private static MetadataInfo metadataInfo;
    public static MetadataInfo MetadataInfo { get; }
    private static MetadataInfoProvider();
    public static MetadataInfo get_MetadataInfo();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataObjectId : ValueType {
    private IList`1<MetadataObjectSelector> selectors;
    public IList`1<MetadataObjectSelector> Selectors { get; }
    public bool IsNull { get; }
    public static MetadataObjectId Null { get; }
    public MetadataObjectId(IList`1<MetadataObjectSelector> selectors);
    public IList`1<MetadataObjectSelector> get_Selectors();
    public bool get_IsNull();
    public static MetadataObjectId get_Null();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MetadataObjectId other);
    public virtual int GetHashCode();
    public static bool op_Equality(MetadataObjectId x, MetadataObjectId y);
    public static bool op_Inequality(MetadataObjectId x, MetadataObjectId y);
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataObjectSelector : ValueType {
    private MetadataTypeInfo typeInfo;
    private string name;
    public MetadataTypeInfo TypeInfo { get; }
    public string Name { get; }
    public MetadataObjectSelector(MetadataTypeInfo typeInfo, string name);
    public MetadataTypeInfo get_TypeInfo();
    public string get_Name();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MetadataObjectSelector other);
    public virtual int GetHashCode();
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataPropertyInfo : object {
    private int id;
    private int index;
    private PropertyType propertyType;
    private string name;
    private TypeInfo returnType;
    private bool isParent;
    private bool isReadWrite;
    private PropertyValueExpr valueExpr;
    public int Id { get; }
    public int Index { get; }
    public PropertyType PropertyType { get; }
    public string Name { get; }
    public bool IsParent { get; }
    public bool IsReadWrite { get; }
    public TypeInfo ReturnType { get; }
    public PropertyValueExpr ValueExpr { get; }
    public MetadataPropertyInfo(int id, int index, string name, TypeInfo returnType, PropertyType propertyType, bool isParent, bool isReadWrite, PropertyValueExpr valueExpr);
    internal MetadataPropertyInfo(int id, MetadataPropertyInfo other);
    public int get_Id();
    public int get_Index();
    public PropertyType get_PropertyType();
    public string get_Name();
    public bool get_IsParent();
    public bool get_IsReadWrite();
    public TypeInfo get_ReturnType();
    public PropertyValueExpr get_ValueExpr();
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataType : Enum {
    public int value__;
    public static MetadataType Reference;
    public static MetadataType Value;
    public static MetadataType Abstract;
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataTypeInfo : TypeInfo {
    private MetadataType metadataType;
    private List`1<MetadataPropertyInfo> instanceProperties;
    private List`1<MetadataPropertyInfo> inferredProperties;
    private MetadataPropertyInfo parentProperty;
    public MetadataType MetadataType { get; }
    public bool IsAbstract { get; }
    public bool IsConcrete { get; }
    public bool IsValue { get; }
    public bool IsReference { get; }
    public List`1<MetadataPropertyInfo> InstanceProperties { get; }
    public List`1<MetadataPropertyInfo> InferredProperties { get; }
    public IEnumerable`1<MetadataPropertyInfo> AllProperties { get; }
    public MetadataPropertyInfo ParentProperty { get; }
    public MetadataTypeInfo(Type type, int id, MetadataType metadataType);
    public void SetProperties(IList`1<MetadataPropertyInfo> instanceProperties, IList`1<MetadataPropertyInfo> inferredProperties);
    public MetadataType get_MetadataType();
    public bool get_IsAbstract();
    public bool get_IsConcrete();
    public bool get_IsValue();
    public bool get_IsReference();
    public List`1<MetadataPropertyInfo> get_InstanceProperties();
    public List`1<MetadataPropertyInfo> get_InferredProperties();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.MetadataTypeInfo/<get_AllProperties>d__21")]
public IEnumerable`1<MetadataPropertyInfo> get_AllProperties();
    public MetadataPropertyInfo GetPropertyByName(string name);
    public MetadataPropertyInfo get_ParentProperty();
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ParentAttribute : Attribute {
    private string propertyName;
    public string PropertyName { get; }
    public InheritanceType InheritanceType { get; }
    public ParentAttribute(string propertyName);
    public sealed virtual string get_PropertyName();
    public sealed virtual InheritanceType get_InheritanceType();
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.PermissionState : Enum {
    public int value__;
    public static PermissionState Deny;
    public static PermissionState Grant;
    public static PermissionState GrantWithGrant;
    public static PermissionState Revoke;
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.PrimitiveTypeInfo : TypeInfo {
    public PrimitiveTypeInfo(Type type, int id);
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.PropertValueExprType : Enum {
    public int value__;
    public static PropertValueExprType This;
    public static PropertValueExprType XmlMethods;
    public static PropertValueExprType XmlTableMethods;
    public static PropertValueExprType CursorDataType;
    public static PropertValueExprType IntDataType;
    public static PropertValueExprType DefaultCollationInfo;
    public static PropertValueExprType Constant;
    public static PropertValueExprType IsType;
    public static PropertValueExprType AsType;
    public static PropertValueExprType Duplicate;
    public static PropertValueExprType RandomGuid;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.PropertyType : Enum {
    public int value__;
    public static PropertyType Regular;
    public static PropertyType Child;
    public static PropertyType Inferred;
    public static PropertyType Abstract;
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.PropertyValueExpr : object {
    private PropertValueExprType exprType;
    public PropertValueExprType ExprType { get; }
    public PropertyValueExpr(PropertValueExprType exprType);
    public PropertValueExprType get_ExprType();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ReadOnlyArray`1 : ValueType {
    private T[] data;
    public int Length { get; }
    public T Item { get; }
    public ReadOnlyArray`1(T[] data);
    public sealed virtual int get_Length();
    public sealed virtual T get_Item(int index);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.Metadata.ReadOnlyArray`1/<GetEnumerator>d__6")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ReadOnlyAttribute : Attribute {
    private string propertyName;
    public string PropertyName { get; }
    public ReadOnlyAttribute(string propertyName);
    public sealed virtual string get_PropertyName();
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ReadWriteAttribute : Attribute {
    private string propertyName;
    public string PropertyName { get; }
    public ReadWriteAttribute(string propertyName);
    public sealed virtual string get_PropertyName();
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ReferenceAttribute : Attribute {
    private string propertyName;
    public string PropertyName { get; }
    public InheritanceType InheritanceType { get; }
    public ReferenceAttribute(string propertyName);
    public sealed virtual string get_PropertyName();
    public sealed virtual InheritanceType get_InheritanceType();
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.ScalarType : Enum {
    public int value__;
    public static ScalarType Column;
    public static ScalarType Expression;
    public static ScalarType Literal;
    public static ScalarType Null;
    public static ScalarType ScalarFunction;
    public static ScalarType ScalarVariable;
    public static ScalarType UdtMember;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal enum Microsoft.SqlServer.Management.SqlParser.Metadata.SpecialValue : Enum {
    public int value__;
    public static SpecialValue This;
    public static SpecialValue XmlMethods;
    public static SpecialValue XmlTableMethods;
    public static SpecialValue CursorDataType;
    public static SpecialValue IntDataType;
    public static SpecialValue DefaultCollationInfo;
    public static SpecialValue RandomGuid;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.SqlDataType : Enum {
    public int value__;
    public static SqlDataType None;
    public static SqlDataType BigInt;
    public static SqlDataType Binary;
    public static SqlDataType Bit;
    public static SqlDataType Char;
    public static SqlDataType Date;
    public static SqlDataType DateTime;
    public static SqlDataType DateTime2;
    public static SqlDataType DateTimeOffset;
    public static SqlDataType Decimal;
    public static SqlDataType Float;
    public static SqlDataType Geography;
    public static SqlDataType Geometry;
    public static SqlDataType HierarchyId;
    public static SqlDataType Image;
    public static SqlDataType Int;
    public static SqlDataType Money;
    public static SqlDataType NChar;
    public static SqlDataType NText;
    public static SqlDataType Numeric;
    public static SqlDataType NVarChar;
    public static SqlDataType NVarCharMax;
    public static SqlDataType Real;
    public static SqlDataType SmallDateTime;
    public static SqlDataType SmallInt;
    public static SqlDataType SmallMoney;
    public static SqlDataType SysName;
    public static SqlDataType Text;
    public static SqlDataType Time;
    public static SqlDataType Timestamp;
    public static SqlDataType TinyInt;
    public static SqlDataType UniqueIdentifier;
    public static SqlDataType VarBinary;
    public static SqlDataType VarBinaryMax;
    public static SqlDataType VarChar;
    public static SqlDataType VarCharMax;
    public static SqlDataType Variant;
    public static SqlDataType Xml;
    public static SqlDataType Json;
    public static SqlDataType XmlNode;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.StatisticsType : Enum {
    public int value__;
    public static StatisticsType Explicit;
    public static StatisticsType ImplicitViaIndex;
    public static StatisticsType Auto;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.SynonymBaseType : Enum {
    public int value__;
    public static SynonymBaseType None;
    public static SynonymBaseType ClrAggregateFunction;
    public static SynonymBaseType ClrScalarFunction;
    public static SynonymBaseType ClrStoredProcedure;
    public static SynonymBaseType ClrTableValuedFunction;
    public static SynonymBaseType ExtendedStoredProcedure;
    public static SynonymBaseType ReplicationFilterProcedure;
    public static SynonymBaseType SqlInlineTableValuedFunction;
    public static SynonymBaseType SqlScalarFunction;
    public static SynonymBaseType SqlStoredProcedure;
    public static SynonymBaseType SqlTableValuedFunction;
    public static SynonymBaseType Table;
    public static SynonymBaseType View;
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.TabularType : Enum {
    public int value__;
    public static TabularType CommonTableExpression;
    public static TabularType DerivedTable;
    public static TabularType DmlInsertedDeleted;
    public static TabularType DmlTableSource;
    public static TabularType PivotTable;
    public static TabularType Table;
    public static TabularType TableAlias;
    public static TabularType TableDataType;
    public static TabularType TableValuedFunction;
    public static TabularType TableVariable;
    public static TabularType TemporaryTable;
    public static TabularType UnpivotTable;
    public static TabularType View;
}
public class Microsoft.SqlServer.Management.SqlParser.Metadata.TriggerEventTypeSet : object {
    private HashSet`1<string> events;
    public sealed virtual void Add(string item);
    public sealed virtual bool Remove(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.Metadata.TypeInfo : object {
    private Type type;
    private int id;
    public string Name { get; }
    public Type Type { get; }
    public int Id { get; }
    public bool IsMetadata { get; }
    public bool IsCollection { get; }
    public bool IsPrimitive { get; }
    protected TypeInfo(Type type, int id);
    public string get_Name();
    public Type get_Type();
    public int get_Id();
    public bool get_IsMetadata();
    public bool get_IsCollection();
    public bool get_IsPrimitive();
    public sealed virtual int CompareTo(TypeInfo other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeInfo other);
}
internal static class Microsoft.SqlServer.Management.SqlParser.Metadata.TypeInfoDispatcher : object {
    public static T DispatchVisitor(MetadataTypeInfo typeInfo, IMetadataTypeInfoVisitor`1<T> visitor, IMetadataObject obj);
}
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.TypeInfoVisitor : object {
    public sealed virtual MetadataTypeInfo Visit(IBuiltInFunction obj);
    public sealed virtual MetadataTypeInfo Visit(ICheckConstraint obj);
    public sealed virtual MetadataTypeInfo Visit(IClrDataType obj);
    public sealed virtual MetadataTypeInfo Visit(ICollation obj);
    public sealed virtual MetadataTypeInfo Visit(IColumn obj);
    public sealed virtual MetadataTypeInfo Visit(ICursorDataType obj);
    public sealed virtual MetadataTypeInfo Visit(ICursorParameter obj);
    public sealed virtual MetadataTypeInfo Visit(ICursorVariable obj);
    public sealed virtual MetadataTypeInfo Visit(IDatabasePermission obj);
    public sealed virtual MetadataTypeInfo Visit(IDatePart obj);
    public sealed virtual MetadataTypeInfo Visit(IIsJsonValueType obj);
    public sealed virtual MetadataTypeInfo Visit(IDefaultConstraint obj);
    public sealed virtual MetadataTypeInfo Visit(IDmlTrigger obj);
    public sealed virtual MetadataTypeInfo Visit(IExecutionContext obj);
    public sealed virtual MetadataTypeInfo Visit(IForeignKeyColumn obj);
    public sealed virtual MetadataTypeInfo Visit(IForeignKeyConstraint obj);
    public sealed virtual MetadataTypeInfo Visit(IIndexedColumn obj);
    public sealed virtual MetadataTypeInfo Visit(IJsonNullQualifier obj);
    public sealed virtual MetadataTypeInfo Visit(IPrimaryKeyConstraint obj);
    public sealed virtual MetadataTypeInfo Visit(IRelationalIndex obj);
    public sealed virtual MetadataTypeInfo Visit(IScalarExpression obj);
    public sealed virtual MetadataTypeInfo Visit(IScalarDataType obj);
    public sealed virtual MetadataTypeInfo Visit(IScalarParameter obj);
    public sealed virtual MetadataTypeInfo Visit(IScalarVariable obj);
    public sealed virtual MetadataTypeInfo Visit(ISpatialIndex obj);
    public sealed virtual MetadataTypeInfo Visit(IStatistics obj);
    public sealed virtual MetadataTypeInfo Visit(ISystemDataType obj);
    public sealed virtual MetadataTypeInfo Visit(ISystemClrDataType obj);
    public sealed virtual MetadataTypeInfo Visit(ITableDataType obj);
    public sealed virtual MetadataTypeInfo Visit(ITableParameter obj);
    public sealed virtual MetadataTypeInfo Visit(ITableVariable obj);
    public sealed virtual MetadataTypeInfo Visit(IUdtDataMember obj);
    public sealed virtual MetadataTypeInfo Visit(IUdtMethod obj);
    public sealed virtual MetadataTypeInfo Visit(IUniqueConstraint obj);
    public sealed virtual MetadataTypeInfo Visit(IVirtualTable obj);
    public sealed virtual MetadataTypeInfo Visit(IVoidDataType obj);
    public sealed virtual MetadataTypeInfo Visit(IXmlDataType obj);
    public sealed virtual MetadataTypeInfo Visit(IXmlDataTypeMethod obj);
    public sealed virtual MetadataTypeInfo Visit(IXmlDataTypeTableMethod obj);
    public sealed virtual MetadataTypeInfo Visit(IXmlIndex obj);
    public sealed virtual MetadataTypeInfo Visit(IServer obj);
    public sealed virtual MetadataTypeInfo Visit(ICredential obj);
    public sealed virtual MetadataTypeInfo Visit(IDatabase obj);
    public sealed virtual MetadataTypeInfo Visit(ILogin obj);
    public sealed virtual MetadataTypeInfo Visit(IServerDdlTrigger obj);
    public sealed virtual MetadataTypeInfo Visit(IApplicationRole obj);
    public sealed virtual MetadataTypeInfo Visit(IAsymmetricKey obj);
    public sealed virtual MetadataTypeInfo Visit(ICertificate obj);
    public sealed virtual MetadataTypeInfo Visit(IDatabaseDdlTrigger obj);
    public sealed virtual MetadataTypeInfo Visit(IDatabaseRole obj);
    public sealed virtual MetadataTypeInfo Visit(IFileGroup obj);
    public sealed virtual MetadataTypeInfo Visit(IPartitionScheme obj);
    public sealed virtual MetadataTypeInfo Visit(ISchema obj);
    public sealed virtual MetadataTypeInfo Visit(IUser obj);
    public sealed virtual MetadataTypeInfo Visit(IExtendedStoredProcedure obj);
    public sealed virtual MetadataTypeInfo Visit(IScalarValuedFunction obj);
    public sealed virtual MetadataTypeInfo Visit(IStoredProcedure obj);
    public sealed virtual MetadataTypeInfo Visit(ISynonym obj);
    public sealed virtual MetadataTypeInfo Visit(ITable obj);
    public sealed virtual MetadataTypeInfo Visit(ITableValuedFunction obj);
    public sealed virtual MetadataTypeInfo Visit(IUserDefinedAggregate obj);
    public sealed virtual MetadataTypeInfo Visit(IUserDefinedClrType obj);
    public sealed virtual MetadataTypeInfo Visit(IUserDefinedDataType obj);
    public sealed virtual MetadataTypeInfo Visit(IUserDefinedTableType obj);
    public sealed virtual MetadataTypeInfo Visit(IView obj);
}
public enum Microsoft.SqlServer.Management.SqlParser.Metadata.UserType : Enum {
    public sbyte value__;
    public static UserType AsymmetricKey;
    public static UserType Certificate;
    public static UserType NoLogin;
    public static UserType SqlLogin;
    public static UserType Password;
    public static UserType External;
}
[AttributeUsageAttribute("1152")]
internal class Microsoft.SqlServer.Management.SqlParser.Metadata.ValueAttribute : Attribute {
    private InheritanceType inheritanceType;
    private string propertyName;
    public string PropertyName { get; }
    public InheritanceType InheritanceType { get; }
    public ValueAttribute(string propertyName);
    public ValueAttribute(InheritanceType inheritanceType);
    public ValueAttribute(InheritanceType inheritanceType, string propertyName);
    public sealed virtual string get_PropertyName();
    public sealed virtual InheritanceType get_InheritanceType();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.ChangeResult : object {
    private List`1<IMetadataObject> createdObjects;
    private List`1<IMetadataObject> deletedObjects;
    private IDictionary`2<IMetadataObject, ObjectDifference> sourceModifiedObjects;
    private IDictionary`2<IMetadataObject, ObjectDifference> targetModifiedObjects;
    public IEnumerable`1<IMetadataObject> CreatedObjects { get; }
    public IEnumerable`1<IMetadataObject> DeletedObjects { get; }
    public IDictionary`2<IMetadataObject, ObjectDifference> SourceModifiedObjects { get; }
    public IDictionary`2<IMetadataObject, ObjectDifference> TargetModifiedObjects { get; }
    internal ChangeResult(IEnumerable`1<IMetadataObject> createdObjects, IEnumerable`1<IMetadataObject> deletedObjects, IDictionary`2<IMetadataObject, ObjectDifference> sourceModifiedObjects, IDictionary`2<IMetadataObject, ObjectDifference> targetModifiedObjects);
    public IEnumerable`1<IMetadataObject> get_CreatedObjects();
    public IEnumerable`1<IMetadataObject> get_DeletedObjects();
    public IDictionary`2<IMetadataObject, ObjectDifference> get_SourceModifiedObjects();
    public IDictionary`2<IMetadataObject, ObjectDifference> get_TargetModifiedObjects();
    public bool IsEmpty();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.ChangeResultBuilder : object {
    private List`1<IMetadataObject> createdObjects;
    private List`1<IMetadataObject> deletedObjects;
    private IDictionary`2<IMetadataObject, ObjectDifference> sourceModifiedObjects;
    private IDictionary`2<IMetadataObject, ObjectDifference> targetModifiedObjects;
    public ChangeResult GetChangeResult();
    public void AddCreatedEntry(IMetadataObject createdObject);
    public void AddDeletedEntry(IMetadataObject deletedObject);
    public void AddModifiedEntry(IMetadataObject changedObjectSource, IMetadataObject changedObjectTarget, PropertyDifference propertyDifference);
    public void AddOrderedScalarDifferenceEntry(IMetadataObject changedObjectSource, IMetadataObject changedObjectTarget, OrderedScalarDifference orderedDifference);
    private ObjectDifference CreateObjectDifference(IMetadataObject changedObjectSource, IMetadataObject changedObjectTarget);
    private OrderedCollectionDifference CreateCollectionDifference(string propertyName, ObjectDifference objectDifference);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.CollectionChildTypeComparer : PropertyComparer {
    public CollectionChildTypeComparer(PropertyComparerFactory creator, ChangeResultBuilder changeResultBuilder, IDifferencerFilter differenceFilter);
    public virtual bool Process(IMetadataObject sourceParent, IMetadataObject targetParent, MetadataPropertyInfo propertyInfo, bool addToChangeResult);
    private bool IsDeletedObjectIgnored(IMetadataObject metadataObj);
    private bool IsCreatedObjectIgnored(IMetadataObject metadataObj);
    private List`1<CollectionElement> GetElements(IEnumerable`1<IMetadataObject> collection, IMetadataObject parent, MetadataPropertyInfo propertyInfo);
    private static int CompareCollectionElements(CollectionElement left, CollectionElement right);
    private static int CompareObjectIds(MetadataObjectId left, MetadataObjectId right);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.CollectionRegularTypeComparer : PropertyComparer {
    public CollectionRegularTypeComparer(PropertyComparerFactory creator, ChangeResultBuilder changeResultBuilder, IDifferencerFilter differenceFilter);
    public virtual bool Process(IMetadataObject sourceParent, IMetadataObject targetParent, MetadataPropertyInfo propertyInfo, bool addToChangeResult);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.Differencer : object {
    public static ChangeResult Compare(IDatabaseObject source, IDatabaseObject target, IDifferencerFilter differenceFilter);
    private static bool AreTypesEqual(IDatabaseObject source, IDatabaseObject target);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.DifferencerException : Exception {
    internal DifferencerException(string message);
    internal DifferencerException(string message, Exception innerException);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.DifferencerIdGenerator : DatabaseRelativeIdGenerator {
    public DifferencerIdGenerator(IDatabaseObject sourceRoot, IDatabaseObject targetRoot);
    public virtual MetadataObjectSelector GetObjectSelector(IMetadataObject obj);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.DifferencerIdResolver : object {
    private IServer server;
    private IDatabaseObject root;
    public DifferencerIdResolver(IDatabaseObject root);
    public IMetadataObject ResolveObject(MetadataObjectId id);
    public bool ObjectExists(MetadataObjectId id);
    private static IServer GetServer(IDatabaseObject databaseObject);
}
internal static class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.DifferencerUtils : object {
    public static bool IsSystemObject(IMetadataObject obj);
    public static bool IsPropertySkipped(IMetadataObject obj, MetadataTypeInfo typeInfo, MetadataPropertyInfo propertyInfo);
    public static bool IsPropertyTypeComparable(MetadataPropertyInfo propertyInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.HashCodeGenerator : object {
    private static int MaxRecursionDepth;
    private MetadataIdGenerator metadataIdGenerator;
    private IDifferencerFilter differencerFilter;
    public HashCodeGenerator(MetadataIdGenerator metadataIdGenerator, IDifferencerFilter differencerFilter);
    public int GetHashCode(IMetadataObject obj);
    private int GetObjectHashCode(IMetadataObject obj, int depthLeft);
    private int GetUnnamedObjectHashCode(IMetadataObject obj, int depthLeft);
    private int GetPropertyHashCode(object value, MetadataTypeInfo typeInfo, MetadataPropertyInfo instancePropertyInfo, int depthLeft);
    private static int GetPrimitiveHashCode(object value);
    private static int MergeHashCode(int a, int b, bool symetrical);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.IDifferencerFilter {
    public abstract virtual IEqualityComparer GetEqualityComparer(MetadataTypeInfo typeInfo, MetadataPropertyInfo propertyInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.MetadataChildTypeComparer : PropertyComparer {
    public MetadataChildTypeComparer(PropertyComparerFactory creator, ChangeResultBuilder changeResultBuilder, IDifferencerFilter differenceFilter);
    public virtual bool Process(IMetadataObject sourceParent, IMetadataObject targetParent, MetadataPropertyInfo propertyInfo, bool addToChangeResult);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.MetadataRegularTypeComparer : PropertyComparer {
    public MetadataRegularTypeComparer(PropertyComparerFactory creator, ChangeResultBuilder changeResultBuilder, IDifferencerFilter differenceFilter);
    public virtual bool Process(IMetadataObject sourceParent, IMetadataObject targetParent, MetadataPropertyInfo propertyInfo, bool addToChangeResult);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.ObjectDifference : object {
    private IMetadataObject changedObjectSource;
    private IMetadataObject changedObjectTarget;
    private IDictionary`2<string, PropertyDifference> propertyDifferences;
    public IMetadataObject ChangedObjectSource { get; }
    public IMetadataObject ChangedObjectTarget { get; }
    public IDictionary`2<string, PropertyDifference> PropertyDifferences { get; }
    internal ObjectDifference(IMetadataObject changedObjectSource, IMetadataObject changedObjectTarget);
    public IMetadataObject get_ChangedObjectSource();
    public IMetadataObject get_ChangedObjectTarget();
    public IDictionary`2<string, PropertyDifference> get_PropertyDifferences();
    internal void AddModifiedEntry(PropertyDifference propertyDifference);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.OrderedCollectionDifference : PropertyDifference {
    private List`1<OrderedScalarDifference> orderDifferences;
    public IEnumerable`1<OrderedScalarDifference> OrderDifferences { get; }
    internal OrderedCollectionDifference(string propertyName);
    public IEnumerable`1<OrderedScalarDifference> get_OrderDifferences();
    internal void AddOrderedScalarDifferenceEntry(OrderedScalarDifference orderedDifference);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.OrderedScalarDifference : ScalarDifference {
    private int sourceIndex;
    private int targetIndex;
    public int SourceIndex { get; }
    public int TargetIndex { get; }
    internal OrderedScalarDifference(string propertyName, object sourceValue, int sourceIndex, object targetValue, int targetIndex);
    public int get_SourceIndex();
    public int get_TargetIndex();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.PrimitiveTypeComparer : PropertyComparer {
    public PrimitiveTypeComparer(PropertyComparerFactory creator, ChangeResultBuilder changeResultBuilder, IDifferencerFilter differenceFilter);
    public virtual bool Process(IMetadataObject sourceParent, IMetadataObject targetParent, MetadataPropertyInfo propertyInfo, bool addToChangeResult);
    public bool Compare(object sourceValue, object targetValue, MetadataPropertyInfo propertyInfo);
    private static bool AreDefaultEqual(object source, object target);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.PropertyComparer : object {
    private ChangeResultBuilder changeResultBuilder;
    private PropertyComparerFactory propertyComparerFactory;
    private IDifferencerFilter differenceFilter;
    public ChangeResultBuilder ChangeResultBuilder { get; }
    protected PropertyComparerFactory PropertyComparerFactory { get; }
    public IDifferencerFilter DifferenceFilter { get; }
    public UnnamedObjectsIdentityAssumptions EqualityAssumptions { get; }
    protected PropertyComparer(PropertyComparerFactory propertyComparerFactory, ChangeResultBuilder changeResultBuilder, IDifferencerFilter differenceFilter);
    public abstract virtual bool Process(IMetadataObject sourceParent, IMetadataObject targetParent, MetadataPropertyInfo propertyInfo, bool addToChangeResult);
    public ChangeResultBuilder get_ChangeResultBuilder();
    protected PropertyComparerFactory get_PropertyComparerFactory();
    public IDifferencerFilter get_DifferenceFilter();
    public UnnamedObjectsIdentityAssumptions get_EqualityAssumptions();
    public bool ProcessNodes(IMetadataObject source, IMetadataObject target, bool addToChangeResult);
    protected MetadataObjectId GetMetadataObjectId(IMetadataObject metadataObject);
    public static bool IsOrderedCollection(MetadataPropertyInfo propertyInfo);
    protected bool CompareRegularMetadataObjects(IMetadataObject sourceObject, IMetadataObject targetObject);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.PropertyComparerFactory : object {
    private ChangeResultBuilder changeResultBuilder;
    private UnnamedObjectsIdentityAssumptions equalityAssumptions;
    private DifferencerIdGenerator metadataIdGenerator;
    private DifferencerIdResolver sourceIdResolver;
    private DifferencerIdResolver targetIdResolver;
    private HashCodeGenerator hashCodeGenerator;
    private PrimitiveTypeComparer primitiveTypeComparer;
    private CollectionChildTypeComparer collectionChildTypeComparer;
    private CollectionRegularTypeComparer collectionRegularTypeComparer;
    private MetadataChildTypeComparer metadataChildTypeComparer;
    private MetadataRegularTypeComparer metadataRegularTypeComparer;
    public DifferencerIdGenerator MetadataIdGenerator { get; }
    public UnnamedObjectsIdentityAssumptions EqualityAssumptions { get; }
    public HashCodeGenerator HashCodeGenerator { get; }
    public DifferencerIdResolver SourceIdResolver { get; }
    public DifferencerIdResolver TargetIdResolver { get; }
    public PropertyComparerFactory(DifferencerIdGenerator metadataIdGenerator, IDifferencerFilter differenceFilter, DifferencerIdResolver sourceIdResolver, DifferencerIdResolver targetIdResolver);
    public DifferencerIdGenerator get_MetadataIdGenerator();
    public UnnamedObjectsIdentityAssumptions get_EqualityAssumptions();
    public HashCodeGenerator get_HashCodeGenerator();
    public DifferencerIdResolver get_SourceIdResolver();
    public DifferencerIdResolver get_TargetIdResolver();
    public ChangeResult Process(IMetadataObject source, IMetadataObject target);
    public PropertyComparer Create(MetadataPropertyInfo propertyInfo);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.PropertyDifference : object {
    private string name;
    public string Name { get; }
    internal PropertyDifference(string name);
    public string get_Name();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.ScalarDifference : PropertyDifference {
    private object sourceValue;
    private object targetValue;
    public object SourceValue { get; }
    public object TargetValue { get; }
    internal ScalarDifference(string propertyName, object sourceValue, object targetValue);
    public object get_SourceValue();
    public object get_TargetValue();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataDifferencer.UnnamedObjectsIdentityAssumptions : object {
    private HashSet`1<IMetadataObject> allObjects;
    private HashSet`1<UnorderedPair`1<IMetadataObject>> equalObjects;
    public void AddEqualityAssumption(IMetadataObject left, IMetadataObject right);
    public void RemoveEqualityAssumption(IMetadataObject left, IMetadataObject right);
    public bool AreAssumedEqual(IMetadataObject left, IMetadataObject right);
    public bool CanBeAssumedEqual(IMetadataObject left, IMetadataObject right);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ApplicationRoleCollection : DualTypeSortedListCollection`2<IApplicationRole, IDatabasePrincipal> {
    public ApplicationRoleCollection(CollationInfo collationInfo);
    public ApplicationRoleCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.AsymmetricKeyCollection : DualTypeSortedListCollection`2<IAsymmetricKey, IDatabaseObject> {
    public AsymmetricKeyCollection(CollationInfo collationInfo);
    public AsymmetricKeyCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.BuiltInFunctionCollection : DictionaryCollection`1<IBuiltInFunction> {
    internal static IMetadataCollection`1<IBuiltInFunction> PopulatedInstance { get; }
    public BuiltInFunctionCollection(int initialCapacity);
    internal static IMetadataCollection`1<IBuiltInFunction> get_PopulatedInstance();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.BuiltInFunctionLookupBase : object {
    private IMetadataCollection`1<IBuiltInFunction> m_allBuiltIns;
    private IMetadataCollection`1<IDatePart> m_dateParts;
    private IMetadataCollection`1<IIsJsonValueType> m_isjsontypes;
    private BuiltInFunctionCollection m_builtInFunctions;
    private BuiltInFunctionCollection m_globalVariables;
    public IMetadataCollection`1<IBuiltInFunction> BuiltInFunctions { get; }
    public IMetadataCollection`1<IBuiltInFunction> GlobalVariables { get; }
    public IMetadataCollection`1<IBuiltInFunction> AllBuiltIns { get; }
    public IMetadataCollection`1<IDatePart> DateParts { get; }
    public IMetadataCollection`1<IIsJsonValueType> IsJsonTypes { get; }
    protected BuiltInFunctionLookupBase(IMetadataCollection`1<IBuiltInFunction> allBuiltIns, IMetadataCollection`1<IDatePart> dateParts, IMetadataCollection`1<IIsJsonValueType> isJsonTypes);
    public sealed virtual IMetadataCollection`1<IBuiltInFunction> get_BuiltInFunctions();
    public sealed virtual IMetadataCollection`1<IBuiltInFunction> get_GlobalVariables();
    public sealed virtual IMetadataCollection`1<IBuiltInFunction> get_AllBuiltIns();
    public sealed virtual IMetadataCollection`1<IDatePart> get_DateParts();
    public sealed virtual IMetadataCollection`1<IIsJsonValueType> get_IsJsonTypes();
    public virtual IBuiltInFunction GetMultiTypeBuiltInFunction(string name, ISystemDataType dataType);
}
public enum Microsoft.SqlServer.Management.SqlParser.MetadataProvider.CasingStyle : Enum {
    public int value__;
    public static CasingStyle None;
    public static CasingStyle Lowercase;
    public static CasingStyle Uppercase;
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.CertificateCollection : DualTypeSortedListCollection`2<ICertificate, IDatabaseObject> {
    public CertificateCollection(CollationInfo collationInfo);
    public CertificateCollection(int initialCapacity, CollationInfo collationInfo);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.CollationLookupBase : object {
    private IMetadataCollection`1<ICollation> m_collations;
    public IMetadataCollection`1<ICollation> Collations { get; }
    public sealed virtual IMetadataCollection`1<ICollation> get_Collations();
}
public static class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Collection`1 : object {
    private static IMetadataOrderedCollection`1<T> emptyCollection;
    public static IMetadataCollection`1<T> Empty { get; }
    public static IMetadataOrderedCollection`1<T> EmptyOrdered { get; }
    private static Collection`1();
    public static IMetadataCollection`1<T> get_Empty();
    public static IMetadataOrderedCollection`1<T> get_EmptyOrdered();
    public static IMetadataCollection`1<T> Merge(IMetadataCollection`1<T> collection1, IMetadataCollection`1<T> collection2);
    public static IMetadataCollection`1<T> Merge(bool allowDuplicates, IMetadataCollection`1<T> collection1, IMetadataCollection`1<T> collection2);
    public static IMetadataCollection`1<T> Merge(IMetadataCollection`1[] collections);
    public static IMetadataCollection`1<T> Merge(bool allowDuplicates, IMetadataCollection`1[] collections);
    public static IMetadataCollection`1<T> Convert(IMetadataCollection`1<TDerived> collection);
    public static IMetadataCollection`1<T> Filter(IMetadataCollection`1<T> collection, Predicate`1<T> match);
    public static IMetadataCollection`1<T> ApplyOnFirstAccess(IMutableMetadataCollection`1<C> collection, Action`1<C> action, Predicate`1<C> actionCompleted);
    public static IMetadataOrderedCollection`1<T> CreateOrderedCollection(CollationInfo collationInfo, T item);
    public static IMetadataOrderedCollection`1<T> CreateOrderedCollection(CollationInfo collationInfo, T item1, T item2);
    public static IMetadataOrderedCollection`1<T> CreateOrderedCollection(CollationInfo collationInfo, T[] items);
    public static IMetadataOrderedCollection`1<T> CreateOrderedCollection(CollationInfo collationInfo, T[] items, int count);
    public static T[] CopyToArray(IMetadataCollection`1<T> collection);
    internal static IMetadataOrderedCollection`1<T> ConvertArray(T[] data, CollationInfo collationInfo);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ColumnAttributes : Enum {
    public int value__;
    public static ColumnAttributes None;
    public static ColumnAttributes Identity;
    public static ColumnAttributes InPrimaryKey;
    public static ColumnAttributes Nullable;
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ColumnCollection : DualTypeSortedListCollection`2<IColumn, IScalar> {
    public ColumnCollection(CollationInfo collationInfo);
    public ColumnCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ColumnOrderedCollection : OrderedCollection`1<IColumn> {
    public ColumnOrderedCollection(CollationInfo collationInfo);
    public ColumnOrderedCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ConstraintCollection : SortedListCollection`1<IConstraint> {
    public ConstraintCollection(CollationInfo collationInfo);
    public ConstraintCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.CredentialCollection : DualTypeSortedListCollection`2<ICredential, IDatabaseObject> {
    public CredentialCollection(CollationInfo collationInfo);
    public CredentialCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.CursorVariableCollection : DualTypeSortedListCollection`2<ICursorVariable, ILocalVariable> {
    public CursorVariableCollection(CollationInfo collationInfo);
    public CursorVariableCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DatabaseCollection : DualTypeSortedListCollection`2<IDatabase, IDatabaseObject> {
    public DatabaseCollection(CollationInfo collationInfo);
    public DatabaseCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DatabaseDdlTriggerCollection : SortedListCollection`1<IDatabaseDdlTrigger> {
    public DatabaseDdlTriggerCollection(CollationInfo collationInfo);
    public DatabaseDdlTriggerCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DatabasePermissionCollection : OrderedCollection`1<IDatabasePermission> {
    public DatabasePermissionCollection(CollationInfo collationInfo);
    public DatabasePermissionCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DatabaseRoleCollection : DualTypeSortedListCollection`2<IDatabaseRole, IDatabasePrincipal> {
    public DatabaseRoleCollection(CollationInfo collationInfo);
    public DatabaseRoleCollection(int initialCapacity, CollationInfo collationInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DatePart : MetadataObjectBase {
    private DatePart(string name);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public static void PopulateCollection(DatePartCollection collection);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DatePartCollection : DictionaryCollection`1<IDatePart> {
    internal static IMetadataCollection`1<IDatePart> PopulatedInstance { get; }
    public DatePartCollection(int initialCapacity);
    internal static IMetadataCollection`1<IDatePart> get_PopulatedInstance();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DictionaryCollection`1 : DictionaryCollectionBase`2<T, Dictionary`2<string, T>> {
    private CollationInfo m_collationInfo;
    public IMetadataCollection`1<IMetadataObject> AsMetadataObjectCollection { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Count { get; }
    private IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Item { get; }
    private IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.AsMetadataObjectCollection { get; }
    public DictionaryCollection`1(int initialCapacity, CollationInfo collationInfo);
    public virtual IMutableMetadataCollection`1<T> Clone(bool copyData);
    public virtual IMetadataCollection`1<IMetadataObject> get_AsMetadataObjectCollection();
    private static Dictionary`2<string, T> CreateContainer(int initialCapacity, CollationInfo collationInfo);
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_Count();
    private sealed virtual override IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_Item(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Contains(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Contains(IMetadataObject item);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DictionaryCollection`1/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-FindAll>d__12")]
private sealed virtual override IEnumerable`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.FindAll(Predicate`1<IMetadataObject> match);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DictionaryCollection`1/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-FindAll>d__13")]
private sealed virtual override IEnumerable`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.FindAll(string name);
    private sealed virtual override IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_AsMetadataObjectCollection();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DictionaryCollection`1/<System-Collections-Generic-IEnumerable<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-GetEnumerator>d__16")]
private sealed virtual override IEnumerator`1<IMetadataObject> System.Collections.Generic.IEnumerable<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<T> <>n__0(string name);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DictionaryCollectionBase`2 : object {
    private U m_data;
    public int Count { get; }
    private T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<T>.Item { get; }
    public IMetadataCollection`1<IMetadataObject> AsMetadataObjectCollection { get; }
    public T Item { get; public set; }
    protected DictionaryCollectionBase`2(U container);
    public sealed virtual int get_Count();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<T>.get_Item(string name);
    public sealed virtual bool Contains(string name);
    public sealed virtual bool Contains(T item);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DictionaryCollectionBase`2/<FindAll>d__8")]
public sealed virtual IEnumerable`1<T> FindAll(Predicate`1<T> match);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DictionaryCollectionBase`2/<FindAll>d__9")]
public sealed virtual IEnumerable`1<T> FindAll(string name);
    public abstract virtual IMetadataCollection`1<IMetadataObject> get_AsMetadataObjectCollection();
    public sealed virtual T get_Item(string name);
    public sealed virtual void set_Item(string name, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void AddRange(IEnumerable`1<T> collection);
    public sealed virtual bool Remove(string name);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual IMutableMetadataCollection`1<T> Clone();
    public abstract virtual IMutableMetadataCollection`1<T> Clone(bool copyData);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DmlDeletedTable : DmlInsertedDeletedTable {
    public DmlDeletedTable(ITabular targetTable);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DmlInsertedDeletedTable : MetadataObjectBase {
    private ITabular m_targetTable;
    public TabularType TabularType { get; }
    public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public ITabular Unaliased { get; }
    public ITabular TargetTable { get; }
    protected DmlInsertedDeletedTable(string name, ITabular targetTable);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual TabularType get_TabularType();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual ITabular get_Unaliased();
    public sealed virtual ITabular get_TargetTable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DmlInsertedTable : DmlInsertedDeletedTable {
    public DmlInsertedTable(ITabular targetTable);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DmlTriggerCollection : SortedListCollection`1<IDmlTrigger> {
    public DmlTriggerCollection(CollationInfo collationInfo);
    public DmlTriggerCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DualTypeSortedListCollection`2 : SortedListCollection`1<T> {
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.Count { get; }
    private B Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.Item { get; }
    private IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.AsMetadataObjectCollection { get; }
    public DualTypeSortedListCollection`2(int initialCapacity, CollationInfo collationInfo);
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.get_Count();
    private sealed virtual override B Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.get_Item(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.Contains(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.Contains(B item);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DualTypeSortedListCollection`2/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<B>-FindAll>d__7")]
private sealed virtual override IEnumerable`1<B> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.FindAll(Predicate`1<B> match);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DualTypeSortedListCollection`2/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<B>-FindAll>d__8")]
private sealed virtual override IEnumerable`1<B> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.FindAll(string name);
    private sealed virtual override IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B>.get_AsMetadataObjectCollection();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.DualTypeSortedListCollection`2/<System-Collections-Generic-IEnumerable<B>-GetEnumerator>d__11")]
private sealed virtual override IEnumerator`1<B> System.Collections.Generic.IEnumerable<B>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<T> <>n__0(string name);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ExtendedStoredProcedureCollection : DualTypeSortedListCollection`2<IExtendedStoredProcedure, ICallableModule> {
    public ExtendedStoredProcedureCollection(CollationInfo collationInfo);
    public ExtendedStoredProcedureCollection(int initialCapacity, CollationInfo collationInfo);
}
public static class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ExtensionMethods : object {
    private static MetadataDisplayInfoProvider displayInfoProvider;
    public static IMetadataDisplayInfoProvider DisplayInfoProvider { get; }
    private static ExtensionMethods();
    public static IMetadataDisplayInfoProvider get_DisplayInfoProvider();
    public static string GetDisplayName(IMetadataObject metadataObject);
    public static string GetDatabaseQualifiedName(IMetadataObject metadataObject);
    public static string GetDescription(IMetadataObject metadataObject);
    public static string ToString(IMetadataObject metadataObject);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ForeignKeyColumnCollection : OrderedCollection`1<IForeignKeyColumn> {
    public ForeignKeyColumnCollection(CollationInfo collationInfo);
    public ForeignKeyColumnCollection(int initialCapacity, CollationInfo collationInfo);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IAsymmetricKeyFactory {
    public abstract virtual IMutableAsymmetricKey CreateAsymmetricKey(IDatabase database, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IBuiltInFunctionLookup {
    public IMetadataCollection`1<IBuiltInFunction> BuiltInFunctions { get; }
    public IMetadataCollection`1<IBuiltInFunction> GlobalVariables { get; }
    public IMetadataCollection`1<IBuiltInFunction> AllBuiltIns { get; }
    public IMetadataCollection`1<IDatePart> DateParts { get; }
    public IMetadataCollection`1<IIsJsonValueType> IsJsonTypes { get; }
    public abstract virtual IMetadataCollection`1<IBuiltInFunction> get_BuiltInFunctions();
    public abstract virtual IMetadataCollection`1<IBuiltInFunction> get_GlobalVariables();
    public abstract virtual IMetadataCollection`1<IBuiltInFunction> get_AllBuiltIns();
    public abstract virtual IMetadataCollection`1<IDatePart> get_DateParts();
    public abstract virtual IMetadataCollection`1<IIsJsonValueType> get_IsJsonTypes();
    public abstract virtual IBuiltInFunction GetMultiTypeBuiltInFunction(string name, ISystemDataType dataType);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ICertificateFactory {
    public abstract virtual IMutableCertificate CreateCertificate(IDatabase database, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ICollationLookup {
    public IMetadataCollection`1<ICollation> Collations { get; }
    public abstract virtual IMetadataCollection`1<ICollation> get_Collations();
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IColumnFactory {
    public IColumn Null { get; }
    public abstract virtual IColumn get_Null();
    public abstract virtual IMutableColumn Create(ITabular parent, string name);
    public abstract virtual IColumn CreateSimpleColumn(ITabular parent, string name, IScalarDataType dataType, bool nullable);
    public abstract virtual IColumn CreateAnonymousColumn(IScalarDataType dataType, bool nullable);
    public abstract virtual IColumn CreateScalarAlias(IScalar aliasedScalar, string alias);
    public abstract virtual IColumn CreateScalarAlias(ITabular parent, IScalar aliasedScalar, string alias);
    public abstract virtual IColumn CreateColumnAlias(IColumn aliasedColumn, string alias);
    public abstract virtual IColumn CreateColumnAlias(ITabular parent, IColumn aliasedColumn, string alias);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IConstraintFactory {
    public abstract virtual IForeignKeyColumn CreateForeignKeyColumn(IColumn referencingColumn, IColumn referencedColumn);
    public abstract virtual IMutableCheckConstraint CreateCheckConstraint(ITabular parent, string name);
    public abstract virtual IMutableDefaultConstraint CreateDefaultConstraint(IColumn parent, string name);
    public abstract virtual IMutableForeignKeyConstraint CreateForeignKeyConstraint(ITable parent, string name);
    public abstract virtual IPrimaryKeyConstraint CreatePrimaryKeyConstraint(ITabular parent, IRelationalIndex index);
    public abstract virtual IUniqueConstraint CreateUniqueConstraint(ITabular parent, IRelationalIndex index);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ICredentialFactory {
    public abstract virtual IMutableCredential CreateCredential(IServer server, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IDatabaseFactory {
    public abstract virtual IMutableDatabase Create(IServer server, string name, CollationInfo collationInfo);
    public abstract virtual IMutableDatabase Create(IDatabase otherDatabase);
    public abstract virtual IDatabase CreateEmptyDatabase(IServer server, string name, CollationInfo collationInfo, bool isSystemObject);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IDataTypeFactory {
    public ICursorDataType Cursor { get; }
    public IClrDataType UnknownClr { get; }
    public IScalarDataType UnknownScalar { get; }
    public ITableDataType UnknownTable { get; }
    public IScalarDataType Void { get; }
    public IXmlDataType XmlNode { get; }
    public abstract virtual ICursorDataType get_Cursor();
    public abstract virtual IClrDataType get_UnknownClr();
    public abstract virtual IScalarDataType get_UnknownScalar();
    public abstract virtual ITableDataType get_UnknownTable();
    public abstract virtual IScalarDataType get_Void();
    public abstract virtual IXmlDataType get_XmlNode();
    public abstract virtual IMutableTableDataType CreateTableDataType(string name, CollationInfo collationInfo);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IExecutionContextFactory {
    public abstract virtual IExecutionContext CreateExecuteAsCaller();
    public abstract virtual IExecutionContext CreateExecuteAsLogin(ILogin login);
    public abstract virtual IExecutionContext CreateExecuteAsOwner();
    public abstract virtual IExecutionContext CreateExecuteAsSelf();
    public abstract virtual IExecutionContext CreateExecuteAsUser(IUser user);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IIndexFactory {
    public abstract virtual IMutableIndexedColumn CreateIndexedColumn(IColumn referencedColumn);
    public abstract virtual IMutableRelationalIndex CreateRelationalIndex(ITabular parent, string name, CollationInfo collationInfo);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ILiteralScalarFactory {
    public IScalarExpression Binary { get; }
    public IScalarExpression Default { get; }
    public IScalarExpression Identifier { get; }
    public IScalarExpression Image { get; }
    public IScalarExpression Integer { get; }
    public IScalarExpression Money { get; }
    public IScalarExpression Null { get; }
    public IScalarExpression Numeric { get; }
    public IScalarExpression Real { get; }
    public IScalarExpression String { get; }
    public IScalarExpression UnicodeString { get; }
    public abstract virtual IScalarExpression get_Binary();
    public abstract virtual IScalarExpression get_Default();
    public abstract virtual IScalarExpression get_Identifier();
    public abstract virtual IScalarExpression get_Image();
    public abstract virtual IScalarExpression get_Integer();
    public abstract virtual IScalarExpression get_Money();
    public abstract virtual IScalarExpression get_Null();
    public abstract virtual IScalarExpression get_Numeric();
    public abstract virtual IScalarExpression get_Real();
    public abstract virtual IScalarExpression get_String();
    public abstract virtual IScalarExpression get_UnicodeString();
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ILoginFactory {
    public abstract virtual IMutableLogin CreateAsymmetricKeyLogin(IServer server, string name);
    public abstract virtual IMutableLogin CreateCertificateLogin(IServer server, string name);
    public abstract virtual IMutableLogin CreateSqlLogin(IServer server, string name);
    public abstract virtual IMutableLogin CreateWindowsLogin(IServer server, string name);
    public abstract virtual IMutablePassword CreatePassword();
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IMetadataDisplayInfoProvider {
    public CasingStyle BuiltInCasing { get; public set; }
    public abstract virtual string GetDisplayName(IMetadataObject metadataObject);
    public abstract virtual string GetDescription(IMetadataObject metadataObject);
    public abstract virtual string GetDatabaseQualifiedName(IMetadataObject metadataObject);
    public abstract virtual string ObjectToString(IMetadataObject metadataObject);
    public abstract virtual string CollectionToString(IMetadataCollection`1<T> metadataCollection, bool singleLine);
    public abstract virtual string CollectionToString(IMetadataOrderedCollection`1<T> metadataCollection, bool singleLine);
    public abstract virtual CasingStyle get_BuiltInCasing();
    public abstract virtual void set_BuiltInCasing(CasingStyle value);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IMetadataFactory {
    public IAsymmetricKeyFactory AsymmetricKey { get; }
    public ICertificateFactory Certificate { get; }
    public IColumnFactory Column { get; }
    public IConstraintFactory Constraint { get; }
    public ICredentialFactory Credential { get; }
    public IDatabaseFactory Database { get; }
    public IDataTypeFactory DataType { get; }
    public IExecutionContextFactory ExecutionContext { get; }
    public IIndexFactory Index { get; }
    public ILoginFactory Login { get; }
    public INullQualifierFactory NullQualifier { get; }
    public IParameterFactory Parameter { get; }
    public IPermissionFactory Permission { get; }
    public IResolvedSynonymFactory ResolvedSynonym { get; }
    public IRoleFactory Role { get; }
    public IScalarFactory Scalar { get; }
    public ISchemaFactory Schema { get; }
    public IServerFactory Server { get; }
    public IStoredProcedureFactory StoredProcedure { get; }
    public ISynonymFactory Synonym { get; }
    public ITabularFactory Tabular { get; }
    public ITriggerFactory Trigger { get; }
    public IUserFactory User { get; }
    public IUserDefinedFunctionFactory UserDefinedFunction { get; }
    public IUserDefinedTypeFactory UserDefinedType { get; }
    public IVariableFactory Variable { get; }
    public abstract virtual IAsymmetricKeyFactory get_AsymmetricKey();
    public abstract virtual ICertificateFactory get_Certificate();
    public abstract virtual IColumnFactory get_Column();
    public abstract virtual IConstraintFactory get_Constraint();
    public abstract virtual ICredentialFactory get_Credential();
    public abstract virtual IDatabaseFactory get_Database();
    public abstract virtual IDataTypeFactory get_DataType();
    public abstract virtual IExecutionContextFactory get_ExecutionContext();
    public abstract virtual IIndexFactory get_Index();
    public abstract virtual ILoginFactory get_Login();
    public abstract virtual INullQualifierFactory get_NullQualifier();
    public abstract virtual IParameterFactory get_Parameter();
    public abstract virtual IPermissionFactory get_Permission();
    public abstract virtual IResolvedSynonymFactory get_ResolvedSynonym();
    public abstract virtual IRoleFactory get_Role();
    public abstract virtual IScalarFactory get_Scalar();
    public abstract virtual ISchemaFactory get_Schema();
    public abstract virtual IServerFactory get_Server();
    public abstract virtual IStoredProcedureFactory get_StoredProcedure();
    public abstract virtual ISynonymFactory get_Synonym();
    public abstract virtual ITabularFactory get_Tabular();
    public abstract virtual ITriggerFactory get_Trigger();
    public abstract virtual IUserFactory get_User();
    public abstract virtual IUserDefinedFunctionFactory get_UserDefinedFunction();
    public abstract virtual IUserDefinedTypeFactory get_UserDefinedType();
    public abstract virtual IVariableFactory get_Variable();
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IMetadataProvider {
    public IServer Server { get; }
    public IBuiltInFunctionLookup BuiltInFunctionLookup { get; }
    public ICollationLookup CollationLookup { get; }
    public ISystemDataTypeLookup SystemDataTypeLookup { get; }
    public IMetadataFactory MetadataFactory { get; }
    public MetadataProviderEventHandler BeforeBindHandler { get; }
    public MetadataProviderEventHandler AfterBindHandler { get; }
    public abstract virtual IServer get_Server();
    public abstract virtual IBuiltInFunctionLookup get_BuiltInFunctionLookup();
    public abstract virtual ICollationLookup get_CollationLookup();
    public abstract virtual ISystemDataTypeLookup get_SystemDataTypeLookup();
    public abstract virtual IMetadataFactory get_MetadataFactory();
    public abstract virtual MetadataProviderEventHandler get_BeforeBindHandler();
    public abstract virtual MetadataProviderEventHandler get_AfterBindHandler();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IndexCollection : SortedListCollection`1<IIndex> {
    public IndexCollection(CollationInfo collationInfo);
    public IndexCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IndexedColumnCollection : OrderedCollection`1<IIndexedColumn> {
    public IndexedColumnCollection(CollationInfo collationInfo);
    public IndexedColumnCollection(int initialCapacity, CollationInfo collationInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ApplicationRole : DatabasePrincipal {
    private ISchema defaultSchema;
    public ISchema DefaultSchema { get; public set; }
    public ApplicationRole(IDatabase database, string name);
    public virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    public sealed virtual ISchema get_DefaultSchema();
    public sealed virtual void set_DefaultSchema(ISchema value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.AsymmetricKey : DatabaseOwnedObject {
    public AsymmetricKey(IDatabase database, string name);
    public virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.AsymmetricKeyFactory : ObjectFactoryBase`1<AsymmetricKeyFactory> {
    public sealed virtual IMutableAsymmetricKey CreateAsymmetricKey(IDatabase database, string name);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.BuiltInFunction : MetadataObjectBase {
    private IScalarDataType m_returnType;
    private IMetadataOrderedCollection`1<IParameter> m_parameters;
    private short m_minArgCount;
    private short m_maxArgCount;
    protected BuiltInFunctionAttributes m_attributes;
    public BuiltInFunction Item { get; }
    public int MinNumberOfArgs { get; }
    public int MaxNumberOfArgs { get; }
    public bool IsVarArg { get; }
    public bool IsDatePartFunction { get; }
    public bool IsGlobalVariable { get; }
    public bool IsAggregateFunction { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public bool IsUserDefinedFunction { get; }
    public IUserDefinedFunction AsUserDefinedFunction { get; }
    protected BuiltInFunction(string name, IScalarDataType returnType, short minArgCount, short maxArgCount, BuiltInFunctionAttributes attributes, IMetadataOrderedCollection`1<IParameter> parameters);
    private static BuiltInFunction Create(string name, IScalarDataType returnType, short minNumOfArgs, short maxNumOfArgs, BuiltInFunctionAttributes attributes, IScalarParameter[] arguments);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public virtual BuiltInFunction get_Item(ISystemDataType dataType);
    public sealed virtual int get_MinNumberOfArgs();
    public sealed virtual int get_MaxNumberOfArgs();
    public sealed virtual bool get_IsVarArg();
    public sealed virtual bool get_IsDatePartFunction();
    public sealed virtual bool get_IsGlobalVariable();
    public sealed virtual bool get_IsAggregateFunction();
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
    public bool get_IsUserDefinedFunction();
    public IUserDefinedFunction get_AsUserDefinedFunction();
    public static void PopulateCollection(BuiltInFunctionCollection collection);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.BuiltInFunctionLookup : BuiltInFunctionLookupBase {
    public static BuiltInFunctionLookup Instance { get; }
    public static BuiltInFunctionLookup get_Instance();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Certificate : DatabaseOwnedObject {
    public Certificate(IDatabase database, string name);
    public virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.CertificateFactory : ObjectFactoryBase`1<CertificateFactory> {
    public sealed virtual IMutableCertificate CreateCertificate(IDatabase database, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.CheckConstraint : Constraint {
    private bool isEnabled;
    private bool isChecked;
    private bool isSystemNamed;
    private bool notForReplication;
    private string text;
    public ConstraintType Type { get; }
    public bool IsSystemNamed { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsChecked { get; public set; }
    public bool NotForReplication { get; public set; }
    public string Text { get; public set; }
    public CheckConstraint(ITabular parent, string name);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public virtual ConstraintType get_Type();
    public sealed virtual bool get_IsSystemNamed();
    public sealed virtual void set_IsSystemNamed(bool value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    public sealed virtual bool get_IsChecked();
    public sealed virtual void set_IsChecked(bool value);
    public sealed virtual bool get_NotForReplication();
    public sealed virtual void set_NotForReplication(bool value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.CollationLookup : CollationLookupBase {
    public static CollationLookup Instance { get; }
    public static CollationLookup get_Instance();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Column : MetadataObjectBase {
    private ITabular m_parent;
    private ICollation m_collation;
    private ComputedColumnInfo m_computedColumnInfo;
    private IScalarDataType m_dataType;
    private IDefaultConstraint m_defaultValue;
    private IdentityColumnInfo m_identityColumnInfo;
    private bool m_isSparse;
    private bool m_isColumnSet;
    private bool m_inPrimaryKey;
    private bool m_nullable;
    private bool m_rowGuidCol;
    private bool m_isGeneratedAlwaysAsRowStart;
    private bool m_isGeneratedAlwaysAsRowEnd;
    private bool m_isGeneratedAlwaysAsTransactionIdStart;
    private bool m_isGeneratedAlwaysAsTransactionIdEnd;
    private bool m_isGeneratedAlwaysAsSequenceNumberStart;
    private bool m_isGeneratedAlwaysAsSequenceNumberEnd;
    public ICollation Collation { get; public set; }
    public ComputedColumnInfo ComputedColumnInfo { get; public set; }
    public IDefaultConstraint DefaultValue { get; public set; }
    public IdentityColumnInfo IdentityColumnInfo { get; public set; }
    public bool InPrimaryKey { get; public set; }
    public bool RowGuidCol { get; public set; }
    public bool IsSparse { get; public set; }
    public bool IsColumnSet { get; public set; }
    public bool IsGeneratedAlwaysAsRowStart { get; public set; }
    public bool IsGeneratedAlwaysAsRowEnd { get; public set; }
    public bool IsGeneratedAlwaysAsTransactionIdStart { get; public set; }
    public bool IsGeneratedAlwaysAsTransactionIdEnd { get; public set; }
    public bool IsGeneratedAlwaysAsSequenceNumberStart { get; public set; }
    public bool IsGeneratedAlwaysAsSequenceNumberEnd { get; public set; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; public set; }
    public bool Nullable { get; public set; }
    public ITabular Parent { get; }
    public Column(ITabular parent, string name);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ICollation get_Collation();
    public sealed virtual void set_Collation(ICollation value);
    public sealed virtual ComputedColumnInfo get_ComputedColumnInfo();
    public sealed virtual void set_ComputedColumnInfo(ComputedColumnInfo value);
    public sealed virtual IDefaultConstraint get_DefaultValue();
    public sealed virtual void set_DefaultValue(IDefaultConstraint value);
    public sealed virtual IdentityColumnInfo get_IdentityColumnInfo();
    public sealed virtual void set_IdentityColumnInfo(IdentityColumnInfo value);
    public sealed virtual bool get_InPrimaryKey();
    public sealed virtual void set_InPrimaryKey(bool value);
    public sealed virtual bool get_RowGuidCol();
    public sealed virtual void set_RowGuidCol(bool value);
    public sealed virtual bool get_IsSparse();
    public sealed virtual void set_IsSparse(bool value);
    public sealed virtual bool get_IsColumnSet();
    public sealed virtual void set_IsColumnSet(bool value);
    public sealed virtual bool get_IsGeneratedAlwaysAsRowStart();
    public sealed virtual void set_IsGeneratedAlwaysAsRowStart(bool value);
    public sealed virtual bool get_IsGeneratedAlwaysAsRowEnd();
    public sealed virtual void set_IsGeneratedAlwaysAsRowEnd(bool value);
    public sealed virtual bool get_IsGeneratedAlwaysAsTransactionIdStart();
    public sealed virtual void set_IsGeneratedAlwaysAsTransactionIdStart(bool value);
    public sealed virtual bool get_IsGeneratedAlwaysAsTransactionIdEnd();
    public sealed virtual void set_IsGeneratedAlwaysAsTransactionIdEnd(bool value);
    public sealed virtual bool get_IsGeneratedAlwaysAsSequenceNumberStart();
    public sealed virtual void set_IsGeneratedAlwaysAsSequenceNumberStart(bool value);
    public sealed virtual bool get_IsGeneratedAlwaysAsSequenceNumberEnd();
    public sealed virtual void set_IsGeneratedAlwaysAsSequenceNumberEnd(bool value);
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual void set_DataType(IScalarDataType value);
    public sealed virtual bool get_Nullable();
    public sealed virtual void set_Nullable(bool value);
    public sealed virtual ITabular get_Parent();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ColumnAlias : MetadataObjectBase {
    private ITabular m_parent;
    private IColumn m_aliasedColumn;
    public bool InPrimaryKey { get; }
    public IdentityColumnInfo IdentityColumnInfo { get; }
    public ICollation Collation { get; }
    public ComputedColumnInfo ComputedColumnInfo { get; }
    public IDefaultConstraint DefaultValue { get; }
    public bool RowGuidCol { get; }
    public bool IsSparse { get; }
    public bool IsColumnSet { get; }
    public bool IsGeneratedAlwaysAsRowStart { get; }
    public bool IsGeneratedAlwaysAsRowEnd { get; }
    public ITabular Parent { get; }
    public bool IsGeneratedAlwaysAsTransactionIdStart { get; }
    public bool IsGeneratedAlwaysAsTransactionIdEnd { get; }
    public bool IsGeneratedAlwaysAsSequenceNumberStart { get; }
    public bool IsGeneratedAlwaysAsSequenceNumberEnd { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    public ColumnAlias(ITabular parent, IColumn aliasedColumn, string alias);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual bool get_InPrimaryKey();
    public sealed virtual IdentityColumnInfo get_IdentityColumnInfo();
    public sealed virtual ICollation get_Collation();
    public sealed virtual ComputedColumnInfo get_ComputedColumnInfo();
    public sealed virtual IDefaultConstraint get_DefaultValue();
    public sealed virtual bool get_RowGuidCol();
    public sealed virtual bool get_IsSparse();
    public sealed virtual bool get_IsColumnSet();
    public sealed virtual bool get_IsGeneratedAlwaysAsRowStart();
    public sealed virtual bool get_IsGeneratedAlwaysAsRowEnd();
    public sealed virtual ITabular get_Parent();
    public sealed virtual bool get_IsGeneratedAlwaysAsTransactionIdStart();
    public sealed virtual bool get_IsGeneratedAlwaysAsTransactionIdEnd();
    public sealed virtual bool get_IsGeneratedAlwaysAsSequenceNumberStart();
    public sealed virtual bool get_IsGeneratedAlwaysAsSequenceNumberEnd();
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ColumnFactory : ObjectFactoryBase`1<ColumnFactory> {
    private IColumn m_nullColumn;
    public IColumn Null { get; }
    public sealed virtual IColumn get_Null();
    public sealed virtual IMutableColumn Create(ITabular parent, string name);
    public sealed virtual IColumn CreateSimpleColumn(ITabular parent, string name, IScalarDataType dataType, bool nullable);
    public sealed virtual IColumn CreateAnonymousColumn(IScalarDataType dataType, bool nullable);
    public sealed virtual IColumn CreateColumnAlias(IColumn aliasedColumn, string alias);
    public sealed virtual IColumn CreateColumnAlias(ITabular parent, IColumn aliasedColumn, string alias);
    public sealed virtual IColumn CreateScalarAlias(IScalar aliasedScalar, string alias);
    public sealed virtual IColumn CreateScalarAlias(ITabular parent, IScalar aliasedScalar, string alias);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.CommonTableExpression : VirtualTable {
    public TabularType TabularType { get; }
    public CommonTableExpression(string name, CollationInfo collationInfo);
    public virtual TabularType get_TabularType();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Constraint : MetadataObjectBase {
    private ITabular parent;
    public ITabular Parent { get; }
    public ConstraintType Type { get; }
    protected Constraint(ITabular parent, string name);
    public sealed virtual ITabular get_Parent();
    public abstract virtual ConstraintType get_Type();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ConstraintFactory : ObjectFactoryBase`1<ConstraintFactory> {
    public sealed virtual IForeignKeyColumn CreateForeignKeyColumn(IColumn referencingColumn, IColumn referencedColumn);
    public sealed virtual IMutableCheckConstraint CreateCheckConstraint(ITabular parent, string name);
    public sealed virtual IMutableDefaultConstraint CreateDefaultConstraint(IColumn parent, string name);
    public sealed virtual IMutableForeignKeyConstraint CreateForeignKeyConstraint(ITable parent, string name);
    public sealed virtual IPrimaryKeyConstraint CreatePrimaryKeyConstraint(ITabular parent, IRelationalIndex index);
    public sealed virtual IUniqueConstraint CreateUniqueConstraint(ITabular parent, IRelationalIndex index);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Credential : ServerOwnedObject {
    public Credential(IServer server, string name);
    public virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.CredentialFactory : ObjectFactoryBase`1<CredentialFactory> {
    public sealed virtual IMutableCredential CreateCredential(IServer server, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.CursorParameter : LocalVariable`1<ICursorDataType> {
    public bool IsParameter { get; }
    public ICursorDataType DataType { get; }
    public bool IsOutput { get; }
    public bool IsReadOnly { get; }
    public string DefaultValue { get; }
    public CursorParameter(string name);
    public virtual bool get_IsParameter();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ICursorDataType get_DataType();
    public sealed virtual bool get_IsOutput();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_DefaultValue();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.CursorVariable : LocalVariable`1<ICursorDataType> {
    public bool IsParameter { get; }
    public ICursorDataType DataType { get; }
    public CursorVariable(string name);
    public virtual bool get_IsParameter();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ICursorDataType get_DataType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Database : ServerOwnedObject {
    private CollationInfo m_collationInfo;
    private ApplicationRoleCollection m_applicationRoles;
    private AsymmetricKeyCollection m_asymmetricKeys;
    private CertificateCollection m_certificates;
    private DatabaseRoleCollection m_databaseRoles;
    private SchemaCollection m_schemas;
    private DatabaseDdlTriggerCollection m_triggers;
    private UserCollection m_users;
    private string m_defaultSchemaName;
    private IUser m_owner;
    private DatabaseCompatibilityLevel m_compatibilityLevel;
    public IMutableMetadataCollection`1<IApplicationRole> ApplicationRoles { get; }
    public IMutableMetadataCollection`1<IAsymmetricKey> AsymmetricKeys { get; }
    public IMutableMetadataCollection`1<ICertificate> Certificates { get; }
    public DatabaseCompatibilityLevel CompatibilityLevel { get; public set; }
    public string DefaultSchemaName { get; public set; }
    public IUser Owner { get; public set; }
    public IMutableMetadataCollection`1<IDatabaseRole> Roles { get; }
    public IMutableMetadataCollection`1<ISchema> Schemas { get; }
    public IMutableMetadataCollection`1<IDatabaseDdlTrigger> Triggers { get; }
    public IMutableMetadataCollection`1<IUser> Users { get; }
    private IMetadataCollection`1<IApplicationRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.ApplicationRoles { get; }
    private IMetadataCollection`1<IAsymmetricKey> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.AsymmetricKeys { get; }
    private IMetadataCollection`1<ICertificate> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Certificates { get; }
    public CollationInfo CollationInfo { get; }
    private IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Roles { get; }
    private IMetadataCollection`1<ISchema> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Schemas { get; }
    private IMetadataCollection`1<IDatabaseDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Triggers { get; }
    private IMetadataCollection`1<IUser> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Users { get; }
    private DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.CompatibilityLevel { get; }
    public Database(IServer server, string name, CollationInfo collationInfo);
    public Database(IDatabase other);
    public virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IMutableMetadataCollection`1<IApplicationRole> get_ApplicationRoles();
    public sealed virtual IMutableMetadataCollection`1<IAsymmetricKey> get_AsymmetricKeys();
    public sealed virtual IMutableMetadataCollection`1<ICertificate> get_Certificates();
    public sealed virtual DatabaseCompatibilityLevel get_CompatibilityLevel();
    public sealed virtual void set_CompatibilityLevel(DatabaseCompatibilityLevel value);
    public sealed virtual string get_DefaultSchemaName();
    public sealed virtual void set_DefaultSchemaName(string value);
    public sealed virtual IUser get_Owner();
    public sealed virtual void set_Owner(IUser value);
    public sealed virtual IMutableMetadataCollection`1<IDatabaseRole> get_Roles();
    public sealed virtual IMutableMetadataCollection`1<ISchema> get_Schemas();
    public sealed virtual IMutableMetadataCollection`1<IDatabaseDdlTrigger> get_Triggers();
    public sealed virtual IMutableMetadataCollection`1<IUser> get_Users();
    private sealed virtual override IMetadataCollection`1<IApplicationRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_ApplicationRoles();
    private sealed virtual override IMetadataCollection`1<IAsymmetricKey> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_AsymmetricKeys();
    private sealed virtual override IMetadataCollection`1<ICertificate> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Certificates();
    public sealed virtual CollationInfo get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Roles();
    private sealed virtual override IMetadataCollection`1<ISchema> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Schemas();
    private sealed virtual override IMetadataCollection`1<IDatabaseDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Triggers();
    private sealed virtual override IMetadataCollection`1<IUser> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Users();
    private sealed virtual override DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_CompatibilityLevel();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DatabaseDdlTrigger : DatabaseOwnedObject {
    private TriggerEventTypeSet databaseDdlEvents;
    private bool isEncrypted;
    private bool isEnabled;
    private string bodyText;
    private IExecutionContext executionContext;
    private bool isQuotedIdentifierOn;
    private bool isSqlClr;
    public IMutableTriggerEventTypeSet DatabaseDdlEvents { get; }
    public bool IsQuotedIdentifierOn { get; public set; }
    private ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseDdlTrigger.DatabaseDdlEvents { get; }
    public string BodyText { get; public set; }
    public bool IsEncrypted { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsSqlClr { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public DatabaseDdlTrigger(IDatabase database, string name);
    public virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IMutableTriggerEventTypeSet get_DatabaseDdlEvents();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual void set_IsQuotedIdentifierOn(bool value);
    private sealed virtual override ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseDdlTrigger.get_DatabaseDdlEvents();
    public sealed virtual string get_BodyText();
    public sealed virtual void set_BodyText(string value);
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual void set_IsEncrypted(bool value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual void set_IsSqlClr(bool value);
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual void set_ExecutionContext(IExecutionContext value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DatabaseFactory : ObjectFactoryBase`1<DatabaseFactory> {
    public sealed virtual IMutableDatabase Create(IServer server, string name, CollationInfo collationInfo);
    public sealed virtual IMutableDatabase Create(IDatabase otherDatabase);
    public sealed virtual IDatabase CreateEmptyDatabase(IServer server, string name, CollationInfo collationInfo, bool isSystemObject);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DatabaseObject`1 : object {
    protected P m_parent;
    private string m_name;
    private bool m_isSystemObject;
    public bool IsSystemObject { get; public set; }
    public IDatabaseObject Parent { get; }
    public bool IsVolatile { get; }
    public string Name { get; }
    protected DatabaseObject`1(P parent, string name);
    protected DatabaseObject`1(P parent, IDatabaseObject dbObject);
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual void set_IsSystemObject(bool value);
    public sealed virtual IDatabaseObject get_Parent();
    public bool get_IsVolatile();
    public abstract virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DatabaseOwnedObject : DatabaseObject`1<IDatabase> {
    public IDatabase Database { get; }
    protected DatabaseOwnedObject(IDatabase database, string name);
    protected DatabaseOwnedObject(IDatabaseOwnedObject databaseOwnedObject);
    public sealed virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual IDatabase get_Database();
    public abstract virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DatabasePermission : object {
    private string name;
    private IDatabasePrincipal databasePrincipal;
    private IMetadataObject targetObject;
    private DatabasePermissionType permissionType;
    private IDatabasePrincipal grantor;
    private PermissionState permissionState;
    public PermissionState PermissionState { get; public set; }
    public IDatabasePrincipal DatabasePrincipal { get; }
    public DatabasePermissionType PermissionType { get; }
    public IMetadataObject TargetObject { get; }
    public IDatabasePrincipal Grantor { get; }
    public string Name { get; }
    public DatabasePermission(IDatabasePrincipal databasePrincipal, IMetadataObject targetObject, DatabasePermissionType permissionType, IDatabasePrincipal grantor);
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual PermissionState get_PermissionState();
    public sealed virtual void set_PermissionState(PermissionState value);
    public sealed virtual IDatabasePrincipal get_DatabasePrincipal();
    public sealed virtual DatabasePermissionType get_PermissionType();
    public sealed virtual IMetadataObject get_TargetObject();
    public sealed virtual IDatabasePrincipal get_Grantor();
    public sealed virtual string get_Name();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DatabasePrincipal : DatabaseOwnedObject {
    private DatabasePermissionCollection permissions;
    private DatabaseRoleCollection memberOfRoles;
    public IMutableMetadataCollection`1<IDatabasePermission> Permissions { get; }
    public IMutableMetadataCollection`1<IDatabaseRole> MemberOfRoles { get; }
    private IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.Permissions { get; }
    private IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.MemberOfRoles { get; }
    public DatabasePrincipal(IDatabase database, string name);
    public sealed virtual IMutableMetadataCollection`1<IDatabasePermission> get_Permissions();
    public sealed virtual IMutableMetadataCollection`1<IDatabaseRole> get_MemberOfRoles();
    private sealed virtual override IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_Permissions();
    private sealed virtual override IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_MemberOfRoles();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DatabaseRole : DatabasePrincipal {
    private bool isFixedRole;
    private IDatabasePrincipal owner;
    public bool IsFixedRole { get; public set; }
    public IDatabasePrincipal Owner { get; public set; }
    public DatabaseRole(IDatabase database, string name);
    public virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsFixedRole();
    public sealed virtual void set_IsFixedRole(bool value);
    public sealed virtual IDatabasePrincipal get_Owner();
    public sealed virtual void set_Owner(IDatabasePrincipal value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DataTypeFactory : ObjectFactoryBase`1<DataTypeFactory> {
    internal IScalarDataType AnyType;
    internal IScalarDataType DataTypeName;
    internal IScalarDataType DatePart;
    internal IScalarDataType ExpressionType;
    internal IScalarDataType NumericType;
    internal IScalarDataType IntegerType;
    internal IScalarDataType String;
    private ICursorDataType m_cursor;
    private IScalarDataType m_void;
    private IScalarDataType m_unknownScalar;
    private ITableDataType m_unknownTable;
    private IClrDataType m_unknownClr;
    private IXmlDataType m_xmlNode;
    public ICursorDataType Cursor { get; }
    public IClrDataType UnknownClr { get; }
    public IScalarDataType UnknownScalar { get; }
    public ITableDataType UnknownTable { get; }
    public IScalarDataType Void { get; }
    public IXmlDataType XmlNode { get; }
    public sealed virtual ICursorDataType get_Cursor();
    public sealed virtual IClrDataType get_UnknownClr();
    public sealed virtual IScalarDataType get_UnknownScalar();
    public sealed virtual ITableDataType get_UnknownTable();
    public sealed virtual IScalarDataType get_Void();
    public sealed virtual IXmlDataType get_XmlNode();
    public sealed virtual IMutableTableDataType CreateTableDataType(string name, CollationInfo collationInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DefaultConstraint : MetadataObjectBase {
    private IColumn parent;
    private bool isSystemNamed;
    private string text;
    public bool IsSystemNamed { get; public set; }
    public string Text { get; public set; }
    public IColumn Parent { get; }
    public DefaultConstraint(IColumn parent, string name);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsSystemNamed();
    public sealed virtual void set_IsSystemNamed(bool value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual IColumn get_Parent();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DerivedTable : VirtualTable {
    public TabularType TabularType { get; }
    public DerivedTable(string name, CollationInfo collationInfo);
    public virtual TabularType get_TabularType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DmlTableSource : VirtualTable {
    public TabularType TabularType { get; }
    public DmlTableSource(string name, CollationInfo collationInfo);
    public virtual TabularType get_TabularType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.DmlTrigger : MetadataObjectBase {
    private ITableViewBase parent;
    private TriggerOptions options;
    private string bodyText;
    private IExecutionContext executionContext;
    private bool isQuotedIdentifierOn;
    private ActivationOrder insertActivationOrder;
    private ActivationOrder updateActivationOrder;
    private ActivationOrder deleteActivationOrder;
    public bool NotForReplication { get; public set; }
    public bool InsteadOf { get; public set; }
    public bool Insert { get; public set; }
    public ActivationOrder InsertActivationOrder { get; public set; }
    public bool Update { get; public set; }
    public ActivationOrder UpdateActivationOrder { get; public set; }
    public bool Delete { get; public set; }
    public ActivationOrder DeleteActivationOrder { get; public set; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public string BodyText { get; public set; }
    public bool IsEncrypted { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsSqlClr { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public ITableViewBase Parent { get; }
    public DmlTrigger(ITableViewBase parent, string name);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual bool get_NotForReplication();
    public sealed virtual void set_NotForReplication(bool value);
    public sealed virtual bool get_InsteadOf();
    public sealed virtual void set_InsteadOf(bool value);
    public sealed virtual bool get_Insert();
    public sealed virtual void set_Insert(bool value);
    public sealed virtual ActivationOrder get_InsertActivationOrder();
    public sealed virtual void set_InsertActivationOrder(ActivationOrder value);
    public sealed virtual bool get_Update();
    public sealed virtual void set_Update(bool value);
    public sealed virtual ActivationOrder get_UpdateActivationOrder();
    public sealed virtual void set_UpdateActivationOrder(ActivationOrder value);
    public sealed virtual bool get_Delete();
    public sealed virtual void set_Delete(bool value);
    public sealed virtual ActivationOrder get_DeleteActivationOrder();
    public sealed virtual void set_DeleteActivationOrder(ActivationOrder value);
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual void set_IsQuotedIdentifierOn(bool value);
    public sealed virtual string get_BodyText();
    public sealed virtual void set_BodyText(string value);
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual void set_IsEncrypted(bool value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual void set_IsSqlClr(bool value);
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual void set_ExecutionContext(IExecutionContext value);
    public sealed virtual ITableViewBase get_Parent();
    private bool GetOption(TriggerOptions option);
    private void SetOption(TriggerOptions option, bool value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.EmptyDatabase : object {
    private IServer m_server;
    private string m_name;
    private CollationInfo m_collationInfo;
    private bool m_isSystemObject;
    public IMetadataCollection`1<IApplicationRole> ApplicationRoles { get; }
    public IMetadataCollection`1<IAsymmetricKey> AsymmetricKeys { get; }
    public IMetadataCollection`1<ICertificate> Certificates { get; }
    public CollationInfo CollationInfo { get; }
    public string DefaultSchemaName { get; }
    public IUser Owner { get; }
    public IMetadataCollection`1<IDatabaseRole> Roles { get; }
    public IMetadataCollection`1<ISchema> Schemas { get; }
    public IMetadataCollection`1<IDatabaseDdlTrigger> Triggers { get; }
    public IMetadataCollection`1<IUser> Users { get; }
    private DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.CompatibilityLevel { get; }
    public IServer Server { get; }
    public IDatabaseObject Parent { get; }
    public bool IsSystemObject { get; }
    public string Name { get; }
    public EmptyDatabase(IServer server, string name, CollationInfo collationInfo, bool isSystemObject);
    public sealed virtual IMetadataCollection`1<IApplicationRole> get_ApplicationRoles();
    public sealed virtual IMetadataCollection`1<IAsymmetricKey> get_AsymmetricKeys();
    public sealed virtual IMetadataCollection`1<ICertificate> get_Certificates();
    public sealed virtual CollationInfo get_CollationInfo();
    public sealed virtual string get_DefaultSchemaName();
    public sealed virtual IUser get_Owner();
    public sealed virtual IMetadataCollection`1<IDatabaseRole> get_Roles();
    public sealed virtual IMetadataCollection`1<ISchema> get_Schemas();
    public sealed virtual IMetadataCollection`1<IDatabaseDdlTrigger> get_Triggers();
    public sealed virtual IMetadataCollection`1<IUser> get_Users();
    private sealed virtual override DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_CompatibilityLevel();
    public sealed virtual IServer get_Server();
    public sealed virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IDatabaseObject get_Parent();
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.EmptySchema : object {
    private IDatabase m_database;
    private string m_name;
    private bool m_isSystemObject;
    public IDatabase Database { get; }
    public IDatabasePrincipal Owner { get; }
    public IMetadataCollection`1<ITable> Tables { get; }
    public IMetadataCollection`1<IView> Views { get; }
    public IMetadataCollection`1<IUserDefinedAggregate> UserDefinedAggregates { get; }
    public IMetadataCollection`1<ITableValuedFunction> TableValuedFunctions { get; }
    public IMetadataCollection`1<IScalarValuedFunction> ScalarValuedFunctions { get; }
    public IMetadataCollection`1<IStoredProcedure> StoredProcedures { get; }
    public IMetadataCollection`1<ISynonym> Synonyms { get; }
    public IMetadataCollection`1<IExtendedStoredProcedure> ExtendedStoredProcedures { get; }
    public IMetadataCollection`1<IUserDefinedDataType> UserDefinedDataTypes { get; }
    public IMetadataCollection`1<IUserDefinedTableType> UserDefinedTableTypes { get; }
    public IMetadataCollection`1<IUserDefinedClrType> UserDefinedClrTypes { get; }
    public IDatabaseObject Parent { get; }
    public bool IsSystemObject { get; }
    public string Name { get; }
    public EmptySchema(IDatabase database, string name, bool isSystemObject);
    public sealed virtual IDatabase get_Database();
    public sealed virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IDatabasePrincipal get_Owner();
    public sealed virtual IMetadataCollection`1<ITable> get_Tables();
    public sealed virtual IMetadataCollection`1<IView> get_Views();
    public sealed virtual IMetadataCollection`1<IUserDefinedAggregate> get_UserDefinedAggregates();
    public sealed virtual IMetadataCollection`1<ITableValuedFunction> get_TableValuedFunctions();
    public sealed virtual IMetadataCollection`1<IScalarValuedFunction> get_ScalarValuedFunctions();
    public sealed virtual IMetadataCollection`1<IStoredProcedure> get_StoredProcedures();
    public sealed virtual IMetadataCollection`1<ISynonym> get_Synonyms();
    public sealed virtual IMetadataCollection`1<IExtendedStoredProcedure> get_ExtendedStoredProcedures();
    public sealed virtual IMetadataCollection`1<IUserDefinedDataType> get_UserDefinedDataTypes();
    public sealed virtual IMetadataCollection`1<IUserDefinedTableType> get_UserDefinedTableTypes();
    public sealed virtual IMetadataCollection`1<IUserDefinedClrType> get_UserDefinedClrTypes();
    public sealed virtual IDatabaseObject get_Parent();
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ExecutionContext : MetadataObjectBase {
    private ExecutionContextType m_contextType;
    private IUser m_user;
    private ILogin m_login;
    public ExecutionContextType ContextType { get; }
    public ILogin Login { get; }
    public IUser User { get; }
    public ExecutionContext(ExecutionContextType contextType);
    public ExecutionContext(IUser user);
    public ExecutionContext(ILogin login);
    private ExecutionContext(ExecutionContextType contextType, IUser user, ILogin login);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ExecutionContextType get_ContextType();
    public sealed virtual ILogin get_Login();
    public sealed virtual IUser get_User();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ExecutionContextFactory : ObjectFactoryBase`1<ExecutionContextFactory> {
    private ExecutionContext m_caller;
    private ExecutionContext m_owner;
    private ExecutionContext m_self;
    public sealed virtual IExecutionContext CreateExecuteAsCaller();
    public sealed virtual IExecutionContext CreateExecuteAsLogin(ILogin login);
    public sealed virtual IExecutionContext CreateExecuteAsOwner();
    public sealed virtual IExecutionContext CreateExecuteAsSelf();
    public sealed virtual IExecutionContext CreateExecuteAsUser(IUser user);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ForeignKeyColumn : object {
    private IColumn m_referencingColumn;
    private IColumn m_referencedColumn;
    public IColumn ReferencingColumn { get; }
    public IColumn ReferencedColumn { get; }
    public string Name { get; }
    public ForeignKeyColumn(IColumn referencingColumn, IColumn referencedColumn);
    public sealed virtual IColumn get_ReferencingColumn();
    public sealed virtual IColumn get_ReferencedColumn();
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ForeignKeyConstraint : Constraint {
    private ForeignKeyColumnCollection m_columns;
    private ForeignKeyAction m_deleteAction;
    private ForeignKeyAction m_updateAction;
    private bool m_isEnabled;
    private bool m_isChecked;
    private bool m_isSystemNamed;
    private bool m_notForReplication;
    private ITable m_referencedTable;
    public ConstraintType Type { get; }
    public bool IsSystemNamed { get; public set; }
    public IMutableMetadataOrderedCollection`1<IForeignKeyColumn> Columns { get; }
    public ForeignKeyAction DeleteAction { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsChecked { get; public set; }
    public bool NotForReplication { get; public set; }
    public ITable ReferencedTable { get; public set; }
    public ForeignKeyAction UpdateAction { get; public set; }
    private IMetadataOrderedCollection`1<IForeignKeyColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.Columns { get; }
    public ForeignKeyConstraint(ITable parent, string name);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public virtual ConstraintType get_Type();
    public sealed virtual bool get_IsSystemNamed();
    public sealed virtual void set_IsSystemNamed(bool value);
    public sealed virtual IMutableMetadataOrderedCollection`1<IForeignKeyColumn> get_Columns();
    public sealed virtual ForeignKeyAction get_DeleteAction();
    public sealed virtual void set_DeleteAction(ForeignKeyAction value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    public sealed virtual bool get_IsChecked();
    public sealed virtual void set_IsChecked(bool value);
    public sealed virtual bool get_NotForReplication();
    public sealed virtual void set_NotForReplication(bool value);
    public sealed virtual ITable get_ReferencedTable();
    public sealed virtual void set_ReferencedTable(ITable value);
    public sealed virtual ForeignKeyAction get_UpdateAction();
    public sealed virtual void set_UpdateAction(ForeignKeyAction value);
    private sealed virtual override IMetadataOrderedCollection`1<IForeignKeyColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_Columns();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Index : MetadataObjectBase {
    protected Index(string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.IndexedColumn : object {
    private IColumn m_referencedColumn;
    private SortOrder m_sortOrder;
    private bool m_isIncluded;
    public SortOrder SortOrder { get; public set; }
    public bool IsIncluded { get; public set; }
    public IColumn ReferencedColumn { get; }
    public string Name { get; }
    public IndexedColumn(IColumn referencedColumn);
    public sealed virtual SortOrder get_SortOrder();
    public sealed virtual void set_SortOrder(SortOrder value);
    public sealed virtual bool get_IsIncluded();
    public sealed virtual void set_IsIncluded(bool value);
    public sealed virtual IColumn get_ReferencedColumn();
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.IndexFactory : ObjectFactoryBase`1<IndexFactory> {
    public sealed virtual IMutableIndexedColumn CreateIndexedColumn(IColumn referencedColumn);
    public sealed virtual IMutableRelationalIndex CreateRelationalIndex(ITabular parent, string name, CollationInfo collationInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.JsonBuiltInFunction : BuiltInFunction {
    private string m_varArgParamName;
    public bool HasJsonNullQualifier { get; }
    public string VarArgParamName { get; }
    public JsonBuiltInFunction(string name, IScalarDataType returnType, short minArgCount, short maxArgCount, BuiltInFunctionAttributes attributes, string varArgParamName, IMetadataOrderedCollection`1<IParameter> parameters);
    public static JsonBuiltInFunction Create(string name, IScalarDataType returnType, short minNumOfArgs, short maxNumOfArgs, BuiltInFunctionAttributes attributes, string varArgParamName, IScalarParameter[] arguments);
    public sealed virtual bool get_HasJsonNullQualifier();
    public sealed virtual string get_VarArgParamName();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.JsonNullQualifier : MetadataObjectBase {
    private JsonNullQualifierType jsonNullQualifierValue;
    public JsonNullQualifierType JsonNullQulifierValue { get; public set; }
    internal JsonNullQualifier(JsonNullQualifierType jsonNullQualifierValue);
    public sealed virtual JsonNullQualifierType get_JsonNullQulifierValue();
    public sealed virtual void set_JsonNullQulifierValue(JsonNullQualifierType value);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Login : ServerOwnedObject {
    private LoginType m_loginType;
    private IAsymmetricKey m_asymmetricKey;
    private ICertificate m_certificate;
    private ICredential m_credential;
    private IDatabase m_defaultDatabase;
    private IPassword m_password;
    private string m_language;
    private Byte[] m_sid;
    public LoginType LoginType { get; }
    public IAsymmetricKey AsymmetricKey { get; public set; }
    public ICertificate Certificate { get; public set; }
    public ICredential Credential { get; public set; }
    public IDatabase DefaultDatabase { get; public set; }
    public string Language { get; public set; }
    public IPassword Password { get; public set; }
    public Byte[] Sid { get; public set; }
    public Login(IServer server, string name, LoginType loginType);
    public virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
    public sealed virtual LoginType get_LoginType();
    public sealed virtual IAsymmetricKey get_AsymmetricKey();
    public sealed virtual void set_AsymmetricKey(IAsymmetricKey value);
    public sealed virtual ICertificate get_Certificate();
    public sealed virtual void set_Certificate(ICertificate value);
    public sealed virtual ICredential get_Credential();
    public sealed virtual void set_Credential(ICredential value);
    public sealed virtual IDatabase get_DefaultDatabase();
    public sealed virtual void set_DefaultDatabase(IDatabase value);
    public sealed virtual string get_Language();
    public sealed virtual void set_Language(string value);
    public sealed virtual IPassword get_Password();
    public sealed virtual void set_Password(IPassword value);
    public sealed virtual Byte[] get_Sid();
    public sealed virtual void set_Sid(Byte[] value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.LoginFactory : ObjectFactoryBase`1<LoginFactory> {
    public sealed virtual IMutableLogin CreateAsymmetricKeyLogin(IServer server, string name);
    public sealed virtual IMutableLogin CreateCertificateLogin(IServer server, string name);
    public sealed virtual IMutableLogin CreateSqlLogin(IServer server, string name);
    public sealed virtual IMutableLogin CreateWindowsLogin(IServer server, string name);
    public sealed virtual IMutablePassword CreatePassword();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.NullQualifierFactory : ObjectFactoryBase`1<NullQualifierFactory> {
    public sealed virtual IJsonNullQualifier CreateJsonNullQualifier(string jsonNullQualifierValue);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ObjectFactoryBase`1 : object {
    public static T Instance { get; }
    public static T get_Instance();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ParameterFactory : ObjectFactoryBase`1<ParameterFactory> {
    public sealed virtual IScalarParameter CreateScalarParameter(string name, IScalarDataType dataType);
    public sealed virtual IScalarParameter CreateScalarParameter(string name, IScalarDataType dataType, bool isOutput, string defaultValue);
    public sealed virtual ITableParameter CreateTableParameter(string name, ITableDataType dataType);
    public sealed virtual ICursorParameter CreateCursorParameter(string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Password : object {
    private string m_value;
    private bool m_isHashed;
    private bool m_mustChange;
    private bool m_checkExpiration;
    private bool m_checkPolicy;
    public string Value { get; public set; }
    public bool IsHashed { get; public set; }
    public bool MustChange { get; public set; }
    public bool CheckPolicy { get; public set; }
    public bool CheckExpiration { get; public set; }
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual bool get_IsHashed();
    public sealed virtual void set_IsHashed(bool value);
    public sealed virtual bool get_MustChange();
    public sealed virtual void set_MustChange(bool value);
    public sealed virtual bool get_CheckPolicy();
    public sealed virtual void set_CheckPolicy(bool value);
    public sealed virtual bool get_CheckExpiration();
    public sealed virtual void set_CheckExpiration(bool value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.PermissionFactory : ObjectFactoryBase`1<PermissionFactory> {
    public sealed virtual IDatabasePermission CreateDatabasePermission(IDatabasePrincipal databasePrincipal, IMetadataObject targetObject, DatabasePermissionType permissionType, IDatabasePrincipal grantor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.PivotTable : VirtualTable {
    public TabularType TabularType { get; }
    public PivotTable(string name, CollationInfo collationInfo);
    public virtual TabularType get_TabularType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.PrimaryKeyConstraint : UniqueConstraintBase {
    public ConstraintType Type { get; }
    public PrimaryKeyConstraint(ITabular parent, IRelationalIndex index);
    public virtual ConstraintType get_Type();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.RelationalIndex : Index {
    private ITabular m_parent;
    private IndexedColumnCollection m_columns;
    private IFileGroup m_fileGroup;
    private IFileGroup m_fileStreamFileGroup;
    private IPartitionScheme m_fileStreamPartitionScheme;
    private byte m_fillFactor;
    private string m_filterDefinition;
    private IUniqueConstraintBase m_indexKey;
    private int m_maximumDegreeOfParallelism;
    private IndexOptions m_options;
    private IPartitionScheme m_partitionScheme;
    public bool CompactLargeObjects { get; public set; }
    public bool DisallowPageLocks { get; public set; }
    public bool DisallowRowLocks { get; public set; }
    public IFileGroup FileGroup { get; public set; }
    public IFileGroup FileStreamFileGroup { get; public set; }
    public IPartitionScheme FileStreamPartitionScheme { get; public set; }
    public byte FillFactor { get; public set; }
    public string FilterDefinition { get; public set; }
    public bool IgnoreDuplicateKeys { get; public set; }
    public IMutableMetadataOrderedCollection`1<IIndexedColumn> IndexedColumns { get; }
    public IUniqueConstraintBase IndexKey { get; public set; }
    public bool IsClustered { get; public set; }
    public bool IsDisabled { get; public set; }
    public bool IsSystemNamed { get; public set; }
    public bool IsUnique { get; public set; }
    public int MaximumDegreeOfParallelism { get; public set; }
    public bool NoAutomaticRecomputation { get; public set; }
    public bool OnlineIndexOperation { get; public set; }
    public bool OptimizeForSequentialKey { get; public set; }
    public bool PadIndex { get; public set; }
    public IPartitionScheme PartitionScheme { get; public set; }
    public bool ResumableIndexOperation { get; public set; }
    public bool SortInTempdb { get; public set; }
    private IMetadataOrderedCollection`1<IIndexedColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.IndexedColumns { get; }
    public ITabular Parent { get; }
    public IndexType Type { get; }
    public RelationalIndex(ITabular parent, string name, CollationInfo collationInfo);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual bool get_CompactLargeObjects();
    public sealed virtual void set_CompactLargeObjects(bool value);
    public sealed virtual bool get_DisallowPageLocks();
    public sealed virtual void set_DisallowPageLocks(bool value);
    public sealed virtual bool get_DisallowRowLocks();
    public sealed virtual void set_DisallowRowLocks(bool value);
    public sealed virtual IFileGroup get_FileGroup();
    public sealed virtual void set_FileGroup(IFileGroup value);
    public sealed virtual IFileGroup get_FileStreamFileGroup();
    public sealed virtual void set_FileStreamFileGroup(IFileGroup value);
    public sealed virtual IPartitionScheme get_FileStreamPartitionScheme();
    public sealed virtual void set_FileStreamPartitionScheme(IPartitionScheme value);
    public sealed virtual byte get_FillFactor();
    public sealed virtual void set_FillFactor(byte value);
    public sealed virtual string get_FilterDefinition();
    public sealed virtual void set_FilterDefinition(string value);
    public sealed virtual bool get_IgnoreDuplicateKeys();
    public sealed virtual void set_IgnoreDuplicateKeys(bool value);
    public sealed virtual IMutableMetadataOrderedCollection`1<IIndexedColumn> get_IndexedColumns();
    public sealed virtual IUniqueConstraintBase get_IndexKey();
    public sealed virtual void set_IndexKey(IUniqueConstraintBase value);
    public sealed virtual bool get_IsClustered();
    public sealed virtual void set_IsClustered(bool value);
    public sealed virtual bool get_IsDisabled();
    public sealed virtual void set_IsDisabled(bool value);
    public sealed virtual bool get_IsSystemNamed();
    public sealed virtual void set_IsSystemNamed(bool value);
    public sealed virtual bool get_IsUnique();
    public sealed virtual void set_IsUnique(bool value);
    public int get_MaximumDegreeOfParallelism();
    public void set_MaximumDegreeOfParallelism(int value);
    public sealed virtual bool get_NoAutomaticRecomputation();
    public sealed virtual void set_NoAutomaticRecomputation(bool value);
    public bool get_OnlineIndexOperation();
    public void set_OnlineIndexOperation(bool value);
    public bool get_OptimizeForSequentialKey();
    public void set_OptimizeForSequentialKey(bool value);
    public sealed virtual bool get_PadIndex();
    public sealed virtual void set_PadIndex(bool value);
    public sealed virtual IPartitionScheme get_PartitionScheme();
    public sealed virtual void set_PartitionScheme(IPartitionScheme value);
    public bool get_ResumableIndexOperation();
    public void set_ResumableIndexOperation(bool value);
    public bool get_SortInTempdb();
    public void set_SortInTempdb(bool value);
    private sealed virtual override IMetadataOrderedCollection`1<IIndexedColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_IndexedColumns();
    public sealed virtual ITabular get_Parent();
    public sealed virtual IndexType get_Type();
    private bool GetOption(IndexOptions option);
    private void SetOption(IndexOptions option, bool value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedExtendedStoredProcedureSynonym : ResolvedSynonym`1<IExtendedStoredProcedure> {
    public CallableModuleType ModuleType { get; }
    public IScalarDataType ReturnType { get; }
    public bool IsEncrypted { get; }
    public IExecutionContext ExecutionContext { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public ResolvedExtendedStoredProcedureSynonym(ISynonym synonym, IExtendedStoredProcedure targetObject);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual CallableModuleType get_ModuleType();
    public sealed virtual IScalarDataType get_ReturnType();
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedScalarValuedFunctionSynonym : ResolvedSynonym`1<IScalarValuedFunction> {
    public bool ReturnsNullOnNullInput { get; }
    public string BodyText { get; }
    public bool IsSchemaBound { get; }
    public bool IsSqlClr { get; }
    public bool IsQuotedIdentifierOn { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public bool IsEncrypted { get; }
    public IExecutionContext ExecutionContext { get; }
    public CallableModuleType ModuleType { get; }
    public IScalarDataType ReturnType { get; }
    public bool IsAggregateFunction { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    public ResolvedScalarValuedFunctionSynonym(ISynonym synonym, IScalarValuedFunction targetObject);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_ReturnsNullOnNullInput();
    public sealed virtual string get_BodyText();
    public sealed virtual bool get_IsSchemaBound();
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual CallableModuleType get_ModuleType();
    public sealed virtual IScalarDataType get_ReturnType();
    public sealed virtual bool get_IsAggregateFunction();
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedStoredProcedureSynonym : ResolvedSynonym`1<IStoredProcedure> {
    public string BodyText { get; }
    public bool ForReplication { get; }
    public bool IsRecompiled { get; }
    public bool IsSqlClr { get; }
    public bool Startup { get; }
    public bool IsQuotedIdentifierOn { get; }
    public CallableModuleType ModuleType { get; }
    public IScalarDataType ReturnType { get; }
    public bool IsEncrypted { get; }
    public IExecutionContext ExecutionContext { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public ResolvedStoredProcedureSynonym(ISynonym synonym, IStoredProcedure targetObject);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual string get_BodyText();
    public sealed virtual bool get_ForReplication();
    public sealed virtual bool get_IsRecompiled();
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual bool get_Startup();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual CallableModuleType get_ModuleType();
    public sealed virtual IScalarDataType get_ReturnType();
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedSynonym`1 : SchemaOwnedObject {
    private ISynonym synonym;
    private T targetObject;
    public bool IsResolvedSynonym { get; }
    public ISynonym Synonym { get; }
    public T TargetObject { get; }
    private ISchemaOwnedObject Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedSynonym.TargetObject { get; }
    protected ResolvedSynonym`1(ISynonym synonym, T targetObject);
    public bool get_IsResolvedSynonym();
    public sealed virtual ISynonym get_Synonym();
    public sealed virtual T get_TargetObject();
    private sealed virtual override ISchemaOwnedObject Microsoft.SqlServer.Management.SqlParser.Metadata.IResolvedSynonym.get_TargetObject();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedSynonymFactory : ObjectFactoryBase`1<ResolvedSynonymFactory> {
    public sealed virtual IResolvedTableSynonym CreateResolvedTableSynonym(ISynonym synonym, ITable table);
    public sealed virtual IResolvedViewSynonym CreateResolvedViewSynonym(ISynonym synonym, IView view);
    public sealed virtual IResolvedExtendedStoredProcedureSynonym CreateResolvedExtendedStoredProcedureSynonym(ISynonym synonym, IExtendedStoredProcedure extendedStoredProcedure);
    public sealed virtual IResolvedScalarValuedFunctionSynonym CreateResolvedScalarValuedFunctionSynonym(ISynonym synonym, IScalarValuedFunction scalarValuedFunction);
    public sealed virtual IResolvedStoredProcedureSynonym CreateResolvedStoredProcedureSynonym(ISynonym synonym, IStoredProcedure storedProcedure);
    public sealed virtual IResolvedTableValuedFunctionSynonym CreateResolvedTableValuedFunctionSynonym(ISynonym synonym, ITableValuedFunction tableValuedFunction);
    public sealed virtual IResolvedUserDefinedAggregateSynonym CreateResolvedUserDefinedAggregateSynonym(ISynonym synonym, IUserDefinedAggregate userDefinedAggregate);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedTableSynonym : ResolvedSynonym`1<ITable> {
    public IMetadataCollection`1<IDmlTrigger> Triggers { get; }
    public bool IsQuotedIdentifierOn { get; }
    public IMetadataCollection`1<IConstraint> Constraints { get; }
    public IMetadataCollection`1<IIndex> Indexes { get; }
    public IMetadataCollection`1<IStatistics> Statistics { get; }
    public TabularType TabularType { get; }
    public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public ITabular Unaliased { get; }
    public ResolvedTableSynonym(ISynonym synonym, ITable targetObject);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IMetadataCollection`1<IDmlTrigger> get_Triggers();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual IMetadataCollection`1<IConstraint> get_Constraints();
    public sealed virtual IMetadataCollection`1<IIndex> get_Indexes();
    public sealed virtual IMetadataCollection`1<IStatistics> get_Statistics();
    public sealed virtual TabularType get_TabularType();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual ITabular get_Unaliased();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedTableValuedFunctionSynonym : ResolvedSynonym`1<ITableValuedFunction> {
    public bool IsInline { get; }
    public string TableVariableName { get; }
    public IMetadataCollection`1<IConstraint> Constraints { get; }
    public IMetadataCollection`1<IIndex> Indexes { get; }
    public IMetadataCollection`1<IStatistics> Statistics { get; }
    public TabularType TabularType { get; }
    public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public ITabular Unaliased { get; }
    public string BodyText { get; }
    public bool IsSchemaBound { get; }
    public bool IsSqlClr { get; }
    public bool IsQuotedIdentifierOn { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public bool IsEncrypted { get; }
    public IExecutionContext ExecutionContext { get; }
    public ResolvedTableValuedFunctionSynonym(ISynonym synonym, ITableValuedFunction targetObject);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsInline();
    public sealed virtual string get_TableVariableName();
    public sealed virtual IMetadataCollection`1<IConstraint> get_Constraints();
    public sealed virtual IMetadataCollection`1<IIndex> get_Indexes();
    public sealed virtual IMetadataCollection`1<IStatistics> get_Statistics();
    public sealed virtual TabularType get_TabularType();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual ITabular get_Unaliased();
    public sealed virtual string get_BodyText();
    public sealed virtual bool get_IsSchemaBound();
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual IExecutionContext get_ExecutionContext();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedUserDefinedAggregateSynonym : ResolvedSynonym`1<IUserDefinedAggregate> {
    public bool IsAggregateFunction { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    public ResolvedUserDefinedAggregateSynonym(ISynonym synonym, IUserDefinedAggregate targetObject);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsAggregateFunction();
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ResolvedViewSynonym : ResolvedSynonym`1<IView> {
    public bool IsEncrypted { get; }
    public bool IsSchemaBound { get; }
    public string QueryText { get; }
    public bool ReturnsViewMetadata { get; }
    public bool HasCheckOption { get; }
    public bool HasColumnSpecification { get; }
    public IMetadataCollection`1<IDmlTrigger> Triggers { get; }
    public bool IsQuotedIdentifierOn { get; }
    public IMetadataCollection`1<IConstraint> Constraints { get; }
    public IMetadataCollection`1<IIndex> Indexes { get; }
    public IMetadataCollection`1<IStatistics> Statistics { get; }
    public TabularType TabularType { get; }
    public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public ITabular Unaliased { get; }
    public ResolvedViewSynonym(ISynonym synonym, IView targetObject);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual bool get_IsSchemaBound();
    public sealed virtual string get_QueryText();
    public sealed virtual bool get_ReturnsViewMetadata();
    public sealed virtual bool get_HasCheckOption();
    public sealed virtual bool get_HasColumnSpecification();
    public sealed virtual IMetadataCollection`1<IDmlTrigger> get_Triggers();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual IMetadataCollection`1<IConstraint> get_Constraints();
    public sealed virtual IMetadataCollection`1<IIndex> get_Indexes();
    public sealed virtual IMetadataCollection`1<IStatistics> get_Statistics();
    public sealed virtual TabularType get_TabularType();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual ITabular get_Unaliased();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.RoleFactory : ObjectFactoryBase`1<RoleFactory> {
    public sealed virtual IMutableApplicationRole CreateApplicationRole(IDatabase database, string name);
    public sealed virtual IMutableDatabaseRole CreateDatabaseRole(IDatabase database, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ScalarFactory : ObjectFactoryBase`1<ScalarFactory> {
    private LiteralExpressionFactory m_literalExpressionFactory;
    private ScalarExpression m_expression;
    private ScalarExpression m_null;
    public ILiteralScalarFactory Literal { get; }
    public IScalar Null { get; }
    public sealed virtual ILiteralScalarFactory get_Literal();
    public sealed virtual IScalar get_Null();
    public sealed virtual IScalarExpression CreateScalarExpression(IScalarDataType dataType, bool nullable);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ScalarParameter : LocalVariable`1<IScalarDataType> {
    private bool m_isOutput;
    private string m_defaultValue;
    public bool IsParameter { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    public bool IsOutput { get; }
    public bool IsReadOnly { get; }
    public string DefaultValue { get; }
    public ScalarParameter(string name, IScalarDataType dataType);
    public ScalarParameter(string name, IScalarDataType dataType, bool isOutput, string defaultValue);
    public virtual bool get_IsParameter();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
    public sealed virtual bool get_IsOutput();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_DefaultValue();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ScalarValuedFunction : UserDefinedFunction {
    private bool m_returnsNullOnNullInput;
    private IScalarDataType m_returnType;
    public CallableModuleType ModuleType { get; }
    public IScalarDataType ReturnType { get; public set; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; public set; }
    public bool Nullable { get; public set; }
    public bool IsAggregateFunction { get; }
    public bool ReturnsNullOnNullInput { get; public set; }
    public ScalarValuedFunction(ISchema schema, string name);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual CallableModuleType get_ModuleType();
    public sealed virtual IScalarDataType get_ReturnType();
    public sealed virtual void set_ReturnType(IScalarDataType value);
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual void set_DataType(IScalarDataType value);
    public sealed virtual bool get_Nullable();
    public sealed virtual void set_Nullable(bool value);
    public sealed virtual bool get_IsAggregateFunction();
    public sealed virtual bool get_ReturnsNullOnNullInput();
    public sealed virtual void set_ReturnsNullOnNullInput(bool value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Schema : DatabaseOwnedObject {
    private ExtendedStoredProcedureCollection extendedStoredProcedures;
    private ScalarValuedFunctionCollection scalarValuedFunctions;
    private StoredProcedureCollection storedProcedures;
    private SynonymCollection synonyms;
    private TableCollection tables;
    private TableValuedFunctionCollection tableValuedFunctions;
    private UserDefinedAggregateCollection userDefinedAggregates;
    private UserDefinedDataTypeCollection userDefinedDataTypes;
    private UserDefinedTableTypeCollection userDefinedTableTypes;
    private UserDefinedClrTypeCollection userDefinedClrTypes;
    private ViewCollection views;
    private IDatabasePrincipal owner;
    public IDatabasePrincipal Owner { get; public set; }
    public IMutableMetadataCollection`1<ITable> Tables { get; }
    public IMutableMetadataCollection`1<IView> Views { get; }
    public IMutableMetadataCollection`1<IUserDefinedAggregate> UserDefinedAggregates { get; }
    public IMutableMetadataCollection`1<ITableValuedFunction> TableValuedFunctions { get; }
    public IMutableMetadataCollection`1<IScalarValuedFunction> ScalarValuedFunctions { get; }
    public IMutableMetadataCollection`1<IStoredProcedure> StoredProcedures { get; }
    public IMutableMetadataCollection`1<ISynonym> Synonyms { get; }
    public IMutableMetadataCollection`1<IExtendedStoredProcedure> ExtendedStoredProcedures { get; }
    public IMutableMetadataCollection`1<IUserDefinedDataType> UserDefinedDataTypes { get; }
    public IMutableMetadataCollection`1<IUserDefinedTableType> UserDefinedTableTypes { get; }
    public IMutableMetadataCollection`1<IUserDefinedClrType> UserDefinedClrTypes { get; }
    private IMetadataCollection`1<ITable> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Tables { get; }
    private IMetadataCollection`1<IView> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Views { get; }
    private IMetadataCollection`1<IUserDefinedAggregate> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedAggregates { get; }
    private IMetadataCollection`1<ITableValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.TableValuedFunctions { get; }
    private IMetadataCollection`1<IScalarValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.ScalarValuedFunctions { get; }
    private IMetadataCollection`1<IStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.StoredProcedures { get; }
    private IMetadataCollection`1<ISynonym> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Synonyms { get; }
    private IMetadataCollection`1<IExtendedStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.ExtendedStoredProcedures { get; }
    private IMetadataCollection`1<IUserDefinedDataType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedDataTypes { get; }
    private IMetadataCollection`1<IUserDefinedTableType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedTableTypes { get; }
    private IMetadataCollection`1<IUserDefinedClrType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedClrTypes { get; }
    public Schema(IDatabase database, string name);
    public Schema(ISchema other);
    public virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IDatabasePrincipal get_Owner();
    public sealed virtual void set_Owner(IDatabasePrincipal value);
    public sealed virtual IMutableMetadataCollection`1<ITable> get_Tables();
    public sealed virtual IMutableMetadataCollection`1<IView> get_Views();
    public sealed virtual IMutableMetadataCollection`1<IUserDefinedAggregate> get_UserDefinedAggregates();
    public sealed virtual IMutableMetadataCollection`1<ITableValuedFunction> get_TableValuedFunctions();
    public sealed virtual IMutableMetadataCollection`1<IScalarValuedFunction> get_ScalarValuedFunctions();
    public sealed virtual IMutableMetadataCollection`1<IStoredProcedure> get_StoredProcedures();
    public sealed virtual IMutableMetadataCollection`1<ISynonym> get_Synonyms();
    public sealed virtual IMutableMetadataCollection`1<IExtendedStoredProcedure> get_ExtendedStoredProcedures();
    public sealed virtual IMutableMetadataCollection`1<IUserDefinedDataType> get_UserDefinedDataTypes();
    public sealed virtual IMutableMetadataCollection`1<IUserDefinedTableType> get_UserDefinedTableTypes();
    public sealed virtual IMutableMetadataCollection`1<IUserDefinedClrType> get_UserDefinedClrTypes();
    private sealed virtual override IMetadataCollection`1<ITable> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Tables();
    private sealed virtual override IMetadataCollection`1<IView> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Views();
    private sealed virtual override IMetadataCollection`1<IUserDefinedAggregate> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedAggregates();
    private sealed virtual override IMetadataCollection`1<ITableValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_TableValuedFunctions();
    private sealed virtual override IMetadataCollection`1<IScalarValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_ScalarValuedFunctions();
    private sealed virtual override IMetadataCollection`1<IStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_StoredProcedures();
    private sealed virtual override IMetadataCollection`1<ISynonym> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Synonyms();
    private sealed virtual override IMetadataCollection`1<IExtendedStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_ExtendedStoredProcedures();
    private sealed virtual override IMetadataCollection`1<IUserDefinedDataType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedDataTypes();
    private sealed virtual override IMetadataCollection`1<IUserDefinedTableType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedTableTypes();
    private sealed virtual override IMetadataCollection`1<IUserDefinedClrType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedClrTypes();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.SchemaFactory : ObjectFactoryBase`1<SchemaFactory> {
    public sealed virtual IMutableSchema Create(IDatabase database, string name);
    public sealed virtual IMutableSchema Create(ISchema otherSchema);
    public sealed virtual ISchema CreateEmptySchema(IDatabase database, string name, bool isSystemObject);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.SchemaOwnedObject : DatabaseObject`1<ISchema> {
    public CollationInfo CollationInfo { get; }
    public ISchema Schema { get; }
    protected SchemaOwnedObject(ISchema schema, string name);
    protected SchemaOwnedObject(ISchemaOwnedObject schemaOwnedObject);
    public sealed virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual CollationInfo get_CollationInfo();
    public sealed virtual ISchema get_Schema();
    public abstract virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Server : object {
    private string m_name;
    private CollationInfo m_collationInfo;
    private DatabaseCollection m_databases;
    private CredentialCollection m_credentials;
    private LoginCollection m_logins;
    private ServerDdlTriggerCollection m_triggers;
    private bool m_isSystemObject;
    public IMutableMetadataCollection`1<IDatabase> Databases { get; }
    public IMutableMetadataCollection`1<ICredential> Credentials { get; }
    public IMutableMetadataCollection`1<ILogin> Logins { get; }
    public IMutableMetadataCollection`1<IServerDdlTrigger> Triggers { get; }
    public CollationInfo CollationInfo { get; }
    private IMetadataCollection`1<IDatabase> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Databases { get; }
    private IMetadataCollection`1<ICredential> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Credentials { get; }
    private IMetadataCollection`1<ILogin> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Logins { get; }
    private IMetadataCollection`1<IServerDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Triggers { get; }
    public IDatabaseObject Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    public bool IsVolatile { get; }
    public bool IsSystemObject { get; public set; }
    public string Name { get; }
    public Server(string name, CollationInfo collationInfo);
    public Server(IServer otherServer);
    public sealed virtual IMutableMetadataCollection`1<IDatabase> get_Databases();
    public sealed virtual IMutableMetadataCollection`1<ICredential> get_Credentials();
    public sealed virtual IMutableMetadataCollection`1<ILogin> get_Logins();
    public sealed virtual IMutableMetadataCollection`1<IServerDdlTrigger> get_Triggers();
    public sealed virtual CollationInfo get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IDatabase> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Databases();
    private sealed virtual override IMetadataCollection`1<ICredential> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Credentials();
    private sealed virtual override IMetadataCollection`1<ILogin> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Logins();
    private sealed virtual override IMetadataCollection`1<IServerDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Triggers();
    public sealed virtual IDatabaseObject get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    public bool get_IsVolatile();
    public sealed virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual void set_IsSystemObject(bool value);
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ServerDdlTrigger : ServerOwnedObject {
    private TriggerEventTypeSet serverDdlEvents;
    private bool isEncrypted;
    private bool isEnabled;
    private string bodyText;
    private IExecutionContext executionContext;
    private bool isQuotedIdentifierOn;
    private bool isSqlClr;
    public IMutableTriggerEventTypeSet ServerDdlEvents { get; }
    public bool IsQuotedIdentifierOn { get; public set; }
    private ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IServerDdlTrigger.ServerDdlEvents { get; }
    public string BodyText { get; public set; }
    public bool IsEncrypted { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsSqlClr { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public ServerDdlTrigger(IServer server, string name);
    public virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IMutableTriggerEventTypeSet get_ServerDdlEvents();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual void set_IsQuotedIdentifierOn(bool value);
    private sealed virtual override ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IServerDdlTrigger.get_ServerDdlEvents();
    public sealed virtual string get_BodyText();
    public sealed virtual void set_BodyText(string value);
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual void set_IsEncrypted(bool value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual void set_IsSqlClr(bool value);
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual void set_ExecutionContext(IExecutionContext value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ServerFactory : ObjectFactoryBase`1<ServerFactory> {
    public sealed virtual IMutableServer Create(string name, CollationInfo collationInfo);
    public sealed virtual IMutableServer Create(IServer otherServer);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.ServerOwnedObject : DatabaseObject`1<IServer> {
    public IServer Server { get; }
    protected ServerOwnedObject(IServer server, string name);
    protected ServerOwnedObject(IServerOwnedObject serverOwnedObject);
    public sealed virtual T Accept(IDatabaseObjectVisitor`1<T> visitor);
    public sealed virtual IServer get_Server();
    public abstract virtual T Accept(IServerOwnedObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.StoredProcedure : SchemaOwnedObject {
    private bool m_forReplication;
    private bool m_isEncrypted;
    private bool m_isSqlClr;
    private bool m_isRecompiled;
    private bool m_startup;
    private string m_bodyText;
    private IExecutionContext m_executionContext;
    private IScalarDataType m_returnType;
    private ParameterCollection m_parameters;
    private bool m_isQuotedIdentifierOn;
    public CallableModuleType ModuleType { get; }
    public IScalarDataType ReturnType { get; public set; }
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    public IMutableMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public bool IsEncrypted { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public string BodyText { get; public set; }
    public bool ForReplication { get; public set; }
    public bool IsSqlClr { get; public set; }
    public bool IsRecompiled { get; public set; }
    public bool Startup { get; public set; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public StoredProcedure(ISchema schema, string name);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual CallableModuleType get_ModuleType();
    public sealed virtual IScalarDataType get_ReturnType();
    public sealed virtual void set_ReturnType(IScalarDataType value);
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
    public sealed virtual IMutableMetadataOrderedCollection`1<IParameter> get_Parameters();
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual void set_IsEncrypted(bool value);
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual void set_ExecutionContext(IExecutionContext value);
    public sealed virtual string get_BodyText();
    public sealed virtual void set_BodyText(string value);
    public sealed virtual bool get_ForReplication();
    public sealed virtual void set_ForReplication(bool value);
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual void set_IsSqlClr(bool value);
    public sealed virtual bool get_IsRecompiled();
    public sealed virtual void set_IsRecompiled(bool value);
    public sealed virtual bool get_Startup();
    public sealed virtual void set_Startup(bool value);
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public void set_IsQuotedIdentifierOn(bool value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.StoredProcedureFactory : ObjectFactoryBase`1<StoredProcedureFactory> {
    public sealed virtual IMutableStoredProcedure Create(ISchema schema, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Synonym : SchemaOwnedObject {
    private SynonymBaseType baseType;
    private string baseObjectName;
    public SynonymBaseType BaseType { get; public set; }
    public string BaseObjectName { get; public set; }
    public Synonym(ISchema schema, string name);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual SynonymBaseType get_BaseType();
    public sealed virtual void set_BaseType(SynonymBaseType value);
    public sealed virtual string get_BaseObjectName();
    public sealed virtual void set_BaseObjectName(string value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.SynonymFactory : ObjectFactoryBase`1<SynonymFactory> {
    public sealed virtual IMutableSynonym CreateSynonym(ISchema schema, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.SystemDataType : MetadataObjectBase {
    private static int ArgNotSet;
    private DataTypeSpec m_typeSpec;
    private int m_length;
    private int m_precision;
    private int m_scale;
    private bool m_ignoreArgs;
    public DataTypeSpec TypeSpec { get; }
    public int Length { get; }
    public int NumericPrecision { get; }
    public int NumericScale { get; }
    public bool IsSystem { get; }
    public bool IsClr { get; }
    public bool IsXml { get; }
    public bool IsVoid { get; }
    public ISystemDataType BaseSystemDataType { get; }
    public IClrDataType AsClrDataType { get; }
    public bool IsScalar { get; }
    public bool IsTable { get; }
    public bool IsCursor { get; }
    public bool IsUnknown { get; }
    public IScalarDataType AsScalarDataType { get; }
    public ITableDataType AsTableDataType { get; }
    public IUserDefinedType AsUserDefinedType { get; }
    protected SystemDataType(DataTypeSpec typeSpec);
    private SystemDataType(DataTypeSpec typeSpec, bool ignoreArgs);
    private SystemDataType(DataTypeSpec typeSpec, int arg);
    private SystemDataType(DataTypeSpec typeSpec, int arg1, int arg2);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    private static string GetDataTypeName(DataTypeSpec typeSpec);
    public sealed virtual DataTypeSpec get_TypeSpec();
    public sealed virtual int get_Length();
    public sealed virtual int get_NumericPrecision();
    public sealed virtual int get_NumericScale();
    public sealed virtual bool get_IsSystem();
    public virtual bool get_IsClr();
    public sealed virtual bool get_IsXml();
    public sealed virtual bool get_IsVoid();
    public sealed virtual ISystemDataType get_BaseSystemDataType();
    public virtual IClrDataType get_AsClrDataType();
    public sealed virtual bool get_IsScalar();
    public sealed virtual bool get_IsTable();
    public sealed virtual bool get_IsCursor();
    public sealed virtual bool get_IsUnknown();
    public IScalarDataType get_AsScalarDataType();
    public ITableDataType get_AsTableDataType();
    public IUserDefinedType get_AsUserDefinedType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.SystemDataTypeLookup : SystemDataTypeLookupBase {
    private IgnoreArgTypes m_ignoreArgs;
    public static SystemDataTypeLookup Instance { get; }
    public IgnoreArgTypes IgnoreArgs { get; }
    public static SystemDataTypeLookup get_Instance();
    public IgnoreArgTypes get_IgnoreArgs();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.Table : TableViewBase {
    private TabularType m_tabularType;
    public TabularType TabularType { get; }
    public Table(ISchema schema, string name);
    public Table(ITable table);
    public virtual TabularType get_TabularType();
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TableAlias : MetadataObjectBase {
    private ITabular m_aliasedTable;
    public TabularType TabularType { get; }
    public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public ITabular Unaliased { get; }
    public ITabular TargetTable { get; }
    public TableAlias(ITabular aliasedTable, string alias);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual TabularType get_TabularType();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual ITabular get_Unaliased();
    public sealed virtual ITabular get_TargetTable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TableDataType : MetadataObjectBase {
    private CollationInfo m_collationInfo;
    private ColumnOrderedCollection m_columns;
    private ConstraintCollection m_constraints;
    private IndexCollection m_indexes;
    private StatisticsCollection m_statistics;
    private bool m_isUnknown;
    public bool IsScalar { get; }
    public bool IsTable { get; }
    public bool IsCursor { get; }
    public bool IsUnknown { get; public set; }
    public IScalarDataType AsScalarDataType { get; }
    public ITableDataType AsTableDataType { get; }
    public IUserDefinedType AsUserDefinedType { get; }
    public CollationInfo CollationInfo { get; }
    public IMetadataCollection`1<IConstraint> Constraints { get; }
    public IMetadataCollection`1<IIndex> Indexes { get; }
    public IMetadataCollection`1<IStatistics> Statistics { get; }
    public TabularType TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    public ITabular Unaliased { get; }
    private IMutableMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.Constraints { get; }
    private IMutableMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.Indexes { get; }
    private IMutableMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.Statistics { get; }
    public IMutableMetadataOrderedCollection`1<IColumn> Columns { get; }
    public TableDataType(string name, CollationInfo collationInfo);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsScalar();
    public sealed virtual bool get_IsTable();
    public sealed virtual bool get_IsCursor();
    public sealed virtual bool get_IsUnknown();
    public sealed virtual void set_IsUnknown(bool value);
    public IScalarDataType get_AsScalarDataType();
    public ITableDataType get_AsTableDataType();
    public IUserDefinedType get_AsUserDefinedType();
    public sealed virtual CollationInfo get_CollationInfo();
    public sealed virtual IMetadataCollection`1<IConstraint> get_Constraints();
    public sealed virtual IMetadataCollection`1<IIndex> get_Indexes();
    public sealed virtual IMetadataCollection`1<IStatistics> get_Statistics();
    public sealed virtual TabularType get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    public sealed virtual ITabular get_Unaliased();
    private sealed virtual override IMutableMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.get_Constraints();
    private sealed virtual override IMutableMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.get_Indexes();
    private sealed virtual override IMutableMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.get_Statistics();
    public sealed virtual IMutableMetadataOrderedCollection`1<IColumn> get_Columns();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TableParameter : LocalVariable`1<ITableDataType> {
    public bool IsParameter { get; }
    public ITableDataType DataType { get; }
    public bool IsOutput { get; }
    public bool IsReadOnly { get; }
    public string DefaultValue { get; }
    public TabularType TabularType { get; }
    public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public ITabular Unaliased { get; }
    public TableParameter(string name, ITableDataType dataType);
    public virtual bool get_IsParameter();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ITableDataType get_DataType();
    public sealed virtual bool get_IsOutput();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_DefaultValue();
    public sealed virtual TabularType get_TabularType();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual ITabular get_Unaliased();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TableValuedFunction : UserDefinedFunction {
    private ColumnOrderedCollection m_columns;
    private ConstraintCollection m_constraints;
    private IndexCollection m_indexes;
    private StatisticsCollection m_statistics;
    private bool m_isInline;
    private string m_tableVariableName;
    private Nullable`1<short> m_maxArgCount;
    private Nullable`1<short> m_minArgCount;
    public bool IsInline { get; public set; }
    public string TableVariableName { get; public set; }
    private IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Constraints { get; }
    private IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Indexes { get; }
    private IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Statistics { get; }
    public IMutableMetadataOrderedCollection`1<IColumn> Columns { get; }
    public TabularType TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    public ITabular Unaliased { get; }
    public IMutableMetadataCollection`1<IConstraint> Constraints { get; }
    public IMutableMetadataCollection`1<IIndex> Indexes { get; }
    public IMutableMetadataCollection`1<IStatistics> Statistics { get; }
    public Nullable`1<int> MaxNumberOfArgs { get; }
    public Nullable`1<int> MinNumberOfArgs { get; }
    public TableValuedFunction(ISchema schema, string name, Nullable`1<short> minArgCount, Nullable`1<short> maxArgCount);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsInline();
    public sealed virtual void set_IsInline(bool value);
    public sealed virtual string get_TableVariableName();
    public sealed virtual void set_TableVariableName(string value);
    private sealed virtual override IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Constraints();
    private sealed virtual override IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Indexes();
    private sealed virtual override IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Statistics();
    public sealed virtual IMutableMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual TabularType get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    public sealed virtual ITabular get_Unaliased();
    public sealed virtual IMutableMetadataCollection`1<IConstraint> get_Constraints();
    public sealed virtual IMutableMetadataCollection`1<IIndex> get_Indexes();
    public sealed virtual IMutableMetadataCollection`1<IStatistics> get_Statistics();
    public Nullable`1<int> get_MaxNumberOfArgs();
    public Nullable`1<int> get_MinNumberOfArgs();
    public static TableValuedFunction CreateBuiltIn(ISchema schema, string name, Nullable`1<short> minArgCount, Nullable`1<short> maxArgCount, ScalarParameter[] parameters);
    public static void PopulateBuiltInCollection(ISchema schema, TableValuedFunctionCollection collection);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TableVariable : LocalVariable`1<ITableDataType> {
    public bool IsParameter { get; }
    public ITableDataType DataType { get; }
    public TabularType TabularType { get; }
    public IMetadataOrderedCollection`1<IColumn> Columns { get; }
    public ITabular Unaliased { get; }
    public TableVariable(string name, ITableDataType dataType);
    public virtual bool get_IsParameter();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ITableDataType get_DataType();
    public sealed virtual TabularType get_TabularType();
    public sealed virtual IMetadataOrderedCollection`1<IColumn> get_Columns();
    public sealed virtual ITabular get_Unaliased();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TableViewBase : SchemaOwnedObject {
    private ColumnOrderedCollection m_columns;
    private ConstraintCollection m_constraints;
    private IndexCollection m_indexes;
    private StatisticsCollection m_statistics;
    private DmlTriggerCollection m_triggers;
    private bool m_isQuotedIdentifierOn;
    public IMutableMetadataCollection`1<IDmlTrigger> Triggers { get; }
    public bool IsQuotedIdentifierOn { get; public set; }
    public IMutableMetadataCollection`1<IConstraint> Constraints { get; }
    public IMutableMetadataCollection`1<IIndex> Indexes { get; }
    public IMutableMetadataCollection`1<IStatistics> Statistics { get; }
    public IMutableMetadataOrderedCollection`1<IColumn> Columns { get; }
    private IMetadataCollection`1<IDmlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.Triggers { get; }
    private IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Constraints { get; }
    private IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Indexes { get; }
    private IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Statistics { get; }
    public TabularType TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    public ITabular Unaliased { get; }
    protected TableViewBase(ISchema schema, string name);
    protected TableViewBase(ITableViewBase tableViewBase);
    public sealed virtual IMutableMetadataCollection`1<IDmlTrigger> get_Triggers();
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual void set_IsQuotedIdentifierOn(bool value);
    public sealed virtual IMutableMetadataCollection`1<IConstraint> get_Constraints();
    public sealed virtual IMutableMetadataCollection`1<IIndex> get_Indexes();
    public sealed virtual IMutableMetadataCollection`1<IStatistics> get_Statistics();
    public sealed virtual IMutableMetadataOrderedCollection`1<IColumn> get_Columns();
    private sealed virtual override IMetadataCollection`1<IDmlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.get_Triggers();
    private sealed virtual override IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Constraints();
    private sealed virtual override IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Indexes();
    private sealed virtual override IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Statistics();
    public abstract virtual TabularType get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    public sealed virtual ITabular get_Unaliased();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TabularFactory : ObjectFactoryBase`1<TabularFactory> {
    public sealed virtual IMutableTabular CreateCommonTableExpression(string name, CollationInfo collationInfo);
    public sealed virtual IMutableTabular CreateDerivedTable(string name, CollationInfo collationInfo);
    public sealed virtual ITabular CreateDmlInsertedTable(ITabular targetTable);
    public sealed virtual ITabular CreateDmlDeletedTable(ITabular targetTable);
    public sealed virtual IMutableTabular CreateDmlTableSource(string name, CollationInfo collationInfo);
    public sealed virtual IMutableTabular CreatePivotTable(string name, CollationInfo collationInfo);
    public sealed virtual ITabular CreateTableAlias(ITabular aliasedTable, string alias);
    public sealed virtual IMutableTable CreateTable(ISchema schema, string name);
    public sealed virtual IMutableTable CreateTable(ITable table);
    public sealed virtual IMutableTabular CreateUnpivotTable(string name, CollationInfo collationInfo);
    public sealed virtual IMutableView CreateView(ISchema schema, string name);
    public sealed virtual IMutableView CreateView(IView view);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.TriggerFactory : ObjectFactoryBase`1<TriggerFactory> {
    public sealed virtual IMutableDmlTrigger CreateDmlTrigger(ITableViewBase parent, string name);
    public sealed virtual IMutableDatabaseDdlTrigger CreateDatabaseDdlTrigger(IDatabase database, string name);
    public sealed virtual IMutableServerDdlTrigger CreateServerDdlTrigger(IServer server, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UniqueConstraint : UniqueConstraintBase {
    public ConstraintType Type { get; }
    public UniqueConstraint(ITabular parent, IRelationalIndex index);
    public virtual ConstraintType get_Type();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UniqueConstraintBase : Constraint {
    private IRelationalIndex m_index;
    public bool IsSystemNamed { get; }
    public IRelationalIndex AssociatedIndex { get; }
    protected UniqueConstraintBase(ITabular parent, IRelationalIndex index);
    public sealed virtual bool get_IsSystemNamed();
    public sealed virtual IRelationalIndex get_AssociatedIndex();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UnpivotTable : VirtualTable {
    public TabularType TabularType { get; }
    public UnpivotTable(string name, CollationInfo collationInfo);
    public virtual TabularType get_TabularType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.User : DatabasePrincipal {
    private UserType userType;
    private IAsymmetricKey asymmetricKey;
    private ICertificate certificate;
    private ILogin login;
    private ISchema defaultSchema;
    private string password;
    public UserType UserType { get; }
    public IAsymmetricKey AsymmetricKey { get; public set; }
    public ICertificate Certificate { get; public set; }
    public ILogin Login { get; public set; }
    public string Password { get; public set; }
    public ISchema DefaultSchema { get; public set; }
    public User(IDatabase database, string name, UserType userType);
    public virtual T Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    public sealed virtual UserType get_UserType();
    public sealed virtual IAsymmetricKey get_AsymmetricKey();
    public sealed virtual void set_AsymmetricKey(IAsymmetricKey value);
    public sealed virtual ICertificate get_Certificate();
    public sealed virtual void set_Certificate(ICertificate value);
    public sealed virtual ILogin get_Login();
    public sealed virtual void set_Login(ILogin value);
    public sealed virtual string get_Password();
    public sealed virtual void set_Password(string value);
    public sealed virtual ISchema get_DefaultSchema();
    public sealed virtual void set_DefaultSchema(ISchema value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UserDefinedClrType : SchemaOwnedObject {
    private string m_assemblyName;
    private string m_className;
    private bool m_isBinaryOrdered;
    private bool m_isComVisible;
    private bool m_isNullable;
    private bool m_isUnknown;
    private UdtMethodCollection m_methods;
    private UdtDataMemberCollection m_dataMembers;
    public IMetadataCollection`1<IUdtMethod> Methods { get; }
    public IMetadataCollection`1<IUdtDataMember> DataMembers { get; }
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public bool IsBinaryOrdered { get; public set; }
    public bool IsComVisible { get; public set; }
    public bool IsNullable { get; public set; }
    private IMutableMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableClrDataType.Methods { get; }
    private IMutableMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableClrDataType.DataMembers { get; }
    public bool IsScalar { get; }
    public bool IsTable { get; }
    public bool IsCursor { get; }
    public bool IsUnknown { get; public set; }
    public ISystemDataType BaseSystemDataType { get; public set; }
    public bool IsSystem { get; }
    public bool IsClr { get; }
    public bool IsXml { get; }
    public bool IsVoid { get; }
    public UserDefinedClrType(ISchema schema, string name);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IMetadataCollection`1<IUdtMethod> get_Methods();
    public sealed virtual IMetadataCollection`1<IUdtDataMember> get_DataMembers();
    public sealed virtual string get_AssemblyName();
    public sealed virtual void set_AssemblyName(string value);
    public sealed virtual string get_ClassName();
    public sealed virtual void set_ClassName(string value);
    public sealed virtual bool get_IsBinaryOrdered();
    public sealed virtual void set_IsBinaryOrdered(bool value);
    public sealed virtual bool get_IsComVisible();
    public sealed virtual void set_IsComVisible(bool value);
    public sealed virtual bool get_IsNullable();
    public sealed virtual void set_IsNullable(bool value);
    private sealed virtual override IMutableMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableClrDataType.get_Methods();
    private sealed virtual override IMutableMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableClrDataType.get_DataMembers();
    public sealed virtual bool get_IsScalar();
    public sealed virtual bool get_IsTable();
    public sealed virtual bool get_IsCursor();
    public sealed virtual bool get_IsUnknown();
    public sealed virtual void set_IsUnknown(bool value);
    public sealed virtual ISystemDataType get_BaseSystemDataType();
    public sealed virtual void set_BaseSystemDataType(ISystemDataType value);
    public sealed virtual bool get_IsSystem();
    public sealed virtual bool get_IsClr();
    public sealed virtual bool get_IsXml();
    public sealed virtual bool get_IsVoid();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UserDefinedDataType : SchemaOwnedObject {
    private bool m_isUnknown;
    private bool m_nullable;
    private ISystemDataType m_baseSystemDataType;
    public bool Nullable { get; public set; }
    public bool IsScalar { get; }
    public bool IsTable { get; }
    public bool IsCursor { get; }
    public bool IsUnknown { get; public set; }
    public ISystemDataType BaseSystemDataType { get; public set; }
    public bool IsSystem { get; }
    public bool IsClr { get; }
    public bool IsXml { get; }
    public bool IsVoid { get; }
    public UserDefinedDataType(ISchema schema, string name);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_Nullable();
    public sealed virtual void set_Nullable(bool value);
    public sealed virtual bool get_IsScalar();
    public sealed virtual bool get_IsTable();
    public sealed virtual bool get_IsCursor();
    public sealed virtual bool get_IsUnknown();
    public sealed virtual void set_IsUnknown(bool value);
    public sealed virtual ISystemDataType get_BaseSystemDataType();
    public sealed virtual void set_BaseSystemDataType(ISystemDataType value);
    public sealed virtual bool get_IsSystem();
    public sealed virtual bool get_IsClr();
    public sealed virtual bool get_IsXml();
    public sealed virtual bool get_IsVoid();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UserDefinedFunction : SchemaOwnedObject {
    private bool m_isEncrypted;
    private bool m_isSchemaBound;
    private bool m_isSqlClr;
    private string m_bodyText;
    private IExecutionContext m_executionContext;
    private ParameterCollection m_parameters;
    private bool m_isQuotedIdentifierOn;
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    public IMutableMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public bool IsEncrypted { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public string BodyText { get; public set; }
    public bool IsSchemaBound { get; public set; }
    public bool IsSqlClr { get; public set; }
    public bool IsQuotedIdentifierOn { get; public set; }
    protected UserDefinedFunction(ISchema schema, string name);
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
    public sealed virtual IMutableMetadataOrderedCollection`1<IParameter> get_Parameters();
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual void set_IsEncrypted(bool value);
    public sealed virtual IExecutionContext get_ExecutionContext();
    public sealed virtual void set_ExecutionContext(IExecutionContext value);
    public sealed virtual string get_BodyText();
    public sealed virtual void set_BodyText(string value);
    public sealed virtual bool get_IsSchemaBound();
    public sealed virtual void set_IsSchemaBound(bool value);
    public sealed virtual bool get_IsSqlClr();
    public sealed virtual void set_IsSqlClr(bool value);
    public sealed virtual bool get_IsQuotedIdentifierOn();
    public sealed virtual void set_IsQuotedIdentifierOn(bool value);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UserDefinedFunctionFactory : ObjectFactoryBase`1<UserDefinedFunctionFactory> {
    public sealed virtual IMutableScalarValuedFunction CreateScalarValuedFunction(ISchema schema, string name);
    public sealed virtual IMutableTableValuedFunction CreateTableValuedFunction(ISchema schema, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UserDefinedTableType : SchemaOwnedObject {
    private ColumnOrderedCollection m_columns;
    private ConstraintCollection m_constraints;
    private IndexCollection m_indexes;
    private StatisticsCollection m_statistics;
    private bool m_isUnknown;
    public IMetadataCollection`1<IConstraint> Constraints { get; }
    public IMetadataCollection`1<IIndex> Indexes { get; }
    public IMetadataCollection`1<IStatistics> Statistics { get; }
    public TabularType TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    public ITabular Unaliased { get; }
    public IMutableMetadataOrderedCollection`1<IColumn> Columns { get; }
    private IMutableMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.Constraints { get; }
    private IMutableMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.Indexes { get; }
    private IMutableMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.Statistics { get; }
    public bool IsUnknown { get; public set; }
    public bool IsScalar { get; }
    public bool IsTable { get; }
    public bool IsCursor { get; }
    public UserDefinedTableType(ISchema schema, string name);
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual IMetadataCollection`1<IConstraint> get_Constraints();
    public sealed virtual IMetadataCollection`1<IIndex> get_Indexes();
    public sealed virtual IMetadataCollection`1<IStatistics> get_Statistics();
    public sealed virtual TabularType get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    public sealed virtual ITabular get_Unaliased();
    public sealed virtual IMutableMetadataOrderedCollection`1<IColumn> get_Columns();
    private sealed virtual override IMutableMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.get_Constraints();
    private sealed virtual override IMutableMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.get_Indexes();
    private sealed virtual override IMutableMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IMutableDatabaseTable.get_Statistics();
    public sealed virtual bool get_IsUnknown();
    public sealed virtual void set_IsUnknown(bool value);
    public sealed virtual bool get_IsScalar();
    public sealed virtual bool get_IsTable();
    public sealed virtual bool get_IsCursor();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UserDefinedTypeFactory : ObjectFactoryBase`1<UserDefinedTypeFactory> {
    public sealed virtual IMutableUserDefinedClrType CreateClrType(ISchema schema, string name);
    public sealed virtual IMutableUserDefinedDataType CreateDataType(ISchema schema, string name);
    public sealed virtual IMutableUserDefinedTableType CreateTableType(ISchema schema, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.UserFactory : ObjectFactoryBase`1<UserFactory> {
    public sealed virtual IMutableUser CreateAsymmetricKeyUser(IDatabase database, string name);
    public sealed virtual IMutableUser CreateCertificateUser(IDatabase database, string name);
    public sealed virtual IMutableUser CreateNoLoginUser(IDatabase database, string name);
    public sealed virtual IMutableUser CreateSqlLoginUser(IDatabase database, string name);
    public sealed virtual IMutableUser CreateExternalProviderUser(IDatabase database, string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.VariableFactory : ObjectFactoryBase`1<VariableFactory> {
    public sealed virtual IScalarVariable CreateScalarVariable(string name, IScalarDataType dataType);
    public sealed virtual ITableVariable CreateTableVariable(string name, ITableDataType dataType);
    public sealed virtual ICursorVariable CreateCursorVariable(string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.View : TableViewBase {
    private bool m_hasCheckOption;
    private bool m_isEncrypted;
    private bool m_isSchemaBound;
    private bool m_hasColumnSpecification;
    private bool m_returnsViewMetadata;
    private string m_queryText;
    public TabularType TabularType { get; }
    public bool HasCheckOption { get; public set; }
    public bool IsEncrypted { get; public set; }
    public bool IsSchemaBound { get; public set; }
    public string QueryText { get; public set; }
    public bool ReturnsViewMetadata { get; public set; }
    public bool HasColumnSpecification { get; public set; }
    public View(ISchema schema, string name);
    public View(IView view);
    public virtual TabularType get_TabularType();
    public virtual T Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    public sealed virtual bool get_HasCheckOption();
    public sealed virtual void set_HasCheckOption(bool value);
    public sealed virtual bool get_IsEncrypted();
    public sealed virtual void set_IsEncrypted(bool value);
    public sealed virtual bool get_IsSchemaBound();
    public sealed virtual void set_IsSchemaBound(bool value);
    public sealed virtual string get_QueryText();
    public sealed virtual void set_QueryText(string value);
    public sealed virtual bool get_ReturnsViewMetadata();
    public sealed virtual void set_ReturnsViewMetadata(bool value);
    public sealed virtual bool get_HasColumnSpecification();
    public sealed virtual void set_HasColumnSpecification(bool value);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.VirtualTable : MetadataObjectBase {
    private ColumnOrderedCollection m_columns;
    public IMutableMetadataOrderedCollection`1<IColumn> Columns { get; }
    public TabularType TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    public ITabular Unaliased { get; }
    public ITabular TargetTable { get; }
    protected VirtualTable(string name, CollationInfo collationInfo);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual IMutableMetadataOrderedCollection`1<IColumn> get_Columns();
    public abstract virtual TabularType get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    public sealed virtual ITabular get_Unaliased();
    public virtual ITabular get_TargetTable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.XmlDataTypeMethod : object {
    private string m_name;
    private IScalarDataType m_dataType;
    private bool m_nullable;
    private IMetadataOrderedCollection`1<IParameter> m_parameters;
    public bool IsAggregateFunction { get; }
    public string Name { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    public XmlDataTypeMethod(string name, IScalarDataType dataType, bool nullable, IParameter[] parameters);
    public sealed virtual bool get_IsAggregateFunction();
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.XmlDataTypeMethodCollection : DualTypeSortedListCollection`2<IXmlDataTypeMethod, IScalarFunction> {
    private static XmlDataTypeMethodCollection instance;
    public static XmlDataTypeMethodCollection Instance { get; }
    private static XmlDataTypeMethodCollection();
    public static XmlDataTypeMethodCollection get_Instance();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.XmlDataTypeTableMethod : object {
    private string m_name;
    private IMetadataOrderedCollection`1<IParameter> m_parameters;
    public string Name { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public XmlDataTypeTableMethod(string name, IParameter[] parameters);
    public sealed virtual string get_Name();
    public sealed virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.Internals.XmlDataTypeTableMethodCollection : DualTypeSortedListCollection`2<IXmlDataTypeTableMethod, IFunction> {
    private static XmlDataTypeTableMethodCollection instance;
    public static XmlDataTypeTableMethodCollection Instance { get; }
    private static XmlDataTypeTableMethodCollection();
    public static XmlDataTypeTableMethodCollection get_Instance();
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.INullQualifierFactory {
    public abstract virtual IJsonNullQualifier CreateJsonNullQualifier(string jsonNullQualifierValue);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IParameterFactory {
    public abstract virtual IScalarParameter CreateScalarParameter(string name, IScalarDataType dataType);
    public abstract virtual IScalarParameter CreateScalarParameter(string name, IScalarDataType dataType, bool isOutput, string defaultValue);
    public abstract virtual ITableParameter CreateTableParameter(string name, ITableDataType dataType);
    public abstract virtual ICursorParameter CreateCursorParameter(string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IPermissionFactory {
    public abstract virtual IDatabasePermission CreateDatabasePermission(IDatabasePrincipal databasePrincipal, IMetadataObject targetObject, DatabasePermissionType permissionType, IDatabasePrincipal grantor);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IResolvedSynonymFactory {
    public abstract virtual IResolvedTableSynonym CreateResolvedTableSynonym(ISynonym synonym, ITable table);
    public abstract virtual IResolvedViewSynonym CreateResolvedViewSynonym(ISynonym synonym, IView view);
    public abstract virtual IResolvedExtendedStoredProcedureSynonym CreateResolvedExtendedStoredProcedureSynonym(ISynonym synonym, IExtendedStoredProcedure extendedStoredProcedure);
    public abstract virtual IResolvedScalarValuedFunctionSynonym CreateResolvedScalarValuedFunctionSynonym(ISynonym synonym, IScalarValuedFunction scalarValuedFunction);
    public abstract virtual IResolvedStoredProcedureSynonym CreateResolvedStoredProcedureSynonym(ISynonym synonym, IStoredProcedure storedProcedure);
    public abstract virtual IResolvedTableValuedFunctionSynonym CreateResolvedTableValuedFunctionSynonym(ISynonym synonym, ITableValuedFunction tableValuedFunction);
    public abstract virtual IResolvedUserDefinedAggregateSynonym CreateResolvedUserDefinedAggregateSynonym(ISynonym synonym, IUserDefinedAggregate userDefinedAggregate);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IRoleFactory {
    public abstract virtual IMutableApplicationRole CreateApplicationRole(IDatabase database, string name);
    public abstract virtual IMutableDatabaseRole CreateDatabaseRole(IDatabase database, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IScalarFactory {
    public ILiteralScalarFactory Literal { get; }
    public IScalar Null { get; }
    public abstract virtual ILiteralScalarFactory get_Literal();
    public abstract virtual IScalar get_Null();
    public abstract virtual IScalarExpression CreateScalarExpression(IScalarDataType dataType, bool nullable);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ISchemaFactory {
    public abstract virtual IMutableSchema Create(IDatabase database, string name);
    public abstract virtual IMutableSchema Create(ISchema otherSchema);
    public abstract virtual ISchema CreateEmptySchema(IDatabase database, string name, bool isSystemObject);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IServerFactory {
    public abstract virtual IMutableServer Create(string name, CollationInfo collationInfo);
    public abstract virtual IMutableServer Create(IServer otherServer);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IsJsonCollection : DictionaryCollection`1<IIsJsonValueType> {
    internal static IMetadataCollection`1<IIsJsonValueType> PopulatedInstance { get; }
    public IsJsonCollection(int initialCapacity);
    internal static IMetadataCollection`1<IIsJsonValueType> get_PopulatedInstance();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IsJsonValueType : MetadataObjectBase {
    private IsJsonValueType(string name);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public static void PopulateCollection(IsJsonCollection collection);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IStoredProcedureFactory {
    public abstract virtual IMutableStoredProcedure Create(ISchema schema, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ISynonymFactory {
    public abstract virtual IMutableSynonym CreateSynonym(ISchema schema, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ISystemDataTypeLookup {
    public abstract virtual ISystemDataType Find(DataTypeSpec typeSpec, bool isMaximum);
    public abstract virtual ISystemDataType Find(DataTypeSpec typeSpec, int precisionOrMaxLength);
    public abstract virtual ISystemDataType Find(DataTypeSpec typeSpec, int precision, int scale);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ITabularFactory {
    public abstract virtual IMutableTabular CreateCommonTableExpression(string name, CollationInfo collationInfo);
    public abstract virtual IMutableTabular CreateDerivedTable(string name, CollationInfo collationInfo);
    public abstract virtual ITabular CreateDmlInsertedTable(ITabular targetTable);
    public abstract virtual ITabular CreateDmlDeletedTable(ITabular targetTable);
    public abstract virtual IMutableTabular CreateDmlTableSource(string name, CollationInfo collationInfo);
    public abstract virtual IMutableTabular CreatePivotTable(string name, CollationInfo collationInfo);
    public abstract virtual IMutableTable CreateTable(ISchema schema, string name);
    public abstract virtual IMutableTable CreateTable(ITable table);
    public abstract virtual ITabular CreateTableAlias(ITabular aliasedTable, string alias);
    public abstract virtual IMutableTabular CreateUnpivotTable(string name, CollationInfo collationInfo);
    public abstract virtual IMutableView CreateView(ISchema schema, string name);
    public abstract virtual IMutableView CreateView(IView view);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ITriggerFactory {
    public abstract virtual IMutableDmlTrigger CreateDmlTrigger(ITableViewBase parent, string name);
    public abstract virtual IMutableDatabaseDdlTrigger CreateDatabaseDdlTrigger(IDatabase database, string name);
    public abstract virtual IMutableServerDdlTrigger CreateServerDdlTrigger(IServer server, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IUserDefinedFunctionFactory {
    public abstract virtual IMutableScalarValuedFunction CreateScalarValuedFunction(ISchema schema, string name);
    public abstract virtual IMutableTableValuedFunction CreateTableValuedFunction(ISchema schema, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IUserDefinedTypeFactory {
    public abstract virtual IMutableUserDefinedClrType CreateClrType(ISchema schema, string name);
    public abstract virtual IMutableUserDefinedDataType CreateDataType(ISchema schema, string name);
    public abstract virtual IMutableUserDefinedTableType CreateTableType(ISchema schema, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IUserFactory {
    public abstract virtual IMutableUser CreateAsymmetricKeyUser(IDatabase database, string name);
    public abstract virtual IMutableUser CreateCertificateUser(IDatabase database, string name);
    public abstract virtual IMutableUser CreateNoLoginUser(IDatabase database, string name);
    public abstract virtual IMutableUser CreateSqlLoginUser(IDatabase database, string name);
    public abstract virtual IMutableUser CreateExternalProviderUser(IDatabase database, string name);
}
public interface Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IVariableFactory {
    public abstract virtual IScalarVariable CreateScalarVariable(string name, IScalarDataType dataType);
    public abstract virtual ITableVariable CreateTableVariable(string name, ITableDataType dataType);
    public abstract virtual ICursorVariable CreateCursorVariable(string name);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.LocalVariable`1 : MetadataObjectBase {
    protected D m_dataType;
    public bool IsScalarVariable { get; }
    public bool IsTableVariable { get; }
    public bool IsCursorVariable { get; }
    public bool IsParameter { get; }
    public IDataType DataType { get; }
    protected LocalVariable`1(string name, D dataType);
    public sealed virtual bool get_IsScalarVariable();
    public sealed virtual bool get_IsTableVariable();
    public sealed virtual bool get_IsCursorVariable();
    public abstract virtual bool get_IsParameter();
    public sealed virtual IDataType get_DataType();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.LoginCollection : DualTypeSortedListCollection`2<ILogin, IDatabaseObject> {
    public LoginCollection(CollationInfo collationInfo);
    public LoginCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.MetadataDisplayInfoProvider : object {
    private CasingStyle m_builtInCasing;
    private ServerDisplayInfo m_server;
    private DatabaseDisplayInfo m_database;
    private SchemaDisplayInfo m_schema;
    private CteDisplayInfo m_commonTableExpression;
    private DerivedTableDisplayInfo m_derivedTable;
    private DmlInsertedDeletedDisplayInfo m_dmlInsertedDeleted;
    private DmlTableSourceDisplayInfo m_dmlTableSource;
    private PivotTableDisplayInfo m_pivotTable;
    private TableDisplayInfo m_table;
    private TableAliasDisplayInfo m_tableAlias;
    private TempTableDisplayInfo m_tempTable;
    private UnpivotTableDisplayInfo m_unpivotTable;
    private ViewDisplayInfo m_view;
    private CollationDisplayInfo m_collation;
    private ColumnDisplayInfo m_column;
    private ScalarExpressionDisplayInfo m_scalarExpression;
    private CursorDataTypeDisplayInfo m_cursorDataType;
    private ScalarDataTypeDisplayInfo m_scalarDataType;
    private SystemDataTypeDisplayInfo m_systemDataType;
    private TableDataTypeDisplayInfo m_tableDataType;
    private UserDefinedClrTypeDisplayInfo m_userDefinedClrType;
    private UserDefinedDataTypeDisplayInfo m_userDefinedDataType;
    private UserDefinedTableTypeDisplayInfo m_userDefinedTableType;
    private CursorVariableDisplayInfo m_cursorVariable;
    private ScalarVariableDisplayInfo m_scalarVariable;
    private TableVariableDisplayInfo m_tableVariable;
    private CursorParameterDisplayInfo m_cursorParameter;
    private ScalarParameterDisplayInfo m_scalarParameter;
    private TableParameterDisplayInfo m_tableParameter;
    private UdtDataMemberDisplayInfo m_udtDataMember;
    private UdtMethodDisplayInfo m_udtMethod;
    private BuiltInFunctionDisplayInfo m_builtInFunctionUpper;
    private GlobalVariableDisplayInfo m_globalVariableUpper;
    private DatePartDisplayInfo m_datePartUpper;
    private BuiltInFunctionDisplayInfo m_builtInFunctionLower;
    private GlobalVariableDisplayInfo m_globalVariableLower;
    private DatePartDisplayInfo m_datePartLower;
    private BuiltInFunctionDisplayInfo m_builtInFunction;
    private GlobalVariableDisplayInfo m_globalVariable;
    private DatePartDisplayInfo m_datePart;
    private IsJsonDisplayInfo m_isJson;
    private StoredProcedureDisplayInfo m_storedProcedure;
    private ExtendedStoredProcedureDisplayInfo m_extendedStoredProcedure;
    private ScalarValuedFunctionDisplayInfo m_scalarValuedFunction;
    private TableValuedFunctionDisplayInfo m_tableValuedFunction;
    private UserDefinedAggregateDisplayInfo m_userDefinedAggregate;
    private DatabaseDdlTriggerDisplayInfo m_databaseDdlTrigger;
    private DmlTriggerDisplayInfo m_dmlTrigger;
    private ServerDdlTriggerDisplayInfo m_serverDdlTrigger;
    private SynonymDisplayInfo m_synonym;
    private ApplicationRoleDisplayInfo m_applicationRole;
    private AsymmetricKeyDisplayInfo m_asymmetricKey;
    private CertificateDisplayInfo m_certificate;
    private CredentialDisplayInfo m_credential;
    private DatabasePermissionDisplayInfo m_databasePermission;
    private DatabaseRoleDisplayInfo m_databaseRole;
    private LoginDisplayInfo m_login;
    private UserDisplayInfo m_user;
    private XmlDataTypeMethodDisplayInfo m_xmlDataTypeMethod;
    private XmlDataTypeTableMethodDisplayInfo m_xmlDataTypeTableMethod;
    private JsonNullQualifierDisplayInfo m_jsonNullQualifierDisplayInfo;
    private EmptyDisplayInfo`1<ICheckConstraint> m_checkConstraint;
    private EmptyDisplayInfo`1<IDefaultConstraint> m_defaultConstraint;
    private EmptyDisplayInfo`1<IExecutionContext> m_executionContext;
    private EmptyDisplayInfo`1<IFileGroup> m_fileGroup;
    private EmptyDisplayInfo`1<IForeignKeyColumn> m_foreignKeyColumn;
    private EmptyDisplayInfo`1<IForeignKeyConstraint> m_foreignKeyConstraint;
    private EmptyDisplayInfo`1<IIndexedColumn> m_indexedColumn;
    private EmptyDisplayInfo`1<IPartitionScheme> m_partitionScheme;
    private EmptyDisplayInfo`1<IPrimaryKeyConstraint> m_primaryKeyConstraint;
    private EmptyDisplayInfo`1<IRelationalIndex> m_relationalIndex;
    private EmptyDisplayInfo`1<ISpatialIndex> m_spatialIndex;
    private EmptyDisplayInfo`1<IStatistics> m_statistics;
    private EmptyDisplayInfo`1<IUniqueConstraint> m_uniqueConstraint;
    private EmptyDisplayInfo`1<IXmlIndex> m_xmlIndex;
    private MetadataDisplayInfoVisitor m_displayName;
    private MetadataDisplayInfoVisitor m_description;
    private MetadataDisplayInfoVisitor m_objectString;
    private MetadataDisplayInfoVisitor m_dbQualifiedName;
    public CasingStyle BuiltInCasing { get; public set; }
    public sealed virtual string GetDisplayName(IMetadataObject metadataObject);
    public sealed virtual string GetDescription(IMetadataObject metadataObject);
    public sealed virtual string GetDatabaseQualifiedName(IMetadataObject metadataObject);
    public sealed virtual string ObjectToString(IMetadataObject metadataObject);
    public sealed virtual string CollectionToString(IMetadataCollection`1<T> metadataCollection, bool singleLine);
    public sealed virtual string CollectionToString(IMetadataOrderedCollection`1<T> metadataCollection, bool singleLine);
    public sealed virtual CasingStyle get_BuiltInCasing();
    public sealed virtual void set_BuiltInCasing(CasingStyle value);
    private static string GetParamListSeparator(bool singleLine);
    private string MakeDatabaseQualifiedName(ISchemaOwnedObject schemaObject);
    private string MakeDatabaseQualifiedName(IDatabaseOwnedObject dbOwnedObject);
    private string MakeDatabaseQualifiedName(IDatabase database);
    private string MakeDescription(string metadataTypeName, string metadataObjectString);
    private string MakeAliasedObjectDescription(IMetadataObject aliasedObject, string alias);
    private string FunctionToString(string name, string paramList, string returnType);
    private string FunctionToString(string name, string paramList, string returnType, string jsonNullQualifierPossibleValues);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.MetadataFactory : object {
    private IAsymmetricKeyFactory asymmetricKey;
    private ICertificateFactory certificate;
    private IColumnFactory column;
    private IConstraintFactory constraint;
    private ICredentialFactory credential;
    private IDataTypeFactory dataType;
    private IDatabaseFactory database;
    private IExecutionContextFactory executionContext;
    private IIndexFactory index;
    private ILoginFactory login;
    private IParameterFactory parameter;
    private IPermissionFactory permission;
    private IResolvedSynonymFactory resolvedSynonym;
    private IRoleFactory role;
    private IScalarFactory scalar;
    private ISchemaFactory schema;
    private IServerFactory server;
    private IStoredProcedureFactory storedProcedure;
    private ISynonymFactory synonym;
    private ITabularFactory table;
    private ITriggerFactory trigger;
    private IUserFactory user;
    private IUserDefinedFunctionFactory userDefinedFunction;
    private IUserDefinedTypeFactory userDefinedType;
    private IVariableFactory variable;
    private INullQualifierFactory nullQualifier;
    public IAsymmetricKeyFactory AsymmetricKey { get; protected set; }
    public ICertificateFactory Certificate { get; protected set; }
    public IColumnFactory Column { get; protected set; }
    public IConstraintFactory Constraint { get; protected set; }
    public ICredentialFactory Credential { get; protected set; }
    public IDatabaseFactory Database { get; protected set; }
    public IDataTypeFactory DataType { get; protected set; }
    public IExecutionContextFactory ExecutionContext { get; protected set; }
    public IIndexFactory Index { get; protected set; }
    public ILoginFactory Login { get; protected set; }
    public IParameterFactory Parameter { get; protected set; }
    public IPermissionFactory Permission { get; protected set; }
    public IResolvedSynonymFactory ResolvedSynonym { get; protected set; }
    public IRoleFactory Role { get; protected set; }
    public IScalarFactory Scalar { get; protected set; }
    public ISchemaFactory Schema { get; protected set; }
    public IServerFactory Server { get; protected set; }
    public IStoredProcedureFactory StoredProcedure { get; protected set; }
    public ISynonymFactory Synonym { get; protected set; }
    public ITabularFactory Tabular { get; protected set; }
    public ITriggerFactory Trigger { get; protected set; }
    public IUserFactory User { get; protected set; }
    public IUserDefinedFunctionFactory UserDefinedFunction { get; protected set; }
    public IUserDefinedTypeFactory UserDefinedType { get; protected set; }
    public IVariableFactory Variable { get; protected set; }
    public INullQualifierFactory NullQualifier { get; protected set; }
    public sealed virtual IAsymmetricKeyFactory get_AsymmetricKey();
    protected void set_AsymmetricKey(IAsymmetricKeyFactory value);
    public sealed virtual ICertificateFactory get_Certificate();
    protected void set_Certificate(ICertificateFactory value);
    public sealed virtual IColumnFactory get_Column();
    protected void set_Column(IColumnFactory value);
    public sealed virtual IConstraintFactory get_Constraint();
    protected void set_Constraint(IConstraintFactory value);
    public sealed virtual ICredentialFactory get_Credential();
    protected void set_Credential(ICredentialFactory value);
    public sealed virtual IDatabaseFactory get_Database();
    protected void set_Database(IDatabaseFactory value);
    public sealed virtual IDataTypeFactory get_DataType();
    protected void set_DataType(IDataTypeFactory value);
    public sealed virtual IExecutionContextFactory get_ExecutionContext();
    protected void set_ExecutionContext(IExecutionContextFactory value);
    public sealed virtual IIndexFactory get_Index();
    protected void set_Index(IIndexFactory value);
    public sealed virtual ILoginFactory get_Login();
    protected void set_Login(ILoginFactory value);
    public sealed virtual IParameterFactory get_Parameter();
    protected void set_Parameter(IParameterFactory value);
    public sealed virtual IPermissionFactory get_Permission();
    protected void set_Permission(IPermissionFactory value);
    public sealed virtual IResolvedSynonymFactory get_ResolvedSynonym();
    protected void set_ResolvedSynonym(IResolvedSynonymFactory value);
    public sealed virtual IRoleFactory get_Role();
    protected void set_Role(IRoleFactory value);
    public sealed virtual IScalarFactory get_Scalar();
    protected void set_Scalar(IScalarFactory value);
    public sealed virtual ISchemaFactory get_Schema();
    protected void set_Schema(ISchemaFactory value);
    public sealed virtual IServerFactory get_Server();
    protected void set_Server(IServerFactory value);
    public sealed virtual IStoredProcedureFactory get_StoredProcedure();
    protected void set_StoredProcedure(IStoredProcedureFactory value);
    public sealed virtual ISynonymFactory get_Synonym();
    protected void set_Synonym(ISynonymFactory value);
    public sealed virtual ITabularFactory get_Tabular();
    protected void set_Tabular(ITabularFactory value);
    public sealed virtual ITriggerFactory get_Trigger();
    protected void set_Trigger(ITriggerFactory value);
    public sealed virtual IUserFactory get_User();
    protected void set_User(IUserFactory value);
    public sealed virtual IUserDefinedFunctionFactory get_UserDefinedFunction();
    protected void set_UserDefinedFunction(IUserDefinedFunctionFactory value);
    public sealed virtual IUserDefinedTypeFactory get_UserDefinedType();
    protected void set_UserDefinedType(IUserDefinedTypeFactory value);
    public sealed virtual IVariableFactory get_Variable();
    protected void set_Variable(IVariableFactory value);
    public sealed virtual INullQualifierFactory get_NullQualifier();
    protected void set_NullQualifier(INullQualifierFactory value);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.MetadataObjectBase : object {
    protected string m_name;
    public string Name { get; }
    protected MetadataObjectBase(string name);
    public virtual string ToString();
    public sealed virtual string get_Name();
    public abstract virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.MetadataProviderBase : object {
    private IBuiltInFunctionLookup m_builtInFunctionLookup;
    private ICollationLookup m_collationLookup;
    private ISystemDataTypeLookup m_systemDataTypeLookup;
    private IMetadataFactory m_metadataFactory;
    public IServer Server { get; }
    public IBuiltInFunctionLookup BuiltInFunctionLookup { get; protected set; }
    public ICollationLookup CollationLookup { get; protected set; }
    public ISystemDataTypeLookup SystemDataTypeLookup { get; protected set; }
    public IMetadataFactory MetadataFactory { get; protected set; }
    public MetadataProviderEventHandler BeforeBindHandler { get; }
    public MetadataProviderEventHandler AfterBindHandler { get; }
    protected MetadataProviderBase(IBuiltInFunctionLookup builtInFunctionLookup, ICollationLookup collationLookup, ISystemDataTypeLookup systemDataTypeLookup, IMetadataFactory metadataFactory);
    public abstract virtual IServer get_Server();
    public sealed virtual IBuiltInFunctionLookup get_BuiltInFunctionLookup();
    protected void set_BuiltInFunctionLookup(IBuiltInFunctionLookup value);
    public sealed virtual ICollationLookup get_CollationLookup();
    protected void set_CollationLookup(ICollationLookup value);
    public sealed virtual ISystemDataTypeLookup get_SystemDataTypeLookup();
    protected void set_SystemDataTypeLookup(ISystemDataTypeLookup value);
    public sealed virtual IMetadataFactory get_MetadataFactory();
    protected void set_MetadataFactory(IMetadataFactory value);
    public abstract virtual MetadataProviderEventHandler get_BeforeBindHandler();
    public abstract virtual MetadataProviderEventHandler get_AfterBindHandler();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.MetadataProviderEventArgs : EventArgs {
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.MetadataProviderEventHandler : MulticastDelegate {
    public MetadataProviderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MetadataProviderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MetadataProviderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.MetadataProviderUtils : object {
    public static IMetadataOrderedCollection`1<IParameter> GetStoredProcParameters(string storedProcText, IMetadataFactory metadataFactory, ISystemDataTypeLookup dataTypeLookup, CollationInfo collationInfo, ParseOptions parseOptions);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.OrderedCollection`1 : OrderedCollectionBase`1<T> {
    public IMetadataCollection`1<IMetadataObject> AsMetadataObjectCollection { get; }
    private IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataOrderedCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Item { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Count { get; }
    private IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Item { get; }
    private IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.AsMetadataObjectCollection { get; }
    public OrderedCollection`1(CollationInfo collationInfo);
    public OrderedCollection`1(int initialCapacity, CollationInfo collationInfo);
    public virtual IMetadataCollection`1<IMetadataObject> get_AsMetadataObjectCollection();
    private sealed virtual override IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataOrderedCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_Item(int index);
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_Count();
    private sealed virtual override IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_Item(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Contains(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Contains(IMetadataObject item);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.OrderedCollection`1/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-FindAll>d__12")]
private sealed virtual override IEnumerable`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.FindAll(Predicate`1<IMetadataObject> match);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.OrderedCollection`1/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-FindAll>d__13")]
private sealed virtual override IEnumerable`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.FindAll(string name);
    private sealed virtual override IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_AsMetadataObjectCollection();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.OrderedCollection`1/<System-Collections-Generic-IEnumerable<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-GetEnumerator>d__16")]
private sealed virtual override IEnumerator`1<IMetadataObject> System.Collections.Generic.IEnumerable<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<T> <>n__0(string name);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.OrderedCollectionBase`1 : object {
    private List`1<T> m_data;
    private CollationInfo m_collationInfo;
    public T Item { get; }
    public int Count { get; }
    private T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<T>.Item { get; }
    public IMetadataCollection`1<IMetadataObject> AsMetadataObjectCollection { get; }
    public T Item { get; public set; }
    protected OrderedCollectionBase`1(int initialCapacity, CollationInfo collationInfo);
    public sealed virtual void Add(T item);
    public sealed virtual void AddRange(IEnumerable`1<T> items);
    public sealed virtual T get_Item(int index);
    public sealed virtual int get_Count();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<T>.get_Item(string name);
    public sealed virtual bool Contains(string name);
    public sealed virtual bool Contains(T item);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.OrderedCollectionBase`1/<FindAll>d__13")]
public sealed virtual IEnumerable`1<T> FindAll(Predicate`1<T> match);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.OrderedCollectionBase`1/<FindAll>d__14")]
public sealed virtual IEnumerable`1<T> FindAll(string name);
    public abstract virtual IMetadataCollection`1<IMetadataObject> get_AsMetadataObjectCollection();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T get_Item(string name);
    public sealed virtual void set_Item(string name, T value);
    public sealed virtual bool Remove(string name);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual IMutableMetadataCollection`1<T> Clone();
    public sealed virtual IMutableMetadataCollection`1<T> Clone(bool copyData);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ParameterCollection : OrderedCollection`1<IParameter> {
    public ParameterCollection(CollationInfo collationInfo);
    public ParameterCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ScalarValuedFunctionCollection : TriTypeSortedListCollection`3<IScalarValuedFunction, ICallableModule, IScalarFunction> {
    public ScalarValuedFunctionCollection(CollationInfo collationInfo);
    public ScalarValuedFunctionCollection(int initialCapacity, CollationInfo collationInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ScalarVariable : LocalVariable`1<IScalarDataType> {
    public bool IsParameter { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    public ScalarVariable(string name, IScalarDataType dataType);
    public virtual bool get_IsParameter();
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ScalarVariableCollection : DualTypeSortedListCollection`2<IScalarVariable, ILocalVariable> {
    public ScalarVariableCollection(CollationInfo collationInfo);
    public ScalarVariableCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.SchemaCollection : DualTypeSortedListCollection`2<ISchema, IDatabaseObject> {
    public SchemaCollection(CollationInfo collationInfo);
    public SchemaCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ServerDdlTriggerCollection : SortedListCollection`1<IServerDdlTrigger> {
    public ServerDdlTriggerCollection(CollationInfo collationInfo);
    public ServerDdlTriggerCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.SortedListCollection`1 : DictionaryCollectionBase`2<T, SortedList`2<string, T>> {
    private CollationInfo m_collationInfo;
    public IMetadataCollection`1<IMetadataObject> AsMetadataObjectCollection { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Count { get; }
    private IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Item { get; }
    private IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.AsMetadataObjectCollection { get; }
    public SortedListCollection`1(int initialCapacity, CollationInfo collationInfo);
    public virtual IMutableMetadataCollection`1<T> Clone(bool copyData);
    public virtual IMetadataCollection`1<IMetadataObject> get_AsMetadataObjectCollection();
    private static SortedList`2<string, T> CreateContainer(int initialCapacity, CollationInfo collationInfo);
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_Count();
    private sealed virtual override IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_Item(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Contains(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.Contains(IMetadataObject item);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.SortedListCollection`1/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-FindAll>d__12")]
private sealed virtual override IEnumerable`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.FindAll(Predicate`1<IMetadataObject> match);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.SortedListCollection`1/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-FindAll>d__13")]
private sealed virtual override IEnumerable`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.FindAll(string name);
    private sealed virtual override IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.get_AsMetadataObjectCollection();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.SortedListCollection`1/<System-Collections-Generic-IEnumerable<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataObject>-GetEnumerator>d__16")]
private sealed virtual override IEnumerator`1<IMetadataObject> System.Collections.Generic.IEnumerable<Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<T> <>n__0(string name);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.StatisticsCollection : SortedListCollection`1<IStatistics> {
    public StatisticsCollection(CollationInfo collationInfo);
    public StatisticsCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.StoredProcedureCollection : DualTypeSortedListCollection`2<IStoredProcedure, ICallableModule> {
    public StoredProcedureCollection(CollationInfo collationInfo);
    public StoredProcedureCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.SynonymCollection : SortedListCollection`1<ISynonym> {
    public SynonymCollection(CollationInfo collationInfo);
    public SynonymCollection(int initialCapacity, CollationInfo collationInfo);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.SystemDataTypeLookupBase : object {
    private ISystemDataType m_bigInt;
    private ISystemDataType m_bit;
    private ISystemDataType m_date;
    private ISystemDataType m_dateTime;
    private ISystemDataType m_float;
    private ISystemDataType m_geography;
    private ISystemDataType m_geometry;
    private ISystemDataType m_hierarchyId;
    private ISystemDataType m_image;
    private ISystemDataType m_int;
    private ISystemDataType m_money;
    private ISystemDataType m_ntext;
    private ISystemDataType m_nvarCharMax;
    private ISystemDataType m_real;
    private ISystemDataType m_smallDateTime;
    private ISystemDataType m_smallInt;
    private ISystemDataType m_smallMoney;
    private ISystemDataType m_sysName;
    private ISystemDataType m_text;
    private ISystemDataType m_timestamp;
    private ISystemDataType m_tinyInt;
    private ISystemDataType m_uniqueIdentifier;
    private ISystemDataType m_varBinaryMax;
    private ISystemDataType m_varCharMax;
    private ISystemDataType m_variant;
    public ISystemDataType BigInt { get; }
    public ISystemDataType Bit { get; }
    public ISystemDataType Date { get; }
    public ISystemDataType DateTime { get; }
    public ISystemDataType Float { get; }
    public ISystemDataType Geography { get; }
    public ISystemDataType Geometry { get; }
    public ISystemDataType HierarchyId { get; }
    public ISystemDataType Image { get; }
    public ISystemDataType Int { get; }
    public ISystemDataType Money { get; }
    public ISystemDataType NText { get; }
    public ISystemDataType NVarCharMax { get; }
    public ISystemDataType Real { get; }
    public ISystemDataType SmallDateTime { get; }
    public ISystemDataType SmallInt { get; }
    public ISystemDataType SmallMoney { get; }
    public ISystemDataType SysName { get; }
    public ISystemDataType Text { get; }
    public ISystemDataType Timestamp { get; }
    public ISystemDataType TinyInt { get; }
    public ISystemDataType UniqueIdentifier { get; }
    public ISystemDataType VarBinaryMax { get; }
    public ISystemDataType VarCharMax { get; }
    public ISystemDataType Variant { get; }
    public sealed virtual ISystemDataType Find(DataTypeSpec typeSpec, bool isMaximum);
    public sealed virtual ISystemDataType Find(DataTypeSpec typeSpec, int precisionOrMaxLength);
    public sealed virtual ISystemDataType Find(DataTypeSpec typeSpec, int precision, int scale);
    public ISystemDataType get_BigInt();
    public ISystemDataType get_Bit();
    public ISystemDataType get_Date();
    public ISystemDataType get_DateTime();
    public ISystemDataType get_Float();
    public ISystemDataType get_Geography();
    public ISystemDataType get_Geometry();
    public ISystemDataType get_HierarchyId();
    public ISystemDataType get_Image();
    public ISystemDataType get_Int();
    public ISystemDataType get_Money();
    public ISystemDataType get_NText();
    public ISystemDataType get_NVarCharMax();
    public ISystemDataType get_Real();
    public ISystemDataType get_SmallDateTime();
    public ISystemDataType get_SmallInt();
    public ISystemDataType get_SmallMoney();
    public ISystemDataType get_SysName();
    public ISystemDataType get_Text();
    public ISystemDataType get_Timestamp();
    public ISystemDataType get_TinyInt();
    public ISystemDataType get_UniqueIdentifier();
    public ISystemDataType get_VarBinaryMax();
    public ISystemDataType get_VarCharMax();
    public ISystemDataType get_Variant();
    public ISystemDataType Binary();
    public ISystemDataType Binary(int maxLength);
    public ISystemDataType Char();
    public ISystemDataType Char(int maxLength);
    public ISystemDataType DateTime2();
    public ISystemDataType DateTime2(int scale);
    public ISystemDataType DateTimeOffset();
    public ISystemDataType DateTimeOffset(int scale);
    public ISystemDataType NChar();
    public ISystemDataType NChar(int maxLength);
    public ISystemDataType NVarChar();
    public ISystemDataType NVarChar(int maxLength);
    public ISystemDataType Time();
    public ISystemDataType Time(int scale);
    public ISystemDataType VarBinary();
    public ISystemDataType VarBinary(int maxLength);
    public ISystemDataType VarChar();
    public ISystemDataType VarChar(int maxLength);
    public ISystemDataType Decimal();
    public ISystemDataType Decimal(int precision);
    public ISystemDataType Decimal(int precision, int scale);
    public ISystemDataType Numeric();
    public ISystemDataType Numeric(int precision);
    public ISystemDataType Numeric(int precision, int scale);
    public ISystemDataType Json();
    public ISystemDataType Xml();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TableCollection : TriTypeSortedListCollection`3<ITable, IDatabaseTable, ITabular> {
    public TableCollection(CollationInfo collationInfo);
    public TableCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TableValuedFunctionCollection : DualTypeSortedListCollection`2<ITableValuedFunction, ITabular> {
    public TableValuedFunctionCollection(CollationInfo collationInfo);
    public TableValuedFunctionCollection(int initialCapacity, CollationInfo collationInfo);
    internal static DualTypeSortedListCollection`2<ITableValuedFunction, ITabular> CreateBuiltInCollection(ISchema schema);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TableVariableCollection : DualTypeSortedListCollection`2<ITableVariable, ILocalVariable> {
    public TableVariableCollection(CollationInfo collationInfo);
    public TableVariableCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TabularCollection : SortedListCollection`1<ITabular> {
    public TabularCollection(CollationInfo collationInfo);
    public TabularCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TriTypeSortedListCollection`3 : DualTypeSortedListCollection`2<T, B1> {
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.Count { get; }
    private B2 Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.Item { get; }
    private IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.AsMetadataObjectCollection { get; }
    public TriTypeSortedListCollection`3(int initialCapacity, CollationInfo collationInfo);
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.get_Count();
    private sealed virtual override B2 Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.get_Item(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.Contains(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.Contains(B2 item);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TriTypeSortedListCollection`3/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<B2>-FindAll>d__7")]
private sealed virtual override IEnumerable`1<B2> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.FindAll(Predicate`1<B2> match);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TriTypeSortedListCollection`3/<Microsoft-SqlServer-Management-SqlParser-Metadata-IMetadataCollection<B2>-FindAll>d__8")]
private sealed virtual override IEnumerable`1<B2> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.FindAll(string name);
    private sealed virtual override IMetadataCollection`1<IMetadataObject> Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataCollection<B2>.get_AsMetadataObjectCollection();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataProvider.TriTypeSortedListCollection`3/<System-Collections-Generic-IEnumerable<B2>-GetEnumerator>d__11")]
private sealed virtual override IEnumerator`1<B2> System.Collections.Generic.IEnumerable<B2>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<T> <>n__0(string name);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UdtDataMember : UdtMember`1<IUdtDataMember> {
    public UdtDataMember(string name, IClrDataType userDefinedType, IScalarDataType dataType, bool isStatic);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UdtDataMemberCollection : UdtMemberCollectionBase`1<IUdtDataMember> {
    public UdtDataMemberCollection(int initialCapacity);
    public static UdtDataMemberCollection Create(IUdtDataMember[] dataMembers);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UdtMember`1 : MetadataObjectBase {
    private IClrDataType m_userDefinedType;
    private IScalarDataType m_dataType;
    private bool m_nullable;
    private bool m_isStatic;
    public IClrDataType UserDefinedType { get; }
    public bool IsStatic { get; }
    public ScalarType ScalarType { get; }
    public IScalarDataType DataType { get; }
    public bool Nullable { get; }
    protected UdtMember`1(string name, IClrDataType userDefinedType, IScalarDataType dataType, bool nullable, bool isStatic);
    public sealed virtual IClrDataType get_UserDefinedType();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ScalarType get_ScalarType();
    public sealed virtual IScalarDataType get_DataType();
    public sealed virtual bool get_Nullable();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UdtMemberCollectionBase`1 : DualTypeSortedListCollection`2<T, IUdtMember> {
    protected UdtMemberCollectionBase`1(int initialCapacity);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UdtMethod : UdtMember`1<IUdtMethod> {
    private IMetadataOrderedCollection`1<IParameter> m_parameters;
    public bool IsAggregateFunction { get; }
    public IMetadataOrderedCollection`1<IParameter> Parameters { get; }
    public bool IsUserDefinedFunction { get; }
    public IUserDefinedFunction AsUserDefinedFunction { get; }
    public UdtMethod(string name, IClrDataType userDefinedType, IScalarDataType dataType, bool nullable, bool isStatic, IParameter[] parameters);
    public UdtMethod(string name, IClrDataType userDefinedType, IScalarDataType dataType, bool nullable, bool isStatic, IMetadataOrderedCollection`1<IParameter> parameters);
    public virtual T Accept(IMetadataObjectVisitor`1<T> visitor);
    public sealed virtual bool get_IsAggregateFunction();
    public sealed virtual IMetadataOrderedCollection`1<IParameter> get_Parameters();
    public bool get_IsUserDefinedFunction();
    public IUserDefinedFunction get_AsUserDefinedFunction();
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UdtMethodCollection : UdtMemberCollectionBase`1<IUdtMethod> {
    public UdtMethodCollection(int initialCapacity);
    internal static UdtMethodCollection Create(IUdtMethod[] methods);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UserCollection : DualTypeSortedListCollection`2<IUser, IDatabasePrincipal> {
    public UserCollection(CollationInfo collationInfo);
    public UserCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UserDefinedAggregateCollection : SortedListCollection`1<IUserDefinedAggregate> {
    public UserDefinedAggregateCollection(CollationInfo collationInfo);
    public UserDefinedAggregateCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UserDefinedClrTypeCollection : DualTypeSortedListCollection`2<IUserDefinedClrType, IUserDefinedType> {
    public UserDefinedClrTypeCollection(CollationInfo collationInfo);
    public UserDefinedClrTypeCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UserDefinedDataTypeCollection : DualTypeSortedListCollection`2<IUserDefinedDataType, IUserDefinedType> {
    public UserDefinedDataTypeCollection(CollationInfo collationInfo);
    public UserDefinedDataTypeCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.UserDefinedTableTypeCollection : DualTypeSortedListCollection`2<IUserDefinedTableType, IUserDefinedType> {
    public UserDefinedTableTypeCollection(CollationInfo collationInfo);
    public UserDefinedTableTypeCollection(int initialCapacity, CollationInfo collationInfo);
}
public class Microsoft.SqlServer.Management.SqlParser.MetadataProvider.ViewCollection : TriTypeSortedListCollection`3<IView, IDatabaseTable, ITabular> {
    public ViewCollection(CollationInfo collationInfo);
    public ViewCollection(int initialCapacity, CollationInfo collationInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.BitWidthTypeCompactor : TypeCompactor {
    private static ulong InvalidKey;
    private TypeDataTable dataTable;
    private BucketIdGenerator idGenerator;
    private Node rootNode;
    private int objectCount;
    public BitWidthTypeCompactor(TypeDataTable dataTable, BucketIdGenerator idGenerator);
    public virtual TypeBucket RegisterDataRow(int rowId);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.BucketIdGenerator : object {
    private int currentId;
    public int CurrentId { get; }
    public int get_CurrentId();
    public int GetNextId();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.CodeGeneratorSettings : object {
    private string targetName;
    private string defaultCodeNamespace;
    private string defaultObjectStoreTypeName;
    private string collectionsFilename;
    private string mainFilename;
    private string objectsFilename;
    private string stringsFilename;
    private string typesFilename;
    private string codeNamespace;
    private string objectStoreTypeName;
    private string outputDirectory;
    public string CodeNamespace { get; public set; }
    public string ObjectStoreTypeName { get; public set; }
    public string OutputDirectory { get; public set; }
    public CodeGeneratorSettings(string targetName);
    public string get_CodeNamespace();
    public void set_CodeNamespace(string value);
    public string get_ObjectStoreTypeName();
    public void set_ObjectStoreTypeName(string value);
    public string get_OutputDirectory();
    public void set_OutputDirectory(string value);
    internal string GetCodeNamespace();
    internal string GetObjectStoreTypeName();
    internal string GetOutputDirectory();
    internal string GetCollectionsFilePath();
    internal string GetMainFilePath();
    internal string GetObjectsFilePath();
    internal string GetStringsFilePath();
    internal string GetTypesFilePath();
    internal string GetResourcePath(string resourceName);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.CodeWriter : StringWriter {
    private static int MaxIndentLevel;
    private static int IndentSize;
    private String[] indentations;
    private int indentLevel;
    private bool indentNext;
    private bool blockBeginning;
    public int IndentLevel { get; public set; }
    public int get_IndentLevel();
    public void set_IndentLevel(int value);
    public void BeginCodeBlock();
    public void EndCodeBlock();
    public virtual void Write(char c);
    public virtual void Write(string val);
    public virtual void Write(Char[] buffer, int index, int count);
    public void WriteLineIgnoreFirst();
    private void Indent();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.DataRow`1 : ValueType {
    private MetadataTypeInfo typeInfo;
    private TId[] values;
    public TId[] Values { get; }
    public MetadataTypeInfo TypeInfo { get; }
    public DataRow`1(MetadataTypeInfo typeInfo, TId[] values);
    public TId[] get_Values();
    public MetadataTypeInfo get_TypeInfo();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.DefaultXmlSerializationSettings : object {
    public virtual bool GetPropertyOverrideValue(MetadataTypeInfo typeInfo, MetadataPropertyInfo propertyInfo, Object& value);
    public virtual bool GetMetadataObjectOverride(IMetadataObject metadataObject, IMetadataObject& overrideObject);
    public virtual XmlNestingType GetNestingType(MetadataTypeInfo typeInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.DeserializationException : Exception {
    internal DeserializationException(string message);
    internal DeserializationException(string message, Exception innerException);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.DeserializationModel : object {
    private IDeserializationDataProvider objectDataProvider;
    private IDeserializationHandler handler;
    private MetadataDeserializerFactory factory;
    private Object[] objectCache;
    private Object[] collectionCache;
    private CollationInfo databaseCollationInfo;
    private ModelMetadataProvider metadataProvider;
    public DeserializationModel(IDeserializationDataProvider objectDataProvider, IDeserializationHandler handler);
    internal ICursorDataType GetCursorDataType();
    internal IScalarDataType GetIntDataType();
    internal IMetadataCollection`1<IXmlDataTypeMethod> GetXmlDataTypeMethodCollection();
    internal IMetadataCollection`1<IXmlDataTypeTableMethod> GetXmlDataTypeTableMethodCollection();
    public T GetObjectById(int id);
    public IMetadataCollection`1<T> GetCollectionById(int id);
    public IMetadataOrderedCollection`1<T> GetOrderedCollectionById(int id);
    private IMetadataOrderedCollection`1<T> GetCollectionByIdImpl(int id);
    private ISystemDataType FindSystemDataType(ISystemDataType dataTypeData);
    private static int GetDataTypeArgValue(ISystemDataType dataType, DataTypeArgSpec argSpec);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.EqualityComparer : object {
    public static IEqualityComparer`1<Byte[]> ByteArray { get; }
    public static IEqualityComparer`1<CollationInfo> CollationInfo { get; }
    public static IEqualityComparer`1<ComputedColumnInfo> ComputedColumnInfo { get; }
    public static IEqualityComparer`1<DataTypeSpec> DataTypeSpec { get; }
    public static IEqualityComparer`1<double> Double { get; }
    public static IEqualityComparer`1<GridDensity> GridDensity { get; }
    public static IEqualityComparer`1<IdentityColumnInfo> IdentityColumnInfo { get; }
    public static IEqualityComparer`1<IndexType> IndexType { get; }
    public static IEqualityComparer`1<int> Int { get; }
    public static IEqualityComparer`1<Int32[]> IntArray { get; }
    public static IEqualityComparer`1<IPassword> Password { get; }
    public static IEqualityComparer`1<string> String { get; }
    public static IEqualityComparer`1<StatisticsType> StatisticsType { get; }
    public static IEqualityComparer`1<Byte[]> get_ByteArray();
    public static IEqualityComparer`1<CollationInfo> get_CollationInfo();
    public static IEqualityComparer`1<ComputedColumnInfo> get_ComputedColumnInfo();
    public static IEqualityComparer`1<DataTypeSpec> get_DataTypeSpec();
    public static IEqualityComparer`1<double> get_Double();
    public static IEqualityComparer`1<GridDensity> get_GridDensity();
    public static IEqualityComparer`1<IdentityColumnInfo> get_IdentityColumnInfo();
    public static IEqualityComparer`1<IndexType> get_IndexType();
    public static IEqualityComparer`1<int> get_Int();
    public static IEqualityComparer`1<Int32[]> get_IntArray();
    public static IEqualityComparer`1<IPassword> get_Password();
    public static IEqualityComparer`1<string> get_String();
    public static IEqualityComparer`1<StatisticsType> get_StatisticsType();
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<Microsoft.SqlServer.Management.SqlParser.Metadata.CollationInfo>.Equals(CollationInfo x, CollationInfo y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<Microsoft.SqlServer.Management.SqlParser.Metadata.CollationInfo>.GetHashCode(CollationInfo obj);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<Microsoft.SqlServer.Management.SqlParser.Metadata.ComputedColumnInfo>.Equals(ComputedColumnInfo x, ComputedColumnInfo y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<Microsoft.SqlServer.Management.SqlParser.Metadata.ComputedColumnInfo>.GetHashCode(ComputedColumnInfo obj);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<Microsoft.SqlServer.Management.SqlParser.Metadata.DataTypeSpec>.Equals(DataTypeSpec x, DataTypeSpec y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<Microsoft.SqlServer.Management.SqlParser.Metadata.DataTypeSpec>.GetHashCode(DataTypeSpec obj);
    public sealed virtual bool Equals(IdentityColumnInfo x, IdentityColumnInfo y);
    public sealed virtual int GetHashCode(IdentityColumnInfo obj);
    public sealed virtual bool Equals(IPassword x, IPassword y);
    public sealed virtual int GetHashCode(IPassword obj);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.IDeserializationDataProvider {
    public int ObjectCount { get; }
    public int CollectionCount { get; }
    public abstract virtual int get_ObjectCount();
    public abstract virtual int get_CollectionCount();
    public abstract virtual DataRow`1<object> GetObjectData(int id);
    public abstract virtual IMetadataObject GetExternalObjectById(int id);
    public abstract virtual List`1<int> GetCollectionData(int id);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.IDeserializationHandler {
    public abstract virtual IMetadataObject OnCreateEvent(IMetadataObject obj);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.IntegerSequentialValueList : object {
    private Int32[] data;
    private int maxValue;
    public int Count { get; }
    public int MaxValue { get; }
    public IntegerSequentialValueList(Int32[] data, int maxValue);
    public sealed virtual int get_Count();
    public int get_MaxValue();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.IntegerSequentialValueList/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ApplicationRole : object {
    private DeserializationModel model;
    private int database;
    private int defaultSchema;
    private bool isSystemObject;
    private int memberOfRoles;
    private string name;
    private int permissions;
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.IApplicationRole.DefaultSchema { get; }
    private IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.Permissions { get; }
    private IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.MemberOfRoles { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public ApplicationRole(DeserializationModel model, int database, int defaultSchema, bool isSystemObject, int memberOfRoles, string name, int permissions);
    public ApplicationRole(DeserializationModel model, Object[] values);
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.IApplicationRole.get_DefaultSchema();
    private sealed virtual override IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_Permissions();
    private sealed virtual override IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_MemberOfRoles();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.AsymmetricKey : object {
    private DeserializationModel model;
    private int database;
    private bool isSystemObject;
    private string name;
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public AsymmetricKey(DeserializationModel model, int database, bool isSystemObject, string name);
    public AsymmetricKey(DeserializationModel model, Object[] values);
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Certificate : object {
    private DeserializationModel model;
    private int database;
    private bool isSystemObject;
    private string name;
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Certificate(DeserializationModel model, int database, bool isSystemObject, string name);
    public Certificate(DeserializationModel model, Object[] values);
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.CheckConstraint : object {
    private DeserializationModel model;
    private bool isChecked;
    private bool isEnabled;
    private bool isSystemNamed;
    private string name;
    private bool notForReplication;
    private int parent;
    private string text;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.IsEnabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.IsChecked { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.NotForReplication { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.Text { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.IsSystemNamed { get; }
    private ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Type { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public CheckConstraint(DeserializationModel model, bool isChecked, bool isEnabled, bool isSystemNamed, string name, bool notForReplication, int parent, string text);
    public CheckConstraint(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.get_IsEnabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.get_IsChecked();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.get_NotForReplication();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.ICheckConstraint.get_Text();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_IsSystemNamed();
    private sealed virtual override ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Type();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ClrDataType : object {
    private DeserializationModel model;
    private string name;
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.AssemblyName { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.ClassName { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsBinaryOrdered { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsComVisible { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsNullable { get; }
    private IMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.Methods { get; }
    private IMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.DataMembers { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public ClrDataType(DeserializationModel model, string name);
    public ClrDataType(DeserializationModel model, Object[] values);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_AssemblyName();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_ClassName();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsBinaryOrdered();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsComVisible();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsNullable();
    private sealed virtual override IMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_Methods();
    private sealed virtual override IMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_DataMembers();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Collation : object {
    private DeserializationModel model;
    private string name;
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Collation(DeserializationModel model, string name);
    public Collation(DeserializationModel model, Object[] values);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Column : object {
    private DeserializationModel model;
    private int collation;
    private ComputedColumnInfo computedColumnInfo;
    private int dataType;
    private int defaultValue;
    private IdentityColumnInfo identityColumnInfo;
    private bool inPrimaryKey;
    private bool isColumnSet;
    private bool isGeneratedAlwaysAsRowEnd;
    private bool isGeneratedAlwaysAsRowStart;
    private bool isGeneratedAlwaysAsSequenceNumberEnd;
    private bool isGeneratedAlwaysAsSequenceNumberStart;
    private bool isGeneratedAlwaysAsTransactionIdEnd;
    private bool isGeneratedAlwaysAsTransactionIdStart;
    private bool isSparse;
    private string name;
    private bool nullable;
    private int parent;
    private bool rowGuidCol;
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.Parent { get; }
    private ICollation Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.Collation { get; }
    private ComputedColumnInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.ComputedColumnInfo { get; }
    private IDefaultConstraint Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.DefaultValue { get; }
    private IdentityColumnInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IdentityColumnInfo { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.InPrimaryKey { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.RowGuidCol { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsSparse { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsColumnSet { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsGeneratedAlwaysAsRowStart { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsGeneratedAlwaysAsRowEnd { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsGeneratedAlwaysAsTransactionIdStart { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsGeneratedAlwaysAsTransactionIdEnd { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsGeneratedAlwaysAsSequenceNumberStart { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.IsGeneratedAlwaysAsSequenceNumberEnd { get; }
    private ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.ScalarType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.Nullable { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Column(DeserializationModel model, int collation, ComputedColumnInfo computedColumnInfo, int dataType, int defaultValue, IdentityColumnInfo identityColumnInfo, bool inPrimaryKey, bool isColumnSet, bool isGeneratedAlwaysAsRowEnd, bool isGeneratedAlwaysAsRowStart, bool isGeneratedAlwaysAsSequenceNumberEnd, bool isGeneratedAlwaysAsSequenceNumberStart, bool isGeneratedAlwaysAsTransactionIdEnd, bool isGeneratedAlwaysAsTransactionIdStart, bool isSparse, string name, bool nullable, int parent, bool rowGuidCol);
    public Column(DeserializationModel model, Object[] values);
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_Parent();
    private sealed virtual override ICollation Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_Collation();
    private sealed virtual override ComputedColumnInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_ComputedColumnInfo();
    private sealed virtual override IDefaultConstraint Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_DefaultValue();
    private sealed virtual override IdentityColumnInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IdentityColumnInfo();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_InPrimaryKey();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_RowGuidCol();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsSparse();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsColumnSet();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsGeneratedAlwaysAsRowStart();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsGeneratedAlwaysAsRowEnd();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsGeneratedAlwaysAsTransactionIdStart();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsGeneratedAlwaysAsTransactionIdEnd();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsGeneratedAlwaysAsSequenceNumberStart();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IColumn.get_IsGeneratedAlwaysAsSequenceNumberEnd();
    private sealed virtual override ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_ScalarType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_Nullable();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Credential : object {
    private DeserializationModel model;
    private bool isSystemObject;
    private string name;
    private int server;
    private IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Server { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Credential(DeserializationModel model, bool isSystemObject, string name, int server);
    public Credential(DeserializationModel model, Object[] values);
    private sealed virtual override IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.get_Server();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Accept(IServerOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.CursorDataType : object {
    private DeserializationModel model;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public CursorDataType(DeserializationModel model);
    public CursorDataType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.CursorParameter : object {
    private DeserializationModel model;
    private string name;
    private ICursorDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorVariable.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsScalarVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsTableVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsCursorVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsParameter { get; }
    private IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.DataType { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.IsOutput { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.IsReadOnly { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.DefaultValue { get; }
    public CursorParameter(DeserializationModel model, string name);
    public CursorParameter(DeserializationModel model, Object[] values);
    private sealed virtual override ICursorDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorVariable.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsScalarVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsTableVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsCursorVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsParameter();
    private sealed virtual override IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_DataType();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_IsOutput();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_IsReadOnly();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_DefaultValue();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.CursorVariable : object {
    private DeserializationModel model;
    private string name;
    private ICursorDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorVariable.DataType { get; }
    private IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsScalarVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsTableVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsCursorVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsParameter { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public CursorVariable(DeserializationModel model, string name);
    public CursorVariable(DeserializationModel model, Object[] values);
    private sealed virtual override ICursorDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICursorVariable.get_DataType();
    private sealed virtual override IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsScalarVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsTableVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsCursorVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsParameter();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Database : object {
    private DeserializationModel model;
    private int applicationRoles;
    private int asymmetricKeys;
    private int certificates;
    private CollationInfo collationInfo;
    private DatabaseCompatibilityLevel compatibilityLevel;
    private string defaultSchemaName;
    private bool isSystemObject;
    private string name;
    private int owner;
    private int roles;
    private int schemas;
    private int server;
    private int triggers;
    private int users;
    private IMetadataCollection`1<IApplicationRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.ApplicationRoles { get; }
    private IMetadataCollection`1<IAsymmetricKey> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.AsymmetricKeys { get; }
    private IMetadataCollection`1<ICertificate> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Certificates { get; }
    private CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.CollationInfo { get; }
    private DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.CompatibilityLevel { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.DefaultSchemaName { get; }
    private IUser Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Owner { get; }
    private IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Roles { get; }
    private IMetadataCollection`1<ISchema> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Schemas { get; }
    private IMetadataCollection`1<IDatabaseDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Triggers { get; }
    private IMetadataCollection`1<IUser> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.Users { get; }
    private IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Server { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Database(DeserializationModel model, int applicationRoles, int asymmetricKeys, int certificates, CollationInfo collationInfo, DatabaseCompatibilityLevel compatibilityLevel, string defaultSchemaName, bool isSystemObject, string name, int owner, int roles, int schemas, int server, int triggers, int users);
    public Database(DeserializationModel model, Object[] values);
    private sealed virtual override IMetadataCollection`1<IApplicationRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_ApplicationRoles();
    private sealed virtual override IMetadataCollection`1<IAsymmetricKey> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_AsymmetricKeys();
    private sealed virtual override IMetadataCollection`1<ICertificate> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Certificates();
    private sealed virtual override CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_CollationInfo();
    private sealed virtual override DatabaseCompatibilityLevel Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_CompatibilityLevel();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_DefaultSchemaName();
    private sealed virtual override IUser Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Owner();
    private sealed virtual override IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Roles();
    private sealed virtual override IMetadataCollection`1<ISchema> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Schemas();
    private sealed virtual override IMetadataCollection`1<IDatabaseDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Triggers();
    private sealed virtual override IMetadataCollection`1<IUser> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase.get_Users();
    private sealed virtual override IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.get_Server();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Accept(IServerOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.DatabaseDdlTrigger : object {
    private DeserializationModel model;
    private string bodyText;
    private int database;
    private ITriggerEventTypeSet databaseDdlEvents;
    private int executionContext;
    private bool isEnabled;
    private bool isEncrypted;
    private bool isQuotedIdentifierOn;
    private bool isSqlClr;
    private bool isSystemObject;
    private string name;
    private ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseDdlTrigger.DatabaseDdlEvents { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseDdlTrigger.IsQuotedIdentifierOn { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.BodyText { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsEncrypted { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsEnabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsSqlClr { get; }
    private IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.ExecutionContext { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    public DatabaseDdlTrigger(DeserializationModel model, string bodyText, int database, ITriggerEventTypeSet databaseDdlEvents, int executionContext, bool isEnabled, bool isEncrypted, bool isQuotedIdentifierOn, bool isSqlClr, bool isSystemObject, string name);
    public DatabaseDdlTrigger(DeserializationModel model, Object[] values);
    private sealed virtual override ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseDdlTrigger.get_DatabaseDdlEvents();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseDdlTrigger.get_IsQuotedIdentifierOn();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_BodyText();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsEncrypted();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsEnabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsSqlClr();
    private sealed virtual override IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_ExecutionContext();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.DatabasePermission : object {
    private DeserializationModel model;
    private int databasePrincipal;
    private int grantor;
    private PermissionState permissionState;
    private DatabasePermissionType permissionType;
    private int targetObject;
    private string name;
    private IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.DatabasePrincipal { get; }
    private DatabasePermissionType Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.PermissionType { get; }
    private IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.TargetObject { get; }
    private PermissionState Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.PermissionState { get; }
    private IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.Grantor { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public DatabasePermission(DeserializationModel model, int databasePrincipal, int grantor, PermissionState permissionState, DatabasePermissionType permissionType, int targetObject);
    public DatabasePermission(DeserializationModel model, Object[] values);
    private sealed virtual override IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.get_DatabasePrincipal();
    private sealed virtual override DatabasePermissionType Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.get_PermissionType();
    private sealed virtual override IMetadataObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.get_TargetObject();
    private sealed virtual override PermissionState Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.get_PermissionState();
    private sealed virtual override IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePermission.get_Grantor();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.DatabaseRole : object {
    private DeserializationModel model;
    private int database;
    private bool isFixedRole;
    private bool isSystemObject;
    private int memberOfRoles;
    private string name;
    private int owner;
    private int permissions;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseRole.IsFixedRole { get; }
    private IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseRole.Owner { get; }
    private IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.Permissions { get; }
    private IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.MemberOfRoles { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public DatabaseRole(DeserializationModel model, int database, bool isFixedRole, bool isSystemObject, int memberOfRoles, string name, int owner, int permissions);
    public DatabaseRole(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseRole.get_IsFixedRole();
    private sealed virtual override IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseRole.get_Owner();
    private sealed virtual override IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_Permissions();
    private sealed virtual override IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_MemberOfRoles();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.DefaultConstraint : object {
    private DeserializationModel model;
    private bool isSystemNamed;
    private string name;
    private int parent;
    private string text;
    private IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IDefaultConstraint.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDefaultConstraint.IsSystemNamed { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IDefaultConstraint.Text { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public DefaultConstraint(DeserializationModel model, bool isSystemNamed, string name, int parent, string text);
    public DefaultConstraint(DeserializationModel model, Object[] values);
    private sealed virtual override IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IDefaultConstraint.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDefaultConstraint.get_IsSystemNamed();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IDefaultConstraint.get_Text();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.DmlTrigger : object {
    private DeserializationModel model;
    private string bodyText;
    private bool delete;
    private ActivationOrder deleteActivationOrder;
    private int executionContext;
    private bool insert;
    private ActivationOrder insertActivationOrder;
    private bool insteadOf;
    private bool isEnabled;
    private bool isEncrypted;
    private bool isQuotedIdentifierOn;
    private bool isSqlClr;
    private string name;
    private bool notForReplication;
    private int parent;
    private bool update;
    private ActivationOrder updateActivationOrder;
    private ITableViewBase Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.NotForReplication { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.InsteadOf { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.Insert { get; }
    private ActivationOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.InsertActivationOrder { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.Update { get; }
    private ActivationOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.UpdateActivationOrder { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.Delete { get; }
    private ActivationOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.DeleteActivationOrder { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.IsQuotedIdentifierOn { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.BodyText { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsEncrypted { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsEnabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsSqlClr { get; }
    private IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.ExecutionContext { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public DmlTrigger(DeserializationModel model, string bodyText, bool delete, ActivationOrder deleteActivationOrder, int executionContext, bool insert, ActivationOrder insertActivationOrder, bool insteadOf, bool isEnabled, bool isEncrypted, bool isQuotedIdentifierOn, bool isSqlClr, string name, bool notForReplication, int parent, bool update, ActivationOrder updateActivationOrder);
    public DmlTrigger(DeserializationModel model, Object[] values);
    private sealed virtual override ITableViewBase Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_NotForReplication();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_InsteadOf();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_Insert();
    private sealed virtual override ActivationOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_InsertActivationOrder();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_Update();
    private sealed virtual override ActivationOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_UpdateActivationOrder();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_Delete();
    private sealed virtual override ActivationOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_DeleteActivationOrder();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDmlTrigger.get_IsQuotedIdentifierOn();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_BodyText();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsEncrypted();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsEnabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsSqlClr();
    private sealed virtual override IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_ExecutionContext();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ExecutionContext : object {
    private DeserializationModel model;
    private ExecutionContextType contextType;
    private int login;
    private int user;
    private ExecutionContextType Microsoft.SqlServer.Management.SqlParser.Metadata.IExecutionContext.ContextType { get; }
    private ILogin Microsoft.SqlServer.Management.SqlParser.Metadata.IExecutionContext.Login { get; }
    private IUser Microsoft.SqlServer.Management.SqlParser.Metadata.IExecutionContext.User { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public ExecutionContext(DeserializationModel model, ExecutionContextType contextType, int login, int user);
    public ExecutionContext(DeserializationModel model, Object[] values);
    private sealed virtual override ExecutionContextType Microsoft.SqlServer.Management.SqlParser.Metadata.IExecutionContext.get_ContextType();
    private sealed virtual override ILogin Microsoft.SqlServer.Management.SqlParser.Metadata.IExecutionContext.get_Login();
    private sealed virtual override IUser Microsoft.SqlServer.Management.SqlParser.Metadata.IExecutionContext.get_User();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ExtendedStoredProcedure : object {
    private DeserializationModel model;
    private int executionContext;
    private bool isEncrypted;
    private bool isSystemObject;
    private string name;
    private int parameters;
    private int returnType;
    private int schema;
    private CallableModuleType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.ModuleType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.ReturnType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.IsEncrypted { get; }
    private IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.ExecutionContext { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    public ExtendedStoredProcedure(DeserializationModel model, int executionContext, bool isEncrypted, bool isSystemObject, string name, int parameters, int returnType, int schema);
    public ExtendedStoredProcedure(DeserializationModel model, Object[] values);
    private sealed virtual override CallableModuleType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.get_ModuleType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.get_ReturnType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_IsEncrypted();
    private sealed virtual override IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_ExecutionContext();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.FileGroup : object {
    private DeserializationModel model;
    private int database;
    private bool isDefault;
    private bool isFileStream;
    private bool isReadOnly;
    private bool isSystemObject;
    private string name;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IFileGroup.IsDefault { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IFileGroup.IsFileStream { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IFileGroup.IsReadOnly { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public FileGroup(DeserializationModel model, int database, bool isDefault, bool isFileStream, bool isReadOnly, bool isSystemObject, string name);
    public FileGroup(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IFileGroup.get_IsDefault();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IFileGroup.get_IsFileStream();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IFileGroup.get_IsReadOnly();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ForeignKeyColumn : object {
    private DeserializationModel model;
    private int referencedColumn;
    private int referencingColumn;
    private IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyColumn.ReferencingColumn { get; }
    private IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyColumn.ReferencedColumn { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public ForeignKeyColumn(DeserializationModel model, int referencedColumn, int referencingColumn);
    public ForeignKeyColumn(DeserializationModel model, Object[] values);
    private sealed virtual override IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyColumn.get_ReferencingColumn();
    private sealed virtual override IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyColumn.get_ReferencedColumn();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ForeignKeyConstraint : object {
    private DeserializationModel model;
    private int columns;
    private ForeignKeyAction deleteAction;
    private bool isChecked;
    private bool isEnabled;
    private bool isSystemNamed;
    private string name;
    private bool notForReplication;
    private int parent;
    private int referencedTable;
    private ForeignKeyAction updateAction;
    private IMetadataOrderedCollection`1<IForeignKeyColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.Columns { get; }
    private ForeignKeyAction Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.DeleteAction { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.IsEnabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.IsChecked { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.NotForReplication { get; }
    private ITable Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.ReferencedTable { get; }
    private ForeignKeyAction Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.UpdateAction { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.IsSystemNamed { get; }
    private ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Type { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public ForeignKeyConstraint(DeserializationModel model, int columns, ForeignKeyAction deleteAction, bool isChecked, bool isEnabled, bool isSystemNamed, string name, bool notForReplication, int parent, int referencedTable, ForeignKeyAction updateAction);
    public ForeignKeyConstraint(DeserializationModel model, Object[] values);
    private sealed virtual override IMetadataOrderedCollection`1<IForeignKeyColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_Columns();
    private sealed virtual override ForeignKeyAction Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_DeleteAction();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_IsEnabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_IsChecked();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_NotForReplication();
    private sealed virtual override ITable Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_ReferencedTable();
    private sealed virtual override ForeignKeyAction Microsoft.SqlServer.Management.SqlParser.Metadata.IForeignKeyConstraint.get_UpdateAction();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_IsSystemNamed();
    private sealed virtual override ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Type();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.IndexedColumn : object {
    private DeserializationModel model;
    private bool isIncluded;
    private int referencedColumn;
    private SortOrder sortOrder;
    private IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IIndexedColumn.ReferencedColumn { get; }
    private SortOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IIndexedColumn.SortOrder { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndexedColumn.IsIncluded { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public IndexedColumn(DeserializationModel model, bool isIncluded, int referencedColumn, SortOrder sortOrder);
    public IndexedColumn(DeserializationModel model, Object[] values);
    private sealed virtual override IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.IIndexedColumn.get_ReferencedColumn();
    private sealed virtual override SortOrder Microsoft.SqlServer.Management.SqlParser.Metadata.IIndexedColumn.get_SortOrder();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndexedColumn.get_IsIncluded();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Login : object {
    private DeserializationModel model;
    private int asymmetricKey;
    private int certificate;
    private int credential;
    private int defaultDatabase;
    private bool isSystemObject;
    private string language;
    private LoginType loginType;
    private string name;
    private IPassword password;
    private int server;
    private Byte[] sid;
    private LoginType Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.LoginType { get; }
    private IAsymmetricKey Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.AsymmetricKey { get; }
    private ICertificate Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.Certificate { get; }
    private ICredential Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.Credential { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.DefaultDatabase { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.Language { get; }
    private IPassword Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.Password { get; }
    private Byte[] Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.Sid { get; }
    private IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Server { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Login(DeserializationModel model, int asymmetricKey, int certificate, int credential, int defaultDatabase, bool isSystemObject, string language, LoginType loginType, string name, IPassword password, int server, Byte[] sid);
    public Login(DeserializationModel model, Object[] values);
    private sealed virtual override LoginType Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_LoginType();
    private sealed virtual override IAsymmetricKey Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_AsymmetricKey();
    private sealed virtual override ICertificate Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_Certificate();
    private sealed virtual override ICredential Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_Credential();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_DefaultDatabase();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_Language();
    private sealed virtual override IPassword Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_Password();
    private sealed virtual override Byte[] Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin.get_Sid();
    private sealed virtual override IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.get_Server();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Accept(IServerOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.PartitionScheme : object {
    private DeserializationModel model;
    private int database;
    private int fileGroups;
    private bool isSystemObject;
    private string name;
    private IMetadataCollection`1<IFileGroup> Microsoft.SqlServer.Management.SqlParser.Metadata.IPartitionScheme.FileGroups { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public PartitionScheme(DeserializationModel model, int database, int fileGroups, bool isSystemObject, string name);
    public PartitionScheme(DeserializationModel model, Object[] values);
    private sealed virtual override IMetadataCollection`1<IFileGroup> Microsoft.SqlServer.Management.SqlParser.Metadata.IPartitionScheme.get_FileGroups();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.PrimaryKeyConstraint : object {
    private DeserializationModel model;
    private int associatedIndex;
    private bool isSystemNamed;
    private string name;
    private int parent;
    private IRelationalIndex Microsoft.SqlServer.Management.SqlParser.Metadata.IUniqueConstraintBase.AssociatedIndex { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.IsSystemNamed { get; }
    private ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Type { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public PrimaryKeyConstraint(DeserializationModel model, int associatedIndex, bool isSystemNamed, string name, int parent);
    public PrimaryKeyConstraint(DeserializationModel model, Object[] values);
    private sealed virtual override IRelationalIndex Microsoft.SqlServer.Management.SqlParser.Metadata.IUniqueConstraintBase.get_AssociatedIndex();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_IsSystemNamed();
    private sealed virtual override ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Type();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.RelationalIndex : object {
    private DeserializationModel model;
    private bool compactLargeObjects;
    private bool disallowPageLocks;
    private bool disallowRowLocks;
    private int fileGroup;
    private int fileStreamFileGroup;
    private int fileStreamPartitionScheme;
    private byte fillFactor;
    private string filterDefinition;
    private bool ignoreDuplicateKeys;
    private int indexKey;
    private int indexedColumns;
    private bool isClustered;
    private bool isDisabled;
    private bool isSystemNamed;
    private bool isUnique;
    private string name;
    private bool noAutomaticRecomputation;
    private bool padIndex;
    private int parent;
    private int partitionScheme;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.CompactLargeObjects { get; }
    private IFileGroup Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.FileGroup { get; }
    private IFileGroup Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.FileStreamFileGroup { get; }
    private IPartitionScheme Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.FileStreamPartitionScheme { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.FilterDefinition { get; }
    private IMetadataOrderedCollection`1<IIndexedColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.IndexedColumns { get; }
    private IUniqueConstraintBase Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.IndexKey { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.IsClustered { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.IsSystemNamed { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.IsUnique { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.NoAutomaticRecomputation { get; }
    private IPartitionScheme Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.PartitionScheme { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.Parent { get; }
    private IndexType Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.Type { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.DisallowPageLocks { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.DisallowRowLocks { get; }
    private byte Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.FillFactor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.IgnoreDuplicateKeys { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.IsDisabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.PadIndex { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public RelationalIndex(DeserializationModel model, bool compactLargeObjects, bool disallowPageLocks, bool disallowRowLocks, int fileGroup, int fileStreamFileGroup, int fileStreamPartitionScheme, byte fillFactor, string filterDefinition, bool ignoreDuplicateKeys, int indexKey, int indexedColumns, bool isClustered, bool isDisabled, bool isSystemNamed, bool isUnique, string name, bool noAutomaticRecomputation, bool padIndex, int parent, int partitionScheme);
    public RelationalIndex(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_CompactLargeObjects();
    private sealed virtual override IFileGroup Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_FileGroup();
    private sealed virtual override IFileGroup Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_FileStreamFileGroup();
    private sealed virtual override IPartitionScheme Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_FileStreamPartitionScheme();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_FilterDefinition();
    private sealed virtual override IMetadataOrderedCollection`1<IIndexedColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_IndexedColumns();
    private sealed virtual override IUniqueConstraintBase Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_IndexKey();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_IsClustered();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_IsSystemNamed();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_IsUnique();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_NoAutomaticRecomputation();
    private sealed virtual override IPartitionScheme Microsoft.SqlServer.Management.SqlParser.Metadata.IRelationalIndex.get_PartitionScheme();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_Parent();
    private sealed virtual override IndexType Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_Type();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_DisallowPageLocks();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_DisallowRowLocks();
    private sealed virtual override byte Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_FillFactor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_IgnoreDuplicateKeys();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_IsDisabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_PadIndex();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ScalarDataType : object {
    private DeserializationModel model;
    private string name;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public ScalarDataType(DeserializationModel model, string name);
    public ScalarDataType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ScalarParameter : object {
    private DeserializationModel model;
    private int dataType;
    private string defaultValue;
    private bool isOutput;
    private string name;
    private bool nullable;
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarVariable.DataType { get; }
    private ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.ScalarType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.Nullable { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsScalarVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsTableVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsCursorVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsParameter { get; }
    private IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.IsOutput { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.IsReadOnly { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.DefaultValue { get; }
    public ScalarParameter(DeserializationModel model, int dataType, string defaultValue, bool isOutput, string name, bool nullable);
    public ScalarParameter(DeserializationModel model, Object[] values);
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarVariable.get_DataType();
    private sealed virtual override ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_ScalarType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_Nullable();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsScalarVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsTableVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsCursorVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsParameter();
    private sealed virtual override IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_IsOutput();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_IsReadOnly();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_DefaultValue();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ScalarValuedFunction : object {
    private DeserializationModel model;
    private string bodyText;
    private int dataType;
    private int executionContext;
    private bool isEncrypted;
    private bool isQuotedIdentifierOn;
    private bool isSchemaBound;
    private bool isSqlClr;
    private bool isSystemObject;
    private string name;
    private bool nullable;
    private int parameters;
    private bool returnsNullOnNullInput;
    private int schema;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarValuedFunction.ReturnsNullOnNullInput { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.BodyText { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.IsSchemaBound { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.IsSqlClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.IsQuotedIdentifierOn { get; }
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.IsEncrypted { get; }
    private IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.ExecutionContext { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private CallableModuleType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.ModuleType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.ReturnType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarFunction.IsAggregateFunction { get; }
    private ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.ScalarType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.Nullable { get; }
    public ScalarValuedFunction(DeserializationModel model, string bodyText, int dataType, int executionContext, bool isEncrypted, bool isQuotedIdentifierOn, bool isSchemaBound, bool isSqlClr, bool isSystemObject, string name, bool nullable, int parameters, bool returnsNullOnNullInput, int schema);
    public ScalarValuedFunction(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarValuedFunction.get_ReturnsNullOnNullInput();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_BodyText();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_IsSchemaBound();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_IsSqlClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_IsQuotedIdentifierOn();
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_IsEncrypted();
    private sealed virtual override IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_ExecutionContext();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override CallableModuleType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.get_ModuleType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.get_ReturnType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarFunction.get_IsAggregateFunction();
    private sealed virtual override ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_ScalarType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_Nullable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ScalarVariable : object {
    private DeserializationModel model;
    private int dataType;
    private string name;
    private bool nullable;
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarVariable.DataType { get; }
    private ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.ScalarType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.Nullable { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsScalarVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsTableVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsCursorVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsParameter { get; }
    private IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.DataType { get; }
    public ScalarVariable(DeserializationModel model, int dataType, string name, bool nullable);
    public ScalarVariable(DeserializationModel model, Object[] values);
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarVariable.get_DataType();
    private sealed virtual override ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_ScalarType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_Nullable();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsScalarVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsTableVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsCursorVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsParameter();
    private sealed virtual override IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_DataType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Schema : object {
    private DeserializationModel model;
    private int database;
    private int extendedStoredProcedures;
    private bool isSystemObject;
    private string name;
    private int owner;
    private int scalarValuedFunctions;
    private int storedProcedures;
    private int synonyms;
    private int tableValuedFunctions;
    private int tables;
    private int userDefinedAggregates;
    private int userDefinedClrTypes;
    private int userDefinedDataTypes;
    private int userDefinedTableTypes;
    private int views;
    private IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Owner { get; }
    private IMetadataCollection`1<ITable> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Tables { get; }
    private IMetadataCollection`1<IView> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Views { get; }
    private IMetadataCollection`1<IUserDefinedAggregate> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedAggregates { get; }
    private IMetadataCollection`1<ITableValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.TableValuedFunctions { get; }
    private IMetadataCollection`1<IScalarValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.ScalarValuedFunctions { get; }
    private IMetadataCollection`1<IStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.StoredProcedures { get; }
    private IMetadataCollection`1<IExtendedStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.ExtendedStoredProcedures { get; }
    private IMetadataCollection`1<IUserDefinedDataType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedDataTypes { get; }
    private IMetadataCollection`1<IUserDefinedTableType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedTableTypes { get; }
    private IMetadataCollection`1<IUserDefinedClrType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.UserDefinedClrTypes { get; }
    private IMetadataCollection`1<ISynonym> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.Synonyms { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Schema(DeserializationModel model, int database, int extendedStoredProcedures, bool isSystemObject, string name, int owner, int scalarValuedFunctions, int storedProcedures, int synonyms, int tableValuedFunctions, int tables, int userDefinedAggregates, int userDefinedClrTypes, int userDefinedDataTypes, int userDefinedTableTypes, int views);
    public Schema(DeserializationModel model, Object[] values);
    private sealed virtual override IDatabasePrincipal Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Owner();
    private sealed virtual override IMetadataCollection`1<ITable> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Tables();
    private sealed virtual override IMetadataCollection`1<IView> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Views();
    private sealed virtual override IMetadataCollection`1<IUserDefinedAggregate> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedAggregates();
    private sealed virtual override IMetadataCollection`1<ITableValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_TableValuedFunctions();
    private sealed virtual override IMetadataCollection`1<IScalarValuedFunction> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_ScalarValuedFunctions();
    private sealed virtual override IMetadataCollection`1<IStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_StoredProcedures();
    private sealed virtual override IMetadataCollection`1<IExtendedStoredProcedure> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_ExtendedStoredProcedures();
    private sealed virtual override IMetadataCollection`1<IUserDefinedDataType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedDataTypes();
    private sealed virtual override IMetadataCollection`1<IUserDefinedTableType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedTableTypes();
    private sealed virtual override IMetadataCollection`1<IUserDefinedClrType> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_UserDefinedClrTypes();
    private sealed virtual override IMetadataCollection`1<ISynonym> Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema.get_Synonyms();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Server : object {
    private DeserializationModel model;
    private CollationInfo collationInfo;
    private int credentials;
    private int databases;
    private bool isSystemObject;
    private int logins;
    private string name;
    private int triggers;
    private CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.CollationInfo { get; }
    private IMetadataCollection`1<IDatabase> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Databases { get; }
    private IMetadataCollection`1<ICredential> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Credentials { get; }
    private IMetadataCollection`1<ILogin> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Logins { get; }
    private IMetadataCollection`1<IServerDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.Triggers { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Server(DeserializationModel model, CollationInfo collationInfo, int credentials, int databases, bool isSystemObject, int logins, string name, int triggers);
    public Server(DeserializationModel model, Object[] values);
    private sealed virtual override CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IDatabase> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Databases();
    private sealed virtual override IMetadataCollection`1<ICredential> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Credentials();
    private sealed virtual override IMetadataCollection`1<ILogin> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Logins();
    private sealed virtual override IMetadataCollection`1<IServerDdlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.IServer.get_Triggers();
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.ServerDdlTrigger : object {
    private DeserializationModel model;
    private string bodyText;
    private int executionContext;
    private bool isEnabled;
    private bool isEncrypted;
    private bool isQuotedIdentifierOn;
    private bool isSqlClr;
    private bool isSystemObject;
    private string name;
    private int server;
    private ITriggerEventTypeSet serverDdlEvents;
    private ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IServerDdlTrigger.ServerDdlEvents { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IServerDdlTrigger.IsQuotedIdentifierOn { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.BodyText { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsEncrypted { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsEnabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.IsSqlClr { get; }
    private IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.ExecutionContext { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Server { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    public ServerDdlTrigger(DeserializationModel model, string bodyText, int executionContext, bool isEnabled, bool isEncrypted, bool isQuotedIdentifierOn, bool isSqlClr, bool isSystemObject, string name, int server, ITriggerEventTypeSet serverDdlEvents);
    public ServerDdlTrigger(DeserializationModel model, Object[] values);
    private sealed virtual override ITriggerEventTypeSet Microsoft.SqlServer.Management.SqlParser.Metadata.IServerDdlTrigger.get_ServerDdlEvents();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IServerDdlTrigger.get_IsQuotedIdentifierOn();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_BodyText();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsEncrypted();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsEnabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_IsSqlClr();
    private sealed virtual override IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.ITrigger.get_ExecutionContext();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override IServer Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.get_Server();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObject.Accept(IServerOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.SpatialIndex : object {
    private DeserializationModel model;
    private double boundingBoxXMax;
    private double boundingBoxXMin;
    private double boundingBoxYMax;
    private double boundingBoxYMin;
    private int cellsPerObject;
    private bool disallowPageLocks;
    private bool disallowRowLocks;
    private byte fillFactor;
    private bool ignoreDuplicateKeys;
    private int indexedColumn;
    private bool isDisabled;
    private GridDensity level1Density;
    private GridDensity level2Density;
    private GridDensity level3Density;
    private GridDensity level4Density;
    private string name;
    private bool noAutomaticRecomputation;
    private bool padIndex;
    private int parent;
    private double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.BoundingBoxXMax { get; }
    private double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.BoundingBoxXMin { get; }
    private double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.BoundingBoxYMax { get; }
    private double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.BoundingBoxYMin { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.CellsPerObject { get; }
    private IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.IndexedColumn { get; }
    private GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.Level1Density { get; }
    private GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.Level2Density { get; }
    private GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.Level3Density { get; }
    private GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.Level4Density { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.NoAutomaticRecomputation { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.Parent { get; }
    private IndexType Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.Type { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.DisallowPageLocks { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.DisallowRowLocks { get; }
    private byte Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.FillFactor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.IgnoreDuplicateKeys { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.IsDisabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.PadIndex { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public SpatialIndex(DeserializationModel model, double boundingBoxXMax, double boundingBoxXMin, double boundingBoxYMax, double boundingBoxYMin, int cellsPerObject, bool disallowPageLocks, bool disallowRowLocks, byte fillFactor, bool ignoreDuplicateKeys, int indexedColumn, bool isDisabled, GridDensity level1Density, GridDensity level2Density, GridDensity level3Density, GridDensity level4Density, string name, bool noAutomaticRecomputation, bool padIndex, int parent);
    public SpatialIndex(DeserializationModel model, Object[] values);
    private sealed virtual override double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_BoundingBoxXMax();
    private sealed virtual override double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_BoundingBoxXMin();
    private sealed virtual override double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_BoundingBoxYMax();
    private sealed virtual override double Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_BoundingBoxYMin();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_CellsPerObject();
    private sealed virtual override IColumn Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_IndexedColumn();
    private sealed virtual override GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_Level1Density();
    private sealed virtual override GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_Level2Density();
    private sealed virtual override GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_Level3Density();
    private sealed virtual override GridDensity Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_Level4Density();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISpatialIndex.get_NoAutomaticRecomputation();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_Parent();
    private sealed virtual override IndexType Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_Type();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_DisallowPageLocks();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_DisallowRowLocks();
    private sealed virtual override byte Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_FillFactor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_IgnoreDuplicateKeys();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_IsDisabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_PadIndex();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Statistics : object {
    private DeserializationModel model;
    private int columns;
    private string filterDefinition;
    private string name;
    private bool noAutomaticRecomputation;
    private int parent;
    private StatisticsType type;
    private StatisticsType Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.Type { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.Parent { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.FilterDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.NoAutomaticRecomputation { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.Columns { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Statistics(DeserializationModel model, int columns, string filterDefinition, string name, bool noAutomaticRecomputation, int parent, StatisticsType type);
    public Statistics(DeserializationModel model, Object[] values);
    private sealed virtual override StatisticsType Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.get_Type();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.get_Parent();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.get_FilterDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.get_NoAutomaticRecomputation();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.IStatistics.get_Columns();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.StoredProcedure : object {
    private DeserializationModel model;
    private string bodyText;
    private int executionContext;
    private bool forReplication;
    private bool isEncrypted;
    private bool isQuotedIdentifierOn;
    private bool isRecompiled;
    private bool isSqlClr;
    private bool isSystemObject;
    private string name;
    private int parameters;
    private int schema;
    private bool startup;
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.BodyText { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.ForReplication { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.IsRecompiled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.IsSqlClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.Startup { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.IsQuotedIdentifierOn { get; }
    private CallableModuleType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.ModuleType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.ReturnType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.IsEncrypted { get; }
    private IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.ExecutionContext { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    public StoredProcedure(DeserializationModel model, string bodyText, int executionContext, bool forReplication, bool isEncrypted, bool isQuotedIdentifierOn, bool isRecompiled, bool isSqlClr, bool isSystemObject, string name, int parameters, int schema, bool startup);
    public StoredProcedure(DeserializationModel model, Object[] values);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.get_BodyText();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.get_ForReplication();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.get_IsRecompiled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.get_IsSqlClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.get_Startup();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure.get_IsQuotedIdentifierOn();
    private sealed virtual override CallableModuleType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.get_ModuleType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ICallableModule.get_ReturnType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_IsEncrypted();
    private sealed virtual override IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_ExecutionContext();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Synonym : object {
    private DeserializationModel model;
    private string baseObjectName;
    private SynonymBaseType baseType;
    private bool isSystemObject;
    private string name;
    private int schema;
    private SynonymBaseType Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym.BaseType { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym.BaseObjectName { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public Synonym(DeserializationModel model, string baseObjectName, SynonymBaseType baseType, bool isSystemObject, string name, int schema);
    public Synonym(DeserializationModel model, Object[] values);
    private sealed virtual override SynonymBaseType Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym.get_BaseType();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym.get_BaseObjectName();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.SystemClrDataType : object {
    private DeserializationModel model;
    private int length;
    private int numericPrecision;
    private int numericScale;
    private DataTypeSpec typeSpec;
    private DataTypeSpec Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.TypeSpec { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.Length { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.NumericPrecision { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.NumericScale { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.AssemblyName { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.ClassName { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsBinaryOrdered { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsComVisible { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsNullable { get; }
    private IMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.Methods { get; }
    private IMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.DataMembers { get; }
    public SystemClrDataType(DeserializationModel model, int length, int numericPrecision, int numericScale, DataTypeSpec typeSpec);
    public SystemClrDataType(DeserializationModel model, Object[] values);
    private sealed virtual override DataTypeSpec Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_TypeSpec();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_Length();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_NumericPrecision();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_NumericScale();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_AssemblyName();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_ClassName();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsBinaryOrdered();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsComVisible();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsNullable();
    private sealed virtual override IMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_Methods();
    private sealed virtual override IMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_DataMembers();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.SystemDataType : object {
    private DeserializationModel model;
    private int length;
    private int numericPrecision;
    private int numericScale;
    private DataTypeSpec typeSpec;
    private DataTypeSpec Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.TypeSpec { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.Length { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.NumericPrecision { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.NumericScale { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public SystemDataType(DeserializationModel model, int length, int numericPrecision, int numericScale, DataTypeSpec typeSpec);
    public SystemDataType(DeserializationModel model, Object[] values);
    private sealed virtual override DataTypeSpec Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_TypeSpec();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_Length();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_NumericPrecision();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_NumericScale();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.Table : object {
    private DeserializationModel model;
    private int columns;
    private int constraints;
    private int indexes;
    private bool isQuotedIdentifierOn;
    private bool isSystemObject;
    private string name;
    private int schema;
    private int statistics;
    private int triggers;
    private IMetadataCollection`1<IDmlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.Triggers { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.IsQuotedIdentifierOn { get; }
    private CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.CollationInfo { get; }
    private IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Constraints { get; }
    private IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Indexes { get; }
    private IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Statistics { get; }
    private TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Unaliased { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    public Table(DeserializationModel model, int columns, int constraints, int indexes, bool isQuotedIdentifierOn, bool isSystemObject, string name, int schema, int statistics, int triggers);
    public Table(DeserializationModel model, Object[] values);
    private sealed virtual override IMetadataCollection`1<IDmlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.get_Triggers();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.get_IsQuotedIdentifierOn();
    private sealed virtual override CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Constraints();
    private sealed virtual override IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Indexes();
    private sealed virtual override IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Statistics();
    private sealed virtual override TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Unaliased();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.TableDataType : object {
    private DeserializationModel model;
    private int columns;
    private int constraints;
    private int indexes;
    private string name;
    private int statistics;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.CollationInfo { get; }
    private IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Constraints { get; }
    private IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Indexes { get; }
    private IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Statistics { get; }
    private TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Unaliased { get; }
    public TableDataType(DeserializationModel model, int columns, int constraints, int indexes, string name, int statistics);
    public TableDataType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Constraints();
    private sealed virtual override IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Indexes();
    private sealed virtual override IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Statistics();
    private sealed virtual override TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Unaliased();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.TableParameter : object {
    private DeserializationModel model;
    private int dataType;
    private string name;
    private ITableDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ITableVariable.DataType { get; }
    private TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Unaliased { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsScalarVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsTableVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsCursorVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsParameter { get; }
    private IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.IsOutput { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.IsReadOnly { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.DefaultValue { get; }
    public TableParameter(DeserializationModel model, int dataType, string name);
    public TableParameter(DeserializationModel model, Object[] values);
    private sealed virtual override ITableDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ITableVariable.get_DataType();
    private sealed virtual override TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Unaliased();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsScalarVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsTableVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsCursorVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsParameter();
    private sealed virtual override IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_IsOutput();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_IsReadOnly();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IParameter.get_DefaultValue();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.TableValuedFunction : object {
    private DeserializationModel model;
    private string bodyText;
    private int columns;
    private int constraints;
    private int executionContext;
    private int indexes;
    private bool isEncrypted;
    private bool isInline;
    private bool isQuotedIdentifierOn;
    private bool isSchemaBound;
    private bool isSqlClr;
    private bool isSystemObject;
    private string name;
    private int parameters;
    private int schema;
    private int statistics;
    private string tableVariableName;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITableValuedFunction.IsInline { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.ITableValuedFunction.TableVariableName { get; }
    private CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.CollationInfo { get; }
    private IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Constraints { get; }
    private IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Indexes { get; }
    private IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Statistics { get; }
    private TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Unaliased { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.BodyText { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.IsSchemaBound { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.IsSqlClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.IsQuotedIdentifierOn { get; }
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.IsEncrypted { get; }
    private IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.ExecutionContext { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    public TableValuedFunction(DeserializationModel model, string bodyText, int columns, int constraints, int executionContext, int indexes, bool isEncrypted, bool isInline, bool isQuotedIdentifierOn, bool isSchemaBound, bool isSqlClr, bool isSystemObject, string name, int parameters, int schema, int statistics, string tableVariableName);
    public TableValuedFunction(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITableValuedFunction.get_IsInline();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.ITableValuedFunction.get_TableVariableName();
    private sealed virtual override CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Constraints();
    private sealed virtual override IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Indexes();
    private sealed virtual override IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Statistics();
    private sealed virtual override TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Unaliased();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_BodyText();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_IsSchemaBound();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_IsSqlClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction.get_IsQuotedIdentifierOn();
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_IsEncrypted();
    private sealed virtual override IExecutionContext Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunctionModuleBase.get_ExecutionContext();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.TableVariable : object {
    private DeserializationModel model;
    private int dataType;
    private string name;
    private ITableDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ITableVariable.DataType { get; }
    private TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Unaliased { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsScalarVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsTableVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsCursorVariable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.IsParameter { get; }
    private IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.DataType { get; }
    public TableVariable(DeserializationModel model, int dataType, string name);
    public TableVariable(DeserializationModel model, Object[] values);
    private sealed virtual override ITableDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ITableVariable.get_DataType();
    private sealed virtual override TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Unaliased();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsScalarVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsTableVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsCursorVariable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_IsParameter();
    private sealed virtual override IDataType Microsoft.SqlServer.Management.SqlParser.Metadata.ILocalVariable.get_DataType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.UdtDataMember : object {
    private DeserializationModel model;
    private int dataType;
    private bool isStatic;
    private string name;
    private bool nullable;
    private int userDefinedType;
    private IClrDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.UserDefinedType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.IsStatic { get; }
    private ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.ScalarType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.Nullable { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public UdtDataMember(DeserializationModel model, int dataType, bool isStatic, string name, bool nullable, int userDefinedType);
    public UdtDataMember(DeserializationModel model, Object[] values);
    private sealed virtual override IClrDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.get_UserDefinedType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.get_IsStatic();
    private sealed virtual override ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_ScalarType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_Nullable();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.UdtMethod : object {
    private DeserializationModel model;
    private int dataType;
    private bool isStatic;
    private string name;
    private bool nullable;
    private int parameters;
    private int userDefinedType;
    private IClrDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.UserDefinedType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.IsStatic { get; }
    private ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.ScalarType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.Nullable { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarFunction.IsAggregateFunction { get; }
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    public UdtMethod(DeserializationModel model, int dataType, bool isStatic, string name, bool nullable, int parameters, int userDefinedType);
    public UdtMethod(DeserializationModel model, Object[] values);
    private sealed virtual override IClrDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.get_UserDefinedType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUdtMember.get_IsStatic();
    private sealed virtual override ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_ScalarType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_Nullable();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarFunction.get_IsAggregateFunction();
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.UniqueConstraint : object {
    private DeserializationModel model;
    private int associatedIndex;
    private bool isSystemNamed;
    private string name;
    private int parent;
    private IRelationalIndex Microsoft.SqlServer.Management.SqlParser.Metadata.IUniqueConstraintBase.AssociatedIndex { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.IsSystemNamed { get; }
    private ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.Type { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public UniqueConstraint(DeserializationModel model, int associatedIndex, bool isSystemNamed, string name, int parent);
    public UniqueConstraint(DeserializationModel model, Object[] values);
    private sealed virtual override IRelationalIndex Microsoft.SqlServer.Management.SqlParser.Metadata.IUniqueConstraintBase.get_AssociatedIndex();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_IsSystemNamed();
    private sealed virtual override ConstraintType Microsoft.SqlServer.Management.SqlParser.Metadata.IConstraint.get_Type();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.User : object {
    private DeserializationModel model;
    private int asymmetricKey;
    private int certificate;
    private int database;
    private int defaultSchema;
    private bool isSystemObject;
    private int login;
    private int memberOfRoles;
    private string name;
    private string password;
    private int permissions;
    private UserType userType;
    private UserType Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.UserType { get; }
    private IAsymmetricKey Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.AsymmetricKey { get; }
    private ICertificate Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.Certificate { get; }
    private ILogin Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.Login { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.Password { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.DefaultSchema { get; }
    private IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.Permissions { get; }
    private IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.MemberOfRoles { get; }
    private IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Database { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public User(DeserializationModel model, int asymmetricKey, int certificate, int database, int defaultSchema, bool isSystemObject, int login, int memberOfRoles, string name, string password, int permissions, UserType userType);
    public User(DeserializationModel model, Object[] values);
    private sealed virtual override UserType Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.get_UserType();
    private sealed virtual override IAsymmetricKey Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.get_AsymmetricKey();
    private sealed virtual override ICertificate Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.get_Certificate();
    private sealed virtual override ILogin Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.get_Login();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.get_Password();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.IUser.get_DefaultSchema();
    private sealed virtual override IMetadataCollection`1<IDatabasePermission> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_Permissions();
    private sealed virtual override IMetadataCollection`1<IDatabaseRole> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabasePrincipal.get_MemberOfRoles();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.get_Database();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObject.Accept(IDatabaseOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.UserDefinedAggregate : object {
    private DeserializationModel model;
    private int dataType;
    private bool isSystemObject;
    private string name;
    private bool nullable;
    private int parameters;
    private int schema;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarFunction.IsAggregateFunction { get; }
    private IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.Parameters { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.ScalarType { get; }
    private IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.DataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.Nullable { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    public UserDefinedAggregate(DeserializationModel model, int dataType, bool isSystemObject, string name, bool nullable, int parameters, int schema);
    public UserDefinedAggregate(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarFunction.get_IsAggregateFunction();
    private sealed virtual override IMetadataOrderedCollection`1<IParameter> Microsoft.SqlServer.Management.SqlParser.Metadata.IFunctionModuleBase.get_Parameters();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override ScalarType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_ScalarType();
    private sealed virtual override IScalarDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_DataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalar.get_Nullable();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.UserDefinedClrType : object {
    private DeserializationModel model;
    private string assemblyName;
    private string className;
    private int dataMembers;
    private bool isBinaryOrdered;
    private bool isComVisible;
    private bool isNullable;
    private bool isSystemObject;
    private int methods;
    private string name;
    private int schema;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.AssemblyName { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.ClassName { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsBinaryOrdered { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsComVisible { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.IsNullable { get; }
    private IMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.Methods { get; }
    private IMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.DataMembers { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    public UserDefinedClrType(DeserializationModel model, string assemblyName, string className, int dataMembers, bool isBinaryOrdered, bool isComVisible, bool isNullable, bool isSystemObject, int methods, string name, int schema);
    public UserDefinedClrType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_AssemblyName();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_ClassName();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsBinaryOrdered();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsComVisible();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_IsNullable();
    private sealed virtual override IMetadataCollection`1<IUdtMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_Methods();
    private sealed virtual override IMetadataCollection`1<IUdtDataMember> Microsoft.SqlServer.Management.SqlParser.Metadata.IClrDataType.get_DataMembers();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.UserDefinedDataType : object {
    private DeserializationModel model;
    private int baseSystemDataType;
    private bool isSystemObject;
    private string name;
    private bool nullable;
    private int schema;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedDataType.Nullable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    public UserDefinedDataType(DeserializationModel model, int baseSystemDataType, bool isSystemObject, string name, bool nullable, int schema);
    public UserDefinedDataType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedDataType.get_Nullable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.UserDefinedTableType : object {
    private DeserializationModel model;
    private int columns;
    private int constraints;
    private int indexes;
    private bool isSystemObject;
    private string name;
    private int schema;
    private int statistics;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    private CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.CollationInfo { get; }
    private IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Constraints { get; }
    private IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Indexes { get; }
    private IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Statistics { get; }
    private TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Unaliased { get; }
    public UserDefinedTableType(DeserializationModel model, int columns, int constraints, int indexes, bool isSystemObject, string name, int schema, int statistics);
    public UserDefinedTableType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
    private sealed virtual override CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Constraints();
    private sealed virtual override IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Indexes();
    private sealed virtual override IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Statistics();
    private sealed virtual override TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Unaliased();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.View : object {
    private DeserializationModel model;
    private int columns;
    private int constraints;
    private bool hasCheckOption;
    private bool hasColumnSpecification;
    private int indexes;
    private bool isEncrypted;
    private bool isQuotedIdentifierOn;
    private bool isSchemaBound;
    private bool isSystemObject;
    private string name;
    private string queryText;
    private bool returnsViewMetadata;
    private int schema;
    private int statistics;
    private int triggers;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.IsEncrypted { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.IsSchemaBound { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IView.QueryText { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.ReturnsViewMetadata { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.HasCheckOption { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.HasColumnSpecification { get; }
    private IMetadataCollection`1<IDmlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.Triggers { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.IsQuotedIdentifierOn { get; }
    private CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.CollationInfo { get; }
    private IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Constraints { get; }
    private IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Indexes { get; }
    private IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.Statistics { get; }
    private TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.TabularType { get; }
    private IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Columns { get; }
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.Unaliased { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    private ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Schema { get; }
    private IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Parent { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.IsSystemObject { get; }
    public View(DeserializationModel model, int columns, int constraints, bool hasCheckOption, bool hasColumnSpecification, int indexes, bool isEncrypted, bool isQuotedIdentifierOn, bool isSchemaBound, bool isSystemObject, string name, string queryText, bool returnsViewMetadata, int schema, int statistics, int triggers);
    public View(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.get_IsEncrypted();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.get_IsSchemaBound();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IView.get_QueryText();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.get_ReturnsViewMetadata();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.get_HasCheckOption();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IView.get_HasColumnSpecification();
    private sealed virtual override IMetadataCollection`1<IDmlTrigger> Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.get_Triggers();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ITableViewBase.get_IsQuotedIdentifierOn();
    private sealed virtual override CollationInfo Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_CollationInfo();
    private sealed virtual override IMetadataCollection`1<IConstraint> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Constraints();
    private sealed virtual override IMetadataCollection`1<IIndex> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Indexes();
    private sealed virtual override IMetadataCollection`1<IStatistics> Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseTable.get_Statistics();
    private sealed virtual override TabularType Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_TabularType();
    private sealed virtual override IMetadataOrderedCollection`1<IColumn> Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Columns();
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.ITabular.get_Unaliased();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.get_Schema();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObject.Accept(ISchemaOwnedObjectVisitor`1<T> visitor);
    private sealed virtual override IDatabaseObject Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.get_IsSystemObject();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObject.Accept(IDatabaseObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.VoidDataType : object {
    private DeserializationModel model;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public VoidDataType(DeserializationModel model);
    public VoidDataType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.XmlDataType : object {
    private DeserializationModel model;
    private bool isXmlNode;
    private int length;
    private int numericPrecision;
    private int numericScale;
    private DataTypeSpec typeSpec;
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType.IsXmlNode { get; }
    private IMetadataCollection`1<IXmlDataTypeMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType.Methods { get; }
    private IMetadataCollection`1<IXmlDataTypeTableMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType.TableMethods { get; }
    private DataTypeSpec Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.TypeSpec { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.Length { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.NumericPrecision { get; }
    private int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.NumericScale { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsSystem { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsClr { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsXml { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.IsVoid { get; }
    private ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.BaseSystemDataType { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsScalar { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsTable { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsCursor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.IsUnknown { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public XmlDataType(DeserializationModel model, bool isXmlNode, int length, int numericPrecision, int numericScale, DataTypeSpec typeSpec);
    public XmlDataType(DeserializationModel model, Object[] values);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType.get_IsXmlNode();
    private sealed virtual override IMetadataCollection`1<IXmlDataTypeMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType.get_Methods();
    private sealed virtual override IMetadataCollection`1<IXmlDataTypeTableMethod> Microsoft.SqlServer.Management.SqlParser.Metadata.IXmlDataType.get_TableMethods();
    private sealed virtual override DataTypeSpec Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_TypeSpec();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_Length();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_NumericPrecision();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.Metadata.ISystemDataType.get_NumericScale();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsSystem();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsClr();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsXml();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_IsVoid();
    private sealed virtual override ISystemDataType Microsoft.SqlServer.Management.SqlParser.Metadata.IScalarDataType.get_BaseSystemDataType();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsScalar();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsTable();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsCursor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDataType.get_IsUnknown();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Internals.XmlIndex : object {
    private DeserializationModel model;
    private bool disallowPageLocks;
    private bool disallowRowLocks;
    private byte fillFactor;
    private bool ignoreDuplicateKeys;
    private bool isDisabled;
    private string name;
    private bool padIndex;
    private int parent;
    private ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.Parent { get; }
    private IndexType Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.Type { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.DisallowPageLocks { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.DisallowRowLocks { get; }
    private byte Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.FillFactor { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.IgnoreDuplicateKeys { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.IsDisabled { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.PadIndex { get; }
    private string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Name { get; }
    public XmlIndex(DeserializationModel model, bool disallowPageLocks, bool disallowRowLocks, byte fillFactor, bool ignoreDuplicateKeys, bool isDisabled, string name, bool padIndex, int parent);
    public XmlIndex(DeserializationModel model, Object[] values);
    private sealed virtual override ITabular Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_Parent();
    private sealed virtual override IndexType Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_Type();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_DisallowPageLocks();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_DisallowRowLocks();
    private sealed virtual override byte Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_FillFactor();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_IgnoreDuplicateKeys();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_IsDisabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IIndex.get_PadIndex();
    private sealed virtual override string Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.get_Name();
    private sealed virtual override T Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObject.Accept(IMetadataObjectVisitor`1<T> visitor);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.InvalidXmlException : DeserializationException {
    internal InvalidXmlException(string message);
    internal InvalidXmlException(string message, Exception innerException);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISequentialValueList`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext {
    public int RootObjectId { get; }
    public int ObjectCount { get; }
    public IEnumerable`1<TypeDataTable> DataTables { get; }
    public ISequentialValueList`1<Byte[]> ByteArrayTable { get; }
    public ISequentialValueList`1<Int32[]> CollectionIdTable { get; }
    public ISequentialValueList`1<CollationInfo> CollationInfoTable { get; }
    public ISequentialValueList`1<ComputedColumnInfo> ComputedColumnInfoTable { get; }
    public ISequentialValueList`1<DataTypeSpec> DataTypeSpecTable { get; }
    public ISequentialValueList`1<double> DoubleTable { get; }
    public ISequentialValueList`1<GridDensity> GridDensityTable { get; }
    public ISequentialValueList`1<IdentityColumnInfo> IdentityColumnInfoTable { get; }
    public ISequentialValueList`1<IndexType> IndexTypeTable { get; }
    public ISequentialValueList`1<int> IntTable { get; }
    public ISequentialValueList`1<IPassword> PasswordTable { get; }
    public ISequentialValueList`1<string> StringTable { get; }
    public ISequentialValueList`1<StatisticsType> StatisticsTypeTable { get; }
    public abstract virtual int get_RootObjectId();
    public abstract virtual int get_ObjectCount();
    public abstract virtual IEnumerable`1<TypeDataTable> get_DataTables();
    public abstract virtual ISequentialValueList`1<Byte[]> get_ByteArrayTable();
    public abstract virtual ISequentialValueList`1<Int32[]> get_CollectionIdTable();
    public abstract virtual ISequentialValueList`1<CollationInfo> get_CollationInfoTable();
    public abstract virtual ISequentialValueList`1<ComputedColumnInfo> get_ComputedColumnInfoTable();
    public abstract virtual ISequentialValueList`1<DataTypeSpec> get_DataTypeSpecTable();
    public abstract virtual ISequentialValueList`1<double> get_DoubleTable();
    public abstract virtual ISequentialValueList`1<GridDensity> get_GridDensityTable();
    public abstract virtual ISequentialValueList`1<IdentityColumnInfo> get_IdentityColumnInfoTable();
    public abstract virtual ISequentialValueList`1<IndexType> get_IndexTypeTable();
    public abstract virtual ISequentialValueList`1<int> get_IntTable();
    public abstract virtual ISequentialValueList`1<IPassword> get_PasswordTable();
    public abstract virtual ISequentialValueList`1<string> get_StringTable();
    public abstract virtual ISequentialValueList`1<StatisticsType> get_StatisticsTypeTable();
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationFilter {
    public abstract virtual bool IsIncluded(IMetadataObject metadataObject);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationHandler`1 {
    public abstract virtual TId RegisterValue(IMetadataObject obj, IMetadataObject parentObj, bool isChild);
    public abstract virtual TId RegisterValue(IMetadataCollection`1<T> obj, IMetadataObject parentObj, bool isChild);
    public abstract virtual TId RegisterValue(bool value);
    public abstract virtual TId RegisterValue(byte value);
    public abstract virtual TId RegisterValue(Byte[] value);
    public abstract virtual TId RegisterValue(double value);
    public abstract virtual TId RegisterValue(int value);
    public abstract virtual TId RegisterValue(string value);
    public abstract virtual TId RegisterValue(ActivationOrder value);
    public abstract virtual TId RegisterValue(DatabaseCompatibilityLevel value);
    public abstract virtual TId RegisterValue(ExecutionContextType value);
    public abstract virtual TId RegisterValue(ForeignKeyAction value);
    public abstract virtual TId RegisterValue(GridDensity value);
    public abstract virtual TId RegisterValue(IndexType value);
    public abstract virtual TId RegisterValue(LoginType value);
    public abstract virtual TId RegisterValue(SortOrder value);
    public abstract virtual TId RegisterValue(StatisticsType value);
    public abstract virtual TId RegisterValue(TabularType value);
    public abstract virtual TId RegisterValue(UserType value);
    public abstract virtual TId RegisterValue(DatabasePermissionType value);
    public abstract virtual TId RegisterValue(PermissionState value);
    public abstract virtual TId RegisterValue(SynonymBaseType value);
    public abstract virtual TId RegisterValue(ComputedColumnInfo value);
    public abstract virtual TId RegisterValue(IdentityColumnInfo value);
    public abstract virtual TId RegisterValue(IPassword value);
    public abstract virtual TId RegisterValue(ITriggerEventTypeSet value);
    public abstract virtual TId RegisterValue(CollationInfo value);
    public abstract virtual TId RegisterValue(DataTypeSpec value);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ITypeInfo {
    public int Id { get; }
    public string Name { get; }
    public string BaseName { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_BaseName();
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.IXmlDeserializationHandler {
    public abstract virtual IMetadataObject OnCreatEvent(IMetadataObject obj);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.IXmlSerializationFilter {
    public abstract virtual bool IsIncluded(IMetadataObject metadataObject);
}
internal interface Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.IXmlSerializationSettings {
    public abstract virtual bool GetPropertyOverrideValue(MetadataTypeInfo typeInfo, MetadataPropertyInfo propertyInfo, Object& value);
    public abstract virtual bool GetMetadataObjectOverride(IMetadataObject metadataObject, IMetadataObject& overrideObject);
    public abstract virtual XmlNestingType GetNestingType(MetadataTypeInfo typeInfo);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.MetadataDeserializerFactory : object {
    private DeserializationModel model;
    public MetadataDeserializerFactory(DeserializationModel model);
    public IMetadataObject CreateMetadataObject(Object[] values, TypeInfo typeInfo);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.MetadataGenerator : object {
    private ISerializationContext serializationContext;
    protected int ObjectCount { get; }
    protected int CollectionCount { get; }
    protected int RootObjectId { get; }
    protected IEnumerable`1<TypeDataTable> DataTables { get; }
    protected ISequentialValueList`1<Byte[]> ByteArrayTable { get; }
    protected ISequentialValueList`1<Int32[]> CollectionIdListTable { get; }
    protected ISequentialValueList`1<CollationInfo> CollationInfoTable { get; }
    protected ISequentialValueList`1<ComputedColumnInfo> ComputedColumnInfoTable { get; }
    protected ISequentialValueList`1<DataTypeSpec> DataTypeSpecTable { get; }
    protected ISequentialValueList`1<IdentityColumnInfo> IdentityColumnInfoTable { get; }
    protected ISequentialValueList`1<int> IntTable { get; }
    protected ISequentialValueList`1<IPassword> PasswordTable { get; }
    protected ISequentialValueList`1<string> StringTable { get; }
    protected MetadataGenerator(ISerializationContext serializationContext);
    protected int get_ObjectCount();
    protected int get_CollectionCount();
    protected int get_RootObjectId();
    protected IEnumerable`1<TypeDataTable> get_DataTables();
    protected ISequentialValueList`1<Byte[]> get_ByteArrayTable();
    protected ISequentialValueList`1<Int32[]> get_CollectionIdListTable();
    protected ISequentialValueList`1<CollationInfo> get_CollationInfoTable();
    protected ISequentialValueList`1<ComputedColumnInfo> get_ComputedColumnInfoTable();
    protected ISequentialValueList`1<DataTypeSpec> get_DataTypeSpecTable();
    protected ISequentialValueList`1<IdentityColumnInfo> get_IdentityColumnInfoTable();
    protected ISequentialValueList`1<int> get_IntTable();
    protected ISequentialValueList`1<IPassword> get_PasswordTable();
    protected ISequentialValueList`1<string> get_StringTable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.MetadataSerializer : object {
    private ISerializationFilter filter;
    private SerializationVisitor serializationVisitor;
    private Stack`1<IMetadataObject> workList;
    private Dictionary`2<IMetadataObject, int> metadataIdMap;
    private Dictionary`2<int, IMetadataObject> metadataExcIdMap;
    private SortedDictionary`2<int, TypeDataTable> dataTables;
    private ValueTable`1<Byte[]> byteArrayTable;
    private ValueTable`1<Int32[]> collectionIdTable;
    private ValueTable`1<CollationInfo> collationInfoTable;
    private ValueTable`1<ComputedColumnInfo> computedColumnInfoTable;
    private ValueTable`1<DataTypeSpec> dataTypeSpecTable;
    private ValueTable`1<double> doubleTable;
    private ValueTable`1<GridDensity> gridDensityTable;
    private ValueTable`1<IdentityColumnInfo> identityColumnInfoTable;
    private ValueTable`1<IndexType> indexTypeTable;
    private ValueTable`1<int> intTable;
    private ValueTable`1<IPassword> passwordTable;
    private ValueTable`1<string> stringTable;
    private ValueTable`1<StatisticsType> statisticsTypeTable;
    private int currentId;
    private int rootId;
    private int Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.RootObjectId { get; }
    private int Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.ObjectCount { get; }
    private IEnumerable`1<TypeDataTable> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.DataTables { get; }
    private ISequentialValueList`1<Byte[]> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.ByteArrayTable { get; }
    private ISequentialValueList`1<Int32[]> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.CollectionIdTable { get; }
    private ISequentialValueList`1<CollationInfo> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.CollationInfoTable { get; }
    private ISequentialValueList`1<ComputedColumnInfo> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.ComputedColumnInfoTable { get; }
    private ISequentialValueList`1<DataTypeSpec> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.DataTypeSpecTable { get; }
    private ISequentialValueList`1<double> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.DoubleTable { get; }
    private ISequentialValueList`1<GridDensity> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.GridDensityTable { get; }
    private ISequentialValueList`1<IdentityColumnInfo> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.IdentityColumnInfoTable { get; }
    private ISequentialValueList`1<IndexType> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.IndexTypeTable { get; }
    private ISequentialValueList`1<int> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.IntTable { get; }
    private ISequentialValueList`1<IPassword> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.PasswordTable { get; }
    private ISequentialValueList`1<string> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.StringTable { get; }
    private ISequentialValueList`1<StatisticsType> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.StatisticsTypeTable { get; }
    private MetadataSerializer(ISerializationFilter filter);
    public static ISerializationContext Serialize(IServer server, ISerializationFilter filter);
    private int SerializeMetadataObject(IMetadataObject metadataObject);
    private int GetMetadataObjectId(IMetadataObject metadataObject);
    private void ProcessMetadataObjectDefinition(IMetadataObject metadataObject);
    private TypeDataTable GetDataTable(MetadataTypeInfo typeInfo);
    public sealed virtual int RegisterValue(bool value);
    public sealed virtual int RegisterValue(byte value);
    public sealed virtual int RegisterValue(Byte[] value);
    public sealed virtual int RegisterValue(CollationInfo value);
    public sealed virtual int RegisterValue(ComputedColumnInfo value);
    public sealed virtual int RegisterValue(double value);
    public sealed virtual int RegisterValue(DatabaseCompatibilityLevel value);
    public sealed virtual int RegisterValue(ActivationOrder value);
    public sealed virtual int RegisterValue(ExecutionContextType value);
    public sealed virtual int RegisterValue(ForeignKeyAction value);
    public sealed virtual int RegisterValue(GridDensity value);
    public sealed virtual int RegisterValue(IdentityColumnInfo value);
    public sealed virtual int RegisterValue(DataTypeSpec value);
    public sealed virtual int RegisterValue(int value);
    public sealed virtual int RegisterValue(DatabasePermissionType value);
    public sealed virtual int RegisterValue(PermissionState value);
    public sealed virtual int RegisterValue(SynonymBaseType value);
    public sealed virtual int RegisterValue(LoginType value);
    public sealed virtual int RegisterValue(IndexType value);
    public sealed virtual int RegisterValue(IPassword value);
    public sealed virtual int RegisterValue(SortOrder value);
    public sealed virtual int RegisterValue(StatisticsType value);
    public sealed virtual int RegisterValue(string value);
    public sealed virtual int RegisterValue(TabularType value);
    public sealed virtual int RegisterValue(ITriggerEventTypeSet value);
    public sealed virtual int RegisterValue(UserType value);
    public sealed virtual int RegisterValue(IMetadataObject metadataObject, IMetadataObject parentObject, bool isChild);
    public sealed virtual int RegisterValue(IMetadataCollection`1<T> collection, IMetadataObject parentObject, bool isChild);
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_RootObjectId();
    private sealed virtual override int Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_ObjectCount();
    private sealed virtual override IEnumerable`1<TypeDataTable> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_DataTables();
    private sealed virtual override ISequentialValueList`1<Byte[]> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_ByteArrayTable();
    private sealed virtual override ISequentialValueList`1<Int32[]> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_CollectionIdTable();
    private sealed virtual override ISequentialValueList`1<CollationInfo> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_CollationInfoTable();
    private sealed virtual override ISequentialValueList`1<ComputedColumnInfo> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_ComputedColumnInfoTable();
    private sealed virtual override ISequentialValueList`1<DataTypeSpec> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_DataTypeSpecTable();
    private sealed virtual override ISequentialValueList`1<double> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_DoubleTable();
    private sealed virtual override ISequentialValueList`1<GridDensity> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_GridDensityTable();
    private sealed virtual override ISequentialValueList`1<IdentityColumnInfo> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_IdentityColumnInfoTable();
    private sealed virtual override ISequentialValueList`1<IndexType> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_IndexTypeTable();
    private sealed virtual override ISequentialValueList`1<int> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_IntTable();
    private sealed virtual override ISequentialValueList`1<IPassword> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_PasswordTable();
    private sealed virtual override ISequentialValueList`1<string> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_StringTable();
    private sealed virtual override ISequentialValueList`1<StatisticsType> Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.ISerializationContext.get_StatisticsTypeTable();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.MetadataSerializerCore`1 : object {
    private ISerializationHandler`1<TId> handler;
    private ISerializationFilter filter;
    private SerializationVisitor serializationVisitor;
    public SerializationVisitor SerializationVisitor { get; }
    public MetadataSerializerCore`1(ISerializationHandler`1<TId> handler, ISerializationFilter filter, SerializationOptions options);
    public SerializationVisitor get_SerializationVisitor();
    public SerializationInfo GetSerializationInfo(IMetadataObject obj);
    public DataRow`1<TId> GetMetadataObjectData(IMetadataObject obj);
    public TId[] GetMetadataCollectionData(IMetadataCollection`1<T> obj, IMetadataObject parentObj, bool isChild);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.PropertyInfo : object {
    private Category category;
    public string Name;
    public Type PropertyType;
    public bool IsMetadataReference { get; }
    public bool IsMetadataCollection { get; }
    public bool IsMetadataOrderedCollection { get; }
    private PropertyInfo(string name, Type propertyType, Category category);
    public bool get_IsMetadataReference();
    public bool get_IsMetadataCollection();
    public bool get_IsMetadataOrderedCollection();
    public static PropertyInfo Primitive(string name, Type propertyType);
    public static PropertyInfo Enum(string name, Type propertyType);
    public static PropertyInfo Reference(string name, Type propertyType);
    public static PropertyInfo MetadataReference(string name, Type propertyType);
    public static PropertyInfo MetadataCollection(string name, Type propertyType);
    public static PropertyInfo MetadataOrderedCollection(string name, Type propertyType);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.SequentialValueList`1 : object {
    private IList`1<T> data;
    public int Count { get; }
    public SequentialValueList`1(IList`1<T> data);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.SerializationFilter : object {
    private Predicate`1<IDatabase> databaseFilter;
    private Predicate`1<ILogin> loginFilter;
    private Predicate`1<ISchema> schemaFilter;
    private Predicate`1<IUser> userFilter;
    public Predicate`1<IDatabase> DatabaseFilter { get; public set; }
    public Predicate`1<ILogin> LoginFilter { get; public set; }
    public Predicate`1<ISchema> SchemaFilter { get; public set; }
    public Predicate`1<IUser> UserFilter { get; public set; }
    public Predicate`1<IDatabase> get_DatabaseFilter();
    public void set_DatabaseFilter(Predicate`1<IDatabase> value);
    public Predicate`1<ILogin> get_LoginFilter();
    public void set_LoginFilter(Predicate`1<ILogin> value);
    public Predicate`1<ISchema> get_SchemaFilter();
    public void set_SchemaFilter(Predicate`1<ISchema> value);
    public Predicate`1<IUser> get_UserFilter();
    public void set_UserFilter(Predicate`1<IUser> value);
    public sealed virtual bool IsIncluded(IMetadataObject metadataObject);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IBuiltInFunction builtInFunction);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IJsonNullQualifier jsonNullQualifier);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ICheckConstraint checkConstraint);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IClrDataType clrDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ICollation collation);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IColumn column);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ICursorDataType cursorDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ICursorParameter cursorParameter);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ICursorVariable cursorVariable);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IDatabasePermission databasePermission);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IDatePart datePart);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IDefaultConstraint defaultConstraint);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IDmlTrigger dmlTrigger);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IExecutionContext executionContext);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IForeignKeyColumn foreignKeyColumn);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IForeignKeyConstraint foreignKeyConstraint);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IPrimaryKeyConstraint primaryKeyConstraint);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IIndexedColumn indexedColumn);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IRelationalIndex relationalIndex);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IScalarExpression scalarExpression);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IScalarDataType scalarDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IScalarParameter scalarParameter);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IScalarVariable scalarVariable);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ISpatialIndex spatialIndex);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IStatistics statistics);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ISystemClrDataType systemClrDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ISystemDataType systemDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ITableDataType tableDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ITableParameter tableParameter);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(ITableVariable tableVariable);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IUdtDataMember udtDataMember);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IUdtMethod udtMethod);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IUniqueConstraint uniqueConstraint);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IVirtualTable virtualTable);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IVoidDataType voidDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IXmlDataTypeMethod xmlDataTypeMethod);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IXmlDataTypeTableMethod xmlDataTypeMethod);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IXmlDataType xmlDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IXmlIndex xmlIndex);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IMetadataObjectVisitor<System.Boolean>.Visit(IIsJsonValueType isJsonValueType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseObjectVisitor<System.Boolean>.Visit(IServer server);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObjectVisitor<System.Boolean>.Visit(ICredential credential);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObjectVisitor<System.Boolean>.Visit(IDatabase database);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObjectVisitor<System.Boolean>.Visit(ILogin login);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IServerOwnedObjectVisitor<System.Boolean>.Visit(IServerDdlTrigger serverDdlTrigger);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(IApplicationRole applicationRole);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(IAsymmetricKey assymetricKey);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(ICertificate certificate);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(IDatabaseDdlTrigger databaseDdlTrigger);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(IDatabaseRole databaseRole);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(IFileGroup fileGroup);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(IPartitionScheme partitionScheme);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(ISchema schema);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabaseOwnedObjectVisitor<System.Boolean>.Visit(IUser user);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IExtendedStoredProcedure extendedStoredProcedure);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IScalarValuedFunction scalarValuedFunction);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IStoredProcedure storedProcedure);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(ISynonym synonym);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(ITable table);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(ITableValuedFunction tableValuedFunction);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IUserDefinedAggregate userDefinedAggregate);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IUserDefinedClrType userDefinedClrType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IUserDefinedDataType userDefinedDataType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IUserDefinedTableType userDefinedTableType);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Metadata.ISchemaOwnedObjectVisitor<System.Boolean>.Visit(IView view);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.SerializationIdGenerator : MetadataIdGenerator {
    private Dictionary`2<IMetadataObject, IMetadataObject> parentMap;
    private Func`2<IMetadataObject, MetadataObjectSelector> objectSelector;
    public SerializationIdGenerator(Dictionary`2<IMetadataObject, IMetadataObject> parentMap, Func`2<IMetadataObject, MetadataObjectSelector> objectSelector);
    public virtual MetadataObjectSelector GetObjectSelector(IMetadataObject obj);
    protected virtual IMetadataObject GetParent(IMetadataObject obj);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.SerializationInfo : object {
    public MetadataTypeInfo TypeInfo { get; }
    public abstract virtual MetadataTypeInfo get_TypeInfo();
    public abstract virtual TId[] GetObjectData(ISerializationHandler`1<TId> serializer, IMetadataObject obj);
}
[FlagsAttribute]
internal enum Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.SerializationOptions : Enum {
    public int value__;
    public static SerializationOptions None;
    public static SerializationOptions ExcludeServerName;
    public static SerializationOptions ExcludeText;
}
internal static class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.SerializationUtils : object {
    public static byte GetBitLength(int n);
    public static byte GetBitLength(UInt32 n);
    public static byte GetDigitCount(int n);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.SerializationVisitor : object {
    private ApplicationRoleSerializationInfo applicationRoleSerializationInfo;
    private AsymmetricKeySerializationInfo asymmetricKeySerializationInfo;
    private CertificateSerializationInfo certificateSerializationInfo;
    private CheckConstraintSerializationInfo checkConstraintSerializationInfo;
    private ClrDataTypeSerializationInfo clrDataTypeSerializationInfo;
    private CollationSerializationInfo collationSerializationInfo;
    private ColumnSerializationInfo columnSerializationInfo;
    private CredentialSerializationInfo credentialSerializationInfo;
    private CursorDataTypeSerializationInfo cursorDataTypeSerializationInfo;
    private CursorParameterSerializationInfo cursorParameterSerializationInfo;
    private CursorVariableSerializationInfo cursorVariableSerializationInfo;
    private DatabaseSerializationInfo databaseSerializationInfo;
    private DatabaseDdlTriggerSerializationInfo databaseDdlTriggerSerializationInfo;
    private DatabasePermissionSerializationInfo databasePermissionSerializationInfo;
    private DatabaseRoleSerializationInfo databaseRoleSerializationInfo;
    private DefaultConstraintSerializationInfo defaultConstraintSerializationInfo;
    private DmlTriggerSerializationInfo dmlTriggerSerializationInfo;
    private ExecutionContextSerializationInfo executionContextSerializationInfo;
    private ExtendedStoredProcedureSerializationInfo extendedStoredProcedureSerializationInfo;
    private FileGroupSerializationInfo fileGroupSerializationInfo;
    private ForeignKeyColumnSerializationInfo foreignKeyColumnSerializationInfo;
    private ForeignKeyConstraintSerializationInfo foreignKeyConstraintSerializationInfo;
    private IndexedColumnSerializationInfo indexedColumnSerializationInfo;
    private LoginSerializationInfo loginSerializationInfo;
    private PartitionSchemeSerializationInfo partitionSchemeSerializationInfo;
    private PrimaryKeyConstraintSerializationInfo primaryKeyConstraintSerializationInfo;
    private RelationalIndexSerializationInfo relationalIndexSerializationInfo;
    private ScalarDataTypeSerializationInfo scalarDataTypeSerializationInfo;
    private ScalarParameterSerializationInfo scalarParameterSerializationInfo;
    private ScalarValuedFunctionSerializationInfo scalarValuedFunctionSerializationInfo;
    private ScalarVariableSerializationInfo scalarVariableSerializationInfo;
    private SchemaSerializationInfo schemaSerializationInfo;
    private ServerSerializationInfo serverSerializationInfo;
    private ServerDdlTriggerSerializationInfo serverDdlTriggerSerializationInfo;
    private SpatialIndexSerializationInfo spatialIndexSerializationInfo;
    private StatisticsSerializationInfo statisticsSerializationInfo;
    private StoredProcedureSerializationInfo storedProcedureSerializationInfo;
    private SynonymSerializationInfo synonymSerializationInfo;
    private SystemClrDataTypeSerializationInfo systemClrDataTypeSerializationInfo;
    private SystemDataTypeSerializationInfo systemDataTypeSerializationInfo;
    private TableSerializationInfo tableSerializationInfo;
    private TableDataTypeSerializationInfo tableDataTypeSerializationInfo;
    private TableParameterSerializationInfo tableParameterSerializationInfo;
    private TableValuedFunctionSerializationInfo tableValuedFunctionSerializationInfo;
    private TableVariableSerializationInfo tableVariableSerializationInfo;
    private UdtDataMemberSerializationInfo udtDataMemberSerializationInfo;
    private UdtMethodSerializationInfo udtMethodSerializationInfo;
    private UniqueConstraintSerializationInfo uniqueConstraintSerializationInfo;
    private UserSerializationInfo userSerializationInfo;
    private UserDefinedAggregateSerializationInfo userDefinedAggregateSerializationInfo;
    private UserDefinedClrTypeSerializationInfo userDefinedClrTypeSerializationInfo;
    private UserDefinedDataTypeSerializationInfo userDefinedDataTypeSerializationInfo;
    private UserDefinedTableTypeSerializationInfo userDefinedTableTypeSerializationInfo;
    private ViewSerializationInfo viewSerializationInfo;
    private VoidDataTypeSerializationInfo voidDataTypeSerializationInfo;
    private XmlDataTypeSerializationInfo xmlDataTypeSerializationInfo;
    private XmlIndexSerializationInfo xmlIndexSerializationInfo;
    public SerializationVisitor(SerializationOptions options);
    public sealed virtual SerializationInfo Visit(IBuiltInFunction obj);
    public sealed virtual SerializationInfo Visit(ICheckConstraint obj);
    public sealed virtual SerializationInfo Visit(IClrDataType obj);
    public sealed virtual SerializationInfo Visit(ICollation obj);
    public sealed virtual SerializationInfo Visit(IColumn obj);
    public sealed virtual SerializationInfo Visit(ICursorDataType obj);
    public sealed virtual SerializationInfo Visit(ICursorParameter obj);
    public sealed virtual SerializationInfo Visit(ICursorVariable obj);
    public sealed virtual SerializationInfo Visit(IDatabasePermission obj);
    public sealed virtual SerializationInfo Visit(IDatePart obj);
    public sealed virtual SerializationInfo Visit(IIsJsonValueType obj);
    public sealed virtual SerializationInfo Visit(IDefaultConstraint obj);
    public sealed virtual SerializationInfo Visit(IDmlTrigger obj);
    public sealed virtual SerializationInfo Visit(IExecutionContext obj);
    public sealed virtual SerializationInfo Visit(IForeignKeyColumn obj);
    public sealed virtual SerializationInfo Visit(IForeignKeyConstraint obj);
    public sealed virtual SerializationInfo Visit(IIndexedColumn obj);
    public sealed virtual SerializationInfo Visit(IJsonNullQualifier obj);
    public sealed virtual SerializationInfo Visit(IPrimaryKeyConstraint obj);
    public sealed virtual SerializationInfo Visit(IRelationalIndex obj);
    public sealed virtual SerializationInfo Visit(IScalarExpression obj);
    public sealed virtual SerializationInfo Visit(IScalarDataType obj);
    public sealed virtual SerializationInfo Visit(IScalarParameter obj);
    public sealed virtual SerializationInfo Visit(IScalarVariable obj);
    public sealed virtual SerializationInfo Visit(ISpatialIndex obj);
    public sealed virtual SerializationInfo Visit(IStatistics obj);
    public sealed virtual SerializationInfo Visit(ISystemDataType obj);
    public sealed virtual SerializationInfo Visit(ISystemClrDataType obj);
    public sealed virtual SerializationInfo Visit(ITableDataType obj);
    public sealed virtual SerializationInfo Visit(ITableParameter obj);
    public sealed virtual SerializationInfo Visit(ITableVariable obj);
    public sealed virtual SerializationInfo Visit(IUdtDataMember obj);
    public sealed virtual SerializationInfo Visit(IUdtMethod obj);
    public sealed virtual SerializationInfo Visit(IUniqueConstraint obj);
    public sealed virtual SerializationInfo Visit(IVirtualTable obj);
    public sealed virtual SerializationInfo Visit(IVoidDataType obj);
    public sealed virtual SerializationInfo Visit(IXmlDataType obj);
    public sealed virtual SerializationInfo Visit(IXmlDataTypeMethod obj);
    public sealed virtual SerializationInfo Visit(IXmlDataTypeTableMethod obj);
    public sealed virtual SerializationInfo Visit(IXmlIndex obj);
    public sealed virtual SerializationInfo Visit(IServer obj);
    public sealed virtual SerializationInfo Visit(ICredential obj);
    public sealed virtual SerializationInfo Visit(IDatabase obj);
    public sealed virtual SerializationInfo Visit(ILogin obj);
    public sealed virtual SerializationInfo Visit(IServerDdlTrigger obj);
    public sealed virtual SerializationInfo Visit(IApplicationRole obj);
    public sealed virtual SerializationInfo Visit(IAsymmetricKey obj);
    public sealed virtual SerializationInfo Visit(ICertificate obj);
    public sealed virtual SerializationInfo Visit(IDatabaseDdlTrigger obj);
    public sealed virtual SerializationInfo Visit(IDatabaseRole obj);
    public sealed virtual SerializationInfo Visit(IFileGroup obj);
    public sealed virtual SerializationInfo Visit(IPartitionScheme obj);
    public sealed virtual SerializationInfo Visit(ISchema obj);
    public sealed virtual SerializationInfo Visit(IUser obj);
    public sealed virtual SerializationInfo Visit(IExtendedStoredProcedure obj);
    public sealed virtual SerializationInfo Visit(IScalarValuedFunction obj);
    public sealed virtual SerializationInfo Visit(IStoredProcedure obj);
    public sealed virtual SerializationInfo Visit(ISynonym obj);
    public sealed virtual SerializationInfo Visit(ITable obj);
    public sealed virtual SerializationInfo Visit(ITableValuedFunction obj);
    public sealed virtual SerializationInfo Visit(IUserDefinedAggregate obj);
    public sealed virtual SerializationInfo Visit(IUserDefinedClrType obj);
    public sealed virtual SerializationInfo Visit(IUserDefinedDataType obj);
    public sealed virtual SerializationInfo Visit(IUserDefinedTableType obj);
    public sealed virtual SerializationInfo Visit(IView obj);
}
internal static class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.Serializer : object {
    public static void SerializeToCode(IServer server, SerializationFilter filter, CodeGeneratorSettings settings);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.TypeBucket : object {
    private int id;
    private string baseName;
    private string typeName;
    public int Id { get; }
    public string Name { get; }
    public string BaseName { get; }
    protected TypeBucket(string name, int id);
    public abstract virtual void GenerateType(TypeGenerator typeGenerator, int rowId);
    public abstract virtual IEnumerable`1<UInt32> GetPackedValues(int rowId);
    public sealed virtual int get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_BaseName();
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.TypeCompactor : object {
    public abstract virtual TypeBucket RegisterDataRow(int rowId);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.TypeDataTable : object {
    private MetadataTypeInfo typeInfo;
    private string name;
    private SortedList`2<int, Row> rows;
    public string Name { get; }
    public MetadataTypeInfo TypeInfo { get; }
    public IEnumerable`1<Row> Rows { get; }
    public TypeDataTable(MetadataTypeInfo typeInfo);
    public string get_Name();
    public MetadataTypeInfo get_TypeInfo();
    public IEnumerable`1<Row> get_Rows();
    public void AddRow(int id, Int32[] values);
    public Row GetRowById(int id);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.TypeGenerator : object {
    public abstract virtual void AddFinalProperty(MetadataPropertyInfo propertyInfo, int value);
    public abstract virtual void AddIndirectProperty(MetadataPropertyInfo propertyInfo, int fieldNumber, int startOffset, int length);
}
internal static class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlConfig : object {
    public static XmlNamespace MM;
    public static XmlQualifiedNameEx RootElement;
    public static XmlQualifiedNameEx ReferenceElement;
    public static XmlQualifiedNameEx KeyAttribute;
    public static XmlQualifiedNameEx RefAttribute;
    public static XmlNamespace RE;
    public static XmlQualifiedNameEx ParentProperty;
    public static XmlQualifiedNameEx TextProperty;
    public static XmlQualifiedNameEx IsPersistedProperty;
    public static XmlQualifiedNameEx SeedProperty;
    public static XmlQualifiedNameEx IncrementProperty;
    public static XmlQualifiedNameEx NotForReplicationProperty;
    public static XmlQualifiedNameEx IApplicationRole;
    public static XmlQualifiedNameEx IApplicationRole_Database;
    public static XmlQualifiedNameEx IApplicationRole_DefaultSchema;
    public static XmlQualifiedNameEx IApplicationRole_IsSystemObject;
    public static XmlQualifiedNameEx IApplicationRole_MemberOfRoles;
    public static XmlQualifiedNameEx IApplicationRole_Name;
    public static XmlQualifiedNameEx IApplicationRole_Permissions;
    public static XmlQualifiedNameEx IAsymmetricKey;
    public static XmlQualifiedNameEx IAsymmetricKey_Database;
    public static XmlQualifiedNameEx IAsymmetricKey_IsSystemObject;
    public static XmlQualifiedNameEx IAsymmetricKey_Name;
    public static XmlQualifiedNameEx ICertificate;
    public static XmlQualifiedNameEx ICertificate_Database;
    public static XmlQualifiedNameEx ICertificate_IsSystemObject;
    public static XmlQualifiedNameEx ICertificate_Name;
    public static XmlQualifiedNameEx ICheckConstraint;
    public static XmlQualifiedNameEx ICheckConstraint_IsChecked;
    public static XmlQualifiedNameEx ICheckConstraint_IsEnabled;
    public static XmlQualifiedNameEx ICheckConstraint_IsSystemNamed;
    public static XmlQualifiedNameEx ICheckConstraint_Name;
    public static XmlQualifiedNameEx ICheckConstraint_NotForReplication;
    public static XmlQualifiedNameEx ICheckConstraint_Parent;
    public static XmlQualifiedNameEx ICheckConstraint_Text;
    public static XmlQualifiedNameEx IClrDataType;
    public static XmlQualifiedNameEx IClrDataType_Name;
    public static XmlQualifiedNameEx ICollation;
    public static XmlQualifiedNameEx ICollation_Name;
    public static XmlQualifiedNameEx IColumn;
    public static XmlQualifiedNameEx IColumn_Collation;
    public static XmlQualifiedNameEx IColumn_ComputedColumnInfo;
    public static XmlQualifiedNameEx IColumn_DataType;
    public static XmlQualifiedNameEx IColumn_DefaultValue;
    public static XmlQualifiedNameEx IColumn_IdentityColumnInfo;
    public static XmlQualifiedNameEx IColumn_InPrimaryKey;
    public static XmlQualifiedNameEx IColumn_IsColumnSet;
    public static XmlQualifiedNameEx IColumn_IsGeneratedAlwaysAsRowEnd;
    public static XmlQualifiedNameEx IColumn_IsGeneratedAlwaysAsRowStart;
    public static XmlQualifiedNameEx IColumn_IsGeneratedAlwaysAsSequenceNumberEnd;
    public static XmlQualifiedNameEx IColumn_IsGeneratedAlwaysAsSequenceNumberStart;
    public static XmlQualifiedNameEx IColumn_IsGeneratedAlwaysAsTransactionIdEnd;
    public static XmlQualifiedNameEx IColumn_IsGeneratedAlwaysAsTransactionIdStart;
    public static XmlQualifiedNameEx IColumn_IsSparse;
    public static XmlQualifiedNameEx IColumn_Name;
    public static XmlQualifiedNameEx IColumn_Nullable;
    public static XmlQualifiedNameEx IColumn_Parent;
    public static XmlQualifiedNameEx IColumn_RowGuidCol;
    public static XmlQualifiedNameEx ICredential;
    public static XmlQualifiedNameEx ICredential_IsSystemObject;
    public static XmlQualifiedNameEx ICredential_Name;
    public static XmlQualifiedNameEx ICredential_Server;
    public static XmlQualifiedNameEx ICursorDataType;
    public static XmlQualifiedNameEx ICursorParameter;
    public static XmlQualifiedNameEx ICursorParameter_Name;
    public static XmlQualifiedNameEx ICursorVariable;
    public static XmlQualifiedNameEx ICursorVariable_Name;
    public static XmlQualifiedNameEx IDatabase;
    public static XmlQualifiedNameEx IDatabase_ApplicationRoles;
    public static XmlQualifiedNameEx IDatabase_AsymmetricKeys;
    public static XmlQualifiedNameEx IDatabase_Certificates;
    public static XmlQualifiedNameEx IDatabase_CollationInfo;
    public static XmlQualifiedNameEx IDatabase_CompatibilityLevel;
    public static XmlQualifiedNameEx IDatabase_DefaultSchemaName;
    public static XmlQualifiedNameEx IDatabase_IsSystemObject;
    public static XmlQualifiedNameEx IDatabase_Name;
    public static XmlQualifiedNameEx IDatabase_Owner;
    public static XmlQualifiedNameEx IDatabase_Roles;
    public static XmlQualifiedNameEx IDatabase_Schemas;
    public static XmlQualifiedNameEx IDatabase_Server;
    public static XmlQualifiedNameEx IDatabase_Triggers;
    public static XmlQualifiedNameEx IDatabase_Users;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_BodyText;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_Database;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_DatabaseDdlEvents;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_ExecutionContext;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_IsEnabled;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_IsEncrypted;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_IsSqlClr;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_IsSystemObject;
    public static XmlQualifiedNameEx IDatabaseDdlTrigger_Name;
    public static XmlQualifiedNameEx IDatabasePermission;
    public static XmlQualifiedNameEx IDatabasePermission_DatabasePrincipal;
    public static XmlQualifiedNameEx IDatabasePermission_Grantor;
    public static XmlQualifiedNameEx IDatabasePermission_PermissionState;
    public static XmlQualifiedNameEx IDatabasePermission_PermissionType;
    public static XmlQualifiedNameEx IDatabasePermission_TargetObject;
    public static XmlQualifiedNameEx IDatabaseRole;
    public static XmlQualifiedNameEx IDatabaseRole_Database;
    public static XmlQualifiedNameEx IDatabaseRole_IsFixedRole;
    public static XmlQualifiedNameEx IDatabaseRole_IsSystemObject;
    public static XmlQualifiedNameEx IDatabaseRole_MemberOfRoles;
    public static XmlQualifiedNameEx IDatabaseRole_Name;
    public static XmlQualifiedNameEx IDatabaseRole_Owner;
    public static XmlQualifiedNameEx IDatabaseRole_Permissions;
    public static XmlQualifiedNameEx IDefaultConstraint;
    public static XmlQualifiedNameEx IDefaultConstraint_IsSystemNamed;
    public static XmlQualifiedNameEx IDefaultConstraint_Name;
    public static XmlQualifiedNameEx IDefaultConstraint_Parent;
    public static XmlQualifiedNameEx IDefaultConstraint_Text;
    public static XmlQualifiedNameEx IDmlTrigger;
    public static XmlQualifiedNameEx IDmlTrigger_BodyText;
    public static XmlQualifiedNameEx IDmlTrigger_Delete;
    public static XmlQualifiedNameEx IDmlTrigger_DeleteActivationOrder;
    public static XmlQualifiedNameEx IDmlTrigger_ExecutionContext;
    public static XmlQualifiedNameEx IDmlTrigger_Insert;
    public static XmlQualifiedNameEx IDmlTrigger_InsertActivationOrder;
    public static XmlQualifiedNameEx IDmlTrigger_InsteadOf;
    public static XmlQualifiedNameEx IDmlTrigger_IsEnabled;
    public static XmlQualifiedNameEx IDmlTrigger_IsEncrypted;
    public static XmlQualifiedNameEx IDmlTrigger_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx IDmlTrigger_IsSqlClr;
    public static XmlQualifiedNameEx IDmlTrigger_Name;
    public static XmlQualifiedNameEx IDmlTrigger_NotForReplication;
    public static XmlQualifiedNameEx IDmlTrigger_Parent;
    public static XmlQualifiedNameEx IDmlTrigger_Update;
    public static XmlQualifiedNameEx IDmlTrigger_UpdateActivationOrder;
    public static XmlQualifiedNameEx IExecutionContext;
    public static XmlQualifiedNameEx IExecutionContext_ContextType;
    public static XmlQualifiedNameEx IExecutionContext_Login;
    public static XmlQualifiedNameEx IExecutionContext_User;
    public static XmlQualifiedNameEx IExtendedStoredProcedure;
    public static XmlQualifiedNameEx IExtendedStoredProcedure_ExecutionContext;
    public static XmlQualifiedNameEx IExtendedStoredProcedure_IsEncrypted;
    public static XmlQualifiedNameEx IExtendedStoredProcedure_IsSystemObject;
    public static XmlQualifiedNameEx IExtendedStoredProcedure_Name;
    public static XmlQualifiedNameEx IExtendedStoredProcedure_Parameters;
    public static XmlQualifiedNameEx IExtendedStoredProcedure_ReturnType;
    public static XmlQualifiedNameEx IExtendedStoredProcedure_Schema;
    public static XmlQualifiedNameEx IFileGroup;
    public static XmlQualifiedNameEx IFileGroup_Database;
    public static XmlQualifiedNameEx IFileGroup_IsDefault;
    public static XmlQualifiedNameEx IFileGroup_IsFileStream;
    public static XmlQualifiedNameEx IFileGroup_IsReadOnly;
    public static XmlQualifiedNameEx IFileGroup_IsSystemObject;
    public static XmlQualifiedNameEx IFileGroup_Name;
    public static XmlQualifiedNameEx IForeignKeyColumn;
    public static XmlQualifiedNameEx IForeignKeyColumn_ReferencedColumn;
    public static XmlQualifiedNameEx IForeignKeyColumn_ReferencingColumn;
    public static XmlQualifiedNameEx IForeignKeyConstraint;
    public static XmlQualifiedNameEx IForeignKeyConstraint_Columns;
    public static XmlQualifiedNameEx IForeignKeyConstraint_DeleteAction;
    public static XmlQualifiedNameEx IForeignKeyConstraint_IsChecked;
    public static XmlQualifiedNameEx IForeignKeyConstraint_IsEnabled;
    public static XmlQualifiedNameEx IForeignKeyConstraint_IsSystemNamed;
    public static XmlQualifiedNameEx IForeignKeyConstraint_Name;
    public static XmlQualifiedNameEx IForeignKeyConstraint_NotForReplication;
    public static XmlQualifiedNameEx IForeignKeyConstraint_Parent;
    public static XmlQualifiedNameEx IForeignKeyConstraint_ReferencedTable;
    public static XmlQualifiedNameEx IForeignKeyConstraint_UpdateAction;
    public static XmlQualifiedNameEx IIndexedColumn;
    public static XmlQualifiedNameEx IIndexedColumn_IsIncluded;
    public static XmlQualifiedNameEx IIndexedColumn_ReferencedColumn;
    public static XmlQualifiedNameEx IIndexedColumn_SortOrder;
    public static XmlQualifiedNameEx ILogin;
    public static XmlQualifiedNameEx ILogin_AsymmetricKey;
    public static XmlQualifiedNameEx ILogin_Certificate;
    public static XmlQualifiedNameEx ILogin_Credential;
    public static XmlQualifiedNameEx ILogin_DefaultDatabase;
    public static XmlQualifiedNameEx ILogin_IsSystemObject;
    public static XmlQualifiedNameEx ILogin_Language;
    public static XmlQualifiedNameEx ILogin_LoginType;
    public static XmlQualifiedNameEx ILogin_Name;
    public static XmlQualifiedNameEx ILogin_Password;
    public static XmlQualifiedNameEx ILogin_Server;
    public static XmlQualifiedNameEx ILogin_Sid;
    public static XmlQualifiedNameEx IPartitionScheme;
    public static XmlQualifiedNameEx IPartitionScheme_Database;
    public static XmlQualifiedNameEx IPartitionScheme_FileGroups;
    public static XmlQualifiedNameEx IPartitionScheme_IsSystemObject;
    public static XmlQualifiedNameEx IPartitionScheme_Name;
    public static XmlQualifiedNameEx IPrimaryKeyConstraint;
    public static XmlQualifiedNameEx IPrimaryKeyConstraint_AssociatedIndex;
    public static XmlQualifiedNameEx IPrimaryKeyConstraint_IsSystemNamed;
    public static XmlQualifiedNameEx IPrimaryKeyConstraint_Name;
    public static XmlQualifiedNameEx IPrimaryKeyConstraint_Parent;
    public static XmlQualifiedNameEx IRelationalIndex;
    public static XmlQualifiedNameEx IRelationalIndex_CompactLargeObjects;
    public static XmlQualifiedNameEx IRelationalIndex_DisallowPageLocks;
    public static XmlQualifiedNameEx IRelationalIndex_DisallowRowLocks;
    public static XmlQualifiedNameEx IRelationalIndex_FileGroup;
    public static XmlQualifiedNameEx IRelationalIndex_FileStreamFileGroup;
    public static XmlQualifiedNameEx IRelationalIndex_FileStreamPartitionScheme;
    public static XmlQualifiedNameEx IRelationalIndex_FillFactor;
    public static XmlQualifiedNameEx IRelationalIndex_FilterDefinition;
    public static XmlQualifiedNameEx IRelationalIndex_IgnoreDuplicateKeys;
    public static XmlQualifiedNameEx IRelationalIndex_IndexKey;
    public static XmlQualifiedNameEx IRelationalIndex_IndexedColumns;
    public static XmlQualifiedNameEx IRelationalIndex_IsClustered;
    public static XmlQualifiedNameEx IRelationalIndex_IsDisabled;
    public static XmlQualifiedNameEx IRelationalIndex_IsSystemNamed;
    public static XmlQualifiedNameEx IRelationalIndex_IsUnique;
    public static XmlQualifiedNameEx IRelationalIndex_Name;
    public static XmlQualifiedNameEx IRelationalIndex_NoAutomaticRecomputation;
    public static XmlQualifiedNameEx IRelationalIndex_PadIndex;
    public static XmlQualifiedNameEx IRelationalIndex_Parent;
    public static XmlQualifiedNameEx IRelationalIndex_PartitionScheme;
    public static XmlQualifiedNameEx IScalarDataType;
    public static XmlQualifiedNameEx IScalarDataType_Name;
    public static XmlQualifiedNameEx IScalarParameter;
    public static XmlQualifiedNameEx IScalarParameter_DataType;
    public static XmlQualifiedNameEx IScalarParameter_DefaultValue;
    public static XmlQualifiedNameEx IScalarParameter_IsOutput;
    public static XmlQualifiedNameEx IScalarParameter_Name;
    public static XmlQualifiedNameEx IScalarParameter_Nullable;
    public static XmlQualifiedNameEx IScalarValuedFunction;
    public static XmlQualifiedNameEx IScalarValuedFunction_BodyText;
    public static XmlQualifiedNameEx IScalarValuedFunction_DataType;
    public static XmlQualifiedNameEx IScalarValuedFunction_ExecutionContext;
    public static XmlQualifiedNameEx IScalarValuedFunction_IsEncrypted;
    public static XmlQualifiedNameEx IScalarValuedFunction_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx IScalarValuedFunction_IsSchemaBound;
    public static XmlQualifiedNameEx IScalarValuedFunction_IsSqlClr;
    public static XmlQualifiedNameEx IScalarValuedFunction_IsSystemObject;
    public static XmlQualifiedNameEx IScalarValuedFunction_Name;
    public static XmlQualifiedNameEx IScalarValuedFunction_Nullable;
    public static XmlQualifiedNameEx IScalarValuedFunction_Parameters;
    public static XmlQualifiedNameEx IScalarValuedFunction_ReturnsNullOnNullInput;
    public static XmlQualifiedNameEx IScalarValuedFunction_Schema;
    public static XmlQualifiedNameEx IScalarVariable;
    public static XmlQualifiedNameEx IScalarVariable_DataType;
    public static XmlQualifiedNameEx IScalarVariable_Name;
    public static XmlQualifiedNameEx IScalarVariable_Nullable;
    public static XmlQualifiedNameEx ISchema;
    public static XmlQualifiedNameEx ISchema_Database;
    public static XmlQualifiedNameEx ISchema_ExtendedStoredProcedures;
    public static XmlQualifiedNameEx ISchema_IsSystemObject;
    public static XmlQualifiedNameEx ISchema_Name;
    public static XmlQualifiedNameEx ISchema_Owner;
    public static XmlQualifiedNameEx ISchema_ScalarValuedFunctions;
    public static XmlQualifiedNameEx ISchema_StoredProcedures;
    public static XmlQualifiedNameEx ISchema_Synonyms;
    public static XmlQualifiedNameEx ISchema_TableValuedFunctions;
    public static XmlQualifiedNameEx ISchema_Tables;
    public static XmlQualifiedNameEx ISchema_UserDefinedAggregates;
    public static XmlQualifiedNameEx ISchema_UserDefinedClrTypes;
    public static XmlQualifiedNameEx ISchema_UserDefinedDataTypes;
    public static XmlQualifiedNameEx ISchema_UserDefinedTableTypes;
    public static XmlQualifiedNameEx ISchema_Views;
    public static XmlQualifiedNameEx IServer;
    public static XmlQualifiedNameEx IServer_CollationInfo;
    public static XmlQualifiedNameEx IServer_Credentials;
    public static XmlQualifiedNameEx IServer_Databases;
    public static XmlQualifiedNameEx IServer_IsSystemObject;
    public static XmlQualifiedNameEx IServer_Logins;
    public static XmlQualifiedNameEx IServer_Name;
    public static XmlQualifiedNameEx IServer_Triggers;
    public static XmlQualifiedNameEx IServerDdlTrigger;
    public static XmlQualifiedNameEx IServerDdlTrigger_BodyText;
    public static XmlQualifiedNameEx IServerDdlTrigger_ExecutionContext;
    public static XmlQualifiedNameEx IServerDdlTrigger_IsEnabled;
    public static XmlQualifiedNameEx IServerDdlTrigger_IsEncrypted;
    public static XmlQualifiedNameEx IServerDdlTrigger_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx IServerDdlTrigger_IsSqlClr;
    public static XmlQualifiedNameEx IServerDdlTrigger_IsSystemObject;
    public static XmlQualifiedNameEx IServerDdlTrigger_Name;
    public static XmlQualifiedNameEx IServerDdlTrigger_Server;
    public static XmlQualifiedNameEx IServerDdlTrigger_ServerDdlEvents;
    public static XmlQualifiedNameEx ISpatialIndex;
    public static XmlQualifiedNameEx ISpatialIndex_BoundingBoxXMax;
    public static XmlQualifiedNameEx ISpatialIndex_BoundingBoxXMin;
    public static XmlQualifiedNameEx ISpatialIndex_BoundingBoxYMax;
    public static XmlQualifiedNameEx ISpatialIndex_BoundingBoxYMin;
    public static XmlQualifiedNameEx ISpatialIndex_CellsPerObject;
    public static XmlQualifiedNameEx ISpatialIndex_DisallowPageLocks;
    public static XmlQualifiedNameEx ISpatialIndex_DisallowRowLocks;
    public static XmlQualifiedNameEx ISpatialIndex_FillFactor;
    public static XmlQualifiedNameEx ISpatialIndex_IgnoreDuplicateKeys;
    public static XmlQualifiedNameEx ISpatialIndex_IndexedColumn;
    public static XmlQualifiedNameEx ISpatialIndex_IsDisabled;
    public static XmlQualifiedNameEx ISpatialIndex_Level1Density;
    public static XmlQualifiedNameEx ISpatialIndex_Level2Density;
    public static XmlQualifiedNameEx ISpatialIndex_Level3Density;
    public static XmlQualifiedNameEx ISpatialIndex_Level4Density;
    public static XmlQualifiedNameEx ISpatialIndex_Name;
    public static XmlQualifiedNameEx ISpatialIndex_NoAutomaticRecomputation;
    public static XmlQualifiedNameEx ISpatialIndex_PadIndex;
    public static XmlQualifiedNameEx ISpatialIndex_Parent;
    public static XmlQualifiedNameEx IStatistics;
    public static XmlQualifiedNameEx IStatistics_Columns;
    public static XmlQualifiedNameEx IStatistics_FilterDefinition;
    public static XmlQualifiedNameEx IStatistics_Name;
    public static XmlQualifiedNameEx IStatistics_NoAutomaticRecomputation;
    public static XmlQualifiedNameEx IStatistics_Parent;
    public static XmlQualifiedNameEx IStatistics_Type;
    public static XmlQualifiedNameEx IStoredProcedure;
    public static XmlQualifiedNameEx IStoredProcedure_BodyText;
    public static XmlQualifiedNameEx IStoredProcedure_ExecutionContext;
    public static XmlQualifiedNameEx IStoredProcedure_ForReplication;
    public static XmlQualifiedNameEx IStoredProcedure_IsEncrypted;
    public static XmlQualifiedNameEx IStoredProcedure_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx IStoredProcedure_IsRecompiled;
    public static XmlQualifiedNameEx IStoredProcedure_IsSqlClr;
    public static XmlQualifiedNameEx IStoredProcedure_IsSystemObject;
    public static XmlQualifiedNameEx IStoredProcedure_Name;
    public static XmlQualifiedNameEx IStoredProcedure_Parameters;
    public static XmlQualifiedNameEx IStoredProcedure_Schema;
    public static XmlQualifiedNameEx IStoredProcedure_Startup;
    public static XmlQualifiedNameEx ISynonym;
    public static XmlQualifiedNameEx ISynonym_BaseObjectName;
    public static XmlQualifiedNameEx ISynonym_BaseType;
    public static XmlQualifiedNameEx ISynonym_IsSystemObject;
    public static XmlQualifiedNameEx ISynonym_Name;
    public static XmlQualifiedNameEx ISynonym_Schema;
    public static XmlQualifiedNameEx ISystemClrDataType;
    public static XmlQualifiedNameEx ISystemClrDataType_Length;
    public static XmlQualifiedNameEx ISystemClrDataType_NumericPrecision;
    public static XmlQualifiedNameEx ISystemClrDataType_NumericScale;
    public static XmlQualifiedNameEx ISystemClrDataType_TypeSpec;
    public static XmlQualifiedNameEx ISystemDataType;
    public static XmlQualifiedNameEx ISystemDataType_Length;
    public static XmlQualifiedNameEx ISystemDataType_NumericPrecision;
    public static XmlQualifiedNameEx ISystemDataType_NumericScale;
    public static XmlQualifiedNameEx ISystemDataType_TypeSpec;
    public static XmlQualifiedNameEx ITable;
    public static XmlQualifiedNameEx ITable_Columns;
    public static XmlQualifiedNameEx ITable_Constraints;
    public static XmlQualifiedNameEx ITable_Indexes;
    public static XmlQualifiedNameEx ITable_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx ITable_IsSystemObject;
    public static XmlQualifiedNameEx ITable_Name;
    public static XmlQualifiedNameEx ITable_Schema;
    public static XmlQualifiedNameEx ITable_Statistics;
    public static XmlQualifiedNameEx ITable_Triggers;
    public static XmlQualifiedNameEx ITableDataType;
    public static XmlQualifiedNameEx ITableDataType_Columns;
    public static XmlQualifiedNameEx ITableDataType_Constraints;
    public static XmlQualifiedNameEx ITableDataType_Indexes;
    public static XmlQualifiedNameEx ITableDataType_Name;
    public static XmlQualifiedNameEx ITableDataType_Statistics;
    public static XmlQualifiedNameEx ITableParameter;
    public static XmlQualifiedNameEx ITableParameter_DataType;
    public static XmlQualifiedNameEx ITableParameter_Name;
    public static XmlQualifiedNameEx ITableValuedFunction;
    public static XmlQualifiedNameEx ITableValuedFunction_BodyText;
    public static XmlQualifiedNameEx ITableValuedFunction_Columns;
    public static XmlQualifiedNameEx ITableValuedFunction_Constraints;
    public static XmlQualifiedNameEx ITableValuedFunction_ExecutionContext;
    public static XmlQualifiedNameEx ITableValuedFunction_Indexes;
    public static XmlQualifiedNameEx ITableValuedFunction_IsEncrypted;
    public static XmlQualifiedNameEx ITableValuedFunction_IsInline;
    public static XmlQualifiedNameEx ITableValuedFunction_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx ITableValuedFunction_IsSchemaBound;
    public static XmlQualifiedNameEx ITableValuedFunction_IsSqlClr;
    public static XmlQualifiedNameEx ITableValuedFunction_IsSystemObject;
    public static XmlQualifiedNameEx ITableValuedFunction_Name;
    public static XmlQualifiedNameEx ITableValuedFunction_Parameters;
    public static XmlQualifiedNameEx ITableValuedFunction_Schema;
    public static XmlQualifiedNameEx ITableValuedFunction_Statistics;
    public static XmlQualifiedNameEx ITableValuedFunction_TableVariableName;
    public static XmlQualifiedNameEx ITableVariable;
    public static XmlQualifiedNameEx ITableVariable_DataType;
    public static XmlQualifiedNameEx ITableVariable_Name;
    public static XmlQualifiedNameEx IUdtDataMember;
    public static XmlQualifiedNameEx IUdtDataMember_DataType;
    public static XmlQualifiedNameEx IUdtDataMember_IsStatic;
    public static XmlQualifiedNameEx IUdtDataMember_Name;
    public static XmlQualifiedNameEx IUdtDataMember_Nullable;
    public static XmlQualifiedNameEx IUdtDataMember_UserDefinedType;
    public static XmlQualifiedNameEx IUdtMethod;
    public static XmlQualifiedNameEx IUdtMethod_DataType;
    public static XmlQualifiedNameEx IUdtMethod_IsStatic;
    public static XmlQualifiedNameEx IUdtMethod_Name;
    public static XmlQualifiedNameEx IUdtMethod_Nullable;
    public static XmlQualifiedNameEx IUdtMethod_Parameters;
    public static XmlQualifiedNameEx IUdtMethod_UserDefinedType;
    public static XmlQualifiedNameEx IUniqueConstraint;
    public static XmlQualifiedNameEx IUniqueConstraint_AssociatedIndex;
    public static XmlQualifiedNameEx IUniqueConstraint_IsSystemNamed;
    public static XmlQualifiedNameEx IUniqueConstraint_Name;
    public static XmlQualifiedNameEx IUniqueConstraint_Parent;
    public static XmlQualifiedNameEx IUser;
    public static XmlQualifiedNameEx IUser_AsymmetricKey;
    public static XmlQualifiedNameEx IUser_Certificate;
    public static XmlQualifiedNameEx IUser_Database;
    public static XmlQualifiedNameEx IUser_DefaultSchema;
    public static XmlQualifiedNameEx IUser_IsSystemObject;
    public static XmlQualifiedNameEx IUser_Login;
    public static XmlQualifiedNameEx IUser_MemberOfRoles;
    public static XmlQualifiedNameEx IUser_Name;
    public static XmlQualifiedNameEx IUser_Password;
    public static XmlQualifiedNameEx IUser_Permissions;
    public static XmlQualifiedNameEx IUser_UserType;
    public static XmlQualifiedNameEx IUserDefinedAggregate;
    public static XmlQualifiedNameEx IUserDefinedAggregate_DataType;
    public static XmlQualifiedNameEx IUserDefinedAggregate_IsSystemObject;
    public static XmlQualifiedNameEx IUserDefinedAggregate_Name;
    public static XmlQualifiedNameEx IUserDefinedAggregate_Nullable;
    public static XmlQualifiedNameEx IUserDefinedAggregate_Parameters;
    public static XmlQualifiedNameEx IUserDefinedAggregate_Schema;
    public static XmlQualifiedNameEx IUserDefinedClrType;
    public static XmlQualifiedNameEx IUserDefinedClrType_AssemblyName;
    public static XmlQualifiedNameEx IUserDefinedClrType_ClassName;
    public static XmlQualifiedNameEx IUserDefinedClrType_DataMembers;
    public static XmlQualifiedNameEx IUserDefinedClrType_IsBinaryOrdered;
    public static XmlQualifiedNameEx IUserDefinedClrType_IsComVisible;
    public static XmlQualifiedNameEx IUserDefinedClrType_IsNullable;
    public static XmlQualifiedNameEx IUserDefinedClrType_IsSystemObject;
    public static XmlQualifiedNameEx IUserDefinedClrType_Methods;
    public static XmlQualifiedNameEx IUserDefinedClrType_Name;
    public static XmlQualifiedNameEx IUserDefinedClrType_Schema;
    public static XmlQualifiedNameEx IUserDefinedDataType;
    public static XmlQualifiedNameEx IUserDefinedDataType_BaseSystemDataType;
    public static XmlQualifiedNameEx IUserDefinedDataType_IsSystemObject;
    public static XmlQualifiedNameEx IUserDefinedDataType_Name;
    public static XmlQualifiedNameEx IUserDefinedDataType_Nullable;
    public static XmlQualifiedNameEx IUserDefinedDataType_Schema;
    public static XmlQualifiedNameEx IUserDefinedTableType;
    public static XmlQualifiedNameEx IUserDefinedTableType_Columns;
    public static XmlQualifiedNameEx IUserDefinedTableType_Constraints;
    public static XmlQualifiedNameEx IUserDefinedTableType_Indexes;
    public static XmlQualifiedNameEx IUserDefinedTableType_IsSystemObject;
    public static XmlQualifiedNameEx IUserDefinedTableType_Name;
    public static XmlQualifiedNameEx IUserDefinedTableType_Schema;
    public static XmlQualifiedNameEx IUserDefinedTableType_Statistics;
    public static XmlQualifiedNameEx IView;
    public static XmlQualifiedNameEx IView_Columns;
    public static XmlQualifiedNameEx IView_Constraints;
    public static XmlQualifiedNameEx IView_HasCheckOption;
    public static XmlQualifiedNameEx IView_HasColumnSpecification;
    public static XmlQualifiedNameEx IView_Indexes;
    public static XmlQualifiedNameEx IView_IsEncrypted;
    public static XmlQualifiedNameEx IView_IsQuotedIdentifierOn;
    public static XmlQualifiedNameEx IView_IsSchemaBound;
    public static XmlQualifiedNameEx IView_IsSystemObject;
    public static XmlQualifiedNameEx IView_Name;
    public static XmlQualifiedNameEx IView_QueryText;
    public static XmlQualifiedNameEx IView_ReturnsViewMetadata;
    public static XmlQualifiedNameEx IView_Schema;
    public static XmlQualifiedNameEx IView_Statistics;
    public static XmlQualifiedNameEx IView_Triggers;
    public static XmlQualifiedNameEx IVoidDataType;
    public static XmlQualifiedNameEx IXmlDataType;
    public static XmlQualifiedNameEx IXmlDataType_IsXmlNode;
    public static XmlQualifiedNameEx IXmlDataType_Length;
    public static XmlQualifiedNameEx IXmlDataType_NumericPrecision;
    public static XmlQualifiedNameEx IXmlDataType_NumericScale;
    public static XmlQualifiedNameEx IXmlDataType_TypeSpec;
    public static XmlQualifiedNameEx IXmlIndex;
    public static XmlQualifiedNameEx IXmlIndex_DisallowPageLocks;
    public static XmlQualifiedNameEx IXmlIndex_DisallowRowLocks;
    public static XmlQualifiedNameEx IXmlIndex_FillFactor;
    public static XmlQualifiedNameEx IXmlIndex_IgnoreDuplicateKeys;
    public static XmlQualifiedNameEx IXmlIndex_IsDisabled;
    public static XmlQualifiedNameEx IXmlIndex_Name;
    public static XmlQualifiedNameEx IXmlIndex_PadIndex;
    public static XmlQualifiedNameEx IXmlIndex_Parent;
    public static string Xmlns;
    public static string ServerStringId;
    private static MetadataPropertyInfo Login_Sid;
    private static MetadataPropertyInfo Database_Owner;
    private static XmlConfig();
    public static XmlQualifiedNameEx GetInstanceElementName(TypeInfo typeInfo);
    public static XmlQualifiedNameEx GetPropertyElementName(TypeInfo typeInfo, MetadataPropertyInfo propertyInfo);
    public static MetadataTypeInfo GetTypeInfoByName(XmlToken elementName);
    public static MetadataPropertyInfo GetPropertyInfoByName(MetadataTypeInfo typeInfo, XmlToken propertyName);
    public static MetadataPropertyInfo GetCollectionProperty(MetadataTypeInfo typeInfo, TypeInfo elemType);
    public static bool IncludeParentProperty(MetadataTypeInfo typeInfo);
    public static IMetadataObject GetChildElement(MetadataTypeInfo typeInfo, TypeInfo elemType, IMetadataObject obj, string name);
    public static bool IncludeProperty(MetadataTypeInfo typeInfo, MetadataPropertyInfo propertyInfo, IXmlSerializationSettings serializationSettings);
    public static bool IsInlineNesting(XmlNestingType nestingType);
    public static bool IsStaticTypeNesting(XmlNestingType nestingType);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlIdResolver : MetadataIdResolver {
    public XmlIdResolver(IServer server);
    public IMetadataObject ResolveObject(string strId);
    private static MetadataObjectSelector ParseSelector(string strId, Int32& idx);
    private static MetadataObjectId ParseObjectId(string strId);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlMetadataDeserializer : object {
    private XmlReader reader;
    private IXmlSerializationSettings serializationSettings;
    private IXmlDeserializationHandler xmlHandler;
    private List`1<DataRow`1<object>> dataRows;
    private List`1<List`1<TypeInfo>> dataRowTypeConstraints;
    private List`1<int> dataRowParents;
    private List`1<List`1<int>> collections;
    private List`1<string> dataRowsIds;
    private Dictionary`2<string, int> objectIdMap;
    private Dictionary`2<IMetadataObject, int> externalMetadataObjects;
    private int dataRowId;
    private int collectionId;
    public XmlMetadataDeserializer(XmlReader reader, IXmlSerializationSettings serializationSettings, IXmlDeserializationHandler xmlHandler);
    public IServer Deserialize(IServer sourceServer);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlMetadataDeserializer/<GetExternalReferences>d__14")]
private IEnumerable`1<ExternalReference> GetExternalReferences(XmlIdResolver idResolver);
    private void InstantiateTopLevelObjects(DeserializationModel model);
    private void UpdateParentProperties();
    private static void ValidateTypeConstraints(Type type, IEnumerable`1<TypeInfo> constraints);
    private void ValidateTypeConstraints();
    private void ReadXml(XmlScanner scanner);
    private int NewDataRowId();
    private int RegisterCollection(List`1<int> items);
    private int GetDataRowId(string strId);
    private void ReadMetadataObject(XmlScanner scanner, int id, MetadataTypeInfo typeInfo);
    private void UpdateDefaultProperties(MetadataTypeInfo typeInfo, Object[] values, int id);
    private void UpdateTypeConstraints(MetadataTypeInfo typeInfo, Object[] values);
    private void ReadProperty(XmlScanner scanner, MetadataTypeInfo typeInfo, Object[] values, int objId);
    private List`1<int> ReadMetadataCollection(XmlScanner scanner, TypeInfo elementType, int parentId);
    private int ReadPropertyMetadataValue(XmlScanner scanner, MetadataTypeInfo returnType, int parentId);
    private void AddTypeConstraint(int id, TypeInfo typeInfo);
    private void SetParent(int id, int parentId);
    private static object ReadSimpleValue(XmlScanner scanner, PrimitiveTypeInfo typeInfo);
    private static object ReadPrimitiveValue(XmlScanner scanner, PrimitiveTypeInfo typeInfo);
    private static ComputedColumnInfo ReadComputedColumnInfo(XmlScanner scanner);
    private static object ReadIdentityColumnInfo(XmlScanner scanner);
    private static CollationInfo ReadCollationInfo(XmlScanner scanner);
    private static CollationInfo ParseCollationInfo(string strValue);
    private static object ParseDataTypeSpec(string strValue);
    private static void ParseTriggerEventSet(string strValue, IMutableTriggerEventTypeSet eventSet);
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlNamespace : object {
    private string prefix;
    private string urn;
    public string Prefix { get; }
    public string Urn { get; }
    public XmlNamespace(string prefix, string urn);
    public string get_Prefix();
    public string get_Urn();
}
public enum Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlNestingType : Enum {
    public int value__;
    public static XmlNestingType Standalone;
    public static XmlNestingType InlineDynamicType;
    public static XmlNestingType InlineStaticType;
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlQualifiedNameEx : XmlQualifiedName {
    private XmlToken nameToken;
    public XmlToken NameToken { get; }
    public XmlQualifiedNameEx(string name, string ns);
    public XmlToken get_NameToken();
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlScanner : object {
    private XmlReader reader;
    private bool openedEmptyElement;
    private bool endOfChildren;
    private bool contentRead;
    private XmlToken nameToken;
    private bool nameTokenRead;
    public bool IsEndOfFile { get; }
    public XmlNodeType NodeType { get; }
    public bool IsTextNodeType { get; }
    public bool IsEmptyElement { get; }
    public bool IsEndOfChildren { get; }
    public string Name { get; }
    public XmlToken NameToken { get; }
    public string Namespace { get; }
    public string Value { get; }
    public XmlScanner(XmlReader reader);
    public bool get_IsEndOfFile();
    public XmlNodeType get_NodeType();
    public bool get_IsTextNodeType();
    public bool get_IsEmptyElement();
    public bool get_IsEndOfChildren();
    public bool MoveToFirstChild();
    public bool MoveToNext();
    public void MoveUp();
    public string get_Name();
    public XmlToken get_NameToken();
    public string get_Namespace();
    public string get_Value();
    public string GetAttribute(XmlQualifiedName qName);
    public string ReadContentAsString();
    public bool MatchElement(XmlQualifiedNameEx qName);
    public bool MatchElement(XmlQualifiedNameEx qName, bool throwOnError);
    private void MoveToNextToken();
    private void ResetXmlTokens();
    private void MoveToContentToken();
}
public enum Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlToken : Enum {
    public int value__;
    public static XmlToken None;
    public static XmlToken MM;
    public static XmlToken RE;
    public static XmlToken Key;
    public static XmlToken Sid;
    public static XmlToken Name;
    public static XmlToken Seed;
    public static XmlToken Text;
    public static XmlToken Type;
    public static XmlToken User;
    public static XmlToken View;
    public static XmlToken Login;
    public static XmlToken Owner;
    public static XmlToken Roles;
    public static XmlToken Table;
    public static XmlToken Users;
    public static XmlToken Views;
    public static XmlToken Column;
    public static XmlToken Delete;
    public static XmlToken Insert;
    public static XmlToken Length;
    public static XmlToken Logins;
    public static XmlToken Parent;
    public static XmlToken Schema;
    public static XmlToken Server;
    public static XmlToken Tables;
    public static XmlToken Update;
    public static XmlToken Columns;
    public static XmlToken Grantor;
    public static XmlToken Indexes;
    public static XmlToken Methods;
    public static XmlToken Schemas;
    public static XmlToken Startup;
    public static XmlToken Synonym;
    public static XmlToken BaseType;
    public static XmlToken BodyText;
    public static XmlToken Database;
    public static XmlToken DataType;
    public static XmlToken IndexKey;
    public static XmlToken IsInline;
    public static XmlToken IsOutput;
    public static XmlToken IsSparse;
    public static XmlToken IsSqlClr;
    public static XmlToken IsStatic;
    public static XmlToken IsUnique;
    public static XmlToken Language;
    public static XmlToken Nullable;
    public static XmlToken PadIndex;
    public static XmlToken Password;
    public static XmlToken Synonyms;
    public static XmlToken Triggers;
    public static XmlToken TypeSpec;
    public static XmlToken UserType;
    public static XmlToken XmlIndex;
    public static XmlToken ClassName;
    public static XmlToken Collation;
    public static XmlToken Databases;
    public static XmlToken FileGroup;
    public static XmlToken Increment;
    public static XmlToken Instances;
    public static XmlToken InsteadOf;
    public static XmlToken IsChecked;
    public static XmlToken IsDefault;
    public static XmlToken IsEnabled;
    public static XmlToken IsXmlNode;
    public static XmlToken LoginType;
    public static XmlToken QueryText;
    public static XmlToken Reference;
    public static XmlToken SortOrder;
    public static XmlToken UdtMethod;
    public static XmlToken Credential;
    public static XmlToken DmlTrigger;
    public static XmlToken FileGroups;
    public static XmlToken FillFactor;
    public static XmlToken IsDisabled;
    public static XmlToken IsIncluded;
    public static XmlToken IsNullable;
    public static XmlToken IsReadOnly;
    public static XmlToken Parameters;
    public static XmlToken ReturnType;
    public static XmlToken RowGuidCol;
    public static XmlToken Statistics;
    public static XmlToken Certificate;
    public static XmlToken ClrDataType;
    public static XmlToken Constraints;
    public static XmlToken ContextType;
    public static XmlToken Credentials;
    public static XmlToken DataMembers;
    public static XmlToken IsClustered;
    public static XmlToken IsColumnSet;
    public static XmlToken IsEncrypted;
    public static XmlToken IsFixedRole;
    public static XmlToken IsPersisted;
    public static XmlToken Permissions;
    public static XmlToken XmlDataType;
    public static XmlToken AssemblyName;
    public static XmlToken Certificates;
    public static XmlToken DatabaseRole;
    public static XmlToken DefaultValue;
    public static XmlToken DeleteAction;
    public static XmlToken InPrimaryKey;
    public static XmlToken IsComVisible;
    public static XmlToken IsFileStream;
    public static XmlToken IsRecompiled;
    public static XmlToken NumericScale;
    public static XmlToken ReferenceKey;
    public static XmlToken SpatialIndex;
    public static XmlToken TargetObject;
    public static XmlToken UpdateAction;
    public static XmlToken VoidDataType;
    public static XmlToken AsymmetricKey;
    public static XmlToken CollationInfo;
    public static XmlToken DefaultSchema;
    public static XmlToken IndexedColumn;
    public static XmlToken IsSchemaBound;
    public static XmlToken IsSystemNamed;
    public static XmlToken Level1Density;
    public static XmlToken Level2Density;
    public static XmlToken Level3Density;
    public static XmlToken Level4Density;
    public static XmlToken MemberOfRoles;
    public static XmlToken TableDataType;
    public static XmlToken TableVariable;
    public static XmlToken UdtDataMember;
    public static XmlToken AsymmetricKeys;
    public static XmlToken BaseObjectName;
    public static XmlToken CellsPerObject;
    public static XmlToken CursorDataType;
    public static XmlToken CursorVariable;
    public static XmlToken ForReplication;
    public static XmlToken HasCheckOption;
    public static XmlToken IndexedColumns;
    public static XmlToken IsSystemObject;
    public static XmlToken PermissionType;
    public static XmlToken ScalarDataType;
    public static XmlToken ScalarVariable;
    public static XmlToken SystemDataType;
    public static XmlToken TableParameter;
    public static XmlToken ApplicationRole;
    public static XmlToken AssociatedIndex;
    public static XmlToken BoundingBoxXMax;
    public static XmlToken BoundingBoxXMin;
    public static XmlToken BoundingBoxYMax;
    public static XmlToken BoundingBoxYMin;
    public static XmlToken CheckConstraint;
    public static XmlToken CursorParameter;
    public static XmlToken DefaultDatabase;
    public static XmlToken IsBinaryOrdered;
    public static XmlToken PartitionScheme;
    public static XmlToken PermissionState;
    public static XmlToken ReferencedTable;
    public static XmlToken RelationalIndex;
    public static XmlToken ScalarParameter;
    public static XmlToken ServerDdlEvents;
    public static XmlToken StoredProcedure;
    public static XmlToken UserDefinedType;
    public static XmlToken ApplicationRoles;
    public static XmlToken DisallowRowLocks;
    public static XmlToken ExecutionContext;
    public static XmlToken FilterDefinition;
    public static XmlToken ForeignKeyColumn;
    public static XmlToken NumericPrecision;
    public static XmlToken ReferencedColumn;
    public static XmlToken ServerDdlTrigger;
    public static XmlToken StoredProcedures;
    public static XmlToken UniqueConstraint;
    public static XmlToken DatabaseDdlEvents;
    public static XmlToken DatabasePrincipal;
    public static XmlToken DefaultConstraint;
    public static XmlToken DefaultSchemaName;
    public static XmlToken DisallowPageLocks;
    public static XmlToken NotForReplication;
    public static XmlToken ReferencingColumn;
    public static XmlToken SystemClrDataType;
    public static XmlToken TableVariableName;
    public static XmlToken BaseSystemDataType;
    public static XmlToken CompatibilityLevel;
    public static XmlToken ComputedColumnInfo;
    public static XmlToken DatabaseDdlTrigger;
    public static XmlToken DatabasePermission;
    public static XmlToken IdentityColumnInfo;
    public static XmlToken UserDefinedClrType;
    public static XmlToken CompactLargeObjects;
    public static XmlToken FileStreamFileGroup;
    public static XmlToken IgnoreDuplicateKeys;
    public static XmlToken ReturnsViewMetadata;
    public static XmlToken TableValuedFunction;
    public static XmlToken UserDefinedClrTypes;
    public static XmlToken UserDefinedDataType;
    public static XmlToken ForeignKeyConstraint;
    public static XmlToken IsQuotedIdentifierOn;
    public static XmlToken PrimaryKeyConstraint;
    public static XmlToken ScalarValuedFunction;
    public static XmlToken TableValuedFunctions;
    public static XmlToken UserDefinedAggregate;
    public static XmlToken UserDefinedDataTypes;
    public static XmlToken UserDefinedTableType;
    public static XmlToken DeleteActivationOrder;
    public static XmlToken InsertActivationOrder;
    public static XmlToken ScalarValuedFunctions;
    public static XmlToken UpdateActivationOrder;
    public static XmlToken UserDefinedAggregates;
    public static XmlToken UserDefinedTableTypes;
    public static XmlToken HasColumnSpecification;
    public static XmlToken ReturnsNullOnNullInput;
    public static XmlToken ExtendedStoredProcedure;
    public static XmlToken ExtendedStoredProcedures;
    public static XmlToken NoAutomaticRecomputation;
    public static XmlToken FileStreamPartitionScheme;
    public static XmlToken IsGeneratedAlwaysAsRowEnd;
    public static XmlToken IsGeneratedAlwaysAsRowStart;
    public static XmlToken IsGeneratedAlwaysAsTransactionIdEnd;
    public static XmlToken IsGeneratedAlwaysAsSequenceNumberEnd;
    public static XmlToken IsGeneratedAlwaysAsTransactionIdStart;
    public static XmlToken IsGeneratedAlwaysAsSequenceNumberStart;
}
internal static class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlTokenLookup : object {
    public static int MinTokenValue;
    public static int MaxTokenValue;
    public static XmlToken Find(string buffer);
    public static XmlToken Find(string buffer, int startIndex, int length);
    private static XmlToken Find_Len2(string buffer, int startIndex);
    private static XmlToken Find_Len3(string buffer, int startIndex);
    private static XmlToken Find_Len4(string buffer, int startIndex);
    private static XmlToken Find_Len5(string buffer, int startIndex);
    private static XmlToken Find_Len6(string buffer, int startIndex);
    private static XmlToken Find_Len7(string buffer, int startIndex);
    private static XmlToken Find_Len8(string buffer, int startIndex);
    private static XmlToken Find_Len9(string buffer, int startIndex);
    private static XmlToken Find_Len10(string buffer, int startIndex);
    private static XmlToken Find_Len11(string buffer, int startIndex);
    private static XmlToken Find_Len12(string buffer, int startIndex);
    private static XmlToken Find_Len13(string buffer, int startIndex);
    private static XmlToken Find_Len14(string buffer, int startIndex);
    private static XmlToken Find_Len15(string buffer, int startIndex);
    private static XmlToken Find_Len16(string buffer, int startIndex);
    private static XmlToken Find_Len17(string buffer, int startIndex);
    private static XmlToken Find_Len18(string buffer, int startIndex);
    private static XmlToken Find_Len19(string buffer, int startIndex);
    private static XmlToken Find_Len20(string buffer, int startIndex);
    private static XmlToken Find_Len21(string buffer, int startIndex);
    private static XmlToken Find_Len22(string buffer, int startIndex);
    private static XmlToken Find_Len23(string buffer, int startIndex);
    private static XmlToken Find_Len24(string buffer, int startIndex);
    private static XmlToken Find_Len25(string buffer, int startIndex);
    private static XmlToken Find_Len27(string buffer, int startIndex);
    private static XmlToken Find_Len35(string buffer, int startIndex);
    private static XmlToken Find_Len36(string buffer, int startIndex);
    private static XmlToken Find_Len37(string buffer, int startIndex);
    private static XmlToken Find_Len38(string buffer, int startIndex);
}
internal static class Microsoft.SqlServer.Management.SqlParser.MetadataSerialization.XmlUtils : object {
    public static void WriteRootElementStart(XmlWriter xmlWriter, XmlQualifiedName qName, XmlNamespace[] namespaces);
    public static void WriteStartElement(XmlWriter xmlWriter, XmlQualifiedName qName);
    public static void WriteEndElement(XmlWriter xmlWriter);
    public static void WriteAttribute(XmlWriter xmlWriter, XmlQualifiedName qName, string value);
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Management.SqlParser.MetadataServices.MetadataUtils : object {
    private static TypeInfoVisitor typeInfoVisitor;
    private static MetadataUtils();
    public static object GetPropertyValue(IMetadataObject obj, MetadataTypeInfo typeInfo, MetadataPropertyInfo propertyInfo);
    [ExtensionAttribute]
public static MetadataTypeInfo TypeInfo(IMetadataObject obj);
    public static IMetadataObject GetParentObject(IMetadataObject obj);
    public static bool IsSystemObject(IMetadataObject obj);
    public static bool IsValueTypeObject(IMetadataObject obj);
    public static bool IsUnnamedObject(IMetadataObject obj);
    private static bool IsUnnamedIndex(IIndex index);
    private static bool IsUnnamedConstraint(IConstraint constraint);
    private static bool IsUnnamedDefaultConstraint(IDefaultConstraint constraint);
    private static bool IsUnnamedConstraintParent(ITabular tabular);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.SqlParser.NetCoreHelpers : object {
    public static int InvariantCultureLcid { get; }
    public static int get_InvariantCultureLcid();
    public static XmlWriter CreateXmlWriter(TextWriter textWriter, XmlWriterSettings xmlSettings);
    [ExtensionAttribute]
public static StringComparer GetStringComparer(CultureInfo culture, bool ignoreCase);
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static Type GetBaseType(Type type);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
public static bool GetIsAssignableFrom(Type type, Type c);
    [ExtensionAttribute]
public static bool GetIsClass(Type type);
    [ExtensionAttribute]
public static bool GetIsEnum(Type type);
    [ExtensionAttribute]
public static bool GetIsGenericType(Type type);
    [ExtensionAttribute]
public static bool GetIsNestedPrivate(Type type);
    [ExtensionAttribute]
public static bool GetIsPrimitive(Type type);
    [ExtensionAttribute]
public static bool GetIsValueType(Type type);
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.Error : ErrorBase {
    private ErrorFlags errorFlags;
    private LexLocation lexLocation;
    private SqlCodeObject reportingObject;
    internal ErrorFlags ErrorFlags { get; }
    internal LexLocation LexLocation { get; }
    internal SqlCodeObject ReportingObject { get; }
    internal Error(string msg, Location start, Location end, bool warningOnly, ErrorType type, ErrorFlags errorFlags, LexLocation lexLocation, SqlCodeObject reportingObject);
    internal Error(Error other);
    internal ErrorFlags get_ErrorFlags();
    internal LexLocation get_LexLocation();
    internal SqlCodeObject get_ReportingObject();
    public sealed virtual int CompareTo(Error error);
    public bool Equals(Error error);
    internal void WriteXml(XmlWriter writer);
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.ErrorBase : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <End>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorType <Type>k__BackingField;
    public string Message { get; internal set; }
    public Location Start { get; internal set; }
    public Location End { get; internal set; }
    public bool IsWarning { get; internal set; }
    public ErrorType Type { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
public Location get_Start();
    [CompilerGeneratedAttribute]
internal void set_Start(Location value);
    [CompilerGeneratedAttribute]
public Location get_End();
    [CompilerGeneratedAttribute]
internal void set_End(Location value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
internal void set_IsWarning(bool value);
    [CompilerGeneratedAttribute]
public ErrorType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(ErrorType value);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.ErrorCollection : object {
    private List`1<Error> sortedErrors;
    private int errorCount;
    private int warningCount;
    public bool HasErrors { get; }
    public bool HasWarnings { get; }
    public int ErrorCount { get; }
    public int WarningCount { get; }
    public IEnumerable`1<Error> ErrorList { get; }
    private ErrorCollection(List`1<Error> sortedErrors);
    public static ErrorCollection Create(IEnumerable`1<Error> errorCollection);
    public static ErrorCollection Create(IEnumerable`1[] errorCollections);
    public bool get_HasErrors();
    public bool get_HasWarnings();
    public int get_ErrorCount();
    public int get_WarningCount();
    public IEnumerable`1<Error> get_ErrorList();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.Parser.ErrorFlags : Enum {
    public int value__;
    public static ErrorFlags None;
    public static ErrorFlags UnresolvedReference;
    public static ErrorFlags UnresolvedDatabaseObjectReference;
    public static ErrorFlags UnsupportedTSql;
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.Parser.ErrorHandler : object {
    public void AddError(string message, ErrorType errorType, ErrorFlags errorFlags, LexLocation pos);
    public void AddError(string message, ErrorType errorType, ErrorFlags errorFlags, SqlCodeObject codeObject);
    public void AddError(string message, ErrorType errorType, ErrorFlags errorFlags, SqlCodeObject firstCodeObject, SqlCodeObject lastCodeObject);
    public void AddWarning(string message, ErrorType errorType, ErrorFlags errorFlags, LexLocation pos);
    public void AddWarning(string message, ErrorType errorType, ErrorFlags errorFlags, SqlCodeObject codeObject);
    public void AddWarning(string message, ErrorType errorType, ErrorFlags errorFlags, SqlCodeObject firstCodeObject, SqlCodeObject lastCodeObject);
    public abstract virtual void AddError(ErrorRecord error);
    public static ErrorRecord CreateError(string message, ErrorType errorType, ErrorFlags errorFlags, bool isWarning, LexLocation lexLocation);
    public static ErrorRecord CreateError(string message, ErrorType errorType, ErrorFlags errorFlags, bool isWarning, SqlCodeObject codeObject);
    public static ErrorRecord CreateError(string message, ErrorType errorType, ErrorFlags errorFlags, bool isWarning, SqlCodeObject firstCodeObject, SqlCodeObject lastCodeObject);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.Parser.ErrorRecord : object {
    private string message;
    private ErrorType errorType;
    private ErrorFlags errorFlags;
    private bool isWarning;
    private LexLocation lexLocation;
    public string Message { get; }
    public ErrorType ErrorType { get; }
    public ErrorFlags ErrorFlags { get; }
    public bool IsWarning { get; }
    public LexLocation LexLocation { get; }
    public SqlCodeObject ReportingObject { get; }
    public ErrorRecord(string message, ErrorType errorType, ErrorFlags errorFlags, bool isWarning);
    public ErrorRecord(string message, ErrorType errorType, ErrorFlags errorFlags, bool isWarning, LexLocation lexLocation);
    public string get_Message();
    public ErrorType get_ErrorType();
    public ErrorFlags get_ErrorFlags();
    public bool get_IsWarning();
    public LexLocation get_LexLocation();
    public abstract virtual SqlCodeObject get_ReportingObject();
    public void FixError(TokenUpdateDiff diff);
    protected abstract virtual LexLocation GetFinalErrorLocation();
    public void CommitError();
    public Error FinalizeError(TokenManager tokenManager);
    public virtual string ToString();
}
public enum Microsoft.SqlServer.Management.SqlParser.Parser.ErrorType : Enum {
    public int value__;
    public static ErrorType SyntaxError;
    public static ErrorType ParseError;
    public static ErrorType BindError;
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.EscapeSequence : object {
    private char startChar;
    private char endChar;
    private int startIndex;
    public static EscapeSequence DoubleQuotedEscapeSequence;
    public static EscapeSequence BracketedEscapeSequence;
    public static EscapeSequence SingleQuotedEscapeSequence;
    private static EscapeSequence DoubleQuotedSkipOneEscapeSequence;
    private static EscapeSequence SingleQuotedSkipOneEscapeSequence;
    private EscapeSequence(char start, char end);
    private EscapeSequence(char start, char end, int startIndex);
    private static EscapeSequence();
    private bool Matches(string value);
    public string Escape(string value);
    public string Unescape(string value);
    public static bool RequiresEscaping(string value);
    public static string UnescapeIdentifier(string value);
    public static string UnescapeLiteral(string value, Boolean& isUnicode);
    public static EscapeSequence IdentifyEscapeSequence(string value);
    private static EscapeSequence IdentifyLiteralEscapeSequence(string value);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.ExpressionCanonicalizer : object {
    public static ExpressionCanonicalizer Instance;
    private static Dictionary`2<SqlBooleanOperatorType, string> binaryBooleanOperators;
    private static Dictionary`2<SqlBinaryScalarOperatorType, string> binaryOperators;
    private static Dictionary`2<SqlComparisonBooleanExpressionType, string> comparisonOperators;
    private static Dictionary`2<SqlUnaryScalarOperatorType, string> unaryOperators;
    private static ExpressionCanonicalizer();
    public string Canonicalize(string expression, ExpressionType type);
    private string CanonicalizeCheckConstraintExpression(string expression);
    private string CanonicalizeComputedColumnExpression(string expression);
    private string CanonicalizeDefaultConstraintExpression(string expression);
    private string CanonicalizeIndexFilterExpression(string expression);
    private ParseResult Parse(string sql);
    public sealed virtual string Visit(SqlLiteralExpression expression);
    private string CanonicalizeBinaryExpression(SqlLiteralExpression expression);
    private string CanonicalizeNumericExpression(SqlLiteralExpression expression);
    private string CanonicalizeRealExpression(SqlLiteralExpression expression);
    private string CanonicalizeMoneyExpression(SqlLiteralExpression expression);
    public sealed virtual string Visit(SqlUserDefinedScalarFunctionCallExpression expression);
    public sealed virtual string Visit(SqlBuiltinScalarFunctionCallExpression expression);
    private string CanonicalizeArguments(SqlScalarFunctionCallExpression expression);
    public sealed virtual string Visit(SqlCastExpression expression);
    public sealed virtual string Visit(SqlConvertExpression expression);
    private string CanonicalizeCastAndConvertFunctionCallExpressions(SqlCastExpression expression);
    public sealed virtual string Visit(SqlCollateScalarExpression collateExpression);
    public sealed virtual string Visit(SqlNullQualifier nullQualifier);
    public sealed virtual string Visit(SqlJsonObjectArgument jsonObjectArgument);
    public sealed virtual string Visit(SqlScalarRefExpression expression);
    public sealed virtual string Visit(SqlColumnRefExpression expression);
    public sealed virtual string Visit(SqlIdentifier identifier);
    public sealed virtual string Visit(SqlObjectIdentifier objectIdentifier);
    public sealed virtual string Visit(SqlSearchedCaseExpression searchedCaseExpression);
    public sealed virtual string Visit(SqlSearchedWhenClause searchedWhenClause);
    public sealed virtual string Visit(SqlSimpleCaseExpression simpleCaseExpression);
    public sealed virtual string Visit(SqlSimpleWhenClause simpleWhenClause);
    public sealed virtual string Visit(SqlAtTimeZoneExpression expression);
    public sealed virtual string Visit(SqlBinaryScalarExpression expression);
    public sealed virtual string Visit(SqlUnaryScalarExpression expression);
    public sealed virtual string Visit(SqlBetweenBooleanExpression expression);
    public sealed virtual string Visit(SqlBinaryBooleanExpression expression);
    public sealed virtual string Visit(SqlComparisonBooleanExpression expression);
    public sealed virtual string Visit(SqlDistinctPredicateComparisonBooleanExpression expression);
    public sealed virtual string Visit(SqlInBooleanExpression expression);
    public sealed virtual string Visit(SqlIsNullBooleanExpression expression);
    public sealed virtual string Visit(SqlLikeBooleanExpression expression);
    public sealed virtual string Visit(SqlNotBooleanExpression expression);
    private string GetNotBooleanExpression(string expression);
    public sealed virtual string Visit(SqlAllAnyComparisonBooleanExpression expression);
    public sealed virtual string Visit(SqlExistsBooleanExpression expression);
    public sealed virtual string Visit(SqlFullTextBooleanExpression expression);
    public sealed virtual string Visit(SqlUpdateBooleanExpression expression);
    public sealed virtual string Visit(SqlBinaryFilterExpression expression);
    public sealed virtual string Visit(SqlBooleanFilterExpression expression);
    private static string GetBinaryExpression(string left, string operatorString, string right);
    private static string GetUnaryExpression(string operatorString, string operand);
    private static string Append(String[] strings);
    private static string Append(string s1, string s2, string s3);
    private static string Append(string s1, string s2);
    private static string Parenthesize(string expression);
    public sealed virtual string Visit(SqlAggregateFunctionCallExpression codeObject);
    public sealed virtual string Visit(SqlAllowPageLocksIndexOption codeObject);
    public sealed virtual string Visit(SqlAllowRowLocksIndexOption codeObject);
    public sealed virtual string Visit(SqlAlterLoginStatement codeObject);
    public sealed virtual string Visit(SqlAssignment codeObject);
    public sealed virtual string Visit(SqlBatch codeObject);
    public sealed virtual string Visit(SqlBinaryQueryExpression codeObject);
    public sealed virtual string Visit(SqlBooleanExpression codeObject);
    public sealed virtual string Visit(SqlChangeTrackingContext codeObject);
    public sealed virtual string Visit(SqlCheckConstraint codeObject);
    public sealed virtual string Visit(SqlClrAssemblySpecifier codeObject);
    public sealed virtual string Visit(SqlClrClassSpecifier codeObject);
    public sealed virtual string Visit(SqlClrFunctionBodyDefinition codeObject);
    public sealed virtual string Visit(SqlClrMethodSpecifier codeObject);
    public sealed virtual string Visit(SqlCollation codeObject);
    public sealed virtual string Visit(SqlColumnAssignment codeObject);
    public sealed virtual string Visit(SqlCreateUserOption codeObject);
    public string Visit(SqlExternalStreamDefinition codeObject);
    public sealed virtual string Visit(SqlCursorDeclareStatement codeObject);
    public sealed virtual string Visit(SqlCursorOption codeObject);
    public sealed virtual string Visit(SqlCursorVariableAssignment codeObject);
    public sealed virtual string Visit(SqlCursorVariableRefExpression codeObject);
    public sealed virtual string Visit(SqlDefaultConstraint codeObject);
    public sealed virtual string Visit(SqlInlineIndexConstraint codeObject);
    public sealed virtual string Visit(SqlEdgeConstraint codeObject);
    public sealed virtual string Visit(SqlColumnDefinition codeObject);
    public sealed virtual string Visit(SqlColumnIdentity codeObject);
    public sealed virtual string Visit(SqlCommonTableExpression codeObject);
    public sealed virtual string Visit(SqlCompressionPartitionRange codeObject);
    public sealed virtual string Visit(SqlComputedColumnDefinition codeObject);
    public sealed virtual string Visit(SqlConditionClause codeObject);
    public sealed virtual string Visit(SqlConstraint codeObject);
    public sealed virtual string Visit(SqlCubeGroupByItem codeObject);
    public sealed virtual string Visit(SqlDataCompressionIndexOption codeObject);
    public sealed virtual string Visit(SqlDataType codeObject);
    public sealed virtual string Visit(SqlDataTypeSpecification codeObject);
    public sealed virtual string Visit(SqlDdlTriggerDefinition codeObject);
    public sealed virtual string Visit(SqlDefaultValuesInsertMergeActionSource codeObject);
    public sealed virtual string Visit(SqlDefaultValuesInsertSource codeObject);
    public sealed virtual string Visit(SqlDeleteMergeAction codeObject);
    public sealed virtual string Visit(SqlDeleteSpecification codeObject);
    public sealed virtual string Visit(SqlDerivedTableExpression codeObject);
    public sealed virtual string Visit(SqlDmlSpecificationTableSource codeObject);
    public sealed virtual string Visit(SqlDmlTriggerDefinition codeObject);
    public sealed virtual string Visit(SqlDropExistingIndexOption codeObject);
    public sealed virtual string Visit(SqlExecuteAsClause codeObject);
    public sealed virtual string Visit(SqlFillFactorIndexOption codeObject);
    public sealed virtual string Visit(SqlFilterClause codeObject);
    public sealed virtual string Visit(SqlForBrowseClause codeObject);
    public sealed virtual string Visit(SqlForeignKeyConstraint codeObject);
    public sealed virtual string Visit(SqlForXmlAutoClause codeObject);
    public sealed virtual string Visit(SqlForXmlClause codeObject);
    public sealed virtual string Visit(SqlForXmlDirective codeObject);
    public sealed virtual string Visit(SqlForXmlExplicitClause codeObject);
    public sealed virtual string Visit(SqlForXmlPathClause codeObject);
    public sealed virtual string Visit(SqlForXmlRawClause codeObject);
    public sealed virtual string Visit(SqlFromClause codeObject);
    public sealed virtual string Visit(SqlFullTextColumn codeObject);
    public sealed virtual string Visit(SqlFunctionDefinition codeObject);
    public sealed virtual string Visit(SqlGlobalScalarVariableRefExpression codeObject);
    public sealed virtual string Visit(SqlGrandTotalGroupByItem codeObject);
    public sealed virtual string Visit(SqlGrandTotalGroupingSet codeObject);
    public sealed virtual string Visit(SqlGroupByClause codeObject);
    public sealed virtual string Visit(SqlGroupBySets codeObject);
    public sealed virtual string Visit(SqlGroupingSetItemsCollection codeObject);
    public sealed virtual string Visit(SqlHavingClause codeObject);
    public sealed virtual string Visit(SqlIdentityFunctionCallExpression codeObject);
    public sealed virtual string Visit(SqlIgnoreDupKeyIndexOption codeObject);
    public sealed virtual string Visit(SqlInBooleanExpressionCollectionValue codeObject);
    public sealed virtual string Visit(SqlInBooleanExpressionQueryValue codeObject);
    public sealed virtual string Visit(SqlIndexedColumn codeObject);
    public sealed virtual string Visit(SqlIndexHint codeObject);
    public sealed virtual string Visit(SqlIndexOption codeObject);
    public sealed virtual string Visit(SqlInlineFunctionBodyDefinition codeObject);
    public sealed virtual string Visit(SqlInlineTableRelationalFunctionDefinition codeObject);
    public sealed virtual string Visit(SqlInlineTableVariableDeclaration codeObject);
    public sealed virtual string Visit(SqlInsertMergeAction codeObject);
    public sealed virtual string Visit(SqlInsertSpecification codeObject);
    public sealed virtual string Visit(SqlIntoClause codeObject);
    public sealed virtual string Visit(SqlLargeDataStorageInformation codeObject);
    public sealed virtual string Visit(SqlLoginPassword codeObject);
    public sealed virtual string Visit(SqlMaxDegreeOfParallelismIndexOption codeObject);
    public sealed virtual string Visit(SqlMaxDurationIndexOption codeObject);
    public sealed virtual string Visit(SqlMergeActionClause codeObject);
    public sealed virtual string Visit(SqlMergeSpecification codeObject);
    public sealed virtual string Visit(SqlInsertSource codeObject);
    public sealed virtual string Visit(SqlExecuteArgument codeObject);
    public sealed virtual string Visit(SqlModuleCalledOnNullInputOption codeObject);
    public sealed virtual string Visit(SqlModuleEncryptionOption codeObject);
    public sealed virtual string Visit(SqlModuleExecuteAsOption codeObject);
    public sealed virtual string Visit(SqlModuleOption codeObject);
    public sealed virtual string Visit(SqlModuleRecompileOption codeObject);
    public sealed virtual string Visit(SqlModuleReturnsNullOnNullInputOption codeObject);
    public sealed virtual string Visit(SqlModuleSchemaBindingOption codeObject);
    public sealed virtual string Visit(SqlModuleNativeCompilationOption codeObject);
    public sealed virtual string Visit(SqlModuleInlineOption codeObject);
    public sealed virtual string Visit(SqlModuleViewMetadataOption codeObject);
    public sealed virtual string Visit(SqlMultistatementFunctionBodyDefinition codeObject);
    public sealed virtual string Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject);
    public sealed virtual string Visit(SqlQueryExpression codeObject);
    public sealed virtual string Visit(SqlScalarExpression codeObject);
    public sealed virtual string Visit(SqlTableExpression codeObject);
    public sealed virtual string Visit(SqlObjectReference codeObject);
    public sealed virtual string Visit(SqlOnlineIndexOption codeObject);
    public sealed virtual string Visit(SqlOptimizeForSequentialKeyIndexOption codeObject);
    public sealed virtual string Visit(SqlResumableIndexOption codeObject);
    public sealed virtual string Visit(SqlBucketCountIndexOption codeObject);
    public sealed virtual string Visit(SqlCompressionDelayIndexOption codeObject);
    public sealed virtual string Visit(SqlOffsetFetchClause codeObject);
    public sealed virtual string Visit(SqlOrderByClause codeObject);
    public sealed virtual string Visit(SqlOrderByItem codeObject);
    public sealed virtual string Visit(SqlOutputClause codeObject);
    public sealed virtual string Visit(SqlOutputIntoClause codeObject);
    public sealed virtual string Visit(SqlPadIndexOption codeObject);
    public sealed virtual string Visit(SqlParameterDeclaration codeObject);
    public sealed virtual string Visit(SqlPivotClause codeObject);
    public sealed virtual string Visit(SqlPivotTableExpression codeObject);
    public sealed virtual string Visit(SqlPrimaryKeyConstraint codeObject);
    public sealed virtual string Visit(SqlStorageSpecification codeObject);
    public sealed virtual string Visit(SqlProcedureDefinition codeObject);
    public sealed virtual string Visit(SqlQualifiedJoinTableExpression codeObject);
    public sealed virtual string Visit(SqlQuerySpecification codeObject);
    public sealed virtual string Visit(SqlQueryWithClause codeObject);
    public sealed virtual string Visit(SqlRollupGroupByItem codeObject);
    public sealed virtual string Visit(SqlRowConstructorExpression codeObject);
    public sealed virtual string Visit(SqlScalarClrFunctionDefinition codeObject);
    public sealed virtual string Visit(SqlScalarFunctionReturnType codeObject);
    public sealed virtual string Visit(SqlScalarRelationalFunctionDefinition codeObject);
    public sealed virtual string Visit(SqlScalarSubQueryExpression codeObject);
    public sealed virtual string Visit(SqlScalarVariableRefExpression codeObject);
    public sealed virtual string Visit(SqlScript codeObject);
    public sealed virtual string Visit(SqlSelectClause codeObject);
    public sealed virtual string Visit(SqlSelectIntoClause codeObject);
    public sealed virtual string Visit(SqlSelectScalarExpression codeObject);
    public sealed virtual string Visit(SqlSelectSpecification codeObject);
    public sealed virtual string Visit(SqlSelectSpecificationInsertSource codeObject);
    public sealed virtual string Visit(SqlSelectStarExpression codeObject);
    public sealed virtual string Visit(SqlSelectVariableAssignmentExpression codeObject);
    public sealed virtual string Visit(SqlSetClause codeObject);
    public sealed virtual string Visit(SqlSimpleGroupByItem codeObject);
    public sealed virtual string Visit(SqlSimpleOrderByClause codeObject);
    public sealed virtual string Visit(SqlSimpleOrderByItem codeObject);
    public sealed virtual string Visit(SqlSortedDataIndexOption codeObject);
    public sealed virtual string Visit(SqlSortedDataReorgIndexOption codeObject);
    public sealed virtual string Visit(SqlSortInTempDbIndexOption codeObject);
    public sealed virtual string Visit(SqlStatisticsIncrementalIndexOption codeObject);
    public sealed virtual string Visit(SqlStatisticsNoRecomputeIndexOption codeObject);
    public sealed virtual string Visit(SqlStatisticsOnlyIndexOption codeObject);
    public sealed virtual string Visit(SqlTableClrFunctionDefinition codeObject);
    public sealed virtual string Visit(SqlTableConstructorExpression codeObject);
    public sealed virtual string Visit(SqlTableConstructorInsertSource codeObject);
    public sealed virtual string Visit(SqlTableDefinition codeObject);
    public sealed virtual string Visit(SqlTableFunctionReturnType codeObject);
    public sealed virtual string Visit(SqlTableHint codeObject);
    public sealed virtual string Visit(SqlTableRefExpression codeObject);
    public sealed virtual string Visit(SqlTableUdtInstanceMethodExpression codeObject);
    public sealed virtual string Visit(SqlTableValuedFunctionRefExpression codeObject);
    public sealed virtual string Visit(SqlTableVariableRefExpression codeObject);
    public sealed virtual string Visit(SqlTargetTableExpression codeObject);
    public sealed virtual string Visit(SqlTopSpecification codeObject);
    public sealed virtual string Visit(SqlTriggerAction codeObject);
    public sealed virtual string Visit(SqlTriggerDefinition codeObject);
    public sealed virtual string Visit(SqlTriggerEvent codeObject);
    public sealed virtual string Visit(SqlUdtInstanceDataMemberExpression codeObject);
    public sealed virtual string Visit(SqlUdtInstanceMethodExpression codeObject);
    public sealed virtual string Visit(SqlUdtStaticDataMemberExpression codeObject);
    public sealed virtual string Visit(SqlUdtStaticMethodExpression codeObject);
    public sealed virtual string Visit(SqlUniqueConstraint codeObject);
    public sealed virtual string Visit(SqlUnpivotClause codeObject);
    public sealed virtual string Visit(SqlUnpivotTableExpression codeObject);
    public sealed virtual string Visit(SqlUnqualifiedJoinTableExpression codeObject);
    public sealed virtual string Visit(SqlUpdateMergeAction codeObject);
    public sealed virtual string Visit(SqlUpdateSpecification codeObject);
    public sealed virtual string Visit(SqlValuesInsertMergeActionSource codeObject);
    public sealed virtual string Visit(SqlScalarVariableAssignment codeObject);
    public sealed virtual string Visit(SqlVariableColumnAssignment codeObject);
    public sealed virtual string Visit(SqlVariableDeclaration codeObject);
    public sealed virtual string Visit(SqlViewDefinition codeObject);
    public sealed virtual string Visit(SqlWhereClause codeObject);
    public sealed virtual string Visit(SqlXmlNamespacesDeclaration codeObject);
    public sealed virtual string Visit(SqlAlterFunctionStatement statement);
    public sealed virtual string Visit(SqlAlterProcedureStatement statement);
    public sealed virtual string Visit(SqlAlterTriggerStatement statement);
    public sealed virtual string Visit(SqlAlterViewStatement statement);
    public sealed virtual string Visit(SqlBackupCertificateStatement statement);
    public sealed virtual string Visit(SqlBackupDatabaseStatement statement);
    public sealed virtual string Visit(SqlBackupLogStatement statement);
    public sealed virtual string Visit(SqlBackupMasterKeyStatement statement);
    public sealed virtual string Visit(SqlBackupServiceMasterKeyStatement statement);
    public sealed virtual string Visit(SqlBackupTableStatement statement);
    public sealed virtual string Visit(SqlBreakStatement statement);
    public sealed virtual string Visit(SqlCommentStatement statement);
    public sealed virtual string Visit(SqlCompoundStatement statement);
    public sealed virtual string Visit(SqlContinueStatement statement);
    public sealed virtual string Visit(SqlCreateFunctionStatement statement);
    public sealed virtual string Visit(SqlCreateIndexStatement statement);
    public sealed virtual string Visit(SqlCreateLoginFromAsymKeyStatement statement);
    public sealed virtual string Visit(SqlCreateLoginFromCertificateStatement statement);
    public sealed virtual string Visit(SqlCreateLoginFromWindowsStatement statement);
    public sealed virtual string Visit(SqlCreateLoginWithPasswordStatement statement);
    public sealed virtual string Visit(SqlCreateProcedureStatement statement);
    public sealed virtual string Visit(SqlCreateRoleStatement statement);
    public sealed virtual string Visit(SqlCreateSchemaStatement statement);
    public sealed virtual string Visit(SqlCreateSynonymStatement statement);
    public sealed virtual string Visit(SqlCreateTableStatement statement);
    public sealed virtual string Visit(SqlCreateTriggerStatement statement);
    public sealed virtual string Visit(SqlCreateUserDefinedDataTypeStatement statement);
    public sealed virtual string Visit(SqlCreateUserDefinedTableTypeStatement statement);
    public sealed virtual string Visit(SqlCreateUserDefinedTypeStatement statement);
    public sealed virtual string Visit(SqlCreateUserFromAsymKeyStatement statement);
    public sealed virtual string Visit(SqlCreateUserFromCertificateStatement statement);
    public sealed virtual string Visit(SqlCreateUserWithImplicitAuthenticationStatement statement);
    public sealed virtual string Visit(SqlCreateUserFromLoginStatement statement);
    public sealed virtual string Visit(SqlCreateUserFromExternalProviderStatement statement);
    public sealed virtual string Visit(SqlCreateUserStatement statement);
    public sealed virtual string Visit(SqlCreateUserWithoutLoginStatement statement);
    public sealed virtual string Visit(SqlCreateViewStatement statement);
    public sealed virtual string Visit(SqlDBCCStatement statement);
    public sealed virtual string Visit(SqlDeleteStatement statement);
    public sealed virtual string Visit(SqlDenyStatement statement);
    public sealed virtual string Visit(SqlDropAggregateStatement statement);
    public sealed virtual string Visit(SqlDropDatabaseStatement statement);
    public sealed virtual string Visit(SqlDropDefaultStatement statement);
    public sealed virtual string Visit(SqlDropFunctionStatement statement);
    public sealed virtual string Visit(SqlDropLoginStatement statement);
    public sealed virtual string Visit(SqlDropProcedureStatement statement);
    public sealed virtual string Visit(SqlDropRuleStatement statement);
    public sealed virtual string Visit(SqlDropSchemaStatement statement);
    public sealed virtual string Visit(SqlDropSecurityPolicyStatement statement);
    public sealed virtual string Visit(SqlDropSequenceStatement statement);
    public sealed virtual string Visit(SqlDropSynonymStatement statement);
    public sealed virtual string Visit(SqlDropTableStatement statement);
    public sealed virtual string Visit(SqlDropTriggerStatement statement);
    public sealed virtual string Visit(SqlDropTypeStatement statement);
    public sealed virtual string Visit(SqlDropUserStatement statement);
    public sealed virtual string Visit(SqlDropViewStatement statement);
    public sealed virtual string Visit(SqlExecuteModuleStatement statement);
    public sealed virtual string Visit(SqlExecuteStringStatement statement);
    public sealed virtual string Visit(SqlGrantStatement statement);
    public sealed virtual string Visit(SqlIfElseStatement statement);
    public sealed virtual string Visit(SqlInlineTableVariableDeclareStatement statement);
    public sealed virtual string Visit(SqlInsertStatement statement);
    public sealed virtual string Visit(SqlMergeStatement statement);
    public sealed virtual string Visit(SqlStatement statement);
    public sealed virtual string Visit(SqlRestoreDatabaseStatement statement);
    public sealed virtual string Visit(SqlRestoreInformationStatement statement);
    public sealed virtual string Visit(SqlRestoreLogStatement statement);
    public sealed virtual string Visit(SqlRestoreMasterKeyStatement statement);
    public sealed virtual string Visit(SqlRestoreServiceMasterKeyStatement statement);
    public sealed virtual string Visit(SqlRestoreTableStatement statement);
    public sealed virtual string Visit(SqlReturnStatement statement);
    public sealed virtual string Visit(SqlRevokeStatement statement);
    public sealed virtual string Visit(SqlSelectStatement statement);
    public sealed virtual string Visit(SqlSetAssignmentStatement statement);
    public sealed virtual string Visit(SqlSetStatement statement);
    public sealed virtual string Visit(SqlTemporalPeriodDefinition codeObject);
    public sealed virtual string Visit(SqlTryCatchStatement statement);
    public sealed virtual string Visit(SqlUpdateStatement statement);
    public sealed virtual string Visit(SqlUseStatement statement);
    public sealed virtual string Visit(SqlVariableDeclareStatement statement);
    public sealed virtual string Visit(SqlWhileStatement statement);
    public sealed virtual string Visit(SqlWindowClause codeObject);
    public sealed virtual string Visit(SqlWindowExpression codeObject);
    public sealed virtual string Visit(SqlWindowSpecification codeObject);
    [CompilerGeneratedAttribute]
private string <Visit>b__31_0(SqlIdentifier identifier);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.GeneralErrorHandler : ErrorHandler {
    private List`1<ErrorRecord> errors;
    public virtual void AddError(ErrorRecord error);
    public ErrorCollection GetErrorCollection(TokenManager tokenManager);
    public void CommitErrors();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.Parser.GeneralErrorHandler/<GetFinalizedErrors>d__5")]
private IEnumerable`1<Error> GetFinalizedErrors(TokenManager tokenManager);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.ContextKeywords : object {
    private Dictionary`2<StringToken, int> lookup;
    private int defaultToken;
    internal static OPT_ADD_SUBTOKENS OPT_ADD_SUBTOKENS;
    internal static OPT_AFFINITY_TYPE_SUBTOKENS OPT_AFFINITY_TYPE_SUBTOKENS;
    internal static OPT_AFTER_BEGIN_SUBTOKENS OPT_AFTER_BEGIN_SUBTOKENS;
    internal static OPT_AFTER_END_SUBTOKENS OPT_AFTER_END_SUBTOKENS;
    internal static OPT_AFTER_FTS_WITH_SUBTOKENS OPT_AFTER_FTS_WITH_SUBTOKENS;
    internal static OPT_AFTER_WITH_EXEC_OPTION_SUBTOKENS OPT_AFTER_WITH_EXEC_OPTION_SUBTOKENS;
    internal static OPT_AFTER_WITH_SUBTOKENS OPT_AFTER_WITH_SUBTOKENS;
    internal static OPT_AG_REPLICA_OPTION_SUBTOKENS OPT_AG_REPLICA_OPTION_SUBTOKENS;
    internal static OPT_ALTER_DB_OPT_SUBTOKENS OPT_ALTER_DB_OPT_SUBTOKENS;
    internal static OPT_ALTER_EXTERNALDATASOURCE_WITH_SUBTOKENS OPT_ALTER_EXTERNALDATASOURCE_WITH_SUBTOKENS;
    internal static OPT_ALTER_EXTERNAL_LANGUAGE_OPT_SUBTOKENS OPT_ALTER_EXTERNAL_LANGUAGE_OPT_SUBTOKENS;
    internal static OPT_ALTER_EXTERNAL_LIBRARY_OPT_SUBTOKENS OPT_ALTER_EXTERNAL_LIBRARY_OPT_SUBTOKENS;
    internal static OPT_ALTER_SERVER_CONFIG_SET_DIAG_LOG_SUBTOKENS OPT_ALTER_SERVER_CONFIG_SET_DIAG_LOG_SUBTOKENS;
    internal static OPT_ALTER_SERVER_CONFIG_SET_HADR_CLUSTER_SUBTOKENS OPT_ALTER_SERVER_CONFIG_SET_HADR_CLUSTER_SUBTOKENS;
    internal static OPT_ALTER_SERVER_CONFIG_SET_SUBTOKENS OPT_ALTER_SERVER_CONFIG_SET_SUBTOKENS;
    internal static OPT_ALTER_SERVER_TYPE_SUBTOKENS OPT_ALTER_SERVER_TYPE_SUBTOKENS;
    internal static OPT_ALTER_USER_WITH_SUBTOKENS OPT_ALTER_USER_WITH_SUBTOKENS;
    internal static OPT_ALTTAB_ACTIONS_SUBTOKENS OPT_ALTTAB_ACTIONS_SUBTOKENS;
    internal static OPT_ALTTAB_ENABLE_DISABLE_SUBTOKENS OPT_ALTTAB_ENABLE_DISABLE_SUBTOKENS;
    internal static OPT_AUDIT_TARGET_TYPE_SUBTOKENS OPT_AUDIT_TARGET_TYPE_SUBTOKENS;
    internal static OPT_AUTO_TUNING_DATABASE_TUNING_MODE_OPT_SUBTOKENS OPT_AUTO_TUNING_DATABASE_TUNING_MODE_OPT_SUBTOKENS;
    internal static OPT_COL_ADD_DROP_OPT_SUBTOKENS OPT_COL_ADD_DROP_OPT_SUBTOKENS;
    internal static OPT_COL_DEF_OPT_SUBTOKENS OPT_COL_DEF_OPT_SUBTOKENS;
    internal static OPT_COL_ENCRYPTION_OR_MASTER_KEY_SUBTOKENS OPT_COL_ENCRYPTION_OR_MASTER_KEY_SUBTOKENS;
    internal static OPT_CREATE_DB_OPT_SUBTOKENS OPT_CREATE_DB_OPT_SUBTOKENS;
    internal static OPT_CREATE_DB_TYPE_SUBTOKENS OPT_CREATE_DB_TYPE_SUBTOKENS;
    internal static OPT_CREATE_DROP_ALTER_SUBTOKENS OPT_CREATE_DROP_ALTER_SUBTOKENS;
    internal static OPT_CREATE_EXTERNALDATASOURCE_WITH_SUBTOKENS OPT_CREATE_EXTERNALDATASOURCE_WITH_SUBTOKENS;
    internal static OPT_CREATE_EXTERNALFILEFORMAT_WITH_SUBTOKENS OPT_CREATE_EXTERNALFILEFORMAT_WITH_SUBTOKENS;
    internal static OPT_CREATE_EXTERNALSTREAM_WITH_SUBTOKENS OPT_CREATE_EXTERNALSTREAM_WITH_SUBTOKENS;
    internal static OPT_CREATE_EXTERNALTABLE_WITH_SUBTOKENS OPT_CREATE_EXTERNALTABLE_WITH_SUBTOKENS;
    internal static OPT_CREATE_TABLE_WITH_LEDGER_OPT_SUBTOKENS OPT_CREATE_TABLE_WITH_LEDGER_OPT_SUBTOKENS;
    internal static OPT_CREATE_TABLE_WITH_LOCATION_OPT_SUBTOKENS OPT_CREATE_TABLE_WITH_LOCATION_OPT_SUBTOKENS;
    internal static OPT_CREATE_TAB_OPT_SUBTOKENS OPT_CREATE_TAB_OPT_SUBTOKENS;
    internal static OPT_CREATE_TAB_WITH_DATA_DELETION_OPT_SUBTOKENS OPT_CREATE_TAB_WITH_DATA_DELETION_OPT_SUBTOKENS;
    internal static OPT_CREATE_TAB_WITH_OPT_SUBTOKENS OPT_CREATE_TAB_WITH_OPT_SUBTOKENS;
    internal static OPT_CREATE_USER_WITH_SUBTOKENS OPT_CREATE_USER_WITH_SUBTOKENS;
    internal static OPT_DB_COPY_OPT_SUBTOKENS OPT_DB_COPY_OPT_SUBTOKENS;
    internal static OPT_DB_ENCRYPTION_OPT_SUBTOKENS OPT_DB_ENCRYPTION_OPT_SUBTOKENS;
    internal static OPT_DB_SCOPED_CONFIG_OPT_SUBTOKENS OPT_DB_SCOPED_CONFIG_OPT_SUBTOKENS;
    internal static OPT_DUMP_COMPRESSION_OPT_SUBTOKENS OPT_DUMP_COMPRESSION_OPT_SUBTOKENS;
    internal static OPT_DUMP_ENCRYPTION_OPT_SUBTOKENS OPT_DUMP_ENCRYPTION_OPT_SUBTOKENS;
    internal static OPT_DUMP_OPT_SUBTOKENS OPT_DUMP_OPT_SUBTOKENS;
    internal static OPT_EXTERNAL_LANGUAGE_FILE_SPEC_OPT_SUBTOKENS OPT_EXTERNAL_LANGUAGE_FILE_SPEC_OPT_SUBTOKENS;
    internal static OPT_EXTERNAL_LIBRARY_FILE_SPEC_OPT_SUBTOKENS OPT_EXTERNAL_LIBRARY_FILE_SPEC_OPT_SUBTOKENS;
    internal static OPT_EXTERNAL_POOL_AFFINITY_TYPE_SUBTOKENS OPT_EXTERNAL_POOL_AFFINITY_TYPE_SUBTOKENS;
    internal static OPT_EXTERNAL_TYPE_SUBTOKENS OPT_EXTERNAL_TYPE_SUBTOKENS;
    internal static OPT_FILESTREAM_DB_OPT_SUBTOKENS OPT_FILESTREAM_DB_OPT_SUBTOKENS;
    internal static OPT_FTS_PROPERTY_SUBTOKENS OPT_FTS_PROPERTY_SUBTOKENS;
    internal static OPT_FULLTEXT_SEARCH_SUBTOKENS OPT_FULLTEXT_SEARCH_SUBTOKENS;
    internal static OPT_GEODR_OPT_SUBTOKENS OPT_GEODR_OPT_SUBTOKENS;
    internal static OPT_GRAPH_ID_OR_FILETABLE_SUBTOKENS OPT_GRAPH_ID_OR_FILETABLE_SUBTOKENS;
    internal static OPT_INDEX_SORT_OPT_SUBTOKENS OPT_INDEX_SORT_OPT_SUBTOKENS;
    internal static OPT_IND_ACTIONS_SUBTOKENS OPT_IND_ACTIONS_SUBTOKENS;
    internal static OPT_IND_OPTIONS_SUBTOKENS OPT_IND_OPTIONS_SUBTOKENS;
    internal static OPT_IN_INLINE_INDEX_SYNTAX_SUBTOKENS OPT_IN_INLINE_INDEX_SYNTAX_SUBTOKENS;
    internal static OPT_LOAD_OPT_SUBTOKENS OPT_LOAD_OPT_SUBTOKENS;
    internal static OPT_OPT_STORAGE_ID_SUBTOKENS OPT_OPT_STORAGE_ID_SUBTOKENS;
    internal static OPT_OPT_SXI_PATH_KIND_SUBTOKENS OPT_OPT_SXI_PATH_KIND_SUBTOKENS;
    internal static OPT_OPT_SXI_PATH_OPTION_SUBTOKENS OPT_OPT_SXI_PATH_OPTION_SUBTOKENS;
    internal static OPT_OVER_CLAUSE_SUBTOKENS OPT_OVER_CLAUSE_SUBTOKENS;
    internal static OPT_PERSISTENT_LOG_BUFFER_OPT_SUBTOKENS OPT_PERSISTENT_LOG_BUFFER_OPT_SUBTOKENS;
    internal static OPT_POOL_AFFINITY_TYPE_SUBTOKENS OPT_POOL_AFFINITY_TYPE_SUBTOKENS;
    internal static OPT_QUERY_STORE_OPT_SUBTOKENS OPT_QUERY_STORE_OPT_SUBTOKENS;
    internal static OPT_REMOTE_DATA_ARCHIVE_OPT_SUBTOKENS OPT_REMOTE_DATA_ARCHIVE_OPT_SUBTOKENS;
    internal static OPT_SECURITY_POLICY_SUBTOKENS OPT_SECURITY_POLICY_SUBTOKENS;
    internal static OPT_SEQUENCE_OPTIONS_SUBTOKENS OPT_SEQUENCE_OPTIONS_SUBTOKENS;
    internal static OPT_SYSTEM_VERSIONING_OPT_SUBTOKENS OPT_SYSTEM_VERSIONING_OPT_SUBTOKENS;
    internal static OPT_TAB_LOCK_OPT_SUBTOKENS OPT_TAB_LOCK_OPT_SUBTOKENS;
    internal static OPT_TAB_OPT_NAME_SUBTOKENS OPT_TAB_OPT_NAME_SUBTOKENS;
    internal static OPT_VIEW_SNAPSHOT_SUBTOKENS OPT_VIEW_SNAPSHOT_SUBTOKENS;
    internal static OptBeginTypes OptBeginTypes;
    internal static OptDumpTypes OptDumpTypes;
    internal static OptEventNotifObjectOn OptEventNotifObjectOn;
    internal static OptGlobalVariable OptGlobalVariable;
    internal static OptGroupBy OptGroupBy;
    internal static OptLoadTypes OptLoadTypes;
    internal static OptOpenCloseTypes OptOpenCloseTypes;
    internal static OptStmtStarters OptStmtStarters;
    protected ContextKeywords(StringToken[] stringTokens, Int32[] tokenIds, int defaultToken);
    private static ContextKeywords();
    public bool TryGetTokenId(StringToken stringToken, Int32& tokenId);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ADD_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AFFINITY_TYPE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AFTER_BEGIN_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AFTER_END_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AFTER_FTS_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AFTER_WITH_EXEC_OPTION_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AFTER_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AG_REPLICA_OPTION_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_DB_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_EXTERNAL_LANGUAGE_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_EXTERNAL_LIBRARY_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_EXTERNALDATASOURCE_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_SERVER_CONFIG_SET_DIAG_LOG_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_SERVER_CONFIG_SET_HADR_CLUSTER_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_SERVER_CONFIG_SET_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_SERVER_TYPE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTER_USER_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTTAB_ACTIONS_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_ALTTAB_ENABLE_DISABLE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AUDIT_TARGET_TYPE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_AUTO_TUNING_DATABASE_TUNING_MODE_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_COL_ADD_DROP_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_COL_DEF_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_COL_ENCRYPTION_OR_MASTER_KEY_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_DB_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_DB_TYPE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_DROP_ALTER_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_EXTERNALDATASOURCE_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_EXTERNALFILEFORMAT_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_EXTERNALSTREAM_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_EXTERNALTABLE_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_TAB_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_TAB_WITH_DATA_DELETION_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_TAB_WITH_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_TABLE_WITH_LEDGER_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_TABLE_WITH_LOCATION_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_CREATE_USER_WITH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_DB_COPY_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_DB_ENCRYPTION_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_DB_SCOPED_CONFIG_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_DUMP_COMPRESSION_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_DUMP_ENCRYPTION_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_DUMP_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_EXTERNAL_LANGUAGE_FILE_SPEC_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_EXTERNAL_LIBRARY_FILE_SPEC_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_EXTERNAL_POOL_AFFINITY_TYPE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_EXTERNAL_TYPE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_FILESTREAM_DB_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_FTS_PROPERTY_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_FULLTEXT_SEARCH_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_GEODR_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_GRAPH_ID_OR_FILETABLE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_IN_INLINE_INDEX_SYNTAX_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_IND_ACTIONS_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_IND_OPTIONS_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_INDEX_SORT_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_LOAD_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_OPT_STORAGE_ID_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_OPT_SXI_PATH_KIND_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_OPT_SXI_PATH_OPTION_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_OVER_CLAUSE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_PERSISTENT_LOG_BUFFER_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_POOL_AFFINITY_TYPE_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_QUERY_STORE_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_REMOTE_DATA_ARCHIVE_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_SECURITY_POLICY_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_SEQUENCE_OPTIONS_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_SYSTEM_VERSIONING_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_TAB_LOCK_OPT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_TAB_OPT_NAME_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OPT_VIEW_SNAPSHOT_SUBTOKENS : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptBeginTypes : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptDumpTypes : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptEventNotifObjectOn : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptGlobalVariable : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptGroupBy : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptLoadTypes : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptOpenCloseTypes : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.OptStmtStarters : ContextKeywords {
    private static StringToken[] GetStringTokens();
    private static Int32[] GetTokenIds();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.ParseContext : SqlCodeObject {
    private ParseOptions parseOptions;
    private TokenManager firstLevelTokenManager;
    private TokenManager tokenManager;
    private bool enableSideEffectsTrace;
    private List`1<SideEffect> sideEffects;
    private ParseContextState currentState;
    private ParsePhaseContext parsePhase;
    private BindPhaseContext bindPhase;
    internal bool IsErrorRecoveryEnabled { get; }
    internal bool IsVisitable { get; }
    public SqlStatement Statement { get; }
    public TokenManager TokenManager { get; }
    public ParseContextState CurrentState { get; }
    public TokenUpdateDiff Diff { get; }
    public ParseContext PrevContext { get; }
    public ErrorHandler ErrorHandler { get; }
    public ParseContext(ParserScanner scanner, ParseOptions parseOptions, bool enableSideEffectsTrace);
    public void BeginParse(ErrorHandler errorHandler, ShiftReduceParser currentParser, SqlScript prevScript);
    public void EndParse();
    public void BeginBind(ErrorHandler errorHandler);
    public void EndBind();
    internal void ResetBind();
    internal bool get_IsErrorRecoveryEnabled();
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public virtual SqlStatement get_Statement();
    public virtual TokenManager get_TokenManager();
    public ParseContextState get_CurrentState();
    public TokenUpdateDiff get_Diff();
    public void SetSideEffectMode(bool sideEffectMode);
    public void AddLastStatement(SqlStatement statement);
    public void PostParseErrorChecking();
    public SideEffectSpan RegisterReduction();
    public void BeginNewBatchParsing();
    public bool IsStatementReusable(SqlStatement sqlStatement);
    public void ReuseStatement(SqlStatement sqlStatement);
    public ParseContext get_PrevContext();
    public ErrorHandler get_ErrorHandler();
}
public enum Microsoft.SqlServer.Management.SqlParser.Parser.Internals.ParseContextState : Enum {
    public int value__;
    public static ParseContextState Initial;
    public static ParseContextState Parsing;
    public static ParseContextState ParseCompleted;
    public static ParseContextState Binding;
    public static ParseContextState BindCompleted;
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.ParseNode : ValueType {
    public object value;
    public string Xml { get; }
    public ParseNode(SqlCodeObject value);
    public void WriteXml(XmlWriter writer);
    public string get_Xml();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.ReusableStatementsCollection : object {
    private ParserStack`1<SqlStatement> statementStack;
    private ParseContext parseContext;
    private IParserTestSink parserTestSink;
    public SqlStatement Current { get; }
    public ReusableStatementsCollection(SqlScript prevScript, ParseContext parseContext, IParserTestSink parserTestSink);
    private void AddReusableStatements(SqlCodeObject stmtLevelObj);
    public SqlStatement get_Current();
    public void RemoveCurrent();
    public void SplitCurrent();
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.Scanner : object {
    private static KeywordLookup keywords80;
    private static KeywordLookup keywords90;
    private static KeywordLookup keywords100;
    private static KeywordLookup keywords110;
    private static KeywordLookup keywords120;
    private static KeywordLookup keywords130;
    private static KeywordLookup keywords140;
    private static KeywordLookup keywords150;
    private static KeywordLookup keywords160;
    private static KeywordLookup keywords170;
    private static KeywordLookup keywordsAzure;
    private static int EntryStateSize;
    private static int QuotedIdentifierStateSize;
    private static int CommentLevelSize;
    private static int QuotedIdentifierSubStateSize;
    private static int ExecSubStateSize;
    private static int ReservedSize;
    private static int MaxNumEntryStates;
    private static int MaxNumQuotedIdentifierStates;
    private static int MaxNumCommentLevels;
    private static int MaxNumQuotedIdentifierSubStates;
    private static int MaxNumExecSubStates;
    private static int MaxIndexEntryState;
    private static int MaxIndexQuotedIdentifierState;
    private static int MaxIndexCommentLevel;
    private static int MaxIndexQuotedIdentifierSubState;
    private static int MaxIndexExecSubState;
    private static int EntryStateOffset;
    private static int QuotedIdentifierStateOffset;
    private static int CommentLevelOffset;
    private static int QuotedIdentifierSubStateOffset;
    private static int ExecSubStateOffset;
    private static int ReservedOffset;
    private static int EntryStateMask;
    private static int QuotedIdentifierStateMask;
    private static int CommentLevelMask;
    private static int QuotedIdentifierSubStateMask;
    private static int ExecSubStateMask;
    private static int ReservedMask;
    private string source;
    private int atomStartIndex;
    private int atomEndIndex;
    private int state;
    private string batchSeparator;
    private int compatibilityLevel;
    private KeywordLookup Keywords;
    private SpecialTokenIntepretation tokenContext;
    private AdvancePredicate IsCloseBracketPredicate;
    private AdvancePredicate IsCurrencyPredicate;
    private AdvancePredicate IsDigitPredicate;
    private AdvancePredicate IsHexadecimalPredicate;
    private AdvancePredicate IsIdentifierStartPredicate;
    private AdvancePredicate IsIdentifierCharacterPredicate;
    private AdvancePredicate IsQuotePredicate;
    private AdvancePredicate IsSpacePredicate;
    private AdvancePredicate IsWhiteSpacePredicate;
    private AdvancePredicate NotStarOrSlashPredicate;
    private AdvancePredicate ToEOLPredicate;
    private static List`1<int> characterMapKeys;
    private static List`1<CharacterClass> characterMapValues;
    private EntryStateValues EntryState { get; private set; }
    private QuotedIdentifierStateValues QuotedIdentifierState { get; private set; }
    private UInt32 CommentLevel { get; private set; }
    private QuotedIdentifierSubStateValues QuotedIdentifierSubState { get; private set; }
    private ExecSubStateValues ExecSubState { get; private set; }
    private bool IsQuotedIdentifierSet { get; }
    public Scanner(ParseOptions options);
    private static Scanner();
    private static KeywordData[] CreateKeywordList80(bool includeDep);
    private static KeywordData[] CreateKeywordList90(bool includeDep);
    private static KeywordData[] CreateKeywordList100(bool includeDep);
    private static KeywordData[] CreateKeywordList110(bool includeDep);
    private static KeywordData[] CreateKeywordList120(bool includeDep);
    private static KeywordData[] CreateKeywordList130(bool includeDep);
    private static KeywordData[] CreateKeywordList140(bool includeDep);
    private static KeywordData[] CreateKeywordList150(bool includeDep);
    private static KeywordData[] CreateKeywordList160(bool includeDep);
    private static KeywordData[] CreateKeywordList170(bool includeDep);
    private void set_EntryState(EntryStateValues value);
    private EntryStateValues get_EntryState();
    private void set_QuotedIdentifierState(QuotedIdentifierStateValues value);
    private QuotedIdentifierStateValues get_QuotedIdentifierState();
    private void set_CommentLevel(UInt32 value);
    private UInt32 get_CommentLevel();
    private void set_QuotedIdentifierSubState(QuotedIdentifierSubStateValues value);
    private QuotedIdentifierSubStateValues get_QuotedIdentifierSubState();
    private void set_ExecSubState(ExecSubStateValues value);
    private ExecSubStateValues get_ExecSubState();
    private bool get_IsQuotedIdentifierSet();
    private Tokens GetIdToken(string buffer, int startIndex, int length);
    public void SetSource(string source, int position);
    public int GetNext(Int32& state, Int32& start, Int32& end);
    internal int GetNext(Int32& state, Int32& start, Int32& end, Boolean& isPairMatch, Boolean& isExecAutoParamHelp);
    public static TokenManager ScanSource(ErrorHandler errorHandler, string source, ParseOptions options, ParseOptions& resultOptions);
    private int Scan();
    private void RunQuotedIdentifierSubStateTransitions(int tokenID);
    private void RunExecSubStateTransitions(int tokenID);
    private bool TestEof();
    private int ScanMultilineComment();
    private int IncrementMultilineNesting();
    private int DecrementMultilineNesting();
    private int ScanBase();
    private int ScanDollar();
    private int ScanCompoundOperator(char current);
    private int ScanColon();
    private int ScanDot();
    private int ScanOpeningN();
    private int ScanMoney();
    private bool TestEndOfLineOrFile(Char& next);
    private bool TestEndOfLine(int index);
    private static bool ToEOL(char c);
    private int ScanEndOfLineComment();
    private int ScanNumeric();
    private int ScanBinaryConstant();
    private int ScanForDecimal();
    internal static bool IsValueTooLargeForTokenInteger(string source, int atomStartIndex, int atomEndIndex);
    private int ScanWhiteSpace();
    private int ScanIdentifier();
    private void AdvanceWhile(AdvancePredicate predicate, bool condition);
    private static bool IsAccumulatorToken(int tokenId);
    private static int GetTerminatorId(int accumulatorId);
    private int ScanSequence(AdvancePredicate terminatorCharPredicate, int accumlatorId, int terminatorId);
    private int ScanTicString();
    private int ScanQuoted();
    private int ScanBracketed();
    private static bool IsCloseBracket(char c);
    private static bool IsCurrency(char c);
    private static bool IsDigit(char c);
    private static bool IsEOL(char c);
    private static bool IsHexadecimal(char c);
    internal static bool IsIdentifierStart(char c);
    internal static bool IsIdentifierCharacter(char c);
    private static bool IsQuote(char c);
    private static bool IsSpace(char c);
    private static bool IsWhiteSpace(char c);
    private static bool IsTic(char c);
    private static bool NotStarOrSlash(char c);
    private static bool IsPAlpha(char c);
    private static bool IsPAlphaNonFirst(char c);
    private static bool IsPExoticMoney(char c);
    private static bool IsPIgSpace(char c);
    private static bool IsPMoney(char c);
    private static bool IsPNumber(char c);
    private static CharacterClass LookupCharacterClass(char c);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.SideEffectSpan : object {
    private int beginIndex;
    private int endIndex;
    public int BeginIndex { get; }
    public int EndIndex { get; }
    public SideEffectSpan(int index);
    public SideEffectSpan(int beginIndex, int endIndex);
    public int get_BeginIndex();
    public int get_EndIndex();
    public SideEffectSpan ShiftBy(int delta);
}
internal abstract class Microsoft.SqlServer.Management.SqlParser.Parser.Internals.VersionedParserBase : ShiftReduceParser {
    protected SqlBatch root;
    public VersionedParserBase(ParserConfig parserConfig);
    private static ParserScanner CreateParserScanner(ErrorHandler errorHandler, string sql, ParseOptions options, ParseOptions& resultOptions);
    public SqlScript Parse(bool isIncremental, string sql, SqlScript prevScript, ParseOptions options, ParseOptions& resultOptions);
    protected bool ExpectKeyword(StringToken keyword, LexLocation lexLocation);
    protected bool ExpectKeywords(IEnumerable`1<StringToken> keywords, LexLocation lexLocation);
    protected bool IsMaxAbsoluteIntegerValue(string value);
    protected static void SyntaxError(LexLocation lexLocation);
    protected static void SyntaxError(string tokenString, LexLocation lexLocation);
    protected static void ReportError(string errorMessage, LexLocation lexLocation);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals105.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2865(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals105.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals105.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2865(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals110.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3161(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals110.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals110.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3161(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals120.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3245(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals120.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals120.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3245(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals130.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3636(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals130.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals130.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3636(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals140.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3717(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals140.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals140.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3717(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals150.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3906(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals150.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals150.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3906(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals160.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3949(int action);
    private void DoAction_3950_3966(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals160.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals160.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3949(int action);
    private void DoAction_3950_3966(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals170.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3949(int action);
    private void DoAction_3950_3966(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals170.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.Internals170.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3949(int action);
    private void DoAction_3950_3966(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.InternalsAzure.Parser : VersionedParserBase {
    public static ParserConfig ParserConfig;
    private static Parser();
    protected virtual StateOnlyParser CreateStateOnlyParser();
    protected virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3949(int action);
    private void DoAction_3950_3976(int action);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.InternalsAzure.ParserConfig : ParserConfig {
    public virtual ContextKeywords GetContextKeywordsByContext(TokenTransformContext context);
    public virtual TokenTransformContext GetTransformContext(State state, int token);
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.InternalsAzure.StateOnlyParser : StateOnlyParser {
    internal StateOnlyParser(SimpleParserScanner baseScanner);
    public virtual StateOnlyParser Create();
    public virtual void DoAction(int action);
    private void DoAction_0_49(int action);
    private void DoAction_50_99(int action);
    private void DoAction_100_149(int action);
    private void DoAction_150_199(int action);
    private void DoAction_200_249(int action);
    private void DoAction_250_299(int action);
    private void DoAction_300_349(int action);
    private void DoAction_350_399(int action);
    private void DoAction_400_449(int action);
    private void DoAction_450_499(int action);
    private void DoAction_500_549(int action);
    private void DoAction_550_599(int action);
    private void DoAction_600_649(int action);
    private void DoAction_650_699(int action);
    private void DoAction_700_749(int action);
    private void DoAction_750_799(int action);
    private void DoAction_800_849(int action);
    private void DoAction_850_899(int action);
    private void DoAction_900_949(int action);
    private void DoAction_950_999(int action);
    private void DoAction_1000_1049(int action);
    private void DoAction_1050_1099(int action);
    private void DoAction_1100_1149(int action);
    private void DoAction_1150_1199(int action);
    private void DoAction_1200_1249(int action);
    private void DoAction_1250_1299(int action);
    private void DoAction_1300_1349(int action);
    private void DoAction_1350_1399(int action);
    private void DoAction_1400_1449(int action);
    private void DoAction_1450_1499(int action);
    private void DoAction_1500_1549(int action);
    private void DoAction_1550_1599(int action);
    private void DoAction_1600_1649(int action);
    private void DoAction_1650_1699(int action);
    private void DoAction_1700_1749(int action);
    private void DoAction_1750_1799(int action);
    private void DoAction_1800_1849(int action);
    private void DoAction_1850_1899(int action);
    private void DoAction_1900_1949(int action);
    private void DoAction_1950_1999(int action);
    private void DoAction_2000_2049(int action);
    private void DoAction_2050_2099(int action);
    private void DoAction_2100_2149(int action);
    private void DoAction_2150_2199(int action);
    private void DoAction_2200_2249(int action);
    private void DoAction_2250_2299(int action);
    private void DoAction_2300_2349(int action);
    private void DoAction_2350_2399(int action);
    private void DoAction_2400_2449(int action);
    private void DoAction_2450_2499(int action);
    private void DoAction_2500_2549(int action);
    private void DoAction_2550_2599(int action);
    private void DoAction_2600_2649(int action);
    private void DoAction_2650_2699(int action);
    private void DoAction_2700_2749(int action);
    private void DoAction_2750_2799(int action);
    private void DoAction_2800_2849(int action);
    private void DoAction_2850_2899(int action);
    private void DoAction_2900_2949(int action);
    private void DoAction_2950_2999(int action);
    private void DoAction_3000_3049(int action);
    private void DoAction_3050_3099(int action);
    private void DoAction_3100_3149(int action);
    private void DoAction_3150_3199(int action);
    private void DoAction_3200_3249(int action);
    private void DoAction_3250_3299(int action);
    private void DoAction_3300_3349(int action);
    private void DoAction_3350_3399(int action);
    private void DoAction_3400_3449(int action);
    private void DoAction_3450_3499(int action);
    private void DoAction_3500_3549(int action);
    private void DoAction_3550_3599(int action);
    private void DoAction_3600_3649(int action);
    private void DoAction_3650_3699(int action);
    private void DoAction_3700_3749(int action);
    private void DoAction_3750_3799(int action);
    private void DoAction_3800_3849(int action);
    private void DoAction_3850_3899(int action);
    private void DoAction_3900_3949(int action);
    private void DoAction_3950_3976(int action);
}
internal interface Microsoft.SqlServer.Management.SqlParser.Parser.IParserTestSink {
    public abstract virtual void StatementEvent(SqlStatement sqlStatement, StatementEventType eventType);
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.Location : object {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    public int LineNumber { get; internal set; }
    public int ColumnNumber { get; internal set; }
    public int Offset { get; internal set; }
    public Location(int lineNumber, int columnNumber, int offset);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
internal void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
internal void set_Offset(int value);
    public virtual string ToString();
    public sealed virtual int CompareTo(Location other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.PairMatch : object {
    public Token StartToken;
    public Token EndToken;
    public bool IsStartEnd;
    internal PairMatch(Token startToken, Token endToken, bool isStartEnd);
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.ParseOptions : object {
    private static string DefaultBatchSeparator;
    private static bool DefalutIsQuotedIdentifierSet;
    private static bool DefaultIsErrorRecoveryEnabled;
    private static DatabaseCompatibilityLevel DefaultCompatibilityLevel;
    private static TransactSqlVersion DefaultTransactSqlVersion;
    [CompilerGeneratedAttribute]
private string <BatchSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseCompatibilityLevel <CompatibilityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuotedIdentifierSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsErrorRecoveryEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactSqlVersion <TransactSqlVersion>k__BackingField;
    public string BatchSeparator { get; public set; }
    public DatabaseCompatibilityLevel CompatibilityLevel { get; public set; }
    public bool IsQuotedIdentifierSet { get; public set; }
    public bool IsErrorRecoveryEnabled { get; public set; }
    public TransactSqlVersion TransactSqlVersion { get; public set; }
    public ParseOptions(string batchSeparator);
    public ParseOptions(bool isQuotedIdentifierSet);
    internal ParseOptions(ParseOptions rhs);
    public ParseOptions(string batchSeparator, bool isQuotedIdentifierSet);
    public ParseOptions(string batchSeparator, bool isQuotedIdentifierSet, DatabaseCompatibilityLevel compatibilityLevel);
    public ParseOptions(string batchSeparator, bool isQuotedIdentifierSet, DatabaseCompatibilityLevel compatibilityLevel, TransactSqlVersion transactSqlVersion);
    [CompilerGeneratedAttribute]
public string get_BatchSeparator();
    [CompilerGeneratedAttribute]
public void set_BatchSeparator(string value);
    [CompilerGeneratedAttribute]
public DatabaseCompatibilityLevel get_CompatibilityLevel();
    [CompilerGeneratedAttribute]
public void set_CompatibilityLevel(DatabaseCompatibilityLevel value);
    [CompilerGeneratedAttribute]
public bool get_IsQuotedIdentifierSet();
    [CompilerGeneratedAttribute]
public void set_IsQuotedIdentifierSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsErrorRecoveryEnabled();
    [CompilerGeneratedAttribute]
public void set_IsErrorRecoveryEnabled(bool value);
    [CompilerGeneratedAttribute]
public TransactSqlVersion get_TransactSqlVersion();
    [CompilerGeneratedAttribute]
public void set_TransactSqlVersion(TransactSqlVersion value);
    public bool Equals(ParseOptions other);
}
public static class Microsoft.SqlServer.Management.SqlParser.Parser.Parser : object {
    private static VersionedParserBase CreateVersionedParser(ParseOptions options);
    public static ParseResult Parse(string sql);
    public static ParseResult Parse(string sql, ParseOptions options);
    public static ParseResult Parse(string sql, ParseOptions options, ParseOptions& resultOptions);
    public static ParseResult IncrementalParse(string sql, ParseResult prevResult);
    public static ParseResult IncrementalParse(string sql, ParseResult prevResult, ParseOptions options);
    public static ParseResult IncrementalParse(string sql, ParseResult prevResult, ParseOptions options, ParseOptions& resultOptions);
    internal static ParseResult Parse(bool isIncremental, string sql, ParseResult prevResult, ParseOptions options, ParseOptions& resultOptions);
    internal static ParseResult Parse(bool isIncremental, string sql, ParseResult prevResult, ParseOptions options, ParseOptions& resultOptions, IParserTestSink parserTestSink);
    [ConditionalAttribute("DEBUG")]
internal static void ParseStates(string sql, List`1<bool> states);
    internal static TokenManager ScanSource(string sql, ParseOptions options);
}
[DebuggerDisplayAttribute("ParseResult {ResultId}")]
public class Microsoft.SqlServer.Management.SqlParser.Parser.ParseResult : ParseResultBase {
    private static long resultId;
    private SqlScript sqlScript;
    public IEnumerable`1<ErrorBase> Errors { get; }
    public SqlScript Script { get; }
    internal ParseResult(SqlScript sqlScript);
    public IEnumerable`1<ErrorBase> get_Errors();
    public SqlScript get_Script();
    public int GetTokenNumber(int line, int col);
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.ParseResultBase : object {
    [CompilerGeneratedAttribute]
private int <BatchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ErrorBase> <ParseErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ResultId>k__BackingField;
    public int BatchCount { get; internal set; }
    public IEnumerable`1<ErrorBase> ParseErrors { get; internal set; }
    public long ResultId { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_BatchCount();
    [CompilerGeneratedAttribute]
internal void set_BatchCount(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ErrorBase> get_ParseErrors();
    [CompilerGeneratedAttribute]
internal void set_ParseErrors(IEnumerable`1<ErrorBase> value);
    [CompilerGeneratedAttribute]
public long get_ResultId();
    [CompilerGeneratedAttribute]
internal void set_ResultId(long value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.SqlParser.Parser.ParserTokenList : object {
    private IMinimalList`1<TokenData> parentList;
    private int eofStartIndex;
    private int rangeBegin;
    private int rangeEnd;
    private Dictionary`2<int, TokenData> overrideValues;
    private List`1<int> modifiedKeys;
    private int maxReadKey;
    public int MaxReadKey { get; }
    private int MaxModifiedKey { get; }
    public int Count { get; }
    public TokenData Item { get; public set; }
    public ParserTokenList(IMinimalList`1<TokenData> parentList, int eofStartIndex);
    public int get_MaxReadKey();
    public void SetCurrentRange(int rangeBegin, int rangeEnd);
    public void SetCurrentRange(LexLocation tokenRange);
    public void CopyModifications(ModifiedMinimalList`1<TokenData> parserTokenList, int oldBeginIndex, int oldEndIndex, int newBeginIndex, int newEndIndex);
    public IMinimalList`1<TokenData> CreateReadonlyMinimalList();
    private int get_MaxModifiedKey();
    public sealed virtual int get_Count();
    public sealed virtual TokenData get_Item(int index);
    public sealed virtual void set_Item(int index, TokenData value);
}
public static class Microsoft.SqlServer.Management.SqlParser.Parser.ParseUtils : object {
    public static IDictionary`2<string, object> RetrieveModuleDefinition(string sql, ParseOptions parseOptions);
    internal static SqlParameterDeclarationCollection RetrieveStoredProcParameters(ParseResult parseResult);
    public static IDictionary`2<string, object> RetrieveTriggerDefinition(string sql, ParseOptions parseOptions);
    public static IDictionary`2<string, object> RetrieveViewDefinition(string sql, ParseOptions parseOptions);
    private static List`1<IDictionary`2<string, object>> GetParametersInfo(SqlParameterDeclarationCollection parameterDecls);
    private static string GetExtendedQueryDefinitionText(SqlScript sqlScript, SqlCodeObject firstDefinitionObj, SqlCodeObject lastDefinitionObj);
    private static string GetExtendedBodyDefinitionText(SqlScript sqlScript, SqlCodeObject firstDefinitionObj);
}
public static class Microsoft.SqlServer.Management.SqlParser.Parser.PropertyKeys : object {
    public static string BodyDefinition;
    public static string DatabaseName;
    public static string DefaultValue;
    public static string HasColumnSpecification;
    public static string HasCheckOption;
    public static string ModuleType;
    public static string Name;
    public static string SchemaName;
    public static string Parameters;
    public static string QueryDefinition;
    public static string TableVariableName;
    private static PropertyKeys();
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.Scanner : object {
    private Scanner scanner;
    public Scanner(ParseOptions options);
    public void SetSource(string source, int offset);
    public int GetNext(Int32& state, Int32& start, Int32& end, Boolean& isPairMatch, Boolean& isExecAutoParamHelp);
}
public enum Microsoft.SqlServer.Management.SqlParser.Parser.StatementEventType : Enum {
    public int value__;
    public static StatementEventType NotReusable;
    public static StatementEventType Reused;
    public static StatementEventType RejectedByPosition;
    public static StatementEventType RejectedByState;
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.Token : object {
    private int id;
    private string text;
    private Location startLocation;
    private Location endLocation;
    public string Text { get; }
    public int Id { get; }
    public string Type { get; }
    public Location StartLocation { get; }
    public Location EndLocation { get; }
    public bool IsSignificant { get; }
    public string Xml { get; }
    internal Token(int id, string text, Location startLocation, Location endLocation);
    public string get_Text();
    public int get_Id();
    public string get_Type();
    public Location get_StartLocation();
    public Location get_EndLocation();
    public bool get_IsSignificant();
    public void WriteXml(XmlWriter writer);
    public string get_Xml();
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.SqlParser.Parser.TokenManager : object {
    private string source;
    private IMinimalList`1<TokenData> tokens;
    private List`1<int> newLines;
    private List`1<int> batchSeparators;
    private int compatibilityLevel;
    private static IndexComparer indexComparer;
    private static int TokenLeftParen;
    private static int TokenRightParen;
    private static int TokenBegin;
    private static int TokenEnd;
    private static int TokenBeginCS;
    private static int TokenEndCS;
    private static int TokenTryBegin;
    private static int TokenTryEnd;
    private static int TokenCatchBegin;
    private static int TokenCatchEnd;
    private static PairTokenId PairIdParens;
    private static PairTokenId PairIdBeginEnd;
    private static PairTokenId PairIdTryBeginEnd;
    private static PairTokenId PairIdCatchBeginEnd;
    public string Source { get; }
    public IMinimalList`1<TokenData> TokenList { get; }
    public List`1<int> NewLines { get; }
    public List`1<int> BatchSeparators { get; }
    public int CompatibilityLevel { get; }
    public int Count { get; }
    public TokenManager(string source, IMinimalList`1<TokenData> tokens, List`1<int> newLines, List`1<int> batchSeparators, int compatibilityLevel);
    private static TokenManager();
    public string get_Source();
    public IMinimalList`1<TokenData> get_TokenList();
    public List`1<int> get_NewLines();
    public List`1<int> get_BatchSeparators();
    public int get_CompatibilityLevel();
    public int GetBatchCount();
    public LexLocation GetBatchRange(int batchNumber);
    internal static bool IsSignificantToken(int id);
    internal static bool IsSingleCharacterToken(int id);
    internal static bool IsCompoundOperatorToken(int id);
    public string GetText(int startTokenNumber, int endTokenNumber);
    public string GetText(LexLocation loc);
    internal int GetId(int tokenNumber);
    private int GetOriginalId(int tokenNumber);
    private bool IsDead(int tokenNumber);
    public string GetText(int tokenNumber);
    internal StringToken GetStringToken(int tokenNumber);
    internal int GetLineNumber(int charIndex);
    internal int GetColumnNumber(int charIndex, int line);
    internal int GetLastCaretColumnNumber(int line);
    internal Location GetLocation(int tokenNumber);
    public int get_Count();
    public bool IsTokenComment(int tokenId);
    public bool IsTokenWhitespace(int tokenId);
    internal bool IsTokenTrueMultiLineComment(int tokenId, Location startLocation, Location endLocation);
    public Token GetToken(int tokenNumber);
    public int FindToken(int line, int col);
    internal string RetrieveStatementName(LexLocation lexLocation);
    internal LexLocation GetCaretLexLocation(int line, int col);
    internal LexLocation GetAltCaretLexLocation(LexLocation caretLocation);
    internal LexLocation GetCursorLocation(int line, int col);
    internal int FindTokenInRange(int id, int beginIndex, int endIndex);
    internal int GetNextSignificantTokenIndex(int tokenIndex);
    public int GetPreviousSignificantTokenIndex(int tokenIndex);
    public int GetTokenStartIndex(int index);
    public int GetTokenEndIndex(int index);
    public PairMatch FindPairMatch(int line, int column);
    private PairMatch FindPairMatch(int tokenNumber);
    private int FindPairEndToken(int tokenNumber, PairTokenId pairId);
    private int FindPairStartToken(int tokenNumber, PairTokenId pairId);
    private PairMatch MakePairMatch(int startTokenNumber, int endTokenNumber, bool isStartEnd);
    private PairMatch MakeTryOrCatchPairMatch(int startTokenNumber, int endTokenNumber, bool isStartEnd);
    private static bool CompareTokens(TokenManager src1, int i1, TokenManager src2, int i2);
    internal static TokenUpdateDiff CalculateTokenUpdateDiff(TokenManager source, TokenManager target);
}
public enum Microsoft.SqlServer.Management.SqlParser.Parser.Tokens : Enum {
    public int value__;
    public static Tokens error;
    public static Tokens EOF;
    public static Tokens NON_EMPTY;
    public static Tokens Lowest;
    public static Tokens error_1_discard_max;
    public static Tokens error_unlimited_discard;
    public static Tokens lower_than_left_paren;
    public static Tokens lower_than_grant;
    public static Tokens TOKEN_OR;
    public static Tokens TOKEN_AND;
    public static Tokens TOKEN_NOT;
    public static Tokens TOKEN_c_AT_TIME_ZONE;
    public static Tokens TOKEN_LEFTSHIFT;
    public static Tokens TOKEN_RIGHTSHIFT;
    public static Tokens TOKEN_DOUBLECOLON;
    public static Tokens TOKEN_ELSE;
    public static Tokens TOKEN_WITH;
    public static Tokens TOKEN_WITH_CHECK;
    public static Tokens TOKEN_GRANT;
    public static Tokens TOKEN_REVOKE;
    public static Tokens TOKEN_CREATE;
    public static Tokens TOKEN_DENY;
    public static Tokens TOKEN_DROP;
    public static Tokens TOKEN_ADD;
    public static Tokens TOKEN_SET;
    public static Tokens TOKEN_FETCH;
    public static Tokens TOKEN_CROSS;
    public static Tokens TOKEN_FULL;
    public static Tokens TOKEN_INNER;
    public static Tokens TOKEN_OUTER;
    public static Tokens TOKEN_LEFT;
    public static Tokens TOKEN_RIGHT;
    public static Tokens TOKEN_UNION;
    public static Tokens TOKEN_JOIN;
    public static Tokens TOKEN_PIVOT;
    public static Tokens TOKEN_UNPIVOT;
    public static Tokens Highest;
    public static Tokens TOKEN_GRAMMAR_STANDARD_TSQL;
    public static Tokens TOKEN_GRAMMAR_SPCURSOROPEN;
    public static Tokens TOKEN_GRAMMAR_SPCURSOROPEN_PROC;
    public static Tokens TOKEN_GRAMMAR_SPCURSORDML;
    public static Tokens TOKEN_GRAMMAR_RECOMPILE;
    public static Tokens TOKEN_GRAMMAR_OPTION_CLAUSE;
    public static Tokens TOKEN_GRAMMAR_XEVENT_PREDICATE;
    public static Tokens TOKEN_GRAMMAR_FILTERED_INDEXES;
    public static Tokens TOKEN_GRAMMAR_FILTERED_INDEX_EXPR;
    public static Tokens TOKEN_GRAMMAR_COMPUTED_COLS;
    public static Tokens TOKEN_GRAMMAR_SECURITY_PREDICATE;
    public static Tokens TOKEN_ID;
    public static Tokens TOKEN_QUOTED_ID;
    public static Tokens TOKEN_VARIABLE;
    public static Tokens TOKEN_STRING;
    public static Tokens TOKEN_PSEUDOCOL;
    public static Tokens TOKEN_TEXT_LEX;
    public static Tokens TOKEN_IMAGE;
    public static Tokens TOKEN_BINARY;
    public static Tokens TOKEN_LABEL;
    public static Tokens TOKEN_INTEGER;
    public static Tokens TOKEN_GLOBAL_VAR;
    public static Tokens TOKEN_REAL;
    public static Tokens TOKEN_MONEY;
    public static Tokens TOKEN_NUMERIC;
    public static Tokens TOKEN_REQJOIN;
    public static Tokens TOKEN_ODBC_PREFIX;
    public static Tokens TOKEN_ODBC_TERMINATOR;
    public static Tokens TOKEN_ADD_EQ;
    public static Tokens TOKEN_SUB_EQ;
    public static Tokens TOKEN_MULT_EQ;
    public static Tokens TOKEN_DIV_EQ;
    public static Tokens TOKEN_MOD_EQ;
    public static Tokens TOKEN_BW_AND_EQ;
    public static Tokens TOKEN_BW_OR_EQ;
    public static Tokens TOKEN_BW_XOR_EQ;
    public static Tokens TOKEN_ALL;
    public static Tokens TOKEN_ALTER;
    public static Tokens TOKEN_SCHEMA;
    public static Tokens TOKEN_AUTHORIZATION;
    public static Tokens TOKEN_ANY;
    public static Tokens TOKEN_AS;
    public static Tokens TOKEN_VARYING;
    public static Tokens TOKEN_ASC;
    public static Tokens TOKEN_BEGIN;
    public static Tokens TOKEN_BETWEEN;
    public static Tokens TOKEN_BREAK;
    public static Tokens TOKEN_BROWSE;
    public static Tokens TOKEN_BULK;
    public static Tokens TOKEN_BY;
    public static Tokens TOKEN_CASE;
    public static Tokens TOKEN_CHECKPOINT;
    public static Tokens TOKEN_CLUSTERED;
    public static Tokens TOKEN_COALESCE;
    public static Tokens TOKEN_COLLATE;
    public static Tokens TOKEN_COMMIT;
    public static Tokens TOKEN_COMPUTE;
    public static Tokens TOKEN_CONTINUE;
    public static Tokens TOKEN_CASCADE;
    public static Tokens TOKEN_CONVERT;
    public static Tokens TOKEN_TRY_CONVERT;
    public static Tokens TOKEN_DATABASE;
    public static Tokens TOKEN_RESTRICT;
    public static Tokens TOKEN_DBCC;
    public static Tokens TOKEN_DECLARE;
    public static Tokens TOKEN_DEFAULT;
    public static Tokens TOKEN_DELETE;
    public static Tokens TOKEN_DESC;
    public static Tokens TOKEN_DISTINCT;
    public static Tokens TOKEN_DOUBLE;
    public static Tokens TOKEN_DUMP;
    public static Tokens TOKEN_END;
    public static Tokens TOKEN_ERRLVL;
    public static Tokens TOKEN_EXCEPT;
    public static Tokens TOKEN_ESCAPE;
    public static Tokens TOKEN_EXECUTE;
    public static Tokens TOKEN_EXISTS;
    public static Tokens TOKEN_EXIT;
    public static Tokens TOKEN_EXTERNAL;
    public static Tokens TOKEN_FILE;
    public static Tokens TOKEN_FILLFACTOR;
    public static Tokens TOKEN_FOR;
    public static Tokens TOKEN_FROM;
    public static Tokens TOKEN_FUNCTION;
    public static Tokens TOKEN_GOTO;
    public static Tokens TOKEN_GROUP;
    public static Tokens TOKEN_HAVING;
    public static Tokens TOKEN_HOLDLOCK;
    public static Tokens TOKEN_IDENTITY;
    public static Tokens TOKEN_IDENTITYCOL;
    public static Tokens TOKEN_IF;
    public static Tokens TOKEN_IN;
    public static Tokens TOKEN_INDEX;
    public static Tokens TOKEN_INSERT;
    public static Tokens TOKEN_INTERSECT;
    public static Tokens TOKEN_INTO;
    public static Tokens TOKEN_IS;
    public static Tokens TOKEN_KILL;
    public static Tokens TOKEN_LIKE;
    public static Tokens TOKEN_LINENO;
    public static Tokens TOKEN_LOAD;
    public static Tokens TOKEN_TSEQUAL;
    public static Tokens TOKEN_NATIONAL;
    public static Tokens TOKEN_NONCLUSTERED;
    public static Tokens TOKEN_NOT_FOR;
    public static Tokens TOKEN_NULL;
    public static Tokens TOKEN_NULLIF;
    public static Tokens TOKEN_OFF;
    public static Tokens TOKEN_OFFSETS;
    public static Tokens TOKEN_ON;
    public static Tokens TOKEN_LOG_ON;
    public static Tokens TOKEN_OPTION;
    public static Tokens TOKEN_ORDER;
    public static Tokens TOKEN_OVER;
    public static Tokens TOKEN_PLAN;
    public static Tokens TOKEN_PRINT;
    public static Tokens TOKEN_PROCEDURE;
    public static Tokens TOKEN_PUBLIC;
    public static Tokens TOKEN_RAISERROR;
    public static Tokens TOKEN_READTEXT;
    public static Tokens TOKEN_RECONFIGURE;
    public static Tokens TOKEN_RETURN;
    public static Tokens TOKEN_ROLLBACK;
    public static Tokens TOKEN_ROWCOUNT;
    public static Tokens TOKEN_RULE;
    public static Tokens TOKEN_SAVE;
    public static Tokens TOKEN_SELECT;
    public static Tokens TOKEN_SETUSER;
    public static Tokens TOKEN_IDENTITY_INSERT;
    public static Tokens TOKEN_SHUTDOWN;
    public static Tokens TOKEN_STATISTICS;
    public static Tokens TOKEN_TABLE;
    public static Tokens TOKEN_TABLESAMPLE;
    public static Tokens TOKEN_THEN;
    public static Tokens TOKEN_TO;
    public static Tokens TOKEN_TRANSACTION;
    public static Tokens TOKEN_TRIGGER;
    public static Tokens TOKEN_TEXTSIZE;
    public static Tokens TOKEN_TRUNCATE;
    public static Tokens TOKEN_UNIQUE;
    public static Tokens TOKEN_UPDATE;
    public static Tokens TOKEN_UPDATETEXT;
    public static Tokens TOKEN_USEDB;
    public static Tokens TOKEN_VALUES;
    public static Tokens TOKEN_VIEW;
    public static Tokens TOKEN_WAITFOR;
    public static Tokens TOKEN_WHERE;
    public static Tokens TOKEN_WHERE_CURRENT;
    public static Tokens TOKEN_WHEN;
    public static Tokens TOKEN_WHILE;
    public static Tokens TOKEN_WRITETEXT;
    public static Tokens TOKEN_CURSOR;
    public static Tokens TOKEN_OF;
    public static Tokens TOKEN_OPEN;
    public static Tokens TOKEN_CURRENT;
    public static Tokens TOKEN_CLOSE;
    public static Tokens TOKEN_DEALLOCATE;
    public static Tokens TOKEN_READ;
    public static Tokens TOKEN_CONSTRAINT;
    public static Tokens TOKEN_PRIMARY;
    public static Tokens TOKEN_KEY;
    public static Tokens TOKEN_REFERENCES;
    public static Tokens TOKEN_CHECK;
    public static Tokens TOKEN_ROWGUIDCOL;
    public static Tokens TOKEN_FOREIGN;
    public static Tokens TOKEN_NOCHECK;
    public static Tokens TOKEN_REPLICATION;
    public static Tokens TOKEN_USER;
    public static Tokens TOKEN_CURRENT_USER;
    public static Tokens TOKEN_SESSION_USER;
    public static Tokens TOKEN_SYSTEM_USER;
    public static Tokens TOKEN_CURRENT_DATE;
    public static Tokens TOKEN_CURRENT_TIME;
    public static Tokens TOKEN_CURRENT_TIMESTAMP;
    public static Tokens TOKEN_DISTRIBUTED;
    public static Tokens TOKEN_TOP;
    public static Tokens TOKEN_PERCENT;
    public static Tokens TOKEN_PROC_SEMI;
    public static Tokens TOKEN_OPENQUERY;
    public static Tokens TOKEN_OPENROWSET;
    public static Tokens TOKEN_OPENDATASOURCE;
    public static Tokens TOKEN_OPENXML;
    public static Tokens TOKEN_COLUMN;
    public static Tokens TOKEN_START_UPDATE;
    public static Tokens TOKEN_CONTAINSTABLE;
    public static Tokens TOKEN_FREETEXTTABLE;
    public static Tokens TOKEN_CONTAINS;
    public static Tokens TOKEN_FREETEXT;
    public static Tokens TOKEN_c_MOVE;
    public static Tokens TOKEN_c_RECEIVE;
    public static Tokens TOKEN_c_GET;
    public static Tokens TOKEN_c_SEND;
    public static Tokens TOKEN_c_ENABLE;
    public static Tokens TOKEN_c_DISABLE;
    public static Tokens TOKEN_c_SERVICE;
    public static Tokens TOKEN_c_LOGIN;
    public static Tokens TOKEN_c_QUEUE;
    public static Tokens TOKEN_c_CERT;
    public static Tokens TOKEN_c_XMLSCHEMA;
    public static Tokens TOKEN_c_SERVER;
    public static Tokens TOKEN_c_INCLUDE;
    public static Tokens TOKEN_c_MASTER;
    public static Tokens TOKEN_c_SYMMETRIC;
    public static Tokens TOKEN_c_SIGNATURE;
    public static Tokens TOKEN_c_ASYMMETRIC;
    public static Tokens TOKEN_c_ASSEMBLY;
    public static Tokens TOKEN_c_NAME;
    public static Tokens TOKEN_c_TYPE;
    public static Tokens TOKEN_c_DIALOG;
    public static Tokens TOKEN_c_CONVERSATION;
    public static Tokens TOKEN_c_THROW;
    public static Tokens TOKEN_BEGIN_CATCH;
    public static Tokens TOKEN_BEGIN_TRY;
    public static Tokens TOKEN_c_NEXTVALUE;
    public static Tokens TOKEN_c_WITHIN_GROUP;
    public static Tokens TOKEN_c_LOG;
    public static Tokens TOKEN_c_COUNTERSIGNATURE;
    public static Tokens TOKEN_c_CUBE;
    public static Tokens TOKEN_c_ROLLUP;
    public static Tokens TOKEN_DOLLAR_PARTITION;
    public static Tokens TOKEN_REVERT;
    public static Tokens TOKEN_c_REVERT;
    public static Tokens TOKEN_MERGE;
    public static Tokens TOKEN_c_USING;
    public static Tokens TOKEN_AUDIT_SPECIFICATION;
    public static Tokens TOKEN_ENCRYPTION_KEY;
    public static Tokens TOKEN_DB_SCOPED_CREDENTIAL;
    public static Tokens TOKEN_DB_SCOPED_CONFIG;
    public static Tokens TOKEN_SEMANTICSIMILARITYTABLE;
    public static Tokens TOKEN_SEMANTICKEYPHRASETABLE;
    public static Tokens TOKEN_SEMANTICSIMILARITYDETAILSTABLE;
    public static Tokens TOKEN_WITH_GB_HINT;
    public static Tokens TOKEN_c_FOR_SYSTEM_TIME;
    public static Tokens TOKEN_c_OPENJSON;
    public static Tokens TOKEN_c_MATCH;
    public static Tokens TOKEN_c_CONNECTION;
    public static Tokens TOKEN_c_SHORTEST_PATH;
    public static Tokens TOKEN_c_FOR_PATH;
    public static Tokens TOKEN_c_LAST_NODE;
    public static Tokens TOKEN_c_WINDOW;
    public static Tokens TOKEN_c_ROWS;
    public static Tokens TOKEN_c_RANGE;
    public static Tokens TOKEN_TRIM_LEADING;
    public static Tokens TOKEN_TRIM_TRAILING;
    public static Tokens TOKEN_TRIM_BOTH;
    public static Tokens START_LEFT_PAREN_COMPAT_SUBTOKENS;
    public static Tokens TOKEN_LEFT_PAREN_80;
    public static Tokens TOKEN_LEFT_PAREN_90;
    public static Tokens END_LEFT_PAREN_COMPAT_SUBTOKENS;
    public static Tokens START_CREATE_DROP_ALTER_SUBTOKENS;
    public static Tokens TOKEN_s_CDA_TYPE;
    public static Tokens TOKEN_s_CDA_ASSEMBLY;
    public static Tokens TOKEN_s_CDA_AGGREGATE;
    public static Tokens TOKEN_s_CDA_EVENT;
    public static Tokens TOKEN_s_CDA_PARTITION;
    public static Tokens TOKEN_s_CDA_FULLTEXT;
    public static Tokens TOKEN_s_CDA_SERVICE;
    public static Tokens TOKEN_s_CDA_MESSAGE;
    public static Tokens TOKEN_s_CDA_ENDPOINT;
    public static Tokens TOKEN_s_CDA_SYNONYM;
    public static Tokens TOKEN_s_CDA_SEQUENCE;
    public static Tokens TOKEN_s_CDA_LOGIN;
    public static Tokens TOKEN_s_CDA_APPLICATION;
    public static Tokens TOKEN_s_CDA_ROLE;
    public static Tokens TOKEN_s_CDA_QUEUE;
    public static Tokens TOKEN_s_CDA_CONTRACT;
    public static Tokens TOKEN_s_CDA_ROUTE;
    public static Tokens TOKEN_s_CDA_XML;
    public static Tokens TOKEN_s_CDA_REMOTE;
    public static Tokens TOKEN_s_CDA_CERT;
    public static Tokens TOKEN_s_CDA_MASTER;
    public static Tokens TOKEN_s_CDA_SYMMETRIC;
    public static Tokens TOKEN_s_CDA_SIGNATURE;
    public static Tokens TOKEN_s_CDA_CREDENTIAL;
    public static Tokens TOKEN_s_CDA_ASYMMETRIC;
    public static Tokens TOKEN_s_CDA_COUNTER;
    public static Tokens TOKEN_s_CDA_BROKER;
    public static Tokens TOKEN_s_CDA_SESSION;
    public static Tokens TOKEN_s_CDA_NOTIFICATION;
    public static Tokens TOKEN_s_CDA_TARGET;
    public static Tokens TOKEN_s_CDA_SERVER;
    public static Tokens TOKEN_s_CDA_RESOURCE;
    public static Tokens TOKEN_s_CDA_WORKLOAD;
    public static Tokens TOKEN_s_CDA_POOL;
    public static Tokens TOKEN_s_CDA_GOVERNOR;
    public static Tokens TOKEN_s_CDA_SPATIAL;
    public static Tokens TOKEN_s_CDA_SELECTIVE;
    public static Tokens TOKEN_s_CDA_CRYPTOGRAPHIC;
    public static Tokens TOKEN_s_CDA_SEARCH;
    public static Tokens TOKEN_s_CDA_AVAILABILITY;
    public static Tokens TOKEN_s_CDA_COLUMNSTORE;
    public static Tokens TOKEN_s_CDA_AUDIT;
    public static Tokens TOKEN_s_CDA_SECURITY;
    public static Tokens TOKEN_s_CDA_POLICY;
    public static Tokens TOKEN_s_CDA_SENSITIVITY;
    public static Tokens TOKEN_s_CDA_CLASSIFICATION;
    public static Tokens END_CREATE_DROP_ALTER_SUBTOKENS;
    public static Tokens START_ADD_SUBTOKENS;
    public static Tokens TOKEN_s_ADD_SIGNATURE;
    public static Tokens TOKEN_s_ADD_COUNTER;
    public static Tokens TOKEN_s_ADD_SENSITIVITY;
    public static Tokens TOKEN_s_ADD_CLASSIFICATION;
    public static Tokens END_ADD_SUBTOKENS;
    public static Tokens START_AFTER_END_SUBTOKENS;
    public static Tokens TOKEN_s_AE_CATCH;
    public static Tokens TOKEN_s_AE_CONVERSATION;
    public static Tokens TOKEN_s_AE_TRY;
    public static Tokens END_AFTER_END_SUBTOKENS;
    public static Tokens START_AFTER_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_AW_XMLNAMESPACES;
    public static Tokens TOKEN_s_AW_CHANGE_TRACKING_CONTEXT;
    public static Tokens TOKEN_s_AW_ID;
    public static Tokens END_AFTER_WITH_SUBTOKENS;
    public static Tokens START_AFTER_WITH_EXEC_OPTION_SUBTOKENS;
    public static Tokens TOKEN_s_AWEO_RESULT;
    public static Tokens TOKEN_s_AWEO_RECOMPILE;
    public static Tokens END_AFTER_WITH_EXEC_OPTION_SUBTOKENS;
    public static Tokens START_CREATE_DB_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_CREATEDBOPT_FILESTREAM;
    public static Tokens TOKEN_s_CREATEDBOPT_LOGAPPLY;
    public static Tokens TOKEN_s_CREATEDBOPT_CATALOGCOLLATION;
    public static Tokens TOKEN_s_CREATEDBOPT_PERSISTENT_LOG_BUFFER;
    public static Tokens TOKEN_s_CREATEDBOPT_OTHER;
    public static Tokens TOKEN_s_CREATEDBOPT_BACKUPSTORAGEREDUNDANCY;
    public static Tokens END_CREATE_DB_OPT_SUBTOKENS;
    public static Tokens START_CREATE_DB_TYPE_SUBTOKENS;
    public static Tokens TOKEN_s_CREATEDB_SNAP;
    public static Tokens TOKEN_s_CREATEDB_COPY;
    public static Tokens END_CREATE_DB_TYPE_SUBTOKENS;
    public static Tokens START_ALTER_DB_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ALTDBOPT_CHANGE_TRACKING;
    public static Tokens TOKEN_s_ALTDBOPT_FILESTREAM;
    public static Tokens TOKEN_s_ALTDBOPT_OTHER;
    public static Tokens TOKEN_s_ALTDBOPT_DIST_POLICY;
    public static Tokens TOKEN_s_ALTDBOPT_HADR;
    public static Tokens TOKEN_s_ALTDBOPT_CONTAINEDDB;
    public static Tokens TOKEN_s_ALTDBOPT_RECOVERY;
    public static Tokens TOKEN_s_ALTDBOPT_DELAYED_DURABILITY;
    public static Tokens TOKEN_s_ALTDBOPT_failover;
    public static Tokens TOKEN_s_ALTDBOPT_remove;
    public static Tokens TOKEN_s_ALTDBOPT_modify;
    public static Tokens TOKEN_s_ALTDBOPT_rebuild;
    public static Tokens TOKEN_s_ALTDBOPT_force_failover;
    public static Tokens TOKEN_s_ALTDBOPT_SECONDARY;
    public static Tokens TOKEN_s_ALTDBOPT_log;
    public static Tokens TOKEN_s_ALTDBOPT_filegroup;
    public static Tokens TOKEN_s_ALTDBOPT_name;
    public static Tokens TOKEN_s_ALTDBOPT_QUERY_STORE;
    public static Tokens TOKEN_s_ALTDBOPT_ENCRYPTION;
    public static Tokens TOKEN_s_ALTDBOPT_AUTO_TUNING;
    public static Tokens TOKEN_s_ALTDBOPT_AUTO_CRT_STATS;
    public static Tokens TOKEN_s_ALTDBOPT_REMOTE_DATA_ARCHIVE;
    public static Tokens TOKEN_s_ALTDBOPT_TEMPORAL_RETENTION;
    public static Tokens TOKEN_s_ALTDBOPT_HARDENING;
    public static Tokens TOKEN_s_ALTDBOPT_PERSISTENT_LOG_BUFFER;
    public static Tokens TOKEN_s_ALTDBOPT_ACCELERATED_DATABASE_RECOVERY;
    public static Tokens TOKEN_s_ALTDBOPT_PERSISTENT_VERSION_STORE_FILEGROUP;
    public static Tokens TOKEN_s_ALTDBOPT_STALE_PAGE_DETECTION;
    public static Tokens TOKEN_s_ALTDBOPT_MEMORY_OPTIMIZED;
    public static Tokens TOKEN_s_ALTDBOPT_DATA_RETENTION;
    public static Tokens TOKEN_s_ALTDBOPT_BACKUPSTORAGEREDUNDANCY;
    public static Tokens END_ALTER_DB_OPT_SUBTOKENS;
    public static Tokens START_DUMP_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_DUMPOPT_COMPRESSION;
    public static Tokens TOKEN_s_DUMPOPT_ENCRYPTION;
    public static Tokens TOKEN_s_DUMPOPT_OTHER;
    public static Tokens END_DUMP_OPT_SUBTOKENS;
    public static Tokens START_DUMP_COMPRESSION_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_DUMPOPT_COMPRESSION_ALGORITHM;
    public static Tokens TOKEN_s_DUMPOPT_COMPRESSION_LEVEL;
    public static Tokens END_DUMP_COMPRESSION_OPT_SUBTOKENS;
    public static Tokens START_DUMP_ENCRYPTION_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_DUMPOPT_ENCRYPTION_ALGORITHM;
    public static Tokens TOKEN_s_DUMPOPT_ENCRYPTION_SERVER;
    public static Tokens TOKEN_s_DUMPOPT_ENCRYPTION_CERTIFICATE;
    public static Tokens TOKEN_s_DUMPOPT_ENCRYPTION_ASYMMETRIC;
    public static Tokens END_DUMP_ENCRYPTION_OPT_SUBTOKENS;
    public static Tokens START_LOAD_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_LOADOPT_FILESTREAM;
    public static Tokens TOKEN_s_LOADOPT_OTHER;
    public static Tokens END_LOAD_OPT_SUBTOKENS;
    public static Tokens START_TAB_OPT_NAME_SUBTOKENS;
    public static Tokens TOKEN_s_TABOPTNAME_FILESTREAM_ON;
    public static Tokens TOKEN_s_TABOPTNAME_LOCK_ESCALATION;
    public static Tokens TOKEN_s_TABOPTNAME_FILETABLE_DIRECTORY;
    public static Tokens TOKEN_s_TABOPTNAME_SYSTEM_VERSIONING;
    public static Tokens TOKEN_s_TABOPTNAME_REMOTE_DATA_ARCHIVE;
    public static Tokens TOKEN_s_TABOPTNAME_DATA_DELETION;
    public static Tokens END_TAB_OPT_NAME_SUBTOKENS;
    public static Tokens START_TAB_LOCK_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_TABLOCKOPT_MAX_DURATION;
    public static Tokens TOKEN_s_TABLOCKOPT_ABORT_AFTER_WAIT;
    public static Tokens END_TAB_LOCK_OPT_SUBTOKENS;
    public static Tokens START_INDEX_SORT_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_IDXSORTOPT_SORTED_DATA;
    public static Tokens TOKEN_s_IDXSORTOPT_SORTED_DATA_REORG;
    public static Tokens END_INDEX_SORT_OPT_SUBTOKENS;
    public static Tokens START_COL_DEF_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_COLDEFOPT_SPARSE;
    public static Tokens TOKEN_s_COLDEFOPT_COLUMN_SET;
    public static Tokens TOKEN_s_COLDEFOPT_COLUMN_GENERATED;
    public static Tokens TOKEN_s_COLDEFOPT_ENCRYPTED;
    public static Tokens TOKEN_s_COLDEFOPT_FILESTREAM;
    public static Tokens TOKEN_s_COLDEFOPT_MASKED;
    public static Tokens TOKEN_s_COLDEFOPT_HIDDEN;
    public static Tokens END_COL_DEF_OPT_SUBTOKENS;
    public static Tokens START_COL_ADD_DROP_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_COLADDROPOPT_PERSISTED;
    public static Tokens TOKEN_s_COLADDROPOPT_SPARSE;
    public static Tokens TOKEN_s_COLADDROPOPT_MASKED;
    public static Tokens TOKEN_s_COLADDROPOPT_HIDDEN;
    public static Tokens END_COL_ADD_DROP_OPT_SUBTOKENS;
    public static Tokens START_OPT_STORAGE_ID_SUBTOKENS;
    public static Tokens TOKEN_s_OSI_SPARSE;
    public static Tokens TOKEN_s_OSI_COLUMN_SET;
    public static Tokens END_OPT_STORAGE_ID_SUBTOKENS;
    public static Tokens START_IND_OPTIONS_SUBTOKENS;
    public static Tokens TOKEN_s_IO_DATACOMPRESSION;
    public static Tokens TOKEN_s_IO_MAXDOP;
    public static Tokens TOKEN_s_IO_STATSONLY;
    public static Tokens TOKEN_s_IO_ONOFFOPTION;
    public static Tokens TOKEN_s_IO_DISTRIBUTION;
    public static Tokens TOKEN_s_IO_BUCKETCOUNT;
    public static Tokens TOKEN_s_IO_ONLINE;
    public static Tokens TOKEN_s_IO_COMPRESSION_DELAY;
    public static Tokens TOKEN_s_IO_IGNORE_DUP_KEY;
    public static Tokens TOKEN_s_IO_MOVE;
    public static Tokens TOKEN_s_IO_FILESTREAM_ON;
    public static Tokens TOKEN_s_IO_RESUMABLE;
    public static Tokens TOKEN_s_IO_MAX_DURATION;
    public static Tokens TOKEN_s_IO_WAIT_AT_LOW_PRIORITY;
    public static Tokens END_IND_OPTIONS_SUBTOKENS;
    public static Tokens START_IND_ACTIONS_SUBTOKENS;
    public static Tokens TOKEN_s_IA_REBUILD;
    public static Tokens TOKEN_s_IA_REORGANIZE;
    public static Tokens TOKEN_s_IA_DISABLE;
    public static Tokens TOKEN_s_IA_RESUME;
    public static Tokens TOKEN_s_IA_ABORT;
    public static Tokens TOKEN_s_IA_PAUSE;
    public static Tokens END_IND_ACTIONS_SUBTOKENS;
    public static Tokens START_ALTTAB_ACTIONS_SUBTOKENS;
    public static Tokens TOKEN_s_ALTTAB_DISABLE_ENABLE;
    public static Tokens TOKEN_s_ALTTAB_REBUILD;
    public static Tokens TOKEN_s_ALTTAB_SWITCH;
    public static Tokens END_ALTTAB_ACTIONS_SUBTOKENS;
    public static Tokens START_SEQUENCE_OPTIONS_SUBTOKENS;
    public static Tokens TOKEN_s_seq_RESTART;
    public static Tokens TOKEN_s_seq_START;
    public static Tokens TOKEN_s_seq_INCREMENT;
    public static Tokens TOKEN_s_seq_MINVALUE;
    public static Tokens TOKEN_s_seq_MAXVALUE;
    public static Tokens TOKEN_s_seq_CYCLE;
    public static Tokens TOKEN_s_seq_CACHE;
    public static Tokens TOKEN_s_seq_NO;
    public static Tokens END_SEQUENCE_OPTIONS_SUBTOKENS;
    public static Tokens START_ALTTAB_ENABLE_DISABLE_SUBTOKENS;
    public static Tokens TOKEN_s_ALTTAB_EN_CHANGE_TRACKING;
    public static Tokens TOKEN_s_ALTTAB_EN_FILETABLE_NAMESPACE;
    public static Tokens END_ALTTAB_ENABLE_DISABLE_SUBTOKENS;
    public static Tokens START_AFFINITY_TYPE_SUBTOKENS;
    public static Tokens TOKEN_s_aff_CPU;
    public static Tokens TOKEN_s_aff_NUMA;
    public static Tokens END_AFFINITY_TYPE_SUBTOKENS;
    public static Tokens START_POOL_AFFINITY_TYPE_SUBTOKENS;
    public static Tokens TOKEN_s_paff_SCHED;
    public static Tokens TOKEN_s_paff_NUMA;
    public static Tokens END_POOL_AFFINITY_TYPE_SUBTOKENS;
    public static Tokens START_EXTERNAL_POOL_AFFINITY_TYPE_SUBTOKENS;
    public static Tokens TOKEN_s_epaff_CPU;
    public static Tokens TOKEN_s_epaff_NUMA;
    public static Tokens END_EXTERNAL_POOL_AFFINITY_TYPE_SUBTOKENS;
    public static Tokens START_ALTER_SERVER_TYPE_SUBTOKENS;
    public static Tokens TOKEN_s_altserv_AUDIT;
    public static Tokens TOKEN_s_altserv_CONFIG;
    public static Tokens TOKEN_s_altserv_ROLE;
    public static Tokens END_ALTER_SERVER_TYPE_SUBTOKENS;
    public static Tokens START_FULLTEXT_SEARCH_SUBTOKENS;
    public static Tokens TOKEN_s_FTS_CATALOG;
    public static Tokens TOKEN_s_FTS_CHANGE_TRACKING;
    public static Tokens TOKEN_s_FTS_POPULATION;
    public static Tokens TOKEN_s_FTS_STOPLIST;
    public static Tokens TOKEN_s_FTS_NO;
    public static Tokens TOKEN_s_FTS_SEARCH;
    public static Tokens END_FULLTEXT_SEARCH_SUBTOKENS;
    public static Tokens START_FTS_PROPERTY_SUBTOKENS;
    public static Tokens TOKEN_s_FP_PROPERTY;
    public static Tokens TOKEN_s_FP_LIST;
    public static Tokens END_FTS_PROPERTY_SUBTOKENS;
    public static Tokens START_AFTER_FTS_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_AFW_PROPERTY_SET_GUID;
    public static Tokens TOKEN_s_AFW_PROPERTY_INT_ID;
    public static Tokens TOKEN_s_AFW_PROPERTY_DESCRIPTION;
    public static Tokens END_AFTER_FTS_WITH_SUBTOKENS;
    public static Tokens START_CREATE_USER_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_CUW_PASSWORD;
    public static Tokens TOKEN_s_CUW_USER_TYPE;
    public static Tokens TOKEN_s_CUW_PROPERTY;
    public static Tokens END_CREATE_USER_WITH_SUBTOKENS;
    public static Tokens START_ALTER_USER_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_AUW_PASSWORD;
    public static Tokens TOKEN_s_AUW_PROPERTY;
    public static Tokens TOKEN_s_AUW_SID;
    public static Tokens END_ALTER_USER_WITH_SUBTOKENS;
    public static Tokens START_CREATE_LOGIN_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_CLW_SID;
    public static Tokens TOKEN_s_CLW_TYPE;
    public static Tokens TOKEN_s_CLW_DB;
    public static Tokens TOKEN_s_CLW_LANG;
    public static Tokens TOKEN_s_CLW_OBJECT_ID;
    public static Tokens END_CREATE_LOGIN_WITH_SUBTOKENS;
    public static Tokens START_AG_REPLICA_OPTION_SUBTOKENS;
    public static Tokens TOKEN_s_AG_ROLE_AGNOSTIC_OPTION;
    public static Tokens TOKEN_s_AG_ROLE_SPECIFIC_OPTION;
    public static Tokens END_AG_REPLICA_OPTION_SUBTOKENS;
    public static Tokens START_ALTER_SERVER_CONFIG_SET_SUBTOKENS;
    public static Tokens TOKEN_s_altserv_config_set_PROCESS;
    public static Tokens TOKEN_s_altserv_config_set_FAILOVER;
    public static Tokens TOKEN_s_altserv_config_set_DIAGNOSTICS;
    public static Tokens TOKEN_s_altserv_config_set_HADR;
    public static Tokens TOKEN_s_altserv_config_set_BUFFER_POOL_EXTENSION;
    public static Tokens TOKEN_s_altserv_config_set_SOFTNUMA;
    public static Tokens END_ALTER_SERVER_CONFIG_SET_SUBTOKENS;
    public static Tokens START_ALTER_SERVER_CONFIG_SET_DIAG_LOG_SUBTOKENS;
    public static Tokens TOKEN_s_altserv_config_set_diaglog_PATH;
    public static Tokens TOKEN_s_altserv_config_set_diaglog_MAX_SIZE;
    public static Tokens TOKEN_s_altserv_config_set_diaglog_MAX_FILES;
    public static Tokens TOKEN_s_altserv_config_set_diaglog_ON;
    public static Tokens TOKEN_s_altserv_config_set_diaglog_OFF;
    public static Tokens END_ALTER_SERVER_CONFIG_SET_DIAG_LOG_SUBTOKENS;
    public static Tokens START_ALTER_SERVER_CONFIG_SET_HADR_CLUSTER_SUBTOKENS;
    public static Tokens TOKEN_s_altserv_config_set_hadr_cluster_CONTEXT;
    public static Tokens END_ALTER_SERVER_CONFIG_SET_HADR_CLUSTER_SUBTOKENS;
    public static Tokens START_OVER_CLAUSE_SUBTOKENS;
    public static Tokens TOKEN_s_PARTITION;
    public static Tokens TOKEN_s_UNBOUNDED;
    public static Tokens END_OVER_CLAUSE_SUBTOKENS;
    public static Tokens START_AFTER_BEGIN_SUBTOKENS;
    public static Tokens TOKEN_s_AB_ATOMIC;
    public static Tokens END_AFTER_BEGIN_SUBTOKENS;
    public static Tokens START_FILESTREAM_DB_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_FSD_NON_TRANSACTED_ACCESS;
    public static Tokens TOKEN_s_FSD_DIRECTORY_NAME;
    public static Tokens END_FILESTREAM_DB_OPT_SUBTOKENS;
    public static Tokens START_CREATE_TAB_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_CTO_FILESTREAM_ON;
    public static Tokens TOKEN_s_CTO_TEXTIMAGE_ON;
    public static Tokens TOKEN_s_CTO_FEDERATED;
    public static Tokens END_CREATE_TAB_OPT_SUBTOKENS;
    public static Tokens START_CREATE_TAB_WITH_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_CTW_DATA_COMPRESSION;
    public static Tokens TOKEN_s_CTW_FFT_FILETABLE_DIRECTORY;
    public static Tokens TOKEN_s_CTW_FFT_COLLATE_FILENAME;
    public static Tokens TOKEN_s_CTW_FFT_PRIMARY_KEY_CONSTRAINT_NAME;
    public static Tokens TOKEN_s_CTW_FFT_STREAMID_UNIQUE_CONSTRAINT_NAME;
    public static Tokens TOKEN_s_CTW_FFT_FULLPATH_UNIQUE_CONSTRAINT_NAME;
    public static Tokens TOKEN_s_CTW_MEMORY_OPTIMIZED;
    public static Tokens TOKEN_s_CTW_DURABILITY;
    public static Tokens TOKEN_s_CTW_SYSTEM_VERSIONING;
    public static Tokens TOKEN_s_CTW_REMOTE_DATA_ARCHIVE;
    public static Tokens TOKEN_s_CTW_DISTRIBUTION;
    public static Tokens TOKEN_s_CTW_PARTITION;
    public static Tokens TOKEN_s_CTW_DISTRIBUTED_MOVE_FILE;
    public static Tokens TOKEN_s_CTW_HEAP;
    public static Tokens TOKEN_s_CTW_LOCATION;
    public static Tokens TOKEN_s_CTW_LEDGER;
    public static Tokens TOKEN_s_CTW_DATA_DELETION;
    public static Tokens END_CREATE_TAB_WITH_OPT_SUBTOKENS;
    public static Tokens START_CREATE_TAB_WITH_DIST_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_CTWD_HASH;
    public static Tokens TOKEN_s_CTWD_ROUNDROBIN;
    public static Tokens END_CREATE_TAB_WITH_DIST_OPT_SUBTOKENS;
    public static Tokens START_CREATE_TAB_WITH_LOCATION_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_CTWL_USERDB;
    public static Tokens END_CREATE_TAB_WITH_LOCATION_OPT_SUBTOKENS;
    public static Tokens START_CREATE_TAB_WITH_DATA_DELETION_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_DD_FILTER_COLUMN;
    public static Tokens TOKEN_s_DD_RETENTION_PERIOD;
    public static Tokens TOKEN_s_DD_INFINITE;
    public static Tokens TOKEN_s_DD_SECOND;
    public static Tokens TOKEN_s_DD_MINUTE;
    public static Tokens TOKEN_s_DD_HOUR;
    public static Tokens TOKEN_s_DD_DAY;
    public static Tokens TOKEN_s_DD_WEEK;
    public static Tokens TOKEN_s_DD_MONTH;
    public static Tokens TOKEN_s_DD_YEAR;
    public static Tokens END_CREATE_TAB_WITH_DATA_DELETION_OPT_SUBTOKENS;
    public static Tokens START_SYSTEM_VERSIONING_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_SV_HISTORY_TABLE;
    public static Tokens TOKEN_s_SV_DATA_CONSISTENCY_CHECK;
    public static Tokens TOKEN_s_SV_HISTORY_RETENTION_PERIOD;
    public static Tokens END_SYSTEM_VERSIONING_OPT_SUBTOKENS;
    public static Tokens START_CREATE_TABLE_WITH_LEDGER_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_CTWL_LEDGER_VIEW;
    public static Tokens TOKEN_s_CTWL_APPEND_ONLY;
    public static Tokens TOKEN_s_CTWL_LV_TRANSACTION_ID_COLUMN_NAME;
    public static Tokens TOKEN_s_CTWL_LV_SEQUENCE_NUMBER_COLUMN_NAME;
    public static Tokens TOKEN_s_CTWL_LV_OPERATION_TYPE_ID_COLUMN_NAME;
    public static Tokens TOKEN_s_CTWL_LV_OPERATION_TYPE_DESC_COLUMN_NAME;
    public static Tokens END_CREATE_TABLE_WITH_LEDGER_OPT_SUBTOKENS;
    public static Tokens START_OPT_SXI_PATH_KIND_SUBTOKENS;
    public static Tokens TOKEN_s_SXI_XQUERY;
    public static Tokens TOKEN_s_SXI_SQL;
    public static Tokens END_OPT_SXI_PATH_KIND_SUBTOKENS;
    public static Tokens START_OPT_SXI_PATH_OPTION_SUBTOKENS;
    public static Tokens TOKEN_s_SXI_MAXLENGTH;
    public static Tokens TOKEN_s_SXI_SINGLETON;
    public static Tokens END_OPT_SXI_PATH_OPTION_SUBTOKENS;
    public static Tokens START_IN_INLINE_INDEX_SYNTAX_SUBTOKENS;
    public static Tokens TOKEN_s_IIIS_HASH;
    public static Tokens TOKEN_s_IIIS_COLUMNSTORE;
    public static Tokens TOKEN_s_IIIS_FILESTREAM_ON;
    public static Tokens END_IN_INLINE_INDEX_SYNTAX_SUBTOKENS;
    public static Tokens START_SECURITY_POLICY_SUBTOKENS;
    public static Tokens TOKEN_s_SP_FILTER;
    public static Tokens TOKEN_s_SP_BLOCK;
    public static Tokens TOKEN_s_SP_PREDICATE;
    public static Tokens TOKEN_s_SP_BEFORE;
    public static Tokens TOKEN_s_SP_AFTER;
    public static Tokens END_SECURITY_POLICY_SUBTOKENS;
    public static Tokens START_CREATE_EXTERNALFILEFORMAT_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_CEFF_FORMAT_OPTIONS;
    public static Tokens TOKEN_s_CEFF_FORMAT_TYPE;
    public static Tokens TOKEN_s_CEFF_DATA_COMPRESSION;
    public static Tokens TOKEN_s_CEFF_FIELDTERMINATOR;
    public static Tokens TOKEN_s_CEFF_STRINGDELIMITER;
    public static Tokens TOKEN_s_CEFF_DATEFORMAT;
    public static Tokens TOKEN_s_CEFF_USETYPEDEFAULT;
    public static Tokens TOKEN_s_CEFF_SERDEMETHOD;
    public static Tokens TOKEN_s_CEFF_ENCODING;
    public static Tokens TOKEN_s_CEFF_ROWTERMINATOR;
    public static Tokens TOKEN_s_CEFF_TRUE;
    public static Tokens TOKEN_s_CEFF_FALSE;
    public static Tokens TOKEN_s_CEFF_DELIMITEDTEXT;
    public static Tokens TOKEN_s_CEFF_RCFILE;
    public static Tokens TOKEN_s_CEFF_ORC;
    public static Tokens TOKEN_s_CEFF_PARQUET;
    public static Tokens TOKEN_s_CEFF_FIRSTROW;
    public static Tokens TOKEN_s_CEFF_EXTRACTOR;
    public static Tokens TOKEN_s_CEFF_NULLVALUES;
    public static Tokens TOKEN_s_CEFF_JSON;
    public static Tokens END_CREATE_EXTERNALFILEFORMAT_WITH_SUBTOKENS;
    public static Tokens START_CREATE_EXTERNALDATASOURCE_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_CEDS_TYPE;
    public static Tokens TOKEN_s_CEDS_LOCATION;
    public static Tokens TOKEN_s_CEDS_JOBTRACKERLOCATION;
    public static Tokens TOKEN_s_CEDS_RESOURCEMANAGERLOCATION;
    public static Tokens TOKEN_s_CEDS_DATABASENAME;
    public static Tokens TOKEN_s_CEDS_CREDENTIAL;
    public static Tokens TOKEN_s_CEDS_PUSHDOWN;
    public static Tokens TOKEN_s_CEDS_CONNECTIONOPTIONS;
    public static Tokens TOKEN_s_CEDS_SHARDMAPNAME;
    public static Tokens TOKEN_s_CEDS_HADOOP;
    public static Tokens TOKEN_s_CEDS_RDBMS;
    public static Tokens TOKEN_s_CEDS_SHARDMAPMANAGER;
    public static Tokens TOKEN_s_CEDS_SHAREDMEMORY;
    public static Tokens TOKEN_s_CEDS_BLOBSTORAGE;
    public static Tokens END_CREATE_EXTERNALDATASOURCE_WITH_SUBTOKENS;
    public static Tokens START_CREATE_EXTERNALTABLE_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_CET_DATASOURCE;
    public static Tokens TOKEN_s_CET_LOCATION;
    public static Tokens TOKEN_s_CET_FILEFORMAT;
    public static Tokens TOKEN_s_CET_REJECTTYPE;
    public static Tokens TOKEN_s_CET_REJECTVALUE;
    public static Tokens TOKEN_s_CET_REJECTSAMPLEVALUE;
    public static Tokens TOKEN_s_CET_VALUE;
    public static Tokens TOKEN_s_CET_PERCENTAGE;
    public static Tokens TOKEN_s_CET_DISTRIBUTION;
    public static Tokens TOKEN_s_CET_SHARDED;
    public static Tokens TOKEN_s_CET_REPLICATED;
    public static Tokens TOKEN_s_CET_ROUNDROBIN;
    public static Tokens TOKEN_s_CET_HASH;
    public static Tokens TOKEN_s_CET_REMOTESCHEMANAME;
    public static Tokens TOKEN_s_CET_REMOTEOBJECTNAME;
    public static Tokens TOKEN_s_CET_REJECTEDROWLOCATION;
    public static Tokens END_CREATE_EXTERNALTABLE_WITH_SUBTOKENS;
    public static Tokens START_ALTER_EXTERNALDATASOURCE_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_AEDS_LOCATION;
    public static Tokens TOKEN_s_AEDS_RESOURCEMANAGERLOCATION;
    public static Tokens TOKEN_s_AEDS_CREDENTIAL;
    public static Tokens TOKEN_s_AEDS_DATABASENAME;
    public static Tokens TOKEN_s_AEDS_SHARDMAPNAME;
    public static Tokens TOKEN_s_AEDS_CONNECTIONOPTIONS;
    public static Tokens TOKEN_s_AEDS_PUSHDOWN;
    public static Tokens END_ALTER_EXTERNALDATASOURCE_WITH_SUBTOKENS;
    public static Tokens START_CREATE_EXTERNALSTREAM_WITH_SUBTOKENS;
    public static Tokens TOKEN_s_CES_DATA_SOURCE;
    public static Tokens TOKEN_s_CES_LOCATION;
    public static Tokens TOKEN_s_CES_FILE_FORMAT;
    public static Tokens TOKEN_s_CES_INPUT_OPTIONS;
    public static Tokens TOKEN_s_CES_OUTPUT_OPTIONS;
    public static Tokens END_CREATE_EXTERNALSTREAM_WITH_SUBTOKENS;
    public static Tokens START_EXTERNAL_TYPE_SUBTOKENS;
    public static Tokens TOKEN_s_ET_TABLE;
    public static Tokens TOKEN_s_ET_DATASOURCE;
    public static Tokens TOKEN_s_ET_SOURCE;
    public static Tokens TOKEN_s_ET_FILEFORMAT;
    public static Tokens TOKEN_s_ET_FORMAT;
    public static Tokens TOKEN_s_ET_RESOURCE;
    public static Tokens TOKEN_s_ET_URLFORMAT;
    public static Tokens TOKEN_s_ET_POOL;
    public static Tokens TOKEN_s_ET_LIBRARY;
    public static Tokens TOKEN_s_ET_LANGUAGE;
    public static Tokens TOKEN_s_ET_STREAM;
    public static Tokens END_EXTERNAL_TYPE_SUBTOKENS;
    public static Tokens START_AUTO_TUNING_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ALTDBOPT_AT_inherit;
    public static Tokens TOKEN_s_ALTDBOPT_AT_auto;
    public static Tokens TOKEN_s_ALTDBOPT_AT_off;
    public static Tokens TOKEN_s_ALTDBOPT_AT_custom;
    public static Tokens END_AUTO_TUNING_OPT_SUBTOKENS;
    public static Tokens START_QUERY_STORE_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_QDS_DESIRED_STATE;
    public static Tokens TOKEN_s_QDS_OPERATION_MODE;
    public static Tokens TOKEN_s_QDS_CLEANUP_POLICY;
    public static Tokens TOKEN_s_QDS_CAPTURE_MODE;
    public static Tokens TOKEN_s_QDS_SIZE_BASED_CLEANUP_MODE;
    public static Tokens TOKEN_s_QDS_WAIT_STATS_CAPTURE_MODE;
    public static Tokens TOKEN_s_QDS_MAX_SIZE_MB;
    public static Tokens TOKEN_s_QDS_FLUSH_INTERVAL_SECONDS;
    public static Tokens TOKEN_s_QDS_FLUSH_INTERVAL;
    public static Tokens TOKEN_s_QDS_INTERVAL_LENGTH;
    public static Tokens TOKEN_s_QDS_MAX_PLANS_PER_QUERY;
    public static Tokens END_QUERY_STORE_OPT_SUBTOKENS;
    public static Tokens START_AUTO_TUNING_DATABASE_TUNING_MODE_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ALTDBOPT_ATDBTM_inherit;
    public static Tokens TOKEN_s_ALTDBOPT_ATDBTM_auto;
    public static Tokens TOKEN_s_ALTDBOPT_ATDBTM_custom;
    public static Tokens END_AUTO_TUNING_DATABASE_TUNING_MODE_OPT_SUBTOKENS;
    public static Tokens START_REMOTE_DATA_ARCHIVE_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_REMOTE_DATA_ARCHIVE_DB_OPT_SERVER;
    public static Tokens TOKEN_s_REMOTE_DATA_ARCHIVE_DB_OPT_CREDENTIAL;
    public static Tokens TOKEN_s_REMOTE_DATA_ARCHIVE_DB_OPT_FEDERATED_SERVICE_ACCOUNT;
    public static Tokens END_REMOTE_DATA_ARCHIVE_OPT_SUBTOKENS;
    public static Tokens START_COL_ENCRYPTION_OR_MASTER_KEY_SUBTOKENS;
    public static Tokens TOKEN_s_CEMK_MASTER;
    public static Tokens TOKEN_s_CEMK_COL_MASTER_KEY;
    public static Tokens TOKEN_s_CEMK_KEYSTORETYPE;
    public static Tokens TOKEN_s_CEMK_PROVIDER_NAME;
    public static Tokens TOKEN_s_CEMK_PATH;
    public static Tokens TOKEN_s_CEMK_ENCLAVE_SUPPORT;
    public static Tokens TOKEN_s_CEMK_SIGNATURE;
    public static Tokens TOKEN_s_CEMK_ENCRYPTION;
    public static Tokens TOKEN_s_CEMK_ALGORITHM;
    public static Tokens TOKEN_s_CEMK_ENCRYPTED_VAL;
    public static Tokens TOKEN_s_CEMK_VALUE;
    public static Tokens TOKEN_s_CEMK_COL_ENCRYPTION_KEY;
    public static Tokens TOKEN_s_CEMK_ENCRYPTION_TYPE;
    public static Tokens END_COL_ENCRYPTION_OR_MASTER_KEY_SUBTOKENS;
    public static Tokens START_GEODR_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_GEODR_CONNOPT;
    public static Tokens TOKEN_s_GEODR_REPLACE;
    public static Tokens TOKEN_s_GEODR_SRVOBJ;
    public static Tokens TOKEN_s_GEODR_ASYNC_FAILOVER;
    public static Tokens TOKEN_s_GEODR_SECONDARYTYPE;
    public static Tokens TOKEN_s_GEODR_DATABASENAME;
    public static Tokens TOKEN_s_GEODR_BACKUPSTORAGEREDUNDANCY;
    public static Tokens END_GEODR_OPT_SUBTOKENS;
    public static Tokens START_DB_COPY_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_DB_COPY_BACKUP_STORAGE_REDUNDANCY;
    public static Tokens END_DB_COPY_OPT_SUBTOKENS;
    public static Tokens START_DB_SCOPED_CONFIG_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_DBSC_MAX_DOP;
    public static Tokens TOKEN_s_DBSC_ELEVATE_OPTION;
    public static Tokens TOKEN_s_DBSC_ON_OFF_OPTION;
    public static Tokens END_DB_SCOPED_CONFIG_OPT_SUBTOKENS;
    public static Tokens START_GRAPH_ID_OR_FILETABLE_SUBTOKENS;
    public static Tokens TOKEN_s_NODE_TYPE;
    public static Tokens TOKEN_s_EDGE_TYPE;
    public static Tokens TOKEN_s_FILETABLE;
    public static Tokens END_GRAPH_ID_OR_FILETABLE_SUBTOKENS;
    public static Tokens START_PERSISTENT_LOG_BUFFER_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_PERSISTENT_LOG_BUFFER_OPT_DIRECTORY_NAME;
    public static Tokens END_PERSISTENT_LOG_BUFFER_OPT_SUBTOKENS;
    public static Tokens START_SNAPSHOT_OPTION_SUBTOKENS;
    public static Tokens TOKEN_s_SREFRESH_MODE;
    public static Tokens TOKEN_s_SBUILD;
    public static Tokens TOKEN_s_SBUILD_REPLICA;
    public static Tokens TOKEN_s_SSTORE;
    public static Tokens END_SNAPSHOT_OPTION_SUBTOKENS;
    public static Tokens START_AUDIT_TARGET_SUBTOKENS;
    public static Tokens TOKEN_s_ET_URL;
    public static Tokens TOKEN_s_ET_MDS_LOG;
    public static Tokens TOKEN_s_ET_SECURITY_LOG;
    public static Tokens TOKEN_s_ET_APPLICATION_LOG;
    public static Tokens TOKEN_s_ET_EXTERNAL_MONITOR;
    public static Tokens END_AUDIT_TARGET_SUBTOKENS;
    public static Tokens START_ENCRYPTION_OPTION_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ENCRYPTION_RESOURCE_GOVERNOR;
    public static Tokens END_ENCRYPTION_OPTION_OPT_SUBTOKENS;
    public static Tokens START_EXTERNAL_LANGUAGE_FILE_SPEC_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ELFS_CONTENT;
    public static Tokens TOKEN_s_ELFS_FILE_NAME;
    public static Tokens TOKEN_s_ELFS_PARAMETERS;
    public static Tokens TOKEN_s_ELFS_PLATFORM;
    public static Tokens TOKEN_s_ELFS_ENVIRONMENT_VARIABLES;
    public static Tokens END_EXTERNAL_LANGUAGE_FILE_SPEC_OPT_SUBTOKENS;
    public static Tokens START_ALTER_EXTERNAL_LANGUAGE_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ALTELOPT_REMOVE;
    public static Tokens TOKEN_s_ALTELOPT_PLATFORM;
    public static Tokens END_ALTER_EXTERNAL_LANGUAGE_OPT_SUBTOKENS;
    public static Tokens START_EXTERNAL_LIBRARY_FILE_SPEC_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ELIBFS_CONTENT;
    public static Tokens TOKEN_s_ELIBFS_PLATFORM;
    public static Tokens END_EXTERNAL_LIBRARY_FILE_SPEC_OPT_SUBTOKENS;
    public static Tokens START_ALTER_EXTERNAL_LIBRARY_OPT_SUBTOKENS;
    public static Tokens TOKEN_s_ALTELIBOPT_REMOVE;
    public static Tokens TOKEN_s_ALTELIBOPT_PLATFORM;
    public static Tokens END_ALTER_EXTERNAL_LIBRARY_OPT_SUBTOKENS;
    public static Tokens TOKEN_LEADING_DOT_NUMERIC;
    public static Tokens TOKEN_TRAILING_DOT_NUMERIC;
    public static Tokens TOKEN_EMBEDED_DOT_NUMERIC;
    public static Tokens START_MISSING_TOKENS;
    public static Tokens TOKEN_MISSING_ON;
    public static Tokens TOKEN_MISSING_RIGHT_PAREN;
    public static Tokens TOKEN_MISSING_WHEN;
    public static Tokens TOKEN_MISSING_THEN;
    public static Tokens TOKEN_MISSING_END;
    public static Tokens TOKEN_MISSING_EQUAL;
    public static Tokens TOKEN_MISSING_AND;
    public static Tokens TOKEN_MISSING_STRING_VAR;
    public static Tokens TOKEN_MISSING_LITERAL;
    public static Tokens TOKEN_MISSING_SET;
    public static Tokens TOKEN_MISSING_SQLID;
    public static Tokens TOKEN_MISSING_INSERT_SOURCE;
    public static Tokens TOKEN_MISSING_COMMA;
    public static Tokens TOKEN_MISSING_VARIABLE;
    public static Tokens TOKEN_MISSING_TRY;
    public static Tokens TOKEN_MISSING_BEGIN_CATCH;
    public static Tokens TOKEN_MISSING_CATCH;
    public static Tokens END_MISSING_TOKENS;
    public static Tokens LEX_ERROR;
    public static Tokens TOKEN_BEGIN_CS;
    public static Tokens TOKEN_END_CS;
    public static Tokens START_DEPRECATED_TOKENS;
    public static Tokens TOKEN_X_DUMP;
    public static Tokens TOKEN_X_LOAD;
    public static Tokens TOKEN_X_TRANSACTION;
    public static Tokens END_DEPRECATED_TOKENS;
    public static Tokens maxParseToken;
    public static Tokens LEX_WHITE;
    public static Tokens LEX_END_OF_LINE_COMMENT;
    public static Tokens LEX_MULTILINE_COMMENT;
    public static Tokens LEX_BATCH_SEPERATOR;
    public static Tokens SQL_CMD_MODE_TOKEN;
    public static Tokens accumulators;
    public static Tokens LEX_ACCUMULATE_ID;
    public static Tokens LEX_ACCUMULATE_STRING;
    public static Tokens LEX_ACCUMULATE_BINARY;
    public static Tokens LAST_TOKEN;
    public static Tokens TOKEN_GRAMMAR_REGULAR_STMT;
    public static Tokens TOKEN_GRAMMAR_COLUMN_NAME_LIST;
    public static Tokens TOKEN_GRAMMAR_ORDER_BY_COLUMN_LIST;
}
internal class Microsoft.SqlServer.Management.SqlParser.Parser.TokenUpdateDiff : object {
    public static TokenUpdateDiff Empty;
    private int startIndex;
    private int oldEndIndex;
    private int newEndIndex;
    public int StartIndex { get; }
    public int OldEndIndex { get; }
    public int NewEndIndex { get; }
    public bool IsEmpty { get; }
    public TokenUpdateDiff(int startIndex, int oldEndIndex, int newEndIndex);
    private static TokenUpdateDiff();
    public int get_StartIndex();
    public int get_OldEndIndex();
    public int get_NewEndIndex();
    public bool get_IsEmpty();
    public int FixTokenIndex(int index);
    public int UnfixTokenIndex(int index);
    public LexLocation FixLexLocation(LexLocation pos);
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.CreateIndexKeyList : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<SqlIndexedColumn> <IndexedColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SqlIdentifier> <IncludedColumns>k__BackingField;
    public IEnumerable`1<SqlIndexedColumn> IndexedColumns { get; public set; }
    public IEnumerable`1<SqlIdentifier> IncludedColumns { get; public set; }
    public CreateIndexKeyList(IEnumerable`1<SqlIndexedColumn> indexedColumns, IEnumerable`1<SqlIdentifier> includedColumns);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SqlIndexedColumn> get_IndexedColumns();
    [CompilerGeneratedAttribute]
public void set_IndexedColumns(IEnumerable`1<SqlIndexedColumn> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SqlIdentifier> get_IncludedColumns();
    [CompilerGeneratedAttribute]
public void set_IncludedColumns(IEnumerable`1<SqlIdentifier> value);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.CreateIndexStart : object {
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlClusterOption <ClusterOption>k__BackingField;
    public bool IsUnique { get; public set; }
    public SqlClusterOption ClusterOption { get; public set; }
    public CreateIndexStart(bool isUnique, SqlClusterOption clusterOption);
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
public void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public SqlClusterOption get_ClusterOption();
    [CompilerGeneratedAttribute]
public void set_ClusterOption(SqlClusterOption value);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.CreateTypeStatementInfo : object {
    private SqlDataTypeSpecification dataType;
    private SqlUserDefinedDataTypeNullState nullState;
    private SqlClrClassSpecifier clrClassSpecifier;
    private SqlTableDefinition tableDefinition;
    private CreateTypeStatementInfoType InfoType;
    public SqlDataTypeSpecification DataType { get; }
    public SqlUserDefinedDataTypeNullState NullState { get; }
    public SqlClrClassSpecifier ClrClassSpecifier { get; }
    public SqlTableDefinition TableDefinition { get; }
    public CreateTypeStatementInfo(SqlDataTypeSpecification dataType, SqlUserDefinedDataTypeNullState nullState);
    public CreateTypeStatementInfo(SqlClrClassSpecifier clrClassSpecifier);
    public CreateTypeStatementInfo(SqlTableDefinition tableDefinition);
    public SqlDataTypeSpecification get_DataType();
    public SqlUserDefinedDataTypeNullState get_NullState();
    public SqlClrClassSpecifier get_ClrClassSpecifier();
    public SqlTableDefinition get_TableDefinition();
    public SqlCreateTypeStatement GetSqlCreateTypeStatement(SqlObjectIdentifier name);
    private bool IsOfType(CreateTypeStatementInfoType infoType);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.CreateUserStatementFactory : object {
    public abstract virtual SqlCreateUserStatement Create(SqlIdentifier userName, SqlIdentifier defaultSchema);
    public abstract virtual SqlCreateUserStatement Create(SqlIdentifier userName, SqlIdentifier defaultSchema, SqlIdentifier defaultLanguage, string password);
    public static CreateUserStatementFactory CreateCreateUserFromAsymKeyStatementFactory(SqlIdentifier asymKeyName);
    public static CreateUserStatementFactory CreateCreateUserFromCertificateStatementFactory(SqlIdentifier certificateName);
    public static CreateUserStatementFactory CreateCreateUserWithImplicitAuthenticationStatementFactory();
    public static CreateUserStatementFactory CreateCreateUserFromLoginStatementFactory(SqlIdentifier loginName);
    public static CreateUserStatementFactory CreateCreateUserWithoutLoginStatementFactory();
    public static CreateUserStatementFactory CreateCreateUserFromExternalProviderStatementFactory();
    public static CreateUserStatementFactory CreateCreateUserStatementErrorFactory();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.CursorDefinitionInfo : object {
    private SqlSelectStatement statement;
    private List`1<SqlCursorOption> extendedCursorOptions;
    private static SqlCursorOptionType[] conflictingOptionSet1;
    private static SqlCursorOptionType[] conflictingOptionSet2;
    private static SqlCursorOptionType[] conflictingOptionSet3;
    private static SqlCursorOptionType[] conflictingOptionSet4;
    public SqlSelectStatement SelectStatement { get; }
    public List`1<SqlCursorOption> ExtendedCursorOptions { get; }
    public CursorDefinitionInfo(SqlSelectStatement statement, List`1<SqlCursorOption> extendedCursorOptions);
    private static CursorDefinitionInfo();
    private void ReportConflictingOptions(Dictionary`2<SqlCursorOptionType, SqlCursorOption> options, SqlCursorOptionType[] conflictTypes);
    public SqlSelectStatement get_SelectStatement();
    public List`1<SqlCursorOption> get_ExtendedCursorOptions();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.DdlTargetObjectType : Enum {
    public int value__;
    public static DdlTargetObjectType None;
    public static DdlTargetObjectType Aggregate;
    public static DdlTargetObjectType Database;
    public static DdlTargetObjectType Default;
    public static DdlTargetObjectType Function;
    public static DdlTargetObjectType Index;
    public static DdlTargetObjectType Login;
    public static DdlTargetObjectType Procedure;
    public static DdlTargetObjectType Role;
    public static DdlTargetObjectType Rule;
    public static DdlTargetObjectType Schema;
    public static DdlTargetObjectType SecurityPolicy;
    public static DdlTargetObjectType Sequence;
    public static DdlTargetObjectType Synonym;
    public static DdlTargetObjectType Table;
    public static DdlTargetObjectType Trigger;
    public static DdlTargetObjectType Type;
    public static DdlTargetObjectType User;
    public static DdlTargetObjectType View;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.DmlTarget : object {
    private SqlTableExpression tableExpression;
    private List`1<SqlColumnRefExpression> targetColumns;
    public SqlTableExpression TableExpression { get; }
    public List`1<SqlColumnRefExpression> TargetColumns { get; }
    internal DmlTarget(SqlTableExpression tableExpression, List`1<SqlColumnRefExpression> targetColumns);
    public SqlTableExpression get_TableExpression();
    public List`1<SqlColumnRefExpression> get_TargetColumns();
}
internal static class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.DropObjectBinderHelper : object {
    private static GetObjectNameDelegate`1<SqlIdentifier> SqlIdentifierObjectName;
    private static GetObjectNameDelegate`1<SqlObjectIdentifier> SqlObjectIdentifierObjectName;
    private static DropObjectBinderHelper();
    public static IDropObjectBinderHelper`2<T, SqlObjectIdentifier> GetSchemaOwnedObjectHelper(IDropObjectStatement`2<T, SqlObjectIdentifier> dropStatement);
    public static IDropObjectBinderHelper`2<T, SqlObjectIdentifier> GetStandardHelper(IDropObjectStatement`2<T, SqlObjectIdentifier> dropStatement);
    public static IDropObjectBinderHelper`2<T, SqlIdentifier> GetStandardHelper(IDropObjectStatement`2<T, SqlIdentifier> dropStatement);
    private static DdlTargetObjectType RetrieveDdlTargetObjectType(ISchemaOwnedObject schemaOwnedObject);
    private static SqlIdentifier GetObjectName(SqlIdentifier dropObject);
    private static SqlIdentifier GetObjectName(SqlObjectIdentifier dropObject);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.FunctionDefinitionFactory : object {
    public abstract virtual SqlFunctionDefinition Create(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters);
    public static FunctionDefinitionFactory CreateTableRelationalFactory(FunctionVariableNameAndTableReturnTypePair pair, List`1<SqlModuleOption> options, SqlFunctionBodyDefinition bodyDefinition);
    public static FunctionDefinitionFactory CreateScalarFactory(SqlScalarFunctionReturnType returnType, List`1<SqlModuleOption> options, SqlFunctionBodyDefinition bodyDefinition);
    public static FunctionDefinitionFactory CreateTableClrFactory(SqlTableFunctionReturnType returnType, List`1<SqlModuleOption> options, SqlSimpleOrderByClause orderClause, SqlClrFunctionBodyDefinition bodyDefinition);
}
internal class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.FunctionUnion`3 : ValueType {
    public S ScalarValuedFunction;
    public T TableValuedFunction;
    public bool IsNull { get; }
    public bool IsScalarValuedFunction { get; }
    public bool IsTableValuedFunction { get; }
    public U AsUserDefinedFunction { get; }
    public FunctionUnion`3(S scalarValuedFunction);
    public FunctionUnion`3(T tableValuedFunction);
    public bool get_IsNull();
    public bool get_IsScalarValuedFunction();
    public bool get_IsTableValuedFunction();
    public U get_AsUserDefinedFunction();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.FunctionVariableNameAndTableReturnTypePair : object {
    private SqlLiteralExpression variable;
    private SqlTableFunctionReturnType returnType;
    public SqlLiteralExpression Variable { get; }
    public SqlTableFunctionReturnType ReturnType { get; }
    public FunctionVariableNameAndTableReturnTypePair(SqlLiteralExpression variable, SqlTableFunctionReturnType returnType);
    public SqlLiteralExpression get_Variable();
    public SqlTableFunctionReturnType get_ReturnType();
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDdlTriggerDefinitionInfo {
    public SqlTriggerActivationType ActivationType { get; }
    public SqlDdlTriggerTargetType TargetType { get; }
    public SqlCollection`1<SqlTriggerEvent> Events { get; }
    public abstract virtual SqlTriggerActivationType get_ActivationType();
    public abstract virtual SqlDdlTriggerTargetType get_TargetType();
    public abstract virtual SqlCollection`1<SqlTriggerEvent> get_Events();
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDmlTriggerDefinitionInfo {
    public SqlTriggerActivationType ActivationType { get; }
    public SqlObjectIdentifier TargetName { get; }
    public SqlCollection`1<SqlTriggerAction> Actions { get; }
    public bool IsWithAppend { get; }
    public bool IsNotForReplication { get; }
    public abstract virtual SqlTriggerActivationType get_ActivationType();
    public abstract virtual SqlObjectIdentifier get_TargetName();
    public abstract virtual SqlCollection`1<SqlTriggerAction> get_Actions();
    public abstract virtual bool get_IsWithAppend();
    public abstract virtual bool get_IsNotForReplication();
}
internal interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectBinderHelper`2 {
    public ISqlCodeCollection`1<N> DropObjects { get; }
    public abstract virtual ISqlCodeCollection`1<N> get_DropObjects();
    public abstract virtual SqlIdentifier GetObjectName(N dropObject);
    public abstract virtual T FindDropMetadataObject(BatchBindingContext bindingContext, N name, LexicalScope lexicalScope);
    public abstract virtual IMetadataObject FindAnyMetadataObject(BatchBindingContext bindingContext, N name, LexicalScope lexicalScope, DdlTargetObjectType& actualType);
    public abstract virtual void ExecuteDrop(BatchBindingContext bindingContext, T dropObject, LexicalScope lexicalScope);
}
internal interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement`2 {
    public ISqlCodeCollection`1<N> DropObjects { get; }
    public abstract virtual ISqlCodeCollection`1<N> get_DropObjects();
    public abstract virtual T FindMetadataObject(BatchBindingContext bindingContext, N name, LexicalScope lexicalScope);
    public abstract virtual void ExecuteDrop(BatchBindingContext bindingContext, T dropObject, LexicalScope lexicalScope);
}
internal interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.INullCodeObject {
}
internal interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlBackupRestoreTransactionStatement {
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlCodeCollection`1 {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual T get_Item(int index);
    public abstract virtual bool Contains(T item);
    public abstract virtual void CopyTo(T[] array, int arrayIndex);
    public abstract virtual int IndexOf(T item);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlCodeObjectContextVisitor`1 {
    public abstract virtual void Visit(SqlAggregateFunctionCallExpression codeObject, C context);
    public abstract virtual void Visit(SqlAllAnyComparisonBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlAllowPageLocksIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlAllowRowLocksIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlAssignment codeObject, C context);
    public abstract virtual void Visit(SqlAtTimeZoneExpression codeObject, C context);
    public abstract virtual void Visit(SqlBatch codeObject, C context);
    public abstract virtual void Visit(SqlBetweenBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlBinaryBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlBinaryFilterExpression codeObject, C context);
    public abstract virtual void Visit(SqlBinaryQueryExpression codeObject, C context);
    public abstract virtual void Visit(SqlBinaryScalarExpression codeObject, C context);
    public abstract virtual void Visit(SqlBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlBooleanFilterExpression codeObject, C context);
    public abstract virtual void Visit(SqlBuiltinScalarFunctionCallExpression codeObject, C context);
    public abstract virtual void Visit(SqlCastExpression codeObject, C context);
    public abstract virtual void Visit(SqlChangeTrackingContext codeObject, C context);
    public abstract virtual void Visit(SqlCheckConstraint codeObject, C context);
    public abstract virtual void Visit(SqlClrAssemblySpecifier codeObject, C context);
    public abstract virtual void Visit(SqlClrClassSpecifier codeObject, C context);
    public abstract virtual void Visit(SqlClrFunctionBodyDefinition codeObject, C context);
    public abstract virtual void Visit(SqlClrMethodSpecifier codeObject, C context);
    public abstract virtual void Visit(SqlCollateScalarExpression codeObject, C context);
    public abstract virtual void Visit(SqlCollation codeObject, C context);
    public abstract virtual void Visit(SqlColumnAssignment codeObject, C context);
    public abstract virtual void Visit(SqlDefaultConstraint codeObject, C context);
    public abstract virtual void Visit(SqlColumnDefinition codeObject, C context);
    public abstract virtual void Visit(SqlColumnIdentity codeObject, C context);
    public abstract virtual void Visit(SqlColumnRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlCommonTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlComparisonBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlCompressionPartitionRange codeObject, C context);
    public abstract virtual void Visit(SqlComputedColumnDefinition codeObject, C context);
    public abstract virtual void Visit(SqlConditionClause codeObject, C context);
    public abstract virtual void Visit(SqlConstraint codeObject, C context);
    public abstract virtual void Visit(SqlConvertExpression codeObject, C context);
    public abstract virtual void Visit(SqlCreateUserOption codeObject, C context);
    public abstract virtual void Visit(SqlCubeGroupByItem codeObject, C context);
    public abstract virtual void Visit(SqlCursorOption codeObject, C context);
    public abstract virtual void Visit(SqlCursorVariableAssignment codeObject, C context);
    public abstract virtual void Visit(SqlCursorVariableRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlDataCompressionIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlDataType codeObject, C context);
    public abstract virtual void Visit(SqlDataTypeSpecification codeObject, C context);
    public abstract virtual void Visit(SqlDdlTriggerDefinition codeObject, C context);
    public abstract virtual void Visit(SqlDefaultValuesInsertMergeActionSource codeObject, C context);
    public abstract virtual void Visit(SqlDefaultValuesInsertSource codeObject, C context);
    public abstract virtual void Visit(SqlDeleteMergeAction codeObject, C context);
    public abstract virtual void Visit(SqlDeleteSpecification codeObject, C context);
    public abstract virtual void Visit(SqlDerivedTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlDmlSpecificationTableSource codeObject, C context);
    public abstract virtual void Visit(SqlDmlTriggerDefinition codeObject, C context);
    public abstract virtual void Visit(SqlDropExistingIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlEdgeConstraint codeObject, C context);
    public abstract virtual void Visit(SqlExecuteArgument codeObject, C context);
    public abstract virtual void Visit(SqlExecuteAsClause codeObject, C context);
    public abstract virtual void Visit(SqlExistsBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlFillFactorIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlFilterClause codeObject, C context);
    public abstract virtual void Visit(SqlForBrowseClause codeObject, C context);
    public abstract virtual void Visit(SqlForeignKeyConstraint codeObject, C context);
    public abstract virtual void Visit(SqlForXmlAutoClause codeObject, C context);
    public abstract virtual void Visit(SqlForXmlClause codeObject, C context);
    public abstract virtual void Visit(SqlForXmlDirective codeObject, C context);
    public abstract virtual void Visit(SqlForXmlExplicitClause codeObject, C context);
    public abstract virtual void Visit(SqlForXmlPathClause codeObject, C context);
    public abstract virtual void Visit(SqlForXmlRawClause codeObject, C context);
    public abstract virtual void Visit(SqlFromClause codeObject, C context);
    public abstract virtual void Visit(SqlFullTextBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlFullTextColumn codeObject, C context);
    public abstract virtual void Visit(SqlFunctionDefinition codeObject, C context);
    public abstract virtual void Visit(SqlGlobalScalarVariableRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlGrandTotalGroupByItem codeObject, C context);
    public abstract virtual void Visit(SqlGrandTotalGroupingSet codeObject, C context);
    public abstract virtual void Visit(SqlGroupByClause codeObject, C context);
    public abstract virtual void Visit(SqlGroupBySets codeObject, C context);
    public abstract virtual void Visit(SqlGroupingSetItemsCollection codeObject, C context);
    public abstract virtual void Visit(SqlHavingClause codeObject, C context);
    public abstract virtual void Visit(SqlIdentifier codeObject, C context);
    public abstract virtual void Visit(SqlIdentityFunctionCallExpression codeObject, C context);
    public abstract virtual void Visit(SqlIgnoreDupKeyIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlInBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlInBooleanExpressionCollectionValue codeObject, C context);
    public abstract virtual void Visit(SqlInBooleanExpressionQueryValue codeObject, C context);
    public abstract virtual void Visit(SqlIndexedColumn codeObject, C context);
    public abstract virtual void Visit(SqlIndexHint codeObject, C context);
    public abstract virtual void Visit(SqlIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlInlineIndexConstraint codeObject, C context);
    public abstract virtual void Visit(SqlInlineFunctionBodyDefinition codeObject, C context);
    public abstract virtual void Visit(SqlInlineTableRelationalFunctionDefinition codeObject, C context);
    public abstract virtual void Visit(SqlInlineTableVariableDeclaration codeObject, C context);
    public abstract virtual void Visit(SqlInsertMergeAction codeObject, C context);
    public abstract virtual void Visit(SqlInsertSpecification codeObject, C context);
    public abstract virtual void Visit(SqlIntoClause codeObject, C context);
    public abstract virtual void Visit(SqlIsNullBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlJsonObjectArgument codeObject, C context);
    public abstract virtual void Visit(SqlLargeDataStorageInformation codeObject, C context);
    public abstract virtual void Visit(SqlLikeBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlLiteralExpression codeObject, C context);
    public abstract virtual void Visit(SqlLoginPassword codeObject, C context);
    public abstract virtual void Visit(SqlMaxDegreeOfParallelismIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlMergeActionClause codeObject, C context);
    public abstract virtual void Visit(SqlMergeSpecification codeObject, C context);
    public abstract virtual void Visit(SqlInsertSource codeObject, C context);
    public abstract virtual void Visit(SqlModuleCalledOnNullInputOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleEncryptionOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleExecuteAsOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleInlineOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleNativeCompilationOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleRecompileOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleReturnsNullOnNullInputOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleSchemaBindingOption codeObject, C context);
    public abstract virtual void Visit(SqlModuleViewMetadataOption codeObject, C context);
    public abstract virtual void Visit(SqlMultistatementFunctionBodyDefinition codeObject, C context);
    public abstract virtual void Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject, C context);
    public abstract virtual void Visit(SqlNotBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlNullQualifier codeObject, C context);
    public abstract virtual void Visit(SqlQueryExpression codeObject, C context);
    public abstract virtual void Visit(SqlScalarExpression codeObject, C context);
    public abstract virtual void Visit(SqlTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlObjectIdentifier codeObject, C context);
    public abstract virtual void Visit(SqlObjectReference codeObject, C context);
    public abstract virtual void Visit(SqlOnlineIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlOptimizeForSequentialKeyIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlResumableIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlBucketCountIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlCompressionDelayIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlMaxDurationIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlOffsetFetchClause codeObject, C context);
    public abstract virtual void Visit(SqlOrderByClause codeObject, C context);
    public abstract virtual void Visit(SqlOrderByItem codeObject, C context);
    public abstract virtual void Visit(SqlOutputClause codeObject, C context);
    public abstract virtual void Visit(SqlOutputIntoClause codeObject, C context);
    public abstract virtual void Visit(SqlPadIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlParameterDeclaration codeObject, C context);
    public abstract virtual void Visit(SqlPivotClause codeObject, C context);
    public abstract virtual void Visit(SqlPivotTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlPrimaryKeyConstraint codeObject, C context);
    public abstract virtual void Visit(SqlStorageSpecification codeObject, C context);
    public abstract virtual void Visit(SqlProcedureDefinition codeObject, C context);
    public abstract virtual void Visit(SqlQualifiedJoinTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlQuerySpecification codeObject, C context);
    public abstract virtual void Visit(SqlQueryWithClause codeObject, C context);
    public abstract virtual void Visit(SqlRollupGroupByItem codeObject, C context);
    public abstract virtual void Visit(SqlRowConstructorExpression codeObject, C context);
    public abstract virtual void Visit(SqlScalarClrFunctionDefinition codeObject, C context);
    public abstract virtual void Visit(SqlScalarFunctionReturnType codeObject, C context);
    public abstract virtual void Visit(SqlScalarRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlScalarRelationalFunctionDefinition codeObject, C context);
    public abstract virtual void Visit(SqlScalarSubQueryExpression codeObject, C context);
    public abstract virtual void Visit(SqlScalarVariableAssignment codeObject, C context);
    public abstract virtual void Visit(SqlScalarVariableRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlScript codeObject, C context);
    public abstract virtual void Visit(SqlSearchedCaseExpression codeObject, C context);
    public abstract virtual void Visit(SqlSearchedWhenClause codeObject, C context);
    public abstract virtual void Visit(SqlSelectClause codeObject, C context);
    public abstract virtual void Visit(SqlSelectIntoClause codeObject, C context);
    public abstract virtual void Visit(SqlSelectScalarExpression codeObject, C context);
    public abstract virtual void Visit(SqlSelectSpecification codeObject, C context);
    public abstract virtual void Visit(SqlSelectSpecificationInsertSource codeObject, C context);
    public abstract virtual void Visit(SqlSelectStarExpression codeObject, C context);
    public abstract virtual void Visit(SqlSelectVariableAssignmentExpression codeObject, C context);
    public abstract virtual void Visit(SqlSetClause codeObject, C context);
    public abstract virtual void Visit(SqlSimpleCaseExpression codeObject, C context);
    public abstract virtual void Visit(SqlSimpleGroupByItem codeObject, C context);
    public abstract virtual void Visit(SqlSimpleOrderByClause codeObject, C context);
    public abstract virtual void Visit(SqlSimpleOrderByItem codeObject, C context);
    public abstract virtual void Visit(SqlSimpleWhenClause codeObject, C context);
    public abstract virtual void Visit(SqlSortedDataIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlSortedDataReorgIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlSortInTempDbIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlStatisticsIncrementalIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlStatisticsNoRecomputeIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlStatisticsOnlyIndexOption codeObject, C context);
    public abstract virtual void Visit(SqlTableClrFunctionDefinition codeObject, C context);
    public abstract virtual void Visit(SqlTableConstructorExpression codeObject, C context);
    public abstract virtual void Visit(SqlTableConstructorInsertSource codeObject, C context);
    public abstract virtual void Visit(SqlTableDefinition codeObject, C context);
    public abstract virtual void Visit(SqlTableFunctionReturnType codeObject, C context);
    public abstract virtual void Visit(SqlTableHint codeObject, C context);
    public abstract virtual void Visit(SqlTableRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlTableValuedFunctionRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlTableVariableRefExpression codeObject, C context);
    public abstract virtual void Visit(SqlTableUdtInstanceMethodExpression codeObject, C context);
    public abstract virtual void Visit(SqlTargetTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlTemporalPeriodDefinition codeObject, C context);
    public abstract virtual void Visit(SqlTopSpecification codeObject, C context);
    public abstract virtual void Visit(SqlTriggerAction codeObject, C context);
    public abstract virtual void Visit(SqlTriggerDefinition codeObject, C context);
    public abstract virtual void Visit(SqlTriggerEvent codeObject, C context);
    public abstract virtual void Visit(SqlUdtInstanceDataMemberExpression codeObject, C context);
    public abstract virtual void Visit(SqlUdtInstanceMethodExpression codeObject, C context);
    public abstract virtual void Visit(SqlUdtStaticDataMemberExpression codeObject, C context);
    public abstract virtual void Visit(SqlUdtStaticMethodExpression codeObject, C context);
    public abstract virtual void Visit(SqlUnaryScalarExpression codeObject, C context);
    public abstract virtual void Visit(SqlUniqueConstraint codeObject, C context);
    public abstract virtual void Visit(SqlUnpivotClause codeObject, C context);
    public abstract virtual void Visit(SqlUnpivotTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlUnqualifiedJoinTableExpression codeObject, C context);
    public abstract virtual void Visit(SqlUpdateBooleanExpression codeObject, C context);
    public abstract virtual void Visit(SqlUpdateMergeAction codeObject, C context);
    public abstract virtual void Visit(SqlUpdateSpecification codeObject, C context);
    public abstract virtual void Visit(SqlUserDefinedScalarFunctionCallExpression codeObject, C context);
    public abstract virtual void Visit(SqlValuesInsertMergeActionSource codeObject, C context);
    public abstract virtual void Visit(SqlVariableColumnAssignment codeObject, C context);
    public abstract virtual void Visit(SqlVariableDeclaration codeObject, C context);
    public abstract virtual void Visit(SqlViewDefinition codeObject, C context);
    public abstract virtual void Visit(SqlWindowClause codeObject, C context);
    public abstract virtual void Visit(SqlWindowExpression codeObject, C context);
    public abstract virtual void Visit(SqlWindowSpecification codeObject, C context);
    public abstract virtual void Visit(SqlWhereClause codeObject, C context);
    public abstract virtual void Visit(SqlXmlNamespacesDeclaration codeObject, C context);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlCodeObjectContextVisitor`2 {
    public abstract virtual T Visit(SqlAggregateFunctionCallExpression codeObject, C context);
    public abstract virtual T Visit(SqlAllAnyComparisonBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlAllowPageLocksIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlAllowRowLocksIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlAssignment codeObject, C context);
    public abstract virtual T Visit(SqlAtTimeZoneExpression codeObject, C context);
    public abstract virtual T Visit(SqlBatch codeObject, C context);
    public abstract virtual T Visit(SqlBetweenBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlBinaryBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlBinaryFilterExpression codeObject, C context);
    public abstract virtual T Visit(SqlBinaryQueryExpression codeObject, C context);
    public abstract virtual T Visit(SqlBinaryScalarExpression codeObject, C context);
    public abstract virtual T Visit(SqlBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlBooleanFilterExpression codeObject, C context);
    public abstract virtual T Visit(SqlBuiltinScalarFunctionCallExpression codeObject, C context);
    public abstract virtual T Visit(SqlCastExpression codeObject, C context);
    public abstract virtual T Visit(SqlChangeTrackingContext codeObject, C context);
    public abstract virtual T Visit(SqlCheckConstraint codeObject, C context);
    public abstract virtual T Visit(SqlClrAssemblySpecifier codeObject, C context);
    public abstract virtual T Visit(SqlClrClassSpecifier codeObject, C context);
    public abstract virtual T Visit(SqlClrFunctionBodyDefinition codeObject, C context);
    public abstract virtual T Visit(SqlClrMethodSpecifier codeObject, C context);
    public abstract virtual T Visit(SqlCollateScalarExpression codeObject, C context);
    public abstract virtual T Visit(SqlCollation codeObject, C context);
    public abstract virtual T Visit(SqlColumnAssignment codeObject, C context);
    public abstract virtual T Visit(SqlDefaultConstraint codeObject, C context);
    public abstract virtual T Visit(SqlColumnDefinition codeObject, C context);
    public abstract virtual T Visit(SqlColumnIdentity codeObject, C context);
    public abstract virtual T Visit(SqlColumnRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlCommonTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlComparisonBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlCompressionPartitionRange codeObject, C context);
    public abstract virtual T Visit(SqlComputedColumnDefinition codeObject, C context);
    public abstract virtual T Visit(SqlConditionClause codeObject, C context);
    public abstract virtual T Visit(SqlConstraint codeObject, C context);
    public abstract virtual T Visit(SqlConvertExpression codeObject, C context);
    public abstract virtual T Visit(SqlCreateUserOption codeObject, C context);
    public abstract virtual T Visit(SqlCubeGroupByItem codeObject, C context);
    public abstract virtual T Visit(SqlCursorOption codeObject, C context);
    public abstract virtual T Visit(SqlCursorVariableAssignment codeObject, C context);
    public abstract virtual T Visit(SqlCursorVariableRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlDataCompressionIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlDataType codeObject, C context);
    public abstract virtual T Visit(SqlDataTypeSpecification codeObject, C context);
    public abstract virtual T Visit(SqlDdlTriggerDefinition codeObject, C context);
    public abstract virtual T Visit(SqlDefaultValuesInsertMergeActionSource codeObject, C context);
    public abstract virtual T Visit(SqlDefaultValuesInsertSource codeObject, C context);
    public abstract virtual T Visit(SqlDeleteMergeAction codeObject, C context);
    public abstract virtual T Visit(SqlDeleteSpecification codeObject, C context);
    public abstract virtual T Visit(SqlDerivedTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlDmlSpecificationTableSource codeObject, C context);
    public abstract virtual T Visit(SqlDmlTriggerDefinition codeObject, C context);
    public abstract virtual T Visit(SqlDropExistingIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlEdgeConstraint codeObject, C context);
    public abstract virtual T Visit(SqlExecuteArgument codeObject, C context);
    public abstract virtual T Visit(SqlExecuteAsClause codeObject, C context);
    public abstract virtual T Visit(SqlExistsBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlFillFactorIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlFilterClause codeObject, C context);
    public abstract virtual T Visit(SqlForBrowseClause codeObject, C context);
    public abstract virtual T Visit(SqlForeignKeyConstraint codeObject, C context);
    public abstract virtual T Visit(SqlForXmlAutoClause codeObject, C context);
    public abstract virtual T Visit(SqlForXmlClause codeObject, C context);
    public abstract virtual T Visit(SqlForXmlDirective codeObject, C context);
    public abstract virtual T Visit(SqlForXmlExplicitClause codeObject, C context);
    public abstract virtual T Visit(SqlForXmlPathClause codeObject, C context);
    public abstract virtual T Visit(SqlForXmlRawClause codeObject, C context);
    public abstract virtual T Visit(SqlFromClause codeObject, C context);
    public abstract virtual T Visit(SqlFullTextBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlFullTextColumn codeObject, C context);
    public abstract virtual T Visit(SqlFunctionDefinition codeObject, C context);
    public abstract virtual T Visit(SqlGlobalScalarVariableRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlGrandTotalGroupByItem codeObject, C context);
    public abstract virtual T Visit(SqlGrandTotalGroupingSet codeObject, C context);
    public abstract virtual T Visit(SqlGroupByClause codeObject, C context);
    public abstract virtual T Visit(SqlGroupBySets codeObject, C context);
    public abstract virtual T Visit(SqlGroupingSetItemsCollection codeObject, C context);
    public abstract virtual T Visit(SqlHavingClause codeObject, C context);
    public abstract virtual T Visit(SqlIdentifier codeObject, C context);
    public abstract virtual T Visit(SqlIdentityFunctionCallExpression codeObject, C context);
    public abstract virtual T Visit(SqlIgnoreDupKeyIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlInBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlInBooleanExpressionCollectionValue codeObject, C context);
    public abstract virtual T Visit(SqlInBooleanExpressionQueryValue codeObject, C context);
    public abstract virtual T Visit(SqlIndexedColumn codeObject, C context);
    public abstract virtual T Visit(SqlIndexHint codeObject, C context);
    public abstract virtual T Visit(SqlIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlInlineIndexConstraint codeObject, C context);
    public abstract virtual T Visit(SqlInlineFunctionBodyDefinition codeObject, C context);
    public abstract virtual T Visit(SqlInlineTableRelationalFunctionDefinition codeObject, C context);
    public abstract virtual T Visit(SqlInlineTableVariableDeclaration codeObject, C context);
    public abstract virtual T Visit(SqlInsertMergeAction codeObject, C context);
    public abstract virtual T Visit(SqlInsertSpecification codeObject, C context);
    public abstract virtual T Visit(SqlIntoClause codeObject, C context);
    public abstract virtual T Visit(SqlIsNullBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlJsonObjectArgument codeObject, C context);
    public abstract virtual T Visit(SqlLargeDataStorageInformation codeObject, C context);
    public abstract virtual T Visit(SqlLikeBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlLiteralExpression codeObject, C context);
    public abstract virtual T Visit(SqlLoginPassword codeObject, C context);
    public abstract virtual T Visit(SqlMaxDegreeOfParallelismIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlMergeActionClause codeObject, C context);
    public abstract virtual T Visit(SqlMergeSpecification codeObject, C context);
    public abstract virtual T Visit(SqlInsertSource codeObject, C context);
    public abstract virtual T Visit(SqlModuleCalledOnNullInputOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleEncryptionOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleExecuteAsOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleInlineOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleNativeCompilationOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleRecompileOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleReturnsNullOnNullInputOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleSchemaBindingOption codeObject, C context);
    public abstract virtual T Visit(SqlModuleViewMetadataOption codeObject, C context);
    public abstract virtual T Visit(SqlMultistatementFunctionBodyDefinition codeObject, C context);
    public abstract virtual T Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject, C context);
    public abstract virtual T Visit(SqlNotBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlNullQualifier codeObject, C context);
    public abstract virtual T Visit(SqlQueryExpression codeObject, C context);
    public abstract virtual T Visit(SqlScalarExpression codeObject, C context);
    public abstract virtual T Visit(SqlTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlObjectIdentifier codeObject, C context);
    public abstract virtual T Visit(SqlObjectReference codeObject, C context);
    public abstract virtual T Visit(SqlOnlineIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlOptimizeForSequentialKeyIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlResumableIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlBucketCountIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlCompressionDelayIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlMaxDurationIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlOffsetFetchClause codeObject, C context);
    public abstract virtual T Visit(SqlOrderByClause codeObject, C context);
    public abstract virtual T Visit(SqlOrderByItem codeObject, C context);
    public abstract virtual T Visit(SqlOutputClause codeObject, C context);
    public abstract virtual T Visit(SqlOutputIntoClause codeObject, C context);
    public abstract virtual T Visit(SqlPadIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlParameterDeclaration codeObject, C context);
    public abstract virtual T Visit(SqlPivotClause codeObject, C context);
    public abstract virtual T Visit(SqlPivotTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlPrimaryKeyConstraint codeObject, C context);
    public abstract virtual T Visit(SqlStorageSpecification codeObject, C context);
    public abstract virtual T Visit(SqlProcedureDefinition codeObject, C context);
    public abstract virtual T Visit(SqlQualifiedJoinTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlQuerySpecification codeObject, C context);
    public abstract virtual T Visit(SqlQueryWithClause codeObject, C context);
    public abstract virtual T Visit(SqlRollupGroupByItem codeObject, C context);
    public abstract virtual T Visit(SqlRowConstructorExpression codeObject, C context);
    public abstract virtual T Visit(SqlScalarClrFunctionDefinition codeObject, C context);
    public abstract virtual T Visit(SqlScalarFunctionReturnType codeObject, C context);
    public abstract virtual T Visit(SqlScalarRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlScalarRelationalFunctionDefinition codeObject, C context);
    public abstract virtual T Visit(SqlScalarSubQueryExpression codeObject, C context);
    public abstract virtual T Visit(SqlScalarVariableAssignment codeObject, C context);
    public abstract virtual T Visit(SqlScalarVariableRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlScript codeObject, C context);
    public abstract virtual T Visit(SqlSearchedCaseExpression codeObject, C context);
    public abstract virtual T Visit(SqlSearchedWhenClause codeObject, C context);
    public abstract virtual T Visit(SqlSelectClause codeObject, C context);
    public abstract virtual T Visit(SqlSelectIntoClause codeObject, C context);
    public abstract virtual T Visit(SqlSelectScalarExpression codeObject, C context);
    public abstract virtual T Visit(SqlSelectSpecification codeObject, C context);
    public abstract virtual T Visit(SqlSelectSpecificationInsertSource codeObject, C context);
    public abstract virtual T Visit(SqlSelectStarExpression codeObject, C context);
    public abstract virtual T Visit(SqlSelectVariableAssignmentExpression codeObject, C context);
    public abstract virtual T Visit(SqlSetClause codeObject, C context);
    public abstract virtual T Visit(SqlSimpleCaseExpression codeObject, C context);
    public abstract virtual T Visit(SqlSimpleGroupByItem codeObject, C context);
    public abstract virtual T Visit(SqlSimpleOrderByClause codeObject, C context);
    public abstract virtual T Visit(SqlSimpleOrderByItem codeObject, C context);
    public abstract virtual T Visit(SqlSimpleWhenClause codeObject, C context);
    public abstract virtual T Visit(SqlSortedDataIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlSortedDataReorgIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlSortInTempDbIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlStatisticsIncrementalIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlStatisticsNoRecomputeIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlStatisticsOnlyIndexOption codeObject, C context);
    public abstract virtual T Visit(SqlTableClrFunctionDefinition codeObject, C context);
    public abstract virtual T Visit(SqlTableConstructorExpression codeObject, C context);
    public abstract virtual T Visit(SqlTableConstructorInsertSource codeObject, C context);
    public abstract virtual T Visit(SqlTableDefinition codeObject, C context);
    public abstract virtual T Visit(SqlTableFunctionReturnType codeObject, C context);
    public abstract virtual T Visit(SqlTableHint codeObject, C context);
    public abstract virtual T Visit(SqlTableRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlTableValuedFunctionRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlTableVariableRefExpression codeObject, C context);
    public abstract virtual T Visit(SqlTableUdtInstanceMethodExpression codeObject, C context);
    public abstract virtual T Visit(SqlTargetTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlTemporalPeriodDefinition codeObject, C context);
    public abstract virtual T Visit(SqlTopSpecification codeObject, C context);
    public abstract virtual T Visit(SqlTriggerAction codeObject, C context);
    public abstract virtual T Visit(SqlTriggerDefinition codeObject, C context);
    public abstract virtual T Visit(SqlTriggerEvent codeObject, C context);
    public abstract virtual T Visit(SqlUdtInstanceDataMemberExpression codeObject, C context);
    public abstract virtual T Visit(SqlUdtInstanceMethodExpression codeObject, C context);
    public abstract virtual T Visit(SqlUdtStaticDataMemberExpression codeObject, C context);
    public abstract virtual T Visit(SqlUdtStaticMethodExpression codeObject, C context);
    public abstract virtual T Visit(SqlUnaryScalarExpression codeObject, C context);
    public abstract virtual T Visit(SqlUniqueConstraint codeObject, C context);
    public abstract virtual T Visit(SqlUnpivotClause codeObject, C context);
    public abstract virtual T Visit(SqlUnpivotTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlUnqualifiedJoinTableExpression codeObject, C context);
    public abstract virtual T Visit(SqlUpdateBooleanExpression codeObject, C context);
    public abstract virtual T Visit(SqlUpdateMergeAction codeObject, C context);
    public abstract virtual T Visit(SqlUpdateSpecification codeObject, C context);
    public abstract virtual T Visit(SqlUserDefinedScalarFunctionCallExpression codeObject, C context);
    public abstract virtual T Visit(SqlValuesInsertMergeActionSource codeObject, C context);
    public abstract virtual T Visit(SqlVariableColumnAssignment codeObject, C context);
    public abstract virtual T Visit(SqlVariableDeclaration codeObject, C context);
    public abstract virtual T Visit(SqlViewDefinition codeObject, C context);
    public abstract virtual T Visit(SqlWindowClause codeObject, C context);
    public abstract virtual T Visit(SqlWindowExpression codeObject, C context);
    public abstract virtual T Visit(SqlWindowSpecification codeObject, C context);
    public abstract virtual T Visit(SqlWhereClause codeObject, C context);
    public abstract virtual T Visit(SqlXmlNamespacesDeclaration codeObject, C context);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlCodeObjectVisitor {
    public abstract virtual void Visit(SqlAggregateFunctionCallExpression codeObject);
    public abstract virtual void Visit(SqlAllAnyComparisonBooleanExpression codeObject);
    public abstract virtual void Visit(SqlAllowPageLocksIndexOption codeObject);
    public abstract virtual void Visit(SqlAllowRowLocksIndexOption codeObject);
    public abstract virtual void Visit(SqlAssignment codeObject);
    public abstract virtual void Visit(SqlAtTimeZoneExpression codeObject);
    public abstract virtual void Visit(SqlBatch codeObject);
    public abstract virtual void Visit(SqlBetweenBooleanExpression codeObject);
    public abstract virtual void Visit(SqlBinaryBooleanExpression codeObject);
    public abstract virtual void Visit(SqlBinaryFilterExpression codeObject);
    public abstract virtual void Visit(SqlBinaryQueryExpression codeObject);
    public abstract virtual void Visit(SqlBinaryScalarExpression codeObject);
    public abstract virtual void Visit(SqlBooleanExpression codeObject);
    public abstract virtual void Visit(SqlBooleanFilterExpression codeObject);
    public abstract virtual void Visit(SqlBuiltinScalarFunctionCallExpression codeObject);
    public abstract virtual void Visit(SqlCastExpression codeObject);
    public abstract virtual void Visit(SqlChangeTrackingContext codeObject);
    public abstract virtual void Visit(SqlCheckConstraint codeObject);
    public abstract virtual void Visit(SqlClrAssemblySpecifier codeObject);
    public abstract virtual void Visit(SqlClrClassSpecifier codeObject);
    public abstract virtual void Visit(SqlClrFunctionBodyDefinition codeObject);
    public abstract virtual void Visit(SqlClrMethodSpecifier codeObject);
    public abstract virtual void Visit(SqlCollateScalarExpression codeObject);
    public abstract virtual void Visit(SqlCollation codeObject);
    public abstract virtual void Visit(SqlColumnAssignment codeObject);
    public abstract virtual void Visit(SqlDefaultConstraint codeObject);
    public abstract virtual void Visit(SqlColumnDefinition codeObject);
    public abstract virtual void Visit(SqlColumnIdentity codeObject);
    public abstract virtual void Visit(SqlColumnRefExpression codeObject);
    public abstract virtual void Visit(SqlCommonTableExpression codeObject);
    public abstract virtual void Visit(SqlComparisonBooleanExpression codeObject);
    public abstract virtual void Visit(SqlCompressionPartitionRange codeObject);
    public abstract virtual void Visit(SqlComputedColumnDefinition codeObject);
    public abstract virtual void Visit(SqlConditionClause codeObject);
    public abstract virtual void Visit(SqlConstraint codeObject);
    public abstract virtual void Visit(SqlConvertExpression codeObject);
    public abstract virtual void Visit(SqlCreateUserOption codeObject);
    public abstract virtual void Visit(SqlCubeGroupByItem codeObject);
    public abstract virtual void Visit(SqlCursorOption codeObject);
    public abstract virtual void Visit(SqlCursorVariableAssignment codeObject);
    public abstract virtual void Visit(SqlCursorVariableRefExpression codeObject);
    public abstract virtual void Visit(SqlDataCompressionIndexOption codeObject);
    public abstract virtual void Visit(SqlDataType codeObject);
    public abstract virtual void Visit(SqlDataTypeSpecification codeObject);
    public abstract virtual void Visit(SqlDdlTriggerDefinition codeObject);
    public abstract virtual void Visit(SqlDefaultValuesInsertMergeActionSource codeObject);
    public abstract virtual void Visit(SqlDefaultValuesInsertSource codeObject);
    public abstract virtual void Visit(SqlDeleteMergeAction codeObject);
    public abstract virtual void Visit(SqlDeleteSpecification codeObject);
    public abstract virtual void Visit(SqlDerivedTableExpression codeObject);
    public abstract virtual void Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject);
    public abstract virtual void Visit(SqlDmlSpecificationTableSource codeObject);
    public abstract virtual void Visit(SqlDmlTriggerDefinition codeObject);
    public abstract virtual void Visit(SqlDropExistingIndexOption codeObject);
    public abstract virtual void Visit(SqlEdgeConstraint codeObject);
    public abstract virtual void Visit(SqlExecuteArgument codeObject);
    public abstract virtual void Visit(SqlExecuteAsClause codeObject);
    public abstract virtual void Visit(SqlExistsBooleanExpression codeObject);
    public abstract virtual void Visit(SqlFillFactorIndexOption codeObject);
    public abstract virtual void Visit(SqlFilterClause codeObject);
    public abstract virtual void Visit(SqlForBrowseClause codeObject);
    public abstract virtual void Visit(SqlForeignKeyConstraint codeObject);
    public abstract virtual void Visit(SqlForXmlAutoClause codeObject);
    public abstract virtual void Visit(SqlForXmlClause codeObject);
    public abstract virtual void Visit(SqlForXmlDirective codeObject);
    public abstract virtual void Visit(SqlForXmlExplicitClause codeObject);
    public abstract virtual void Visit(SqlForXmlPathClause codeObject);
    public abstract virtual void Visit(SqlForXmlRawClause codeObject);
    public abstract virtual void Visit(SqlFromClause codeObject);
    public abstract virtual void Visit(SqlFullTextBooleanExpression codeObject);
    public abstract virtual void Visit(SqlFullTextColumn codeObject);
    public abstract virtual void Visit(SqlFunctionDefinition codeObject);
    public abstract virtual void Visit(SqlGlobalScalarVariableRefExpression codeObject);
    public abstract virtual void Visit(SqlGrandTotalGroupByItem codeObject);
    public abstract virtual void Visit(SqlGrandTotalGroupingSet codeObject);
    public abstract virtual void Visit(SqlGroupByClause codeObject);
    public abstract virtual void Visit(SqlGroupBySets codeObject);
    public abstract virtual void Visit(SqlGroupingSetItemsCollection codeObject);
    public abstract virtual void Visit(SqlHavingClause codeObject);
    public abstract virtual void Visit(SqlIdentifier codeObject);
    public abstract virtual void Visit(SqlIdentityFunctionCallExpression codeObject);
    public abstract virtual void Visit(SqlIgnoreDupKeyIndexOption codeObject);
    public abstract virtual void Visit(SqlInBooleanExpression codeObject);
    public abstract virtual void Visit(SqlInBooleanExpressionCollectionValue codeObject);
    public abstract virtual void Visit(SqlInBooleanExpressionQueryValue codeObject);
    public abstract virtual void Visit(SqlIndexedColumn codeObject);
    public abstract virtual void Visit(SqlIndexHint codeObject);
    public abstract virtual void Visit(SqlIndexOption codeObject);
    public abstract virtual void Visit(SqlInlineIndexConstraint codeObject);
    public abstract virtual void Visit(SqlInlineFunctionBodyDefinition codeObject);
    public abstract virtual void Visit(SqlInlineTableRelationalFunctionDefinition codeObject);
    public abstract virtual void Visit(SqlInlineTableVariableDeclaration codeObject);
    public abstract virtual void Visit(SqlInsertMergeAction codeObject);
    public abstract virtual void Visit(SqlInsertSpecification codeObject);
    public abstract virtual void Visit(SqlIntoClause codeObject);
    public abstract virtual void Visit(SqlIsNullBooleanExpression codeObject);
    public abstract virtual void Visit(SqlJsonObjectArgument codeObject);
    public abstract virtual void Visit(SqlLargeDataStorageInformation codeObject);
    public abstract virtual void Visit(SqlLikeBooleanExpression codeObject);
    public abstract virtual void Visit(SqlLiteralExpression codeObject);
    public abstract virtual void Visit(SqlLoginPassword codeObject);
    public abstract virtual void Visit(SqlMaxDegreeOfParallelismIndexOption codeObject);
    public abstract virtual void Visit(SqlMergeActionClause codeObject);
    public abstract virtual void Visit(SqlMergeSpecification codeObject);
    public abstract virtual void Visit(SqlInsertSource codeObject);
    public abstract virtual void Visit(SqlModuleCalledOnNullInputOption codeObject);
    public abstract virtual void Visit(SqlModuleEncryptionOption codeObject);
    public abstract virtual void Visit(SqlModuleExecuteAsOption codeObject);
    public abstract virtual void Visit(SqlModuleInlineOption codeObject);
    public abstract virtual void Visit(SqlModuleNativeCompilationOption codeObject);
    public abstract virtual void Visit(SqlModuleOption codeObject);
    public abstract virtual void Visit(SqlModuleRecompileOption codeObject);
    public abstract virtual void Visit(SqlModuleReturnsNullOnNullInputOption codeObject);
    public abstract virtual void Visit(SqlModuleSchemaBindingOption codeObject);
    public abstract virtual void Visit(SqlModuleViewMetadataOption codeObject);
    public abstract virtual void Visit(SqlMultistatementFunctionBodyDefinition codeObject);
    public abstract virtual void Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject);
    public abstract virtual void Visit(SqlNotBooleanExpression codeObject);
    public abstract virtual void Visit(SqlNullQualifier codeObject);
    public abstract virtual void Visit(SqlQueryExpression codeObject);
    public abstract virtual void Visit(SqlScalarExpression codeObject);
    public abstract virtual void Visit(SqlTableExpression codeObject);
    public abstract virtual void Visit(SqlObjectIdentifier codeObject);
    public abstract virtual void Visit(SqlObjectReference codeObject);
    public abstract virtual void Visit(SqlOnlineIndexOption codeObject);
    public abstract virtual void Visit(SqlOptimizeForSequentialKeyIndexOption codeObject);
    public abstract virtual void Visit(SqlResumableIndexOption codeObject);
    public abstract virtual void Visit(SqlBucketCountIndexOption codeObject);
    public abstract virtual void Visit(SqlCompressionDelayIndexOption codeObject);
    public abstract virtual void Visit(SqlMaxDurationIndexOption codeObject);
    public abstract virtual void Visit(SqlOffsetFetchClause codeObject);
    public abstract virtual void Visit(SqlOrderByClause codeObject);
    public abstract virtual void Visit(SqlOrderByItem codeObject);
    public abstract virtual void Visit(SqlOutputClause codeObject);
    public abstract virtual void Visit(SqlOutputIntoClause codeObject);
    public abstract virtual void Visit(SqlPadIndexOption codeObject);
    public abstract virtual void Visit(SqlParameterDeclaration codeObject);
    public abstract virtual void Visit(SqlPivotClause codeObject);
    public abstract virtual void Visit(SqlPivotTableExpression codeObject);
    public abstract virtual void Visit(SqlPrimaryKeyConstraint codeObject);
    public abstract virtual void Visit(SqlStorageSpecification codeObject);
    public abstract virtual void Visit(SqlProcedureDefinition codeObject);
    public abstract virtual void Visit(SqlQualifiedJoinTableExpression codeObject);
    public abstract virtual void Visit(SqlQuerySpecification codeObject);
    public abstract virtual void Visit(SqlQueryWithClause codeObject);
    public abstract virtual void Visit(SqlRollupGroupByItem codeObject);
    public abstract virtual void Visit(SqlRowConstructorExpression codeObject);
    public abstract virtual void Visit(SqlScalarClrFunctionDefinition codeObject);
    public abstract virtual void Visit(SqlScalarFunctionReturnType codeObject);
    public abstract virtual void Visit(SqlScalarRefExpression codeObject);
    public abstract virtual void Visit(SqlScalarRelationalFunctionDefinition codeObject);
    public abstract virtual void Visit(SqlScalarSubQueryExpression codeObject);
    public abstract virtual void Visit(SqlScalarVariableAssignment codeObject);
    public abstract virtual void Visit(SqlScalarVariableRefExpression codeObject);
    public abstract virtual void Visit(SqlScript codeObject);
    public abstract virtual void Visit(SqlSearchedCaseExpression codeObject);
    public abstract virtual void Visit(SqlSearchedWhenClause codeObject);
    public abstract virtual void Visit(SqlSelectClause codeObject);
    public abstract virtual void Visit(SqlSelectIntoClause codeObject);
    public abstract virtual void Visit(SqlSelectScalarExpression codeObject);
    public abstract virtual void Visit(SqlSelectSpecification codeObject);
    public abstract virtual void Visit(SqlSelectSpecificationInsertSource codeObject);
    public abstract virtual void Visit(SqlSelectStarExpression codeObject);
    public abstract virtual void Visit(SqlSelectVariableAssignmentExpression codeObject);
    public abstract virtual void Visit(SqlSetClause codeObject);
    public abstract virtual void Visit(SqlSimpleCaseExpression codeObject);
    public abstract virtual void Visit(SqlSimpleGroupByItem codeObject);
    public abstract virtual void Visit(SqlSimpleOrderByClause codeObject);
    public abstract virtual void Visit(SqlSimpleOrderByItem codeObject);
    public abstract virtual void Visit(SqlSimpleWhenClause codeObject);
    public abstract virtual void Visit(SqlSortedDataIndexOption codeObject);
    public abstract virtual void Visit(SqlSortedDataReorgIndexOption codeObject);
    public abstract virtual void Visit(SqlSortInTempDbIndexOption codeObject);
    public abstract virtual void Visit(SqlStatisticsIncrementalIndexOption codeObject);
    public abstract virtual void Visit(SqlStatisticsNoRecomputeIndexOption codeObject);
    public abstract virtual void Visit(SqlStatisticsOnlyIndexOption codeObject);
    public abstract virtual void Visit(SqlTableClrFunctionDefinition codeObject);
    public abstract virtual void Visit(SqlTableConstructorExpression codeObject);
    public abstract virtual void Visit(SqlTableConstructorInsertSource codeObject);
    public abstract virtual void Visit(SqlTableDefinition codeObject);
    public abstract virtual void Visit(SqlTableFunctionReturnType codeObject);
    public abstract virtual void Visit(SqlTableHint codeObject);
    public abstract virtual void Visit(SqlTableRefExpression codeObject);
    public abstract virtual void Visit(SqlTableValuedFunctionRefExpression codeObject);
    public abstract virtual void Visit(SqlTableVariableRefExpression codeObject);
    public abstract virtual void Visit(SqlTableUdtInstanceMethodExpression codeObject);
    public abstract virtual void Visit(SqlTargetTableExpression codeObject);
    public abstract virtual void Visit(SqlTemporalPeriodDefinition codeObject);
    public abstract virtual void Visit(SqlTopSpecification codeObject);
    public abstract virtual void Visit(SqlTriggerAction codeObject);
    public abstract virtual void Visit(SqlTriggerDefinition codeObject);
    public abstract virtual void Visit(SqlTriggerEvent codeObject);
    public abstract virtual void Visit(SqlUdtInstanceDataMemberExpression codeObject);
    public abstract virtual void Visit(SqlUdtInstanceMethodExpression codeObject);
    public abstract virtual void Visit(SqlUdtStaticDataMemberExpression codeObject);
    public abstract virtual void Visit(SqlUdtStaticMethodExpression codeObject);
    public abstract virtual void Visit(SqlUnaryScalarExpression codeObject);
    public abstract virtual void Visit(SqlUniqueConstraint codeObject);
    public abstract virtual void Visit(SqlUnpivotClause codeObject);
    public abstract virtual void Visit(SqlUnpivotTableExpression codeObject);
    public abstract virtual void Visit(SqlUnqualifiedJoinTableExpression codeObject);
    public abstract virtual void Visit(SqlUpdateBooleanExpression codeObject);
    public abstract virtual void Visit(SqlUpdateMergeAction codeObject);
    public abstract virtual void Visit(SqlUpdateSpecification codeObject);
    public abstract virtual void Visit(SqlUserDefinedScalarFunctionCallExpression codeObject);
    public abstract virtual void Visit(SqlValuesInsertMergeActionSource codeObject);
    public abstract virtual void Visit(SqlVariableColumnAssignment codeObject);
    public abstract virtual void Visit(SqlVariableDeclaration codeObject);
    public abstract virtual void Visit(SqlViewDefinition codeObject);
    public abstract virtual void Visit(SqlWindowClause codeObject);
    public abstract virtual void Visit(SqlWindowExpression codeObject);
    public abstract virtual void Visit(SqlWindowSpecification codeObject);
    public abstract virtual void Visit(SqlWhereClause codeObject);
    public abstract virtual void Visit(SqlXmlNamespacesDeclaration codeObject);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlCodeObjectVisitor`1 {
    public abstract virtual T Visit(SqlAggregateFunctionCallExpression codeObject);
    public abstract virtual T Visit(SqlAllAnyComparisonBooleanExpression codeObject);
    public abstract virtual T Visit(SqlAllowPageLocksIndexOption codeObject);
    public abstract virtual T Visit(SqlAllowRowLocksIndexOption codeObject);
    public abstract virtual T Visit(SqlAssignment codeObject);
    public abstract virtual T Visit(SqlAtTimeZoneExpression codeObject);
    public abstract virtual T Visit(SqlBatch codeObject);
    public abstract virtual T Visit(SqlBetweenBooleanExpression codeObject);
    public abstract virtual T Visit(SqlBinaryBooleanExpression codeObject);
    public abstract virtual T Visit(SqlBinaryFilterExpression codeObject);
    public abstract virtual T Visit(SqlBinaryQueryExpression codeObject);
    public abstract virtual T Visit(SqlBinaryScalarExpression codeObject);
    public abstract virtual T Visit(SqlBooleanExpression codeObject);
    public abstract virtual T Visit(SqlBooleanFilterExpression codeObject);
    public abstract virtual T Visit(SqlBuiltinScalarFunctionCallExpression codeObject);
    public abstract virtual T Visit(SqlCastExpression codeObject);
    public abstract virtual T Visit(SqlChangeTrackingContext codeObject);
    public abstract virtual T Visit(SqlCheckConstraint codeObject);
    public abstract virtual T Visit(SqlClrAssemblySpecifier codeObject);
    public abstract virtual T Visit(SqlClrClassSpecifier codeObject);
    public abstract virtual T Visit(SqlClrFunctionBodyDefinition codeObject);
    public abstract virtual T Visit(SqlClrMethodSpecifier codeObject);
    public abstract virtual T Visit(SqlCollateScalarExpression codeObject);
    public abstract virtual T Visit(SqlCollation codeObject);
    public abstract virtual T Visit(SqlColumnAssignment codeObject);
    public abstract virtual T Visit(SqlDefaultConstraint codeObject);
    public abstract virtual T Visit(SqlColumnDefinition codeObject);
    public abstract virtual T Visit(SqlColumnIdentity codeObject);
    public abstract virtual T Visit(SqlColumnRefExpression codeObject);
    public abstract virtual T Visit(SqlCommonTableExpression codeObject);
    public abstract virtual T Visit(SqlComparisonBooleanExpression codeObject);
    public abstract virtual T Visit(SqlCompressionPartitionRange codeObject);
    public abstract virtual T Visit(SqlComputedColumnDefinition codeObject);
    public abstract virtual T Visit(SqlConditionClause codeObject);
    public abstract virtual T Visit(SqlConstraint codeObject);
    public abstract virtual T Visit(SqlConvertExpression codeObject);
    public abstract virtual T Visit(SqlCreateUserOption codeObject);
    public abstract virtual T Visit(SqlCubeGroupByItem codeObject);
    public abstract virtual T Visit(SqlCursorOption codeObject);
    public abstract virtual T Visit(SqlCursorVariableAssignment codeObject);
    public abstract virtual T Visit(SqlCursorVariableRefExpression codeObject);
    public abstract virtual T Visit(SqlDataCompressionIndexOption codeObject);
    public abstract virtual T Visit(SqlDataType codeObject);
    public abstract virtual T Visit(SqlDataTypeSpecification codeObject);
    public abstract virtual T Visit(SqlDdlTriggerDefinition codeObject);
    public abstract virtual T Visit(SqlDefaultValuesInsertMergeActionSource codeObject);
    public abstract virtual T Visit(SqlDefaultValuesInsertSource codeObject);
    public abstract virtual T Visit(SqlDeleteMergeAction codeObject);
    public abstract virtual T Visit(SqlDeleteSpecification codeObject);
    public abstract virtual T Visit(SqlDerivedTableExpression codeObject);
    public abstract virtual T Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject);
    public abstract virtual T Visit(SqlDmlSpecificationTableSource codeObject);
    public abstract virtual T Visit(SqlDmlTriggerDefinition codeObject);
    public abstract virtual T Visit(SqlDropExistingIndexOption codeObject);
    public abstract virtual T Visit(SqlEdgeConstraint codeObject);
    public abstract virtual T Visit(SqlExecuteArgument codeObject);
    public abstract virtual T Visit(SqlExecuteAsClause codeObject);
    public abstract virtual T Visit(SqlExistsBooleanExpression codeObject);
    public abstract virtual T Visit(SqlFillFactorIndexOption codeObject);
    public abstract virtual T Visit(SqlFilterClause codeObject);
    public abstract virtual T Visit(SqlForBrowseClause codeObject);
    public abstract virtual T Visit(SqlForeignKeyConstraint codeObject);
    public abstract virtual T Visit(SqlForXmlAutoClause codeObject);
    public abstract virtual T Visit(SqlForXmlClause codeObject);
    public abstract virtual T Visit(SqlForXmlDirective codeObject);
    public abstract virtual T Visit(SqlForXmlExplicitClause codeObject);
    public abstract virtual T Visit(SqlForXmlPathClause codeObject);
    public abstract virtual T Visit(SqlForXmlRawClause codeObject);
    public abstract virtual T Visit(SqlFromClause codeObject);
    public abstract virtual T Visit(SqlFullTextBooleanExpression codeObject);
    public abstract virtual T Visit(SqlFullTextColumn codeObject);
    public abstract virtual T Visit(SqlFunctionDefinition codeObject);
    public abstract virtual T Visit(SqlGlobalScalarVariableRefExpression codeObject);
    public abstract virtual T Visit(SqlGrandTotalGroupByItem codeObject);
    public abstract virtual T Visit(SqlGrandTotalGroupingSet codeObject);
    public abstract virtual T Visit(SqlGroupByClause codeObject);
    public abstract virtual T Visit(SqlGroupBySets codeObject);
    public abstract virtual T Visit(SqlGroupingSetItemsCollection codeObject);
    public abstract virtual T Visit(SqlHavingClause codeObject);
    public abstract virtual T Visit(SqlIdentifier codeObject);
    public abstract virtual T Visit(SqlIdentityFunctionCallExpression codeObject);
    public abstract virtual T Visit(SqlIgnoreDupKeyIndexOption codeObject);
    public abstract virtual T Visit(SqlInBooleanExpression codeObject);
    public abstract virtual T Visit(SqlInBooleanExpressionCollectionValue codeObject);
    public abstract virtual T Visit(SqlInBooleanExpressionQueryValue codeObject);
    public abstract virtual T Visit(SqlIndexedColumn codeObject);
    public abstract virtual T Visit(SqlIndexHint codeObject);
    public abstract virtual T Visit(SqlIndexOption codeObject);
    public abstract virtual T Visit(SqlInlineIndexConstraint codeObject);
    public abstract virtual T Visit(SqlInlineFunctionBodyDefinition codeObject);
    public abstract virtual T Visit(SqlInlineTableRelationalFunctionDefinition codeObject);
    public abstract virtual T Visit(SqlInlineTableVariableDeclaration codeObject);
    public abstract virtual T Visit(SqlInsertMergeAction codeObject);
    public abstract virtual T Visit(SqlInsertSpecification codeObject);
    public abstract virtual T Visit(SqlIntoClause codeObject);
    public abstract virtual T Visit(SqlIsNullBooleanExpression codeObject);
    public abstract virtual T Visit(SqlJsonObjectArgument codeObject);
    public abstract virtual T Visit(SqlLargeDataStorageInformation codeObject);
    public abstract virtual T Visit(SqlLikeBooleanExpression codeObject);
    public abstract virtual T Visit(SqlLiteralExpression codeObject);
    public abstract virtual T Visit(SqlLoginPassword codeObject);
    public abstract virtual T Visit(SqlMaxDegreeOfParallelismIndexOption codeObject);
    public abstract virtual T Visit(SqlMergeActionClause codeObject);
    public abstract virtual T Visit(SqlMergeSpecification codeObject);
    public abstract virtual T Visit(SqlInsertSource codeObject);
    public abstract virtual T Visit(SqlModuleCalledOnNullInputOption codeObject);
    public abstract virtual T Visit(SqlModuleEncryptionOption codeObject);
    public abstract virtual T Visit(SqlModuleExecuteAsOption codeObject);
    public abstract virtual T Visit(SqlModuleInlineOption codeObject);
    public abstract virtual T Visit(SqlModuleNativeCompilationOption codeObject);
    public abstract virtual T Visit(SqlModuleOption codeObject);
    public abstract virtual T Visit(SqlModuleRecompileOption codeObject);
    public abstract virtual T Visit(SqlModuleReturnsNullOnNullInputOption codeObject);
    public abstract virtual T Visit(SqlModuleSchemaBindingOption codeObject);
    public abstract virtual T Visit(SqlModuleViewMetadataOption codeObject);
    public abstract virtual T Visit(SqlMultistatementFunctionBodyDefinition codeObject);
    public abstract virtual T Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject);
    public abstract virtual T Visit(SqlNotBooleanExpression codeObject);
    public abstract virtual T Visit(SqlNullQualifier codeObject);
    public abstract virtual T Visit(SqlQueryExpression codeObject);
    public abstract virtual T Visit(SqlScalarExpression codeObject);
    public abstract virtual T Visit(SqlTableExpression codeObject);
    public abstract virtual T Visit(SqlObjectIdentifier codeObject);
    public abstract virtual T Visit(SqlObjectReference codeObject);
    public abstract virtual T Visit(SqlOnlineIndexOption codeObject);
    public abstract virtual T Visit(SqlOptimizeForSequentialKeyIndexOption codeObject);
    public abstract virtual T Visit(SqlResumableIndexOption codeObject);
    public abstract virtual T Visit(SqlBucketCountIndexOption codeObject);
    public abstract virtual T Visit(SqlCompressionDelayIndexOption codeObject);
    public abstract virtual T Visit(SqlMaxDurationIndexOption codeObject);
    public abstract virtual T Visit(SqlOffsetFetchClause codeObject);
    public abstract virtual T Visit(SqlOrderByClause codeObject);
    public abstract virtual T Visit(SqlOrderByItem codeObject);
    public abstract virtual T Visit(SqlOutputClause codeObject);
    public abstract virtual T Visit(SqlOutputIntoClause codeObject);
    public abstract virtual T Visit(SqlPadIndexOption codeObject);
    public abstract virtual T Visit(SqlParameterDeclaration codeObject);
    public abstract virtual T Visit(SqlPivotClause codeObject);
    public abstract virtual T Visit(SqlPivotTableExpression codeObject);
    public abstract virtual T Visit(SqlPrimaryKeyConstraint codeObject);
    public abstract virtual T Visit(SqlStorageSpecification codeObject);
    public abstract virtual T Visit(SqlProcedureDefinition codeObject);
    public abstract virtual T Visit(SqlQualifiedJoinTableExpression codeObject);
    public abstract virtual T Visit(SqlQuerySpecification codeObject);
    public abstract virtual T Visit(SqlQueryWithClause codeObject);
    public abstract virtual T Visit(SqlRollupGroupByItem codeObject);
    public abstract virtual T Visit(SqlRowConstructorExpression codeObject);
    public abstract virtual T Visit(SqlScalarClrFunctionDefinition codeObject);
    public abstract virtual T Visit(SqlScalarFunctionReturnType codeObject);
    public abstract virtual T Visit(SqlScalarRefExpression codeObject);
    public abstract virtual T Visit(SqlScalarRelationalFunctionDefinition codeObject);
    public abstract virtual T Visit(SqlScalarSubQueryExpression codeObject);
    public abstract virtual T Visit(SqlScalarVariableAssignment codeObject);
    public abstract virtual T Visit(SqlScalarVariableRefExpression codeObject);
    public abstract virtual T Visit(SqlScript codeObject);
    public abstract virtual T Visit(SqlSearchedCaseExpression codeObject);
    public abstract virtual T Visit(SqlSearchedWhenClause codeObject);
    public abstract virtual T Visit(SqlSelectClause codeObject);
    public abstract virtual T Visit(SqlSelectIntoClause codeObject);
    public abstract virtual T Visit(SqlSelectScalarExpression codeObject);
    public abstract virtual T Visit(SqlSelectSpecification codeObject);
    public abstract virtual T Visit(SqlSelectSpecificationInsertSource codeObject);
    public abstract virtual T Visit(SqlSelectStarExpression codeObject);
    public abstract virtual T Visit(SqlSelectVariableAssignmentExpression codeObject);
    public abstract virtual T Visit(SqlSetClause codeObject);
    public abstract virtual T Visit(SqlSimpleCaseExpression codeObject);
    public abstract virtual T Visit(SqlSimpleGroupByItem codeObject);
    public abstract virtual T Visit(SqlSimpleOrderByClause codeObject);
    public abstract virtual T Visit(SqlSimpleOrderByItem codeObject);
    public abstract virtual T Visit(SqlSimpleWhenClause codeObject);
    public abstract virtual T Visit(SqlSortedDataIndexOption codeObject);
    public abstract virtual T Visit(SqlSortedDataReorgIndexOption codeObject);
    public abstract virtual T Visit(SqlSortInTempDbIndexOption codeObject);
    public abstract virtual T Visit(SqlStatisticsIncrementalIndexOption codeObject);
    public abstract virtual T Visit(SqlStatisticsNoRecomputeIndexOption codeObject);
    public abstract virtual T Visit(SqlStatisticsOnlyIndexOption codeObject);
    public abstract virtual T Visit(SqlTableClrFunctionDefinition codeObject);
    public abstract virtual T Visit(SqlTableConstructorExpression codeObject);
    public abstract virtual T Visit(SqlTableConstructorInsertSource codeObject);
    public abstract virtual T Visit(SqlTableDefinition codeObject);
    public abstract virtual T Visit(SqlTableFunctionReturnType codeObject);
    public abstract virtual T Visit(SqlTableHint codeObject);
    public abstract virtual T Visit(SqlTableRefExpression codeObject);
    public abstract virtual T Visit(SqlTableValuedFunctionRefExpression codeObject);
    public abstract virtual T Visit(SqlTableVariableRefExpression codeObject);
    public abstract virtual T Visit(SqlTableUdtInstanceMethodExpression codeObject);
    public abstract virtual T Visit(SqlTargetTableExpression codeObject);
    public abstract virtual T Visit(SqlTemporalPeriodDefinition codeObject);
    public abstract virtual T Visit(SqlTopSpecification codeObject);
    public abstract virtual T Visit(SqlTriggerAction codeObject);
    public abstract virtual T Visit(SqlTriggerDefinition codeObject);
    public abstract virtual T Visit(SqlTriggerEvent codeObject);
    public abstract virtual T Visit(SqlUdtInstanceDataMemberExpression codeObject);
    public abstract virtual T Visit(SqlUdtInstanceMethodExpression codeObject);
    public abstract virtual T Visit(SqlUdtStaticDataMemberExpression codeObject);
    public abstract virtual T Visit(SqlUdtStaticMethodExpression codeObject);
    public abstract virtual T Visit(SqlUnaryScalarExpression codeObject);
    public abstract virtual T Visit(SqlUniqueConstraint codeObject);
    public abstract virtual T Visit(SqlUnpivotClause codeObject);
    public abstract virtual T Visit(SqlUnpivotTableExpression codeObject);
    public abstract virtual T Visit(SqlUnqualifiedJoinTableExpression codeObject);
    public abstract virtual T Visit(SqlUpdateBooleanExpression codeObject);
    public abstract virtual T Visit(SqlUpdateMergeAction codeObject);
    public abstract virtual T Visit(SqlUpdateSpecification codeObject);
    public abstract virtual T Visit(SqlUserDefinedScalarFunctionCallExpression codeObject);
    public abstract virtual T Visit(SqlValuesInsertMergeActionSource codeObject);
    public abstract virtual T Visit(SqlVariableColumnAssignment codeObject);
    public abstract virtual T Visit(SqlVariableDeclaration codeObject);
    public abstract virtual T Visit(SqlViewDefinition codeObject);
    public abstract virtual T Visit(SqlWindowClause codeObject);
    public abstract virtual T Visit(SqlWindowExpression codeObject);
    public abstract virtual T Visit(SqlWindowSpecification codeObject);
    public abstract virtual T Visit(SqlWhereClause codeObject);
    public abstract virtual T Visit(SqlXmlNamespacesDeclaration codeObject);
}
internal interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlDeprecatedStatement {
}
internal interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlDumpLoadStatement {
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlErrorObject {
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlStatementContextVisitor`1 {
    public abstract virtual void Visit(SqlAlterFunctionStatement statement, C context);
    public abstract virtual void Visit(SqlAlterLoginStatement statement, C context);
    public abstract virtual void Visit(SqlAlterProcedureStatement statement, C context);
    public abstract virtual void Visit(SqlAlterTriggerStatement statement, C context);
    public abstract virtual void Visit(SqlAlterViewStatement statement, C context);
    public abstract virtual void Visit(SqlBackupCertificateStatement statement, C context);
    public abstract virtual void Visit(SqlBackupDatabaseStatement statement, C context);
    public abstract virtual void Visit(SqlBackupLogStatement statement, C context);
    public abstract virtual void Visit(SqlBackupMasterKeyStatement statement, C context);
    public abstract virtual void Visit(SqlBackupServiceMasterKeyStatement statement, C context);
    public abstract virtual void Visit(SqlBackupTableStatement statement, C context);
    public abstract virtual void Visit(SqlBreakStatement statement, C context);
    public abstract virtual void Visit(SqlCommentStatement statement, C context);
    public abstract virtual void Visit(SqlCompoundStatement statement, C context);
    public abstract virtual void Visit(SqlContinueStatement statement, C context);
    public abstract virtual void Visit(SqlCreateFunctionStatement statement, C context);
    public abstract virtual void Visit(SqlCreateIndexStatement statement, C context);
    public abstract virtual void Visit(SqlCreateLoginFromAsymKeyStatement statement, C context);
    public abstract virtual void Visit(SqlCreateLoginFromCertificateStatement statement, C context);
    public abstract virtual void Visit(SqlCreateLoginFromWindowsStatement statement, C context);
    public abstract virtual void Visit(SqlCreateLoginWithPasswordStatement statement, C context);
    public abstract virtual void Visit(SqlCreateProcedureStatement statement, C context);
    public abstract virtual void Visit(SqlCreateRoleStatement statement, C context);
    public abstract virtual void Visit(SqlCreateSchemaStatement statement, C context);
    public abstract virtual void Visit(SqlCreateSynonymStatement statement, C context);
    public abstract virtual void Visit(SqlCreateTableStatement statement, C context);
    public abstract virtual void Visit(SqlCreateTriggerStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserDefinedDataTypeStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserDefinedTableTypeStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserDefinedTypeStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserFromAsymKeyStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserFromCertificateStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserFromLoginStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserFromExternalProviderStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserStatement statement, C context);
    public abstract virtual void Visit(SqlCreateUserWithoutLoginStatement statement, C context);
    public abstract virtual void Visit(SqlCreateViewStatement statement, C context);
    public abstract virtual void Visit(SqlCursorDeclareStatement statement, C context);
    public abstract virtual void Visit(SqlDBCCStatement statement, C context);
    public abstract virtual void Visit(SqlDeleteStatement statement, C context);
    public abstract virtual void Visit(SqlDenyStatement statement, C context);
    public abstract virtual void Visit(SqlDropAggregateStatement statement, C context);
    public abstract virtual void Visit(SqlDropDatabaseStatement statement, C context);
    public abstract virtual void Visit(SqlDropDefaultStatement statement, C context);
    public abstract virtual void Visit(SqlDropFunctionStatement statement, C context);
    public abstract virtual void Visit(SqlDropLoginStatement statement, C context);
    public abstract virtual void Visit(SqlDropProcedureStatement statement, C context);
    public abstract virtual void Visit(SqlDropRuleStatement statement, C context);
    public abstract virtual void Visit(SqlDropSchemaStatement statement, C context);
    public abstract virtual void Visit(SqlDropSecurityPolicyStatement statement, C context);
    public abstract virtual void Visit(SqlDropSequenceStatement statement, C context);
    public abstract virtual void Visit(SqlDropSynonymStatement statement, C context);
    public abstract virtual void Visit(SqlDropTableStatement statement, C context);
    public abstract virtual void Visit(SqlDropTriggerStatement statement, C context);
    public abstract virtual void Visit(SqlDropTypeStatement statement, C context);
    public abstract virtual void Visit(SqlDropUserStatement statement, C context);
    public abstract virtual void Visit(SqlDropViewStatement statement, C context);
    public abstract virtual void Visit(SqlExecuteModuleStatement statement, C context);
    public abstract virtual void Visit(SqlExecuteStringStatement statement, C context);
    public abstract virtual void Visit(SqlGrantStatement statement, C context);
    public abstract virtual void Visit(SqlIfElseStatement statement, C context);
    public abstract virtual void Visit(SqlInlineTableVariableDeclareStatement statement, C context);
    public abstract virtual void Visit(SqlInsertStatement statement, C context);
    public abstract virtual void Visit(SqlMergeStatement statement, C context);
    public abstract virtual void Visit(SqlStatement statement, C context);
    public abstract virtual void Visit(SqlRestoreDatabaseStatement statement, C context);
    public abstract virtual void Visit(SqlRestoreInformationStatement statement, C context);
    public abstract virtual void Visit(SqlRestoreLogStatement statement, C context);
    public abstract virtual void Visit(SqlRestoreMasterKeyStatement statement, C context);
    public abstract virtual void Visit(SqlRestoreServiceMasterKeyStatement statement, C context);
    public abstract virtual void Visit(SqlRestoreTableStatement statement, C context);
    public abstract virtual void Visit(SqlReturnStatement statement, C context);
    public abstract virtual void Visit(SqlRevokeStatement statement, C context);
    public abstract virtual void Visit(SqlSelectStatement statement, C context);
    public abstract virtual void Visit(SqlSetAssignmentStatement statement, C context);
    public abstract virtual void Visit(SqlSetStatement statement, C context);
    public abstract virtual void Visit(SqlTryCatchStatement statement, C context);
    public abstract virtual void Visit(SqlUpdateStatement statement, C context);
    public abstract virtual void Visit(SqlUseStatement statement, C context);
    public abstract virtual void Visit(SqlVariableDeclareStatement statement, C context);
    public abstract virtual void Visit(SqlWhileStatement statement, C context);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlStatementContextVisitor`2 {
    public abstract virtual T Visit(SqlAlterFunctionStatement statement, C context);
    public abstract virtual T Visit(SqlAlterLoginStatement statement, C context);
    public abstract virtual T Visit(SqlAlterProcedureStatement statement, C context);
    public abstract virtual T Visit(SqlAlterTriggerStatement statement, C context);
    public abstract virtual T Visit(SqlAlterViewStatement statement, C context);
    public abstract virtual T Visit(SqlBackupCertificateStatement statement, C context);
    public abstract virtual T Visit(SqlBackupDatabaseStatement statement, C context);
    public abstract virtual T Visit(SqlBackupLogStatement statement, C context);
    public abstract virtual T Visit(SqlBackupMasterKeyStatement statement, C context);
    public abstract virtual T Visit(SqlBackupServiceMasterKeyStatement statement, C context);
    public abstract virtual T Visit(SqlBackupTableStatement statement, C context);
    public abstract virtual T Visit(SqlBreakStatement statement, C context);
    public abstract virtual T Visit(SqlCommentStatement statement, C context);
    public abstract virtual T Visit(SqlCompoundStatement statement, C context);
    public abstract virtual T Visit(SqlContinueStatement statement, C context);
    public abstract virtual T Visit(SqlCreateFunctionStatement statement, C context);
    public abstract virtual T Visit(SqlCreateIndexStatement statement, C context);
    public abstract virtual T Visit(SqlCreateLoginFromAsymKeyStatement statement, C context);
    public abstract virtual T Visit(SqlCreateLoginFromCertificateStatement statement, C context);
    public abstract virtual T Visit(SqlCreateLoginFromWindowsStatement statement, C context);
    public abstract virtual T Visit(SqlCreateLoginWithPasswordStatement statement, C context);
    public abstract virtual T Visit(SqlCreateProcedureStatement statement, C context);
    public abstract virtual T Visit(SqlCreateRoleStatement statement, C context);
    public abstract virtual T Visit(SqlCreateSchemaStatement statement, C context);
    public abstract virtual T Visit(SqlCreateSynonymStatement statement, C context);
    public abstract virtual T Visit(SqlCreateTableStatement statement, C context);
    public abstract virtual T Visit(SqlCreateTriggerStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserDefinedDataTypeStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserDefinedTableTypeStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserDefinedTypeStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserFromAsymKeyStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserFromCertificateStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserFromLoginStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserFromExternalProviderStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserStatement statement, C context);
    public abstract virtual T Visit(SqlCreateUserWithoutLoginStatement statement, C context);
    public abstract virtual T Visit(SqlCreateViewStatement statement, C context);
    public abstract virtual T Visit(SqlCursorDeclareStatement statement, C context);
    public abstract virtual T Visit(SqlDBCCStatement statement, C context);
    public abstract virtual T Visit(SqlDeleteStatement statement, C context);
    public abstract virtual T Visit(SqlDenyStatement statement, C context);
    public abstract virtual T Visit(SqlDropAggregateStatement statement, C context);
    public abstract virtual T Visit(SqlDropDatabaseStatement statement, C context);
    public abstract virtual T Visit(SqlDropDefaultStatement statement, C context);
    public abstract virtual T Visit(SqlDropFunctionStatement statement, C context);
    public abstract virtual T Visit(SqlDropLoginStatement statement, C context);
    public abstract virtual T Visit(SqlDropProcedureStatement statement, C context);
    public abstract virtual T Visit(SqlDropRuleStatement statement, C context);
    public abstract virtual T Visit(SqlDropSchemaStatement statement, C context);
    public abstract virtual T Visit(SqlDropSecurityPolicyStatement statement, C context);
    public abstract virtual T Visit(SqlDropSequenceStatement statement, C context);
    public abstract virtual T Visit(SqlDropSynonymStatement statement, C context);
    public abstract virtual T Visit(SqlDropTableStatement statement, C context);
    public abstract virtual T Visit(SqlDropTriggerStatement statement, C context);
    public abstract virtual T Visit(SqlDropTypeStatement statement, C context);
    public abstract virtual T Visit(SqlDropUserStatement statement, C context);
    public abstract virtual T Visit(SqlDropViewStatement statement, C context);
    public abstract virtual T Visit(SqlExecuteModuleStatement statement, C context);
    public abstract virtual T Visit(SqlExecuteStringStatement statement, C context);
    public abstract virtual T Visit(SqlGrantStatement statement, C context);
    public abstract virtual T Visit(SqlIfElseStatement statement, C context);
    public abstract virtual T Visit(SqlInlineTableVariableDeclareStatement statement, C context);
    public abstract virtual T Visit(SqlInsertStatement statement, C context);
    public abstract virtual T Visit(SqlMergeStatement statement, C context);
    public abstract virtual T Visit(SqlStatement statement, C context);
    public abstract virtual T Visit(SqlRestoreDatabaseStatement statement, C context);
    public abstract virtual T Visit(SqlRestoreInformationStatement statement, C context);
    public abstract virtual T Visit(SqlRestoreLogStatement statement, C context);
    public abstract virtual T Visit(SqlRestoreMasterKeyStatement statement, C context);
    public abstract virtual T Visit(SqlRestoreServiceMasterKeyStatement statement, C context);
    public abstract virtual T Visit(SqlRestoreTableStatement statement, C context);
    public abstract virtual T Visit(SqlReturnStatement statement, C context);
    public abstract virtual T Visit(SqlRevokeStatement statement, C context);
    public abstract virtual T Visit(SqlSelectStatement statement, C context);
    public abstract virtual T Visit(SqlSetAssignmentStatement statement, C context);
    public abstract virtual T Visit(SqlSetStatement statement, C context);
    public abstract virtual T Visit(SqlTryCatchStatement statement, C context);
    public abstract virtual T Visit(SqlUpdateStatement statement, C context);
    public abstract virtual T Visit(SqlUseStatement statement, C context);
    public abstract virtual T Visit(SqlVariableDeclareStatement statement, C context);
    public abstract virtual T Visit(SqlWhileStatement statement, C context);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlStatementVisitor {
    public abstract virtual void Visit(SqlAlterFunctionStatement statement);
    public abstract virtual void Visit(SqlAlterLoginStatement statement);
    public abstract virtual void Visit(SqlAlterProcedureStatement statement);
    public abstract virtual void Visit(SqlAlterTriggerStatement statement);
    public abstract virtual void Visit(SqlAlterViewStatement statement);
    public abstract virtual void Visit(SqlBackupCertificateStatement statement);
    public abstract virtual void Visit(SqlBackupDatabaseStatement statement);
    public abstract virtual void Visit(SqlBackupLogStatement statement);
    public abstract virtual void Visit(SqlBackupMasterKeyStatement statement);
    public abstract virtual void Visit(SqlBackupServiceMasterKeyStatement statement);
    public abstract virtual void Visit(SqlBackupTableStatement statement);
    public abstract virtual void Visit(SqlBreakStatement statement);
    public abstract virtual void Visit(SqlCommentStatement statement);
    public abstract virtual void Visit(SqlCompoundStatement statement);
    public abstract virtual void Visit(SqlContinueStatement statement);
    public abstract virtual void Visit(SqlCreateFunctionStatement statement);
    public abstract virtual void Visit(SqlCreateIndexStatement statement);
    public abstract virtual void Visit(SqlCreateLoginFromAsymKeyStatement statement);
    public abstract virtual void Visit(SqlCreateLoginFromCertificateStatement statement);
    public abstract virtual void Visit(SqlCreateLoginFromWindowsStatement statement);
    public abstract virtual void Visit(SqlCreateLoginWithPasswordStatement statement);
    public abstract virtual void Visit(SqlCreateProcedureStatement statement);
    public abstract virtual void Visit(SqlCreateRoleStatement statement);
    public abstract virtual void Visit(SqlCreateSchemaStatement statement);
    public abstract virtual void Visit(SqlCreateSynonymStatement statement);
    public abstract virtual void Visit(SqlCreateTableStatement statement);
    public abstract virtual void Visit(SqlCreateTriggerStatement statement);
    public abstract virtual void Visit(SqlCreateUserDefinedDataTypeStatement statement);
    public abstract virtual void Visit(SqlCreateUserDefinedTableTypeStatement statement);
    public abstract virtual void Visit(SqlCreateUserDefinedTypeStatement statement);
    public abstract virtual void Visit(SqlCreateUserFromAsymKeyStatement statement);
    public abstract virtual void Visit(SqlCreateUserFromCertificateStatement statement);
    public abstract virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement statement);
    public abstract virtual void Visit(SqlCreateUserFromLoginStatement statement);
    public abstract virtual void Visit(SqlCreateUserFromExternalProviderStatement statement);
    public abstract virtual void Visit(SqlCreateUserStatement statement);
    public abstract virtual void Visit(SqlCreateUserWithoutLoginStatement statement);
    public abstract virtual void Visit(SqlCreateViewStatement statement);
    public abstract virtual void Visit(SqlCursorDeclareStatement statement);
    public abstract virtual void Visit(SqlDBCCStatement statement);
    public abstract virtual void Visit(SqlDeleteStatement statement);
    public abstract virtual void Visit(SqlDenyStatement statement);
    public abstract virtual void Visit(SqlDropAggregateStatement statement);
    public abstract virtual void Visit(SqlDropDatabaseStatement statement);
    public abstract virtual void Visit(SqlDropDefaultStatement statement);
    public abstract virtual void Visit(SqlDropFunctionStatement statement);
    public abstract virtual void Visit(SqlDropLoginStatement statement);
    public abstract virtual void Visit(SqlDropProcedureStatement statement);
    public abstract virtual void Visit(SqlDropRuleStatement statement);
    public abstract virtual void Visit(SqlDropSchemaStatement statement);
    public abstract virtual void Visit(SqlDropSecurityPolicyStatement statement);
    public abstract virtual void Visit(SqlDropSequenceStatement statement);
    public abstract virtual void Visit(SqlDropSynonymStatement statement);
    public abstract virtual void Visit(SqlDropTableStatement statement);
    public abstract virtual void Visit(SqlDropTriggerStatement statement);
    public abstract virtual void Visit(SqlDropTypeStatement statement);
    public abstract virtual void Visit(SqlDropUserStatement statement);
    public abstract virtual void Visit(SqlDropViewStatement statement);
    public abstract virtual void Visit(SqlExecuteModuleStatement statement);
    public abstract virtual void Visit(SqlExecuteStringStatement statement);
    public abstract virtual void Visit(SqlGrantStatement statement);
    public abstract virtual void Visit(SqlIfElseStatement statement);
    public abstract virtual void Visit(SqlInlineTableVariableDeclareStatement statement);
    public abstract virtual void Visit(SqlInsertStatement statement);
    public abstract virtual void Visit(SqlMergeStatement statement);
    public abstract virtual void Visit(SqlStatement statement);
    public abstract virtual void Visit(SqlRestoreDatabaseStatement statement);
    public abstract virtual void Visit(SqlRestoreInformationStatement statement);
    public abstract virtual void Visit(SqlRestoreLogStatement statement);
    public abstract virtual void Visit(SqlRestoreMasterKeyStatement statement);
    public abstract virtual void Visit(SqlRestoreServiceMasterKeyStatement statement);
    public abstract virtual void Visit(SqlRestoreTableStatement statement);
    public abstract virtual void Visit(SqlReturnStatement statement);
    public abstract virtual void Visit(SqlRevokeStatement statement);
    public abstract virtual void Visit(SqlSelectStatement statement);
    public abstract virtual void Visit(SqlSetAssignmentStatement statement);
    public abstract virtual void Visit(SqlSetStatement statement);
    public abstract virtual void Visit(SqlTryCatchStatement statement);
    public abstract virtual void Visit(SqlUpdateStatement statement);
    public abstract virtual void Visit(SqlUseStatement statement);
    public abstract virtual void Visit(SqlVariableDeclareStatement statement);
    public abstract virtual void Visit(SqlWhileStatement statement);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlStatementVisitor`1 {
    public abstract virtual T Visit(SqlAlterFunctionStatement statement);
    public abstract virtual T Visit(SqlAlterLoginStatement statement);
    public abstract virtual T Visit(SqlAlterProcedureStatement statement);
    public abstract virtual T Visit(SqlAlterTriggerStatement statement);
    public abstract virtual T Visit(SqlAlterViewStatement statement);
    public abstract virtual T Visit(SqlBackupCertificateStatement statement);
    public abstract virtual T Visit(SqlBackupDatabaseStatement statement);
    public abstract virtual T Visit(SqlBackupLogStatement statement);
    public abstract virtual T Visit(SqlBackupMasterKeyStatement statement);
    public abstract virtual T Visit(SqlBackupServiceMasterKeyStatement statement);
    public abstract virtual T Visit(SqlBackupTableStatement statement);
    public abstract virtual T Visit(SqlBreakStatement statement);
    public abstract virtual T Visit(SqlCommentStatement statement);
    public abstract virtual T Visit(SqlCompoundStatement statement);
    public abstract virtual T Visit(SqlContinueStatement statement);
    public abstract virtual T Visit(SqlCreateFunctionStatement statement);
    public abstract virtual T Visit(SqlCreateIndexStatement statement);
    public abstract virtual T Visit(SqlCreateLoginFromAsymKeyStatement statement);
    public abstract virtual T Visit(SqlCreateLoginFromCertificateStatement statement);
    public abstract virtual T Visit(SqlCreateLoginFromWindowsStatement statement);
    public abstract virtual T Visit(SqlCreateLoginWithPasswordStatement statement);
    public abstract virtual T Visit(SqlCreateProcedureStatement statement);
    public abstract virtual T Visit(SqlCreateRoleStatement statement);
    public abstract virtual T Visit(SqlCreateSchemaStatement statement);
    public abstract virtual T Visit(SqlCreateSynonymStatement statement);
    public abstract virtual T Visit(SqlCreateTableStatement statement);
    public abstract virtual T Visit(SqlCreateTriggerStatement statement);
    public abstract virtual T Visit(SqlCreateUserDefinedDataTypeStatement statement);
    public abstract virtual T Visit(SqlCreateUserDefinedTableTypeStatement statement);
    public abstract virtual T Visit(SqlCreateUserDefinedTypeStatement statement);
    public abstract virtual T Visit(SqlCreateUserFromAsymKeyStatement statement);
    public abstract virtual T Visit(SqlCreateUserFromCertificateStatement statement);
    public abstract virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement statement);
    public abstract virtual T Visit(SqlCreateUserFromLoginStatement statement);
    public abstract virtual T Visit(SqlCreateUserFromExternalProviderStatement statement);
    public abstract virtual T Visit(SqlCreateUserStatement statement);
    public abstract virtual T Visit(SqlCreateUserWithoutLoginStatement statement);
    public abstract virtual T Visit(SqlCreateViewStatement statement);
    public abstract virtual T Visit(SqlCursorDeclareStatement statement);
    public abstract virtual T Visit(SqlDBCCStatement statement);
    public abstract virtual T Visit(SqlDeleteStatement statement);
    public abstract virtual T Visit(SqlDenyStatement statement);
    public abstract virtual T Visit(SqlDropAggregateStatement statement);
    public abstract virtual T Visit(SqlDropDatabaseStatement statement);
    public abstract virtual T Visit(SqlDropDefaultStatement statement);
    public abstract virtual T Visit(SqlDropFunctionStatement statement);
    public abstract virtual T Visit(SqlDropLoginStatement statement);
    public abstract virtual T Visit(SqlDropProcedureStatement statement);
    public abstract virtual T Visit(SqlDropRuleStatement statement);
    public abstract virtual T Visit(SqlDropSchemaStatement statement);
    public abstract virtual T Visit(SqlDropSecurityPolicyStatement statement);
    public abstract virtual T Visit(SqlDropSequenceStatement statement);
    public abstract virtual T Visit(SqlDropSynonymStatement statement);
    public abstract virtual T Visit(SqlDropTableStatement statement);
    public abstract virtual T Visit(SqlDropTriggerStatement statement);
    public abstract virtual T Visit(SqlDropTypeStatement statement);
    public abstract virtual T Visit(SqlDropUserStatement statement);
    public abstract virtual T Visit(SqlDropViewStatement statement);
    public abstract virtual T Visit(SqlExecuteModuleStatement statement);
    public abstract virtual T Visit(SqlExecuteStringStatement statement);
    public abstract virtual T Visit(SqlGrantStatement statement);
    public abstract virtual T Visit(SqlIfElseStatement statement);
    public abstract virtual T Visit(SqlInlineTableVariableDeclareStatement statement);
    public abstract virtual T Visit(SqlInsertStatement statement);
    public abstract virtual T Visit(SqlMergeStatement statement);
    public abstract virtual T Visit(SqlStatement statement);
    public abstract virtual T Visit(SqlRestoreDatabaseStatement statement);
    public abstract virtual T Visit(SqlRestoreInformationStatement statement);
    public abstract virtual T Visit(SqlRestoreLogStatement statement);
    public abstract virtual T Visit(SqlRestoreMasterKeyStatement statement);
    public abstract virtual T Visit(SqlRestoreServiceMasterKeyStatement statement);
    public abstract virtual T Visit(SqlRestoreTableStatement statement);
    public abstract virtual T Visit(SqlReturnStatement statement);
    public abstract virtual T Visit(SqlRevokeStatement statement);
    public abstract virtual T Visit(SqlSelectStatement statement);
    public abstract virtual T Visit(SqlSetAssignmentStatement statement);
    public abstract virtual T Visit(SqlSetStatement statement);
    public abstract virtual T Visit(SqlTryCatchStatement statement);
    public abstract virtual T Visit(SqlUpdateStatement statement);
    public abstract virtual T Visit(SqlUseStatement statement);
    public abstract virtual T Visit(SqlVariableDeclareStatement statement);
    public abstract virtual T Visit(SqlWhileStatement statement);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement {
    public bool IsColumnDefinition { get; }
    public SqlColumnDefinition AsColumnDefinition { get; }
    public bool IsConstraint { get; }
    public SqlConstraint AsConstraint { get; }
    public SqlTemporalPeriodDefinition AsTemporalPeriodDefinition { get; }
    public bool IsTemporalPeriodDefinition { get; }
    public abstract virtual bool get_IsColumnDefinition();
    public abstract virtual SqlColumnDefinition get_AsColumnDefinition();
    public abstract virtual bool get_IsConstraint();
    public abstract virtual SqlConstraint get_AsConstraint();
    public abstract virtual SqlTemporalPeriodDefinition get_AsTemporalPeriodDefinition();
    public abstract virtual bool get_IsTemporalPeriodDefinition();
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IVisitableSqlCodeObject {
    public abstract virtual void Accept(ISqlCodeObjectVisitor visitor);
    public abstract virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public abstract virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public abstract virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public interface Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IVisitableSqlStatement {
    public abstract virtual void Accept(ISqlStatementVisitor visitor);
    public abstract virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public abstract virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public abstract virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.LiteralValueType : Enum {
    public sbyte value__;
    public static LiteralValueType Binary;
    public static LiteralValueType Default;
    public static LiteralValueType Identifier;
    public static LiteralValueType Integer;
    public static LiteralValueType Image;
    public static LiteralValueType Money;
    public static LiteralValueType Null;
    public static LiteralValueType Numeric;
    public static LiteralValueType Real;
    public static LiteralValueType String;
    public static LiteralValueType UnicodeString;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.LoginOptions : object {
    private static SqlCodeObjectPosComparer sqlCodeObjectPosComparer;
    [CompilerGeneratedAttribute]
private SqlLiteralExpression <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <DefaultDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <DefaultLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOnOffValue <CheckExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOnOffValue <CheckPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlLoginPassword <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlLoginPassword <OldPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCredential>k__BackingField;
    private SqlCodeObject[] optionObjs;
    private bool isOptionObjsCached;
    public SqlLiteralExpression Sid { get; private set; }
    public SqlIdentifier DefaultDatabase { get; private set; }
    public SqlIdentifier DefaultLanguage { get; private set; }
    public SqlIdentifier Credential { get; private set; }
    public SqlOnOffValue CheckExpiration { get; private set; }
    public SqlOnOffValue CheckPolicy { get; private set; }
    public SqlIdentifier Name { get; private set; }
    public SqlLoginPassword Password { get; private set; }
    public SqlLoginPassword OldPassword { get; private set; }
    public bool NoCredential { get; private set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public LoginOptions(List`1<SqlLoginOption> options);
    private static LoginOptions();
    [CompilerGeneratedAttribute]
public SqlLiteralExpression get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(SqlLiteralExpression value);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_DefaultDatabase();
    [CompilerGeneratedAttribute]
private void set_DefaultDatabase(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_DefaultLanguage();
    [CompilerGeneratedAttribute]
private void set_DefaultLanguage(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Credential();
    [CompilerGeneratedAttribute]
private void set_Credential(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlOnOffValue get_CheckExpiration();
    [CompilerGeneratedAttribute]
private void set_CheckExpiration(SqlOnOffValue value);
    [CompilerGeneratedAttribute]
public SqlOnOffValue get_CheckPolicy();
    [CompilerGeneratedAttribute]
private void set_CheckPolicy(SqlOnOffValue value);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlLoginPassword get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(SqlLoginPassword value);
    [CompilerGeneratedAttribute]
public SqlLoginPassword get_OldPassword();
    [CompilerGeneratedAttribute]
private void set_OldPassword(SqlLoginPassword value);
    [CompilerGeneratedAttribute]
public bool get_NoCredential();
    [CompilerGeneratedAttribute]
private void set_NoCredential(bool value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.LoginOptions/<get_Children>d__45")]
public IEnumerable`1<SqlCodeObject> get_Children();
}
internal enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.QueryExpressionValidateOption : Enum {
    public int value__;
    public static QueryExpressionValidateOption IntoClauseSyntaxError;
    public static QueryExpressionValidateOption IntoClauseAllowLeftmost;
    public static QueryExpressionValidateOption IntoClauseDisallow;
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ScalarExpressionType : Enum {
    public int value__;
    public static ScalarExpressionType Unknown;
    public static ScalarExpressionType Binary;
    public static ScalarExpressionType Case;
    public static ScalarExpressionType Collate;
    public static ScalarExpressionType ColumnReference;
    public static ScalarExpressionType Literal;
    public static ScalarExpressionType Function;
    public static ScalarExpressionType GlobalVariableReference;
    public static ScalarExpressionType SubQuery;
    public static ScalarExpressionType Unary;
    public static ScalarExpressionType Udt;
    public static ScalarExpressionType VariableReference;
    public static ScalarExpressionType Null;
    public static ScalarExpressionType Error;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SelectExpressionType : Enum {
    public int value__;
    public static SelectExpressionType Unknown;
    public static SelectExpressionType Scalar;
    public static SelectExpressionType Star;
    public static SelectExpressionType VariableAssignment;
    public static SelectExpressionType Error;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAggregateFunctionCallExpression : SqlBuiltinScalarFunctionCallExpression {
    private static List`1<string> validAggFunctionList;
    private SqlSetQuantifier setQuantifier;
    internal bool IsVisitable { get; }
    public SqlSetQuantifier SetQuantifier { get; }
    private SqlAggregateFunctionCallExpression(string name, SqlSetQuantifier setQuantifier, SqlScalarExpression expression);
    private SqlAggregateFunctionCallExpression(string name, IEnumerable`1<SqlScalarExpression> expressions);
    private SqlAggregateFunctionCallExpression(string name);
    private static SqlAggregateFunctionCallExpression();
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal static SqlAggregateFunctionCallExpression Create(string functionName, SqlSetQuantifier setQuantifier, SqlScalarExpression expression);
    internal static SqlAggregateFunctionCallExpression Create(string functionName, SqlSetQuantifier setQuantifier, IEnumerable`1<SqlScalarExpression> expressions);
    internal static SqlAggregateFunctionCallExpression Create(string functionName);
    public SqlSetQuantifier get_SetQuantifier();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAllAnyComparisonBooleanExpression : SqlBooleanExpression {
    private string comparisonType;
    private SqlScalarExpression left;
    private SqlQueryExpression right;
    private SqlComparisonBooleanExpressionType comparisonOperator;
    internal bool IsVisitable { get; }
    public string ComparisonType { get; }
    public SqlScalarExpression Left { get; }
    public SqlQueryExpression Right { get; }
    public SqlComparisonBooleanExpressionType ComparisonOperator { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlAllAnyComparisonBooleanExpression(SqlScalarExpression leftExpression, SqlComparisonBooleanExpressionType comparisonOp, string allAny, SqlQueryExpression rightExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public string get_ComparisonType();
    public SqlScalarExpression get_Left();
    public SqlQueryExpression get_Right();
    public SqlComparisonBooleanExpressionType get_ComparisonOperator();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAllAnyComparisonBooleanExpression/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAllowPageLocksIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlAllowPageLocksIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAllowRowLocksIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlAllowRowLocksIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAlterFunctionStatement : SqlCreateAlterFunctionStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlAlterFunctionStatement(SqlFunctionDefinition definition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAlterLoginStatement : SqlDdlStatement {
    private SqlIdentifier m_LoginName;
    private LoginOptions m_Options;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public SqlIdentifier LoginName { get; }
    public SqlLoginPassword Password { get; }
    public SqlLoginPassword OldPassword { get; }
    public SqlIdentifier DefaultDatabase { get; }
    public SqlIdentifier DefaultLanguage { get; }
    public SqlIdentifier Credential { get; }
    public SqlOnOffValue CheckExpiration { get; }
    public SqlOnOffValue CheckPolicy { get; }
    public SqlIdentifier Name { get; }
    public bool NoCredential { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public SqlAlterLoginStatement(SqlIdentifier loginName);
    internal SqlAlterLoginStatement(SqlIdentifier loginName, List`1<SqlLoginOption> alterLoginOptions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public SqlIdentifier get_LoginName();
    public SqlLoginPassword get_Password();
    public SqlLoginPassword get_OldPassword();
    public SqlIdentifier get_DefaultDatabase();
    public SqlIdentifier get_DefaultLanguage();
    public SqlIdentifier get_Credential();
    public SqlOnOffValue get_CheckExpiration();
    public SqlOnOffValue get_CheckPolicy();
    public SqlIdentifier get_Name();
    public bool get_NoCredential();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAlterLoginStatement/<get_Children>d__45")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAlterProcedureStatement : SqlCreateAlterProcedureStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlAlterProcedureStatement(SqlProcedureDefinition definition, List`1<SqlStatement> statements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAlterTriggerStatement : SqlCreateAlterTriggerStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlAlterTriggerStatement(SqlTriggerDefinition definition, List`1<SqlStatement> statements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAlterViewStatement : SqlCreateAlterViewStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlAlterViewStatement(SqlViewDefinition definition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAssignment : SqlCodeObject {
    private SqlAssignmentOperatorType operatorType;
    public SqlAssignmentOperatorType Operator { get; }
    public SqlAssignment(SqlAssignmentOperatorType operatorType);
    public SqlAssignmentOperatorType get_Operator();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAssignmentCollection : SqlCollection`1<SqlAssignment> {
    internal SqlAssignmentCollection(IEnumerable`1<SqlAssignment> expressions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAssignmentError : SqlAssignment {
    private SqlScalarExpression value;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Value { get; }
    internal SqlAssignmentError(SqlScalarExpression value);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_Value();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAssignmentOperatorType : Enum {
    public int value__;
    public static SqlAssignmentOperatorType None;
    public static SqlAssignmentOperatorType Assignment;
    public static SqlAssignmentOperatorType AdditionAssignment;
    public static SqlAssignmentOperatorType SubtractionAssignment;
    public static SqlAssignmentOperatorType MultiplicationAssignment;
    public static SqlAssignmentOperatorType DivisionAssignment;
    public static SqlAssignmentOperatorType ModulusAssignment;
    public static SqlAssignmentOperatorType BitwiseAndAssignment;
    public static SqlAssignmentOperatorType BitwiseOrAssignment;
    public static SqlAssignmentOperatorType BitwiseXorAssignment;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAtTimeZoneExpression : SqlScalarExpression {
    private IScalarExpression boundScalar;
    private SqlScalarExpression dateValue;
    private SqlScalarExpression timeZone;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlScalarExpression DateValue { get; }
    public SqlScalarExpression TimeZone { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlAtTimeZoneExpression(SqlScalarExpression dateValue, SqlScalarExpression timeZone);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlScalarExpression get_DateValue();
    public SqlScalarExpression get_TimeZone();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlAtTimeZoneExpression/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupCertificateStatement : SqlStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlBackupCertificateStatement Create(bool isDumpStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupDatabaseStatement : SqlBackupRestoreDatabaseStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlBackupDatabaseStatement Create(bool isDumpStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupLogStatement : SqlBackupRestoreLogStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlBackupLogStatement Create(bool isDumpStatement, bool isDumpTransaction);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupMasterKeyStatement : SqlBackupRestoreMasterKeyStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlBackupMasterKeyStatement Create(bool isDumpStatement);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupRestoreDatabaseStatement : SqlBackupRestoreStatement {
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupRestoreKeyStatement : SqlStatement {
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupRestoreLogStatement : SqlBackupRestoreStatement {
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupRestoreMasterKeyStatement : SqlBackupRestoreKeyStatement {
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupRestoreServiceMasterKeyStatement : SqlBackupRestoreKeyStatement {
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupRestoreStatement : SqlStatement {
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupRestoreTableStatement : SqlBackupRestoreStatement {
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupServiceMasterKeyStatement : SqlBackupRestoreServiceMasterKeyStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlBackupServiceMasterKeyStatement Create(bool isDumpStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBackupTableStatement : SqlBackupRestoreTableStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlBackupTableStatement Create(bool isDumpStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBatch : SqlCodeObject {
    private List`1<DatabaseContext> databaseContexts;
    private LexicalScope lexicalScope;
    private BatchBindingContext bindingContext;
    private SqlStatementCollection statements;
    internal bool IsVisitable { get; }
    public SqlStatement Statement { get; }
    internal IBindingContext BindingContext { get; }
    public SqlStatementCollection Statements { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBatch(List`1<SqlStatement> statements);
    internal SqlBatch(SqlStatement[] statements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public sealed virtual SqlStatement get_Statement();
    internal virtual LexicalScope GetLexicalScope();
    internal virtual IBindingContext get_BindingContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, BindWorkList workList);
    private void BindBatch(BatchBindingContext bindingContext, BindWorkList workList);
    internal virtual void Unbind();
    internal sealed virtual void RegisterDatabaseContextChange(DatabaseContext databaseContext);
    internal sealed virtual DatabaseContext GetDatabaseContext(LexicalScope lexScope);
    internal DatabaseContext GetFinalDatabaseContext();
    internal virtual void PopulateRegions(List`1<Region> regions);
    public SqlStatementCollection get_Statements();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBatch/<get_Children>d__29")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual void WriteXml(XmlWriter writer);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBatchCollection : SqlCollection`1<SqlBatch> {
    internal SqlBatchCollection(List`1<SqlBatch> batches);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBetweenBooleanExpression : SqlBooleanExpression {
    private bool hasNot;
    private SqlScalarExpression testExpression;
    private SqlScalarExpression beginExpression;
    private SqlScalarExpression endExpression;
    internal bool IsVisitable { get; }
    public bool HasNot { get; }
    public SqlScalarExpression TestExpression { get; }
    public SqlScalarExpression BeginExpression { get; }
    public SqlScalarExpression EndExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBetweenBooleanExpression(SqlScalarExpression test, SqlScalarExpression begin, SqlScalarExpression end);
    internal SqlBetweenBooleanExpression(SqlScalarExpression test, bool hasNot, SqlScalarExpression begin, SqlScalarExpression end);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public bool get_HasNot();
    public SqlScalarExpression get_TestExpression();
    public SqlScalarExpression get_BeginExpression();
    public SqlScalarExpression get_EndExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBetweenBooleanExpression/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryBooleanExpression : SqlBooleanExpression {
    private SqlBooleanOperatorType operatorType;
    private SqlBooleanExpression left;
    private SqlBooleanExpression right;
    internal bool IsVisitable { get; }
    public SqlBooleanOperatorType Operator { get; }
    public SqlBooleanExpression Left { get; }
    public SqlBooleanExpression Right { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBinaryBooleanExpression(SqlBooleanExpression leftOp, SqlBooleanOperatorType boolOp, SqlBooleanExpression rightOp);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlBooleanOperatorType get_Operator();
    public SqlBooleanExpression get_Left();
    public SqlBooleanExpression get_Right();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryBooleanExpression/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryFilterExpression : SqlFilterExpression {
    private SqlFilterExpression left;
    private SqlFilterExpression right;
    internal bool IsVisitable { get; }
    public SqlFilterExpression Left { get; }
    public SqlFilterExpression Right { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBinaryFilterExpression(SqlFilterExpression left, SqlFilterExpression right);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlFilterExpression get_Left();
    public SqlFilterExpression get_Right();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryFilterExpression/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryQueryExpression : SqlQueryExpression {
    private SqlBinaryQueryOperatorType operatorType;
    private SqlQueryExpression left;
    private SqlQueryExpression right;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    internal LocalBindingContext LocalBindingContext { get; }
    internal bool HasUnionAll { get; }
    public SqlBinaryQueryOperatorType Operator { get; }
    public SqlQueryExpression Left { get; }
    public SqlQueryExpression Right { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBinaryQueryExpression(SqlQueryExpression left, SqlBinaryQueryOperatorType expressionType, SqlQueryExpression right);
    internal SqlBinaryQueryExpression(SqlQueryExpression left, SqlBinaryQueryOperatorType expressionType, bool isAll, SqlQueryExpression right);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual LocalBindingContext get_LocalBindingContext();
    internal virtual bool get_HasUnionAll();
    internal virtual void ShallowBind(CteBindingContext bindingContext);
    internal virtual void DeepBind(CteBindingContext bindingContext, SqlIdentifier cteName);
    public SqlBinaryQueryOperatorType get_Operator();
    public SqlQueryExpression get_Left();
    public SqlQueryExpression get_Right();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryQueryExpression/<get_Children>d__26")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlSelectIntoClause GetIntoClause();
    internal virtual void Validate(QueryExpressionValidateOption option);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryQueryOperatorType : Enum {
    public int value__;
    public static SqlBinaryQueryOperatorType Union;
    public static SqlBinaryQueryOperatorType UnionAll;
    public static SqlBinaryQueryOperatorType Intersect;
    public static SqlBinaryQueryOperatorType Except;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryScalarExpression : SqlScalarExpression {
    private IScalarExpression boundScalar;
    private SqlBinaryScalarOperatorType operatorType;
    private SqlScalarExpression left;
    private SqlScalarExpression right;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlBinaryScalarOperatorType Operator { get; }
    public SqlScalarExpression Left { get; }
    public SqlScalarExpression Right { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBinaryScalarExpression(SqlScalarExpression left, SqlBinaryScalarOperatorType type, SqlScalarExpression right);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlBinaryScalarOperatorType get_Operator();
    public SqlScalarExpression get_Left();
    public SqlScalarExpression get_Right();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryScalarExpression/<get_Children>d__28")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBinaryScalarOperatorType : Enum {
    public int value__;
    public static SqlBinaryScalarOperatorType None;
    public static SqlBinaryScalarOperatorType Add;
    public static SqlBinaryScalarOperatorType Assign;
    public static SqlBinaryScalarOperatorType BitwiseAnd;
    public static SqlBinaryScalarOperatorType BitwiseOr;
    public static SqlBinaryScalarOperatorType BitwiseXor;
    public static SqlBinaryScalarOperatorType Divide;
    public static SqlBinaryScalarOperatorType Equals;
    public static SqlBinaryScalarOperatorType GreaterThan;
    public static SqlBinaryScalarOperatorType GreaterThanOrEqual;
    public static SqlBinaryScalarOperatorType LessThan;
    public static SqlBinaryScalarOperatorType LessThanOrEqual;
    public static SqlBinaryScalarOperatorType Modulus;
    public static SqlBinaryScalarOperatorType Multiply;
    public static SqlBinaryScalarOperatorType Subtract;
    public static SqlBinaryScalarOperatorType NotEqualTo;
    public static SqlBinaryScalarOperatorType NotGreaterThan;
    public static SqlBinaryScalarOperatorType NotLessThan;
    public static SqlBinaryScalarOperatorType LeftShift;
    public static SqlBinaryScalarOperatorType RightShift;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBooleanExpression : SqlCodeObject {
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBooleanExpressionError : SqlBooleanExpression {
    internal List`1<SqlCodeObject> children;
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBooleanExpressionError(SqlErrorCodeObject errorCodeObject);
    internal SqlBooleanExpressionError(SqlScalarExpression scalarExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBooleanFilterExpression : SqlFilterExpression {
    private SqlBooleanExpression expression;
    internal bool IsVisitable { get; }
    public SqlBooleanExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlBooleanFilterExpression(SqlBooleanExpression expression, bool isValid);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal static SqlBooleanFilterExpression Create(SqlComparisonBooleanExpression expression);
    internal static SqlBooleanFilterExpression Create(SqlDistinctPredicateComparisonBooleanExpression expression);
    internal static SqlBooleanFilterExpression Create(SqlInBooleanExpression expression);
    internal static SqlBooleanFilterExpression Create(SqlIsNullBooleanExpression expression);
    public SqlBooleanExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBooleanFilterExpression/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBooleanOperatorType : Enum {
    public int value__;
    public static SqlBooleanOperatorType And;
    public static SqlBooleanOperatorType Or;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBreakStatement : SqlStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBucketCountIndexOption : SqlIndexOption {
    private int bucketCount;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public int BucketCount { get; }
    internal SqlBucketCountIndexOption(SqlLiteralExpression bucketCount);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public int get_BucketCount();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBuiltinFunctionWithJsonNullQualifier : SqlBuiltinScalarFunctionCallExpression {
    [CompilerGeneratedAttribute]
private SqlNullQualifier <SqlNullQualifierObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SqlJsonObjectArgument> <JsonArgumentList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasJsonArgumentList>k__BackingField;
    public SqlNullQualifier SqlNullQualifierObject { get; public set; }
    public IEnumerable`1<SqlJsonObjectArgument> JsonArgumentList { get; public set; }
    private bool HasJsonArgumentList { get; private set; }
    public int ArgCount { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public SqlBuiltinFunctionWithJsonNullQualifier(string functionName, SqlNullQualifier sqlNullQualifier, IEnumerable`1<SqlScalarExpression> expression);
    public SqlBuiltinFunctionWithJsonNullQualifier(string functionName, SqlNullQualifier sqlNullQualifier);
    public SqlBuiltinFunctionWithJsonNullQualifier(string functionName, IEnumerable`1<SqlJsonObjectArgument> argumentList);
    public SqlBuiltinFunctionWithJsonNullQualifier(string functionName, SqlNullQualifier sqlNullQualifier, IEnumerable`1<SqlJsonObjectArgument> argumentList);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    [CompilerGeneratedAttribute]
public SqlNullQualifier get_SqlNullQualifierObject();
    [CompilerGeneratedAttribute]
public void set_SqlNullQualifierObject(SqlNullQualifier value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SqlJsonObjectArgument> get_JsonArgumentList();
    [CompilerGeneratedAttribute]
public void set_JsonArgumentList(IEnumerable`1<SqlJsonObjectArgument> value);
    [CompilerGeneratedAttribute]
private bool get_HasJsonArgumentList();
    [CompilerGeneratedAttribute]
private void set_HasJsonArgumentList(bool value);
    public virtual int get_ArgCount();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBuiltinFunctionWithJsonNullQualifier/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<SqlCodeObject> <>n__0();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlBuiltinScalarFunctionCallExpression : SqlScalarFunctionCallExpression {
    internal IBuiltInFunction boundFunction;
    private string functionName;
    private bool isStar;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalarFunction BoundFunction { get; }
    public string FunctionName { get; }
    public bool IsStar { get; }
    public int ArgCount { get; }
    internal SqlBuiltinScalarFunctionCallExpression(string functionName, SqlScalarExpression argument);
    internal SqlBuiltinScalarFunctionCallExpression(string functionName, IEnumerable`1<SqlScalarExpression> arguments);
    internal SqlBuiltinScalarFunctionCallExpression(string functionName, bool isStar);
    internal SqlBuiltinScalarFunctionCallExpression(string functionName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalarFunction get_BoundFunction();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    internal static SqlBuiltinScalarFunctionCallExpression CreateStar(string functionName);
    internal static SqlBuiltinScalarFunctionCallExpression Create(string functionName, IEnumerable`1<SqlScalarExpression> expression);
    public string get_FunctionName();
    public bool get_IsStar();
    public virtual int get_ArgCount();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCaseExpression : SqlScalarExpression {
    private IScalarExpression boundScalar;
    protected SqlScalarExpression elseExpression;
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlScalarExpression ElseExpression { get; }
    internal SqlCaseExpression(SqlScalarExpression elseExpression);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal abstract virtual IEnumerable`1<SqlScalarExpression> RetrieveResultScalarExpressions();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlScalarExpression get_ElseExpression();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCastExpression : SqlBuiltinScalarFunctionCallExpression {
    private SqlDataTypeSpecification dataTypeSpec;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public SqlDataTypeSpecification DataTypeSpec { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCastExpression(string name, SqlDataTypeSpecification dataType, SqlScalarExpression argument);
    internal SqlCastExpression(string name, SqlDataTypeSpecification dataTypeSpec, SqlScalarExpression argument1, SqlScalarExpression argument2);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public SqlDataTypeSpecification get_DataTypeSpec();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCastExpression/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCastExpression/<Enumerate>d__18")]
private static IEnumerable`1<SqlScalarExpression> Enumerate(SqlScalarExpression arg1, SqlScalarExpression arg2);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlChangeTrackingContext : SqlCodeObject {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCheckConstraint : SqlConstraint {
    private LocalBindingContext localBindingContext;
    private bool notForReplication;
    private SqlBooleanExpression expression;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    public bool NotForReplication { get; }
    public SqlBooleanExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal SqlCheckConstraint(bool notForReplication, SqlBooleanExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    internal virtual void Unbind();
    public bool get_NotForReplication();
    public SqlBooleanExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCheckConstraint/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrAssemblySpecifier : SqlCodeObject {
    private SqlIdentifier assemblyName;
    internal bool IsVisitable { get; }
    public SqlIdentifier AssemblyName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlClrAssemblySpecifier(SqlIdentifier assemblyName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlIdentifier get_AssemblyName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrAssemblySpecifier/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrClassSpecifier : SqlClrAssemblySpecifier {
    private SqlIdentifier className;
    internal bool IsVisitable { get; }
    public SqlIdentifier ClassName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlClrClassSpecifier(SqlIdentifier assemblyName);
    internal SqlClrClassSpecifier(SqlIdentifier assemblyName, SqlIdentifier className);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlIdentifier get_ClassName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrClassSpecifier/<get_Children>d__12")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrFunctionBodyDefinition : SqlFunctionBodyDefinition {
    private SqlClrMethodSpecifier clrMethodSpecifier;
    internal bool IsVisitable { get; }
    internal SqlClrFunctionBodyDefinition AsSqlClrFunctionBodyDefinition { get; }
    internal SqlInlineFunctionBodyDefinition AsSqlInlineFunctionBodyDefinition { get; }
    internal SqlMultistatementFunctionBodyDefinition AsSqlMultistatementFunctionBodyDefinition { get; }
    public SqlClrMethodSpecifier ClrMethodSpecifier { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlClrFunctionBodyDefinition(SqlClrMethodSpecifier clrMethodSpecifier);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual SqlClrFunctionBodyDefinition get_AsSqlClrFunctionBodyDefinition();
    internal sealed virtual SqlInlineFunctionBodyDefinition get_AsSqlInlineFunctionBodyDefinition();
    internal sealed virtual SqlMultistatementFunctionBodyDefinition get_AsSqlMultistatementFunctionBodyDefinition();
    internal virtual void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    public SqlClrMethodSpecifier get_ClrMethodSpecifier();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrFunctionBodyDefinition/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrMethodSpecifier : SqlClrClassSpecifier {
    private SqlIdentifier methodName;
    internal bool IsVisitable { get; }
    public SqlIdentifier MethodName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlClrMethodSpecifier(SqlIdentifier assemblyName, SqlIdentifier className, SqlIdentifier methodName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlIdentifier get_MethodName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClrMethodSpecifier/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlClusterOption : Enum {
    public int value__;
    public static SqlClusterOption Default;
    public static SqlClusterOption Clustered;
    public static SqlClusterOption NonClustered;
    public static SqlClusterOption NonClusteredHash;
    public static SqlClusterOption Hash;
    public static SqlClusterOption ClusteredColumnstore;
    public static SqlClusterOption NonClusteredColumnstore;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObject : object {
    private BindingState m_bindingState;
    private LexLocation relativePosition;
    private SqlCodeObject parent;
    internal static IComparer`1<SqlCodeObject> LexicalComparer;
    internal bool IsVisitable { get; }
    public SqlStatement Statement { get; }
    internal bool CanBeBoundIndependently { get; }
    internal bool IsStatementLevelObject { get; }
    internal SqlStatement AsStatement { get; }
    public IMetadataObject BoundObject { get; }
    internal IBindingContext BindingContext { get; }
    internal BindingState BindingState { get; internal set; }
    internal bool IsBound { get; }
    internal bool HasBindingErrors { get; }
    internal bool HasAnyBindSkipped { get; }
    internal bool IsInAlterStatement { get; }
    internal bool IsInCreateStatement { get; }
    internal bool IsInDropStatement { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public Location StartLocation { get; }
    public Location EndLocation { get; }
    public string Sql { get; }
    public int Length { get; }
    public string Xml { get; }
    public IEnumerable`1<Token> Tokens { get; }
    public bool IsSqlCodeSnippet { get; }
    [XmlIgnoreAttribute]
public TokenManager TokenManager { get; }
    private ParseContext ParseContext { get; }
    [XmlIgnoreAttribute]
public LexLocation Position { get; public set; }
    internal int LocalPositionOffset { get; }
    internal int AbsolutePositionOffset { get; }
    public SqlCodeObject Parent { get; }
    private static SqlCodeObject();
    internal abstract virtual bool get_IsVisitable();
    public abstract virtual void Accept(ISqlCodeObjectVisitor visitor);
    public abstract virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public abstract virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public abstract virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public virtual SqlStatement get_Statement();
    internal virtual bool get_CanBeBoundIndependently();
    internal virtual bool get_IsStatementLevelObject();
    internal virtual SqlStatement get_AsStatement();
    public virtual IMetadataObject get_BoundObject();
    internal virtual IBindingContext get_BindingContext();
    internal BindingState get_BindingState();
    internal void set_BindingState(BindingState value);
    internal bool get_IsBound();
    internal bool get_HasBindingErrors();
    internal virtual bool get_HasAnyBindSkipped();
    internal virtual LexicalScope GetLexicalScope();
    internal virtual LexicalScope GetChildLexicalScope(SqlCodeObject child);
    internal LexicalScope CreateLexicalScope(bool isModule);
    internal virtual void RegisterDatabaseContextChange(DatabaseContext databaseContext);
    internal virtual DatabaseContext GetDatabaseContext(LexicalScope lexScope);
    internal virtual SqlTableExpression FindSiblingTableExpressionBoundTo(SqlTableExpression tableExpression, ITabular boundTable);
    internal T GetBoundObject(SqlCodeObject codeObject);
    internal T GetBoundObject(BatchBindingContext bindingContext);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    [ConditionalAttribute("DEBUG")]
internal virtual void ValidateBoundObjects(MetadataObjectValidator validator);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal SqlCodeObject FindChildContainingLocation(LexLocation& lexLocation);
    internal virtual bool MayChildHaveCompletionList(SqlCodeObject child);
    internal IMetadataCollection`1<IMetadataObject> RetrieveCompletionListItems(CompletionContext completionContext);
    internal IMetadataCollection`1<IMetadataObject> RetrieveCompletionListItems(LexLocation caretLocation, IEnumerable`1<SqlIdentifier> identifiers, CompletionContext completionContext);
    private IMetadataCollection`1<IMetadataObject> RetrieveCompletionListItems(List`1<string> ids, CompletionContext completionContext);
    internal bool IsCaretBetweenEmptyParenthesis(LexLocation caretLocation);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal MethodHelpText GetMethodHelpTextRecursive(LexLocation caretLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodHelpText GetMyMethodHelpText(LexLocation caretLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal MethodHelpText BuildMethodHelpText(IMetadataObject boundObject, IMetadataCollection`1<IParameter> parameters, string methodDescription, string methodType, bool shouldShowParentheses, bool isVarArgs, IMetadataDisplayInfoProvider displayInfoProvider);
    internal string BuildParameterHelpMethodTypeString(IDataType dataType);
    internal MethodNameAndParamLocations GetMethodNameAndParamsRecursive(LexLocation caretLocation);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    internal List`1<SqlCodeObject> GetSqlCodeObjectList(SqlScalarExpressionCollection scalarExpressionCollection);
    internal void BuildMethodNameAndParams(MethodNameAndParamLocations methodNameAndParams, int nameEndPosition, List`1<SqlCodeObject> arguments);
    internal virtual void PopulateRegions(List`1<Region> regions);
    internal void AddRegion(List`1<Region> regions, Location startLocation, Location endLocation);
    internal bool get_IsInAlterStatement();
    internal bool get_IsInCreateStatement();
    internal bool get_IsInDropStatement();
    internal T GetAncestorNode();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObject/<get_Children>d__65")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    public Location get_StartLocation();
    public Location get_EndLocation();
    public string get_Sql();
    public int get_Length();
    public string get_Xml();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObject/<get_Tokens>d__77")]
public IEnumerable`1<Token> get_Tokens();
    public bool get_IsSqlCodeSnippet();
    public virtual TokenManager get_TokenManager();
    internal void SetParentParseContext(ParseContext parseContext);
    internal void ClearParent();
    private ParseContext get_ParseContext();
    public LexLocation get_Position();
    public void set_Position(LexLocation value);
    internal virtual int get_LocalPositionOffset();
    internal int get_AbsolutePositionOffset();
    public SqlCodeObject get_Parent();
    internal void SetParentPointers();
    internal virtual void OnSetParentPointers();
    internal void PopulateIdentifiers(List`1<SqlIdentifier> identifiers);
    internal string GetSql(LexLocation location);
    private void PopulateIdentifierFromTokens(List`1<SqlIdentifier> identifiers);
    public static string GetSqlSource(ISqlCodeCollection`1<T> collection);
    public static string GetSqlSource(SqlCodeObject[] codeObjects);
    public static string GetSqlSource(SqlCodeObject first, SqlCodeObject last);
    internal int GetTokenNumber(int line, int col);
    internal virtual void WriteXml(XmlWriter writer);
    internal void ReportSyntaxError();
    internal void ReportSyntaxErrorOnFirstToken();
    internal void ReportSyntaxErrorNearKeyword(string keyword);
    internal void ReportSyntaxError(LexLocation lexLocation);
    internal void ReportSyntaxError(string tokenString, LexLocation lexLocation);
    internal void ReportParseError(string message);
    internal void ReportBindError(string message);
    internal void ReportBindError(string message, ErrorFlags errorFlags);
    internal static void ReportParseError(SqlCollection`1<T> codeObjects, string message);
    internal static void ReportBindError(SqlCollection`1<T> codeObjects, string message);
    private static void ReportError(SqlCollection`1<T> codeObjects, ErrorType type, string message, ErrorFlags errorFlags);
    private void ReportError(ErrorType type, ErrorFlags errorFlags, string message, SqlCodeObject lastCodeObject);
    [ConditionalAttribute("DEBUG")]
internal void RunConsistencyChecks();
    [ConditionalAttribute("DEBUG")]
internal virtual void RunConsistencyChecks(string path, int depth);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectContextVisitor`1 : object {
    public virtual void Visit(SqlAggregateFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlAllAnyComparisonBooleanExpression codeObject, C context);
    public virtual void Visit(SqlAllowPageLocksIndexOption codeObject, C context);
    public virtual void Visit(SqlAllowRowLocksIndexOption codeObject, C context);
    public virtual void Visit(SqlAssignment codeObject, C context);
    public virtual void Visit(SqlAtTimeZoneExpression codeObject, C context);
    public virtual void Visit(SqlBatch codeObject, C context);
    public virtual void Visit(SqlBetweenBooleanExpression codeObject, C context);
    public virtual void Visit(SqlBinaryBooleanExpression codeObject, C context);
    public virtual void Visit(SqlBinaryFilterExpression codeObject, C context);
    public virtual void Visit(SqlBinaryQueryExpression codeObject, C context);
    public virtual void Visit(SqlBinaryScalarExpression codeObject, C context);
    public virtual void Visit(SqlBooleanExpression codeObject, C context);
    public virtual void Visit(SqlBooleanFilterExpression codeObject, C context);
    public virtual void Visit(SqlBuiltinScalarFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlCastExpression codeObject, C context);
    public virtual void Visit(SqlChangeTrackingContext codeObject, C context);
    public virtual void Visit(SqlCheckConstraint codeObject, C context);
    public virtual void Visit(SqlClrAssemblySpecifier codeObject, C context);
    public virtual void Visit(SqlClrClassSpecifier codeObject, C context);
    public virtual void Visit(SqlClrFunctionBodyDefinition codeObject, C context);
    public virtual void Visit(SqlClrMethodSpecifier codeObject, C context);
    public virtual void Visit(SqlCollateScalarExpression codeObject, C context);
    public virtual void Visit(SqlCollation codeObject, C context);
    public virtual void Visit(SqlColumnAssignment codeObject, C context);
    public virtual void Visit(SqlDefaultConstraint codeObject, C context);
    public virtual void Visit(SqlColumnDefinition codeObject, C context);
    public virtual void Visit(SqlColumnIdentity codeObject, C context);
    public virtual void Visit(SqlColumnRefExpression codeObject, C context);
    public virtual void Visit(SqlCommonTableExpression codeObject, C context);
    public virtual void Visit(SqlComparisonBooleanExpression codeObject, C context);
    public virtual void Visit(SqlCompressionPartitionRange codeObject, C context);
    public virtual void Visit(SqlComputedColumnDefinition codeObject, C context);
    public virtual void Visit(SqlConditionClause codeObject, C context);
    public virtual void Visit(SqlConstraint codeObject, C context);
    public virtual void Visit(SqlConvertExpression codeObject, C context);
    public virtual void Visit(SqlCreateUserOption codeObject, C context);
    public virtual void Visit(SqlCubeGroupByItem codeObject, C context);
    public virtual void Visit(SqlCursorOption codeObject, C context);
    public virtual void Visit(SqlCursorVariableAssignment codeObject, C context);
    public virtual void Visit(SqlCursorVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlDataCompressionIndexOption codeObject, C context);
    public virtual void Visit(SqlDataType codeObject, C context);
    public virtual void Visit(SqlDataTypeSpecification codeObject, C context);
    public virtual void Visit(SqlDdlTriggerDefinition codeObject, C context);
    public virtual void Visit(SqlDefaultValuesInsertMergeActionSource codeObject, C context);
    public virtual void Visit(SqlDefaultValuesInsertSource codeObject, C context);
    public virtual void Visit(SqlDeleteMergeAction codeObject, C context);
    public virtual void Visit(SqlDeleteSpecification codeObject, C context);
    public virtual void Visit(SqlDerivedTableExpression codeObject, C context);
    public virtual void Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject, C context);
    public virtual void Visit(SqlDmlSpecificationTableSource codeObject, C context);
    public virtual void Visit(SqlDmlTriggerDefinition codeObject, C context);
    public virtual void Visit(SqlDropExistingIndexOption codeObject, C context);
    public virtual void Visit(SqlEdgeConstraint codeObject, C context);
    public virtual void Visit(SqlExecuteArgument codeObject, C context);
    public virtual void Visit(SqlExecuteAsClause codeObject, C context);
    public virtual void Visit(SqlExistsBooleanExpression codeObject, C context);
    public virtual void Visit(SqlFillFactorIndexOption codeObject, C context);
    public virtual void Visit(SqlFilterClause codeObject, C context);
    public virtual void Visit(SqlForBrowseClause codeObject, C context);
    public virtual void Visit(SqlForeignKeyConstraint codeObject, C context);
    public virtual void Visit(SqlForXmlAutoClause codeObject, C context);
    public virtual void Visit(SqlForXmlClause codeObject, C context);
    public virtual void Visit(SqlForXmlDirective codeObject, C context);
    public virtual void Visit(SqlForXmlExplicitClause codeObject, C context);
    public virtual void Visit(SqlForXmlPathClause codeObject, C context);
    public virtual void Visit(SqlForXmlRawClause codeObject, C context);
    public virtual void Visit(SqlFromClause codeObject, C context);
    public virtual void Visit(SqlFullTextBooleanExpression codeObject, C context);
    public virtual void Visit(SqlFullTextColumn codeObject, C context);
    public virtual void Visit(SqlFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlGlobalScalarVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlGrandTotalGroupByItem codeObject, C context);
    public virtual void Visit(SqlGrandTotalGroupingSet codeObject, C context);
    public virtual void Visit(SqlGroupByClause codeObject, C context);
    public virtual void Visit(SqlGroupBySets codeObject, C context);
    public virtual void Visit(SqlGroupingSetItemsCollection codeObject, C context);
    public virtual void Visit(SqlHavingClause codeObject, C context);
    public virtual void Visit(SqlIdentifier codeObject, C context);
    public virtual void Visit(SqlIdentityFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlIgnoreDupKeyIndexOption codeObject, C context);
    public virtual void Visit(SqlInBooleanExpression codeObject, C context);
    public virtual void Visit(SqlInBooleanExpressionCollectionValue codeObject, C context);
    public virtual void Visit(SqlInBooleanExpressionQueryValue codeObject, C context);
    public virtual void Visit(SqlIndexedColumn codeObject, C context);
    public virtual void Visit(SqlIndexHint codeObject, C context);
    public virtual void Visit(SqlIndexOption codeObject, C context);
    public virtual void Visit(SqlInlineIndexConstraint codeObject, C context);
    public virtual void Visit(SqlInlineFunctionBodyDefinition codeObject, C context);
    public virtual void Visit(SqlInlineTableRelationalFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlInlineTableVariableDeclaration codeObject, C context);
    public virtual void Visit(SqlInsertMergeAction codeObject, C context);
    public virtual void Visit(SqlInsertSpecification codeObject, C context);
    public virtual void Visit(SqlIntoClause codeObject, C context);
    public virtual void Visit(SqlIsNullBooleanExpression codeObject, C context);
    public virtual void Visit(SqlJsonObjectArgument codeObject, C context);
    public virtual void Visit(SqlLargeDataStorageInformation codeObject, C context);
    public virtual void Visit(SqlLikeBooleanExpression codeObject, C context);
    public virtual void Visit(SqlLiteralExpression codeObject, C context);
    public virtual void Visit(SqlLoginPassword codeObject, C context);
    public virtual void Visit(SqlMaxDegreeOfParallelismIndexOption codeObject, C context);
    public virtual void Visit(SqlMergeActionClause codeObject, C context);
    public virtual void Visit(SqlMergeSpecification codeObject, C context);
    public virtual void Visit(SqlInsertSource codeObject, C context);
    public virtual void Visit(SqlModuleCalledOnNullInputOption codeObject, C context);
    public virtual void Visit(SqlModuleEncryptionOption codeObject, C context);
    public virtual void Visit(SqlModuleExecuteAsOption codeObject, C context);
    public virtual void Visit(SqlModuleInlineOption codeObject, C context);
    public virtual void Visit(SqlModuleNativeCompilationOption codeObject, C context);
    public virtual void Visit(SqlModuleOption codeObject, C context);
    public virtual void Visit(SqlModuleRecompileOption codeObject, C context);
    public virtual void Visit(SqlModuleReturnsNullOnNullInputOption codeObject, C context);
    public virtual void Visit(SqlModuleSchemaBindingOption codeObject, C context);
    public virtual void Visit(SqlModuleViewMetadataOption codeObject, C context);
    public virtual void Visit(SqlMultistatementFunctionBodyDefinition codeObject, C context);
    public virtual void Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlNotBooleanExpression codeObject, C context);
    public virtual void Visit(SqlNullQualifier codeObject, C context);
    public virtual void Visit(SqlQueryExpression codeObject, C context);
    public virtual void Visit(SqlScalarExpression codeObject, C context);
    public virtual void Visit(SqlTableExpression codeObject, C context);
    public virtual void Visit(SqlObjectIdentifier codeObject, C context);
    public virtual void Visit(SqlObjectReference codeObject, C context);
    public virtual void Visit(SqlOnlineIndexOption codeObject, C context);
    public virtual void Visit(SqlOptimizeForSequentialKeyIndexOption codeObject, C context);
    public virtual void Visit(SqlResumableIndexOption codeObject, C context);
    public virtual void Visit(SqlBucketCountIndexOption codeObject, C context);
    public virtual void Visit(SqlCompressionDelayIndexOption codeObject, C context);
    public virtual void Visit(SqlMaxDurationIndexOption codeObject, C context);
    public virtual void Visit(SqlOffsetFetchClause codeObject, C context);
    public virtual void Visit(SqlOrderByClause codeObject, C context);
    public virtual void Visit(SqlOrderByItem codeObject, C context);
    public virtual void Visit(SqlOutputClause codeObject, C context);
    public virtual void Visit(SqlOutputIntoClause codeObject, C context);
    public virtual void Visit(SqlPadIndexOption codeObject, C context);
    public virtual void Visit(SqlParameterDeclaration codeObject, C context);
    public virtual void Visit(SqlPivotClause codeObject, C context);
    public virtual void Visit(SqlPivotTableExpression codeObject, C context);
    public virtual void Visit(SqlPrimaryKeyConstraint codeObject, C context);
    public virtual void Visit(SqlStorageSpecification codeObject, C context);
    public virtual void Visit(SqlProcedureDefinition codeObject, C context);
    public virtual void Visit(SqlQualifiedJoinTableExpression codeObject, C context);
    public virtual void Visit(SqlQuerySpecification codeObject, C context);
    public virtual void Visit(SqlQueryWithClause codeObject, C context);
    public virtual void Visit(SqlRollupGroupByItem codeObject, C context);
    public virtual void Visit(SqlRowConstructorExpression codeObject, C context);
    public virtual void Visit(SqlScalarClrFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlScalarFunctionReturnType codeObject, C context);
    public virtual void Visit(SqlScalarRefExpression codeObject, C context);
    public virtual void Visit(SqlScalarRelationalFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlScalarSubQueryExpression codeObject, C context);
    public virtual void Visit(SqlScalarVariableAssignment codeObject, C context);
    public virtual void Visit(SqlScalarVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlScript codeObject, C context);
    public virtual void Visit(SqlSearchedCaseExpression codeObject, C context);
    public virtual void Visit(SqlSearchedWhenClause codeObject, C context);
    public virtual void Visit(SqlSelectClause codeObject, C context);
    public virtual void Visit(SqlSelectIntoClause codeObject, C context);
    public virtual void Visit(SqlSelectScalarExpression codeObject, C context);
    public virtual void Visit(SqlSelectSpecification codeObject, C context);
    public virtual void Visit(SqlSelectSpecificationInsertSource codeObject, C context);
    public virtual void Visit(SqlSelectStarExpression codeObject, C context);
    public virtual void Visit(SqlSelectVariableAssignmentExpression codeObject, C context);
    public virtual void Visit(SqlSetClause codeObject, C context);
    public virtual void Visit(SqlSimpleCaseExpression codeObject, C context);
    public virtual void Visit(SqlSimpleGroupByItem codeObject, C context);
    public virtual void Visit(SqlSimpleOrderByClause codeObject, C context);
    public virtual void Visit(SqlSimpleOrderByItem codeObject, C context);
    public virtual void Visit(SqlSimpleWhenClause codeObject, C context);
    public virtual void Visit(SqlSortedDataIndexOption codeObject, C context);
    public virtual void Visit(SqlSortedDataReorgIndexOption codeObject, C context);
    public virtual void Visit(SqlSortInTempDbIndexOption codeObject, C context);
    public virtual void Visit(SqlStatisticsIncrementalIndexOption codeObject, C context);
    public virtual void Visit(SqlStatisticsNoRecomputeIndexOption codeObject, C context);
    public virtual void Visit(SqlStatisticsOnlyIndexOption codeObject, C context);
    public virtual void Visit(SqlTableClrFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlTableConstructorExpression codeObject, C context);
    public virtual void Visit(SqlTableConstructorInsertSource codeObject, C context);
    public virtual void Visit(SqlTableDefinition codeObject, C context);
    public virtual void Visit(SqlTableFunctionReturnType codeObject, C context);
    public virtual void Visit(SqlTableHint codeObject, C context);
    public virtual void Visit(SqlTableRefExpression codeObject, C context);
    public virtual void Visit(SqlTableValuedFunctionRefExpression codeObject, C context);
    public virtual void Visit(SqlTableVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlTableUdtInstanceMethodExpression codeObject, C context);
    public virtual void Visit(SqlTargetTableExpression codeObject, C context);
    public virtual void Visit(SqlTemporalPeriodDefinition codeObject, C context);
    public virtual void Visit(SqlTopSpecification codeObject, C context);
    public virtual void Visit(SqlTriggerAction codeObject, C context);
    public virtual void Visit(SqlTriggerDefinition codeObject, C context);
    public virtual void Visit(SqlTriggerEvent codeObject, C context);
    public virtual void Visit(SqlUdtInstanceDataMemberExpression codeObject, C context);
    public virtual void Visit(SqlUdtInstanceMethodExpression codeObject, C context);
    public virtual void Visit(SqlUdtStaticDataMemberExpression codeObject, C context);
    public virtual void Visit(SqlUdtStaticMethodExpression codeObject, C context);
    public virtual void Visit(SqlUnaryScalarExpression codeObject, C context);
    public virtual void Visit(SqlUniqueConstraint codeObject, C context);
    public virtual void Visit(SqlUnpivotClause codeObject, C context);
    public virtual void Visit(SqlUnpivotTableExpression codeObject, C context);
    public virtual void Visit(SqlUnqualifiedJoinTableExpression codeObject, C context);
    public virtual void Visit(SqlUpdateBooleanExpression codeObject, C context);
    public virtual void Visit(SqlUpdateMergeAction codeObject, C context);
    public virtual void Visit(SqlUpdateSpecification codeObject, C context);
    public virtual void Visit(SqlUserDefinedScalarFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlValuesInsertMergeActionSource codeObject, C context);
    public virtual void Visit(SqlVariableColumnAssignment codeObject, C context);
    public virtual void Visit(SqlVariableDeclaration codeObject, C context);
    public virtual void Visit(SqlViewDefinition codeObject, C context);
    public virtual void Visit(SqlWindowClause codeObject, C context);
    public virtual void Visit(SqlWindowExpression codeObject, C context);
    public virtual void Visit(SqlWindowSpecification codeObject, C context);
    public virtual void Visit(SqlWhereClause codeObject, C context);
    public virtual void Visit(SqlXmlNamespacesDeclaration codeObject, C context);
    public virtual void Visit(SqlAlterFunctionStatement codeObject, C context);
    public virtual void Visit(SqlAlterLoginStatement codeObject, C context);
    public virtual void Visit(SqlAlterProcedureStatement codeObject, C context);
    public virtual void Visit(SqlAlterTriggerStatement codeObject, C context);
    public virtual void Visit(SqlAlterViewStatement codeObject, C context);
    public virtual void Visit(SqlBackupCertificateStatement codeObject, C context);
    public virtual void Visit(SqlBackupDatabaseStatement codeObject, C context);
    public virtual void Visit(SqlBackupLogStatement codeObject, C context);
    public virtual void Visit(SqlBackupMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlBackupServiceMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlBackupTableStatement codeObject, C context);
    public virtual void Visit(SqlBreakStatement codeObject, C context);
    public virtual void Visit(SqlCommentStatement codeObject, C context);
    public virtual void Visit(SqlCompoundStatement codeObject, C context);
    public virtual void Visit(SqlContinueStatement codeObject, C context);
    public virtual void Visit(SqlCreateFunctionStatement codeObject, C context);
    public virtual void Visit(SqlCreateIndexStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginFromAsymKeyStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginFromCertificateStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginFromWindowsStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginWithPasswordStatement codeObject, C context);
    public virtual void Visit(SqlCreateProcedureStatement codeObject, C context);
    public virtual void Visit(SqlCreateRoleStatement codeObject, C context);
    public virtual void Visit(SqlCreateSchemaStatement codeObject, C context);
    public virtual void Visit(SqlCreateSynonymStatement codeObject, C context);
    public virtual void Visit(SqlCreateTableStatement codeObject, C context);
    public virtual void Visit(SqlCreateTriggerStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserDefinedDataTypeStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserDefinedTableTypeStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserDefinedTypeStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromAsymKeyStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromCertificateStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromLoginStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromExternalProviderStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserWithoutLoginStatement codeObject, C context);
    public virtual void Visit(SqlCreateViewStatement codeObject, C context);
    public virtual void Visit(SqlCursorDeclareStatement codeObject, C context);
    public virtual void Visit(SqlDBCCStatement codeObject, C context);
    public virtual void Visit(SqlDeleteStatement codeObject, C context);
    public virtual void Visit(SqlDenyStatement codeObject, C context);
    public virtual void Visit(SqlDropAggregateStatement codeObject, C context);
    public virtual void Visit(SqlDropDatabaseStatement codeObject, C context);
    public virtual void Visit(SqlDropDefaultStatement codeObject, C context);
    public virtual void Visit(SqlDropFunctionStatement codeObject, C context);
    public virtual void Visit(SqlDropLoginStatement codeObject, C context);
    public virtual void Visit(SqlDropProcedureStatement codeObject, C context);
    public virtual void Visit(SqlDropRuleStatement codeObject, C context);
    public virtual void Visit(SqlDropSchemaStatement codeObject, C context);
    public virtual void Visit(SqlDropSecurityPolicyStatement codeObject, C context);
    public virtual void Visit(SqlDropSequenceStatement codeObject, C context);
    public virtual void Visit(SqlDropSynonymStatement codeObject, C context);
    public virtual void Visit(SqlDropTableStatement codeObject, C context);
    public virtual void Visit(SqlDropTriggerStatement codeObject, C context);
    public virtual void Visit(SqlDropTypeStatement codeObject, C context);
    public virtual void Visit(SqlDropUserStatement codeObject, C context);
    public virtual void Visit(SqlDropViewStatement codeObject, C context);
    public virtual void Visit(SqlExecuteModuleStatement codeObject, C context);
    public virtual void Visit(SqlExecuteStringStatement codeObject, C context);
    public virtual void Visit(SqlGrantStatement codeObject, C context);
    public virtual void Visit(SqlIfElseStatement codeObject, C context);
    public virtual void Visit(SqlInlineTableVariableDeclareStatement codeObject, C context);
    public virtual void Visit(SqlInsertStatement codeObject, C context);
    public virtual void Visit(SqlMergeStatement codeObject, C context);
    public virtual void Visit(SqlStatement codeObject, C context);
    public virtual void Visit(SqlRestoreDatabaseStatement codeObject, C context);
    public virtual void Visit(SqlRestoreInformationStatement codeObject, C context);
    public virtual void Visit(SqlRestoreLogStatement codeObject, C context);
    public virtual void Visit(SqlRestoreMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlRestoreServiceMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlRestoreTableStatement codeObject, C context);
    public virtual void Visit(SqlReturnStatement codeObject, C context);
    public virtual void Visit(SqlRevokeStatement codeObject, C context);
    public virtual void Visit(SqlSelectStatement codeObject, C context);
    public virtual void Visit(SqlSetAssignmentStatement codeObject, C context);
    public virtual void Visit(SqlSetStatement codeObject, C context);
    public virtual void Visit(SqlTryCatchStatement codeObject, C context);
    public virtual void Visit(SqlUpdateStatement codeObject, C context);
    public virtual void Visit(SqlUseStatement codeObject, C context);
    public virtual void Visit(SqlVariableDeclareStatement codeObject, C context);
    public virtual void Visit(SqlWhileStatement codeObject, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectContextVisitor`2 : object {
    public virtual T Visit(SqlAggregateFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlAllAnyComparisonBooleanExpression codeObject, C context);
    public virtual T Visit(SqlAllowPageLocksIndexOption codeObject, C context);
    public virtual T Visit(SqlAllowRowLocksIndexOption codeObject, C context);
    public virtual T Visit(SqlAssignment codeObject, C context);
    public virtual T Visit(SqlAtTimeZoneExpression codeObject, C context);
    public virtual T Visit(SqlBatch codeObject, C context);
    public virtual T Visit(SqlBetweenBooleanExpression codeObject, C context);
    public virtual T Visit(SqlBinaryBooleanExpression codeObject, C context);
    public virtual T Visit(SqlBinaryFilterExpression codeObject, C context);
    public virtual T Visit(SqlBinaryQueryExpression codeObject, C context);
    public virtual T Visit(SqlBinaryScalarExpression codeObject, C context);
    public virtual T Visit(SqlBooleanExpression codeObject, C context);
    public virtual T Visit(SqlBooleanFilterExpression codeObject, C context);
    public virtual T Visit(SqlBuiltinScalarFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlCastExpression codeObject, C context);
    public virtual T Visit(SqlChangeTrackingContext codeObject, C context);
    public virtual T Visit(SqlCheckConstraint codeObject, C context);
    public virtual T Visit(SqlClrAssemblySpecifier codeObject, C context);
    public virtual T Visit(SqlClrClassSpecifier codeObject, C context);
    public virtual T Visit(SqlClrFunctionBodyDefinition codeObject, C context);
    public virtual T Visit(SqlClrMethodSpecifier codeObject, C context);
    public virtual T Visit(SqlCollateScalarExpression codeObject, C context);
    public virtual T Visit(SqlCollation codeObject, C context);
    public virtual T Visit(SqlColumnAssignment codeObject, C context);
    public virtual T Visit(SqlDefaultConstraint codeObject, C context);
    public virtual T Visit(SqlColumnDefinition codeObject, C context);
    public virtual T Visit(SqlColumnIdentity codeObject, C context);
    public virtual T Visit(SqlColumnRefExpression codeObject, C context);
    public virtual T Visit(SqlCommonTableExpression codeObject, C context);
    public virtual T Visit(SqlComparisonBooleanExpression codeObject, C context);
    public virtual T Visit(SqlCompressionPartitionRange codeObject, C context);
    public virtual T Visit(SqlComputedColumnDefinition codeObject, C context);
    public virtual T Visit(SqlConditionClause codeObject, C context);
    public virtual T Visit(SqlConstraint codeObject, C context);
    public virtual T Visit(SqlConvertExpression codeObject, C context);
    public virtual T Visit(SqlCreateUserOption codeObject, C context);
    public virtual T Visit(SqlCubeGroupByItem codeObject, C context);
    public virtual T Visit(SqlCursorOption codeObject, C context);
    public virtual T Visit(SqlCursorVariableAssignment codeObject, C context);
    public virtual T Visit(SqlCursorVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlDataCompressionIndexOption codeObject, C context);
    public virtual T Visit(SqlDataType codeObject, C context);
    public virtual T Visit(SqlDataTypeSpecification codeObject, C context);
    public virtual T Visit(SqlDdlTriggerDefinition codeObject, C context);
    public virtual T Visit(SqlDefaultValuesInsertMergeActionSource codeObject, C context);
    public virtual T Visit(SqlDefaultValuesInsertSource codeObject, C context);
    public virtual T Visit(SqlDeleteMergeAction codeObject, C context);
    public virtual T Visit(SqlDeleteSpecification codeObject, C context);
    public virtual T Visit(SqlDerivedTableExpression codeObject, C context);
    public virtual T Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject, C context);
    public virtual T Visit(SqlDmlSpecificationTableSource codeObject, C context);
    public virtual T Visit(SqlDmlTriggerDefinition codeObject, C context);
    public virtual T Visit(SqlDropExistingIndexOption codeObject, C context);
    public virtual T Visit(SqlEdgeConstraint codeObject, C context);
    public virtual T Visit(SqlExecuteArgument codeObject, C context);
    public virtual T Visit(SqlExecuteAsClause codeObject, C context);
    public virtual T Visit(SqlExistsBooleanExpression codeObject, C context);
    public virtual T Visit(SqlFillFactorIndexOption codeObject, C context);
    public virtual T Visit(SqlFilterClause codeObject, C context);
    public virtual T Visit(SqlForBrowseClause codeObject, C context);
    public virtual T Visit(SqlForeignKeyConstraint codeObject, C context);
    public virtual T Visit(SqlForXmlAutoClause codeObject, C context);
    public virtual T Visit(SqlForXmlClause codeObject, C context);
    public virtual T Visit(SqlForXmlDirective codeObject, C context);
    public virtual T Visit(SqlForXmlExplicitClause codeObject, C context);
    public virtual T Visit(SqlForXmlPathClause codeObject, C context);
    public virtual T Visit(SqlForXmlRawClause codeObject, C context);
    public virtual T Visit(SqlFromClause codeObject, C context);
    public virtual T Visit(SqlFullTextBooleanExpression codeObject, C context);
    public virtual T Visit(SqlFullTextColumn codeObject, C context);
    public virtual T Visit(SqlFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlGlobalScalarVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlGrandTotalGroupByItem codeObject, C context);
    public virtual T Visit(SqlGrandTotalGroupingSet codeObject, C context);
    public virtual T Visit(SqlGroupByClause codeObject, C context);
    public virtual T Visit(SqlGroupBySets codeObject, C context);
    public virtual T Visit(SqlGroupingSetItemsCollection codeObject, C context);
    public virtual T Visit(SqlHavingClause codeObject, C context);
    public virtual T Visit(SqlIdentifier codeObject, C context);
    public virtual T Visit(SqlIdentityFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlIgnoreDupKeyIndexOption codeObject, C context);
    public virtual T Visit(SqlInBooleanExpression codeObject, C context);
    public virtual T Visit(SqlInBooleanExpressionCollectionValue codeObject, C context);
    public virtual T Visit(SqlInBooleanExpressionQueryValue codeObject, C context);
    public virtual T Visit(SqlIndexedColumn codeObject, C context);
    public virtual T Visit(SqlIndexHint codeObject, C context);
    public virtual T Visit(SqlIndexOption codeObject, C context);
    public virtual T Visit(SqlInlineIndexConstraint codeObject, C context);
    public virtual T Visit(SqlInlineFunctionBodyDefinition codeObject, C context);
    public virtual T Visit(SqlInlineTableRelationalFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlInlineTableVariableDeclaration codeObject, C context);
    public virtual T Visit(SqlInsertMergeAction codeObject, C context);
    public virtual T Visit(SqlInsertSpecification codeObject, C context);
    public virtual T Visit(SqlIntoClause codeObject, C context);
    public virtual T Visit(SqlIsNullBooleanExpression codeObject, C context);
    public virtual T Visit(SqlJsonObjectArgument codeObject, C context);
    public virtual T Visit(SqlLargeDataStorageInformation codeObject, C context);
    public virtual T Visit(SqlLikeBooleanExpression codeObject, C context);
    public virtual T Visit(SqlLiteralExpression codeObject, C context);
    public virtual T Visit(SqlLoginPassword codeObject, C context);
    public virtual T Visit(SqlMaxDegreeOfParallelismIndexOption codeObject, C context);
    public virtual T Visit(SqlMergeActionClause codeObject, C context);
    public virtual T Visit(SqlMergeSpecification codeObject, C context);
    public virtual T Visit(SqlInsertSource codeObject, C context);
    public virtual T Visit(SqlModuleCalledOnNullInputOption codeObject, C context);
    public virtual T Visit(SqlModuleEncryptionOption codeObject, C context);
    public virtual T Visit(SqlModuleExecuteAsOption codeObject, C context);
    public virtual T Visit(SqlModuleInlineOption codeObject, C context);
    public virtual T Visit(SqlModuleNativeCompilationOption codeObject, C context);
    public virtual T Visit(SqlModuleOption codeObject, C context);
    public virtual T Visit(SqlModuleRecompileOption codeObject, C context);
    public virtual T Visit(SqlModuleReturnsNullOnNullInputOption codeObject, C context);
    public virtual T Visit(SqlModuleSchemaBindingOption codeObject, C context);
    public virtual T Visit(SqlModuleViewMetadataOption codeObject, C context);
    public virtual T Visit(SqlMultistatementFunctionBodyDefinition codeObject, C context);
    public virtual T Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlNotBooleanExpression codeObject, C context);
    public virtual T Visit(SqlNullQualifier codeObject, C context);
    public virtual T Visit(SqlQueryExpression codeObject, C context);
    public virtual T Visit(SqlScalarExpression codeObject, C context);
    public virtual T Visit(SqlTableExpression codeObject, C context);
    public virtual T Visit(SqlObjectIdentifier codeObject, C context);
    public virtual T Visit(SqlObjectReference codeObject, C context);
    public virtual T Visit(SqlOnlineIndexOption codeObject, C context);
    public virtual T Visit(SqlOptimizeForSequentialKeyIndexOption codeObject, C context);
    public virtual T Visit(SqlResumableIndexOption codeObject, C context);
    public virtual T Visit(SqlBucketCountIndexOption codeObject, C context);
    public virtual T Visit(SqlCompressionDelayIndexOption codeObject, C context);
    public virtual T Visit(SqlMaxDurationIndexOption codeObject, C context);
    public virtual T Visit(SqlOffsetFetchClause codeObject, C context);
    public virtual T Visit(SqlOrderByClause codeObject, C context);
    public virtual T Visit(SqlOrderByItem codeObject, C context);
    public virtual T Visit(SqlOutputClause codeObject, C context);
    public virtual T Visit(SqlOutputIntoClause codeObject, C context);
    public virtual T Visit(SqlPadIndexOption codeObject, C context);
    public virtual T Visit(SqlParameterDeclaration codeObject, C context);
    public virtual T Visit(SqlPivotClause codeObject, C context);
    public virtual T Visit(SqlPivotTableExpression codeObject, C context);
    public virtual T Visit(SqlPrimaryKeyConstraint codeObject, C context);
    public virtual T Visit(SqlStorageSpecification codeObject, C context);
    public virtual T Visit(SqlProcedureDefinition codeObject, C context);
    public virtual T Visit(SqlQualifiedJoinTableExpression codeObject, C context);
    public virtual T Visit(SqlQuerySpecification codeObject, C context);
    public virtual T Visit(SqlQueryWithClause codeObject, C context);
    public virtual T Visit(SqlRollupGroupByItem codeObject, C context);
    public virtual T Visit(SqlRowConstructorExpression codeObject, C context);
    public virtual T Visit(SqlScalarClrFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlScalarFunctionReturnType codeObject, C context);
    public virtual T Visit(SqlScalarRefExpression codeObject, C context);
    public virtual T Visit(SqlScalarRelationalFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlScalarSubQueryExpression codeObject, C context);
    public virtual T Visit(SqlScalarVariableAssignment codeObject, C context);
    public virtual T Visit(SqlScalarVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlScript codeObject, C context);
    public virtual T Visit(SqlSearchedCaseExpression codeObject, C context);
    public virtual T Visit(SqlSearchedWhenClause codeObject, C context);
    public virtual T Visit(SqlSelectClause codeObject, C context);
    public virtual T Visit(SqlSelectIntoClause codeObject, C context);
    public virtual T Visit(SqlSelectScalarExpression codeObject, C context);
    public virtual T Visit(SqlSelectSpecification codeObject, C context);
    public virtual T Visit(SqlSelectSpecificationInsertSource codeObject, C context);
    public virtual T Visit(SqlSelectStarExpression codeObject, C context);
    public virtual T Visit(SqlSelectVariableAssignmentExpression codeObject, C context);
    public virtual T Visit(SqlSetClause codeObject, C context);
    public virtual T Visit(SqlSimpleCaseExpression codeObject, C context);
    public virtual T Visit(SqlSimpleGroupByItem codeObject, C context);
    public virtual T Visit(SqlSimpleOrderByClause codeObject, C context);
    public virtual T Visit(SqlSimpleOrderByItem codeObject, C context);
    public virtual T Visit(SqlSimpleWhenClause codeObject, C context);
    public virtual T Visit(SqlSortedDataIndexOption codeObject, C context);
    public virtual T Visit(SqlSortedDataReorgIndexOption codeObject, C context);
    public virtual T Visit(SqlSortInTempDbIndexOption codeObject, C context);
    public virtual T Visit(SqlStatisticsIncrementalIndexOption codeObject, C context);
    public virtual T Visit(SqlStatisticsNoRecomputeIndexOption codeObject, C context);
    public virtual T Visit(SqlStatisticsOnlyIndexOption codeObject, C context);
    public virtual T Visit(SqlTableClrFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlTableConstructorExpression codeObject, C context);
    public virtual T Visit(SqlTableConstructorInsertSource codeObject, C context);
    public virtual T Visit(SqlTableDefinition codeObject, C context);
    public virtual T Visit(SqlTableFunctionReturnType codeObject, C context);
    public virtual T Visit(SqlTableHint codeObject, C context);
    public virtual T Visit(SqlTableRefExpression codeObject, C context);
    public virtual T Visit(SqlTableValuedFunctionRefExpression codeObject, C context);
    public virtual T Visit(SqlTableVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlTableUdtInstanceMethodExpression codeObject, C context);
    public virtual T Visit(SqlTargetTableExpression codeObject, C context);
    public virtual T Visit(SqlTemporalPeriodDefinition codeObject, C context);
    public virtual T Visit(SqlTopSpecification codeObject, C context);
    public virtual T Visit(SqlTriggerAction codeObject, C context);
    public virtual T Visit(SqlTriggerDefinition codeObject, C context);
    public virtual T Visit(SqlTriggerEvent codeObject, C context);
    public virtual T Visit(SqlUdtInstanceDataMemberExpression codeObject, C context);
    public virtual T Visit(SqlUdtInstanceMethodExpression codeObject, C context);
    public virtual T Visit(SqlUdtStaticDataMemberExpression codeObject, C context);
    public virtual T Visit(SqlUdtStaticMethodExpression codeObject, C context);
    public virtual T Visit(SqlUnaryScalarExpression codeObject, C context);
    public virtual T Visit(SqlUniqueConstraint codeObject, C context);
    public virtual T Visit(SqlUnpivotClause codeObject, C context);
    public virtual T Visit(SqlUnpivotTableExpression codeObject, C context);
    public virtual T Visit(SqlUnqualifiedJoinTableExpression codeObject, C context);
    public virtual T Visit(SqlUpdateBooleanExpression codeObject, C context);
    public virtual T Visit(SqlUpdateMergeAction codeObject, C context);
    public virtual T Visit(SqlUpdateSpecification codeObject, C context);
    public virtual T Visit(SqlUserDefinedScalarFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlValuesInsertMergeActionSource codeObject, C context);
    public virtual T Visit(SqlVariableColumnAssignment codeObject, C context);
    public virtual T Visit(SqlVariableDeclaration codeObject, C context);
    public virtual T Visit(SqlViewDefinition codeObject, C context);
    public virtual T Visit(SqlWindowClause codeObject, C context);
    public virtual T Visit(SqlWindowExpression codeObject, C context);
    public virtual T Visit(SqlWindowSpecification codeObject, C context);
    public virtual T Visit(SqlWhereClause codeObject, C context);
    public virtual T Visit(SqlXmlNamespacesDeclaration codeObject, C context);
    public virtual T Visit(SqlAlterFunctionStatement codeObject, C context);
    public virtual T Visit(SqlAlterLoginStatement codeObject, C context);
    public virtual T Visit(SqlAlterProcedureStatement codeObject, C context);
    public virtual T Visit(SqlAlterTriggerStatement codeObject, C context);
    public virtual T Visit(SqlAlterViewStatement codeObject, C context);
    public virtual T Visit(SqlBackupCertificateStatement codeObject, C context);
    public virtual T Visit(SqlBackupDatabaseStatement codeObject, C context);
    public virtual T Visit(SqlBackupLogStatement codeObject, C context);
    public virtual T Visit(SqlBackupMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlBackupServiceMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlBackupTableStatement codeObject, C context);
    public virtual T Visit(SqlBreakStatement codeObject, C context);
    public virtual T Visit(SqlCommentStatement codeObject, C context);
    public virtual T Visit(SqlCompoundStatement codeObject, C context);
    public virtual T Visit(SqlContinueStatement codeObject, C context);
    public virtual T Visit(SqlCreateFunctionStatement codeObject, C context);
    public virtual T Visit(SqlCreateIndexStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginFromAsymKeyStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginFromCertificateStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginFromWindowsStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginWithPasswordStatement codeObject, C context);
    public virtual T Visit(SqlCreateProcedureStatement codeObject, C context);
    public virtual T Visit(SqlCreateRoleStatement codeObject, C context);
    public virtual T Visit(SqlCreateSchemaStatement codeObject, C context);
    public virtual T Visit(SqlCreateSynonymStatement codeObject, C context);
    public virtual T Visit(SqlCreateTableStatement codeObject, C context);
    public virtual T Visit(SqlCreateTriggerStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserDefinedDataTypeStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserDefinedTableTypeStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserDefinedTypeStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromAsymKeyStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromCertificateStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromLoginStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromExternalProviderStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserWithoutLoginStatement codeObject, C context);
    public virtual T Visit(SqlCreateViewStatement codeObject, C context);
    public virtual T Visit(SqlCursorDeclareStatement codeObject, C context);
    public virtual T Visit(SqlDBCCStatement codeObject, C context);
    public virtual T Visit(SqlDeleteStatement codeObject, C context);
    public virtual T Visit(SqlDenyStatement codeObject, C context);
    public virtual T Visit(SqlDropAggregateStatement codeObject, C context);
    public virtual T Visit(SqlDropDatabaseStatement codeObject, C context);
    public virtual T Visit(SqlDropDefaultStatement codeObject, C context);
    public virtual T Visit(SqlDropFunctionStatement codeObject, C context);
    public virtual T Visit(SqlDropLoginStatement codeObject, C context);
    public virtual T Visit(SqlDropProcedureStatement codeObject, C context);
    public virtual T Visit(SqlDropRuleStatement codeObject, C context);
    public virtual T Visit(SqlDropSchemaStatement codeObject, C context);
    public virtual T Visit(SqlDropSecurityPolicyStatement codeObject, C context);
    public virtual T Visit(SqlDropSequenceStatement codeObject, C context);
    public virtual T Visit(SqlDropSynonymStatement codeObject, C context);
    public virtual T Visit(SqlDropTableStatement codeObject, C context);
    public virtual T Visit(SqlDropTriggerStatement codeObject, C context);
    public virtual T Visit(SqlDropTypeStatement codeObject, C context);
    public virtual T Visit(SqlDropUserStatement codeObject, C context);
    public virtual T Visit(SqlDropViewStatement codeObject, C context);
    public virtual T Visit(SqlExecuteModuleStatement codeObject, C context);
    public virtual T Visit(SqlExecuteStringStatement codeObject, C context);
    public virtual T Visit(SqlGrantStatement codeObject, C context);
    public virtual T Visit(SqlIfElseStatement codeObject, C context);
    public virtual T Visit(SqlInlineTableVariableDeclareStatement codeObject, C context);
    public virtual T Visit(SqlInsertStatement codeObject, C context);
    public virtual T Visit(SqlMergeStatement codeObject, C context);
    public virtual T Visit(SqlStatement codeObject, C context);
    public virtual T Visit(SqlRestoreDatabaseStatement codeObject, C context);
    public virtual T Visit(SqlRestoreInformationStatement codeObject, C context);
    public virtual T Visit(SqlRestoreLogStatement codeObject, C context);
    public virtual T Visit(SqlRestoreMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlRestoreServiceMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlRestoreTableStatement codeObject, C context);
    public virtual T Visit(SqlReturnStatement codeObject, C context);
    public virtual T Visit(SqlRevokeStatement codeObject, C context);
    public virtual T Visit(SqlSelectStatement codeObject, C context);
    public virtual T Visit(SqlSetAssignmentStatement codeObject, C context);
    public virtual T Visit(SqlSetStatement codeObject, C context);
    public virtual T Visit(SqlTryCatchStatement codeObject, C context);
    public virtual T Visit(SqlUpdateStatement codeObject, C context);
    public virtual T Visit(SqlUseStatement codeObject, C context);
    public virtual T Visit(SqlVariableDeclareStatement codeObject, C context);
    public virtual T Visit(SqlWhileStatement codeObject, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectRecursiveContextVisitor`1 : object {
    private void VisitList(IEnumerable`1<TElem> codeObjects, C context);
    public virtual void Visit(SqlAggregateFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlAllAnyComparisonBooleanExpression codeObject, C context);
    public virtual void Visit(SqlAllowPageLocksIndexOption codeObject, C context);
    public virtual void Visit(SqlAllowRowLocksIndexOption codeObject, C context);
    public virtual void Visit(SqlAssignment codeObject, C context);
    public virtual void Visit(SqlAtTimeZoneExpression codeObject, C context);
    public virtual void Visit(SqlBatch codeObject, C context);
    public virtual void Visit(SqlBetweenBooleanExpression codeObject, C context);
    public virtual void Visit(SqlBinaryBooleanExpression codeObject, C context);
    public virtual void Visit(SqlBinaryFilterExpression codeObject, C context);
    public virtual void Visit(SqlBinaryQueryExpression codeObject, C context);
    public virtual void Visit(SqlBinaryScalarExpression codeObject, C context);
    public virtual void Visit(SqlBooleanExpression codeObject, C context);
    public virtual void Visit(SqlBooleanFilterExpression codeObject, C context);
    public virtual void Visit(SqlBuiltinScalarFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlCastExpression codeObject, C context);
    public virtual void Visit(SqlChangeTrackingContext codeObject, C context);
    public virtual void Visit(SqlCheckConstraint codeObject, C context);
    public virtual void Visit(SqlClrAssemblySpecifier codeObject, C context);
    public virtual void Visit(SqlClrClassSpecifier codeObject, C context);
    public virtual void Visit(SqlClrFunctionBodyDefinition codeObject, C context);
    public virtual void Visit(SqlClrMethodSpecifier codeObject, C context);
    public virtual void Visit(SqlCollateScalarExpression codeObject, C context);
    public virtual void Visit(SqlCollation codeObject, C context);
    public virtual void Visit(SqlColumnAssignment codeObject, C context);
    public virtual void Visit(SqlDefaultConstraint codeObject, C context);
    public virtual void Visit(SqlColumnDefinition codeObject, C context);
    public virtual void Visit(SqlColumnIdentity codeObject, C context);
    public virtual void Visit(SqlColumnRefExpression codeObject, C context);
    public virtual void Visit(SqlCommonTableExpression codeObject, C context);
    public virtual void Visit(SqlComparisonBooleanExpression codeObject, C context);
    public virtual void Visit(SqlCompressionPartitionRange codeObject, C context);
    public virtual void Visit(SqlComputedColumnDefinition codeObject, C context);
    public virtual void Visit(SqlConditionClause codeObject, C context);
    public virtual void Visit(SqlConstraint codeObject, C context);
    public virtual void Visit(SqlConvertExpression codeObject, C context);
    public virtual void Visit(SqlCreateUserOption codeObject, C context);
    public virtual void Visit(SqlCubeGroupByItem codeObject, C context);
    public virtual void Visit(SqlCursorOption codeObject, C context);
    public virtual void Visit(SqlCursorVariableAssignment codeObject, C context);
    public virtual void Visit(SqlCursorVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlDataCompressionIndexOption codeObject, C context);
    public virtual void Visit(SqlDataType codeObject, C context);
    public virtual void Visit(SqlDataTypeSpecification codeObject, C context);
    public virtual void Visit(SqlDdlTriggerDefinition codeObject, C context);
    public virtual void Visit(SqlDefaultValuesInsertMergeActionSource codeObject, C context);
    public virtual void Visit(SqlDefaultValuesInsertSource codeObject, C context);
    public virtual void Visit(SqlDeleteMergeAction codeObject, C context);
    public virtual void Visit(SqlDeleteSpecification codeObject, C context);
    public virtual void Visit(SqlDerivedTableExpression codeObject, C context);
    public virtual void Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject, C context);
    public virtual void Visit(SqlDmlSpecificationTableSource codeObject, C context);
    public virtual void Visit(SqlDmlTriggerDefinition codeObject, C context);
    public virtual void Visit(SqlDropExistingIndexOption codeObject, C context);
    public virtual void Visit(SqlEdgeConstraint codeObject, C context);
    public virtual void Visit(SqlExecuteArgument codeObject, C context);
    public virtual void Visit(SqlExecuteAsClause codeObject, C context);
    public virtual void Visit(SqlExistsBooleanExpression codeObject, C context);
    public virtual void Visit(SqlFillFactorIndexOption codeObject, C context);
    public virtual void Visit(SqlFilterClause codeObject, C context);
    public virtual void Visit(SqlForBrowseClause codeObject, C context);
    public virtual void Visit(SqlForeignKeyConstraint codeObject, C context);
    public virtual void Visit(SqlForXmlAutoClause codeObject, C context);
    public virtual void Visit(SqlForXmlClause codeObject, C context);
    public virtual void Visit(SqlForXmlDirective codeObject, C context);
    public virtual void Visit(SqlForXmlExplicitClause codeObject, C context);
    public virtual void Visit(SqlForXmlPathClause codeObject, C context);
    public virtual void Visit(SqlForXmlRawClause codeObject, C context);
    public virtual void Visit(SqlFromClause codeObject, C context);
    public virtual void Visit(SqlFullTextBooleanExpression codeObject, C context);
    public virtual void Visit(SqlFullTextColumn codeObject, C context);
    public virtual void Visit(SqlFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlGlobalScalarVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlGrandTotalGroupByItem codeObject, C context);
    public virtual void Visit(SqlGrandTotalGroupingSet codeObject, C context);
    public virtual void Visit(SqlGroupByClause codeObject, C context);
    public virtual void Visit(SqlGroupBySets codeObject, C context);
    public virtual void Visit(SqlGroupingSetItemsCollection codeObject, C context);
    public virtual void Visit(SqlHavingClause codeObject, C context);
    public virtual void Visit(SqlIdentifier codeObject, C context);
    public virtual void Visit(SqlIdentityFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlIgnoreDupKeyIndexOption codeObject, C context);
    public virtual void Visit(SqlInBooleanExpression codeObject, C context);
    public virtual void Visit(SqlInBooleanExpressionCollectionValue codeObject, C context);
    public virtual void Visit(SqlInBooleanExpressionQueryValue codeObject, C context);
    public virtual void Visit(SqlIndexedColumn codeObject, C context);
    public virtual void Visit(SqlIndexHint codeObject, C context);
    public virtual void Visit(SqlIndexOption codeObject, C context);
    public virtual void Visit(SqlInlineIndexConstraint codeObject, C context);
    public virtual void Visit(SqlInlineFunctionBodyDefinition codeObject, C context);
    public virtual void Visit(SqlInlineTableRelationalFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlInlineTableVariableDeclaration codeObject, C context);
    public virtual void Visit(SqlInsertMergeAction codeObject, C context);
    public virtual void Visit(SqlInsertSpecification codeObject, C context);
    public virtual void Visit(SqlIntoClause codeObject, C context);
    public virtual void Visit(SqlIsNullBooleanExpression codeObject, C context);
    public virtual void Visit(SqlJsonObjectArgument codeObject, C context);
    public virtual void Visit(SqlLargeDataStorageInformation codeObject, C context);
    public virtual void Visit(SqlLikeBooleanExpression codeObject, C context);
    public virtual void Visit(SqlLiteralExpression codeObject, C context);
    public virtual void Visit(SqlLoginPassword codeObject, C context);
    public virtual void Visit(SqlMaxDegreeOfParallelismIndexOption codeObject, C context);
    public virtual void Visit(SqlMergeActionClause codeObject, C context);
    public virtual void Visit(SqlMergeSpecification codeObject, C context);
    public virtual void Visit(SqlInsertSource codeObject, C context);
    public virtual void Visit(SqlModuleCalledOnNullInputOption codeObject, C context);
    public virtual void Visit(SqlModuleEncryptionOption codeObject, C context);
    public virtual void Visit(SqlModuleExecuteAsOption codeObject, C context);
    public virtual void Visit(SqlModuleInlineOption codeObject, C context);
    public virtual void Visit(SqlModuleNativeCompilationOption codeObject, C context);
    public virtual void Visit(SqlModuleOption codeObject, C context);
    public virtual void Visit(SqlModuleRecompileOption codeObject, C context);
    public virtual void Visit(SqlModuleReturnsNullOnNullInputOption codeObject, C context);
    public virtual void Visit(SqlModuleSchemaBindingOption codeObject, C context);
    public virtual void Visit(SqlModuleViewMetadataOption codeObject, C context);
    public virtual void Visit(SqlMultistatementFunctionBodyDefinition codeObject, C context);
    public virtual void Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlNotBooleanExpression codeObject, C context);
    public virtual void Visit(SqlNullQualifier codeObject, C context);
    public virtual void Visit(SqlQueryExpression codeObject, C context);
    public virtual void Visit(SqlScalarExpression codeObject, C context);
    public virtual void Visit(SqlTableExpression codeObject, C context);
    public virtual void Visit(SqlObjectIdentifier codeObject, C context);
    public virtual void Visit(SqlObjectReference codeObject, C context);
    public virtual void Visit(SqlOnlineIndexOption codeObject, C context);
    public virtual void Visit(SqlOptimizeForSequentialKeyIndexOption codeObject, C context);
    public virtual void Visit(SqlResumableIndexOption codeObject, C context);
    public virtual void Visit(SqlBucketCountIndexOption codeObject, C context);
    public virtual void Visit(SqlCompressionDelayIndexOption codeObject, C context);
    public virtual void Visit(SqlMaxDurationIndexOption codeObject, C context);
    public virtual void Visit(SqlOffsetFetchClause codeObject, C context);
    public virtual void Visit(SqlOrderByClause codeObject, C context);
    public virtual void Visit(SqlOrderByItem codeObject, C context);
    public virtual void Visit(SqlOutputClause codeObject, C context);
    public virtual void Visit(SqlOutputIntoClause codeObject, C context);
    public virtual void Visit(SqlPadIndexOption codeObject, C context);
    public virtual void Visit(SqlParameterDeclaration codeObject, C context);
    public virtual void Visit(SqlPivotClause codeObject, C context);
    public virtual void Visit(SqlPivotTableExpression codeObject, C context);
    public virtual void Visit(SqlPrimaryKeyConstraint codeObject, C context);
    public virtual void Visit(SqlStorageSpecification codeObject, C context);
    public virtual void Visit(SqlProcedureDefinition codeObject, C context);
    public virtual void Visit(SqlQualifiedJoinTableExpression codeObject, C context);
    public virtual void Visit(SqlQuerySpecification codeObject, C context);
    public virtual void Visit(SqlQueryWithClause codeObject, C context);
    public virtual void Visit(SqlRollupGroupByItem codeObject, C context);
    public virtual void Visit(SqlRowConstructorExpression codeObject, C context);
    public virtual void Visit(SqlScalarClrFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlScalarFunctionReturnType codeObject, C context);
    public virtual void Visit(SqlScalarRefExpression codeObject, C context);
    public virtual void Visit(SqlScalarRelationalFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlScalarSubQueryExpression codeObject, C context);
    public virtual void Visit(SqlScalarVariableAssignment codeObject, C context);
    public virtual void Visit(SqlScalarVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlScript codeObject, C context);
    public virtual void Visit(SqlSearchedCaseExpression codeObject, C context);
    public virtual void Visit(SqlSearchedWhenClause codeObject, C context);
    public virtual void Visit(SqlSelectClause codeObject, C context);
    public virtual void Visit(SqlSelectIntoClause codeObject, C context);
    public virtual void Visit(SqlSelectScalarExpression codeObject, C context);
    public virtual void Visit(SqlSelectSpecification codeObject, C context);
    public virtual void Visit(SqlSelectSpecificationInsertSource codeObject, C context);
    public virtual void Visit(SqlSelectStarExpression codeObject, C context);
    public virtual void Visit(SqlSelectVariableAssignmentExpression codeObject, C context);
    public virtual void Visit(SqlSetClause codeObject, C context);
    public virtual void Visit(SqlSimpleCaseExpression codeObject, C context);
    public virtual void Visit(SqlSimpleGroupByItem codeObject, C context);
    public virtual void Visit(SqlSimpleOrderByClause codeObject, C context);
    public virtual void Visit(SqlSimpleOrderByItem codeObject, C context);
    public virtual void Visit(SqlSimpleWhenClause codeObject, C context);
    public virtual void Visit(SqlSortedDataIndexOption codeObject, C context);
    public virtual void Visit(SqlSortedDataReorgIndexOption codeObject, C context);
    public virtual void Visit(SqlSortInTempDbIndexOption codeObject, C context);
    public virtual void Visit(SqlStatisticsIncrementalIndexOption codeObject, C context);
    public virtual void Visit(SqlStatisticsNoRecomputeIndexOption codeObject, C context);
    public virtual void Visit(SqlStatisticsOnlyIndexOption codeObject, C context);
    public virtual void Visit(SqlTableClrFunctionDefinition codeObject, C context);
    public virtual void Visit(SqlTableConstructorExpression codeObject, C context);
    public virtual void Visit(SqlTableConstructorInsertSource codeObject, C context);
    public virtual void Visit(SqlTableDefinition codeObject, C context);
    public virtual void Visit(SqlTableFunctionReturnType codeObject, C context);
    public virtual void Visit(SqlTableHint codeObject, C context);
    public virtual void Visit(SqlTableRefExpression codeObject, C context);
    public virtual void Visit(SqlTableValuedFunctionRefExpression codeObject, C context);
    public virtual void Visit(SqlTableVariableRefExpression codeObject, C context);
    public virtual void Visit(SqlTableUdtInstanceMethodExpression codeObject, C context);
    public virtual void Visit(SqlTargetTableExpression codeObject, C context);
    public virtual void Visit(SqlTemporalPeriodDefinition codeObject, C context);
    public virtual void Visit(SqlTopSpecification codeObject, C context);
    public virtual void Visit(SqlTriggerAction codeObject, C context);
    public virtual void Visit(SqlTriggerDefinition codeObject, C context);
    public virtual void Visit(SqlTriggerEvent codeObject, C context);
    public virtual void Visit(SqlUdtInstanceDataMemberExpression codeObject, C context);
    public virtual void Visit(SqlUdtInstanceMethodExpression codeObject, C context);
    public virtual void Visit(SqlUdtStaticDataMemberExpression codeObject, C context);
    public virtual void Visit(SqlUdtStaticMethodExpression codeObject, C context);
    public virtual void Visit(SqlUnaryScalarExpression codeObject, C context);
    public virtual void Visit(SqlUniqueConstraint codeObject, C context);
    public virtual void Visit(SqlUnpivotClause codeObject, C context);
    public virtual void Visit(SqlUnpivotTableExpression codeObject, C context);
    public virtual void Visit(SqlUnqualifiedJoinTableExpression codeObject, C context);
    public virtual void Visit(SqlUpdateBooleanExpression codeObject, C context);
    public virtual void Visit(SqlUpdateMergeAction codeObject, C context);
    public virtual void Visit(SqlUpdateSpecification codeObject, C context);
    public virtual void Visit(SqlUserDefinedScalarFunctionCallExpression codeObject, C context);
    public virtual void Visit(SqlValuesInsertMergeActionSource codeObject, C context);
    public virtual void Visit(SqlVariableColumnAssignment codeObject, C context);
    public virtual void Visit(SqlVariableDeclaration codeObject, C context);
    public virtual void Visit(SqlViewDefinition codeObject, C context);
    public virtual void Visit(SqlWindowClause codeObject, C context);
    public virtual void Visit(SqlWindowExpression codeObject, C context);
    public virtual void Visit(SqlWindowSpecification codeObject, C context);
    public virtual void Visit(SqlWhereClause codeObject, C context);
    public virtual void Visit(SqlXmlNamespacesDeclaration codeObject, C context);
    public virtual void Visit(SqlAlterFunctionStatement codeObject, C context);
    public virtual void Visit(SqlAlterLoginStatement codeObject, C context);
    public virtual void Visit(SqlAlterProcedureStatement codeObject, C context);
    public virtual void Visit(SqlAlterTriggerStatement codeObject, C context);
    public virtual void Visit(SqlAlterViewStatement codeObject, C context);
    public virtual void Visit(SqlBackupCertificateStatement codeObject, C context);
    public virtual void Visit(SqlBackupDatabaseStatement codeObject, C context);
    public virtual void Visit(SqlBackupLogStatement codeObject, C context);
    public virtual void Visit(SqlBackupMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlBackupServiceMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlBackupTableStatement codeObject, C context);
    public virtual void Visit(SqlBreakStatement codeObject, C context);
    public virtual void Visit(SqlCommentStatement codeObject, C context);
    public virtual void Visit(SqlCompoundStatement codeObject, C context);
    public virtual void Visit(SqlContinueStatement codeObject, C context);
    public virtual void Visit(SqlCreateFunctionStatement codeObject, C context);
    public virtual void Visit(SqlCreateIndexStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginFromAsymKeyStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginFromCertificateStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginFromWindowsStatement codeObject, C context);
    public virtual void Visit(SqlCreateLoginWithPasswordStatement codeObject, C context);
    public virtual void Visit(SqlCreateProcedureStatement codeObject, C context);
    public virtual void Visit(SqlCreateRoleStatement codeObject, C context);
    public virtual void Visit(SqlCreateSchemaStatement codeObject, C context);
    public virtual void Visit(SqlCreateSynonymStatement codeObject, C context);
    public virtual void Visit(SqlCreateTableStatement codeObject, C context);
    public virtual void Visit(SqlCreateTriggerStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserDefinedDataTypeStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserDefinedTableTypeStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserDefinedTypeStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromAsymKeyStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromCertificateStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromLoginStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserFromExternalProviderStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserStatement codeObject, C context);
    public virtual void Visit(SqlCreateUserWithoutLoginStatement codeObject, C context);
    public virtual void Visit(SqlCreateViewStatement codeObject, C context);
    public virtual void Visit(SqlCursorDeclareStatement codeObject, C context);
    public virtual void Visit(SqlDBCCStatement codeObject, C context);
    public virtual void Visit(SqlDeleteStatement codeObject, C context);
    public virtual void Visit(SqlDenyStatement codeObject, C context);
    public virtual void Visit(SqlDropAggregateStatement codeObject, C context);
    public virtual void Visit(SqlDropDatabaseStatement codeObject, C context);
    public virtual void Visit(SqlDropDefaultStatement codeObject, C context);
    public virtual void Visit(SqlDropFunctionStatement codeObject, C context);
    public virtual void Visit(SqlDropLoginStatement codeObject, C context);
    public virtual void Visit(SqlDropProcedureStatement codeObject, C context);
    public virtual void Visit(SqlDropRuleStatement codeObject, C context);
    public virtual void Visit(SqlDropSchemaStatement codeObject, C context);
    public virtual void Visit(SqlDropSecurityPolicyStatement codeObject, C context);
    public virtual void Visit(SqlDropSequenceStatement codeObject, C context);
    public virtual void Visit(SqlDropSynonymStatement codeObject, C context);
    public virtual void Visit(SqlDropTableStatement codeObject, C context);
    public virtual void Visit(SqlDropTriggerStatement codeObject, C context);
    public virtual void Visit(SqlDropTypeStatement codeObject, C context);
    public virtual void Visit(SqlDropUserStatement codeObject, C context);
    public virtual void Visit(SqlDropViewStatement codeObject, C context);
    public virtual void Visit(SqlExecuteModuleStatement codeObject, C context);
    public virtual void Visit(SqlExecuteStringStatement codeObject, C context);
    public virtual void Visit(SqlGrantStatement codeObject, C context);
    public virtual void Visit(SqlIfElseStatement codeObject, C context);
    public virtual void Visit(SqlInlineTableVariableDeclareStatement codeObject, C context);
    public virtual void Visit(SqlInsertStatement codeObject, C context);
    public virtual void Visit(SqlMergeStatement codeObject, C context);
    public virtual void Visit(SqlStatement codeObject, C context);
    public virtual void Visit(SqlRestoreDatabaseStatement codeObject, C context);
    public virtual void Visit(SqlRestoreInformationStatement codeObject, C context);
    public virtual void Visit(SqlRestoreLogStatement codeObject, C context);
    public virtual void Visit(SqlRestoreMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlRestoreServiceMasterKeyStatement codeObject, C context);
    public virtual void Visit(SqlRestoreTableStatement codeObject, C context);
    public virtual void Visit(SqlReturnStatement codeObject, C context);
    public virtual void Visit(SqlRevokeStatement codeObject, C context);
    public virtual void Visit(SqlSelectStatement codeObject, C context);
    public virtual void Visit(SqlSetAssignmentStatement codeObject, C context);
    public virtual void Visit(SqlSetStatement codeObject, C context);
    public virtual void Visit(SqlTryCatchStatement codeObject, C context);
    public virtual void Visit(SqlUpdateStatement codeObject, C context);
    public virtual void Visit(SqlUseStatement codeObject, C context);
    public virtual void Visit(SqlVariableDeclareStatement codeObject, C context);
    public virtual void Visit(SqlWhileStatement codeObject, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectRecursiveContextVisitor`2 : object {
    private void VisitList(IEnumerable`1<TElem> codeObjects, C context);
    public virtual T Visit(SqlAggregateFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlAllAnyComparisonBooleanExpression codeObject, C context);
    public virtual T Visit(SqlAllowPageLocksIndexOption codeObject, C context);
    public virtual T Visit(SqlAllowRowLocksIndexOption codeObject, C context);
    public virtual T Visit(SqlAssignment codeObject, C context);
    public virtual T Visit(SqlAtTimeZoneExpression codeObject, C context);
    public virtual T Visit(SqlBatch codeObject, C context);
    public virtual T Visit(SqlBetweenBooleanExpression codeObject, C context);
    public virtual T Visit(SqlBinaryBooleanExpression codeObject, C context);
    public virtual T Visit(SqlBinaryFilterExpression codeObject, C context);
    public virtual T Visit(SqlBinaryQueryExpression codeObject, C context);
    public virtual T Visit(SqlBinaryScalarExpression codeObject, C context);
    public virtual T Visit(SqlBooleanExpression codeObject, C context);
    public virtual T Visit(SqlBooleanFilterExpression codeObject, C context);
    public virtual T Visit(SqlBuiltinScalarFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlCastExpression codeObject, C context);
    public virtual T Visit(SqlChangeTrackingContext codeObject, C context);
    public virtual T Visit(SqlCheckConstraint codeObject, C context);
    public virtual T Visit(SqlClrAssemblySpecifier codeObject, C context);
    public virtual T Visit(SqlClrClassSpecifier codeObject, C context);
    public virtual T Visit(SqlClrFunctionBodyDefinition codeObject, C context);
    public virtual T Visit(SqlClrMethodSpecifier codeObject, C context);
    public virtual T Visit(SqlCollateScalarExpression codeObject, C context);
    public virtual T Visit(SqlCollation codeObject, C context);
    public virtual T Visit(SqlColumnAssignment codeObject, C context);
    public virtual T Visit(SqlDefaultConstraint codeObject, C context);
    public virtual T Visit(SqlColumnDefinition codeObject, C context);
    public virtual T Visit(SqlColumnIdentity codeObject, C context);
    public virtual T Visit(SqlColumnRefExpression codeObject, C context);
    public virtual T Visit(SqlCommonTableExpression codeObject, C context);
    public virtual T Visit(SqlComparisonBooleanExpression codeObject, C context);
    public virtual T Visit(SqlCompressionPartitionRange codeObject, C context);
    public virtual T Visit(SqlComputedColumnDefinition codeObject, C context);
    public virtual T Visit(SqlConditionClause codeObject, C context);
    public virtual T Visit(SqlConstraint codeObject, C context);
    public virtual T Visit(SqlConvertExpression codeObject, C context);
    public virtual T Visit(SqlCreateUserOption codeObject, C context);
    public virtual T Visit(SqlCubeGroupByItem codeObject, C context);
    public virtual T Visit(SqlCursorOption codeObject, C context);
    public virtual T Visit(SqlCursorVariableAssignment codeObject, C context);
    public virtual T Visit(SqlCursorVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlDataCompressionIndexOption codeObject, C context);
    public virtual T Visit(SqlDataType codeObject, C context);
    public virtual T Visit(SqlDataTypeSpecification codeObject, C context);
    public virtual T Visit(SqlDdlTriggerDefinition codeObject, C context);
    public virtual T Visit(SqlDefaultValuesInsertMergeActionSource codeObject, C context);
    public virtual T Visit(SqlDefaultValuesInsertSource codeObject, C context);
    public virtual T Visit(SqlDeleteMergeAction codeObject, C context);
    public virtual T Visit(SqlDeleteSpecification codeObject, C context);
    public virtual T Visit(SqlDerivedTableExpression codeObject, C context);
    public virtual T Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject, C context);
    public virtual T Visit(SqlDmlSpecificationTableSource codeObject, C context);
    public virtual T Visit(SqlDmlTriggerDefinition codeObject, C context);
    public virtual T Visit(SqlDropExistingIndexOption codeObject, C context);
    public virtual T Visit(SqlEdgeConstraint codeObject, C context);
    public virtual T Visit(SqlExecuteArgument codeObject, C context);
    public virtual T Visit(SqlExecuteAsClause codeObject, C context);
    public virtual T Visit(SqlExistsBooleanExpression codeObject, C context);
    public virtual T Visit(SqlFillFactorIndexOption codeObject, C context);
    public virtual T Visit(SqlFilterClause codeObject, C context);
    public virtual T Visit(SqlForBrowseClause codeObject, C context);
    public virtual T Visit(SqlForeignKeyConstraint codeObject, C context);
    public virtual T Visit(SqlForXmlAutoClause codeObject, C context);
    public virtual T Visit(SqlForXmlClause codeObject, C context);
    public virtual T Visit(SqlForXmlDirective codeObject, C context);
    public virtual T Visit(SqlForXmlExplicitClause codeObject, C context);
    public virtual T Visit(SqlForXmlPathClause codeObject, C context);
    public virtual T Visit(SqlForXmlRawClause codeObject, C context);
    public virtual T Visit(SqlFromClause codeObject, C context);
    public virtual T Visit(SqlFullTextBooleanExpression codeObject, C context);
    public virtual T Visit(SqlFullTextColumn codeObject, C context);
    public virtual T Visit(SqlFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlGlobalScalarVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlGrandTotalGroupByItem codeObject, C context);
    public virtual T Visit(SqlGrandTotalGroupingSet codeObject, C context);
    public virtual T Visit(SqlGroupByClause codeObject, C context);
    public virtual T Visit(SqlGroupBySets codeObject, C context);
    public virtual T Visit(SqlGroupingSetItemsCollection codeObject, C context);
    public virtual T Visit(SqlHavingClause codeObject, C context);
    public virtual T Visit(SqlIdentifier codeObject, C context);
    public virtual T Visit(SqlIdentityFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlIgnoreDupKeyIndexOption codeObject, C context);
    public virtual T Visit(SqlInBooleanExpression codeObject, C context);
    public virtual T Visit(SqlInBooleanExpressionCollectionValue codeObject, C context);
    public virtual T Visit(SqlInBooleanExpressionQueryValue codeObject, C context);
    public virtual T Visit(SqlIndexedColumn codeObject, C context);
    public virtual T Visit(SqlIndexHint codeObject, C context);
    public virtual T Visit(SqlIndexOption codeObject, C context);
    public virtual T Visit(SqlInlineIndexConstraint codeObject, C context);
    public virtual T Visit(SqlInlineFunctionBodyDefinition codeObject, C context);
    public virtual T Visit(SqlInlineTableRelationalFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlInlineTableVariableDeclaration codeObject, C context);
    public virtual T Visit(SqlInsertMergeAction codeObject, C context);
    public virtual T Visit(SqlInsertSpecification codeObject, C context);
    public virtual T Visit(SqlIntoClause codeObject, C context);
    public virtual T Visit(SqlIsNullBooleanExpression codeObject, C context);
    public virtual T Visit(SqlJsonObjectArgument codeObject, C context);
    public virtual T Visit(SqlLargeDataStorageInformation codeObject, C context);
    public virtual T Visit(SqlLikeBooleanExpression codeObject, C context);
    public virtual T Visit(SqlLiteralExpression codeObject, C context);
    public virtual T Visit(SqlLoginPassword codeObject, C context);
    public virtual T Visit(SqlMaxDegreeOfParallelismIndexOption codeObject, C context);
    public virtual T Visit(SqlMergeActionClause codeObject, C context);
    public virtual T Visit(SqlMergeSpecification codeObject, C context);
    public virtual T Visit(SqlInsertSource codeObject, C context);
    public virtual T Visit(SqlModuleCalledOnNullInputOption codeObject, C context);
    public virtual T Visit(SqlModuleEncryptionOption codeObject, C context);
    public virtual T Visit(SqlModuleExecuteAsOption codeObject, C context);
    public virtual T Visit(SqlModuleInlineOption codeObject, C context);
    public virtual T Visit(SqlModuleNativeCompilationOption codeObject, C context);
    public virtual T Visit(SqlModuleOption codeObject, C context);
    public virtual T Visit(SqlModuleRecompileOption codeObject, C context);
    public virtual T Visit(SqlModuleReturnsNullOnNullInputOption codeObject, C context);
    public virtual T Visit(SqlModuleSchemaBindingOption codeObject, C context);
    public virtual T Visit(SqlModuleViewMetadataOption codeObject, C context);
    public virtual T Visit(SqlMultistatementFunctionBodyDefinition codeObject, C context);
    public virtual T Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlNotBooleanExpression codeObject, C context);
    public virtual T Visit(SqlNullQualifier codeObject, C context);
    public virtual T Visit(SqlQueryExpression codeObject, C context);
    public virtual T Visit(SqlScalarExpression codeObject, C context);
    public virtual T Visit(SqlTableExpression codeObject, C context);
    public virtual T Visit(SqlObjectIdentifier codeObject, C context);
    public virtual T Visit(SqlObjectReference codeObject, C context);
    public virtual T Visit(SqlOnlineIndexOption codeObject, C context);
    public virtual T Visit(SqlOptimizeForSequentialKeyIndexOption codeObject, C context);
    public virtual T Visit(SqlResumableIndexOption codeObject, C context);
    public virtual T Visit(SqlBucketCountIndexOption codeObject, C context);
    public virtual T Visit(SqlCompressionDelayIndexOption codeObject, C context);
    public virtual T Visit(SqlMaxDurationIndexOption codeObject, C context);
    public virtual T Visit(SqlOffsetFetchClause codeObject, C context);
    public virtual T Visit(SqlOrderByClause codeObject, C context);
    public virtual T Visit(SqlOrderByItem codeObject, C context);
    public virtual T Visit(SqlOutputClause codeObject, C context);
    public virtual T Visit(SqlOutputIntoClause codeObject, C context);
    public virtual T Visit(SqlPadIndexOption codeObject, C context);
    public virtual T Visit(SqlParameterDeclaration codeObject, C context);
    public virtual T Visit(SqlPivotClause codeObject, C context);
    public virtual T Visit(SqlPivotTableExpression codeObject, C context);
    public virtual T Visit(SqlPrimaryKeyConstraint codeObject, C context);
    public virtual T Visit(SqlStorageSpecification codeObject, C context);
    public virtual T Visit(SqlProcedureDefinition codeObject, C context);
    public virtual T Visit(SqlQualifiedJoinTableExpression codeObject, C context);
    public virtual T Visit(SqlQuerySpecification codeObject, C context);
    public virtual T Visit(SqlQueryWithClause codeObject, C context);
    public virtual T Visit(SqlRollupGroupByItem codeObject, C context);
    public virtual T Visit(SqlRowConstructorExpression codeObject, C context);
    public virtual T Visit(SqlScalarClrFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlScalarFunctionReturnType codeObject, C context);
    public virtual T Visit(SqlScalarRefExpression codeObject, C context);
    public virtual T Visit(SqlScalarRelationalFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlScalarSubQueryExpression codeObject, C context);
    public virtual T Visit(SqlScalarVariableAssignment codeObject, C context);
    public virtual T Visit(SqlScalarVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlScript codeObject, C context);
    public virtual T Visit(SqlSearchedCaseExpression codeObject, C context);
    public virtual T Visit(SqlSearchedWhenClause codeObject, C context);
    public virtual T Visit(SqlSelectClause codeObject, C context);
    public virtual T Visit(SqlSelectIntoClause codeObject, C context);
    public virtual T Visit(SqlSelectScalarExpression codeObject, C context);
    public virtual T Visit(SqlSelectSpecification codeObject, C context);
    public virtual T Visit(SqlSelectSpecificationInsertSource codeObject, C context);
    public virtual T Visit(SqlSelectStarExpression codeObject, C context);
    public virtual T Visit(SqlSelectVariableAssignmentExpression codeObject, C context);
    public virtual T Visit(SqlSetClause codeObject, C context);
    public virtual T Visit(SqlSimpleCaseExpression codeObject, C context);
    public virtual T Visit(SqlSimpleGroupByItem codeObject, C context);
    public virtual T Visit(SqlSimpleOrderByClause codeObject, C context);
    public virtual T Visit(SqlSimpleOrderByItem codeObject, C context);
    public virtual T Visit(SqlSimpleWhenClause codeObject, C context);
    public virtual T Visit(SqlSortedDataIndexOption codeObject, C context);
    public virtual T Visit(SqlSortedDataReorgIndexOption codeObject, C context);
    public virtual T Visit(SqlSortInTempDbIndexOption codeObject, C context);
    public virtual T Visit(SqlStatisticsIncrementalIndexOption codeObject, C context);
    public virtual T Visit(SqlStatisticsNoRecomputeIndexOption codeObject, C context);
    public virtual T Visit(SqlStatisticsOnlyIndexOption codeObject, C context);
    public virtual T Visit(SqlTableClrFunctionDefinition codeObject, C context);
    public virtual T Visit(SqlTableConstructorExpression codeObject, C context);
    public virtual T Visit(SqlTableConstructorInsertSource codeObject, C context);
    public virtual T Visit(SqlTableDefinition codeObject, C context);
    public virtual T Visit(SqlTableFunctionReturnType codeObject, C context);
    public virtual T Visit(SqlTableHint codeObject, C context);
    public virtual T Visit(SqlTableRefExpression codeObject, C context);
    public virtual T Visit(SqlTableValuedFunctionRefExpression codeObject, C context);
    public virtual T Visit(SqlTableVariableRefExpression codeObject, C context);
    public virtual T Visit(SqlTableUdtInstanceMethodExpression codeObject, C context);
    public virtual T Visit(SqlTargetTableExpression codeObject, C context);
    public virtual T Visit(SqlTemporalPeriodDefinition codeObject, C context);
    public virtual T Visit(SqlTopSpecification codeObject, C context);
    public virtual T Visit(SqlTriggerAction codeObject, C context);
    public virtual T Visit(SqlTriggerDefinition codeObject, C context);
    public virtual T Visit(SqlTriggerEvent codeObject, C context);
    public virtual T Visit(SqlUdtInstanceDataMemberExpression codeObject, C context);
    public virtual T Visit(SqlUdtInstanceMethodExpression codeObject, C context);
    public virtual T Visit(SqlUdtStaticDataMemberExpression codeObject, C context);
    public virtual T Visit(SqlUdtStaticMethodExpression codeObject, C context);
    public virtual T Visit(SqlUnaryScalarExpression codeObject, C context);
    public virtual T Visit(SqlUniqueConstraint codeObject, C context);
    public virtual T Visit(SqlUnpivotClause codeObject, C context);
    public virtual T Visit(SqlUnpivotTableExpression codeObject, C context);
    public virtual T Visit(SqlUnqualifiedJoinTableExpression codeObject, C context);
    public virtual T Visit(SqlUpdateBooleanExpression codeObject, C context);
    public virtual T Visit(SqlUpdateMergeAction codeObject, C context);
    public virtual T Visit(SqlUpdateSpecification codeObject, C context);
    public virtual T Visit(SqlUserDefinedScalarFunctionCallExpression codeObject, C context);
    public virtual T Visit(SqlValuesInsertMergeActionSource codeObject, C context);
    public virtual T Visit(SqlVariableColumnAssignment codeObject, C context);
    public virtual T Visit(SqlVariableDeclaration codeObject, C context);
    public virtual T Visit(SqlViewDefinition codeObject, C context);
    public virtual T Visit(SqlWindowClause codeObject, C context);
    public virtual T Visit(SqlWindowExpression codeObject, C context);
    public virtual T Visit(SqlWindowSpecification codeObject, C context);
    public virtual T Visit(SqlWhereClause codeObject, C context);
    public virtual T Visit(SqlXmlNamespacesDeclaration codeObject, C context);
    public virtual T Visit(SqlAlterFunctionStatement codeObject, C context);
    public virtual T Visit(SqlAlterLoginStatement codeObject, C context);
    public virtual T Visit(SqlAlterProcedureStatement codeObject, C context);
    public virtual T Visit(SqlAlterTriggerStatement codeObject, C context);
    public virtual T Visit(SqlAlterViewStatement codeObject, C context);
    public virtual T Visit(SqlBackupCertificateStatement codeObject, C context);
    public virtual T Visit(SqlBackupDatabaseStatement codeObject, C context);
    public virtual T Visit(SqlBackupLogStatement codeObject, C context);
    public virtual T Visit(SqlBackupMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlBackupServiceMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlBackupTableStatement codeObject, C context);
    public virtual T Visit(SqlBreakStatement codeObject, C context);
    public virtual T Visit(SqlCommentStatement codeObject, C context);
    public virtual T Visit(SqlCompoundStatement codeObject, C context);
    public virtual T Visit(SqlContinueStatement codeObject, C context);
    public virtual T Visit(SqlCreateFunctionStatement codeObject, C context);
    public virtual T Visit(SqlCreateIndexStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginFromAsymKeyStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginFromCertificateStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginFromWindowsStatement codeObject, C context);
    public virtual T Visit(SqlCreateLoginWithPasswordStatement codeObject, C context);
    public virtual T Visit(SqlCreateProcedureStatement codeObject, C context);
    public virtual T Visit(SqlCreateRoleStatement codeObject, C context);
    public virtual T Visit(SqlCreateSchemaStatement codeObject, C context);
    public virtual T Visit(SqlCreateSynonymStatement codeObject, C context);
    public virtual T Visit(SqlCreateTableStatement codeObject, C context);
    public virtual T Visit(SqlCreateTriggerStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserDefinedDataTypeStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserDefinedTableTypeStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserDefinedTypeStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromAsymKeyStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromCertificateStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromLoginStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserFromExternalProviderStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserStatement codeObject, C context);
    public virtual T Visit(SqlCreateUserWithoutLoginStatement codeObject, C context);
    public virtual T Visit(SqlCreateViewStatement codeObject, C context);
    public virtual T Visit(SqlCursorDeclareStatement codeObject, C context);
    public virtual T Visit(SqlDBCCStatement codeObject, C context);
    public virtual T Visit(SqlDeleteStatement codeObject, C context);
    public virtual T Visit(SqlDenyStatement codeObject, C context);
    public virtual T Visit(SqlDropAggregateStatement codeObject, C context);
    public virtual T Visit(SqlDropDatabaseStatement codeObject, C context);
    public virtual T Visit(SqlDropDefaultStatement codeObject, C context);
    public virtual T Visit(SqlDropFunctionStatement codeObject, C context);
    public virtual T Visit(SqlDropLoginStatement codeObject, C context);
    public virtual T Visit(SqlDropProcedureStatement codeObject, C context);
    public virtual T Visit(SqlDropRuleStatement codeObject, C context);
    public virtual T Visit(SqlDropSchemaStatement codeObject, C context);
    public virtual T Visit(SqlDropSecurityPolicyStatement codeObject, C context);
    public virtual T Visit(SqlDropSequenceStatement codeObject, C context);
    public virtual T Visit(SqlDropSynonymStatement codeObject, C context);
    public virtual T Visit(SqlDropTableStatement codeObject, C context);
    public virtual T Visit(SqlDropTriggerStatement codeObject, C context);
    public virtual T Visit(SqlDropTypeStatement codeObject, C context);
    public virtual T Visit(SqlDropUserStatement codeObject, C context);
    public virtual T Visit(SqlDropViewStatement codeObject, C context);
    public virtual T Visit(SqlExecuteModuleStatement codeObject, C context);
    public virtual T Visit(SqlExecuteStringStatement codeObject, C context);
    public virtual T Visit(SqlGrantStatement codeObject, C context);
    public virtual T Visit(SqlIfElseStatement codeObject, C context);
    public virtual T Visit(SqlInlineTableVariableDeclareStatement codeObject, C context);
    public virtual T Visit(SqlInsertStatement codeObject, C context);
    public virtual T Visit(SqlMergeStatement codeObject, C context);
    public virtual T Visit(SqlStatement codeObject, C context);
    public virtual T Visit(SqlRestoreDatabaseStatement codeObject, C context);
    public virtual T Visit(SqlRestoreInformationStatement codeObject, C context);
    public virtual T Visit(SqlRestoreLogStatement codeObject, C context);
    public virtual T Visit(SqlRestoreMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlRestoreServiceMasterKeyStatement codeObject, C context);
    public virtual T Visit(SqlRestoreTableStatement codeObject, C context);
    public virtual T Visit(SqlReturnStatement codeObject, C context);
    public virtual T Visit(SqlRevokeStatement codeObject, C context);
    public virtual T Visit(SqlSelectStatement codeObject, C context);
    public virtual T Visit(SqlSetAssignmentStatement codeObject, C context);
    public virtual T Visit(SqlSetStatement codeObject, C context);
    public virtual T Visit(SqlTryCatchStatement codeObject, C context);
    public virtual T Visit(SqlUpdateStatement codeObject, C context);
    public virtual T Visit(SqlUseStatement codeObject, C context);
    public virtual T Visit(SqlVariableDeclareStatement codeObject, C context);
    public virtual T Visit(SqlWhileStatement codeObject, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectRecursiveVisitor : object {
    private void VisitList(IEnumerable`1<TElem> codeObjects);
    public virtual void Visit(SqlAggregateFunctionCallExpression codeObject);
    public virtual void Visit(SqlAllAnyComparisonBooleanExpression codeObject);
    public virtual void Visit(SqlAllowPageLocksIndexOption codeObject);
    public virtual void Visit(SqlAllowRowLocksIndexOption codeObject);
    public virtual void Visit(SqlAssignment codeObject);
    public virtual void Visit(SqlAtTimeZoneExpression codeObject);
    public virtual void Visit(SqlBatch codeObject);
    public virtual void Visit(SqlBetweenBooleanExpression codeObject);
    public virtual void Visit(SqlBinaryBooleanExpression codeObject);
    public virtual void Visit(SqlBinaryFilterExpression codeObject);
    public virtual void Visit(SqlBinaryQueryExpression codeObject);
    public virtual void Visit(SqlBinaryScalarExpression codeObject);
    public virtual void Visit(SqlBooleanExpression codeObject);
    public virtual void Visit(SqlBooleanFilterExpression codeObject);
    public virtual void Visit(SqlBuiltinScalarFunctionCallExpression codeObject);
    public virtual void Visit(SqlCastExpression codeObject);
    public virtual void Visit(SqlChangeTrackingContext codeObject);
    public virtual void Visit(SqlCheckConstraint codeObject);
    public virtual void Visit(SqlClrAssemblySpecifier codeObject);
    public virtual void Visit(SqlClrClassSpecifier codeObject);
    public virtual void Visit(SqlClrFunctionBodyDefinition codeObject);
    public virtual void Visit(SqlClrMethodSpecifier codeObject);
    public virtual void Visit(SqlCollateScalarExpression codeObject);
    public virtual void Visit(SqlCollation codeObject);
    public virtual void Visit(SqlColumnAssignment codeObject);
    public virtual void Visit(SqlDefaultConstraint codeObject);
    public virtual void Visit(SqlColumnDefinition codeObject);
    public virtual void Visit(SqlColumnIdentity codeObject);
    public virtual void Visit(SqlColumnRefExpression codeObject);
    public virtual void Visit(SqlCommonTableExpression codeObject);
    public virtual void Visit(SqlComparisonBooleanExpression codeObject);
    public virtual void Visit(SqlCompressionPartitionRange codeObject);
    public virtual void Visit(SqlComputedColumnDefinition codeObject);
    public virtual void Visit(SqlConditionClause codeObject);
    public virtual void Visit(SqlConstraint codeObject);
    public virtual void Visit(SqlConvertExpression codeObject);
    public virtual void Visit(SqlCreateUserOption codeObject);
    public virtual void Visit(SqlCubeGroupByItem codeObject);
    public virtual void Visit(SqlCursorOption codeObject);
    public virtual void Visit(SqlCursorVariableAssignment codeObject);
    public virtual void Visit(SqlCursorVariableRefExpression codeObject);
    public virtual void Visit(SqlDataCompressionIndexOption codeObject);
    public virtual void Visit(SqlDataType codeObject);
    public virtual void Visit(SqlDataTypeSpecification codeObject);
    public virtual void Visit(SqlDdlTriggerDefinition codeObject);
    public virtual void Visit(SqlDefaultValuesInsertMergeActionSource codeObject);
    public virtual void Visit(SqlDefaultValuesInsertSource codeObject);
    public virtual void Visit(SqlDeleteMergeAction codeObject);
    public virtual void Visit(SqlDeleteSpecification codeObject);
    public virtual void Visit(SqlDerivedTableExpression codeObject);
    public virtual void Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject);
    public virtual void Visit(SqlDmlSpecificationTableSource codeObject);
    public virtual void Visit(SqlDmlTriggerDefinition codeObject);
    public virtual void Visit(SqlDropExistingIndexOption codeObject);
    public virtual void Visit(SqlEdgeConstraint codeObject);
    public virtual void Visit(SqlExecuteArgument codeObject);
    public virtual void Visit(SqlExecuteAsClause codeObject);
    public virtual void Visit(SqlExistsBooleanExpression codeObject);
    public virtual void Visit(SqlFillFactorIndexOption codeObject);
    public virtual void Visit(SqlFilterClause codeObject);
    public virtual void Visit(SqlForBrowseClause codeObject);
    public virtual void Visit(SqlForeignKeyConstraint codeObject);
    public virtual void Visit(SqlForXmlAutoClause codeObject);
    public virtual void Visit(SqlForXmlClause codeObject);
    public virtual void Visit(SqlForXmlDirective codeObject);
    public virtual void Visit(SqlForXmlExplicitClause codeObject);
    public virtual void Visit(SqlForXmlPathClause codeObject);
    public virtual void Visit(SqlForXmlRawClause codeObject);
    public virtual void Visit(SqlFromClause codeObject);
    public virtual void Visit(SqlFullTextBooleanExpression codeObject);
    public virtual void Visit(SqlFullTextColumn codeObject);
    public virtual void Visit(SqlFunctionDefinition codeObject);
    public virtual void Visit(SqlGlobalScalarVariableRefExpression codeObject);
    public virtual void Visit(SqlGrandTotalGroupByItem codeObject);
    public virtual void Visit(SqlGrandTotalGroupingSet codeObject);
    public virtual void Visit(SqlGroupByClause codeObject);
    public virtual void Visit(SqlGroupBySets codeObject);
    public virtual void Visit(SqlGroupingSetItemsCollection codeObject);
    public virtual void Visit(SqlHavingClause codeObject);
    public virtual void Visit(SqlIdentifier codeObject);
    public virtual void Visit(SqlIdentityFunctionCallExpression codeObject);
    public virtual void Visit(SqlIgnoreDupKeyIndexOption codeObject);
    public virtual void Visit(SqlInBooleanExpression codeObject);
    public virtual void Visit(SqlInBooleanExpressionCollectionValue codeObject);
    public virtual void Visit(SqlInBooleanExpressionQueryValue codeObject);
    public virtual void Visit(SqlIndexedColumn codeObject);
    public virtual void Visit(SqlIndexHint codeObject);
    public virtual void Visit(SqlIndexOption codeObject);
    public virtual void Visit(SqlInlineIndexConstraint codeObject);
    public virtual void Visit(SqlInlineFunctionBodyDefinition codeObject);
    public virtual void Visit(SqlInlineTableRelationalFunctionDefinition codeObject);
    public virtual void Visit(SqlInlineTableVariableDeclaration codeObject);
    public virtual void Visit(SqlInsertMergeAction codeObject);
    public virtual void Visit(SqlInsertSpecification codeObject);
    public virtual void Visit(SqlIntoClause codeObject);
    public virtual void Visit(SqlIsNullBooleanExpression codeObject);
    public virtual void Visit(SqlJsonObjectArgument codeObject);
    public virtual void Visit(SqlLargeDataStorageInformation codeObject);
    public virtual void Visit(SqlLikeBooleanExpression codeObject);
    public virtual void Visit(SqlLiteralExpression codeObject);
    public virtual void Visit(SqlLoginPassword codeObject);
    public virtual void Visit(SqlMaxDegreeOfParallelismIndexOption codeObject);
    public virtual void Visit(SqlMergeActionClause codeObject);
    public virtual void Visit(SqlMergeSpecification codeObject);
    public virtual void Visit(SqlInsertSource codeObject);
    public virtual void Visit(SqlModuleCalledOnNullInputOption codeObject);
    public virtual void Visit(SqlModuleEncryptionOption codeObject);
    public virtual void Visit(SqlModuleExecuteAsOption codeObject);
    public virtual void Visit(SqlModuleInlineOption codeObject);
    public virtual void Visit(SqlModuleNativeCompilationOption codeObject);
    public virtual void Visit(SqlModuleOption codeObject);
    public virtual void Visit(SqlModuleRecompileOption codeObject);
    public virtual void Visit(SqlModuleReturnsNullOnNullInputOption codeObject);
    public virtual void Visit(SqlModuleSchemaBindingOption codeObject);
    public virtual void Visit(SqlModuleViewMetadataOption codeObject);
    public virtual void Visit(SqlMultistatementFunctionBodyDefinition codeObject);
    public virtual void Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject);
    public virtual void Visit(SqlNotBooleanExpression codeObject);
    public virtual void Visit(SqlNullQualifier codeObject);
    public virtual void Visit(SqlQueryExpression codeObject);
    public virtual void Visit(SqlScalarExpression codeObject);
    public virtual void Visit(SqlTableExpression codeObject);
    public virtual void Visit(SqlObjectIdentifier codeObject);
    public virtual void Visit(SqlObjectReference codeObject);
    public virtual void Visit(SqlOnlineIndexOption codeObject);
    public virtual void Visit(SqlOptimizeForSequentialKeyIndexOption codeObject);
    public virtual void Visit(SqlResumableIndexOption codeObject);
    public virtual void Visit(SqlBucketCountIndexOption codeObject);
    public virtual void Visit(SqlCompressionDelayIndexOption codeObject);
    public virtual void Visit(SqlMaxDurationIndexOption codeObject);
    public virtual void Visit(SqlOffsetFetchClause codeObject);
    public virtual void Visit(SqlOrderByClause codeObject);
    public virtual void Visit(SqlOrderByItem codeObject);
    public virtual void Visit(SqlOutputClause codeObject);
    public virtual void Visit(SqlOutputIntoClause codeObject);
    public virtual void Visit(SqlPadIndexOption codeObject);
    public virtual void Visit(SqlParameterDeclaration codeObject);
    public virtual void Visit(SqlPivotClause codeObject);
    public virtual void Visit(SqlPivotTableExpression codeObject);
    public virtual void Visit(SqlPrimaryKeyConstraint codeObject);
    public virtual void Visit(SqlStorageSpecification codeObject);
    public virtual void Visit(SqlProcedureDefinition codeObject);
    public virtual void Visit(SqlQualifiedJoinTableExpression codeObject);
    public virtual void Visit(SqlQuerySpecification codeObject);
    public virtual void Visit(SqlQueryWithClause codeObject);
    public virtual void Visit(SqlRollupGroupByItem codeObject);
    public virtual void Visit(SqlRowConstructorExpression codeObject);
    public virtual void Visit(SqlScalarClrFunctionDefinition codeObject);
    public virtual void Visit(SqlScalarFunctionReturnType codeObject);
    public virtual void Visit(SqlScalarRefExpression codeObject);
    public virtual void Visit(SqlScalarRelationalFunctionDefinition codeObject);
    public virtual void Visit(SqlScalarSubQueryExpression codeObject);
    public virtual void Visit(SqlScalarVariableAssignment codeObject);
    public virtual void Visit(SqlScalarVariableRefExpression codeObject);
    public virtual void Visit(SqlScript codeObject);
    public virtual void Visit(SqlSearchedCaseExpression codeObject);
    public virtual void Visit(SqlSearchedWhenClause codeObject);
    public virtual void Visit(SqlSelectClause codeObject);
    public virtual void Visit(SqlSelectIntoClause codeObject);
    public virtual void Visit(SqlSelectScalarExpression codeObject);
    public virtual void Visit(SqlSelectSpecification codeObject);
    public virtual void Visit(SqlSelectSpecificationInsertSource codeObject);
    public virtual void Visit(SqlSelectStarExpression codeObject);
    public virtual void Visit(SqlSelectVariableAssignmentExpression codeObject);
    public virtual void Visit(SqlSetClause codeObject);
    public virtual void Visit(SqlSimpleCaseExpression codeObject);
    public virtual void Visit(SqlSimpleGroupByItem codeObject);
    public virtual void Visit(SqlSimpleOrderByClause codeObject);
    public virtual void Visit(SqlSimpleOrderByItem codeObject);
    public virtual void Visit(SqlSimpleWhenClause codeObject);
    public virtual void Visit(SqlSortedDataIndexOption codeObject);
    public virtual void Visit(SqlSortedDataReorgIndexOption codeObject);
    public virtual void Visit(SqlSortInTempDbIndexOption codeObject);
    public virtual void Visit(SqlStatisticsIncrementalIndexOption codeObject);
    public virtual void Visit(SqlStatisticsNoRecomputeIndexOption codeObject);
    public virtual void Visit(SqlStatisticsOnlyIndexOption codeObject);
    public virtual void Visit(SqlTableClrFunctionDefinition codeObject);
    public virtual void Visit(SqlTableConstructorExpression codeObject);
    public virtual void Visit(SqlTableConstructorInsertSource codeObject);
    public virtual void Visit(SqlTableDefinition codeObject);
    public virtual void Visit(SqlTableFunctionReturnType codeObject);
    public virtual void Visit(SqlTableHint codeObject);
    public virtual void Visit(SqlTableRefExpression codeObject);
    public virtual void Visit(SqlTableValuedFunctionRefExpression codeObject);
    public virtual void Visit(SqlTableVariableRefExpression codeObject);
    public virtual void Visit(SqlTableUdtInstanceMethodExpression codeObject);
    public virtual void Visit(SqlTargetTableExpression codeObject);
    public virtual void Visit(SqlTemporalPeriodDefinition codeObject);
    public virtual void Visit(SqlTopSpecification codeObject);
    public virtual void Visit(SqlTriggerAction codeObject);
    public virtual void Visit(SqlTriggerDefinition codeObject);
    public virtual void Visit(SqlTriggerEvent codeObject);
    public virtual void Visit(SqlUdtInstanceDataMemberExpression codeObject);
    public virtual void Visit(SqlUdtInstanceMethodExpression codeObject);
    public virtual void Visit(SqlUdtStaticDataMemberExpression codeObject);
    public virtual void Visit(SqlUdtStaticMethodExpression codeObject);
    public virtual void Visit(SqlUnaryScalarExpression codeObject);
    public virtual void Visit(SqlUniqueConstraint codeObject);
    public virtual void Visit(SqlUnpivotClause codeObject);
    public virtual void Visit(SqlUnpivotTableExpression codeObject);
    public virtual void Visit(SqlUnqualifiedJoinTableExpression codeObject);
    public virtual void Visit(SqlUpdateBooleanExpression codeObject);
    public virtual void Visit(SqlUpdateMergeAction codeObject);
    public virtual void Visit(SqlUpdateSpecification codeObject);
    public virtual void Visit(SqlUserDefinedScalarFunctionCallExpression codeObject);
    public virtual void Visit(SqlValuesInsertMergeActionSource codeObject);
    public virtual void Visit(SqlVariableColumnAssignment codeObject);
    public virtual void Visit(SqlVariableDeclaration codeObject);
    public virtual void Visit(SqlViewDefinition codeObject);
    public virtual void Visit(SqlWindowClause codeObject);
    public virtual void Visit(SqlWindowExpression codeObject);
    public virtual void Visit(SqlWindowSpecification codeObject);
    public virtual void Visit(SqlWhereClause codeObject);
    public virtual void Visit(SqlXmlNamespacesDeclaration codeObject);
    public virtual void Visit(SqlAlterFunctionStatement codeObject);
    public virtual void Visit(SqlAlterLoginStatement codeObject);
    public virtual void Visit(SqlAlterProcedureStatement codeObject);
    public virtual void Visit(SqlAlterTriggerStatement codeObject);
    public virtual void Visit(SqlAlterViewStatement codeObject);
    public virtual void Visit(SqlBackupCertificateStatement codeObject);
    public virtual void Visit(SqlBackupDatabaseStatement codeObject);
    public virtual void Visit(SqlBackupLogStatement codeObject);
    public virtual void Visit(SqlBackupMasterKeyStatement codeObject);
    public virtual void Visit(SqlBackupServiceMasterKeyStatement codeObject);
    public virtual void Visit(SqlBackupTableStatement codeObject);
    public virtual void Visit(SqlBreakStatement codeObject);
    public virtual void Visit(SqlCommentStatement codeObject);
    public virtual void Visit(SqlCompoundStatement codeObject);
    public virtual void Visit(SqlContinueStatement codeObject);
    public virtual void Visit(SqlCreateFunctionStatement codeObject);
    public virtual void Visit(SqlCreateIndexStatement codeObject);
    public virtual void Visit(SqlCreateLoginFromAsymKeyStatement codeObject);
    public virtual void Visit(SqlCreateLoginFromCertificateStatement codeObject);
    public virtual void Visit(SqlCreateLoginFromWindowsStatement codeObject);
    public virtual void Visit(SqlCreateLoginWithPasswordStatement codeObject);
    public virtual void Visit(SqlCreateProcedureStatement codeObject);
    public virtual void Visit(SqlCreateRoleStatement codeObject);
    public virtual void Visit(SqlCreateSchemaStatement codeObject);
    public virtual void Visit(SqlCreateSynonymStatement codeObject);
    public virtual void Visit(SqlCreateTableStatement codeObject);
    public virtual void Visit(SqlCreateTriggerStatement codeObject);
    public virtual void Visit(SqlCreateUserDefinedDataTypeStatement codeObject);
    public virtual void Visit(SqlCreateUserDefinedTableTypeStatement codeObject);
    public virtual void Visit(SqlCreateUserDefinedTypeStatement codeObject);
    public virtual void Visit(SqlCreateUserFromAsymKeyStatement codeObject);
    public virtual void Visit(SqlCreateUserFromCertificateStatement codeObject);
    public virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject);
    public virtual void Visit(SqlCreateUserFromLoginStatement codeObject);
    public virtual void Visit(SqlCreateUserFromExternalProviderStatement codeObject);
    public virtual void Visit(SqlCreateUserStatement codeObject);
    public virtual void Visit(SqlCreateUserWithoutLoginStatement codeObject);
    public virtual void Visit(SqlCreateViewStatement codeObject);
    public virtual void Visit(SqlCursorDeclareStatement codeObject);
    public virtual void Visit(SqlDBCCStatement codeObject);
    public virtual void Visit(SqlDeleteStatement codeObject);
    public virtual void Visit(SqlDenyStatement codeObject);
    public virtual void Visit(SqlDropAggregateStatement codeObject);
    public virtual void Visit(SqlDropDatabaseStatement codeObject);
    public virtual void Visit(SqlDropDefaultStatement codeObject);
    public virtual void Visit(SqlDropFunctionStatement codeObject);
    public virtual void Visit(SqlDropLoginStatement codeObject);
    public virtual void Visit(SqlDropProcedureStatement codeObject);
    public virtual void Visit(SqlDropRuleStatement codeObject);
    public virtual void Visit(SqlDropSchemaStatement codeObject);
    public virtual void Visit(SqlDropSecurityPolicyStatement codeObject);
    public virtual void Visit(SqlDropSequenceStatement codeObject);
    public virtual void Visit(SqlDropSynonymStatement codeObject);
    public virtual void Visit(SqlDropTableStatement codeObject);
    public virtual void Visit(SqlDropTriggerStatement codeObject);
    public virtual void Visit(SqlDropTypeStatement codeObject);
    public virtual void Visit(SqlDropUserStatement codeObject);
    public virtual void Visit(SqlDropViewStatement codeObject);
    public virtual void Visit(SqlExecuteModuleStatement codeObject);
    public virtual void Visit(SqlExecuteStringStatement codeObject);
    public virtual void Visit(SqlGrantStatement codeObject);
    public virtual void Visit(SqlIfElseStatement codeObject);
    public virtual void Visit(SqlInlineTableVariableDeclareStatement codeObject);
    public virtual void Visit(SqlInsertStatement codeObject);
    public virtual void Visit(SqlMergeStatement codeObject);
    public virtual void Visit(SqlStatement codeObject);
    public virtual void Visit(SqlRestoreDatabaseStatement codeObject);
    public virtual void Visit(SqlRestoreInformationStatement codeObject);
    public virtual void Visit(SqlRestoreLogStatement codeObject);
    public virtual void Visit(SqlRestoreMasterKeyStatement codeObject);
    public virtual void Visit(SqlRestoreServiceMasterKeyStatement codeObject);
    public virtual void Visit(SqlRestoreTableStatement codeObject);
    public virtual void Visit(SqlReturnStatement codeObject);
    public virtual void Visit(SqlRevokeStatement codeObject);
    public virtual void Visit(SqlSelectStatement codeObject);
    public virtual void Visit(SqlSetAssignmentStatement codeObject);
    public virtual void Visit(SqlSetStatement codeObject);
    public virtual void Visit(SqlTryCatchStatement codeObject);
    public virtual void Visit(SqlUpdateStatement codeObject);
    public virtual void Visit(SqlUseStatement codeObject);
    public virtual void Visit(SqlVariableDeclareStatement codeObject);
    public virtual void Visit(SqlWhileStatement codeObject);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectRecursiveVisitor`1 : object {
    private void VisitList(IEnumerable`1<TElem> codeObjects);
    public virtual T Visit(SqlAggregateFunctionCallExpression codeObject);
    public virtual T Visit(SqlAllAnyComparisonBooleanExpression codeObject);
    public virtual T Visit(SqlAllowPageLocksIndexOption codeObject);
    public virtual T Visit(SqlAllowRowLocksIndexOption codeObject);
    public virtual T Visit(SqlAssignment codeObject);
    public virtual T Visit(SqlAtTimeZoneExpression codeObject);
    public virtual T Visit(SqlBatch codeObject);
    public virtual T Visit(SqlBetweenBooleanExpression codeObject);
    public virtual T Visit(SqlBinaryBooleanExpression codeObject);
    public virtual T Visit(SqlBinaryFilterExpression codeObject);
    public virtual T Visit(SqlBinaryQueryExpression codeObject);
    public virtual T Visit(SqlBinaryScalarExpression codeObject);
    public virtual T Visit(SqlBooleanExpression codeObject);
    public virtual T Visit(SqlBooleanFilterExpression codeObject);
    public virtual T Visit(SqlBuiltinScalarFunctionCallExpression codeObject);
    public virtual T Visit(SqlCastExpression codeObject);
    public virtual T Visit(SqlChangeTrackingContext codeObject);
    public virtual T Visit(SqlCheckConstraint codeObject);
    public virtual T Visit(SqlClrAssemblySpecifier codeObject);
    public virtual T Visit(SqlClrClassSpecifier codeObject);
    public virtual T Visit(SqlClrFunctionBodyDefinition codeObject);
    public virtual T Visit(SqlClrMethodSpecifier codeObject);
    public virtual T Visit(SqlCollateScalarExpression codeObject);
    public virtual T Visit(SqlCollation codeObject);
    public virtual T Visit(SqlColumnAssignment codeObject);
    public virtual T Visit(SqlDefaultConstraint codeObject);
    public virtual T Visit(SqlColumnDefinition codeObject);
    public virtual T Visit(SqlColumnIdentity codeObject);
    public virtual T Visit(SqlColumnRefExpression codeObject);
    public virtual T Visit(SqlCommonTableExpression codeObject);
    public virtual T Visit(SqlComparisonBooleanExpression codeObject);
    public virtual T Visit(SqlCompressionPartitionRange codeObject);
    public virtual T Visit(SqlComputedColumnDefinition codeObject);
    public virtual T Visit(SqlConditionClause codeObject);
    public virtual T Visit(SqlConstraint codeObject);
    public virtual T Visit(SqlConvertExpression codeObject);
    public virtual T Visit(SqlCreateUserOption codeObject);
    public virtual T Visit(SqlCubeGroupByItem codeObject);
    public virtual T Visit(SqlCursorOption codeObject);
    public virtual T Visit(SqlCursorVariableAssignment codeObject);
    public virtual T Visit(SqlCursorVariableRefExpression codeObject);
    public virtual T Visit(SqlDataCompressionIndexOption codeObject);
    public virtual T Visit(SqlDataType codeObject);
    public virtual T Visit(SqlDataTypeSpecification codeObject);
    public virtual T Visit(SqlDdlTriggerDefinition codeObject);
    public virtual T Visit(SqlDefaultValuesInsertMergeActionSource codeObject);
    public virtual T Visit(SqlDefaultValuesInsertSource codeObject);
    public virtual T Visit(SqlDeleteMergeAction codeObject);
    public virtual T Visit(SqlDeleteSpecification codeObject);
    public virtual T Visit(SqlDerivedTableExpression codeObject);
    public virtual T Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject);
    public virtual T Visit(SqlDmlSpecificationTableSource codeObject);
    public virtual T Visit(SqlDmlTriggerDefinition codeObject);
    public virtual T Visit(SqlDropExistingIndexOption codeObject);
    public virtual T Visit(SqlEdgeConstraint codeObject);
    public virtual T Visit(SqlExecuteArgument codeObject);
    public virtual T Visit(SqlExecuteAsClause codeObject);
    public virtual T Visit(SqlExistsBooleanExpression codeObject);
    public virtual T Visit(SqlFillFactorIndexOption codeObject);
    public virtual T Visit(SqlFilterClause codeObject);
    public virtual T Visit(SqlForBrowseClause codeObject);
    public virtual T Visit(SqlForeignKeyConstraint codeObject);
    public virtual T Visit(SqlForXmlAutoClause codeObject);
    public virtual T Visit(SqlForXmlClause codeObject);
    public virtual T Visit(SqlForXmlDirective codeObject);
    public virtual T Visit(SqlForXmlExplicitClause codeObject);
    public virtual T Visit(SqlForXmlPathClause codeObject);
    public virtual T Visit(SqlForXmlRawClause codeObject);
    public virtual T Visit(SqlFromClause codeObject);
    public virtual T Visit(SqlFullTextBooleanExpression codeObject);
    public virtual T Visit(SqlFullTextColumn codeObject);
    public virtual T Visit(SqlFunctionDefinition codeObject);
    public virtual T Visit(SqlGlobalScalarVariableRefExpression codeObject);
    public virtual T Visit(SqlGrandTotalGroupByItem codeObject);
    public virtual T Visit(SqlGrandTotalGroupingSet codeObject);
    public virtual T Visit(SqlGroupByClause codeObject);
    public virtual T Visit(SqlGroupBySets codeObject);
    public virtual T Visit(SqlGroupingSetItemsCollection codeObject);
    public virtual T Visit(SqlHavingClause codeObject);
    public virtual T Visit(SqlIdentifier codeObject);
    public virtual T Visit(SqlIdentityFunctionCallExpression codeObject);
    public virtual T Visit(SqlIgnoreDupKeyIndexOption codeObject);
    public virtual T Visit(SqlInBooleanExpression codeObject);
    public virtual T Visit(SqlInBooleanExpressionCollectionValue codeObject);
    public virtual T Visit(SqlInBooleanExpressionQueryValue codeObject);
    public virtual T Visit(SqlIndexedColumn codeObject);
    public virtual T Visit(SqlIndexHint codeObject);
    public virtual T Visit(SqlIndexOption codeObject);
    public virtual T Visit(SqlInlineIndexConstraint codeObject);
    public virtual T Visit(SqlInlineFunctionBodyDefinition codeObject);
    public virtual T Visit(SqlInlineTableRelationalFunctionDefinition codeObject);
    public virtual T Visit(SqlInlineTableVariableDeclaration codeObject);
    public virtual T Visit(SqlInsertMergeAction codeObject);
    public virtual T Visit(SqlInsertSpecification codeObject);
    public virtual T Visit(SqlIntoClause codeObject);
    public virtual T Visit(SqlIsNullBooleanExpression codeObject);
    public virtual T Visit(SqlJsonObjectArgument codeObject);
    public virtual T Visit(SqlLargeDataStorageInformation codeObject);
    public virtual T Visit(SqlLikeBooleanExpression codeObject);
    public virtual T Visit(SqlLiteralExpression codeObject);
    public virtual T Visit(SqlLoginPassword codeObject);
    public virtual T Visit(SqlMaxDegreeOfParallelismIndexOption codeObject);
    public virtual T Visit(SqlMergeActionClause codeObject);
    public virtual T Visit(SqlMergeSpecification codeObject);
    public virtual T Visit(SqlInsertSource codeObject);
    public virtual T Visit(SqlModuleCalledOnNullInputOption codeObject);
    public virtual T Visit(SqlModuleEncryptionOption codeObject);
    public virtual T Visit(SqlModuleExecuteAsOption codeObject);
    public virtual T Visit(SqlModuleInlineOption codeObject);
    public virtual T Visit(SqlModuleNativeCompilationOption codeObject);
    public virtual T Visit(SqlModuleOption codeObject);
    public virtual T Visit(SqlModuleRecompileOption codeObject);
    public virtual T Visit(SqlModuleReturnsNullOnNullInputOption codeObject);
    public virtual T Visit(SqlModuleSchemaBindingOption codeObject);
    public virtual T Visit(SqlModuleViewMetadataOption codeObject);
    public virtual T Visit(SqlMultistatementFunctionBodyDefinition codeObject);
    public virtual T Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject);
    public virtual T Visit(SqlNotBooleanExpression codeObject);
    public virtual T Visit(SqlNullQualifier codeObject);
    public virtual T Visit(SqlQueryExpression codeObject);
    public virtual T Visit(SqlScalarExpression codeObject);
    public virtual T Visit(SqlTableExpression codeObject);
    public virtual T Visit(SqlObjectIdentifier codeObject);
    public virtual T Visit(SqlObjectReference codeObject);
    public virtual T Visit(SqlOnlineIndexOption codeObject);
    public virtual T Visit(SqlOptimizeForSequentialKeyIndexOption codeObject);
    public virtual T Visit(SqlResumableIndexOption codeObject);
    public virtual T Visit(SqlBucketCountIndexOption codeObject);
    public virtual T Visit(SqlCompressionDelayIndexOption codeObject);
    public virtual T Visit(SqlMaxDurationIndexOption codeObject);
    public virtual T Visit(SqlOffsetFetchClause codeObject);
    public virtual T Visit(SqlOrderByClause codeObject);
    public virtual T Visit(SqlOrderByItem codeObject);
    public virtual T Visit(SqlOutputClause codeObject);
    public virtual T Visit(SqlOutputIntoClause codeObject);
    public virtual T Visit(SqlPadIndexOption codeObject);
    public virtual T Visit(SqlParameterDeclaration codeObject);
    public virtual T Visit(SqlPivotClause codeObject);
    public virtual T Visit(SqlPivotTableExpression codeObject);
    public virtual T Visit(SqlPrimaryKeyConstraint codeObject);
    public virtual T Visit(SqlStorageSpecification codeObject);
    public virtual T Visit(SqlProcedureDefinition codeObject);
    public virtual T Visit(SqlQualifiedJoinTableExpression codeObject);
    public virtual T Visit(SqlQuerySpecification codeObject);
    public virtual T Visit(SqlQueryWithClause codeObject);
    public virtual T Visit(SqlRollupGroupByItem codeObject);
    public virtual T Visit(SqlRowConstructorExpression codeObject);
    public virtual T Visit(SqlScalarClrFunctionDefinition codeObject);
    public virtual T Visit(SqlScalarFunctionReturnType codeObject);
    public virtual T Visit(SqlScalarRefExpression codeObject);
    public virtual T Visit(SqlScalarRelationalFunctionDefinition codeObject);
    public virtual T Visit(SqlScalarSubQueryExpression codeObject);
    public virtual T Visit(SqlScalarVariableAssignment codeObject);
    public virtual T Visit(SqlScalarVariableRefExpression codeObject);
    public virtual T Visit(SqlScript codeObject);
    public virtual T Visit(SqlSearchedCaseExpression codeObject);
    public virtual T Visit(SqlSearchedWhenClause codeObject);
    public virtual T Visit(SqlSelectClause codeObject);
    public virtual T Visit(SqlSelectIntoClause codeObject);
    public virtual T Visit(SqlSelectScalarExpression codeObject);
    public virtual T Visit(SqlSelectSpecification codeObject);
    public virtual T Visit(SqlSelectSpecificationInsertSource codeObject);
    public virtual T Visit(SqlSelectStarExpression codeObject);
    public virtual T Visit(SqlSelectVariableAssignmentExpression codeObject);
    public virtual T Visit(SqlSetClause codeObject);
    public virtual T Visit(SqlSimpleCaseExpression codeObject);
    public virtual T Visit(SqlSimpleGroupByItem codeObject);
    public virtual T Visit(SqlSimpleOrderByClause codeObject);
    public virtual T Visit(SqlSimpleOrderByItem codeObject);
    public virtual T Visit(SqlSimpleWhenClause codeObject);
    public virtual T Visit(SqlSortedDataIndexOption codeObject);
    public virtual T Visit(SqlSortedDataReorgIndexOption codeObject);
    public virtual T Visit(SqlSortInTempDbIndexOption codeObject);
    public virtual T Visit(SqlStatisticsIncrementalIndexOption codeObject);
    public virtual T Visit(SqlStatisticsNoRecomputeIndexOption codeObject);
    public virtual T Visit(SqlStatisticsOnlyIndexOption codeObject);
    public virtual T Visit(SqlTableClrFunctionDefinition codeObject);
    public virtual T Visit(SqlTableConstructorExpression codeObject);
    public virtual T Visit(SqlTableConstructorInsertSource codeObject);
    public virtual T Visit(SqlTableDefinition codeObject);
    public virtual T Visit(SqlTableFunctionReturnType codeObject);
    public virtual T Visit(SqlTableHint codeObject);
    public virtual T Visit(SqlTableRefExpression codeObject);
    public virtual T Visit(SqlTableValuedFunctionRefExpression codeObject);
    public virtual T Visit(SqlTableVariableRefExpression codeObject);
    public virtual T Visit(SqlTableUdtInstanceMethodExpression codeObject);
    public virtual T Visit(SqlTargetTableExpression codeObject);
    public virtual T Visit(SqlTemporalPeriodDefinition codeObject);
    public virtual T Visit(SqlTopSpecification codeObject);
    public virtual T Visit(SqlTriggerAction codeObject);
    public virtual T Visit(SqlTriggerDefinition codeObject);
    public virtual T Visit(SqlTriggerEvent codeObject);
    public virtual T Visit(SqlUdtInstanceDataMemberExpression codeObject);
    public virtual T Visit(SqlUdtInstanceMethodExpression codeObject);
    public virtual T Visit(SqlUdtStaticDataMemberExpression codeObject);
    public virtual T Visit(SqlUdtStaticMethodExpression codeObject);
    public virtual T Visit(SqlUnaryScalarExpression codeObject);
    public virtual T Visit(SqlUniqueConstraint codeObject);
    public virtual T Visit(SqlUnpivotClause codeObject);
    public virtual T Visit(SqlUnpivotTableExpression codeObject);
    public virtual T Visit(SqlUnqualifiedJoinTableExpression codeObject);
    public virtual T Visit(SqlUpdateBooleanExpression codeObject);
    public virtual T Visit(SqlUpdateMergeAction codeObject);
    public virtual T Visit(SqlUpdateSpecification codeObject);
    public virtual T Visit(SqlUserDefinedScalarFunctionCallExpression codeObject);
    public virtual T Visit(SqlValuesInsertMergeActionSource codeObject);
    public virtual T Visit(SqlVariableColumnAssignment codeObject);
    public virtual T Visit(SqlVariableDeclaration codeObject);
    public virtual T Visit(SqlViewDefinition codeObject);
    public virtual T Visit(SqlWindowClause codeObject);
    public virtual T Visit(SqlWindowExpression codeObject);
    public virtual T Visit(SqlWindowSpecification codeObject);
    public virtual T Visit(SqlWhereClause codeObject);
    public virtual T Visit(SqlXmlNamespacesDeclaration codeObject);
    public virtual T Visit(SqlAlterFunctionStatement codeObject);
    public virtual T Visit(SqlAlterLoginStatement codeObject);
    public virtual T Visit(SqlAlterProcedureStatement codeObject);
    public virtual T Visit(SqlAlterTriggerStatement codeObject);
    public virtual T Visit(SqlAlterViewStatement codeObject);
    public virtual T Visit(SqlBackupCertificateStatement codeObject);
    public virtual T Visit(SqlBackupDatabaseStatement codeObject);
    public virtual T Visit(SqlBackupLogStatement codeObject);
    public virtual T Visit(SqlBackupMasterKeyStatement codeObject);
    public virtual T Visit(SqlBackupServiceMasterKeyStatement codeObject);
    public virtual T Visit(SqlBackupTableStatement codeObject);
    public virtual T Visit(SqlBreakStatement codeObject);
    public virtual T Visit(SqlCommentStatement codeObject);
    public virtual T Visit(SqlCompoundStatement codeObject);
    public virtual T Visit(SqlContinueStatement codeObject);
    public virtual T Visit(SqlCreateFunctionStatement codeObject);
    public virtual T Visit(SqlCreateIndexStatement codeObject);
    public virtual T Visit(SqlCreateLoginFromAsymKeyStatement codeObject);
    public virtual T Visit(SqlCreateLoginFromCertificateStatement codeObject);
    public virtual T Visit(SqlCreateLoginFromWindowsStatement codeObject);
    public virtual T Visit(SqlCreateLoginWithPasswordStatement codeObject);
    public virtual T Visit(SqlCreateProcedureStatement codeObject);
    public virtual T Visit(SqlCreateRoleStatement codeObject);
    public virtual T Visit(SqlCreateSchemaStatement codeObject);
    public virtual T Visit(SqlCreateSynonymStatement codeObject);
    public virtual T Visit(SqlCreateTableStatement codeObject);
    public virtual T Visit(SqlCreateTriggerStatement codeObject);
    public virtual T Visit(SqlCreateUserDefinedDataTypeStatement codeObject);
    public virtual T Visit(SqlCreateUserDefinedTableTypeStatement codeObject);
    public virtual T Visit(SqlCreateUserDefinedTypeStatement codeObject);
    public virtual T Visit(SqlCreateUserFromAsymKeyStatement codeObject);
    public virtual T Visit(SqlCreateUserFromCertificateStatement codeObject);
    public virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject);
    public virtual T Visit(SqlCreateUserFromLoginStatement codeObject);
    public virtual T Visit(SqlCreateUserFromExternalProviderStatement codeObject);
    public virtual T Visit(SqlCreateUserStatement codeObject);
    public virtual T Visit(SqlCreateUserWithoutLoginStatement codeObject);
    public virtual T Visit(SqlCreateViewStatement codeObject);
    public virtual T Visit(SqlCursorDeclareStatement codeObject);
    public virtual T Visit(SqlDBCCStatement codeObject);
    public virtual T Visit(SqlDeleteStatement codeObject);
    public virtual T Visit(SqlDenyStatement codeObject);
    public virtual T Visit(SqlDropAggregateStatement codeObject);
    public virtual T Visit(SqlDropDatabaseStatement codeObject);
    public virtual T Visit(SqlDropDefaultStatement codeObject);
    public virtual T Visit(SqlDropFunctionStatement codeObject);
    public virtual T Visit(SqlDropLoginStatement codeObject);
    public virtual T Visit(SqlDropProcedureStatement codeObject);
    public virtual T Visit(SqlDropRuleStatement codeObject);
    public virtual T Visit(SqlDropSchemaStatement codeObject);
    public virtual T Visit(SqlDropSecurityPolicyStatement codeObject);
    public virtual T Visit(SqlDropSequenceStatement codeObject);
    public virtual T Visit(SqlDropSynonymStatement codeObject);
    public virtual T Visit(SqlDropTableStatement codeObject);
    public virtual T Visit(SqlDropTriggerStatement codeObject);
    public virtual T Visit(SqlDropTypeStatement codeObject);
    public virtual T Visit(SqlDropUserStatement codeObject);
    public virtual T Visit(SqlDropViewStatement codeObject);
    public virtual T Visit(SqlExecuteModuleStatement codeObject);
    public virtual T Visit(SqlExecuteStringStatement codeObject);
    public virtual T Visit(SqlGrantStatement codeObject);
    public virtual T Visit(SqlIfElseStatement codeObject);
    public virtual T Visit(SqlInlineTableVariableDeclareStatement codeObject);
    public virtual T Visit(SqlInsertStatement codeObject);
    public virtual T Visit(SqlMergeStatement codeObject);
    public virtual T Visit(SqlStatement codeObject);
    public virtual T Visit(SqlRestoreDatabaseStatement codeObject);
    public virtual T Visit(SqlRestoreInformationStatement codeObject);
    public virtual T Visit(SqlRestoreLogStatement codeObject);
    public virtual T Visit(SqlRestoreMasterKeyStatement codeObject);
    public virtual T Visit(SqlRestoreServiceMasterKeyStatement codeObject);
    public virtual T Visit(SqlRestoreTableStatement codeObject);
    public virtual T Visit(SqlReturnStatement codeObject);
    public virtual T Visit(SqlRevokeStatement codeObject);
    public virtual T Visit(SqlSelectStatement codeObject);
    public virtual T Visit(SqlSetAssignmentStatement codeObject);
    public virtual T Visit(SqlSetStatement codeObject);
    public virtual T Visit(SqlTryCatchStatement codeObject);
    public virtual T Visit(SqlUpdateStatement codeObject);
    public virtual T Visit(SqlUseStatement codeObject);
    public virtual T Visit(SqlVariableDeclareStatement codeObject);
    public virtual T Visit(SqlWhileStatement codeObject);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectVisitor : object {
    public virtual void Visit(SqlAggregateFunctionCallExpression codeObject);
    public virtual void Visit(SqlAllAnyComparisonBooleanExpression codeObject);
    public virtual void Visit(SqlAllowPageLocksIndexOption codeObject);
    public virtual void Visit(SqlAllowRowLocksIndexOption codeObject);
    public virtual void Visit(SqlAssignment codeObject);
    public virtual void Visit(SqlAtTimeZoneExpression codeObject);
    public virtual void Visit(SqlBatch codeObject);
    public virtual void Visit(SqlBetweenBooleanExpression codeObject);
    public virtual void Visit(SqlBinaryBooleanExpression codeObject);
    public virtual void Visit(SqlBinaryFilterExpression codeObject);
    public virtual void Visit(SqlBinaryQueryExpression codeObject);
    public virtual void Visit(SqlBinaryScalarExpression codeObject);
    public virtual void Visit(SqlBooleanExpression codeObject);
    public virtual void Visit(SqlBooleanFilterExpression codeObject);
    public virtual void Visit(SqlBuiltinScalarFunctionCallExpression codeObject);
    public virtual void Visit(SqlCastExpression codeObject);
    public virtual void Visit(SqlChangeTrackingContext codeObject);
    public virtual void Visit(SqlCheckConstraint codeObject);
    public virtual void Visit(SqlClrAssemblySpecifier codeObject);
    public virtual void Visit(SqlClrClassSpecifier codeObject);
    public virtual void Visit(SqlClrFunctionBodyDefinition codeObject);
    public virtual void Visit(SqlClrMethodSpecifier codeObject);
    public virtual void Visit(SqlCollateScalarExpression codeObject);
    public virtual void Visit(SqlCollation codeObject);
    public virtual void Visit(SqlColumnAssignment codeObject);
    public virtual void Visit(SqlDefaultConstraint codeObject);
    public virtual void Visit(SqlColumnDefinition codeObject);
    public virtual void Visit(SqlColumnIdentity codeObject);
    public virtual void Visit(SqlColumnRefExpression codeObject);
    public virtual void Visit(SqlCommonTableExpression codeObject);
    public virtual void Visit(SqlComparisonBooleanExpression codeObject);
    public virtual void Visit(SqlCompressionPartitionRange codeObject);
    public virtual void Visit(SqlComputedColumnDefinition codeObject);
    public virtual void Visit(SqlConditionClause codeObject);
    public virtual void Visit(SqlConstraint codeObject);
    public virtual void Visit(SqlConvertExpression codeObject);
    public virtual void Visit(SqlCreateUserOption codeObject);
    public virtual void Visit(SqlCubeGroupByItem codeObject);
    public virtual void Visit(SqlCursorOption codeObject);
    public virtual void Visit(SqlCursorVariableAssignment codeObject);
    public virtual void Visit(SqlCursorVariableRefExpression codeObject);
    public virtual void Visit(SqlDataCompressionIndexOption codeObject);
    public virtual void Visit(SqlDataType codeObject);
    public virtual void Visit(SqlDataTypeSpecification codeObject);
    public virtual void Visit(SqlDdlTriggerDefinition codeObject);
    public virtual void Visit(SqlDefaultValuesInsertMergeActionSource codeObject);
    public virtual void Visit(SqlDefaultValuesInsertSource codeObject);
    public virtual void Visit(SqlDeleteMergeAction codeObject);
    public virtual void Visit(SqlDeleteSpecification codeObject);
    public virtual void Visit(SqlDerivedTableExpression codeObject);
    public virtual void Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject);
    public virtual void Visit(SqlDmlSpecificationTableSource codeObject);
    public virtual void Visit(SqlDmlTriggerDefinition codeObject);
    public virtual void Visit(SqlDropExistingIndexOption codeObject);
    public virtual void Visit(SqlEdgeConstraint codeObject);
    public virtual void Visit(SqlExecuteArgument codeObject);
    public virtual void Visit(SqlExecuteAsClause codeObject);
    public virtual void Visit(SqlExistsBooleanExpression codeObject);
    public virtual void Visit(SqlFillFactorIndexOption codeObject);
    public virtual void Visit(SqlFilterClause codeObject);
    public virtual void Visit(SqlForBrowseClause codeObject);
    public virtual void Visit(SqlForeignKeyConstraint codeObject);
    public virtual void Visit(SqlForXmlAutoClause codeObject);
    public virtual void Visit(SqlForXmlClause codeObject);
    public virtual void Visit(SqlForXmlDirective codeObject);
    public virtual void Visit(SqlForXmlExplicitClause codeObject);
    public virtual void Visit(SqlForXmlPathClause codeObject);
    public virtual void Visit(SqlForXmlRawClause codeObject);
    public virtual void Visit(SqlFromClause codeObject);
    public virtual void Visit(SqlFullTextBooleanExpression codeObject);
    public virtual void Visit(SqlFullTextColumn codeObject);
    public virtual void Visit(SqlFunctionDefinition codeObject);
    public virtual void Visit(SqlGlobalScalarVariableRefExpression codeObject);
    public virtual void Visit(SqlGrandTotalGroupByItem codeObject);
    public virtual void Visit(SqlGrandTotalGroupingSet codeObject);
    public virtual void Visit(SqlGroupByClause codeObject);
    public virtual void Visit(SqlGroupBySets codeObject);
    public virtual void Visit(SqlGroupingSetItemsCollection codeObject);
    public virtual void Visit(SqlHavingClause codeObject);
    public virtual void Visit(SqlIdentifier codeObject);
    public virtual void Visit(SqlIdentityFunctionCallExpression codeObject);
    public virtual void Visit(SqlIgnoreDupKeyIndexOption codeObject);
    public virtual void Visit(SqlInBooleanExpression codeObject);
    public virtual void Visit(SqlInBooleanExpressionCollectionValue codeObject);
    public virtual void Visit(SqlInBooleanExpressionQueryValue codeObject);
    public virtual void Visit(SqlIndexedColumn codeObject);
    public virtual void Visit(SqlIndexHint codeObject);
    public virtual void Visit(SqlIndexOption codeObject);
    public virtual void Visit(SqlInlineIndexConstraint codeObject);
    public virtual void Visit(SqlInlineFunctionBodyDefinition codeObject);
    public virtual void Visit(SqlInlineTableRelationalFunctionDefinition codeObject);
    public virtual void Visit(SqlInlineTableVariableDeclaration codeObject);
    public virtual void Visit(SqlInsertMergeAction codeObject);
    public virtual void Visit(SqlInsertSpecification codeObject);
    public virtual void Visit(SqlIntoClause codeObject);
    public virtual void Visit(SqlIsNullBooleanExpression codeObject);
    public virtual void Visit(SqlJsonObjectArgument codeObject);
    public virtual void Visit(SqlLargeDataStorageInformation codeObject);
    public virtual void Visit(SqlLikeBooleanExpression codeObject);
    public virtual void Visit(SqlLiteralExpression codeObject);
    public virtual void Visit(SqlLoginPassword codeObject);
    public virtual void Visit(SqlMaxDegreeOfParallelismIndexOption codeObject);
    public virtual void Visit(SqlMergeActionClause codeObject);
    public virtual void Visit(SqlMergeSpecification codeObject);
    public virtual void Visit(SqlInsertSource codeObject);
    public virtual void Visit(SqlModuleCalledOnNullInputOption codeObject);
    public virtual void Visit(SqlModuleEncryptionOption codeObject);
    public virtual void Visit(SqlModuleExecuteAsOption codeObject);
    public virtual void Visit(SqlModuleInlineOption codeObject);
    public virtual void Visit(SqlModuleNativeCompilationOption codeObject);
    public virtual void Visit(SqlModuleOption codeObject);
    public virtual void Visit(SqlModuleRecompileOption codeObject);
    public virtual void Visit(SqlModuleReturnsNullOnNullInputOption codeObject);
    public virtual void Visit(SqlModuleSchemaBindingOption codeObject);
    public virtual void Visit(SqlModuleViewMetadataOption codeObject);
    public virtual void Visit(SqlMultistatementFunctionBodyDefinition codeObject);
    public virtual void Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject);
    public virtual void Visit(SqlNotBooleanExpression codeObject);
    public virtual void Visit(SqlNullQualifier codeObject);
    public virtual void Visit(SqlQueryExpression codeObject);
    public virtual void Visit(SqlScalarExpression codeObject);
    public virtual void Visit(SqlTableExpression codeObject);
    public virtual void Visit(SqlObjectIdentifier codeObject);
    public virtual void Visit(SqlObjectReference codeObject);
    public virtual void Visit(SqlOnlineIndexOption codeObject);
    public virtual void Visit(SqlOptimizeForSequentialKeyIndexOption codeObject);
    public virtual void Visit(SqlResumableIndexOption codeObject);
    public virtual void Visit(SqlBucketCountIndexOption codeObject);
    public virtual void Visit(SqlCompressionDelayIndexOption codeObject);
    public virtual void Visit(SqlMaxDurationIndexOption codeObject);
    public virtual void Visit(SqlOffsetFetchClause codeObject);
    public virtual void Visit(SqlOrderByClause codeObject);
    public virtual void Visit(SqlOrderByItem codeObject);
    public virtual void Visit(SqlOutputClause codeObject);
    public virtual void Visit(SqlOutputIntoClause codeObject);
    public virtual void Visit(SqlPadIndexOption codeObject);
    public virtual void Visit(SqlParameterDeclaration codeObject);
    public virtual void Visit(SqlPivotClause codeObject);
    public virtual void Visit(SqlPivotTableExpression codeObject);
    public virtual void Visit(SqlPrimaryKeyConstraint codeObject);
    public virtual void Visit(SqlStorageSpecification codeObject);
    public virtual void Visit(SqlProcedureDefinition codeObject);
    public virtual void Visit(SqlQualifiedJoinTableExpression codeObject);
    public virtual void Visit(SqlQuerySpecification codeObject);
    public virtual void Visit(SqlQueryWithClause codeObject);
    public virtual void Visit(SqlRollupGroupByItem codeObject);
    public virtual void Visit(SqlRowConstructorExpression codeObject);
    public virtual void Visit(SqlScalarClrFunctionDefinition codeObject);
    public virtual void Visit(SqlScalarFunctionReturnType codeObject);
    public virtual void Visit(SqlScalarRefExpression codeObject);
    public virtual void Visit(SqlScalarRelationalFunctionDefinition codeObject);
    public virtual void Visit(SqlScalarSubQueryExpression codeObject);
    public virtual void Visit(SqlScalarVariableAssignment codeObject);
    public virtual void Visit(SqlScalarVariableRefExpression codeObject);
    public virtual void Visit(SqlScript codeObject);
    public virtual void Visit(SqlSearchedCaseExpression codeObject);
    public virtual void Visit(SqlSearchedWhenClause codeObject);
    public virtual void Visit(SqlSelectClause codeObject);
    public virtual void Visit(SqlSelectIntoClause codeObject);
    public virtual void Visit(SqlSelectScalarExpression codeObject);
    public virtual void Visit(SqlSelectSpecification codeObject);
    public virtual void Visit(SqlSelectSpecificationInsertSource codeObject);
    public virtual void Visit(SqlSelectStarExpression codeObject);
    public virtual void Visit(SqlSelectVariableAssignmentExpression codeObject);
    public virtual void Visit(SqlSetClause codeObject);
    public virtual void Visit(SqlSimpleCaseExpression codeObject);
    public virtual void Visit(SqlSimpleGroupByItem codeObject);
    public virtual void Visit(SqlSimpleOrderByClause codeObject);
    public virtual void Visit(SqlSimpleOrderByItem codeObject);
    public virtual void Visit(SqlSimpleWhenClause codeObject);
    public virtual void Visit(SqlSortedDataIndexOption codeObject);
    public virtual void Visit(SqlSortedDataReorgIndexOption codeObject);
    public virtual void Visit(SqlSortInTempDbIndexOption codeObject);
    public virtual void Visit(SqlStatisticsIncrementalIndexOption codeObject);
    public virtual void Visit(SqlStatisticsNoRecomputeIndexOption codeObject);
    public virtual void Visit(SqlStatisticsOnlyIndexOption codeObject);
    public virtual void Visit(SqlTableClrFunctionDefinition codeObject);
    public virtual void Visit(SqlTableConstructorExpression codeObject);
    public virtual void Visit(SqlTableConstructorInsertSource codeObject);
    public virtual void Visit(SqlTableDefinition codeObject);
    public virtual void Visit(SqlTableFunctionReturnType codeObject);
    public virtual void Visit(SqlTableHint codeObject);
    public virtual void Visit(SqlTableRefExpression codeObject);
    public virtual void Visit(SqlTableValuedFunctionRefExpression codeObject);
    public virtual void Visit(SqlTableVariableRefExpression codeObject);
    public virtual void Visit(SqlTableUdtInstanceMethodExpression codeObject);
    public virtual void Visit(SqlTargetTableExpression codeObject);
    public virtual void Visit(SqlTemporalPeriodDefinition codeObject);
    public virtual void Visit(SqlTopSpecification codeObject);
    public virtual void Visit(SqlTriggerAction codeObject);
    public virtual void Visit(SqlTriggerDefinition codeObject);
    public virtual void Visit(SqlTriggerEvent codeObject);
    public virtual void Visit(SqlUdtInstanceDataMemberExpression codeObject);
    public virtual void Visit(SqlUdtInstanceMethodExpression codeObject);
    public virtual void Visit(SqlUdtStaticDataMemberExpression codeObject);
    public virtual void Visit(SqlUdtStaticMethodExpression codeObject);
    public virtual void Visit(SqlUnaryScalarExpression codeObject);
    public virtual void Visit(SqlUniqueConstraint codeObject);
    public virtual void Visit(SqlUnpivotClause codeObject);
    public virtual void Visit(SqlUnpivotTableExpression codeObject);
    public virtual void Visit(SqlUnqualifiedJoinTableExpression codeObject);
    public virtual void Visit(SqlUpdateBooleanExpression codeObject);
    public virtual void Visit(SqlUpdateMergeAction codeObject);
    public virtual void Visit(SqlUpdateSpecification codeObject);
    public virtual void Visit(SqlUserDefinedScalarFunctionCallExpression codeObject);
    public virtual void Visit(SqlValuesInsertMergeActionSource codeObject);
    public virtual void Visit(SqlVariableColumnAssignment codeObject);
    public virtual void Visit(SqlVariableDeclaration codeObject);
    public virtual void Visit(SqlViewDefinition codeObject);
    public virtual void Visit(SqlWindowClause codeObject);
    public virtual void Visit(SqlWindowExpression codeObject);
    public virtual void Visit(SqlWindowSpecification codeObject);
    public virtual void Visit(SqlWhereClause codeObject);
    public virtual void Visit(SqlXmlNamespacesDeclaration codeObject);
    public virtual void Visit(SqlAlterFunctionStatement codeObject);
    public virtual void Visit(SqlAlterLoginStatement codeObject);
    public virtual void Visit(SqlAlterProcedureStatement codeObject);
    public virtual void Visit(SqlAlterTriggerStatement codeObject);
    public virtual void Visit(SqlAlterViewStatement codeObject);
    public virtual void Visit(SqlBackupCertificateStatement codeObject);
    public virtual void Visit(SqlBackupDatabaseStatement codeObject);
    public virtual void Visit(SqlBackupLogStatement codeObject);
    public virtual void Visit(SqlBackupMasterKeyStatement codeObject);
    public virtual void Visit(SqlBackupServiceMasterKeyStatement codeObject);
    public virtual void Visit(SqlBackupTableStatement codeObject);
    public virtual void Visit(SqlBreakStatement codeObject);
    public virtual void Visit(SqlCommentStatement codeObject);
    public virtual void Visit(SqlCompoundStatement codeObject);
    public virtual void Visit(SqlContinueStatement codeObject);
    public virtual void Visit(SqlCreateFunctionStatement codeObject);
    public virtual void Visit(SqlCreateIndexStatement codeObject);
    public virtual void Visit(SqlCreateLoginFromAsymKeyStatement codeObject);
    public virtual void Visit(SqlCreateLoginFromCertificateStatement codeObject);
    public virtual void Visit(SqlCreateLoginFromWindowsStatement codeObject);
    public virtual void Visit(SqlCreateLoginWithPasswordStatement codeObject);
    public virtual void Visit(SqlCreateProcedureStatement codeObject);
    public virtual void Visit(SqlCreateRoleStatement codeObject);
    public virtual void Visit(SqlCreateSchemaStatement codeObject);
    public virtual void Visit(SqlCreateSynonymStatement codeObject);
    public virtual void Visit(SqlCreateTableStatement codeObject);
    public virtual void Visit(SqlCreateTriggerStatement codeObject);
    public virtual void Visit(SqlCreateUserDefinedDataTypeStatement codeObject);
    public virtual void Visit(SqlCreateUserDefinedTableTypeStatement codeObject);
    public virtual void Visit(SqlCreateUserDefinedTypeStatement codeObject);
    public virtual void Visit(SqlCreateUserFromAsymKeyStatement codeObject);
    public virtual void Visit(SqlCreateUserFromCertificateStatement codeObject);
    public virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject);
    public virtual void Visit(SqlCreateUserFromLoginStatement codeObject);
    public virtual void Visit(SqlCreateUserFromExternalProviderStatement codeObject);
    public virtual void Visit(SqlCreateUserStatement codeObject);
    public virtual void Visit(SqlCreateUserWithoutLoginStatement codeObject);
    public virtual void Visit(SqlCreateViewStatement codeObject);
    public virtual void Visit(SqlCursorDeclareStatement codeObject);
    public virtual void Visit(SqlDBCCStatement codeObject);
    public virtual void Visit(SqlDeleteStatement codeObject);
    public virtual void Visit(SqlDenyStatement codeObject);
    public virtual void Visit(SqlDropAggregateStatement codeObject);
    public virtual void Visit(SqlDropDatabaseStatement codeObject);
    public virtual void Visit(SqlDropDefaultStatement codeObject);
    public virtual void Visit(SqlDropFunctionStatement codeObject);
    public virtual void Visit(SqlDropLoginStatement codeObject);
    public virtual void Visit(SqlDropProcedureStatement codeObject);
    public virtual void Visit(SqlDropRuleStatement codeObject);
    public virtual void Visit(SqlDropSchemaStatement codeObject);
    public virtual void Visit(SqlDropSecurityPolicyStatement codeObject);
    public virtual void Visit(SqlDropSequenceStatement codeObject);
    public virtual void Visit(SqlDropSynonymStatement codeObject);
    public virtual void Visit(SqlDropTableStatement codeObject);
    public virtual void Visit(SqlDropTriggerStatement codeObject);
    public virtual void Visit(SqlDropTypeStatement codeObject);
    public virtual void Visit(SqlDropUserStatement codeObject);
    public virtual void Visit(SqlDropViewStatement codeObject);
    public virtual void Visit(SqlExecuteModuleStatement codeObject);
    public virtual void Visit(SqlExecuteStringStatement codeObject);
    public virtual void Visit(SqlGrantStatement codeObject);
    public virtual void Visit(SqlIfElseStatement codeObject);
    public virtual void Visit(SqlInlineTableVariableDeclareStatement codeObject);
    public virtual void Visit(SqlInsertStatement codeObject);
    public virtual void Visit(SqlMergeStatement codeObject);
    public virtual void Visit(SqlStatement codeObject);
    public virtual void Visit(SqlRestoreDatabaseStatement codeObject);
    public virtual void Visit(SqlRestoreInformationStatement codeObject);
    public virtual void Visit(SqlRestoreLogStatement codeObject);
    public virtual void Visit(SqlRestoreMasterKeyStatement codeObject);
    public virtual void Visit(SqlRestoreServiceMasterKeyStatement codeObject);
    public virtual void Visit(SqlRestoreTableStatement codeObject);
    public virtual void Visit(SqlReturnStatement codeObject);
    public virtual void Visit(SqlRevokeStatement codeObject);
    public virtual void Visit(SqlSelectStatement codeObject);
    public virtual void Visit(SqlSetAssignmentStatement codeObject);
    public virtual void Visit(SqlSetStatement codeObject);
    public virtual void Visit(SqlTryCatchStatement codeObject);
    public virtual void Visit(SqlUpdateStatement codeObject);
    public virtual void Visit(SqlUseStatement codeObject);
    public virtual void Visit(SqlVariableDeclareStatement codeObject);
    public virtual void Visit(SqlWhileStatement codeObject);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectVisitor`1 : object {
    public virtual T Visit(SqlAggregateFunctionCallExpression codeObject);
    public virtual T Visit(SqlAllAnyComparisonBooleanExpression codeObject);
    public virtual T Visit(SqlAllowPageLocksIndexOption codeObject);
    public virtual T Visit(SqlAllowRowLocksIndexOption codeObject);
    public virtual T Visit(SqlAssignment codeObject);
    public virtual T Visit(SqlAtTimeZoneExpression codeObject);
    public virtual T Visit(SqlBatch codeObject);
    public virtual T Visit(SqlBetweenBooleanExpression codeObject);
    public virtual T Visit(SqlBinaryBooleanExpression codeObject);
    public virtual T Visit(SqlBinaryFilterExpression codeObject);
    public virtual T Visit(SqlBinaryQueryExpression codeObject);
    public virtual T Visit(SqlBinaryScalarExpression codeObject);
    public virtual T Visit(SqlBooleanExpression codeObject);
    public virtual T Visit(SqlBooleanFilterExpression codeObject);
    public virtual T Visit(SqlBuiltinScalarFunctionCallExpression codeObject);
    public virtual T Visit(SqlCastExpression codeObject);
    public virtual T Visit(SqlChangeTrackingContext codeObject);
    public virtual T Visit(SqlCheckConstraint codeObject);
    public virtual T Visit(SqlClrAssemblySpecifier codeObject);
    public virtual T Visit(SqlClrClassSpecifier codeObject);
    public virtual T Visit(SqlClrFunctionBodyDefinition codeObject);
    public virtual T Visit(SqlClrMethodSpecifier codeObject);
    public virtual T Visit(SqlCollateScalarExpression codeObject);
    public virtual T Visit(SqlCollation codeObject);
    public virtual T Visit(SqlColumnAssignment codeObject);
    public virtual T Visit(SqlDefaultConstraint codeObject);
    public virtual T Visit(SqlColumnDefinition codeObject);
    public virtual T Visit(SqlColumnIdentity codeObject);
    public virtual T Visit(SqlColumnRefExpression codeObject);
    public virtual T Visit(SqlCommonTableExpression codeObject);
    public virtual T Visit(SqlComparisonBooleanExpression codeObject);
    public virtual T Visit(SqlCompressionPartitionRange codeObject);
    public virtual T Visit(SqlComputedColumnDefinition codeObject);
    public virtual T Visit(SqlConditionClause codeObject);
    public virtual T Visit(SqlConstraint codeObject);
    public virtual T Visit(SqlConvertExpression codeObject);
    public virtual T Visit(SqlCreateUserOption codeObject);
    public virtual T Visit(SqlCubeGroupByItem codeObject);
    public virtual T Visit(SqlCursorOption codeObject);
    public virtual T Visit(SqlCursorVariableAssignment codeObject);
    public virtual T Visit(SqlCursorVariableRefExpression codeObject);
    public virtual T Visit(SqlDataCompressionIndexOption codeObject);
    public virtual T Visit(SqlDataType codeObject);
    public virtual T Visit(SqlDataTypeSpecification codeObject);
    public virtual T Visit(SqlDdlTriggerDefinition codeObject);
    public virtual T Visit(SqlDefaultValuesInsertMergeActionSource codeObject);
    public virtual T Visit(SqlDefaultValuesInsertSource codeObject);
    public virtual T Visit(SqlDeleteMergeAction codeObject);
    public virtual T Visit(SqlDeleteSpecification codeObject);
    public virtual T Visit(SqlDerivedTableExpression codeObject);
    public virtual T Visit(SqlDistinctPredicateComparisonBooleanExpression codeObject);
    public virtual T Visit(SqlDmlSpecificationTableSource codeObject);
    public virtual T Visit(SqlDmlTriggerDefinition codeObject);
    public virtual T Visit(SqlDropExistingIndexOption codeObject);
    public virtual T Visit(SqlEdgeConstraint codeObject);
    public virtual T Visit(SqlExecuteArgument codeObject);
    public virtual T Visit(SqlExecuteAsClause codeObject);
    public virtual T Visit(SqlExistsBooleanExpression codeObject);
    public virtual T Visit(SqlFillFactorIndexOption codeObject);
    public virtual T Visit(SqlFilterClause codeObject);
    public virtual T Visit(SqlForBrowseClause codeObject);
    public virtual T Visit(SqlForeignKeyConstraint codeObject);
    public virtual T Visit(SqlForXmlAutoClause codeObject);
    public virtual T Visit(SqlForXmlClause codeObject);
    public virtual T Visit(SqlForXmlDirective codeObject);
    public virtual T Visit(SqlForXmlExplicitClause codeObject);
    public virtual T Visit(SqlForXmlPathClause codeObject);
    public virtual T Visit(SqlForXmlRawClause codeObject);
    public virtual T Visit(SqlFromClause codeObject);
    public virtual T Visit(SqlFullTextBooleanExpression codeObject);
    public virtual T Visit(SqlFullTextColumn codeObject);
    public virtual T Visit(SqlFunctionDefinition codeObject);
    public virtual T Visit(SqlGlobalScalarVariableRefExpression codeObject);
    public virtual T Visit(SqlGrandTotalGroupByItem codeObject);
    public virtual T Visit(SqlGrandTotalGroupingSet codeObject);
    public virtual T Visit(SqlGroupByClause codeObject);
    public virtual T Visit(SqlGroupBySets codeObject);
    public virtual T Visit(SqlGroupingSetItemsCollection codeObject);
    public virtual T Visit(SqlHavingClause codeObject);
    public virtual T Visit(SqlIdentifier codeObject);
    public virtual T Visit(SqlIdentityFunctionCallExpression codeObject);
    public virtual T Visit(SqlIgnoreDupKeyIndexOption codeObject);
    public virtual T Visit(SqlInBooleanExpression codeObject);
    public virtual T Visit(SqlInBooleanExpressionCollectionValue codeObject);
    public virtual T Visit(SqlInBooleanExpressionQueryValue codeObject);
    public virtual T Visit(SqlIndexedColumn codeObject);
    public virtual T Visit(SqlIndexHint codeObject);
    public virtual T Visit(SqlIndexOption codeObject);
    public virtual T Visit(SqlInlineIndexConstraint codeObject);
    public virtual T Visit(SqlInlineFunctionBodyDefinition codeObject);
    public virtual T Visit(SqlInlineTableRelationalFunctionDefinition codeObject);
    public virtual T Visit(SqlInlineTableVariableDeclaration codeObject);
    public virtual T Visit(SqlInsertMergeAction codeObject);
    public virtual T Visit(SqlInsertSpecification codeObject);
    public virtual T Visit(SqlIntoClause codeObject);
    public virtual T Visit(SqlIsNullBooleanExpression codeObject);
    public virtual T Visit(SqlJsonObjectArgument codeObject);
    public virtual T Visit(SqlLargeDataStorageInformation codeObject);
    public virtual T Visit(SqlLikeBooleanExpression codeObject);
    public virtual T Visit(SqlLiteralExpression codeObject);
    public virtual T Visit(SqlLoginPassword codeObject);
    public virtual T Visit(SqlMaxDegreeOfParallelismIndexOption codeObject);
    public virtual T Visit(SqlMergeActionClause codeObject);
    public virtual T Visit(SqlMergeSpecification codeObject);
    public virtual T Visit(SqlInsertSource codeObject);
    public virtual T Visit(SqlModuleCalledOnNullInputOption codeObject);
    public virtual T Visit(SqlModuleEncryptionOption codeObject);
    public virtual T Visit(SqlModuleExecuteAsOption codeObject);
    public virtual T Visit(SqlModuleInlineOption codeObject);
    public virtual T Visit(SqlModuleNativeCompilationOption codeObject);
    public virtual T Visit(SqlModuleOption codeObject);
    public virtual T Visit(SqlModuleRecompileOption codeObject);
    public virtual T Visit(SqlModuleReturnsNullOnNullInputOption codeObject);
    public virtual T Visit(SqlModuleSchemaBindingOption codeObject);
    public virtual T Visit(SqlModuleViewMetadataOption codeObject);
    public virtual T Visit(SqlMultistatementFunctionBodyDefinition codeObject);
    public virtual T Visit(SqlMultistatementTableRelationalFunctionDefinition codeObject);
    public virtual T Visit(SqlNotBooleanExpression codeObject);
    public virtual T Visit(SqlNullQualifier codeObject);
    public virtual T Visit(SqlQueryExpression codeObject);
    public virtual T Visit(SqlScalarExpression codeObject);
    public virtual T Visit(SqlTableExpression codeObject);
    public virtual T Visit(SqlObjectIdentifier codeObject);
    public virtual T Visit(SqlObjectReference codeObject);
    public virtual T Visit(SqlOnlineIndexOption codeObject);
    public virtual T Visit(SqlOptimizeForSequentialKeyIndexOption codeObject);
    public virtual T Visit(SqlResumableIndexOption codeObject);
    public virtual T Visit(SqlBucketCountIndexOption codeObject);
    public virtual T Visit(SqlCompressionDelayIndexOption codeObject);
    public virtual T Visit(SqlMaxDurationIndexOption codeObject);
    public virtual T Visit(SqlOffsetFetchClause codeObject);
    public virtual T Visit(SqlOrderByClause codeObject);
    public virtual T Visit(SqlOrderByItem codeObject);
    public virtual T Visit(SqlOutputClause codeObject);
    public virtual T Visit(SqlOutputIntoClause codeObject);
    public virtual T Visit(SqlPadIndexOption codeObject);
    public virtual T Visit(SqlParameterDeclaration codeObject);
    public virtual T Visit(SqlPivotClause codeObject);
    public virtual T Visit(SqlPivotTableExpression codeObject);
    public virtual T Visit(SqlPrimaryKeyConstraint codeObject);
    public virtual T Visit(SqlStorageSpecification codeObject);
    public virtual T Visit(SqlProcedureDefinition codeObject);
    public virtual T Visit(SqlQualifiedJoinTableExpression codeObject);
    public virtual T Visit(SqlQuerySpecification codeObject);
    public virtual T Visit(SqlQueryWithClause codeObject);
    public virtual T Visit(SqlRollupGroupByItem codeObject);
    public virtual T Visit(SqlRowConstructorExpression codeObject);
    public virtual T Visit(SqlScalarClrFunctionDefinition codeObject);
    public virtual T Visit(SqlScalarFunctionReturnType codeObject);
    public virtual T Visit(SqlScalarRefExpression codeObject);
    public virtual T Visit(SqlScalarRelationalFunctionDefinition codeObject);
    public virtual T Visit(SqlScalarSubQueryExpression codeObject);
    public virtual T Visit(SqlScalarVariableAssignment codeObject);
    public virtual T Visit(SqlScalarVariableRefExpression codeObject);
    public virtual T Visit(SqlScript codeObject);
    public virtual T Visit(SqlSearchedCaseExpression codeObject);
    public virtual T Visit(SqlSearchedWhenClause codeObject);
    public virtual T Visit(SqlSelectClause codeObject);
    public virtual T Visit(SqlSelectIntoClause codeObject);
    public virtual T Visit(SqlSelectScalarExpression codeObject);
    public virtual T Visit(SqlSelectSpecification codeObject);
    public virtual T Visit(SqlSelectSpecificationInsertSource codeObject);
    public virtual T Visit(SqlSelectStarExpression codeObject);
    public virtual T Visit(SqlSelectVariableAssignmentExpression codeObject);
    public virtual T Visit(SqlSetClause codeObject);
    public virtual T Visit(SqlSimpleCaseExpression codeObject);
    public virtual T Visit(SqlSimpleGroupByItem codeObject);
    public virtual T Visit(SqlSimpleOrderByClause codeObject);
    public virtual T Visit(SqlSimpleOrderByItem codeObject);
    public virtual T Visit(SqlSimpleWhenClause codeObject);
    public virtual T Visit(SqlSortedDataIndexOption codeObject);
    public virtual T Visit(SqlSortedDataReorgIndexOption codeObject);
    public virtual T Visit(SqlSortInTempDbIndexOption codeObject);
    public virtual T Visit(SqlStatisticsIncrementalIndexOption codeObject);
    public virtual T Visit(SqlStatisticsNoRecomputeIndexOption codeObject);
    public virtual T Visit(SqlStatisticsOnlyIndexOption codeObject);
    public virtual T Visit(SqlTableClrFunctionDefinition codeObject);
    public virtual T Visit(SqlTableConstructorExpression codeObject);
    public virtual T Visit(SqlTableConstructorInsertSource codeObject);
    public virtual T Visit(SqlTableDefinition codeObject);
    public virtual T Visit(SqlTableFunctionReturnType codeObject);
    public virtual T Visit(SqlTableHint codeObject);
    public virtual T Visit(SqlTableRefExpression codeObject);
    public virtual T Visit(SqlTableValuedFunctionRefExpression codeObject);
    public virtual T Visit(SqlTableVariableRefExpression codeObject);
    public virtual T Visit(SqlTableUdtInstanceMethodExpression codeObject);
    public virtual T Visit(SqlTargetTableExpression codeObject);
    public virtual T Visit(SqlTemporalPeriodDefinition codeObject);
    public virtual T Visit(SqlTopSpecification codeObject);
    public virtual T Visit(SqlTriggerAction codeObject);
    public virtual T Visit(SqlTriggerDefinition codeObject);
    public virtual T Visit(SqlTriggerEvent codeObject);
    public virtual T Visit(SqlUdtInstanceDataMemberExpression codeObject);
    public virtual T Visit(SqlUdtInstanceMethodExpression codeObject);
    public virtual T Visit(SqlUdtStaticDataMemberExpression codeObject);
    public virtual T Visit(SqlUdtStaticMethodExpression codeObject);
    public virtual T Visit(SqlUnaryScalarExpression codeObject);
    public virtual T Visit(SqlUniqueConstraint codeObject);
    public virtual T Visit(SqlUnpivotClause codeObject);
    public virtual T Visit(SqlUnpivotTableExpression codeObject);
    public virtual T Visit(SqlUnqualifiedJoinTableExpression codeObject);
    public virtual T Visit(SqlUpdateBooleanExpression codeObject);
    public virtual T Visit(SqlUpdateMergeAction codeObject);
    public virtual T Visit(SqlUpdateSpecification codeObject);
    public virtual T Visit(SqlUserDefinedScalarFunctionCallExpression codeObject);
    public virtual T Visit(SqlValuesInsertMergeActionSource codeObject);
    public virtual T Visit(SqlVariableColumnAssignment codeObject);
    public virtual T Visit(SqlVariableDeclaration codeObject);
    public virtual T Visit(SqlViewDefinition codeObject);
    public virtual T Visit(SqlWindowClause codeObject);
    public virtual T Visit(SqlWindowExpression codeObject);
    public virtual T Visit(SqlWindowSpecification codeObject);
    public virtual T Visit(SqlWhereClause codeObject);
    public virtual T Visit(SqlXmlNamespacesDeclaration codeObject);
    public virtual T Visit(SqlAlterFunctionStatement codeObject);
    public virtual T Visit(SqlAlterLoginStatement codeObject);
    public virtual T Visit(SqlAlterProcedureStatement codeObject);
    public virtual T Visit(SqlAlterTriggerStatement codeObject);
    public virtual T Visit(SqlAlterViewStatement codeObject);
    public virtual T Visit(SqlBackupCertificateStatement codeObject);
    public virtual T Visit(SqlBackupDatabaseStatement codeObject);
    public virtual T Visit(SqlBackupLogStatement codeObject);
    public virtual T Visit(SqlBackupMasterKeyStatement codeObject);
    public virtual T Visit(SqlBackupServiceMasterKeyStatement codeObject);
    public virtual T Visit(SqlBackupTableStatement codeObject);
    public virtual T Visit(SqlBreakStatement codeObject);
    public virtual T Visit(SqlCommentStatement codeObject);
    public virtual T Visit(SqlCompoundStatement codeObject);
    public virtual T Visit(SqlContinueStatement codeObject);
    public virtual T Visit(SqlCreateFunctionStatement codeObject);
    public virtual T Visit(SqlCreateIndexStatement codeObject);
    public virtual T Visit(SqlCreateLoginFromAsymKeyStatement codeObject);
    public virtual T Visit(SqlCreateLoginFromCertificateStatement codeObject);
    public virtual T Visit(SqlCreateLoginFromWindowsStatement codeObject);
    public virtual T Visit(SqlCreateLoginWithPasswordStatement codeObject);
    public virtual T Visit(SqlCreateProcedureStatement codeObject);
    public virtual T Visit(SqlCreateRoleStatement codeObject);
    public virtual T Visit(SqlCreateSchemaStatement codeObject);
    public virtual T Visit(SqlCreateSynonymStatement codeObject);
    public virtual T Visit(SqlCreateTableStatement codeObject);
    public virtual T Visit(SqlCreateTriggerStatement codeObject);
    public virtual T Visit(SqlCreateUserDefinedDataTypeStatement codeObject);
    public virtual T Visit(SqlCreateUserDefinedTableTypeStatement codeObject);
    public virtual T Visit(SqlCreateUserDefinedTypeStatement codeObject);
    public virtual T Visit(SqlCreateUserFromAsymKeyStatement codeObject);
    public virtual T Visit(SqlCreateUserFromCertificateStatement codeObject);
    public virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement codeObject);
    public virtual T Visit(SqlCreateUserFromLoginStatement codeObject);
    public virtual T Visit(SqlCreateUserFromExternalProviderStatement codeObject);
    public virtual T Visit(SqlCreateUserStatement codeObject);
    public virtual T Visit(SqlCreateUserWithoutLoginStatement codeObject);
    public virtual T Visit(SqlCreateViewStatement codeObject);
    public virtual T Visit(SqlCursorDeclareStatement codeObject);
    public virtual T Visit(SqlDBCCStatement codeObject);
    public virtual T Visit(SqlDeleteStatement codeObject);
    public virtual T Visit(SqlDenyStatement codeObject);
    public virtual T Visit(SqlDropAggregateStatement codeObject);
    public virtual T Visit(SqlDropDatabaseStatement codeObject);
    public virtual T Visit(SqlDropDefaultStatement codeObject);
    public virtual T Visit(SqlDropFunctionStatement codeObject);
    public virtual T Visit(SqlDropLoginStatement codeObject);
    public virtual T Visit(SqlDropProcedureStatement codeObject);
    public virtual T Visit(SqlDropRuleStatement codeObject);
    public virtual T Visit(SqlDropSchemaStatement codeObject);
    public virtual T Visit(SqlDropSecurityPolicyStatement codeObject);
    public virtual T Visit(SqlDropSequenceStatement codeObject);
    public virtual T Visit(SqlDropSynonymStatement codeObject);
    public virtual T Visit(SqlDropTableStatement codeObject);
    public virtual T Visit(SqlDropTriggerStatement codeObject);
    public virtual T Visit(SqlDropTypeStatement codeObject);
    public virtual T Visit(SqlDropUserStatement codeObject);
    public virtual T Visit(SqlDropViewStatement codeObject);
    public virtual T Visit(SqlExecuteModuleStatement codeObject);
    public virtual T Visit(SqlExecuteStringStatement codeObject);
    public virtual T Visit(SqlGrantStatement codeObject);
    public virtual T Visit(SqlIfElseStatement codeObject);
    public virtual T Visit(SqlInlineTableVariableDeclareStatement codeObject);
    public virtual T Visit(SqlInsertStatement codeObject);
    public virtual T Visit(SqlMergeStatement codeObject);
    public virtual T Visit(SqlStatement codeObject);
    public virtual T Visit(SqlRestoreDatabaseStatement codeObject);
    public virtual T Visit(SqlRestoreInformationStatement codeObject);
    public virtual T Visit(SqlRestoreLogStatement codeObject);
    public virtual T Visit(SqlRestoreMasterKeyStatement codeObject);
    public virtual T Visit(SqlRestoreServiceMasterKeyStatement codeObject);
    public virtual T Visit(SqlRestoreTableStatement codeObject);
    public virtual T Visit(SqlReturnStatement codeObject);
    public virtual T Visit(SqlRevokeStatement codeObject);
    public virtual T Visit(SqlSelectStatement codeObject);
    public virtual T Visit(SqlSetAssignmentStatement codeObject);
    public virtual T Visit(SqlSetStatement codeObject);
    public virtual T Visit(SqlTryCatchStatement codeObject);
    public virtual T Visit(SqlUpdateStatement codeObject);
    public virtual T Visit(SqlUseStatement codeObject);
    public virtual T Visit(SqlVariableDeclareStatement codeObject);
    public virtual T Visit(SqlWhileStatement codeObject);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCollateScalarExpression : SqlScalarExpression {
    private SqlCollation collation;
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlCollation Collation { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCollateScalarExpression(SqlScalarExpression expression, SqlCollation collation);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlCollation get_Collation();
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCollateScalarExpression/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCollation : SqlCodeObject {
    private ICollation boundCollation;
    private SqlIdentifier name;
    internal bool IsVisitable { get; }
    public ICollation BoundCollation { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier Name { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCollation(SqlIdentifier name);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public ICollation get_BoundCollation();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    public SqlIdentifier get_Name();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCollation/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCollection`1 : object {
    private List`1<T> internalList;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; }
    internal SqlCollection`1(T item);
    internal SqlCollection`1(IEnumerable`1<T> items);
    internal SqlCollection`1(List`1<T> items);
    internal SqlCollection`1(T[] items);
    private SqlCollection`1(IEnumerable`1<T> items, int count);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual T get_Item(int index);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int IndexOf(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnAdditionalInfo : object {
    private SqlSparseOption sparseOption;
    private SqlGeneratedAlwaysType generatedAlwaysType;
    public SqlSparseOption SparseOption { get; }
    public SqlGeneratedAlwaysType GeneratedAlwaysType { get; }
    internal SqlColumnAdditionalInfo(SqlGeneratedAlwaysType generatedAlwaysType);
    internal SqlColumnAdditionalInfo(SqlSparseOption sparseOption);
    public SqlSparseOption get_SparseOption();
    public SqlGeneratedAlwaysType get_GeneratedAlwaysType();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnAssignment : SqlAssignment {
    private SqlScalarRefExpression column;
    private SqlScalarExpression value;
    internal bool IsVisitable { get; }
    public SqlScalarRefExpression Column { get; }
    public SqlScalarExpression Value { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlColumnAssignment(SqlScalarRefExpression column, SqlAssignmentOperatorType operatorType, SqlScalarExpression expr);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlScalarRefExpression get_Column();
    public SqlScalarExpression get_Value();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnAssignment/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnDefinition : SqlCodeObject {
    internal IMutableColumn boundColumn;
    private bool isImplicitTimestamp;
    private SqlIdentifier name;
    private SqlDataTypeSpecification dataType;
    private SqlCollation collation;
    private SqlConstraintCollection constraints;
    private SqlSparseOption sparseOption;
    private SqlGeneratedAlwaysType generatedAlwaysType;
    internal bool IsVisitable { get; }
    public IColumn BoundColumn { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier Name { get; }
    public SqlDataTypeSpecification DataType { get; }
    public SqlCollation Collation { get; }
    public SqlConstraintCollection Constraints { get; }
    public SqlSparseOption SparseOption { get; }
    public SqlGeneratedAlwaysType GeneratedAlwaysType { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal SqlColumnDefinition(SqlIdentifier name);
    internal SqlColumnDefinition(SqlIdentifier name, SqlDataTypeSpecification dataType, SqlCollation collation);
    internal SqlColumnDefinition(SqlIdentifier name, SqlDataTypeSpecification dataType, SqlSparseOption sparseOption);
    internal SqlColumnDefinition(SqlIdentifier name, SqlDataTypeSpecification dataType, SqlCollation collation, SqlSparseOption sparseOption);
    internal SqlColumnDefinition(SqlIdentifier name, SqlDataTypeSpecification dataType, SqlColumnAdditionalInfo colAdditionalInfo);
    internal SqlColumnDefinition(SqlIdentifier name, SqlDataTypeSpecification dataType, SqlCollation collation, SqlColumnAdditionalInfo colAdditionalInfo);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public IColumn get_BoundColumn();
    public virtual IMetadataObject get_BoundObject();
    internal virtual ComputedColumnInfo CreateComputedColumnInfo();
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void BindPhase1(BatchBindingContext bindingContext, IMutableDatabaseTable boundTable);
    internal virtual void BindPhase2(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal void BindPhase3(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal void BindPhase4(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    private bool ValidateGeneratedAlways(IMutableDatabaseTable boundTable, String& errorMessage);
    private bool ValidateSparseOption(IMutableDatabaseTable boundTable, String& errorMessage);
    internal virtual void Unbind();
    private static ColumnConstraintType GetColumnConstraintType(SqlConstraintType constraintType);
    internal void AddConstraints(List`1<SqlConstraint> constraints);
    public SqlIdentifier get_Name();
    public SqlDataTypeSpecification get_DataType();
    public SqlCollation get_Collation();
    public SqlConstraintCollection get_Constraints();
    public SqlSparseOption get_SparseOption();
    public SqlGeneratedAlwaysType get_GeneratedAlwaysType();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnDefinition/<get_Children>d__50")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnDefinitionCollection : SqlCollection`1<SqlColumnDefinition> {
    internal SqlColumnDefinitionCollection(IEnumerable`1<SqlColumnDefinition> definitions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnIdentity : SqlConstraint {
    private SqlLiteralExpression seed;
    private SqlLiteralExpression increment;
    private bool notForReplicationClause;
    internal bool IsVisitable { get; }
    public Nullable`1<int> Seed { get; }
    public Nullable`1<int> Increment { get; }
    public bool NotForReplicationClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlColumnIdentity(SqlLiteralExpression seed, SqlLiteralExpression increment);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    public Nullable`1<int> get_Seed();
    public Nullable`1<int> get_Increment();
    public bool get_NotForReplicationClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnIdentity/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal void AddNotForReplicationClause();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnRefExpression : SqlScalarRefExpression {
    private bool discardColumnPrefix;
    internal bool IsVisitable { get; }
    public IColumn BoundColumn { get; }
    internal ITabular BoundTable { get; }
    public SqlIdentifier ColumnName { get; }
    internal SqlColumnRefExpression(SqlObjectIdentifier objectIdentifier);
    internal SqlColumnRefExpression(SqlObjectIdentifier objectIdentifier, bool discardColumnPrefix);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public IColumn get_BoundColumn();
    internal ITabular get_BoundTable();
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlIdentifier get_ColumnName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlColumnRefExpressionCollection : SqlCollection`1<SqlColumnRefExpression> {
    internal SqlColumnRefExpressionCollection(List`1<SqlColumnRefExpression> items);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCommentStatement : SqlStatement {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCommonTableExpression : SqlTableExpression {
    private CteBindingContext bindingContext;
    private SqlIdentifier name;
    private SqlIdentifierCollection columnList;
    private SqlQueryExpression queryExpression;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    internal TableExpressionName ExpressionName { get; }
    public SqlIdentifier Name { get; }
    public SqlIdentifierCollection ColumnList { get; }
    public SqlQueryExpression QueryExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCommonTableExpression(SqlIdentifier name, List`1<SqlIdentifier> columnList, SqlQueryExpression queryExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual TableExpressionName get_ExpressionName();
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void BindCte(CteBindingContext cteBindingContext);
    internal virtual bool MayChildHaveCompletionList(SqlCodeObject child);
    public SqlIdentifier get_Name();
    public SqlIdentifierCollection get_ColumnList();
    public SqlQueryExpression get_QueryExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCommonTableExpression/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCommonTableExpressionCollection : SqlCollection`1<SqlCommonTableExpression> {
    internal SqlCommonTableExpressionCollection(List`1<SqlCommonTableExpression> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlComparisonBooleanExpression : SqlBooleanExpression {
    private SqlScalarExpression left;
    private SqlScalarExpression right;
    private SqlComparisonBooleanExpressionType comparisonOperator;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Left { get; }
    public SqlScalarExpression Right { get; }
    public SqlComparisonBooleanExpressionType ComparisonOperator { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlComparisonBooleanExpression(SqlScalarExpression leftExpression, SqlComparisonBooleanExpressionType comparisonOp, SqlScalarExpression rightExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_Left();
    public SqlScalarExpression get_Right();
    public SqlComparisonBooleanExpressionType get_ComparisonOperator();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlComparisonBooleanExpression/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlComparisonBooleanExpressionType : Enum {
    public int value__;
    public static SqlComparisonBooleanExpressionType Equals;
    public static SqlComparisonBooleanExpressionType LessThan;
    public static SqlComparisonBooleanExpressionType ValueEqual;
    public static SqlComparisonBooleanExpressionType NotEqual;
    public static SqlComparisonBooleanExpressionType GreaterThan;
    public static SqlComparisonBooleanExpressionType GreaterThanOrEqual;
    public static SqlComparisonBooleanExpressionType LessOrGreaterThan;
    public static SqlComparisonBooleanExpressionType LessThanOrEqual;
    public static SqlComparisonBooleanExpressionType NotLessThan;
    public static SqlComparisonBooleanExpressionType NotGreaterThan;
    public static SqlComparisonBooleanExpressionType RightStarEqualJoin;
    public static SqlComparisonBooleanExpressionType LeftStarEqualJoin;
    public static SqlComparisonBooleanExpressionType IsDistinctFrom;
    public static SqlComparisonBooleanExpressionType IsNotDistinctFrom;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCompoundStatement : SqlStatement {
    private SqlStatementCollection statements;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlStatementCollection Statements { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCompoundStatement(List`1<SqlStatement> statements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlStatementCollection get_Statements();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCompoundStatement/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCompressionDelayIndexOption : SqlIndexOption {
    private int compressionDelay;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public int CompressionDelay { get; }
    internal SqlCompressionDelayIndexOption(SqlLiteralExpression compressionDelay);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public int get_CompressionDelay();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCompressionPartitionRange : SqlCodeObject {
    private SqlScalarExpression from;
    private SqlScalarExpression to;
    internal bool IsVisitable { get; }
    public SqlScalarExpression From { get; }
    public SqlScalarExpression To { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCompressionPartitionRange(SqlScalarExpression from, SqlScalarExpression to);
    internal SqlCompressionPartitionRange(SqlScalarExpression from);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_From();
    public SqlScalarExpression get_To();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCompressionPartitionRange/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCompressionPartitionRangeCollection : SqlCollection`1<SqlCompressionPartitionRange> {
    internal SqlCompressionPartitionRangeCollection(IEnumerable`1<SqlCompressionPartitionRange> partitions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlComputedColumnDefinition : SqlColumnDefinition {
    private static SqlConstraintType ValidAlways;
    private static SqlConstraintType ValidIfPersisted;
    private static SqlConstraintType ValidTypes;
    private LocalBindingContext localBindingContext;
    private SqlScalarExpression expression;
    private bool isPersisted;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    public SqlScalarExpression Expression { get; }
    public bool IsPersisted { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlComputedColumnDefinition(SqlIdentifier name, SqlScalarExpression expression, bool isPersisted);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual ComputedColumnInfo CreateComputedColumnInfo();
    internal virtual void BindPhase2(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal virtual void Unbind();
    public SqlScalarExpression get_Expression();
    public bool get_IsPersisted();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlComputedColumnDefinition/<get_Children>d__23")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConditionalStatement : SqlStatement {
    private SqlBooleanExpression condition;
    private SqlStatement trueStatement;
    internal bool IsConditionalStatement { get; }
    public SqlBooleanExpression Condition { get; }
    public SqlStatement TrueStatement { get; }
    internal SqlConditionalStatement(SqlBooleanExpression condition, SqlStatement trueStatement);
    internal sealed virtual bool get_IsConditionalStatement();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlBooleanExpression get_Condition();
    public SqlStatement get_TrueStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConditionClause : SqlCodeObject {
    private SqlBooleanExpression expression;
    internal bool IsVisitable { get; }
    public SqlBooleanExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlConditionClause(SqlBooleanExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlBooleanExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConditionClause/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConstraint : SqlCodeObject {
    private SqlIdentifier name;
    private SqlConstraintType type;
    public SqlIdentifier Name { get; internal set; }
    public SqlConstraintType Type { get; }
    internal SqlConstraint(SqlConstraintType type);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal abstract virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal abstract virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    public SqlIdentifier get_Name();
    internal void set_Name(SqlIdentifier value);
    public SqlConstraintType get_Type();
    public virtual string ToString();
    internal static SqlConstraint Null();
    internal static SqlConstraint NotNull();
    internal static SqlConstraint RowGuidCol();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConstraintCollection : SqlCollection`1<SqlConstraint> {
    internal SqlConstraintCollection(IEnumerable`1<SqlConstraint> constraints);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConstraintType : Enum {
    public short value__;
    public static SqlConstraintType Null;
    public static SqlConstraintType NotNull;
    public static SqlConstraintType PrimaryKey;
    public static SqlConstraintType Unique;
    public static SqlConstraintType Identity;
    public static SqlConstraintType Default;
    public static SqlConstraintType Check;
    public static SqlConstraintType ForeignKey;
    public static SqlConstraintType RowGuidCol;
    public static SqlConstraintType Edge;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlContinueStatement : SqlStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConvertExpression : SqlCastExpression {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlConvertExpression(string name, SqlDataTypeSpecification dataType, SqlScalarExpression argument1, SqlScalarExpression argument2);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlConvertExpression/<get_Children>d__10")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterFunctionStatementBase : SqlDdlStatement {
    private FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> boundFunction;
    private SqlFunctionDefinition definition;
    private bool isOrAlterStatement;
    internal bool IsModuleStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public IUserDefinedFunction BoundFunction { get; }
    public IMetadataObject BoundObject { get; }
    public SqlFunctionDefinition Definition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateAlterFunctionStatementBase(SqlFunctionDefinition definition);
    internal SqlCreateAlterFunctionStatementBase(SqlFunctionDefinition definition, bool isOrAlterStatement);
    internal sealed virtual bool get_IsModuleStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public IUserDefinedFunction get_BoundFunction();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    private static FunctionUnion`3<IScalarValuedFunction, ITableValuedFunction, IUserDefinedFunction> FindFunctionMetadataObject(BatchBindingContext bindingContext, string schemaName, string functionName, LexicalScope lexicalScope);
    private static void ExecuteCreate(SchemaEx schema, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> function, IBindFinalizer finalizer, StatementBindMode bindMode);
    private static void ExecuteAlter(SchemaEx schema, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> function, LexicalScope lexicalScope);
    private static bool CanExecuteAlter(FunctionUnion`3<IScalarValuedFunction, ITableValuedFunction, IUserDefinedFunction> existingFunction, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> newFunction);
    private static void DoExecuteAlter(FunctionUnion`3<IScalarValuedFunction, ITableValuedFunction, IUserDefinedFunction> existingFunction, SqlCreateAlterFunctionStatementBase sqlCreateAlterFunctionStatementBase, BatchBindingContext bindingContext, LexicalScope execScope);
    public SqlFunctionDefinition get_Definition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterFunctionStatementBase/<get_Children>d__26")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterProcedureStatementBase : SqlDdlStatement {
    private IMutableStoredProcedure boundStoredProc;
    private SqlProcedureDefinition definition;
    private SqlStatementCollection statements;
    private bool isOrAlterStatement;
    internal bool IsTrueLastStatement { get; }
    internal bool IsModuleStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public IStoredProcedure BoundStoredProc { get; }
    public IMetadataObject BoundObject { get; }
    public SqlProcedureDefinition Definition { get; }
    public SqlStatementCollection Statements { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateAlterProcedureStatementBase(SqlProcedureDefinition definition, List`1<SqlStatement> statements);
    internal SqlCreateAlterProcedureStatementBase(SqlProcedureDefinitionForCreate definition, List`1<SqlStatement> statements);
    internal sealed virtual bool get_IsTrueLastStatement();
    internal sealed virtual bool get_IsModuleStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public IStoredProcedure get_BoundStoredProc();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    private static void DoExecuteAlter(IStoredProcedure alterProc, SqlCreateAlterProcedureStatementBase sqlCreateAlterProcedureStatementBase, BatchBindingContext bindingContext, LexicalScope execScope);
    public SqlProcedureDefinition get_Definition();
    public SqlStatementCollection get_Statements();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterProcedureStatementBase/<get_Children>d__27")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterTriggerStatementBase : SqlDdlStatement {
    private TriggerUnion`4<IMutableDmlTrigger, IMutableDatabaseDdlTrigger, IMutableServerDdlTrigger, IMutableTrigger> boundTrigger;
    private ITableViewBase boundTable;
    private bool executionSuccedded;
    private SqlTriggerDefinition definition;
    private SqlStatementCollection statements;
    private bool isOrAlterStatement;
    internal bool IsTrueLastStatement { get; }
    internal bool IsModuleStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public ITrigger BoundTrigger { get; }
    public IMetadataObject BoundObject { get; }
    public SqlTriggerDefinition Definition { get; }
    public SqlStatementCollection Statements { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateAlterTriggerStatementBase(SqlTriggerDefinition definition, List`1<SqlStatement> statements);
    internal sealed virtual bool get_IsTrueLastStatement();
    internal sealed virtual bool get_IsModuleStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public ITrigger get_BoundTrigger();
    public virtual IMetadataObject get_BoundObject();
    private static IMutableTableViewBase GetAlterable(SchemaEx schema, ITableViewBase tableOrView, LexicalScope lexicalScope, StatementBindMode bindMode);
    private void InitiateBindDmlTrigger(BatchBindingContext bindingContext, StatementBindMode bindMode);
    private void InitiateBindDatabaseDdlTrigger(BatchBindingContext bindingContext, StatementBindMode bindMode);
    private void InitiateBindServerDdlTrigger(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    private static SchemaEx GetSchema(ITableViewBase targetTable, IDmlTrigger existingTrigger, ITableViewBase existingTriggerTarget, SqlCreateAlterTriggerStatementBase sqlCreateAlterTriggerStatementBase, BatchBindingContext bindingContext, LexicalScope execScope);
    private static void DoExecuteAlterDmlTrigger(ITableViewBase targetTable, ITableViewBase existingTriggerTarget, IMutableDmlTrigger trigger, SqlCreateAlterTriggerStatementBase sqlCreateAlterTriggerStatementBase, SchemaEx schema, BatchBindingContext bindingContext, LexicalScope execScope, StatementBindMode bindMode);
    private static void DoExecuteAlterDatabaseTrigger(DatabaseEx database, IMutableDatabaseDdlTrigger trigger, SqlCreateAlterTriggerStatementBase sqlCreateAlterTriggerStatementBase, LexicalScope execScope);
    private static void DoExecuteAlterServerTrigger(ServerEx server, IMutableServerDdlTrigger trigger, SqlCreateAlterTriggerStatementBase sqlCreateAlterTriggerStatementBase, LexicalScope execScope);
    public SqlTriggerDefinition get_Definition();
    public SqlStatementCollection get_Statements();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterTriggerStatementBase/<get_Children>d__35")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterViewStatementBase : SqlDdlStatement {
    private IMutableView boundView;
    private bool isOrAlterStatement;
    private SqlViewDefinition definition;
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public IView BoundView { get; }
    public IMetadataObject BoundObject { get; }
    public SqlViewDefinition Definition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateAlterViewStatementBase(SqlViewDefinition definition);
    internal SqlCreateAlterViewStatementBase(SqlViewDefinition definition, bool isOrAlterStatement);
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public IView get_BoundView();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    private static void DoExecuteAlter(IView alterView, SqlCreateAlterViewStatementBase sqlCreateAlterViewStatementBase, BatchBindingContext bindingContext, LexicalScope execScope);
    public SqlViewDefinition get_Definition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateAlterViewStatementBase/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateFunctionStatement : SqlCreateAlterFunctionStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlCreateFunctionStatement(SqlFunctionDefinition definition);
    internal SqlCreateFunctionStatement(SqlFunctionDefinition definition, bool isOrAlterStatement);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateIndexStatement : SqlDdlStatement {
    private static int MaxKeyColumnCount;
    private IMutableRelationalIndex boundIndex;
    private ITableViewBase boundTable;
    private bool executionSuccedded;
    private IMutableTableViewBase alteredTable;
    private IRelationalIndexProxy proxyIndex;
    private bool isUnique;
    private SqlClusterOption clusterOption;
    private SqlIdentifier name;
    private SqlObjectIdentifier targetObject;
    private SqlIndexedColumnCollection indexedColumns;
    private SqlIdentifierCollection includedColumns;
    private SqlFilterClause filterClause;
    private SqlIndexOptionCollection options;
    private SqlStorageSpecification storageSpecification;
    private SqlStorageSpecification fileStreamStorageSpecification;
    private bool isValid;
    private bool hasDropExistingOption;
    private static IEnumerable`1<SqlIndexedColumn> EmptySqlIndexedColumn;
    private static IEnumerable`1<SqlIdentifier> EmptySqlIdentifier;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public IRelationalIndex BoundIndex { get; }
    public IMetadataObject BoundObject { get; }
    internal bool HasDropExistingOption { get; }
    public bool IsUnique { get; }
    public SqlClusterOption ClusterOption { get; }
    public SqlIdentifier Name { get; }
    public SqlObjectIdentifier TargetObject { get; }
    public SqlIndexedColumnCollection IndexedColunms { get; }
    public SqlIdentifierCollection IncludedColumns { get; }
    public SqlFilterClause FilterClause { get; }
    public SqlIndexOptionCollection Options { get; }
    public SqlStorageSpecification StorageSpecification { get; }
    public SqlStorageSpecification FileStream { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal bool IsValid { get; }
    internal SqlCreateIndexStatement(CreateIndexStart createIndexStart, SqlIdentifier name, SqlObjectIdentifier targetObject, CreateIndexKeyList createIndexKeyList, SqlFilterClause filterClause, IEnumerable`1<SqlIndexOption> options, SqlStorageSpecification storageSpecification, SqlStorageSpecification fileStreamStorageSpecification);
    internal SqlCreateIndexStatement(bool isUnique, SqlClusterOption clusterOption, SqlIdentifier name, SqlObjectIdentifier targetObject, IEnumerable`1<SqlIndexedColumn> indexedColumns, IEnumerable`1<SqlIdentifier> includedColumns, SqlFilterClause filterClause, IEnumerable`1<SqlIndexOption> options, SqlStorageSpecification storageSpecification, SqlStorageSpecification fileStreamStorageSpecification);
    private static SqlCreateIndexStatement();
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public IRelationalIndex get_BoundIndex();
    public virtual IMetadataObject get_BoundObject();
    private static IMutableTableViewBase GetAlterable(SchemaEx schema, ITableViewBase tableOrView, LexicalScope lexicalScope, StatementBindMode bindMode);
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    private IMutableIndexedColumn CreateAndAddIndexedColumn(IIndexFactory factory, SqlIdentifier columnName, bool isKeyColumn);
    private void ValidateIndexedColumnType(IIndexedColumn column, SqlIdentifier columnName, Boolean& mustBeOffline);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    public static void BindIndexOptions(SqlIndexOptionCollection options, IMutableRelationalIndex boundIndex, Boolean& mustBeOnline);
    internal virtual void PostBindFinalize();
    internal virtual void Unbind();
    internal bool get_HasDropExistingOption();
    public bool get_IsUnique();
    public SqlClusterOption get_ClusterOption();
    public SqlIdentifier get_Name();
    public SqlObjectIdentifier get_TargetObject();
    public SqlIndexedColumnCollection get_IndexedColunms();
    public SqlIdentifierCollection get_IncludedColumns();
    public SqlFilterClause get_FilterClause();
    public SqlIndexOptionCollection get_Options();
    public SqlStorageSpecification get_StorageSpecification();
    public SqlStorageSpecification get_FileStream();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateIndexStatement/<get_Children>d__78")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal bool get_IsValid();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginFromAsymKeyStatement : SqlCreateLoginStatement {
    private SqlIdentifier asymKeyName;
    private SqlIdentifier credential;
    internal bool IsVisitable { get; }
    internal LoginType MetadataLoginType { get; }
    public SqlIdentifier AsymKeyName { get; }
    public SqlIdentifier Credential { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateLoginFromAsymKeyStatement(SqlIdentifier loginName, SqlIdentifier asymKeyName, List`1<SqlLoginOption> options);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual LoginType get_MetadataLoginType();
    internal virtual void BindLogin(BatchBindingContext bindingContext, IMutableLogin login, bool setBuildProperties);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_AsymKeyName();
    public SqlIdentifier get_Credential();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginFromAsymKeyStatement/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginFromCertificateStatement : SqlCreateLoginStatement {
    private SqlIdentifier certificateName;
    private SqlIdentifier credential;
    internal bool IsVisitable { get; }
    internal LoginType MetadataLoginType { get; }
    public SqlIdentifier CertificateName { get; }
    public SqlIdentifier Credential { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateLoginFromCertificateStatement(SqlIdentifier loginName, SqlIdentifier certificateName, List`1<SqlLoginOption> options);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual LoginType get_MetadataLoginType();
    internal virtual void BindLogin(BatchBindingContext bindingContext, IMutableLogin login, bool setBuildProperties);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_CertificateName();
    public SqlIdentifier get_Credential();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginFromCertificateStatement/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginFromWindowsStatement : SqlCreateLoginStatement {
    private SqlIdentifier defaultDatabase;
    private SqlIdentifier defaultLanguage;
    internal bool IsVisitable { get; }
    internal LoginType MetadataLoginType { get; }
    public SqlIdentifier DefaultDatabase { get; }
    public SqlIdentifier DefaultLanguage { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateLoginFromWindowsStatement(SqlIdentifier loginName, List`1<SqlLoginOption> options);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual LoginType get_MetadataLoginType();
    internal virtual void BindLogin(BatchBindingContext bindingContext, IMutableLogin login, bool setBuildProperties);
    public SqlIdentifier get_DefaultDatabase();
    public SqlIdentifier get_DefaultLanguage();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginFromWindowsStatement/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginStatement : SqlDdlStatement {
    private IMutableLogin boundLogin;
    private SqlIdentifier name;
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    internal LoginType MetadataLoginType { get; }
    public ILogin BoundLogin { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier Name { get; }
    internal SqlCreateLoginStatement(SqlIdentifier name);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal abstract virtual LoginType get_MetadataLoginType();
    public ILogin get_BoundLogin();
    public virtual IMetadataObject get_BoundObject();
    internal IAsymmetricKey BindAsymmetricKey(BatchBindingContext bindingContext, SqlIdentifier asymmetricKeyId);
    internal ICredential BindCredential(BatchBindingContext bindingContext, SqlIdentifier credentialId);
    internal ICertificate BindCertificate(BatchBindingContext bindingContext, SqlIdentifier certificateId);
    internal IDatabase BindDatabase(BatchBindingContext bindingContext, SqlIdentifier databaseId);
    internal abstract virtual void BindLogin(BatchBindingContext bindingContext, IMutableLogin login, bool setBuildProperties);
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal sealed virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    public SqlIdentifier get_Name();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginWithPasswordStatement : SqlCreateLoginStatement {
    private LoginOptions options;
    private SqlLoginPassword sqlPassword;
    internal bool IsVisitable { get; }
    internal LoginType MetadataLoginType { get; }
    public SqlLoginPassword SqlPassword { get; }
    public SqlLiteralExpression Sid { get; }
    public SqlIdentifier DefaultDatabase { get; }
    public SqlIdentifier DefaultLanguage { get; }
    public SqlIdentifier Credential { get; }
    public SqlOnOffValue CheckExpiration { get; }
    public SqlOnOffValue CheckPolicy { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateLoginWithPasswordStatement(SqlIdentifier loginName, SqlLoginPassword sqlPassword, List`1<SqlLoginOption> options);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual LoginType get_MetadataLoginType();
    internal virtual void BindLogin(BatchBindingContext bindingContext, IMutableLogin login, bool setBuildProperties);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlLoginPassword get_SqlPassword();
    public SqlLiteralExpression get_Sid();
    public SqlIdentifier get_DefaultDatabase();
    public SqlIdentifier get_DefaultLanguage();
    public SqlIdentifier get_Credential();
    public SqlOnOffValue get_CheckExpiration();
    public SqlOnOffValue get_CheckPolicy();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateLoginWithPasswordStatement/<get_Children>d__32")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateProcedureStatement : SqlCreateAlterProcedureStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlCreateProcedureStatement(SqlProcedureDefinition definition, List`1<SqlStatement> statements);
    internal SqlCreateProcedureStatement(SqlProcedureDefinitionForCreate definition, List`1<SqlStatement> statements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateRoleStatement : SqlDdlStatement {
    private IMutableDatabaseRole boundRole;
    private SqlIdentifier name;
    private SqlIdentifier owner;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public IDatabaseRole BoundRole { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier Name { get; }
    public SqlIdentifier Owner { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateRoleStatement(SqlIdentifier name, SqlIdentifier owner);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public IDatabaseRole get_BoundRole();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    public SqlIdentifier get_Name();
    public SqlIdentifier get_Owner();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateRoleStatement/<get_Children>d__36")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateSchemaStatement : SqlDdlStatement {
    private IMutableSchema boundSchema;
    private SqlIdentifier name;
    private SqlIdentifier owner;
    private SqlSchemaElementCollection schemaElements;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public ISchema BoundSchema { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier Name { get; }
    public SqlIdentifier Owner { get; }
    public SqlSchemaElementCollection SchemaElements { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateSchemaStatement(SqlIdentifier name, SqlIdentifier owner, IEnumerable`1<SqlStatement> schemaElements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public ISchema get_BoundSchema();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    public SqlIdentifier get_Name();
    public SqlIdentifier get_Owner();
    public SqlSchemaElementCollection get_SchemaElements();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateSchemaStatement/<get_Children>d__39")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateSynonymStatement : SqlDdlStatement {
    private IMutableSynonym boundSynonym;
    private SqlObjectIdentifier name;
    private SqlObjectIdentifier baseObjectName;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public ISynonym BoundSynonym { get; }
    public IMetadataObject BoundObject { get; }
    public SqlObjectIdentifier Name { get; }
    public SqlObjectIdentifier BaseObjectName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateSynonymStatement(SqlObjectIdentifier name, SqlObjectIdentifier baseObjectName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public ISynonym get_BoundSynonym();
    public virtual IMetadataObject get_BoundObject();
    internal sealed virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    private static string SqlObjectIdentifierToString(SqlObjectIdentifier objectIdentifier);
    public SqlObjectIdentifier get_Name();
    public SqlObjectIdentifier get_BaseObjectName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateSynonymStatement/<get_Children>d__37")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateTableStatement : SqlDdlStatement {
    private IMutableTable boundTable;
    private SqlObjectIdentifier name;
    private SqlTableDefinition definition;
    private SqlStorageSpecification storageSpecification;
    private SqlLargeDataStorageInformation largeDataStorageInformation;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public ITabular BoundTable { get; }
    public IMetadataObject BoundObject { get; }
    public SqlObjectIdentifier Name { get; }
    public SqlTableDefinition Definition { get; }
    public SqlStorageSpecification StorageSpecification { get; }
    public SqlLargeDataStorageInformation LargeDataStorageInformation { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateTableStatement(SqlObjectIdentifier name, SqlTableDefinition definition, SqlStorageSpecification storageSpecification, SqlLargeDataStorageInformation largeDataStorageInformation);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public ITabular get_BoundTable();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    public SqlObjectIdentifier get_Name();
    public SqlTableDefinition get_Definition();
    public SqlStorageSpecification get_StorageSpecification();
    public SqlLargeDataStorageInformation get_LargeDataStorageInformation();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateTableStatement/<get_Children>d__42")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateTriggerStatement : SqlCreateAlterTriggerStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlCreateTriggerStatement(SqlTriggerDefinition definition, List`1<SqlStatement> statements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateTypeStatement : SqlDdlStatement {
    private UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> boundDataType;
    private SqlObjectIdentifier name;
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public IUserDefinedType BoundDataType { get; }
    public IMetadataObject BoundObject { get; }
    public SqlObjectIdentifier Name { get; }
    internal SqlCreateTypeStatement(SqlObjectIdentifier name);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    public IUserDefinedType get_BoundDataType();
    public virtual IMetadataObject get_BoundObject();
    internal abstract virtual void BindType(BatchBindingContext bindingContext, UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> userDefinedType);
    internal abstract virtual UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> CreateType(IUserDefinedTypeFactory factory, ISchema schema);
    internal sealed virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    private static void ExecuteCreate(SchemaEx schema, UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> userDefinedType, IBindFinalizer finalizer, StatementBindMode bindMode);
    internal virtual void Unbind();
    internal static SqlCreateTypeStatement Create(SqlObjectIdentifier name, CreateTypeStatementInfo createTypeStatementInfo);
    public SqlObjectIdentifier get_Name();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserDefinedDataTypeStatement : SqlCreateTypeStatement {
    private SqlDataTypeSpecification dataType;
    private SqlUserDefinedDataTypeNullState nullState;
    internal bool IsVisitable { get; }
    public SqlDataTypeSpecification DataType { get; }
    public SqlUserDefinedDataTypeNullState NullState { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserDefinedDataTypeStatement(SqlObjectIdentifier name, SqlDataTypeSpecification dataType, SqlUserDefinedDataTypeNullState nullState);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void BindType(BatchBindingContext bindingContext, UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> userDefinedType);
    internal virtual UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> CreateType(IUserDefinedTypeFactory factory, ISchema schema);
    public SqlDataTypeSpecification get_DataType();
    public SqlUserDefinedDataTypeNullState get_NullState();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserDefinedDataTypeStatement/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserDefinedTableTypeStatement : SqlCreateTypeStatement {
    private SqlTableDefinition tableDefinition;
    internal bool IsVisitable { get; }
    public SqlTableDefinition TableDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserDefinedTableTypeStatement(SqlObjectIdentifier name, SqlTableDefinition tableDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void BindType(BatchBindingContext bindingContext, UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> userDefinedType);
    internal virtual UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> CreateType(IUserDefinedTypeFactory factory, ISchema schema);
    public SqlTableDefinition get_TableDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserDefinedTableTypeStatement/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserDefinedTypeStatement : SqlCreateTypeStatement {
    private SqlClrClassSpecifier clrClassSpecifier;
    internal bool IsVisitable { get; }
    public SqlClrClassSpecifier ClrClassSpecifier { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserDefinedTypeStatement(SqlObjectIdentifier name, SqlClrClassSpecifier clrClassSpecifier);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void BindType(BatchBindingContext bindingContext, UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> userDefinedType);
    internal virtual UserDefinedTypeUnion`4<IMutableUserDefinedDataType, IMutableUserDefinedTableType, IMutableUserDefinedClrType, IUserDefinedType> CreateType(IUserDefinedTypeFactory factory, ISchema schema);
    public SqlClrClassSpecifier get_ClrClassSpecifier();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserDefinedTypeStatement/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromAsymKeyStatement : SqlCreateUserStatement {
    private SqlIdentifier asymKeyName;
    internal bool IsVisitable { get; }
    internal UserType MetadataUserType { get; }
    public SqlIdentifier AsymKeyName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserFromAsymKeyStatement(SqlIdentifier userName, SqlIdentifier asymKeyName, SqlIdentifier defaultSchema);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual UserType get_MetadataUserType();
    internal virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_AsymKeyName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromAsymKeyStatement/<get_Children>d__19")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromCertificateStatement : SqlCreateUserStatement {
    private SqlIdentifier certificateName;
    internal bool IsVisitable { get; }
    internal UserType MetadataUserType { get; }
    public SqlIdentifier CertificateName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserFromCertificateStatement(SqlIdentifier userName, SqlIdentifier certificateName, SqlIdentifier defaultSchema);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual UserType get_MetadataUserType();
    internal virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_CertificateName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromCertificateStatement/<get_Children>d__19")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromExternalProviderStatement : SqlCreateUserStatement {
    internal bool IsVisitable { get; }
    internal UserType MetadataUserType { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserFromExternalProviderStatement(SqlIdentifier userName, SqlIdentifier defaultSchema);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual UserType get_MetadataUserType();
    internal virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromExternalProviderStatement/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromLoginStatement : SqlCreateUserStatement {
    private SqlIdentifier loginName;
    internal bool IsVisitable { get; }
    internal UserType MetadataUserType { get; }
    public SqlIdentifier LoginName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserFromLoginStatement(SqlIdentifier userName, SqlIdentifier loginName, SqlIdentifier defaultSchema);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual UserType get_MetadataUserType();
    internal virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_LoginName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserFromLoginStatement/<get_Children>d__19")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserOption : SqlCodeObject {
    private SqlCreateUserOptionType type;
    private SqlIdentifier value;
    [CompilerGeneratedAttribute]
private SqlOnOffValue <OnOffValue>k__BackingField;
    internal bool IsVisitable { get; }
    public SqlCreateUserOptionType Type { get; }
    public SqlIdentifier Value { get; }
    public SqlOnOffValue OnOffValue { get; private set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public SqlCreateUserOption(StringToken stringToken, SqlIdentifier value);
    public SqlCreateUserOption(StringToken stringToken, SqlLiteralExpression literalExpression);
    public SqlCreateUserOption(StringToken stringToken, SqlOnOffValue onOffValue);
    private SqlCreateUserOption(StringToken stringToken);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlCreateUserOptionType get_Type();
    public SqlIdentifier get_Value();
    [CompilerGeneratedAttribute]
public SqlOnOffValue get_OnOffValue();
    [CompilerGeneratedAttribute]
private void set_OnOffValue(SqlOnOffValue value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserOption/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private SqlCreateUserOptionType GetType(StringToken stringToken);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserOptionType : Enum {
    public int value__;
    public static SqlCreateUserOptionType Invalid;
    public static SqlCreateUserOptionType DefaultLanguage;
    public static SqlCreateUserOptionType DefaultSchema;
    public static SqlCreateUserOptionType Password;
    public static SqlCreateUserOptionType Sid;
    public static SqlCreateUserOptionType AllowEncryptedValueModifications;
    public static SqlCreateUserOptionType UserType;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserStatement : SqlDdlStatement {
    private IMutableUser boundUser;
    private SqlIdentifier name;
    private SqlIdentifier defaultSchema;
    [CompilerGeneratedAttribute]
private SqlIdentifier <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <SidType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOnOffValue <AllowEncryptedValueModifications>k__BackingField;
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    internal UserType MetadataUserType { get; }
    public IUser BoundUser { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier Name { get; }
    public SqlIdentifier DefaultSchema { get; }
    public SqlIdentifier Sid { get; private set; }
    public SqlIdentifier SidType { get; private set; }
    public SqlOnOffValue AllowEncryptedValueModifications { get; private set; }
    internal SqlCreateUserStatement(SqlIdentifier name, SqlIdentifier defaultSchema);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal abstract virtual UserType get_MetadataUserType();
    public IUser get_BoundUser();
    public virtual IMetadataObject get_BoundObject();
    internal IAsymmetricKey BindAsymmetricKey(BatchBindingContext bindingContext, SqlIdentifier asymmetricKeyId);
    internal ICertificate BindCertificate(BatchBindingContext bindingContext, SqlIdentifier certificateId);
    internal ILogin BindLogin(BatchBindingContext bindingContext, SqlIdentifier loginId);
    internal abstract virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    internal sealed virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal sealed virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    public SqlIdentifier get_Name();
    public SqlIdentifier get_DefaultSchema();
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_SidType();
    [CompilerGeneratedAttribute]
private void set_SidType(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlOnOffValue get_AllowEncryptedValueModifications();
    [CompilerGeneratedAttribute]
private void set_AllowEncryptedValueModifications(SqlOnOffValue value);
    internal static SqlCreateUserStatement CreateFromFactory(CreateUserStatementFactory factory, SqlIdentifier userName, SqlIdentifier defaultSchema);
    internal static SqlCreateUserStatement CreateFromFactory(CreateUserStatementFactory factory, SqlIdentifier userName, IEnumerable`1<SqlCreateUserOption> createUserOptions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserStatementError : SqlCreateUserStatement {
    internal bool IsVisitable { get; }
    internal UserType MetadataUserType { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserStatementError(SqlIdentifier userName, SqlIdentifier defaultSchema);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual UserType get_MetadataUserType();
    internal virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserStatementError/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserWithImplicitAuthenticationStatement : SqlCreateUserStatement {
    private SqlIdentifier defaultLanguage;
    private string password;
    internal bool IsVisitable { get; }
    internal UserType MetadataUserType { get; }
    public SqlIdentifier DefaultLanguage { get; }
    public string Password { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserWithImplicitAuthenticationStatement(SqlIdentifier userName, SqlIdentifier defaultSchema, SqlIdentifier defaultLanguage, string password);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual UserType get_MetadataUserType();
    internal virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_DefaultLanguage();
    public string get_Password();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserWithImplicitAuthenticationStatement/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserWithoutLoginStatement : SqlCreateUserStatement {
    internal bool IsVisitable { get; }
    internal UserType MetadataUserType { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCreateUserWithoutLoginStatement(SqlIdentifier userName, SqlIdentifier defaultSchema);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual UserType get_MetadataUserType();
    internal virtual void BindUser(BatchBindingContext bindingContext, IMutableUser user);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateUserWithoutLoginStatement/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCreateViewStatement : SqlCreateAlterViewStatementBase {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal SqlCreateViewStatement(SqlViewDefinition definition);
    internal SqlCreateViewStatement(SqlViewDefinition definition, bool isOrAlterStatement);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCubeGroupByItem : SqlGroupingSetItem {
    private SqlCubeRollupArgumentCollection items;
    internal bool IsVisitable { get; }
    public SqlCubeRollupArgumentCollection Items { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlCubeGroupByItem(List`1<SqlSimpleGroupByItem> items);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlCubeRollupArgumentCollection get_Items();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCubeGroupByItem/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCubeRollupArgumentCollection : SqlCollection`1<SqlSimpleGroupByItem> {
    internal SqlCubeRollupArgumentCollection(IEnumerable`1<SqlSimpleGroupByItem> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorDeclareStatement : SqlDeclareStatement {
    private SqlIdentifier name;
    private List`1<SqlCursorOption> options;
    private SqlSelectStatement selectStatement;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlIdentifier Name { get; }
    public SqlSelectStatement SelectStatement { get; }
    public IEnumerable`1<SqlCursorOption> Options { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public SqlCursorDeclareStatement(SqlIdentifier name, List`1<SqlCursorOption> options, CursorDefinitionInfo definitionInfo);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlIdentifier get_Name();
    public SqlSelectStatement get_SelectStatement();
    public IEnumerable`1<SqlCursorOption> get_Options();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorDeclareStatement/<get_Children>d__23")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorOption : SqlCodeObject {
    private SqlCursorOptionType type;
    internal bool IsVisitable { get; }
    public SqlCursorOptionType Type { get; }
    public SqlCursorOption(StringToken token);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlCursorOptionType get_Type();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorOptionType : Enum {
    public int value__;
    public static SqlCursorOptionType Invalid;
    public static SqlCursorOptionType Insensitive;
    public static SqlCursorOptionType Scroll;
    public static SqlCursorOptionType Local;
    public static SqlCursorOptionType Global;
    public static SqlCursorOptionType ForwardOnly;
    public static SqlCursorOptionType Static;
    public static SqlCursorOptionType Keyset;
    public static SqlCursorOptionType Dynamic;
    public static SqlCursorOptionType FastForward;
    public static SqlCursorOptionType ReadOnly;
    public static SqlCursorOptionType ScrollLocks;
    public static SqlCursorOptionType Optimistic;
    public static SqlCursorOptionType TypeWarning;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorVariableAssignment : SqlVariableAssignment {
    private SqlCursorVariableRefExpression variable;
    private SqlSelectStatement selectStatement;
    private List`1<SqlCursorOption> options;
    internal bool IsVisitable { get; }
    internal bool IsStatementLevelObject { get; }
    public SqlCursorVariableRefExpression Variable { get; }
    public SqlSelectStatement SelectStatement { get; }
    public IEnumerable`1<SqlCursorOption> Options { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public SqlCursorVariableAssignment(SqlCursorVariableRefExpression variable, CursorDefinitionInfo definitionInfo);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsStatementLevelObject();
    internal virtual DatabaseContext GetDatabaseContext(LexicalScope lexScope);
    public SqlCursorVariableRefExpression get_Variable();
    public SqlSelectStatement get_SelectStatement();
    public IEnumerable`1<SqlCursorOption> get_Options();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorVariableAssignment/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorVariableRefExpression : SqlCodeObject {
    private string variableName;
    internal bool IsVisitable { get; }
    public string VariableName { get; }
    internal SqlCursorVariableRefExpression(string variableName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public static SqlCursorVariableRefExpression Create(string variableName);
    public string get_VariableName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCursorVariableRefExpressionError : SqlCursorVariableRefExpression {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDataCompressionIndexOption : SqlIndexOption {
    private SqlDataCompressionType compressionType;
    private SqlCompressionPartitionRangeCollection partitions;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlDataCompressionType CompressionType { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDataCompressionIndexOption(SqlDataCompressionType compressionType, IEnumerable`1<SqlCompressionPartitionRange> partitions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlDataCompressionType get_CompressionType();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDataCompressionIndexOption/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDataCompressionType : Enum {
    public int value__;
    public static SqlDataCompressionType None;
    public static SqlDataCompressionType Row;
    public static SqlDataCompressionType Page;
    public static SqlDataCompressionType ColumnStore;
    public static SqlDataCompressionType ColumnStoreArchive;
    public static SqlDataCompressionType Invalid;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDataType : SqlCodeObject {
    internal DataTypeSpec TypeSpec;
    internal DataTypeErrors TypeErrors;
    private SqlObjectIdentifier objectIdentifier;
    private bool national;
    private bool varying;
    internal bool IsVisitable { get; }
    public SqlObjectIdentifier ObjectIdentifier { get; }
    public bool National { get; }
    public bool Varying { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal bool IsBinary { get; }
    internal bool IsChar { get; }
    internal bool IsNChar { get; }
    internal bool IsUniqueidentifier { get; }
    internal bool IsVarBinary { get; }
    internal bool IsXml { get; }
    internal SqlDataType(SqlObjectIdentifier objectIdentifier);
    internal SqlDataType(SqlObjectIdentifier objectIdentifier, bool national, bool varying);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider, IDataType boundType);
    internal static SqlDataType Double(SqlObjectIdentifier objectIdentifier);
    public SqlObjectIdentifier get_ObjectIdentifier();
    public bool get_National();
    public bool get_Varying();
    public DataTypeSpec GetTypeSpec();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDataType/<get_Children>d__23")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal bool get_IsBinary();
    internal bool get_IsChar();
    internal bool get_IsNChar();
    internal bool get_IsUniqueidentifier();
    internal bool get_IsVarBinary();
    internal bool get_IsXml();
    private bool IsOfType(SqlDataType sqlDataType);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDataTypeSpecification : SqlCodeObject {
    private IDataType boundType;
    private ErrorFlags errorFlags;
    private static int MaxLength;
    private static int MaxPrecision;
    private static int MaxTimeScale;
    private bool isValid;
    private bool isError;
    private bool isCursor;
    private SqlDataType dataType;
    private Nullable`1<int> arg1;
    private Nullable`1<int> arg2;
    private bool isMaximum;
    private SqlObjectIdentifier xmlSchemaCollection;
    private SqlXmlDocumentConstraint xmlDocumentConstraint;
    internal bool IsVisitable { get; }
    public IDataType BoundType { get; }
    public IMetadataObject BoundObject { get; }
    public SqlDataType DataType { get; }
    public Nullable`1<int> Argument1 { get; }
    public Nullable`1<int> Argument2 { get; }
    public bool IsMaximum { get; }
    public bool IsCursor { get; }
    public SqlXmlDocumentConstraint XmlDocumentConstraint { get; }
    public SqlObjectIdentifier XmlSchemaCollection { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDataTypeSpecification(SqlDataType dataType);
    internal SqlDataTypeSpecification(SqlDataType dataType, SqlLiteralExpression arg1);
    internal SqlDataTypeSpecification(SqlDataType dataType, SqlLiteralExpression arg1, SqlLiteralExpression arg2);
    internal SqlDataTypeSpecification(SqlDataType dataType, SqlObjectIdentifier objectIdentifier1, SqlObjectIdentifier objectIdentifier2);
    private SqlDataTypeSpecification(bool isCursor);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public IDataType get_BoundType();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal void ReportInvalidTypeBindError(string name, bool isColumn);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodHelpText GetMyMethodHelpText(LexLocation caretLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    private bool IsCandidateForParamHelp();
    internal static SqlDataTypeSpecification Cursor();
    internal static SqlDataTypeSpecification Error();
    public SqlDataType get_DataType();
    public Nullable`1<int> get_Argument1();
    public Nullable`1<int> get_Argument2();
    public bool get_IsMaximum();
    public bool get_IsCursor();
    public SqlXmlDocumentConstraint get_XmlDocumentConstraint();
    public SqlObjectIdentifier get_XmlSchemaCollection();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDataTypeSpecification/<get_Children>d__53")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual void RunConsistencyChecks(string path, int depth);
    private static bool CheckTypeName(SqlObjectIdentifier objectIdentifier);
    private static bool CheckTypeName(SqlObjectIdentifier objectIdentifier, bool isXmlSchemaCollection);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDbccCommandType : Enum {
    public int value__;
    public static SqlDbccCommandType None;
    public static SqlDbccCommandType NewAlloc;
    public static SqlDbccCommandType DbRepair;
    public static SqlDbccCommandType RowLock;
    public static SqlDbccCommandType TextAll;
    public static SqlDbccCommandType TextAlloc;
    public static SqlDbccCommandType TraceOn;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDBCCStatement : SqlStatement {
    private SqlDbccCommandType commandType;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlDbccCommandType CommandType { get; }
    internal SqlDBCCStatement(string command);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlDbccCommandType get_CommandType();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDdlStatement : SqlStatement {
    private FinalizeState finalizeState;
    internal bool IsDdlStatement { get; }
    internal SqlDdlStatement AsDdlStatement { get; }
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private bool IsBindFinalizing { get; }
    private bool IsBindFinalized { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.IsFinalizing { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.IsFinalized { get; }
    private LexicalScope Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.LexicalScope { get; }
    internal sealed virtual bool get_IsDdlStatement();
    internal sealed virtual SqlDdlStatement get_AsDdlStatement();
    internal abstract virtual bool get_IsCreateStatement();
    internal abstract virtual bool get_IsAlterStatement();
    internal abstract virtual bool get_IsDropStatement();
    internal abstract virtual DdlTargetObjectType get_TargetObjectType();
    private void BeginBindFinalize();
    private void EndBindFinalize();
    private bool get_IsBindFinalizing();
    private bool get_IsBindFinalized();
    internal sealed virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void FinalizeBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void PostBindFinalize();
    internal virtual void Unbind();
    internal void FinalizeBind(BatchBindingContext bindingContext, StatementBindMode bindMode);
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.get_IsFinalizing();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.get_IsFinalized();
    private sealed virtual override LexicalScope Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.get_LexicalScope();
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.FinalizeBind();
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.PostBindFinalize();
    internal virtual void RunConsistencyChecks(string path, int depth);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDdlTriggerDefinition : SqlTriggerDefinition {
    private SqlDdlTriggerTargetType targetType;
    private SqlCollection`1<SqlTriggerEvent> events;
    internal bool IsVisitable { get; }
    public SqlDdlTriggerTargetType TargetType { get; }
    public SqlCollection`1<SqlTriggerEvent> Events { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal TriggerType TriggerType { get; }
    internal IDmlTriggerDefinitionInfo DmlDefinitionInfo { get; }
    internal IDdlTriggerDefinitionInfo DdlDefinitionInfo { get; }
    internal SqlDdlTriggerDefinition(SqlObjectIdentifier name, SqlDdlTriggerTargetType targetType, SqlCollection`1<SqlModuleOption> options, SqlTriggerActivationType activationType, List`1<SqlTriggerEvent> events);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public sealed virtual SqlDdlTriggerTargetType get_TargetType();
    public sealed virtual SqlCollection`1<SqlTriggerEvent> get_Events();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDdlTriggerDefinition/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual TriggerType get_TriggerType();
    internal virtual IDmlTriggerDefinitionInfo get_DmlDefinitionInfo();
    internal virtual IDdlTriggerDefinitionInfo get_DdlDefinitionInfo();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDdlTriggerTargetType : Enum {
    public int value__;
    public static SqlDdlTriggerTargetType Database;
    public static SqlDdlTriggerTargetType AllServer;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDeclareStatement : SqlStatement {
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDefaultConstraint : SqlConstraint {
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal SqlDefaultConstraint(SqlScalarExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDefaultConstraint/<get_Children>d__13")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDefaultValuesInsertMergeActionSource : SqlInsertMergeActionSource {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDefaultValuesInsertSource : SqlInsertSource {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDeleteMergeAction : SqlMergeAction {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDeleteSpecification : SqlUpdateDeleteSpecificationBase {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDeleteSpecification(SqlTopSpecification topSpecification, DmlTarget dmlTarget, List`1<SqlOutputClause> outputClauses, SqlFromClause fromClause, SqlWhereClause whereClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual DmlSpecificationBindingContext CreateBindingContext(LocalBindingContext localBindingContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDeleteSpecification/<get_Children>d__10")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDeleteStatement : SqlDmlStatement {
    private SqlDeleteSpecification deleteSpecification;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlDeleteSpecification DeleteSpecification { get; }
    internal SqlDmlSpecification DmlSpecification { get; }
    internal SqlDeleteStatement(SqlDeleteSpecification deleteSpec);
    internal SqlDeleteStatement(SqlQueryWithClause queryWithClause, SqlDeleteSpecification deleteSpec);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlDeleteSpecification get_DeleteSpecification();
    internal virtual SqlDmlSpecification get_DmlSpecification();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDenyStatement : SqlGdrStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDerivedTableExpression : SqlTableExpression {
    private SqlQueryExpression queryExpression;
    private SqlIdentifier alias;
    private SqlIdentifierCollection columnList;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    public SqlQueryExpression QueryExpression { get; }
    public SqlIdentifier Alias { get; }
    public SqlIdentifierCollection ColumnList { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDerivedTableExpression(SqlQueryExpression queryExpression, SqlIdentifier alias, List`1<SqlIdentifier> columnList);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual bool MayChildHaveCompletionList(SqlCodeObject child);
    public SqlQueryExpression get_QueryExpression();
    public SqlIdentifier get_Alias();
    public SqlIdentifierCollection get_ColumnList();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDerivedTableExpression/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDistinctPredicateComparisonBooleanExpression : SqlBooleanExpression {
    private SqlScalarExpression left;
    private SqlScalarExpression right;
    private SqlComparisonBooleanExpressionType comparisonOperator;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Left { get; }
    public SqlScalarExpression Right { get; }
    public SqlComparisonBooleanExpressionType ComparisonOperator { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDistinctPredicateComparisonBooleanExpression(SqlScalarExpression leftExpression, SqlScalarExpression rightExpression, bool hasNot);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_Left();
    public SqlScalarExpression get_Right();
    public SqlComparisonBooleanExpressionType get_ComparisonOperator();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDistinctPredicateComparisonBooleanExpression/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDmlSpecification : SqlCodeObject {
    private DmlSpecificationBindingContext dmlBindingContext;
    private SqlTopSpecification topSpecification;
    private SqlTableExpression target;
    private SqlOutputIntoClause outputIntoClause;
    private SqlOutputClause outputClause;
    internal IBindingContext BindingContext { get; }
    public SqlTopSpecification TopSpecification { get; }
    public SqlTableExpression Target { get; }
    public SqlOutputIntoClause OutputIntoClause { get; }
    public SqlOutputClause OutputClause { get; }
    internal SqlDmlSpecification(SqlTopSpecification topSpecification, DmlTarget dmlTarget, List`1<SqlOutputClause> outputClauses);
    internal sealed virtual IBindingContext get_BindingContext();
    internal void BindDmlSpecification(DmlSpecificationBindingContext bindingContext);
    internal sealed virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual CompletionContext FindCompletionContextForCodeObject(SqlCodeObject codeObject);
    public SqlTopSpecification get_TopSpecification();
    public SqlTableExpression get_Target();
    public SqlOutputIntoClause get_OutputIntoClause();
    public SqlOutputClause get_OutputClause();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDmlSpecificationTableSource : SqlTableExpression {
    private SqlDmlSpecification dmlSpecification;
    private SqlIdentifier alias;
    private SqlIdentifierCollection columnList;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    public SqlDmlSpecification DmlSpecification { get; }
    public SqlIdentifier Alias { get; }
    public SqlIdentifierCollection ColumnList { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDmlSpecificationTableSource(SqlDmlSpecification dmlSpecification, SqlIdentifier alias, List`1<SqlIdentifier> columnList);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlDmlSpecification get_DmlSpecification();
    public SqlIdentifier get_Alias();
    public SqlIdentifierCollection get_ColumnList();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDmlSpecificationTableSource/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDmlStatement : SqlStatement {
    private SqlQueryWithClause queryWithClause;
    public SqlQueryWithClause QueryWithClause { get; }
    internal SqlDmlSpecification DmlSpecification { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDmlStatement(SqlQueryWithClause queryWithClause);
    internal virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    private void BindStatement(BatchBindingContext bindingContext);
    public SqlQueryWithClause get_QueryWithClause();
    internal abstract virtual SqlDmlSpecification get_DmlSpecification();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDmlStatement/<get_Children>d__9")]
public sealed virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDmlTriggerDefinition : SqlTriggerDefinition {
    private SqlObjectIdentifier targetName;
    private SqlCollection`1<SqlTriggerAction> actions;
    private bool isWithAppend;
    private bool isNotForReplication;
    internal bool IsVisitable { get; }
    public bool IsNotForReplication { get; }
    public bool IsWithAppend { get; }
    public SqlCollection`1<SqlTriggerAction> Actions { get; }
    public SqlObjectIdentifier TargetName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal TriggerType TriggerType { get; }
    internal IDmlTriggerDefinitionInfo DmlDefinitionInfo { get; }
    internal IDdlTriggerDefinitionInfo DdlDefinitionInfo { get; }
    internal SqlDmlTriggerDefinition(SqlObjectIdentifier name, SqlObjectIdentifier targetName, SqlCollection`1<SqlModuleOption> options, SqlTriggerActivationType activationType, List`1<SqlTriggerAction> actions, bool isWithAppend, bool isNotForReplication);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public sealed virtual bool get_IsNotForReplication();
    public sealed virtual bool get_IsWithAppend();
    public sealed virtual SqlCollection`1<SqlTriggerAction> get_Actions();
    public sealed virtual SqlObjectIdentifier get_TargetName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDmlTriggerDefinition/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual TriggerType get_TriggerType();
    internal virtual IDmlTriggerDefinitionInfo get_DmlDefinitionInfo();
    internal virtual IDdlTriggerDefinitionInfo get_DdlDefinitionInfo();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropAggregateStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropAggregateStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bidingContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropAggregateStatement/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropDatabaseStatement : SqlDropStatement {
    private SqlIdentifierCollection databaseNames;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.DropObjects { get; }
    public SqlIdentifierCollection DatabaseNames { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropDatabaseStatement(List`1<SqlIdentifier> names);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.get_DropObjects();
    private sealed virtual override IDatabase Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IDatabase,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, IDatabase dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifierCollection get_DatabaseNames();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropDatabaseStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropDefaultStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropDefaultStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bidingContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropDefaultStatement/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropExistingIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlDropExistingIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropFunctionStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.DropObjects { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropFunctionStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.get_DropObjects();
    private sealed virtual override IUserDefinedFunction Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlObjectIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedFunction,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, IUserDefinedFunction dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropFunctionStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropLoginStatement : SqlDropStatement {
    private SqlIdentifier loginName;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.DropObjects { get; }
    public SqlIdentifier LoginName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropLoginStatement(SqlIdentifier loginName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.get_DropObjects();
    private sealed virtual override ILogin Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ILogin,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, ILogin dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_LoginName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropLoginStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropObjectType : Enum {
    public short value__;
    public static SqlDropObjectType Table;
    public static SqlDropObjectType Proc;
    public static SqlDropObjectType Procedure;
    public static SqlDropObjectType Function;
    public static SqlDropObjectType View;
    public static SqlDropObjectType Rule;
    public static SqlDropObjectType Default;
    public static SqlDropObjectType Trigger;
    public static SqlDropObjectType Aggregate;
    public static SqlDropObjectType Synonym;
    public static SqlDropObjectType Sequence;
    public static SqlDropObjectType SecurityPolicy;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropProcedureStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.DropObjects { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropProcedureStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.get_DropObjects();
    private sealed virtual override IStoredProcedure Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlObjectIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IStoredProcedure,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, IStoredProcedure dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropProcedureStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropRuleStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropRuleStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bidingContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropRuleStatement/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSchemaStatement : SqlDropStatement {
    private SqlIdentifier schemaName;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.DropObjects { get; }
    public SqlIdentifier SchemaName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropSchemaStatement(SqlIdentifier schemaName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.get_DropObjects();
    private sealed virtual override ISchema Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISchema,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, ISchema dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_SchemaName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSchemaStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSecurityPolicyStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropSecurityPolicyStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSecurityPolicyStatement/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSequenceStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropSequenceStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSequenceStatement/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropStatement : SqlDdlStatement {
    private ChildObjectLexScopeInfo[] childObjectLexScopes;
    private bool isDropIfExists;
    internal bool IsCreateStatement { get; }
    internal bool IsAlterStatement { get; }
    internal bool IsDropStatement { get; }
    internal bool IsDropIfExists { get; internal set; }
    internal sealed virtual bool get_IsCreateStatement();
    internal sealed virtual bool get_IsAlterStatement();
    internal sealed virtual bool get_IsDropStatement();
    internal void InitChildLexicalScopeList(int childCount);
    internal LexicalScope RegisterChildLexicalScope(SqlCodeObject child, int index);
    internal sealed virtual LexicalScope GetChildLexicalScope(SqlCodeObject child);
    internal sealed virtual void InitiateBindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal abstract virtual void BindStatement(BatchBindingContext bidingContext);
    internal virtual void Unbind();
    internal void ReportCannotDropObjectError(SqlCodeObject codeObject, string objectName, DdlTargetObjectType objectType);
    internal static void ReportCannotUseDropStatementError(SqlCodeObject objectIdentifier, DdlTargetObjectType expectedType, DdlTargetObjectType actualType);
    internal static void BindDropObjectStatement(SqlDropStatement dropStatement, IDropObjectBinderHelper`2<T, N> binderHelper, BatchBindingContext bindingContext);
    private static string DdlTargetObjectTypeToString(DdlTargetObjectType objectType, bool lowerCase);
    internal static SqlDropStatement Create(SqlDropObjectType dropObjectType, List`1<SqlObjectIdentifier> objects, SqlDropTriggerTargetScope targetScope);
    internal bool get_IsDropIfExists();
    internal void set_IsDropIfExists(bool value);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSynonymStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.DropObjects { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropSynonymStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.get_DropObjects();
    private sealed virtual override ISynonym Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlObjectIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ISynonym,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, ISynonym dropObject, LexicalScope lexicalScope);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropSynonymStatement/<get_Children>d__24")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropTableStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ITable,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.DropObjects { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropTableStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ITable,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.get_DropObjects();
    private sealed virtual override ITable Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ITable,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlObjectIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.ITable,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, ITable dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropTableStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropTriggerStatement : SqlDropStatement {
    private SqlDropTriggerTargetScope targetScope;
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    public SqlDropTriggerTargetScope TargetScope { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropTriggerStatement(List`1<SqlObjectIdentifier> objects, SqlDropTriggerTargetScope targetScope);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    public SqlDropTriggerTargetScope get_TargetScope();
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropTriggerStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropTriggerTargetScope : Enum {
    public sbyte value__;
    public static SqlDropTriggerTargetScope None;
    public static SqlDropTriggerTargetScope Database;
    public static SqlDropTriggerTargetScope AllServer;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropTypeStatement : SqlDropStatement {
    private SqlObjectIdentifier typeName;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedType,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.DropObjects { get; }
    public SqlObjectIdentifier TypeName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropTypeStatement(SqlObjectIdentifier typeName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedType,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.get_DropObjects();
    private sealed virtual override IUserDefinedType Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedType,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlObjectIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUserDefinedType,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, IUserDefinedType dropObject, LexicalScope lexicalScope);
    public SqlObjectIdentifier get_TypeName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropTypeStatement/<get_Children>d__24")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropUserStatement : SqlDropStatement {
    private SqlIdentifier userName;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUser,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.DropObjects { get; }
    public SqlIdentifier UserName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropUserStatement(SqlIdentifier userName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUser,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.get_DropObjects();
    private sealed virtual override IUser Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUser,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IUser,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, IUser dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_UserName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropUserStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropViewStatement : SqlDropStatement {
    private SqlObjectIdentifierCollection objects;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal DdlTargetObjectType TargetObjectType { get; }
    private ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IView,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.DropObjects { get; }
    public SqlObjectIdentifierCollection Objects { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlDropViewStatement(List`1<SqlObjectIdentifier> objects);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual DdlTargetObjectType get_TargetObjectType();
    internal virtual void BindStatement(BatchBindingContext bindingContext);
    private sealed virtual override ISqlCodeCollection`1<SqlObjectIdentifier> Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IView,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.get_DropObjects();
    private sealed virtual override IView Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IView,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.FindMetadataObject(BatchBindingContext bindingContext, SqlObjectIdentifier name, LexicalScope lexicalScope);
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.IDropObjectStatement<Microsoft.SqlServer.Management.SqlParser.Metadata.IView,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier>.ExecuteDrop(BatchBindingContext bindingContext, IView dropObject, LexicalScope lexicalScope);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlObjectIdentifierCollection get_Objects();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlDropViewStatement/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlEdgeConstraint : SqlConstraint {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlEdgeConstraint/<get_Children>d__10")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<SqlCodeObject> <>n__0();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlErrorCodeObject : SqlCodeObject {
    private List`1<SqlCodeObject> children;
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlErrorCodeObject(IEnumerable`1<SqlCodeObject> children);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteArgument : SqlCodeObject {
    private IParameter boundParameter;
    private SqlParameterOptionType optionTypes;
    private bool isValid;
    private SqlScalarVariableRefExpression parameter;
    private SqlScalarExpression value;
    internal bool IsVisitable { get; }
    public IParameter BoundParameter { get; }
    public IMetadataObject BoundObject { get; }
    public SqlScalarVariableRefExpression Parameter { get; }
    public SqlScalarExpression Value { get; }
    public bool IsOutput { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlExecuteArgument(SqlScalarExpression value, SqlParameterOption option);
    internal SqlExecuteArgument(SqlScalarVariableRefExpression parameter, SqlScalarExpression value, SqlParameterOption option);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public IParameter get_BoundParameter();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(IBindingContext bindingContext, IParameter parameter);
    internal virtual void Unbind();
    public SqlScalarVariableRefExpression get_Parameter();
    public SqlScalarExpression get_Value();
    public bool get_IsOutput();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteArgument/<get_Children>d__27")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteArgumentCollection : SqlCollection`1<SqlExecuteArgument> {
    internal SqlExecuteArgumentCollection(List`1<SqlExecuteArgument> items);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteAsClause : SqlCodeObject {
    private IExecutionContext executionContext;
    private SqlModuleExecutionContextType type;
    internal bool IsVisitable { get; }
    public IMetadataObject BoundObject { get; }
    public IExecutionContext BoundExecutionContext { get; }
    public SqlModuleExecutionContextType Type { get; }
    public string UserName { get; }
    internal bool IsValid { get; }
    private SqlExecuteAsClause(SqlModuleExecutionContextType type);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public virtual IMetadataObject get_BoundObject();
    public IExecutionContext get_BoundExecutionContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    public SqlModuleExecutionContextType get_Type();
    public virtual string get_UserName();
    internal virtual bool get_IsValid();
    internal static SqlExecuteAsClause Caller();
    internal static SqlExecuteAsClause Owner();
    internal static SqlExecuteAsClause Self();
    internal static SqlExecuteAsClause User(SqlLiteralExpression literalExpression);
    internal static SqlExecuteAsClause Invalid(string name);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteModuleStatement : SqlExecuteStatement {
    private ICallableModule boundModule;
    private SqlScalarVariableRefExpression returnValue;
    private SqlObjectReference module;
    private Nullable`1<int> number;
    private SqlExecuteArgumentCollection arguments;
    private SqlModuleOption moduleOption;
    private bool argumentsAreValid;
    internal bool IsVisitable { get; }
    public ICallableModule BoundModule { get; }
    public IMetadataObject BoundObject { get; }
    public Nullable`1<int> Number { get; }
    public SqlScalarVariableRefExpression ReturnValue { get; internal set; }
    public SqlObjectReference Module { get; }
    public SqlExecuteArgumentCollection Arguments { get; }
    public SqlModuleOption ModuleOption { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlExecuteModuleStatement(SqlObjectReference module, SqlLiteralExpression number, List`1<SqlExecuteArgument> arguments, SqlModuleOption moduleOption);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public ICallableModule get_BoundModule();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodHelpText GetMyMethodHelpText(LexLocation caretLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    public Nullable`1<int> get_Number();
    public SqlScalarVariableRefExpression get_ReturnValue();
    internal void set_ReturnValue(SqlScalarVariableRefExpression value);
    public SqlObjectReference get_Module();
    public SqlExecuteArgumentCollection get_Arguments();
    public SqlModuleOption get_ModuleOption();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteModuleStatement/<get_Children>d__40")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteStatement : SqlStatement {
    internal string StatementPhrase { get; }
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteStatementError : SqlStatementError {
    internal SqlExecuteStatementError(SqlErrorCodeObject errorCodeObject);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteStringStatement : SqlExecuteStatement {
    private List`1<SqlScalarExpression> ExecuteSql;
    private List`1<SqlExecuteArgument> OptionalParameters;
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlExecuteStringStatement(List`1<SqlScalarExpression> executeSql, List`1<SqlExecuteArgument> optionalParameters);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExecuteStringStatement/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExistsBooleanExpression : SqlBooleanExpression {
    private SqlQueryExpression queryExpression;
    internal bool IsVisitable { get; }
    public SqlQueryExpression QueryExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlExistsBooleanExpression(SqlQueryExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlQueryExpression get_QueryExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExistsBooleanExpression/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExternalStreamDefinition : SqlCodeObject {
    [CompilerGeneratedAttribute]
private List`1<SqlExternalStreamParam> <ExternalStreamParams>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTableDefinition <ExternalStreamTableDefinition>k__BackingField;
    internal bool IsVisitable { get; }
    public List`1<SqlExternalStreamParam> ExternalStreamParams { get; }
    public SqlTableDefinition ExternalStreamTableDefinition { get; }
    internal SqlExternalStreamDefinition(List`1<SqlExternalStreamParam> streamParam);
    internal SqlExternalStreamDefinition(SqlTableDefinition definition, List`1<SqlExternalStreamParam> streamParam);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [CompilerGeneratedAttribute]
public List`1<SqlExternalStreamParam> get_ExternalStreamParams();
    [CompilerGeneratedAttribute]
public SqlTableDefinition get_ExternalStreamTableDefinition();
    public bool CheckRequiredParamsExist(SqlExternalStreamParamType& requiredParam);
    public bool CheckDuplicateParamExist(SqlExternalStreamParamType& duplicatedParam);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExternalStreamParam : object {
    [CompilerGeneratedAttribute]
private SqlExternalStreamParamType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <Value>k__BackingField;
    public SqlExternalStreamParamType Type { get; }
    public SqlIdentifier Value { get; }
    internal SqlExternalStreamParam(SqlExternalStreamParamType type, SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlExternalStreamParamType get_Type();
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Value();
    public static string ToString(SqlExternalStreamParamType param);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlExternalStreamParamType : Enum {
    public int value__;
    [DescriptionAttribute("DATA_SOURCE")]
public static SqlExternalStreamParamType DataSource;
    [DescriptionAttribute("LOCATION")]
public static SqlExternalStreamParamType Location;
    [DescriptionAttribute("FILE_FORMAT")]
public static SqlExternalStreamParamType FileFormat;
    [DescriptionAttribute("INPUT_OPTIONS")]
public static SqlExternalStreamParamType InputOptions;
    [DescriptionAttribute("OUTPUT_OPTIONS")]
public static SqlExternalStreamParamType OutputOptions;
    public static SqlExternalStreamParamType Empty;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFillFactorIndexOption : SqlIndexOption {
    private int fillFactor;
    private bool isValid;
    private static int MinPercentage;
    private static int MaxPercentage;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public int FillFactor { get; }
    internal bool IsValid { get; }
    internal SqlFillFactorIndexOption(SqlLiteralExpression fillFactor);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public int get_FillFactor();
    internal bool get_IsValid();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFilterClause : SqlCodeObject {
    private LocalBindingContext localBindingContext;
    private SqlFilterExpression filterExpression;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    public SqlFilterExpression FilterExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlFilterClause(SqlFilterExpression filterExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, ITableViewBase boundTable);
    internal virtual void Unbind();
    public SqlFilterExpression get_FilterExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFilterClause/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFilterExpression : SqlCodeObject {
    private bool isValid;
    internal bool IsValid { get; }
    internal SqlFilterExpression(bool isValid);
    internal bool get_IsValid();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForBrowseClause : SqlForClause {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForClause : SqlCodeObject {
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForeignKeyAction : Enum {
    public int value__;
    public static SqlForeignKeyAction None;
    public static SqlForeignKeyAction NoAction;
    public static SqlForeignKeyAction Cascade;
    public static SqlForeignKeyAction SetDefault;
    public static SqlForeignKeyAction SetNull;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForeignKeyConstraint : SqlConstraint {
    private LexicalScope lexicalScope;
    private SqlIdentifierCollection columns;
    private SqlObjectIdentifier referencedTable;
    private SqlIdentifierCollection referencedColumns;
    private SqlForeignKeyAction deleteAction;
    private SqlForeignKeyAction updateAction;
    private bool notForReplication;
    internal bool IsVisitable { get; }
    public SqlIdentifierCollection Columns { get; }
    public SqlObjectIdentifier ReferencedTable { get; }
    public SqlIdentifierCollection ReferencedColumns { get; }
    public SqlForeignKeyAction DeleteAction { get; }
    public SqlForeignKeyAction UpdateAction { get; }
    public bool NotForReplication { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal SqlForeignKeyConstraint(List`1<SqlIdentifier> columnList, SqlObjectIdentifier referencedTableName, List`1<SqlIdentifier> referencedColumnList, SqlForeignKeyAction deleteUpdateActions, bool notForReplication);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual LexicalScope GetLexicalScope();
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    private void Bind(BatchBindingContext bindingContext, IMutableTable boundTable, IMutableColumn boundColumn);
    private ColumnInfo[] BindReferencingColumns(BatchBindingContext bindingContext, string constraintName, IMutableTable boundTable, IMutableColumn boundColumn, Boolean& hasErrors);
    private ColumnInfo[] BindReferencedColumns(BatchBindingContext bindingContext, string constraintName, ITable refBoundTable, Boolean& hasErrors);
    internal virtual void Unbind();
    private void CheckColumnTypes(BatchBindingContext bindingContext, string constraintName, ITable boundTable, ColumnInfo[] referencingColumns, ITable refBoundTable, ColumnInfo[] referencedColumns, Boolean& hasErrors);
    private static IRelationalIndex FindPrimaryKey(ITable table);
    private static IRelationalIndex FindReferencedKey(ITable table, ColumnInfo[] columns);
    private static ForeignKeyAction GetForeignKeyAction(SqlForeignKeyAction action);
    public SqlIdentifierCollection get_Columns();
    public SqlObjectIdentifier get_ReferencedTable();
    public SqlIdentifierCollection get_ReferencedColumns();
    public SqlForeignKeyAction get_DeleteAction();
    public SqlForeignKeyAction get_UpdateAction();
    public bool get_NotForReplication();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForeignKeyConstraint/<get_Children>d__39")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlAutoClause : SqlForXmlClause {
    internal bool IsVisitable { get; }
    internal SqlForXmlAutoClause(List`1<SqlForXmlUnknownDirective> directives, bool isForJson);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlClause : SqlForClause {
    private SqlForXmlDirectivesType directiveType;
    private SqlForXmlDirectiveCollection directives;
    public SqlForXmlDirectiveCollection Directives { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlForXmlClause(List`1<SqlForXmlUnknownDirective> directives, SqlForXmlDirectivesType directiveType);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlClause/<Convertor>d__2")]
private IEnumerable`1<SqlForXmlDirective> Convertor(List`1<SqlForXmlUnknownDirective> directives);
    internal static SqlForXmlClause Create(List`1<SqlForXmlUnknownDirective> directives, StringToken token);
    public virtual SqlForXmlDirectiveCollection get_Directives();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlClause/<get_Children>d__9")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlDirective : SqlCodeObject {
    private SqlForXmlDirectivesType type;
    private string argument;
    internal bool IsVisitable { get; }
    public SqlForXmlDirectivesType Type { get; }
    public string Argument { get; }
    internal SqlForXmlDirective(SqlForXmlUnknownDirective directive, SqlForXmlDirectivesType type);
    internal SqlForXmlDirective(string argument);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlForXmlDirectivesType get_Type();
    public virtual string get_Argument();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlDirectiveCollection : SqlCollection`1<SqlForXmlDirective> {
    internal SqlForXmlDirectiveCollection(IEnumerable`1<SqlForXmlDirective> directives);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlDirectivesType : Enum {
    public short value__;
    public static SqlForXmlDirectivesType None;
    public static SqlForXmlDirectivesType BinaryBase64;
    public static SqlForXmlDirectivesType Type;
    public static SqlForXmlDirectivesType Root;
    public static SqlForXmlDirectivesType XmlData;
    public static SqlForXmlDirectivesType XmlSchema;
    public static SqlForXmlDirectivesType ElementsXsiNil;
    public static SqlForXmlDirectivesType ElementsAbsent;
    public static SqlForXmlDirectivesType Elements;
    public static SqlForXmlDirectivesType IncludeNullValues;
    public static SqlForXmlDirectivesType WithoutArrayWrapper;
    public static SqlForXmlDirectivesType CommonDirectives;
    public static SqlForXmlDirectivesType AutoMode;
    public static SqlForXmlDirectivesType RawMode;
    public static SqlForXmlDirectivesType ExplicitMode;
    public static SqlForXmlDirectivesType PathMode;
    public static SqlForXmlDirectivesType JsonMode;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlExplicitClause : SqlForXmlClause {
    internal bool IsVisitable { get; }
    internal SqlForXmlExplicitClause(List`1<SqlForXmlUnknownDirective> directives);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlPathClause : SqlForXmlClause {
    private string elementName;
    internal bool IsVisitable { get; }
    public string ElementName { get; }
    internal SqlForXmlPathClause(List`1<SqlForXmlUnknownDirective> directives, bool isForJson);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public string get_ElementName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlRawClause : SqlForXmlClause {
    private string elementName;
    internal bool IsVisitable { get; }
    public string ElementName { get; }
    internal SqlForXmlRawClause(List`1<SqlForXmlUnknownDirective> directives);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public string get_ElementName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlForXmlUnknownDirective : SqlForXmlDirective {
    private string name;
    public string Name { get; }
    public SqlForXmlUnknownDirective(string name, string argument);
    public string get_Name();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFromClause : SqlCodeObject {
    private FromClauseBindingContext bindingContext;
    private SqlTableExpressionCollection tableExpressions;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    public SqlTableExpressionCollection TableExpressions { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlFromClause(List`1<SqlTableExpression> tableExpressions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual SqlTableExpression FindSiblingTableExpressionBoundTo(SqlTableExpression tableExpression, ITabular boundTable);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlTableExpressionCollection get_TableExpressions();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFromClause/<get_Children>d__19")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFullTextBooleanExpression : SqlBooleanExpression {
    private SqlFullTextFunctionType functionName;
    private SqlFullTextColumnCollection columnList;
    private SqlScalarExpression searchString;
    private SqlScalarExpression langExpression;
    internal bool IsVisitable { get; }
    public SqlFullTextFunctionType FunctionName { get; }
    public SqlFullTextColumnCollection ColumnList { get; }
    public SqlScalarExpression SearchString { get; }
    public SqlScalarExpression LangExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlFullTextBooleanExpression(SqlFullTextFunctionType functionName, List`1<SqlFullTextColumn> columnList, SqlScalarExpression searchString, SqlScalarExpression langExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlFullTextFunctionType get_FunctionName();
    public SqlFullTextColumnCollection get_ColumnList();
    public SqlScalarExpression get_SearchString();
    public SqlScalarExpression get_LangExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFullTextBooleanExpression/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFullTextColumn : SqlCodeObject {
    private SqlScalarRefExpression columnRefExpression;
    private SqlSelectStarExpression selectStarExpression;
    internal bool IsVisitable { get; }
    public SqlScalarRefExpression ColumnRefExpression { get; }
    public SqlSelectStarExpression SelectStarExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlFullTextColumn(SqlScalarRefExpression columnRefExpression);
    internal SqlFullTextColumn(SqlSelectStarExpression selectStarExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarRefExpression get_ColumnRefExpression();
    public SqlSelectStarExpression get_SelectStarExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFullTextColumn/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFullTextColumnCollection : SqlCollection`1<SqlFullTextColumn> {
    internal SqlFullTextColumnCollection(List`1<SqlFullTextColumn> items);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFullTextFunctionType : Enum {
    public int value__;
    public static SqlFullTextFunctionType Contains;
    public static SqlFullTextFunctionType FreeText;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFunctionBodyDefinition : SqlCodeObject {
    internal SqlClrFunctionBodyDefinition AsSqlClrFunctionBodyDefinition { get; }
    internal SqlInlineFunctionBodyDefinition AsSqlInlineFunctionBodyDefinition { get; }
    internal SqlMultistatementFunctionBodyDefinition AsSqlMultistatementFunctionBodyDefinition { get; }
    internal bool IsStatementLevelObject { get; }
    internal abstract virtual SqlClrFunctionBodyDefinition get_AsSqlClrFunctionBodyDefinition();
    internal abstract virtual SqlInlineFunctionBodyDefinition get_AsSqlInlineFunctionBodyDefinition();
    internal abstract virtual SqlMultistatementFunctionBodyDefinition get_AsSqlMultistatementFunctionBodyDefinition();
    internal sealed virtual bool get_IsStatementLevelObject();
    internal sealed virtual void RegisterDatabaseContextChange(DatabaseContext databaseContext);
    internal sealed virtual DatabaseContext GetDatabaseContext(LexicalScope lexScope);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal abstract virtual void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    internal virtual void RunConsistencyChecks(string path, int depth);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFunctionDefinition : SqlCodeObject {
    private SqlObjectIdentifier name;
    private SqlParameterDeclarationCollection parameters;
    internal SqlCollection`1<SqlModuleOption> options;
    internal bool IsVisitable { get; }
    internal bool IsTableValuedFunction { get; }
    internal bool IsInlineTableFunction { get; }
    internal bool IsClrFunction { get; }
    internal bool IsStatementLevelObject { get; }
    public SqlObjectIdentifier Name { get; }
    public SqlParameterDeclarationCollection Parameters { get; }
    public SqlCollection`1<SqlModuleOption> Options { get; }
    internal SqlFunctionDefinition(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters, List`1<SqlModuleOption> options, SqlModuleOptionMask validOptions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal abstract virtual bool get_IsTableValuedFunction();
    internal abstract virtual bool get_IsInlineTableFunction();
    internal abstract virtual bool get_IsClrFunction();
    internal sealed virtual bool get_IsStatementLevelObject();
    internal FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> CreateFunction(IUserDefinedFunctionFactory factory, ISchema schema);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion, bool setTextProperties);
    internal virtual void BindDefinition(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    private void SetFunctionTextProperties(IMutableUserDefinedFunction function);
    public SqlObjectIdentifier get_Name();
    public SqlParameterDeclarationCollection get_Parameters();
    public SqlCollection`1<SqlModuleOption> get_Options();
    internal abstract virtual SqlFunctionReturnType GetReturnType();
    internal abstract virtual SqlFunctionBodyDefinition GetBodyDefinition();
    internal virtual void RunConsistencyChecks(string path, int depth);
    internal static SqlFunctionDefinition CreateFromFactory(FunctionDefinitionFactory factory, SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFunctionDefinitionError : SqlFunctionDefinition {
    private SqlFunctionReturnType returnType;
    private SqlFunctionBodyDefinition bodyDefinition;
    internal bool IsVisitable { get; }
    internal bool IsTableValuedFunction { get; }
    internal bool IsInlineTableFunction { get; }
    internal bool IsClrFunction { get; }
    public SqlFunctionReturnType ReturnType { get; }
    public SqlFunctionBodyDefinition BodyDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlFunctionDefinitionError(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters, SqlFunctionReturnType returnType, List`1<SqlModuleOption> options, SqlFunctionBodyDefinition bodyDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsTableValuedFunction();
    internal sealed virtual bool get_IsInlineTableFunction();
    internal sealed virtual bool get_IsClrFunction();
    public SqlFunctionReturnType get_ReturnType();
    public SqlFunctionBodyDefinition get_BodyDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFunctionDefinitionError/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlFunctionReturnType GetReturnType();
    internal virtual SqlFunctionBodyDefinition GetBodyDefinition();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlFunctionReturnType : SqlCodeObject {
    internal SqlScalarFunctionReturnType AsSqlScalarFunctionReturnType { get; }
    internal SqlTableFunctionReturnType AsSqlTableFunctionReturnType { get; }
    internal abstract virtual SqlScalarFunctionReturnType get_AsSqlScalarFunctionReturnType();
    internal abstract virtual SqlTableFunctionReturnType get_AsSqlTableFunctionReturnType();
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal abstract virtual void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    internal virtual void RunConsistencyChecks(string path, int depth);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGdrStatement : SqlStatement {
    internal static SqlGdrStatement Create(SqlGdrStatementType statementType);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGdrStatementType : Enum {
    public int value__;
    public static SqlGdrStatementType SqlGrant;
    public static SqlGdrStatementType SqlDeny;
    public static SqlGdrStatementType SqlRevoke;
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGeneratedAlwaysType : Enum {
    public int value__;
    public static SqlGeneratedAlwaysType None;
    public static SqlGeneratedAlwaysType AsRowStart;
    public static SqlGeneratedAlwaysType AsRowEnd;
    public static SqlGeneratedAlwaysType AsTransactionIdStart;
    public static SqlGeneratedAlwaysType AsTransactionIdEnd;
    public static SqlGeneratedAlwaysType AsSequenceNumberStart;
    public static SqlGeneratedAlwaysType AsSequenceNumberEnd;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGlobalScalarVariableRefExpression : SqlScalarExpression {
    private IBuiltInFunction boundVariable;
    private string variableName;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IBuiltInFunction BoundVariable { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public string VariableName { get; }
    internal SqlGlobalScalarVariableRefExpression(string variableName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public IBuiltInFunction get_BoundVariable();
    public virtual IScalar get_BoundScalar();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public string get_VariableName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGrandTotalGroupByItem : SqlGroupByItem {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGrandTotalGroupingSet : SqlGroupingSet {
    private SqlGrandTotalGroupByItem item;
    internal bool IsVisitable { get; }
    public SqlGrandTotalGroupByItem Item { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlGrandTotalGroupingSet(SqlGrandTotalGroupByItem item);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlGrandTotalGroupByItem get_Item();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGrandTotalGroupingSet/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGrantStatement : SqlGdrStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupByClause : SqlCodeObject {
    private bool hasAll;
    private SqlGroupByItemCollection items;
    private SqlGroupByOptionType option;
    internal bool IsVisitable { get; }
    public bool HasAll { get; }
    public SqlGroupByItemCollection Items { get; }
    public SqlGroupByOptionType Option { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlGroupByClause(List`1<SqlGroupByItem> items, string option, bool all);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public bool get_HasAll();
    public SqlGroupByItemCollection get_Items();
    public SqlGroupByOptionType get_Option();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupByClause/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupByItem : SqlCodeObject {
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupByItemCollection : SqlCollection`1<SqlGroupByItem> {
    internal SqlGroupByItemCollection(IEnumerable`1<SqlGroupByItem> items);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupByOptionType : Enum {
    public int value__;
    public static SqlGroupByOptionType None;
    public static SqlGroupByOptionType Cube;
    public static SqlGroupByOptionType Rollup;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupBySets : SqlGroupByItem {
    private SqlGroupingSetsCollection sets;
    internal bool IsVisitable { get; }
    public SqlGroupingSetsCollection Sets { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlGroupBySets(List`1<SqlGroupingSet> sets);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlGroupingSetsCollection get_Sets();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupBySets/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupingSet : SqlCodeObject {
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupingSetCollection : SqlCollection`1<SqlGroupingSet> {
    internal SqlGroupingSetCollection(IEnumerable`1<SqlGroupingSet> items);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupingSetItem : SqlGroupByItem {
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupingSetItemCollection : SqlCollection`1<SqlGroupingSetItem> {
    internal SqlGroupingSetItemCollection(IEnumerable`1<SqlGroupingSetItem> items);
    internal SqlGroupingSetItemCollection(SqlGroupingSetItem item);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupingSetItemsCollection : SqlGroupingSet {
    private SqlGroupingSetItemCollection items;
    internal bool IsVisitable { get; }
    public SqlGroupingSetItemCollection Items { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlGroupingSetItemsCollection(List`1<SqlGroupingSetItem> items);
    internal SqlGroupingSetItemsCollection(SqlGroupingSetItem item);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlGroupingSetItemCollection get_Items();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupingSetItemsCollection/<get_Children>d__12")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlGroupingSetsCollection : SqlCollection`1<SqlGroupingSet> {
    internal SqlGroupingSetsCollection(IEnumerable`1<SqlGroupingSet> sets);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlHavingClause : SqlConditionClause {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlHavingClause(SqlBooleanExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlHavingClause/<get_Children>d__9")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlHint : SqlCodeObject {
    public bool IsTableHint { get; }
    public bool IsIndexHint { get; }
    internal SqlTableHint AsSqlTableHint { get; }
    internal SqlIndexHint AsSqlIndexHint { get; }
    internal static SqlHint Index(SqlLiteralExpression argument);
    internal static SqlHint Table(string name);
    internal static SqlHint Table(SqlIdentifier name);
    public virtual bool get_IsTableHint();
    public virtual bool get_IsIndexHint();
    internal virtual SqlTableHint get_AsSqlTableHint();
    internal virtual SqlIndexHint get_AsSqlIndexHint();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlHintCollection : SqlCollection`1<SqlHint> {
    internal SqlHintCollection(IEnumerable`1<SqlHint> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifier : SqlCodeObject {
    private string value;
    internal bool IsVisitable { get; }
    public string Value { get; }
    internal bool IsEmpty { get; }
    internal bool IsMissing { get; }
    internal bool IsTempName { get; }
    internal static SqlIdentifier Null { get; }
    internal SqlIdentifier(string value);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    public string get_Value();
    public virtual string ToString();
    internal bool get_IsEmpty();
    internal virtual bool get_IsMissing();
    internal bool get_IsTempName();
    internal static bool IsNullOrEmpty(SqlIdentifier identifier);
    internal static bool IsNull(SqlIdentifier identifier);
    internal static string RetrieveValue(SqlIdentifier identifier);
    internal static SqlIdentifier get_Null();
    internal static SqlIdentifier Missing();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentifierCollection : SqlCollection`1<SqlIdentifier> {
    internal SqlIdentifierCollection(IEnumerable`1<SqlIdentifier> identifiers);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentityFunctionCallExpression : SqlBuiltinScalarFunctionCallExpression {
    private SqlDataTypeSpecification dataType;
    private SqlLiteralExpression seed;
    private SqlLiteralExpression increment;
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlIdentityFunctionCallExpression(string name, SqlDataTypeSpecification dataType);
    internal SqlIdentityFunctionCallExpression(string name, SqlDataTypeSpecification dataType, SqlLiteralExpression seed, SqlLiteralExpression increment);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(IBindingContext bindingContext, SqlIdentifier alias);
    internal virtual void Unbind();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIdentityFunctionCallExpression/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIfElseStatement : SqlConditionalStatement {
    private SqlStatement falseStatement;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlStatement FalseStatement { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlIfElseStatement(SqlBooleanExpression condition, SqlStatement trueStatement, SqlStatement falseStatement);
    internal SqlIfElseStatement(SqlBooleanExpression condition, SqlStatement trueStatement);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlStatement get_FalseStatement();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIfElseStatement/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIgnoreDupKeyIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlIgnoreDupKeyIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInBooleanExpression : SqlBooleanExpression {
    private SqlInBooleanExpressionValue comparisonValue;
    private SqlScalarExpression inExpression;
    private bool hasNot;
    internal bool IsVisitable { get; }
    public SqlInBooleanExpressionValue ComparisonValue { get; }
    public SqlScalarExpression InExpression { get; }
    public bool HasNot { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInBooleanExpression(SqlScalarExpression expression, bool hasNot, SqlInBooleanExpressionValue value);
    internal SqlInBooleanExpression(SqlScalarExpression expression, SqlInBooleanExpressionValue value);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlInBooleanExpressionValue get_ComparisonValue();
    public SqlScalarExpression get_InExpression();
    public bool get_HasNot();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInBooleanExpression/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInBooleanExpressionCollectionValue : SqlInBooleanExpressionValue {
    private SqlScalarExpressionCollection values;
    internal bool IsVisitable { get; }
    public SqlScalarExpressionCollection Values { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInBooleanExpressionCollectionValue(List`1<SqlScalarExpression> expresions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpressionCollection get_Values();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInBooleanExpressionCollectionValue/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInBooleanExpressionQueryValue : SqlInBooleanExpressionValue {
    private SqlQueryExpression value;
    internal bool IsVisitable { get; }
    public SqlQueryExpression Value { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInBooleanExpressionQueryValue(SqlQueryExpression query);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlQueryExpression get_Value();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInBooleanExpressionQueryValue/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInBooleanExpressionValue : SqlCodeObject {
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexedColumn : SqlCodeObject {
    private SqlIdentifier name;
    private SqlSortOrder sortOrder;
    internal bool IsVisitable { get; }
    public IColumn BoundColumn { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier Name { get; }
    public SqlSortOrder SortOrder { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlIndexedColumn(SqlIdentifier name, SqlSortOrder sortOrder);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public IColumn get_BoundColumn();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, IDatabaseTable boundTable, IMutableRelationalIndex boundIndex, SqlConstraintType constraintType);
    public SqlIdentifier get_Name();
    public SqlSortOrder get_SortOrder();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexedColumn/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexedColumnCollection : SqlCollection`1<SqlIndexedColumn> {
    internal SqlIndexedColumnCollection(IEnumerable`1<SqlIndexedColumn> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexHint : SqlHint {
    private SqlLiteralExpressionCollection arguments;
    internal bool IsVisitable { get; }
    public SqlLiteralExpressionCollection Arguments { get; }
    public bool IsIndexHint { get; }
    internal SqlIndexHint AsSqlIndexHint { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlIndexHint(List`1<SqlLiteralExpression> arguments);
    internal SqlIndexHint(SqlLiteralExpression argument);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlLiteralExpressionCollection get_Arguments();
    public virtual bool get_IsIndexHint();
    internal virtual SqlIndexHint get_AsSqlIndexHint();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexHint/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexOption : SqlCodeObject {
    private SqlIndexOptionType type;
    internal string Phrase { get; }
    public SqlIndexOptionType Type { get; }
    internal SqlIndexOption(SqlIndexOptionType type);
    internal abstract virtual string get_Phrase();
    public SqlIndexOptionType get_Type();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexOptionCollection : SqlCollection`1<SqlIndexOption> {
    internal SqlIndexOptionCollection(IEnumerable`1<SqlIndexOption> indexOptions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexOptionError : SqlIndexOption {
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIndexOptionType : Enum {
    public int value__;
    public static SqlIndexOptionType Invalid;
    public static SqlIndexOptionType AllowPageLocks;
    public static SqlIndexOptionType AllowRowLocks;
    public static SqlIndexOptionType DataCompression;
    public static SqlIndexOptionType DropExisting;
    public static SqlIndexOptionType FillFactor;
    public static SqlIndexOptionType IgnoreDupKey;
    public static SqlIndexOptionType MaxDegreeOfParallelism;
    public static SqlIndexOptionType Online;
    public static SqlIndexOptionType PadIndex;
    public static SqlIndexOptionType SortedData;
    public static SqlIndexOptionType SortedDataReorg;
    public static SqlIndexOptionType StatisticsIncremental;
    public static SqlIndexOptionType SortInTempDb;
    public static SqlIndexOptionType StatisticsNoRecompute;
    public static SqlIndexOptionType StatisticsOnly;
    public static SqlIndexOptionType BucketCount;
    public static SqlIndexOptionType CompressionDelay;
    public static SqlIndexOptionType Resumable;
    public static SqlIndexOptionType MaxDuration;
    public static SqlIndexOptionType OptimizeForSequentialKey;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineFunctionBodyDefinition : SqlFunctionBodyDefinition {
    private SqlQueryWithClause queryWithClause;
    private SqlQueryExpression queryExpression;
    internal bool IsVisitable { get; }
    internal SqlClrFunctionBodyDefinition AsSqlClrFunctionBodyDefinition { get; }
    internal SqlInlineFunctionBodyDefinition AsSqlInlineFunctionBodyDefinition { get; }
    internal SqlMultistatementFunctionBodyDefinition AsSqlMultistatementFunctionBodyDefinition { get; }
    public SqlQueryWithClause QueryWithClause { get; }
    public SqlQueryExpression QueryExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInlineFunctionBodyDefinition(SqlQueryWithClause queryWithClause, SqlQueryExpression queryExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual SqlClrFunctionBodyDefinition get_AsSqlClrFunctionBodyDefinition();
    internal sealed virtual SqlInlineFunctionBodyDefinition get_AsSqlInlineFunctionBodyDefinition();
    internal sealed virtual SqlMultistatementFunctionBodyDefinition get_AsSqlMultistatementFunctionBodyDefinition();
    internal virtual void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    public SqlQueryWithClause get_QueryWithClause();
    public SqlQueryExpression get_QueryExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineFunctionBodyDefinition/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineIndexConstraint : SqlConstraint {
    private SqlIndexOptionCollection _options;
    internal bool IsVisitable { get; }
    public SqlIndexOptionCollection Options { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal SqlInlineIndexConstraint(SqlIdentifier id, IEnumerable`1<SqlIndexOption> options);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    public SqlIndexOptionCollection get_Options();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineIndexConstraint/<get_Children>d__13")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<SqlCodeObject> <>n__0();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineTableRelationalFunctionDefinition : SqlFunctionDefinition {
    private static SqlModuleOptionMask ValidOptions;
    private SqlInlineFunctionBodyDefinition bodyDefinition;
    internal bool IsVisitable { get; }
    internal bool IsTableValuedFunction { get; }
    internal bool IsInlineTableFunction { get; }
    internal bool IsClrFunction { get; }
    public SqlInlineFunctionBodyDefinition BodyDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInlineTableRelationalFunctionDefinition(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters, List`1<SqlModuleOption> options, SqlInlineFunctionBodyDefinition bodyDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsTableValuedFunction();
    internal sealed virtual bool get_IsInlineTableFunction();
    internal sealed virtual bool get_IsClrFunction();
    internal virtual void BindDefinition(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    public SqlInlineFunctionBodyDefinition get_BodyDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineTableRelationalFunctionDefinition/<get_Children>d__19")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlFunctionReturnType GetReturnType();
    internal virtual SqlFunctionBodyDefinition GetBodyDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineTableVariableDeclaration : SqlCodeObject {
    private ITableVariable boundTable;
    private string name;
    private SqlTableDefinition definition;
    internal bool IsVisitable { get; }
    public ITableVariable BoundTable { get; }
    public IMetadataObject BoundObject { get; }
    public string Name { get; }
    public SqlTableDefinition Definition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInlineTableVariableDeclaration(string name, SqlTableDefinition definition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public ITableVariable get_BoundTable();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    public string get_Name();
    public SqlTableDefinition get_Definition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineTableVariableDeclaration/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineTableVariableDeclareStatement : SqlDeclareStatement {
    private SqlInlineTableVariableDeclaration declaration;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlInlineTableVariableDeclaration Declaration { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInlineTableVariableDeclareStatement(SqlInlineTableVariableDeclaration declaration);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    public SqlInlineTableVariableDeclaration get_Declaration();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInlineTableVariableDeclareStatement/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInsertMergeAction : SqlMergeAction {
    private SqlColumnRefExpressionCollection targetColumns;
    private SqlInsertMergeActionSource source;
    internal bool IsVisitable { get; }
    public SqlColumnRefExpressionCollection TargetColumns { get; }
    public SqlInsertMergeActionSource Source { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInsertMergeAction(List`1<SqlColumnRefExpression> targetColumns, SqlInsertMergeActionSource source);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlColumnRefExpressionCollection get_TargetColumns();
    public SqlInsertMergeActionSource get_Source();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInsertMergeAction/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInsertMergeActionSource : SqlCodeObject {
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInsertSource : SqlCodeObject {
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInsertSpecification : SqlDmlSpecification {
    private SqlColumnRefExpressionCollection targetColumns;
    private SqlInsertSource source;
    internal bool IsVisitable { get; }
    public SqlColumnRefExpressionCollection TargetColumns { get; }
    public SqlInsertSource Source { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlInsertSpecification(SqlTopSpecification topSpecification, DmlTarget dmlTarget, List`1<SqlOutputClause> outputClauses, SqlInsertSource source);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual CompletionContext FindCompletionContextForCodeObject(SqlCodeObject codeObject);
    public SqlColumnRefExpressionCollection get_TargetColumns();
    public SqlInsertSource get_Source();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInsertSpecification/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlInsertStatement : SqlDmlStatement {
    private SqlInsertSpecification insertSpecification;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlInsertSpecification InsertSpecification { get; }
    internal SqlDmlSpecification DmlSpecification { get; }
    internal SqlInsertStatement(SqlInsertSpecification insertSpecification);
    internal SqlInsertStatement(SqlQueryWithClause queryWithClause, SqlInsertSpecification insertSpecification);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlInsertSpecification get_InsertSpecification();
    internal virtual SqlDmlSpecification get_DmlSpecification();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIntoClause : SqlCodeObject {
    private LocalBindingContext localBindingContext;
    private SqlTableExpression target;
    private SqlColumnRefExpressionCollection columns;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    public SqlTableExpression Target { get; }
    public SqlColumnRefExpressionCollection Columns { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlIntoClause(SqlTableExpression target, List`1<SqlColumnRefExpression> columns);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlTableExpression get_Target();
    public SqlColumnRefExpressionCollection get_Columns();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIntoClause/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIsNullBooleanExpression : SqlBooleanExpression {
    private bool hasNot;
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    public bool HasNot { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlIsNullBooleanExpression(SqlScalarExpression expresion, bool hasNot);
    internal SqlIsNullBooleanExpression(SqlScalarExpression expresion);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public bool get_HasNot();
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlIsNullBooleanExpression/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlJoinOperatorType : Enum {
    public int value__;
    public static SqlJoinOperatorType CrossJoin;
    public static SqlJoinOperatorType CrossApply;
    public static SqlJoinOperatorType OuterApply;
    public static SqlJoinOperatorType InnerJoin;
    public static SqlJoinOperatorType LeftOuterJoin;
    public static SqlJoinOperatorType RightOuterJoin;
    public static SqlJoinOperatorType FullOuterJoin;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlJoinTableExpression : SqlTableExpression {
    private JoinExprBindingContext bindingContext;
    private SqlJoinOperatorType joinOperator;
    private SqlTableExpression left;
    private SqlTableExpression right;
    internal IBindingContext BindingContext { get; }
    internal TableExpressionName ExpressionName { get; }
    public SqlJoinOperatorType JoinOperator { get; }
    public SqlTableExpression Left { get; }
    public SqlTableExpression Right { get; }
    internal SqlJoinTableExpression(SqlTableExpression left, SqlJoinOperatorType joinOperator, SqlTableExpression right);
    internal virtual IBindingContext get_BindingContext();
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual SqlTableExpression FindSiblingTableExpressionBoundTo(SqlTableExpression tableExpression, ITabular boundTable);
    internal virtual SqlTableExpression FindTableExpressionBoundTo(ITabular boundTable);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal static bool IsUnqualifiedJoinOperator(SqlJoinOperatorType joinOperator);
    internal static bool IsQualifiedJoinOperator(SqlJoinOperatorType joinOperator);
    public SqlJoinOperatorType get_JoinOperator();
    public SqlTableExpression get_Left();
    public SqlTableExpression get_Right();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlJsonNullQualifier : Enum {
    public int value__;
    public static SqlJsonNullQualifier AbsentOnNull;
    public static SqlJsonNullQualifier NullOnNull;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlJsonObjectArgument : SqlCodeObject {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <KeyExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <ValueExpression>k__BackingField;
    internal bool IsVisitable { get; }
    public SqlScalarExpression KeyExpression { get; public set; }
    public SqlScalarExpression ValueExpression { get; public set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public SqlJsonObjectArgument(SqlScalarExpression keyExpression, SqlScalarExpression valueExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_KeyExpression();
    [CompilerGeneratedAttribute]
public void set_KeyExpression(SqlScalarExpression value);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_ValueExpression();
    [CompilerGeneratedAttribute]
public void set_ValueExpression(SqlScalarExpression value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlJsonObjectArgument/<get_Children>d__19")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLargeDataStorageInformation : SqlCodeObject {
    private SqlStorageSpecification textAndImageStorageSpecification;
    private SqlStorageSpecification fileStreamStorageSpecification;
    internal bool IsVisitable { get; }
    public SqlStorageSpecification TextAndImageStorageSpecification { get; }
    public SqlStorageSpecification FileStreamStorageSpecification { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlLargeDataStorageInformation(SqlStorageSpecification textAndImageStorageSpecification, SqlStorageSpecification fileStreamStorageSpecification);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlStorageSpecification get_TextAndImageStorageSpecification();
    public SqlStorageSpecification get_FileStreamStorageSpecification();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLargeDataStorageInformation/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLikeBooleanExpression : SqlBooleanExpression {
    private bool hasNot;
    private SqlScalarExpression expression;
    private SqlScalarExpression likePattern;
    private SqlScalarExpression escapeClause;
    internal bool IsVisitable { get; }
    public bool HasNot { get; }
    public SqlScalarExpression Expression { get; }
    public SqlScalarExpression LikePattern { get; }
    public SqlScalarExpression EscapeClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlLikeBooleanExpression(SqlScalarExpression toCompare, bool not, SqlScalarExpression withPattern, SqlScalarExpression escape);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public bool get_HasNot();
    public SqlScalarExpression get_Expression();
    public SqlScalarExpression get_LikePattern();
    public SqlScalarExpression get_EscapeClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLikeBooleanExpression/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLiteralExpression : SqlScalarExpression {
    private string value;
    private LiteralValueType type;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public string Value { get; }
    public LiteralValueType Type { get; }
    private SqlLiteralExpression(string value, LiteralValueType type);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public string get_Value();
    public LiteralValueType get_Type();
    public virtual string ToString();
    internal static SqlLiteralExpression String(string value);
    internal static SqlLiteralExpression Integer(int value);
    internal static SqlLiteralExpression Integer(long value);
    internal static SqlLiteralExpression Integer(string value);
    internal static SqlLiteralExpression Integer(string value, bool isNegative);
    internal static SqlLiteralExpression Real(float value);
    internal static SqlLiteralExpression Real(double value);
    internal static SqlLiteralExpression Real(string value);
    internal static SqlLiteralExpression Real(string value, bool isNegative);
    internal static SqlLiteralExpression Numeric(string value);
    internal static SqlLiteralExpression Numeric(string value, bool isNegative);
    internal static SqlLiteralExpression Binary(string value);
    internal static SqlLiteralExpression Money(string value);
    internal static SqlLiteralExpression Money(string value, bool isNegative);
    internal static SqlLiteralExpression Null(string value);
    internal static SqlLiteralExpression Default(string value);
    internal static SqlLiteralExpression Identifier(SqlIdentifier identifier);
    internal virtual Nullable`1<int> AsInt32();
    internal virtual Nullable`1<long> AsInt64();
    internal virtual Nullable`1<float> AsFloat32();
    internal virtual Nullable`1<double> AsFloat64();
    internal virtual Byte[] AsByteArray();
    internal virtual bool HasDecimalPoint();
    internal virtual int EffectiveNumberOfDigits();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLiteralExpressionCollection : SqlCollection`1<SqlLiteralExpression> {
    internal SqlLiteralExpressionCollection(IEnumerable`1<SqlLiteralExpression> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLiteralStringIdentifier : SqlIdentifier {
    internal SqlLiteralStringIdentifier(string value);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLoginOption : SqlCodeObject {
    private SqlLoginOptionType type;
    internal bool IsVisitable { get; }
    public SqlLoginOptionType Type { get; }
    internal SqlLoginOption(SqlLoginOptionType type);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlLoginOptionType get_Type();
    internal abstract virtual string TypeToString();
    internal static SqlLoginOption Create(string name, SqlLoginOptionContext context);
    internal static SqlLoginOption Create(string name, SqlIdentifier value, SqlLoginOptionContext context);
    internal static SqlLoginOption Create(string name, SqlOnOffValue value, SqlLoginOptionContext context);
    internal static SqlLoginOption Create(string name, SqlLiteralExpression value, SqlLoginOptionContext context);
    internal static SqlLoginOption Create(SqlModificationType modificationType, string name, SqlIdentifier value, SqlLoginOptionContext context);
    internal static SqlLoginOption Create(SqlLoginOptionType loginOptionTypeType);
    internal static SqlLoginOption Create(SqlLoginPassword password, SqlLoginPassword oldPassword);
    private static SqlLoginOption CreateInvalidOption(string name, SqlLoginOptionType type);
    private static SqlLoginOption CreateInvalidOption(string name, SqlLoginOptionType type, SqlCodeObject value);
    private static SqlLoginOption CreateInvalidOption(string name, SqlLoginOptionType type, string value);
    internal OnOffOption AsOnOffOption();
    internal PasswordOption AsPasswordOption();
    internal InvalidOption AsInvalidOption();
    internal ObjectOption`1<T> AsObjectOption();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLoginOptionContext : object {
    private SqlLoginOptionContextItem[] items;
    internal static SqlLoginOptionContext FromCertificateContext;
    internal static SqlLoginOptionContext FromWindowsContext;
    internal static SqlLoginOptionContext WithPasswordContext;
    internal static SqlLoginOptionContext PasswordContext;
    internal static SqlLoginOptionContext AlterOptionsContext;
    private SqlLoginOptionContext(SqlLoginOptionContextItem[] items);
    private static SqlLoginOptionContext();
    public static string GetOptionString(SqlLoginOptionType type);
    public StringToken GetOptionStringToken(SqlLoginOptionType type);
    public SqlLoginOptionType GetOptionType(StringToken stringToken);
    public SqlLoginOptionType GetOptionType(string stringValue);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLoginOptionContextItem : object {
    public StringToken stringToken;
    public SqlLoginOptionType type;
    public static SqlLoginOptionContextItem Hashed;
    public static SqlLoginOptionContextItem MustChange;
    public static SqlLoginOptionContextItem Sid;
    public static SqlLoginOptionContextItem DefaultDatabase;
    public static SqlLoginOptionContextItem DefaultLanguage;
    public static SqlLoginOptionContextItem Credential;
    public static SqlLoginOptionContextItem CheckExpiration;
    public static SqlLoginOptionContextItem CheckPolicy;
    public static SqlLoginOptionContextItem Name;
    public SqlLoginOptionContextItem(SqlLoginOptionType type);
    private static SqlLoginOptionContextItem();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLoginOptionType : Enum {
    public int value__;
    public static SqlLoginOptionType None;
    public static SqlLoginOptionType Hashed;
    public static SqlLoginOptionType MustChange;
    public static SqlLoginOptionType Sid;
    public static SqlLoginOptionType DefaultDatabase;
    public static SqlLoginOptionType DefaultLanguage;
    public static SqlLoginOptionType Credential;
    public static SqlLoginOptionType CheckExpiration;
    public static SqlLoginOptionType CheckPolicy;
    public static SqlLoginOptionType Name;
    public static SqlLoginOptionType Password;
    public static SqlLoginOptionType NoCredential;
    public static SqlLoginOptionType Invalid;
    public static SqlLoginOptionType Unrecognized;
    public static SqlLoginOptionType InvalidValue;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLoginPassword : SqlCodeObject {
    private SqlLiteralExpression password;
    private SqlLoginOptionType optionFlags;
    internal bool IsVisitable { get; }
    public SqlLiteralExpression Password { get; }
    public bool IsHashed { get; }
    public bool MustChange { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlLoginPassword(SqlLiteralExpression password, List`1<SqlLoginOption> options);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlLiteralExpression get_Password();
    public bool get_IsHashed();
    public bool get_MustChange();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlLoginPassword/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMaxDegreeOfParallelismIndexOption : SqlIndexOption {
    private int degreeOfParallelism;
    private bool isValid;
    private static int MaxDegreeOfParallelism;
    private static int MinDegreeOfParallelism;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public int DegreeOfParallelism { get; }
    internal bool IsValid { get; }
    internal SqlMaxDegreeOfParallelismIndexOption(SqlLiteralExpression degreeOfParallelism);
    internal SqlMaxDegreeOfParallelismIndexOption(SqlLiteralExpression degreeOfParallelism, bool isValid);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public int get_DegreeOfParallelism();
    internal bool get_IsValid();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMaxDurationIndexOption : SqlIndexOption {
    private int maxDuration;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public int MaxDuration { get; }
    internal SqlMaxDurationIndexOption(SqlLiteralExpression maxDuration);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public int get_MaxDuration();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeAction : SqlCodeObject {
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeActionClause : SqlCodeObject {
    private SqlMergeConditionType conditionType;
    private SqlBooleanExpression mergeSearchCondition;
    private SqlMergeAction mergeAction;
    internal bool IsVisitable { get; }
    public SqlMergeConditionType MergeConditionType { get; }
    public SqlBooleanExpression SearchCondition { get; }
    public SqlMergeAction Action { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlMergeActionClause(SqlMergeConditionType conditionType, SqlMergeAction mergeAction);
    internal SqlMergeActionClause(SqlMergeConditionType conditionType, SqlBooleanExpression mergeSearchCondition, SqlMergeAction mergeAction);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlMergeConditionType get_MergeConditionType();
    public SqlBooleanExpression get_SearchCondition();
    public SqlMergeAction get_Action();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeActionClause/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeActionClauseCollection : SqlCollection`1<SqlMergeActionClause> {
    internal SqlMergeActionClauseCollection(IEnumerable`1<SqlMergeActionClause> actionClauses);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeConditionType : Enum {
    public int value__;
    public static SqlMergeConditionType Error;
    public static SqlMergeConditionType Matched;
    public static SqlMergeConditionType SourceNotMatched;
    public static SqlMergeConditionType TargetNotMatched;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeSpecification : SqlDmlSpecification {
    private SqlIdentifier alias;
    private SqlTableExpression source;
    private SqlConditionClause onClause;
    private SqlMergeActionClauseCollection actionClauses;
    internal bool IsVisitable { get; }
    public SqlIdentifier Alias { get; }
    public SqlTableExpression Source { get; }
    public SqlConditionClause OnClause { get; }
    public SqlMergeActionClauseCollection ActionClauses { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlMergeSpecification(SqlTopSpecification topSpecification, DmlTarget dmlTarget, SqlIdentifier alias, SqlTableExpression source, SqlConditionClause onClause, List`1<SqlMergeActionClause> mergeActionClauses, List`1<SqlOutputClause> outputClauses);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlIdentifier get_Alias();
    public SqlTableExpression get_Source();
    public SqlConditionClause get_OnClause();
    public SqlMergeActionClauseCollection get_ActionClauses();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeSpecification/<get_Children>d__23")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMergeStatement : SqlDmlStatement {
    private SqlMergeSpecification mergeSpecification;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlMergeSpecification MergeSpecification { get; }
    internal SqlDmlSpecification DmlSpecification { get; }
    internal SqlMergeStatement(SqlMergeSpecification mergeSpecification);
    internal SqlMergeStatement(SqlQueryWithClause queryWithClause, SqlMergeSpecification mergeSpecification);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlMergeSpecification get_MergeSpecification();
    internal virtual SqlDmlSpecification get_DmlSpecification();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMissingInsertSource : SqlInsertSource {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModificationType : Enum {
    public int value__;
    public static SqlModificationType Set;
    public static SqlModificationType Add;
    public static SqlModificationType Drop;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleCalledOnNullInputOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleEncryptionOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleExecuteAsOption : SqlModuleOption {
    private SqlExecuteAsClause executeAsClause;
    internal bool IsVisitable { get; }
    internal SqlExecuteAsClause ExecuteAsClause { get; }
    internal string DisplayName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlModuleExecuteAsOption(SqlExecuteAsClause executeAsClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual SqlExecuteAsClause get_ExecuteAsClause();
    internal virtual string get_DisplayName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleExecuteAsOption/<get_Children>d__13")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleExecutionContextType : Enum {
    public int value__;
    public static SqlModuleExecutionContextType Caller;
    public static SqlModuleExecutionContextType Owner;
    public static SqlModuleExecutionContextType Self;
    public static SqlModuleExecutionContextType User;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleInlineOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleNativeCompilationOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleOption : SqlCodeObject {
    private SqlModuleOptionType type;
    public SqlModuleOptionType Type { get; }
    internal SqlModuleOptionMask TypeMask { get; }
    internal SqlExecuteAsClause ExecuteAsClause { get; }
    internal string DisplayName { get; }
    internal SqlModuleOption(SqlModuleOptionType type);
    public SqlModuleOptionType get_Type();
    internal virtual SqlModuleOptionMask get_TypeMask();
    internal virtual SqlExecuteAsClause get_ExecuteAsClause();
    internal static SqlModuleOptionMask GetTypeMask(SqlModuleOptionType type);
    internal abstract virtual string get_DisplayName();
    internal static SqlModuleOption Create(string name);
    internal static SqlModuleEncryptionOption CreateEncryptionOption();
    internal static SqlModuleRecompileOption CreateRecompileOption();
    internal static SqlModuleSchemaBindingOption CreateSchemaBindingOption();
    internal static SqlModuleViewMetadataOption CreateViewMetadataOption();
    internal static SqlModuleReturnsNullOnNullInputOption CreateReturnsNullOnNullInputOption();
    internal static SqlModuleCalledOnNullInputOption CreateCalledOnNullInputOption();
    internal static SqlModuleExecuteAsOption ExecuteAs(SqlExecuteAsClause executeAsClause);
    internal static SqlModuleNativeCompilationOption CreateNativeCompilationOption();
    internal static SqlModuleInlineOption CreateInlineOption();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleOptionMask : Enum {
    public int value__;
    public static SqlModuleOptionMask None;
    public static SqlModuleOptionMask Recompile;
    public static SqlModuleOptionMask Encryption;
    public static SqlModuleOptionMask ExecuteAs;
    public static SqlModuleOptionMask SchemaBinding;
    public static SqlModuleOptionMask ViewMetadata;
    public static SqlModuleOptionMask ReturnsNullOnNullInput;
    public static SqlModuleOptionMask CalledOnNullInput;
    public static SqlModuleOptionMask NativeCompilation;
    public static SqlModuleOptionMask Inline;
    public static SqlModuleOptionMask Invalid;
    public static SqlModuleOptionMask NullInputOptions;
    public static SqlModuleOptionMask CreateProcedure;
    public static SqlModuleOptionMask CreateTrigger;
    public static SqlModuleOptionMask CreateView;
    public static SqlModuleOptionMask ExecuteModule;
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleOptionType : Enum {
    public int value__;
    public static SqlModuleOptionType None;
    public static SqlModuleOptionType Recompile;
    public static SqlModuleOptionType Encryption;
    public static SqlModuleOptionType ExecuteAs;
    public static SqlModuleOptionType SchemaBinding;
    public static SqlModuleOptionType ViewMetadata;
    public static SqlModuleOptionType ReturnsNullOnNullInput;
    public static SqlModuleOptionType CalledOnNullInput;
    public static SqlModuleOptionType NativeCompilation;
    public static SqlModuleOptionType Inline;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleRecompileOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleReturnsNullOnNullInputOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleSchemaBindingOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlModuleViewMetadataOption : SqlModuleOption {
    internal bool IsVisitable { get; }
    internal string DisplayName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual string get_DisplayName();
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMultipartIdentifier : SqlCodeObject {
    public int Count { get; }
    public SqlIdentifier Item { get; }
    internal sealed virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal sealed virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    public abstract virtual int get_Count();
    public abstract virtual SqlIdentifier get_Item(int index);
    public abstract virtual IEnumerator`1<SqlIdentifier> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMultistatementFunctionBodyDefinition : SqlFunctionBodyDefinition {
    private SqlCompoundStatement compoundStatement;
    internal bool IsVisitable { get; }
    internal SqlClrFunctionBodyDefinition AsSqlClrFunctionBodyDefinition { get; }
    internal SqlInlineFunctionBodyDefinition AsSqlInlineFunctionBodyDefinition { get; }
    internal SqlMultistatementFunctionBodyDefinition AsSqlMultistatementFunctionBodyDefinition { get; }
    public SqlCompoundStatement CompoundStatement { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlMultistatementFunctionBodyDefinition(SqlCompoundStatement compoundStatement);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual SqlClrFunctionBodyDefinition get_AsSqlClrFunctionBodyDefinition();
    internal sealed virtual SqlInlineFunctionBodyDefinition get_AsSqlInlineFunctionBodyDefinition();
    internal sealed virtual SqlMultistatementFunctionBodyDefinition get_AsSqlMultistatementFunctionBodyDefinition();
    internal virtual void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    public SqlCompoundStatement get_CompoundStatement();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMultistatementFunctionBodyDefinition/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMultistatementTableRelationalFunctionDefinition : SqlFunctionDefinition {
    private ITableVariable boundTable;
    private static SqlModuleOptionMask ValidOptions;
    private SqlLiteralExpression variable;
    private SqlTableFunctionReturnType returnType;
    private SqlMultistatementFunctionBodyDefinition bodyDefinition;
    internal bool IsVisitable { get; }
    internal bool IsTableValuedFunction { get; }
    internal bool IsInlineTableFunction { get; }
    internal bool IsClrFunction { get; }
    public ITableVariable BoundTable { get; }
    public IMetadataObject BoundObject { get; }
    public string VariableName { get; }
    public SqlTableFunctionReturnType ReturnType { get; }
    public SqlMultistatementFunctionBodyDefinition BodyDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlMultistatementTableRelationalFunctionDefinition(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters, SqlLiteralExpression variable, SqlTableFunctionReturnType returnType, List`1<SqlModuleOption> options, SqlMultistatementFunctionBodyDefinition bodyDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsTableValuedFunction();
    internal sealed virtual bool get_IsInlineTableFunction();
    internal sealed virtual bool get_IsClrFunction();
    public ITableVariable get_BoundTable();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void BindDefinition(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    internal virtual void Unbind();
    public string get_VariableName();
    public SqlTableFunctionReturnType get_ReturnType();
    public SqlMultistatementFunctionBodyDefinition get_BodyDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlMultistatementTableRelationalFunctionDefinition/<get_Children>d__31")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlFunctionReturnType GetReturnType();
    internal virtual SqlFunctionBodyDefinition GetBodyDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNotBooleanExpression : SqlBooleanExpression {
    private SqlBooleanExpression expression;
    internal bool IsVisitable { get; }
    public SqlBooleanExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlNotBooleanExpression(SqlBooleanExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlBooleanExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNotBooleanExpression/<get_Children>d__12")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullAssignment : SqlAssignment {
    private SqlNullScalarExpression value;
    internal bool IsVisitable { get; }
    public SqlNullScalarExpression Value { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlNullAssignment(SqlNullScalarExpression scalarExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlNullScalarExpression get_Value();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullAssignment/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullInsertSource : SqlInsertSource {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullQualifier : SqlCodeObject {
    private IJsonNullQualifier boundJsonNullQualifier;
    private SqlJsonNullQualifier jsonNullQualifierValue;
    internal bool IsVisitable { get; }
    public IJsonNullQualifier BoundJsonNullQualifier { get; }
    public SqlJsonNullQualifier JsonNullQualifierValue { get; public set; }
    public SqlNullQualifier(SqlJsonNullQualifier jsonNullQualifierValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public IJsonNullQualifier get_BoundJsonNullQualifier();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    public SqlJsonNullQualifier get_JsonNullQualifierValue();
    public void set_JsonNullQualifierValue(SqlJsonNullQualifier value);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullQueryExpression : SqlQueryExpression {
    private IBindingContext bindingContext;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    internal LocalBindingContext LocalBindingContext { get; }
    internal bool HasUnionAll { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual LocalBindingContext get_LocalBindingContext();
    internal virtual bool get_HasUnionAll();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void ShallowBind(CteBindingContext bindingContext);
    internal virtual void DeepBind(CteBindingContext bindingContext, SqlIdentifier cteName);
    internal virtual void Unbind();
    internal virtual SqlSelectIntoClause GetIntoClause();
    internal virtual void Validate(QueryExpressionValidateOption option);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullScalarExpression : SqlScalarExpression {
    private IScalarExpression boundScalar;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullStatement : SqlStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlNullTableExpression : SqlTableExpression {
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifier : SqlMultipartIdentifier {
    internal bool IsVisitable { get; }
    public SqlIdentifier ServerName { get; }
    public SqlIdentifier DatabaseName { get; }
    public SqlIdentifier SchemaName { get; }
    public SqlIdentifier ObjectName { get; }
    public bool IsMultiPartName { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider, IMetadataObject boundObject);
    internal static SqlObjectIdentifier Create(SqlIdentifier objectName);
    internal static SqlObjectIdentifier Create(SqlIdentifier schemaName, SqlIdentifier objectName);
    internal static SqlObjectIdentifier Create(SqlIdentifier databaseName, SqlIdentifier schemaName, SqlIdentifier objectName);
    internal static SqlObjectIdentifier Create(List`1<SqlIdentifier> ids);
    public abstract virtual SqlIdentifier get_ServerName();
    public abstract virtual SqlIdentifier get_DatabaseName();
    public abstract virtual SqlIdentifier get_SchemaName();
    public abstract virtual SqlIdentifier get_ObjectName();
    public abstract virtual bool get_IsMultiPartName();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectIdentifierCollection : SqlCollection`1<SqlObjectIdentifier> {
    internal SqlObjectIdentifierCollection(IEnumerable`1<SqlObjectIdentifier> objects);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectReference : SqlCodeObject {
    private SqlObjectIdentifier objectIdentifier;
    private SqlScalarVariableRefExpression variable;
    internal bool IsVisitable { get; }
    public SqlObjectIdentifier ObjectIdentifier { get; }
    public SqlScalarVariableRefExpression Variable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlObjectReference(SqlObjectIdentifier objectIdentifier);
    internal SqlObjectReference(SqlScalarVariableRefExpression variable);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlObjectIdentifier get_ObjectIdentifier();
    public SqlScalarVariableRefExpression get_Variable();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlObjectReference/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOffsetFetchClause : SqlCodeObject {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Fetch>k__BackingField;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Offset { get; private set; }
    public SqlScalarExpression Fetch { get; private set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public SqlOffsetFetchClause(SqlScalarExpression offset, SqlScalarExpression fetch);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(SqlScalarExpression value);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Fetch();
    [CompilerGeneratedAttribute]
private void set_Fetch(SqlScalarExpression value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOffsetFetchClause/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOnClauseError : SqlConditionClause {
    internal bool IsVisitable { get; }
    internal SqlOnClauseError(SqlBooleanExpression booleanExpr);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOnlineIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlOnlineIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOnOffValue : Enum {
    public int value__;
    public static SqlOnOffValue None;
    public static SqlOnOffValue Off;
    public static SqlOnOffValue On;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOptimizeForSequentialKeyIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlOptimizeForSequentialKeyIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOrderByClause : SqlCodeObject {
    private OrderByClauseBindingContext orderByBindingContext;
    [CompilerGeneratedAttribute]
private SqlOrderByItemCollection <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOffsetFetchClause <OffsetFetchClause>k__BackingField;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    public SqlOrderByItemCollection Items { get; private set; }
    public SqlOffsetFetchClause OffsetFetchClause { get; internal set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlOrderByClause(List`1<SqlOrderByItem> items);
    internal SqlOrderByClause(List`1<SqlOrderByItem> items, SqlOffsetFetchClause offsetFetchClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    [CompilerGeneratedAttribute]
public SqlOrderByItemCollection get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(SqlOrderByItemCollection value);
    [CompilerGeneratedAttribute]
public SqlOffsetFetchClause get_OffsetFetchClause();
    [CompilerGeneratedAttribute]
internal void set_OffsetFetchClause(SqlOffsetFetchClause value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOrderByClause/<get_Children>d__24")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOrderByItem : SqlCodeObject {
    private SqlSortOrder sortOrder;
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    public SqlSortOrder SortOrder { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlOrderByItem(SqlScalarExpression expression, SqlSortOrder order);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlSortOrder get_SortOrder();
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOrderByItem/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOrderByItemCollection : SqlCollection`1<SqlOrderByItem> {
    internal SqlOrderByItemCollection(List`1<SqlOrderByItem> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOutputClause : SqlCodeObject {
    private IBindingContext bindingContext;
    private SqlSelectExpressionCollection outputExpressions;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    public SqlSelectExpressionCollection OutputExpressions { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal bool IsSqlOutputIntoClause { get; }
    internal SqlOutputIntoClause AsSqlOutputIntoClause { get; }
    internal SqlOutputClause(List`1<SqlSelectExpression> outputExpressions);
    internal SqlOutputClause(SqlOutputClause temporaryOutputClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlSelectExpressionCollection get_OutputExpressions();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOutputClause/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual bool get_IsSqlOutputIntoClause();
    internal virtual SqlOutputIntoClause get_AsSqlOutputIntoClause();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOutputIntoClause : SqlOutputClause {
    private SqlIntoClause intoClause;
    internal bool IsVisitable { get; }
    internal bool IsSqlOutputIntoClause { get; }
    internal SqlOutputIntoClause AsSqlOutputIntoClause { get; }
    public SqlIntoClause IntoClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlOutputIntoClause(SqlOutputClause outputClause, SqlIntoClause intoClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual bool get_IsSqlOutputIntoClause();
    internal virtual SqlOutputIntoClause get_AsSqlOutputIntoClause();
    public SqlIntoClause get_IntoClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlOutputIntoClause/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlPadIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlPadIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlParameterDeclaration : SqlVariableDeclaration {
    private SqlParameterOption option;
    private SqlParameterOptionType optionTypes;
    internal bool IsVisitable { get; }
    internal SqlParameterOption Option { get; }
    public bool IsOutput { get; }
    public bool IsReadOnly { get; }
    internal SqlParameterDeclaration(string name, SqlDataTypeSpecification type, SqlScalarExpression defaultValue, SqlParameterOption option);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IScalarVariable CreateScalarVariable(IScalarDataType dataType, IMetadataFactory factory);
    internal virtual ITableVariable CreateTableVariable(ITableDataType dataType, IMetadataFactory factory);
    internal virtual ICursorVariable CreateCursorVariable(IMetadataFactory factory);
    internal void Validate(SqlParameterOptionType validOptions);
    internal static void Validate(IEnumerable`1<SqlParameterDeclaration> paramDecls, SqlParameterOptionType validOptions);
    internal SqlParameterOption get_Option();
    public bool get_IsOutput();
    public bool get_IsReadOnly();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlParameterDeclarationCollection : SqlCollection`1<SqlParameterDeclaration> {
    internal SqlParameterDeclarationCollection(IEnumerable`1<SqlParameterDeclaration> items);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlParameterOption : SqlCodeObject {
    public SqlParameterOptionType Type;
    internal bool IsVisitable { get; }
    private SqlParameterOption(SqlParameterOptionType type);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public static SqlParameterOption Output();
    public static SqlParameterOption ReadOnly();
    internal static SqlParameterOption Create(string name);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlParameterOptionType : Enum {
    public int value__;
    public static SqlParameterOptionType None;
    public static SqlParameterOptionType Output;
    public static SqlParameterOptionType ReadOnly;
    public static SqlParameterOptionType Invalid;
    public static SqlParameterOptionType FunctionValidOptions;
    public static SqlParameterOptionType ProcedureValidOptions;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlPivotClause : SqlCodeObject {
    private SqlObjectIdentifier aggregateFunctionName;
    private SqlColumnRefExpressionCollection aggregatedColumns;
    private SqlColumnRefExpression pivotedColumn;
    private SqlColumnRefExpressionCollection columnList;
    internal bool IsVisitable { get; }
    public SqlObjectIdentifier AggregateFunctionName { get; }
    public SqlColumnRefExpressionCollection AggregatedColumns { get; }
    public SqlColumnRefExpression PivotedColumn { get; }
    public SqlColumnRefExpressionCollection ColumnList { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlPivotClause(SqlObjectIdentifier aggregationFunction, List`1<SqlColumnRefExpression> aggregatedColumnList, SqlColumnRefExpression pivotedColumn, List`1<SqlColumnRefExpression> columnList);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlObjectIdentifier get_AggregateFunctionName();
    public SqlColumnRefExpressionCollection get_AggregatedColumns();
    public SqlColumnRefExpression get_PivotedColumn();
    public SqlColumnRefExpressionCollection get_ColumnList();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlPivotClause/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlPivotTableExpression : SqlTableExpression {
    private SqlTableExpression source;
    private SqlPivotClause pivotClause;
    private SqlIdentifier alias;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    public SqlTableExpression Source { get; }
    public SqlPivotClause PivotClause { get; }
    public SqlIdentifier Alias { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlPivotTableExpression(SqlTableExpression source, SqlPivotClause pivotClause, SqlIdentifier alias);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlTableExpression get_Source();
    public SqlPivotClause get_PivotClause();
    public SqlIdentifier get_Alias();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlPivotTableExpression/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlPrimaryKeyConstraint : SqlUniqueConstraintBase {
    internal bool IsVisitable { get; }
    internal SqlPrimaryKeyConstraint(SqlClusterOption clusterOption, List`1<SqlIndexedColumn> indexedColumnList, List`1<SqlIndexOption> indexOptions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlProcedureDefinition : SqlCodeObject {
    protected SqlObjectIdentifier name;
    protected Nullable`1<int> number;
    protected SqlParameterDeclarationCollection parameters;
    protected SqlCollection`1<SqlModuleOption> options;
    protected bool isForReplication;
    internal bool IsVisitable { get; }
    public SqlObjectIdentifier Name { get; }
    public Nullable`1<int> Number { get; }
    public SqlParameterDeclarationCollection Parameters { get; }
    public bool IsForReplication { get; }
    public SqlCollection`1<SqlModuleOption> Options { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlProcedureDefinition(SqlObjectIdentifier name, SqlLiteralExpression number, List`1<SqlParameterDeclaration> parameters, List`1<SqlModuleOption> options, bool forReplication);
    internal SqlProcedureDefinition(SqlProcedureDefinition sqlProcedureDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, IMutableStoredProcedure storedProc);
    public SqlObjectIdentifier get_Name();
    public Nullable`1<int> get_Number();
    public SqlParameterDeclarationCollection get_Parameters();
    public bool get_IsForReplication();
    public SqlCollection`1<SqlModuleOption> get_Options();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlProcedureDefinition/<get_Children>d__26")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlProcedureDefinitionForCreate : SqlProcedureDefinition {
    private bool isOrAlterStatement;
    public bool IsOrAlterStatement { get; }
    internal SqlProcedureDefinitionForCreate(SqlProcedureDefinition sqlProcedureDefinition, bool isOrAlterStatement);
    public bool get_IsOrAlterStatement();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlQualifiedJoinTableExpression : SqlJoinTableExpression {
    private SqlConditionClause onClause;
    internal bool IsVisitable { get; }
    public SqlConditionClause OnClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlQualifiedJoinTableExpression(SqlTableExpression left, SqlJoinOperatorType joinOperator, SqlTableExpression right, SqlConditionClause onClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlConditionClause get_OnClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlQualifiedJoinTableExpression/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlQueryExpression : SqlCodeObject {
    internal LocalBindingContext LocalBindingContext { get; }
    internal bool HasUnionAll { get; }
    internal abstract virtual LocalBindingContext get_LocalBindingContext();
    internal abstract virtual void ShallowBind(CteBindingContext bindingContext);
    internal abstract virtual void DeepBind(CteBindingContext bindingContext, SqlIdentifier cteName);
    internal abstract virtual bool get_HasUnionAll();
    internal abstract virtual SqlSelectIntoClause GetIntoClause();
    internal abstract virtual void Validate(QueryExpressionValidateOption option);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlQuerySpecification : SqlQueryExpression {
    private LocalBindingContext bindingContext;
    private SqlSelectClause selectClause;
    private SqlSelectIntoClause intoClause;
    private SqlFromClause fromClause;
    private SqlWhereClause whereClause;
    private SqlGroupByClause groupByClause;
    private SqlHavingClause havingClause;
    private SqlWindowClause windowClause;
    private SqlOrderByClause orderByClause;
    private SqlForClause forClause;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    internal LocalBindingContext LocalBindingContext { get; }
    internal bool HasAnyBindSkipped { get; }
    internal bool HasUnionAll { get; }
    public SqlSelectClause SelectClause { get; }
    public SqlSelectIntoClause IntoClause { get; }
    public SqlFromClause FromClause { get; }
    public SqlWhereClause WhereClause { get; }
    public SqlGroupByClause GroupByClause { get; }
    public SqlHavingClause HavingClause { get; }
    public SqlWindowClause WindowClause { get; }
    public SqlOrderByClause OrderByClause { get; }
    public SqlForClause ForClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private SqlQuerySpecification(SqlSelectClause selectClause, SqlSelectIntoClause intoClause, SqlFromClause fromClause, SqlWhereClause whereClause, SqlGroupByClause groupByClause, SqlHavingClause havingClause, SqlOrderByClause orderByClause, SqlForClause forClause, SqlWindowClause windowClause);
    internal SqlQuerySpecification(SqlSelectClause selectClause, SqlFromClause fromClause, SqlWhereClause whereClause, SqlGroupByClause groupByClause, SqlHavingClause havingClause, SqlOrderByClause orderByClause, SqlForClause forClause, SqlWindowClause windowClause);
    internal SqlQuerySpecification(SqlSelectClause selectClause, SqlSelectIntoClause intoClause, SqlFromClause fromClause, SqlWhereClause whereClause, SqlGroupByClause groupByClause, SqlHavingClause havingClause, SqlWindowClause windowClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal virtual LocalBindingContext get_LocalBindingContext();
    internal virtual bool get_HasAnyBindSkipped();
    internal virtual bool get_HasUnionAll();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void ShallowBind(CteBindingContext bindingContext);
    internal virtual void DeepBind(CteBindingContext bindingContext, SqlIdentifier cteName);
    internal virtual void Unbind();
    public SqlSelectClause get_SelectClause();
    public SqlSelectIntoClause get_IntoClause();
    public SqlFromClause get_FromClause();
    public SqlWhereClause get_WhereClause();
    public SqlGroupByClause get_GroupByClause();
    public SqlHavingClause get_HavingClause();
    public SqlWindowClause get_WindowClause();
    public SqlOrderByClause get_OrderByClause();
    public SqlForClause get_ForClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlQuerySpecification/<get_Children>d__50")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlSelectIntoClause GetIntoClause();
    internal virtual void Validate(QueryExpressionValidateOption option);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlQueryWithClause : SqlCodeObject {
    private CteBindingContext cteBindingContext;
    private SqlCommonTableExpressionCollection cteExpressions;
    private SqlChangeTrackingContext changeTrackingContext;
    private SqlXmlNamespacesDeclaration xmlNamespacesDeclaration;
    internal bool IsVisitable { get; }
    internal bool CanBeBoundIndependently { get; }
    internal CteBindingContext CTEBoundContext { get; }
    public SqlCommonTableExpressionCollection CommonTableExpressions { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlQueryWithClause(List`1<SqlCommonTableExpression> expressions);
    internal SqlQueryWithClause(SqlXmlNamespacesDeclaration xmlNamespacesDeclaration, List`1<SqlCommonTableExpression> expressions);
    internal SqlQueryWithClause(SqlChangeTrackingContext changeTrackingContext, SqlXmlNamespacesDeclaration xmlNamespacesDeclaration, List`1<SqlCommonTableExpression> expressions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_CanBeBoundIndependently();
    internal CteBindingContext get_CTEBoundContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    public SqlCommonTableExpressionCollection get_CommonTableExpressions();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlQueryWithClause/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRestoreDatabaseStatement : SqlBackupRestoreDatabaseStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlRestoreDatabaseStatement Create(bool isLoadStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRestoreInformationStatement : SqlStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlRestoreInformationStatement Create(bool isDumpStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRestoreLogStatement : SqlBackupRestoreLogStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlRestoreLogStatement Create(bool isLoadStatement, bool isLoadTransaction);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRestoreMasterKeyStatement : SqlBackupRestoreMasterKeyStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlRestoreMasterKeyStatement Create(bool isDumpStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRestoreServiceMasterKeyStatement : SqlBackupRestoreServiceMasterKeyStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlRestoreServiceMasterKeyStatement Create(bool isDumpStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRestoreTableStatement : SqlBackupRestoreTableStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal static SqlRestoreTableStatement Create(bool isLoadStatement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlResumableIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlResumableIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlReturnStatement : SqlStatement {
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal bool IsReturnStatement { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlReturnStatement(SqlScalarExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal sealed virtual bool get_IsReturnStatement();
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlReturnStatement/<get_Children>d__19")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRevokeStatement : SqlGdrStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRollupGroupByItem : SqlGroupingSetItem {
    private SqlCubeRollupArgumentCollection items;
    internal bool IsVisitable { get; }
    public SqlCubeRollupArgumentCollection Items { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlRollupGroupByItem(List`1<SqlSimpleGroupByItem> items);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlCubeRollupArgumentCollection get_Items();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRollupGroupByItem/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRowConstructorExpression : SqlCodeObject {
    private SqlScalarExpressionCollection values;
    internal bool IsVisitable { get; }
    public SqlScalarExpressionCollection Values { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlRowConstructorExpression(List`1<SqlScalarExpression> values);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpressionCollection get_Values();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRowConstructorExpression/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlRowConstructorExpressionCollection : SqlCollection`1<SqlRowConstructorExpression> {
    internal SqlRowConstructorExpressionCollection(IEnumerable`1<SqlRowConstructorExpression> expressions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarClrFunctionDefinition : SqlFunctionDefinition {
    private static SqlModuleOptionMask ValidOptions;
    private SqlScalarFunctionReturnType returnType;
    private SqlClrFunctionBodyDefinition bodyDefinition;
    internal bool IsVisitable { get; }
    internal bool IsTableValuedFunction { get; }
    internal bool IsInlineTableFunction { get; }
    internal bool IsClrFunction { get; }
    public SqlScalarFunctionReturnType ReturnType { get; }
    public SqlClrFunctionBodyDefinition BodyDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarClrFunctionDefinition(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters, SqlScalarFunctionReturnType returnType, List`1<SqlModuleOption> options, SqlClrFunctionBodyDefinition bodyDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsTableValuedFunction();
    internal sealed virtual bool get_IsInlineTableFunction();
    internal sealed virtual bool get_IsClrFunction();
    public SqlScalarFunctionReturnType get_ReturnType();
    public SqlClrFunctionBodyDefinition get_BodyDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarClrFunctionDefinition/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlFunctionReturnType GetReturnType();
    internal virtual SqlFunctionBodyDefinition GetBodyDefinition();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarExpression : SqlCodeObject {
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    public IMetadataObject BoundObject { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    internal bool IsBinary { get; }
    internal bool IsCase { get; }
    internal bool IsCollate { get; }
    internal bool IsColumnReference { get; }
    internal bool IsLiteral { get; }
    internal bool IsFunction { get; }
    internal bool IsGlobalVariableReference { get; }
    internal bool IsSubQuery { get; }
    internal bool IsUnary { get; }
    internal bool IsUdt { get; }
    internal bool IsVariableReference { get; }
    internal bool IsNull { get; }
    internal bool IsError { get; }
    internal bool IsSimpleExpression { get; }
    internal abstract virtual bool get_IsValidFilterExpressionConstant();
    public abstract virtual IScalar get_BoundScalar();
    public virtual IMetadataObject get_BoundObject();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal static SqlScalarExpression Create(SqlScalarExpression expression, SqlCollation collation);
    internal abstract virtual ScalarExpressionType get_ExpressionType();
    internal abstract virtual bool get_IsConstantExpression();
    internal bool get_IsBinary();
    internal bool get_IsCase();
    internal bool get_IsCollate();
    internal bool get_IsColumnReference();
    internal bool get_IsLiteral();
    internal bool get_IsFunction();
    internal bool get_IsGlobalVariableReference();
    internal bool get_IsSubQuery();
    internal bool get_IsUnary();
    internal bool get_IsUdt();
    internal bool get_IsVariableReference();
    internal bool get_IsNull();
    internal bool get_IsError();
    private bool IsOfType(ScalarExpressionType type);
    internal bool get_IsSimpleExpression();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarExpressionCollection : SqlCollection`1<SqlScalarExpression> {
    internal SqlScalarExpressionCollection(SqlScalarExpression expression);
    internal SqlScalarExpressionCollection(IEnumerable`1<SqlScalarExpression> expressions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarExpressionError : SqlScalarExpression {
    private IScalarExpression boundScalar;
    internal List`1<SqlCodeObject> children;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    private IEnumerable`1<SqlIdentifier> Identifiers { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarExpressionError(SqlErrorCodeObject errorCodeObject);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarExpressionError/<get_Identifiers>d__15")]
private IEnumerable`1<SqlIdentifier> get_Identifiers();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarFunctionCallExpression : SqlScalarExpression {
    private SqlScalarExpressionCollection arguments;
    public IScalar BoundScalar { get; }
    public IScalarFunction BoundFunction { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlScalarExpressionCollection Arguments { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarFunctionCallExpression(SqlScalarExpression argument);
    internal SqlScalarFunctionCallExpression(IEnumerable`1<SqlScalarExpression> arguments);
    public virtual IScalar get_BoundScalar();
    public abstract virtual IScalarFunction get_BoundFunction();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual MethodHelpText GetMyMethodHelpText(LexLocation caretLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlScalarExpressionCollection get_Arguments();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarFunctionCallExpression/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarFunctionReturnType : SqlFunctionReturnType {
    private SqlDataTypeSpecification dataType;
    internal bool IsVisitable { get; }
    internal SqlScalarFunctionReturnType AsSqlScalarFunctionReturnType { get; }
    internal SqlTableFunctionReturnType AsSqlTableFunctionReturnType { get; }
    public SqlDataTypeSpecification DataType { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarFunctionReturnType(SqlDataTypeSpecification dataType);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual SqlScalarFunctionReturnType get_AsSqlScalarFunctionReturnType();
    internal sealed virtual SqlTableFunctionReturnType get_AsSqlTableFunctionReturnType();
    internal virtual void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    private void Bind(BatchBindingContext bindingContext, IMutableScalarValuedFunction function);
    public SqlDataTypeSpecification get_DataType();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarFunctionReturnType/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarRefExpression : SqlScalarExpression {
    private SqlMultipartIdentifier multipartIdentifier;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    internal bool IsPrefixed { get; }
    public SqlMultipartIdentifier MultipartIdentifier { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarRefExpression(SqlMultipartIdentifier multipartIdentifier);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public sealed virtual IScalar get_BoundScalar();
    internal void CheckAndReportErrors(LookupResult result, int columnIndex, bool isPrefixed, IColumn boundColumn, ITabular boundTable);
    internal IMetadataObject GetBoundObjectForIdentifier(int index);
    private bool IsValidXmlNodeUse(IXmlDataType dataType);
    internal static SqlScalarRefExpression ColumnOrPropertyRefExpression(SqlMultipartIdentifier multipartIdentifier);
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    internal bool get_IsPrefixed();
    public SqlMultipartIdentifier get_MultipartIdentifier();
    public virtual string ToString();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarRefExpression/<get_Children>d__27")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarRelationalFunctionDefinition : SqlFunctionDefinition {
    private static SqlModuleOptionMask ValidOptions;
    private SqlScalarFunctionReturnType returnType;
    private SqlMultistatementFunctionBodyDefinition bodyDefinition;
    internal bool IsVisitable { get; }
    internal bool IsTableValuedFunction { get; }
    internal bool IsInlineTableFunction { get; }
    internal bool IsClrFunction { get; }
    public SqlScalarFunctionReturnType ReturnType { get; }
    public SqlMultistatementFunctionBodyDefinition BodyDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarRelationalFunctionDefinition(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters, SqlScalarFunctionReturnType returnType, List`1<SqlModuleOption> options, SqlMultistatementFunctionBodyDefinition bodyDefinition);
    private static SqlScalarRelationalFunctionDefinition();
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsTableValuedFunction();
    internal sealed virtual bool get_IsInlineTableFunction();
    internal sealed virtual bool get_IsClrFunction();
    public SqlScalarFunctionReturnType get_ReturnType();
    public SqlMultistatementFunctionBodyDefinition get_BodyDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarRelationalFunctionDefinition/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlFunctionReturnType GetReturnType();
    internal virtual SqlFunctionBodyDefinition GetBodyDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarSubQueryExpression : SqlScalarExpression {
    private IScalar boundScalar;
    private SqlQueryExpression queryExpression;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlQueryExpression QueryExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarSubQueryExpression(SqlQueryExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlQueryExpression get_QueryExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarSubQueryExpression/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarVariableAssignment : SqlVariableAssignment {
    private SqlScalarVariableRefExpression variable;
    private SqlScalarExpression value;
    internal bool IsVisitable { get; }
    public SqlScalarVariableRefExpression Variable { get; }
    public SqlScalarExpression Value { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlScalarVariableAssignment(SqlScalarVariableRefExpression variable, SqlAssignmentOperatorType operatorType, SqlScalarExpression value);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlScalarVariableRefExpression get_Variable();
    public SqlScalarExpression get_Value();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarVariableAssignment/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarVariableRefExpression : SqlScalarExpression {
    private ILocalVariable boundVariable;
    private string variableName;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public ILocalVariable BoundVariable { get; }
    public IScalar BoundScalar { get; }
    public IMetadataObject BoundObject { get; }
    public string VariableName { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    internal SqlScalarVariableRefExpression(string variableName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public ILocalVariable get_BoundVariable();
    public virtual IScalar get_BoundScalar();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(IBindingContext bindingContext, bool allowTableVariables);
    internal virtual void Unbind();
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    public static SqlScalarVariableRefExpression Create(string variableName);
    public static SqlScalarVariableRefExpression RemoveColonCharacterAndCreate(string variableName);
    public string get_VariableName();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScalarVariableRefExpressionError : SqlScalarVariableRefExpression {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSchemaElementCollection : SqlCollection`1<SqlStatement> {
    internal SqlSchemaElementCollection(IEnumerable`1<SqlStatement> schemaElements);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScript : SqlCodeObject {
    private ErrorCollection bindErrors;
    private LexicalScope lexicalScope;
    private BatchBindingContext bindingContext;
    private GeneralErrorHandler errorHandler;
    private ErrorCollection parseErrors;
    private SqlBatchCollection batches;
    private bool isIncrementalMode;
    private ErrorCollection errorCollection;
    internal bool IsVisitable { get; }
    public SqlStatement Statement { get; }
    internal IBindingContext BindingContext { get; }
    internal ParseContext ParseContext { get; }
    public SqlBatchCollection Batches { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    public IEnumerable`1<Error> Errors { get; }
    internal bool IsIncrementalMode { get; }
    internal SqlScript(List`1<SqlBatch> batches, bool isIncrementalMode);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public sealed virtual SqlStatement get_Statement();
    internal virtual LexicalScope GetLexicalScope();
    internal virtual IBindingContext get_BindingContext();
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, BindWorkList workList);
    internal void BeforeBind();
    internal void AfterBind();
    private void BindScript(BatchBindingContext bindingContext, BindWorkList workList);
    private void UpdateBindErrors(ErrorCollection bindErrors);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodHelpText GetMyMethodHelpText(LexLocation caretLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    internal virtual void PopulateRegions(List`1<Region> regions);
    internal ParseContext get_ParseContext();
    public SqlBatchCollection get_Batches();
    public IList`1<SqlIdentifier> RetrieveAllIdentifiers();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScript/<get_Children>d__39")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    public IEnumerable`1<Error> get_Errors();
    internal bool get_IsIncrementalMode();
    internal virtual void WriteXml(XmlWriter writer);
    internal void UpdateParseErrors(ErrorCollection parseErrors);
    private void CommitErrors();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSearchedCaseExpression : SqlCaseExpression {
    private SqlSearchedWhenClauseCollection whenClauses;
    internal bool IsVisitable { get; }
    public SqlSearchedWhenClauseCollection WhenClauses { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSearchedCaseExpression(List`1<SqlSearchedWhenClause> whenClauses, SqlScalarExpression elseExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSearchedCaseExpression/<RetrieveResultScalarExpressions>d__6")]
internal virtual IEnumerable`1<SqlScalarExpression> RetrieveResultScalarExpressions();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlSearchedWhenClauseCollection get_WhenClauses();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSearchedCaseExpression/<get_Children>d__13")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSearchedWhenClause : SqlScalarExpression {
    private SqlBooleanExpression whenExpression;
    private SqlScalarExpression thenExpression;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlBooleanExpression WhenExpression { get; }
    public SqlScalarExpression ThenExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSearchedWhenClause(SqlBooleanExpression whenExpression, SqlScalarExpression thenExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlBooleanExpression get_WhenExpression();
    public SqlScalarExpression get_ThenExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSearchedWhenClause/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSearchedWhenClauseCollection : SqlCollection`1<SqlSearchedWhenClause> {
    internal SqlSearchedWhenClauseCollection(List`1<SqlSearchedWhenClause> whenClauses);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectClause : SqlCodeObject {
    private SqlTopSpecification topSpecification;
    private bool distinct;
    private SqlSelectExpressionCollection selectExpressions;
    internal bool IsVisitable { get; }
    public SqlTopSpecification Top { get; }
    public bool IsDistinct { get; }
    public SqlSelectExpressionCollection SelectExpressions { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectClause(bool isDistinct, SqlTopSpecification top, List`1<SqlSelectExpression> expressions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlTopSpecification get_Top();
    public bool get_IsDistinct();
    public SqlSelectExpressionCollection get_SelectExpressions();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectClause/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectExpression : SqlCodeObject {
    internal SelectExpressionType ExpressionType { get; }
    internal bool IsScalar { get; }
    internal bool IsStar { get; }
    internal bool IsVariableAssignment { get; }
    internal bool IsError { get; }
    internal SqlSelectScalarExpression AsSelectScalarExpression { get; }
    internal abstract virtual SelectExpressionType get_ExpressionType();
    internal bool get_IsScalar();
    internal bool get_IsStar();
    internal bool get_IsVariableAssignment();
    internal bool get_IsError();
    internal virtual SqlSelectScalarExpression get_AsSelectScalarExpression();
    private bool IsOfType(SelectExpressionType type);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectExpressionCollection : SqlCollection`1<SqlSelectExpression> {
    internal SqlSelectExpressionCollection(IEnumerable`1<SqlSelectExpression> expressions);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectIntoClause : SqlCodeObject {
    private SqlObjectIdentifier intoTarget;
    internal bool IsVisitable { get; }
    public SqlObjectIdentifier IntoTarget { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectIntoClause(SqlObjectIdentifier intoTarget);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlObjectIdentifier get_IntoTarget();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectIntoClause/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectScalarExpression : SqlSelectExpression {
    private SqlIdentifier alias;
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    internal SelectExpressionType ExpressionType { get; }
    internal SqlSelectScalarExpression AsSelectScalarExpression { get; }
    internal bool IsIdentityFunction { get; }
    public SqlIdentifier Alias { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectScalarExpression(SqlScalarExpression expression);
    internal SqlSelectScalarExpression(SqlScalarExpression expression, SqlIdentifier alias);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual bool MayChildHaveCompletionList(SqlCodeObject child);
    internal static SqlSelectScalarExpression IdentityFunction(SqlIdentityFunctionCallExpression identityFunction, SqlIdentifier alias);
    internal virtual SelectExpressionType get_ExpressionType();
    internal virtual SqlSelectScalarExpression get_AsSelectScalarExpression();
    internal virtual bool get_IsIdentityFunction();
    public SqlIdentifier get_Alias();
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectScalarExpression/<get_Children>d__24")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectSpecification : SqlCodeObject {
    private SqlQueryExpression queryExpression;
    private SqlOrderByClause orderByClause;
    private SqlForClause forClause;
    internal bool IsVisitable { get; }
    internal IBindingContext BindingContext { get; }
    internal LocalBindingContext LocalBindingContext { get; }
    public SqlQueryExpression QueryExpression { get; }
    public SqlOrderByClause OrderByClause { get; }
    public SqlForClause ForClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectSpecification(SqlQueryExpression queryExpression, SqlOrderByClause orderByClause, SqlForClause forClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IBindingContext get_BindingContext();
    internal LocalBindingContext get_LocalBindingContext();
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlQueryExpression get_QueryExpression();
    public SqlOrderByClause get_OrderByClause();
    public SqlForClause get_ForClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectSpecification/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectSpecificationInsertSource : SqlInsertSource {
    private SqlSelectSpecification selectSpecification;
    internal bool IsVisitable { get; }
    public SqlSelectSpecification SelectSpecification { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectSpecificationInsertSource(SqlSelectSpecification selectSpecification);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlSelectSpecification get_SelectSpecification();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectSpecificationInsertSource/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectStarExpression : SqlSelectExpression {
    private ITabular boundTable;
    private IMetadataCollection`1<IColumn> boundColumns;
    private IMetadataCollection`1<ITabular> boundTables;
    private SqlObjectIdentifier qualifier;
    internal bool IsVisitable { get; }
    public IMetadataCollection`1<IColumn> BoundColumns { get; }
    public IMetadataCollection`1<ITabular> BoundTables { get; }
    internal SelectExpressionType ExpressionType { get; }
    public SqlObjectIdentifier Qualifier { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectStarExpression(SqlObjectIdentifier qualifier);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public IMetadataCollection`1<IColumn> get_BoundColumns();
    public IMetadataCollection`1<ITabular> get_BoundTables();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    private void VerifyBoundColumn(IColumn boundColumn);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual SelectExpressionType get_ExpressionType();
    public SqlObjectIdentifier get_Qualifier();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectStarExpression/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectStatement : SqlStatement {
    private IMutableTable boundTable;
    private SqlQueryWithClause queryWithClause;
    private SqlSelectSpecification selectSpecification;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public ITable BoundTable { get; }
    public IMetadataObject BoundObject { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.IsFinalizing { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.IsFinalized { get; }
    private LexicalScope Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.LexicalScope { get; }
    public SqlQueryWithClause QueryWithClause { get; }
    public SqlSelectSpecification SelectSpecification { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectStatement(SqlSelectSpecification selectSpecification);
    internal SqlSelectStatement(SqlQueryWithClause queryWithClause, SqlSelectSpecification selectSpecification);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public ITable get_BoundTable();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal SqlSelectIntoClause GetIntoClause();
    private void BindIntoClause(BatchBindingContext bindingContext, SqlSelectIntoClause intoClause, StatementBindMode bindMode);
    internal virtual void Unbind();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.get_IsFinalizing();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.get_IsFinalized();
    private sealed virtual override LexicalScope Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.get_LexicalScope();
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.FinalizeBind();
    private sealed virtual override void Microsoft.SqlServer.Management.SqlParser.Binder.IBindFinalizer.PostBindFinalize();
    public SqlQueryWithClause get_QueryWithClause();
    public SqlSelectSpecification get_SelectSpecification();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectStatement/<get_Children>d__38")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectVariableAssignmentExpression : SqlSelectExpression {
    private SqlScalarVariableAssignment variableAssignment;
    internal bool IsVisitable { get; }
    internal SelectExpressionType ExpressionType { get; }
    public SqlScalarVariableAssignment VariableAssignment { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSelectVariableAssignmentExpression(SqlScalarVariableAssignment variableAssignment);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual SelectExpressionType get_ExpressionType();
    public SqlScalarVariableAssignment get_VariableAssignment();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSelectVariableAssignmentExpression/<get_Children>d__13")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetAssignmentStatement : SqlSetStatement {
    private SqlVariableAssignment variableAssignment;
    internal bool IsVisitable { get; }
    public SqlVariableAssignment VariableAssignment { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSetAssignmentStatement(SqlVariableAssignment variableAssignment);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlVariableAssignment get_VariableAssignment();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetAssignmentStatement/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetClause : SqlCodeObject {
    private SqlAssignmentCollection assignments;
    internal bool IsVisitable { get; }
    public SqlAssignmentCollection Assignments { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSetClause(List`1<SqlAssignment> assignments);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlAssignmentCollection get_Assignments();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetClause/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetClauseError : SqlSetClause {
    internal bool IsVisitable { get; }
    internal SqlSetClauseError(List`1<SqlAssignment> assignments);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetQuantifier : Enum {
    public int value__;
    public static SqlSetQuantifier None;
    public static SqlSetQuantifier All;
    public static SqlSetQuantifier Distinct;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetStatement : SqlStatement {
    internal string StatementPhrase { get; }
    internal sealed virtual string get_StatementPhrase();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSetStatementError : SqlSetStatement {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleCaseExpression : SqlCaseExpression {
    private SqlScalarExpression testExpression;
    private SqlSimpleWhenClauseCollection whenClauses;
    internal bool IsVisitable { get; }
    public SqlScalarExpression TestExpression { get; }
    public SqlSimpleWhenClauseCollection WhenClauses { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSimpleCaseExpression(SqlScalarExpression testExpression, List`1<SqlSimpleWhenClause> whenClauses, SqlScalarExpression elseExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleCaseExpression/<RetrieveResultScalarExpressions>d__6")]
internal virtual IEnumerable`1<SqlScalarExpression> RetrieveResultScalarExpressions();
    public SqlScalarExpression get_TestExpression();
    public SqlSimpleWhenClauseCollection get_WhenClauses();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleCaseExpression/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleGroupByItem : SqlGroupingSetItem {
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSimpleGroupByItem(SqlScalarExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleGroupByItem/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleOrderByClause : SqlCodeObject {
    private SqlSimpleOrderByItemCollection items;
    internal bool IsVisitable { get; }
    public SqlSimpleOrderByItemCollection Items { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSimpleOrderByClause(List`1<SqlSimpleOrderByItem> items);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlSimpleOrderByItemCollection get_Items();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleOrderByClause/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleOrderByItem : SqlCodeObject {
    private SqlIdentifier columnName;
    private SqlSortOrder sortOrder;
    internal bool IsVisitable { get; }
    public SqlSortOrder SortOrder { get; }
    public SqlIdentifier ColumnName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSimpleOrderByItem(SqlIdentifier columnName, SqlSortOrder order);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlSortOrder get_SortOrder();
    public SqlIdentifier get_ColumnName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleOrderByItem/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleOrderByItemCollection : SqlCollection`1<SqlSimpleOrderByItem> {
    internal SqlSimpleOrderByItemCollection(List`1<SqlSimpleOrderByItem> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleWhenClause : SqlCodeObject {
    private SqlScalarExpression whenExpression;
    private SqlScalarExpression thenExpression;
    internal bool IsVisitable { get; }
    public SqlScalarExpression WhenExpression { get; }
    public SqlScalarExpression ThenExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlSimpleWhenClause(SqlScalarExpression whenExpression, SqlScalarExpression thenExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_WhenExpression();
    public SqlScalarExpression get_ThenExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleWhenClause/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSimpleWhenClauseCollection : SqlCollection`1<SqlSimpleWhenClause> {
    internal SqlSimpleWhenClauseCollection(List`1<SqlSimpleWhenClause> whenClauses);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSortedDataIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlSortedDataIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSortedDataReorgIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlSortedDataReorgIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSortInTempDbIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlSortInTempDbIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSortOrder : Enum {
    public int value__;
    public static SqlSortOrder None;
    public static SqlSortOrder Ascending;
    public static SqlSortOrder Descending;
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlSparseOption : Enum {
    public int value__;
    public static SqlSparseOption None;
    public static SqlSparseOption Sparse;
    public static SqlSparseOption ColumnSet;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatement : SqlCodeObject {
    private LexicalScope lexicalScope;
    private BatchBindingContext bindingContext;
    private SqlStatementReuseData reuseData;
    public SqlStatement Statement { get; }
    internal bool CanBeBoundIndependently { get; }
    internal string StatementPhrase { get; }
    internal bool IsTrueLastStatement { get; }
    internal bool IsModuleStatement { get; }
    internal bool IsReturnStatement { get; }
    internal bool IsConditionalStatement { get; }
    internal bool IsDdlStatement { get; }
    internal SqlDdlStatement AsDdlStatement { get; }
    internal bool IsStatementLevelObject { get; }
    internal SqlStatement AsStatement { get; }
    internal IBindingContext BindingContext { get; }
    internal bool HasAnyBindSkipped { get; }
    internal bool IsInConditionalStatement { get; }
    internal SqlStatementReuseData ReuseData { get; internal set; }
    internal int LocalPositionOffset { get; }
    internal State BeforeParserState { get; }
    internal State AfterParserState { get; }
    internal SimpleScannerState BeforeScannerState { get; }
    internal CompleteScannerState AfterScannerState { get; }
    internal int LookaheadTokenIndex { get; }
    internal LexLocation YYLoc { get; }
    public abstract virtual void Accept(ISqlStatementVisitor visitor);
    public abstract virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public abstract virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public abstract virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public sealed virtual SqlStatement get_Statement();
    internal sealed virtual bool get_CanBeBoundIndependently();
    internal abstract virtual string get_StatementPhrase();
    internal virtual bool get_IsTrueLastStatement();
    internal virtual bool get_IsModuleStatement();
    internal virtual bool get_IsReturnStatement();
    internal virtual bool get_IsConditionalStatement();
    internal virtual bool get_IsDdlStatement();
    internal virtual SqlDdlStatement get_AsDdlStatement();
    internal sealed virtual bool get_IsStatementLevelObject();
    internal sealed virtual SqlStatement get_AsStatement();
    internal virtual LexicalScope GetLexicalScope();
    internal sealed virtual IBindingContext get_BindingContext();
    internal sealed virtual bool get_HasAnyBindSkipped();
    internal bool get_IsInConditionalStatement();
    internal sealed virtual void RegisterDatabaseContextChange(DatabaseContext databaseContext);
    internal sealed virtual DatabaseContext GetDatabaseContext(LexicalScope lexScope);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void BeforeBindStatement(BatchBindingContext bindingContext);
    internal virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void AfterBindStatement(BatchBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual void PopulateRegions(List`1<Region> regions);
    internal SqlStatementReuseData get_ReuseData();
    internal void set_ReuseData(SqlStatementReuseData value);
    internal virtual void OnSetParentPointers();
    internal void DetachFromTree();
    internal virtual int get_LocalPositionOffset();
    internal State get_BeforeParserState();
    internal State get_AfterParserState();
    internal SimpleScannerState get_BeforeScannerState();
    internal CompleteScannerState get_AfterScannerState();
    internal int get_LookaheadTokenIndex();
    internal LexLocation get_YYLoc();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementCollection : SqlCollection`1<SqlStatement> {
    internal SqlStatementCollection(IEnumerable`1<SqlStatement> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementContextVisitor`1 : object {
    public virtual void Visit(SqlAlterFunctionStatement statement, C context);
    public virtual void Visit(SqlAlterLoginStatement statement, C context);
    public virtual void Visit(SqlAlterProcedureStatement statement, C context);
    public virtual void Visit(SqlAlterTriggerStatement statement, C context);
    public virtual void Visit(SqlAlterViewStatement statement, C context);
    public virtual void Visit(SqlBackupCertificateStatement statement, C context);
    public virtual void Visit(SqlBackupDatabaseStatement statement, C context);
    public virtual void Visit(SqlBackupLogStatement statement, C context);
    public virtual void Visit(SqlBackupMasterKeyStatement statement, C context);
    public virtual void Visit(SqlBackupServiceMasterKeyStatement statement, C context);
    public virtual void Visit(SqlBackupTableStatement statement, C context);
    public virtual void Visit(SqlBreakStatement statement, C context);
    public virtual void Visit(SqlCommentStatement statement, C context);
    public virtual void Visit(SqlCompoundStatement statement, C context);
    public virtual void Visit(SqlContinueStatement statement, C context);
    public virtual void Visit(SqlCreateFunctionStatement statement, C context);
    public virtual void Visit(SqlCreateIndexStatement statement, C context);
    public virtual void Visit(SqlCreateLoginFromAsymKeyStatement statement, C context);
    public virtual void Visit(SqlCreateLoginFromCertificateStatement statement, C context);
    public virtual void Visit(SqlCreateLoginFromWindowsStatement statement, C context);
    public virtual void Visit(SqlCreateLoginWithPasswordStatement statement, C context);
    public virtual void Visit(SqlCreateProcedureStatement statement, C context);
    public virtual void Visit(SqlCreateRoleStatement statement, C context);
    public virtual void Visit(SqlCreateSchemaStatement statement, C context);
    public virtual void Visit(SqlCreateSynonymStatement statement, C context);
    public virtual void Visit(SqlCreateTableStatement statement, C context);
    public virtual void Visit(SqlCreateTriggerStatement statement, C context);
    public virtual void Visit(SqlCreateUserDefinedDataTypeStatement statement, C context);
    public virtual void Visit(SqlCreateUserDefinedTableTypeStatement statement, C context);
    public virtual void Visit(SqlCreateUserDefinedTypeStatement statement, C context);
    public virtual void Visit(SqlCreateUserFromAsymKeyStatement statement, C context);
    public virtual void Visit(SqlCreateUserFromCertificateStatement statement, C context);
    public virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement statement, C context);
    public virtual void Visit(SqlCreateUserFromLoginStatement statement, C context);
    public virtual void Visit(SqlCreateUserFromExternalProviderStatement statement, C context);
    public virtual void Visit(SqlCreateUserStatement statement, C context);
    public virtual void Visit(SqlCreateUserWithoutLoginStatement statement, C context);
    public virtual void Visit(SqlCreateViewStatement statement, C context);
    public virtual void Visit(SqlCursorDeclareStatement statement, C context);
    public virtual void Visit(SqlDBCCStatement statement, C context);
    public virtual void Visit(SqlDeleteStatement statement, C context);
    public virtual void Visit(SqlDenyStatement statement, C context);
    public virtual void Visit(SqlDropAggregateStatement statement, C context);
    public virtual void Visit(SqlDropDatabaseStatement statement, C context);
    public virtual void Visit(SqlDropDefaultStatement statement, C context);
    public virtual void Visit(SqlDropFunctionStatement statement, C context);
    public virtual void Visit(SqlDropLoginStatement statement, C context);
    public virtual void Visit(SqlDropProcedureStatement statement, C context);
    public virtual void Visit(SqlDropRuleStatement statement, C context);
    public virtual void Visit(SqlDropSchemaStatement statement, C context);
    public virtual void Visit(SqlDropSecurityPolicyStatement statement, C context);
    public virtual void Visit(SqlDropSequenceStatement statement, C context);
    public virtual void Visit(SqlDropSynonymStatement statement, C context);
    public virtual void Visit(SqlDropTableStatement statement, C context);
    public virtual void Visit(SqlDropTriggerStatement statement, C context);
    public virtual void Visit(SqlDropTypeStatement statement, C context);
    public virtual void Visit(SqlDropUserStatement statement, C context);
    public virtual void Visit(SqlDropViewStatement statement, C context);
    public virtual void Visit(SqlExecuteModuleStatement statement, C context);
    public virtual void Visit(SqlExecuteStringStatement statement, C context);
    public virtual void Visit(SqlGrantStatement statement, C context);
    public virtual void Visit(SqlIfElseStatement statement, C context);
    public virtual void Visit(SqlInlineTableVariableDeclareStatement statement, C context);
    public virtual void Visit(SqlInsertStatement statement, C context);
    public virtual void Visit(SqlMergeStatement statement, C context);
    public virtual void Visit(SqlStatement statement, C context);
    public virtual void Visit(SqlRestoreDatabaseStatement statement, C context);
    public virtual void Visit(SqlRestoreInformationStatement statement, C context);
    public virtual void Visit(SqlRestoreLogStatement statement, C context);
    public virtual void Visit(SqlRestoreMasterKeyStatement statement, C context);
    public virtual void Visit(SqlRestoreServiceMasterKeyStatement statement, C context);
    public virtual void Visit(SqlRestoreTableStatement statement, C context);
    public virtual void Visit(SqlReturnStatement statement, C context);
    public virtual void Visit(SqlRevokeStatement statement, C context);
    public virtual void Visit(SqlSelectStatement statement, C context);
    public virtual void Visit(SqlSetAssignmentStatement statement, C context);
    public virtual void Visit(SqlSetStatement statement, C context);
    public virtual void Visit(SqlTryCatchStatement statement, C context);
    public virtual void Visit(SqlUpdateStatement statement, C context);
    public virtual void Visit(SqlUseStatement statement, C context);
    public virtual void Visit(SqlVariableDeclareStatement statement, C context);
    public virtual void Visit(SqlWhileStatement statement, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementContextVisitor`2 : object {
    public virtual T Visit(SqlAlterFunctionStatement statement, C context);
    public virtual T Visit(SqlAlterLoginStatement statement, C context);
    public virtual T Visit(SqlAlterProcedureStatement statement, C context);
    public virtual T Visit(SqlAlterTriggerStatement statement, C context);
    public virtual T Visit(SqlAlterViewStatement statement, C context);
    public virtual T Visit(SqlBackupCertificateStatement statement, C context);
    public virtual T Visit(SqlBackupDatabaseStatement statement, C context);
    public virtual T Visit(SqlBackupLogStatement statement, C context);
    public virtual T Visit(SqlBackupMasterKeyStatement statement, C context);
    public virtual T Visit(SqlBackupServiceMasterKeyStatement statement, C context);
    public virtual T Visit(SqlBackupTableStatement statement, C context);
    public virtual T Visit(SqlBreakStatement statement, C context);
    public virtual T Visit(SqlCommentStatement statement, C context);
    public virtual T Visit(SqlCompoundStatement statement, C context);
    public virtual T Visit(SqlContinueStatement statement, C context);
    public virtual T Visit(SqlCreateFunctionStatement statement, C context);
    public virtual T Visit(SqlCreateIndexStatement statement, C context);
    public virtual T Visit(SqlCreateLoginFromAsymKeyStatement statement, C context);
    public virtual T Visit(SqlCreateLoginFromCertificateStatement statement, C context);
    public virtual T Visit(SqlCreateLoginFromWindowsStatement statement, C context);
    public virtual T Visit(SqlCreateLoginWithPasswordStatement statement, C context);
    public virtual T Visit(SqlCreateProcedureStatement statement, C context);
    public virtual T Visit(SqlCreateRoleStatement statement, C context);
    public virtual T Visit(SqlCreateSchemaStatement statement, C context);
    public virtual T Visit(SqlCreateSynonymStatement statement, C context);
    public virtual T Visit(SqlCreateTableStatement statement, C context);
    public virtual T Visit(SqlCreateTriggerStatement statement, C context);
    public virtual T Visit(SqlCreateUserDefinedDataTypeStatement statement, C context);
    public virtual T Visit(SqlCreateUserDefinedTableTypeStatement statement, C context);
    public virtual T Visit(SqlCreateUserDefinedTypeStatement statement, C context);
    public virtual T Visit(SqlCreateUserFromAsymKeyStatement statement, C context);
    public virtual T Visit(SqlCreateUserFromCertificateStatement statement, C context);
    public virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement statement, C context);
    public virtual T Visit(SqlCreateUserFromLoginStatement statement, C context);
    public virtual T Visit(SqlCreateUserFromExternalProviderStatement statement, C context);
    public virtual T Visit(SqlCreateUserStatement statement, C context);
    public virtual T Visit(SqlCreateUserWithoutLoginStatement statement, C context);
    public virtual T Visit(SqlCreateViewStatement statement, C context);
    public virtual T Visit(SqlCursorDeclareStatement statement, C context);
    public virtual T Visit(SqlDBCCStatement statement, C context);
    public virtual T Visit(SqlDeleteStatement statement, C context);
    public virtual T Visit(SqlDenyStatement statement, C context);
    public virtual T Visit(SqlDropAggregateStatement statement, C context);
    public virtual T Visit(SqlDropDatabaseStatement statement, C context);
    public virtual T Visit(SqlDropDefaultStatement statement, C context);
    public virtual T Visit(SqlDropFunctionStatement statement, C context);
    public virtual T Visit(SqlDropLoginStatement statement, C context);
    public virtual T Visit(SqlDropProcedureStatement statement, C context);
    public virtual T Visit(SqlDropRuleStatement statement, C context);
    public virtual T Visit(SqlDropSchemaStatement statement, C context);
    public virtual T Visit(SqlDropSecurityPolicyStatement statement, C context);
    public virtual T Visit(SqlDropSequenceStatement statement, C context);
    public virtual T Visit(SqlDropSynonymStatement statement, C context);
    public virtual T Visit(SqlDropTableStatement statement, C context);
    public virtual T Visit(SqlDropTriggerStatement statement, C context);
    public virtual T Visit(SqlDropTypeStatement statement, C context);
    public virtual T Visit(SqlDropUserStatement statement, C context);
    public virtual T Visit(SqlDropViewStatement statement, C context);
    public virtual T Visit(SqlExecuteModuleStatement statement, C context);
    public virtual T Visit(SqlExecuteStringStatement statement, C context);
    public virtual T Visit(SqlGrantStatement statement, C context);
    public virtual T Visit(SqlIfElseStatement statement, C context);
    public virtual T Visit(SqlInlineTableVariableDeclareStatement statement, C context);
    public virtual T Visit(SqlInsertStatement statement, C context);
    public virtual T Visit(SqlMergeStatement statement, C context);
    public virtual T Visit(SqlStatement statement, C context);
    public virtual T Visit(SqlRestoreDatabaseStatement statement, C context);
    public virtual T Visit(SqlRestoreInformationStatement statement, C context);
    public virtual T Visit(SqlRestoreLogStatement statement, C context);
    public virtual T Visit(SqlRestoreMasterKeyStatement statement, C context);
    public virtual T Visit(SqlRestoreServiceMasterKeyStatement statement, C context);
    public virtual T Visit(SqlRestoreTableStatement statement, C context);
    public virtual T Visit(SqlReturnStatement statement, C context);
    public virtual T Visit(SqlRevokeStatement statement, C context);
    public virtual T Visit(SqlSelectStatement statement, C context);
    public virtual T Visit(SqlSetAssignmentStatement statement, C context);
    public virtual T Visit(SqlSetStatement statement, C context);
    public virtual T Visit(SqlTryCatchStatement statement, C context);
    public virtual T Visit(SqlUpdateStatement statement, C context);
    public virtual T Visit(SqlUseStatement statement, C context);
    public virtual T Visit(SqlVariableDeclareStatement statement, C context);
    public virtual T Visit(SqlWhileStatement statement, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementError : SqlStatement {
    internal List`1<SqlCodeObject> children;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    private IEnumerable`1<SqlStatement> ChildStatements { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlStatementError(SqlErrorCodeObject errorCodeObject);
    internal SqlStatementError(SqlCodeObject codeObject, SqlErrorCodeObject errorCodeObject);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    internal virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementError/<get_ChildStatements>d__14")]
private IEnumerable`1<SqlStatement> get_ChildStatements();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementRecursiveVisitor : object {
    private ISqlStatementVisitor visitor;
    public SqlStatementRecursiveVisitor(ISqlStatementVisitor visitor);
    public sealed virtual void Visit(SqlAlterFunctionStatement statement);
    public sealed virtual void Visit(SqlAlterLoginStatement statement);
    public sealed virtual void Visit(SqlAlterProcedureStatement statement);
    public sealed virtual void Visit(SqlAlterTriggerStatement statement);
    public sealed virtual void Visit(SqlAlterViewStatement statement);
    public sealed virtual void Visit(SqlBackupCertificateStatement statement);
    public sealed virtual void Visit(SqlBackupDatabaseStatement statement);
    public sealed virtual void Visit(SqlBackupLogStatement statement);
    public sealed virtual void Visit(SqlBackupMasterKeyStatement statement);
    public sealed virtual void Visit(SqlBackupServiceMasterKeyStatement statement);
    public sealed virtual void Visit(SqlBackupTableStatement statement);
    public sealed virtual void Visit(SqlBreakStatement statement);
    public sealed virtual void Visit(SqlCommentStatement statement);
    public sealed virtual void Visit(SqlCompoundStatement statement);
    public sealed virtual void Visit(SqlContinueStatement statement);
    public sealed virtual void Visit(SqlCreateFunctionStatement statement);
    public sealed virtual void Visit(SqlCreateIndexStatement statement);
    public sealed virtual void Visit(SqlCreateLoginFromAsymKeyStatement statement);
    public sealed virtual void Visit(SqlCreateLoginFromCertificateStatement statement);
    public sealed virtual void Visit(SqlCreateLoginFromWindowsStatement statement);
    public sealed virtual void Visit(SqlCreateLoginWithPasswordStatement statement);
    public sealed virtual void Visit(SqlCreateProcedureStatement statement);
    public sealed virtual void Visit(SqlCreateRoleStatement statement);
    public sealed virtual void Visit(SqlCreateSchemaStatement statement);
    public sealed virtual void Visit(SqlCreateSynonymStatement statement);
    public sealed virtual void Visit(SqlCreateTableStatement statement);
    public sealed virtual void Visit(SqlCreateTriggerStatement statement);
    public sealed virtual void Visit(SqlCreateUserDefinedDataTypeStatement statement);
    public sealed virtual void Visit(SqlCreateUserDefinedTableTypeStatement statement);
    public sealed virtual void Visit(SqlCreateUserDefinedTypeStatement statement);
    public sealed virtual void Visit(SqlCreateUserFromAsymKeyStatement statement);
    public sealed virtual void Visit(SqlCreateUserFromCertificateStatement statement);
    public sealed virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement statement);
    public sealed virtual void Visit(SqlCreateUserFromLoginStatement statement);
    public sealed virtual void Visit(SqlCreateUserFromExternalProviderStatement statement);
    public sealed virtual void Visit(SqlCreateUserStatement statement);
    public sealed virtual void Visit(SqlCreateUserWithoutLoginStatement statement);
    public sealed virtual void Visit(SqlCreateViewStatement statement);
    public sealed virtual void Visit(SqlCursorDeclareStatement statement);
    public sealed virtual void Visit(SqlDBCCStatement statement);
    public sealed virtual void Visit(SqlDeleteStatement statement);
    public sealed virtual void Visit(SqlDenyStatement statement);
    public sealed virtual void Visit(SqlDropAggregateStatement statement);
    public sealed virtual void Visit(SqlDropDatabaseStatement statement);
    public sealed virtual void Visit(SqlDropDefaultStatement statement);
    public sealed virtual void Visit(SqlDropFunctionStatement statement);
    public sealed virtual void Visit(SqlDropLoginStatement statement);
    public sealed virtual void Visit(SqlDropProcedureStatement statement);
    public sealed virtual void Visit(SqlDropRuleStatement statement);
    public sealed virtual void Visit(SqlDropSchemaStatement statement);
    public sealed virtual void Visit(SqlDropSecurityPolicyStatement statement);
    public sealed virtual void Visit(SqlDropSequenceStatement statement);
    public void Visit(SqlDropStatement statement);
    public sealed virtual void Visit(SqlDropSynonymStatement statement);
    public sealed virtual void Visit(SqlDropTableStatement statement);
    public sealed virtual void Visit(SqlDropTriggerStatement statement);
    public sealed virtual void Visit(SqlDropTypeStatement statement);
    public sealed virtual void Visit(SqlDropUserStatement statement);
    public sealed virtual void Visit(SqlDropViewStatement statement);
    public sealed virtual void Visit(SqlExecuteModuleStatement statement);
    public sealed virtual void Visit(SqlExecuteStringStatement statement);
    public sealed virtual void Visit(SqlGrantStatement statement);
    public sealed virtual void Visit(SqlIfElseStatement statement);
    public sealed virtual void Visit(SqlInlineTableVariableDeclareStatement statement);
    public sealed virtual void Visit(SqlInsertStatement statement);
    public sealed virtual void Visit(SqlMergeStatement statement);
    public sealed virtual void Visit(SqlStatement statement);
    public sealed virtual void Visit(SqlRestoreDatabaseStatement statement);
    public sealed virtual void Visit(SqlRestoreInformationStatement statement);
    public sealed virtual void Visit(SqlRestoreLogStatement statement);
    public sealed virtual void Visit(SqlRestoreMasterKeyStatement statement);
    public sealed virtual void Visit(SqlRestoreServiceMasterKeyStatement statement);
    public sealed virtual void Visit(SqlRestoreTableStatement statement);
    public sealed virtual void Visit(SqlReturnStatement statement);
    public sealed virtual void Visit(SqlRevokeStatement statement);
    public sealed virtual void Visit(SqlSelectStatement statement);
    public sealed virtual void Visit(SqlSetAssignmentStatement statement);
    public sealed virtual void Visit(SqlSetStatement statement);
    public sealed virtual void Visit(SqlTryCatchStatement statement);
    public sealed virtual void Visit(SqlUpdateStatement statement);
    public sealed virtual void Visit(SqlUseStatement statement);
    public sealed virtual void Visit(SqlVariableDeclareStatement statement);
    public sealed virtual void Visit(SqlWhileStatement statement);
}
internal class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementReuseData : object {
    private State beforeParserState;
    private State afterParserState;
    private SimpleScannerState beforeScannerStateRelative;
    private CompleteScannerState afterScannerStateRelative;
    private int lookAheadTokenIndexRelative;
    private LexLocation yylocRelative;
    private int localPositionOffset;
    private SideEffectSpan sideEffectSpan;
    private bool areChildrenParentsSet;
    public State BeforeParserState { get; }
    public State AfterParserState { get; }
    public SimpleScannerState BeforeScannerStateRelative { get; }
    public CompleteScannerState AfterScannerStateRelative { get; }
    public int LookAheadTokenIndexRelative { get; }
    public LexLocation YYLocRelative { get; }
    public int LocalPositionOffset { get; public set; }
    public SideEffectSpan SideEffectSpan { get; public set; }
    public bool AreChildrenParentsSet { get; public set; }
    public SqlStatementReuseData(State beforeParserState, State afterParserState, SimpleScannerState beforeScannerStateRelative, CompleteScannerState afterScannerStateRelative, int lookAheadTokenIndexRelative, LexLocation yylocRelative);
    public State get_BeforeParserState();
    public State get_AfterParserState();
    public SimpleScannerState get_BeforeScannerStateRelative();
    public CompleteScannerState get_AfterScannerStateRelative();
    public int get_LookAheadTokenIndexRelative();
    public LexLocation get_YYLocRelative();
    public int get_LocalPositionOffset();
    public void set_LocalPositionOffset(int value);
    public SideEffectSpan get_SideEffectSpan();
    public void set_SideEffectSpan(SideEffectSpan value);
    public bool get_AreChildrenParentsSet();
    public void set_AreChildrenParentsSet(bool value);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementVisitor : object {
    public virtual void Visit(SqlAlterFunctionStatement statement);
    public virtual void Visit(SqlAlterLoginStatement statement);
    public virtual void Visit(SqlAlterProcedureStatement statement);
    public virtual void Visit(SqlAlterTriggerStatement statement);
    public virtual void Visit(SqlAlterViewStatement statement);
    public virtual void Visit(SqlBackupCertificateStatement statement);
    public virtual void Visit(SqlBackupDatabaseStatement statement);
    public virtual void Visit(SqlBackupLogStatement statement);
    public virtual void Visit(SqlBackupMasterKeyStatement statement);
    public virtual void Visit(SqlBackupServiceMasterKeyStatement statement);
    public virtual void Visit(SqlBackupTableStatement statement);
    public virtual void Visit(SqlBreakStatement statement);
    public virtual void Visit(SqlCommentStatement statement);
    public virtual void Visit(SqlCompoundStatement statement);
    public virtual void Visit(SqlContinueStatement statement);
    public virtual void Visit(SqlCreateFunctionStatement statement);
    public virtual void Visit(SqlCreateIndexStatement statement);
    public virtual void Visit(SqlCreateLoginFromAsymKeyStatement statement);
    public virtual void Visit(SqlCreateLoginFromCertificateStatement statement);
    public virtual void Visit(SqlCreateLoginFromWindowsStatement statement);
    public virtual void Visit(SqlCreateLoginWithPasswordStatement statement);
    public virtual void Visit(SqlCreateProcedureStatement statement);
    public virtual void Visit(SqlCreateRoleStatement statement);
    public virtual void Visit(SqlCreateSchemaStatement statement);
    public virtual void Visit(SqlCreateSynonymStatement statement);
    public virtual void Visit(SqlCreateTableStatement statement);
    public virtual void Visit(SqlCreateTriggerStatement statement);
    public virtual void Visit(SqlCreateUserDefinedDataTypeStatement statement);
    public virtual void Visit(SqlCreateUserDefinedTableTypeStatement statement);
    public virtual void Visit(SqlCreateUserDefinedTypeStatement statement);
    public virtual void Visit(SqlCreateUserFromAsymKeyStatement statement);
    public virtual void Visit(SqlCreateUserFromCertificateStatement statement);
    public virtual void Visit(SqlCreateUserWithImplicitAuthenticationStatement statement);
    public virtual void Visit(SqlCreateUserFromLoginStatement statement);
    public virtual void Visit(SqlCreateUserFromExternalProviderStatement statement);
    public virtual void Visit(SqlCreateUserStatement statement);
    public virtual void Visit(SqlCreateUserWithoutLoginStatement statement);
    public virtual void Visit(SqlCreateViewStatement statement);
    public virtual void Visit(SqlCursorDeclareStatement statement);
    public virtual void Visit(SqlDBCCStatement statement);
    public virtual void Visit(SqlDeleteStatement statement);
    public virtual void Visit(SqlDenyStatement statement);
    public virtual void Visit(SqlDropAggregateStatement statement);
    public virtual void Visit(SqlDropDatabaseStatement statement);
    public virtual void Visit(SqlDropDefaultStatement statement);
    public virtual void Visit(SqlDropFunctionStatement statement);
    public virtual void Visit(SqlDropLoginStatement statement);
    public virtual void Visit(SqlDropProcedureStatement statement);
    public virtual void Visit(SqlDropRuleStatement statement);
    public virtual void Visit(SqlDropSchemaStatement statement);
    public virtual void Visit(SqlDropSecurityPolicyStatement statement);
    public virtual void Visit(SqlDropSequenceStatement statement);
    public virtual void Visit(SqlDropSynonymStatement statement);
    public virtual void Visit(SqlDropTableStatement statement);
    public virtual void Visit(SqlDropTriggerStatement statement);
    public virtual void Visit(SqlDropTypeStatement statement);
    public virtual void Visit(SqlDropUserStatement statement);
    public virtual void Visit(SqlDropViewStatement statement);
    public virtual void Visit(SqlExecuteModuleStatement statement);
    public virtual void Visit(SqlExecuteStringStatement statement);
    public virtual void Visit(SqlGrantStatement statement);
    public virtual void Visit(SqlIfElseStatement statement);
    public virtual void Visit(SqlInlineTableVariableDeclareStatement statement);
    public virtual void Visit(SqlInsertStatement statement);
    public virtual void Visit(SqlMergeStatement statement);
    public virtual void Visit(SqlStatement statement);
    public virtual void Visit(SqlRestoreDatabaseStatement statement);
    public virtual void Visit(SqlRestoreInformationStatement statement);
    public virtual void Visit(SqlRestoreLogStatement statement);
    public virtual void Visit(SqlRestoreMasterKeyStatement statement);
    public virtual void Visit(SqlRestoreServiceMasterKeyStatement statement);
    public virtual void Visit(SqlRestoreTableStatement statement);
    public virtual void Visit(SqlReturnStatement statement);
    public virtual void Visit(SqlRevokeStatement statement);
    public virtual void Visit(SqlSelectStatement statement);
    public virtual void Visit(SqlSetAssignmentStatement statement);
    public virtual void Visit(SqlSetStatement statement);
    public virtual void Visit(SqlTryCatchStatement statement);
    public virtual void Visit(SqlUpdateStatement statement);
    public virtual void Visit(SqlUseStatement statement);
    public virtual void Visit(SqlVariableDeclareStatement statement);
    public virtual void Visit(SqlWhileStatement statement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatementVisitor`1 : object {
    public virtual T Visit(SqlAlterFunctionStatement statement);
    public virtual T Visit(SqlAlterLoginStatement statement);
    public virtual T Visit(SqlAlterProcedureStatement statement);
    public virtual T Visit(SqlAlterTriggerStatement statement);
    public virtual T Visit(SqlAlterViewStatement statement);
    public virtual T Visit(SqlBackupCertificateStatement statement);
    public virtual T Visit(SqlBackupDatabaseStatement statement);
    public virtual T Visit(SqlBackupLogStatement statement);
    public virtual T Visit(SqlBackupMasterKeyStatement statement);
    public virtual T Visit(SqlBackupServiceMasterKeyStatement statement);
    public virtual T Visit(SqlBackupTableStatement statement);
    public virtual T Visit(SqlBreakStatement statement);
    public virtual T Visit(SqlCommentStatement statement);
    public virtual T Visit(SqlCompoundStatement statement);
    public virtual T Visit(SqlContinueStatement statement);
    public virtual T Visit(SqlCreateFunctionStatement statement);
    public virtual T Visit(SqlCreateIndexStatement statement);
    public virtual T Visit(SqlCreateLoginFromAsymKeyStatement statement);
    public virtual T Visit(SqlCreateLoginFromCertificateStatement statement);
    public virtual T Visit(SqlCreateLoginFromWindowsStatement statement);
    public virtual T Visit(SqlCreateLoginWithPasswordStatement statement);
    public virtual T Visit(SqlCreateProcedureStatement statement);
    public virtual T Visit(SqlCreateRoleStatement statement);
    public virtual T Visit(SqlCreateSchemaStatement statement);
    public virtual T Visit(SqlCreateSynonymStatement statement);
    public virtual T Visit(SqlCreateTableStatement statement);
    public virtual T Visit(SqlCreateTriggerStatement statement);
    public virtual T Visit(SqlCreateUserDefinedDataTypeStatement statement);
    public virtual T Visit(SqlCreateUserDefinedTableTypeStatement statement);
    public virtual T Visit(SqlCreateUserDefinedTypeStatement statement);
    public virtual T Visit(SqlCreateUserFromAsymKeyStatement statement);
    public virtual T Visit(SqlCreateUserFromCertificateStatement statement);
    public virtual T Visit(SqlCreateUserWithImplicitAuthenticationStatement statement);
    public virtual T Visit(SqlCreateUserFromLoginStatement statement);
    public virtual T Visit(SqlCreateUserFromExternalProviderStatement statement);
    public virtual T Visit(SqlCreateUserStatement statement);
    public virtual T Visit(SqlCreateUserWithoutLoginStatement statement);
    public virtual T Visit(SqlCreateViewStatement statement);
    public virtual T Visit(SqlCursorDeclareStatement statement);
    public virtual T Visit(SqlDBCCStatement statement);
    public virtual T Visit(SqlDeleteStatement statement);
    public virtual T Visit(SqlDenyStatement statement);
    public virtual T Visit(SqlDropAggregateStatement statement);
    public virtual T Visit(SqlDropDatabaseStatement statement);
    public virtual T Visit(SqlDropDefaultStatement statement);
    public virtual T Visit(SqlDropFunctionStatement statement);
    public virtual T Visit(SqlDropLoginStatement statement);
    public virtual T Visit(SqlDropProcedureStatement statement);
    public virtual T Visit(SqlDropRuleStatement statement);
    public virtual T Visit(SqlDropSchemaStatement statement);
    public virtual T Visit(SqlDropSecurityPolicyStatement statement);
    public virtual T Visit(SqlDropSequenceStatement statement);
    public virtual T Visit(SqlDropSynonymStatement statement);
    public virtual T Visit(SqlDropTableStatement statement);
    public virtual T Visit(SqlDropTriggerStatement statement);
    public virtual T Visit(SqlDropTypeStatement statement);
    public virtual T Visit(SqlDropUserStatement statement);
    public virtual T Visit(SqlDropViewStatement statement);
    public virtual T Visit(SqlExecuteModuleStatement statement);
    public virtual T Visit(SqlExecuteStringStatement statement);
    public virtual T Visit(SqlGrantStatement statement);
    public virtual T Visit(SqlIfElseStatement statement);
    public virtual T Visit(SqlInlineTableVariableDeclareStatement statement);
    public virtual T Visit(SqlInsertStatement statement);
    public virtual T Visit(SqlMergeStatement statement);
    public virtual T Visit(SqlStatement statement);
    public virtual T Visit(SqlRestoreDatabaseStatement statement);
    public virtual T Visit(SqlRestoreInformationStatement statement);
    public virtual T Visit(SqlRestoreLogStatement statement);
    public virtual T Visit(SqlRestoreMasterKeyStatement statement);
    public virtual T Visit(SqlRestoreServiceMasterKeyStatement statement);
    public virtual T Visit(SqlRestoreTableStatement statement);
    public virtual T Visit(SqlReturnStatement statement);
    public virtual T Visit(SqlRevokeStatement statement);
    public virtual T Visit(SqlSelectStatement statement);
    public virtual T Visit(SqlSetAssignmentStatement statement);
    public virtual T Visit(SqlSetStatement statement);
    public virtual T Visit(SqlTryCatchStatement statement);
    public virtual T Visit(SqlUpdateStatement statement);
    public virtual T Visit(SqlUseStatement statement);
    public virtual T Visit(SqlVariableDeclareStatement statement);
    public virtual T Visit(SqlWhileStatement statement);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatisticsIncrementalIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlStatisticsIncrementalIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatisticsNoRecomputeIndexOption : SqlIndexOption {
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    internal SqlStatisticsNoRecomputeIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStatisticsOnlyIndexOption : SqlIndexOption {
    private int value;
    private SqlOnOffValue onOffValue;
    internal bool IsVisitable { get; }
    internal string Phrase { get; }
    public SqlOnOffValue OnOffValue { get; }
    public int Value { get; }
    internal SqlStatisticsOnlyIndexOption(SqlLiteralExpression value);
    internal SqlStatisticsOnlyIndexOption(SqlOnOffValue onOffValue);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_Phrase();
    public SqlOnOffValue get_OnOffValue();
    public int get_Value();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlStorageSpecification : SqlCodeObject {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableClrFunctionDefinition : SqlFunctionDefinition {
    private static SqlModuleOptionMask ValidOptions;
    private SqlTableFunctionReturnType returnType;
    private SqlSimpleOrderByClause orderByClause;
    private SqlClrFunctionBodyDefinition bodyDefinition;
    internal bool IsVisitable { get; }
    internal bool IsTableValuedFunction { get; }
    internal bool IsInlineTableFunction { get; }
    internal bool IsClrFunction { get; }
    public SqlTableFunctionReturnType ReturnType { get; }
    public SqlSimpleOrderByClause OrderByClause { get; }
    public SqlClrFunctionBodyDefinition BodyDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableClrFunctionDefinition(SqlObjectIdentifier name, List`1<SqlParameterDeclaration> parameters, SqlTableFunctionReturnType returnType, List`1<SqlModuleOption> options, SqlSimpleOrderByClause orderByClause, SqlClrFunctionBodyDefinition bodyDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsTableValuedFunction();
    internal sealed virtual bool get_IsInlineTableFunction();
    internal sealed virtual bool get_IsClrFunction();
    internal virtual void BindDefinition(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    public SqlTableFunctionReturnType get_ReturnType();
    public SqlSimpleOrderByClause get_OrderByClause();
    public SqlClrFunctionBodyDefinition get_BodyDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableClrFunctionDefinition/<get_Children>d__25")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlFunctionReturnType GetReturnType();
    internal virtual SqlFunctionBodyDefinition GetBodyDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableConstructorExpression : SqlQueryExpression {
    private LocalBindingContext bindingContext;
    private SqlRowConstructorExpressionCollection rows;
    internal bool IsVisitable { get; }
    internal LocalBindingContext LocalBindingContext { get; }
    internal IBindingContext BindingContext { get; }
    internal bool HasUnionAll { get; }
    public SqlRowConstructorExpressionCollection Rows { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableConstructorExpression(List`1<SqlRowConstructorExpression> rows);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual LocalBindingContext get_LocalBindingContext();
    internal virtual IBindingContext get_BindingContext();
    internal virtual bool get_HasUnionAll();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual void ShallowBind(CteBindingContext bindingContext);
    internal virtual void DeepBind(CteBindingContext bindingContext, SqlIdentifier cteName);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    public SqlRowConstructorExpressionCollection get_Rows();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableConstructorExpression/<get_Children>d__23")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual SqlSelectIntoClause GetIntoClause();
    internal virtual void Validate(QueryExpressionValidateOption option);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableConstructorInsertSource : SqlInsertSource {
    private SqlTableConstructorExpression tableConstructorExpression;
    internal bool IsVisitable { get; }
    public SqlTableConstructorExpression TableConstructorExpression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableConstructorInsertSource(SqlTableConstructorExpression tableConstructorExpression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlTableConstructorExpression get_TableConstructorExpression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableConstructorInsertSource/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableDefinition : SqlCodeObject {
    private List`1<ISqlTableElement> elements;
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlColumnDefinition> ColumnDefinitions { get; }
    public IEnumerable`1<SqlConstraint> Constraints { get; }
    public IEnumerable`1<SqlTemporalPeriodDefinition> TemporalPeriodDefinitions { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableDefinition(List`1<ISqlTableElement> elements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, IMutableDatabaseTable boundTable);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableDefinition/<get_ColumnDefinitions>d__12")]
public IEnumerable`1<SqlColumnDefinition> get_ColumnDefinitions();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableDefinition/<get_Constraints>d__14")]
public IEnumerable`1<SqlConstraint> get_Constraints();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableDefinition/<get_TemporalPeriodDefinitions>d__16")]
public IEnumerable`1<SqlTemporalPeriodDefinition> get_TemporalPeriodDefinitions();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableDefinition/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableExpression : SqlCodeObject {
    private ITabular boundTable;
    public ITabular BoundTable { get; }
    public IMetadataObject BoundObject { get; }
    internal TableExpressionName ExpressionName { get; }
    public ITabular get_BoundTable();
    public virtual IMetadataObject get_BoundObject();
    internal abstract virtual TableExpressionName get_ExpressionName();
    internal virtual void BindDmlTarget(DmlSpecificationBindingContext bindingContext);
    internal virtual void Unbind();
    internal void SetBoundTable(IBindingContext bindingContext, ITabular table, SqlCodeObject errorObject);
    internal void SetBoundCte(ITabular cte);
    internal void SetBoundDmlTarget(ITabular table, bool isAmbiguous);
    internal virtual SqlTableExpression FindTableExpressionBoundTo(ITabular boundTable);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableExpressionCollection : SqlCollection`1<SqlTableExpression> {
    internal SqlTableExpressionCollection(List`1<SqlTableExpression> items);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableExpressionError : SqlTableExpression {
    internal List`1<SqlCodeObject> children;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    private IEnumerable`1<SqlIdentifier> Identifiers { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableExpressionError(SqlErrorCodeObject errorCodeObject);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void BindDmlTarget(DmlSpecificationBindingContext bindingContext);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation lexLocation, CompletionContext completionContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableExpressionError/<get_Identifiers>d__11")]
private IEnumerable`1<SqlIdentifier> get_Identifiers();
    public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableFunctionReturnType : SqlFunctionReturnType {
    private SqlTableDefinition tableDefinition;
    internal bool IsVisitable { get; }
    internal SqlScalarFunctionReturnType AsSqlScalarFunctionReturnType { get; }
    internal SqlTableFunctionReturnType AsSqlTableFunctionReturnType { get; }
    public SqlTableDefinition TableDefinition { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableFunctionReturnType(SqlTableDefinition tableDefinition);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual SqlScalarFunctionReturnType get_AsSqlScalarFunctionReturnType();
    internal sealed virtual SqlTableFunctionReturnType get_AsSqlTableFunctionReturnType();
    internal virtual void Bind(BatchBindingContext bindingContext, FunctionUnion`3<IMutableScalarValuedFunction, IMutableTableValuedFunction, IMutableUserDefinedFunction> functionUnion);
    public SqlTableDefinition get_TableDefinition();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableFunctionReturnType/<get_Children>d__16")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableHint : SqlHint {
    private SqlTableHintType type;
    internal bool IsVisitable { get; }
    public SqlTableHintType Type { get; }
    public bool IsTableHint { get; }
    internal SqlTableHint AsSqlTableHint { get; }
    internal SqlTableHint(SqlIdentifier name);
    internal SqlTableHint(string name);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlTableHintType get_Type();
    public virtual bool get_IsTableHint();
    internal virtual SqlTableHint get_AsSqlTableHint();
    internal static SqlTableHintType GetHintFromString(string hintName);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableHintType : Enum {
    public int value__;
    public static SqlTableHintType None;
    public static SqlTableHintType FastFirstRow;
    public static SqlTableHintType ForceSeek;
    public static SqlTableHintType HoldLock;
    public static SqlTableHintType KeepDefaults;
    public static SqlTableHintType KeepIdentity;
    public static SqlTableHintType NoExpand;
    public static SqlTableHintType NoLock;
    public static SqlTableHintType NoWait;
    public static SqlTableHintType PageLock;
    public static SqlTableHintType ReadCommitted;
    public static SqlTableHintType ReadCommittedLock;
    public static SqlTableHintType ReadPast;
    public static SqlTableHintType ReadUncommitted;
    public static SqlTableHintType RepeatableRead;
    public static SqlTableHintType Rowlock;
    public static SqlTableHintType Serializable;
    public static SqlTableHintType TabLock;
    public static SqlTableHintType TabLockX;
    public static SqlTableHintType UpdateLock;
    public static SqlTableHintType XLock;
    public static SqlTableHintType SpatialWindowMaxCells;
    public static SqlTableHintType Snapshot;
    public static SqlTableHintType ForceScan;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableRefExpression : SqlTableExpression {
    private SqlHintCollection hints;
    private SqlObjectIdentifier objectIdentifier;
    private SqlIdentifier alias;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    private IEnumerable`1<SqlIdentifier> Identifiers { get; }
    public SqlHintCollection Hints { get; }
    public SqlObjectIdentifier ObjectIdentifier { get; }
    public SqlIdentifier Alias { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableRefExpression(SqlObjectIdentifier objectIdentifier);
    internal SqlTableRefExpression(SqlObjectIdentifier objectIdentifier, SqlIdentifier alias);
    internal SqlTableRefExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlHint> hints);
    internal SqlTableRefExpression(SqlObjectIdentifier objectIdentifier, SqlIdentifier alias, List`1<SqlHint> hints);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void BindDmlTarget(DmlSpecificationBindingContext bindingContext);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableRefExpression/<get_Identifiers>d__13")]
private IEnumerable`1<SqlIdentifier> get_Identifiers();
    public SqlHintCollection get_Hints();
    public SqlObjectIdentifier get_ObjectIdentifier();
    public SqlIdentifier get_Alias();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableRefExpression/<get_Children>d__28")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableUdtInstanceMemberExpression : SqlTableUdtMemberExpression {
    private SqlScalarExpression udtInstance;
    public SqlScalarExpression UdtInstance { get; }
    internal SqlTableUdtInstanceMemberExpression(SqlScalarExpression instance, SqlIdentifier memberName);
    public SqlScalarExpression get_UdtInstance();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableUdtInstanceMethodExpression : SqlTableUdtInstanceMemberExpression {
    private SqlScalarExpressionCollection arguments;
    private SqlIdentifier alias;
    private SqlIdentifierCollection columnList;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    public SqlScalarExpressionCollection Arguments { get; }
    public SqlIdentifier Alias { get; }
    public SqlIdentifierCollection ColumnList { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableUdtInstanceMethodExpression(SqlScalarExpression instance, SqlIdentifier methodName, List`1<SqlScalarExpression> arguments, SqlIdentifier alias, List`1<SqlIdentifier> columnList);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    private void BindXmlMethod(IBindingContext bindingContext, IXmlDataType dataType, SqlScalarExpressionCollection arguments);
    public SqlScalarExpressionCollection get_Arguments();
    public SqlIdentifier get_Alias();
    public SqlIdentifierCollection get_ColumnList();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableUdtInstanceMethodExpression/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableUdtMemberExpression : SqlTableExpression {
    private SqlIdentifier memberName;
    public SqlIdentifier MemberName { get; }
    internal SqlTableUdtMemberExpression(SqlIdentifier memberName);
    public SqlIdentifier get_MemberName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableValuedFunctionRefExpression : SqlTableExpression {
    private bool isSysTvfRefExpression;
    private SqlObjectIdentifier objectIdentifier;
    private SqlIdentifier alias;
    private SqlScalarExpressionCollection arguments;
    private SqlIdentifierCollection columnList;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    public SqlObjectIdentifier ObjectIdentifier { get; }
    public SqlIdentifier Alias { get; }
    public SqlScalarExpressionCollection Arguments { get; }
    public SqlIdentifierCollection ColumnList { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableValuedFunctionRefExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlScalarExpression> arguments);
    internal SqlTableValuedFunctionRefExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlScalarExpression> arguments, SqlIdentifier alias, List`1<SqlIdentifier> columnList);
    internal SqlTableValuedFunctionRefExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlScalarExpression> arguments, SqlIdentifier alias, List`1<SqlIdentifier> columnList, bool isSys);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    private void BindTVF(IBindingContext bindingContext);
    private void BindMethod(IBindingContext bindingContext);
    internal virtual void BindDmlTarget(DmlSpecificationBindingContext bindingContext);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodHelpText GetMyMethodHelpText(LexLocation caretLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    public SqlObjectIdentifier get_ObjectIdentifier();
    public SqlIdentifier get_Alias();
    public SqlScalarExpressionCollection get_Arguments();
    public SqlIdentifierCollection get_ColumnList();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableValuedFunctionRefExpression/<get_Children>d__33")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableVariableRefExpression : SqlTableExpression {
    private string name;
    private SqlIdentifier alias;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    public string Name { get; }
    public SqlIdentifier Alias { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTableVariableRefExpression(string name);
    internal SqlTableVariableRefExpression(string name, SqlIdentifier alias);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void BindDmlTarget(DmlSpecificationBindingContext bindingContext);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    private bool AtFirstToken(LexLocation lexLocation);
    public string get_Name();
    public SqlIdentifier get_Alias();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTableVariableRefExpression/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTargetTableExpression : SqlCodeObject {
    private SqlIdentifierCollection targetColumnList;
    private SqlObjectIdentifier name;
    private SqlScalarExpressionCollection arguments;
    private SqlObjectIdentifier openDataSourceObject;
    private string openDataSourceCommandString;
    private SqlHintCollection tableHints;
    internal bool IsVisitable { get; }
    public SqlIdentifierCollection TargetColumnList { get; }
    public SqlObjectIdentifier Name { get; }
    public SqlScalarExpressionCollection Arguments { get; }
    public SqlObjectIdentifier OpenDataSourceObject { get; }
    public string OpenDataSourceCommandString { get; }
    public SqlHintCollection TableHints { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTargetTableExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlIdentifier> columnList);
    internal SqlTargetTableExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlHint> tableHints, List`1<SqlIdentifier> columnList);
    internal SqlTargetTableExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlScalarExpression> arguments, List`1<SqlIdentifier> columnList);
    internal SqlTargetTableExpression(SqlObjectIdentifier objectIdentifier, List`1<SqlIdentifier> columnList, List`1<SqlHint> tableHints, List`1<SqlScalarExpression> arguments, SqlObjectIdentifier dataSource, string dataSourceCommandString);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlIdentifierCollection get_TargetColumnList();
    public SqlObjectIdentifier get_Name();
    public SqlScalarExpressionCollection get_Arguments();
    public SqlObjectIdentifier get_OpenDataSourceObject();
    public string get_OpenDataSourceCommandString();
    public SqlHintCollection get_TableHints();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTargetTableExpression/<get_Children>d__29")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTemporalPeriodDefinition : SqlCodeObject {
    private string name;
    private TemporalPeriodType type;
    private SqlIdentifier rowStartColumnName;
    private SqlIdentifier rowEndColumnName;
    internal bool IsVisitable { get; }
    public string Name { get; }
    public TemporalPeriodType Type { get; }
    public SqlIdentifier RowStartColumnName { get; }
    public SqlIdentifier RowEndColumnName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal SqlTemporalPeriodDefinition(SqlIdentifier rowStartColumnName, SqlIdentifier rowEndColumnName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, IMutableTable boundTable, IColumn colRowStart, IColumn colRowEnd);
    public string get_Name();
    public TemporalPeriodType get_Type();
    public virtual string ToString();
    public SqlIdentifier get_RowStartColumnName();
    public SqlIdentifier get_RowEndColumnName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTemporalPeriodDefinition/<get_Children>d__23")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTopSpecification : SqlCodeObject {
    private SqlScalarExpression value;
    private bool isPercent;
    private bool isWithTies;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Value { get; }
    public bool IsPercent { get; }
    public bool IsWithTies { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTopSpecification(SqlScalarExpression value, bool isPercent);
    internal SqlTopSpecification(SqlScalarExpression value, bool isPercent, bool isWithTies);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_Value();
    public bool get_IsPercent();
    public bool get_IsWithTies();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTopSpecification/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTriggerAction : SqlCodeObject {
    private SqlTriggerActionType type;
    internal bool IsVisitable { get; }
    public SqlTriggerActionType Type { get; }
    internal string DisplayName { get; }
    internal SqlTriggerAction(SqlTriggerActionType type);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlTriggerActionType get_Type();
    internal string get_DisplayName();
    private static string GetActionName(SqlTriggerActionType actionType);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTriggerActionType : Enum {
    public int value__;
    public static SqlTriggerActionType Delete;
    public static SqlTriggerActionType Insert;
    public static SqlTriggerActionType Update;
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTriggerActivationType : Enum {
    public int value__;
    public static SqlTriggerActivationType After;
    public static SqlTriggerActivationType For;
    public static SqlTriggerActivationType InsteadOf;
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTriggerDefinition : SqlCodeObject {
    internal static string AppendOptionDisplayName;
    internal static string NotForReplicationOptionDisplayName;
    private SqlObjectIdentifier name;
    private SqlCollection`1<SqlModuleOption> options;
    private SqlTriggerActivationType activationType;
    private bool isOrAlterStatement;
    public SqlObjectIdentifier Name { get; }
    public SqlCollection`1<SqlModuleOption> Options { get; }
    public SqlTriggerActivationType ActivationType { get; }
    public bool IsOrAlterStatement { get; public set; }
    internal TriggerType TriggerType { get; }
    internal IDmlTriggerDefinitionInfo DmlDefinitionInfo { get; }
    internal IDdlTriggerDefinitionInfo DdlDefinitionInfo { get; }
    internal SqlTriggerDefinition(SqlObjectIdentifier name, SqlCollection`1<SqlModuleOption> options, SqlTriggerActivationType activationType);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, TriggerUnion`4<IMutableDmlTrigger, IMutableDatabaseDdlTrigger, IMutableServerDdlTrigger, IMutableTrigger> triggerUnion, ITableViewBase target, bool executionSuccedded);
    private void BindDmlTrigger(BatchBindingContext bindingContext, IMutableDmlTrigger trigger, ITableViewBase target, bool executionSuccedded);
    private void BindDatabaseDdlTrigger(BatchBindingContext bindingContext, IMutableDatabaseDdlTrigger trigger);
    private void BindServerDdlTrigger(BatchBindingContext bindingContext, IMutableServerDdlTrigger trigger);
    internal static SqlTriggerDefinition Create(SqlObjectIdentifier name, TriggerTargetData targetData, List`1<SqlModuleOption> options, TriggerActivationData activationData, bool isWithAppend, bool isNotForReplication);
    internal static SqlTriggerDefinition Create(SqlTriggerDefinition sqlTriggerDefinition, bool isOrAlterStatement);
    public SqlObjectIdentifier get_Name();
    public SqlCollection`1<SqlModuleOption> get_Options();
    public sealed virtual SqlTriggerActivationType get_ActivationType();
    public bool get_IsOrAlterStatement();
    public void set_IsOrAlterStatement(bool value);
    internal abstract virtual TriggerType get_TriggerType();
    internal abstract virtual IDmlTriggerDefinitionInfo get_DmlDefinitionInfo();
    internal abstract virtual IDdlTriggerDefinitionInfo get_DdlDefinitionInfo();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTriggerDefinitionError : SqlTriggerDefinition {
    private TriggerType triggerType;
    private SqlObjectIdentifier targetName;
    private SqlDdlTriggerTargetType targetType;
    private SqlCollection`1<SqlTriggerAction> actions;
    private SqlCollection`1<SqlTriggerEvent> events;
    private bool isWithAppend;
    private bool isNotForReplication;
    internal bool IsVisitable { get; }
    public bool IsNotForReplication { get; }
    public bool IsWithAppend { get; }
    public SqlDdlTriggerTargetType TargetType { get; }
    public SqlCollection`1<SqlTriggerEvent> Events { get; }
    public SqlCollection`1<SqlTriggerAction> Actions { get; }
    public SqlObjectIdentifier TargetName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal TriggerType TriggerType { get; }
    internal IDmlTriggerDefinitionInfo DmlDefinitionInfo { get; }
    internal IDdlTriggerDefinitionInfo DdlDefinitionInfo { get; }
    internal SqlTriggerDefinitionError(TriggerType triggerType, SqlObjectIdentifier name, SqlObjectIdentifier targetName, SqlDdlTriggerTargetType targetType, SqlCollection`1<SqlModuleOption> options, SqlTriggerActivationType activationType, List`1<SqlTriggerAction> actions, List`1<SqlTriggerEvent> events, bool isWithAppend, bool isNotForReplication);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public sealed virtual bool get_IsNotForReplication();
    public sealed virtual bool get_IsWithAppend();
    public sealed virtual SqlDdlTriggerTargetType get_TargetType();
    public sealed virtual SqlCollection`1<SqlTriggerEvent> get_Events();
    public sealed virtual SqlCollection`1<SqlTriggerAction> get_Actions();
    public sealed virtual SqlObjectIdentifier get_TargetName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTriggerDefinitionError/<get_Children>d__27")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal virtual TriggerType get_TriggerType();
    internal virtual IDmlTriggerDefinitionInfo get_DmlDefinitionInfo();
    internal virtual IDdlTriggerDefinitionInfo get_DdlDefinitionInfo();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTriggerEvent : SqlCodeObject {
    private string name;
    internal bool IsVisitable { get; }
    public string Name { get; }
    internal SqlTriggerEvent(string name);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public string get_Name();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTryCatchStatement : SqlStatement {
    private SqlStatementCollection tryBlock;
    private SqlStatementCollection catchBlock;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlStatementCollection TryBlock { get; }
    public SqlStatementCollection CatchBlock { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlTryCatchStatement(List`1<SqlStatement> tryStatements, List`1<SqlStatement> catchStatements);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlStatementCollection get_TryBlock();
    public SqlStatementCollection get_CatchBlock();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlTryCatchStatement/<get_Children>d__20")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtInstanceDataMemberExpression : SqlUdtInstanceMemberExpression {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUdtInstanceDataMemberExpression(SqlScalarExpression instance, SqlIdentifier fieldOrPropertyName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtInstanceDataMemberExpression/<get_Children>d__9")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtInstanceMemberExpression : SqlUdtMemberExpression {
    private SqlScalarExpression udtInstance;
    public SqlScalarExpression UdtInstance { get; }
    internal SqlUdtInstanceMemberExpression(SqlScalarExpression instance, SqlIdentifier memberName);
    public SqlScalarExpression get_UdtInstance();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtInstanceMethodExpression : SqlUdtInstanceMemberExpression {
    private SqlScalarExpressionCollection arguments;
    internal bool IsVisitable { get; }
    public SqlScalarExpressionCollection Arguments { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUdtInstanceMethodExpression(SqlScalarExpression instance, SqlIdentifier methodName, List`1<SqlScalarExpression> arguments);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlScalarExpressionCollection get_Arguments();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtInstanceMethodExpression/<get_Children>d__12")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtMemberExpression : SqlScalarExpression {
    private IScalar boundMember;
    private SqlIdentifier memberName;
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlIdentifier MemberName { get; }
    internal SqlUdtMemberExpression(SqlIdentifier memberName);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalar get_BoundScalar();
    internal void BindUdtDataMember(IBindingContext bindingContext, IClrDataType boundUdt, bool isStatic);
    internal void BindUdtMethod(IBindingContext bindingContext, IClrDataType boundUdt, bool isStatic, SqlScalarExpressionCollection arguments);
    internal void BindXmlMethod(IBindingContext bindingContext, IXmlDataType dataType, SqlScalarExpressionCollection arguments);
    internal virtual void Unbind();
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlIdentifier get_MemberName();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtStaticDataMemberExpression : SqlUdtStaticMemberExpression {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUdtStaticDataMemberExpression(SqlDataTypeSpecification type, SqlIdentifier fieldOrPropertyName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtStaticDataMemberExpression/<get_Children>d__9")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtStaticMemberExpression : SqlUdtMemberExpression {
    private SqlDataTypeSpecification type;
    public SqlDataTypeSpecification Type { get; }
    internal SqlUdtStaticMemberExpression(SqlDataTypeSpecification type, SqlIdentifier memberName);
    internal IClrDataType BindType(IBindingContext bindingContext);
    public SqlDataTypeSpecification get_Type();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtStaticMethodExpression : SqlUdtStaticMemberExpression {
    private SqlScalarExpressionCollection arguments;
    internal bool IsVisitable { get; }
    public SqlScalarExpressionCollection Arguments { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUdtStaticMethodExpression(SqlDataTypeSpecification type, SqlIdentifier methodName, List`1<SqlScalarExpression> arguments);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlScalarExpressionCollection get_Arguments();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUdtStaticMethodExpression/<get_Children>d__12")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnaryScalarExpression : SqlScalarExpression {
    private SqlUnaryScalarOperatorType operatorType;
    private SqlScalarExpression expression;
    internal bool IsVisitable { get; }
    public IScalar BoundScalar { get; }
    internal ScalarExpressionType ExpressionType { get; }
    internal bool IsConstantExpression { get; }
    public SqlUnaryScalarOperatorType Operator { get; }
    public SqlScalarExpression Expression { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    internal SqlUnaryScalarExpression(SqlUnaryScalarOperatorType type, SqlScalarExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public virtual IScalar get_BoundScalar();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual ScalarExpressionType get_ExpressionType();
    internal virtual bool get_IsConstantExpression();
    public SqlUnaryScalarOperatorType get_Operator();
    public SqlScalarExpression get_Expression();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnaryScalarExpression/<get_Children>d__21")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnaryScalarOperatorType : Enum {
    public int value__;
    public static SqlUnaryScalarOperatorType None;
    public static SqlUnaryScalarOperatorType Positive;
    public static SqlUnaryScalarOperatorType Negative;
    public static SqlUnaryScalarOperatorType BitwiseNot;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUniqueConstraint : SqlUniqueConstraintBase {
    internal bool IsVisitable { get; }
    internal SqlUniqueConstraint(SqlClusterOption clusterOption, List`1<SqlIndexedColumn> indexedColumnList, List`1<SqlIndexOption> indexOptions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUniqueConstraintBase : SqlConstraint {
    private SqlClusterOption clusterOption;
    private SqlIndexedColumnCollection indexedColumns;
    private SqlIndexOptionCollection indexOptions;
    public SqlClusterOption ClusterOption { get; }
    public SqlIndexedColumnCollection IndexedColumns { get; }
    public SqlIndexOptionCollection IndexOptions { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsConstraint { get; }
    private SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsConstraint { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsColumnDefinition { get; }
    private SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsColumnDefinition { get; }
    private SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.AsTemporalPeriodDefinition { get; }
    private bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.IsTemporalPeriodDefinition { get; }
    internal SqlUniqueConstraintBase(SqlConstraintType type, SqlClusterOption clusterOption, List`1<SqlIndexedColumn> indexedColumnList, List`1<SqlIndexOption> indexOptions);
    internal sealed virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable);
    internal sealed virtual void Bind(BatchBindingContext bindingContext, ConstraintBindingHelper bindingHelper, IMutableDatabaseTable boundTable, IMutableColumn boundColumn);
    internal static SqlUniqueConstraintBase Create(SqlConstraintType type, SqlClusterOption clusterOption, List`1<SqlIndexedColumn> indexedColumnList, List`1<SqlIndexOption> indexOptions);
    internal virtual void OnSetParentPointers();
    public SqlClusterOption get_ClusterOption();
    public SqlIndexedColumnCollection get_IndexedColumns();
    public SqlIndexOptionCollection get_IndexOptions();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUniqueConstraintBase/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsConstraint();
    private sealed virtual override SqlConstraint Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsConstraint();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsColumnDefinition();
    private sealed virtual override SqlColumnDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsColumnDefinition();
    private sealed virtual override SqlTemporalPeriodDefinition Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_AsTemporalPeriodDefinition();
    private sealed virtual override bool Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ISqlTableElement.get_IsTemporalPeriodDefinition();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnpivotClause : SqlCodeObject {
    private SqlColumnRefExpression valueColumn;
    private SqlColumnRefExpression pivotedColumn;
    private SqlColumnRefExpressionCollection columnList;
    internal bool IsVisitable { get; }
    public SqlColumnRefExpression ValueColumn { get; }
    public SqlColumnRefExpression PivotedColumn { get; }
    public SqlColumnRefExpressionCollection ColumnList { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUnpivotClause(SqlColumnRefExpression valueColumn, SqlColumnRefExpression pivotedColumn, List`1<SqlColumnRefExpression> columnList);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlColumnRefExpression get_ValueColumn();
    public SqlColumnRefExpression get_PivotedColumn();
    public SqlColumnRefExpressionCollection get_ColumnList();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnpivotClause/<get_Children>d__18")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnpivotTableExpression : SqlTableExpression {
    private SqlTableExpression source;
    private SqlUnpivotClause unpivotClause;
    private SqlIdentifier alias;
    internal bool IsVisitable { get; }
    internal TableExpressionName ExpressionName { get; }
    private IEnumerable`1<SqlColumnRefExpression> ValueAndPivotedColumns { get; }
    public SqlTableExpression Source { get; }
    public SqlUnpivotClause UnpivotClause { get; }
    public SqlIdentifier Alias { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUnpivotTableExpression(SqlTableExpression source, SqlUnpivotClause unpivotClause, SqlIdentifier alias);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual TableExpressionName get_ExpressionName();
    internal virtual void Bind(IBindingContext bindingContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnpivotTableExpression/<get_ValueAndPivotedColumns>d__10")]
private IEnumerable`1<SqlColumnRefExpression> get_ValueAndPivotedColumns();
    public SqlTableExpression get_Source();
    public SqlUnpivotClause get_UnpivotClause();
    public SqlIdentifier get_Alias();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnpivotTableExpression/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnqualifiedJoinTableExpression : SqlJoinTableExpression {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUnqualifiedJoinTableExpression(SqlTableExpression left, SqlJoinOperatorType joinOperator, SqlTableExpression right);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUnqualifiedJoinTableExpression/<get_Children>d__8")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateBooleanExpression : SqlBooleanExpression {
    private SqlIdentifier columnName;
    internal bool IsVisitable { get; }
    public SqlIdentifier ColumnName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUpdateBooleanExpression(SqlIdentifier columnName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlIdentifier get_ColumnName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateBooleanExpression/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateDeleteSpecificationBase : SqlDmlSpecification {
    private SqlFromClause fromClause;
    private SqlWhereClause whereClause;
    public SqlFromClause FromClause { get; }
    public SqlWhereClause WhereClause { get; }
    internal SqlUpdateDeleteSpecificationBase(SqlTopSpecification topSpecification, DmlTarget dmlTarget, List`1<SqlOutputClause> outputClauses, SqlFromClause fromClause, SqlWhereClause whereClause);
    internal abstract virtual DmlSpecificationBindingContext CreateBindingContext(LocalBindingContext localBindingContext);
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlFromClause get_FromClause();
    public SqlWhereClause get_WhereClause();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateMergeAction : SqlMergeAction {
    private SqlSetClause setClause;
    internal bool IsVisitable { get; }
    public SqlSetClause SetClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUpdateMergeAction(SqlSetClause setClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlSetClause get_SetClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateMergeAction/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateSpecification : SqlUpdateDeleteSpecificationBase {
    private SqlSetClause setClause;
    internal bool IsVisitable { get; }
    public SqlSetClause SetClause { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUpdateSpecification(SqlTopSpecification topSpecification, DmlTarget dmlTarget, SqlSetClause setClause, List`1<SqlOutputClause> outputClauses, SqlFromClause fromClause, SqlWhereClause whereClause);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual DmlSpecificationBindingContext CreateBindingContext(LocalBindingContext localBindingContext);
    internal virtual void Bind(IBindingContext bindingContext);
    public SqlSetClause get_SetClause();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateSpecification/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUpdateStatement : SqlDmlStatement {
    private SqlUpdateSpecification updateSpecification;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlUpdateSpecification UpdateSpecification { get; }
    internal SqlDmlSpecification DmlSpecification { get; }
    internal SqlUpdateStatement(SqlUpdateSpecification updateSpecification);
    internal SqlUpdateStatement(SqlQueryWithClause queryWithClause, SqlUpdateSpecification updateSpecification);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlUpdateSpecification get_UpdateSpecification();
    internal virtual SqlDmlSpecification get_DmlSpecification();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUserDefinedDataTypeNullState : Enum {
    public int value__;
    public static SqlUserDefinedDataTypeNullState None;
    public static SqlUserDefinedDataTypeNullState Null;
    public static SqlUserDefinedDataTypeNullState NotNull;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUserDefinedScalarFunctionCallExpression : SqlScalarFunctionCallExpression {
    private IScalarFunction boundFunction;
    private SqlObjectIdentifier objectIdentifier;
    internal bool IsVisitable { get; }
    internal bool IsValidFilterExpressionConstant { get; }
    public IScalarFunction BoundFunction { get; }
    internal ScalarExpressionType ExpressionType { get; }
    public SqlObjectIdentifier ObjectIdentifier { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUserDefinedScalarFunctionCallExpression(SqlObjectIdentifier name, IEnumerable`1<SqlScalarExpression> arguments);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual bool get_IsValidFilterExpressionConstant();
    public virtual IScalarFunction get_BoundFunction();
    private static bool IsUdtOrXmlColumn(IColumn column);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    internal virtual MethodNameAndParamLocations GetMyMethodNameAndParams(LexLocation caretLocation);
    internal virtual ScalarExpressionType get_ExpressionType();
    public SqlObjectIdentifier get_ObjectIdentifier();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUserDefinedScalarFunctionCallExpression/<get_Children>d__23")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUseStatement : SqlStatement {
    private IDatabase boundDatabase;
    private SqlIdentifier databaseName;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public IMetadataObject BoundObject { get; }
    public SqlIdentifier DatabaseName { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlUseStatement(SqlIdentifier databaseName);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public virtual IMetadataObject get_BoundObject();
    internal virtual void BindStatement(BatchBindingContext bindingContext, StatementBindMode bindMode);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    internal virtual string GetQuickInfoText(LexLocation cursorLocation, IMetadataDisplayInfoProvider displayInfoProvider);
    public SqlIdentifier get_DatabaseName();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlUseStatement/<get_Children>d__24")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlValuesInsertMergeActionSource : SqlInsertMergeActionSource {
    private SqlScalarExpressionCollection values;
    internal bool IsVisitable { get; }
    public SqlScalarExpressionCollection Values { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlValuesInsertMergeActionSource(List`1<SqlScalarExpression> values);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpressionCollection get_Values();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlValuesInsertMergeActionSource/<get_Children>d__11")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public abstract class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableAssignment : SqlAssignment {
    public SqlVariableAssignment(SqlAssignmentOperatorType operatorType);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableColumnAssignment : SqlAssignment {
    private SqlScalarVariableRefExpression variable;
    private SqlScalarRefExpression column;
    private SqlScalarExpression value;
    internal bool IsVisitable { get; }
    public SqlScalarExpression Value { get; }
    public SqlScalarVariableRefExpression Variable { get; }
    public SqlScalarRefExpression Column { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlVariableColumnAssignment(SqlScalarVariableRefExpression variable, SqlColumnAssignment colAssignment);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public SqlScalarExpression get_Value();
    public SqlScalarVariableRefExpression get_Variable();
    public SqlScalarRefExpression get_Column();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableColumnAssignment/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableDeclaration : SqlCodeObject {
    private LexicalScope lexicalScope;
    private ILocalVariable boundVariable;
    private string name;
    private SqlDataTypeSpecification type;
    private SqlScalarExpression value;
    internal bool IsVisitable { get; }
    public ILocalVariable BoundVariable { get; }
    public IMetadataObject BoundObject { get; }
    public string Name { get; }
    public SqlDataTypeSpecification Type { get; }
    public SqlScalarExpression Value { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlVariableDeclaration(string name, SqlDataTypeSpecification type, SqlScalarExpression value);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    public ILocalVariable get_BoundVariable();
    public virtual IMetadataObject get_BoundObject();
    internal sealed virtual LexicalScope GetLexicalScope();
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void Bind(IBindingContext bindingContext, LexicalScopeOverride scopeOverride);
    internal virtual void Unbind();
    internal virtual IScalarVariable CreateScalarVariable(IScalarDataType dataType, IMetadataFactory factory);
    internal virtual ITableVariable CreateTableVariable(ITableDataType dataType, IMetadataFactory factory);
    internal virtual ICursorVariable CreateCursorVariable(IMetadataFactory factory);
    internal static SqlVariableDeclaration Create(SqlParameterDeclaration paramDecl);
    public string get_Name();
    public SqlDataTypeSpecification get_Type();
    public SqlScalarExpression get_Value();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableDeclaration/<get_Children>d__31")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableDeclarationCollection : SqlCollection`1<SqlVariableDeclaration> {
    internal SqlVariableDeclarationCollection(List`1<SqlVariableDeclaration> items);
    internal SqlVariableDeclarationCollection(List`1<SqlParameterDeclaration> items);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableDeclarationCollection/<AsVariables>d__2")]
private static IEnumerable`1<SqlVariableDeclaration> AsVariables(List`1<SqlParameterDeclaration> paramters);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableDeclareStatement : SqlDeclareStatement {
    private SqlVariableDeclarationCollection declarations;
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public SqlVariableDeclarationCollection Declarations { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlVariableDeclareStatement(List`1<SqlVariableDeclaration> declarations);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    public SqlVariableDeclarationCollection get_Declarations();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlVariableDeclareStatement/<get_Children>d__17")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlViewDefinition : SqlCodeObject {
    private SqlObjectIdentifier name;
    private SqlIdentifierCollection columnList;
    private SqlCollection`1<SqlModuleOption> options;
    private SqlQueryWithClause queryWithClause;
    private SqlQueryExpression queryExpression;
    private bool hasCheckOption;
    internal bool IsVisitable { get; }
    public SqlObjectIdentifier Name { get; }
    public SqlIdentifierCollection ColumnList { get; }
    public SqlQueryExpression QueryExpression { get; }
    public SqlQueryWithClause QueryWithClause { get; }
    public bool HasCheckOption { get; }
    public SqlCollection`1<SqlModuleOption> Options { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlViewDefinition(SqlObjectIdentifier name, List`1<SqlIdentifier> columnList, List`1<SqlModuleOption> options, SqlQueryWithClause queryWithClause, SqlQueryExpression queryExpression, bool hasCheckOption);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual void Bind(IBindingContext bindingContext);
    internal void Bind(BatchBindingContext bindingContext, IMutableView view, bool setBuildProperties);
    internal virtual bool MayChildHaveCompletionList(SqlCodeObject child);
    public SqlObjectIdentifier get_Name();
    public SqlIdentifierCollection get_ColumnList();
    public SqlQueryExpression get_QueryExpression();
    public SqlQueryWithClause get_QueryWithClause();
    public bool get_HasCheckOption();
    public SqlCollection`1<SqlModuleOption> get_Options();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlViewDefinition/<get_Children>d__29")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWhereClause : SqlConditionClause {
    internal bool IsVisitable { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlWhereClause(SqlBooleanExpression expression);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWhereClause/<get_Children>d__9")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWhileStatement : SqlConditionalStatement {
    internal bool IsVisitable { get; }
    internal string StatementPhrase { get; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlWhileStatement(SqlBooleanExpression condition, SqlStatement trueStatement);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlStatementVisitor visitor);
    public virtual T Accept(ISqlStatementVisitor`1<T> visitor);
    public virtual void Accept(ISqlStatementContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlStatementContextVisitor`2<T, C> visitor, C context);
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal sealed virtual string get_StatementPhrase();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWhileStatement/<get_Children>d__14")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWindowClause : SqlCodeObject {
    [CompilerGeneratedAttribute]
private List`1<SqlWindowExpression> <Windows>k__BackingField;
    internal bool IsVisitable { get; }
    public List`1<SqlWindowExpression> Windows { get; private set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlWindowClause(List`1<SqlWindowExpression> windowExpressions);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    internal virtual void Bind(IBindingContext bindingContext);
    internal virtual void Unbind();
    internal virtual IMetadataCollection`1<IMetadataObject> GetCompletionList(LexLocation caretLocation, CompletionContext completionContext);
    [CompilerGeneratedAttribute]
public List`1<SqlWindowExpression> get_Windows();
    [CompilerGeneratedAttribute]
private void set_Windows(List`1<SqlWindowExpression> value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWindowClause/<get_Children>d__15")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWindowExpression : SqlCodeObject {
    [CompilerGeneratedAttribute]
private SqlIdentifier <WindowName>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <ReferenceWindowName>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlWindowSpecification <WindowSpecification>k__BackingField;
    internal bool IsVisitable { get; }
    public SqlIdentifier WindowName { get; internal set; }
    public SqlIdentifier ReferenceWindowName { get; internal set; }
    public SqlWindowSpecification WindowSpecification { get; internal set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlWindowExpression(SqlIdentifier windowName);
    internal SqlWindowExpression(SqlIdentifier windowName, SqlWindowSpecification windowSpecification);
    internal SqlWindowExpression(SqlIdentifier windowName, SqlIdentifier refWindowName, SqlWindowSpecification windowSpecification);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_WindowName();
    [CompilerGeneratedAttribute]
internal void set_WindowName(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_ReferenceWindowName();
    [CompilerGeneratedAttribute]
internal void set_ReferenceWindowName(SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlWindowSpecification get_WindowSpecification();
    [CompilerGeneratedAttribute]
internal void set_WindowSpecification(SqlWindowSpecification value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWindowExpression/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWindowFrame : Enum {
    public int value__;
    public static SqlWindowFrame None;
    public static SqlWindowFrame Rows;
    public static SqlWindowFrame Range;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWindowSpecification : SqlCodeObject {
    [CompilerGeneratedAttribute]
private List`1<SqlScalarExpression> <PartitionExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOrderByClause <OrderExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlWindowFrame <WindowFrame>k__BackingField;
    internal bool IsVisitable { get; }
    public List`1<SqlScalarExpression> PartitionExpression { get; internal set; }
    public SqlOrderByClause OrderExpression { get; internal set; }
    public SqlWindowFrame WindowFrame { get; internal set; }
    public IEnumerable`1<SqlCodeObject> Children { get; }
    internal SqlWindowSpecification(SqlWindowFrame frame);
    internal SqlWindowSpecification(SqlOrderByClause orderExpression, SqlWindowFrame frame);
    internal SqlWindowSpecification(List`1<SqlScalarExpression> partitionExpression, SqlOrderByClause orderExpression, SqlWindowFrame frame);
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
    [CompilerGeneratedAttribute]
public List`1<SqlScalarExpression> get_PartitionExpression();
    [CompilerGeneratedAttribute]
internal void set_PartitionExpression(List`1<SqlScalarExpression> value);
    [CompilerGeneratedAttribute]
public SqlOrderByClause get_OrderExpression();
    [CompilerGeneratedAttribute]
internal void set_OrderExpression(SqlOrderByClause value);
    [CompilerGeneratedAttribute]
public SqlWindowFrame get_WindowFrame();
    [CompilerGeneratedAttribute]
internal void set_WindowFrame(SqlWindowFrame value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlWindowSpecification/<get_Children>d__22")]
public virtual IEnumerable`1<SqlCodeObject> get_Children();
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlXmlDocumentConstraint : Enum {
    public int value__;
    public static SqlXmlDocumentConstraint None;
    public static SqlXmlDocumentConstraint Content;
    public static SqlXmlDocumentConstraint Document;
}
public class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlXmlNamespacesDeclaration : SqlCodeObject {
    internal bool IsVisitable { get; }
    internal virtual bool get_IsVisitable();
    public virtual void Accept(ISqlCodeObjectVisitor visitor);
    public virtual T Accept(ISqlCodeObjectVisitor`1<T> visitor);
    public virtual void Accept(ISqlCodeObjectContextVisitor`1<C> visitor, C context);
    public virtual T Accept(ISqlCodeObjectContextVisitor`2<T, C> visitor, C context);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.TemporalPeriodType : Enum {
    public short value__;
    public static TemporalPeriodType SystemTime;
    public static TemporalPeriodType AppTime;
}
internal class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.TriggerActivationData : object {
    public TriggerType TriggerType;
    public SqlTriggerActivationType ActivationType;
    public List`1<SqlTriggerAction> Actions;
    public List`1<SqlTriggerEvent> Events;
    private TriggerActivationData(TriggerType triggerType, SqlTriggerActivationType activationType, List`1<SqlTriggerAction> actions, List`1<SqlTriggerEvent> events);
    public static TriggerActivationData CreateDmlActivation(SqlTriggerActivationType activationType, List`1<SqlTriggerAction> actions);
    public static TriggerActivationData CreateDdlActivation(SqlTriggerActivationType activationType, List`1<SqlTriggerEvent> events);
}
internal class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.TriggerTargetData : object {
    public TriggerType TriggerType;
    public SqlObjectIdentifier TargetName;
    public SqlDdlTriggerTargetType TargetType;
    private TriggerTargetData(TriggerType triggerType, SqlObjectIdentifier targetName, SqlDdlTriggerTargetType targetType);
    public static TriggerTargetData CreateDmlTarget(SqlObjectIdentifier targetName);
    public static TriggerTargetData CreateDdlTarget(SqlDdlTriggerTargetType targetType);
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.TriggerType : Enum {
    public int value__;
    public static TriggerType DmlTrigger;
    public static TriggerType DdlTrigger;
}
public enum Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.TriggerTypeEx : Enum {
    public int value__;
    public static TriggerTypeEx DmlTrigger;
    public static TriggerTypeEx DatabaseDdlTrigger;
    public static TriggerTypeEx ServerDdlTrigger;
}
internal class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.TriggerUnion`4 : ValueType {
    public S DmlTrigger;
    public T DatabaseDdlTrigger;
    public U ServerDdlTrigger;
    public bool IsNull { get; }
    public bool IsDmlTrigger { get; }
    public bool IsDatabaseDdlTrigger { get; }
    public bool IsServerDdlTrigger { get; }
    public V AsTrigger { get; }
    public TriggerUnion`4(S dmlTrigger);
    public TriggerUnion`4(T databaseDdlTrigger);
    public TriggerUnion`4(U serverDdlTrigger);
    public bool get_IsNull();
    public bool get_IsDmlTrigger();
    public bool get_IsDatabaseDdlTrigger();
    public bool get_IsServerDdlTrigger();
    public V get_AsTrigger();
}
internal class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.UserDefinedTypeUnion`4 : ValueType {
    public R UserDefinedDataType;
    public S UserDefinedTableType;
    public T UserDefinedClrType;
    public bool IsNull { get; }
    public bool IsUserDefinedDataType { get; }
    public bool IsUserDefinedTableType { get; }
    public bool IsUserDefinedClrType { get; }
    public U AsUserDefinedType { get; }
    public UserDefinedTypeUnion`4(R userDefinedDataType);
    public UserDefinedTypeUnion`4(S userDefinedTableType);
    public UserDefinedTypeUnion`4(T userDefinedClrType);
    public bool get_IsNull();
    public bool get_IsUserDefinedDataType();
    public bool get_IsUserDefinedTableType();
    public bool get_IsUserDefinedClrType();
    public U get_AsUserDefinedType();
}
public static class Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.ValidateModuleBodyVisitor : object {
    public static SqlStatementRecursiveVisitor FunctionBinderVisitor { get; }
    public static SqlStatementRecursiveVisitor ScalarFunctionParserVisitor { get; }
    public static SqlStatementRecursiveVisitor TableFunctionParserVisitor { get; }
    public static SqlStatementRecursiveVisitor ProcedureParserVisitor { get; }
    public static SqlStatementRecursiveVisitor TriggerParserVisitor { get; }
    public static SqlStatementRecursiveVisitor get_FunctionBinderVisitor();
    public static SqlStatementRecursiveVisitor get_ScalarFunctionParserVisitor();
    public static SqlStatementRecursiveVisitor get_TableFunctionParserVisitor();
    public static SqlStatementRecursiveVisitor get_ProcedureParserVisitor();
    public static SqlStatementRecursiveVisitor get_TriggerParserVisitor();
}
public class Microsoft.SqlServer.Management.SqlParser.SqlParserException : Exception {
    internal SqlParserException(string message, Exception innerException);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlParserInternalBinderError : SqlParserException {
    internal SqlParserInternalBinderError(Exception innerException);
}
public class Microsoft.SqlServer.Management.SqlParser.SqlParserInternalParserError : SqlParserException {
    internal SqlParserInternalParserError(Exception innerException);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.SqlParser.SR : object {
    public static CultureInfo Culture { get; public set; }
    public static string MergeStatementMustTerminated { get; }
    public static string ParseResultsShouldNotContainNullElement { get; }
    public static string CannotCreateMoreThanOneGeneratedAlwaysAsRowStartColumnOnTable { get; }
    public static string CannotCreateMoreThanOneGeneratedAlwaysAsRowEndColumnOnTable { get; }
    public static string CannotCreateMoreThanOneTemporalSystemTimePeriodOnTable { get; }
    public static string GeneratedAlwaysAsRowStartColumnDefinitionMissing { get; }
    public static string GeneratedAlwaysAsRowEndColumnDefinitionMissing { get; }
    public static string GeneratedAlwaysAsRowStartColumnWrongName { get; }
    public static string GeneratedAlwaysAsRowEndColumnWrongName { get; }
    public static string TemporalSystemTimePeriodDefinitionMissing { get; }
    public static string InvalidBuildModeStatementCreateSchema { get; }
    public static string InvalidBuildModeStatementCreateIndex { get; }
    public static string InvalidBuildModeStatementCreateProcCursorParams { get; }
    public static string InvalidBuildModeStatementCreateProcedureWithEncryption { get; }
    public static string InvalidBuildModeStatementCreateFunction { get; }
    public static string InvalidBuildModeStatementCreateFunctionWithEncryption { get; }
    public static string InvalidBuildModeStatementCreateLogin { get; }
    public static string InvalidBuildModeStatementCreateLoginWithDefaultDatabase { get; }
    public static string InvalidBuildModeStatementCreateTriggerDdl { get; }
    public static string InvalidBuildModeStatementCreateTriggerWithEncryption { get; }
    public static string InvalidBuildModeStatementCreateViewWithEncryption { get; }
    public static string InvalidBuildModeExecutionContextTypeSelf { get; }
    public static string UseDatabaseStatementNotAllowed { get; }
    public static string ExtendedStoredProceduresNotSupported { get; }
    public static string StoredProceduresAlwaysReturnInt { get; }
    public static string TVFMethodMustBeAliased { get; }
    public static string InvalidExecuteOption { get; }
    public static string MixingOldAndNewSyntaxForCursorOptionsNotAllowed { get; }
    public static string CannotConvertClusteredIndexToNonclustered { get; }
    public static string CannotSpecifyIncludedColumnsForClusteredIndex { get; }
    public static string CannotAssignDefaultValueToALocalVariable { get; }
    public static string CannotUseOutputOptionInDeclareOrCreateFunction { get; }
    public static string BooleanConditionExpected { get; }
    public static string RowguidcolDatatypeMismatch { get; }
    public static string ComputedColumnsConstraintCheckError { get; }
    public static string NameOrAuthorizationKeywordRequired { get; }
    public static string InvalidOnClause { get; }
    public static string InvalidOptionInCreateFunction { get; }
    public static string DbNameIsNotAllowedForCreateAlterFunc { get; }
    public static string ConflictingReturnsNullAndCalledOnNullInputOptions { get; }
    public static string LastStatementWithinFunctionMustBeReturn { get; }
    public static string ReturnStatementInScalarValuedFunctionMustIncludeArg { get; }
    public static string UseReturnStatementWithValueCannotBeUsed { get; }
    public static string SelectStatementWithinFunctionCannotReturnData { get; }
    public static string TempFunctionNameIsNotAllowed { get; }
    public static string ObjectNameIsMissingOrEmpty { get; }
    public static string InvalidConstantOutput { get; }
    public static string ReadonlyCannotBeUsed { get; }
    public static string InvalidOptionInCreateProcedure { get; }
    public static string DbNameIsNotAllowedForCreateAlterProc { get; }
    public static string DbNameIsNotAllowedForCreateSynonym { get; }
    public static string DbNameIsNotAllowedForDropSynonym { get; }
    public static string InvalidOptionInCreateTrigger { get; }
    public static string InvalidTriggerEventTypes { get; }
    public static string ScalePrecisionMismatch { get; }
    public static string SelectAssignmentError { get; }
    public static string SelectIntoMustBeFirstQuery { get; }
    public static string InvalidOptionInCreateView { get; }
    public static string DatabaseNameAsPrefixInCreateView { get; }
    public static string RowTagOnlyInRawAndPath { get; }
    public static string XmlSchemaError { get; }
    public static string ElementsError { get; }
    public static string Base64Error { get; }
    public static string TypeError { get; }
    public static string IncludeNullValuesError { get; }
    public static string WithoutArrayWrapperError { get; }
    public static string CommaOr { get; }
    public static string Expecting { get; }
    public static string EndOfFile { get; }
    public static string Comma { get; }
    public static string Period { get; }
    public static string PrefixedColumnsNotAllowedInPivot { get; }
    public static string PrefixedColumnsNotAllowedInUnpivot { get; }
    public static string NumberOfValuesDoesNotMatchTableDef { get; }
    public static string SelectListOfInsertHasFewerItems { get; }
    public static string SelectListOfInsertHasMoreItems { get; }
    public static string InsertIntoIdentityColumnNotAllowed { get; }
    public static string NestedDmlMustHaveOutputClause { get; }
    public static string SubqueriesNotAllowedInOutput { get; }
    public static string AggregateNotAllowedInOutput { get; }
    public static string NumberOfColumnsMustBeTheSame { get; }
    public static string CollateCannotBeUsedOnUddt { get; }
    public static string ApplicationRole { get; }
    public static string AsymmetricKey { get; }
    public static string BuiltinFunction { get; }
    public static string Certificate { get; }
    public static string Collation { get; }
    public static string Column { get; }
    public static string ColumnAlias { get; }
    public static string CommonTableExpression { get; }
    public static string Credential { get; }
    public static string Database { get; }
    public static string DatabaseDdlTrigger { get; }
    public static string DatabasePermission { get; }
    public static string DatabaseRole { get; }
    public static string DataType { get; }
    public static string Datepart { get; }
    public static string DerivedTable { get; }
    public static string DmlTableSource { get; }
    public static string DmlTrigger { get; }
    public static string ExtendedStoredProcedure { get; }
    public static string GlobalVariable { get; }
    public static string IsJson { get; }
    public static string LocalVariable { get; }
    public static string Login { get; }
    public static string Parameter { get; }
    public static string PivotTable { get; }
    public static string ScalarValuedFunction { get; }
    public static string Schema { get; }
    public static string Server { get; }
    public static string ServerDdlTrigger { get; }
    public static string StoredProcedure { get; }
    public static string Synonym { get; }
    public static string SystemDataType { get; }
    public static string Table { get; }
    public static string TableAlias { get; }
    public static string TableValuedFunction { get; }
    public static string TemporaryTable { get; }
    public static string UnpivotTable { get; }
    public static string User { get; }
    public static string UserDefinedAggregate { get; }
    public static string UserDefinedClrType { get; }
    public static string UserDefinedDataType { get; }
    public static string UserDefinedTableType { get; }
    public static string View { get; }
    public static string XmlDataTypeMethod { get; }
    public static string DeserializationExpectedSingleXmlElement { get; }
    public static string DeserializationUnexpectedXmlContent { get; }
    public static string InvalidRootTypes { get; }
    public static string SqlScriptMustHaveOnlyModuleStatement { get; }
    public static string SqlScriptMustHaveOnlyTriggerStatement { get; }
    public static string SqlScriptMustHaveOnlyViewStatement { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_MergeStatementMustTerminated();
    public static string get_ParseResultsShouldNotContainNullElement();
    public static string get_CannotCreateMoreThanOneGeneratedAlwaysAsRowStartColumnOnTable();
    public static string get_CannotCreateMoreThanOneGeneratedAlwaysAsRowEndColumnOnTable();
    public static string get_CannotCreateMoreThanOneTemporalSystemTimePeriodOnTable();
    public static string get_GeneratedAlwaysAsRowStartColumnDefinitionMissing();
    public static string get_GeneratedAlwaysAsRowEndColumnDefinitionMissing();
    public static string get_GeneratedAlwaysAsRowStartColumnWrongName();
    public static string get_GeneratedAlwaysAsRowEndColumnWrongName();
    public static string get_TemporalSystemTimePeriodDefinitionMissing();
    public static string get_InvalidBuildModeStatementCreateSchema();
    public static string get_InvalidBuildModeStatementCreateIndex();
    public static string get_InvalidBuildModeStatementCreateProcCursorParams();
    public static string get_InvalidBuildModeStatementCreateProcedureWithEncryption();
    public static string get_InvalidBuildModeStatementCreateFunction();
    public static string get_InvalidBuildModeStatementCreateFunctionWithEncryption();
    public static string get_InvalidBuildModeStatementCreateLogin();
    public static string get_InvalidBuildModeStatementCreateLoginWithDefaultDatabase();
    public static string get_InvalidBuildModeStatementCreateTriggerDdl();
    public static string get_InvalidBuildModeStatementCreateTriggerWithEncryption();
    public static string get_InvalidBuildModeStatementCreateViewWithEncryption();
    public static string get_InvalidBuildModeExecutionContextTypeSelf();
    public static string get_UseDatabaseStatementNotAllowed();
    public static string get_ExtendedStoredProceduresNotSupported();
    public static string get_StoredProceduresAlwaysReturnInt();
    public static string get_TVFMethodMustBeAliased();
    public static string get_InvalidExecuteOption();
    public static string get_MixingOldAndNewSyntaxForCursorOptionsNotAllowed();
    public static string get_CannotConvertClusteredIndexToNonclustered();
    public static string get_CannotSpecifyIncludedColumnsForClusteredIndex();
    public static string get_CannotAssignDefaultValueToALocalVariable();
    public static string get_CannotUseOutputOptionInDeclareOrCreateFunction();
    public static string get_BooleanConditionExpected();
    public static string get_RowguidcolDatatypeMismatch();
    public static string get_ComputedColumnsConstraintCheckError();
    public static string get_NameOrAuthorizationKeywordRequired();
    public static string get_InvalidOnClause();
    public static string get_InvalidOptionInCreateFunction();
    public static string get_DbNameIsNotAllowedForCreateAlterFunc();
    public static string get_ConflictingReturnsNullAndCalledOnNullInputOptions();
    public static string get_LastStatementWithinFunctionMustBeReturn();
    public static string get_ReturnStatementInScalarValuedFunctionMustIncludeArg();
    public static string get_UseReturnStatementWithValueCannotBeUsed();
    public static string get_SelectStatementWithinFunctionCannotReturnData();
    public static string get_TempFunctionNameIsNotAllowed();
    public static string get_ObjectNameIsMissingOrEmpty();
    public static string get_InvalidConstantOutput();
    public static string get_ReadonlyCannotBeUsed();
    public static string get_InvalidOptionInCreateProcedure();
    public static string get_DbNameIsNotAllowedForCreateAlterProc();
    public static string get_DbNameIsNotAllowedForCreateSynonym();
    public static string get_DbNameIsNotAllowedForDropSynonym();
    public static string get_InvalidOptionInCreateTrigger();
    public static string get_InvalidTriggerEventTypes();
    public static string get_ScalePrecisionMismatch();
    public static string get_SelectAssignmentError();
    public static string get_SelectIntoMustBeFirstQuery();
    public static string get_InvalidOptionInCreateView();
    public static string get_DatabaseNameAsPrefixInCreateView();
    public static string get_RowTagOnlyInRawAndPath();
    public static string get_XmlSchemaError();
    public static string get_ElementsError();
    public static string get_Base64Error();
    public static string get_TypeError();
    public static string get_IncludeNullValuesError();
    public static string get_WithoutArrayWrapperError();
    public static string get_CommaOr();
    public static string get_Expecting();
    public static string get_EndOfFile();
    public static string get_Comma();
    public static string get_Period();
    public static string get_PrefixedColumnsNotAllowedInPivot();
    public static string get_PrefixedColumnsNotAllowedInUnpivot();
    public static string get_NumberOfValuesDoesNotMatchTableDef();
    public static string get_SelectListOfInsertHasFewerItems();
    public static string get_SelectListOfInsertHasMoreItems();
    public static string get_InsertIntoIdentityColumnNotAllowed();
    public static string get_NestedDmlMustHaveOutputClause();
    public static string get_SubqueriesNotAllowedInOutput();
    public static string get_AggregateNotAllowedInOutput();
    public static string get_NumberOfColumnsMustBeTheSame();
    public static string get_CollateCannotBeUsedOnUddt();
    public static string get_ApplicationRole();
    public static string get_AsymmetricKey();
    public static string get_BuiltinFunction();
    public static string get_Certificate();
    public static string get_Collation();
    public static string get_Column();
    public static string get_ColumnAlias();
    public static string get_CommonTableExpression();
    public static string get_Credential();
    public static string get_Database();
    public static string get_DatabaseDdlTrigger();
    public static string get_DatabasePermission();
    public static string get_DatabaseRole();
    public static string get_DataType();
    public static string get_Datepart();
    public static string get_DerivedTable();
    public static string get_DmlTableSource();
    public static string get_DmlTrigger();
    public static string get_ExtendedStoredProcedure();
    public static string get_GlobalVariable();
    public static string get_IsJson();
    public static string get_LocalVariable();
    public static string get_Login();
    public static string get_Parameter();
    public static string get_PivotTable();
    public static string get_ScalarValuedFunction();
    public static string get_Schema();
    public static string get_Server();
    public static string get_ServerDdlTrigger();
    public static string get_StoredProcedure();
    public static string get_Synonym();
    public static string get_SystemDataType();
    public static string get_Table();
    public static string get_TableAlias();
    public static string get_TableValuedFunction();
    public static string get_TemporaryTable();
    public static string get_UnpivotTable();
    public static string get_User();
    public static string get_UserDefinedAggregate();
    public static string get_UserDefinedClrType();
    public static string get_UserDefinedDataType();
    public static string get_UserDefinedTableType();
    public static string get_View();
    public static string get_XmlDataTypeMethod();
    public static string get_DeserializationExpectedSingleXmlElement();
    public static string get_DeserializationUnexpectedXmlContent();
    public static string get_InvalidRootTypes();
    public static string get_SqlScriptMustHaveOnlyModuleStatement();
    public static string get_SqlScriptMustHaveOnlyTriggerStatement();
    public static string get_SqlScriptMustHaveOnlyViewStatement();
    public static string UnclosedQuotationMark(string tokenText);
    public static string IncorrectSyntaxNear(string tokenNear);
    public static string IncorrectSyntaxNearKeyword(string keyword);
    public static string IncorrectOptionValue(string identifier, string value);
    public static string IncorrectOptionOrder(string identifier);
    public static string OptionNotRecognized(string identifier);
    public static string OptionSpecifiedMultipleTimes(string optionaName);
    public static string MaximumPrecisionOutOfRange(string number);
    public static string MustBeOnlyStatementInBatch(string statement);
    public static string StatementNotSupportedInIntelliSense(string statement);
    public static string IntegerValueOutOfRange(string value);
    public static string CannotPerformAlterOnObject(string name);
    public static string TypeIsNotSystemType(string name);
    public static string SchemaNotExist(string schemaName);
    public static string ColumnSpecifiedMultipleTimes(string columnName, string identifier);
    public static string InvalidObjectName(string identifier);
    public static string TooManyArguments(string procName);
    public static string InsufficientArguments(string procName);
    public static string ColumnPrefixMismatch(string prefixName);
    public static string VariableNameNotUnique(string variableName);
    public static string ObjectNotExistOrIsInvalid(string identifier);
    public static string CannotCreateSparseColumn(string columnName, string tableName);
    public static string CannotCreateDefaultConstraintOnSparseColumn(string columnName, string tableName);
    public static string ColumnIsInvalidForUseAsKeyColumnInIndex(string columnName, string tableName);
    public static string CannotCreateMoreThanOneColumnSetOnTable(string columnName, string tableName);
    public static string CannotCreateSparseColumnSetOnTable(string columnName, string tableName);
    public static string CannotCreateGeneratedAlwaysColumnType(string columnName);
    public static string CannotCreateGeneratedAlwaysColumnNullable(string columnName);
    public static string InvalidBuildModeSqlNullStatement(string statement);
    public static string InvalidBuildModeDataTypeUse(string dataType);
    public static string InvalidExecuteAsOption(string optionName);
    public static string AmbiguousColumnName(string columnName);
    public static string InvalidColumnName(string columnName);
    public static string MultiPartIdentifierBindingError(string identifier);
    public static string InvalidColumnXmlNodeUse(string columnName);
    public static string DatabaseNotExist(string databaseName);
    public static string DatabaseObjectExist(string identifier);
    public static string UnrecognizedOption(string phrase);
    public static string MoreColumns(string identifier);
    public static string FewerColumns(string identifier);
    public static string IsTableValuedFunction(string procName);
    public static string CouldNotLocateDatabase(string dbName);
    public static string CannotFindStoredProcedure(string procName);
    public static string MissingParameters(string procName);
    public static string InvalidParameter(string parameterName, string procName);
    public static string ParameterSuppliedMultipleTimes(string parameterName);
    public static string OutputParameterMismatch(string parameterName);
    public static string MissingParameter(string procedureName, string parameterName);
    public static string InconsistentParameterFormat(int paramNumber);
    public static string MissingColumn(int order, string tableName);
    public static string InvalidUsageOfIndexOption(string option);
    public static string InvalidUsageOfScopedConfiguration(string option);
    public static string UnrecognizedCursorOption(string option);
    public static string InvalidUsageOfCursorOption(string option);
    public static string ConflictingCursorOption(string option1, string option2);
    public static string IndexOrStatisticsExists(string name, string tableName);
    public static string ClusteredIndexExists(string tableName, string existingName);
    public static string CouldNotFindIndex(string indexName, string tableName);
    public static string CannotConvertXmlOrSpatialIndexToRelational(string indexName);
    public static string CannotCreateIndexOnViewNotSchemaBound(string viewName);
    public static string CannotCreateIndexOnViewDoesNotHaveUniqueClusteredIndex(string viewName);
    public static string CannotCreateNonuniqueClusteredIndexOnView(string viewName);
    public static string InvalidIndexKeyColumnType(string columnName, string tableName);
    public static string InvalidIndexIncludedColumnType(string columnName, string tableName);
    public static string CannotCreateIndexOnViewContainsInvalidColumns(string viewName);
    public static string OnlineOperationCannotBePerformedOnIndexInvalidColumns(string indexName);
    public static string InvalidFillFactorPercentage(string value);
    public static string IncorrectWhereClauseForFilteredIndex(string name, string table);
    public static string ParamVarHasInvalidDataType(string name);
    public static string ColumnHasInvalidDataType(string name);
    public static string OutOfRangeDegreeOfParallelism(string degreeOfParallelism);
    public static string ParameterCannotBeReadOnly(string paramName);
    public static string TableValuedParameterMustBeReadOnly(string paramName);
    public static string OperandTypeClash(string type1, string type2);
    public static string ScalarVariableRequired(string scalarvariableName);
    public static string ColumnNameNotUnique(string columnName, string tableName);
    public static string MultiplePrimaryKey(string tableName);
    public static string CorrelationNameNotUnique(string correlationName);
    public static string InvalidCorrelationNameWithTable(string correlationName, string tableName);
    public static string InvalidCorrelationNamesInFrom(string identifier1, string identifier2);
    public static string ParametersNotSuppliedForFunction(string name);
    public static string TableIsAmbiguous(string name);
    public static string ParametersSuppliedForNonFunction(string name);
    public static string FunctionCannotBeUsedToMatchTarget(string name);
    public static string ObjectCannotBeModified(string name);
    public static string TableVariableRequired(string tableVariableName);
    public static string OperatorNotSupported(string operatorName);
    public static string DataTypeMissing(string columnName);
    public static string ColumnConstraintNotUnique(string constraintName, string columnName, string tableName);
    public static string PrimaryKeyNotUnique(string columnName, string tableName);
    public static string CannotHaveDefaultsOnIdentity(string tableName, string columnName);
    public static string CannotCreateIdentityOnNullable(string columnName, string tableName);
    public static string CannotDefinePrimaryKeyOnNullable(string columnName);
    public static string ColumnHasUserDefinedTableType(string columnName);
    public static string InvalidSeed(string columnName);
    public static string InvalidIncrement(string columnName);
    public static string IdentityColumnInvalidType(string columnName);
    public static string ColumnNameNotInTargetTable(string columnName);
    public static string ForeignKeyReferencesInvalidTable(string fkName, string tableName);
    public static string ForeignKeyNumberOfRefColumnsDiffers(string tableName);
    public static string NoPrimaryKeysInReferencedTable(string fkName, string tableName);
    public static string ForeignKeyReferencesImplicitlyTableWithoutPrimaryKey(string fkName, string tableName);
    public static string ColumnIsNotSameTypeAsRefColumn(string fkName, string tableName, string columnName, string refTableName, string refColumName);
    public static string ForeignKeyInvalidReferencingColumn(string fkName, string tableName, string columnName);
    public static string ForeignKeyInvalidReferencedColumn(string fkName, string tableName, string columnName);
    public static string InvalidUseOfSideEffectingOperatorWithinFunction(string name);
    public static string InvalidProcedureNumberRange(int procNumber);
    public static string InvalidTriggerEventType(string eventName);
    public static string InvalidTriggerEventTypeOnDatabase(string eventName);
    public static string DuplicateTriggerEventType(string eventName);
    public static string DuplicateTriggerActionType(string actionName);
    public static string InvalidTriggerSchema(string triggerName);
    public static string TriggerDoesNotBelongToTarget(string triggerName, string targetName);
    public static string RequiredInsteadOfTriggerOnView(string triggerName, string targetName);
    public static string DuplicateInsteadOfTrigger(string triggerName, string targetName, string actionName);
    public static string CannotCreateTriggerOnViewWithCheckOption(string triggerName, string targetName);
    public static string CannotCreateInsteadOfTriggerOnTableWithCascade(string triggerName, string targetName, string actionName);
    public static string InvalidLengthOrPrecision(int length);
    public static string InvalidScale(int scale);
    public static string MaximumSizeError(int size, string typeName, int maximum);
    public static string MaximumSizeErrorForAnyType(int size, string typeName, int maximum);
    public static string TypeNameMaxPrefixError(string name, int maximum);
    public static string XmlSchemaCollectionMaxPrefixError(string name);
    public static string InvalidTableHint(string tabelHint);
    public static string TableConstraintHasNoColumnList(string tableName);
    public static string DuplicateColumnNamesInIndex(string columnName);
    public static string NotRecognizedFunctionName(string functionName);
    public static string CannotFindFunctionOrAggregate(string columnName, string aggregateName);
    public static string RemoteFunctionRefIsNotAllowed(string functionName, string columnName);
    public static string AnonimousColumn(string name);
    public static string InvalidGroupByOption(string name);
    public static string CannotDropObject(string objectName, string objectType);
    public static string CannotUseDrop(string incorrectStmt, string correctStmt, string objectName, string objectType);
    public static string CouldNotLocateEntryInSysdatabases(string name);
    public static string FunctionRequiresNumberOfArguments(string functionName, int numberOfArguments);
    public static string FunctionRequiresOneArgument(string functionName);
    public static string FunctionRequiresRangeOfAruments(string functionName, int rangeStart, int rangeEnd);
    public static string FunctionRequiresZeroArguments(string functionName);
    public static string FunctionRequiresAtLeastNumberOfArguments(string functionName, int numberOfArguments);
    public static string FunctionRequiresAtLeastOneArgument(string functionName);
    public static string InvalidParameterOne(string functionName);
    public static string NotRecognizedDatePartOption(string option, string functionName);
    public static string NotRecognizedIsJsonType(string option, string functionName);
    public static string InvalidAggregateFunction(string name);
    public static string DuplicateCteName(string name);
    public static string RecursiveCteHasNoUnionAll(string name);
    public static string NoAnchorMemberForRecursiveQuery(string name);
    public static string RecursiveCteMemberHasMultipleRefs(string name);
    public static string AnchorMemberFoundInRecursiveQuery(string name);
    public static string ColumnNameConflictsInPivot(string columnName);
    public static string ColumnNameConflictsInUnpivot(string columnName);
    public static string ColumnSpecifiedMultipleTimesInUnpivot(string columnName);
    public static string OrderByItemContainsVariable(int position);
    public static string OrderByPositionNumberIsOutOfRange(int position);
    public static string OrderByListHasConstantExpression(int position);
    public static string SetClauseColumnSpecifiedMultipleTimes(string columnName);
    public static string OutputIntoTargetCannotBeViewOrCte(string tableName);
    public static string FunctionNotAllowedInOutput(string name);
    public static string ExplicitValueForIdentityColumn(string name);
    public static string CannotCallMethodsOnType(string typeName);
    public static string UdtMemberIsNotStatic(string memberName, string className, string assemblyName);
    public static string UdtMemberIsStatic(string memberName, string className, string assemblyName);
    public static string UdtPropertyIsNotStatic(string memberName, string className, string assemblyName);
    public static string UdtPropertyIsStatic(string memberName, string className, string assemblyName);
    public static string CouldNotFindPropertyOrField(string memberName, string className, string assemblyName);
    public static string CouldNotFindMethod(string memberName, string className, string assemblyName);
    public static string NotValidFunctionOrProperty(string memberName);
    public static string IncorrectSyntaxToInvokeXmlMethod(string methodName);
    public static string LoginExist(string identifier);
    public static string UserExist(string identifier);
    public static string CouldNotFindCredential(string name);
    public static string CouldNotFindCertificate(string name);
    public static string CouldNotFindAsymmetricKey(string name);
    public static string CouldNotFindLogin(string name);
    public static string UserDefinedTypeExist(string identifier);
    public static string InvalidBaseTypeForAlias(string identifier);
    public static string CannotFindUser(string userName);
    public static string UserGroupOrRoleExists(string roleName);
    public static string RequiredParam(string roleName);
    public static string DuplicateParam(string roleName);
    public static string InvalidCollation(string collationName);
    public static string ExpressionTypeInvalidForCollate(string dataType);
    public static string DeserializationInvalidXmlElement1(string elementName);
    public static string DeserializationInvalidXmlElement2(string elementName, string expectedName);
    public static string DeserializationMissingXmlElement(string elementName);
    public static string DeserializationMissingXmlAttribute(string attributeName);
    public static string DeserializationInvalidObjectType(string typeName, string expectedName);
    public static string DeserializationObjectMustHaveOneParent(string objKey, string parentKey1, string parentKey2);
    public static string DeserializationUnresolvedExternalReference(string objKey);
    public static string InvalidOdbcDatetimeExtensionOption(string option);
}
