public class Microsoft.SqlServer.Management.XEvent.Action : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public Event Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcPropertyAttribute("16")]
public Guid ModuleID { get; private set; }
    [SfcPropertyAttribute("16")]
public string PackageName { get; }
    [SfcPropertyAttribute]
public string Description { get; private set; }
    [SfcIgnoreAttribute]
public SfcObjectState State { get; }
    public Action(Event parent, string name);
    public Action(Event parent, ActionInfo actionInfo);
    public void SetActionInfo(ActionInfo actionInfo);
    public Event get_Parent();
    public void set_Parent(Event value);
    private void SetPackage(string packageName);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public string get_Name();
    public void set_Name(string value);
    public Guid get_ModuleID();
    private void set_ModuleID(Guid value);
    public string get_PackageName();
    public string get_Description();
    private void set_Description(string value);
    public string GetScriptCreate();
    public SfcObjectState get_State();
    public static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.ActionCollection : SfcCollatedDictionaryCollection`3<Action, Key, Event> {
    public Action Item { get; }
    internal ActionCollection(Event parent);
    public Action get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    protected virtual bool AddShadow(Action obj);
}
public class Microsoft.SqlServer.Management.XEvent.ActionInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public Package Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("16")]
public string Description { get; }
    [SfcPropertyAttribute("16")]
public int Capabilities { get; }
    [SfcPropertyAttribute("16")]
public string CapabilitiesDesc { get; }
    [SfcPropertyAttribute]
public string TypeName { get; }
    [SfcPropertyAttribute]
public Guid TypePackageID { get; }
    [SfcPropertyAttribute]
public string TypePackageName { get; }
    public Package get_Parent();
    public void set_Parent(Package value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
    public string get_TypeName();
    public Guid get_TypePackageID();
    public string get_TypePackageName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.ActionInfoCollection : SfcCollatedDictionaryCollection`3<ActionInfo, Key, Package> {
    public ActionInfo Item { get; }
    internal ActionInfoCollection(Package parent);
    public sealed virtual ActionInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal static class Microsoft.SqlServer.Management.XEvent.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
public abstract class Microsoft.SqlServer.Management.XEvent.BaseXEStore : SfcInstance {
    private static string NameSpace;
    private static string DomainName;
    private static string typeName;
    private static Guid package0Guid;
    private ISfcConnection originalConnection;
    private ISfcConnection connection;
    private SfcConnectionContext context;
    private IComparer`1<string> comparer;
    private SessionCollection sessions;
    private PackageCollection packages;
    private IXEStoreProvider storeProvider;
    private SfcObjectQuery objectQuery;
    private ISfcExecutionEngine execEngine;
    private ObjectMetadata objectInfoSet;
    public string Name { get; protected set; }
    public string ServerName { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.Session")]
public SessionCollection Sessions { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.XEvent.Package")]
public PackageCollection Packages { get; }
    [SfcPropertyAttribute]
public int RunningSessionCount { get; }
    [SfcIgnoreAttribute]
public Package Package0Package { get; }
    [SfcIgnoreAttribute]
public TargetInfo HistogramTargetInfo { get; }
    [SfcIgnoreAttribute]
public TargetInfo EventFileTargetInfo { get; }
    [SfcIgnoreAttribute]
public TargetInfo EtwClassicSyncTargetInfo { get; }
    [SfcIgnoreAttribute]
public TargetInfo PairMatchingTargetInfo { get; }
    [SfcIgnoreAttribute]
public TargetInfo RingBufferTargetInfo { get; }
    [SfcIgnoreAttribute]
public TargetInfo EventCounterTargetInfo { get; }
    private SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.ConnectionContext { get; }
    [SfcIgnoreAttribute]
public SfcKey IdentityKey { get; }
    public ISfcConnection OriginalConnection { get; protected set; }
    [SfcIgnoreAttribute]
public ISfcConnection SfcConnection { get; }
    [SfcIgnoreAttribute]
internal SfcObjectQuery SfcObjectQuery { get; }
    protected ISfcExecutionEngine ExecutionEngine { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainName { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainInstanceName { get; }
    protected IXEStoreProvider StoreProvider { get; }
    public ObjectMetadata ObjectInfoSet { get; }
    public BaseXEStore(ISfcConnection connection);
    private static BaseXEStore();
    protected abstract virtual IXEStoreProvider GetStoreProvider();
    protected abstract virtual ISessionProvider GetSessionProivder(Session session);
    protected abstract virtual ITargetProvider GetTargetProvider(Target target);
    protected abstract virtual IEventProvider GetEventProvider(Event xevent);
    internal ISessionProvider GetSessionProviderInternal(Session session);
    internal ITargetProvider GetTargetProviderInternal(Target target);
    internal IEventProvider GetEventProviderInternal(Event xevent);
    public virtual string get_Name();
    protected virtual void set_Name(string value);
    public virtual string get_ServerName();
    public SessionCollection get_Sessions();
    public PackageCollection get_Packages();
    public int get_RunningSessionCount();
    public Package get_Package0Package();
    public TargetInfo get_HistogramTargetInfo();
    public TargetInfo get_EventFileTargetInfo();
    public TargetInfo get_EtwClassicSyncTargetInfo();
    public TargetInfo get_PairMatchingTargetInfo();
    public TargetInfo get_RingBufferTargetInfo();
    public TargetInfo get_EventCounterTargetInfo();
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(ISfcConnection connection);
    protected void SetConnection(ISfcConnection connection);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(SfcObjectQueryMode mode);
    private sealed virtual override SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.get_ConnectionContext();
    public virtual string ToString();
    public virtual SfcKey get_IdentityKey();
    protected virtual SfcKey CreateIdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public IComparer`1<string> GetComparer();
    public ISfcConnection get_OriginalConnection();
    protected void set_OriginalConnection(ISfcConnection value);
    protected void InitConnection();
    public ISfcConnection get_SfcConnection();
    internal SfcObjectQuery get_SfcObjectQuery();
    private sealed virtual override Type Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetType(string typeName);
    private sealed virtual override SfcKey Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetKey(IUrnFragment urnFragment);
    protected ISfcExecutionEngine get_ExecutionEngine();
    private sealed virtual override ISfcExecutionEngine Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetExecutionEngine();
    private sealed virtual override SfcTypeMetadata Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetTypeMetadata(string typeName);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.UseSfcStateManagement();
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainName();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainInstanceName();
    public virtual string FormatFieldValue(string fieldValue, Guid typePackageID, string typeName);
    public virtual string FormatPredicateExpression(PredExpr predExpr);
    protected IXEStoreProvider get_StoreProvider();
    public ObjectMetadata get_ObjectInfoSet();
    public static void SaveSessionToTemplate(Session session, string fileName, bool overwrite);
    public virtual Session CreateSession(string sessionName);
    public virtual Session CreateSessionFromTemplate(string sessionName, string fileName);
    private static void AppendObjectAttributes(Session session, XmlDocument doc, XmlElement element, Guid moduleID, string packageName, string objFullName);
    private static void AppendParameterAttributes(XmlDocument doc, XmlElement element, string name, object value);
}
internal class Microsoft.SqlServer.Management.XEvent.Constants : object {
    public static string ModuleName;
    private static Constants();
}
public class Microsoft.SqlServer.Management.XEvent.DataEventColumnInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public EventInfo Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
public int ID { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public string TypeName { get; }
    [SfcPropertyAttribute]
public Guid TypePackageID { get; }
    [SfcPropertyAttribute]
public string TypePackageName { get; }
    [SfcPropertyAttribute]
public string Description { get; }
    [SfcPropertyAttribute]
public int Capabilities { get; }
    [SfcPropertyAttribute]
public string CapabilitiesDesc { get; }
    public EventInfo get_Parent();
    public void set_Parent(EventInfo value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public int get_ID();
    public string get_Name();
    public string get_TypeName();
    public Guid get_TypePackageID();
    public string get_TypePackageName();
    public string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.DataEventColumnInfoCollection : SfcCollatedDictionaryCollection`3<DataEventColumnInfo, Key, EventInfo> {
    public DataEventColumnInfo Item { get; }
    internal DataEventColumnInfoCollection(EventInfo parent);
    public DataEventColumnInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.Event : SfcInstance {
    public static string TypeTypeName;
    private IEventProvider eventProvider;
    private EventFieldCollection eventFields;
    private ActionCollection actions;
    private bool isPredicateXmlDirty;
    private PredExpr predicate;
    private bool isPredicateDirty;
    private IEventProvider ProviderImpl { get; }
    [SfcObjectAttribute("1", "0")]
public Session Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.EventField")]
public EventFieldCollection EventFields { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.Action")]
public ActionCollection Actions { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcPropertyAttribute("16")]
public int ID { get; }
    [SfcPropertyAttribute("16")]
public Guid ModuleID { get; private set; }
    [SfcPropertyAttribute("16")]
public string PackageName { get; }
    [SfcPropertyAttribute("16")]
public string PredicateExpression { get; public set; }
    [SfcPropertyAttribute("512")]
internal string PredicateXml { get; }
    [SfcPropertyAttribute]
public string Description { get; private set; }
    public PredExpr Predicate { get; public set; }
    public string ScriptName { get; }
    [SfcIgnoreAttribute]
public SfcObjectState State { get; }
    public Event(Session parent, string name);
    public Event(Session parent, EventInfo eventInfo);
    private IEventProvider get_ProviderImpl();
    public void SetEventInfo(EventInfo eventInfo);
    public Session get_Parent();
    public void set_Parent(Session value);
    private void SetPackage(string packageName);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public EventFieldCollection get_EventFields();
    public ActionCollection get_Actions();
    public static SfcObjectFactory GetObjectFactory();
    public string get_Name();
    public void set_Name(string value);
    public int get_ID();
    public Guid get_ModuleID();
    private void set_ModuleID(Guid value);
    public string get_PackageName();
    public string get_PredicateExpression();
    public void set_PredicateExpression(string value);
    internal string get_PredicateXml();
    public string get_Description();
    private void set_Description(string value);
    public PredExpr get_Predicate();
    public void set_Predicate(PredExpr value);
    protected virtual void PostCreate(object executionResult);
    protected virtual void PostAlter(object executionResult);
    private void ResetPredicate();
    private void CheckNullObject(string objectName, object obj);
    public Action AddAction(ActionInfo actionInfo);
    public Action AddAction(string actionName);
    public bool RemoveAction(Action action);
    public string get_ScriptName();
    private sealed virtual override string Microsoft.SqlServer.Management.XEvent.ISessionObject.GetCreateScript();
    public bool HasCustomizableField();
    private sealed virtual override string Microsoft.SqlServer.Management.XEvent.ISessionObject.GetDropScript();
    private sealed virtual override bool Microsoft.SqlServer.Management.XEvent.ISessionObject.IsDirty();
    public sealed virtual SfcObjectState get_State();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDiscoverObject.Discover(ISfcDependencyDiscoveryObjectSink sink);
    public static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.EventCollection : SfcCollatedDictionaryCollection`3<Event, Key, Session> {
    public Event Item { get; }
    internal EventCollection(Session parent);
    public Event get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    public void AppendAlterScripts(StringBuilder addScript, StringBuilder dropScript);
}
public class Microsoft.SqlServer.Management.XEvent.EventColumnInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public EventInfo Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
public int ID { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public string TypeName { get; }
    [SfcPropertyAttribute]
public Guid TypePackageID { get; }
    [SfcPropertyAttribute]
public string TypePackageName { get; }
    [SfcPropertyAttribute]
public string Value { get; }
    [SfcPropertyAttribute]
public string Description { get; }
    [SfcPropertyAttribute]
public int Capabilities { get; }
    [SfcPropertyAttribute]
public string CapabilitiesDesc { get; }
    public EventInfo get_Parent();
    public void set_Parent(EventInfo value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public int get_ID();
    public string get_Name();
    public string get_TypeName();
    public Guid get_TypePackageID();
    public string get_TypePackageName();
    public string get_Value();
    public string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.EventColumnInfoCollection : SfcCollatedDictionaryCollection`3<EventColumnInfo, Key, EventInfo> {
    public EventColumnInfo Item { get; }
    internal EventColumnInfoCollection(EventInfo parent);
    public EventColumnInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.EventField : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public Event Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
public int ID { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcPropertyAttribute]
public object Value { get; public set; }
    [SfcPropertyAttribute]
public string Description { get; private set; }
    [SfcIgnoreAttribute]
public SfcObjectState State { get; }
    public EventField(Event parent, EventColumnInfo eventColumnInfo);
    public Event get_Parent();
    public void set_Parent(Event value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public int get_ID();
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
    public string get_Description();
    private void set_Description(string value);
    public SfcObjectState get_State();
    public static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.EventFieldCollection : SfcCollatedDictionaryCollection`3<EventField, Key, Event> {
    public EventField Item { get; }
    internal EventFieldCollection(Event parent);
    public EventField get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.EventInfo : SfcInstance {
    public static string TypeTypeName;
    private EventColumnInfoCollection eventColumns;
    private DataEventColumnInfoCollection dataEventColumns;
    private ReadOnlyEventColumnInfoCollection readOnlyEventColumns;
    [SfcObjectAttribute("1", "0")]
public Package Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.EventColumnInfo")]
public EventColumnInfoCollection EventColumnInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.DataEventColumnInfo")]
public DataEventColumnInfoCollection DataEventColumnInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.ReadOnlyEventColumnInfo")]
public ReadOnlyEventColumnInfoCollection ReadOnlyEventColumnInfoSet { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("16")]
public string Description { get; }
    [SfcPropertyAttribute("16")]
public int Capabilities { get; }
    [SfcPropertyAttribute("16")]
public string CapabilitiesDesc { get; }
    public Package get_Parent();
    public void set_Parent(Package value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public EventColumnInfoCollection get_EventColumnInfoSet();
    public DataEventColumnInfoCollection get_DataEventColumnInfoSet();
    public ReadOnlyEventColumnInfoCollection get_ReadOnlyEventColumnInfoSet();
    public static SfcObjectFactory GetObjectFactory();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.EventInfoCollection : SfcCollatedDictionaryCollection`3<EventInfo, Key, Package> {
    public EventInfo Item { get; }
    internal EventInfoCollection(Package parent);
    public sealed virtual EventInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.XEvent.ExceptionTemplates : object {
    public static CultureInfo Culture { get; public set; }
    public static string FileAlreadyExists { get; }
    public static string FileNotExist { get; }
    public static string ChangeNameForExistingSession { get; }
    public static string NewSessionMustContainEvent { get; }
    public static string ParentNull { get; }
    public static string NameNullEmpty { get; }
    public static string CannotSetNameForExistingObject { get; }
    public static string Expression2NotNull { get; }
    public static string InvalidProperty { get; }
    public static string CannotAddActionToExistingEvent { get; }
    public static string CannotChangeFieldForExistingEvent { get; }
    public static string CannotChangeFieldForExistingTarget { get; }
    public static string CannotSetEventInfoForExistingEvent { get; }
    public static string CannotSetTargetInfoForExistingTarget { get; }
    public static string CannotSetActionInfoForExistingAction { get; }
    public static string SaveTemplateForExistingSession { get; }
    public static string UnknownType { get; }
    public static string AlterValidationFailure { get; }
    public static string CannotReadTargetData { get; }
    public static string InvalidConnectionType { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_FileAlreadyExists();
    public static string get_FileNotExist();
    public static string get_ChangeNameForExistingSession();
    public static string get_NewSessionMustContainEvent();
    public static string get_ParentNull();
    public static string get_NameNullEmpty();
    public static string get_CannotSetNameForExistingObject();
    public static string get_Expression2NotNull();
    public static string get_InvalidProperty();
    public static string get_CannotAddActionToExistingEvent();
    public static string get_CannotChangeFieldForExistingEvent();
    public static string get_CannotChangeFieldForExistingTarget();
    public static string get_CannotSetEventInfoForExistingEvent();
    public static string get_CannotSetTargetInfoForExistingTarget();
    public static string get_CannotSetActionInfoForExistingAction();
    public static string get_SaveTemplateForExistingSession();
    public static string get_UnknownType();
    public static string get_AlterValidationFailure();
    public static string get_CannotReadTargetData();
    public static string get_InvalidConnectionType();
    public static string NoSuchCollection(string name);
    public static string UnsupportedKey(string key);
    public static string UnsupportedConnectionType(string type);
    public static string SqlExecutionFailure(string sql);
    public static string ChangePropertyForExistingEvent(string propertyName);
    public static string InvalidParameter(string param);
    public static string PackageNotExist(string name);
    public static string ObjectNotExist(string name);
    public static string PackageNameNotUnique(string name);
    public static string ObjectNameNotUnique(string name);
    public static string NoBlockingEventNotAllowedInNoEventLossSession(string sessionName, string eventName);
    public static string InvalidState(SfcObjectState current_state, SfcObjectState required_state);
    public static string ActionNameNotUnique(string name);
    public static string InvalidVersion(string version);
}
public interface Microsoft.SqlServer.Management.XEvent.IEventProvider {
    public abstract virtual string GetCreateScript();
    public abstract virtual string GetDropScript();
}
public interface Microsoft.SqlServer.Management.XEvent.ISessionObject {
    public SfcObjectState State { get; }
    public abstract virtual SfcObjectState get_State();
    public abstract virtual string GetCreateScript();
    public abstract virtual string GetDropScript();
    public abstract virtual bool IsDirty();
}
public interface Microsoft.SqlServer.Management.XEvent.ISessionProvider {
    public abstract virtual ISfcScript GetCreateScript();
    public abstract virtual ISfcScript GetAlterScript();
    public abstract virtual ISfcScript GetDropScript();
    public abstract virtual void ValidateAlter();
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
public interface Microsoft.SqlServer.Management.XEvent.ITargetProvider {
    public abstract virtual string GetCreateScript();
    public abstract virtual string GetDropScript();
    public abstract virtual string GetTargetData();
}
public interface Microsoft.SqlServer.Management.XEvent.IXEObjectInfo {
    public string Name { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.SqlServer.Management.XEvent.IXEObjectInfoCollection`1 {
    public T Item { get; }
    public abstract virtual T get_Item(string name);
}
public interface Microsoft.SqlServer.Management.XEvent.IXEStoreProvider {
    public string DomainInstanceName { get; }
    public abstract virtual ISfcExecutionEngine GetExecutionEngine();
    public abstract virtual ISfcConnection GetConnection(SfcObjectQueryMode mode);
    public abstract virtual string get_DomainInstanceName();
    public abstract virtual IComparer`1<string> GetComparer();
}
public class Microsoft.SqlServer.Management.XEvent.MapInfo : SfcInstance {
    public static string TypeTypeName;
    private MapValueInfoCollection m_MapValues;
    [SfcObjectAttribute("1", "0")]
public Package Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.MapValueInfo")]
public MapValueInfoCollection MapValueInfoSet { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("16")]
public string Description { get; }
    [SfcPropertyAttribute("16")]
public int Capabilities { get; }
    [SfcPropertyAttribute("16")]
public string CapabilitiesDesc { get; }
    public Package get_Parent();
    public void set_Parent(Package value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public MapValueInfoCollection get_MapValueInfoSet();
    public static SfcObjectFactory GetObjectFactory();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.MapInfoCollection : SfcCollatedDictionaryCollection`3<MapInfo, Key, Package> {
    public MapInfo Item { get; }
    internal MapInfoCollection(Package parent);
    public sealed virtual MapInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.MapValueInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public MapInfo Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public string Value { get; }
    public MapInfo get_Parent();
    public void set_Parent(MapInfo value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public string get_Name();
    public string get_Value();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.MapValueInfoCollection : SfcCollatedDictionaryCollection`3<MapValueInfo, Key, MapInfo> {
    public MapValueInfo Item { get; }
    internal MapValueInfoCollection(MapInfo parent);
    public MapValueInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal class Microsoft.SqlServer.Management.XEvent.MethodContext : MethodTraceContext {
}
internal class Microsoft.SqlServer.Management.XEvent.MethodTraceContext : object {
    public void TraceParameterIn(Object[] args);
    public MethodContext GetActivityContext(Object[] args);
    public void TraceVerbose(Object[] args);
    public void TraceCatch(Object[] args);
    public void TraceError(Object[] args);
    public void Assert(Object[] args);
    public void TraceCriticalError(Object[] args);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.XEvent.NetCoreHelpers : object {
    public static string UriSchemaHttps;
    public static string UriSchemaHttp;
    private static NetCoreHelpers();
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    public static Assembly LoadAssembly(string assemblyName);
    public static IntPtr ConvertSecureStringToBSTR(SecureString ss);
    [ExtensionAttribute]
public static int StringCompare(string firstString, string secondString, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static string StringToUpper(string str, CultureInfo culture);
    public static CultureInfo GetNewCultureInfo(int lcid);
    public static void ZeroFreeBSTR(IntPtr ps);
}
public class Microsoft.SqlServer.Management.XEvent.Package : SfcInstance {
    public static string TypeTypeName;
    private EventInfoCollection eventInfoSet;
    private ActionInfoCollection actionInfoSet;
    private TargetInfoCollection targetInfoSet;
    private TypeInfoCollection typeInfoSet;
    private MapInfoCollection mapInfoSet;
    private PredSourceInfoCollection predSourceInfoSet;
    private PredCompareInfoCollection predCompareInfoSet;
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.EventInfo")]
public EventInfoCollection EventInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.ActionInfo")]
public ActionInfoCollection ActionInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.TargetInfo")]
public TargetInfoCollection TargetInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.TypeInfo")]
public TypeInfoCollection TypeInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.MapInfo")]
public MapInfoCollection MapInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.PredSourceInfo")]
public PredSourceInfoCollection PredSourceInfoSet { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.PredCompareInfo")]
public PredCompareInfoCollection PredCompareInfoSet { get; }
    [SfcObjectAttribute("1", "0")]
public BaseXEStore Parent { get; public set; }
    [SfcPropertyAttribute("16")]
public Guid ID { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("1")]
public string Name { get; }
    [SfcPropertyAttribute("16")]
public string Description { get; }
    [SfcPropertyAttribute("16")]
public int Capabilities { get; }
    [SfcPropertyAttribute("16")]
public string CapabilitiesDesc { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public Guid ModuleID { get; }
    [SfcPropertyAttribute]
public Byte[] ModuleAddress { get; }
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    internal IXEObjectInfoCollection`1<T> GetChildCollection();
    public EventInfoCollection get_EventInfoSet();
    public ActionInfoCollection get_ActionInfoSet();
    public TargetInfoCollection get_TargetInfoSet();
    public TypeInfoCollection get_TypeInfoSet();
    public MapInfoCollection get_MapInfoSet();
    public PredSourceInfoCollection get_PredSourceInfoSet();
    public PredCompareInfoCollection get_PredCompareInfoSet();
    public static SfcObjectFactory GetObjectFactory();
    public BaseXEStore get_Parent();
    public void set_Parent(BaseXEStore value);
    public Guid get_ID();
    public string get_Name();
    public string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
    public Guid get_ModuleID();
    public Byte[] get_ModuleAddress();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.PackageCollection : SfcCollatedDictionaryCollection`3<Package, Key, BaseXEStore> {
    private static string Pattern;
    public Package Item { get; }
    public Package Item { get; }
    public Package Item { get; }
    internal PackageCollection(BaseXEStore parent);
    public Package get_Item(Guid moduleID, string name);
    public Package get_Item(Guid packageID);
    public Package get_Item(string name);
    public bool Contains(Guid moduleID, string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    internal ICollection`1<Package> GetPackages(string name);
}
public class Microsoft.SqlServer.Management.XEvent.PredCompareExpr : PredExpr {
    private ComparatorType type;
    private PredOperand operand;
    private PredValue value;
    public PredOperand Operand { get; }
    public PredValue Value { get; }
    public ComparatorType Operator { get; }
    public PredCompareExpr(ComparatorType type, PredOperand operand, PredValue value);
    public PredOperand get_Operand();
    public PredValue get_Value();
    public ComparatorType get_Operator();
}
public class Microsoft.SqlServer.Management.XEvent.PredCompareInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public Package Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("16")]
public string Description { get; }
    [SfcPropertyAttribute]
public string TypeName { get; }
    [SfcPropertyAttribute]
public Guid TypePackageID { get; }
    [SfcPropertyAttribute]
public string TypePackageName { get; }
    public Package get_Parent();
    public void set_Parent(Package value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public string get_TypeName();
    public Guid get_TypePackageID();
    public string get_TypePackageName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.PredCompareInfoCollection : SfcCollatedDictionaryCollection`3<PredCompareInfo, Key, Package> {
    public PredCompareInfo Item { get; }
    internal PredCompareInfoCollection(Package parent);
    public sealed virtual PredCompareInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public abstract class Microsoft.SqlServer.Management.XEvent.PredExpr : Predicate {
    private static BaseXEStore xeStore;
    internal static PredExpr ParsePredicateXml(BaseXEStore store, string predicateXml);
    private static PredExpr RecursiveTraverse(XmlElement element);
    private static PredExpr ParseLeaf(XmlElement leaf);
}
public class Microsoft.SqlServer.Management.XEvent.PredFunctionExpr : PredExpr {
    private PredOperand operand;
    private PredValue opvalue;
    private PredCompareInfo func;
    public PredOperand Operand { get; }
    public PredValue Value { get; }
    public PredCompareInfo Operator { get; }
    public PredFunctionExpr(PredCompareInfo func, PredOperand operand, PredValue value);
    private void CheckNotNull(MethodTraceContext tm, object param, string paramName);
    public PredOperand get_Operand();
    public PredValue get_Value();
    public PredCompareInfo get_Operator();
}
public abstract class Microsoft.SqlServer.Management.XEvent.Predicate : object {
}
public class Microsoft.SqlServer.Management.XEvent.PredLogicalExpr : PredExpr {
    private LogicalOperatorType type;
    private PredExpr leftPredExpr;
    private PredExpr rightPredExpr;
    public PredExpr LeftExpr { get; }
    public PredExpr RightExpr { get; }
    public LogicalOperatorType Operator { get; }
    public PredLogicalExpr(LogicalOperatorType type, PredExpr predExpr1, PredExpr predExpr2);
    public PredExpr get_LeftExpr();
    public PredExpr get_RightExpr();
    public LogicalOperatorType get_Operator();
}
public class Microsoft.SqlServer.Management.XEvent.PredOperand : Predicate {
    internal string name;
    private Guid typePackageID;
    private string typeName;
    internal Package package;
    internal object operandObject;
    public string TypeName { get; }
    public Guid TypePackageId { get; }
    public object OperandObject { get; }
    public PredOperand(DataEventColumnInfo eventColumn);
    public PredOperand(PredSourceInfo sourceInfo);
    public string get_TypeName();
    public Guid get_TypePackageId();
    public object get_OperandObject();
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.XEvent.PredSourceInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public Package Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public string Description { get; }
    [SfcPropertyAttribute]
public string TypeName { get; }
    [SfcPropertyAttribute]
public Guid TypePackageID { get; }
    [SfcPropertyAttribute]
public string TypePackageName { get; }
    public Package get_Parent();
    public void set_Parent(Package value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public string get_TypeName();
    public Guid get_TypePackageID();
    public string get_TypePackageName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.PredSourceInfoCollection : SfcCollatedDictionaryCollection`3<PredSourceInfo, Key, Package> {
    public PredSourceInfo Item { get; }
    internal PredSourceInfoCollection(Package parent);
    public sealed virtual PredSourceInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.PredValue : Predicate {
    private object value;
    public PredValue(object value);
    public virtual string ToString();
}
internal static class Microsoft.SqlServer.Management.XEvent.ProviderConstants : object {
    public static string Create;
    public static string Drop;
    public static string Alter;
}
public class Microsoft.SqlServer.Management.XEvent.ReadOnlyEventColumnInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public EventInfo Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
public int ID { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public string TypeName { get; }
    [SfcPropertyAttribute]
public Guid TypePackageID { get; }
    [SfcPropertyAttribute]
public string TypePackageName { get; }
    [SfcPropertyAttribute]
public string Value { get; }
    [SfcPropertyAttribute]
public string Description { get; }
    [SfcPropertyAttribute]
public int Capabilities { get; }
    [SfcPropertyAttribute]
public string CapabilitiesDesc { get; }
    public EventInfo get_Parent();
    public void set_Parent(EventInfo value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public int get_ID();
    public string get_Name();
    public string get_TypeName();
    public Guid get_TypePackageID();
    public string get_TypePackageName();
    public string get_Value();
    public string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.ReadOnlyEventColumnInfoCollection : SfcCollatedDictionaryCollection`3<ReadOnlyEventColumnInfo, Key, EventInfo> {
    public ReadOnlyEventColumnInfo Item { get; }
    internal ReadOnlyEventColumnInfoCollection(EventInfo parent);
    public ReadOnlyEventColumnInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal class Microsoft.SqlServer.Management.XEvent.ServerEventProvider : object {
    private Event xevent;
    public ServerEventProvider(Event parent);
    public sealed virtual string GetCreateScript();
    public sealed virtual string GetDropScript();
}
internal class Microsoft.SqlServer.Management.XEvent.ServerSessionProvider : SessionProviderBase {
    public ServerSessionProvider(Session session);
}
internal class Microsoft.SqlServer.Management.XEvent.ServerTargetProvider : object {
    private Target target;
    private ServerConnection ServerConnection { get; }
    public ServerTargetProvider(Target parent);
    public sealed virtual string GetCreateScript();
    public sealed virtual string GetDropScript();
    public sealed virtual string GetTargetData();
    private ServerConnection get_ServerConnection();
}
internal class Microsoft.SqlServer.Management.XEvent.ServerXEStoreProvider : object {
    private BaseXEStore store;
    private ServerConnection serverConnection;
    public string DomainInstanceName { get; }
    private ServerConnection ServerConnection { get; }
    public ServerXEStoreProvider(BaseXEStore store);
    public sealed virtual ISfcExecutionEngine GetExecutionEngine();
    public sealed virtual ISfcConnection GetConnection(SfcObjectQueryMode mode);
    public sealed virtual string get_DomainInstanceName();
    public sealed virtual IComparer`1<string> GetComparer();
    private ServerConnection get_ServerConnection();
}
public class Microsoft.SqlServer.Management.XEvent.Session : SfcInstance {
    public static string MaxMemoryProperty;
    public static string EventRetentionModeProperty;
    public static string MaxDispatchLatencyProperty;
    public static string MaxEventSizeProperty;
    public static string MemoryPartitionModeProperty;
    public static string TrackCausalityProperty;
    public static string AutoStartProperty;
    public static string TypeTypeName;
    private ISessionProvider sessionProvider;
    private bool statesInitialized;
    private EventCollection events;
    private TargetCollection targets;
    public static int InfiniteDispatchLatency;
    public static int DefaultDispatchLatency;
    public static int DefaultMaxMemory;
    public static DateTime NotStarted;
    private ISessionProvider ProviderImpl { get; }
    [SfcObjectAttribute("1", "0")]
public BaseXEStore Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.Event")]
public EventCollection Events { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.Target")]
public TargetCollection Targets { get; }
    [SfcPropertyAttribute]
public bool IsRunning { get; private set; }
    [SfcPropertyAttribute]
public EventRetentionModeEnum EventRetentionMode { get; public set; }
    [SfcPropertyAttribute]
public int MaxDispatchLatency { get; public set; }
    [SfcPropertyAttribute]
public int MaxMemory { get; public set; }
    [SfcPropertyAttribute]
public int MaxEventSize { get; public set; }
    [SfcPropertyAttribute]
public MemoryPartitionModeEnum MemoryPartitionMode { get; public set; }
    [SfcPropertyAttribute("16")]
public bool TrackCausality { get; public set; }
    [SfcPropertyAttribute("16")]
public bool AutoStart { get; public set; }
    [SfcPropertyAttribute]
public DateTime StartTime { get; }
    [SfcIgnoreAttribute]
public SfcObjectState State { get; }
    public Session(BaseXEStore parent, string name);
    private static Session();
    private ISessionProvider get_ProviderImpl();
    public BaseXEStore get_Parent();
    public void set_Parent(BaseXEStore value);
    protected virtual void InitializeUIPropertyState();
    protected virtual void UpdateUIPropertyState();
    private void ValidateName(bool throwOnFirst, ValidationState validationState);
    private void Validate(string methodName, bool throwOnFirst, ValidationState validationState);
    public void Validate(string methodName);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
    public sealed virtual void Create();
    public sealed virtual ISfcScript ScriptCreate();
    public sealed virtual void Alter();
    public sealed virtual ISfcScript ScriptAlter();
    public sealed virtual void Drop();
    public sealed virtual ISfcScript ScriptDrop();
    public void Start();
    public void Stop();
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public int get_ID();
    public string get_Name();
    public void set_Name(string value);
    public EventCollection get_Events();
    public TargetCollection get_Targets();
    public bool get_IsRunning();
    private void set_IsRunning(bool value);
    public EventRetentionModeEnum get_EventRetentionMode();
    public void set_EventRetentionMode(EventRetentionModeEnum value);
    public int get_MaxDispatchLatency();
    public void set_MaxDispatchLatency(int value);
    public int get_MaxMemory();
    public void set_MaxMemory(int value);
    public int get_MaxEventSize();
    public void set_MaxEventSize(int value);
    public MemoryPartitionModeEnum get_MemoryPartitionMode();
    public void set_MemoryPartitionMode(MemoryPartitionModeEnum value);
    public bool get_TrackCausality();
    public void set_TrackCausality(bool value);
    public bool get_AutoStart();
    public void set_AutoStart(bool value);
    public DateTime get_StartTime();
    public SfcObjectState get_State();
    public Event AddEvent(EventInfo eventInfo);
    public Event AddEvent(string eventName);
    public bool RemoveEvent(Event evt);
    public Target AddTarget(TargetInfo targetInfo);
    public Target AddTarget(string targetName);
    public bool RemoveTarget(Target target);
    private bool IsDirty();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDiscoverObject.Discover(ISfcDependencyDiscoveryObjectSink sink);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.SessionCollection : SfcCollatedDictionaryCollection`3<Session, Key, BaseXEStore> {
    public Session Item { get; }
    internal SessionCollection(BaseXEStore parent);
    public Session get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public abstract class Microsoft.SqlServer.Management.XEvent.SessionProviderBase : object {
    private static string SessionStart;
    private static string SessionStop;
    private string eventSessionScript;
    private Func`2<string, string> createSessionScript;
    private Session session;
    protected SessionProviderBase(Session session, string eventSessionScript, Func`2<string, string> createSessionScript);
    public sealed virtual ISfcScript GetCreateScript();
    public sealed virtual ISfcScript GetAlterScript();
    public sealed virtual ISfcScript GetDropScript();
    public sealed virtual void ValidateAlter();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    private ISfcScript CreateScript(string createStatment);
    private ISfcScript GetCreateScript(string sessionName);
    private string GetOptionString(bool create);
    private void AppendOptionsAlterScript(StringBuilder sessionAlterScripts);
}
public class Microsoft.SqlServer.Management.XEvent.Target : SfcInstance {
    public static string TypeTypeName;
    private ITargetProvider targetProvider;
    internal string eventModuleID;
    private TargetFieldCollection targetFields;
    private ITargetProvider ProviderImpl { get; }
    [SfcObjectAttribute("1", "0")]
public Session Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.TargetField")]
public TargetFieldCollection TargetFields { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcPropertyAttribute("16")]
public int ID { get; }
    [SfcPropertyAttribute("16")]
public Guid ModuleID { get; private set; }
    [SfcPropertyAttribute("16")]
public string PackageName { get; }
    [SfcPropertyAttribute]
public string Description { get; private set; }
    public string ScriptName { get; }
    [SfcIgnoreAttribute]
public SfcObjectState State { get; }
    public Target(Session parent, string name);
    public Target(Session parent, TargetInfo targetInfo);
    private ITargetProvider get_ProviderImpl();
    public void SetTargetInfo(TargetInfo targetInfo);
    public Session get_Parent();
    public void set_Parent(Session value);
    private void SetPackage(string packageName);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public string GetTargetData();
    public TargetFieldCollection get_TargetFields();
    public static SfcObjectFactory GetObjectFactory();
    public string get_Name();
    public void set_Name(string value);
    public int get_ID();
    public Guid get_ModuleID();
    private void set_ModuleID(Guid value);
    public string get_PackageName();
    public string get_Description();
    private void set_Description(string value);
    public string get_ScriptName();
    private sealed virtual override string Microsoft.SqlServer.Management.XEvent.ISessionObject.GetCreateScript();
    public bool HasCustomizableField();
    private sealed virtual override string Microsoft.SqlServer.Management.XEvent.ISessionObject.GetDropScript();
    private sealed virtual override bool Microsoft.SqlServer.Management.XEvent.ISessionObject.IsDirty();
    public sealed virtual SfcObjectState get_State();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDiscoverObject.Discover(ISfcDependencyDiscoveryObjectSink sink);
    public static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.TargetCollection : SfcCollatedDictionaryCollection`3<Target, Key, Session> {
    public Target Item { get; }
    internal TargetCollection(Session parent);
    public Target get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    public void AppendAlterScripts(StringBuilder addScript, StringBuilder dropScript);
}
public class Microsoft.SqlServer.Management.XEvent.TargetColumnInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public TargetInfo Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("16")]
public int ID { get; }
    [SfcPropertyAttribute("16")]
public string Value { get; }
    [SfcPropertyAttribute("16")]
public string Description { get; }
    [SfcPropertyAttribute]
public string TypeName { get; }
    [SfcPropertyAttribute]
public Guid TypePackageID { get; }
    [SfcPropertyAttribute]
public string TypePackageName { get; }
    [SfcPropertyAttribute]
public int Capabilities { get; }
    [SfcPropertyAttribute]
public string CapabilitiesDesc { get; }
    public TargetInfo get_Parent();
    public void set_Parent(TargetInfo value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public string get_Name();
    public int get_ID();
    public string get_Value();
    public string get_Description();
    public string get_TypeName();
    public Guid get_TypePackageID();
    public string get_TypePackageName();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.TargetColumnInfoCollection : SfcCollatedDictionaryCollection`3<TargetColumnInfo, Key, TargetInfo> {
    public TargetColumnInfo Item { get; }
    internal TargetColumnInfoCollection(TargetInfo parent);
    public TargetColumnInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.TargetField : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public Target Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
public int ID { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcPropertyAttribute]
public object Value { get; public set; }
    [SfcPropertyAttribute("16")]
public string Description { get; private set; }
    [SfcIgnoreAttribute]
public SfcObjectState State { get; }
    public TargetField(Target parent, TargetColumnInfo targetColumnInfo);
    public Target get_Parent();
    public void set_Parent(Target value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public int get_ID();
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
    public string get_Description();
    private void set_Description(string value);
    public SfcObjectState get_State();
    public static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.TargetFieldCollection : SfcCollatedDictionaryCollection`3<TargetField, Key, Target> {
    public TargetField Item { get; }
    internal TargetFieldCollection(Target parent);
    public TargetField get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.TargetInfo : SfcInstance {
    public static string TypeTypeName;
    private TargetColumnInfoCollection columnCollection;
    [SfcObjectAttribute("1", "0")]
public Package Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public string Description { get; }
    [SfcPropertyAttribute]
public int Capabilities { get; }
    [SfcPropertyAttribute]
public string CapabilitiesDesc { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.XEvent.TargetColumnInfo")]
public TargetColumnInfoCollection TargetColumnInfoSet { get; }
    public Package get_Parent();
    public void set_Parent(Package value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
    public TargetColumnInfoCollection get_TargetColumnInfoSet();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.TargetInfoCollection : SfcCollatedDictionaryCollection`3<TargetInfo, Key, Package> {
    public TargetInfo Item { get; }
    internal TargetInfoCollection(Package parent);
    public sealed virtual TargetInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal class Microsoft.SqlServer.Management.XEvent.TraceContext : object {
    public static TraceContext GetTraceContext(string name, string component);
    public void Assert(bool assertion, string message, Object[] args);
    public void TraceCriticalError(Object[] args);
    public void TraceMethodEnter(Object[] args);
    public void TraceMethodExit(Object[] args);
    public void TraceParameterIn(Object[] args);
    public MethodContext GetMethodContext(Object[] args);
    public MethodContext GetActivityContext(Object[] args);
    public void TraceVerbose(Object[] args);
    public void TraceCatch(Object[] args);
    public void TraceError(Object[] args);
}
internal static class Microsoft.SqlServer.Management.XEvent.TraceHelper : object {
    private static string ComponentName;
    private static TraceContext traceContext;
    public static TraceContext TraceContext { get; }
    private static TraceHelper();
    public static TraceContext get_TraceContext();
}
public class Microsoft.SqlServer.Management.XEvent.TypeInfo : SfcInstance {
    public static string TypeTypeName;
    [SfcObjectAttribute("1", "0")]
public Package Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public string Description { get; }
    [SfcPropertyAttribute]
public int Size { get; }
    [SfcPropertyAttribute]
public int Capabilities { get; }
    [SfcPropertyAttribute]
public string CapabilitiesDesc { get; }
    public Package get_Parent();
    public void set_Parent(Package value);
    private void SetName(string name);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public static SfcObjectFactory GetObjectFactory();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public int get_Size();
    public int get_Capabilities();
    public string get_CapabilitiesDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.XEvent.TypeInfoCollection : SfcCollatedDictionaryCollection`3<TypeInfo, Key, Package> {
    public TypeInfo Item { get; }
    internal TypeInfoCollection(Package parent);
    public sealed virtual TypeInfo get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.XEvent.XEStore : BaseXEStore {
    public static string TypeTypeName;
    private static string NameSpace;
    private static string DomainName;
    private SfcConnectionContext context;
    [SfcIgnoreAttribute]
public SfcKey IdentityKey { get; }
    private SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.ConnectionContext { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainName { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainInstanceName { get; }
    public XEStore(SqlStoreConnection connection);
    public virtual string ToString();
    protected virtual SfcKey CreateIdentityKey();
    public virtual SfcKey get_IdentityKey();
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(ISfcConnection connection);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(SfcObjectQueryMode mode);
    private sealed virtual override SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.get_ConnectionContext();
    private sealed virtual override Type Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetType(string typeName);
    private sealed virtual override SfcKey Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetKey(IUrnFragment urnFragment);
    private sealed virtual override ISfcExecutionEngine Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetExecutionEngine();
    private sealed virtual override SfcTypeMetadata Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetTypeMetadata(string typeName);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.UseSfcStateManagement();
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainName();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainInstanceName();
    protected virtual IXEStoreProvider GetStoreProvider();
    protected virtual ISessionProvider GetSessionProivder(Session session);
    protected virtual ITargetProvider GetTargetProvider(Target target);
    protected virtual IEventProvider GetEventProvider(Event xevent);
}
public class Microsoft.SqlServer.Management.XEvent.XEUtils : object {
    internal static void AppendAlterScripts(StringBuilder addScript, StringBuilder dropScript, IEnumerable`1<T> coll, Session session);
    public static bool ToBeCreated(SfcObjectState state);
    public static string ConvertToXsdEnumerationValue(EventRetentionModeEnum retentionMode);
    public static string ConvertToXsdEnumerationValue(MemoryPartitionModeEnum partitionMode);
}
public class Microsoft.SqlServer.Management.XEvent.XEventException : SqlServerManagementException {
    private static int INIT_BUFFER_SIZE;
    private static string prodVer;
    protected static string ProdVer { get; }
    public string HelpLink { get; }
    public XEventException(string message);
    public XEventException(string message, Exception innerException);
    protected XEventException(SerializationInfo info, StreamingContext context);
    private static XEventException();
    protected virtual void Init();
    protected static string get_ProdVer();
    protected internal XEventException SetHelpContext(string resource);
    public virtual string get_HelpLink();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.XEvent.XsdResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string xeconfig { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_xeconfig();
}
