internal static class Microsoft.SqlServer.Management.Smo.RegSvrEnum.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
internal class Microsoft.SqlServer.Management.Smo.RegSvrEnum.DataProtection : object {
    public static string ProtectData(string data);
    public static string UnprotectData(string data);
    public static Byte[] ProtectData(Byte[] data);
    public static Byte[] UnprotectData(Byte[] data);
    private static string ProtectData(string data, int flags);
    private static Byte[] UnprotectData(Byte[] data, int dwFlags);
    private static Byte[] ProtectData(Byte[] data, int dwFlags);
}
internal class Microsoft.SqlServer.Management.Smo.RegSvrEnum.EnumRegisteredServer : EnumRegServerBase {
    public virtual EnumResult GetData(EnumResult erParent);
    private void AddRow(string sPath, ServerInstanceRegistrationInfo regInst, DataTable dt);
}
internal abstract class Microsoft.SqlServer.Management.Smo.RegSvrEnum.EnumRegServerBase : EnumObject {
    public ResultType[] ResultTypes { get; }
    protected ParentRegistrationInfo RootServerTypeRegistration { get; }
    public virtual Request RetrieveParentRequest();
    public virtual void PostProcess(EnumResult erChildren);
    public virtual ResultType[] get_ResultTypes();
    protected ArrayList BuildRegistrationInfoList(ServerTypeRegistrationInfo svrTypeReg, string sPath, string sName, Type type);
    protected ParentRegistrationInfo GetRegistrationInfoFromPath(ServerTypeRegistrationInfo svrTypeReg, Urn path);
    protected ParentRegistrationInfo get_RootServerTypeRegistration();
    protected void GetFilterOptions(String& sPath, String& sName);
    protected DataTable GetSchemaTable();
}
internal class Microsoft.SqlServer.Management.Smo.RegSvrEnum.EnumServerGroup : EnumRegServerBase {
    public virtual EnumResult GetData(EnumResult erParent);
    private void AddRow(string sPath, GroupRegistrationInfo gri, DataTable dt);
}
internal class Microsoft.SqlServer.Management.Smo.RegSvrEnum.EnumServerType : EnumRegServerBase {
    public virtual EnumResult GetData(EnumResult erParent);
    private void AddRow(ServerTypeRegistrationInfo svrTypeReg, DataTable dt);
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.GroupRegistrationInfo : ParentRegistrationInfo {
    internal virtual void SaveNodeToXml(XmlWriter writer, bool saveName);
}
public abstract class Microsoft.SqlServer.Management.Smo.RegSvrEnum.ParentRegistrationInfo : RegistrationInfo {
    private RegistrationInfoCollection children;
    public RegistrationInfoCollection Children { get; }
    internal bool HasChildWithName(string name);
    internal string GenerateUniqueName(string oldName);
    internal void RemoveChild(RegistrationInfo reg);
    internal void AddChild(RegistrationInfo reg);
    public RegistrationInfoCollection get_Children();
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegisteredServerException : ApplicationException {
    public RegisteredServerException(string message, Exception previous);
    public RegisteredServerException(string message);
    protected RegisteredServerException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegistrationAddBehavior : Enum {
    public int value__;
    public static RegistrationAddBehavior CreateCopy;
    public static RegistrationAddBehavior Overwrite;
    public static RegistrationAddBehavior Prompt;
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegistrationEventArgs : EventArgs {
    private RegistrationInfo node;
    public RegistrationInfo Node { get; }
    public ParentRegistrationInfo Parent { get; }
    public RegistrationEventArgs(RegistrationInfo node);
    public RegistrationInfo get_Node();
    public ParentRegistrationInfo get_Parent();
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegistrationEventHandler : MulticastDelegate {
    public RegistrationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RegistrationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RegistrationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegistrationInfo : object {
    private string fName;
    private string desc;
    private Guid stype;
    private ParentRegistrationInfo parent;
    public string FriendlyName { get; public set; }
    public string Description { get; public set; }
    public Guid ServerType { get; public set; }
    public ParentRegistrationInfo Parent { get; public set; }
    internal RegistrationInfoCollection Ancestors { get; }
    internal RegistrationInfo(string name, string desc, Guid st);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    public string get_Description();
    public void set_Description(string value);
    public Guid get_ServerType();
    public void set_ServerType(Guid value);
    public ParentRegistrationInfo get_Parent();
    public void set_Parent(ParentRegistrationInfo value);
    internal RegistrationInfoCollection get_Ancestors();
    internal static RegistrationInfo LoadNodeFromXml(XmlReader reader);
    internal abstract virtual void SaveNodeToXml(XmlWriter writer, bool saveName);
    private static ServerTypeRegistrationInfo LoadServerTypeFromXml(XmlReader reader);
    private static GroupRegistrationInfo LoadGroupFromXml(XmlReader reader);
    private static ServerInstanceRegistrationInfo LoadServerFromXml(XmlReader reader);
    public sealed virtual int CompareTo(object obj);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegistrationInfoCollection : object {
    protected object syncObject;
    protected ArrayList entries;
    public RegistrationInfo Item { get; }
    public RegistrationInfo Item { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public RegistrationInfoCollection(RegistrationInfo[] entries);
    internal void Clear();
    internal int Add(RegistrationInfo reg);
    internal void Remove(RegistrationInfo reg);
    public void Sort();
    public int IndexOf(string index);
    public RegistrationInfo get_Item(int index);
    public RegistrationInfo get_Item(string index);
    public bool Contains(string childName);
    public void CopyTo(RegistrationInfo[] array, int index);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual object get_SyncRoot();
    public virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegistrationProvider : object {
    private static RegistrationProviderStore _ProviderStore;
    [CompilerGeneratedAttribute]
private static string <ProviderStoreVersion>k__BackingField;
    private static string providerStoreCredentialVersion;
    public static string FileExtension;
    private static string regSqlServerFileName;
    private static string regReplServerFileName;
    private static RegistrationProvider modreq(System.Runtime.CompilerServices.IsVolatile) singleton;
    private static object syncRoot;
    [CompilerGeneratedAttribute]
private static RegistrationEventHandler AddedNode;
    [CompilerGeneratedAttribute]
private static RegistrationEventHandler RemovedNode;
    [CompilerGeneratedAttribute]
private static RegistrationEventHandler NodeModified;
    private ParentRegistrationInfo root;
    private HybridDictionary serverTypes;
    private bool saveDisabled;
    private static int GroupImageIndex;
    private static int ServerImageIndex;
    unknown static RegistrationProviderStore ProviderStore {public set; }
    public static string ProviderStoreVersion { get; public set; }
    public static string ProviderStoreCredentialVersion { get; public set; }
    private static RegistrationProvider Instance { get; }
    public static bool SaveIsDisabled { get; public set; }
    public static ParentRegistrationInfo RootNode { get; }
    public static object SyncRoot { get; }
    private static RegistrationProvider();
    public static void set_ProviderStore(RegistrationProviderStore value);
    [CompilerGeneratedAttribute]
public static string get_ProviderStoreVersion();
    [CompilerGeneratedAttribute]
public static void set_ProviderStoreVersion(string value);
    public static string get_ProviderStoreCredentialVersion();
    public static void set_ProviderStoreCredentialVersion(string value);
    private static RegistrationProvider get_Instance();
    [CompilerGeneratedAttribute]
public static void add_AddedNode(RegistrationEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_AddedNode(RegistrationEventHandler value);
    [CompilerGeneratedAttribute]
public static void add_RemovedNode(RegistrationEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_RemovedNode(RegistrationEventHandler value);
    [CompilerGeneratedAttribute]
public static void add_NodeModified(RegistrationEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_NodeModified(RegistrationEventHandler value);
    public static void Export(RegistrationInfo reg, string filename, bool includeNames);
    public static RegistrationInfo Import(string fileName);
    public static bool get_SaveIsDisabled();
    public static void set_SaveIsDisabled(bool value);
    private void Save();
    private void Load();
    public static string GetProviderFilePath();
    public static void Refresh();
    public static ParentRegistrationInfo get_RootNode();
    public static bool ServerTypeNodeExists(Guid serverType);
    public static void MarkNodeModified(RegistrationInfo node);
    public static RegistrationInfo AddServerTypeNode(ServerTypeRegistrationInfo node);
    public static RegistrationInfo AddGroupNode(string name, string desc, ParentRegistrationInfo parent, RegistrationAddBehavior behavior);
    public static RegistrationInfo AddNode(RegistrationInfo reg, ParentRegistrationInfo parent, RegistrationAddBehavior behavior);
    public static void RemoveNode(RegistrationInfo reg, ParentRegistrationInfo parent);
    public static bool MoveNode(RegistrationInfo reg, ParentRegistrationInfo newParent, RegistrationAddBehavior behavior);
    public static object get_SyncRoot();
    private static void OnRemovedNode(RegistrationInfo node);
    private static void OnAddedNode(RegistrationInfo node);
    private RegistrationInfo AddServerTypeNodeInternal(ServerTypeRegistrationInfo node);
    private RegistrationInfo AddGroupNodeInternal(string name, string desc, ParentRegistrationInfo parent, RegistrationAddBehavior behavior);
    private RegistrationInfo AddNodeInternal(RegistrationInfo reg, ParentRegistrationInfo parent, RegistrationAddBehavior behavior);
    private void RemoveNodeInternal(RegistrationInfo reg, ParentRegistrationInfo parent);
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.RegSvrConnectionInfo : object {
    public static Guid SqlServerTypeGuid;
    private ParentRegistrationInfo m_RootServerType;
    public ParentRegistrationInfo RootServerType { get; }
    private static RegSvrConnectionInfo();
    public ParentRegistrationInfo get_RootServerType();
    public ParentRegistrationInfo GetRegistrationInfoFromPath(Urn path);
    public RegistrationInfo AddServerTypeNode(ServerTypeRegistrationInfo node);
    public void AddNode(RegistrationInfo reg, ParentRegistrationInfo parent);
    public void Save(RegistrationInfo node);
    public void RemoveNode(RegistrationInfo reg, ParentRegistrationInfo parent);
}
public enum Microsoft.SqlServer.Management.Smo.RegSvrEnum.SavePasswordState : Enum {
    public int value__;
    public static SavePasswordState PasswordLoaded;
    public static SavePasswordState PasswordChecked;
    public static SavePasswordState PasswordUnchecked;
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.ServerInstanceRegistrationInfo : RegistrationInfo {
    private UIConnectionInfo ci;
    public UIConnectionInfo ConnectionInfo { get; public set; }
    public ServerInstanceRegistrationInfo(UIConnectionInfo ci);
    public UIConnectionInfo get_ConnectionInfo();
    public void set_ConnectionInfo(UIConnectionInfo value);
    internal virtual void SaveNodeToXml(XmlWriter writer, bool saveName);
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.ServerTypeRegistrationInfo : ParentRegistrationInfo {
    internal virtual void SaveNodeToXml(XmlWriter writer, bool saveName);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.RegSvrEnum.SRError : object {
    public static CultureInfo Culture { get; public set; }
    public static string NotSaveRegisteredServers { get; }
    public static string RecursiveMove { get; }
    public static string ConnectionInfoTypeIncorrect { get; }
    public static string ServerTypeNotSpecified { get; }
    public static string ServerTypeFilterInvalid { get; }
    public static string ServerTypeMustBeGuid { get; }
    public static string InvalidParentResultType { get; }
    public static string ArrayDimensionInvalid { get; }
    public static string ArraySizeError { get; }
    public static string ErrCannotHaveSiblingsWithSameName { get; }
    public static string ErrCannotMoveToSelf { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_NotSaveRegisteredServers();
    public static string get_RecursiveMove();
    public static string get_ConnectionInfoTypeIncorrect();
    public static string get_ServerTypeNotSpecified();
    public static string get_ServerTypeFilterInvalid();
    public static string get_ServerTypeMustBeGuid();
    public static string get_InvalidParentResultType();
    public static string get_ArrayDimensionInvalid();
    public static string get_ArraySizeError();
    public static string get_ErrCannotHaveSiblingsWithSameName();
    public static string get_ErrCannotMoveToSelf();
    public static string PathNotSupported(string path);
    public static string DirectoryNotFound(string directory);
    public static string AccessDenied(string path);
    public static string ErrUnableToExport(string fileName);
    public static string SqlServerTypeNotFound(string typeGuid);
    public static string PathFilterInvalid(string pathNode);
    public static string RegSvrDatafileInvalid(string filePath);
    public static string UniqueRegisteredNamePattern(int copyNum, string oldName);
    public static string CryptProtectDataWin32Error(int err);
    public static string CryptUnprotectDataWin32Error(int err);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.RegSvrEnum.StringExtensionMethods : object {
    [ExtensionAttribute]
public static string SecureStringToString(SecureString secureString);
    [ExtensionAttribute]
public static SecureString StringToSecureString(string unsecureString);
    [ExtensionAttribute]
private static Char[] SecureStringToCharArray(SecureString secureString);
    [ExtensionAttribute]
private static SecureString CharArrayToSecureString(IEnumerable`1<char> charArray);
}
internal class Microsoft.SqlServer.Management.Smo.RegSvrEnum.Tracing : object {
    public static string ConnDialog;
    public static string RegProvider;
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.UIConnectionGroupInfo : List`1<UIConnectionInfo> {
    private string name;
    public string Name { get; public set; }
    public UIConnectionGroupInfo(IEnumerable`1<UIConnectionInfo> collection);
    public UIConnectionGroupInfo(int capacity);
    public UIConnectionGroupInfo(UIConnectionGroupInfo other);
    public UIConnectionGroupInfo(UIConnectionInfo connectionInfo);
    public string get_Name();
    public void set_Name(string value);
    public UIConnectionGroupInfo ShallowCopy();
    public UIConnectionGroupInfo DeepCopy(bool withNewConnectionIds);
}
public class Microsoft.SqlServer.Management.Smo.RegSvrEnum.UIConnectionInfo : object {
    private static string XmlStart;
    private static string XmlServerType;
    private static string XmlServerName;
    private static string XmlDisplayName;
    private static string XmlUserName;
    private static string XmlPassword;
    private static string XmlAuthenticationType;
    private static string XmlAdvancedOptions;
    private static string XmlItemTypeAttribute;
    private NameValueCollection advancedOptions;
    private Guid serverType;
    private int authType;
    private string serverName;
    private string displayName;
    private string userName;
    private string password;
    private SecureString inMemoryPassword;
    private string appName;
    private bool savepwd;
    private ServerVersion serverVer;
    private string otherParams;
    private long id;
    private static long nextId;
    [CompilerGeneratedAttribute]
private IRenewableToken <RenewableToken>k__BackingField;
    public IRenewableToken RenewableToken { get; public set; }
    public bool PersistPassword { get; public set; }
    public Guid ServerType { get; public set; }
    public string ApplicationName { get; public set; }
    public string ServerName { get; public set; }
    public string DisplayName { get; public set; }
    public string ServerNameNoDot { get; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public SecureString InMemoryPassword { get; public set; }
    [ObsoleteAttribute]
public string EncryptedPassword { get; public set; }
    public int AuthenticationType { get; public set; }
    public NameValueCollection AdvancedOptions { get; }
    public ServerVersion ServerVersion { get; public set; }
    public long Id { get; }
    public string OtherParams { get; public set; }
    public UIConnectionInfo(UIConnectionInfo lhs, bool generateNewId);
    public UIConnectionInfo(UIConnectionInfo lhs);
    private static UIConnectionInfo();
    [CompilerGeneratedAttribute]
public IRenewableToken get_RenewableToken();
    [CompilerGeneratedAttribute]
public void set_RenewableToken(IRenewableToken value);
    public bool get_PersistPassword();
    public void set_PersistPassword(bool value);
    public Guid get_ServerType();
    public void set_ServerType(Guid value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_ServerNameNoDot();
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public SecureString get_InMemoryPassword();
    public void set_InMemoryPassword(SecureString value);
    public string get_EncryptedPassword();
    public void set_EncryptedPassword(string value);
    public int get_AuthenticationType();
    public void set_AuthenticationType(int value);
    public NameValueCollection get_AdvancedOptions();
    public ServerVersion get_ServerVersion();
    public void set_ServerVersion(ServerVersion value);
    public long get_Id();
    public string get_OtherParams();
    public void set_OtherParams(string value);
    public void SaveToStream(XmlWriter writer, bool saveName);
    public static UIConnectionInfo LoadFromStream(XmlReader reader);
    public UIConnectionInfo Copy();
    private static long NewId();
    public sealed virtual int CompareTo(UIConnectionInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UIConnectionInfo infoA, UIConnectionInfo infoB);
    public static bool op_Equality(UIConnectionInfo infoA, object infoB);
    public static bool op_Equality(object infoA, UIConnectionInfo infoB);
    public static bool op_Inequality(UIConnectionInfo infoA, UIConnectionInfo infoB);
    public static bool op_Inequality(UIConnectionInfo infoA, object infoB);
    public static bool op_Inequality(object infoA, UIConnectionInfo infoB);
}
internal class Microsoft.SqlServer.Management.Smo.RegSvrEnum.Utils : object {
    private static string yukonSavePathSuffixFormat;
    public static string GetYukonSettingsDirName(string version);
    public static void EnsureSettingsDirExists(string version);
}
