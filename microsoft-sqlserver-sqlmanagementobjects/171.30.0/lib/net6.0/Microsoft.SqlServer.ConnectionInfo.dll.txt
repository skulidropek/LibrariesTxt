internal static class Microsoft.SqlServer.Management.Common.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
public enum Microsoft.SqlServer.Management.Common.AutoDisconnectMode : Enum {
    public int value__;
    public static AutoDisconnectMode DisconnectIfPooled;
    public static AutoDisconnectMode NoAutoDisconnect;
}
internal abstract class Microsoft.SqlServer.Management.Common.CacheItem`1 : object {
    private object result;
    private bool hasResult;
    private int executionCount;
    public K Key { get; }
    public object Result { get; public set; }
    public int ExecutionCount { get; public set; }
    public abstract virtual K get_Key();
    public object get_Result();
    public void set_Result(object value);
    public bool HasResult();
    public void ClearResult();
    public int get_ExecutionCount();
    public void set_ExecutionCount(int value);
}
public class Microsoft.SqlServer.Management.Common.CapturedSql : object {
    private StringCollection m_CapturedSql;
    public StringCollection Text { get; }
    public StringCollection get_Text();
    public void Add(string sqlStatement);
    public void Clear();
}
public class Microsoft.SqlServer.Management.Common.ChangePasswordFailureException : ConnectionException {
    public ChangePasswordFailureException(string message);
    public ChangePasswordFailureException(string message, Exception innerException);
    private ChangePasswordFailureException(SerializationInfo si, StreamingContext sc);
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Common.CommonDisplayCategoryKeyAttribute : Attribute {
    private string key;
    private static string postfix;
    private static string delim;
    public string Key { get; }
    public CommonDisplayCategoryKeyAttribute(string key);
    private static CommonDisplayCategoryKeyAttribute();
    public sealed virtual string get_Key();
    public sealed virtual string GetDefaultKey(PropertyInfo property);
    public sealed virtual string GetDefaultKey(Type type);
    public sealed virtual string GetDefaultKey(FieldInfo field);
}
[AttributeUsageAttribute("1156")]
public class Microsoft.SqlServer.Management.Common.CommonDisplayDescriptionKeyAttribute : Attribute {
    private string key;
    private static string postfix;
    private static string delim;
    public string Key { get; }
    public CommonDisplayDescriptionKeyAttribute(string key);
    private static CommonDisplayDescriptionKeyAttribute();
    public sealed virtual string get_Key();
    public sealed virtual string GetDefaultKey(PropertyInfo property);
    public sealed virtual string GetDefaultKey(Type type);
    public sealed virtual string GetDefaultKey(FieldInfo field);
}
internal static class Microsoft.SqlServer.Management.Common.CommonDisplayKeyHelper : object {
    private static CommonDisplayNameKeyAttribute displayNameKey;
    private static CommonDisplayDescriptionKeyAttribute displayDiscKey;
    private static CommonDisplayCategoryKeyAttribute displayCatKey;
    private static CommonDisplayKeyHelper();
    private static ICommonDisplayKey GetDisplayKey(Type keyAttribute);
    public static string GetValueFromCustomAttribute(FieldInfo field, Type keyAttribute, ResourceManager resourceManager, bool isDefault);
    public static string GetValueFromCustomAttribute(PropertyInfo property, Type keyAttribute, ResourceManager resourceManager, bool isDefault);
    public static string GetValueFromCustomAttribute(Type type, Type keyAttribute, ResourceManager resourceManager, bool isDefault);
    private static string GetDisplayValue(string key, ResourceManager resourceManager);
    private static string GetCustomDisplayValue(Object[] customAttributes, ResourceManager resourceManager);
    public static string ConvertNullToEmptyString(string value);
    public static string ConstructDefaultKey(string postfix, string delim, PropertyInfo property);
    public static string ConstructDefaultKey(string postfix, string delim, Type type);
    public static string ConstructDefaultKey(string postfix, string delim, FieldInfo field);
}
[AttributeUsageAttribute("1412")]
public class Microsoft.SqlServer.Management.Common.CommonDisplayNameKeyAttribute : Attribute {
    private string key;
    private static string postfix;
    private static string delim;
    public string Key { get; }
    public CommonDisplayNameKeyAttribute(string key);
    private static CommonDisplayNameKeyAttribute();
    public sealed virtual string get_Key();
    public sealed virtual string GetDefaultKey(PropertyInfo property);
    public sealed virtual string GetDefaultKey(Type type);
    public sealed virtual string GetDefaultKey(FieldInfo field);
}
public class Microsoft.SqlServer.Management.Common.CommonLocalizableEnumConverter : EnumConverter {
    private SortedList localizedEnumFields;
    internal CommonLocalizableEnumConverter(Type type, ResourceManager manager);
    public CommonLocalizableEnumConverter(Type type);
    private void LoadLocalizedNames(Type type, ResourceManager manager);
    private void LoadLocalizedFieldNames(Type type, ResourceManager manager);
    private void LoadUnlocalizedFieldNames(Type type);
    private string GetEnumDescription(Enum value);
    internal object GetEnumValue(string description);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
[AttributeUsageAttribute("1052")]
public class Microsoft.SqlServer.Management.Common.CommonLocalizedPropertyResourcesAttribute : Attribute {
    private string resourcesName;
    private bool useDefaultKeys;
    public string ResourcesName { get; }
    public bool UseDefaultKeys { get; }
    public CommonLocalizedPropertyResourcesAttribute(string resourcesName);
    public CommonLocalizedPropertyResourcesAttribute(string resourcesName, bool useDefaultKeys);
    public CommonLocalizedPropertyResourcesAttribute(Type resourceType);
    public string get_ResourcesName();
    public bool get_UseDefaultKeys();
}
internal static class Microsoft.SqlServer.Management.Common.CommonUtils : object {
    internal static string MakeSqlBraket(string s);
    internal static string MakeSqlString(string value);
    internal static string EscapeString(string s, string esc);
}
public class Microsoft.SqlServer.Management.Common.ConnectionCannotBeChangedException : ConnectionException {
    public ConnectionCannotBeChangedException(string message);
    public ConnectionCannotBeChangedException(string message, Exception innerException);
    private ConnectionCannotBeChangedException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Management.Common.ConnectionEnumsHelpers : object {
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Common.ConnectionEnumsHelpers/<GetSupportedDatabaseEngineEditions>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<DatabaseEngineEdition> GetSupportedDatabaseEngineEditions(DatabaseEngineType engineType);
}
public class Microsoft.SqlServer.Management.Common.ConnectionException : Exception {
    public ConnectionException(string message);
    public ConnectionException(string message, Exception innerException);
    protected ConnectionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Common.ConnectionFailureException : ConnectionException {
    public ConnectionFailureException(string message);
    public ConnectionFailureException(string message, Exception innerException);
    private ConnectionFailureException(SerializationInfo info, StreamingContext context);
}
[ComVisibleAttribute("False")]
public abstract class Microsoft.SqlServer.Management.Common.ConnectionInfoBase : object {
    private ServerVersion m_sv;
    private ServerCaseSensitivity m_scs;
    private ConnectionType m_eServerType;
    private static CultureInfo defaultCulture;
    public ConnectionType ServerType { get; }
    public ServerVersion ServerVersion { get; public set; }
    public ServerCaseSensitivity ServerCaseSensitivity { get; public set; }
    internal static CultureInfo DefaultCulture { get; }
    protected ConnectionInfoBase(ConnectionType serverType);
    protected ConnectionInfoBase(ConnectionInfoBase conn);
    private static ConnectionInfoBase();
    public ConnectionType get_ServerType();
    public ServerVersion get_ServerVersion();
    public void set_ServerVersion(ServerVersion value);
    public ServerCaseSensitivity get_ServerCaseSensitivity();
    public void set_ServerCaseSensitivity(ServerCaseSensitivity value);
    protected abstract virtual void ConnectionParmsChanged();
    public virtual string ToString();
    internal static CultureInfo get_DefaultCulture();
}
public static class Microsoft.SqlServer.Management.Common.ConnectionInfoHelper : object {
    public static void SetTokenOnConnection(SqlConnection conn, string accessToken);
    public static string GetTokenFromSqlConnection(SqlConnection conn);
    public static SqlConnection CreateSqlConnection(SqlConnectionInfo connectionInfo);
    private static void CheckForNull(SqlConnection conn);
}
public abstract class Microsoft.SqlServer.Management.Common.ConnectionManager : ConnectionSettings {
    private SqlConnection m_SqlConnectionObject;
    private object connectionLock;
    private bool m_InUse;
    private int m_LoginFailedClients;
    private ServerMessageEventHandler m_RemoteLoginFailedHandler;
    private SqlInfoMessageEventHandler m_SqlInfoMessageHandler;
    private CapturedSql m_CapturedSQL;
    private AutoDisconnectMode m_AutoDisconnectMode;
    private bool bIsUserConnected;
    private bool isContainedAuthentication;
    private bool m_forceDisconnected;
    private ServerInformation m_serverInformation;
    private ServerVersion m_serverVersionOverride;
    private int lockTimeout;
    private bool containedAuthenticationUpdated;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler ServerMessageInternal;
    private StatementEventHandler statementEventHandler;
    private Version m_productVersionOverride;
    private Nullable`1<DatabaseEngineType> m_databaseEngineTypeOverride;
    private Nullable`1<DatabaseEngineEdition> m_databaseEngineEditionOverride;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler RemoteLoginFailedInternal;
    public bool InUse { get; public set; }
    public int LockTimeout { get; public set; }
    public ServerVersion ServerVersion { get; public set; }
    public Version ProductVersion { get; public set; }
    public DatabaseEngineType DatabaseEngineType { get; public set; }
    public DatabaseEngineEdition DatabaseEngineEdition { get; public set; }
    public string HostPlatform { get; }
    public NetworkProtocol ConnectionProtocol { get; }
    public bool IsContainedAuthentication { get; }
    public SqlConnection SqlConnectionObject { get; }
    public string CurrentDatabase { get; }
    internal bool BlockPoolDisconnect { get; }
    public bool IsOpen { get; }
    public CapturedSql CapturedSql { get; }
    public AutoDisconnectMode AutoDisconnectMode { get; public set; }
    public bool IsForceDisconnected { get; }
    internal ConnectionManager(IRenewableToken token);
    private ConnectionManager(IRenewableToken token, bool removeIntegratedSecurity);
    internal ConnectionManager(SqlConnection sqlConnectionObject, IRenewableToken accessToken);
    internal ConnectionManager(SqlConnectionInfo sci);
    private void InitSqlConnectionObject(bool setConnectionString, bool removeIntegratedSecurity);
    private bool CallerHavePermissionToUseSQLCLR();
    private void InitDefaults();
    internal void CopyConnectionManager(ConnectionManager cm);
    public bool get_InUse();
    public void set_InUse(bool value);
    public int get_LockTimeout();
    public void set_LockTimeout(int value);
    public ServerVersion get_ServerVersion();
    public void set_ServerVersion(ServerVersion value);
    public Version get_ProductVersion();
    public void set_ProductVersion(Version value);
    public DatabaseEngineType get_DatabaseEngineType();
    public void set_DatabaseEngineType(DatabaseEngineType value);
    public DatabaseEngineEdition get_DatabaseEngineEdition();
    public void set_DatabaseEngineEdition(DatabaseEngineEdition value);
    public string get_HostPlatform();
    public NetworkProtocol get_ConnectionProtocol();
    public bool get_IsContainedAuthentication();
    private ServerInformation GetServerInformation();
    private bool IsConnectionOpen(SqlConnection sqlConnection);
    private void CheckIfContainedAuthenticationIsUsed();
    public SqlConnection get_SqlConnectionObject();
    public string get_CurrentDatabase();
    private void InternalConnect();
    private void InternalConnectImpl();
    public void Connect();
    protected object ExecuteTSql(ExecuteTSqlAction action, object execObject, DataSet fillDataSet, bool catchException);
    private bool IsDatabaseValid(SqlConnection sqlConnection, string dbName);
    protected void CheckServerVersion(ServerVersion version);
    public void Disconnect();
    internal void PoolConnect();
    internal void PoolDisconnect();
    internal abstract virtual bool get_BlockPoolDisconnect();
    internal abstract virtual void InitAfterConnect();
    public sealed virtual bool get_IsOpen();
    internal void GenerateStatementExecutedEvent(string query);
    public void add_StateChange(StateChangeEventHandler value);
    public void remove_StateChange(StateChangeEventHandler value);
    public void add_InfoMessage(SqlInfoMessageEventHandler value);
    public void remove_InfoMessage(SqlInfoMessageEventHandler value);
    [CompilerGeneratedAttribute]
private void add_ServerMessageInternal(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_ServerMessageInternal(ServerMessageEventHandler value);
    public void add_ServerMessage(ServerMessageEventHandler value);
    public void remove_ServerMessage(ServerMessageEventHandler value);
    public void add_StatementExecuted(StatementEventHandler value);
    public void remove_StatementExecuted(StatementEventHandler value);
    [CompilerGeneratedAttribute]
private void add_RemoteLoginFailedInternal(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_RemoteLoginFailedInternal(ServerMessageEventHandler value);
    public void add_RemoteLoginFailed(ServerMessageEventHandler value);
    public void remove_RemoteLoginFailed(ServerMessageEventHandler value);
    private void OnRemoteLoginFailedMessage(object sender, ServerMessageEventArgs e);
    private void SerializeInfoMessage(object sender, SqlInfoMessageEventArgs e);
    public CapturedSql get_CapturedSql();
    public AutoDisconnectMode get_AutoDisconnectMode();
    public void set_AutoDisconnectMode(AutoDisconnectMode value);
    public sealed virtual void ForceDisconnected();
    public sealed virtual bool get_IsForceDisconnected();
}
public class Microsoft.SqlServer.Management.Common.ConnectionSettings : object {
    private bool m_BlockUpdates;
    private bool m_ResetConnectionString;
    private string m_ServerInstance;
    private string m_Login;
    private SecureString m_Password;
    private bool m_LoginSecure;
    private string m_ConnectAsUserName;
    private SecureString m_ConnectAsUserPassword;
    private bool m_ConnectAsUser;
    private bool m_NonPooledConnection;
    private bool m_TrustServerCertificate;
    private int m_PooledConnectionLifetime;
    private int m_MinPoolSize;
    private int m_MaxPoolSize;
    private int m_ConnectTimeout;
    private NetworkProtocol m_NetworkProtocol;
    private string m_ApplicationName;
    private string m_WorkstationId;
    private string m_DatabaseName;
    private int m_PacketSize;
    private SecureString m_ConnectionString;
    private bool m_MultipleActiveResultSets;
    private bool shouldEncryptConnection;
    private bool strictEncryption;
    private string hostNameInCertificate;
    private string additionalParameters;
    private AuthenticationMethod m_Authentication;
    private string m_ApplicationIntent;
    [CompilerGeneratedAttribute]
private IRenewableToken <AccessToken>k__BackingField;
    public static int NoConnectionTimeout;
    private static int ConnectionTimeout_Default;
    private static int PooledConnectionLifetime_Default;
    private static int MinPoolSize_Default;
    private static int MaxPoolSize_Default;
    private static NetworkProtocol NetworkProtocol_Default;
    private static int PacketSize_Default;
    private static bool NonPooledConnection_Default;
    private static bool MultipleActiveResultSets_Default;
    public IRenewableToken AccessToken { get; public set; }
    public string ServerInstance { get; public set; }
    internal bool IsLoginInitialized { get; }
    public string Login { get; public set; }
    internal bool IsPasswordInitialized { get; }
    [BrowsableAttribute("False")]
public string Password { get; public set; }
    [BrowsableAttribute("False")]
public SecureString SecurePassword { get; public set; }
    public bool LoginSecure { get; public set; }
    public string ConnectAsUserName { get; public set; }
    public string ConnectAsUserPassword { get; public set; }
    public bool ConnectAsUser { get; public set; }
    public bool NonPooledConnection { get; public set; }
    public int PooledConnectionLifetime { get; public set; }
    public int MinPoolSize { get; public set; }
    public int MaxPoolSize { get; public set; }
    public int ConnectTimeout { get; public set; }
    public AuthenticationMethod Authentication { get; public set; }
    public string ApplicationIntent { get; public set; }
    public bool TrustServerCertificate { get; public set; }
    [BrowsableAttribute("False")]
public string ConnectionString { get; public set; }
    [BrowsableAttribute("False")]
public SecureString SecureConnectionString { get; public set; }
    public NetworkProtocol NetworkProtocol { get; public set; }
    internal bool IsApplicationNameInitialized { get; }
    public string ApplicationName { get; public set; }
    internal bool IsWorkstationIdInitialized { get; }
    public string WorkstationId { get; public set; }
    internal bool IsDatabaseNameInitialized { get; }
    public string DatabaseName { get; public set; }
    public int PacketSize { get; public set; }
    public bool MultipleActiveResultSets { get; public set; }
    public bool AcceptsLogin { get; }
    public bool RequiresLogin { get; }
    public bool EncryptConnection { get; public set; }
    public bool StrictEncryption { get; public set; }
    public string HostNameInCertificate { get; public set; }
    internal string AdditionalParameters { get; }
    internal bool IsReadAccessBlocked { get; }
    internal string InitialCatalog { get; }
    internal bool BlockUpdates { get; internal set; }
    protected bool ResetConnectionString { get; protected set; }
    internal ConnectionSettings(SqlConnectionInfo sci);
    [CompilerGeneratedAttribute]
public IRenewableToken get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(IRenewableToken value);
    private void InitDefaults();
    internal void CopyConnectionSettings(ConnectionSettings cs);
    internal void InitFromSqlConnectionInfo(SqlConnectionInfo sci);
    internal void InitFromSqlConnection(SqlConnection sc);
    public sealed virtual string get_ServerInstance();
    public sealed virtual void set_ServerInstance(string value);
    internal bool get_IsLoginInitialized();
    public string get_Login();
    public void set_Login(string value);
    internal bool get_IsPasswordInitialized();
    public string get_Password();
    public void set_Password(string value);
    public SecureString get_SecurePassword();
    public void set_SecurePassword(SecureString value);
    internal void ForceSetPassword(string value);
    public bool get_LoginSecure();
    public void set_LoginSecure(bool value);
    public string get_ConnectAsUserName();
    public void set_ConnectAsUserName(string value);
    public string get_ConnectAsUserPassword();
    public void set_ConnectAsUserPassword(string value);
    public bool get_ConnectAsUser();
    public void set_ConnectAsUser(bool value);
    public bool get_NonPooledConnection();
    public void set_NonPooledConnection(bool value);
    public int get_PooledConnectionLifetime();
    public void set_PooledConnectionLifetime(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public AuthenticationMethod get_Authentication();
    public void set_Authentication(AuthenticationMethod value);
    public string get_ApplicationIntent();
    public void set_ApplicationIntent(string value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public SecureString get_SecureConnectionString();
    public void set_SecureConnectionString(SecureString value);
    public NetworkProtocol get_NetworkProtocol();
    public void set_NetworkProtocol(NetworkProtocol value);
    internal bool get_IsApplicationNameInitialized();
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    internal bool get_IsWorkstationIdInitialized();
    public string get_WorkstationId();
    public void set_WorkstationId(string value);
    internal bool get_IsDatabaseNameInitialized();
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public bool get_MultipleActiveResultSets();
    public void set_MultipleActiveResultSets(bool value);
    public bool get_AcceptsLogin();
    public bool get_RequiresLogin();
    public bool get_EncryptConnection();
    public void set_EncryptConnection(bool value);
    public bool get_StrictEncryption();
    public void set_StrictEncryption(bool value);
    public string get_HostNameInCertificate();
    public void set_HostNameInCertificate(string value);
    internal string get_AdditionalParameters();
    private void ThrowIfConnectionStringIsSet(string propertyName);
    internal bool get_IsReadAccessBlocked();
    private void ThrowIfUpdatesAreBlocked();
    private void ThrowIfLoginSecure(string propertyName);
    private void ThrowIfInvalidValue(string str, string propertyName);
    private void ThrowIfInvalidValue(string str, string propertyName, bool checkEmpty);
    protected string ThrowIfPropertyNotSet(string propertyName, string str);
    protected string ThrowIfPropertyNotSet(string propertyName, string str, bool checkEmpty);
    private void ThrowIfInvalidValue(int n, int value, string propertyName);
    private bool IsValidString(string str);
    private bool IsValidString(string str, bool checkEmpty);
    private string GetNetworkProtocolString();
    private string GetConnectionString();
    private void SetAuthentication(SqlConnectionStringBuilder sbConnectionString);
    private void SetApplicationIntent(SqlConnectionStringBuilder sbConnectionString);
    internal string get_InitialCatalog();
    internal bool get_BlockUpdates();
    internal void set_BlockUpdates(bool value);
    protected bool get_ResetConnectionString();
    protected void set_ResetConnectionString(bool value);
    public virtual string ToString();
}
public enum Microsoft.SqlServer.Management.Common.ConnectionType : Enum {
    public int value__;
    public static ConnectionType Sql;
    public static ConnectionType Olap;
    public static ConnectionType SqlConnection;
    public static ConnectionType WmiManagementScope;
    public static ConnectionType SqlCE;
    public static ConnectionType ReportServer;
    public static ConnectionType IntegrationServer;
    public static ConnectionType AzureStorage;
    public static ConnectionType AzureAccount;
    public static ConnectionType SsisIr;
}
[CommonLocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Common.StringConnectionInfo")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Common.CommonLocalizableEnumConverter")]
public enum Microsoft.SqlServer.Management.Common.DatabaseEngineEdition : Enum {
    public int value__;
    public static DatabaseEngineEdition Unknown;
    [CommonDisplayNameKeyAttribute("PersonalEdition")]
public static DatabaseEngineEdition Personal;
    [CommonDisplayNameKeyAttribute("StandardEdition")]
public static DatabaseEngineEdition Standard;
    [CommonDisplayNameKeyAttribute("EnterpriseEdition")]
public static DatabaseEngineEdition Enterprise;
    [CommonDisplayNameKeyAttribute("ExpressEdition")]
public static DatabaseEngineEdition Express;
    [CommonDisplayNameKeyAttribute("SqlAzureDatabaseEdition")]
public static DatabaseEngineEdition SqlDatabase;
    [CommonDisplayNameKeyAttribute("SqlDataWarehouseEdition")]
public static DatabaseEngineEdition SqlDataWarehouse;
    [CommonDisplayNameKeyAttribute("StretchEdition")]
public static DatabaseEngineEdition SqlStretchDatabase;
    [CommonDisplayNameKeyAttribute("SqlManagedInstanceEdition")]
public static DatabaseEngineEdition SqlManagedInstance;
    [CommonDisplayNameKeyAttribute("SqlDatabaseEdgeEdition")]
public static DatabaseEngineEdition SqlDatabaseEdge;
    [CommonDisplayNameKeyAttribute("SqlAzureArcManagedInstanceEdition")]
public static DatabaseEngineEdition SqlAzureArcManagedInstance;
    [CommonDisplayNameKeyAttribute("SqlOnDemandEdition")]
public static DatabaseEngineEdition SqlOnDemand;
}
[CommonLocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Common.StringConnectionInfo")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Common.CommonLocalizableEnumConverter")]
public enum Microsoft.SqlServer.Management.Common.DatabaseEngineType : Enum {
    public int value__;
    public static DatabaseEngineType Unknown;
    [CommonDisplayNameKeyAttribute("Standalone")]
public static DatabaseEngineType Standalone;
    [CommonDisplayNameKeyAttribute("SqlAzureDatabase")]
public static DatabaseEngineType SqlAzureDatabase;
}
internal static class Microsoft.SqlServer.Management.Common.DatabaseEngineTypeExtension : object {
    internal static bool IsMatrix(DatabaseEngineType databaseEngineType);
}
internal class Microsoft.SqlServer.Management.Common.DatabaseNameEqualityComparer : object {
    private ServerComparer serverComparer;
    public DatabaseNameEqualityComparer(ServerComparer serverComparer);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.String>.Equals(string x, string y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(string s);
}
public enum Microsoft.SqlServer.Management.Common.DeferredUseMode : Enum {
    public int value__;
    public static DeferredUseMode None;
    public static DeferredUseMode CollapseRedundant;
    public static DeferredUseMode MergeSql;
}
public class Microsoft.SqlServer.Management.Common.DisconnectedConnectionException : ConnectionException {
    public DisconnectedConnectionException(string message);
    public DisconnectedConnectionException(string message, Exception innerException);
    private DisconnectedConnectionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Common.DtsConnectionInfo : SqlOlapConnectionInfoBase {
    protected StringBuilder applicationNameBuilder;
    protected StringBuilder workstationIdBuilder;
    [BrowsableAttribute("False")]
public string ConnectionString { get; }
    public string ApplicationName { get; public set; }
    public string WorkstationID { get; public set; }
    public DtsConnectionInfo(string serverName);
    public DtsConnectionInfo(DtsConnectionInfo conn);
    public virtual string get_ConnectionString();
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_WorkstationID();
    public void set_WorkstationID(string value);
    public virtual IDbConnection CreateConnectionObject();
}
internal static class Microsoft.SqlServer.Management.Common.EncryptionUtility : object {
    public static string DecryptSecureString(SecureString ss);
    public static SecureString EncryptString(string s);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Common.ExecutionCache`2 : object {
    private List`1<C> items;
    private int capacity;
    public C Item { get; }
    public int Count { get; }
    public ExecutionCache`2(int capacity);
    public bool ContainsKey(K key);
    public void Add(C item);
    public C get_Item(K key);
    public void ClearResults();
    public void Clear();
    public bool IsEmpty();
    public int get_Count();
}
public class Microsoft.SqlServer.Management.Common.ExecutionFailureException : ConnectionException {
    public ExecutionFailureException(string message);
    public ExecutionFailureException(string message, Exception innerException);
    private ExecutionFailureException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Common.ExecutionTypes : Enum {
    public int value__;
    public static ExecutionTypes Default;
    public static ExecutionTypes NoCommands;
    public static ExecutionTypes ContinueOnError;
    public static ExecutionTypes NoExec;
    public static ExecutionTypes ParseOnly;
    public static ExecutionTypes QuotedIdentifierOn;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Common.FixedServerRoles : Enum {
    public int value__;
    public static FixedServerRoles None;
    public static FixedServerRoles SysAdmin;
    public static FixedServerRoles ServerAdmin;
    public static FixedServerRoles SetupAdmin;
    public static FixedServerRoles SecurityAdmin;
    public static FixedServerRoles ProcessAdmin;
    public static FixedServerRoles DBCreator;
    public static FixedServerRoles DiskAdmin;
    public static FixedServerRoles BulkAdmin;
}
public static class Microsoft.SqlServer.Management.Common.HostPlatformNames : object {
    public static string Windows;
    public static string Linux;
}
public interface Microsoft.SqlServer.Management.Common.IAlterable {
    public abstract virtual void Alter();
}
internal interface Microsoft.SqlServer.Management.Common.ICommonDisplayKey {
    public string Key { get; }
    public abstract virtual string get_Key();
    public abstract virtual string GetDefaultKey(PropertyInfo property);
    public abstract virtual string GetDefaultKey(Type type);
    public abstract virtual string GetDefaultKey(FieldInfo field);
}
public interface Microsoft.SqlServer.Management.Common.ICommonDynamicVisible {
    public abstract virtual ICollection ConfigureVisibleEnumFields(ITypeDescriptorContext context, ArrayList values);
}
public interface Microsoft.SqlServer.Management.Common.ICreatable {
    public abstract virtual void Create();
}
public interface Microsoft.SqlServer.Management.Common.ICreateOrAlterable {
    public abstract virtual void CreateOrAlter();
}
public interface Microsoft.SqlServer.Management.Common.IDropIfExists {
    public abstract virtual void DropIfExists();
}
public interface Microsoft.SqlServer.Management.Common.IDroppable {
    public abstract virtual void Drop();
}
public interface Microsoft.SqlServer.Management.Common.IMarkForDrop {
    public abstract virtual void MarkForDrop(bool dropOnAlter);
}
public class Microsoft.SqlServer.Management.Common.InvalidArgumentException : ConnectionException {
    public InvalidArgumentException(string message);
    public InvalidArgumentException(string message, Exception innerException);
    private InvalidArgumentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Common.InvalidPropertyValueException : ConnectionException {
    public InvalidPropertyValueException(string message);
    public InvalidPropertyValueException(string message, Exception innerException);
    private InvalidPropertyValueException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.SqlServer.Management.Common.IRefreshable {
    public abstract virtual void Refresh();
}
public interface Microsoft.SqlServer.Management.Common.IRenamable {
    public abstract virtual void Rename(string newname);
}
public interface Microsoft.SqlServer.Management.Common.IRenewableToken {
    public DateTimeOffset TokenExpiry { get; }
    public string Resource { get; }
    public string Tenant { get; }
    public string UserId { get; }
    public abstract virtual DateTimeOffset get_TokenExpiry();
    public abstract virtual string GetAccessToken();
    public abstract virtual string get_Resource();
    public abstract virtual string get_Tenant();
    public abstract virtual string get_UserId();
}
public interface Microsoft.SqlServer.Management.Common.IRestrictedAccess {
    public bool SingleConnection { get; public set; }
    public abstract virtual bool get_SingleConnection();
    public abstract virtual void set_SingleConnection(bool value);
}
public interface Microsoft.SqlServer.Management.Common.ISafeRenamable {
    public bool WarnOnRename { get; }
    public abstract virtual bool get_WarnOnRename();
}
public interface Microsoft.SqlServer.Management.Common.ISfcConnection {
    public bool IsOpen { get; }
    public string ServerInstance { get; public set; }
    public Version ServerVersion { get; }
    public bool IsForceDisconnected { get; }
    public abstract virtual bool Connect();
    public abstract virtual bool Disconnect();
    public abstract virtual ISfcConnection Copy();
    public abstract virtual bool get_IsOpen();
    public abstract virtual string get_ServerInstance();
    public abstract virtual void set_ServerInstance(string value);
    public abstract virtual Version get_ServerVersion();
    public abstract virtual object ToEnumeratorObject();
    public abstract virtual void ForceDisconnected();
    public abstract virtual bool get_IsForceDisconnected();
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Management.Common.NetCoreHelpers : object {
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    public static Assembly LoadAssembly(string assemblyName);
    public static IntPtr ConvertSecureStringToBSTR(SecureString ss);
    [ExtensionAttribute]
public static int StringCompare(string firstString, string secondString, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static string StringToUpper(string str, CultureInfo culture);
    public static CultureInfo GetNewCultureInfo(int lcid);
    public static void ZeroFreeBSTR(IntPtr ps);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
}
public enum Microsoft.SqlServer.Management.Common.NetworkProtocol : Enum {
    public int value__;
    public static NetworkProtocol TcpIp;
    public static NetworkProtocol NamedPipes;
    public static NetworkProtocol Multiprotocol;
    public static NetworkProtocol AppleTalk;
    public static NetworkProtocol BanyanVines;
    public static NetworkProtocol Via;
    public static NetworkProtocol SharedMemory;
    public static NetworkProtocol NWLinkIpxSpx;
    public static NetworkProtocol NotSpecified;
}
public class Microsoft.SqlServer.Management.Common.NotInTransactionException : ConnectionException {
    public NotInTransactionException(string message);
    public NotInTransactionException(string message, Exception innerException);
    private NotInTransactionException(SerializationInfo info, StreamingContext context);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Common.OlapConnectionInfo : SqlOlapConnectionInfoBase {
    private bool shouldEncryptConnection;
    private string applicationName;
    private string otherParams;
    private string integratedSecurity;
    public bool EncryptConnection { get; public set; }
    public string ApplicationName { get; public set; }
    public string IntegratedSecurity { get; public set; }
    public string OtherParameters { get; public set; }
    [BrowsableAttribute("False")]
public string ConnectionString { get; }
    public OlapConnectionInfo(OlapConnectionInfo conn);
    public bool get_EncryptConnection();
    public void set_EncryptConnection(bool value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_IntegratedSecurity();
    public void set_IntegratedSecurity(string value);
    public string get_OtherParameters();
    public void set_OtherParameters(string value);
    public virtual string get_ConnectionString();
    public OlapConnectionInfo Copy();
    public virtual IDbConnection CreateConnectionObject();
}
public class Microsoft.SqlServer.Management.Common.PropertyNotAvailableException : ConnectionException {
    public PropertyNotAvailableException(string message);
    public PropertyNotAvailableException(string message, Exception innerException);
    private PropertyNotAvailableException(SerializationInfo si, StreamingContext sc);
}
public class Microsoft.SqlServer.Management.Common.PropertyNotSetException : ConnectionException {
    public PropertyNotSetException(string message);
    public PropertyNotSetException(string message, Exception innerException);
    private PropertyNotSetException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.SqlServer.Management.Common.QueryParameterizationMode : Enum {
    public int value__;
    public static QueryParameterizationMode None;
    public static QueryParameterizationMode ForcedParameterization;
    public static QueryParameterizationMode ParameterizeLiterals;
}
internal class Microsoft.SqlServer.Management.Common.SafeNativeMethods : object {
    public static bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword, int dwLogonType, int dwLogonProvider, SafeAccessTokenHandle& phToken);
    internal static SafeAccessTokenHandle GetUserToken(string user, string domain, string password);
}
public enum Microsoft.SqlServer.Management.Common.ServerCaseSensitivity : Enum {
    public int value__;
    public static ServerCaseSensitivity Unknown;
    public static ServerCaseSensitivity CaseSensitive;
    public static ServerCaseSensitivity CaseInsensitive;
}
public class Microsoft.SqlServer.Management.Common.ServerComparer : object {
    private CompareOptions compareOps;
    private CultureInfo cultureInfo;
    private static int SHILOH;
    private DatabaseNameEqualityComparer databaseNameEqualityComparer;
    internal CultureInfo CultureInfo { get; }
    internal CompareOptions CompareOptions { get; }
    public IEqualityComparer`1<string> DatabaseNameEqualityComparer { get; }
    public ServerComparer(ServerConnection conn);
    public ServerComparer(ServerConnection conn, string databaseName);
    internal CultureInfo get_CultureInfo();
    internal CompareOptions get_CompareOptions();
    public IEqualityComparer`1<string> get_DatabaseNameEqualityComparer();
    private sealed virtual override int System.Collections.Generic.IComparer<System.String>.Compare(string x, string y);
}
public class Microsoft.SqlServer.Management.Common.ServerConnection : ConnectionManager {
    private int m_StatementTimeout;
    private string m_BatchSeparator;
    private int m_TransactionDepth;
    private SqlExecutionModes m_ExecutionMode;
    private SqlCommand m_SqlCommand;
    private SqlCommand currentSqlCommand;
    private List`1<SqlParameter> m_Parameters;
    private bool isSqlConnectionUsed;
    private static int CACHE_SIZE;
    private ExecutionCache`2<string, SqlBatch> m_CommandCache;
    private static Regex reUseDb;
    private static Regex reQueryTags;
    private static Regex reQueryPrepStatement;
    private static Regex reQueryParametersQIOn;
    private static Regex reQueryParametersQIOff;
    private static QueryParameterizationMode parameterizationMode;
    private static DeferredUseMode deferredUseMode;
    private static bool cachedQueries;
    private static string BatchSeparator_Default;
    private static int StatementTimeout_Default;
    private static int MaxParams_Default;
    internal static string Database_Default;
    private string m_TrueLogin;
    private string m_TrueName;
    public static QueryParameterizationMode ParameterizationMode { get; public set; }
    public static DeferredUseMode UseMode { get; public set; }
    public static bool CachedQueries { get; public set; }
    public int StatementTimeout { get; public set; }
    private Version Microsoft.SqlServer.Management.Common.ISfcConnection.ServerVersion { get; }
    public ServerType ConnectionType { get; }
    public string BatchSeparator { get; public set; }
    public int TransactionDepth { get; }
    public SqlExecutionModes SqlExecutionModes { get; public set; }
    public FixedServerRoles FixedServerRoles { get; }
    public ServerUserProfiles UserProfile { get; }
    public int ProcessID { get; }
    public string TrueLogin { get; }
    public string TrueName { get; public set; }
    internal bool BlockPoolDisconnect { get; }
    public ServerConnection(IRenewableToken token);
    public ServerConnection(SqlConnectionInfo sci);
    public ServerConnection(SqlConnection sqlConnection);
    public ServerConnection(SqlConnection sqlConnection, IRenewableToken accessToken);
    public ServerConnection(string serverInstance);
    public ServerConnection(string serverInstance, string userName, string password);
    public ServerConnection(string serverInstance, string userName, SecureString password);
    private static ServerConnection();
    public static QueryParameterizationMode get_ParameterizationMode();
    public static void set_ParameterizationMode(QueryParameterizationMode value);
    public static DeferredUseMode get_UseMode();
    public static void set_UseMode(DeferredUseMode value);
    public static bool get_CachedQueries();
    public static void set_CachedQueries(bool value);
    private void InitDefaults();
    private void CopyServerConnection(ServerConnection sc);
    public ServerConnection Copy();
    private SqlCommand AllocSqlCommand(string query);
    private SqlCommand CacheQuery(string query);
    private string AddParameterLiterals(Match match);
    private string AddParameterForced(Match match);
    public static string NormalizeQuery(string QueryText, bool QuotedIdentifiers);
    public static string NormalizeQuery(string QueryText);
    private SqlCommand GetSqlCommand(string query);
    private void CaptureCommand(string query);
    private bool IsDirectExecutionMode();
    public int get_StatementTimeout();
    public void set_StatementTimeout(int value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Common.ISfcConnection.Connect();
    private sealed virtual override bool Microsoft.SqlServer.Management.Common.ISfcConnection.Disconnect();
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Common.ISfcConnection.Copy();
    private sealed virtual override Version Microsoft.SqlServer.Management.Common.ISfcConnection.get_ServerVersion();
    public ServerType get_ConnectionType();
    private sealed virtual override object Microsoft.SqlServer.Management.Common.ISfcConnection.ToEnumeratorObject();
    public void ChangePassword(SecureString newPassword);
    public void ChangePassword(string newPassword);
    public Int32[] ExecuteNonQuery(StringCollection sqlCommands);
    public Int32[] ExecuteNonQuery(StringCollection sqlCommands, ExecutionTypes executionType);
    public Int32[] ExecuteNonQuery(StringCollection sqlCommands, ExecutionTypes executionType, bool retry);
    public int ExecuteNonQuery(string sqlCommand);
    public int ExecuteNonQuery(string sqlCommand, ExecutionTypes executionType);
    public int ExecuteNonQuery(string sqlCommand, ExecutionTypes executionType, bool retry);
    private StringCollection GetStatements(string query, ExecutionTypes executionType, Int32& statementsToReverse);
    public string get_BatchSeparator();
    public void set_BatchSeparator(string value);
    public DataSet[] ExecuteWithResults(StringCollection sqlCommands);
    public DataSet ExecuteWithResults(string sqlCommand);
    public DataSet ExecuteWithResults(string sqlCommand, bool retry);
    public SqlDataReader ExecuteReader(string sqlCommand);
    public SqlDataReader ExecuteReader(string sqlCommand, SqlCommand& command);
    internal SqlDataReader ExecuteReader(SqlCommand command);
    private SqlDataReader GetExecuteReader(SqlCommand command);
    public Object[] ExecuteScalar(StringCollection sqlCommands);
    public object ExecuteScalar(string sqlCommand);
    public void BeginTransaction();
    public void CommitTransaction();
    public void RollBackTransaction();
    public int get_TransactionDepth();
    private void RefreshTransactionDepth(byte severity);
    public SqlExecutionModes get_SqlExecutionModes();
    public void set_SqlExecutionModes(SqlExecutionModes value);
    public FixedServerRoles get_FixedServerRoles();
    public bool IsInFixedServerRole(FixedServerRoles fixedServerRole);
    public ServerUserProfiles get_UserProfile();
    public int get_ProcessID();
    public string get_TrueLogin();
    public string get_TrueName();
    public void set_TrueName(string value);
    public void Cancel();
    internal virtual void InitAfterConnect();
    internal virtual bool get_BlockPoolDisconnect();
    internal void CheckDisconnected();
    public ServerConnection GetDatabaseConnection(string dbName, bool poolConnection);
    public ServerConnection GetDatabaseConnection(string dbName, bool poolConnection, IRenewableToken accessToken);
}
internal class Microsoft.SqlServer.Management.Common.ServerInformation : object {
    private ServerVersion serverVersion;
    private Version productVersion;
    private DatabaseEngineType databaseEngineType;
    private DatabaseEngineEdition databaseEngineEdition;
    private string hostPlatform;
    private NetworkProtocol connectionProtocol;
    private static string serverVersionQuery;
    public string HostPlatform { get; }
    public ServerVersion ServerVersion { get; }
    public Version ProductVersion { get; }
    public DatabaseEngineType DatabaseEngineType { get; }
    public DatabaseEngineEdition DatabaseEngineEdition { get; }
    public NetworkProtocol ConnectionProtocol { get; }
    public ServerInformation(ServerVersion sv, Version productVersion, DatabaseEngineType dt, DatabaseEngineEdition databaseEngineEdition);
    public ServerInformation(ServerVersion sv, Version productVersion, DatabaseEngineType dt, DatabaseEngineEdition databaseEngineEdition, string hostPlatform, NetworkProtocol connectionProtocol);
    public string get_HostPlatform();
    public ServerVersion get_ServerVersion();
    public Version get_ProductVersion();
    public DatabaseEngineType get_DatabaseEngineType();
    public DatabaseEngineEdition get_DatabaseEngineEdition();
    public NetworkProtocol get_ConnectionProtocol();
    public static ServerInformation GetServerInformation(IDbConnection sqlConnection, IDbDataAdapter dataAdapter, string serverVersionString);
    private static NetworkProtocol ProtocolFromNetTransport(string netTransport);
    public static ServerVersion ParseStringServerVersion(string version);
    public static ServerVersion ParseMicrosoftVersion(UInt32 version);
}
public class Microsoft.SqlServer.Management.Common.ServerMessageEventArgs : EventArgs {
    private SqlError error;
    public SqlError Error { get; }
    public ServerMessageEventArgs(SqlError sqlError);
    public SqlError get_Error();
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.Common.ServerMessageEventHandler : MulticastDelegate {
    public ServerMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ServerMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ServerMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.SqlServer.Management.Common.ServerType : Enum {
    public int value__;
    public static ServerType DatabaseEngine;
    public static ServerType AnalysisServices;
    public static ServerType ReportingServices;
    public static ServerType IntegrationServices;
    [ObsoleteAttribute("use ServerType.SqlServerCompactEdition")]
public static ServerType SqlServerEverywhere;
    public static ServerType SqlServerCompactEdition;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Common.ServerUserProfiles : Enum {
    public int value__;
    public static ServerUserProfiles None;
    public static ServerUserProfiles SALogin;
    public static ServerUserProfiles CreateDatabase;
    public static ServerUserProfiles CreateXP;
    public static ServerUserProfiles All;
}
public class Microsoft.SqlServer.Management.Common.ServerVersion : object {
    private int m_nMajor;
    private int m_nMinor;
    private int m_nBuildNumber;
    public int Major { get; }
    public int Minor { get; }
    public int BuildNumber { get; }
    public ServerVersion(int major, int minor);
    public ServerVersion(int major, int minor, int buildNumber);
    public int get_Major();
    public int get_Minor();
    public int get_BuildNumber();
    public virtual string ToString();
    public static Version op_Explicit(ServerVersion serverVersion);
}
internal class Microsoft.SqlServer.Management.Common.SqlBatch : CacheItem`1<string> {
    public SqlCommand Command;
    public string Key { get; }
    public SqlBatch(SqlCommand command);
    public virtual string get_Key();
}
public class Microsoft.SqlServer.Management.Common.SqlCeConnectionInfo : SqlOlapConnectionInfoBase {
    private int m_MaxDatabaseSize;
    private int m_DefaultLockEscalation;
    private IDbConnection connection;
    [BrowsableAttribute("False")]
public string ConnectionString { get; }
    public IDbConnection Connection { get; public set; }
    public int MaxDatabaseSize { get; public set; }
    public int DefaultLockEscalation { get; public set; }
    public SqlCeConnectionInfo(IDbConnection connection);
    public SqlCeConnectionInfo(string connStr);
    public SqlCeConnectionInfo(string database, string password);
    public SqlCeConnectionInfo(SqlCeConnectionInfo conn);
    public virtual string get_ConnectionString();
    public IDbConnection get_Connection();
    public void set_Connection(IDbConnection value);
    public int get_MaxDatabaseSize();
    public void set_MaxDatabaseSize(int value);
    public int get_DefaultLockEscalation();
    public void set_DefaultLockEscalation(int value);
    private string EscapeString(string s);
    public SqlCeConnectionInfo Copy();
    public virtual IDbConnection CreateConnectionObject();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Common.SqlConnectionInfo : SqlOlapConnectionInfoBase {
    public static NetworkProtocol DefaultNetworkProtocol;
    private StringBuilder m_sbApplicationName;
    private StringBuilder m_sbWorkstationID;
    private NetworkProtocol m_eNetworkProtocol;
    private int m_PoolConnectionLifeTime;
    private int m_MaxPoolSize;
    private int m_MinPoolSize;
    private int m_PacketSize;
    private bool shouldEncryptConnection;
    private string additionalParameters;
    private string hostNameInCertificate;
    private bool trustServerCertificate;
    private AuthenticationMethod m_Authentication;
    private string m_ApplicationIntent;
    private SqlBoolean m_Pooled;
    [CompilerGeneratedAttribute]
private IRenewableToken <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictEncryption>k__BackingField;
    public string ApplicationName { get; public set; }
    public string WorkstationId { get; public set; }
    public NetworkProtocol ConnectionProtocol { get; public set; }
    public AuthenticationMethod Authentication { get; public set; }
    public string ApplicationIntent { get; public set; }
    public bool TrustServerCertificate { get; public set; }
    public IRenewableToken AccessToken { get; public set; }
    private string NetworkProtocolString { get; }
    [BrowsableAttribute("False")]
public string ConnectionString { get; }
    public int PoolConnectionLifeTime { get; public set; }
    public int PacketSize { get; public set; }
    public int MaxPoolSize { get; public set; }
    public int MinPoolSize { get; public set; }
    public SqlBoolean Pooled { get; public set; }
    public bool EncryptConnection { get; public set; }
    public bool StrictEncryption { get; public set; }
    public string HostNameInCertificate { get; public set; }
    public string AdditionalParameters { get; public set; }
    public SqlConnectionInfo(string serverName);
    public SqlConnectionInfo(string serverName, string userName, string password);
    public SqlConnectionInfo(SqlConnectionInfo conn);
    public SqlConnectionInfo(ServerConnection serverConnection, ConnectionType connectionType);
    private static SqlConnectionInfo();
    public static bool IsAuthenticationKeywordSupported();
    public static AuthenticationMethod GetAuthenticationMethod(SqlConnectionStringBuilder connectionStringBuilder);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_WorkstationId();
    public void set_WorkstationId(string value);
    public NetworkProtocol get_ConnectionProtocol();
    public void set_ConnectionProtocol(NetworkProtocol value);
    public AuthenticationMethod get_Authentication();
    public void set_Authentication(AuthenticationMethod value);
    public string get_ApplicationIntent();
    public void set_ApplicationIntent(string value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    [CompilerGeneratedAttribute]
public IRenewableToken get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(IRenewableToken value);
    private string get_NetworkProtocolString();
    public virtual string get_ConnectionString();
    public SqlConnectionInfo Copy();
    public virtual string ToString();
    public virtual IDbConnection CreateConnectionObject();
    public int get_PoolConnectionLifeTime();
    public void set_PoolConnectionLifeTime(int value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public SqlBoolean get_Pooled();
    public void set_Pooled(SqlBoolean value);
    public bool get_EncryptConnection();
    public void set_EncryptConnection(bool value);
    [CompilerGeneratedAttribute]
public bool get_StrictEncryption();
    [CompilerGeneratedAttribute]
public void set_StrictEncryption(bool value);
    public string get_HostNameInCertificate();
    public void set_HostNameInCertificate(string value);
    public string get_AdditionalParameters();
    public void set_AdditionalParameters(string value);
    public static bool IsApplicationIntentKeywordSupported();
}
public class Microsoft.SqlServer.Management.Common.SqlConnectionInfoWithConnection : SqlConnectionInfo {
    private ServerConnection serverConnection;
    private bool closeConnectionOnDispose;
    private bool singleConnection;
    private EventHandler connectionClosedHandler;
    [BrowsableAttribute("False")]
public ServerConnection ServerConnection { get; public set; }
    public bool SingleConnection { get; public set; }
    public SqlConnectionInfoWithConnection(string serverName);
    public SqlConnectionInfoWithConnection(string serverName, string userName, string password);
    public SqlConnectionInfoWithConnection(SqlConnection sqlConnection);
    private SqlConnectionInfoWithConnection(SqlConnectionInfoWithConnection conn);
    public sealed virtual void Dispose();
    public ServerConnection get_ServerConnection();
    public void set_ServerConnection(ServerConnection value);
    public SqlConnectionInfoWithConnection Copy();
    protected virtual void ConnectionParmsChanged();
    public sealed virtual bool get_SingleConnection();
    public sealed virtual void set_SingleConnection(bool value);
    public void add_ConnectionClosed(EventHandler value);
    public void remove_ConnectionClosed(EventHandler value);
    private void OnConnectionClosed(EventArgs args);
}
public class Microsoft.SqlServer.Management.Common.SqlDirectConnection : ConnectionInfoBase {
    private string m_sbServerName;
    private SqlConnection m_sqlConnection;
    public string ServerName { get; public set; }
    public SqlConnection SqlConnection { get; public set; }
    public SqlDirectConnection(SqlConnection sqlConnection);
    private SqlDirectConnection(SqlDirectConnection conn);
    public string get_ServerName();
    public void set_ServerName(string value);
    public SqlConnection get_SqlConnection();
    public void set_SqlConnection(SqlConnection value);
    public SqlDirectConnection Copy();
    protected virtual void ConnectionParmsChanged();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Common.SqlExecutionModes : Enum {
    public int value__;
    public static SqlExecutionModes ExecuteSql;
    public static SqlExecutionModes CaptureSql;
    public static SqlExecutionModes ExecuteAndCaptureSql;
}
[ComVisibleAttribute("False")]
public abstract class Microsoft.SqlServer.Management.Common.SqlOlapConnectionInfoBase : ConnectionInfoBase {
    private StringBuilder m_sbServerName;
    private SecureString m_sbConnectionString;
    private bool m_fRebuildConnectionString;
    private StringBuilder m_sbUserName;
    [XmlIgnoreAttribute]
private SecureString m_password;
    private bool m_fIntegratedSecurity;
    private StringBuilder m_sbDatabaseName;
    protected static int NoTimeOut;
    public static int DefaultConnTimeout;
    public static int DefaultQueryTimeout;
    private int m_iConnectionTimeout;
    private int m_iQueryTimeout;
    protected StringBuilder ServerNameInternal { get; protected set; }
    protected SecureString ConnectionStringInternal { get; protected set; }
    protected bool RebuildConnectionStringInternal { get; protected set; }
    internal StringBuilder UserNameInternal { get; internal set; }
    internal SecureString PasswordInternal { get; internal set; }
    protected bool IntegratedSecurityInternal { get; protected set; }
    protected StringBuilder DatabaseNameInternal { get; protected set; }
    protected int ConnectionTimeoutInternal { get; protected set; }
    protected int QueryTimeoutInternal { get; protected set; }
    public string ServerName { get; public set; }
    [XmlIgnoreAttribute]
public string UserName { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public string Password { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public SecureString SecurePassword { get; public set; }
    public bool UseIntegratedSecurity { get; public set; }
    public string DatabaseName { get; public set; }
    public int ConnectionTimeout { get; public set; }
    public int QueryTimeout { get; public set; }
    [BrowsableAttribute("False")]
public string ConnectionString { get; }
    protected SqlOlapConnectionInfoBase(ConnectionType serverType);
    protected SqlOlapConnectionInfoBase(string serverName, ConnectionType serverType);
    public SqlOlapConnectionInfoBase(string serverName, string userName, string password, ConnectionType serverType);
    protected SqlOlapConnectionInfoBase(SqlOlapConnectionInfoBase conn);
    private static SqlOlapConnectionInfoBase();
    protected StringBuilder get_ServerNameInternal();
    protected void set_ServerNameInternal(StringBuilder value);
    protected SecureString get_ConnectionStringInternal();
    protected void set_ConnectionStringInternal(SecureString value);
    protected bool get_RebuildConnectionStringInternal();
    protected void set_RebuildConnectionStringInternal(bool value);
    internal StringBuilder get_UserNameInternal();
    internal void set_UserNameInternal(StringBuilder value);
    internal SecureString get_PasswordInternal();
    internal void set_PasswordInternal(SecureString value);
    protected bool get_IntegratedSecurityInternal();
    protected void set_IntegratedSecurityInternal(bool value);
    protected StringBuilder get_DatabaseNameInternal();
    protected void set_DatabaseNameInternal(StringBuilder value);
    protected int get_ConnectionTimeoutInternal();
    protected void set_ConnectionTimeoutInternal(int value);
    protected int get_QueryTimeoutInternal();
    protected void set_QueryTimeoutInternal(int value);
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public SecureString get_SecurePassword();
    public void set_SecurePassword(SecureString value);
    public bool get_UseIntegratedSecurity();
    public void set_UseIntegratedSecurity(bool value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public int get_ConnectionTimeout();
    public void set_ConnectionTimeout(int value);
    public int get_QueryTimeout();
    public void set_QueryTimeout(int value);
    public abstract virtual string get_ConnectionString();
    public abstract virtual IDbConnection CreateConnectionObject();
    protected virtual void ConnectionParmsChanged();
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.Common.SqlServerManagementException : Exception {
    public static string ProductName { get; }
    public SqlServerManagementException(string message);
    public SqlServerManagementException(string message, Exception innerException);
    protected SqlServerManagementException(SerializationInfo info, StreamingContext context);
    private void Init();
    public static string get_ProductName();
}
public class Microsoft.SqlServer.Management.Common.StatementEventArgs : EventArgs {
    private string m_sqlStatement;
    private DateTime m_timeStamp;
    public string SqlStatement { get; }
    public DateTime TimeStamp { get; }
    public StatementEventArgs(string sqlStatement, DateTime timeStamp);
    public string get_SqlStatement();
    public DateTime get_TimeStamp();
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.Common.StatementEventHandler : MulticastDelegate {
    public StatementEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatementEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StatementEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Common.StringConnectionInfo : object {
    public static CultureInfo Culture { get; public set; }
    public static string ConnectionCannotBeChanged { get; }
    public static string NotInTransaction { get; }
    public static string InvalidPropertyValueReasonString { get; }
    public static string ExecutionFailure { get; }
    public static string PasswordCouldNotBeChanged { get; }
    public static string InvalidArgumentCacheNullKey { get; }
    public static string SqlAzureDatabaseEdition { get; }
    public static string SqlDataWarehouseEdition { get; }
    public static string EnterpriseEdition { get; }
    public static string ExpressEdition { get; }
    public static string PersonalEdition { get; }
    public static string StandardEdition { get; }
    public static string StretchEdition { get; }
    public static string SqlManagedInstanceEdition { get; }
    public static string SqlOnDemandEdition { get; }
    public static string SqlDatabaseEdgeEdition { get; }
    public static string SqlAzureArcManagedInstanceEdition { get; }
    public static string SqlAzureDatabase { get; }
    public static string Standalone { get; }
    public static string CannotCloseTraceController { get; }
    public static string CannotRetrieveSchemaTable { get; }
    public static string CannotReadNextEvent { get; }
    public static string CannotGetColumnName { get; }
    public static string CannotGetColumnType { get; }
    public static string CannotGetColumnValue { get; }
    public static string CannotSetColumnValue { get; }
    public static string CannotWriteEvent { get; }
    public static string CannotCloseWriter { get; }
    public static string CannotInitializeAsReader { get; }
    public static string CannotInitializeAsWriter { get; }
    public static string CannotInitializeAsReplayOutputWriter { get; }
    public static string CannotPause { get; }
    public static string CannotStop { get; }
    public static string CannotRestart { get; }
    public static string CannotStartReplay { get; }
    public static string CannotPauseReplay { get; }
    public static string CannotStopReplay { get; }
    public static string FailedToGetSQLToolsDirPathFromInstAPI { get; }
    public static string InstAPIIsNotInstalled { get; }
    public static string CouldNotInstantiateInstAPI { get; }
    public static string CouldNotLoadMethodInfoFromInstAPI { get; }
    public static string CannotTranslateSubclass { get; }
    public static string CannotGetOrdinal { get; }
    public static string CannotLoadInAppDomain { get; }
    public static string SmoSQLCLRUnAvailable { get; }
    public static string CannotBeSetWhileConnected { get; }
    public static string CannotPerformOperationWhileDisconnected { get; }
    public static string CannotSetTrueName { get; }
    public static string TrueNameMustBeSet { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ConnectionCannotBeChanged();
    public static string get_NotInTransaction();
    public static string get_InvalidPropertyValueReasonString();
    public static string get_ExecutionFailure();
    public static string get_PasswordCouldNotBeChanged();
    public static string get_InvalidArgumentCacheNullKey();
    public static string get_SqlAzureDatabaseEdition();
    public static string get_SqlDataWarehouseEdition();
    public static string get_EnterpriseEdition();
    public static string get_ExpressEdition();
    public static string get_PersonalEdition();
    public static string get_StandardEdition();
    public static string get_StretchEdition();
    public static string get_SqlManagedInstanceEdition();
    public static string get_SqlOnDemandEdition();
    public static string get_SqlDatabaseEdgeEdition();
    public static string get_SqlAzureArcManagedInstanceEdition();
    public static string get_SqlAzureDatabase();
    public static string get_Standalone();
    public static string get_CannotCloseTraceController();
    public static string get_CannotRetrieveSchemaTable();
    public static string get_CannotReadNextEvent();
    public static string get_CannotGetColumnName();
    public static string get_CannotGetColumnType();
    public static string get_CannotGetColumnValue();
    public static string get_CannotSetColumnValue();
    public static string get_CannotWriteEvent();
    public static string get_CannotCloseWriter();
    public static string get_CannotInitializeAsReader();
    public static string get_CannotInitializeAsWriter();
    public static string get_CannotInitializeAsReplayOutputWriter();
    public static string get_CannotPause();
    public static string get_CannotStop();
    public static string get_CannotRestart();
    public static string get_CannotStartReplay();
    public static string get_CannotPauseReplay();
    public static string get_CannotStopReplay();
    public static string get_FailedToGetSQLToolsDirPathFromInstAPI();
    public static string get_InstAPIIsNotInstalled();
    public static string get_CouldNotInstantiateInstAPI();
    public static string get_CouldNotLoadMethodInfoFromInstAPI();
    public static string get_CannotTranslateSubclass();
    public static string get_CannotGetOrdinal();
    public static string get_CannotLoadInAppDomain();
    public static string get_SmoSQLCLRUnAvailable();
    public static string get_CannotBeSetWhileConnected();
    public static string get_CannotPerformOperationWhileDisconnected();
    public static string get_CannotSetTrueName();
    public static string get_TrueNameMustBeSet();
    public static string ConnectionFailure(string server);
    public static string InvalidPropertyValue(string value, string property, string reason);
    public static string InvalidIntegratedSecureValue(string property);
    public static string InvalidPropertyValueReasonInt(string value);
    public static string PropertyNotSetException(string property);
    public static string CannotSetWhenLoginSecure(string property);
    public static string PropertyNotAvailable(string property);
    public static string ConnectToInvalidVersion(string serverVersion);
    public static string ClassDefaulConstructorCannotBeUsed(string className);
    public static string MethodNotSupported(string methodName);
    public static string ParseError(int line);
    public static string InvalidLockTimeout(int lockTimeout);
    public static string InvalidArgumentCacheCapacity(int capacity);
    public static string InvalidArgumentCacheDuplicateKey(object key);
    public static string CannotLoadType(string typeName);
    public static string AssemblyLoadFailed(string assemblyName, string originalerror);
    public static string UnableToSavePasswordFormat(string userName);
}
public static class Microsoft.SqlServer.Management.Common.TypeConverters : object {
    public static TypeConverter DatabaseEngineEditionTypeConverter;
    public static TypeConverter DatabaseEngineTypeTypeConverter;
    private static TypeConverters();
}
[SuppressUnmanagedCodeSecurityAttribute]
public class Microsoft.SqlServer.Management.Common.WindowsCredential : object {
    private static bool CredRead(string target, CRED_TYPE type, int reservedFlag, IntPtr& CredentialPtr);
    private static bool CredWrite(Credential& userCredential, UInt32 flags);
    private static bool CredFree(IntPtr cred);
    private static bool CredDelete(string targetName, CRED_TYPE type, int flags);
    private static bool CredEnumerate(string targetName, int flags, Int32& count, IntPtr& pCredential);
    private static string GetKey(string repo, string instance, int authType, string user, Guid serverType, string version);
    private static string GetAdsKey(string instance, string database, string authType, string user);
    private static void SetSqlCredential(string targetName, string user, SecureString password);
    private static SecureString GetSqlCredential(string targetName);
    private static void RemoveCredential(string targetName);
    public static void SetSqlSsmsCredential(string instance, int authType, string user, Guid serverType, SecureString password, string version);
    public static void SetSqlRegSvrCredential(string instance, int authType, string user, Guid serverType, SecureString password, string version);
    public static SecureString GetSqlSsmsCredential(string instance, int authType, string user, Guid serverType, string version);
    public static SecureString GetSqlRegSvrCredential(string instance, int authType, string user, Guid serverType, string version);
    public static void RemoveSsmsCredential(string instance, int authType, string user, Guid serverType, string version);
    public static void RemoveRegSvrCredential(string instance, int authType, string user, Guid serverType, string version);
    public static void SetAzureDataStudioCredential(string instance, string database, string authType, string user, SecureString password);
    public static SecureString GetAzureDataStudioCredential(string instance, string database, string authType, string user);
}
internal class Microsoft.SqlServer.Management.Common.WmiMgmtScopeConnection : ConnectionInfoBase {
    private ManagementScope managementScope;
    public ManagementScope ManagementScope { get; public set; }
    public WmiMgmtScopeConnection(ManagementScope managementScope);
    private WmiMgmtScopeConnection(WmiMgmtScopeConnection conn);
    public ManagementScope get_ManagementScope();
    public void set_ManagementScope(ManagementScope value);
    public WmiMgmtScopeConnection Copy();
    protected virtual void ConnectionParmsChanged();
}
public class Microsoft.SqlServer.Server.SqlContext : object {
    public static bool IsAvailable;
    [CompilerGeneratedAttribute]
private static SqlPipe <Pipe>k__BackingField;
    public static SqlPipe Pipe { get; }
    [CompilerGeneratedAttribute]
public static SqlPipe get_Pipe();
}
public class Microsoft.SqlServer.Server.SqlPipe : object {
    public void Send(string message);
}
