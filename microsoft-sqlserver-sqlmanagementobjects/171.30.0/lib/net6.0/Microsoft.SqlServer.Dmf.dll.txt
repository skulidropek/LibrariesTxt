public enum Microsoft.SqlServer.Management.Dmf.AdHocPolicyEvaluationMode : Enum {
    public int value__;
    public static AdHocPolicyEvaluationMode Check;
    public static AdHocPolicyEvaluationMode Configure;
    public static AdHocPolicyEvaluationMode CheckSqlScriptAsProxy;
}
internal static class Microsoft.SqlServer.Management.Dmf.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
internal class Microsoft.SqlServer.Management.Dmf.AttributeOperatorPair : object {
    private static TraceContext traceContext;
    private string attribute;
    private OperatorType opType;
    internal string Attribute { get; }
    internal OperatorType OpType { get; }
    public AttributeOperatorPair(string attribute, OperatorType opType);
    private static AttributeOperatorPair();
    internal string get_Attribute();
    internal OperatorType get_OpType();
}
public class Microsoft.SqlServer.Management.Dmf.Condition : SfcInstance {
    private static TraceContext traceContext;
    private static SfcTsqlProcFormatter scriptDropAction;
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptAlterAction;
    private static SfcTsqlProcFormatter scriptRenameAction;
    private ExpressionNode expressionNode;
    private bool m_bStatesInitialized;
    internal static string typeName;
    private string cachedFacet;
    [CompilerGeneratedAttribute]
private ConditionEvaluationEventHandler EvaluateCondition;
    private Hashtable facetProperties;
    private string validatedFacet;
    [SfcIgnoreAttribute]
public ExpressionNode ExpressionNode { get; public set; }
    [SfcPropertyAttribute("64")]
public bool IsEnumerable { get; }
    [SfcPropertyAttribute("16")]
internal string Expression { get; internal set; }
    public bool HasScript { get; }
    [SfcObjectAttribute("1", "0")]
public PolicyStore Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcPropertyAttribute("0")]
public string Description { get; public set; }
    [SfcPropertyAttribute("512")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("512")]
public string CreatedBy { get; }
    [SfcPropertyAttribute("512")]
public DateTime DateModified { get; }
    [SfcPropertyAttribute("512")]
public string ModifiedBy { get; }
    [SfcPropertyAttribute("16")]
public string Facet { get; public set; }
    internal NameConditionType NameConditionType { get; }
    internal string ObjectName { get; }
    [SfcPropertyAttribute("512")]
public bool IsSystemObject { get; }
    internal bool IsConfigurable { get; }
    private static Condition();
    public Condition(PolicyStore parent, string name);
    public AutomatedPolicyEvaluationMode GetSupportedEvaluationMode();
    public AutomatedPolicyEvaluationMode GetSupportedEvaluationModeOnDomain(string domain);
    public ExpressionNode get_ExpressionNode();
    public void set_ExpressionNode(ExpressionNode value);
    public bool get_IsEnumerable();
    internal string get_Expression();
    internal void set_Expression(string value);
    public bool get_HasScript();
    protected virtual void InitializeUIPropertyState();
    protected virtual void UpdateUIPropertyState();
    public sealed virtual void Create();
    public sealed virtual ISfcScript ScriptCreate();
    protected virtual void PostCreate(object executionResult);
    public sealed virtual void Alter();
    internal void AlterNoValidation();
    public sealed virtual ISfcScript ScriptAlter();
    public sealed virtual void Drop();
    public sealed virtual ISfcScript ScriptDrop();
    public sealed virtual void Rename(string name);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.Rename(SfcKey key);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(SfcKey key);
    [STraceConfigurationAttribute]
public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    [STraceConfigurationAttribute]
public ReadOnlyCollection`1<Policy> EnumDependentPolicies();
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    public PolicyStore get_Parent();
    public void set_Parent(PolicyStore value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public string get_Name();
    private void SetName(string name);
    public int get_ID();
    public string get_Description();
    public void set_Description(string value);
    public DateTime get_CreateDate();
    public string get_CreatedBy();
    public DateTime get_DateModified();
    public string get_ModifiedBy();
    public string get_Facet();
    public void set_Facet(string value);
    internal NameConditionType get_NameConditionType();
    internal string get_ObjectName();
    public bool get_IsSystemObject();
    [STraceConfigurationAttribute]
protected virtual ISfcCollection GetChildCollection(string elementType);
    internal bool get_IsConfigurable();
    internal bool CanBeConfigured(String& message);
    internal void Configure(object target);
    internal string ProduceConfigureScript(object target);
    internal bool Evaluate(object target, AdHocPolicyEvaluationMode evaluationMode);
    [CompilerGeneratedAttribute]
internal void add_EvaluateCondition(ConditionEvaluationEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_EvaluateCondition(ConditionEvaluationEventHandler value);
    internal static List`1<SfcInstanceSerializedData> UpgradeInstance(List`1<SfcInstanceSerializedData> sfcInstanceData, int fileVersion);
    private void RefreshFacetProperties();
    private void Validate(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateProperties(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateExpression(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateReferences(string validationMode, bool throwOnFirst, ValidationState validationState);
    public void Validate(string mode);
    private sealed virtual override ValidationState Microsoft.SqlServer.Management.Sdk.Sfc.ISfcValidate.Validate(string validationMethod, Object[] arguments);
    internal void ValidateDeserialized(Policy policy);
    private void ValidateReferencesDeserialized(Policy policy);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.ConditionCollection : SfcDictionaryCollection`3<Condition, Key, PolicyStore> {
    public Condition Item { get; }
    public ConditionCollection(PolicyStore parent);
    public Condition get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal class Microsoft.SqlServer.Management.Dmf.ConditionEvaluationEventArgs : EventArgs {
    private static TraceContext traceContext;
    private string targetUrn;
    private string targetUrnOnlyId;
    private string targetPsPath;
    private string serverName;
    private bool evaluationResult;
    private bool isConfigurable;
    private string configMessage;
    private object target;
    private Exception exception;
    internal string TargetUrn { get; }
    internal string TargetUrnOnlyId { get; }
    internal string TargetPsPath { get; }
    internal string ServerName { get; }
    internal bool EvaluationResult { get; }
    internal bool IsConfigurable { get; }
    internal string ConfigurationErrorMessage { get; }
    internal object Target { get; }
    internal Exception EvaluationException { get; }
    internal ConditionEvaluationEventArgs(FacetEvaluationContext facetEvaluationContext, string facetType, object target, bool evaluationResult, bool isConfigurable, string configMessage, Exception exception);
    private static ConditionEvaluationEventArgs();
    internal string get_TargetUrn();
    internal string get_TargetUrnOnlyId();
    internal string get_TargetPsPath();
    internal string get_ServerName();
    internal bool get_EvaluationResult();
    internal bool get_IsConfigurable();
    internal string get_ConfigurationErrorMessage();
    internal object get_Target();
    internal Exception get_EvaluationException();
}
public class Microsoft.SqlServer.Management.Dmf.ConditionExtender : SfcObjectExtender`1<Condition> {
    private static TraceContext traceContext;
    private FacetInfoCollection facetsCollection;
    private ReadOnlyCollection`1<FacetInfo> facets;
    private ReadOnlyCollection`1<FacetInfo> rootFacets;
    private ReadOnlyCollection`1<Policy> dependentPolicies;
    [ExtendedPropertyAttribute("Expression")]
public ExpressionNode ExpressionNode { get; public set; }
    [ExtendedPropertyAttribute("Facet")]
public FacetInfo FacetInfo { get; public set; }
    [ExtendedPropertyAttribute]
public ReadOnlyCollection`1<FacetInfo> Facets { get; }
    [ExtendedPropertyAttribute]
public ReadOnlyCollection`1<Policy> DependentPolicies { get; }
    private FacetInfoCollection FacetsCollection { get; }
    [ExtendedPropertyAttribute]
public ReadOnlyCollection`1<FacetInfo> RootFacets { get; }
    public ConditionExtender(Condition condition);
    public ConditionExtender(PolicyStore policyStore, string name);
    private static ConditionExtender();
    public ExpressionNode get_ExpressionNode();
    public void set_ExpressionNode(ExpressionNode value);
    public FacetInfo get_FacetInfo();
    public void set_FacetInfo(FacetInfo value);
    public ReadOnlyCollection`1<FacetInfo> get_Facets();
    public ReadOnlyCollection`1<Policy> get_DependentPolicies();
    private FacetInfoCollection get_FacetsCollection();
    public ReadOnlyCollection`1<FacetInfo> get_RootFacets();
}
internal class Microsoft.SqlServer.Management.Dmf.ConfigurationItem : object {
    private static TraceContext traceContext;
    private string property;
    private object desiredValue;
    internal string Property { get; internal set; }
    internal object DesiredValue { get; internal set; }
    internal ConfigurationItem(string property, object desiredValue);
    private static ConfigurationItem();
    internal string get_Property();
    internal void set_Property(string value);
    internal object get_DesiredValue();
    internal void set_DesiredValue(object value);
}
public class Microsoft.SqlServer.Management.Dmf.ConnectionEvaluationHistory : SfcInstance {
    private static TraceContext traceContext;
    internal static string typeName;
    private EvaluationDetailCollection evaluationHistories;
    [SfcPropertyAttribute("512")]
public int EvaluationId { get; }
    [SfcPropertyAttribute("0")]
public string ServerInstance { get; internal set; }
    [SfcPropertyAttribute("0")]
public string Exception { get; internal set; }
    [SfcObjectAttribute("1", "0")]
public EvaluationHistory Parent { get; internal set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.EvaluationDetail")]
public EvaluationDetailCollection EvaluationDetails { get; }
    [SfcPropertyAttribute("0")]
[SfcKeyAttribute("0")]
public long ID { get; internal set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("0")]
public bool Result { get; internal set; }
    internal ConnectionEvaluationHistory(EvaluationHistory parent);
    private static ConnectionEvaluationHistory();
    public int get_EvaluationId();
    public string get_ServerInstance();
    internal void set_ServerInstance(string value);
    public string get_Exception();
    internal void set_Exception(string value);
    public EvaluationHistory get_Parent();
    internal void set_Parent(EvaluationHistory value);
    [STraceConfigurationAttribute]
protected virtual ISfcCollection GetChildCollection(string elementType);
    public EvaluationDetailCollection get_EvaluationDetails();
    [STraceConfigurationAttribute]
public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    public long get_ID();
    internal void set_ID(long value);
    public Key get_IdentityKey();
    public bool get_Result();
    internal void set_Result(bool value);
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    protected virtual SfcKey CreateIdentityKey();
    internal static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.ConnectionEvaluationHistoryCollection : SfcDictionaryCollection`3<ConnectionEvaluationHistory, Key, EvaluationHistory> {
    public ConnectionEvaluationHistory Item { get; }
    public ConnectionEvaluationHistoryCollection(EvaluationHistory parent);
    public ConnectionEvaluationHistory get_Item(int id);
    public bool Contains(int id);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
[STraceConfigurationAttribute]
internal class Microsoft.SqlServer.Management.Dmf.DmfSqlSmoObjectProxy : SqlSmoObject {
    internal static Server GetServerObj(SqlSmoObject smoObj);
}
public class Microsoft.SqlServer.Management.Dmf.EvaluationDetail : SfcInstance {
    private static TraceContext traceContext;
    internal static string typeName;
    [SfcPropertyAttribute("512")]
public int HistoryId { get; }
    [SfcPropertyAttribute("0")]
public DateTime EvaluationDate { get; internal set; }
    [SfcPropertyAttribute("0")]
public string Exception { get; internal set; }
    [SfcPropertyAttribute("0")]
public string ResultDetail { get; internal set; }
    [SfcPropertyAttribute("0")]
public string TargetQueryExpression { get; internal set; }
    [SfcObjectAttribute("1", "0")]
public ConnectionEvaluationHistory Parent { get; internal set; }
    [SfcPropertyAttribute("0")]
[SfcKeyAttribute("0")]
public long ID { get; internal set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("0")]
public bool Result { get; internal set; }
    internal EvaluationDetail(ConnectionEvaluationHistory parent);
    private static EvaluationDetail();
    public int get_HistoryId();
    public DateTime get_EvaluationDate();
    internal void set_EvaluationDate(DateTime value);
    public string get_Exception();
    internal void set_Exception(string value);
    public string get_ResultDetail();
    internal void set_ResultDetail(string value);
    public string get_TargetQueryExpression();
    internal void set_TargetQueryExpression(string value);
    public ConnectionEvaluationHistory get_Parent();
    internal void set_Parent(ConnectionEvaluationHistory value);
    public long get_ID();
    internal void set_ID(long value);
    public Key get_IdentityKey();
    public bool get_Result();
    internal void set_Result(bool value);
    [STraceConfigurationAttribute]
protected virtual ISfcCollection GetChildCollection(string elementType);
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    protected virtual SfcKey CreateIdentityKey();
    internal static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.EvaluationDetailCollection : SfcDictionaryCollection`3<EvaluationDetail, Key, ConnectionEvaluationHistory> {
    public EvaluationDetail Item { get; }
    public EvaluationDetailCollection(ConnectionEvaluationHistory parent);
    public EvaluationDetail get_Item(int id);
    public bool Contains(int id);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.Dmf.EvaluationFactory : object {
    private static TraceContext traceContext;
    private static Dictionary`2<Type, SupportedTypeAttributes> supportedTypes;
    private static Dictionary`2<TypeClass, List`1<OperatorType>> supportedTypeClass;
    private static List`1<OperatorType> operatorsDefault;
    private static EvaluationFactory();
    [STraceConfigurationAttribute]
public static bool IsTypeSupported(Type type);
    [STraceConfigurationAttribute]
public static bool IsTypeSupportedForConstant(Type type);
    public static List`1<OperatorType> SupportedOperators(Type type);
    public static List`1<OperatorType> SupportedOperators(TypeClass typeClass);
    public static string LikeToRegex(string likePattern);
    [STraceConfigurationAttribute]
internal static TypeClass ClassifyType(object obj);
    [STraceConfigurationAttribute]
internal static TypeClass ClassifyType(Type type);
    internal static Evaluator ConstructEvaluator(object left, object right, OperatorType opType, FacetEvaluationContext context);
    internal static bool Evaluate(object left, object right, OperatorType opType, FacetEvaluationContext context);
    internal static bool Evaluate(object left, object right, OperatorType opType);
}
public class Microsoft.SqlServer.Management.Dmf.EvaluationHistory : SfcInstance {
    private static TraceContext traceContext;
    internal static string typeName;
    private ConnectionEvaluationHistoryCollection evaluationHistories;
    [SfcPropertyAttribute("0")]
public string PolicyName { get; internal set; }
    [SfcPropertyAttribute("0")]
public DateTime StartDate { get; internal set; }
    [SfcPropertyAttribute("0")]
public DateTime EndDate { get; internal set; }
    [SfcPropertyAttribute("0")]
public string Exception { get; internal set; }
    [SfcObjectAttribute("1", "0")]
public Policy Parent { get; internal set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.ConnectionEvaluationHistory")]
public ConnectionEvaluationHistoryCollection ConnectionEvaluationHistories { get; }
    [SfcPropertyAttribute("0")]
[SfcKeyAttribute("0")]
public long ID { get; internal set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("0")]
public bool Result { get; internal set; }
    internal EvaluationHistory(Policy parent);
    private static EvaluationHistory();
    public string get_PolicyName();
    internal void set_PolicyName(string value);
    public DateTime get_StartDate();
    internal void set_StartDate(DateTime value);
    public DateTime get_EndDate();
    internal void set_EndDate(DateTime value);
    public string get_Exception();
    internal void set_Exception(string value);
    public Policy get_Parent();
    internal void set_Parent(Policy value);
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public ConnectionEvaluationHistoryCollection get_ConnectionEvaluationHistories();
    [STraceConfigurationAttribute]
public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    public long get_ID();
    internal void set_ID(long value);
    public Key get_IdentityKey();
    public bool get_Result();
    internal void set_Result(bool value);
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    protected virtual SfcKey CreateIdentityKey();
    internal static SfcTypeMetadata GetTypeMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.EvaluationHistoryCollection : SfcDictionaryCollection`3<EvaluationHistory, Key, Policy> {
    public EvaluationHistory Item { get; }
    public EvaluationHistoryCollection(Policy parent);
    public EvaluationHistory get_Item(long id);
    public bool Contains(long id);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal abstract class Microsoft.SqlServer.Management.Dmf.Evaluator : object {
    private static TraceContext traceContext;
    private static Evaluator();
    public abstract virtual bool Evaluate(OperatorType opType);
    public abstract virtual void SetEvaluatorObjects(object left, object right);
    [STraceConfigurationAttribute]
internal static double ConvertToDouble(object number);
    internal static long ConvertToLong(object number);
    [STraceConfigurationAttribute]
internal static string ConvertToString(object str);
    [STraceConfigurationAttribute]
internal static bool ConvertToBool(object b);
    [STraceConfigurationAttribute]
internal static DateTime ConvertToDateTime(object dt);
    [STraceConfigurationAttribute]
internal static Guid ConvertToGuid(object guid);
    [STraceConfigurationAttribute]
internal static Array ConvertToArray(object array);
    internal static object ConvertToAny(object input, TypeClass typeClass);
}
internal abstract class Microsoft.SqlServer.Management.Dmf.EvaluatorArray : Evaluator {
    private static TraceContext traceContext;
    private Array left;
    private Array right;
    private object inObject;
    private Evaluator evaluator;
    protected Array Left { get; protected set; }
    protected Array Right { get; protected set; }
    protected object InObject { get; protected set; }
    protected Evaluator Evaluator { get; protected set; }
    private static EvaluatorArray();
    protected Array get_Left();
    protected void set_Left(Array value);
    protected Array get_Right();
    protected void set_Right(Array value);
    protected object get_InObject();
    protected void set_InObject(object value);
    protected Evaluator get_Evaluator();
    protected void set_Evaluator(Evaluator value);
    public static Evaluator ConstructEvaluator(object arg);
    protected bool ArraysEqual();
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorArrayNumeric : EvaluatorArray {
    private static TraceContext traceContext;
    private static EvaluatorArrayNumeric();
    public virtual void SetEvaluatorObjects(object left, object right);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorArrayString : EvaluatorArray {
    private static TraceContext traceContext;
    internal EvaluatorArrayString(FacetEvaluationContext context);
    private static EvaluatorArrayString();
    public virtual void SetEvaluatorObjects(object left, object right);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorBitmappedEnum : Evaluator {
    private static TraceContext traceContext;
    private object left;
    private object right;
    private static EvaluatorBitmappedEnum();
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorBool : Evaluator {
    private static TraceContext traceContext;
    private bool left;
    private bool right;
    private static EvaluatorBool();
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorDateTime : Evaluator {
    private static TraceContext traceContext;
    private DateTime left;
    private DateTime right;
    private static EvaluatorDateTime();
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorDBNull : Evaluator {
    private static TraceContext traceContext;
    private object left;
    private object right;
    private static EvaluatorDBNull();
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorGuid : Evaluator {
    private static TraceContext traceContext;
    private Guid left;
    private Guid right;
    private static EvaluatorGuid();
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorNull : Evaluator {
    private static TraceContext traceContext;
    private object left;
    private object right;
    private static EvaluatorNull();
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorNumeric : Evaluator {
    private static TraceContext traceContext;
    private double left;
    private double right;
    private bool hasEnum;
    public double Left { get; public set; }
    public double Right { get; public set; }
    private static EvaluatorNumeric();
    public double get_Left();
    public void set_Left(double value);
    public double get_Right();
    public void set_Right(double value);
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
}
internal class Microsoft.SqlServer.Management.Dmf.EvaluatorString : Evaluator {
    private static TraceContext traceContext;
    private string left;
    private string right;
    private IComparer stringComparer;
    private CompareOptions compareOptions;
    public string Left { get; public set; }
    public string Right { get; public set; }
    internal EvaluatorString(FacetEvaluationContext context);
    private static EvaluatorString();
    public string get_Left();
    public void set_Left(string value);
    public string get_Right();
    public void set_Right(string value);
    public virtual void SetEvaluatorObjects(object left, object right);
    public virtual bool Evaluate(OperatorType opType);
    private bool EvaluateLike(string str, string likePattern);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Dmf.ExceptionTemplatesSR : object {
    public static CultureInfo Culture { get; public set; }
    public static string Policy { get; }
    public static string Condition { get; }
    public static string ObjectSet { get; }
    public static string Category { get; }
    public static string RootCondition { get; }
    public static string EvaluationMode { get; }
    public static string Schedule { get; }
    public static string Enabled { get; }
    public static string TargetSet { get; }
    public static string ManagementFacet { get; }
    public static string Property { get; }
    public static string ObjectType { get; }
    public static string PolicyStore { get; }
    public static string CategorySubscription { get; }
    public static string ConsistencyRepair { get; }
    public static string EraseSystemHealthPhantomRecords { get; }
    public static string ValuePositive { get; }
    public static string PurgeHealthState { get; }
    public static string MarkSystemObject { get; }
    public static string DefaultCategory { get; }
    public static string EvaluationModeNoneDescription { get; }
    public static string EvaluationModeEnforceDescription { get; }
    public static string EvaluationModeCoCDescription { get; }
    public static string EvaluationModeCoSDescription { get; }
    public static string AdditionalHelpText { get; }
    public static string AdditionalHelpLink { get; }
    public static string CheckMode { get; }
    public static string ConfigureMode { get; }
    public static string CheckSqlScriptAsProxyMode { get; }
    public static string EvaluatingOperatorNone { get; }
    public static string ExpressionNodeNotConfigurableGeneric { get; }
    public static string ParsingUnclosedBracketMsg { get; }
    public static string ParsingUnclosedParenthesisMsg { get; }
    public static string ParsingMissingQuotes { get; }
    public static string ParsingMissingElement { get; }
    public static string ParsingSyntaxError { get; }
    public static string LeftOperand { get; }
    public static string RightOperand { get; }
    public static string InvalidList { get; }
    public static string FunctionTooManyColumns { get; }
    public static string CannotProduceScript { get; }
    public static string NoConfigureScriptForCompliantObject { get; }
    public static string CannotMoveToElement { get; }
    public static string UnknownPolicy { get; }
    public static string InvalidOrMissingXMLReader { get; }
    public static string SinglePolicyDeserializationFailed { get; }
    public static string PolicyImportFileDoesNotHaveAnyPolicy { get; }
    public static string ConditionIsNull { get; }
    public static string ObjectSetIsNull { get; }
    public static string IncompatiblePolicyEvaluationMode { get; }
    public static string OnlyOneConditionExpression { get; }
    public static string OnlyInSqlClr { get; }
    public static string OnlyInMsdb { get; }
    public static string NullArgInPolicyEvaluation { get; }
    public static string FailedToRetrieveImpersonationCookie { get; }
    public static string CantExecuteLongSqlScriptOn2000 { get; }
    public static string PolicyCategoryAlreadySubscribed { get; }
    public static string PolicyCategoryNotSubscribed { get; }
    public static string Function { get; }
    public static string Operator { get; }
    public static string PolicyWithNoFilters { get; }
    public static string MissingJobSchedule { get; }
    public static string InvalidHelpLinkMessage { get; }
    public static string ReferencedConditionsCannotContainScript { get; }
    public static string FacetNotSupported { get; }
    public static string EnumApplicablePolicies { get; }
    public static string CalculateHealthState { get; }
    public static string GetAggregatedHealthState { get; }
    public static string CannotChangeFacet { get; }
    public static string CannotChangeFacetForObjectSet { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Policy();
    public static string get_Condition();
    public static string get_ObjectSet();
    public static string get_Category();
    public static string get_RootCondition();
    public static string get_EvaluationMode();
    public static string get_Schedule();
    public static string get_Enabled();
    public static string get_TargetSet();
    public static string get_ManagementFacet();
    public static string get_Property();
    public static string get_ObjectType();
    public static string get_PolicyStore();
    public static string get_CategorySubscription();
    public static string get_ConsistencyRepair();
    public static string get_EraseSystemHealthPhantomRecords();
    public static string get_ValuePositive();
    public static string get_PurgeHealthState();
    public static string get_MarkSystemObject();
    public static string get_DefaultCategory();
    public static string get_EvaluationModeNoneDescription();
    public static string get_EvaluationModeEnforceDescription();
    public static string get_EvaluationModeCoCDescription();
    public static string get_EvaluationModeCoSDescription();
    public static string get_AdditionalHelpText();
    public static string get_AdditionalHelpLink();
    public static string get_CheckMode();
    public static string get_ConfigureMode();
    public static string get_CheckSqlScriptAsProxyMode();
    public static string get_EvaluatingOperatorNone();
    public static string get_ExpressionNodeNotConfigurableGeneric();
    public static string get_ParsingUnclosedBracketMsg();
    public static string get_ParsingUnclosedParenthesisMsg();
    public static string get_ParsingMissingQuotes();
    public static string get_ParsingMissingElement();
    public static string get_ParsingSyntaxError();
    public static string get_LeftOperand();
    public static string get_RightOperand();
    public static string get_InvalidList();
    public static string get_FunctionTooManyColumns();
    public static string get_CannotProduceScript();
    public static string get_NoConfigureScriptForCompliantObject();
    public static string get_CannotMoveToElement();
    public static string get_UnknownPolicy();
    public static string get_InvalidOrMissingXMLReader();
    public static string get_SinglePolicyDeserializationFailed();
    public static string get_PolicyImportFileDoesNotHaveAnyPolicy();
    public static string get_ConditionIsNull();
    public static string get_ObjectSetIsNull();
    public static string get_IncompatiblePolicyEvaluationMode();
    public static string get_OnlyOneConditionExpression();
    public static string get_OnlyInSqlClr();
    public static string get_OnlyInMsdb();
    public static string get_NullArgInPolicyEvaluation();
    public static string get_FailedToRetrieveImpersonationCookie();
    public static string get_CantExecuteLongSqlScriptOn2000();
    public static string get_PolicyCategoryAlreadySubscribed();
    public static string get_PolicyCategoryNotSubscribed();
    public static string get_Function();
    public static string get_Operator();
    public static string get_PolicyWithNoFilters();
    public static string get_MissingJobSchedule();
    public static string get_InvalidHelpLinkMessage();
    public static string get_ReferencedConditionsCannotContainScript();
    public static string get_FacetNotSupported();
    public static string get_EnumApplicablePolicies();
    public static string get_CalculateHealthState();
    public static string get_GetAggregatedHealthState();
    public static string get_CannotChangeFacet();
    public static string get_CannotChangeFacetForObjectSet();
    public static string NoSuchCollection(string name);
    public static string UnsupportedObjectType(string type, string host);
    public static string UnknownEnumeration(string type);
    public static string InvalidArgument(string arg);
    public static string ObjectCannotBeCreated(string obj);
    public static string TooManyURNsReturned(string type);
    public static string RootConditionFailed(string type);
    public static string UnsupportedConnectionType(string type);
    public static string NotSupported(string host_type, string host_name, string object_type, string object_name);
    public static string ObjectAlreadyExists(string object, string name);
    public static string ObjectDoesntExist(string object, string name);
    public static string ArgumentNullOrEmpty(string argument);
    public static string FailedOperation(string opName, string objType, string objName);
    public static string CannotMarkSystemObject(string objType);
    public static string AdapterAlreadyExists(string interface, string object);
    public static string AdapterHasTooManyArguments(string name);
    public static string AssemblyAlreadyRegistered(string name);
    public static string FailedMethodCall(string methodName, string facetType, string targetName);
    public static string ConfigValueMismatch(string propertyName, string configValue, string runValue);
    public static string OperatorNotApplicable(string operator, string type);
    public static string FunctionWrongArgumentsNumber(string function, int argsReceived, int argsExpected);
    public static string FunctionWrongArgumentType(string function, string typeReceived, string typeExpected);
    public static string ExpressionTypeMistmatch(string typeLeft, string typeRight);
    public static string NullFacet(string facet);
    public static string BadExpressionTree(string reason);
    public static string ExpressionNodeNotConfigurable(string subtype);
    public static string ExpressionNodeNotConfigurableOperators(string propertyName, string expression);
    public static string UnsupportedTargetFilter(string filter);
    public static string ParsingError(string input);
    public static string ParsingArgumentException(string pattern, string message);
    public static string ParsingUnquotedDatePart(string input);
    public static string UnsupportedFunction(string type);
    public static string InvalidOperand(string type, string operand);
    public static string NonConfigurableReadOnlyProperty(string propertyName);
    public static string InvalidInOperator(string operator);
    public static string FunctionWrongReturnType(string function, string typeReceived, string typeExpected);
    public static string FunctionNotASmoObject(string functionName, string targetType);
    public static string WmiException(string message);
    public static string PropertyCannotBeSet(string prop);
    public static string UnexpectedElement(string nameRead, string nameExpected);
    public static string UnexpectedType(string typeRead, string nameRead, string typeExpected);
    public static string UnexpectedName(string typeRead, string nameRead, string typeExpected, string nameExpected);
    public static string CannotConvertToType(string inputString, string typeName);
    public static string UnsupportedConstantType(string node, string typeName);
    public static string SinglePolicyExpected(string policyName, string policyName2);
    public static string ReferencedObjectExpected(string objectType, string objectName);
    public static string PolicyAndConditionNameMismatch(string policyName, string policyCondition, string conditionName);
    public static string ObjectSetAndConditionFacetMismatch(string objectSetName, string objectSetFacet, string conditionName, string conditionFacet);
    public static string OnlyOneTarget(string queryExpression);
    public static string MissingPolicy(string name);
    public static string MissingProperty(string name);
    public static string NonRetrievableProperty(string name);
    public static string RollBack(string policy, string objectQe, string condition, string description, string helpText, string helpLink, string statement);
    public static string OnlyRoleMember(string role);
    public static string PolicyEvaluationFailed(string policyName);
    public static string PolicyEvaluationFailedOnDelegate(string policyName);
    public static string PolicyEvaluationFailedNoException(string policyName);
    public static string BadEventData(string element, string eventName);
    public static string MissingTypeFacetAssociation(string typeName, string facet);
    public static string NoScriptInSqlClr(string policy);
    public static string PolicyViolated(string policy);
    public static string PolicyViolatedTarget(string policy, string targetName);
    public static string ConversionNotSupported(string obj, string type);
    public static string TypeNotSupported(string type);
    public static string ScheduleDoesntExist(string guid);
    public static string ValidationFailed(string objectType, string objectName);
    public static string StringPropertyTooLong(string propertyName, int maxLength, int currentLength);
    public static string UnknownTargetDatabase(string policy, string name);
    public static string UnsupportedTqe(string queryEx);
    public static string UnsupportedKey(string key);
    public static string UnsupportedTqeProp(string queryEx, string prop);
    public static string UnsupportedCrudDependencyAction(string action);
    public static string InvalidUrnSkeleton(string action);
    public static string TargetSetCountMismatch(string objectSetName, string facetName);
    public static string UnsupportedTargetSetForFacet(string targetSetSkeleton, string objectSetName, string facetName);
    public static string NoTargetSetEnabled(string objectSetName);
    public static string ConditionCannotBeUsedForFiltering(string condition);
    public static string ObjectSetAlreadyReferenced(string objectSetName, string policyName);
    public static string VersionNotSupported(string curVerison, string minVersion);
}
public abstract class Microsoft.SqlServer.Management.Dmf.ExpressionNode : object {
    private static TraceContext traceContext;
    private static string cXmlTagResultObjType;
    private static string cXmlTagResultValue;
    private static string cXmlTagCount;
    private static string cXmlTagTypeClass;
    private ExpressionNodeType nodeType;
    private string tag;
    private TypeClass typeClass;
    private object lastEvaluationResult;
    private NameConditionType nameConditionType;
    private string objectName;
    private bool hasScript;
    private bool filterNodeCompatible;
    protected object LastEvaluationResult { get; protected set; }
    public ExpressionNodeType Type { get; }
    public string Tag { get; public set; }
    public TypeClass TypeClass { get; }
    internal NameConditionType NameConditionType { get; }
    internal string ObjectName { get; }
    internal bool HasScript { get; }
    internal bool FilterNodeCompatible { get; }
    private static ExpressionNode();
    protected object get_LastEvaluationResult();
    protected void set_LastEvaluationResult(object value);
    public ExpressionNodeType get_Type();
    protected void SetNodeType(ExpressionNodeType value);
    public string get_Tag();
    public void set_Tag(string value);
    public TypeClass get_TypeClass();
    protected void SetTypeClass(TypeClass value);
    internal NameConditionType get_NameConditionType();
    protected void SetNameConditionType(NameConditionType value);
    internal string get_ObjectName();
    protected void SetObjectName(string value);
    internal bool get_HasScript();
    protected void SetHasScript(bool value);
    internal bool get_FilterNodeCompatible();
    protected void SetFilterNodeCompatible(bool value);
    protected virtual void SetProperties();
    [STraceConfigurationAttribute]
public virtual ExpressionNode DeepClone();
    internal virtual void ResetResult();
    public object Evaluate(FacetEvaluationContext context);
    public object Evaluate(FacetEvaluationContext context, bool checkSqlScriptAsProxy);
    [STraceConfigurationAttribute]
internal virtual object DoEvaluate(FacetEvaluationContext context, bool checkSqlScriptAsProxy);
    internal virtual void AnalyzeForConfiguration(List`1<ConfigurationItem> configurationList);
    [STraceConfigurationAttribute]
public object GetResult();
    public string GetResultString();
    [STraceConfigurationAttribute]
public virtual IEnumerable`1<ExpressionNode> EnumChildren();
    internal IEnumerable`1<string> EnumAttributes();
    protected virtual void DoEnumAttributes(List`1<string> list);
    internal List`1<AttributeOperatorPair> EnumAttributeOperatorPairs();
    internal virtual void DoEnumAttributeOperatorPairs(List`1<AttributeOperatorPair> list);
    public virtual string ToString();
    [STraceConfigurationAttribute]
public virtual string ToStringForDisplay();
    public virtual int GetHashCode();
    [STraceConfigurationAttribute]
public virtual bool Equals(object obj);
    protected abstract virtual bool EqualProperties(object obj);
    [STraceConfigurationAttribute]
public void Serialize(XmlWriter xmlWriter);
    [STraceConfigurationAttribute]
internal void SerializeWithResult(XmlWriter xw);
    protected virtual void SerializeProperties(XmlWriter xw, bool includeResult);
    [STraceConfigurationAttribute]
protected void SerializeResult(XmlWriter xw);
    [STraceConfigurationAttribute]
protected void DeserializeResult(XmlReader xr);
    protected virtual void DeserializeProperties(XmlReader xr, bool includeResult);
    protected void ReadEndElement(XmlReader xr);
    protected static void ReadWithCheck(XmlReader xr, XmlNodeType nodeType, string name);
    [STraceConfigurationAttribute]
protected static void MoveToElementWithCheck(XmlReader xr, string name);
    protected static string ReadElementWithCheck(XmlReader xr, string name);
    protected static List`1<string> ReadNodeWithCheck(XmlReader xr, String[] elements);
    [STraceConfigurationAttribute]
protected static List`1<string> ReadSimpleNodeWithCheck(XmlReader xr, ExpressionNodeType type, String[] elements);
    public static ExpressionNode Deserialize(string value);
    public static ExpressionNode DeserializeWithResult(string value);
    public static ExpressionNode Deserialize(XmlReader xr);
    internal static ExpressionNode DeserializeWithResult(XmlReader xr);
    private static ExpressionNode DoDeserialize(XmlReader xr, bool includeResult);
    public static string SerializeNode(ExpressionNode node);
    [STraceConfigurationAttribute]
public static string SerializeNodeWithResult(ExpressionNode node);
    [STraceConfigurationAttribute]
public static T MatchType(string value);
    [STraceConfigurationAttribute]
protected static string ConvertToString(object value);
    protected static object ResolveEnum(string stringObjType, string stringValue);
    protected static object ConvertFromString(string stringObjType, string stringValue);
    protected static int ConvertToIntWithCheck(string value);
    public static ExpressionNode Parse(string input);
    public static ExpressionNode Parse(string input, Type facet);
    private static void CheckForDateFunctions(string input);
    public static ExpressionNode ConvertFromFilterNode(FilterNode filterNode);
    public static ExpressionNode ConvertFromFilterNode(FilterNode filterNode, Type facet);
    public FilterNode ConvertToFilterNode();
    protected virtual FilterNode DoConvertToFilterNode();
    [STraceConfigurationAttribute]
public static ExpressionNode ConstructNode(object obj);
    public string ToStringForUrn();
}
public class Microsoft.SqlServer.Management.Dmf.ExpressionNodeAttribute : ExpressionNode {
    private static TraceContext traceContext;
    private static string cXmlTagName;
    private string mName;
    public string Name { get; }
    public ExpressionNodeAttribute(string name);
    public ExpressionNodeAttribute(string name, Type facet);
    private static ExpressionNodeAttribute();
    public string get_Name();
    public virtual string ToString();
    [STraceConfigurationAttribute]
public virtual string ToStringForDisplay();
    [STraceConfigurationAttribute]
protected virtual bool EqualProperties(object obj);
    internal virtual object DoEvaluate(FacetEvaluationContext context, bool checkSqlScriptAsProxy);
    [STraceConfigurationAttribute]
protected virtual void SerializeProperties(XmlWriter xw, bool includeResult);
    [STraceConfigurationAttribute]
protected virtual void DeserializeProperties(XmlReader xr, bool includeResult);
    protected virtual FilterNode DoConvertToFilterNode();
    [STraceConfigurationAttribute]
public virtual ExpressionNode DeepClone();
    [STraceConfigurationAttribute]
protected virtual void DoEnumAttributes(List`1<string> list);
}
public abstract class Microsoft.SqlServer.Management.Dmf.ExpressionNodeChildren : ExpressionNode {
    private static TraceContext traceContext;
    private static string cXmlTagCount;
    private List`1<ExpressionNode> childrenList;
    protected List`1<ExpressionNode> ChildrenList { get; protected set; }
    public IEnumerable`1<ExpressionNode> EnumerableChildrenList { get; }
    public int Count { get; }
    private static ExpressionNodeChildren();
    protected List`1<ExpressionNode> get_ChildrenList();
    protected void set_ChildrenList(List`1<ExpressionNode> value);
    public IEnumerable`1<ExpressionNode> get_EnumerableChildrenList();
    [STraceConfigurationAttribute]
public virtual IEnumerable`1<ExpressionNode> EnumChildren();
    public int get_Count();
    protected virtual void Add(ExpressionNode node);
    [STraceConfigurationAttribute]
protected virtual bool EqualProperties(object obj);
    internal virtual void ResetResult();
    internal virtual void AnalyzeForConfiguration(List`1<ConfigurationItem> configurationList);
    protected virtual void DoEnumAttributes(List`1<string> list);
    internal virtual void DoEnumAttributeOperatorPairs(List`1<AttributeOperatorPair> list);
    public virtual string ToString();
    [STraceConfigurationAttribute]
protected virtual void SerializeProperties(XmlWriter xw, bool includeResult);
    protected virtual void DeserializeProperties(XmlReader xr, bool includeResult);
}
public class Microsoft.SqlServer.Management.Dmf.ExpressionNodeConstant : ExpressionNode {
    private static TraceContext traceContext;
    private static string cXmlTagObjType;
    private static string cXmlTagValue;
    private object mObject;
    public object Value { get; }
    public ExpressionNodeConstant(object obj);
    private static ExpressionNodeConstant();
    public object get_Value();
    public virtual string ToString();
    [STraceConfigurationAttribute]
public virtual string ToStringForDisplay();
    [STraceConfigurationAttribute]
protected virtual bool EqualProperties(object obj);
    internal virtual void ResetResult();
    [STraceConfigurationAttribute]
internal virtual object DoEvaluate(FacetEvaluationContext context, bool checkSqlScriptAsProxy);
    [STraceConfigurationAttribute]
protected virtual void SerializeProperties(XmlWriter xw, bool includeResult);
    protected virtual void DeserializeProperties(XmlReader xr, bool includeResult);
    protected virtual FilterNode DoConvertToFilterNode();
    [STraceConfigurationAttribute]
public virtual ExpressionNode DeepClone();
}
public class Microsoft.SqlServer.Management.Dmf.ExpressionNodeFunction : ExpressionNodeChildren {
    private static TraceContext traceContext;
    private static string cXmlTagFuncType;
    private static string cXmlTagReturnType;
    private Function mFunctionType;
    private TypeClass mReturnType;
    private List`1<object> mArgs;
    private static Dictionary`2<Function, TypeClass[]> functionDefs;
    private FacetEvaluationContext mcontext;
    public Function FunctionType { get; }
    public TypeClass ReturnType { get; }
    public static Dictionary`2<Function, TypeClass[]> FunctionsDefinitions { get; }
    private static ExpressionNodeFunction();
    public ExpressionNodeFunction(Function functionType, ExpressionNode[] args);
    public Function get_FunctionType();
    public TypeClass get_ReturnType();
    public static Dictionary`2<Function, TypeClass[]> get_FunctionsDefinitions();
    protected virtual void SetProperties();
    public virtual string ToString();
    [STraceConfigurationAttribute]
public virtual string ToStringForDisplay();
    protected virtual bool EqualProperties(object obj);
    internal virtual void ResetResult();
    private void GetParameters(FacetEvaluationContext context, Function funcType, bool checkSqlScriptAsProxy);
    internal virtual object DoEvaluate(FacetEvaluationContext context, bool checkSqlScriptAsProxy);
    private object EvaluateExecuteSqlScalar(bool checkSqlScriptAsProxy);
    private object EvaluateExecuteWqlScalar();
    private object EvaluateGetDate();
    private object EvaluateDateAdd();
    private object EvaluateDatePart();
    private object EvaluateLen();
    private object EvaluateUpper();
    private object EvaluateLower();
    private object EvaluateAdd();
    private object EvaluateSubtract();
    private object EvaluateMultiply();
    private object EvaluateDivide();
    private object EvaluatePower();
    private object EvaluateModulus();
    private object EvaluateRound();
    private object EvaluateBitwiseAnd();
    private object EvaluateBitwiseOr();
    private Object[] EvaluateArray();
    private double EvaluateSum();
    private double EvaluateAvg();
    private double EvaluateCount();
    private object EvaluateIsNull();
    private object EvaluateEnum();
    private object EvaluateTrue();
    private object EvaluateFalse();
    private object EvaluateDateTime();
    private object EvaluateString();
    private object EvaluateConcatenate();
    private object EvaluateEscape();
    private object EvaluateGuid();
    protected virtual void SerializeProperties(XmlWriter xw, bool includeResult);
    protected virtual void DeserializeProperties(XmlReader xr, bool includeResult);
    protected virtual FilterNode DoConvertToFilterNode();
    public virtual ExpressionNode DeepClone();
}
public class Microsoft.SqlServer.Management.Dmf.ExpressionNodeGroup : ExpressionNodeChildren {
    private static TraceContext traceContext;
    public ExpressionNode Group { get; public set; }
    public ExpressionNodeGroup(ExpressionNode node);
    private static ExpressionNodeGroup();
    public ExpressionNode get_Group();
    public void set_Group(ExpressionNode value);
    protected virtual void SetProperties();
    internal virtual void ResetResult();
    internal virtual object DoEvaluate(FacetEvaluationContext context, bool checkSqlScriptAsProxy);
    protected virtual void DeserializeProperties(XmlReader xr, bool includeResult);
    public virtual ExpressionNode DeepClone();
    protected virtual FilterNode DoConvertToFilterNode();
}
public class Microsoft.SqlServer.Management.Dmf.ExpressionNodeOperator : ExpressionNodeChildren {
    private static TraceContext traceContext;
    private static string cXmlTagOpType;
    private OperatorType mOpType;
    internal static List`1<Type> numericTypes;
    internal static List`1<Type> stringTypes;
    internal static List`1<OperatorType> operatorsFilterNode;
    public OperatorType OpType { get; }
    public ExpressionNode Left { get; public set; }
    public ExpressionNode Right { get; public set; }
    public ExpressionNodeOperator(OperatorType type, ExpressionNode left, ExpressionNode right);
    private static ExpressionNodeOperator();
    public OperatorType get_OpType();
    public virtual ExpressionNode DeepClone();
    [STraceConfigurationAttribute]
private bool ValidOperandNode(ExpressionNode node);
    protected virtual void SetProperties();
    public ExpressionNode get_Left();
    public void set_Left(ExpressionNode value);
    public ExpressionNode get_Right();
    public void set_Right(ExpressionNode value);
    [STraceConfigurationAttribute]
public static string OperatorTypeToString(OperatorType type);
    public static OperatorType OperatorTypeFromString(string opType);
    public virtual string ToString();
    [STraceConfigurationAttribute]
protected virtual bool EqualProperties(object obj);
    internal virtual void ResetResult();
    internal virtual object DoEvaluate(FacetEvaluationContext context, bool checkSqlScriptAsProxy);
    internal virtual void AnalyzeForConfiguration(List`1<ConfigurationItem> configurationList);
    protected virtual void SerializeProperties(XmlWriter xw, bool includeResult);
    protected virtual void DeserializeProperties(XmlReader xr, bool includeResult);
    [STraceConfigurationAttribute]
public static List`1<OperatorType> SupportedFilterOperators(Type type, AutomatedPolicyEvaluationMode mode);
    [STraceConfigurationAttribute]
internal static OperatorType ConvertType(Type ftype);
    [STraceConfigurationAttribute]
internal static Type ConvertType(OperatorType type);
    protected virtual FilterNode DoConvertToFilterNode();
}
public enum Microsoft.SqlServer.Management.Dmf.ExpressionNodeType : Enum {
    public int value__;
    public static ExpressionNodeType Base;
    public static ExpressionNodeType Constant;
    public static ExpressionNodeType Attribute;
    public static ExpressionNodeType Operator;
    public static ExpressionNodeType Function;
    public static ExpressionNodeType Group;
}
public class Microsoft.SqlServer.Management.Dmf.FacetInfo : object {
    private Type facetType;
    private LocalizableTypeConverter typeConverter;
    private FacetEvaluationContext context;
    private object lastTarget;
    private string displayName;
    private string description;
    public string Name { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public Type FacetType { get; }
    public ReadOnlyCollection`1<Type> TargetTypes { get; }
    public AutomatedPolicyEvaluationMode EvaluationMode { get; }
    public PropertyDescriptorCollection FacetPropertyDescriptors { get; }
    public ReadOnlyCollection`1<PropertyInfo> FacetProperties { get; }
    private LocalizableTypeConverter TypeConverter { get; }
    internal FacetInfo(Type facetType);
    internal FacetInfo(string facetShortName);
    public string get_Name();
    public string get_DisplayName();
    public virtual string ToString();
    public string get_Description();
    public Type get_FacetType();
    public ReadOnlyCollection`1<Type> get_TargetTypes();
    public AutomatedPolicyEvaluationMode get_EvaluationMode();
    public PropertyDescriptorCollection get_FacetPropertyDescriptors();
    public ReadOnlyCollection`1<PropertyInfo> get_FacetProperties();
    public object GetTargetProperty(string propName, object target);
    private LocalizableTypeConverter get_TypeConverter();
    private FacetEvaluationContext GetAdapter(object target);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override int System.IComparable.CompareTo(object other);
}
public class Microsoft.SqlServer.Management.Dmf.FacetInfoCollection : KeyedCollection`2<string, FacetInfo> {
    protected virtual string GetKeyForItem(FacetInfo item);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Dmf.FacetPropertiesSR : object {
    public static CultureInfo Culture { get; public set; }
    public static string OffByDefault_AdHocDistributedQueriesEnabled { get; }
    public static string OffByDefault_DatabaseMailEnabled { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_OffByDefault_AdHocDistributedQueriesEnabled();
    public static string get_OffByDefault_DatabaseMailEnabled();
    public static string ConditionExpressionOnObject(string policy);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Dmf.LocalizableResources : object {
    public static CultureInfo Culture { get; public set; }
    public static string PolicyStore_Name { get; }
    public static string PolicyStore_Desc { get; }
    public static string PolicyStore_EnabledName { get; }
    public static string PolicyStore_EnabledDesc { get; }
    public static string PolicyStore_HistoryRetentionInDaysName { get; }
    public static string PolicyStore_HistoryRetentionInDaysDesc { get; }
    public static string PolicyStore_LogOnSuccessName { get; }
    public static string PolicyStore_LogOnSuccessDesc { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_PolicyStore_Name();
    public static string get_PolicyStore_Desc();
    public static string get_PolicyStore_EnabledName();
    public static string get_PolicyStore_EnabledDesc();
    public static string get_PolicyStore_HistoryRetentionInDaysName();
    public static string get_PolicyStore_HistoryRetentionInDaysDesc();
    public static string get_PolicyStore_LogOnSuccessName();
    public static string get_PolicyStore_LogOnSuccessDesc();
}
internal class Microsoft.SqlServer.Management.Dmf.LogPolicyEvents : object {
    private static TraceContext traceContext;
    private static SfcTsqlProcFormatter scriptLogEvaluationStart;
    private static SfcTsqlProcFormatter scriptLogEvaluationEnd;
    private static SfcTsqlProcFormatter scriptLogEvaluationDetail;
    private long historyId;
    private ServerConnection serverConnection;
    internal long HistoryId { get; }
    private static LogPolicyEvents();
    internal LogPolicyEvents(ServerConnection serverConnection);
    internal long get_HistoryId();
    internal void LogPolicyEvaluationStart(int policyId, bool isFullRun);
    internal void LogPolicyEvaluationDetail(Condition policyCondition, ConditionEvaluationEventArgs eventArgs);
    internal void LogPolicyEvaluationEnd(bool result, Exception exception);
}
public enum Microsoft.SqlServer.Management.Dmf.NameConditionType : Enum {
    public int value__;
    public static NameConditionType None;
    public static NameConditionType Equal;
    public static NameConditionType Like;
    public static NameConditionType NotEqual;
    public static NameConditionType NotLike;
}
public class Microsoft.SqlServer.Management.Dmf.ObjectSet : SfcInstance {
    private static TraceContext traceContext;
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptDropAction;
    private TargetSetCollection m_TargetSets;
    internal static string typeName;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.TargetSet")]
public TargetSetCollection TargetSets { get; }
    internal bool TargetsDatabaseObjects { get; }
    internal bool HasScript { get; }
    internal string RootLevel { get; }
    [SfcObjectAttribute("1", "0")]
public PolicyStore Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcPropertyAttribute("16")]
public string Facet { get; public set; }
    [SfcPropertyAttribute("512")]
public bool IsSystemObject { get; }
    private static ObjectSet();
    public ObjectSet(PolicyStore parent, string name);
    private static void PopulateTargetSetBasedOnType(ObjectSet objectSet, Type type);
    private static void PopulateTargetSetsBasedOnFacet(ObjectSet objectSet, Type facetType);
    private static void PopulateTargetSetsBasedOnFacet(ObjectSet objectSet, Type facetType, SfcDomainInfo domainInfo);
    public TargetSetCollection get_TargetSets();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Dmf.ObjectSet/<CalculateTargets>d__12")]
public IEnumerable CalculateTargets(ISfcConnection targetConnection);
    internal SfcDomainInfo GetTargetDomain();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Dmf.ObjectSet/<CalculateTargets>d__14")]
public static IEnumerable CalculateTargets(ISfcConnection targetConnection, SfcQueryExpression sfcQueryExpression);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Dmf.ObjectSet/<CalculateTargets>d__15")]
public IEnumerable CalculateTargets(SqlStoreConnection sqlStoreConnection, string policyCategory);
    private static String[] GetNonExpensiveProps(SfcQueryExpression filter, Server server);
    internal static void CalculateTargets(SqlStoreConnection targetConnection, SfcQueryExpression sfcQueryExpression, Condition condition, AdHocPolicyEvaluationMode evaluationMode, Object[]& conforming, TargetEvaluation[]& violating);
    internal static void CalculateTargets(IEnumerable objectSet, Condition condition, AdHocPolicyEvaluationMode evaluationMode, Object[]& conforming, TargetEvaluation[]& violating);
    public void CalculateTargets(SqlStoreConnection targetConnection, Condition condition, AdHocPolicyEvaluationMode evaluationMode, string policyCategory, Object[]& conforming, TargetEvaluation[]& violating);
    internal bool get_TargetsDatabaseObjects();
    internal bool IsEventingFilter();
    internal SfcQueryExpression GetAdjustedFilter(TargetSet ts, Server server, PolicyCategory pc);
    internal static SfcQueryExpression AdjustForSystem(Version ver, Policy policy, SfcQueryExpression targetQueryExpression);
    internal bool DependsOnCondition(string conditionName);
    internal ReadOnlyCollection`1<Policy> EnumDependentPolicies();
    internal ReadOnlyCollection`1<string> EnumReferencedConditionNames();
    internal bool get_HasScript();
    internal string get_RootLevel();
    public static string GenerateUniqueName(Policy policy);
    [STraceConfigurationAttribute]
public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    public sealed virtual ISfcScript ScriptCreate();
    public sealed virtual void Create();
    protected virtual void PostCreate(object executionResult);
    internal ISfcScript ScriptCreateWithDependencies(string policyCondition);
    public sealed virtual ISfcScript ScriptDrop();
    public sealed virtual void Drop();
    public sealed virtual ISfcScript ScriptAlter();
    public sealed virtual void Alter();
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    public PolicyStore get_Parent();
    public void set_Parent(PolicyStore value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public string get_Name();
    private void SetName(string name);
    public int get_ID();
    public string get_Facet();
    public void set_Facet(string value);
    public void SetFacetWithDomain(string facet, string domain);
    public bool get_IsSystemObject();
    [STraceConfigurationAttribute]
protected virtual ISfcCollection GetChildCollection(string elementType);
    private void Validate(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateProperties(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateTargetSets(string validationMode, bool throwOnFirst, ValidationState validationState);
    public void Validate(string mode);
    private sealed virtual override ValidationState Microsoft.SqlServer.Management.Sdk.Sfc.ISfcValidate.Validate(string validationMethod, Object[] arguments);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.ObjectSetCollection : SfcDictionaryCollection`3<ObjectSet, Key, PolicyStore> {
    public ObjectSet Item { get; }
    public ObjectSetCollection(PolicyStore parent);
    public ObjectSet get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal class Microsoft.SqlServer.Management.Dmf.ObjectToValidate : object {
    private static TraceContext traceContext;
    private object obj;
    private Type type;
    private string validationMethod;
    public static string Drop;
    public object Object { get; }
    public Type Type { get; }
    public string ValidationMethod { get; }
    public ObjectToValidate(object obj, Type type, string validationMethod);
    private static ObjectToValidate();
    public object get_Object();
    public Type get_Type();
    public string get_ValidationMethod();
    internal static void ValidateObjects(List`1<ObjectToValidate> objectsToValidate);
    internal static void CommitObjects(PolicyStore ps, List`1<ObjectToValidate> objectsToValidate);
    internal static void RestoreCollections(PolicyStore ps, List`1<ObjectToValidate> objectsToValidate);
}
public enum Microsoft.SqlServer.Management.Dmf.OperatorType : Enum {
    public int value__;
    public static OperatorType NONE;
    public static OperatorType AND;
    public static OperatorType OR;
    public static OperatorType EQ;
    public static OperatorType NE;
    public static OperatorType LT;
    public static OperatorType GT;
    public static OperatorType LE;
    public static OperatorType GE;
    public static OperatorType IN;
    public static OperatorType LIKE;
    public static OperatorType NOT_IN;
    public static OperatorType NOT_LIKE;
    public static OperatorType BEQ;
    public static OperatorType BNE;
}
public class Microsoft.SqlServer.Management.Dmf.Policy : SfcInstance {
    private static TraceContext traceContext;
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptAlterAction;
    private static SfcTsqlProcFormatter scriptDropAction;
    private static SfcTsqlProcFormatter scriptRenameAction;
    internal AutomatedPolicyEvaluationMode execModeInBackend;
    private bool execModeCacheSet;
    private static string EvaluationModePropertyName;
    private bool m_bStatesInitialized;
    private LogPolicyEvents logPolicyEvents;
    private bool raiseConditionEvaluationEvent;
    private bool raiseConditionEvaluationEventToWindowsLog;
    private static int messageNumberEnforceAutomatic;
    private static int messageNumberEnforceAdHoc;
    private static int messageNumberCheckOnChanges;
    private static int messageNumberCheckOnSchedule;
    internal static string typeName;
    private EvaluationHistoryCollection evaluationHistories;
    [CompilerGeneratedAttribute]
private PolicyEvaluationStartedEventHandler PolicyEvaluationStarted;
    [CompilerGeneratedAttribute]
private ConnectionProcessingStartedEventHandler ConnectionProcessingStarted;
    [CompilerGeneratedAttribute]
private TargetProcessedEventHandler TargetProcessed;
    [CompilerGeneratedAttribute]
private ConnectionProcessingFinishedEventHandler ConnectionProcessingFinished;
    [CompilerGeneratedAttribute]
private PolicyEvaluationFinishedEventHandler PolicyEvaluationFinished;
    private EvaluationHistory hiddenHistory;
    private ConnectionEvaluationHistory hiddenConnectionHistory;
    private int connectionCount;
    private int detailCount;
    public static int HelpTextStringMaxLength;
    public static int HelpLinkStringMaxLength;
    private static AutomatedPolicyEvaluationMode EventingModes;
    private bool IsLogAvailable { get; }
    [SfcObjectAttribute("1", "0")]
public PolicyStore Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcPropertyAttribute("0")]
public string Description { get; public set; }
    [SfcPropertyAttribute("512")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("16")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Dmf.Condition", "PolicyStore/Condition[@Name='{0}']", "Mono.Cecil.CustomAttributeArgument[]")]
public string Condition { get; public set; }
    [SfcPropertyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Dmf.ObjectSet", "PolicyStore/ObjectSet[@Name='{0}']", "Mono.Cecil.CustomAttributeArgument[]")]
public string ObjectSet { get; public set; }
    [SfcPropertyAttribute("16")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Dmf.Condition", "PolicyStore/Condition[@Name='{0}']", "Mono.Cecil.CustomAttributeArgument[]")]
public string RootCondition { get; public set; }
    [SfcPropertyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Dmf.PolicyCategory", "PolicyStore/PolicyCategory[@Name='{0}']", "Mono.Cecil.CustomAttributeArgument[]")]
public string PolicyCategory { get; public set; }
    [SfcPropertyAttribute("16")]
public bool Enabled { get; public set; }
    [SfcPropertyAttribute("16")]
public AutomatedPolicyEvaluationMode AutomatedPolicyEvaluationMode { get; public set; }
    [SfcPropertyAttribute("0")]
public Guid ScheduleUid { get; public set; }
    [SfcPropertyAttribute("512")]
public string CreatedBy { get; }
    [SfcPropertyAttribute("512")]
public DateTime DateModified { get; }
    [SfcPropertyAttribute("512")]
public string ModifiedBy { get; }
    [SfcPropertyAttribute("512")]
public int CategoryId { get; }
    [SfcPropertyAttribute("16")]
public string HelpText { get; public set; }
    [SfcPropertyAttribute("16")]
public string HelpLink { get; public set; }
    [SfcPropertyAttribute("512")]
public bool IsSystemObject { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.EvaluationHistory")]
[SfcNonSerializableAttribute]
public EvaluationHistoryCollection EvaluationHistories { get; }
    public bool HasScript { get; }
    [SfcPropertyAttribute("0")]
internal DateTime ActiveEndDate { get; internal set; }
    [SfcPropertyAttribute("0")]
internal long ActiveEndTimeOfDay { get; internal set; }
    [SfcPropertyAttribute("0")]
internal DateTime ActiveStartDate { get; internal set; }
    [SfcPropertyAttribute("0")]
internal long ActiveStartTimeOfDay { get; internal set; }
    [SfcPropertyAttribute("0")]
internal int FrequencyInterval { get; internal set; }
    [SfcPropertyAttribute("0")]
internal int FrequencyRecurrenceFactor { get; internal set; }
    [SfcPropertyAttribute("0")]
internal FrequencyRelativeIntervals FrequencyRelativeIntervals { get; internal set; }
    [SfcPropertyAttribute("0")]
internal int FrequencySubDayInterval { get; internal set; }
    [SfcPropertyAttribute("0")]
internal FrequencySubDayTypes FrequencySubDayTypes { get; internal set; }
    [SfcPropertyAttribute("0")]
internal FrequencyTypes FrequencyTypes { get; internal set; }
    [SfcPropertyAttribute("0")]
internal string Schedule { get; internal set; }
    private static Policy();
    public Policy(PolicyStore parent, string name);
    private void InitializeEventSubscription();
    private void PolicyPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e);
    private bool get_IsLogAvailable();
    protected virtual void InitializeUIPropertyState();
    protected virtual void UpdateUIPropertyState();
    public sealed virtual void Create();
    public sealed virtual ISfcScript ScriptCreate();
    protected virtual void PostCreate(object executionResult);
    public ISfcScript ScriptCreateWithDependencies();
    public ISfcScript ScriptCreateWithObjectSet();
    public sealed virtual void Alter();
    public sealed virtual ISfcScript ScriptAlter();
    protected virtual void PostAlter(object executionResult);
    public ISfcScript ScriptAlterWithObjectSet();
    private void SetCategoryID();
    public sealed virtual void Drop();
    public sealed virtual ISfcScript ScriptDrop();
    public ISfcScript ScriptDropWithObjectSet();
    public sealed virtual void Rename(string name);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.Rename(SfcKey key);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(SfcKey key);
    private bool EvaluateRootCondition(SqlStoreConnection sqlStoreConnection, bool checkSqlScriptAsProxy);
    private bool ProcessViolators(Condition condition, AdHocPolicyEvaluationMode evaluationMode, TargetEvaluation[] violating, LogPolicyEvents logPolicyEvents);
    [STraceConfigurationAttribute]
public bool Evaluate(AdHocPolicyEvaluationMode evaluationMode, Object[] targetObjects);
    public bool Evaluate(AdHocPolicyEvaluationMode evaluationMode, ISfcConnection[] targetConnections);
    internal bool Evaluate(AdHocPolicyEvaluationMode evaluationMode, Int64& historyId, ISfcConnection[] targetConnections);
    public bool Evaluate(AdHocPolicyEvaluationMode evaluationMode, SfcQueryExpression targetQueryExpression, ISfcConnection[] targetConnections);
    [STraceConfigurationAttribute]
internal bool Evaluate(AdHocPolicyEvaluationMode evaluationMode, SfcQueryExpression targetQueryExpression, Int64& historyId, ISfcConnection[] targetConnections);
    private bool EvaluatePolicyUsingConnections(AdHocPolicyEvaluationMode evaluationMode, SfcQueryExpression targetQueryExpression, Int64& historyId, ISfcConnection[] targetConnections);
    internal void EvaluateConditionEventHandler(Condition policyCondition, ConditionEvaluationEventArgs eventArgs);
    public string ProduceConfigureScript(object target);
    internal static object GetOneTarget(ISfcConnection targetConnection, SfcQueryExpression targetQueryExpression);
    internal bool IsInTargetSet(SfcConnection targetConnection, SfcQueryExpression targetQE, bool checkSqlScriptAsProxy);
    internal void RaisePolicyResultEvent(string targetUri);
    public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    internal void UpdateScheduleProperties();
    internal bool DependsOnCondition(string conditionName);
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    public PolicyStore get_Parent();
    public void set_Parent(PolicyStore value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public string get_Name();
    private void SetName(string name);
    public int get_ID();
    public string get_Description();
    public void set_Description(string value);
    public DateTime get_CreateDate();
    public string get_Condition();
    public void set_Condition(string value);
    public string get_ObjectSet();
    public void set_ObjectSet(string value);
    public string get_RootCondition();
    public void set_RootCondition(string value);
    public string get_PolicyCategory();
    public void set_PolicyCategory(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public AutomatedPolicyEvaluationMode get_AutomatedPolicyEvaluationMode();
    public void set_AutomatedPolicyEvaluationMode(AutomatedPolicyEvaluationMode value);
    public Guid get_ScheduleUid();
    public void set_ScheduleUid(Guid value);
    public string get_CreatedBy();
    public DateTime get_DateModified();
    public string get_ModifiedBy();
    public int get_CategoryId();
    public string get_HelpText();
    public void set_HelpText(string value);
    public string get_HelpLink();
    public void set_HelpLink(string value);
    public bool get_IsSystemObject();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public EvaluationHistoryCollection get_EvaluationHistories();
    public bool get_HasScript();
    [STraceConfigurationAttribute]
public bool UsesFacet(string facet);
    internal DateTime get_ActiveEndDate();
    internal void set_ActiveEndDate(DateTime value);
    internal long get_ActiveEndTimeOfDay();
    internal void set_ActiveEndTimeOfDay(long value);
    internal DateTime get_ActiveStartDate();
    internal void set_ActiveStartDate(DateTime value);
    internal long get_ActiveStartTimeOfDay();
    internal void set_ActiveStartTimeOfDay(long value);
    internal int get_FrequencyInterval();
    internal void set_FrequencyInterval(int value);
    internal int get_FrequencyRecurrenceFactor();
    internal void set_FrequencyRecurrenceFactor(int value);
    internal FrequencyRelativeIntervals get_FrequencyRelativeIntervals();
    internal void set_FrequencyRelativeIntervals(FrequencyRelativeIntervals value);
    internal int get_FrequencySubDayInterval();
    internal void set_FrequencySubDayInterval(int value);
    internal FrequencySubDayTypes get_FrequencySubDayTypes();
    internal void set_FrequencySubDayTypes(FrequencySubDayTypes value);
    internal FrequencyTypes get_FrequencyTypes();
    internal void set_FrequencyTypes(FrequencyTypes value);
    internal string get_Schedule();
    internal void set_Schedule(string value);
    internal static List`1<SfcInstanceSerializedData> UpgradeInstance(List`1<SfcInstanceSerializedData> sfcInstanceData, int fileVersion);
    [CompilerGeneratedAttribute]
public void add_PolicyEvaluationStarted(PolicyEvaluationStartedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PolicyEvaluationStarted(PolicyEvaluationStartedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ConnectionProcessingStarted(ConnectionProcessingStartedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionProcessingStarted(ConnectionProcessingStartedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_TargetProcessed(TargetProcessedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TargetProcessed(TargetProcessedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ConnectionProcessingFinished(ConnectionProcessingFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionProcessingFinished(ConnectionProcessingFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PolicyEvaluationFinished(PolicyEvaluationFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PolicyEvaluationFinished(PolicyEvaluationFinishedEventHandler value);
    private void PolicyEvaluationStartedHistoryBuilder();
    private void PolicyEvaluationFinishedHistoryBuilder(PolicyEvaluationFinishedEventArgs e);
    private void ConnectionProcessingStartedHistoryBuilder(ConnectionProcessingStartedEventArgs e);
    private void ConnectionProcessingFinishedHistoryBuilder(ConnectionProcessingFinishedEventArgs e);
    private void TargetProcessedHistoryBuilder(TargetProcessedEventArgs e);
    [STraceConfigurationAttribute]
private void FireEvent(Delegate del, Object[] args);
    private void FirePolicyEvaluationStarted();
    private void FirePolicyEvaluationFinished(PolicyEvaluationFinishedEventArgs e);
    private void FireConnectionProcessingStarted(ConnectionProcessingStartedEventArgs e);
    private void FireConnectionProcessingFinished(ConnectionProcessingFinishedEventArgs e);
    private void FireTargetProcessed(TargetProcessedEventArgs e);
    private void Validate(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateProperties(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateMode(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateCategory(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateObjectSet(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateRootCondition(string validationMode, bool throwOnFirst, ValidationState validationState);
    public void Validate(string mode);
    private sealed virtual override ValidationState Microsoft.SqlServer.Management.Sdk.Sfc.ISfcValidate.Validate(string validationMethod, Object[] arguments);
    private Condition GetValidCondition();
    private ObjectSet GetValidObjectSet();
    [STraceConfigurationAttribute]
private void ValidateConnectionCompatibility(string facet, ISfcConnection[] targetConnections);
}
public class Microsoft.SqlServer.Management.Dmf.PolicyCategory : SfcInstance {
    private static TraceContext traceContext;
    private static SfcTsqlProcFormatter scriptDropAction;
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptRenameAction;
    private static SfcTsqlProcFormatter scriptAlterAction;
    internal static string typeName;
    public static string DefaultCategory { get; }
    [SfcPropertyAttribute]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute]
public int ID { get; }
    [SfcPropertyAttribute]
public bool MandateDatabaseSubscriptions { get; public set; }
    [SfcObjectAttribute("1", "0")]
public PolicyStore Parent { get; public set; }
    public Key IdentityKey { get; }
    private static PolicyCategory();
    public PolicyCategory(PolicyStore parent, string name);
    public static string get_DefaultCategory();
    public string get_Name();
    private void SetName(string name);
    public int get_ID();
    public bool get_MandateDatabaseSubscriptions();
    public void set_MandateDatabaseSubscriptions(bool value);
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    public PolicyStore get_Parent();
    public void set_Parent(PolicyStore value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    [STraceConfigurationAttribute]
protected virtual ISfcCollection GetChildCollection(string elementType);
    public sealed virtual void Create();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCreatable.ScriptCreate();
    protected virtual void PostCreate(object executionResult);
    public sealed virtual void Drop();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDroppable.ScriptDrop();
    public sealed virtual void Rename(string name);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.Rename(SfcKey key);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(SfcKey key);
    public sealed virtual void Alter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable.ScriptAlter();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.PolicyCategoryCollection : SfcCollatedDictionaryCollection`3<PolicyCategory, Key, PolicyStore> {
    public PolicyCategory Item { get; }
    public PolicyCategoryCollection(PolicyStore parent);
    public PolicyCategoryCollection(PolicyStore parent, IComparer`1<string> customComparer);
    public PolicyCategory get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.Dmf.PolicyCategoryInformation : object {
    private static TraceContext traceContext;
    private Policy policy;
    private bool targetSubscribes;
    private PolicyCategory policyCategory;
    public int ID { get; }
    public string Name { get; }
    public bool IsSubscribed { get; }
    public bool MandateDatabaseSubscriptions { get; }
    public int PolicyId { get; }
    public bool IsEmptyCategory { get; }
    public string PolicyName { get; }
    public bool PolicyEnabled { get; }
    public AutomatedPolicyEvaluationMode EvaluationMode { get; }
    internal PolicyCategoryInformation(PolicyCategory policyCategory);
    internal PolicyCategoryInformation(PolicyCategory policyCategory, Policy policy, bool targetSubscribes);
    private static PolicyCategoryInformation();
    public int get_ID();
    public string get_Name();
    public bool get_IsSubscribed();
    public bool get_MandateDatabaseSubscriptions();
    public int get_PolicyId();
    public bool get_IsEmptyCategory();
    public string get_PolicyName();
    public bool get_PolicyEnabled();
    public AutomatedPolicyEvaluationMode get_EvaluationMode();
    internal static int CompareByCategoryIDPolicyName(PolicyCategoryInformation left, PolicyCategoryInformation right);
}
public class Microsoft.SqlServer.Management.Dmf.PolicyCategorySubscription : SfcInstance {
    private static TraceContext traceContext;
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptAlterAction;
    private static SfcTsqlProcFormatter scriptDropAction;
    internal static string typeName;
    [SfcObjectAttribute("1", "0")]
public PolicyStore Parent { get; public set; }
    public Key IdentityKey { get; }
    [SfcPropertyAttribute]
[SfcKeyAttribute("0")]
public int ID { get; }
    [SfcPropertyAttribute("16")]
public string TargetType { get; public set; }
    [SfcPropertyAttribute("16")]
public string Target { get; public set; }
    [SfcPropertyAttribute("16")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Dmf.Condition", "PolicyStore/PolicyCategory[@Name='{0}']", "Mono.Cecil.CustomAttributeArgument[]")]
public string PolicyCategory { get; public set; }
    private static PolicyCategorySubscription();
    public PolicyCategorySubscription(PolicyStore parent);
    public PolicyCategorySubscription(PolicyStore parent, SqlSmoObject obj);
    internal PolicyCategorySubscription(PolicyStore parent, SfcQueryExpression target, string policyCategory);
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    public PolicyStore get_Parent();
    public void set_Parent(PolicyStore value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    private void SetID(int id);
    public int get_ID();
    public string get_TargetType();
    public void set_TargetType(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_PolicyCategory();
    public void set_PolicyCategory(string value);
    public sealed virtual void Create();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCreatable.ScriptCreate();
    protected virtual void PostCreate(object executionResult);
    public sealed virtual void Alter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable.ScriptAlter();
    public sealed virtual void Drop();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDroppable.ScriptDrop();
    public void Validate(string mode);
    public void ValidateProperties(string mode);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.PolicyCategorySubscriptionCollection : SfcDictionaryCollection`3<PolicyCategorySubscription, Key, PolicyStore> {
    public PolicyCategorySubscription Item { get; }
    public PolicyCategorySubscriptionCollection(PolicyStore parent);
    public PolicyCategorySubscription get_Item(int id);
    public bool Contains(int id);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Dmf.PolicyCategorySubscriptionCollection/<EnumCategorySubscribers>d__5")]
internal IEnumerable`1<string> EnumCategorySubscribers(string category, string targetType);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.PolicyCollection : SfcCollatedDictionaryCollection`3<Policy, Key, PolicyStore> {
    public Policy Item { get; }
    public PolicyCollection(PolicyStore parent);
    public PolicyCollection(PolicyStore parent, IComparer`1<string> customComparer);
    public Policy get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
internal class Microsoft.SqlServer.Management.Dmf.PolicyEvaluationHelper : object {
    private static TraceContext traceContext;
    private static StringBuilder raiserrorBuilder;
    private static SqlCommand exceptionLoggingCommand;
    private static int RaiserrorBufferSize;
    private static PolicyEvaluationHelper();
    public static int EvaluateAutomatedPolicy(string policy, SqlXml eventData, Int64& historyId);
    internal static void LogExceptionMessage(string message, SqlConnection connection);
    private static SfcQueryExpression GetTargetQueryExpression(SqlXml eventData, Policy p, StringBuilder targetPsPathBuilder, String& command);
    private static void GetExpressionGeneric(SortedDictionary`2<string, string> eventValues, StringBuilder targetUrn, SqlXml eventData, Policy p);
    private static string GetEventValue(SortedDictionary`2<string, string> eventValues, SqlXml eventData, string elementName);
    private static string GetTypeCorrectCase(string type);
}
public class Microsoft.SqlServer.Management.Dmf.PolicyEvaluationResultsWriter : object {
    private static TraceContext traceContext;
    private XmlWriter xmlWriter;
    private bool disposed;
    public PolicyEvaluationResultsWriter(XmlWriter xmlWriter);
    private static PolicyEvaluationResultsWriter();
    public void WriteEvaluationHistory(EvaluationHistory history);
    public static XmlWriterSettings GetXmlWriterSettings();
    private void WriteAggergateEvaluationHistoryStart();
    private void WriteAggergateEvaluationHistoryEnd();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class Microsoft.SqlServer.Management.Dmf.PolicyExtender : SfcObjectExtender`1<Policy> {
    private static TraceContext traceContext;
    private List`1<PolicyCategory> policyCategories;
    private PolicyCategory defaultCategory;
    private string policyFilePath;
    [ExtendedPropertyAttribute("Condition")]
public Condition ConditionInstance { get; public set; }
    [ExtendedPropertyAttribute("Condition")]
public AutomatedPolicyEvaluationMode SupportedPolicyEvaluationMode { get; }
    [ExtendedPropertyAttribute("PolicyCategory")]
public PolicyCategory Category { get; public set; }
    [ExtendedPropertyAttribute]
public List`1<PolicyCategory> Categories { get; }
    private PolicyCategory DefaultCategory { get; }
    [ExtendedPropertyAttribute]
public TargetSetCollection Filters { get; }
    [ExtendedPropertyAttribute]
public string PolicyFilePath { get; public set; }
    [ExtendedPropertyAttribute]
public bool OfflineMode { get; }
    [ExtendedPropertyAttribute("Condition")]
public string RootName { get; }
    [ExtendedPropertyAttribute("Condition")]
public bool EnableRootRestriction { get; }
    public PolicyExtender(Policy policy);
    public PolicyExtender(PolicyStore policyStore, string name);
    private static PolicyExtender();
    public Condition get_ConditionInstance();
    public void set_ConditionInstance(Condition value);
    public AutomatedPolicyEvaluationMode get_SupportedPolicyEvaluationMode();
    public PolicyCategory get_Category();
    public void set_Category(PolicyCategory value);
    public List`1<PolicyCategory> get_Categories();
    private PolicyCategory get_DefaultCategory();
    public TargetSetCollection get_Filters();
    public string get_PolicyFilePath();
    public void set_PolicyFilePath(string value);
    public bool get_OfflineMode();
    public string get_RootName();
    public bool get_EnableRootRestriction();
}
internal class Microsoft.SqlServer.Management.Dmf.PolicyScheduleHelper : object {
    private static TraceContext traceContext;
    private static PolicyScheduleHelper();
    public static void FixPolicySchedule(Policy policy);
    private static bool JobScheduleMatchesPolicy(JobSchedule js, Policy policy);
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Dmf.PolicyStore : SfcInstance {
    private static TraceContext traceContext;
    internal static Version KatmaiVersion;
    internal static Version KilimanjaroVersion;
    private SfcObjectQuery objectQuery;
    private SfcObjectQuery smoObjectQuery;
    private static SfcTsqlProcFormatter scriptAlterAction;
    private static SfcTsqlProcFormatter purgeHealthStateAction;
    private static SfcTsqlProcFormatter markSystemObjectAction;
    private static string DomainName;
    private static string PropNameEnabled;
    private static string PropNameHistoryRetentionInDays;
    private static string PropNameLogOnSuccess;
    private SfcConnectionContext m_context;
    private SqlStoreConnection m_connection;
    private ConditionCollection m_Conditions;
    private ObjectSetCollection m_ObjectSets;
    private PolicyCollection m_Policies;
    private PolicyCategoryCollection m_PolicyCategories;
    private static FacetInfoCollection m_facets;
    private PolicyCategorySubscriptionCollection m_CategorySubscriptions;
    private static int nameColIndex;
    private static int resultColIndex;
    private static int lastRunDateColIndex;
    private static string policyHealthQuery;
    private static string aggregatedStateQuery;
    internal static string typeName;
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    private SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.ConnectionContext { get; }
    [SfcIgnoreAttribute]
public SqlStoreConnection SqlStoreConnection { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.Condition")]
public ConditionCollection Conditions { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.ObjectSet")]
public ObjectSetCollection ObjectSets { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.Policy")]
public PolicyCollection Policies { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.PolicyCategory")]
public PolicyCategoryCollection PolicyCategories { get; }
    [SfcIgnoreAttribute]
public static FacetInfoCollection Facets { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.PolicyCategorySubscription")]
public PolicyCategorySubscriptionCollection PolicyCategorySubscriptions { get; }
    [SfcIgnoreAttribute]
internal SfcObjectQuery SfcObjectQuery { get; }
    [SfcIgnoreAttribute]
internal SfcObjectQuery SmoObjectQuery { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainName { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainInstanceName { get; }
    public string Name { get; }
    [SfcPropertyAttribute]
public bool Enabled { get; public set; }
    [SfcPropertyAttribute]
public int HistoryRetentionInDays { get; public set; }
    [SfcPropertyAttribute]
public bool LogOnSuccess { get; public set; }
    private static PolicyStore();
    public PolicyStore(SfcConnection connection);
    public sealed virtual void Alter();
    public sealed virtual ISfcScript ScriptAlter();
    public virtual string ToString();
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    [STraceConfigurationAttribute]
protected virtual ISfcCollection GetChildCollection(string elementType);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection();
    [STraceConfigurationAttribute]
private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(ISfcConnection connection);
    [STraceConfigurationAttribute]
private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(SfcObjectQueryMode mode);
    private sealed virtual override SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.get_ConnectionContext();
    public SqlStoreConnection get_SqlStoreConnection();
    public void set_SqlStoreConnection(SqlStoreConnection value);
    public ConditionCollection get_Conditions();
    public ObjectSetCollection get_ObjectSets();
    public PolicyCollection get_Policies();
    public PolicyCategoryCollection get_PolicyCategories();
    public static FacetInfoCollection get_Facets();
    public static FacetInfoCollection EnumDomainFacets(String[] args);
    public static FacetInfoCollection EnumRootFacets(Type rootType);
    public PolicyCategorySubscriptionCollection get_PolicyCategorySubscriptions();
    internal SfcObjectQuery get_SfcObjectQuery();
    internal SfcObjectQuery get_SmoObjectQuery();
    public StringCollection EnumConditionsOnFacet(string facet);
    public StringCollection EnumConditionsOnFacet(string facet, EnumerationMode enumerationMode);
    public StringCollection EnumRootConditions(Type rootType);
    public StringCollection EnumPoliciesOnFacet(string facet);
    public StringCollection EnumPoliciesOnFacet(string facet, EnumerationMode enumerationMode);
    public StringCollection EnumTargetSetConditions(Type type);
    public StringCollection EnumTargetSetConditions(Type type, EnumerationMode enumerationMode);
    [STraceConfigurationAttribute]
private sealed virtual override Type Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetType(string typeName);
    [STraceConfigurationAttribute]
private sealed virtual override SfcKey Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetKey(IUrnFragment urnFragment);
    private sealed virtual override ISfcExecutionEngine Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetExecutionEngine();
    [STraceConfigurationAttribute]
private sealed virtual override SfcTypeMetadata Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetTypeMetadata(string typeName);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.UseSfcStateManagement();
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainName();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainInstanceName();
    [STraceConfigurationAttribute]
public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    public DataTable EnumApplicablePolicies(SfcQueryExpression target);
    private DataTable GetPoliciesHealthStateTable(SfcQueryExpression target);
    public PolicyHealthState GetAggregatedHealthState(SfcQueryExpression target);
    private PolicyHealthState GetAggregatedHealthStateWithFilter(SfcQueryExpression target, SfcObjectQuery policyQuery);
    private string EscapeLikePattern(string pattern);
    public ReadOnlyCollection`1<PolicyCategoryInformation> EnumPolicyCategories();
    public ReadOnlyCollection`1<PolicyCategoryInformation> EnumApplicablePolicyCategories(SfcQueryExpression target);
    internal bool IsTargetInCategory(string policyCategory, SfcQueryExpression target);
    public PolicyCategorySubscription SubscribeToPolicyCategory(SfcQueryExpression target, string policyCategory);
    public void UnsubscribeFromPolicyCategory(SfcQueryExpression target, string policyCategory);
    private object GetTarget(SfcQueryExpression target);
    private PolicyStore CreateVirtualStore();
    internal Policy GeneratePolicyFromFacet(object target, string facetName, string policyName, string conditionName, List`1<ObjectToValidate> objectsToValidate);
    private void DoCreatePolicyFromFacet(object target, string facetName, string policyName, string conditionName, XmlWriter writer, bool commit);
    public void CreatePolicyFromFacet(SfcQueryExpression target, string facetName, string policyName, string conditionName);
    public void CreatePolicyFromFacet(SfcQueryExpression target, string facetName, string policyName, string conditionName, XmlWriter writer);
    public void CreatePolicyFromFacet(object target, string facetName, string policyName, string conditionName, XmlWriter writer);
    public Policy ImportPolicy(XmlReader xmlReader, ImportPolicyEnabledState importEnabledState, bool overwriteExistingPolicy, bool overwriteExistingCondition);
    public Policy DeserializePolicy(XmlReader xmlReader, bool overwriteExistingPolicy, bool overwriteExistingCondition);
    internal Policy DeserializePolicy(XmlReader xmlReader, bool overwriteExistingPolicy, bool overwriteExistingCondition, bool import, ImportPolicyEnabledState importEnabledState);
    internal Policy InstantiateObjectsFromReader(XmlReader xmlReader, bool overwriteExistingPolicy, bool overwriteExistingCondition, List`1<ObjectToValidate> objectsToValidate);
    private bool IsPolicyApplicableForGivenTarget(Policy policy, SfcQueryExpression target);
    public string get_Name();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_HistoryRetentionInDays();
    public void set_HistoryRetentionInDays(int value);
    public bool get_LogOnSuccess();
    public void set_LogOnSuccess(bool value);
    public void RepairPolicyAutomation();
    public void EraseSystemHealthPhantomRecords();
    public sealed virtual UpgradeSession StartSerializationUpgrade();
    public void PurgeHealthState();
    public void PurgeHealthState(SfcQueryExpression targetTreeRoot);
    public void MarkSystemObject(object obj, bool marker);
    private void Validate(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateProperties(string validationMode, bool throwOnFirst, ValidationState validationState);
    private sealed virtual override ValidationState Microsoft.SqlServer.Management.Sdk.Sfc.ISfcValidate.Validate(string validationMethod, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Dmf.PolicyStoreUpgradeSession : UpgradeSession {
    private static TraceContext traceContext;
    private static int CTP6VersionNumber;
    private static int CTP6RefreshVersionNumber;
    private static PolicyStoreUpgradeSession();
    public virtual void PostProcessUpgrade(Dictionary`2<string, object> sfcCache, int fileVersion);
    private void CTP6ToCTP6RefreshPostProcessUpgrade(Dictionary`2<string, object> sfcCache);
    private void CTP5ToCTP6PostProcessUpgrade(Dictionary`2<string, object> sfcCache);
    public virtual bool IsUpgradeRequiredOnType(string instanceType, int fileVersion);
    public virtual List`1<KeyValuePair`2<string, object>> UpgradeInstance(List`1<SfcInstanceSerializedData> sfcInstanceData, int fileVersion, string smlUri, Dictionary`2<string, object> sfcCache);
}
internal class Microsoft.SqlServer.Management.Dmf.PropertyInfoNameComparer : object {
    public sealed virtual int Compare(PropertyInfo x, PropertyInfo y);
}
internal class Microsoft.SqlServer.Management.Dmf.SupportedTypeAttributes : object {
    internal TypeClass Class;
    internal List`1<OperatorType> SupportedOperators;
    internal SupportedTypeAttributes(TypeClass typeClass, List`1<OperatorType> operators);
}
public class Microsoft.SqlServer.Management.Dmf.TargetEvaluation : object {
    private static TraceContext traceContext;
    private object target;
    private ExpressionNode result;
    public object Target { get; }
    public ExpressionNode Result { get; }
    internal TargetEvaluation(object target, ExpressionNode result);
    private static TargetEvaluation();
    public object get_Target();
    public ExpressionNode get_Result();
}
public class Microsoft.SqlServer.Management.Dmf.TargetSet : SfcInstance {
    private static TraceContext traceContext;
    internal static string DatabaseLevel;
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptDropAction;
    private static SfcTsqlProcFormatter scriptAlterAction;
    private static SfcTsqlProcFormatter scriptCreateReferenceAction;
    private static SfcTsqlProcFormatter scriptAlterReferenceAction;
    private static string smoDatabaseUrnSkeleton;
    private Urn m_urn;
    private TargetSetLevelCollection m_Levels;
    private string rootLevel;
    internal static string typeName;
    private Type m_type;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Dmf.TargetSetLevel")]
public TargetSetLevelCollection Levels { get; }
    public string RootLevel { get; }
    internal bool IsAllDatabasesFilter { get; }
    internal bool TargetsDatabaseObjects { get; }
    internal bool TargetsDatabases { get; }
    [SfcObjectAttribute("1", "0")]
public ObjectSet Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcIgnoreAttribute]
private int ObjectSetID { get; }
    [SfcPropertyAttribute("16")]
[SfcKeyAttribute("0")]
public string TargetTypeSkeleton { get; }
    [SfcPropertyAttribute("16")]
public bool Enabled { get; public set; }
    [SfcPropertyAttribute("512")]
public string TargetType { get; }
    [SfcPropertyAttribute("64")]
public Type Type { get; }
    private static TargetSet();
    public TargetSet(ObjectSet parent, string targetTypeSkeleton);
    internal static SfcTypeMetadata GetTypeMetadata();
    internal ISfcScript ScriptCreate(bool declareArguments);
    internal ISfcScript ScriptDrop();
    internal ISfcScript ScriptAlter();
    public TargetSetLevelCollection get_Levels();
    public string get_RootLevel();
    private string GetTargetType(string skeleton);
    internal bool get_IsAllDatabasesFilter();
    [STraceConfigurationAttribute]
public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    internal bool get_TargetsDatabaseObjects();
    internal bool get_TargetsDatabases();
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    public ObjectSet get_Parent();
    public void set_Parent(ObjectSet value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public int get_ID();
    private int get_ObjectSetID();
    public string get_TargetTypeSkeleton();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_TargetType();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public Type get_Type();
    public string GetFilter();
    internal string GetFilterWithNodeReplacement(Dictionary`2<string, ExpressionNode> adjustments);
    [STraceConfigurationAttribute]
public IList`1<TargetSetLevel> GetLevelsSorted();
    [STraceConfigurationAttribute]
public TargetSetLevel GetLevel(string skeleton);
    public TargetSetLevel SetLevelCondition(TargetSetLevel level, string condition);
    internal bool IsEventingFilter();
    internal TargetSet Clone(ObjectSet parentObjectSet);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.TargetSetCollection : SfcCollatedDictionaryCollection`3<TargetSet, Key, ObjectSet> {
    public TargetSet Item { get; }
    public TargetSetCollection(ObjectSet parent);
    public TargetSetCollection(ObjectSet parent, IComparer`1<string> customComparer);
    public TargetSet get_Item(string filterTypeSkeleton);
    public bool Contains(string filterTypeSkeleton);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.Dmf.TargetSetLevel : SfcInstance {
    private static TraceContext traceContext;
    private Type m_type;
    internal static string typeName;
    public Type TargetType { get; }
    [SfcObjectAttribute("1", "0")]
public TargetSet Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcIgnoreAttribute]
private int TargetSetID { get; }
    [SfcPropertyAttribute("16")]
[SfcKeyAttribute("0")]
public string TargetTypeSkeleton { get; }
    [SfcPropertyAttribute("16")]
public string LevelName { get; }
    [SfcPropertyAttribute("16")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Dmf.Condition", "PolicyStore/Condition[@Name='{0}']", "Mono.Cecil.CustomAttributeArgument[]")]
public string Condition { get; public set; }
    internal TargetSetLevel(TargetSet parent, string TargetTypeSkeleton);
    private static TargetSetLevel();
    public Type get_TargetType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [STraceConfigurationAttribute]
public sealed virtual int CompareTo(TargetSetLevel level);
    internal static SfcTypeMetadata GetTypeMetadata();
    public static PropertyInfo[] GetTypeFilterProperties(string skeleton);
    [STraceConfigurationAttribute]
public static SfcObjectFactory GetObjectFactory();
    public TargetSet get_Parent();
    public void set_Parent(TargetSet value);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public int get_ID();
    private int get_TargetSetID();
    public string get_TargetTypeSkeleton();
    public string get_LevelName();
    public string get_Condition();
    public void set_Condition(string value);
    protected virtual ISfcCollection GetChildCollection(string elementType);
    [STraceConfigurationAttribute]
public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Dmf.TargetSetLevelCollection : SfcCollatedDictionaryCollection`3<TargetSetLevel, Key, TargetSet> {
    public TargetSetLevel Item { get; }
    public TargetSetLevelCollection(TargetSet parent);
    public TargetSetLevelCollection(TargetSet parent, IComparer`1<string> customComparer);
    public TargetSetLevel get_Item(string filterTypeSkeleton);
    public bool Contains(string filterTypeSkeleton);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public enum Microsoft.SqlServer.Management.Dmf.TypeClass : Enum {
    public int value__;
    public static TypeClass Unsupported;
    public static TypeClass Numeric;
    public static TypeClass String;
    public static TypeClass Bool;
    public static TypeClass DateTime;
    public static TypeClass Guid;
    public static TypeClass Array;
    public static TypeClass Variant;
    public static TypeClass VarArgs;
    public static TypeClass BitmappedEnum;
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Dmf.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsBitmappedEnum(Type t);
}
public class Microsoft.SqlServer.Management.Dmf.Utils : object {
    private static TraceContext traceContext;
    private static Dictionary`2<AdHocPolicyEvaluationMode, string> AdHocEvaluationModeToDescriptionMap;
    private static Dictionary`2<string, AutomatedPolicyEvaluationMode> DescriptionToEvaluationModeMap;
    private static Dictionary`2<AutomatedPolicyEvaluationMode, string> EvaluationModeToDescriptionMap;
    private static Utils();
    public static string GetDescriptionForEvaluationMode(AutomatedPolicyEvaluationMode mode);
    public static string GetDescriptionForAdHocEvaluationMode(AdHocPolicyEvaluationMode mode);
    public static AutomatedPolicyEvaluationMode GetEvaluationModeByDescription(string execModeDescription);
    public static bool IsValidHelpLink(string link);
    internal static Dictionary`2<string, object> ReplaceSfcProperties(SfcInstance lhs, SfcInstance rhs);
    internal static void ReplaceSfcProperties(SfcInstance lhs, Dictionary`2<string, object> props);
    [STraceConfigurationAttribute]
internal static SqlStoreConnection GetSqlStoreConnection(ISfcConnection targetConnection, string methodName);
    [STraceConfigurationAttribute]
internal static bool ShouldProcessException(Exception e);
    internal static PropertyInfo[] GetPhysicalFacetProperties(Type managementFacet);
    internal static bool IsSmoDomain(SfcDomainInfo domainInfo);
    internal static bool IsSmoPath(string path);
    internal static SfcDomainInfo GetDomainFromUrnSkeleton(string skeleton);
    internal static Type GetTypeFromUrnSkeleton(string skeleton);
    internal static SfcObjectQuery GetQueryFromDomainInfo(SfcDomainInfo domainInfo, ISfcConnection connection);
}
internal class Microsoft.SqlServer.Management.Facets.FacetAttributes : object {
    private static TraceContext traceContext;
    private AutomatedPolicyEvaluationMode evaluationMode;
    private FacetType facetType;
    private bool isReadOnly;
    private Type rootType;
    internal AutomatedPolicyEvaluationMode EvaluationMode { get; internal set; }
    internal FacetType FacetType { get; internal set; }
    internal bool IsReadOnly { get; internal set; }
    internal Type RootType { get; internal set; }
    private static FacetAttributes();
    internal AutomatedPolicyEvaluationMode get_EvaluationMode();
    internal void set_EvaluationMode(AutomatedPolicyEvaluationMode value);
    internal FacetType get_FacetType();
    internal void set_FacetType(FacetType value);
    internal bool get_IsReadOnly();
    internal void set_IsReadOnly(bool value);
    internal Type get_RootType();
    internal void set_RootType(Type value);
}
public class Microsoft.SqlServer.Management.Facets.FacetEvaluationContext : object {
    private static TraceContext traceContext;
    private Type iface;
    private object target;
    private FacetType facetType;
    private object physicalTarget;
    public Type Interface { get; }
    public object Target { get; }
    internal FacetType FacetType { get; }
    internal object PhysicalTarget { get; }
    internal FacetEvaluationContext(Type iface, object target, FacetType facetType);
    internal FacetEvaluationContext(Type iface, object target, FacetType facetType, object physicalTarget);
    private static FacetEvaluationContext();
    public Type get_Interface();
    public object get_Target();
    internal FacetType get_FacetType();
    internal object get_PhysicalTarget();
    [STraceConfigurationAttribute]
public static FacetEvaluationContext GetFacetEvaluationContext(string facetName, object target);
    [STraceConfigurationAttribute]
public static FacetEvaluationContext GetFacetEvaluationContext(Type facetType, object target);
    public void Alter();
    public void Refresh();
    public object GetPropertyValue(string name);
    public void SetPropertyValue(string name, object value);
}
public class Microsoft.SqlServer.Management.Facets.FacetRepository : object {
    private static TraceContext traceContext;
    private static Hashtable registeredFacets;
    private static Hashtable FacetNameAndObjectTypeToAdapterMap;
    private static List`1<string> registeredAssemblies;
    internal static int RegisteredFacetsCount { get; }
    public static IEnumerable RegisteredFacets { get; }
    private static FacetRepository();
    [STraceConfigurationAttribute]
private static void LoadAssemblyHandleErrors(string assemblyName);
    [STraceConfigurationAttribute]
internal static void BuildDmfLookupTables(Assembly assembly);
    [STraceConfigurationAttribute]
private static void BuildInterfaceLookup(Assembly assembly);
    [STraceConfigurationAttribute]
private static void BuildAdapterLookup(Assembly assembly);
    public static PropertyInfo[] GetFacetProperties(Type managementFacet);
    private static PropertyInfo GetPropertyInfo(Type managementFacet, string propertyName);
    [STraceConfigurationAttribute]
public static bool IsPropertyConfigurable(Type managementFacet, string propertyName);
    [STraceConfigurationAttribute]
public static List`1<Type> GetFacetSupportedTypes(Type managementFacet);
    public static List`1<Type> GetRootFacets(Type rootType);
    public static bool IsRootFacet(Type rootType, Type facet);
    public static Type GetFacetSupportedRootType(Type facet);
    internal static Type GetFacetImplementingType(Type target, Type facet);
    [STraceConfigurationAttribute]
internal static FacetEvaluationContext GetAdapterObject(object target, Type facet);
    public static List`1<Type> GetFacetsForType(Type target);
    internal static int get_RegisteredFacetsCount();
    public static IEnumerable get_RegisteredFacets();
    [STraceConfigurationAttribute]
public static Type GetFacetType(string facetShortName);
    [STraceConfigurationAttribute]
public static AutomatedPolicyEvaluationMode GetFacetEvaluationMode(Type facet);
    [STraceConfigurationAttribute]
public static bool IsRegisteredFacet(Type facet);
    [STraceConfigurationAttribute]
private static bool IsManagementFacet(Type managementFacet);
    [STraceConfigurationAttribute]
internal static bool IsPhysicalFacet(Type type);
    [STraceConfigurationAttribute]
internal static bool IsReadOnlyFacet(Type type);
    [STraceConfigurationAttribute]
private static bool IsAdapter(Type type);
    [STraceConfigurationAttribute]
private static void VerifyAssociation(Type target, Type facet);
}
internal enum Microsoft.SqlServer.Management.Facets.FacetType : Enum {
    public int value__;
    public static FacetType Logical;
    public static FacetType Physical;
    public static FacetType Adapted;
}
