public static class HighestIncompatibleMDWVersion : object {
    public static Version Version { get; }
    public static Version get_Version();
}
internal class Microsoft.SqlServer.Diagnostics.STrace.ActivityContext : object {
    public ActivityContext(string parameterName);
    public sealed virtual void Dispose();
}
internal class Microsoft.SqlServer.Diagnostics.STrace.MethodContext : object {
    public sealed virtual void Dispose();
    public ActivityContext GetActivityContext(string s);
    public void TraceCatch(Exception ex);
}
internal class Microsoft.SqlServer.Diagnostics.STrace.MethodTraceContext : TraceContext {
    public MethodTraceContext(string parameterName);
}
internal class Microsoft.SqlServer.Diagnostics.STrace.STraceConfigurationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <SkipAutoTrace>k__BackingField;
    public bool SkipAutoTrace { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipAutoTrace();
    [CompilerGeneratedAttribute]
public void set_SkipAutoTrace(bool value);
}
internal class Microsoft.SqlServer.Diagnostics.STrace.TraceContext : object {
    public static TraceContext GetTraceContext(string componentName, string s);
    public ActivityContext GetActivityContext(string s);
    public MethodTraceContext GetMethodContext(string s);
    public MethodTraceContext GetMethodContext(string methodName, TraceEventType traceEventType);
    public void Assert(bool condition, string message);
    public sealed virtual void Dispose();
    public void TraceActivityStart(string s);
    public void TraceActivityEnd(string s);
    public void TraceCatch(Exception ex);
    public void TraceInformation(string format, Object[] info);
    public Exception TraceThrow(Exception exception);
    public Exception TraceThrow(Exception exception, TraceEventType traceEventType);
    public void TraceVerbose(string message);
    public void TraceVerbose(int id, string message);
    public void TraceVerbose(string format, Object[] args);
    public void TraceVerbose(int id, string format, Object[] args);
    public virtual void TraceParameterIn(string parameterName, object parameterValue);
    public virtual void TraceParameters(Object[] parameterValues);
    protected void TraceParameters(TraceEventType traceEventType, Object[] parameterValues);
    public void TraceMethodEnter(string methodName);
    public void TraceMethodExit(string methodName);
    public void DebugAssert(bool test);
    public void DebugAssert(bool test, string message);
    public void DebugAssert(bool test, int id, string message);
    public void DebugAssert(bool test, string format, Object[] args);
    public void DebugAssert(bool test, int id, string format, Object[] args);
    public void TraceError(string message);
    public void TraceError(int id, string message);
    public void TraceError(string format, Object[] args);
    public void TraceError(int id, string format, Object[] args);
    public virtual void TraceParameterOut(string parameterName, object parameterValue);
}
internal static class Microsoft.SqlServer.Management.Collector.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
public class Microsoft.SqlServer.Management.Collector.CollectionItem : SfcInstance {
    private static TraceContext tc;
    private object syncLock;
    internal static string typeName;
    [SfcPropertyAttribute("512")]
public int Id { get; private set; }
    [SfcPropertyAttribute]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcPropertyAttribute]
public string TypeName { get; public set; }
    [SfcPropertyAttribute]
public TimeSpan CollectionFrequency { get; public set; }
    [SfcPropertyAttribute]
public string Parameters { get; public set; }
    private object SyncLock { get; }
    [SfcIgnoreAttribute]
internal SfcObjectState State { get; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcObjectAttribute("1", "0")]
public CollectionSet Parent { get; public set; }
    public CollectionItem(CollectionSet set, string name);
    private static CollectionItem();
    public int get_Id();
    private void set_Id(int value);
    [DebuggerStepThroughAttribute]
public string get_Name();
    public void set_Name(string value);
    [DebuggerStepThroughAttribute]
public string get_TypeName();
    public void set_TypeName(string value);
    public TimeSpan get_CollectionFrequency();
    public void set_CollectionFrequency(TimeSpan value);
    [DebuggerStepThroughAttribute]
public string get_Parameters();
    public void set_Parameters(string value);
    public sealed virtual void Alter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable.ScriptAlter();
    public sealed virtual void Rename(string newName);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.Rename(SfcKey newKey);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(SfcKey newKey);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    internal static SfcTypeMetadata GetTypeMetadata();
    private object get_SyncLock();
    [DebuggerStepThroughAttribute]
internal SfcObjectState get_State();
    internal string GetCreateScript(string setParamName);
    internal string GetAlterScript();
    internal string GetDropScript();
    private string GetRenameScript(Key newKey);
    internal void SetId(int id);
    private void CheckNewName(string newName);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public CollectionSet get_Parent();
    public void set_Parent(CollectionSet value);
    public static SfcObjectFactory GetObjectFactory();
    protected virtual ISfcCollection GetChildCollection(string elementType);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Collector.CollectionItemCollection : SfcCollatedDictionaryCollection`3<CollectionItem, Key, CollectionSet> {
    private static TraceContext tc;
    public CollectionItem Item { get; }
    public CollectionItemCollection(CollectionSet parent);
    private static CollectionItemCollection();
    public CollectionItem get_Item(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    public void AddCollectionItem(CollectionItem item);
    public void RemoveCollectionItem(CollectionItem item);
}
public class Microsoft.SqlServer.Management.Collector.CollectionSet : SfcInstance {
    private static TraceContext tc;
    private static int DESCRIPTION_MAX_LENGTH;
    private short MAXIMUM_LOGGING_LEVEL;
    private short MINIMUM_LOGGING_LEVEL;
    private short DEFAULT_DAYS_UNTIL_EXPIRATION;
    private object syncLock;
    private CollectionItemCollection collectionItems;
    internal static string typeName;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Collector.CollectionItem")]
public CollectionItemCollection CollectionItems { get; }
    [SfcPropertyAttribute("512")]
public int Id { get; private set; }
    [SfcPropertyAttribute]
public Guid UId { get; public set; }
    [SfcPropertyAttribute]
[SfcKeyAttribute("0")]
public string Name { get; public set; }
    [SfcPropertyAttribute]
public string TargetName { get; public set; }
    [SfcPropertyAttribute]
public string ScheduleName { get; public set; }
    [SfcPropertyAttribute]
public string ProxyName { get; public set; }
    [SfcPropertyAttribute]
public CollectionModes CollectionMode { get; public set; }
    [SfcPropertyAttribute]
public short LoggingLevel { get; public set; }
    [SfcPropertyAttribute("512")]
public bool IsRunning { get; private set; }
    [SfcPropertyAttribute("512")]
public bool IsSystem { get; private set; }
    public bool IsTransactionPerformance { get; }
    [SfcPropertyAttribute]
public string Description { get; public set; }
    [SfcPropertyAttribute]
public short DaysUntilExpiration { get; public set; }
    public SfcObjectState State { get; }
    [SfcIgnoreAttribute]
internal object SyncLock { get; }
    public Key IdentityKey { get; }
    public CollectorConfigStore Parent { get; public set; }
    public CollectionSet(CollectorConfigStore store, string name);
    private static CollectionSet();
    public CollectionItemCollection get_CollectionItems();
    public int get_Id();
    private void set_Id(int value);
    public Guid get_UId();
    public void set_UId(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TargetName();
    public void set_TargetName(string value);
    public string get_ScheduleName();
    public void set_ScheduleName(string value);
    public string get_ProxyName();
    public void set_ProxyName(string value);
    public CollectionModes get_CollectionMode();
    public void set_CollectionMode(CollectionModes value);
    public short get_LoggingLevel();
    public void set_LoggingLevel(short value);
    public bool get_IsRunning();
    private void set_IsRunning(bool value);
    public bool get_IsSystem();
    private void set_IsSystem(bool value);
    public bool get_IsTransactionPerformance();
    public string get_Description();
    public void set_Description(string value);
    public short get_DaysUntilExpiration();
    public void set_DaysUntilExpiration(short value);
    public SfcObjectState get_State();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCreatable.ScriptCreate();
    public sealed virtual void Create();
    public sealed virtual ISfcScript ScriptAlter();
    public sealed virtual void Alter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDroppable.ScriptDrop();
    public sealed virtual void Drop();
    public void Rename(string newName);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.Rename(SfcKey newKey);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(SfcKey newKey);
    public void Stop();
    public void Start();
    public void Upload();
    public void RunOnce();
    public void Cleanup();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDiscoverObject.Discover(ISfcDependencyDiscoveryObjectSink sink);
    internal object get_SyncLock();
    protected virtual void PostCreate(object executionResult);
    protected virtual void PostAlter(object executionResult);
    protected virtual void PostDrop(object executionResult);
    private void StartStopUpload(string script, bool modifyIsRunning, bool isRunningVal, string exptnString);
    private string GetCreateScript();
    private string GetCreateSetScript(String& setParamName);
    private string GetRenameScript(Key newKey);
    private string GetAlterScript();
    private string GetAlterSetScript();
    private string GetAlterItemScript(CollectionItem item);
    private string GetDropScript();
    private string GetStartScript();
    private string GetStopScript();
    private string GetUploadScript();
    private string GetRunOnceScript();
    private string GetCleanupScript();
    private string CreateRemoveScript();
    private string GetDropStartStopUploadScript(string procName);
    private void CheckNewName(string newName);
    [ConditionalAttribute("DEBUG")]
private void AssertCorrectNumberOfTables(DataSet ds);
    public DataTable EnumCollectionSetExecutionHistory();
    public DataTable EnumCollectionSetExecutionHistory(long parentLogId);
    public DataTable EnumCollectionSetExecutionHistoryDetail(long logId);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public CollectorConfigStore get_Parent();
    public void set_Parent(CollectorConfigStore value);
    public static SfcObjectFactory GetObjectFactory();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    public DateTime GetLastUploadTime();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Collector.CollectionSetCollection : SfcCollatedDictionaryCollection`3<CollectionSet, Key, CollectorConfigStore> {
    private static TraceContext tc;
    public CollectionSet Item { get; }
    public CollectionSetCollection(CollectorConfigStore parent);
    private static CollectionSetCollection();
    public CollectionSet get_Item(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
}
public class Microsoft.SqlServer.Management.Collector.CollectionSetExtender : SfcObjectExtender`1<CollectionSet> {
    private static TraceContext tc;
    public CollectionSetExtender(CollectionSet collectionSet);
    public CollectionSetExtender(CollectorConfigStore collectorConfigStore, string name);
    private static CollectionSetExtender();
}
public class Microsoft.SqlServer.Management.Collector.CollectorConfigStore : SfcInstance {
    private static Guid SP_USAGE_COLLECTOR_GUID;
    private static Guid TABLE_ANALYSIS_COLLECTOR_GUID;
    internal static Guid[] TransactionPerformanceCollectors;
    private static TraceContext tc;
    private static int CACH_DIRECTORY_MAX_LENGTH;
    private object syncLock;
    private CollectionSetCollection collectionSets;
    private SfcObjectQuery objectQuery;
    internal static string typeName;
    private SqlStoreConnection storeConnection;
    private SfcConnectionContext context;
    [SfcPropertyAttribute]
public string MDWInstance { get; public set; }
    [SfcPropertyAttribute]
public string MDWDatabase { get; public set; }
    [SfcPropertyAttribute]
public string CacheDirectory { get; public set; }
    [SfcPropertyAttribute]
public int CacheWindow { get; public set; }
    [SfcPropertyAttribute("512")]
public bool Enabled { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Collector.CollectionSet")]
public CollectionSetCollection CollectionSets { get; }
    [SfcObjectAttribute("0", "0")]
internal SfcObjectQuery SfcObjectQuery { get; }
    [SfcIgnoreAttribute]
internal object SyncLock { get; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    private SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.ConnectionContext { get; }
    private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainName { get; }
    private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainInstanceName { get; }
    public CollectorConfigStore(SqlStoreConnection connection);
    private static CollectorConfigStore();
    public string get_MDWInstance();
    public void set_MDWInstance(string value);
    public string get_MDWDatabase();
    public void set_MDWDatabase(string value);
    public string get_CacheDirectory();
    public void set_CacheDirectory(string value);
    public int get_CacheWindow();
    public void set_CacheWindow(int value);
    public bool get_Enabled();
    public void ConfigureTransactionPerformanceCollectors(SqlConnection warehouseConnection);
    public CollectionSetCollection get_CollectionSets();
    internal SfcObjectQuery get_SfcObjectQuery();
    internal object get_SyncLock();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable.ScriptAlter();
    public sealed virtual void Alter();
    public StringCollection EnumTypes();
    public void EnableCollector();
    public void DisableCollector();
    private string GetAlterScript();
    private string ScriptAlterProperty(string procName, object propValue, string paramName);
    private void ExecuteScript(string script, string exceptionString);
    internal static string RethrowErrorScript();
    internal bool IsCleanupProcSupportedOnServer();
    private void AlterUID(Guid currentVal, Guid newVal);
    protected virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    protected virtual ISfcCollection GetChildCollection(string elementType);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(ISfcConnection connection);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(SfcObjectQueryMode activeQueriesMode);
    private sealed virtual override SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.get_ConnectionContext();
    private sealed virtual override Type Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetType(string typeName);
    private sealed virtual override ISfcExecutionEngine Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetExecutionEngine();
    private sealed virtual override SfcKey Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetKey(IUrnFragment urnFragment);
    private sealed virtual override SfcTypeMetadata Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetTypeMetadata(string typeName);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.UseSfcStateManagement();
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainName();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainInstanceName();
    private void CreateMDWTable(SqlConnection mdwConnection, string tableName, List`1<SqlParameter> columns);
    private void CreateStoredProcCollector(SqlConnection warehouseConnection);
    private void CreateTableAnalysisCollector(SqlConnection warehouseConnection);
}
public class Microsoft.SqlServer.Management.Collector.CollectorException : SqlServerManagementException {
    private static TraceContext tc;
    private static string prodVer;
    protected static string ProdVer { get; }
    public string HelpLink { get; }
    public CollectorException(string message);
    public CollectorException(string message, Exception innerException);
    public CollectorException(SerializationInfo info, StreamingContext context);
    private static CollectorException();
    private void TraceExceptionDetails();
    private void Init();
    protected static string get_ProdVer();
    protected internal CollectorException SetHelpContext(string resource);
    public virtual string get_HelpLink();
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Collector.ExceptionTemplatesSR : object {
    public static CultureInfo Culture { get; public set; }
    public static string ConfigStoreCannotBeNull { get; }
    public static string UnableToAlterConfigStore { get; }
    public static string UnableToEnableCollector { get; }
    public static string UnableToDisableCollector { get; }
    public static string UnableToEnumerateCollectorTypes { get; }
    public static string UnableToReadExecutionLog { get; }
    public static string CollectionItemHasNoName { get; }
    public static string CollectionItemCannotBeNull { get; }
    public static string ParentCollectionSetCannotBeNull { get; }
    public static string CollectionSetHasNoName { get; }
    public static string CollectionSetCannotBeNull { get; }
    public static string CannotSetObjectNameExistingObject { get; }
    public static string NameNotNull { get; }
    public static string SqlConnectionCannotBeNull { get; }
    public static string UnsupportedAction { get; }
    public static string UnableToCreateMDWObjects { get; }
    public static string StoredProcAnalysisCollectorName { get; }
    public static string StoredProcAnalysisCollectorDesc { get; }
    public static string TableAnalysisCollectorName { get; }
    public static string TableAnalysisCollectorDesc { get; }
    public static string TableStatsName { get; }
    public static string MigrationBlockers { get; }
    public static string TransactionCount { get; }
    public static string SPStatsName { get; }
    public static string SPTableRefs { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ConfigStoreCannotBeNull();
    public static string get_UnableToAlterConfigStore();
    public static string get_UnableToEnableCollector();
    public static string get_UnableToDisableCollector();
    public static string get_UnableToEnumerateCollectorTypes();
    public static string get_UnableToReadExecutionLog();
    public static string get_CollectionItemHasNoName();
    public static string get_CollectionItemCannotBeNull();
    public static string get_ParentCollectionSetCannotBeNull();
    public static string get_CollectionSetHasNoName();
    public static string get_CollectionSetCannotBeNull();
    public static string get_CannotSetObjectNameExistingObject();
    public static string get_NameNotNull();
    public static string get_SqlConnectionCannotBeNull();
    public static string get_UnsupportedAction();
    public static string get_UnableToCreateMDWObjects();
    public static string get_StoredProcAnalysisCollectorName();
    public static string get_StoredProcAnalysisCollectorDesc();
    public static string get_TableAnalysisCollectorName();
    public static string get_TableAnalysisCollectorDesc();
    public static string get_TableStatsName();
    public static string get_MigrationBlockers();
    public static string get_TransactionCount();
    public static string get_SPStatsName();
    public static string get_SPTableRefs();
    public static string CollectionItemAlreadyCreatedBefore(string itemName);
    public static string CollectionItemAlreadyInCollection(string itemName);
    public static string CollectionItemNoType(string itemName);
    public static string CollectionItemNotInCollection(string itemName);
    public static string CollectionItemWasNotCreated(string itemName);
    public static string CollectionItemWasRemoved(string itemName);
    public static string CollectionFrequencyIsNegative(string itemName);
    public static string CollectionFrequencyTooLarge(int maxVal);
    public static string UnableToAlterCollectionItem(string itemName);
    public static string CollectionSetAlreadyExists(string setName);
    public static string CollectionSetWithoutSchedule(string setName);
    public static string CollectionSetProxyNotExist(string proxyName);
    public static string CollectionSetScheduleNotExist(string schedName, string setName);
    public static string CollectionSetDoesNotExist(string setName);
    public static string CollectionSetWasRemoved(string setName);
    public static string InvalidCollectionMode(string setName);
    public static string InvalidLoggingLevel(string setName);
    public static string InvalidDaysUntilExpiration(string setName);
    public static string UnableToCreateCollectionSet(string setName);
    public static string UnableToAlterCollectionSet(string setName);
    public static string UnableToDropCollectionSet(string setName);
    public static string UnableToStartCollectionSet(string setName);
    public static string UnableToStopCollectionSet(string setName);
    public static string UnableToUploadCollectionSet(string setName);
    public static string UnableToRunCollectionSet(string setName);
    public static string UnableToCleanupCollectionSet(string setName);
    public static string ValueTooLong(string valueName, int maxLength);
    public static string NoSuchCollection(string name);
    public static string UnknownEnumeration(string type);
    public static string UnsupportedObjectTypeByFactory(string host, string typeName);
    public static string UnsupportedObjectType(string type, string host);
    public static string UnsupportedConnectionType(string type);
    public static string UnableToCreateSPParserFn(string name);
    public static string UnableToCreateTblParserFn(string name);
}
internal class Microsoft.SqlServer.Management.Collector.Helpers : object {
    internal static int SYSNAME_MAX_LENGTH;
    internal static string TraceSourceName;
    internal static void CheckPropertyValueLength(string value, int maxLength, string propertyName);
}
internal class Microsoft.SqlServer.Management.Collector.TsqlProcFormatter : object {
    private static TraceContext tc;
    private List`1<SprocArg> arguments;
    private string procedure;
    private bool hasOutput;
    internal static int sequence;
    public string Procedure { get; public set; }
    public List`1<SprocArg> Arguments { get; }
    public bool HasOutput { get; }
    private static TsqlProcFormatter();
    public string get_Procedure();
    public void set_Procedure(string value);
    public List`1<SprocArg> get_Arguments();
    public bool get_HasOutput();
    public string GenerateScript(SfcInstance sfcObject);
    public string GenerateScript(SfcInstance sfcObject, IEnumerable`1<RuntimeArg> runtimeArgs);
    public string GenerateScript(SfcInstance sfcObject, IEnumerable`1<RuntimeArg> runtimeArgs, IEnumerable`1<ScriptTypeArg> scriptArgs);
    internal static string EscapeString(string s, char cEsc);
    internal static string SqlString(string s);
    internal static string MakeSqlString(string s);
    internal static string SqlBraket(string s);
    internal static string MakeSqlBraket(string s);
    internal static string SqlStringBraket(string s);
}
internal class Microsoft.SqlServer.Management.Diagnostics.SQLToolsCommonTraceLvl : ValueType {
    public static UInt32 L1;
    public static UInt32 L2;
    public static UInt32 L3;
    public static UInt32 L4;
    public static UInt32 Always;
    public static UInt32 Warning;
    public static UInt32 Error;
}
internal static class Microsoft.SqlServer.Management.Diagnostics.TraceHelper : object {
    private static UInt32 TraceLevelAssert;
    private static UInt32 TraceLevelException;
    private static string AddDate(string str);
    public static void Trace(string strComponentName, string strFormat, Object[] args);
    public static void Trace(string strComponentName, UInt32 traceLevel, string strFormat, Object[] args);
    public static void Assert(bool condition);
    public static void Assert(bool condition, string strFormat);
    public static void Implies(bool a, bool b, string s);
    public static void LogExCatch(Exception ex);
}
internal static class Microsoft.SqlServer.Management.Diagnostics.TraceLvl : object {
    public static UInt32 L1;
    public static UInt32 L2;
    public static UInt32 L3;
    public static UInt32 L4;
    public static UInt32 Always;
    public static UInt32 Warning;
    public static UInt32 Error;
}
