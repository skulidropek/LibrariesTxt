public class Microsoft.SqlServer.Management.HadrModel.AddDatabaseToExistingAgScenarioProvider : ScenarioProvider`2<IValidatorProvider, ITasksProvider> {
    [CompilerGeneratedAttribute]
private AvailabilityGroupData <AvailabilityGroupData>k__BackingField;
    public AvailabilityGroupData AvailabilityGroupData { get; private set; }
    public AddDatabaseToExistingAgScenarioProvider(AvailabilityGroupData data);
    [CompilerGeneratedAttribute]
public AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
private void set_AvailabilityGroupData(AvailabilityGroupData value);
    public virtual List`1<Validator> Validators();
    public virtual List`1<HadrTask> Tasks();
    public virtual List`1<HadrTask> RollbackTasks();
}
public class Microsoft.SqlServer.Management.HadrModel.AddDatabaseToExistingAvailabilityGroupTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public AddDatabaseToExistingAvailabilityGroupTask(AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.AddDBCredentialTask : HadrTask {
    private bool useExistingAvailabilityDatabases;
    private AvailabilityGroupData availabilityGroupData;
    private string databaseName;
    private AvailabilityGroupReplica replica;
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public AvailabilityGroupReplica ReplicaData { get; }
    public bool UseExistingAvailabilityDatabases { get; public set; }
    public AddDBCredentialTask(string databaseName, AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
    public AvailabilityGroupData get_AvailabilityGroupData();
    public AvailabilityGroupReplica get_ReplicaData();
    public bool get_UseExistingAvailabilityDatabases();
    public void set_UseExistingAvailabilityDatabases(bool value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
    [CompilerGeneratedAttribute]
private bool <Perform>b__12_0(PrimaryDatabaseData c);
}
public class Microsoft.SqlServer.Management.HadrModel.AddNewAvailabilityGroupListenerTask : HadrTask {
    private AvailabilityGroup availabilityGroup;
    private AvailabilityGroupListenerConfiguration availabilityGroupListenerConfiguration;
    public AddNewAvailabilityGroupListenerTask(string name, AvailabilityGroup AvailabilityGroup, AvailabilityGroupListenerConfiguration AvailabilityGroupListenerConfiguration);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.AddReplicaDatabaseExistenceValidator : DatabaseExistenceValidator {
    public AddReplicaDatabaseExistenceValidator(AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
}
public class Microsoft.SqlServer.Management.HadrModel.AddReplicaDatabaseFileCompatibilityValidator : DatabaseFileCompatibilityValidator {
    public AddReplicaDatabaseFileCompatibilityValidator(AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
}
public class Microsoft.SqlServer.Management.HadrModel.AddReplicaDatabaseFileExistenceValidator : DatabaseFileExistenceValidator {
    public AddReplicaDatabaseFileExistenceValidator(AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
}
public class Microsoft.SqlServer.Management.HadrModel.AddReplicasToExistingAvailabilityGroupScenarioProvider : ScenarioProvider`2<IValidatorProvider, ITasksProvider> {
    [CompilerGeneratedAttribute]
private AvailabilityGroupData <AvailabilityGroupData>k__BackingField;
    public AvailabilityGroupData AvailabilityGroupData { get; private set; }
    public AddReplicasToExistingAvailabilityGroupScenarioProvider(AvailabilityGroupData data);
    [CompilerGeneratedAttribute]
public AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
private void set_AvailabilityGroupData(AvailabilityGroupData value);
    public virtual List`1<Validator> Validators();
    public virtual List`1<HadrTask> RollbackTasks();
    public virtual List`1<HadrTask> Tasks();
}
public class Microsoft.SqlServer.Management.HadrModel.AddReplicaTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public AddReplicaTask(AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
internal static class Microsoft.SqlServer.Management.HadrModel.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
public class Microsoft.SqlServer.Management.HadrModel.AvailabilityGroupNotJoinedOnReplicaException : HadrTaskBaseException {
    public AvailabilityGroupNotJoinedOnReplicaException(string availabilityGroupName, string replicaServerName);
}
public class Microsoft.SqlServer.Management.HadrModel.AvailabilityGroupQuorumValidationTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    public AvailabilityGroupQuorumValidationTask(AvailabilityGroupData availabilityGroupData);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.AvailabilityGroupQuorumValidationTaskException : HadrTaskBaseException {
    public AvailabilityGroupQuorumValidationTaskException(string availabilityGroupName);
    public AvailabilityGroupQuorumValidationTaskException(string availabilityGroupName, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.AvailabilityModeIncompatibleException : HadrValidationErrorException {
}
public class Microsoft.SqlServer.Management.HadrModel.AvailabilityModeValidator : Validator {
    private AvailabilityGroupData availabilityGroupData;
    public AvailabilityModeValidator(AvailabilityGroupData availabilityGroupData);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.BackupDatabaseTask : HadrTask {
    private AvailabilityGroupData _availabilityGroupData;
    private string _databaseName;
    private Backup _backup;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public BackupDatabaseTask(string databaseName, AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    public AvailabilityGroupData get_AvailabilityGroupData();
    public void Abort();
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
    private SqlException GetSqlException(Exception ex);
}
public class Microsoft.SqlServer.Management.HadrModel.BackupDatabaseTaskException : HadrTaskBaseException {
    public BackupDatabaseTaskException(string DatabaseName, Exception inner);
    public BackupDatabaseTaskException(string DatabaseName);
}
public class Microsoft.SqlServer.Management.HadrModel.BackupLocationValidator : Validator {
    private Server primaryServer;
    private List`1<Server> onPremiseSecondaryServers;
    private static string DatabaseNameFormat;
    private string testDatabaseName;
    [CompilerGeneratedAttribute]
private AvailabilityGroupData <AvailabilityGroupData>k__BackingField;
    public AvailabilityGroupData AvailabilityGroupData { get; private set; }
    public BackupLocationValidator(AvailabilityGroupData data);
    [CompilerGeneratedAttribute]
public AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
private void set_AvailabilityGroupData(AvailabilityGroupData value);
    private void Initialize(AvailabilityGroupData data);
    protected virtual void Validate(IExecutionPolicy policy);
    private Database CreateTemporaryDatabaseOnPrimary();
    private void BackupTemporaryDatabase(Database database, string backupFileName);
    private void ValidateBackupOnSecondaries(string backupFileName);
}
public class Microsoft.SqlServer.Management.HadrModel.BackupLogTask : HadrTask {
    private AvailabilityGroupData _availabilityGroupData;
    private string _databaseName;
    private Backup _backup;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public BackupLogTask(string databaseName, AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    public AvailabilityGroupData get_AvailabilityGroupData();
    public void Abort();
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.BackupLogTaskException : HadrTaskBaseException {
    public BackupLogTaskException(string databaseName, Exception inner);
    public BackupLogTaskException(string databaseName);
}
public class Microsoft.SqlServer.Management.HadrModel.BasicAvailabilityGroupIncompatibleException : HadrValidationErrorException {
    public BasicAvailabilityGroupIncompatibleException(string reason);
}
public class Microsoft.SqlServer.Management.HadrModel.BasicAvailabilityGroupValidator : Validator {
    private static int DefaultBackupPriority;
    private AvailabilityGroupData availabilityGroupData;
    public BasicAvailabilityGroupValidator(AvailabilityGroupData availabilityGroupData);
    protected virtual void Validate(IExecutionPolicy policy);
}
public enum Microsoft.SqlServer.Management.HadrModel.ClusterNodeState : Enum {
    public int value__;
    public static ClusterNodeState Unknown;
    public static ClusterNodeState Up;
    public static ClusterNodeState Down;
    public static ClusterNodeState Paused;
    public static ClusterNodeState Joining;
}
public class Microsoft.SqlServer.Management.HadrModel.CompatibleEncryptionValidator : Validator {
    [CompilerGeneratedAttribute]
private AvailabilityGroupData <AvailabilityGroupData>k__BackingField;
    private AvailabilityGroupData AvailabilityGroupData { get; private set; }
    public CompatibleEncryptionValidator(AvailabilityGroupData data);
    [CompilerGeneratedAttribute]
private AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
private void set_AvailabilityGroupData(AvailabilityGroupData value);
    protected virtual void Validate(IExecutionPolicy policy);
    private void ValidateReplicaEndpointEncryptionAlgorithm(AvailabilityGroupReplica replica, EndpointEncryptionAlgorithm encryptionAlgorithm);
    private EndpointEncryption ValidateReplicaEndpointEncryption(AvailabilityGroupReplica replica, EndpointEncryption encryption);
    private string GetReplicasString();
}
public class Microsoft.SqlServer.Management.HadrModel.ConfigureEndpointsTask : HadrTask {
    private AvailabilityGroupReplica replica;
    private IEnumerable`1<string> loginNames;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public ConfigureEndpointsTask(AvailabilityGroupReplica replica, IEnumerable`1<string> loginNames);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.CreateAvailabilityGroupDatabaseExistenceValidator : DatabaseExistenceValidator {
    public CreateAvailabilityGroupDatabaseExistenceValidator(AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
}
public class Microsoft.SqlServer.Management.HadrModel.CreateAvailabilityGroupDatabaseFileCompatibilityValidator : DatabaseFileCompatibilityValidator {
    public CreateAvailabilityGroupDatabaseFileCompatibilityValidator(AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
}
public class Microsoft.SqlServer.Management.HadrModel.CreateAvailabilityGroupDatabaseFileExistenceValidator : DatabaseFileExistenceValidator {
    public CreateAvailabilityGroupDatabaseFileExistenceValidator(AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
}
public class Microsoft.SqlServer.Management.HadrModel.CreateAvailabilityGroupListenerTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public CreateAvailabilityGroupListenerTask(AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.CreateAvailabilityGroupScenarioProvider : ScenarioProvider`2<IValidatorProvider, ITasksProvider> {
    [CompilerGeneratedAttribute]
private AvailabilityGroupData <AvailabilityGroupData>k__BackingField;
    public AvailabilityGroupData AvailabilityGroupData { get; private set; }
    public CreateAvailabilityGroupScenarioProvider(AvailabilityGroupData data);
    [CompilerGeneratedAttribute]
public AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
private void set_AvailabilityGroupData(AvailabilityGroupData value);
    public virtual List`1<Validator> Validators();
    public virtual List`1<HadrTask> RollbackTasks();
    public virtual List`1<HadrTask> Tasks();
    private void AddInitialAgSeedingTasks(IList`1<HadrTask> tasks);
}
public class Microsoft.SqlServer.Management.HadrModel.CreateAvailabilityGroupTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public CreateAvailabilityGroupTask(AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.CreateLoginTask : HadrTask {
    private IEnumerable`1<string> windowsLogins;
    private AvailabilityGroupReplica replica;
    public CreateLoginTask(AvailabilityGroupReplica replica, IEnumerable`1<string> windowsLogins);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.DatabaseAlreadyExistsException : HadrValidationErrorException {
    public DatabaseAlreadyExistsException(string replicaName, IEnumerable`1<string> existingDatabases);
}
public abstract class Microsoft.SqlServer.Management.HadrModel.DatabaseExistenceValidator : Validator {
    [CompilerGeneratedAttribute]
private AvailabilityGroupData <AvailabilityGroupData>k__BackingField;
    private AvailabilityGroupReplica replica;
    [CompilerGeneratedAttribute]
private List`1<PrimaryDatabaseData> <DatabasesToValidate>k__BackingField;
    public AvailabilityGroupData AvailabilityGroupData { get; private set; }
    public List`1<PrimaryDatabaseData> DatabasesToValidate { get; protected set; }
    protected DatabaseExistenceValidator(string name, AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
    [CompilerGeneratedAttribute]
public AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
private void set_AvailabilityGroupData(AvailabilityGroupData value);
    [CompilerGeneratedAttribute]
public List`1<PrimaryDatabaseData> get_DatabasesToValidate();
    [CompilerGeneratedAttribute]
protected void set_DatabasesToValidate(List`1<PrimaryDatabaseData> value);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.DatabaseFileAlreadyExistsOnReplicaException : HadrValidationErrorException {
    public DatabaseFileAlreadyExistsOnReplicaException(string replicaName, IEnumerable`1<string> existingFiles);
}
public abstract class Microsoft.SqlServer.Management.HadrModel.DatabaseFileCompatibilityValidator : Validator {
    private AvailabilityGroupData availabilityGroupData;
    private AvailabilityGroupReplica replica;
    [CompilerGeneratedAttribute]
private List`1<PrimaryDatabaseData> <DatabasesToValidate>k__BackingField;
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public List`1<PrimaryDatabaseData> DatabasesToValidate { get; protected set; }
    protected DatabaseFileCompatibilityValidator(string name, AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
    public AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
public List`1<PrimaryDatabaseData> get_DatabasesToValidate();
    [CompilerGeneratedAttribute]
protected void set_DatabasesToValidate(List`1<PrimaryDatabaseData> value);
    protected virtual void Validate(IExecutionPolicy policy);
}
public abstract class Microsoft.SqlServer.Management.HadrModel.DatabaseFileExistenceValidator : Validator {
    private AvailabilityGroupData availabilityGroupData;
    private AvailabilityGroupReplica replica;
    [CompilerGeneratedAttribute]
private List`1<PrimaryDatabaseData> <DatabasesToValidate>k__BackingField;
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public List`1<PrimaryDatabaseData> DatabasesToValidate { get; protected set; }
    protected DatabaseFileExistenceValidator(string name, AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
    public AvailabilityGroupData get_AvailabilityGroupData();
    [CompilerGeneratedAttribute]
public List`1<PrimaryDatabaseData> get_DatabasesToValidate();
    [CompilerGeneratedAttribute]
protected void set_DatabasesToValidate(List`1<PrimaryDatabaseData> value);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.DatabaseFileLocationMissingOnReplicaException : HadrValidationErrorException {
    public DatabaseFileLocationMissingOnReplicaException(string replicaName, IEnumerable`1<string> missingFolders);
}
public class Microsoft.SqlServer.Management.HadrModel.DatabaseFileNotInDefaultDirectoryException : HadrValidationErrorException {
    public DatabaseFileNotInDefaultDirectoryException(string defaultDataFolder, string defaultLogFolder, IEnumerable`1<string> filesNotInDefaultDirectory);
}
public class Microsoft.SqlServer.Management.HadrModel.DatabaseMasterKeyValidator : Validator {
    private bool validateExistingDbMode;
    public AvailabilityGroupData availabilityGroupData;
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public bool ValidateExistingDbMode { get; public set; }
    public DatabaseMasterKeyValidator(AvailabilityGroupData availabilityGroupData);
    public AvailabilityGroupData get_AvailabilityGroupData();
    public bool get_ValidateExistingDbMode();
    public void set_ValidateExistingDbMode(bool value);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.DriveNotFoundOnReplicaException : HadrValidationErrorException {
    public DriveNotFoundOnReplicaException(char driveLetter, string replicaName);
}
public class Microsoft.SqlServer.Management.HadrModel.EditExistingAvailabilityGroupListenerTask : HadrTask {
    private AvailabilityGroup availabilityGroup;
    private AvailabilityGroupListenerConfiguration availabilityGroupListenerConfiguration;
    public EditExistingAvailabilityGroupListenerTask(string name, AvailabilityGroup AvailabilityGroup, AvailabilityGroupListenerConfiguration AvailabilityGroupListenerConfiguration);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.EncryptionAlgorithmMismatchException : HadrValidationErrorException {
    public EncryptionAlgorithmMismatchException(string replicasString);
}
public class Microsoft.SqlServer.Management.HadrModel.EncryptionMismatchException : HadrTaskBaseException {
    public EncryptionMismatchException(string replicasString);
}
public class Microsoft.SqlServer.Management.HadrModel.EndpointAuthenticationValidationException : HadrValidationErrorException {
    public EndpointAuthenticationValidationException(string endpointName, string authenticationType);
    public EndpointAuthenticationValidationException(string endpointName, string authenticationType, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.EndpointAuthenticationValidator : Validator {
    private AvailabilityGroupData availabilityGroupData;
    public EndpointAuthenticationValidator(AvailabilityGroupData agData);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.FailoverQuorumVoteConfigurationValidator : Validator {
    private FailoverData failoverData;
    public FailoverQuorumVoteConfigurationValidator(FailoverData failoverData);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.FailoverScenarioProvider : ScenarioProvider`2<IValidatorProvider, ITasksProvider> {
    private FailoverData failoverData;
    public FailoverScenarioProvider(FailoverData failoverData);
    public virtual List`1<Validator> Validators();
    public virtual List`1<HadrTask> RollbackTasks();
    public virtual List`1<HadrTask> Tasks();
}
public class Microsoft.SqlServer.Management.HadrModel.FailoverTask : HadrTask {
    private FailoverData failoverData;
    public FailoverTask(FailoverData failoverData);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.FailoverValidationException : HadrTaskBaseException {
    public FailoverValidationException(string replicaName, string replicaRole);
    public FailoverValidationException(string replicaName, string replicaRole, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.FailoverValidator : Validator {
    private FailoverData failoverData;
    public FailoverValidator(FailoverData failoverData);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.FailoverWaitRoleChangeValidator : Validator {
    private FailoverData failoverData;
    public FailoverWaitRoleChangeValidator(FailoverData failoverData);
    protected virtual void Validate(IExecutionPolicy policy);
}
public enum Microsoft.SqlServer.Management.HadrModel.FeatureInstallationState : Enum {
    public int value__;
    public static FeatureInstallationState Unknown;
    public static FeatureInstallationState Installed;
    public static FeatureInstallationState NotInstalled;
}
public class Microsoft.SqlServer.Management.HadrModel.FixedRetryCountPolicy : object {
    private int retryCount;
    private int maxRetry;
    private TimeSpan interval;
    public bool Expired { get; public set; }
    public FixedRetryCountPolicy(TimeSpan interval, int maxRetry);
    public sealed virtual bool ResumeExecution();
    public sealed virtual bool get_Expired();
    public sealed virtual void set_Expired(bool value);
    public sealed virtual TimeSpan BackoffInterval();
}
public class Microsoft.SqlServer.Management.HadrModel.FixedTimeoutRetryPolicy : object {
    private TimeSpan timeout;
    private TimeSpan interval;
    private DateTime startTime;
    public bool Expired { get; public set; }
    public FixedTimeoutRetryPolicy(TimeSpan timeout, TimeSpan interval);
    public sealed virtual bool ResumeExecution();
    public sealed virtual bool get_Expired();
    public sealed virtual void set_Expired(bool value);
    public sealed virtual TimeSpan BackoffInterval();
}
public class Microsoft.SqlServer.Management.HadrModel.FreeDiskSpaceValidator : Validator {
    private AvailabilityGroupData availabilityGroupData;
    private AvailabilityGroupReplica replica;
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public FreeDiskSpaceValidator(AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
    public AvailabilityGroupData get_AvailabilityGroupData();
    protected virtual void Validate(IExecutionPolicy policy);
    private char GetDataDriveLetterOfReplica();
    private char GetLogDriveLetterOfReplica();
    private long GetFreeSpaceOnReplicaDrive(char driveLetter);
}
public enum Microsoft.SqlServer.Management.HadrModel.GroupUserMembership : Enum {
    public int value__;
    public static GroupUserMembership Unknown;
    public static GroupUserMembership Member;
    public static GroupUserMembership NonMember;
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Management.HadrModel.HadrModelUtilities : object {
    public static string diskpartLogFileSuffix;
    public static string wizardAlwaysonStr;
    private static HadrModelUtilities();
    public static string SanitizeFileName(string name);
    public static Server GetNewSmoServerObject(ServerConnection primaryConnection);
    [ExtensionAttribute]
public static string GetDatabaseBackupFileFullName(AvailabilityGroupData agData, Server server, string databaseName);
    [ExtensionAttribute]
public static string GetLogBackupFileFullName(AvailabilityGroupData agData, Server server, string databaseName);
    [ExtensionAttribute]
private static string GetBackupFileFullName(AvailabilityGroupData agData, Server server, string databaseName, string fileExtension);
}
public abstract class Microsoft.SqlServer.Management.HadrModel.HadrTask : object {
    [CompilerGeneratedAttribute]
private TaskUpdateEventHandler TaskProgressEventHandler;
    protected IExecutionPolicy policy;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private CancellationToken token;
    public string Name { get; public set; }
    public bool IsCancelled { get; }
    public HadrTask(string name);
    [CompilerGeneratedAttribute]
public void add_TaskProgressEventHandler(TaskUpdateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TaskProgressEventHandler(TaskUpdateEventHandler value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public bool get_IsCancelled();
    protected void TaskWait(int waitTimeInMs);
    public void Perform(IExecutionPolicy policy, CancellationToken token, ScenarioTaskHandler taskDelegate);
    public void Rollback(IExecutionPolicy policy, ScenarioTaskHandler rollbackDelegate);
    public void TaskUpdateEventHandler(object sender, TaskEventArgs e);
    protected abstract virtual void Perform(IExecutionPolicy policy);
    protected abstract virtual void Rollback(IExecutionPolicy policy);
    protected void UpdateStatus(TaskEventArgs e);
}
public class Microsoft.SqlServer.Management.HadrModel.HadrTaskBaseException : Exception {
    public HadrTaskBaseException(string message);
    public HadrTaskBaseException(string message, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.HadrTaskErrorException : Exception {
    public HadrTaskErrorException(string message);
    public HadrTaskErrorException(string message, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.HadrValidationBaseException : Exception {
    public HadrValidationBaseException(string message);
    public HadrValidationBaseException(string message, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.HadrValidationErrorException : Exception {
    public HadrValidationErrorException(string message);
    public HadrValidationErrorException(string message, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.HadrValidationWarningException : Exception {
    public HadrValidationWarningException(string message);
    public HadrValidationWarningException(string message, Exception inner);
}
public interface Microsoft.SqlServer.Management.HadrModel.IExecutionPolicy {
    public bool Expired { get; public set; }
    public abstract virtual bool get_Expired();
    public abstract virtual void set_Expired(bool value);
    public abstract virtual bool ResumeExecution();
    public abstract virtual TimeSpan BackoffInterval();
}
public class Microsoft.SqlServer.Management.HadrModel.InSufficientFreeSpaceForDatabaseFilesException : HadrValidationErrorException {
    public InSufficientFreeSpaceForDatabaseFilesException(string replicaName);
}
public class Microsoft.SqlServer.Management.HadrModel.InvalidAvailabilityGroupException : HadrTaskBaseException {
    public InvalidAvailabilityGroupException(string availabilityGroupName, string serverName);
}
public interface Microsoft.SqlServer.Management.HadrModel.IScriptableTask {
    public List`1<ServerConnection> ScriptingConnections { get; }
    public abstract virtual List`1<ServerConnection> get_ScriptingConnections();
}
public interface Microsoft.SqlServer.Management.HadrModel.ITasksProvider {
    public abstract virtual List`1<HadrTask> Tasks();
}
public interface Microsoft.SqlServer.Management.HadrModel.IValidatorProvider {
    public abstract virtual List`1<Validator> Validators();
}
public class Microsoft.SqlServer.Management.HadrModel.JoinDatabaseToAvailabilityGroupException : HadrTaskBaseException {
    public JoinDatabaseToAvailabilityGroupException(Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.JoinDatabaseToAvailabilityGroupTask : HadrTask {
    private static int JoinAvailabilityGroupRetryTimes;
    private static int JoinAvailabilityGroupSleepBetweenRetries;
    private AvailabilityGroupData availabilityGroupData;
    private AvailabilityGroupReplica replica;
    private string databaseName;
    public string DatabaseName { get; }
    public AvailabilityGroupReplica ReplicaData { get; }
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public JoinDatabaseToAvailabilityGroupTask(string databaseName, AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
    public string get_DatabaseName();
    public AvailabilityGroupReplica get_ReplicaData();
    public AvailabilityGroupData get_AvailabilityGroupData();
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
    private bool JoinDatabaseToAvailabilityGroup(AvailabilityDatabase availabilityDatabase);
}
public class Microsoft.SqlServer.Management.HadrModel.JoinSecondariesTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public JoinSecondariesTask(AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.ListenerConfigurationException : HadrValidationErrorException {
}
public class Microsoft.SqlServer.Management.HadrModel.ListenerConfigurationValidator : Validator {
    private AvailabilityGroupData availabilityGroupData;
    public ListenerConfigurationValidator(AvailabilityGroupData availabilityGroupData);
    protected virtual void Validate(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.MaxHostedServicesException : HadrValidationBaseException {
    public MaxHostedServicesException(string hostedServiceName, string currentHostedService);
    public MaxHostedServicesException(string hostedServiceName, string currentHostedService, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.PercentCompleteHandler : object {
    private string taskName;
    public static int PercentCompleteNotification;
    protected int percentComplete;
    [CompilerGeneratedAttribute]
private TaskUpdateEventHandler TaskProgressEventHandler;
    public PercentCompleteHandler(string taskName);
    [CompilerGeneratedAttribute]
public void add_TaskProgressEventHandler(TaskUpdateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TaskProgressEventHandler(TaskUpdateEventHandler value);
    public void UpdateStatus(TaskEventArgs e);
    public void percentCompleteHandler(object sender, PercentCompleteEventArgs e);
}
public class Microsoft.SqlServer.Management.HadrModel.PrimaryCannotWriteToLocationException : HadrTaskBaseException {
    public PrimaryCannotWriteToLocationException(string primaryServerName, string backupLocation);
    public PrimaryCannotWriteToLocationException(string primaryServerName, string backupLocation, Exception innerException);
}
internal class Microsoft.SqlServer.Management.HadrModel.QuorumHelper : object {
    public static bool ValidateQuorumVoteConfiguration(AvailabilityGroup group);
    private static bool AllNodesHaveQuorumVote(string replica, DataTable table);
    private static bool AnyNodesHaveQuorumVote(string replica, DataTable table);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.HadrModel.QuorumHelper/<GetReplicaNodes>d__3")]
private static IEnumerable`1<DataRow> GetReplicaNodes(string targetReplicaName, DataTable table);
}
public class Microsoft.SqlServer.Management.HadrModel.QuorumHelperException : HadrTaskBaseException {
    public QuorumHelperException(string ReplicaName, Exception inner);
    public QuorumHelperException(string ReplicaName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.HadrModel.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddDatabaseCredentialText { get; }
    internal static string AddDatabaseToExistingAvailabilityGroupText { get; }
    internal static string AddDomainUserInAdminGroupTaskException { get; }
    internal static string AddDomainUserInAdminGroupText { get; }
    internal static string AddDomainUserInSQLAdminTaskAddDomainAccountToServiceAccountException { get; }
    internal static string AddDomainUserInSQLAdminTaskAddUserToSqlAdminException { get; }
    internal static string AddDomainUserInSQLAdminText { get; }
    internal static string AddNodeInClusterTaskClusterNotOnlineException { get; }
    internal static string AddNodeInClusterText { get; }
    internal static string AddNodeInClusterVerificationError { get; }
    internal static string AddReplicaText { get; }
    internal static string AvailabilityGroupNotExists { get; }
    internal static string AvailabilityGroupNotJoined { get; }
    internal static string AvailabilityGroupQuorumValidatorException { get; }
    internal static string AvailabilityModeCompatibilityWarning { get; }
    internal static string BackupDatabaseTaskException { get; }
    internal static string BackupDatabaseText { get; }
    internal static string BackupLocationNotProvidedErrorMessage { get; }
    internal static string BackupLogTaskException { get; }
    internal static string BackupLogText { get; }
    internal static string BasicAvailabilityGroupIncompatibleException { get; }
    internal static string BasicBackupPriorityReason { get; }
    internal static string BasicListenerReason { get; }
    internal static string BasicSecondaryRoleReason { get; }
    internal static string BasicTooManyDatabasesReason { get; }
    internal static string BasicTooManyReplicasReason { get; }
    internal static string CheckingListenerConfiguration { get; }
    internal static string ClusterNameOnlineValidatorException { get; }
    internal static string ConfigureEndpointsText { get; }
    internal static string ConfigureSQLForAlwaysonTaskException { get; }
    internal static string ConnectRemotePowersehllError { get; }
    internal static string CreateAvailabilityGroupListenerText { get; }
    internal static string CreateAvailabilityGroupText { get; }
    internal static string CreateLoginText { get; }
    internal static string CreateStorageServiceNoStatusException { get; }
    internal static string CreateStorageServiceStatusFailException { get; }
    internal static string CreateVirtualDisk2 { get; }
    internal static string CreatingAvailabilityGroup { get; }
    internal static string CreatingLoginsOnReplica { get; }
    internal static string DataBaseDiskSizeValidationException { get; }
    internal static string DatabaseFileLocationMissingOnReplicaException { get; }
    internal static string DatabaseFileNotInDefaultDirectoryException { get; }
    internal static string DatabasesExistingOnReplica { get; }
    internal static string DBMKPasswordIncorrect { get; }
    internal static string DeleteDeploymentNoStatusException { get; }
    internal static string DeleteDeploymentStatusFailException { get; }
    internal static string DeleteHostedServiceNoStatusException { get; }
    internal static string DeleteHostedServiceStatusFailException { get; }
    internal static string DeleteStorageServiceNoStatusException { get; }
    internal static string DeleteStorageServiceStatusFailException { get; }
    internal static string DeleteVirtualMachineNoStatusException { get; }
    internal static string DeleteVirtualMachineStatusException { get; }
    internal static string DeploymentHealthyValidationDeploymentNotAvailableException { get; }
    internal static string DeploymentNotExistException { get; }
    internal static string DeploymentVirtualNetworkConfigurationVirtualNetworkNotMatchException { get; }
    internal static string DriveNotFoundOnReplica { get; }
    internal static string EnableWindowsFailoverClusterTaskException { get; }
    internal static string EnablingXeventOnReplica { get; }
    internal static string EncryptionMismatchException { get; }
    internal static string EndpointAuthenticationValidatorException { get; }
    internal static string FailoverValidationException { get; }
    internal static string FieldSetUpdate { get; }
    internal static string ForcedFailoverTaskText { get; }
    internal static string FormatDataDiskTaskException { get; }
    internal static string FreeSpaceUnavailableForDataFileDrive { get; }
    internal static string FreeSpaceUnavailableForLogFileDrive { get; }
    internal static string HostedServiceAffinityGroupConfigurationAffinityGroupNotMatchException { get; }
    internal static string ImageArgumentNullException { get; }
    internal static string ImageNameArgumentNullException { get; }
    internal static string InSufficientFreeSpaceForDataFiles { get; }
    internal static string InSufficientFreeSpaceForLogFiles { get; }
    internal static string InvalidAvailabilityGroupException { get; }
    internal static string InvalidShare { get; }
    internal static string JoinAvailabilityGroupError { get; }
    internal static string JoinDatabaseToAvailabilityGroupText { get; }
    internal static string JoinSecondariesText { get; }
    internal static string ListenerConfigurationWarning { get; }
    internal static string ManualFailoverTaskText { get; }
    internal static string MaxHostedServicesException { get; }
    internal static string NoAGSupportImageException { get; }
    internal static string NoStorageServiceWithServiceNameAndAffinityGroupNameException { get; }
    internal static string NoStorageServiceWithServiceNameException { get; }
    internal static string NotSqlServerImageException { get; }
    internal static string OpenFireWallPortsException { get; }
    internal static string PrimaryCannotWriteToLocation { get; }
    internal static string PrimaryServerNotHadrEnabled { get; }
    internal static string QuorumHelperException { get; }
    internal static string QuorumValidationTaskText { get; }
    internal static string ReplicaEndpointStringOutputFormat { get; }
    internal static string RestartSqlServerException { get; }
    internal static string RestoreDatabaseTaskExcption { get; }
    internal static string RestoreDatabaseText { get; }
    internal static string RestoreLogTaskException { get; }
    internal static string RestoreLogText { get; }
    internal static string SecondaryCannotReadLocation { get; }
    internal static string ServiceOperationStateFailedMsg3 { get; }
    internal static string ServiceOperationStateFailedMsg4 { get; }
    internal static string ServiceOperationStatusArgumentNullException { get; }
    internal static string StartAlwaysOnXeventSessionText { get; }
    internal static string SubscriptionArgumentNullException { get; }
    internal static string TaskEventArgsTaskComplete { get; }
    internal static string TaskEventArgsTaskExecutionCancelled { get; }
    internal static string TaskEventArgsTaskExecutionFailed { get; }
    internal static string TaskEventArgsTaskExecutionFailedWithRetry { get; }
    internal static string TaskEventArgsTaskStarted { get; }
    internal static string TotalPrimaryDatabaseSizeValidationException { get; }
    internal static string UpdateAvailabilityGroupListenerText { get; }
    internal static string UserDoesNotHaveViewServerStatePermission { get; }
    internal static string ValidatingAvailabilityMode { get; }
    internal static string ValidatingBackupLocation { get; }
    internal static string ValidatingBasicAvailabilityGroupOptions { get; }
    internal static string ValidatingDatabaseFileExistingError { get; }
    internal static string ValidatingDatabaseFileLocationCompatibility { get; }
    internal static string ValidatingDatabaseFilesNotExistsOnSecondary { get; }
    internal static string ValidatingDatabaseMasterKey { get; }
    internal static string ValidatingDatabaseNotExistOnSecondary { get; }
    internal static string ValidatingDiskSpace { get; }
    internal static string ValidatingEndpointEncryption { get; }
    internal static string ValidatingFailoverSettings { get; }
    internal static string ValidatingWSFCQuorumConfiguration { get; }
    internal static string ValidatorEventArgsValidationComplete { get; }
    internal static string ValidatorEventArgsValidationFailed { get; }
    internal static string ValidatorEventArgsValidationFailedWithRetry { get; }
    internal static string ValidatorEventArgsValidationStarted { get; }
    internal static string VirtualNetworkLocationHashIDNullException { get; }
    internal static string WaitForAvailabilityGroupOnline { get; }
    internal static string WaitForAvailabilityGroupOnlineText { get; }
    internal static string WaitForRoleChange { get; }
    internal static string WizardLaunchFailureQuorumLoss { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddDatabaseCredentialText();
    internal static string get_AddDatabaseToExistingAvailabilityGroupText();
    internal static string get_AddDomainUserInAdminGroupTaskException();
    internal static string get_AddDomainUserInAdminGroupText();
    internal static string get_AddDomainUserInSQLAdminTaskAddDomainAccountToServiceAccountException();
    internal static string get_AddDomainUserInSQLAdminTaskAddUserToSqlAdminException();
    internal static string get_AddDomainUserInSQLAdminText();
    internal static string get_AddNodeInClusterTaskClusterNotOnlineException();
    internal static string get_AddNodeInClusterText();
    internal static string get_AddNodeInClusterVerificationError();
    internal static string get_AddReplicaText();
    internal static string get_AvailabilityGroupNotExists();
    internal static string get_AvailabilityGroupNotJoined();
    internal static string get_AvailabilityGroupQuorumValidatorException();
    internal static string get_AvailabilityModeCompatibilityWarning();
    internal static string get_BackupDatabaseTaskException();
    internal static string get_BackupDatabaseText();
    internal static string get_BackupLocationNotProvidedErrorMessage();
    internal static string get_BackupLogTaskException();
    internal static string get_BackupLogText();
    internal static string get_BasicAvailabilityGroupIncompatibleException();
    internal static string get_BasicBackupPriorityReason();
    internal static string get_BasicListenerReason();
    internal static string get_BasicSecondaryRoleReason();
    internal static string get_BasicTooManyDatabasesReason();
    internal static string get_BasicTooManyReplicasReason();
    internal static string get_CheckingListenerConfiguration();
    internal static string get_ClusterNameOnlineValidatorException();
    internal static string get_ConfigureEndpointsText();
    internal static string get_ConfigureSQLForAlwaysonTaskException();
    internal static string get_ConnectRemotePowersehllError();
    internal static string get_CreateAvailabilityGroupListenerText();
    internal static string get_CreateAvailabilityGroupText();
    internal static string get_CreateLoginText();
    internal static string get_CreateStorageServiceNoStatusException();
    internal static string get_CreateStorageServiceStatusFailException();
    internal static string get_CreateVirtualDisk2();
    internal static string get_CreatingAvailabilityGroup();
    internal static string get_CreatingLoginsOnReplica();
    internal static string get_DataBaseDiskSizeValidationException();
    internal static string get_DatabaseFileLocationMissingOnReplicaException();
    internal static string get_DatabaseFileNotInDefaultDirectoryException();
    internal static string get_DatabasesExistingOnReplica();
    internal static string get_DBMKPasswordIncorrect();
    internal static string get_DeleteDeploymentNoStatusException();
    internal static string get_DeleteDeploymentStatusFailException();
    internal static string get_DeleteHostedServiceNoStatusException();
    internal static string get_DeleteHostedServiceStatusFailException();
    internal static string get_DeleteStorageServiceNoStatusException();
    internal static string get_DeleteStorageServiceStatusFailException();
    internal static string get_DeleteVirtualMachineNoStatusException();
    internal static string get_DeleteVirtualMachineStatusException();
    internal static string get_DeploymentHealthyValidationDeploymentNotAvailableException();
    internal static string get_DeploymentNotExistException();
    internal static string get_DeploymentVirtualNetworkConfigurationVirtualNetworkNotMatchException();
    internal static string get_DriveNotFoundOnReplica();
    internal static string get_EnableWindowsFailoverClusterTaskException();
    internal static string get_EnablingXeventOnReplica();
    internal static string get_EncryptionMismatchException();
    internal static string get_EndpointAuthenticationValidatorException();
    internal static string get_FailoverValidationException();
    internal static string get_FieldSetUpdate();
    internal static string get_ForcedFailoverTaskText();
    internal static string get_FormatDataDiskTaskException();
    internal static string get_FreeSpaceUnavailableForDataFileDrive();
    internal static string get_FreeSpaceUnavailableForLogFileDrive();
    internal static string get_HostedServiceAffinityGroupConfigurationAffinityGroupNotMatchException();
    internal static string get_ImageArgumentNullException();
    internal static string get_ImageNameArgumentNullException();
    internal static string get_InSufficientFreeSpaceForDataFiles();
    internal static string get_InSufficientFreeSpaceForLogFiles();
    internal static string get_InvalidAvailabilityGroupException();
    internal static string get_InvalidShare();
    internal static string get_JoinAvailabilityGroupError();
    internal static string get_JoinDatabaseToAvailabilityGroupText();
    internal static string get_JoinSecondariesText();
    internal static string get_ListenerConfigurationWarning();
    internal static string get_ManualFailoverTaskText();
    internal static string get_MaxHostedServicesException();
    internal static string get_NoAGSupportImageException();
    internal static string get_NoStorageServiceWithServiceNameAndAffinityGroupNameException();
    internal static string get_NoStorageServiceWithServiceNameException();
    internal static string get_NotSqlServerImageException();
    internal static string get_OpenFireWallPortsException();
    internal static string get_PrimaryCannotWriteToLocation();
    internal static string get_PrimaryServerNotHadrEnabled();
    internal static string get_QuorumHelperException();
    internal static string get_QuorumValidationTaskText();
    internal static string get_ReplicaEndpointStringOutputFormat();
    internal static string get_RestartSqlServerException();
    internal static string get_RestoreDatabaseTaskExcption();
    internal static string get_RestoreDatabaseText();
    internal static string get_RestoreLogTaskException();
    internal static string get_RestoreLogText();
    internal static string get_SecondaryCannotReadLocation();
    internal static string get_ServiceOperationStateFailedMsg3();
    internal static string get_ServiceOperationStateFailedMsg4();
    internal static string get_ServiceOperationStatusArgumentNullException();
    internal static string get_StartAlwaysOnXeventSessionText();
    internal static string get_SubscriptionArgumentNullException();
    internal static string get_TaskEventArgsTaskComplete();
    internal static string get_TaskEventArgsTaskExecutionCancelled();
    internal static string get_TaskEventArgsTaskExecutionFailed();
    internal static string get_TaskEventArgsTaskExecutionFailedWithRetry();
    internal static string get_TaskEventArgsTaskStarted();
    internal static string get_TotalPrimaryDatabaseSizeValidationException();
    internal static string get_UpdateAvailabilityGroupListenerText();
    internal static string get_UserDoesNotHaveViewServerStatePermission();
    internal static string get_ValidatingAvailabilityMode();
    internal static string get_ValidatingBackupLocation();
    internal static string get_ValidatingBasicAvailabilityGroupOptions();
    internal static string get_ValidatingDatabaseFileExistingError();
    internal static string get_ValidatingDatabaseFileLocationCompatibility();
    internal static string get_ValidatingDatabaseFilesNotExistsOnSecondary();
    internal static string get_ValidatingDatabaseMasterKey();
    internal static string get_ValidatingDatabaseNotExistOnSecondary();
    internal static string get_ValidatingDiskSpace();
    internal static string get_ValidatingEndpointEncryption();
    internal static string get_ValidatingFailoverSettings();
    internal static string get_ValidatingWSFCQuorumConfiguration();
    internal static string get_ValidatorEventArgsValidationComplete();
    internal static string get_ValidatorEventArgsValidationFailed();
    internal static string get_ValidatorEventArgsValidationFailedWithRetry();
    internal static string get_ValidatorEventArgsValidationStarted();
    internal static string get_VirtualNetworkLocationHashIDNullException();
    internal static string get_WaitForAvailabilityGroupOnline();
    internal static string get_WaitForAvailabilityGroupOnlineText();
    internal static string get_WaitForRoleChange();
    internal static string get_WizardLaunchFailureQuorumLoss();
}
public class Microsoft.SqlServer.Management.HadrModel.RestartSqlServerException : HadrTaskBaseException {
    public RestartSqlServerException(string InstanceName);
}
public class Microsoft.SqlServer.Management.HadrModel.RestoreDatabaseTask : HadrTask {
    private Restore restore;
    private AvailabilityGroupData availabilityGroupData;
    private ServerConnection secondaryConnection;
    private string databaseName;
    private AvailabilityGroupReplica availabilityGroupReplica;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public AvailabilityGroupReplica ReplicaData { get; }
    public RestoreDatabaseTask(string databaseName, AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica availabilityGroupReplica);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    public AvailabilityGroupData get_AvailabilityGroupData();
    public AvailabilityGroupReplica get_ReplicaData();
    public void Abort();
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.RestoreDatabaseTaskException : HadrTaskBaseException {
    public RestoreDatabaseTaskException(string DatabaseName, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.RestoreLogTask : HadrTask {
    private Restore restore;
    private AvailabilityGroupData availabilityGroupData;
    private string databaseName;
    private AvailabilityGroupReplica replica;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public AvailabilityGroupData AvailabilityGroupData { get; }
    public AvailabilityGroupReplica ReplicaData { get; }
    public RestoreLogTask(string databaseName, AvailabilityGroupData availabilityGroupData, AvailabilityGroupReplica replica);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    public AvailabilityGroupData get_AvailabilityGroupData();
    public AvailabilityGroupReplica get_ReplicaData();
    public void Abort();
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
public class Microsoft.SqlServer.Management.HadrModel.RestoreLogTaskException : HadrTaskBaseException {
    public RestoreLogTaskException(string DatabaseName, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.RunOncePolicy : object {
    private int runCount;
    private int DefaultBackoffIntervalInSeconds;
    public bool Expired { get; public set; }
    public sealed virtual bool get_Expired();
    public sealed virtual void set_Expired(bool value);
    public sealed virtual bool ResumeExecution();
    public sealed virtual TimeSpan BackoffInterval();
}
public abstract class Microsoft.SqlServer.Management.HadrModel.ScenarioProvider`2 : object {
    [CompilerGeneratedAttribute]
private CancellationTokenSource <TaskTokenSource>k__BackingField;
    public CancellationTokenSource TaskTokenSource { get; private set; }
    [CompilerGeneratedAttribute]
public CancellationTokenSource get_TaskTokenSource();
    [CompilerGeneratedAttribute]
private void set_TaskTokenSource(CancellationTokenSource value);
    public abstract virtual List`1<Validator> Validators();
    public abstract virtual List`1<HadrTask> Tasks();
    public abstract virtual List`1<HadrTask> RollbackTasks();
}
public class Microsoft.SqlServer.Management.HadrModel.ScenarioTaskHandler : MulticastDelegate {
    public ScenarioTaskHandler(object object, IntPtr method);
    public virtual void Invoke(IExecutionPolicy policy);
    public virtual IAsyncResult BeginInvoke(IExecutionPolicy policy, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.HadrModel.ScenarioValidatorHandler : MulticastDelegate {
    public ScenarioValidatorHandler(object object, IntPtr method);
    public virtual void Invoke(IExecutionPolicy policy);
    public virtual IAsyncResult BeginInvoke(IExecutionPolicy policy, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.HadrModel.SecondaryCannotReadLocationException : HadrTaskBaseException {
    public SecondaryCannotReadLocationException(string secondaryServerName, string backupLocation);
    public SecondaryCannotReadLocationException(string secondaryServerName, string backupLocation, Exception innerException);
}
public class Microsoft.SqlServer.Management.HadrModel.ServiceOperationStatusException : HadrValidationBaseException {
    public ServiceOperationStatusException(string message);
    public ServiceOperationStatusException(string message, Exception inner);
}
public class Microsoft.SqlServer.Management.HadrModel.ShareValidationException : HadrTaskBaseException {
    public ShareValidationException(string backupLocation);
    public ShareValidationException(string backupLocation, Exception innerException);
}
public class Microsoft.SqlServer.Management.HadrModel.SqlServerConnectionException : HadrTaskBaseException {
    public SqlServerConnectionException(string VMIPAddress);
}
public class Microsoft.SqlServer.Management.HadrModel.StartAlwaysOnXeventSessionTask : HadrTask {
    public static string AlwaysOnHealthSessionName;
    private XEStore store;
    private SqlStoreConnection storeConnection;
    [CompilerGeneratedAttribute]
private AvailabilityGroupReplica <Replica>k__BackingField;
    public AvailabilityGroupReplica Replica { get; private set; }
    public StartAlwaysOnXeventSessionTask(AvailabilityGroupReplica replica);
    [CompilerGeneratedAttribute]
public AvailabilityGroupReplica get_Replica();
    [CompilerGeneratedAttribute]
private void set_Replica(AvailabilityGroupReplica value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Management.HadrModel.StringExtensionMethods : object {
    [ExtensionAttribute]
public static string SecureStringToString(SecureString secureString);
    [ExtensionAttribute]
public static SecureString StringToSecureString(string unsecureString);
    private static Char[] SecureStringToCharArray(SecureString secureString);
    private static SecureString CharArrayToSecureString(Char[] charArray);
}
public class Microsoft.SqlServer.Management.HadrModel.TaskEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskEventStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    public string Name { get; public set; }
    public TaskEventStatus Status { get; public set; }
    public string Details { get; public set; }
    public TaskEventArgs(string taskName, string taskDetails);
    public TaskEventArgs(string taskName, string taskDetails, TaskEventStatus taskStatus);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TaskEventStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(TaskEventStatus value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
}
public enum Microsoft.SqlServer.Management.HadrModel.TaskEventStatus : Enum {
    public int value__;
    public static TaskEventStatus NotStart;
    public static TaskEventStatus Started;
    public static TaskEventStatus Cancelled;
    public static TaskEventStatus Running;
    public static TaskEventStatus Failed;
    public static TaskEventStatus Completed;
}
public class Microsoft.SqlServer.Management.HadrModel.TaskUpdateEventHandler : MulticastDelegate {
    public TaskUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TaskEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TaskEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.HadrModel.UpdateAvailabilityGroupListenerTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    [CompilerGeneratedAttribute]
private List`1<ServerConnection> <ScriptingConnections>k__BackingField;
    public List`1<ServerConnection> ScriptingConnections { get; private set; }
    public UpdateAvailabilityGroupListenerTask(AvailabilityGroupData availabilityGroupData);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServerConnection> get_ScriptingConnections();
    [CompilerGeneratedAttribute]
private void set_ScriptingConnections(List`1<ServerConnection> value);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
internal class Microsoft.SqlServer.Management.HadrModel.Utils : object {
    public static bool IsSql13OrLater(int versionMajor);
    public static bool IsSql14OrLater(int versionMajor);
}
public abstract class Microsoft.SqlServer.Management.HadrModel.Validator : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidatorUpdateEventHandler ValidatorProgressEventHandler;
    public string Name { get; private set; }
    public Validator(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public void add_ValidatorProgressEventHandler(ValidatorUpdateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValidatorProgressEventHandler(ValidatorUpdateEventHandler value);
    public void Validate(IExecutionPolicy policy, ScenarioValidatorHandler validationDelegate);
    protected abstract virtual void Validate(IExecutionPolicy policy);
    protected void UpdateStatus(ValidatorEventArgs e);
}
public class Microsoft.SqlServer.Management.HadrModel.ValidatorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    public string Name { get; public set; }
    public string Status { get; public set; }
    public string Details { get; public set; }
    public ValidatorEventArgs(string validatorName, string validatorDetails, string validatorStatus);
    public ValidatorEventArgs(string validatorName, string validatorDetails);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
}
public class Microsoft.SqlServer.Management.HadrModel.ValidatorUpdateEventHandler : MulticastDelegate {
    public ValidatorUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidatorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidatorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.HadrModel.WaitForAvailabilityGroupOnlineTask : HadrTask {
    private AvailabilityGroupData availabilityGroupData;
    public WaitForAvailabilityGroupOnlineTask(AvailabilityGroupData availabilityGroupData);
    protected virtual void Perform(IExecutionPolicy policy);
    protected virtual void Rollback(IExecutionPolicy policy);
}
