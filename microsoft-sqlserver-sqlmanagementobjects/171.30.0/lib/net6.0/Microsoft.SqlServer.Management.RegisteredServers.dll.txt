internal static class Microsoft.SqlServer.Management.RegisteredServers.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
[DataContractAttribute]
public class Microsoft.SqlServer.Management.RegisteredServers.AzureDataStudioConnection : object {
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SavePassword>k__BackingField;
    [DataMemberAttribute]
public string GroupId { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> Options { get; public set; }
    [DataMemberAttribute]
public string ProviderName { get; public set; }
    [DataMemberAttribute]
public bool SavePassword { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
public void set_GroupId(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public bool get_SavePassword();
    [CompilerGeneratedAttribute]
public void set_SavePassword(bool value);
}
[DataContractAttribute]
public class Microsoft.SqlServer.Management.RegisteredServers.AzureDataStudioConnectionGroup : object {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    [DataMemberAttribute]
public string Color { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string ParentId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(string value);
}
[DataContractAttribute]
public class Microsoft.SqlServer.Management.RegisteredServers.AzureDataStudioConnectionStore : object {
    [CompilerGeneratedAttribute]
private List`1<AzureDataStudioConnectionGroup> <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AzureDataStudioConnection> <Connections>k__BackingField;
    [DataMemberAttribute]
public List`1<AzureDataStudioConnectionGroup> Groups { get; public set; }
    [DataMemberAttribute]
public List`1<AzureDataStudioConnection> Connections { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AzureDataStudioConnectionGroup> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(List`1<AzureDataStudioConnectionGroup> value);
    [CompilerGeneratedAttribute]
public List`1<AzureDataStudioConnection> get_Connections();
    [CompilerGeneratedAttribute]
public void set_Connections(List`1<AzureDataStudioConnection> value);
    public static AzureDataStudioConnectionStore LoadAzureDataStudioConnections(string settingsFile);
}
public enum Microsoft.SqlServer.Management.RegisteredServers.CredentialPersistenceType : Enum {
    public int value__;
    public static CredentialPersistenceType None;
    public static CredentialPersistenceType PersistLoginName;
    public static CredentialPersistenceType PersistLoginNameAndPassword;
}
internal enum Microsoft.SqlServer.Management.RegisteredServers.DialogResult : Enum {
    public int value__;
    public static DialogResult Cancel;
    public static DialogResult Yes;
    public static DialogResult No;
}
public class Microsoft.SqlServer.Management.RegisteredServers.DuplicateFoundEventArgs : EventArgs {
    private bool applyToAll;
    private bool confirm;
    private bool cancel;
    public bool ApplyToAll { get; public set; }
    public bool Confirm { get; public set; }
    public bool Cancel { get; public set; }
    public bool get_ApplyToAll();
    public void set_ApplyToAll(bool value);
    public bool get_Confirm();
    public void set_Confirm(bool value);
    public bool get_Cancel();
    public void set_Cancel(bool value);
}
internal class Microsoft.SqlServer.Management.RegisteredServers.NopExecutionEngine : object {
    public sealed virtual object Execute(ISfcScript script);
}
public class Microsoft.SqlServer.Management.RegisteredServers.RegisteredServer : SfcInstance {
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptAlterAction;
    private static SfcTsqlProcFormatter scriptDropAction;
    private static SfcTsqlProcFormatter scriptRenameAction;
    private static SfcTsqlProcFormatter scriptMoveAction;
    private SecureString secureConnectionString;
    internal static string typeName;
    [SfcIgnoreAttribute]
public SecureString SecureConnectionString { get; public set; }
    [SfcIgnoreAttribute]
public string ConnectionString { get; public set; }
    [SfcObjectAttribute("1", "0")]
public ServerGroup Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcPropertyAttribute("0")]
public string Description { get; public set; }
    [SfcPropertyAttribute("16")]
public string ServerName { get; public set; }
    [SfcPropertyAttribute("0")]
public bool UseCustomConnectionColor { get; public set; }
    [SfcPropertyAttribute("0")]
public int CustomConnectionColorArgb { get; public set; }
    [SfcPropertyAttribute("0")]
public ServerType ServerType { get; }
    [SfcPropertyAttribute("0")]
public string ConnectionStringWithEncryptedPassword { get; internal set; }
    [SfcPropertyAttribute("16")]
public CredentialPersistenceType CredentialPersistenceType { get; public set; }
    [SfcPropertyAttribute("0")]
public string OtherParams { get; public set; }
    [SfcPropertyAttribute("0")]
public int AuthenticationType { get; public set; }
    [SfcPropertyAttribute("0")]
public string ActiveDirectoryUserId { get; public set; }
    [SfcPropertyAttribute("0")]
public string ActiveDirectoryTenant { get; public set; }
    [SfcPropertyAttribute("0")]
public string Tag { get; public set; }
    [SfcIgnoreAttribute]
public bool IsLocal { get; }
    [SfcIgnoreAttribute]
public bool IsDropped { get; }
    private static RegisteredServer();
    public RegisteredServer(string name);
    public RegisteredServer(ServerGroup parent, string name);
    public SecureString get_SecureConnectionString();
    public void set_SecureConnectionString(SecureString value);
    private void UpdateConnectionStringWithEncryptedPassword();
    internal string GetConnectionStringWithEncryptedPassword(CredentialPersistenceType cpt);
    internal string ProtectData(string input, bool encrypt);
    private void SetDefaultCredentialPersistenceType();
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public ISfcConnection GetConnectionObject();
    public static SfcObjectFactory GetObjectFactory();
    public ServerGroup get_Parent();
    public void set_Parent(ServerGroup value);
    protected internal virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public string get_Name();
    private void SetName(string name);
    private string GetServerNameFromConnectionString(string connString);
    private void SetServerNameInConnectionString(string svrName);
    private string GetServerNameKeyInConnectionString(string connString);
    public int get_ID();
    public string get_Description();
    public void set_Description(string value);
    public string get_ServerName();
    public void set_ServerName(string value);
    public bool get_UseCustomConnectionColor();
    public void set_UseCustomConnectionColor(bool value);
    public int get_CustomConnectionColorArgb();
    public void set_CustomConnectionColorArgb(int value);
    public ServerType get_ServerType();
    public string get_ConnectionStringWithEncryptedPassword();
    internal void set_ConnectionStringWithEncryptedPassword(string value);
    public CredentialPersistenceType get_CredentialPersistenceType();
    public void set_CredentialPersistenceType(CredentialPersistenceType value);
    public string get_OtherParams();
    public void set_OtherParams(string value);
    public int get_AuthenticationType();
    public void set_AuthenticationType(int value);
    public string get_ActiveDirectoryUserId();
    public void set_ActiveDirectoryUserId(string value);
    public string get_ActiveDirectoryTenant();
    public void set_ActiveDirectoryTenant(string value);
    public string get_Tag();
    public void set_Tag(string value);
    protected internal virtual ISfcCollection GetChildCollection(string elementType);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
    internal void Validate(string validationMode, bool throwOnFirst, ValidationState validationState);
    private void ValidateStringProperty(string validationMode, bool throwOnFirst, ValidationState validationState, string propName, string propVal);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCreatable.ScriptCreate();
    public sealed virtual void Create();
    protected virtual void PostCreate(object executionResult);
    public sealed virtual void Alter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable.ScriptAlter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDroppable.ScriptDrop();
    public sealed virtual void Drop();
    public sealed virtual void Rename(string name);
    public sealed virtual void Rename(SfcKey key);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(SfcKey key);
    public void Move(ServerGroup newParent);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMovable.Move(SfcInstance newParent);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMovable.ScriptMove(SfcInstance newParent);
    public bool get_IsLocal();
    public bool get_IsDropped();
    internal RegisteredServersStore GetStore();
    public void Export(string file, CredentialPersistenceType cpt);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.RegisteredServers.RegisteredServerCollection : SfcCollatedDictionaryCollection`3<RegisteredServer, Key, ServerGroup> {
    public RegisteredServer Item { get; }
    unknown bool SkipInitialSqlLoad {internal set; }
    public RegisteredServerCollection(ServerGroup parent, IComparer`1<string> customComparer);
    public RegisteredServer get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    internal void set_SkipInitialSqlLoad(bool value);
}
public class Microsoft.SqlServer.Management.RegisteredServers.RegisteredServerException : SqlServerManagementException {
    private static int INIT_BUFFER_SIZE;
    private static string prodVer;
    protected static string ProdVer { get; }
    public RegisteredServerExceptionType RegisteredServerExceptionType { get; }
    public string HelpLink { get; }
    public RegisteredServerException(string message);
    public RegisteredServerException(string message, Exception innerException);
    protected RegisteredServerException(SerializationInfo info, StreamingContext context);
    private static RegisteredServerException();
    protected virtual void Init();
    protected static string get_ProdVer();
    protected internal RegisteredServerException SetHelpContext(string resource);
    public virtual RegisteredServerExceptionType get_RegisteredServerExceptionType();
    public virtual string get_HelpLink();
}
public enum Microsoft.SqlServer.Management.RegisteredServers.RegisteredServerExceptionType : Enum {
    public int value__;
    public static RegisteredServerExceptionType RegisteredServerException;
}
internal class Microsoft.SqlServer.Management.RegisteredServers.RegisteredServersEnumerator : SqlObject {
    public Assembly ResourceAssembly { get; }
    public virtual Assembly get_ResourceAssembly();
    public sealed virtual ServerVersion GetServerVersion(object conn);
    protected virtual void BeforeStatementExecuted(string levelName);
}
public class Microsoft.SqlServer.Management.RegisteredServers.RegisteredServersStore : ServerGroupParent {
    private static RegisteredServersStore localFileStore;
    private static object lockObject;
    private bool isSerializeOnCreation;
    public static ExceptionDelegate ExceptionDelegates;
    [CompilerGeneratedAttribute]
private static EventHandler LocalFileStoreReloaded;
    private bool useStoreCredentialPersistenceType;
    private CredentialPersistenceType credentialPersistenceType;
    internal static string databaseEngineServerGroupName;
    internal static string analysisServicesServerGroupName;
    internal static string reportingServicesServerGroupName;
    internal static string integrationServicesServerGroupName;
    internal static string sqlServerCompactEditionServerGroupName;
    internal static string centralManagementServerGroupName;
    private ServerGroupCollection serverGroups;
    private ServerGroup databaseEngineServerGroup;
    private ServerGroup centralManagementServerGroup;
    private AzureDataStudioConnectionStore azureDataStudioConnectionStore;
    private ServerGroup analysisServicesServerGroup;
    private ServerGroup reportingServicesServerGroup;
    private ServerGroup integrationServicesServerGroup;
    private ServerGroup sqlServerCompactEditionServerGroup;
    private ServerConnection serverConnection;
    private string localXmlStorageFile;
    private static NopExecutionEngine nopExecutionEngine;
    private SfcConnectionContext connectionContext;
    internal static string typeName;
    private static string savePathSuffix;
    private static string savePathLegacySuffixFormat;
    private static String[] legacyFileNames;
    public static string RegisteredServersFileName;
    private static string DatabaseEngineServerTypeGuid;
    private static string SqlServerCompactEditionServerTypeGuid;
    private static string AnalysisServicesServerTypeGuid;
    private static string IntegrationServicesServerTypeGuid;
    private static string ReportingServicesServerTypeGuid;
    public static RegisteredServersStore LocalFileStore { get; }
    internal bool UseStoreCredentialPersistenceType { get; internal set; }
    internal CredentialPersistenceType CredentialPersistenceType { get; internal set; }
    [SfcIgnoreAttribute]
public bool IsLocal { get; }
    [SfcIgnoreAttribute]
public string DisplayName { get; }
    public static string LocalServerStoreDisplayName { get; }
    public static string CentralManagementServersDisplayName { get; }
    [SfcIgnoreAttribute]
internal bool IsSerializeOnCreation { get; }
    public string DatabaseEngineServerGroupName { get; }
    public string AnalysisServicesServerGroupName { get; }
    public string ReportingServicesServerGroupName { get; }
    public string IntegrationServicesServerGroupName { get; }
    public string SqlServerCompactEditionServerGroupName { get; }
    public string CentralManagementServerGroupName { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.RegisteredServers.ServerGroup")]
public ServerGroupCollection ServerGroups { get; }
    [SfcIgnoreAttribute]
public ServerGroup DatabaseEngineServerGroup { get; }
    [SfcIgnoreAttribute]
public ServerGroup CentralManagementServerGroup { get; }
    [SfcIgnoreAttribute]
public AzureDataStudioConnectionStore AzureDataStudioConnectionStore { get; }
    [SfcIgnoreAttribute]
public ServerGroup AnalysisServicesServerGroup { get; }
    [SfcIgnoreAttribute]
public ServerGroup ReportingServicesServerGroup { get; }
    [SfcIgnoreAttribute]
public ServerGroup IntegrationServicesServerGroup { get; }
    [SfcIgnoreAttribute]
public ServerGroup SqlServerCompactEditionServerGroup { get; }
    [SfcIgnoreAttribute]
public ServerConnection ServerConnection { get; }
    private string LocalXmlStorageFile { get; }
    [SfcIgnoreAttribute]
public string DomainInstanceName { get; }
    [SfcIgnoreAttribute]
public string DomainName { get; }
    internal static NopExecutionEngine NopExecutionEngine { get; }
    private SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.ConnectionContext { get; }
    public RegisteredServersStore(ServerConnection sharedRegisteredServersStoreConnection);
    private static RegisteredServersStore();
    public static RegisteredServersStore get_LocalFileStore();
    public static void ReloadLocalFileStore();
    [CompilerGeneratedAttribute]
public static void add_LocalFileStoreReloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_LocalFileStoreReloaded(EventHandler value);
    public static RegisteredServersStore InitializeLocalRegisteredServersStore(string registeredServersXmlFile);
    private static void MigrateLocalXmlFileFromLegacySSMS(string pathToMigratedLocalXmlFile);
    private static bool TryDeserializeLocalXmlFile(string pathToLocalXmlFile, RegisteredServersStore& registeredServersStore, Exception& exception);
    private static RegisteredServersStore InitChildObjects(string file);
    internal void Serialize();
    internal static void Export(SfcInstance obj, string file, CredentialPersistenceType cpt);
    internal static object FilterProperty(SfcSerializer serializer, FilterPropertyEventArgs propertyArgs);
    internal static void FilterException(Exception e);
    internal bool get_UseStoreCredentialPersistenceType();
    internal void set_UseStoreCredentialPersistenceType(bool value);
    internal CredentialPersistenceType get_CredentialPersistenceType();
    internal void set_CredentialPersistenceType(CredentialPersistenceType value);
    public bool get_IsLocal();
    public string get_DisplayName();
    public static string get_LocalServerStoreDisplayName();
    public static string get_CentralManagementServersDisplayName();
    internal bool get_IsSerializeOnCreation();
    public string get_DatabaseEngineServerGroupName();
    public string get_AnalysisServicesServerGroupName();
    public string get_ReportingServicesServerGroupName();
    public string get_IntegrationServicesServerGroupName();
    public string get_SqlServerCompactEditionServerGroupName();
    public string get_CentralManagementServerGroupName();
    public ServerGroupCollection get_ServerGroups();
    public ServerGroup get_DatabaseEngineServerGroup();
    public ServerGroup get_CentralManagementServerGroup();
    public AzureDataStudioConnectionStore get_AzureDataStudioConnectionStore();
    public ServerGroup get_AnalysisServicesServerGroup();
    public ServerGroup get_ReportingServicesServerGroup();
    public ServerGroup get_IntegrationServicesServerGroup();
    public ServerGroup get_SqlServerCompactEditionServerGroup();
    public ServerConnection get_ServerConnection();
    private string get_LocalXmlStorageFile();
    protected internal virtual SfcKey CreateIdentityKey();
    public sealed virtual string get_DomainInstanceName();
    public sealed virtual string get_DomainName();
    public sealed virtual ISfcExecutionEngine GetExecutionEngine();
    internal static NopExecutionEngine get_NopExecutionEngine();
    public sealed virtual SfcKey GetKey(IUrnFragment urnFragment);
    public sealed virtual Type GetType(string typeName);
    public sealed virtual SfcTypeMetadata GetTypeMetadata(string typeName);
    public sealed virtual bool UseSfcStateManagement();
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion();
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(SfcObjectQueryMode activeQueriesMode);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(ISfcConnection connection);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection();
    private sealed virtual override SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.get_ConnectionContext();
    protected internal virtual ISfcCollection GetChildCollection(string elementType);
    private static string GetLocalXmlFilePath();
    private static string GetSettingsDir(string suffix);
    private static void EnsureDirExists(string directory);
    internal static RegisteredServersStore GetStore(SfcInstance instance);
    public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.RegisteredServers.RegSvrStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string LocalStoreOnly { get; }
    public static string FailedToDeserialize { get; }
    public static string CannotCreateAServerGroupUnderneathCentralManagementServerGroup { get; }
    public static string Export { get; }
    public static string Import { get; }
    public static string Upgrade { get; }
    public static string LocalServerStoreDisplayName { get; }
    public static string CentralManagementServersDisplayName { get; }
    public static string DatabaseEngineServerGroupDisplayName { get; }
    public static string AnalysisServicesServerGroupDisplayName { get; }
    public static string ReportingServicesServerGroupDisplayName { get; }
    public static string IntegrationServicesServerGroupDisplayName { get; }
    public static string SqlServerCompactServerGroupDisplayName { get; }
    public static string CentralManagementServerGroupDisplayName { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_LocalStoreOnly();
    public static string get_FailedToDeserialize();
    public static string get_CannotCreateAServerGroupUnderneathCentralManagementServerGroup();
    public static string get_Export();
    public static string get_Import();
    public static string get_Upgrade();
    public static string get_LocalServerStoreDisplayName();
    public static string get_CentralManagementServersDisplayName();
    public static string get_DatabaseEngineServerGroupDisplayName();
    public static string get_AnalysisServicesServerGroupDisplayName();
    public static string get_ReportingServicesServerGroupDisplayName();
    public static string get_IntegrationServicesServerGroupDisplayName();
    public static string get_SqlServerCompactServerGroupDisplayName();
    public static string get_CentralManagementServerGroupDisplayName();
    public static string NoSuchCollection(string name);
    public static string ArgumentNullOrEmpty(string argument);
    public static string InvalidServerGroup(string name);
    public static string CannotRenameSystemServerGroup(string name);
    public static string CannotDropSystemServerGroup(string name);
    public static string ServerGroupAlreadyExists(string name);
    public static string UnknownEnumeration(string type);
    public static string FailedOperation(string op);
    public static string InvalidSqlServer2005FileFormat(string element);
}
public class Microsoft.SqlServer.Management.RegisteredServers.ServerGroup : ServerGroupParent {
    private static SfcTsqlProcFormatter scriptCreateAction;
    private static SfcTsqlProcFormatter scriptAlterAction;
    private static SfcTsqlProcFormatter scriptDropAction;
    private static SfcTsqlProcFormatter scriptRenameAction;
    private static SfcTsqlProcFormatter scriptMoveAction;
    private RegisteredServerCollection registeredServers;
    private ServerGroupCollection serverGroups;
    internal static string typeName;
    [CompilerGeneratedAttribute]
private EventHandler`1<DuplicateFoundEventArgs> DuplicateFound;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.RegisteredServers.RegisteredServer")]
public RegisteredServerCollection RegisteredServers { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.RegisteredServers.ServerGroup")]
public ServerGroupCollection ServerGroups { get; }
    [SfcObjectAttribute("1", "0")]
public ServerGroupParent Parent { get; public set; }
    [SfcIgnoreAttribute]
public Key IdentityKey { get; }
    [SfcPropertyAttribute("272")]
[SfcKeyAttribute("0")]
public string Name { get; }
    [SfcPropertyAttribute("512")]
public int ID { get; }
    [SfcPropertyAttribute("512")]
private int ServerGroupChildCount { get; }
    [SfcPropertyAttribute("512")]
private int RegisteredServerChildCount { get; }
    [SfcPropertyAttribute("0")]
public string Description { get; public set; }
    [SfcPropertyAttribute("0")]
public ServerType ServerType { get; internal set; }
    [SfcIgnoreAttribute]
public string DisplayName { get; }
    [SfcIgnoreAttribute]
public bool IsLocal { get; }
    [SfcIgnoreAttribute]
public bool IsSystemServerGroup { get; }
    [SfcIgnoreAttribute]
internal bool IsStandardServerGroup { get; }
    [SfcIgnoreAttribute]
public bool IsDropped { get; }
    private static ServerGroup();
    public ServerGroup(string name);
    public ServerGroup(ServerGroup parent, string name);
    internal ServerGroup(RegisteredServersStore parent, string name);
    public RegisteredServerCollection get_RegisteredServers();
    public ServerGroupCollection get_ServerGroups();
    public static SfcObjectFactory GetObjectFactory();
    public ServerGroupParent get_Parent();
    public void set_Parent(ServerGroupParent value);
    protected internal virtual SfcKey CreateIdentityKey();
    public Key get_IdentityKey();
    public string get_Name();
    private void SetName(string name);
    public int get_ID();
    private int get_ServerGroupChildCount();
    private int get_RegisteredServerChildCount();
    public string get_Description();
    public void set_Description(string value);
    public ServerType get_ServerType();
    internal void set_ServerType(ServerType value);
    public string get_DisplayName();
    protected internal virtual ISfcCollection GetChildCollection(string elementType);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
    internal void Validate(string validationMode, bool throwOnFirst, ValidationState validationState);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCreatable.ScriptCreate();
    public sealed virtual void Create();
    protected virtual void PostCreate(object executionResult);
    public sealed virtual void Alter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable.ScriptAlter();
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDroppable.ScriptDrop();
    public sealed virtual void Drop();
    public sealed virtual void Rename(string name);
    public sealed virtual void Rename(SfcKey key);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(SfcKey key);
    public void Move(ServerGroup newParent);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMovable.Move(SfcInstance newParent);
    private sealed virtual override ISfcScript Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMovable.ScriptMove(SfcInstance newParent);
    private RegisteredServersStore GetStore();
    public bool get_IsLocal();
    public bool get_IsSystemServerGroup();
    internal bool get_IsStandardServerGroup();
    public bool get_IsDropped();
    public List`1<RegisteredServer> GetDescendantRegisteredServers();
    private void GetDescendantRegisteredServersRec(List`1<RegisteredServer> regSrvList);
    public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    public void Export(string file, CredentialPersistenceType cpt);
    [CompilerGeneratedAttribute]
public void add_DuplicateFound(EventHandler`1<DuplicateFoundEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DuplicateFound(EventHandler`1<DuplicateFoundEventArgs> value);
    private DialogResult DeleteObject(object obj, Object[] param, bool isLocal, Boolean& applyToAll, Boolean& confirm);
    public void Import(string file);
    internal void DeepCreate();
    internal void RaiseSfcAppObjectCreatedEvent(SfcInstance obj);
    internal void RaiseSfcAppObjectDroppedEvent(SfcInstance obj);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.RegisteredServers.ServerGroupCollection : SfcCollatedDictionaryCollection`3<ServerGroup, Key, ServerGroupParent> {
    public ServerGroup Item { get; }
    unknown bool SkipInitialSqlLoad {internal set; }
    public ServerGroupCollection(ServerGroupParent parent, IComparer`1<string> customComparer);
    public ServerGroup get_Item(string name);
    public bool Contains(string name);
    protected virtual SfcObjectFactory GetElementFactoryImpl();
    internal void set_SkipInitialSqlLoad(bool value);
}
public abstract class Microsoft.SqlServer.Management.RegisteredServers.ServerGroupParent : SfcInstance {
}
