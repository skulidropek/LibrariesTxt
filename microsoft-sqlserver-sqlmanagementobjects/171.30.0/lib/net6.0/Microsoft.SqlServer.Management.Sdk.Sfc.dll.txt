public class Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService : object {
    private static DifferencingService Singleton;
    private static string ASSEMBLY_NAME;
    private static string PROVIDER_NAME_AVALIABLE_VALUE_0;
    private static string PROVIDER_NAME_AVALIABLE_VALUE_1;
    private static string PROVIDER_NAME_NODE_ADAPTER_0;
    private static string PROVIDER_NAME_COLLECTION_SORTER_0;
    private static string PROVIDER_NAME_PROP_COMPARER_0;
    public static DifferencingService Service { get; }
    private static DifferencingService();
    private static void RegisterProvider(ProviderRegistry myRegistry, string assemblyName, string name);
    private static void RegisterProvider(ProviderRegistry myRegistry, Provider provider);
    private static Provider CreateProviderInstance(string assemblyName, string name);
    public static DifferencingService get_Service();
    public IDifferencer CreateDifferencer();
    public IDifferencer CreateDifferencer(ProviderRegistry registry);
    public ProviderRegistry CreateDefaultRegistry();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Sdk.Differencing.DiffType : Enum {
    public int value__;
    public static DiffType None;
    public static DiffType Equivalent;
    public static DiffType Created;
    public static DiffType Deleted;
    public static DiffType Updated;
}
public interface Microsoft.SqlServer.Management.Sdk.Differencing.IDiffEntry {
    public DiffType ChangeType { get; }
    public Urn Source { get; }
    public Urn Target { get; }
    public IDictionary`2<string, IPair`1<object>> Properties { get; }
    public abstract virtual DiffType get_ChangeType();
    public abstract virtual Urn get_Source();
    public abstract virtual Urn get_Target();
    public abstract virtual IDictionary`2<string, IPair`1<object>> get_Properties();
}
public interface Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer {
    public abstract virtual IDiffgram CompareGraphs(object source, object target);
    public abstract virtual bool IsTypeEmitted(DiffType type);
    public abstract virtual void SetTypeEmitted(DiffType type);
    public abstract virtual void UnsetTypeEmitted(DiffType type);
}
public interface Microsoft.SqlServer.Management.Sdk.Differencing.IDiffgram {
    public object SourceRoot { get; }
    public object TargetRoot { get; }
    public abstract virtual object get_SourceRoot();
    public abstract virtual object get_TargetRoot();
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.CompareUtil : object {
    public static int CompareUrns(Urn left, Urn right);
    public static int CompareUrnLeaves(Urn left, Urn right);
    public static bool CompareObjects(object left, object right);
    public static int CompareStrings(string left, string right);
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DefaultAvailablePropertyValueProvider : AvailablePropertyValueProvider {
    public virtual bool IsGraphSupported(ISfcSimpleNode source);
    public virtual bool IsValueAvailable(ISfcSimpleNode source, string propName);
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DefaultContainerSortingProvider : ContainerSortingProvider {
    private static IComparer`1<ISfcSimpleNode> URN_COMPARER;
    private static DefaultContainerSortingProvider();
    public virtual bool AreGraphsSupported(ISfcSimpleNode source, ISfcSimpleNode target);
    public virtual IComparer`1<ISfcSimpleNode> GetComparer(ISfcSimpleList list, ISfcSimpleList list2);
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DefaultPropertyComparerProvider : PropertyComparerProvider {
    public virtual bool AreGraphsSupported(ISfcSimpleNode left, ISfcSimpleNode right);
    public virtual bool Compare(ISfcSimpleNode left, ISfcSimpleNode right, string propName);
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DiffEntry : object {
    private DiffType changeType;
    private Urn source;
    private Urn target;
    private IDictionary`2<string, IPair`1<object>> properties;
    public DiffType ChangeType { get; public set; }
    public Urn Source { get; public set; }
    public Urn Target { get; public set; }
    public IDictionary`2<string, IPair`1<object>> Properties { get; public set; }
    public virtual string ToString();
    public sealed virtual DiffType get_ChangeType();
    public void set_ChangeType(DiffType value);
    public sealed virtual Urn get_Source();
    public void set_Source(Urn value);
    public sealed virtual Urn get_Target();
    public void set_Target(Urn value);
    public sealed virtual IDictionary`2<string, IPair`1<object>> get_Properties();
    public void set_Properties(IDictionary`2<string, IPair`1<object>> value);
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer : object {
    internal static string ComponentName;
    private static AvailablePropertyValueProvider DEFAULT_AVAILABLE_PROPERTY_VALUE_PROVIDER;
    private static ContainerSortingProvider DEFAULT_SORT_PROVIDER;
    private static PropertyComparerProvider DEFAULT_PROP_COMPARER;
    private static ISfcSimpleNode DUMMY_NODE;
    private ProviderRegistry registry;
    private DiffType emittedChangeType;
    internal Differencer(ProviderRegistry registry);
    private static Differencer();
    public sealed virtual bool IsTypeEmitted(DiffType type);
    public sealed virtual void SetTypeEmitted(DiffType type);
    public sealed virtual void UnsetTypeEmitted(DiffType type);
    public sealed virtual IDiffgram CompareGraphs(object source, object target);
    protected void ProcessNodes(IDiffContext context, ISfcSimpleNode source, ISfcSimpleNode target);
    protected void CompareNodes(IDiffContext context, ISfcSimpleNode source, ISfcSimpleNode target);
    protected void CompareRelatedContainer(IDiffContext context, ISfcSimpleList source, ISfcSimpleList target, bool naturalOrder);
    protected void CompareRelatedObject(IDiffContext context, ISfcSimpleNode source, ISfcSimpleNode target);
    protected void CompareProperties(IDiffContext context, ISfcSimpleNode source, ISfcSimpleNode target);
    protected int CompareIdentities(ISfcSimpleNode left, ISfcSimpleNode right, IComparer`1<ISfcSimpleNode> comparer);
    private void EmitEquivalentEntry(IDiffContext context, ISfcSimpleNode left, ISfcSimpleNode right);
    private void EmitUpdatedEntry(IDiffContext context, ISfcSimpleNode left, ISfcSimpleNode right, IDictionary`2<string, IPair`1<object>> props);
    private void EmitCreatedEntry(IDiffContext context, ISfcSimpleNode left);
    private void EmitDeletedEntry(IDiffContext context, ISfcSimpleNode right);
    protected void WalkCreatedList(IDiffContext context, ISfcSimpleList list);
    protected void WalkDeletedList(IDiffContext context, ISfcSimpleList list);
    private static void Dispose(IDisposable disposable);
    protected ISfcSimpleNode AdaptNode(SfcNodeAdapterProvider provider, object node);
    protected IEnumerable`1<string> GetRelatedContainerNames(NodeItemNamesAdapterProvider provider, ISfcSimpleNode node);
    protected bool GetNaturalOrder(NodeItemNamesAdapterProvider provider, ISfcSimpleNode node, string name);
    protected bool GetIsValueAvailable(AvailablePropertyValueProvider provider, ISfcSimpleNode node, string name);
    protected void GetSortedLists(ContainerSortingProvider provider, ISfcSimpleList source, ISfcSimpleList target, IEnumerable`1& sortedSource, IEnumerable`1& sortedTarget);
    protected IComparer`1<ISfcSimpleNode> GetComparer(ContainerSortingProvider provider, ISfcSimpleList list, ISfcSimpleList list2);
    protected IEnumerable`1<string> GetRelatedObjectNames(NodeItemNamesAdapterProvider provider, ISfcSimpleNode node);
    protected IEnumerable`1<string> GetPropertyNames(NodeItemNamesAdapterProvider provider, ISfcSimpleNode node);
    protected SfcNodeAdapterProvider FindNodeAdapterProvider(object node);
    protected NodeItemNamesAdapterProvider FindNameProvider(ISfcSimpleNode node);
    protected AvailablePropertyValueProvider FindAvailableValueProvider(ISfcSimpleNode node);
    protected ContainerSortingProvider FindContainerSortingProvider(ISfcSimpleNode source, ISfcSimpleNode target);
    protected PropertyComparerProvider FindPropertyComparerProvider(ISfcSimpleNode source, ISfcSimpleNode target);
    internal static bool IsSystemGeneratedException(Exception e);
}
internal abstract class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Diffgram : object {
    private object source;
    private object target;
    public object SourceRoot { get; }
    public object TargetRoot { get; }
    public Diffgram(object source, object target);
    public sealed virtual object get_SourceRoot();
    public sealed virtual object get_TargetRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public abstract virtual IEnumerator`1<IDiffEntry> GetEnumerator();
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Pair`1 : object {
    private T source;
    private T target;
    public T Source { get; }
    public T Target { get; }
    public Pair`1(T source, T target);
    public sealed virtual T get_Source();
    public sealed virtual T get_Target();
}
internal class Microsoft.SqlServer.Management.Sdk.Differencing.Impl.UrnComparer : object {
    private sealed virtual override int System.Collections.Generic.IComparer<Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode>.Compare(ISfcSimpleNode x, ISfcSimpleNode y);
}
public interface Microsoft.SqlServer.Management.Sdk.Differencing.IPair`1 {
    public T Source { get; }
    public T Target { get; }
    public abstract virtual T get_Source();
    public abstract virtual T get_Target();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Differencing.SPI.AvailablePropertyValueProvider : object {
    public abstract virtual bool IsGraphSupported(ISfcSimpleNode node);
    public abstract virtual bool IsValueAvailable(ISfcSimpleNode node, string propName);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ContainerSortingProvider : object {
    public abstract virtual bool AreGraphsSupported(ISfcSimpleNode source, ISfcSimpleNode target);
    public void SortLists(ISfcSimpleList source, ISfcSimpleList target, IEnumerable`1& sortedSource, IEnumerable`1& sortedTarget);
    public abstract virtual IComparer`1<ISfcSimpleNode> GetComparer(ISfcSimpleList list, ISfcSimpleList list2);
}
public class Microsoft.SqlServer.Management.Sdk.Differencing.SPI.MetadataNodeItemNamesProvider : NodeItemNamesAdapterProvider {
    public virtual bool IsGraphSupported(ISfcSimpleNode source);
    public virtual bool IsContainerInNatrualOrder(ISfcSimpleNode node, string name);
    public virtual IEnumerable`1<string> GetRelatedContainerNames(ISfcSimpleNode source);
    public virtual IEnumerable`1<string> GetRelatedObjectNames(ISfcSimpleNode source);
    public virtual IEnumerable`1<string> GetPropertyNames(ISfcSimpleNode source);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider : object {
    public abstract virtual bool IsGraphSupported(ISfcSimpleNode node);
    public abstract virtual IEnumerable`1<string> GetRelatedContainerNames(ISfcSimpleNode node);
    public abstract virtual IEnumerable`1<string> GetRelatedObjectNames(ISfcSimpleNode node);
    public abstract virtual IEnumerable`1<string> GetPropertyNames(ISfcSimpleNode node);
    public abstract virtual bool IsContainerInNatrualOrder(ISfcSimpleNode node, string name);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Differencing.SPI.PropertyComparerProvider : object {
    public abstract virtual bool AreGraphsSupported(ISfcSimpleNode source, ISfcSimpleNode target);
    public abstract virtual bool Compare(ISfcSimpleNode source, ISfcSimpleNode target, string propName);
}
public interface Microsoft.SqlServer.Management.Sdk.Differencing.SPI.Provider {
}
public class Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry : object {
    private static object monitor;
    private List`1<SfcNodeAdapterProvider> navigators;
    private List`1<AvailablePropertyValueProvider> props;
    private List`1<NodeItemNamesAdapterProvider> names;
    private List`1<ContainerSortingProvider> sorters;
    private List`1<PropertyComparerProvider> propComps;
    public ICollection`1<SfcNodeAdapterProvider> SfcNodeAdapterProviders { get; }
    public ICollection`1<AvailablePropertyValueProvider> AvailablePropertyValueProviders { get; }
    public ICollection`1<PropertyComparerProvider> PropertyComparerProviders { get; }
    public ICollection`1<NodeItemNamesAdapterProvider> NodeItemNameAdapterProviders { get; }
    public ICollection`1<ContainerSortingProvider> ContainerSortingProviders { get; }
    private static ProviderRegistry();
    public ICollection`1<SfcNodeAdapterProvider> get_SfcNodeAdapterProviders();
    public bool RegisterProvider(SfcNodeAdapterProvider provider);
    public bool UnregisterProvider(SfcNodeAdapterProvider provider);
    public ICollection`1<AvailablePropertyValueProvider> get_AvailablePropertyValueProviders();
    public bool RegisterProvider(AvailablePropertyValueProvider provider);
    public bool UnregisterProvider(AvailablePropertyValueProvider provider);
    public ICollection`1<PropertyComparerProvider> get_PropertyComparerProviders();
    public bool RegisterProvider(PropertyComparerProvider provider);
    public bool UnregisterProvider(PropertyComparerProvider provider);
    public ICollection`1<NodeItemNamesAdapterProvider> get_NodeItemNameAdapterProviders();
    public bool RegisterProvider(NodeItemNamesAdapterProvider provider);
    public bool UnregisterProvider(NodeItemNamesAdapterProvider provider);
    public ICollection`1<ContainerSortingProvider> get_ContainerSortingProviders();
    public bool RegisterProvider(ContainerSortingProvider provider);
    public bool UnregisterProvider(ContainerSortingProvider provider);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Differencing.SPI.SfcNodeAdapterProvider : object {
    public abstract virtual bool IsGraphSupported(object obj);
    public abstract virtual ISfcSimpleNode GetGraphAdapter(object obj);
}
internal static class Microsoft.SqlServer.Management.Sdk.Sfc.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.AstNode : object {
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal double DefaultPriority { get; }
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
    internal virtual double get_DefaultPriority();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Axis : AstNode {
    private static String[] str;
    private AxisType _axistype;
    private AstNode _input;
    private string _urn;
    private string _prefix;
    private string _name;
    private XPathNodeType _nodetype;
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal AstNode Input { get; }
    internal string Name { get; }
    internal AxisType TypeOfAxis { get; }
    internal double DefaultPriority { get; }
    internal Axis(AxisType axistype, AstNode input, string urn, string prefix, string name, XPathNodeType nodetype);
    internal Axis(AxisType axistype, AstNode input);
    private static Axis();
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
    internal AstNode get_Input();
    internal string get_Name();
    internal AxisType get_TypeOfAxis();
    internal virtual double get_DefaultPriority();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.CacheElement : object {
    private EnumObject element;
    private ObjectLoadInfo oli;
    private UInt32 usage;
    private CacheKey key;
    public EnumObject EnumObject { get; }
    public CacheKey CacheKey { get; }
    public UInt32 Usage { get; }
    public CacheElement(ObjectLoadInfo oli, EnumObject element, CacheKey key);
    public EnumObject get_EnumObject();
    public CacheKey get_CacheKey();
    public UInt32 get_Usage();
    public void IncrementUsage();
    public void DecrementUsage();
    public String[] GetChildren();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.CacheKey : object {
    private UInt32 base_key;
    private UInt32 version;
    private DatabaseEngineType databaseEngineType;
    private DatabaseEngineEdition databaseEngineEdition;
    private UInt32 same_obj_key;
    public UInt32 SameObjKey { get; public set; }
    public CacheKey(UInt32 base_key, UInt32 version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    public UInt32 get_SameObjKey();
    public void set_SameObjKey(UInt32 value);
    public virtual string ToString();
    public sealed virtual int CompareTo(object o);
}
[ComVisibleAttribute("False")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql : object {
    private bool m_used;
    private LinkMultiple m_LinkMultiple;
    private StringCollection m_cols;
    protected StringCollection Fields { get; }
    public bool IsUsed { get; }
    protected bool AcceptsMultipleHits { get; }
    public bool Used { get; }
    public LinkMultiple LinkMultiple { get; public set; }
    public ArrayList LinkFields { get; }
    public void SetFields(StringCollection fields);
    protected StringCollection get_Fields();
    public bool get_IsUsed();
    public bool IsHit(string field);
    protected bool TestHit(string field);
    public bool IsDefault();
    protected virtual bool get_AcceptsMultipleHits();
    public bool get_Used();
    public void MarkHit();
    public void ClearHit();
    public LinkMultiple get_LinkMultiple();
    public void set_LinkMultiple(LinkMultiple value);
    public void AddLinkMultiple(XmlReadMultipleLink xrmpl);
    public ArrayList get_LinkFields();
    public abstract virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList : object {
    private ArrayList m_conditionedSqlList;
    public int Count { get; }
    public ConditionedSql Item { get; }
    public int get_Count();
    public void Add(ConditionedSql obj);
    public void ClearHits();
    public bool AddHits(SqlObjectBase obj, string field, StatementBuilder sb);
    public void AddDefault(StatementBuilder sb);
    public ConditionedSql get_Item(int i);
    public IEnumerator GetEnumerator();
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Management.Sdk.Sfc.ConnectionHelpers : object {
    [ExtensionAttribute]
private static string GetSqlDatabaseName(Urn urn);
    internal static bool UpdateConnectionInfoIfCloud(Object& connectionInfo, Urn urn);
    internal static void UpdateConnectionInfoIfContainedAuthentication(Object& connectionInfo, Urn urn);
    private static ServerConnection GetServerConnection(object connectionInfo);
    [ExtensionAttribute]
public static ServerConnection ToScopedServerConnection(SqlConnection sqlConnection, Urn urn);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider : object {
    private ExecuteSql m_execSql;
    private DataTable m_table;
    private SqlDataReader m_dataReader;
    private int nonTriggeredPropertiesCount;
    private Object[] rowData;
    private ColumnDataManipulation[] rowDataManipulation;
    private bool m_bHasTypeCast;
    private bool m_bHasPostProcess;
    private RetriveMode m_RetriveMode;
    private int m_nCurentCachePos;
    private SqlCommand m_command;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public DataProvider(StatementBuilder sb);
    public DataProvider(StatementBuilder sb, RetriveMode rm);
    private void Init(StatementBuilder sb, RetriveMode rm);
    public void SetConnectionAndQuery(ExecuteSql execSql, string query);
    public void InitRowDataManipulation(ArrayList parentProperties, SortedList postProcessList);
    public void InitSchemaTable(ArrayList parentProperties);
    internal object GetTrigeredValue(int i);
    internal object GetDataFromStorage(int i);
    internal void SetDataInStorage(int i, object data);
    private bool ReadInternal();
    private void ManipulateRowDataPostProcess();
    private void ManipulateRowDataType();
    private void ManipulateRowData();
    public sealed virtual int get_Depth();
    public sealed virtual bool get_IsClosed();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Close();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    internal DataTable GetTable();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    private int AdjustIndex(int i);
    public sealed virtual object get_Item(int idx);
    public sealed virtual object get_Item(string name);
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual string GetString(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Dependency : object {
    private Urn m_urn;
    private bool schemaBound;
    private DependencyChainCollection m_links;
    public Urn Urn { get; public set; }
    public bool IsSchemaBound { get; public set; }
    public DependencyChainCollection Links { get; }
    public Dependency(Dependency dep);
    public Dependency Copy();
    public Urn get_Urn();
    public void set_Urn(Urn value);
    public bool get_IsSchemaBound();
    public void set_IsSchemaBound(bool value);
    public DependencyChainCollection get_Links();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection : ArrayList {
    public Dependency Item { get; }
    public DependencyChainCollection(DependencyChainCollection deps);
    public Dependency get_Item(int index);
    public void CopyTo(Dependency[] array, int index);
    public int Add(Dependency value);
    public void Insert(int index, Dependency value);
    public int IndexOf(Dependency value);
    public bool Contains(Dependency value);
    public void Remove(Dependency value);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest : object {
    private Urn[] m_listUrn;
    private bool m_bParentDeps;
    public Urn[] Urns { get; public set; }
    public bool ParentDependencies { get; public set; }
    public Urn[] get_Urns();
    public void set_Urns(Urn[] value);
    public bool get_ParentDependencies();
    public void set_ParentDependencies(bool value);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.DepNode : object {
    private SfcInstance sfcobj;
    private SfcKeyChain keychain;
    private List`1<DepNode> ancestors;
    private List`1<bool> physicalAncestorMask;
    private List`1<DepNode> children;
    private List`1<bool> physicalChildMask;
    private bool discovered;
    public SfcInstance Instance { get; }
    internal SfcKeyChain Keychain { get; }
    public List`1<DepNode> Ancestors { get; public set; }
    public List`1<bool> PhysicalAncestorMask { get; public set; }
    public int CountPhysicalAncestors { get; }
    public List`1<DepNode> Children { get; public set; }
    public List`1<bool> PhysicalChildMask { get; public set; }
    public int CountPhysicalChildren { get; }
    public bool Discovered { get; public set; }
    public DepNode(SfcInstance obj);
    internal DepNode(SfcKeyChain kc);
    public void AddAncestor(DepNode node, bool isPhysicalRelation);
    public void AddChild(DepNode node, bool isPhysicalRelation);
    public SfcInstance get_Instance();
    internal SfcKeyChain get_Keychain();
    public List`1<DepNode> get_Ancestors();
    public void set_Ancestors(List`1<DepNode> value);
    public List`1<bool> get_PhysicalAncestorMask();
    public void set_PhysicalAncestorMask(List`1<bool> value);
    public bool IsPhysicalAncestor(int i);
    public void SetPhysicalAncestor(int i, bool b);
    public int get_CountPhysicalAncestors();
    public List`1<DepNode> get_Children();
    public void set_Children(List`1<DepNode> value);
    public List`1<bool> get_PhysicalChildMask();
    public void set_PhysicalChildMask(List`1<bool> value);
    public bool IsPhysicalChild(int i);
    public void SetPhysicalChild(int i, bool b);
    public int get_CountPhysicalChildren();
    public bool get_Discovered();
    public void set_Discovered(bool value);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.DepStackNode : object {
    private DepNode node;
    private ProcessingState state;
    private int index;
    public DepNode Node { get; public set; }
    public ProcessingState State { get; public set; }
    public int Index { get; public set; }
    public DepStackNode(DepNode node);
    public DepNode get_Node();
    public void set_Node(DepNode value);
    public ProcessingState get_State();
    public void set_State(ProcessingState value);
    public int get_Index();
    public void set_Index(int value);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Diagnostics.SQLToolsOutputDebugStringListener : TraceListener {
    private string myName;
    public SQLToolsOutputDebugStringListener(string name);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    internal static void OutputDebugString(string message);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Diagnostics.SQLToolsTraceListenerCollection : object {
    private ArrayList list;
    public TraceListener Item { get; public set; }
    public TraceListener Item { get; }
    public int Count { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public TraceListener get_Item(int i);
    public void set_Item(int i, TraceListener value);
    public TraceListener get_Item(string name);
    public sealed virtual int get_Count();
    public int Add(TraceListener listener);
    public void AddRange(TraceListener[] value);
    public void AddRange(SQLToolsTraceListenerCollection value);
    public sealed virtual void Clear();
    public bool Contains(TraceListener listener);
    public void CopyTo(TraceListener[] listeners, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(TraceListener listener);
    public void Insert(int index, TraceListener listener);
    public void Remove(TraceListener listener);
    public void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DisplayCategoryKeyAttribute : Attribute {
    private string key;
    private static string postfix;
    private static string delim;
    public string Key { get; }
    public DisplayCategoryKeyAttribute(string key);
    private static DisplayCategoryKeyAttribute();
    public sealed virtual string get_Key();
    public sealed virtual string GetDefaultKey(PropertyInfo property);
    public sealed virtual string GetDefaultKey(Type type);
    public sealed virtual string GetDefaultKey(FieldInfo field);
}
[AttributeUsageAttribute("1156")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DisplayDescriptionKeyAttribute : Attribute {
    private string key;
    private static string postfix;
    private static string delim;
    public string Key { get; }
    public DisplayDescriptionKeyAttribute(string key);
    private static DisplayDescriptionKeyAttribute();
    public sealed virtual string get_Key();
    public sealed virtual string GetDefaultKey(PropertyInfo property);
    public sealed virtual string GetDefaultKey(Type type);
    public sealed virtual string GetDefaultKey(FieldInfo field);
}
internal static class Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper : object {
    private static DisplayNameKeyAttribute displayNameKey;
    private static DisplayDescriptionKeyAttribute displayDiscKey;
    private static DisplayCategoryKeyAttribute displayCatKey;
    private static DisplayKeyHelper();
    private static IDisplayKey GetDisplayKey(Type keyAttribute);
    public static string GetValueFromCustomAttribute(FieldInfo field, Type keyAttribute, ResourceManager resourceManager, bool isDefault);
    public static string GetValueFromCustomAttribute(PropertyInfo property, Type keyAttribute, ResourceManager resourceManager, bool isDefault);
    public static string GetValueFromCustomAttribute(Type type, Type keyAttribute, ResourceManager resourceManager, bool isDefault);
    private static string GetDisplayValue(string key, ResourceManager resourceManager);
    private static string GetCustomDisplayValue(Object[] customAttributes, ResourceManager resourceManager);
    public static string ConvertNullToEmptyString(string value);
    public static string ConstructDefaultKey(string postfix, string delim, PropertyInfo property);
    public static string ConstructDefaultKey(string postfix, string delim, Type type);
    public static string ConstructDefaultKey(string postfix, string delim, FieldInfo field);
}
[AttributeUsageAttribute("1412")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DisplayNameKeyAttribute : Attribute {
    private string key;
    private static string postfix;
    private static string delim;
    public string Key { get; }
    public DisplayNameKeyAttribute(string key);
    private static DisplayNameKeyAttribute();
    public sealed virtual string get_Key();
    public sealed virtual string GetDefaultKey(PropertyInfo property);
    public sealed virtual string GetDefaultKey(Type type);
    public sealed virtual string GetDefaultKey(FieldInfo field);
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DmfIgnorePropertyAttribute : Attribute {
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.DomainRegistrationEncapsulation : object {
    private static SfcDomainInfoCollection domains;
    private static SfcDomainInfo[] registeredDomains;
    private static SfcDomainInfo[] testDomains;
    internal static SfcDomainInfoCollection Domains { get; }
    private static DomainRegistrationEncapsulation();
    internal static SfcDomainInfoCollection get_Domains();
    internal static void AddTestDomainsToDomainsList();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.DomainRootKey : SfcKey {
    private ISfcDomain m_Domain;
    public ISfcDomain Domain { get; public set; }
    protected DomainRootKey(ISfcDomain domain);
    public ISfcDomain get_Domain();
    public void set_Domain(ISfcDomain value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.DynamicValuesAttribute : Attribute {
    private bool dynamicValuesEnabled;
    public bool Enabled { get; }
    public DynamicValuesAttribute(bool enabled);
    public bool get_Enabled();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.DynamicValueTypeConverter : StringConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator : MarshalByRefObject {
    [ConditionalAttribute("DEBUG")]
public static void TraceInfo(string trace);
    [ConditionalAttribute("DEBUG")]
public static void TraceInfo(string strFormat, Object[] arg);
    public static EnumResult GetData(object connectionInfo, Request request);
    public static void RegisterExtension(Urn urn, string name, Assembly assembly, string implementsType);
    public static EnumResult GetData(object connectionInfo, Urn urn);
    public static EnumResult GetData(object connectionInfo, Urn urn, String[] requestedFields);
    public static EnumResult GetData(object connectionInfo, Urn urn, String[] requestedFields, OrderBy[] orderBy);
    public static EnumResult GetData(object connectionInfo, Urn urn, String[] requestedFields, OrderBy orderBy);
    public EnumResult Process(object connectionInfo, Request request);
    private EnumResult VanillaProcess(object connectionInfo, Request request);
    internal static ObjectInfo GetObjectInfo(object connectionInfo, Urn urn);
    internal static ObjectInfo GetObjectInfo(object connectionInfo, Urn urn, Flags flags);
    internal static ObjectInfo GetObjectInfo(object connectionInfo, RequestObjectInfo requestObjectInfo);
    public ObjectInfo Process(object connectionInfo, RequestObjectInfo requestObjectInfo);
    public ObjectInfo Process(ServerVersion version, RequestObjectInfo requestObjectInfo);
    public DependencyChainCollection EnumDependencies(object connectionInfo, DependencyRequest dependencyRequest);
    private static String[] FixPropertyList(object connectionInfo, Urn urn, String[] fields, RequestFieldsTypes requestFieldsType);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.EnumeratorException : SqlServerManagementException {
    public EnumeratorException(string message);
    public EnumeratorException(string message, Exception innerException);
    protected EnumeratorException(SerializationInfo info, StreamingContext context);
    internal static void FilterException(Exception e);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject : object {
    private SortedList m_properties;
    private StringCollection m_propertyNames;
    private Request m_req;
    private XPathExpressionBlock m_block;
    private object m_ci;
    private Urn m_Urn;
    protected internal string Name { get; }
    protected internal Urn Urn { get; protected internal set; }
    protected SortedList FixedProperties { get; }
    public Request Request { get; public set; }
    public object ConnectionInfo { get; public set; }
    public FilterNode Filter { get; public set; }
    public ResultType[] ResultTypes { get; }
    protected internal string get_Name();
    protected internal Urn get_Urn();
    protected internal void set_Urn(Urn value);
    public virtual void Initialize(object ci, XPathExpressionBlock block);
    protected SortedList get_FixedProperties();
    protected string GetFixedStringProperty(string propertyName, bool removeEscape);
    protected void AddProperty(ObjectProperty op);
    public ObjectProperty[] GetProperties(ObjectPropertyUsages usage);
    public ObjectProperty[] GetUrnProperties();
    protected ObjectProperty TryGetProperty(string name, ObjectPropertyUsages usage);
    protected ObjectProperty GetProperty(string name, ObjectPropertyUsages usage);
    public void set_Request(Request value);
    public Request get_Request();
    public object get_ConnectionInfo();
    public void set_ConnectionInfo(object value);
    public FilterNode get_Filter();
    public void set_Filter(FilterNode value);
    public bool ComputeFixedProperties();
    protected internal string GetAliasPropertyName(string prop);
    public virtual Request RetrieveParentRequest();
    public abstract virtual EnumResult GetData(EnumResult erParent);
    public abstract virtual ResultType[] get_ResultTypes();
    public virtual void PostProcess(EnumResult erChildren);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult : object {
    private ResultType m_resultType;
    private object m_data;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CommandElapsedTime>k__BackingField;
    public ResultType Type { get; }
    public object Data { get; public set; }
    public string CommandText { get; public set; }
    public TimeSpan CommandElapsedTime { get; public set; }
    public EnumResult(object ob, ResultType resultType);
    public ResultType get_Type();
    protected void SetType(ResultType type);
    public object get_Data();
    public void set_Data(object value);
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CommandElapsedTime();
    [CompilerGeneratedAttribute]
public void set_CommandElapsedTime(TimeSpan value);
    public static DataSet op_Implicit(EnumResult er);
    public static DataSet ConvertToDataSet(EnumResult er);
    public static DataTable op_Implicit(EnumResult er);
    public static DataTable ConvertToDataTable(EnumResult er);
    public static XmlDocument op_Implicit(EnumResult er);
    public static XmlDocument ConvertToXmlDocument(EnumResult er);
    public static IDataReader ConvertToDataReader(EnumResult er);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Environment : object {
    private XPathExpression m_xpath;
    private ArrayList m_listEnumObject;
    public int LastPos { get; }
    public int get_LastPos();
    private void GetObjectsFromCache(Urn urn, object ci);
    private void PostProcess(EnumResult er);
    private void PutObjectsInCache();
    public void InitObjects(Request req);
    private EnumResult GetData();
    public EnumResult GetData(Request req, object ci);
    public ObjectInfo GetObjectInfo(object ci, RequestObjectInfo req);
    internal static ServerVersion GetServerVersion(Urn urn, object ci);
    public ObjectInfo GetObjectInfo(ServerVersion version, RequestObjectInfo req);
    internal static DatabaseEngineType GetDatabaseEngineType(Urn urn, object ci);
    internal static DatabaseEngineEdition GetDatabaseEngineEdition(Urn urn, object ci);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql : object {
    private ServerConnection m_conctx;
    private bool bHasConnected;
    private ArrayList m_Messages;
    private Nullable`1<SqlExecutionModes> m_semInitial;
    private SqlInfoMessageEventHandler m_ServerInfoMessage;
    public ExecuteSql(object con);
    internal void Connect();
    internal void Disconnect();
    private void InitConnection(object con);
    private void StartCapture();
    private void RecordMessage(object sender, SqlInfoMessageEventArgs e);
    private ArrayList ClearCapture();
    private bool TryToReconnect(ExecutionFailureException e);
    public void ExecuteImmediate(string query);
    public DataTable ExecuteWithResults(string query);
    public SqlDataReader GetDataReader(string query);
    public SqlDataReader GetDataReader(string query, SqlCommand& command);
    public ServerVersion GetServerVersion();
    public DatabaseEngineType GetDatabaseEngineType();
    public DatabaseEngineEdition GetDatabaseEngineEdition();
    internal bool IsContainedAuthentication();
    internal string GetHostPlatform();
    public static ArrayList ExecuteImmediateGetMessage(string query, object con);
    public static void ExecuteImmediate(string query, object con);
    public static DataTable ExecuteWithResults(string query, object con);
    public static DataTable ExecuteWithResults(StringCollection query, object con, StatementBuilder sb);
    internal static DataProvider GetDataProvider(StringCollection query, object con, StatementBuilder sb);
    internal static DataProvider GetDataProvider(StringCollection query, object con, StatementBuilder sb, RetriveMode rm);
    public static DataTable ExecuteWithResults(StringCollection query, object con);
    public static ServerVersion GetServerVersion(object con);
    public static DatabaseEngineType GetDatabaseEngineType(object con);
    public static DatabaseEngineEdition GetDatabaseEngineEdition(object con);
    public static bool IsContainedAuthentication(object con);
    public static string GetHostPlatform(object con);
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.ExtendedPropertyAttribute : Attribute {
    private string parentPropertyName;
    public string ParentPropertyName { get; }
    public bool HasParent { get; }
    public ExtendedPropertyAttribute(string parentPropertyName);
    public string get_ParentPropertyName();
    public bool get_HasParent();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Filter : AstNode {
    private AstNode _input;
    private AstNode _condition;
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal AstNode Input { get; }
    internal AstNode Condition { get; }
    internal Filter(AstNode input, AstNode condition);
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
    internal AstNode get_Input();
    internal AstNode get_Condition();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterDecoder : object {
    private ISqlFilterDecoderCallback m_isfdc;
    private StringBuilder m_sql;
    private bool m_bInFuncContains;
    private bool m_bInFuncLike;
    private string m_strPrefix;
    public string StringPrefix { get; public set; }
    public FilterDecoder(ISqlFilterDecoderCallback isfdc);
    public string get_StringPrefix();
    public void set_StringPrefix(string value);
    public string GetSql(FilterNode node);
    private string XPathOpToSqOp(Type op);
    private void decode(FilterNode node);
    private void decode(FilterNodeFunction func);
    private void decode(FilterNodeAttribute ax);
}
[ComVisibleAttribute("False")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode : object {
    public Type NodeType { get; }
    public abstract virtual Type get_NodeType();
    public static bool Compare(FilterNode f1, FilterNode f2, CompareOptions compInfo, CultureInfo cultureInfo);
    public virtual string ToString();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute : FilterNode {
    private string m_name;
    private static Dictionary`2<string, string> CachedNames;
    private static object CachedNamesLock;
    public Type NodeType { get; }
    public string Name { get; }
    public FilterNodeAttribute(string name);
    private static FilterNodeAttribute();
    public virtual Type get_NodeType();
    public string get_Name();
    internal static bool Compare(FilterNodeAttribute a1, FilterNodeAttribute a2);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[ComVisibleAttribute("False")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren : FilterNode {
    private FilterNode[] children;
    internal FilterNode[] Children { get; }
    internal FilterNodeChildren(FilterNode[] children);
    internal FilterNode[] get_Children();
    internal void Add(FilterNode x);
    internal static bool Compare(FilterNodeChildren f1, FilterNodeChildren f2, CompareOptions compInfo, CultureInfo cultureInfo);
    public virtual int GetHashCode();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant : FilterNode {
    private object m_value;
    private ObjectType m_objtype;
    public Type NodeType { get; }
    public object Value { get; }
    public ObjectType ObjType { get; }
    public string ValueAsString { get; }
    public FilterNodeConstant(object value, ObjectType type);
    public virtual Type get_NodeType();
    public object get_Value();
    public ObjectType get_ObjType();
    public string get_ValueAsString();
    public static string op_Implicit(FilterNodeConstant fnc);
    internal static bool Compare(FilterNodeConstant f1, FilterNodeConstant f2, CompareOptions compInfo, CultureInfo cultureInfo);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction : FilterNodeChildren {
    private Type m_funcType;
    private string m_name;
    public Type NodeType { get; }
    public string Name { get; }
    public Type FunctionType { get; }
    public int ParameterCount { get; }
    internal FilterNodeFunction(Type funcType, string name);
    public FilterNodeFunction(Type funcType, string name, FilterNode[] args);
    public virtual Type get_NodeType();
    public string get_Name();
    public Type get_FunctionType();
    public int get_ParameterCount();
    public FilterNode GetParameter(int index);
    internal static bool Compare(FilterNodeFunction f1, FilterNodeFunction f2, CompareOptions compInfo, CultureInfo cultureInfo);
    public static string FuncTypeToString(Type type);
    public virtual string ToString();
    public virtual int GetHashCode();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup : FilterNodeChildren {
    public Type NodeType { get; }
    public FilterNode Node { get; }
    public FilterNodeGroup(FilterNode node);
    public virtual Type get_NodeType();
    public FilterNode get_Node();
    internal static bool Compare(FilterNodeGroup f1, FilterNodeGroup f2, CompareOptions compInfo, CultureInfo cultureInfo);
    public virtual string ToString();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator : FilterNodeChildren {
    private Type m_opType;
    public Type NodeType { get; }
    public Type OpType { get; }
    public FilterNode Left { get; }
    public FilterNode Right { get; }
    internal FilterNodeOperator(Type opType);
    public FilterNodeOperator(Type opType, FilterNode left, FilterNode right);
    public virtual Type get_NodeType();
    public Type get_OpType();
    public FilterNode get_Left();
    public FilterNode get_Right();
    internal static bool Compare(FilterNodeOperator f1, FilterNodeOperator f2, CompareOptions compInfo, CultureInfo cultureInfo);
    public static string OpTypeToString(Type type);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterPropertyEventArgs : EventArgs {
    private string propertyName;
    private SfcInstance instance;
    public string PropertyName { get; }
    public SfcInstance Instance { get; }
    public FilterPropertyEventArgs(SfcInstance instance, string propertyName);
    public string get_PropertyName();
    public SfcInstance get_Instance();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.FilterPropertyHandler : MulticastDelegate {
    public FilterPropertyHandler(object object, IntPtr method);
    public virtual object Invoke(SfcSerializer serializer, FilterPropertyEventArgs propertyArgs);
    public virtual IAsyncResult BeginInvoke(SfcSerializer serializer, FilterPropertyEventArgs propertyArgs, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.FilterTranslate : object {
    private static Type XPathOpToFilterOp(Op op);
    private static Type XPathFuncToFilterFunction(FunctionType tfunc);
    public static FilterNode decode(AstNode node);
    private static FilterNode decode(Axis ax);
    private static FilterNode decode(Function func);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Function : AstNode {
    private FunctionType _functionType;
    private ArrayList _argumentList;
    private String[] str;
    private string _Name;
    private string _Prefix;
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal FunctionType TypeOfFunction { get; }
    internal ArrayList ArgumentList { get; }
    internal string Name { get; }
    internal Function(FunctionType ftype, ArrayList argumentList);
    internal Function(string prefix, string name, ArrayList argumentList);
    internal Function(FunctionType ftype);
    internal Function(FunctionType ftype, AstNode arg);
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
    internal FunctionType get_TypeOfFunction();
    internal ArrayList get_ArgumentList();
    internal string get_Name();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Group : AstNode {
    private AstNode _groupNode;
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal AstNode GroupNode { get; }
    internal double DefaultPriority { get; }
    internal Group(AstNode groupNode);
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
    internal AstNode get_GroupNode();
    internal virtual double get_DefaultPriority();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject {
    public abstract virtual object Resolve(string urnString);
    public abstract virtual List`1<object> Discover();
    public abstract virtual void SetPropertyValue(string propertyName, Type propertyType, object value);
    public abstract virtual Type GetPropertyType(string propertyName);
    public abstract virtual object GetPropertyValue(string propertyName, Type propertyType);
    public abstract virtual void SetObjectState(SfcObjectState state);
    public abstract virtual ISfcDomainLite GetDomainRoot();
    public abstract virtual object GetParent();
    public abstract virtual Urn GetUrn();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObjectAdapter : SimpleNodeAdapter {
    public virtual bool IsSupported(object node);
    public virtual Urn GetUrn(object reference);
    public virtual object GetProperty(object instance, string propertyName);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IAlienRoot {
    public ServerConnection ConnectionContext { get; }
    public string Name { get; }
    public abstract virtual DataTable SfcHelper_GetDataTable(object connection, string urn, String[] fields, OrderBy[] orderByFields);
    public abstract virtual List`1<string> SfcHelper_GetSmoObjectQuery(string queryString, String[] fields, OrderBy[] orderByFields);
    public abstract virtual object SfcHelper_GetSmoObject(string urn);
    public abstract virtual void DesignModeInitialize();
    public abstract virtual ServerConnection get_ConnectionContext();
    public abstract virtual string get_Name();
}
internal interface Microsoft.SqlServer.Management.Sdk.Sfc.IDisplayKey {
    public string Key { get; }
    public abstract virtual string get_Key();
    public abstract virtual string GetDefaultKey(PropertyInfo property);
    public abstract virtual string GetDefaultKey(Type type);
    public abstract virtual string GetDefaultKey(FieldInfo field);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IDmfFacet {
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicProperties {
    public abstract virtual void AddProperties(PropertyDescriptorCollection properties, ITypeDescriptorContext context, object value, Attribute[] attributes);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicReadOnly {
    public abstract virtual void OverrideReadOnly(IList`1<LocalizablePropertyDescriptor> properties, ITypeDescriptorContext context, object value, Attribute[] attributes);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadOnlyPropertyChanged(EventHandler`1<ReadOnlyPropertyChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadOnlyPropertyChanged(EventHandler`1<ReadOnlyPropertyChangedEventArgs> value);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicValues {
    public abstract virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicVisible {
    public abstract virtual ICollection ConfigureVisibleEnumFields(ITypeDescriptorContext context, ArrayList values);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IEnumDependencies {
    public abstract virtual DependencyChainCollection EnumDependencies(object ci, DependencyRequest rd);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.InternalEnumeratorException : EnumeratorException {
    public InternalEnumeratorException(string message);
    public InternalEnumeratorException(string message, Exception innerException);
    private InternalEnumeratorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.InvalidConfigurationFileEnumeratorException : EnumeratorException {
    public InvalidConfigurationFileEnumeratorException(string message);
    public InvalidConfigurationFileEnumeratorException(string message, Exception innerException);
    private InvalidConfigurationFileEnumeratorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.InvalidPropertyUsageEnumeratorException : EnumeratorException {
    public InvalidPropertyUsageEnumeratorException(string message);
    public InvalidPropertyUsageEnumeratorException(string message, Exception innerException);
    private InvalidPropertyUsageEnumeratorException(SerializationInfo info, StreamingContext context);
    internal static void Throw(string propertyName, ObjectPropertyUsages usage_not_resolved);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.InvalidQueryExpressionEnumeratorException : EnumeratorException {
    public InvalidQueryExpressionEnumeratorException(string message);
    public InvalidQueryExpressionEnumeratorException(string message, Exception innerException);
    private InvalidQueryExpressionEnumeratorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.InvalidVersionEnumeratorException : EnumeratorException {
    public InvalidVersionEnumeratorException(string message);
    public InvalidVersionEnumeratorException(string message, Exception innerException);
    private InvalidVersionEnumeratorException(SerializationInfo info, StreamingContext context);
}
internal interface Microsoft.SqlServer.Management.Sdk.Sfc.IPropertyCollectionPopulator {
    public abstract virtual void Populate(SfcPropertyCollection properties);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection {
    public int Count { get; }
    public abstract virtual int get_Count();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection`1 {
    public abstract virtual bool Contains(T item);
    public abstract virtual void CopyTo(T[] array, int arrayIndex);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2 {
    public T Item { get; }
    public IEnumerable`1<K> Keys { get; }
    public IEnumerable`1<T> Values { get; }
    public abstract virtual bool ContainsKey(K key);
    public abstract virtual bool TryGetValue(K key, T& value);
    public abstract virtual T get_Item(K key);
    public abstract virtual IEnumerable`1<K> get_Keys();
    public abstract virtual IEnumerable`1<T> get_Values();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyList`1 {
    public T Item { get; }
    public abstract virtual T get_Item(int index);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet {
    public abstract virtual bool IsSubsetOf(IEnumerable other);
    public abstract virtual bool IsSupersetOf(IEnumerable other);
    public abstract virtual bool IsProperSubsetOf(IEnumerable other);
    public abstract virtual bool IsProperSupersetOf(IEnumerable other);
    public abstract virtual bool Overlaps(IEnumerable other);
    public abstract virtual bool SetEquals(IEnumerable other);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1 {
    public abstract virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public abstract virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public abstract virtual bool Overlaps(IEnumerable`1<T> other);
    public abstract virtual bool SetEquals(IEnumerable`1<T> other);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IScriptedByParent {
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable {
    public abstract virtual ISfcScript ScriptAlter();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection {
    public SfcInstance Parent { get; }
    public bool Initialized { get; public set; }
    public int Count { get; }
    public abstract virtual string GetCollectionElementNameImpl();
    public abstract virtual SfcObjectFactory GetElementFactory();
    public abstract virtual SfcInstance get_Parent();
    public abstract virtual void EnsureInitialized();
    public abstract virtual bool get_Initialized();
    public abstract virtual void set_Initialized(bool value);
    public abstract virtual int get_Count();
    public abstract virtual void Add(SfcInstance sfcInstance);
    public abstract virtual void Remove(SfcInstance sfcInstance);
    public abstract virtual void RemoveElement(SfcInstance sfcInstance);
    public abstract virtual void Rename(SfcInstance sfcInstance, SfcKey newKey);
    public abstract virtual bool GetExisting(SfcKey key, SfcInstance& sfcInstance);
    public abstract virtual SfcInstance GetObjectByKey(SfcKey key);
    public abstract virtual void PrepareMerge();
    public abstract virtual bool AddShadow(SfcInstance sfcInstance);
    public abstract virtual void FinishMerge();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCreatable {
    public abstract virtual ISfcScript ScriptCreate();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink {
    public SfcDependencyAction Action { get; }
    public abstract virtual SfcDependencyAction get_Action();
    public abstract virtual void Add(SfcDependencyDirection direction, SfcInstance targetObject, SfcTypeRelation relation, bool discovered);
    public abstract virtual void Add(SfcDependencyDirection direction, IEnumerator targetObjects, SfcTypeRelation relation, bool discovered);
    public abstract virtual void Add(SfcDependencyDirection direction, IEnumerable`1<T> targetObjects, SfcTypeRelation relation, bool discovered);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDiscoverObject {
    public abstract virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain {
    public abstract virtual Type GetType(string typeName);
    public abstract virtual SfcKey GetKey(IUrnFragment urnFragment);
    public abstract virtual ISfcExecutionEngine GetExecutionEngine();
    public abstract virtual SfcTypeMetadata GetTypeMetadata(string typeName);
    public abstract virtual bool UseSfcStateManagement();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain2 {
    public abstract virtual List`1<string> GetUrnSkeletonsFromType(Type inputType);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite {
    public string DomainName { get; }
    public string DomainInstanceName { get; }
    public abstract virtual int GetLogicalVersion();
    public abstract virtual string get_DomainName();
    public abstract virtual string get_DomainInstanceName();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDroppable {
    public abstract virtual ISfcScript ScriptDrop();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcExecutionEngine {
    public abstract virtual object Execute(ISfcScript script);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection {
    public SfcConnectionContext ConnectionContext { get; }
    public abstract virtual ISfcConnection GetConnection();
    public abstract virtual void SetConnection(ISfcConnection connection);
    public abstract virtual ISfcConnection GetConnection(SfcObjectQueryMode activeQueriesMode);
    public abstract virtual SfcConnectionContext get_ConnectionContext();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMarkForDrop {
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMovable {
    public abstract virtual void Move(SfcInstance newParent);
    public abstract virtual ISfcScript ScriptMove(SfcInstance newParent);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcNotifyPropertyMetadataChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty {
    public string Name { get; }
    public Type Type { get; }
    public bool Enabled { get; }
    public object Value { get; public set; }
    public bool Required { get; }
    public bool Writable { get; }
    public bool Dirty { get; }
    public bool IsNull { get; }
    public AttributeCollection Attributes { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type get_Type();
    public abstract virtual bool get_Enabled();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual bool get_Required();
    public abstract virtual bool get_Writable();
    public abstract virtual bool get_Dirty();
    public abstract virtual bool get_IsNull();
    public abstract virtual AttributeCollection get_Attributes();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertyProvider {
    public abstract virtual ISfcPropertySet GetPropertySet();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet {
    public abstract virtual bool Contains(string propertyName);
    public abstract virtual bool Contains(ISfcProperty property);
    public abstract virtual bool Contains(string name);
    public abstract virtual bool TryGetPropertyValue(string name, T& value);
    public abstract virtual bool TryGetPropertyValue(string name, Object& value);
    public abstract virtual bool TryGetProperty(string name, ISfcProperty& property);
    public abstract virtual IEnumerable`1<ISfcProperty> EnumProperties();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertyStorageProvider {
    public abstract virtual object GetPropertyValueImpl(string propertyName);
    public abstract virtual void SetPropertyValueImpl(string propertyName, object value);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable {
    public abstract virtual void Rename(SfcKey newKey);
    public abstract virtual ISfcScript ScriptRename(SfcKey newKey);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScript {
    public abstract virtual void Add(ISfcScript script);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScriptCollector {
    public abstract virtual T OpenWriter();
    public abstract virtual T OpenWriter(bool append);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSerializableUpgrade {
    public abstract virtual UpgradeSession StartSerializationUpgrade();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList {
    public IEnumerable ListReference { get; }
    public abstract virtual IEnumerable get_ListReference();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleMap`2 {
    public TValue Item { get; }
    public abstract virtual TValue get_Item(TKey key);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode {
    public object ObjectReference { get; }
    public Urn Urn { get; }
    public ISfcSimpleMap`2<string, ISfcSimpleList> RelatedContainers { get; }
    public ISfcSimpleMap`2<string, ISfcSimpleNode> RelatedObjects { get; }
    public ISfcSimpleMap`2<string, object> Properties { get; }
    public abstract virtual object get_ObjectReference();
    public abstract virtual Urn get_Urn();
    public abstract virtual ISfcSimpleMap`2<string, ISfcSimpleList> get_RelatedContainers();
    public abstract virtual ISfcSimpleMap`2<string, ISfcSimpleNode> get_RelatedObjects();
    public abstract virtual ISfcSimpleMap`2<string, object> get_Properties();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode {
    public bool IsDesignMode { get; }
    public abstract virtual bool get_IsDesignMode();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISfcValidate {
    public abstract virtual ValidationState Validate(string methodName, Object[] arguments);
}
[ComVisibleAttribute("False")]
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback {
    public bool SupportsParameterization { get; }
    public abstract virtual string AddPropertyForFilter(string name);
    public abstract virtual string AddConstantForFilter(string constantValue);
    public abstract virtual bool get_SupportsParameterization();
}
internal interface Microsoft.SqlServer.Management.Sdk.Sfc.ISqlSmoObjectInitialize {
    public abstract virtual void InitializeFromDataReader(IDataReader reader);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISupportDatabaseEngineEditions {
    public abstract virtual DatabaseEngineEdition GetDatabaseEngineEdition(object conn);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISupportDatabaseEngineTypes {
    public abstract virtual DatabaseEngineType GetDatabaseEngineType(object conn);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISupportInitData {
    public abstract virtual void LoadInitData(string file, ServerVersion ver);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISupportInitDatabaseEngineData {
    public abstract virtual void LoadInitData(string file, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.ISupportVersions {
    public abstract virtual ServerVersion GetServerVersion(object conn);
}
internal interface Microsoft.SqlServer.Management.Sdk.Sfc.IUrn {
    public XPathExpression XPathExpression { get; }
    public string Value { get; public set; }
    public string DomainInstanceName { get; }
    public abstract virtual XPathExpression get_XPathExpression();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual string get_DomainInstanceName();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IUrnFragment {
    public string Name { get; }
    public Dictionary`2<string, object> FieldDictionary { get; }
    public abstract virtual string get_Name();
    public abstract virtual Dictionary`2<string, object> get_FieldDictionary();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.IXmlSerializationAdapter {
    public abstract virtual void ReadXml(XmlReader reader, Object& deserializedObject);
    public abstract virtual void WriteXml(XmlWriter writer, object objectToSerialize);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.LinkField : object {
    private string m_field;
    private string m_value;
    private LinkFieldType m_type;
    public LinkFieldType Type { get; public set; }
    public string Field { get; public set; }
    public string Value { get; public set; }
    public LinkFieldType get_Type();
    public void set_Type(LinkFieldType value);
    public string get_Field();
    public void set_Field(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.LinkFieldType : Enum {
    public int value__;
    public static LinkFieldType Parent;
    public static LinkFieldType Local;
    public static LinkFieldType Computed;
    public static LinkFieldType Filter;
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple : object {
    private string m_no;
    private string m_expression;
    private ArrayList m_listLink;
    private bool HasLinkFields { get; }
    public ArrayList LinkFields { get; }
    public string No { get; public set; }
    internal void Init(XmlReadMultipleLink xrpl);
    private bool get_HasLinkFields();
    public void SetLinkFields(ArrayList list);
    public ArrayList get_LinkFields();
    public string get_No();
    public void set_No(string value);
    public string GetSqlExpression(SqlObjectBase obj);
    internal void SetSqlExpression(string expr);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter : EnumConverter {
    private SortedList localizedEnumFields;
    internal LocalizableEnumConverter(Type type, ResourceManager manager);
    public LocalizableEnumConverter(Type type);
    private void LoadLocalizedNames(Type type, ResourceManager manager);
    private void LoadLocalizedFieldNames(Type type, ResourceManager manager);
    private void LoadUnlocalizedFieldNames(Type type);
    private string GetEnumDescription(Enum value);
    internal object GetEnumValue(string description);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor : MemberDescriptor {
    private Type type;
    private string displayName;
    private string displayCategory;
    private string displayDescription;
    public string Category { get; }
    public string Description { get; }
    public bool DesignTimeOnly { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public string Name { get; }
    public LocalizableMemberDescriptor(Type type, ResourceManager resourceManager, bool isDefaultResourceManager);
    public virtual string get_Category();
    public virtual string get_Description();
    public virtual bool get_DesignTimeOnly();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual string get_Name();
    private static string GetCategoryAttribute(Type type);
    private static string GetDescriptionAttribute(Type type);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyComparer : object {
    public sealed virtual int Compare(object a, object b);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor : PropertyDescriptor {
    private PropertyInfo property;
    private string displayName;
    private string displayCategory;
    private string displayDescription;
    private int displayOrdinal;
    private TypeConverter typeConverter;
    private bool readonlyOverride;
    public string Category { get; }
    public Type ComponentType { get; }
    public string Description { get; }
    public bool DesignTimeOnly { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsLocalizable { get; }
    public bool IsReadOnly { get; }
    public string Name { get; }
    public Type PropertyType { get; }
    public int DisplayOrdinal { get; }
    public TypeConverter Converter { get; }
    public LocalizablePropertyDescriptor(PropertyInfo property, ResourceManager resourceManager, bool isDefaultResourceManager);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void ResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual string get_Category();
    public virtual Type get_ComponentType();
    public virtual string get_Description();
    public virtual bool get_DesignTimeOnly();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsLocalizable();
    public void ForceReadOnly();
    public virtual bool get_IsReadOnly();
    public virtual string get_Name();
    public virtual Type get_PropertyType();
    public int get_DisplayOrdinal();
    public virtual TypeConverter get_Converter();
    private static string GetCategoryAttribute(PropertyInfo property);
    private static string GetDescriptionAttribute(PropertyInfo property);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter : TypeConverter {
    private string defaultResourceName;
    private void GetResourceManager(Type valueType, ResourceManager& resourceManager, Boolean& isDefaultResources);
    private PropertyDescriptorCollection GetPropertiesFromObject(ITypeDescriptorContext context, object value, Attribute[] filter);
    private PropertyDescriptorCollection GetPropertiesFromType(Type valueType);
    private PropertyDescriptorCollection GetPropertyDescriptorsFromPropertyInfo(PropertyInfo[] properties, ResourceManager resourceManager, bool isDefaultResources);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] filter);
    public PropertyDescriptorCollection GetProperties(PropertyInfo[] properties);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public LocalizableMemberDescriptor GetTypeMemberDescriptor(Type type);
}
[AttributeUsageAttribute("1052")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.LocalizedPropertyResourcesAttribute : Attribute {
    private string resourcesName;
    private bool useDefaultKeys;
    public string ResourcesName { get; }
    public bool UseDefaultKeys { get; }
    public LocalizedPropertyResourcesAttribute(string resourcesName);
    public LocalizedPropertyResourcesAttribute(string resourcesName, bool useDefaultKeys);
    public LocalizedPropertyResourcesAttribute(Type resourceType);
    public string get_ResourcesName();
    public bool get_UseDefaultKeys();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.AttributeUtilities : object {
    public static Object[] GetValuesOfProperties(object instance, String[] properties);
    public static object GetValueOfProperty(object instance, string name);
    public static object GetValueOfProperty(object instance, List`1<string> names);
    public static List`1<string> SplitNames(string propertyName);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcMetadata {
    public SfcMetadataDiscovery Metadata { get; }
    public abstract virtual SfcMetadataDiscovery get_Metadata();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcMetadataProvider {
    public abstract virtual SfcMetadataDiscovery GetMetadataProvider();
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceCollectionResolver {
    public abstract virtual IEnumerable ResolveCollection(object instance, Object[] args);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceCollectionResolver`2 {
    public abstract virtual IEnumerable`1<T> ResolveCollection(S instance, Object[] args);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceResolver {
    public abstract virtual object Resolve(object instance, Object[] args);
}
public interface Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceResolver`2 {
    public abstract virtual T Resolve(S instance, Object[] args);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ReferenceResolverDelegate : MulticastDelegate {
    public ReferenceResolverDelegate(object object, IntPtr method);
    public virtual object Invoke(object instance, Object[] parameters);
    public virtual IAsyncResult BeginInvoke(object instance, Object[] parameters, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("4")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcBrowsableAttribute : Attribute {
    private bool m_isBrowsable;
    public bool IsBrowsable { get; public set; }
    public SfcBrowsableAttribute(bool isBrowsable);
    public bool get_IsBrowsable();
    public void set_IsBrowsable(bool value);
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality : Enum {
    public int value__;
    public static SfcCardinality None;
    public static SfcCardinality One;
    public static SfcCardinality ZeroToOne;
    public static SfcCardinality ZeroToAny;
    public static SfcCardinality OneToAny;
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcContainerCardinality : Enum {
    public int value__;
    public static SfcContainerCardinality ZeroToAny;
    public static SfcContainerCardinality OneToAny;
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcContainerRelationship : Enum {
    public int value__;
    public static SfcContainerRelationship ObjectContainer;
    public static SfcContainerRelationship ChildContainer;
}
[AttributeUsageAttribute("4")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementAttribute : Attribute {
    private SfcElementFlags m_flags;
    public bool Standalone { get; public set; }
    public bool SqlAzureDatabase { get; public set; }
    public SfcElementAttribute(SfcElementFlags flags);
    public bool get_Standalone();
    public void set_Standalone(bool value);
    public bool get_SqlAzureDatabase();
    public void set_SqlAzureDatabase(bool value);
}
[FlagsAttribute]
internal enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementFlags : Enum {
    public int value__;
    public static SfcElementFlags None;
    public static SfcElementFlags Standalone;
    public static SfcElementFlags SqlAzureDatabase;
}
[AttributeUsageAttribute("4")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementTypeAttribute : Attribute {
    private string m_elementTypeName;
    public string ElementTypeName { get; public set; }
    public SfcElementTypeAttribute(string elementTypeName);
    public string get_ElementTypeName();
    public void set_ElementTypeName(string value);
}
[AttributeUsageAttribute("132")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcIgnoreAttribute : SfcRelationshipAttribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcInvalidForTypeAttribute : Attribute {
    private Type excludedType;
    public Type ExcludedType { get; }
    public SfcInvalidForTypeAttribute(Type excludedType);
    public Type get_ExcludedType();
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcKeyAttribute : Attribute {
    private int m_position;
    public int Position { get; }
    public SfcKeyAttribute(int position);
    public int get_Position();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery : object {
    private static Dictionary`2<Type, List`1<SfcMetadataRelation>> typesRelationsCache;
    private static Dictionary`2<Type, List`1<SfcMetadataRelation>> typesKeysCache;
    private static Dictionary`2<RuntimeTypeHandle, List`1<SfcMetadataRelation>> typesPropertiesCache;
    private static Dictionary`2<Type, List`1<Type>> typesReferencesCache;
    private static Dictionary`2<TypeHandlePropertyNameKey, PropertyInfo> typePropertyInfosCache;
    private static Dictionary`2<SfcMetadataRelation, List`1<string>> relationViewNamesCache;
    private static bool internalGraphBuilt;
    private Type m_type;
    private AttributeCollection m_typeAttributes;
    private static int maximumDictionaryCount;
    public Type Type { get; }
    public string ElementTypeName { get; }
    public bool IsBrowsable { get; }
    public AttributeCollection TypeAttributes { get; }
    public List`1<SfcMetadataRelation> Relations { get; }
    internal ReadOnlyCollection`1<SfcMetadataRelation> ReadOnlyCollectionRelations { get; }
    internal List`1<SfcMetadataRelation> InternalStorageSupported { get; }
    internal int InternalStorageSupportedCount { get; }
    public List`1<Type> ReferredBy { get; }
    public List`1<SfcMetadataRelation> Keys { get; }
    internal ReadOnlyCollection`1<SfcMetadataRelation> ReadOnlyKeys { get; }
    public List`1<SfcMetadataRelation> Objects { get; }
    public List`1<SfcMetadataRelation> Properties { get; }
    internal ReadOnlyCollection`1<SfcMetadataRelation> ReadOnlyCollectionProperties { get; }
    public SfcMetadataDiscovery(Type type);
    private static SfcMetadataDiscovery();
    public Type get_Type();
    public string get_ElementTypeName();
    public bool get_IsBrowsable();
    public AttributeCollection get_TypeAttributes();
    public virtual List`1<SfcMetadataRelation> get_Relations();
    internal ReadOnlyCollection`1<SfcMetadataRelation> get_ReadOnlyCollectionRelations();
    internal List`1<SfcMetadataRelation> get_InternalStorageSupported();
    internal int get_InternalStorageSupportedCount();
    public virtual List`1<Type> get_ReferredBy();
    internal static List`1<SfcMetadataRelation> GetTypeRelations(Type sfcType);
    internal static List`1<SfcMetadataRelation> GetTypeKeys(Type sfcType);
    private static void InternalBuildRelationsGraph(Type type);
    private static void InternalBuildRelationsGraphRecursive(SfcMetadataDiscovery metadataType);
    private static Type GetParentType(Type childType);
    public static List`1<Type> GetParentsFromType(Type childType);
    public static List`1<string> GetUrnSkeletonsFromType(Type inputType);
    private static string GetUrnSuffixForType(Type type);
    private static void GetUrnSkeletonsFromTypeRec(Type t, string urnFragment, List`1<string> urns);
    public static Type GetRootFromType(Type inputType);
    private static List`1<SfcMetadataRelation> InternalLoadTypeRelationsInformationThroughReflection(Type sfcType);
    private static void ConflictReporting(Object[] attributes, string typeName, string propertyName);
    private static void AddToPropertyInfoCache(RuntimeTypeHandle handle, string propertyName, PropertyInfo property);
    internal static bool TryGetCachedPropertyInfo(RuntimeTypeHandle typeHandle, string propertyName, PropertyInfo& pInfo);
    private static List`1<SfcMetadataRelation> InternalLoadTypeKeysInformationThroughReflection(Type sfcType);
    private static object ConvertDefaultValue(string defaultValueAsString, Type propertyType);
    public virtual List`1<SfcMetadataRelation> get_Keys();
    internal ReadOnlyCollection`1<SfcMetadataRelation> get_ReadOnlyKeys();
    public virtual List`1<SfcMetadataRelation> get_Objects();
    public virtual List`1<SfcMetadataRelation> get_Properties();
    internal ReadOnlyCollection`1<SfcMetadataRelation> get_ReadOnlyCollectionProperties();
    internal static void CleanupCaches();
    public virtual SfcMetadataRelation FindProperty(string propertyName);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation : SfcMetadataDiscovery {
    private string m_propertyName;
    private SfcCardinality m_cardinality;
    private SfcRelationship m_relationship;
    private SfcPropertyFlags m_propertyFlags;
    private Type m_containerType;
    private object m_defaultValue;
    private AttributeCollection m_attributes;
    public string PropertyName { get; }
    public SfcCardinality Cardinality { get; }
    public SfcRelationship Relationship { get; }
    public SfcPropertyFlags PropertyFlags { get; }
    public object PropertyDefaultValue { get; }
    public AttributeCollection RelationshipAttributes { get; }
    public Type ContainerType { get; }
    internal bool IsSfcProperty { get; }
    public bool IsBrowsable { get; }
    public bool SupportsDesignMode { get; }
    public SfcMetadataRelation(string propertyName, Type type, SfcCardinality cardinality, SfcRelationship relationship, Type containerType, SfcPropertyFlags flags, object defaultValue, AttributeCollection attributes);
    public SfcMetadataRelation(string propertyName, Type type, SfcCardinality cardinality, SfcRelationship relationship, Type containerType, SfcPropertyFlags flags, AttributeCollection attributes);
    public SfcMetadataRelation(string propertyName, Type type, SfcCardinality cardinality, SfcRelationship relationship, Type containerType, AttributeCollection attributes);
    public SfcMetadataRelation(string propertyName, Type type, SfcCardinality cardinality, SfcRelationship relationship, Type containerType);
    public SfcMetadataRelation(string propertyName, Type type, SfcCardinality cardinality, SfcRelationship relationship, AttributeCollection attributes);
    public SfcMetadataRelation(string propertyName, Type type, SfcCardinality cardinality, AttributeCollection attributes);
    public SfcMetadataRelation(string propertyName, Type type, SfcPropertyFlags flags, AttributeCollection attributes);
    public SfcMetadataRelation(string propertyName, Type type, SfcPropertyFlags flags);
    public SfcMetadataRelation(string propertyName, Type type);
    public string get_PropertyName();
    public SfcCardinality get_Cardinality();
    public SfcRelationship get_Relationship();
    public SfcPropertyFlags get_PropertyFlags();
    public object get_PropertyDefaultValue();
    public AttributeCollection get_RelationshipAttributes();
    public Type get_ContainerType();
    public object Resolve(object instance);
    public T Resolve(S instance);
    public IEnumerable ResolveCollection(object instance);
    public IEnumerable`1<T> ResolveCollection(S instance);
    internal bool get_IsSfcProperty();
    public bool get_IsBrowsable();
    public bool get_SupportsDesignMode();
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcNonSerializableAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectAttribute : SfcRelationshipAttribute {
    private SfcObjectFlags m_flags;
    public SfcObjectFlags Flags { get; public set; }
    public bool Design { get; public set; }
    public bool Deploy { get; public set; }
    public bool NaturalOrder { get; public set; }
    public SfcObjectAttribute(SfcObjectFlags flags);
    public SfcObjectAttribute(SfcObjectCardinality cardinality, SfcObjectFlags flags);
    public SfcObjectAttribute(SfcObjectCardinality cardinality);
    public SfcObjectAttribute(SfcObjectRelationship relationship, SfcObjectFlags flags);
    public SfcObjectAttribute(SfcObjectRelationship relationship);
    public SfcObjectAttribute(SfcObjectRelationship relationship, SfcObjectCardinality cardinality, SfcObjectFlags flags);
    public SfcObjectAttribute(SfcObjectRelationship relationship, SfcObjectCardinality cardinality);
    public SfcObjectAttribute(Type containsType, SfcObjectFlags flags);
    public SfcObjectAttribute(Type containsType);
    public SfcObjectAttribute(SfcContainerCardinality cardinality, Type containsType, SfcObjectFlags flags);
    public SfcObjectAttribute(SfcContainerCardinality cardinality, Type containsType);
    public SfcObjectAttribute(SfcContainerRelationship relationship, SfcContainerCardinality cardinality, Type containsType, SfcObjectFlags flags);
    public SfcObjectAttribute(SfcContainerRelationship relationship, SfcContainerCardinality cardinality, Type containsType);
    public SfcObjectFlags get_Flags();
    public void set_Flags(SfcObjectFlags value);
    public bool get_Design();
    public void set_Design(bool value);
    public bool get_Deploy();
    public void set_Deploy(bool value);
    public bool get_NaturalOrder();
    public void set_NaturalOrder(bool value);
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectCardinality : Enum {
    public int value__;
    public static SfcObjectCardinality One;
    public static SfcObjectCardinality ZeroToOne;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectFlags : Enum {
    public int value__;
    public static SfcObjectFlags None;
    public static SfcObjectFlags NaturalOrder;
    public static SfcObjectFlags Design;
    public static SfcObjectFlags Deploy;
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectNotFoundException : SfcException {
    public SfcObjectNotFoundException(string message);
    public SfcObjectNotFoundException(string message, Exception innerException);
    protected SfcObjectNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectRelationship : Enum {
    public int value__;
    public static SfcObjectRelationship Object;
    public static SfcObjectRelationship ParentObject;
    public static SfcObjectRelationship ChildObject;
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcParentAttribute : Attribute {
    private string m_parentName;
    public string Parent { get; }
    public SfcParentAttribute(string parentName);
    public string get_Parent();
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyAttribute : Attribute {
    private SfcPropertyFlags m_flags;
    private string m_defaultValue;
    public SfcPropertyFlags Flags { get; public set; }
    public bool Computed { get; public set; }
    public bool Data { get; public set; }
    public bool Encrypted { get; public set; }
    public bool Expensive { get; public set; }
    public bool Standalone { get; public set; }
    public bool SqlAzureDatabase { get; public set; }
    public bool ReadOnlyAfterCreation { get; public set; }
    public bool Required { get; public set; }
    public bool Design { get; public set; }
    public bool Deploy { get; public set; }
    public string DefaultValue { get; }
    public SfcPropertyAttribute(SfcPropertyFlags flags);
    public SfcPropertyAttribute(SfcPropertyFlags flags, string defaultValue);
    public SfcPropertyFlags get_Flags();
    public void set_Flags(SfcPropertyFlags value);
    public bool get_Computed();
    public void set_Computed(bool value);
    public bool get_Data();
    public void set_Data(bool value);
    public bool get_Encrypted();
    public void set_Encrypted(bool value);
    public bool get_Expensive();
    public void set_Expensive(bool value);
    public bool get_Standalone();
    public void set_Standalone(bool value);
    public bool get_SqlAzureDatabase();
    public void set_SqlAzureDatabase(bool value);
    public bool get_ReadOnlyAfterCreation();
    public void set_ReadOnlyAfterCreation(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_Design();
    public void set_Design(bool value);
    public bool get_Deploy();
    public void set_Deploy(bool value);
    public string get_DefaultValue();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags : Enum {
    public int value__;
    public static SfcPropertyFlags None;
    public static SfcPropertyFlags Required;
    public static SfcPropertyFlags Expensive;
    public static SfcPropertyFlags Computed;
    public static SfcPropertyFlags Encrypted;
    public static SfcPropertyFlags ReadOnlyAfterCreation;
    public static SfcPropertyFlags Data;
    public static SfcPropertyFlags Standalone;
    public static SfcPropertyFlags SqlAzureDatabase;
    public static SfcPropertyFlags Design;
    public static SfcPropertyFlags Deploy;
}
[AttributeUsageAttribute("128")]
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute : Attribute {
    internal static string SfcReferenceResolverFactoryMethodName;
    internal static string SfcReferenceCollectionResolverFactoryMethodName;
    private String[] m_args;
    private string m_pathExpression;
    private ISfcReferenceResolver m_sfcReferenceResolver;
    private Delegate m_resolver;
    private Delegate m_urnResolver;
    private String[] m_keys;
    private Type m_type;
    public string UrnTemplate { get; }
    public String[] Arguments { get; }
    public Delegate Resolver { get; }
    public ISfcReferenceResolver InstanceResolver { get; }
    public String[] Keys { get; public set; }
    public Type Type { get; public set; }
    public SfcReferenceAttribute(Type resolverType);
    public SfcReferenceAttribute(Type resolverType, String[] parameters);
    public SfcReferenceAttribute(Type referenceType, string urnTemplate, String[] parameters);
    public SfcReferenceAttribute(Type referenceType, Type resolverType, string methodName, String[] parameters);
    public SfcReferenceAttribute(Type referenceType, String[] keys, string urnTemplate, String[] parameters);
    public SfcReferenceAttribute(Type referenceType, String[] keys, Type resolverType, string methodName, String[] parameters);
    public string get_UrnTemplate();
    public String[] get_Arguments();
    public Delegate get_Resolver();
    public ISfcReferenceResolver get_InstanceResolver();
    public String[] get_Keys();
    public void set_Keys(String[] value);
    public Type get_Type();
    public void set_Type(Type value);
    public T Resolve(S instance);
    public object Resolve(object instance);
    private object ResolveDelegateOrPath(object instance);
    public Urn GetUrn(object instance);
}
[AttributeUsageAttribute("128")]
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute : Attribute {
    private ISfcReferenceCollectionResolver resolver;
    private String[] args;
    public ISfcReferenceCollectionResolver CollectionResolver { get; }
    public String[] Arguments { get; }
    public SfcReferenceCollectionAttribute(Type resolverType);
    public SfcReferenceCollectionAttribute(Type resolverType, String[] parameters);
    public ISfcReferenceCollectionResolver get_CollectionResolver();
    public String[] get_Arguments();
    public IEnumerable ResolveCollection(object instance);
    public IEnumerable`1<T> ResolveCollection(S instance);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionResolverFactoryDelegate : MulticastDelegate {
    public SfcReferenceCollectionResolverFactoryDelegate(object object, IntPtr method);
    public virtual ISfcReferenceCollectionResolver Invoke(String[] parameters);
    public virtual IAsyncResult BeginInvoke(String[] parameters, AsyncCallback callback, object object);
    public virtual ISfcReferenceCollectionResolver EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceResolverFactoryDelegate : MulticastDelegate {
    public SfcReferenceResolverFactoryDelegate(object object, IntPtr method);
    public virtual ISfcReferenceResolver Invoke(String[] parameters);
    public virtual IAsyncResult BeginInvoke(String[] parameters, AsyncCallback callback, object object);
    public virtual ISfcReferenceResolver EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("128")]
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceSelectorAttribute : Attribute {
    private String[] m_args;
    private string m_pathExpression;
    private string m_field;
    public string PathExpression { get; }
    public Object[] Arguments { get; }
    public string Field { get; }
    public SfcReferenceSelectorAttribute(string pathExpression, string field, String[] parameters);
    public string get_PathExpression();
    public Object[] get_Arguments();
    public string get_Field();
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship : Enum {
    public int value__;
    public static SfcRelationship None;
    public static SfcRelationship Object;
    public static SfcRelationship ObjectContainer;
    public static SfcRelationship ChildObject;
    public static SfcRelationship ChildContainer;
    public static SfcRelationship ParentObject;
    public static SfcRelationship Ignore;
}
[AttributeUsageAttribute("128")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute : Attribute {
    private SfcRelationship m_relationship;
    private SfcCardinality m_cardinality;
    private Type m_containsType;
    public SfcRelationship Relationship { get; internal set; }
    public SfcCardinality Cardinality { get; internal set; }
    public Type ContainsType { get; internal set; }
    protected SfcRelationshipAttribute(SfcRelationship relationship);
    protected SfcRelationshipAttribute(SfcRelationship relationship, SfcCardinality cardinality);
    protected SfcRelationshipAttribute(SfcRelationship relationship, SfcCardinality cardinality, Type containsType);
    public SfcRelationship get_Relationship();
    internal void set_Relationship(SfcRelationship value);
    public SfcCardinality get_Cardinality();
    internal void set_Cardinality(SfcCardinality value);
    public Type get_ContainsType();
    internal void set_ContainsType(Type value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSerializationAdapterAttribute : Attribute {
    private Type sfcSerializationAdapterType;
    public Type SfcSerializationAdapterType { get; }
    public SfcSerializationAdapterAttribute(Type adapterType);
    public Type get_SfcSerializationAdapterType();
}
[AttributeUsageAttribute("132")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSkuAttribute : Attribute {
    private String[] m_skus;
    private bool m_exclusive;
    public String[] SkuNames { get; }
    public bool Exclusive { get; }
    public SfcSkuAttribute(string skuName, bool exclusive);
    public SfcSkuAttribute(String[] skuNames, bool exclusive);
    public String[] get_SkuNames();
    public bool get_Exclusive();
}
[AttributeUsageAttribute("132")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcVersionAttribute : Attribute {
    private Version m_begin;
    private Version m_end;
    public Version BeginVersion { get; }
    public Version EndVersion { get; }
    public SfcVersionAttribute(int beginMajor, int beginMinor, int beginBuild, int beginRevision, int endMajor, int endMinor, int endBuild, int endRevision);
    public SfcVersionAttribute(int beginMajor, int beginMinor, int beginBuild, int beginRevision);
    public SfcVersionAttribute(int beginMajor, int endMajor);
    public SfcVersionAttribute(int beginMajor);
    public Version get_BeginVersion();
    public Version get_EndVersion();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1 : DomainRootKey {
    private string keyName;
    public string Name { get; }
    public Type InstanceType { get; }
    protected string UrnName { get; }
    public NamedDomainKey`1(ISfcDomain domain);
    public NamedDomainKey`1(ISfcDomain domain, string name);
    public NamedDomainKey`1(ISfcDomain domain, IDictionary`2<string, object> fields);
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual bool Equals(SfcKey other);
    public sealed virtual bool Equals(NamedDomainKey`1<T> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool Equals(object leftOperand, object rightOperand);
    public static bool op_Equality(NamedDomainKey`1<T> leftOperand, NamedDomainKey`1<T> rightOperand);
    public static bool op_Inequality(NamedDomainKey`1<T> leftOperand, NamedDomainKey`1<T> rightOperand);
    public sealed virtual Type get_InstanceType();
    protected virtual string get_UrnName();
    public virtual string GetUrnFragment();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1 : SfcKey {
    private string keyName;
    public string Name { get; }
    public Type InstanceType { get; }
    protected string UrnName { get; }
    public NamedKey`1(NamedKey`1<T> other);
    public NamedKey`1(string name);
    public NamedKey`1(IDictionary`2<string, object> fields);
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual bool Equals(SfcKey other);
    public sealed virtual bool Equals(NamedKey`1<T> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool Equals(object leftOperand, object rightOperand);
    public static bool op_Equality(NamedKey`1<T> leftOperand, NamedKey`1<T> rightOperand);
    public static bool op_Inequality(NamedKey`1<T> leftOperand, NamedKey`1<T> rightOperand);
    public sealed virtual Type get_InstanceType();
    protected virtual string get_UrnName();
    public virtual string GetUrnFragment();
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Sdk.Sfc.NetCoreExtension : object {
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type, Type c);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static Type GetInterface(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type);
    [ExtensionAttribute]
public static string Copy(string value);
    [ExtensionAttribute]
public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static Delegate CreateDelegate(MethodInfo methodInfo, Type type);
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.NodeGraph : KeyedCollection`2<SfcKeyChain, DepNode> {
    protected virtual SfcKeyChain GetKeyForItem(DepNode node);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.NonSfcObjectIterator : object {
    private IAlienRoot _nonSfcRoot;
    private List`1<string> _nonSfcQueryResults;
    private int _curRow;
    private object System.Collections.IEnumerator.Current { get; }
    public NonSfcObjectIterator(IAlienRoot nonSfcRoot, SfcObjectQueryMode activeQueriesMode, SfcQueryExpression query, String[] fields, OrderBy[] orderByFields);
    private object CreateNonSfcObjectFromString(string str);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.ObjectCache : object {
    public static UInt32 MaxUsagePoints;
    public static UInt32 PingsForAging;
    private static UInt32 MaxCacheSize;
    internal static UInt32 SameObjectNumber;
    private static UInt32 m_CurrentPings;
    private static SortedList m_cache;
    private static object lock_obj;
    private static Dictionary`2<string, Assembly> assemblyCache;
    private static ObjectCache();
    public static CacheElement GetElement(Urn urn, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, object ci);
    public static void PutElement(CacheElement elem);
    public static EnumObject LoadFirstElementVersionless(Urn urn, object ci);
    public static ArrayList GetAllElements(Urn urn, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, object ci);
    public static void PutAllElements(ArrayList list);
    private static UInt32 GetNumberFromVersion(ServerVersion ver);
    private static CacheElement GetElement(ObjectLoadInfo oli, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    private static CacheElement FindInCacheAndRemove(ObjectLoadInfo oli, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    private static EnumObject LoadElement(ObjectLoadInfo oli);
    private static CacheElement LoadElement(ObjectLoadInfo oli, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    private static bool InsertInCache(CacheElement elem);
    private static void TryInsert(CacheElement elem, bool bWithAging);
    private static Assembly LoadAssembly(string fullName);
    private static object CreateObjectInstance(Assembly assembly, string objectType);
    internal static object CreateObjectInstance(string assemblyName, string objectType);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.ObjectContainer : object {
    private object sfcInstance;
    private Dictionary`2<string, Dictionary`2<string, ObjectContainer>> collections;
    private Dictionary`2<string, ObjectContainer> children;
    private string uri;
    public Dictionary`2<string, Dictionary`2<string, ObjectContainer>> Collections { get; }
    public Dictionary`2<string, ObjectContainer> Children { get; }
    public string Uri { get; public set; }
    public object SfcInstance { get; }
    public ObjectContainer(object sfcInstance, string uri);
    public Dictionary`2<string, Dictionary`2<string, ObjectContainer>> get_Collections();
    public Dictionary`2<string, ObjectContainer> get_Children();
    public string get_Uri();
    public void set_Uri(string value);
    public object get_SfcInstance();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.ObjectInfo : object {
    private String[] m_children;
    private ObjectProperty[] m_properties;
    private ObjectProperty[] m_urnproperties;
    private ResultType[] m_resultTypes;
    [XmlElementAttribute]
public String[] Children { get; public set; }
    [XmlElementAttribute]
public ObjectProperty[] Properties { get; public set; }
    [XmlElementAttribute]
public ResultType[] ResultTypes { get; public set; }
    public ObjectProperty[] UrnProperties { get; public set; }
    public String[] get_Children();
    public void set_Children(String[] value);
    public ObjectProperty[] get_Properties();
    public void set_Properties(ObjectProperty[] value);
    public ResultType[] get_ResultTypes();
    public void set_ResultTypes(ResultType[] value);
    public ObjectProperty[] get_UrnProperties();
    public void set_UrnProperties(ObjectProperty[] value);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.ObjectLoadInfo : object {
    public string Name;
    public string Assembly;
    public string InitData;
    public string ImplementClass;
    public UInt32 UniqueKey;
    public Assembly AssemblyReference;
    public bool typeAllowsRecursion;
    public SortedList Children;
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.ObjectLoadInfoManager : object {
    private static SortedList m_Hierarchy;
    private static UInt32 m_UniqueKey;
    private static object lock_obj;
    private static ObjectLoadInfoManager();
    public static ObjectLoadInfo GetObjectLoadInfo(Urn urn, object ci);
    public static ObjectLoadInfo GetFirstObjectLoadInfo(Urn urn, object ci);
    public static ArrayList GetAllObjectsLoadInfo(Urn urn, object ci);
    private static StringCollection GetCanonicUrn(Urn urn, object ci);
    private static ObjectLoadInfo GetHierarchyRoot(string s);
    private static ObjectLoadInfo GetNextLevel(ObjectLoadInfo curent_oli, string s);
    private static ObjectLoadInfo GetObjectLoadInfo(StringCollection types);
    private static ArrayList GetAllObjectsLoadInfo(StringCollection types);
    private static void LoadHierarchy();
    private static bool LoadChildren(XmlTextReader reader, int nLevelDepth, SortedList list);
    private static ObjectLoadInfo Add(XmlTextReader reader, SortedList list);
    public static void AddExtension(Urn urn, string name, Assembly assembly, string implementsType);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty : object {
    private string m_name;
    private string m_type;
    private bool m_expensive;
    private bool m_readOnly;
    private bool m_extendedType;
    private bool m_readOnlyAfterCreation;
    private short m_keyIndex;
    private PropertyMode m_propMode;
    private ObjectPropertyUsages m_usage;
    private string m_defaultValue;
    private string m_referenceTemplate;
    private string m_referenceType;
    private string m_referenceKeys;
    private string m_referenceTemplateParameters;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Type { get; public set; }
    [XmlAttributeAttribute]
public bool ReadOnlyAfterCreation { get; public set; }
    [XmlAttributeAttribute]
public short KeyIndex { get; public set; }
    [XmlAttributeAttribute]
public PropertyMode PropertyMode { get; public set; }
    [XmlAttributeAttribute]
public bool Expensive { get; public set; }
    [XmlAttributeAttribute]
public bool ReadOnly { get; public set; }
    [XmlAttributeAttribute]
public bool ExtendedType { get; public set; }
    [XmlAttributeAttribute]
public ObjectPropertyUsages Usage { get; public set; }
    [XmlAttributeAttribute]
public string DefaultValue { get; public set; }
    [XmlAttributeAttribute]
public string ReferenceTemplate { get; public set; }
    [XmlAttributeAttribute]
public string ReferenceType { get; public set; }
    [XmlAttributeAttribute]
public string ReferenceKeys { get; public set; }
    [XmlAttributeAttribute]
public string ReferenceTemplateParameters { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public bool get_ReadOnlyAfterCreation();
    public void set_ReadOnlyAfterCreation(bool value);
    public short get_KeyIndex();
    public void set_KeyIndex(short value);
    public PropertyMode get_PropertyMode();
    public void set_PropertyMode(PropertyMode value);
    public bool get_Expensive();
    public void set_Expensive(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_ExtendedType();
    public void set_ExtendedType(bool value);
    public ObjectPropertyUsages get_Usage();
    public void set_Usage(ObjectPropertyUsages value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public string get_ReferenceTemplate();
    public void set_ReferenceTemplate(string value);
    public string get_ReferenceType();
    public void set_ReferenceType(string value);
    public string get_ReferenceKeys();
    public void set_ReferenceKeys(string value);
    public string get_ReferenceTemplateParameters();
    public void set_ReferenceTemplateParameters(string value);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages : Enum {
    public int value__;
    public static ObjectPropertyUsages None;
    public static ObjectPropertyUsages Filter;
    public static ObjectPropertyUsages Request;
    public static ObjectPropertyUsages OrderBy;
    public static ObjectPropertyUsages Reserved1;
    public static ObjectPropertyUsages All;
}
internal enum Microsoft.SqlServer.Management.Sdk.Sfc.OnCollision : Enum {
    public int value__;
    public static OnCollision Fail;
    public static OnCollision Overwrite;
    public static OnCollision Discard;
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Operand : AstNode {
    private object _var;
    private string _prefix;
    private RType _type;
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal object OperandValue { get; }
    internal Operand(string var);
    internal Operand(double var);
    internal Operand(bool var);
    internal Operand(string var, string prefix);
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
    internal object get_OperandValue();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Operator : AstNode {
    private String[] str;
    private Op _operatorType;
    private AstNode _opnd1;
    private AstNode _opnd2;
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal Op OperatorType { get; }
    internal AstNode Operand1 { get; }
    internal AstNode Operand2 { get; }
    internal double DefaultPriority { get; }
    internal Operator(Op op, AstNode opnd1, AstNode opnd2);
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
    internal Op get_OperatorType();
    internal AstNode get_Operand1();
    internal AstNode get_Operand2();
    internal virtual double get_DefaultPriority();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy : object {
    private string m_field;
    private Direction m_direction;
    [XmlAttributeAttribute]
public string Field { get; public set; }
    [XmlAttributeAttribute]
public Direction Dir { get; public set; }
    public OrderBy(string field, Direction dir);
    public string get_Field();
    public void set_Field(string value);
    public Direction get_Dir();
    public void set_Dir(Direction value);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.ParentLink : object {
    private LinkMultiple m_LinkMultiple;
    public ArrayList LinkFields { get; }
    public LinkMultiple LinkMultiple { get; }
    public ParentLink(XmlReadParentLink xrpl);
    internal void Init(XmlReadSimpleParentLink xrspl);
    public ArrayList get_LinkFields();
    public LinkMultiple get_LinkMultiple();
}
[AttributeUsageAttribute("4")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetAttribute : Attribute {
    private bool isReadOnly;
    public bool IsReadOnly { get; }
    public PhysicalFacetAttribute(PhysicalFacetOptions options);
    public bool get_IsReadOnly();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetOptions : Enum {
    public int value__;
    public static PhysicalFacetOptions None;
    public static PhysicalFacetOptions ReadOnly;
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest : object {
    private String[] m_fields;
    private RequestFieldsTypes m_fieldsType;
    private PropertyAlias m_PropertyAlias;
    private OrderBy[] m_orderBy;
    [XmlArrayItemAttribute]
[XmlArrayAttribute]
public String[] Fields { get; public set; }
    [XmlAttributeAttribute]
public RequestFieldsTypes RequestFieldsTypes { get; public set; }
    public OrderBy[] OrderByList { get; public set; }
    public PropertyAlias PropertyAlias { get; public set; }
    public PropertiesRequest(String[] fields);
    public PropertiesRequest(String[] fields, OrderBy[] orderBy);
    public String[] get_Fields();
    public void set_Fields(String[] value);
    public RequestFieldsTypes get_RequestFieldsTypes();
    public void set_RequestFieldsTypes(RequestFieldsTypes value);
    public OrderBy[] get_OrderByList();
    public void set_OrderByList(OrderBy[] value);
    public PropertyAlias get_PropertyAlias();
    public void set_PropertyAlias(PropertyAlias value);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias : object {
    private AliasKind m_Kind;
    private string m_Prefix;
    private String[] m_Aliases;
    public AliasKind Kind { get; public set; }
    public string Prefix { get; public set; }
    public String[] Aliases { get; public set; }
    public PropertyAlias(string prefix);
    public PropertyAlias(String[] aliases);
    public AliasKind get_Kind();
    public void set_Kind(AliasKind value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public String[] get_Aliases();
    public void set_Aliases(String[] value);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.PropertyDataDispatcher : object {
    private SfcInstance m_owner;
    internal PropertyDataDispatcher(SfcInstance owner);
    internal SfcInstance GetParent();
    internal object GetPropertyValue(string propertyName);
    internal void SetPropertyValue(string propertyName, object value);
    internal void InitializeState();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Sdk.Sfc.PropertyMode : Enum {
    public int value__;
    public static PropertyMode None;
    public static PropertyMode Design;
    public static PropertyMode Deploy;
    public static PropertyMode All;
}
[AttributeUsageAttribute("32767")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.PropertyOrderAttribute : Attribute {
    private int m_iOrder;
    public int Order { get; }
    public PropertyOrderAttribute(int iOrder);
    public int get_Order();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.ProviderUrnPrefixFactory : object {
    private static string SQL_PROVIDER_URN_PREFIX;
    internal static string GetProviderUrnPrefix(string rootLevel, object ci);
    private static bool IsSqlConnection(object ci);
    private static bool HasProviders(string rootLevel);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.QueryNotSupportedEnumeratorException : EnumeratorException {
    public QueryNotSupportedEnumeratorException(string message);
    public QueryNotSupportedEnumeratorException(string message, Exception innerException);
    private QueryNotSupportedEnumeratorException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2 : ValueType {
    private IDictionary`2<TKey, TValue> dictionary;
    public int Count { get; }
    public TValue Item { get; }
    public IEnumerable`1<TKey> Keys { get; }
    public IEnumerable`1<TValue> Values { get; }
    public ReadOnlyDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public sealed virtual int get_Count();
    public sealed virtual TValue get_Item(TKey key);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2/<get_Keys>d__7")]
public sealed virtual IEnumerable`1<TKey> get_Keys();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2/<get_Values>d__9")]
public sealed virtual IEnumerable`1<TValue> get_Values();
    public sealed virtual bool Contains(TValue item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual void CopyTo(TValue[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static ReadOnlyDictionary`2<TKey, TValue> op_Implicit(Dictionary`2<TKey, TValue> dictionary);
    public static ReadOnlyDictionary`2<TKey, TValue> op_Implicit(SortedList`2<TKey, TValue> sortedList);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1 : ValueType {
    private IList`1<T> list;
    public int Count { get; }
    public T Item { get; }
    public ReadOnlyList`1(IList`1<T> list);
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public int IndexOf(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static ReadOnlyList`1<T> op_Implicit(T[] array);
    public static ReadOnlyList`1<T> op_Implicit(List`1<T> list);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyPropertyChangedEventArgs : EventArgs {
    private string propertyName;
    public string PropertyName { get; public set; }
    public ReadOnlyPropertyChangedEventArgs(string propertyName);
    public string get_PropertyName();
    public void set_PropertyName(string value);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.Request : PropertiesRequest {
    private Urn m_urn;
    private ResultType m_resultType;
    private PropertiesRequest[] m_ParentPropertiesRequests;
    [XmlElementAttribute]
public Urn Urn { get; public set; }
    public PropertiesRequest[] ParentPropertiesRequests { get; public set; }
    [XmlAttributeAttribute]
public ResultType ResultType { get; public set; }
    public Request(Urn urn);
    public Request(Urn urn, String[] fields);
    public Request(Urn urn, String[] fields, OrderBy[] orderBy);
    public Urn get_Urn();
    public void set_Urn(Urn value);
    public PropertiesRequest[] get_ParentPropertiesRequests();
    public void set_ParentPropertiesRequests(PropertiesRequest[] value);
    public ResultType get_ResultType();
    public void set_ResultType(ResultType value);
    internal Request ShallowClone();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Sdk.Sfc.RequestFieldsTypes : Enum {
    public int value__;
    public static RequestFieldsTypes Request;
    public static RequestFieldsTypes IncludeExpensiveInResult;
    public static RequestFieldsTypes Reject;
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo : object {
    private Urn m_urn;
    private Flags m_flags;
    [XmlElementAttribute]
public Urn Urn { get; public set; }
    [XmlAttributeAttribute]
public Flags InfoType { get; public set; }
    public RequestObjectInfo(Urn urn, Flags infoType);
    public Urn get_Urn();
    public void set_Urn(Urn value);
    public Flags get_InfoType();
    public void set_InfoType(Flags value);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.RequestParentSelect : object {
    private StringCollection m_Fields;
    public StringCollection Fields { get; }
    public RequestParentSelect(XmlRequestParentSelect xrrps);
    public StringCollection get_Fields();
}
[ComVisibleAttribute("False")]
public enum Microsoft.SqlServer.Management.Sdk.Sfc.ResultType : Enum {
    public int value__;
    public static ResultType Default;
    public static ResultType DataSet;
    public static ResultType DataTable;
    public static ResultType IDataReader;
    public static ResultType XmlDocument;
    public static ResultType Reserved1;
    public static ResultType Reserved2;
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException : EnumeratorException {
    private string m_type;
    public string ResultType { get; }
    public ResultTypeNotSupportedEnumeratorException(string msg);
    public ResultTypeNotSupportedEnumeratorException(string msg, Exception e);
    public ResultTypeNotSupportedEnumeratorException(ResultType type);
    public ResultTypeNotSupportedEnumeratorException(ResultType type, Exception innerException);
    private ResultTypeNotSupportedEnumeratorException(SerializationInfo info, StreamingContext context);
    public string get_ResultType();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.Root : AstNode {
    internal QueryType TypeOfAst { get; }
    internal RType ReturnType { get; }
    internal virtual QueryType get_TypeOfAst();
    internal virtual RType get_ReturnType();
}
[AttributeUsageAttribute("1028")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.RootFacetAttribute : Attribute {
    private Type rootType;
    public Type RootType { get; }
    public RootFacetAttribute(Type rootType);
    public Type get_RootType();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1 : SfcKey {
    private string keySchema;
    private string keyName;
    public string Schema { get; }
    public string Name { get; }
    public Type InstanceType { get; }
    protected string UrnName { get; }
    public SchemaNamedKey`1(string name);
    public SchemaNamedKey`1(string schema, string name);
    public SchemaNamedKey`1(SchemaNamedKey`1<T> other);
    public SchemaNamedKey`1(IDictionary`2<string, object> fields);
    public string get_Schema();
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual bool Equals(SfcKey other);
    public sealed virtual bool Equals(SchemaNamedKey`1<T> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool Equals(object leftOperand, object rightOperand);
    public static bool op_Equality(SchemaNamedKey`1<T> leftOperand, SchemaNamedKey`1<T> rightOperand);
    public static bool op_Inequality(SchemaNamedKey`1<T> leftOperand, SchemaNamedKey`1<T> rightOperand);
    public sealed virtual Type get_InstanceType();
    protected virtual string get_UrnName();
    public virtual string GetUrnFragment();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectMovedEventArgs : SfcEventArgs {
    private Urn oldUrn;
    private SfcInstance oldParent;
    public Urn OldUrn { get; }
    public SfcInstance OldParent { get; }
    public SfcAfterObjectMovedEventArgs(Urn urn, SfcInstance instance, Urn oldUrn, SfcInstance oldParent);
    public Urn get_OldUrn();
    public SfcInstance get_OldParent();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectRenamedEventArgs : SfcEventArgs {
    private Urn oldUrn;
    private SfcKey oldKey;
    public Urn OldUrn { get; }
    public SfcKey OldKey { get; }
    public SfcAfterObjectRenamedEventArgs(Urn urn, SfcInstance instance, Urn oldUrn, SfcKey oldKey);
    public Urn get_OldUrn();
    public SfcKey get_OldKey();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication : object {
    public static SfcApplicationEvents Events;
    internal static string ModuleName;
    private static SfcApplication();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplicationEvents : object {
    [CompilerGeneratedAttribute]
private SfcObjectCreatedEventHandler ObjectCreated;
    [CompilerGeneratedAttribute]
private SfcObjectAlteredEventHandler ObjectAltered;
    [CompilerGeneratedAttribute]
private SfcObjectDroppedEventHandler ObjectDropped;
    [CompilerGeneratedAttribute]
private SfcBeforeObjectRenamedEventHandler BeforeObjectRenamed;
    [CompilerGeneratedAttribute]
private SfcAfterObjectRenamedEventHandler AfterObjectRenamed;
    [CompilerGeneratedAttribute]
private SfcBeforeObjectMovedEventHandler BeforeObjectMoved;
    [CompilerGeneratedAttribute]
private SfcAfterObjectMovedEventHandler AfterObjectMoved;
    [CompilerGeneratedAttribute]
public void add_ObjectCreated(SfcObjectCreatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectCreated(SfcObjectCreatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectAltered(SfcObjectAlteredEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectAltered(SfcObjectAlteredEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ObjectDropped(SfcObjectDroppedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ObjectDropped(SfcObjectDroppedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeObjectRenamed(SfcBeforeObjectRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeObjectRenamed(SfcBeforeObjectRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterObjectRenamed(SfcAfterObjectRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterObjectRenamed(SfcAfterObjectRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeObjectMoved(SfcBeforeObjectMovedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeObjectMoved(SfcBeforeObjectMovedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterObjectMoved(SfcAfterObjectMovedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterObjectMoved(SfcAfterObjectMovedEventHandler value);
    public void OnObjectCreated(SfcInstance obj, SfcObjectCreatedEventArgs e);
    public void OnObjectAltered(SfcInstance obj, SfcObjectAlteredEventArgs e);
    public void OnObjectDropped(SfcInstance obj, SfcObjectDroppedEventArgs e);
    public void OnBeforeObjectRenamed(SfcInstance obj, SfcBeforeObjectRenamedEventArgs e);
    public void OnAfterObjectRenamed(SfcInstance obj, SfcAfterObjectRenamedEventArgs e);
    public void OnBeforeObjectMoved(SfcInstance obj, SfcBeforeObjectMovedEventArgs e);
    public void OnAfterObjectMoved(SfcInstance obj, SfcAfterObjectMovedEventArgs e);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectMovedEventArgs : SfcEventArgs {
    private Urn newUrn;
    private SfcInstance newParent;
    public Urn NewUrn { get; }
    public SfcInstance NewParent { get; }
    public SfcBeforeObjectMovedEventArgs(Urn urn, SfcInstance instance, Urn newUrn, SfcInstance newParent);
    public Urn get_NewUrn();
    public SfcInstance get_NewParent();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectRenamedEventArgs : SfcEventArgs {
    private Urn newUrn;
    private SfcKey newKey;
    public Urn NewUrn { get; }
    public SfcKey NewKey { get; }
    public SfcBeforeObjectRenamedEventArgs(Urn urn, SfcInstance instance, Urn newUrn, SfcKey newKey);
    public Urn get_NewUrn();
    public SfcKey get_NewKey();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcCache : object {
    private Dictionary`2<string, object> instances;
    private Dictionary`2<string, bool> deserializedStore;
    private Dictionary`2<string, bool> typeUrnFragmentTable;
    internal Dictionary`2<string, object> Instances { get; }
    internal Dictionary`2<string, object> get_Instances();
    public void Add(string uri, object obj, OnCollision onCollision);
    private void DiscoverKeysOfTypes(object instance);
    private string GetContainerType(Type containedType, string relationshipName);
    private static string GetSingletonPropertyNameFromType(Type containingType, Type singletonType);
    internal static List`1<string> GetSmlFragments(string smlUri, bool smlUnEscape);
    private static string GetSmlSegment(string smlUri, int startPos, int sepPos, bool smlUnEscape);
    private void ParseUri(string subUri, List`1& fragments, List`1& typeBits);
    private bool IsParent(string possibleParent, string possibleChild);
    private void AddToContainer(ObjectContainer oldContainer, ObjectContainer newContainer);
    private void AddToContainer(string uri, ObjectContainer rootContainer, List`1<ObjectContainer> virtualRootContainers);
    private void CreateObjectModel(ObjectContainer rootContainer);
    internal void CheckAndAddNonRootInstances(string uri, ObjectContainer rootContainer, List`1<ObjectContainer> virtualRootContainers);
    internal void CreateHierarchy(object root, string rootUri, List`1<object> unParentedReferences);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcChildren : object {
    private IEnumerable listReference;
    private SimpleNodeAdapter adapter;
    public IEnumerable ListReference { get; }
    public SfcChildren(object reference, string name, SimpleNodeAdapter adapter);
    public sealed virtual IEnumerable get_ListReference();
    public sealed virtual IEnumerator`1<ISfcSimpleNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected IEnumerator`1<ISfcSimpleNode> GetChildren();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcChildrenEnumerator : object {
    private IEnumerator children;
    private SimpleNodeAdapter adapter;
    private ISfcSimpleNode current;
    public ISfcSimpleNode Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public SfcChildrenEnumerator(IEnumerator children, SimpleNodeAdapter adapter);
    public sealed virtual bool MoveNext();
    public sealed virtual ISfcSimpleNode get_Current();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollatedDictionaryCollection`3 : SfcCollection`3<T, K, ParentT> {
    private SortedDictionary`2<K, T> m_collection;
    private SortedDictionary`2<K, T> m_shadow;
    private bool m_dirty;
    private CultureInfo m_cultureInfo;
    private bool m_ignoreCase;
    private bool m_ascending;
    private IComparer`1<string> comparer;
    protected CultureInfo CultureInfo { get; protected set; }
    protected bool IgnoreCase { get; protected set; }
    public bool Ascending { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected SfcCollatedDictionaryCollection`3(ParentT parent);
    protected SfcCollatedDictionaryCollection`3(ParentT parent, IComparer`1<string> customComparer);
    protected CultureInfo get_CultureInfo();
    protected void set_CultureInfo(CultureInfo value);
    protected bool get_IgnoreCase();
    protected void set_IgnoreCase(bool value);
    protected void ResetInnerCollection();
    public bool get_Ascending();
    public void set_Ascending(bool value);
    protected virtual void AddImpl(T obj);
    public virtual void Clear();
    public virtual bool Contains(T obj);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T obj);
    public virtual IEnumerator`1<T> GetEnumerator();
    public virtual bool Contains(K key);
    public bool TryGetValue(K key, T& obj);
    protected virtual bool RemoveImpl(T obj);
    protected virtual T GetObjectByKey(K key);
    protected virtual T GetExistingObjectByKey(K key);
    protected virtual void InitInnerCollection();
    protected virtual void PrepareMerge();
    protected virtual bool AddShadow(T obj);
    protected virtual void FinishMerge();
    private sealed virtual override int System.Collections.Generic.IComparer<K>.Compare(K key1, K key2);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollection`3 : object {
    private ParentT m_parent;
    private bool m_initialized;
    private bool m_initializing;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; }
    protected internal ParentT Parent { get; protected internal set; }
    protected internal bool Initialized { get; protected internal set; }
    private SfcInstance Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.Parent { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.Initialized { get; private set; }
    private int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.Count { get; }
    public bool IsSynchronized { get; public set; }
    public object SyncRoot { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    protected SfcCollection`3(ParentT parent);
    public virtual void Add(T obj);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(T obj);
    public abstract virtual void CopyTo(T[] array, int arrayIndex);
    public abstract virtual int get_Count();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool Remove(T obj);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public abstract virtual bool Contains(K key);
    public T get_Item(K key);
    public void Refresh();
    public void Refresh(bool refreshChildObjects);
    protected virtual string GetCollectionElementNameImpl();
    protected abstract virtual SfcObjectFactory GetElementFactoryImpl();
    protected abstract virtual void AddImpl(T obj);
    protected abstract virtual bool RemoveImpl(T obj);
    protected abstract virtual T GetObjectByKey(K key);
    protected abstract virtual T GetExistingObjectByKey(K key);
    protected abstract virtual void InitInnerCollection();
    protected abstract virtual bool AddShadow(T obj);
    protected abstract virtual void PrepareMerge();
    protected abstract virtual void FinishMerge();
    protected void EnsureCollectionInitialized();
    internal void AddExisting(T obj);
    private void InitializeChildCollection();
    private void InitializeChildCollection(bool refresh);
    protected T CreateAndInitializeChildObject(K key);
    protected internal bool RemoveInternal(T obj);
    internal void PreprocessObjectForAdd(T obj);
    protected internal void Rename(T obj, K newKey);
    internal SfcObjectFactory GetElementFactory();
    protected internal ParentT get_Parent();
    protected internal void set_Parent(ParentT value);
    protected internal bool get_Initialized();
    protected internal void set_Initialized(bool value);
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.GetCollectionElementNameImpl();
    private sealed virtual override SfcObjectFactory Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.GetElementFactory();
    private sealed virtual override SfcInstance Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.get_Parent();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.EnsureInitialized();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.get_Initialized();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.set_Initialized(bool value);
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.get_Count();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.Add(SfcInstance sfcInstance);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.Remove(SfcInstance sfcInstance);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.RemoveElement(SfcInstance sfcInstance);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.Rename(SfcInstance sfcInstance, SfcKey newKey);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.GetExisting(SfcKey key, SfcInstance& sfcInstance);
    private sealed virtual override SfcInstance Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.GetObjectByKey(SfcKey key);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.PrepareMerge();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.AddShadow(SfcInstance sfcInstance);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection.FinishMerge();
    public sealed virtual void CopyTo(Array array, int index);
    public void set_IsSynchronized(bool value);
    public sealed virtual bool get_IsSynchronized();
    public void set_SyncRoot(object value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollectionInfo : object {
    private string m_displayName;
    private object m_collection;
    public string DisplayName { get; }
    public object Collection { get; }
    public SfcCollectionInfo(string displayName, object collection);
    public string get_DisplayName();
    public object get_Collection();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcConnection : object {
    public bool IsOpen { get; }
    public string ServerInstance { get; public set; }
    public Version ServerVersion { get; public set; }
    public ServerType ConnectionType { get; }
    public int ConnectTimeout { get; public set; }
    public int StatementTimeout { get; public set; }
    public bool IsForceDisconnected { get; }
    public abstract virtual int GetHashCode();
    public abstract virtual bool Equals(SfcConnection connection);
    public abstract virtual bool Connect();
    public abstract virtual bool Disconnect();
    public abstract virtual ISfcConnection Copy();
    public abstract virtual bool get_IsOpen();
    public abstract virtual string get_ServerInstance();
    public abstract virtual void set_ServerInstance(string value);
    public abstract virtual Version get_ServerVersion();
    public abstract virtual void set_ServerVersion(Version value);
    public abstract virtual ServerType get_ConnectionType();
    public abstract virtual int get_ConnectTimeout();
    public abstract virtual void set_ConnectTimeout(int value);
    public abstract virtual int get_StatementTimeout();
    public abstract virtual void set_StatementTimeout(int value);
    public virtual void ForceDisconnected();
    public virtual bool get_IsForceDisconnected();
    public virtual object ToEnumeratorObject();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcConnectionContext : object {
    private ISfcHasConnection domain;
    private SfcConnectionContextMode mode;
    public SfcConnectionContextMode Mode { get; public set; }
    public SfcConnectionContext(ISfcHasConnection domain);
    public SfcConnectionContextMode get_Mode();
    public void set_Mode(SfcConnectionContextMode value);
    public void FlushActionLog();
    private void DiscardActionLog();
    private void ForceDisconnected();
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcConnectionContextMode : Enum {
    public int value__;
    public static SfcConnectionContextMode Offline;
    public static SfcConnectionContextMode Online;
    public static SfcConnectionContextMode TransactedBatch;
    public static SfcConnectionContextMode NonTransactedBatch;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcContainerMap : object {
    private object instance;
    private SimpleNodeAdapter adapter;
    public ISfcSimpleList Item { get; }
    public SfcContainerMap(object reference, SimpleNodeAdapter adapter);
    public sealed virtual ISfcSimpleList get_Item(string key);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcCRUDOperationFailedException : SfcException {
    public SfcCRUDOperationFailedException(string message);
    public SfcCRUDOperationFailedException(string message, Exception innerException);
    private SfcCRUDOperationFailedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDefaultStorage : object {
    private Object[] propertiesStorage;
    private SfcInstance sfcObject;
    internal SfcDefaultStorage(SfcInstance sfcObject);
    public sealed virtual object GetPropertyValueImpl(string propertyName);
    public sealed virtual void SetPropertyValueImpl(string propertyName, object value);
    private void BuildPropertiesStorage();
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction : Enum {
    public int value__;
    public static SfcDependencyAction Unknown;
    public static SfcDependencyAction Serialize;
    public static SfcDependencyAction Create;
    public static SfcDependencyAction Drop;
    public static SfcDependencyAction Alter;
    public static SfcDependencyAction Rename;
    public static SfcDependencyAction Move;
    public static SfcDependencyAction Merge;
    public static SfcDependencyAction Diff;
    public static SfcDependencyAction Copy;
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection : Enum {
    public int value__;
    public static SfcDependencyDirection None;
    public static SfcDependencyDirection Inbound;
    public static SfcDependencyDirection Outbound;
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDiscoveryMode : Enum {
    public int value__;
    public static SfcDependencyDiscoveryMode Children;
    public static SfcDependencyDiscoveryMode Full;
    public static SfcDependencyDiscoveryMode Propagate;
    public static SfcDependencyDiscoveryMode UsedBy;
    public static SfcDependencyDiscoveryMode Uses;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine : object {
    private SfcDependencyDiscoveryMode m_mode;
    private SfcDependencyAction m_action;
    private SfcDependencyRootList m_DependencyRootList;
    private NodeGraph nodeDict;
    private Queue`1<SfcKeyChain> nodeQueue;
    private DepNode m_currentNode;
    public SfcDependencyAction Action { get; }
    internal SfcDependencyRootList SfcDependencyRootList { get; internal set; }
    private SfcDependencyNode Item { get; }
    public SfcDependencyEngine(SfcDependencyDiscoveryMode mode, SfcDependencyAction action);
    public sealed virtual SfcDependencyAction get_Action();
    internal SfcDependencyRootList get_SfcDependencyRootList();
    internal void set_SfcDependencyRootList(SfcDependencyRootList value);
    private SfcDependencyNode get_Item(SfcKeyChain kc);
    private List`1<DepNode> FindUnparentedNodes();
    private List`1<DepNode> FindPhysicallyUnparentedNodes();
    public void Add(SfcInstance objParent, SfcInstance objChild, SfcTypeRelation relation);
    public void Add(SfcInstance obj);
    public void Discover();
    public sealed virtual void Dispose();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink.Add(SfcDependencyDirection direction, SfcInstance targetObject, SfcTypeRelation relation, bool discovered);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink.Add(SfcDependencyDirection direction, IEnumerator targetObjects, SfcTypeRelation relation, bool discovered);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink.Add(SfcDependencyDirection direction, IEnumerable`1<T> targetObjects, SfcTypeRelation relation, bool discovered);
    public DependencyListEnumerator GetListEnumerator();
    public DependencyTreeEnumerator GetTreeEnumerator();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode : object {
    private DepNode depNode;
    internal SfcKeyChain SfcKeyChain { get; }
    public SfcInstance Instance { get; }
    public bool Discovered { get; public set; }
    public IEnumerable`1<SfcDependencyNode> Children { get; }
    public int ChildCount { get; }
    public IEnumerable`1<SfcDependencyNode> Ancestors { get; }
    public int AncestorCount { get; }
    internal SfcDependencyNode(DepNode depNode);
    internal SfcKeyChain get_SfcKeyChain();
    public SfcInstance get_Instance();
    public bool get_Discovered();
    public void set_Discovered(bool value);
    public bool IsPhysicalAncestor(int index);
    public bool IsPhysicalChild(int index);
    public IEnumerable`1<SfcDependencyNode> get_Children();
    public int get_ChildCount();
    public IEnumerable`1<SfcDependencyNode> get_Ancestors();
    public int get_AncestorCount();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyRootList : KeyedCollection`2<SfcKeyChain, SfcInstance> {
    public SfcDependencyRootList(ICollection`1<SfcInstance> collection);
    protected virtual SfcKeyChain GetKeyForItem(SfcInstance obj);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDesignModeException : SfcException {
    public SfcDesignModeException(string message, Exception innerException);
    public SfcDesignModeException(string message);
    private SfcDesignModeException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDictionaryCollection`3 : SfcCollection`3<T, K, ParentT> {
    private Dictionary`2<K, T> m_collection;
    private Dictionary`2<K, T> m_shadow;
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected SfcDictionaryCollection`3(ParentT parent);
    protected virtual void AddImpl(T obj);
    public virtual void Clear();
    public virtual bool Contains(T obj);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T obj);
    public virtual IEnumerator`1<T> GetEnumerator();
    public virtual bool Contains(K key);
    public bool TryGetValue(K key, T& obj);
    protected virtual bool RemoveImpl(T obj);
    protected virtual T GetObjectByKey(K key);
    protected virtual T GetExistingObjectByKey(K key);
    protected virtual void InitInnerCollection();
    protected virtual void PrepareMerge();
    protected virtual bool AddShadow(T obj);
    protected virtual void FinishMerge();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfo : object {
    private string name;
    private Type rootType;
    private string rootTypeFullName;
    private string namespaceQualifier;
    private string assemblyStrongName;
    private string domainNamespace;
    private string psDriveName;
    private bool assemblyInGAC;
    public string Name { get; internal set; }
    public bool IsAssemblyInGAC { get; }
    public string DomainNamespace { get; }
    public Type RootType { get; internal set; }
    public string RootTypeFullName { get; internal set; }
    public string AssemblyStrongName { get; internal set; }
    public string NamespaceQualifier { get; internal set; }
    public string PSDriveName { get; internal set; }
    internal SfcDomainInfo(string namespaceQualifier, string rootTypeFullName, string assemblyName, string psDriveName);
    internal SfcDomainInfo(string namespaceQualifier, string rootTypeFullName, string assemblyName, string psDriveName, bool assemblyInGAC);
    public string get_Name();
    internal void set_Name(string value);
    public bool get_IsAssemblyInGAC();
    public string get_DomainNamespace();
    public Type get_RootType();
    internal void set_RootType(Type value);
    public string get_RootTypeFullName();
    internal void set_RootTypeFullName(string value);
    public string get_AssemblyStrongName();
    internal void set_AssemblyStrongName(string value);
    public string get_NamespaceQualifier();
    internal void set_NamespaceQualifier(string value);
    public string get_PSDriveName();
    internal void set_PSDriveName(string value);
    private void LateLoadRootType();
    public int GetLogicalVersion(object instance);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfoCollection : ReadOnlyCollection`1<SfcDomainInfo> {
    public SfcDomainInfo Item { get; }
    public SfcDomainInfoCollection(IList`1<SfcDomainInfo> list);
    public bool Contains(string domainName);
    public SfcDomainInfo get_Item(string domainName);
    public SfcDomainInfo GetDomainForNamespaceQualifier(string namespaceQualifier);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcEmptyXmlException : SfcException {
    public string Message { get; }
    public SfcEmptyXmlException(string message);
    public SfcEmptyXmlException(string message, Exception innerException);
    private SfcEmptyXmlException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcEventArgs : EventArgs {
    private Urn urn;
    private SfcInstance instance;
    public Urn Urn { get; }
    public SfcInstance Instance { get; }
    public SfcEventArgs(Urn urn, SfcInstance instance);
    public Urn get_Urn();
    public SfcInstance get_Instance();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcException : SqlServerManagementException {
    private static string prodVer;
    protected static string ProdVer { get; }
    public string HelpLink { get; }
    protected SfcException(string message);
    protected SfcException(string message, Exception innerException);
    protected SfcException(SerializationInfo info, StreamingContext context);
    private static SfcException();
    private void Init();
    protected static string get_ProdVer();
    protected internal SfcException SetHelpContext(string resource);
    public virtual string get_HelpLink();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance : object {
    private SfcObjectState m_state;
    [CompilerGeneratedAttribute]
private EventHandler`1<SfcPropertyMetadataChangedEventArgs> propertyMetadataChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler propertyChanged;
    private ISfcPropertyStorageProvider propertiesStorage;
    private SfcKey m_key;
    private SfcKeyChain m_keychain;
    private SfcInstance m_parent;
    private SfcPropertyCollection m_properties;
    public Urn Urn { get; }
    protected internal SfcObjectState State { get; internal set; }
    [XmlIgnoreAttribute]
public SfcPropertyCollection Properties { get; }
    [XmlIgnoreAttribute]
public SfcMetadataDiscovery Metadata { get; }
    protected ISfcPropertyStorageProvider PropertyStorageProvider { get; }
    protected internal SfcKey AbstractIdentityKey { get; protected internal set; }
    [XmlIgnoreAttribute]
public SfcKeyChain KeyChain { get; internal set; }
    [XmlIgnoreAttribute]
public SfcInstance Parent { get; protected internal set; }
    public Urn get_Urn();
    protected internal SfcObjectState get_State();
    internal void set_State(SfcObjectState value);
    public SfcPropertyCollection get_Properties();
    public virtual SfcMetadataDiscovery get_Metadata();
    internal void Initialize();
    public virtual void Refresh();
    public virtual string ToString();
    public void Serialize(XmlWriter writer);
    [CompilerGeneratedAttribute]
protected void add_propertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
protected void remove_propertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
protected void add_propertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected void remove_propertyChanged(PropertyChangedEventHandler value);
    public virtual ISfcPropertySet GetPropertySet();
    public sealed virtual void add_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    public sealed virtual void remove_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void InternalOnPropertyValueChanges(PropertyChangedEventArgs args);
    internal void InternalOnPropertyMetadataChanges(SfcPropertyMetadataChangedEventArgs args);
    protected internal virtual void OnPropertyValueChanges(PropertyChangedEventArgs args);
    protected internal virtual void OnPropertyMetadataChanges(SfcPropertyMetadataChangedEventArgs args);
    protected internal abstract virtual ISfcCollection GetChildCollection(string elementType);
    protected virtual ISfcPropertyStorageProvider get_PropertyStorageProvider();
    internal object GetPropertyValueImpl(string propertyName);
    internal void SetPropertyValueImpl(string propertyName, object value);
    protected internal abstract virtual SfcKey CreateIdentityKey();
    protected virtual ValidationState Validate();
    protected internal virtual void InitializeUIPropertyState();
    protected virtual void UpdateUIPropertyState();
    protected internal void ResetKey();
    protected internal SfcKey get_AbstractIdentityKey();
    protected internal void set_AbstractIdentityKey(SfcKey value);
    public SfcKeyChain get_KeyChain();
    internal void set_KeyChain(SfcKeyChain value);
    public SfcInstance get_Parent();
    protected internal void set_Parent(SfcInstance value);
    private ISfcConnection GetConnectionContext();
    private SfcConnectionContextMode GetConnectionContextMode();
    private static void FillPropertyCollectionFromDataReader(SfcPropertyCollection properties, IDataReader reader);
    internal void MergeObjectPropsFromPropertyCollection(SfcPropertyCollection mergeProperties);
    private static IDataReader GetInitDataReader(ISfcConnection connection, Urn urn, String[] fields, OrderBy[] orderby);
    private static ResultType[] GetSupportedResultTypes(ISfcConnection connection, Urn urn);
    internal void InitReferenceLevel(ISfcCollection refColl);
    internal void InitChildLevel(ISfcCollection childColl);
    private void InitObjectsFromEnumResults(ISfcCollection childColl, IDataReader reader);
    private void InitObjectsFromEnumResultsRec(ISfcCollection childColl, IDataReader reader, int columnIdx, Object[] parentRow);
    private static SfcInstance MergeOrCreateObjectFromRow(ISfcCollection childColl, IDataReader reader);
    private static SfcInstance CreateNewObjectFromRow(ISfcCollection childColl, IDataReader reader);
    private bool AdvanceInitRec(IDataReader reader, int columnIdx);
    private static bool CompareRows(IDataReader reader, Object[] parentRow, int columnStartIdx, int columnStopIdx);
    public virtual void Discover(ISfcDependencyDiscoveryObjectSink sink);
    public ISfcDomain GetDomain();
    protected internal virtual SfcTypeMetadata GetTypeMetadataImpl();
    protected void MarkRootAsConnected();
    private ISfcCollection GetParentCollection();
    protected void CheckObjectState();
    protected void CheckObjectCreated();
    private void CheckObjectStateAndParent(SfcObjectState required_state);
    private List`1<SfcInstance> GetDependentObjects(SfcDependencyAction action);
    private void PostCrud(SfcDependencyAction depAction, SfcKeyChain oldKeyChain, object extraParam, object executionResult);
    protected virtual void PostCreate(object executionResult);
    protected virtual void PostRename(object executionResult);
    protected virtual void PostMove(object executionResult);
    protected virtual void PostAlter(object executionResult);
    protected virtual void PostDrop(object executionResult);
    private ISfcScript ScriptCRUD(SfcDependencyAction depAction, object extraParam);
    private ISfcScript AccumulateScript(List`1<SfcInstance> objList, SfcDependencyAction depAction, object extraParam);
    private void CRUDImpl(string operationName, SfcObjectState requiredState, SfcDependencyAction depAction, SfcObjectState finalState);
    private void CRUDImplWorker(string operationName, SfcObjectState requiredState, SfcDependencyAction depAction, SfcObjectState finalState, object extraParam);
    protected void CreateImpl();
    protected void RenameImpl(SfcKey newKey);
    protected void MoveImpl(SfcInstance newParent);
    protected void AlterImpl();
    protected void DropImpl();
    protected void MarkForDropImpl(bool dropOnAlter);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2 : SfcInstance {
    [SfcIgnoreAttribute]
public K IdentityKey { get; }
    public static SfcTypeMetadata GetTypeMetadata();
    protected internal virtual SfcTypeMetadata GetTypeMetadataImpl();
    public static SfcObjectFactory GetObjectFactory();
    protected internal abstract virtual K CreateKey();
    protected internal virtual SfcKey CreateIdentityKey();
    public K get_IdentityKey();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstanceSerializedData : ValueType {
    private SfcSerializedTypes serializedType;
    private string name;
    private string type;
    private object value;
    public SfcSerializedTypes SerializedType { get; }
    public string Name { get; }
    public string Type { get; }
    public object Value { get; }
    public SfcInstanceSerializedData(SfcSerializedTypes serializedType, string name, string type, object value);
    public SfcSerializedTypes get_SerializedType();
    public string get_Name();
    public string get_Type();
    public object get_Value();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidArgumentException : SfcException {
    public SfcInvalidArgumentException(string message);
    public SfcInvalidArgumentException(string message, Exception innerException);
    private SfcInvalidArgumentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidConnectionContextModeChangeException : SfcException {
    private string fromMode;
    private string toMode;
    public string Message { get; }
    public SfcInvalidConnectionContextModeChangeException(string fromMode, string toMode);
    public SfcInvalidConnectionContextModeChangeException(string fromMode, string toMode, Exception innerException);
    internal SfcInvalidConnectionContextModeChangeException(string message, Exception innerException);
    internal SfcInvalidConnectionContextModeChangeException(string message);
    private SfcInvalidConnectionContextModeChangeException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidKeyChainException : SfcException {
    public string Message { get; }
    public SfcInvalidKeyChainException(string message);
    public SfcInvalidKeyChainException(string message, Exception innerException);
    public SfcInvalidKeyChainException(Exception innerException);
    private SfcInvalidKeyChainException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidKeyException : SfcException {
    private string keyName;
    public string Message { get; }
    public SfcInvalidKeyException(string keyName);
    public SfcInvalidKeyException(string keyName, Exception innerException);
    private SfcInvalidKeyException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidMoveException : SfcException {
    public SfcInvalidMoveException(string message);
    public SfcInvalidMoveException(string message, Exception innerException);
    private SfcInvalidMoveException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidQueryExpressionException : SfcException {
    public SfcInvalidQueryExpressionException(string message);
    public SfcInvalidQueryExpressionException(string message, Exception innerException);
    private SfcInvalidQueryExpressionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidRenameException : SfcException {
    public SfcInvalidRenameException(string message);
    public SfcInvalidRenameException(string message, Exception innerException);
    private SfcInvalidRenameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidStateException : SfcException {
    public SfcInvalidStateException(string message);
    public SfcInvalidStateException(string message, Exception innerException);
    private SfcInvalidStateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidStreamException : SfcException {
    public SfcInvalidStreamException(string message);
    public SfcInvalidStreamException(string message, Exception innerException);
    private SfcInvalidStreamException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidXmlParentTypeException : SfcException {
    public SfcInvalidXmlParentTypeException(string message);
    public SfcInvalidXmlParentTypeException(string message, Exception innerException);
    private SfcInvalidXmlParentTypeException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey : object {
    public Type InstanceType { get; }
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
    public virtual string ToString();
    public abstract virtual bool Equals(SfcKey akey);
    public abstract virtual string GetUrnFragment();
    public virtual Type get_InstanceType();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain : object {
    private SfcKey m_ThisKey;
    private SfcKeyChain m_Parent;
    public SfcKeyChain Parent { get; internal set; }
    public SfcKey LeafKey { get; internal set; }
    public DomainRootKey RootKey { get; }
    public bool IsRooted { get; }
    public bool IsConnected { get; }
    public ISfcDomain Domain { get; }
    public Urn Urn { get; }
    private XPathExpression Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.XPathExpression { get; }
    private string Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.Value { get; private set; }
    private string Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.DomainInstanceName { get; }
    internal SfcKeyChain(DomainRootKey topKey);
    internal SfcKeyChain(SfcKey key, SfcKeyChain parent);
    public SfcKeyChain(Urn urn, ISfcDomain domain);
    private bool BodyEquals(SfcKeyChain kc);
    public bool ClientEquals(SfcKeyChain otherKeychain);
    public bool ServerEquals(SfcKeyChain otherKeychain);
    private bool BodyDescendant(SfcKeyChain kc);
    public bool IsClientAncestorOf(SfcKeyChain otherKeychain);
    public bool IsServerAncestorOf(SfcKeyChain otherKeychain);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SfcKeyChain otherKeychain);
    public static bool op_Equality(SfcKeyChain leftOperand, SfcKeyChain rightOperand);
    public static bool op_Inequality(SfcKeyChain leftOperand, SfcKeyChain rightOperand);
    public SfcInstance GetObject();
    public SfcKeyChain get_Parent();
    internal void set_Parent(SfcKeyChain value);
    public SfcKey get_LeafKey();
    internal void set_LeafKey(SfcKey value);
    public DomainRootKey get_RootKey();
    public bool get_IsRooted();
    public bool get_IsConnected();
    public ISfcDomain get_Domain();
    public Urn get_Urn();
    public virtual string ToString();
    private sealed virtual override XPathExpression Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.get_XPathExpression();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.get_Value();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.set_Value(string value);
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.get_DomainInstanceName();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcListCollection`3 : SfcCollection`3<T, K, ParentT> {
    private List`1<T> m_list;
    private List`1<T> m_shadow;
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected SfcListCollection`3(ParentT parent);
    protected virtual void AddImpl(T obj);
    public virtual void Clear();
    public virtual bool Contains(T obj);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T obj);
    public virtual IEnumerator`1<T> GetEnumerator();
    protected ICollection`1<T> GetInternalCollectionImpl();
    public virtual bool Contains(K key);
    protected virtual bool RemoveImpl(T obj);
    protected virtual T GetObjectByKey(K key);
    protected virtual T GetExistingObjectByKey(K key);
    protected virtual void InitInnerCollection();
    protected virtual void PrepareMerge();
    protected virtual bool AddShadow(T obj);
    protected virtual void FinishMerge();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcMetadataException : SfcException {
    public SfcMetadataException(string message);
    public SfcMetadataException(string message, Exception innerException);
    protected SfcMetadataException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcMissingParentException : SfcException {
    public SfcMissingParentException(string message);
    public SfcMissingParentException(string message, Exception innerException);
    private SfcMissingParentException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcNodeMap : object {
    private object instance;
    private SimpleNodeAdapter adapter;
    public ISfcSimpleNode Item { get; }
    public SfcNodeMap(object reference, SimpleNodeAdapter adapter);
    public sealed virtual ISfcSimpleNode get_Item(string key);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcNonSerializablePropertyException : SfcException {
    public SfcNonSerializablePropertyException(string message);
    public SfcNonSerializablePropertyException(string message, Exception innerException);
    private SfcNonSerializablePropertyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcNonSerializableTypeException : SfcException {
    public SfcNonSerializableTypeException(string message);
    public SfcNonSerializableTypeException(string message, Exception innerException);
    private SfcNonSerializableTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectAlteredEventArgs : SfcEventArgs {
    public SfcObjectAlteredEventArgs(Urn urn, SfcInstance instance);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectCreatedEventArgs : SfcEventArgs {
    public SfcObjectCreatedEventArgs(Urn urn, SfcInstance instance);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectDroppedEventArgs : SfcEventArgs {
    public SfcObjectDroppedEventArgs(Urn urn, SfcInstance instance);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1 : object {
    private TSfcInstance parent;
    private SfcPropertyDictionary<TSfcInstance> properties;
    private Dictionary`2<string, string> propertyMapper;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<SfcPropertyMetadataChangedEventArgs> PropertyMetadataChanged;
    protected TSfcInstance Parent { get; }
    private SfcPropertyDictionary<TSfcInstance> PropertyDictionary { get; }
    public SfcObjectExtender`1(TSfcInstance parent);
    protected void RegisterProperty(PropertyInfo propertyInfo);
    protected void RegisterParentProperty(PropertyInfo propertyInfo);
    protected void RegisterProperty(PropertyInfo propertyInfo, string parentPropertyName);
    protected TSfcInstance get_Parent();
    private SfcPropertyDictionary<TSfcInstance> get_PropertyDictionary();
    protected virtual ISfcPropertySet GetParentSfcPropertySet();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void parent_PropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    protected virtual void OnPropertyMetadataChanged(string propertyName);
    protected virtual void parent_PropertyMetadataChanged(object sender, SfcPropertyMetadataChangedEventArgs e);
    public sealed virtual ISfcPropertySet GetPropertySet();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectFactory : object {
    protected abstract virtual SfcInstance CreateImpl();
    internal SfcInstance Create(SfcInstance parent, IPropertyCollectionPopulator populator, SfcObjectState state);
    internal SfcInstance Create(SfcInstance parent, SfcKey key, SfcObjectState state);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectInitializationException : SfcException {
    private string objName;
    public string Message { get; }
    public SfcObjectInitializationException(string keyName);
    public SfcObjectInitializationException(string keyName, Exception innerException);
    private SfcObjectInitializationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectIterator : object {
    private ISfcDomain _root;
    private String[] _fields;
    private OrderBy[] _orderByFields;
    private Type _type;
    private IDataReader _ResultsDataReader;
    private DataTable _ResultsDataTable;
    private DataTableReader _ResultsDataTableReader;
    private Urn _urn;
    private int _urnColIndex;
    private bool _closeConnection;
    private bool _cacheReader;
    private SfcObjectQueryMode _activeQueriesMode;
    private ISfcConnection _connection;
    private SfcInstance _currentInstance;
    private object System.Collections.IEnumerator.Current { get; }
    public SfcObjectIterator(ISfcDomain root, SfcObjectQueryMode activeQueriesMode, SfcQueryExpression query, String[] fields, OrderBy[] orderByFields);
    public void Close();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private bool IsDomainHop(Urn source, Urn destination);
    private object CreateObjectHierarchy(Urn urn);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override void System.IDisposable.Dispose();
    private void CloseDataReader();
    private void CloseClonedConnection();
    private void GetConnection();
    private void MakeDataReader();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectNotScriptableException : SfcException {
    public SfcObjectNotScriptableException(string message);
    public SfcObjectNotScriptableException(string message, Exception innerException);
    private SfcObjectNotScriptableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery : object {
    private SfcQueryExpression query;
    private ISfcDomain domain;
    private ISfcConnection domainConn;
    private IAlienRoot nonSfcRoot;
    private String[] fields;
    private OrderBy[] orderByFields;
    private SfcObjectQueryMode activeQueriesMode;
    public SfcQueryExpression SfcQueryExpression { get; }
    public SfcObjectQueryMode ActiveQueriesMode { get; public set; }
    public SfcObjectQuery(ISfcDomain domain, SfcObjectQueryMode activeQueriesMode);
    public SfcObjectQuery(ISfcDomain domain);
    public SfcObjectQuery(IAlienRoot root);
    public SfcQueryExpression get_SfcQueryExpression();
    public SfcObjectQueryMode get_ActiveQueriesMode();
    public void set_ActiveQueriesMode(SfcObjectQueryMode value);
    public DataTable ExecuteDataTable(SfcQueryExpression query, String[] fields, OrderBy[] orderByFields);
    public IEnumerable ExecuteIterator(SfcQueryExpression query, String[] fields, OrderBy[] orderByFields);
    private void Init(ISfcDomain domain, SfcObjectQueryMode mode);
    private void ValidateQueryExpression(SfcQueryExpression query);
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode : Enum {
    public int value__;
    public static SfcObjectQueryMode CachedQuery;
    public static SfcObjectQueryMode SingleActiveQuery;
    public static SfcObjectQueryMode MultipleActiveQueries;
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState : Enum {
    public int value__;
    public static SfcObjectState None;
    public static SfcObjectState Pending;
    public static SfcObjectState Existing;
    public static SfcObjectState Dropped;
    public static SfcObjectState ToBeDropped;
    public static SfcObjectState Recreate;
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcPathConversionException : SfcException {
    public SfcPathConversionException(string message, Exception innerException);
    public SfcPathConversionException(string message);
    private SfcPathConversionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcProperty : object {
    private SfcPropertyCollection m_propertyCollection;
    private string m_propertyName;
    public AttributeCollection Attributes { get; }
    public string Name { get; }
    public object Value { get; public set; }
    public bool IsAvailable { get; }
    public bool Enabled { get; public set; }
    public Type Type { get; }
    public bool Writable { get; }
    public bool Readable { get; }
    public bool Expensive { get; }
    public bool Computed { get; }
    public bool Encrypted { get; }
    public bool Standalone { get; }
    public bool SqlAzureDatabase { get; }
    public bool IdentityKey { get; }
    public bool Required { get; }
    public bool Dirty { get; internal set; }
    public bool Retrieved { get; internal set; }
    public bool IsNull { get; }
    internal SfcProperty(SfcPropertyCollection propertyCollection, string propertyName);
    public sealed virtual AttributeCollection get_Attributes();
    public sealed virtual string get_Name();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public bool get_IsAvailable();
    public sealed virtual bool get_Enabled();
    public void set_Enabled(bool value);
    public sealed virtual Type get_Type();
    public sealed virtual bool get_Writable();
    public bool get_Readable();
    public bool get_Expensive();
    public bool get_Computed();
    public bool get_Encrypted();
    public bool get_Standalone();
    public bool get_SqlAzureDatabase();
    public bool get_IdentityKey();
    public sealed virtual bool get_Required();
    public sealed virtual bool get_Dirty();
    internal void set_Dirty(bool value);
    public bool get_Retrieved();
    internal void set_Retrieved(bool value);
    public sealed virtual bool get_IsNull();
    public virtual string ToString();
    public int CompareTo(object obj);
    public virtual bool Equals(object o);
    public static bool op_Equality(SfcProperty prop1, SfcProperty prop2);
    public static bool op_Inequality(SfcProperty prop1, SfcProperty prop2);
    public static bool op_GreaterThan(SfcProperty prop1, SfcProperty prop2);
    public static bool op_LessThan(SfcProperty prop1, SfcProperty prop2);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyCollection : object {
    internal PropertyDataDispatcher m_propertyDispatcher;
    private BitArray m_retrieved;
    private BitArray m_dirty;
    private BitArray m_enabled;
    internal bool DynamicMetaDataEnabled { get; }
    public int Count { get; }
    public SfcProperty Item { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal SfcPropertyCollection(PropertyDataDispatcher dispatcher);
    public sealed virtual bool Contains(string propertyName);
    public sealed virtual bool Contains(ISfcProperty property);
    public sealed virtual bool Contains(string propertyName);
    public sealed virtual bool TryGetPropertyValue(string propertyName, T& value);
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& value);
    public sealed virtual bool TryGetProperty(string propertyName, ISfcProperty& property);
    public sealed virtual IEnumerable`1<ISfcProperty> EnumProperties();
    internal bool IsDirty(string propertyName);
    internal void SetDirty(string propertyName, bool val);
    public bool IsAvailable(string propertyName);
    internal bool IsRetrieved(int index);
    internal bool IsRetrieved(string propertyName);
    internal bool get_DynamicMetaDataEnabled();
    internal void SetRetrieved(string propertyName, bool val);
    public void CopyTo(SfcProperty[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    internal object GetValue(string propertyName);
    internal void SetValue(string propertyName, object value);
    internal bool GetEnabled(string propertyName);
    internal void SetEnabled(string propertyName, bool value);
    internal int LookupID(string propertyName);
    public SfcProperty get_Item(string propertyName);
    private SfcProperty GetPropertyObject(int index);
    private SfcProperty GetPropertyObject(string propertyName);
    private void RetrieveProperty(int index);
    private void RetrieveProperty(string propertyName);
    public sealed virtual IEnumerator GetEnumerator();
    internal Type Type(string propertyName);
    internal bool IsNull(string propertyName);
    internal bool IsComputed(string propertyName);
    internal bool IsEncrypted(string propertyName);
    internal bool IsExpensive(string propertyName);
    internal bool IsStandalone(string propertyName);
    internal bool IsSqlAzureDatabase(string propertyName);
    internal bool IsIdentityKey(string propertyName);
    internal bool IsReadOnly(string propertyName);
    internal bool IsRequired(string propertyName);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyMap : object {
    private object instance;
    private SimpleNodeAdapter adapter;
    public object Item { get; }
    public SfcPropertyMap(object reference, SimpleNodeAdapter adapter);
    public sealed virtual object get_Item(string key);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyMetadataChangedEventArgs : PropertyChangedEventArgs {
    public SfcPropertyMetadataChangedEventArgs(string propertyName);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyNotSetException : SfcException {
    private string propertyName;
    public string Message { get; }
    public SfcPropertyNotSetException(string propertyName);
    internal SfcPropertyNotSetException(string propertyName, Exception innerException);
    private SfcPropertyNotSetException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    private void Init();
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcProxyInstance`3 : SfcInstance`2<K, T> {
    private TRef reference;
    public TRef Reference { get; }
    public SfcProxyInstance`3(TRef reference);
    public TRef get_Reference();
    protected abstract virtual TRef GetReferenceImpl();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryConnectionUnavailableException : SfcException {
    public string Message { get; }
    public SfcQueryConnectionUnavailableException(string message);
    public SfcQueryConnectionUnavailableException(string message, Exception innerException);
    private SfcQueryConnectionUnavailableException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression : object {
    private Urn expression;
    public XPathExpression Expression { get; }
    public string ExpressionSkeleton { get; }
    public SfcQueryExpression(string path);
    public void SetExpression(XPathExpression expression);
    public virtual string ToString();
    internal Urn ToUrn();
    public XPathExpression get_Expression();
    public string get_ExpressionSkeleton();
    public string GetLeafTypeName();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcReferenceCollection`3 : object {
    private IComparer`1<K> comparer;
    private SortedDictionary`2<K, T> dict;
    private ISfcReferenceCollectionResolver`2<T, S> resolver;
    private S owner;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public T Item { get; }
    public IEnumerable`1<K> Keys { get; }
    public IEnumerable`1<T> Values { get; }
    public int Count { get; }
    protected SfcReferenceCollection`3(S owner, ISfcReferenceCollectionResolver`2<T, S> resolver, IComparer`1<K> comparer);
    public void Refresh();
    private void Reset();
    protected abstract virtual K GetKeyFromValue(T value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual bool TryGetValue(K key, T& value);
    public sealed virtual T get_Item(K key);
    public sealed virtual IEnumerable`1<K> get_Keys();
    public sealed virtual IEnumerable`1<T> get_Values();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration : object {
    public static SfcDomainInfoCollection Domains { get; }
    public static object CreateObject(string fullTypeName);
    public static Type GetObjectTypeFromFullName(string fullTypeName);
    public static Type GetObjectTypeFromFullName(string fullTypeName, bool ignoreCase);
    public static Type TryGetObjectTypeFromFullName(string fullTypeName);
    private static Assembly LocateSfcExtension(string domainName);
    private static Assembly LocateSfcExtension(string domainName, bool throwOnUnregisteredDomain);
    public static string GetRegisteredDomainForType(string fullTypeName);
    public static string GetRegisteredDomainForType(string fullTypeName, bool throwOnUnregisteredDomain);
    public static SfcDomainInfo GetRegisteredDomainForType(Type type);
    internal static string GetFullAssemblyName(string assemblyName);
    public static SfcDomainInfoCollection get_Domains();
    internal static void AddTestDomainsToDomainsList();
}
public static class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSecureString : object {
    internal static char SmlEscaper;
    private static Regex stringRegex;
    private static Regex numberRegex;
    private static SfcSecureString();
    private static string EscapeImpl(string s, char cEsc);
    public static string EscapeSquote(string value);
    public static string EscapeBracket(string value);
    public static string SmlEscape(string originalString);
    public static string SmlUnEscape(string escapedString);
    public static string XmlEscape(string originalString);
    public static string XmlUnEscape(string escapedString);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSecurityException : SfcException {
    public SfcSecurityException(string message, Exception innerException);
    public SfcSecurityException(string message);
    private SfcSecurityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializationException : SfcException {
    public SfcSerializationException(string message);
    public SfcSerializationException(string message, Exception innerException);
    public SfcSerializationException(Exception innerException);
    private SfcSerializationException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializedTypes : Enum {
    public int value__;
    public static SfcSerializedTypes None;
    public static SfcSerializedTypes Property;
    public static SfcSerializedTypes Parent;
    public static SfcSerializedTypes Collection;
    public static SfcSerializedTypes Reference;
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer : object {
    private SfcCache cache;
    private List`1<object> instanceList;
    private DependencyListEnumerator listEnumerator;
    private object rootInstance;
    private XmlWriter writer;
    private SfcDomainInfo domainInfo;
    private Dictionary`2<RuntimeTypeHandle, XmlSerializer> xmlSerializersCache;
    private List`1<object> unParentedReferences;
    [CompilerGeneratedAttribute]
private FilterPropertyHandler FilterPropertyHandler;
    public List`1<object> UnParentedReferences { get; }
    public List`1<object> get_UnParentedReferences();
    [CompilerGeneratedAttribute]
public void add_FilterPropertyHandler(FilterPropertyHandler value);
    [CompilerGeneratedAttribute]
public void remove_FilterPropertyHandler(FilterPropertyHandler value);
    public void Serialize(object instance);
    public void Write(XmlWriter xmlWriter);
    internal void WriteInstancesDocInfo(XmlWriter docWriter, string smlUri, int version);
    internal void Write(XmlWriter instanceWriter, object instance, Dictionary`2<string, string> namespaces);
    private void WriteAllInstances();
    private void WriteSchemaToWriter(XmlWriter writer, Dictionary`2<string, string> namespaces);
    private void WriteInternal(XmlWriter instanceWriter, object instance, Dictionary`2<string, string> namespaces);
    private void WriteSchema(XmlWriter schemaWriter, Type type, Dictionary`2<string, string> namespaces);
    public object Deserialize(XmlReader xmlReader);
    public object Deserialize(XmlReader xmlReader, SfcObjectState state);
    private void Deserialize(XmlReader reader, string instanceUri, Object& instance, SfcObjectState state);
    private void ParseXmlData(XmlReader reader, List`1& serializedData, bool isUpgrade);
    internal object CreateInstanceFromSerializedData(Type instanceType, string instanceUri, List`1<SfcInstanceSerializedData> serializedData);
    private static object GetPropertyValueFromXmlString(string xmlString, Type propType, IXmlSerializationAdapter serializationAdapter);
    private void SetParent(IAlienObject instance, string instanceUri);
    private static IXmlSerializationAdapter GetSerializationAdapter(SfcMetadataRelation propertyRelation);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNode : object {
    private object instance;
    private SimpleNodeAdapter adapter;
    private ISfcSimpleMap`2<string, object> properties;
    private ISfcSimpleMap`2<string, ISfcSimpleList> container;
    private ISfcSimpleMap`2<string, ISfcSimpleNode> objects;
    public object ObjectReference { get; }
    public Urn Urn { get; }
    public ISfcSimpleMap`2<string, object> Properties { get; }
    public ISfcSimpleMap`2<string, ISfcSimpleList> RelatedContainers { get; }
    public ISfcSimpleMap`2<string, ISfcSimpleNode> RelatedObjects { get; }
    internal SfcSimpleNode(object reference, SimpleNodeAdapter adapter);
    public sealed virtual object get_ObjectReference();
    public sealed virtual Urn get_Urn();
    public sealed virtual ISfcSimpleMap`2<string, object> get_Properties();
    public sealed virtual ISfcSimpleMap`2<string, ISfcSimpleList> get_RelatedContainers();
    public sealed virtual ISfcSimpleMap`2<string, ISfcSimpleNode> get_RelatedObjects();
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeAdapter : SimpleNodeAdapter {
    public virtual bool IsSupported(object node);
    public virtual Urn GetUrn(object reference);
    public virtual object GetProperty(object instance, string propertyName);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeFactory : object {
    private static SfcSimpleNodeFactory factory;
    private static IList`1<SimpleNodeAdapter> DEFAULT_ADAPTERS;
    public static SfcSimpleNodeFactory Factory { get; }
    private static SfcSimpleNodeFactory();
    public static SfcSimpleNodeFactory get_Factory();
    public ISfcSimpleNode GetSimpleNode(object node);
    public ISfcSimpleNode GetSimpleNode(object node, SimpleNodeAdapter adapter);
    public bool IsSupported(object node);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSqlCeNotInstalledException : SfcException {
    public SfcSqlCeNotInstalledException(string message);
    public SfcSqlCeNotInstalledException(string message, Exception innerException);
    private SfcSqlCeNotInstalledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcSqlPathUtilities : object {
    public static string ConvertUrnToPath(Urn urn);
    public static string EncodeSqlName(string name);
    public static string DecodeSqlName(string name);
    public static String[] DecodeSqlName(String[] names);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SfcStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string OperationValidOnlyInPendingState { get; }
    public static string InvalidKeyChain { get; }
    public static string InvalidRename { get; }
    public static string InvalidMove { get; }
    public static string KeyAlreadySet { get; }
    public static string KeyChainAlreadySet { get; }
    public static string SfcInvalidSerialization { get; }
    public static string SfcInvalidDeserialization { get; }
    public static string SfcNullArgumentToSerialize { get; }
    public static string SfcNullArgumentToResolve { get; }
    public static string SfcNullArgumentToResolveCollection { get; }
    public static string SfcNullArgumentToViewAttribute { get; }
    public static string SfcNullArgumentToProxyInstance { get; }
    public static string SfcNullWriterToSerialize { get; }
    public static string SfcNullReaderToSerialize { get; }
    public static string SfcInvalidWriteWithoutDiscovery { get; }
    public static string SfcUnsupportedVersion { get; }
    public static string SfcUnsupportedDomainUpgrade { get; }
    public static string EmptySfcXml { get; }
    public static string ParentHasNoConnecton { get; }
    public static string SfcQueryConnectionUnavailable { get; }
    public static string BadCreateIdentityKey { get; }
    public static string MissingParent { get; }
    public static string opCreate { get; }
    public static string opRename { get; }
    public static string opMove { get; }
    public static string opAlter { get; }
    public static string opDrop { get; }
    public static string PermissionDenied { get; }
    public static string MissingSqlCeTools { get; }
    public static string UsageRequest { get; }
    public static string UsageFilter { get; }
    public static string UsageOrderBy { get; }
    public static string InvalidAlias { get; }
    public static string ResultNotSupported { get; }
    public static string XPathUnclosedString { get; }
    public static string XPathSyntaxError { get; }
    public static string UnknowNodeType { get; }
    public static string UnknownOperator { get; }
    public static string UnknownFunction { get; }
    public static string VariablesNotSupported { get; }
    public static string UnknownElemType { get; }
    public static string ChildrenNotSupported { get; }
    public static string UnsupportedExpresion { get; }
    public static string InvalidNode { get; }
    public static string NoPropertiesRequested { get; }
    public static string FailedRequest { get; }
    public static string InvalidAttributeValue { get; }
    public static string NullVersionOnLoadingCfgFile { get; }
    public static string EnumObjectTagNotFound { get; }
    public static string InvalidConnectionType { get; }
    public static string OnlyPathOrFullName { get; }
    public static string DatabaseNameMustBeSpecified { get; }
    public static string TooManyDbLevels { get; }
    public static string InvalidConfigurationFile { get; }
    public static string NotDbObject { get; }
    public static string NotSingleDb { get; }
    public static string NoClassNamePostProcess { get; }
    public static string SqlServer90Name { get; }
    public static string SqlServer80Name { get; }
    public static string InvalidUrn { get; }
    public static string PropertyNotsupported { get; }
    public static string ObjectNotSupportedOnSqlDw { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_OperationValidOnlyInPendingState();
    public static string get_InvalidKeyChain();
    public static string get_InvalidRename();
    public static string get_InvalidMove();
    public static string get_KeyAlreadySet();
    public static string get_KeyChainAlreadySet();
    public static string get_SfcInvalidSerialization();
    public static string get_SfcInvalidDeserialization();
    public static string get_SfcNullArgumentToSerialize();
    public static string get_SfcNullArgumentToResolve();
    public static string get_SfcNullArgumentToResolveCollection();
    public static string get_SfcNullArgumentToViewAttribute();
    public static string get_SfcNullArgumentToProxyInstance();
    public static string get_SfcNullWriterToSerialize();
    public static string get_SfcNullReaderToSerialize();
    public static string get_SfcInvalidWriteWithoutDiscovery();
    public static string get_SfcUnsupportedVersion();
    public static string get_SfcUnsupportedDomainUpgrade();
    public static string get_EmptySfcXml();
    public static string get_ParentHasNoConnecton();
    public static string get_SfcQueryConnectionUnavailable();
    public static string get_BadCreateIdentityKey();
    public static string get_MissingParent();
    public static string get_opCreate();
    public static string get_opRename();
    public static string get_opMove();
    public static string get_opAlter();
    public static string get_opDrop();
    public static string get_PermissionDenied();
    public static string get_MissingSqlCeTools();
    public static string get_UsageRequest();
    public static string get_UsageFilter();
    public static string get_UsageOrderBy();
    public static string get_InvalidAlias();
    public static string get_ResultNotSupported();
    public static string get_XPathUnclosedString();
    public static string get_XPathSyntaxError();
    public static string get_UnknowNodeType();
    public static string get_UnknownOperator();
    public static string get_UnknownFunction();
    public static string get_VariablesNotSupported();
    public static string get_UnknownElemType();
    public static string get_ChildrenNotSupported();
    public static string get_UnsupportedExpresion();
    public static string get_InvalidNode();
    public static string get_NoPropertiesRequested();
    public static string get_FailedRequest();
    public static string get_InvalidAttributeValue();
    public static string get_NullVersionOnLoadingCfgFile();
    public static string get_EnumObjectTagNotFound();
    public static string get_InvalidConnectionType();
    public static string get_OnlyPathOrFullName();
    public static string get_DatabaseNameMustBeSpecified();
    public static string get_TooManyDbLevels();
    public static string get_InvalidConfigurationFile();
    public static string get_NotDbObject();
    public static string get_NotSingleDb();
    public static string get_NoClassNamePostProcess();
    public static string get_SqlServer90Name();
    public static string get_SqlServer80Name();
    public static string get_InvalidUrn();
    public static string get_PropertyNotsupported();
    public static string get_ObjectNotSupportedOnSqlDw();
    public static string PropertyReadOnly(string propertyName);
    public static string PropertyNotSet(string propertyName);
    public static string SfcObjectInitFailed(string objName);
    public static string SfcInvalidConnectionContextModeChange(string fromMode, string toMode);
    public static string InvalidKey(string keyName);
    public static string KeyExists(string key);
    public static string KeyNotFound(string key);
    public static string SfcInvalidArgument(string argumentName);
    public static string SfcInvalidReaderStream(string argumentName);
    public static string SfcInvalidWriterStream(string argumentName);
    public static string SfcInvalidDeserializationMissingParent(string instanceUri, string parentUri);
    public static string SfcInvalidSerializationInstance(string instanceName);
    public static string SfcInvalidDeserializationInstance(string instanceName);
    public static string SfcNullArgumentToSfcReferenceAttribute(string attribute);
    public static string SfcNullInvalidSfcReferenceResolver(string resolverType, string resolverInterface);
    public static string SfcNonSerializableType(string typeName);
    public static string SfcNonSerializableProperty(string property);
    public static string UnregisteredXmlSfcDomain(string sfcDomainName);
    public static string UnregisteredSfcXmlType(string sfcDomain, string sfcType);
    public static string CannotDeserializeNonSerializableProperty(string propertyName, string sfcTypeName);
    public static string InvalidSfcXmlParentType(string sfcExpectedParentDomain, string sfcExpectedParentType, string sfcGivenParentType);
    public static string InvalidSMOQuery(string query);
    public static string InvalidState(SfcObjectState current_state, SfcObjectState required_state);
    public static string CRUDOperationFailed(string opname, string objname);
    public static string ObjectNotScriptabe(string objname, string className);
    public static string UnsupportedAction(string action, string className);
    public static string CannotMoveNoDestination(SfcInstance obj);
    public static string CannotMoveDestinationIsDescendant(SfcInstance obj, SfcInstance destObj);
    public static string CannotMoveDestinationHasDuplicate(SfcInstance obj, SfcInstance destObj);
    public static string CannotRenameNoProperties(SfcInstance obj);
    public static string CannotRenameMissingProperty(SfcInstance obj, string missingProperty);
    public static string CannotRenameNoKey(SfcInstance obj);
    public static string CannotRenameDestinationHasDuplicate(SfcInstance obj, SfcKey key);
    public static string IncompatibleWithSfcListAdapterCollection(string type);
    public static string BadQueryForConnection(string query, string rootName);
    public static string CannotCreateDestinationHasDuplicate(SfcInstance obj);
    public static string AttributeConflict(string firstAttribute, string secondAttribute, string typeName, string propertyName);
    public static string DomainNotFound(string name);
    public static string PropertyUsageError(string name, string usage);
    public static string PropertyCannotHaveAlias(string name);
    public static string InvalidPrefixAlias(string name);
    public static string AliasNotSpecified(string name);
    public static string UnknownProperty(string property);
    public static string UnknownType(string type);
    public static string FailedToLoadAssembly(string assembly);
    public static string CouldNotInstantiateObj(string objType);
    public static string NotDerivedFrom(string objType, string objName);
    public static string ISupportInitDataNotImplement(string objType);
    public static string UrnCouldNotBeResolvedAtLevel(string level);
    public static string IncorrectVersionTag(string elemContent);
    public static string FailedToLoadResFile(string fileName);
    public static string UnsupportedTypeDepDiscovery(string objType, string suppList);
    public static string QueryNotSupportedPostProcess(string propList);
    public static string FailedToCreateUrn(string objCode);
    public static string PropMustBeSpecified(string prop, string obj);
    public static string InvalidUrnForDepends(string urn);
    public static string MissingSection(string section);
    public static string InvalidVersion(string version);
    public static string InvalidSqlServer(string productName);
    public static string DatabaseNameMustBeSpecifiedinTheUrn(string urn);
    public static string CouldNotGetInfoFromDependencyRow(string rowInformation);
    public static string InvalidTypeForProperty(string propertyName, string typeName);
    public static string UnknownDomain(string root);
    public static string NoProvider(string urn);
    public static string LevelNotFound(string level, string urn);
    public static string InvalidKeyValue(string key, string urn);
    public static string MissingKeys(string urn, string level);
    public static string ServerNameMissing(string urn);
    public static string DomainRootUnknown(string fullTypeName);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcTSqlExecutionEngine : object {
    private ServerConnection m_connection;
    public SfcTSqlExecutionEngine(ServerConnection connection);
    private sealed virtual override object Microsoft.SqlServer.Management.Sdk.Sfc.ISfcExecutionEngine.Execute(ISfcScript script);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcTSqlExecutor : object {
    internal static object Execute(ServerConnection connection, string script, ExecutionMode mode);
    internal static object Execute(ServerConnection connection, string script, ExecutionMode mode, ExecutionTypes type);
    public static object ExecuteScalar(ServerConnection connection, string script);
    public static void ExecuteNonQuery(ServerConnection connection, string script);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter : object {
    private List`1<SprocArg> arguments;
    private string procedure;
    public string Procedure { get; public set; }
    public List`1<SprocArg> Arguments { get; }
    public string get_Procedure();
    public void set_Procedure(string value);
    public List`1<SprocArg> get_Arguments();
    public string GenerateScript(SfcInstance sfcObject);
    public string GenerateScript(SfcInstance sfcObject, IEnumerable`1<RuntimeArg> runtimeArgs);
    public string GenerateScript(SfcInstance sfcObject, IEnumerable`1<RuntimeArg> runtimeArgs, bool declareArguments);
    private string ConvertToHexBinary(Byte[] byteValue);
    public static string EscapeString(string value, char charToEscape);
    public static string SqlString(string value);
    public static string MakeSqlString(string value);
    public static string SqlBracket(string value);
    public static string MakeSqlBracket(string value);
    public static string SqlStringBracket(string value);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcTSqlScript : object {
    private StringCollection m_script;
    private ExecutionMode m_executionMode;
    private ExecutionTypes m_executionType;
    public ExecutionMode ExecutionMode { get; public set; }
    public ExecutionTypes ExecutionType { get; public set; }
    public SfcTSqlScript(string batch);
    private void Init();
    public void AddBatch(string batch);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScript.Add(ISfcScript otherScript);
    public StringCollection GetScript();
    public virtual string ToString();
    public ExecutionMode get_ExecutionMode();
    public void set_ExecutionMode(ExecutionMode value);
    public ExecutionTypes get_ExecutionType();
    public void set_ExecutionType(ExecutionTypes value);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeMetadata : object {
    public abstract virtual bool IsCrudActionHandledByParent(SfcDependencyAction dependencyAction);
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation : Enum {
    public int value__;
    public static SfcTypeRelation ContainedChild;
    public static SfcTypeRelation RequiredChild;
    public static SfcTypeRelation StrongReference;
    public static SfcTypeRelation WeakReference;
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnregisteredXmlDomainException : SfcException {
    public SfcUnregisteredXmlDomainException(string message);
    public SfcUnregisteredXmlDomainException(string message, Exception innerException);
    private SfcUnregisteredXmlDomainException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnregisteredXmlTypeException : SfcException {
    public SfcUnregisteredXmlTypeException(string message);
    public SfcUnregisteredXmlTypeException(string message, Exception innerException);
    private SfcUnregisteredXmlTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionException : SfcException {
    public SfcUnsupportedVersionException(string message);
    public SfcUnsupportedVersionException(string message, Exception innerException);
    private SfcUnsupportedVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionSerializationException : SfcException {
    public SfcUnsupportedVersionSerializationException(string message);
    public SfcUnsupportedVersionSerializationException(string message, Exception innerException);
    private SfcUnsupportedVersionSerializationException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility : object {
    private static string sqlceToolsPath;
    private static MethodInfo getChildTypeInfo;
    internal static Dictionary`2<string, Type> typeCache;
    private static SfcUtility();
    public static string GetSmlUri(Urn urn, Type instanceType);
    internal static Type GetSmoChildType(string type, string parentName, Type instanceType);
    internal static string GetSmlUri(Urn urn, Type instanceType, bool useCache);
    public static string GetUrn(object obj);
    internal static object GetParent(object obj);
    internal static string GetXmlContent(XmlReader reader, string typeTag, bool isEmptyNode);
    internal static object GetXmlValue(string xmlContent, Type valueType);
}
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter : object {
    public abstract virtual bool IsSupported(object reference);
    public abstract virtual Urn GetUrn(object reference);
    public virtual object GetProperty(object reference, string propertyName);
    public virtual object GetObject(object reference, string childName);
    public virtual IEnumerable GetEnumerable(object reference, string enumName);
    public virtual bool IsCriteriaMatched(object reference);
    internal object CheckedGetProperty(object reference, string propertyName);
    internal object CheckedGetObject(object reference, string childName);
    internal IEnumerable CheckedGetEnumerable(object reference, string enumName);
    internal Urn CheckedGetUrn(object reference);
    internal bool CheckedIsCriteriaMatched(object reference);
    internal bool CheckedIsSupported(object reference);
    internal static bool IsSystemGeneratedException(Exception e);
}
internal static class Microsoft.SqlServer.Management.Sdk.Sfc.SmoManagementUtil : object {
    internal static void EnterMonitor(object lockObject);
    internal static void ExitMonitor(object lockObject);
    internal static object CreateInstance(Assembly assembly, string objectType);
    internal static Assembly LoadAssembly(string assemblyName);
    internal static Assembly LoadAssemblyFromFile(string fileName);
    internal static Stream LoadResourceFromAssembly(Assembly assembly, string resourceFileName);
    internal static string GetAssemblyName(Assembly assembly);
    internal static Assembly GetExecutingAssembly();
    internal static TypeConverter GetTypeConverter(Type t);
}
[ComVisibleAttribute("False")]
internal abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatement : ConditionedSql {
    private string m_sql;
    protected SqlConditionedStatement(XmlReadConditionedStatement xrcs);
    public string GetLocalSql(SqlObjectBase obj);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementFailCondition : SqlConditionedStatement {
    public SqlConditionedStatementFailCondition(XmlReadConditionedStatement xrcs);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementFailCondition xrcs);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPostfix : SqlConditionedStatement {
    public SqlConditionedStatementPostfix(XmlReadConditionedStatement xrcs);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementPostfix xrcs);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPrefix : SqlConditionedStatement {
    public SqlConditionedStatementPrefix(XmlReadConditionedStatement xrcs);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementPrefix xrcs);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult : EnumResult {
    private DataTable m_databases;
    private DataTable m_SchemaPrefixes;
    private StringCollection m_NameProperties;
    private StringCollection m_SchemaPrefixProperties;
    private bool m_LastDbLevelSet;
    private SortedList m_SpecialQuery;
    private StringCollection m_PostProcessFields;
    private DatabaseEngineType m_databaseEngineType;
    public StringCollection PostProcessFields { get; }
    public StringCollection NameProperties { get; public set; }
    public StringCollection SchemaPrefixProperties { get; public set; }
    internal SortedList SpecialQuery { get; }
    public bool LastDbLevelSet { get; public set; }
    public StatementBuilder StatementBuilder { get; public set; }
    public int Level { get; }
    public DataTable Databases { get; public set; }
    public DataTable SchemaPrefixes { get; public set; }
    internal bool MultipleDatabases { get; }
    public SqlEnumResult(object ob, ResultType resultType, DatabaseEngineType databaseEngineType);
    public StringCollection get_PostProcessFields();
    public StringCollection get_NameProperties();
    public void set_NameProperties(StringCollection value);
    public StringCollection get_SchemaPrefixProperties();
    public void set_SchemaPrefixProperties(StringCollection value);
    internal SortedList get_SpecialQuery();
    public bool get_LastDbLevelSet();
    public void set_LastDbLevelSet(bool value);
    public StatementBuilder get_StatementBuilder();
    public void set_StatementBuilder(StatementBuilder value);
    public int get_Level();
    public DataTable get_Databases();
    public void set_Databases(DataTable value);
    public DataTable get_SchemaPrefixes();
    public void set_SchemaPrefixes(DataTable value);
    internal void AddSpecialQuery(string database, string query);
    private string GetSql(DataRow dbs, string sql);
    private string GetUse(DataRow dbs);
    private string SubstituteSchemaPrefix(DataRow dbs, string sql);
    internal bool get_MultipleDatabases();
    private bool IsDatabaseListEqual(DataRow db1, DataRow db2);
    public StringCollection BuildSql();
    internal string GetSingleDatabaseSql();
}
[ComVisibleAttribute("False")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject : SqlObjectBase {
    public Assembly ResourceAssembly { get; }
    public virtual void Initialize(object ci, XPathExpressionBlock block);
    public sealed virtual void LoadInitData(string file, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    public void LoadInitDataFromAssembly(Assembly assemblyObject, string file, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    private void LoadInitDataFromAssemblyInternal(Assembly assemblyObject, string file, ServerVersion ver, string alias, StringCollection requestedFields, bool store, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    protected internal virtual void LoadAndStore(XmlReadDoc xrd, Assembly assemblyObject, StringCollection requestedFields);
    internal virtual void Load(XmlReadDoc xrd, Assembly assembly, StringCollection requestedFields);
    private void IncludeFile(XmlReadInclude xri, Assembly assembly, StringCollection requestedFields);
    public abstract virtual Assembly get_ResourceAssembly();
}
[ComVisibleAttribute("False")]
public abstract class Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase : EnumObject {
    private StatementBuilder m_sb;
    private ParentLink m_parentLink;
    private ConditionedSqlList m_conditionedSqlList;
    private ConditionedSqlList m_propertyLinkList;
    private ConditionedSqlList m_postProcessList;
    private RequestParentSelect m_RequestParentSelect;
    private SortedList m_OrderByRedirect;
    private SortedList m_SpecialQuery;
    private ArrayList m_LinkFields;
    private bool m_distinct;
    public StatementBuilder StatementBuilder { get; public set; }
    internal ParentLink ParentLink { get; internal set; }
    protected RequestParentSelect RequestParentSelect { get; protected set; }
    protected SortedList OrderByRedirect { get; }
    protected SortedList SpecialQuery { get; }
    protected ConditionedSqlList ConditionedSqlList { get; protected set; }
    protected ConditionedSqlList PropertyLinkList { get; protected set; }
    protected ConditionedSqlList PostProcessList { get; protected set; }
    protected bool Distinct { get; protected set; }
    protected SqlRequest SqlRequest { get; }
    internal string ObjectName { get; }
    public ResultType[] ResultTypes { get; }
    private bool CalculateParentRequest { get; }
    public bool SupportsParameterization { get; }
    public StatementBuilder get_StatementBuilder();
    public void set_StatementBuilder(StatementBuilder value);
    internal ParentLink get_ParentLink();
    internal void set_ParentLink(ParentLink value);
    protected RequestParentSelect get_RequestParentSelect();
    protected void set_RequestParentSelect(RequestParentSelect value);
    protected SortedList get_OrderByRedirect();
    protected SortedList get_SpecialQuery();
    protected ConditionedSqlList get_ConditionedSqlList();
    protected void set_ConditionedSqlList(ConditionedSqlList value);
    protected ConditionedSqlList get_PropertyLinkList();
    protected void set_PropertyLinkList(ConditionedSqlList value);
    protected ConditionedSqlList get_PostProcessList();
    protected void set_PostProcessList(ConditionedSqlList value);
    protected bool get_Distinct();
    protected void set_Distinct(bool value);
    internal void SetUrn(Urn urn);
    protected SqlRequest get_SqlRequest();
    internal string get_ObjectName();
    public SqlObjectProperty GetSqlProperty(string field, ObjectPropertyUsages usage);
    public virtual ResultType[] get_ResultTypes();
    private void AddRequestProperty(SqlObjectProperty prop, bool triggered);
    private void RegisterPostProcessHits();
    private void AddRequestProperties();
    public virtual string AddFilterProperty(string name);
    public virtual string AddOrderByProperty(string name);
    public virtual string AddOrderByProperty(string name, bool overrideFlags);
    protected virtual string AddLinkProperty(string name);
    protected void AddConditionalsJustPropDependencies(string name);
    protected virtual void AddConditionals(string field);
    private void RetrieveParentRequestLinks(SqlRequest sr);
    private void PropagateRequestedParentProperties(SqlRequest sr);
    public virtual Request RetrieveParentRequest();
    internal void AddLinkProperties(LinkFieldType lft, ArrayList linkFields);
    private void AddParentLinkProperties();
    private void AddParentLinkPropertiesParent();
    private void AddParentLinkPropertiesLocal();
    protected virtual void IntegrateParentResult(EnumResult erParent);
    private void AddXpathFilter();
    internal void PrepareGetData(EnumResult erParent);
    public virtual EnumResult GetData(EnumResult erParent);
    protected virtual void BeforeStatementExecuted(string levelName);
    protected void BuildStatement(EnumResult erParent);
    internal void AddSpecialQuery(string database, string query);
    private void AddSpecialQueryToResult(SqlEnumResult result);
    internal EnumResult BuildResult(EnumResult result);
    protected object FillDataWithUseFailure(SqlEnumResult sqlresult, ResultType resultType);
    protected virtual object FillData(ResultType resultType, StringCollection sql, object connectionInfo, StatementBuilder sb);
    protected void ClearHits();
    public sealed virtual string AddPropertyForFilter(string name);
    public sealed virtual string AddConstantForFilter(string constantValue);
    private void AddLinkFields(ArrayList linkfields);
    private bool get_CalculateParentRequest();
    protected void ResolveLocalLinkLinks();
    private void AddPostProcessTriggers();
    protected void StoreInitialState();
    protected void RestoreInitialState();
    private string GetRequestedParentSelect();
    private void FillPrefixPostfix();
    protected internal virtual string ResolveComputedField(string fieldName);
    public virtual void PostProcess(EnumResult erChildren);
    internal string GetAliasPropertyName(string prop);
    protected void AddOrderByInDatabase();
    protected void AddOrderByAcrossDatabases();
    private void AddOrderByDatabase(bool bAcrossDatabases);
    private void AddOrderByDatabase(string field, Direction dir, bool bAcrossDatabases, bool bHiddenField);
    internal string GetFixedFilterValue(string field);
    public virtual bool get_SupportsParameterization();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty : ObjectProperty {
    private string m_value;
    private string m_dbType;
    private string m_size;
    private string m_Alias;
    private string m_SessionValue;
    private bool m_bCast;
    private LinkMultiple m_LinkMultiple;
    public ArrayList LinkFields { get; }
    public string Value { get; public set; }
    public string SessionValue { get; public set; }
    public string DBType { get; }
    public string Size { get; }
    public string Alias { get; public set; }
    public SqlObjectProperty(XmlReadProperty xrp);
    public ArrayList get_LinkFields();
    public string get_Value();
    public void set_Value(string value);
    public string GetValue(SqlObjectBase o);
    internal string GetTypeWithSize();
    internal string GetValueWithCast(SqlObjectBase o);
    private void InitSessionValue(SqlObjectBase o);
    public string get_SessionValue();
    public void set_SessionValue(string value);
    public string get_DBType();
    public string get_Size();
    public string get_Alias();
    public void set_Alias(string value);
    public void Add(SqlObjectBase o, bool isTriggered);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess : ConditionedSql {
    private string m_className;
    private Assembly m_assembly;
    private StringCollection m_triggeredFields;
    private SortedList m_HitFields;
    public StringCollection TriggeredFields { get; }
    protected bool AcceptsMultipleHits { get; }
    public SqlPostProcess(XmlReadConditionedStatementPostProcess xrpp, Assembly asembly);
    public StringCollection get_TriggeredFields();
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
    protected virtual bool get_AcceptsMultipleHits();
    internal void Register(SqlObjectBase obj);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementPostProcess xrcs, Assembly asembly);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink : ConditionedSql {
    private string m_table;
    private string m_filter;
    private string m_alias;
    private bool m_bExpressionIsForTableName;
    private JoinType m_joinType;
    public string Table { get; public set; }
    public SqlPropertyLink(XmlReadPropertyLink xrpl);
    public SqlPropertyLink(XmlReadProperty xrp);
    public SqlPropertyLink(XmlReadSettings xrs);
    public static void AddAll(ConditionedSqlList list, XmlReadPropertyLink xrpl);
    public static void Add(ConditionedSqlList list, XmlReadProperty xrp);
    public static void Add(ConditionedSqlList list, XmlReadSettings xrs);
    public string get_Table();
    public void set_Table(string value);
    public string GetTableNameWithAlias(SqlObjectBase obj);
    public string GetFilter(SqlObjectBase obj);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest : Request {
    private ArrayList m_listLinkField;
    private StringCollection m_PrefixPostfixFields;
    private bool m_bResolveDatabases;
    public bool ResolveDatabases { get; public set; }
    public ArrayList LinkFields { get; }
    internal StringCollection PrefixPostfixFields { get; internal set; }
    public SqlRequest(Request reqUser);
    public void SetLinkFields(ArrayList list);
    public void set_ResolveDatabases(bool value);
    public bool get_ResolveDatabases();
    public ArrayList get_LinkFields();
    internal StringCollection get_PrefixPostfixFields();
    internal void set_PrefixPostfixFields(StringCollection value);
    internal void MergeLinkFileds(SqlRequest req);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection : SfcConnection {
    private ServerConnection sqlServerConnection;
    public bool IsOpen { get; }
    public string ServerInstance { get; public set; }
    public Version ServerVersion { get; public set; }
    public ServerType ConnectionType { get; }
    public int ConnectTimeout { get; public set; }
    public int StatementTimeout { get; public set; }
    public ServerConnection ServerConnection { get; }
    public SqlStoreConnection(SqlConnection sqlConnection);
    private SqlStoreConnection(ServerConnection connection);
    public virtual object ToEnumeratorObject();
    public virtual int GetHashCode();
    public virtual bool Equals(SfcConnection conn);
    public virtual bool Connect();
    public virtual bool Disconnect();
    public virtual ISfcConnection Copy();
    public virtual bool get_IsOpen();
    public virtual string get_ServerInstance();
    public virtual void set_ServerInstance(string value);
    public virtual Version get_ServerVersion();
    public virtual void set_ServerVersion(Version value);
    public virtual ServerType get_ConnectionType();
    public virtual int get_ConnectTimeout();
    public virtual void set_ConnectTimeout(int value);
    public virtual int get_StatementTimeout();
    public virtual void set_StatementTimeout(int value);
    public ServerConnection get_ServerConnection();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.SQLToolsCommonTraceLvl : ValueType {
    public static UInt32 L1;
    public static UInt32 L2;
    public static UInt32 L3;
    public static UInt32 L4;
    public static UInt32 Always;
    public static UInt32 Warning;
    public static UInt32 Error;
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder : object {
    private StringBuilder m_urn;
    private StringBuilder m_prefix;
    private StringBuilder m_fields;
    private StringBuilder m_from;
    private StringBuilder m_where;
    private StringBuilder m_postfix;
    private StringBuilder m_orderBy;
    private ArrayList m_ParentProps;
    private int m_NonTriggeredProps;
    private StringBuilder m_condition;
    private SortedList m_postProcess;
    private bool m_bDistinct;
    private bool m_bStoredPropsAdded;
    private StringBuilder m_InternalSelect;
    private bool bFirstJoinIsClassic;
    internal ArrayList ParentProperties { get; }
    internal int NonTriggeredProperties { get; }
    internal SortedList PostProcessList { get; }
    public bool Distinct { get; public set; }
    public bool IsFirstJoin { get; }
    public StringBuilder From { get; public set; }
    public string SqlStatement { get; }
    public string SqlPostfix { get; }
    internal ArrayList get_ParentProperties();
    internal void SetInternalSelect(StringBuilder sql);
    internal int get_NonTriggeredProperties();
    internal SortedList get_PostProcessList();
    public bool get_Distinct();
    public void set_Distinct(bool value);
    public bool get_IsFirstJoin();
    public bool IsEmpty(StringBuilder s);
    public StringBuilder get_From();
    public void set_From(StringBuilder value);
    protected internal static void AddElement(StringBuilder str, string value, string delimStart, string delimEnd, string delimElems);
    public void AddUrn(string value);
    public void AddPrefix(string value);
    public void AddCondition(string value);
    public void AddPostfix(string value);
    public void AddFields(string value);
    public void AddFrom(string value);
    public void AddJoin(string value);
    public void AddWhere(string value);
    public void AddOrderBy(string str);
    private void AddOrderBy(string orderByValue, Direction dir);
    public void AddOrderBy(string prop, string orderByValue, Direction dir);
    public void AddProperty(string name, string value);
    public void Merge(StatementBuilder sb);
    internal StringBuilder InternalSelect();
    public string get_SqlStatement();
    public string get_SqlPostfix();
    internal void ClearPrefixPostfix();
    public StatementBuilder MakeCopy();
    internal void StoreParentProperty(SqlObjectProperty sop, bool bTriggered);
    public string GetSqlNoPrefixPostfix();
    internal void AddStoredProperties();
    internal string GetOrderBy();
    internal void ClearOrderBy();
    internal string GetCreateTemporaryTableSqlConnect(string tableName);
    private void AddColumn(StringBuilder sqlCreate, SqlObjectProperty prop, Boolean& bFirst, bool bUseAlias);
    internal static string SelectAndDrop(string tableName, string sOrderBy);
    public void ClearFailCondition();
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Sdk.Sfc.StringDifferencing : object {
    public static CultureInfo Culture { get; public set; }
    public static string NotRecognizedGraph { get; }
    public static string CannotFindMetadataProvider { get; }
    public static string NotRecognizedProvider { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_NotRecognizedGraph();
    public static string get_CannotFindMetadataProvider();
    public static string get_NotRecognizedProvider();
    public static string MismatchType(string type, string provider);
    public static string FailedProviderLookup(string provider, string node);
    public static string FailedProviderOperation(string provider, string node);
}
public static class Microsoft.SqlServer.Management.Sdk.Sfc.TraceHelper : object {
    private static UInt32 TraceLevelAssert;
    private static UInt32 TraceLevelException;
    private static string AddDate(string str);
    public static void Trace(string strComponentName, string strFormat, Object[] args);
    public static void Trace(string strComponentName, UInt32 traceLevel, string strFormat, Object[] args);
    public static void Assert(bool condition);
    public static void Assert(bool condition, string strFormat);
    public static void LogExCatch(Exception ex);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.UnknownPropertyEnumeratorException : EnumeratorException {
    public UnknownPropertyEnumeratorException(string propertyName);
    public UnknownPropertyEnumeratorException(string propertyName, Exception innerException);
    private UnknownPropertyEnumeratorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.UnknownTypeEnumeratorException : EnumeratorException {
    public UnknownTypeEnumeratorException(string typeName);
    public UnknownTypeEnumeratorException(string typeName, Exception innerException);
    private UnknownTypeEnumeratorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.UpgradeSession : object {
    public virtual List`1<KeyValuePair`2<string, object>> UpgradeInstance(List`1<SfcInstanceSerializedData> sfcInstanceData, int fileVersion, string smlUri, Dictionary`2<string, object> sfcCache);
    public object UpgradeInstance(Type newInstanceType, List`1<SfcInstanceSerializedData> sfcInstanceData);
    public virtual void PostProcessUpgrade(Dictionary`2<string, object> sfcCache, int fileVersion);
    public virtual bool IsUpgradeRequiredOnType(string instanceType, int fileVersion);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Urn : object {
    private IUrn impl;
    private int hashCode;
    private static CultureInfo DefaultComparisonCulture;
    private static CompareOptions[] DefaultComparisonOptions;
    public XPathExpression XPathExpression { get; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    public string DomainInstanceName { get; }
    public string Type { get; }
    public Urn Parent { get; }
    public Urn(string value);
    internal Urn(IUrn keychain);
    private static Urn();
    public XPathExpression get_XPathExpression();
    public string get_Value();
    public void set_Value(string value);
    public string get_DomainInstanceName();
    internal IUrn GetIUrn();
    public static bool op_Equality(Urn u1, Urn u2);
    public static bool op_Inequality(Urn urn1, Urn urn2);
    public virtual bool Equals(object o);
    public string get_Type();
    public Urn get_Parent();
    public static string op_Implicit(Urn urn);
    public static Urn op_Implicit(string str);
    public virtual string ToString();
    public virtual int GetHashCode();
    public bool Fixed(object ci);
    public string GetAttribute(string attributeName, string type);
    public string GetAttribute(string attributeName);
    public string GetNameForType(string type);
    [ComVisibleAttribute("False")]
public static string EscapeString(string value);
    [ComVisibleAttribute("False")]
public static string UnEscapeString(string escapedValue);
    public static bool Compare(Urn u1, Urn u2, CompareOptions[] compInfoList, CultureInfo cultureInfo);
    public bool IsValidUrn();
    public bool IsValidUrnSkeleton();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.UrnImpl : object {
    private string m_urn;
    private XPathExpression m_xpath;
    public XPathExpression XPathExpression { get; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    public string DomainInstanceName { get; }
    public UrnImpl(string value);
    public sealed virtual XPathExpression get_XPathExpression();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_DomainInstanceName();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.Util : object {
    public static string DbTypeToClrType(string strDBType);
    protected EnumResult TransformToRequest(DataSet ds, ResultType res);
    public static string EscapeString(string value, char escapeCharacter);
    internal static string MakeSqlString(string value);
    public static Assembly LoadAssembly(string assemblyName);
    internal static object CreateObjectInstance(Assembly assembly, string objectType);
    internal static string UnEscapeString(string escapedValue, char startEscapeChar, char escapeChar, Int32& index);
    internal static string UnEscapeString(string escapedValue, char startEscapeChar, char escapeChar, char partSeperator, Int32& index);
    internal static StringCollection SplitNames(string name);
    internal static StringCollection SplitNames(string name, char partSeperator);
    internal static string EscapeLikePattern(string pattern);
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.ValidationMethod : object {
    public static string Create;
    public static string Alter;
    public static string Rename;
    private static ValidationMethod();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.ValidationResult : object {
    private string text;
    private string bindingKey;
    private Exception errorDetails;
    private bool isWarning;
    public string Text { get; }
    public string BindingKey { get; }
    public Exception ErrorDetails { get; }
    public bool IsWarning { get; }
    internal ValidationResult(string text, string bindingKey, Exception errorDetails, bool isWarning);
    public string get_Text();
    public string get_BindingKey();
    public Exception get_ErrorDetails();
    public bool get_IsWarning();
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState : object {
    private List`1<ValidationResult> results;
    public IList`1<ValidationResult> Results { get; }
    public bool HasErrors { get; }
    public bool HasWarnings { get; }
    public ValidationState(string message, string bindingKey, bool isWarning);
    public ValidationState(Exception error, string bindingKey, bool isWarning);
    public ValidationState(string message, Exception error, string bindingKey, bool isWarning);
    public ValidationState(string message, string bindingKey);
    public ValidationState(Exception error, string bindingKey);
    public ValidationState(string message, Exception error, string bindingKey);
    public void AddError(string message, string bindingKey);
    public void AddError(Exception error, string bindingKey);
    public void AddError(string message, Exception error, string bindingKey);
    public void AddWarning(string message, string bindingKey);
    public void AddWarning(Exception error, string bindingKey);
    public void AddWarning(string message, Exception error, string bindingKey);
    public IList`1<ValidationResult> get_Results();
    public bool get_HasErrors();
    public bool get_HasWarnings();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.XmlCharType : object {
    public static int FWHITESPACE;
    public static int FLETTER;
    public static int FSTARTNAME;
    public static int FNAME;
    public static int FCHARDATA;
    public static int FPUBLICID;
    public static char MAXWCHAR;
    public static int MAXCHARDATA;
    private static string s_PublicID;
    private static Byte[] s_CharProperties;
    private static XmlCharType();
    private static void SetProperties(string ranges, byte value);
    public static bool IsWhiteSpace(char ch);
    public static bool IsLetter(char ch);
    public static bool IsDigit(char ch);
    public static bool IsHexDigit(char ch);
    public static bool IsCombiningChar(char ch);
    public static bool IsExtender(char ch);
    public static bool IsNameChar(char ch);
    public static bool IsStartNameChar(char ch);
    public static bool IsNCNameChar(char ch);
    public static bool IsStartNCNameChar(char ch);
    public static bool IsCharData(char ch);
    public static bool IsPubidChar(char ch);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead : object {
    private XmlTextReader m_reader;
    private string m_alias;
    private bool m_closed;
    private ServerVersion m_version;
    private DatabaseEngineType m_databaseEngineType;
    private DatabaseEngineEdition m_databaseEngineEdition;
    protected static string ATTR_MIN_MAJOR;
    protected static string ATTR_MAX_MAJOR;
    protected static string ATTR_MIN_MINOR;
    protected static string ATTR_MAX_MINOR;
    protected static string ATTR_MIN_BUILD;
    protected static string ATTR_MAX_BUILD;
    protected static string ATTR_CLOUD_MIN_MAJOR;
    protected static string ATTR_CLOUD_MAX_MAJOR;
    protected static string ATTR_CLOUD_MIN_MINOR;
    protected static string ATTR_CLOUD_MAX_MINOR;
    protected static string ATTR_CLOUD_MIN_BUILD;
    protected static string ATTR_CLOUD_MAX_BUILD;
    protected static string ATTR_DATAWAREHOUSE_ENABLED;
    protected XmlTextReader Reader { get; protected set; }
    protected bool Closed { get; protected set; }
    public DatabaseEngineType DatabaseEngineType { get; public set; }
    public DatabaseEngineEdition DatabaseEngineEdition { get; public set; }
    public ServerVersion Version { get; public set; }
    public string Alias { get; public set; }
    public XmlRead(XmlRead xmlReader);
    public XmlRead(ServerVersion version, string serverAlias, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    protected XmlTextReader get_Reader();
    protected void set_Reader(XmlTextReader value);
    protected bool get_Closed();
    protected void set_Closed(bool value);
    public DatabaseEngineType get_DatabaseEngineType();
    public void set_DatabaseEngineType(DatabaseEngineType value);
    public DatabaseEngineEdition get_DatabaseEngineEdition();
    public void set_DatabaseEngineEdition(DatabaseEngineEdition value);
    public ServerVersion get_Version();
    public void set_Version(ServerVersion value);
    public string get_Alias();
    public void set_Alias(string value);
    public virtual void Close();
    public virtual void Skip();
    protected bool IsElementWithCheckVersion(string elemName);
    protected string GetAliasString(string str);
    protected static StringCollection GetFields(string fields);
    protected string GetTextOfElement();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement : XmlReadRepeated {
    public string Sql { get; }
    public StringCollection Fields { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadConditionedStatement(XmlRead xmlReader);
    public string get_Sql();
    public StringCollection get_Fields();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementFailCondition : XmlReadConditionedStatement {
    public XmlReadConditionedStatementFailCondition(XmlRead xmlReader);
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostfix : XmlReadConditionedStatement {
    public XmlReadConditionedStatementPostfix(XmlRead xmlReader);
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess : XmlReadRepeated {
    public string ClassName { get; }
    public StringCollection Fields { get; }
    public StringCollection TriggeredFields { get; }
    public XmlReadConditionedStatementPostProcess(XmlRead xmlReader);
    public string get_ClassName();
    public StringCollection get_Fields();
    public StringCollection get_TriggeredFields();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPrefix : XmlReadConditionedStatement {
    public XmlReadConditionedStatementPrefix(XmlRead xmlReader);
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc : XmlRead {
    private Stream m_fs;
    public XmlReadSettings Settings { get; }
    public XmlReadProperties Properties { get; }
    public XmlReadDoc(ServerVersion version, string serverAlias, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    public void LoadFile(Assembly a, string strFile);
    public virtual void Close();
    public bool ReadUnion();
    public XmlReadSettings get_Settings();
    public XmlReadProperties get_Properties();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadInclude : XmlRead {
    public string File { get; }
    public string TableAlias { get; }
    public StringCollection RequestedFields { get; }
    public XmlReadInclude(XmlRead xmlReader);
    public string get_File();
    public string get_TableAlias();
    public StringCollection get_RequestedFields();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadLinkFields : XmlReadRepeated {
    public LinkFieldType Type { get; }
    public string Field { get; }
    public string DefaultValue { get; }
    public XmlReadLinkFields(XmlRead xmlReader);
    public LinkFieldType get_Type();
    public string get_Field();
    public string get_DefaultValue();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink : XmlRead {
    public string No { get; }
    public string Expression { get; }
    public XmlReadLinkFields LinkFields { get; }
    public XmlReadMultipleLink(XmlRead xmlReader);
    public string get_No();
    public string get_Expression();
    public XmlReadLinkFields get_LinkFields();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadOrderByRedirect : XmlReadRepeated {
    public string Field { get; }
    public StringCollection RedirectFields { get; }
    public XmlReadOrderByRedirect(XmlRead xmlReader);
    public string get_Field();
    public StringCollection get_RedirectFields();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadParentLink : XmlRead {
    public XmlReadSimpleParentLink SimpleParentLink { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadParentLink(XmlRead xmlReader);
    public XmlReadSimpleParentLink get_SimpleParentLink();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperties : XmlRead {
    public XmlReadProperty Property { get; }
    public XmlReadInclude Include { get; }
    public XmlReadProperties(XmlRead xmlReader);
    public XmlReadProperty get_Property();
    public XmlReadInclude get_Include();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty : XmlRead {
    public string Name { get; }
    public bool ReadOnly { get; }
    public string ClrType { get; }
    public bool ExtendedType { get; }
    public string DbType { get; }
    public bool Expensive { get; }
    public bool Cast { get; }
    public bool Hidden { get; }
    public ObjectPropertyUsages Usage { get; }
    public string Value { get; }
    public string Table { get; }
    public string Link { get; }
    public string Size { get; }
    public bool HasPropertyLink { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadProperty(XmlRead xmlReader);
    public string get_Name();
    public bool get_ReadOnly();
    public string get_ClrType();
    public bool get_ExtendedType();
    public string get_DbType();
    public bool get_Expensive();
    public bool get_Cast();
    public bool get_Hidden();
    public ObjectPropertyUsages get_Usage();
    public string get_Value();
    public string get_Table();
    public string get_Link();
    public string get_Size();
    public bool get_HasPropertyLink();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink : XmlReadRepeated {
    public StringCollection Fields { get; }
    public string Table { get; }
    public string TableAlias { get; }
    public string InnerJoin { get; }
    public bool ExpressionIsForTableName { get; }
    public string LeftJoin { get; }
    public string Filter { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadPropertyLink(XmlRead xmlReader);
    public StringCollection get_Fields();
    public string get_Table();
    public string get_TableAlias();
    public string get_InnerJoin();
    public bool get_ExpressionIsForTableName();
    public string get_LeftJoin();
    public string get_Filter();
    public virtual bool Next();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadRepeated : XmlRead {
    public XmlReadRepeated(XmlRead xmlReader);
    public virtual bool Next();
    public bool Next(string elemName);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings : XmlRead {
    private static UInt32 disambiguationVariable;
    private static object disambiguationLock;
    public string MainTable { get; }
    public string AdditionalFilter { get; }
    public bool Distinct { get; }
    public bool HasPropertyLink { get; }
    public XmlReadParentLink ParentLink { get; }
    public XmlReadConditionedStatementFailCondition FailCondition { get; }
    public XmlRequestParentSelect RequestParentSelect { get; }
    public XmlReadInclude Include { get; }
    public XmlReadPropertyLink PropertyLink { get; }
    public XmlReadConditionedStatementPrefix Prefix { get; }
    public XmlReadConditionedStatementPostfix Postfix { get; }
    public XmlReadConditionedStatementPostProcess PostProcess { get; }
    public XmlReadOrderByRedirect OrderByRedirect { get; }
    public XmlReadSpecialQuery SpecialQuery { get; }
    public XmlReadSettings(XmlRead xmlReader);
    private static XmlReadSettings();
    public string get_MainTable();
    public string get_AdditionalFilter();
    public bool get_Distinct();
    public bool get_HasPropertyLink();
    public XmlReadParentLink get_ParentLink();
    public XmlReadConditionedStatementFailCondition get_FailCondition();
    public XmlRequestParentSelect get_RequestParentSelect();
    public XmlReadInclude get_Include();
    public XmlReadPropertyLink get_PropertyLink();
    public XmlReadConditionedStatementPrefix get_Prefix();
    public XmlReadConditionedStatementPostfix get_Postfix();
    public XmlReadConditionedStatementPostProcess get_PostProcess();
    public XmlReadOrderByRedirect get_OrderByRedirect();
    public XmlReadSpecialQuery get_SpecialQuery();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSimpleParentLink : XmlReadRepeated {
    public string Local { get; }
    public string Parent { get; }
    public XmlReadSimpleParentLink(XmlRead xmlReader);
    public string get_Local();
    public string get_Parent();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSpecialQuery : XmlReadConditionedStatement {
    public string Database { get; }
    public string Query { get; }
    public XmlReadSpecialQuery(XmlRead xmlReader);
    public string get_Database();
    public string get_Query();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelect : XmlRead {
    public XmlRequestParentSelectField Field { get; }
    public XmlRequestParentSelect(XmlRead xmlReader);
    public XmlRequestParentSelectField get_Field();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelectField : XmlReadRepeated {
    public string Name { get; }
    public XmlRequestParentSelectField(XmlRead xmlReader);
    public string get_Name();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility : object {
    public static bool SelectChildrenByName(XmlTextReader reader, string strName);
    public static bool SelectChildrenByAttribute(XmlTextReader reader, string strAttribute, string strValue);
    public static bool SelectNextSibling(XmlTextReader reader);
    public static bool SelectNextElementOnLevel(XmlTextReader reader);
    public static bool SelectElementByName(XmlTextReader reader, string strName);
    public static bool GetFirstElementOnLevel(XmlTextReader reader);
    public static bool GoDownOneLevel(XmlTextReader reader);
    public static bool GoUpOneLevel(XmlTextReader reader);
    public static bool SelectNextElement(XmlTextReader reader);
    public static bool SelectNextElement(XmlTextReader reader, string strName);
    public static bool IsElement(XmlTextReader reader, string strName);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XPathException : EnumeratorException {
    private String[] _pArgs;
    public XPathExceptionCode ErrorCode { get; }
    public string Message { get; }
    public XPathException(string msg);
    public XPathException(string msg, Exception e);
    protected XPathException(SerializationInfo info, StreamingContext context);
    internal XPathException(XPathExceptionCode hr);
    internal XPathException(XPathExceptionCode hr, String[] args);
    internal XPathException(XPathExceptionCode hr, string arg);
    public XPathExceptionCode get_ErrorCode();
    public virtual string get_Message();
}
public enum Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode : Enum {
    public int value__;
    public static XPathExceptionCode Success;
    public static XPathExceptionCode UnclosedString;
    public static XPathExceptionCode TokenExpected;
    public static XPathExceptionCode NodeTestExpected;
    public static XPathExceptionCode ExpressionExpected;
    public static XPathExceptionCode NumberExpected;
    public static XPathExceptionCode BooleanExpected;
    public static XPathExceptionCode QueryExpected;
    public static XPathExceptionCode UnknownMethod;
    public static XPathExceptionCode TestExpected;
    public static XPathExceptionCode InvalidArgument;
    public static XPathExceptionCode InvalidNumArgs;
    public static XPathExceptionCode InvalidName;
    public static XPathExceptionCode InvalidNodeType;
    public static XPathExceptionCode InvalidToken;
    public static XPathExceptionCode FunctionExpected;
    public static XPathExceptionCode NodeSetExpected;
    public static XPathExceptionCode NoXPathActive;
    public static XPathExceptionCode NotSupported;
    public static XPathExceptionCode InvalidPattern;
    public static XPathExceptionCode BadQueryObject;
    public static XPathExceptionCode InvalidDataRecordFilter;
    public static XPathExceptionCode InvalidPrefix;
    public static XPathExceptionCode NoSelectedSet;
    public static XPathExceptionCode MovedFromSelection;
    public static XPathExceptionCode ConstantExpected;
    public static XPathExceptionCode InvalidVariable;
    public static XPathExceptionCode UndefinedXsltContext;
    public static XPathExceptionCode BadContext;
    public static XPathExceptionCode Last;
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression : object {
    private XPathExpressionBlock[] xPathBlocks;
    public XPathExpressionBlock Item { get; }
    public int Length { get; }
    public string ExpressionSkeleton { get; }
    public XPathExpression(string strXPathExpression);
    public XPathExpression(IList`1<XPathExpressionBlock> blocks);
    internal void Compile(string strXPathExpression);
    private void Load(AstNode ast);
    public virtual XPathExpressionBlock get_Item(int index);
    public int get_Length();
    public virtual string ToString();
    public virtual int GetHashCode();
    public string get_ExpressionSkeleton();
    public string BlockExpressionSkeleton(int blockIndex);
    internal static bool Compare(XPathExpression x1, XPathExpression x2, CompareOptions[] compInfoList, CultureInfo cultureInfo);
    public string GetAttribute(string attributeName, string type);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock : object {
    private string m_name;
    private FilterNode m_filter;
    private KeyValuePair`2[] m_fixedProperties;
    private static Dictionary`2<string, string> CachedNames;
    public string Name { get; public set; }
    public FilterNode Filter { get; public set; }
    private KeyValuePair`2[] FixedPropertiesInternal { get; }
    public SortedList FixedProperties { get; }
    public XPathExpressionBlock(string name, FilterNode filter);
    private static XPathExpressionBlock();
    public XPathExpressionBlock Copy();
    public string get_Name();
    public void set_Name(string value);
    public FilterNode get_Filter();
    public void set_Filter(FilterNode value);
    public virtual string ToString();
    public virtual int GetHashCode();
    private int IndexOfFixedProperty(string name);
    private void AddFixedProperty(string name, object fnc);
    private void AddFixedProperty(FilterNodeOperator fno);
    private bool ComputeFixedProperties(FilterNode node);
    public static string GetUniqueAttribute(FilterNode filter);
    private KeyValuePair`2[] get_FixedPropertiesInternal();
    public SortedList get_FixedProperties();
    public string GetAttributeFromFilter(string attributeName);
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlockImpl : object {
    private XPathExpressionBlock xpBlock;
    private Dictionary`2<string, object> fieldDict;
    private string Microsoft.SqlServer.Management.Sdk.Sfc.IUrnFragment.Name { get; }
    private Dictionary`2<string, object> Microsoft.SqlServer.Management.Sdk.Sfc.IUrnFragment.FieldDictionary { get; }
    public XPathExpressionBlockImpl(XPathExpressionBlock xpBlock);
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.IUrnFragment.get_Name();
    private sealed virtual override Dictionary`2<string, object> Microsoft.SqlServer.Management.Sdk.Sfc.IUrnFragment.get_FieldDictionary();
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.XPathHandler : object {
    private XPathScanner _Scanner;
    private static Hashtable _MethodTable;
    private static RType[] temparray1;
    private static RType[] temparray2;
    private static RType[] temparray3;
    private static RType[] temparray4;
    private static RType[] temparray5;
    private static RType[] temparray6;
    private static RType[] temparray7;
    private static RType[] temparray8;
    private static RType[] temparray9;
    private static string _OrString;
    private static string _AndString;
    internal static Hashtable MethodTable { get; }
    private static XPathHandler();
    private void NameReset();
    internal AstNode Run(XPathScanner scanner);
    private AstNode ParseLocationPath(AstNode qyInput);
    private AstNode ParseRelativeLocationPath(AstNode qyInput);
    private AstNode ParseStep(AstNode qyInput, bool forQyCond);
    private AstNode ParseBasis(AstNode qyInput);
    private AstNode ConstructAxesQuery(AstNode qyInput);
    private AstNode ParsePredicate(AstNode qyInput);
    private AstNode ParseXPointer(AstNode qyInput);
    private AstNode ParseAndExpr(AstNode qyInput);
    private AstNode ParseEqualityExpr(AstNode qyInput);
    private AstNode ParseRelationalExpr(AstNode qyInput);
    private AstNode ParseAdditiveExpr(AstNode qyInput);
    private AstNode ParseMultiplicativeExpr(AstNode qyInput);
    private AstNode ParseUnaryExpr(AstNode qyInput);
    private AstNode ParseUnionExpr(AstNode qyInput);
    private AstNode ParsePathExpr(AstNode qyInput);
    private bool IsNodeType();
    private AstNode ParseFilterExpr(AstNode qyInput);
    private AstNode ParsePrimaryExpr(AstNode qyInput);
    private AstNode ParseMethod(AstNode qyInput);
    private void CheckToken(XPathTokenType t);
    private void IsValidType(XPathNodeType& type);
    internal static Hashtable get_MethodTable();
    private AstNode ParseXsltMethod(AstNode qyInput);
}
internal enum Microsoft.SqlServer.Management.Sdk.Sfc.XPathNodeType : Enum {
    public int value__;
    public static XPathNodeType Root;
    public static XPathNodeType Element;
    public static XPathNodeType Attribute;
    public static XPathNodeType Text;
    public static XPathNodeType SignificantWhitespace;
    public static XPathNodeType Whitespace;
    public static XPathNodeType ProcessingInstruction;
    public static XPathNodeType Comment;
    public static XPathNodeType All;
}
internal class Microsoft.SqlServer.Management.Sdk.Sfc.XPathScanner : object {
    private char _Lookahead;
    private string _PchNext;
    private int _PchNindex;
    private int _PchLength;
    private string _Tstring;
    private int _PchTokenIndex;
    private int _Ul;
    private XPathTokenType _Token;
    private string _Name;
    private double _Number;
    private string _Prefix;
    private string _Urn;
    private static Hashtable _AxesTable;
    private static Hashtable _FunctionTable;
    private bool _Axes;
    internal static Hashtable AxesTable { get; }
    internal static Hashtable FunctionTable { get; }
    internal char Lookahead { get; }
    internal bool Axes { get; }
    internal XPathTokenType Token { get; }
    internal string Name { get; internal set; }
    internal double Number { get; }
    internal string Prefix { get; internal set; }
    internal string Urn { get; internal set; }
    internal string PchToken { get; }
    internal string Tstring { get; }
    internal static Hashtable get_AxesTable();
    internal static Hashtable get_FunctionTable();
    internal char get_Lookahead();
    internal bool get_Axes();
    internal XPathTokenType get_Token();
    internal string get_Name();
    internal void set_Name(string value);
    internal double get_Number();
    internal string get_Prefix();
    internal void set_Prefix(string value);
    internal string get_Urn();
    internal void set_Urn(string value);
    internal string get_PchToken();
    internal string get_Tstring();
    internal void SetParseString(string parsestring);
    internal void Reset();
    internal void SkipSpace();
    internal void Advance();
    internal char TestAdvance();
    private void ScanString();
    private int ScanName(Int32& len);
    private void ScanNumber();
    private char NextChar();
    internal XPathTokenType NextToken();
}
