internal static class Microsoft.SqlServer.Management.XEventDbScoped.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
internal class Microsoft.SqlServer.Management.XEventDbScoped.Constants : object {
    public static string ModuleName;
    private static Constants();
}
internal class Microsoft.SqlServer.Management.XEventDbScoped.DatabaseEventProvider : object {
    private Event xevent;
    public DatabaseEventProvider(Event parent);
    public sealed virtual string GetCreateScript();
    public sealed virtual string GetDropScript();
}
internal class Microsoft.SqlServer.Management.XEventDbScoped.DatabaseSessionProvider : SessionProviderBase {
    public DatabaseSessionProvider(Session session);
}
internal class Microsoft.SqlServer.Management.XEventDbScoped.DatabaseTargetProvider : object {
    private Target target;
    private ServerConnection ServerConnection { get; }
    public DatabaseTargetProvider(Target parent);
    public sealed virtual string GetCreateScript();
    public sealed virtual string GetDropScript();
    public sealed virtual string GetTargetData();
    private ServerConnection get_ServerConnection();
}
public class Microsoft.SqlServer.Management.XEventDbScoped.DatabaseXEStore : BaseXEStore {
    public static string TypeTypeName;
    private static string NameSpace;
    private static string DomainName;
    private string name;
    private SfcConnectionContext context;
    [SfcIgnoreAttribute]
public SfcKey IdentityKey { get; }
    private SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.ConnectionContext { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainName { get; }
    [SfcIgnoreAttribute]
private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainInstanceName { get; }
    public string Name { get; protected set; }
    [SfcPropertyAttribute]
public string ServerName { get; }
    public DatabaseXEStore(SqlStoreConnection connection, string name);
    public DatabaseXEStore(SqlStoreConnection connection);
    public virtual string ToString();
    public virtual SfcKey get_IdentityKey();
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(ISfcConnection connection);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(SfcObjectQueryMode mode);
    private sealed virtual override SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.get_ConnectionContext();
    private sealed virtual override Type Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetType(string typeName);
    private sealed virtual override SfcKey Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetKey(IUrnFragment urnFragment);
    private sealed virtual override ISfcExecutionEngine Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetExecutionEngine();
    private sealed virtual override SfcTypeMetadata Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetTypeMetadata(string typeName);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.UseSfcStateManagement();
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainName();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainInstanceName();
    public virtual string get_Name();
    protected virtual void set_Name(string value);
    public virtual string get_ServerName();
    protected virtual SfcKey CreateIdentityKey();
    protected virtual IXEStoreProvider GetStoreProvider();
    protected virtual ISessionProvider GetSessionProivder(Session session);
    protected virtual ITargetProvider GetTargetProvider(Target target);
    protected virtual IEventProvider GetEventProvider(Event xevent);
}
internal class Microsoft.SqlServer.Management.XEventDbScoped.DatabaseXEStoreProvider : object {
    private DatabaseXEStore store;
    private ServerConnection serverConnection;
    private IComparer`1<string> comparer;
    public string DomainInstanceName { get; }
    private ServerConnection ServerConnection { get; }
    public DatabaseXEStoreProvider(DatabaseXEStore store);
    public sealed virtual ISfcExecutionEngine GetExecutionEngine();
    public sealed virtual ISfcConnection GetConnection(SfcObjectQueryMode mode);
    public sealed virtual string get_DomainInstanceName();
    public sealed virtual IComparer`1<string> GetComparer();
    private ServerConnection get_ServerConnection();
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.XEventDbScoped.ExceptionTemplates : object {
    public static CultureInfo Culture { get; public set; }
    public static string FileAlreadyExists { get; }
    public static string FileNotExist { get; }
    public static string ChangeNameForExistingSession { get; }
    public static string NewSessionMustContainEvent { get; }
    public static string ParentNull { get; }
    public static string NameNullEmpty { get; }
    public static string CannotSetNameForExistingObject { get; }
    public static string Expression2NotNull { get; }
    public static string InvalidProperty { get; }
    public static string CannotAddActionToExistingEvent { get; }
    public static string CannotChangeFieldForExistingEvent { get; }
    public static string CannotChangeFieldForExistingTarget { get; }
    public static string CannotSetEventInfoForExistingEvent { get; }
    public static string CannotSetTargetInfoForExistingTarget { get; }
    public static string CannotSetActionInfoForExistingAction { get; }
    public static string SaveTemplateForExistingSession { get; }
    public static string UnknownType { get; }
    public static string AlterValidationFailure { get; }
    public static string CannotReadTargetData { get; }
    public static string InvalidConnectionType { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_FileAlreadyExists();
    public static string get_FileNotExist();
    public static string get_ChangeNameForExistingSession();
    public static string get_NewSessionMustContainEvent();
    public static string get_ParentNull();
    public static string get_NameNullEmpty();
    public static string get_CannotSetNameForExistingObject();
    public static string get_Expression2NotNull();
    public static string get_InvalidProperty();
    public static string get_CannotAddActionToExistingEvent();
    public static string get_CannotChangeFieldForExistingEvent();
    public static string get_CannotChangeFieldForExistingTarget();
    public static string get_CannotSetEventInfoForExistingEvent();
    public static string get_CannotSetTargetInfoForExistingTarget();
    public static string get_CannotSetActionInfoForExistingAction();
    public static string get_SaveTemplateForExistingSession();
    public static string get_UnknownType();
    public static string get_AlterValidationFailure();
    public static string get_CannotReadTargetData();
    public static string get_InvalidConnectionType();
    public static string NoSuchCollection(string name);
    public static string UnsupportedKey(string key);
    public static string UnsupportedConnectionType(string type);
    public static string SqlExecutionFailure(string sql);
    public static string ChangePropertyForExistingEvent(string propertyName);
    public static string InvalidParameter(string param);
    public static string PackageNotExist(string name);
    public static string ObjectNotExist(string name);
    public static string PackageNameNotUnique(string name);
    public static string ObjectNameNotUnique(string name);
    public static string NoBlockingEventNotAllowedInNoEventLossSession(string sessionName, string eventName);
    public static string InvalidState(SfcObjectState current_state, SfcObjectState required_state);
    public static string ActionNameNotUnique(string name);
    public static string InvalidVersion(string version);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.XEventDbScoped.NetCoreHelpers : object {
    public static string UriSchemaHttps;
    public static string UriSchemaHttp;
    private static NetCoreHelpers();
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    public static Assembly LoadAssembly(string assemblyName);
    public static IntPtr ConvertSecureStringToBSTR(SecureString ss);
    [ExtensionAttribute]
public static int StringCompare(string firstString, string secondString, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static string StringToUpper(string str, CultureInfo culture);
    public static CultureInfo GetNewCultureInfo(int lcid);
    public static void ZeroFreeBSTR(IntPtr ps);
}
internal static class Microsoft.SqlServer.Management.XEventDbScoped.ProviderConstants : object {
    public static string Create;
    public static string Drop;
    public static string Alter;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.XEventDbScoped.XsdResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string xeconfig { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_xeconfig();
}
